
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aa0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017e0  0801abc0  0801abc0  0002abc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c3a0  0801c3a0  000302b0  2**0
                  CONTENTS
  4 .ARM          00000008  0801c3a0  0801c3a0  0002c3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c3a8  0801c3a8  000302b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801c3a8  0801c3a8  0002c3a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c3b0  0801c3b0  0002c3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0801c3b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302b0  2**0
                  CONTENTS
 10 .bss          000075a4  200002b0  200002b0  000302b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20007854  20007854  000302b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006befd  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009c74  00000000  00000000  0009c1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003750  00000000  00000000  000a5e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003408  00000000  00000000  000a95a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000377f6  00000000  00000000  000ac9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004440a  00000000  00000000  000e41a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110933  00000000  00000000  001285b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00238ee3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010364  00000000  00000000  00238f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0024929c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00249368  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002b0 	.word	0x200002b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801aba4 	.word	0x0801aba4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002b4 	.word	0x200002b4
 80001ec:	0801aba4 	.word	0x0801aba4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff f8eb 	bl	80001f0 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <println+0x34>)
 8001026:	f00b ff1e 	bl	800ce66 <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	2202      	movs	r2, #2
 8001030:	4904      	ldr	r1, [pc, #16]	; (8001044 <println+0x38>)
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <println+0x34>)
 8001034:	f00b ff17 	bl	800ce66 <HAL_UART_Transmit>
	#endif
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200064b0 	.word	0x200064b0
 8001044:	0801abc0 	.word	0x0801abc0

08001048 <print>:

void print(char* s){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff f8cd 	bl	80001f0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <print+0x28>)
 8001062:	f00b ff00 	bl	800ce66 <HAL_UART_Transmit>
	#endif
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200064b0 	.word	0x200064b0

08001074 <tone_freq>:
void no_print(char* s){
	//TODO Buffer function for Iridium
}

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	#if !NO_BUZZ
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8001080:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001084:	491c      	ldr	r1, [pc, #112]	; (80010f8 <tone_freq+0x84>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	fbb1 f3f3 	udiv	r3, r1, r3
 800108c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 800108e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	e01f      	b.n	80010e4 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010a4:	2108      	movs	r1, #8
 80010a6:	4815      	ldr	r0, [pc, #84]	; (80010fc <tone_freq+0x88>)
 80010a8:	f00a fefe 	bl	800bea8 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b2:	4813      	ldr	r0, [pc, #76]	; (8001100 <tone_freq+0x8c>)
 80010b4:	f007 fa34 	bl	8008520 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f006 fb25 	bl	8007708 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80010be:	2108      	movs	r1, #8
 80010c0:	480e      	ldr	r0, [pc, #56]	; (80010fc <tone_freq+0x88>)
 80010c2:	f00a ffb9 	bl	800c038 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <tone_freq+0x8c>)
 80010ce:	f007 fa27 	bl	8008520 <HAL_GPIO_WritePin>
		if (repeats > 1)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d902      	bls.n	80010de <tone_freq+0x6a>
			HAL_Delay(duration);
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f006 fb15 	bl	8007708 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3db      	bcc.n	80010a4 <tone_freq+0x30>
	}
	#endif
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	000f4240 	.word	0x000f4240
 80010fc:	20006424 	.word	0x20006424
 8001100:	40020400 	.word	0x40020400

08001104 <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
 8001108:	f240 4216 	movw	r2, #1046	; 0x416
 800110c:	2102      	movs	r1, #2
 800110e:	204b      	movs	r0, #75	; 0x4b
 8001110:	f7ff ffb0 	bl	8001074 <tone_freq>
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e008      	b.n	8001136 <buzz_startup_success+0x1e>
		buzz_success();
 8001124:	f7ff ffee 	bl	8001104 <buzz_success>
		HAL_Delay(1000);
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f006 faec 	bl	8007708 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	3301      	adds	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d9f3      	bls.n	8001124 <buzz_startup_success+0xc>
	}
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <MRT_Init+0x3c>)
 800114e:	f7ff ff7b 	bl	8001048 <print>

	MRT_Reinitialize_Peripherals();
 8001152:	f000 f8fb 	bl	800134c <MRT_Reinitialize_Peripherals>

	//Memory
	MRT_MEMORY_Init();
 8001156:	f002 ffa5 	bl	80040a4 <MRT_MEMORY_Init>
	MRT_reset_info();
 800115a:	f000 f829 	bl	80011b0 <MRT_reset_info>

	//IWDG
	#if IWDG_ACTIVE
	print((char*) "IWDG Init...");
 800115e:	480a      	ldr	r0, [pc, #40]	; (8001188 <MRT_Init+0x40>)
 8001160:	f7ff ff72 	bl	8001048 <print>
	MX_IWDG_Init();
 8001164:	f001 fa74 	bl	8002650 <MX_IWDG_Init>
	print((char*) "OK\r\n");
 8001168:	4808      	ldr	r0, [pc, #32]	; (800118c <MRT_Init+0x44>)
 800116a:	f7ff ff6d 	bl	8001048 <print>
	#endif

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <MRT_Init+0x48>)
 8001170:	f008 faba 	bl	80096e8 <HAL_IWDG_Refresh>
	MRT_rtc_Init();
 8001174:	f001 fccc 	bl	8002b10 <MRT_rtc_Init>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 8001178:	f004 fb0e 	bl	8005798 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 800117c:	f006 fa76 	bl	800766c <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		   ejection_stage_flag = FORCED_STAGE;
	#endif
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	0801abc4 	.word	0x0801abc4
 8001188:	0801abe8 	.word	0x0801abe8
 800118c:	0801abf8 	.word	0x0801abf8
 8001190:	200062a8 	.word	0x200062a8

08001194 <MRT_Deinit>:




void MRT_Deinit(void){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MRT_Deinit+0x18>)
 800119a:	f7ff ff55 	bl	8001048 <print>

	MRT_Reinitialize_Peripherals();
 800119e:	f000 f8d5 	bl	800134c <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 80011a2:	f004 fb35 	bl	8005810 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	0801ac00 	.word	0x0801ac00

080011b0 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 80011b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b2:	b0a9      	sub	sp, #164	; 0xa4
 80011b4:	af06      	add	r7, sp, #24

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i ::%i\r\n",
 80011b6:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <MRT_reset_info+0x140>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461e      	mov	r6, r3
 80011bc:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <MRT_reset_info+0x144>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	469c      	mov	ip, r3
 80011c2:	4b4d      	ldr	r3, [pc, #308]	; (80012f8 <MRT_reset_info+0x148>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <MRT_reset_info+0x14c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <MRT_reset_info+0x150>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461c      	mov	r4, r3
 80011d4:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <MRT_reset_info+0x154>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461d      	mov	r5, r3
 80011da:	4b4b      	ldr	r3, [pc, #300]	; (8001308 <MRT_reset_info+0x158>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80011e2:	9304      	str	r3, [sp, #16]
 80011e4:	9503      	str	r5, [sp, #12]
 80011e6:	9402      	str	r4, [sp, #8]
 80011e8:	9101      	str	r1, [sp, #4]
 80011ea:	9200      	str	r2, [sp, #0]
 80011ec:	4663      	mov	r3, ip
 80011ee:	4632      	mov	r2, r6
 80011f0:	4946      	ldr	r1, [pc, #280]	; (800130c <MRT_reset_info+0x15c>)
 80011f2:	f015 fc91 	bl	8016b18 <siprintf>
			  reset_flag, wu_flag, iwdg_flag, prev_hour, prev_min, prev_sec, prev_subsec);
	  print(buffer);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff24 	bl	8001048 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8001200:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <MRT_reset_info+0x148>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d119      	bne.n	800123c <MRT_reset_info+0x8c>
		  print((char*) "Deactivating IWDG\r\n");
 8001208:	4841      	ldr	r0, [pc, #260]	; (8001310 <MRT_reset_info+0x160>)
 800120a:	f7ff ff1d 	bl	8001048 <print>

		  iwdg_flag = 0; //Flip flag
 800120e:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <MRT_reset_info+0x148>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]

		  //Write new flag to memory
		  rtc_bckp_reg_iwdg = iwdg_flag;
 8001214:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <MRT_reset_info+0x148>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <MRT_reset_info+0x164>)
 800121c:	601a      	str	r2, [r3, #0]
		  ext_flash_iwdg = iwdg_flag;
 800121e:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <MRT_reset_info+0x148>)
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <MRT_reset_info+0x168>)
 8001224:	701a      	strb	r2, [r3, #0]
		  MRT_saveFlagValue(FC_STATE_IWDG);
 8001226:	2002      	movs	r0, #2
 8001228:	f002 fda8 	bl	8003d7c <MRT_saveFlagValue>

		  HAL_Delay(500);
 800122c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001230:	f006 fa6a 	bl	8007708 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8001234:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8001238:	f001 fd10 	bl	8002c5c <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag > 0){
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MRT_reset_info+0x144>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00b      	beq.n	800125c <MRT_reset_info+0xac>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <MRT_reset_info+0x144>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4933      	ldr	r1, [pc, #204]	; (800131c <MRT_reset_info+0x16c>)
 800124e:	4618      	mov	r0, r3
 8001250:	f015 fc62 	bl	8016b18 <siprintf>
		  print(buf);
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fef6 	bl	8001048 <print>
	  }


	  //Check if we start from the beginning
	  if (reset_flag == 0){
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <MRT_reset_info+0x140>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d108      	bne.n	8001276 <MRT_reset_info+0xc6>
		  print((char*) "FC restarted\r\n");
 8001264:	482e      	ldr	r0, [pc, #184]	; (8001320 <MRT_reset_info+0x170>)
 8001266:	f7ff feef 	bl	8001048 <print>

		  reset_flag = 1; //Flip flag
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MRT_reset_info+0x140>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]

		  MRT_saveFlagValue(FC_STATE_RESET);
 8001270:	2000      	movs	r0, #0
 8001272:	f002 fd83 	bl	8003d7c <MRT_saveFlagValue>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 8001276:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <MRT_reset_info+0x174>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <MRT_reset_info+0xd6>
		  print((char*) "Pre-apogee\r\n");
 800127e:	482a      	ldr	r0, [pc, #168]	; (8001328 <MRT_reset_info+0x178>)
 8001280:	f7ff fee2 	bl	8001048 <print>
 8001284:	e006      	b.n	8001294 <MRT_reset_info+0xe4>
	  }
	  else if(apogee_flag==1){
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <MRT_reset_info+0x174>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <MRT_reset_info+0xe4>
		  print((char*) "Post-apogee\r\n");
 800128e:	4827      	ldr	r0, [pc, #156]	; (800132c <MRT_reset_info+0x17c>)
 8001290:	f7ff feda 	bl	8001048 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 8001294:	4826      	ldr	r0, [pc, #152]	; (8001330 <MRT_reset_info+0x180>)
 8001296:	f7ff fed7 	bl	8001048 <print>
	  if (ejection_stage_flag==PAD){
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <MRT_reset_info+0x184>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d103      	bne.n	80012aa <MRT_reset_info+0xfa>
		  print((char*)"Pad\r\n");
 80012a2:	4825      	ldr	r0, [pc, #148]	; (8001338 <MRT_reset_info+0x188>)
 80012a4:	f7ff fed0 	bl	8001048 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_stage_flag==LANDED){
		  print((char*)"Landed\r\n");
	  }
}
 80012a8:	e01e      	b.n	80012e8 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==BOOST){
 80012aa:	4b22      	ldr	r3, [pc, #136]	; (8001334 <MRT_reset_info+0x184>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d103      	bne.n	80012ba <MRT_reset_info+0x10a>
		  print((char*)"Boost\r\n");
 80012b2:	4822      	ldr	r0, [pc, #136]	; (800133c <MRT_reset_info+0x18c>)
 80012b4:	f7ff fec8 	bl	8001048 <print>
}
 80012b8:	e016      	b.n	80012e8 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==DROGUE_DESCENT){
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MRT_reset_info+0x184>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d103      	bne.n	80012ca <MRT_reset_info+0x11a>
		  print((char*)"Drogue descent\r\n");
 80012c2:	481f      	ldr	r0, [pc, #124]	; (8001340 <MRT_reset_info+0x190>)
 80012c4:	f7ff fec0 	bl	8001048 <print>
}
 80012c8:	e00e      	b.n	80012e8 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==MAIN_DESCENT){
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MRT_reset_info+0x184>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d103      	bne.n	80012da <MRT_reset_info+0x12a>
		  print((char*)"Main descent\r\n");
 80012d2:	481c      	ldr	r0, [pc, #112]	; (8001344 <MRT_reset_info+0x194>)
 80012d4:	f7ff feb8 	bl	8001048 <print>
}
 80012d8:	e006      	b.n	80012e8 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==LANDED){
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MRT_reset_info+0x184>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d102      	bne.n	80012e8 <MRT_reset_info+0x138>
		  print((char*)"Landed\r\n");
 80012e2:	4819      	ldr	r0, [pc, #100]	; (8001348 <MRT_reset_info+0x198>)
 80012e4:	f7ff feb0 	bl	8001048 <print>
}
 80012e8:	bf00      	nop
 80012ea:	378c      	adds	r7, #140	; 0x8c
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f0:	20000374 	.word	0x20000374
 80012f4:	20000375 	.word	0x20000375
 80012f8:	20000376 	.word	0x20000376
 80012fc:	20000379 	.word	0x20000379
 8001300:	2000037a 	.word	0x2000037a
 8001304:	2000037b 	.word	0x2000037b
 8001308:	2000037c 	.word	0x2000037c
 800130c:	0801ac24 	.word	0x0801ac24
 8001310:	0801ac68 	.word	0x0801ac68
 8001314:	2000031c 	.word	0x2000031c
 8001318:	20000366 	.word	0x20000366
 800131c:	0801ac7c 	.word	0x0801ac7c
 8001320:	0801ac8c 	.word	0x0801ac8c
 8001324:	20000377 	.word	0x20000377
 8001328:	0801ac9c 	.word	0x0801ac9c
 800132c:	0801acac 	.word	0x0801acac
 8001330:	0801acbc 	.word	0x0801acbc
 8001334:	20000378 	.word	0x20000378
 8001338:	0801acd0 	.word	0x0801acd0
 800133c:	0801acd8 	.word	0x0801acd8
 8001340:	0801ace0 	.word	0x0801ace0
 8001344:	0801acf4 	.word	0x0801acf4
 8001348:	0801ad04 	.word	0x0801ad04

0800134c <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001350:	482f      	ldr	r0, [pc, #188]	; (8001410 <MRT_Reinitialize_Peripherals+0xc4>)
 8001352:	f7ff fe79 	bl	8001048 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2102      	movs	r1, #2
 800135a:	482e      	ldr	r0, [pc, #184]	; (8001414 <MRT_Reinitialize_Peripherals+0xc8>)
 800135c:	f007 f8e0 	bl	8008520 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2104      	movs	r1, #4
 8001364:	482b      	ldr	r0, [pc, #172]	; (8001414 <MRT_Reinitialize_Peripherals+0xc8>)
 8001366:	f007 f8db 	bl	8008520 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2108      	movs	r1, #8
 800136e:	4829      	ldr	r0, [pc, #164]	; (8001414 <MRT_Reinitialize_Peripherals+0xc8>)
 8001370:	f007 f8d6 	bl	8008520 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137a:	4827      	ldr	r0, [pc, #156]	; (8001418 <MRT_Reinitialize_Peripherals+0xcc>)
 800137c:	f007 f8d0 	bl	8008520 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001386:	4824      	ldr	r0, [pc, #144]	; (8001418 <MRT_Reinitialize_Peripherals+0xcc>)
 8001388:	f007 f8ca 	bl	8008520 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001392:	4821      	ldr	r0, [pc, #132]	; (8001418 <MRT_Reinitialize_Peripherals+0xcc>)
 8001394:	f007 f8c4 	bl	8008520 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 8001398:	2201      	movs	r2, #1
 800139a:	2102      	movs	r1, #2
 800139c:	481e      	ldr	r0, [pc, #120]	; (8001418 <MRT_Reinitialize_Peripherals+0xcc>)
 800139e:	f007 f8bf 	bl	8008520 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a8:	481c      	ldr	r0, [pc, #112]	; (800141c <MRT_Reinitialize_Peripherals+0xd0>)
 80013aa:	f007 f8b9 	bl	8008520 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b4:	4819      	ldr	r0, [pc, #100]	; (800141c <MRT_Reinitialize_Peripherals+0xd0>)
 80013b6:	f007 f8b3 	bl	8008520 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80013ba:	2200      	movs	r2, #0
 80013bc:	2104      	movs	r1, #4
 80013be:	4818      	ldr	r0, [pc, #96]	; (8001420 <MRT_Reinitialize_Peripherals+0xd4>)
 80013c0:	f007 f8ae 	bl	8008520 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ca:	4815      	ldr	r0, [pc, #84]	; (8001420 <MRT_Reinitialize_Peripherals+0xd4>)
 80013cc:	f007 f8a8 	bl	8008520 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d6:	4810      	ldr	r0, [pc, #64]	; (8001418 <MRT_Reinitialize_Peripherals+0xcc>)
 80013d8:	f007 f8a2 	bl	8008520 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80013dc:	2200      	movs	r2, #0
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	4810      	ldr	r0, [pc, #64]	; (8001424 <MRT_Reinitialize_Peripherals+0xd8>)
 80013e2:	f007 f89d 	bl	8008520 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2140      	movs	r1, #64	; 0x40
 80013ea:	480e      	ldr	r0, [pc, #56]	; (8001424 <MRT_Reinitialize_Peripherals+0xd8>)
 80013ec:	f007 f898 	bl	8008520 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2120      	movs	r1, #32
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <MRT_Reinitialize_Peripherals+0xd8>)
 80013f6:	f007 f893 	bl	8008520 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2110      	movs	r1, #16
 80013fe:	4809      	ldr	r0, [pc, #36]	; (8001424 <MRT_Reinitialize_Peripherals+0xd8>)
 8001400:	f007 f88e 	bl	8008520 <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <MRT_Reinitialize_Peripherals+0xdc>)
 8001406:	f7ff fe1f 	bl	8001048 <print>
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	0801ad10 	.word	0x0801ad10
 8001414:	40020800 	.word	0x40020800
 8001418:	40021800 	.word	0x40021800
 800141c:	40021400 	.word	0x40021400
 8001420:	40021000 	.word	0x40021000
 8001424:	40020c00 	.word	0x40020c00
 8001428:	0801abf8 	.word	0x0801abf8

0800142c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001432:	463b      	mov	r3, r7
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001440:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <MX_ADC1_Init+0x9c>)
 8001442:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_ADC1_Init+0x98>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MX_ADC1_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <MX_ADC1_Init+0x98>)
 800146c:	4a17      	ldr	r2, [pc, #92]	; (80014cc <MX_ADC1_Init+0xa0>)
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001478:	2201      	movs	r2, #1
 800147a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_ADC1_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001486:	2201      	movs	r2, #1
 8001488:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800148a:	480e      	ldr	r0, [pc, #56]	; (80014c4 <MX_ADC1_Init+0x98>)
 800148c:	f006 f960 	bl	8007750 <HAL_ADC_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001496:	f001 fa4d 	bl	8002934 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800149a:	2306      	movs	r3, #6
 800149c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_ADC1_Init+0x98>)
 80014ac:	f006 fb32 	bl	8007b14 <HAL_ADC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014b6:	f001 fa3d 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000618c 	.word	0x2000618c
 80014c8:	40012000 	.word	0x40012000
 80014cc:	0f000001 	.word	0x0f000001

080014d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a17      	ldr	r2, [pc, #92]	; (800154c <HAL_ADC_MspInit+0x7c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d127      	bne.n	8001542 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_ADC_MspInit+0x80>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_ADC_MspInit+0x80>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_ADC_MspInit+0x80>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_ADC_MspInit+0x80>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_ADC_MspInit+0x80>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_ADC_MspInit+0x80>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800152a:	2340      	movs	r3, #64	; 0x40
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152e:	2303      	movs	r3, #3
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_ADC_MspInit+0x84>)
 800153e:	f006 fe2b 	bl	8008198 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40012000 	.word	0x40012000
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000

08001558 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800155c:	f3bf 8f4f 	dsb	sy
}
 8001560:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <__NVIC_SystemReset+0x24>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800156a:	4904      	ldr	r1, [pc, #16]	; (800157c <__NVIC_SystemReset+0x24>)
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <__NVIC_SystemReset+0x28>)
 800156e:	4313      	orrs	r3, r2
 8001570:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001572:	f3bf 8f4f 	dsb	sy
}
 8001576:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <__NVIC_SystemReset+0x20>
 800157c:	e000ed00 	.word	0xe000ed00
 8001580:	05fa0004 	.word	0x05fa0004

08001584 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("\r\nFREERTOS Init");
 8001588:	4821      	ldr	r0, [pc, #132]	; (8001610 <MX_FREERTOS_Init+0x8c>)
 800158a:	f7ff fd3f 	bl	800100c <println>
	print("\tInitializing the kernel...");
 800158e:	4821      	ldr	r0, [pc, #132]	; (8001614 <MX_FREERTOS_Init+0x90>)
 8001590:	f7ff fd5a 	bl	8001048 <print>
	osKernelInitialize();
 8001594:	f00f fc10 	bl	8010db8 <osKernelInitialize>
	println("OK");
 8001598:	481f      	ldr	r0, [pc, #124]	; (8001618 <MX_FREERTOS_Init+0x94>)
 800159a:	f7ff fd37 	bl	800100c <println>

	print("\tCreating the threads...");
 800159e:	481f      	ldr	r0, [pc, #124]	; (800161c <MX_FREERTOS_Init+0x98>)
 80015a0:	f7ff fd52 	bl	8001048 <print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 80015a4:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <MX_FREERTOS_Init+0x9c>)
 80015a6:	2100      	movs	r1, #0
 80015a8:	481e      	ldr	r0, [pc, #120]	; (8001624 <MX_FREERTOS_Init+0xa0>)
 80015aa:	f00f fc4f 	bl	8010e4c <osThreadNew>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <MX_FREERTOS_Init+0xa4>)
 80015b2:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 80015b4:	4a1d      	ldr	r2, [pc, #116]	; (800162c <MX_FREERTOS_Init+0xa8>)
 80015b6:	2100      	movs	r1, #0
 80015b8:	481d      	ldr	r0, [pc, #116]	; (8001630 <MX_FREERTOS_Init+0xac>)
 80015ba:	f00f fc47 	bl	8010e4c <osThreadNew>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <MX_FREERTOS_Init+0xb0>)
 80015c2:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80015c4:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <MX_FREERTOS_Init+0xb4>)
 80015c6:	2100      	movs	r1, #0
 80015c8:	481c      	ldr	r0, [pc, #112]	; (800163c <MX_FREERTOS_Init+0xb8>)
 80015ca:	f00f fc3f 	bl	8010e4c <osThreadNew>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <MX_FREERTOS_Init+0xbc>)
 80015d2:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80015d4:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <MX_FREERTOS_Init+0xc0>)
 80015d6:	2100      	movs	r1, #0
 80015d8:	481b      	ldr	r0, [pc, #108]	; (8001648 <MX_FREERTOS_Init+0xc4>)
 80015da:	f00f fc37 	bl	8010e4c <osThreadNew>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a1a      	ldr	r2, [pc, #104]	; (800164c <MX_FREERTOS_Init+0xc8>)
 80015e2:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80015e4:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <MX_FREERTOS_Init+0xcc>)
 80015e6:	2100      	movs	r1, #0
 80015e8:	481a      	ldr	r0, [pc, #104]	; (8001654 <MX_FREERTOS_Init+0xd0>)
 80015ea:	f00f fc2f 	bl	8010e4c <osThreadNew>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <MX_FREERTOS_Init+0xd4>)
 80015f2:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80015f4:	4a19      	ldr	r2, [pc, #100]	; (800165c <MX_FREERTOS_Init+0xd8>)
 80015f6:	2100      	movs	r1, #0
 80015f8:	4819      	ldr	r0, [pc, #100]	; (8001660 <MX_FREERTOS_Init+0xdc>)
 80015fa:	f00f fc27 	bl	8010e4c <osThreadNew>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a18      	ldr	r2, [pc, #96]	; (8001664 <MX_FREERTOS_Init+0xe0>)
 8001602:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  println("OK");
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <MX_FREERTOS_Init+0x94>)
 8001606:	f7ff fd01 	bl	800100c <println>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	0801ad74 	.word	0x0801ad74
 8001614:	0801ad84 	.word	0x0801ad84
 8001618:	0801ada0 	.word	0x0801ada0
 800161c:	0801ada4 	.word	0x0801ada4
 8001620:	0801bc84 	.word	0x0801bc84
 8001624:	08001669 	.word	0x08001669
 8001628:	200061d8 	.word	0x200061d8
 800162c:	0801bca8 	.word	0x0801bca8
 8001630:	0800173d 	.word	0x0800173d
 8001634:	200061f0 	.word	0x200061f0
 8001638:	0801bccc 	.word	0x0801bccc
 800163c:	08001bf1 	.word	0x08001bf1
 8001640:	200061f4 	.word	0x200061f4
 8001644:	0801bcf0 	.word	0x0801bcf0
 8001648:	08001ced 	.word	0x08001ced
 800164c:	200061f8 	.word	0x200061f8
 8001650:	0801bd14 	.word	0x0801bd14
 8001654:	08001d65 	.word	0x08001d65
 8001658:	200061d4 	.word	0x200061d4
 800165c:	0801bd38 	.word	0x0801bd38
 8001660:	08001f75 	.word	0x08001f75
 8001664:	200061fc 	.word	0x200061fc

08001668 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	//TODO UNTESTED

	//Add thread id to the list
	threadsID[0]=osThreadGetId();
 8001670:	f00f fc7f 	bl	8010f72 <osThreadGetId>
 8001674:	4603      	mov	r3, r0
 8001676:	4a23      	ldr	r2, [pc, #140]	; (8001704 <StartMemory0+0x9c>)
 8001678:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {

	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800167a:	2200      	movs	r2, #0
 800167c:	4922      	ldr	r1, [pc, #136]	; (8001708 <StartMemory0+0xa0>)
 800167e:	4823      	ldr	r0, [pc, #140]	; (800170c <StartMemory0+0xa4>)
 8001680:	f009 f880 	bl	800a784 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001684:	2200      	movs	r2, #0
 8001686:	4922      	ldr	r1, [pc, #136]	; (8001710 <StartMemory0+0xa8>)
 8001688:	4820      	ldr	r0, [pc, #128]	; (800170c <StartMemory0+0xa4>)
 800168a:	f009 f980 	bl	800a98e <HAL_RTC_GetDate>

	 //Update global variables
	 prev_hour = sTime.Hours;
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <StartMemory0+0xa0>)
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <StartMemory0+0xac>)
 8001694:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <StartMemory0+0xa0>)
 8001698:	785a      	ldrb	r2, [r3, #1]
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <StartMemory0+0xb0>)
 800169c:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <StartMemory0+0xa0>)
 80016a0:	789a      	ldrb	r2, [r3, #2]
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <StartMemory0+0xb4>)
 80016a4:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <StartMemory0+0xa4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <StartMemory0+0x58>
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <StartMemory0+0xb4>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <StartMemory0+0xb4>)
 80016be:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <StartMemory0+0xa0>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a16      	ldr	r2, [pc, #88]	; (8001720 <StartMemory0+0xb8>)
 80016c6:	6013      	str	r3, [r2, #0]

	// Save to SD card
	#if SD_CARD_
	MRT_formatAvionics();
 80016c8:	f002 fa08 	bl	8003adc <MRT_formatAvionics>
	fres = sd_open_file(filename);
 80016cc:	4815      	ldr	r0, [pc, #84]	; (8001724 <StartMemory0+0xbc>)
 80016ce:	f002 fead 	bl	800442c <sd_open_file>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <StartMemory0+0xc0>)
 80016d8:	701a      	strb	r2, [r3, #0]
	sd_write(&fil, msg_buffer_av);
 80016da:	4914      	ldr	r1, [pc, #80]	; (800172c <StartMemory0+0xc4>)
 80016dc:	4814      	ldr	r0, [pc, #80]	; (8001730 <StartMemory0+0xc8>)
 80016de:	f002 febd 	bl	800445c <sd_write>
	if (ejection_stage_flag < MAIN_DESCENT){
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <StartMemory0+0xcc>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d805      	bhi.n	80016f6 <StartMemory0+0x8e>
		MRT_formatPropulsion();
 80016ea:	f003 fe67 	bl	80053bc <MRT_formatPropulsion>
		sd_write(&fil, msg_buffer_pr);
 80016ee:	4912      	ldr	r1, [pc, #72]	; (8001738 <StartMemory0+0xd0>)
 80016f0:	480f      	ldr	r0, [pc, #60]	; (8001730 <StartMemory0+0xc8>)
 80016f2:	f002 feb3 	bl	800445c <sd_write>
	}
	f_close(&fil);
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <StartMemory0+0xc8>)
 80016f8:	f00e ff0e 	bl	8010518 <f_close>
	#endif

	osDelay(1000/DATA_FREQ);
 80016fc:	2064      	movs	r0, #100	; 0x64
 80016fe:	f00f fcd3 	bl	80110a8 <osDelay>
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001702:	e7ba      	b.n	800167a <StartMemory0+0x12>
 8001704:	200061dc 	.word	0x200061dc
 8001708:	200002d4 	.word	0x200002d4
 800170c:	200062b4 	.word	0x200062b4
 8001710:	200002e8 	.word	0x200002e8
 8001714:	20000379 	.word	0x20000379
 8001718:	2000037a 	.word	0x2000037a
 800171c:	2000037b 	.word	0x2000037b
 8001720:	2000037c 	.word	0x2000037c
 8001724:	20006c30 	.word	0x20006c30
 8001728:	20007028 	.word	0x20007028
 800172c:	20006538 	.word	0x20006538
 8001730:	2000702c 	.word	0x2000702c
 8001734:	20000378 	.word	0x20000378
 8001738:	20007288 	.word	0x20007288

0800173c <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b096      	sub	sp, #88	; 0x58
 8001740:	af04      	add	r7, sp, #16
 8001742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadsID[1]=osThreadGetId();
 8001744:	f00f fc15 	bl	8010f72 <osThreadGetId>
 8001748:	4603      	mov	r3, r0
 800174a:	4ac6      	ldr	r2, [pc, #792]	; (8001a64 <StartEjection1+0x328>)
 800174c:	6053      	str	r3, [r2, #4]
	#if !EJECTION_THREAD
	osThreadExit();
	#endif

	//Double check the state TODO bad? (say wakeup flag is raised but ground isn't reached yet
	if (ejection_stage_flag >= LANDED)  osThreadExit(); //Ground reached
 800174e:	4bc6      	ldr	r3, [pc, #792]	; (8001a68 <StartEjection1+0x32c>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d901      	bls.n	800175a <StartEjection1+0x1e>
 8001756:	f00f fc74 	bl	8011042 <osThreadExit>

	osDelay(5000); //Let the LPS "warm up" to have a valid pressure_hPa
 800175a:	f241 3088 	movw	r0, #5000	; 0x1388
 800175e:	f00f fca3 	bl	80110a8 <osDelay>

	//TODO put in setup.h?
	uint8_t counter = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t COUNTER_THRESHOLD = 500;
 8001768:	23f4      	movs	r3, #244	; 0xf4
 800176a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t ALT_ERROR_MARGIN = 10; //In meters
 800176e:	230a      	movs	r3, #10
 8001770:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t prev_alt = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  /* Infinite loop */
  for(;;)
  {
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 800177a:	4bbc      	ldr	r3, [pc, #752]	; (8001a6c <StartEjection1+0x330>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	eeb0 0a67 	vmov.f32	s0, s15
 8001784:	f002 f928 	bl	80039d8 <MRT_getAltitude>
 8001788:	eef0 7a40 	vmov.f32	s15, s0
 800178c:	4bb8      	ldr	r3, [pc, #736]	; (8001a70 <StartEjection1+0x334>)
 800178e:	edc3 7a00 	vstr	s15, [r3]

	  //TODO UPDATE TRUE APOGEE (TESTING?)
	  if (altitude_m > rtc_bckp_reg_alt_true_apogee){
 8001792:	4bb8      	ldr	r3, [pc, #736]	; (8001a74 <StartEjection1+0x338>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800179e:	4bb4      	ldr	r3, [pc, #720]	; (8001a70 <StartEjection1+0x334>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ac:	d514      	bpl.n	80017d8 <StartEjection1+0x9c>
		  rtc_bckp_reg_alt_true_apogee = altitude_m;
 80017ae:	4bb0      	ldr	r3, [pc, #704]	; (8001a70 <StartEjection1+0x334>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b8:	ee17 2a90 	vmov	r2, s15
 80017bc:	4bad      	ldr	r3, [pc, #692]	; (8001a74 <StartEjection1+0x338>)
 80017be:	601a      	str	r2, [r3, #0]
		  rtc_bckp_reg_true_apogee_time = 100*prev_min + prev_sec;
 80017c0:	4bad      	ldr	r3, [pc, #692]	; (8001a78 <StartEjection1+0x33c>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	2364      	movs	r3, #100	; 0x64
 80017c8:	fb03 f302 	mul.w	r3, r3, r2
 80017cc:	4aab      	ldr	r2, [pc, #684]	; (8001a7c <StartEjection1+0x340>)
 80017ce:	7812      	ldrb	r2, [r2, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	461a      	mov	r2, r3
 80017d4:	4baa      	ldr	r3, [pc, #680]	; (8001a80 <StartEjection1+0x344>)
 80017d6:	601a      	str	r2, [r3, #0]
	  }

	  //TODO check for apogee (starting to go down or stagnating, add to counter)
	  if(altitude_m < prev_alt || MAX(altitude_m - prev_alt, prev_alt - altitude_m) < ALT_ERROR_MARGIN){
 80017d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e4:	4ba2      	ldr	r3, [pc, #648]	; (8001a70 <StartEjection1+0x334>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	dc3c      	bgt.n	800186e <StartEjection1+0x132>
 80017f4:	4b9e      	ldr	r3, [pc, #632]	; (8001a70 <StartEjection1+0x334>)
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001806:	ee37 7a67 	vsub.f32	s14, s14, s15
 800180a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001816:	4b96      	ldr	r3, [pc, #600]	; (8001a70 <StartEjection1+0x334>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001820:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001828:	dd0b      	ble.n	8001842 <StartEjection1+0x106>
 800182a:	4b91      	ldr	r3, [pc, #580]	; (8001a70 <StartEjection1+0x334>)
 800182c:	ed93 7a00 	vldr	s14, [r3]
 8001830:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001840:	e00a      	b.n	8001858 <StartEjection1+0x11c>
 8001842:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184e:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <StartEjection1+0x334>)
 8001850:	edd3 7a00 	vldr	s15, [r3]
 8001854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001858:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800185c:	ee07 3a10 	vmov	s14, r3
 8001860:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186c:	d54f      	bpl.n	800190e <StartEjection1+0x1d2>
		  counter++;
 800186e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001872:	3301      	adds	r3, #1
 8001874:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		  char buff[50];
		  sprintf(buff, "Alt: %i,  MAX:%i, counter: %i", altitude_m, MAX(altitude_m - prev_alt, prev_alt - altitude_m), counter);
 8001878:	4b7d      	ldr	r3, [pc, #500]	; (8001a70 <StartEjection1+0x334>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe73 	bl	8000568 <__aeabi_f2d>
 8001882:	4604      	mov	r4, r0
 8001884:	460d      	mov	r5, r1
 8001886:	4b7a      	ldr	r3, [pc, #488]	; (8001a70 <StartEjection1+0x334>)
 8001888:	ed93 7a00 	vldr	s14, [r3]
 800188c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001898:	ee37 7a67 	vsub.f32	s14, s14, s15
 800189c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018a8:	4b71      	ldr	r3, [pc, #452]	; (8001a70 <StartEjection1+0x334>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	dd0b      	ble.n	80018d4 <StartEjection1+0x198>
 80018bc:	4b6c      	ldr	r3, [pc, #432]	; (8001a70 <StartEjection1+0x334>)
 80018be:	ed93 7a00 	vldr	s14, [r3]
 80018c2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	e00a      	b.n	80018ea <StartEjection1+0x1ae>
 80018d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e0:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <StartEjection1+0x334>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ea:	ee17 0a90 	vmov	r0, s15
 80018ee:	f7fe fe3b 	bl	8000568 <__aeabi_f2d>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80018fa:	f107 000c 	add.w	r0, r7, #12
 80018fe:	9102      	str	r1, [sp, #8]
 8001900:	e9cd 2300 	strd	r2, r3, [sp]
 8001904:	4622      	mov	r2, r4
 8001906:	462b      	mov	r3, r5
 8001908:	495e      	ldr	r1, [pc, #376]	; (8001a84 <StartEjection1+0x348>)
 800190a:	f015 f905 	bl	8016b18 <siprintf>
	  }

	  if (counter >= COUNTER_THRESHOLD || ejection_stage_flag >= DROGUE_DESCENT){
 800190e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001912:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001916:	429a      	cmp	r2, r3
 8001918:	d204      	bcs.n	8001924 <StartEjection1+0x1e8>
 800191a:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <StartEjection1+0x32c>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	f240 8143 	bls.w	8001baa <StartEjection1+0x46e>

		  if (ejection_stage_flag < DROGUE_DESCENT){
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <StartEjection1+0x32c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d827      	bhi.n	800197c <StartEjection1+0x240>

			  //TODO update value to be saved in rtc bckp registers
			  rtc_bckp_reg_alt_apogee = altitude_m;
 800192c:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <StartEjection1+0x334>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001936:	ee17 2a90 	vmov	r2, s15
 800193a:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <StartEjection1+0x34c>)
 800193c:	601a      	str	r2, [r3, #0]
			  rtc_bckp_reg_apogee_time = 100*prev_min + prev_sec;
 800193e:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <StartEjection1+0x33c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	2364      	movs	r3, #100	; 0x64
 8001946:	fb03 f302 	mul.w	r3, r3, r2
 800194a:	4a4c      	ldr	r2, [pc, #304]	; (8001a7c <StartEjection1+0x340>)
 800194c:	7812      	ldrb	r2, [r2, #0]
 800194e:	4413      	add	r3, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4b4e      	ldr	r3, [pc, #312]	; (8001a8c <StartEjection1+0x350>)
 8001954:	601a      	str	r2, [r3, #0]

			  //Update state (save the state in WatchDog thread)
			  ejection_stage_flag = DROGUE_DESCENT;
 8001956:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <StartEjection1+0x32c>)
 8001958:	2202      	movs	r2, #2
 800195a:	701a      	strb	r2, [r3, #0]
			  apogee_flag = 1; //Apogee reached //TODO is it where we change it???
 800195c:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <StartEjection1+0x354>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
			  wd_ejection_flag = 1; //Raise the flag
 8001962:	4b4c      	ldr	r3, [pc, #304]	; (8001a94 <StartEjection1+0x358>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]

			  println("Eject Drogue");
 8001968:	484b      	ldr	r0, [pc, #300]	; (8001a98 <StartEjection1+0x35c>)
 800196a:	f7ff fb4f 	bl	800100c <println>
		  }

		  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
		  //TODO should I put a while loop, a foor loop or just "one time functions"?
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800196e:	e005      	b.n	800197c <StartEjection1+0x240>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001976:	4849      	ldr	r0, [pc, #292]	; (8001a9c <StartEjection1+0x360>)
 8001978:	f006 fdd2 	bl	8008520 <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800197c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001980:	4846      	ldr	r0, [pc, #280]	; (8001a9c <StartEjection1+0x360>)
 8001982:	f006 fdb5 	bl	80084f0 <HAL_GPIO_ReadPin>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f1      	beq.n	8001970 <StartEjection1+0x234>
		  }
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 800198c:	e005      	b.n	800199a <StartEjection1+0x25e>
			  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, SET); //PG12 DROGUE GATE
 800198e:	2201      	movs	r2, #1
 8001990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001994:	4841      	ldr	r0, [pc, #260]	; (8001a9c <StartEjection1+0x360>)
 8001996:	f006 fdc3 	bl	8008520 <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 800199a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800199e:	483f      	ldr	r0, [pc, #252]	; (8001a9c <StartEjection1+0x360>)
 80019a0:	f006 fda6 	bl	80084f0 <HAL_GPIO_ReadPin>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f1      	beq.n	800198e <StartEjection1+0x252>
		  }
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80019aa:	e005      	b.n	80019b8 <StartEjection1+0x27c>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019b2:	483a      	ldr	r0, [pc, #232]	; (8001a9c <StartEjection1+0x360>)
 80019b4:	f006 fdb4 	bl	8008520 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80019b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019bc:	4837      	ldr	r0, [pc, #220]	; (8001a9c <StartEjection1+0x360>)
 80019be:	f006 fd97 	bl	80084f0 <HAL_GPIO_ReadPin>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f1      	bne.n	80019ac <StartEjection1+0x270>
		  }

		  for(;;){

			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <StartEjection1+0x330>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	eeb0 0a67 	vmov.f32	s0, s15
 80019d2:	f002 f801 	bl	80039d8 <MRT_getAltitude>
 80019d6:	eef0 7a40 	vmov.f32	s15, s0
 80019da:	4b25      	ldr	r3, [pc, #148]	; (8001a70 <StartEjection1+0x334>)
 80019dc:	edc3 7a00 	vstr	s15, [r3]

			  //We reached main deployment altitude
			  if (altitude_m < DEPLOY_ALT || ejection_stage_flag >= MAIN_DESCENT){
 80019e0:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <StartEjection1+0x334>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001aa0 <StartEjection1+0x364>
 80019ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f2:	d404      	bmi.n	80019fe <StartEjection1+0x2c2>
 80019f4:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <StartEjection1+0x32c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	f240 80d2 	bls.w	8001ba2 <StartEjection1+0x466>

				  if (ejection_stage_flag < MAIN_DESCENT){
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <StartEjection1+0x32c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d824      	bhi.n	8001a50 <StartEjection1+0x314>

					  //TODO update value to be saved in rtc bckp registers
					  rtc_bckp_reg_alt_main = altitude_m;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <StartEjection1+0x334>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a10:	ee17 2a90 	vmov	r2, s15
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <StartEjection1+0x368>)
 8001a16:	601a      	str	r2, [r3, #0]
					  rtc_bckp_reg_main_time = 100*prev_min + prev_sec;
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <StartEjection1+0x33c>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2364      	movs	r3, #100	; 0x64
 8001a20:	fb03 f302 	mul.w	r3, r3, r2
 8001a24:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <StartEjection1+0x340>)
 8001a26:	7812      	ldrb	r2, [r2, #0]
 8001a28:	4413      	add	r3, r2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <StartEjection1+0x36c>)
 8001a2e:	601a      	str	r2, [r3, #0]

					  //Update state (save the state in WatchDog thread)
					  ejection_stage_flag = MAIN_DESCENT;
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <StartEjection1+0x32c>)
 8001a32:	2203      	movs	r2, #3
 8001a34:	701a      	strb	r2, [r3, #0]
					  wd_ejection_flag = 1; //Raise the flag
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <StartEjection1+0x358>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]

					  println("Eject Main");
 8001a3c:	481b      	ldr	r0, [pc, #108]	; (8001aac <StartEjection1+0x370>)
 8001a3e:	f7ff fae5 	bl	800100c <println>
				  }

				  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
				  //TODO should I put a while loop, a foor loop or just "one time functions"?
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a42:	e005      	b.n	8001a50 <StartEjection1+0x314>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a4a:	4814      	ldr	r0, [pc, #80]	; (8001a9c <StartEjection1+0x360>)
 8001a4c:	f006 fd68 	bl	8008520 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a54:	4811      	ldr	r0, [pc, #68]	; (8001a9c <StartEjection1+0x360>)
 8001a56:	f006 fd4b 	bl	80084f0 <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f1      	beq.n	8001a44 <StartEjection1+0x308>
				  }
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001a60:	e02c      	b.n	8001abc <StartEjection1+0x380>
 8001a62:	bf00      	nop
 8001a64:	200061dc 	.word	0x200061dc
 8001a68:	20000378 	.word	0x20000378
 8001a6c:	200004d4 	.word	0x200004d4
 8001a70:	200002cc 	.word	0x200002cc
 8001a74:	20000340 	.word	0x20000340
 8001a78:	2000037a 	.word	0x2000037a
 8001a7c:	2000037b 	.word	0x2000037b
 8001a80:	20000344 	.word	0x20000344
 8001a84:	0801adc0 	.word	0x0801adc0
 8001a88:	20000348 	.word	0x20000348
 8001a8c:	2000034c 	.word	0x2000034c
 8001a90:	20000377 	.word	0x20000377
 8001a94:	200002d0 	.word	0x200002d0
 8001a98:	0801ade0 	.word	0x0801ade0
 8001a9c:	40021800 	.word	0x40021800
 8001aa0:	44fa0000 	.word	0x44fa0000
 8001aa4:	20000350 	.word	0x20000350
 8001aa8:	20000354 	.word	0x20000354
 8001aac:	0801adf0 	.word	0x0801adf0
					  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, SET); //PG11 MAIN GATE
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ab6:	4844      	ldr	r0, [pc, #272]	; (8001bc8 <StartEjection1+0x48c>)
 8001ab8:	f006 fd32 	bl	8008520 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac0:	4841      	ldr	r0, [pc, #260]	; (8001bc8 <StartEjection1+0x48c>)
 8001ac2:	f006 fd15 	bl	80084f0 <HAL_GPIO_ReadPin>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f1      	beq.n	8001ab0 <StartEjection1+0x374>
				  }
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001acc:	e005      	b.n	8001ada <StartEjection1+0x39e>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad4:	483c      	ldr	r0, [pc, #240]	; (8001bc8 <StartEjection1+0x48c>)
 8001ad6:	f006 fd23 	bl	8008520 <HAL_GPIO_WritePin>
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ade:	483a      	ldr	r0, [pc, #232]	; (8001bc8 <StartEjection1+0x48c>)
 8001ae0:	f006 fd06 	bl	80084f0 <HAL_GPIO_ReadPin>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f1      	bne.n	8001ace <StartEjection1+0x392>
				  }

				  uint8_t prev_altitude = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				  uint8_t cur_altitude = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				  uint8_t counter = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				  while(counter < 5){
 8001afc:	e02d      	b.n	8001b5a <StartEjection1+0x41e>
					  cur_altitude = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001afe:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <StartEjection1+0x490>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	eeb0 0a67 	vmov.f32	s0, s15
 8001b08:	f001 ff66 	bl	80039d8 <MRT_getAltitude>
 8001b0c:	eef0 7a40 	vmov.f32	s15, s0
 8001b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b14:	edc7 7a00 	vstr	s15, [r7]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
					  if (cur_altitude - prev_altitude < 1 && cur_altitude - prev_altitude > -1){ //TODO might need a bigger range to account for errors (gotta know what we expect to be our slowest descent speed)
 8001b1e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001b22:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	dc0c      	bgt.n	8001b46 <StartEjection1+0x40a>
 8001b2c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001b30:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db05      	blt.n	8001b46 <StartEjection1+0x40a>
						  counter++;
 8001b3a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001b44:	e002      	b.n	8001b4c <StartEjection1+0x410>
					  }
					  else{
						  counter = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  }
					  prev_altitude = cur_altitude;
 8001b4c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001b50:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					  osDelay(100);
 8001b54:	2064      	movs	r0, #100	; 0x64
 8001b56:	f00f faa7 	bl	80110a8 <osDelay>
				  while(counter < 5){
 8001b5a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d9cd      	bls.n	8001afe <StartEjection1+0x3c2>
				  }

				  //TODO update value to be saved in rtc bckp registers
				  rtc_bckp_reg_alt_landed = altitude_m;
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <StartEjection1+0x494>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b6c:	ee17 2a90 	vmov	r2, s15
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <StartEjection1+0x498>)
 8001b72:	601a      	str	r2, [r3, #0]
				  rtc_bckp_reg_landed_time = 100*prev_min + prev_sec;
 8001b74:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <StartEjection1+0x49c>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	2364      	movs	r3, #100	; 0x64
 8001b7c:	fb03 f302 	mul.w	r3, r3, r2
 8001b80:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <StartEjection1+0x4a0>)
 8001b82:	7812      	ldrb	r2, [r2, #0]
 8001b84:	4413      	add	r3, r2
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <StartEjection1+0x4a4>)
 8001b8a:	601a      	str	r2, [r3, #0]

				  //Update state (saved state in WatchDog thread)
				  ejection_stage_flag = LANDED;
 8001b8c:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <StartEjection1+0x4a8>)
 8001b8e:	2204      	movs	r2, #4
 8001b90:	701a      	strb	r2, [r3, #0]
				  wd_ejection_flag = 1;
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <StartEjection1+0x4ac>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]

				  println("Ground Level Reached");
 8001b98:	4814      	ldr	r0, [pc, #80]	; (8001bec <StartEjection1+0x4b0>)
 8001b9a:	f7ff fa37 	bl	800100c <println>
				  osThreadExit();
 8001b9e:	f00f fa50 	bl	8011042 <osThreadExit>

			  }

			  osDelay(10);
 8001ba2:	200a      	movs	r0, #10
 8001ba4:	f00f fa80 	bl	80110a8 <osDelay>
			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001ba8:	e70e      	b.n	80019c8 <StartEjection1+0x28c>
		  }
	  }


	  //Update previous altitude
	  prev_alt = altitude_m;
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <StartEjection1+0x494>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb4:	edc7 7a00 	vstr	s15, [r7]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	  osDelay(10);
 8001bbe:	200a      	movs	r0, #10
 8001bc0:	f00f fa72 	bl	80110a8 <osDelay>
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001bc4:	e5d9      	b.n	800177a <StartEjection1+0x3e>
 8001bc6:	bf00      	nop
 8001bc8:	40021800 	.word	0x40021800
 8001bcc:	200004d4 	.word	0x200004d4
 8001bd0:	200002cc 	.word	0x200002cc
 8001bd4:	20000358 	.word	0x20000358
 8001bd8:	2000037a 	.word	0x2000037a
 8001bdc:	2000037b 	.word	0x2000037b
 8001be0:	2000035c 	.word	0x2000035c
 8001be4:	20000378 	.word	0x20000378
 8001be8:	200002d0 	.word	0x200002d0
 8001bec:	0801adfc 	.word	0x0801adfc

08001bf0 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b0c4      	sub	sp, #272	; 0x110
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadsID[2]=osThreadGetId();
 8001bfa:	f00f f9ba 	bl	8010f72 <osThreadGetId>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a35      	ldr	r2, [pc, #212]	; (8001cd8 <StartTelemetry2+0xe8>)
 8001c02:	6093      	str	r3, [r2, #8]
	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	char radio_buffer[RADIO_BUFFER_SIZE];
	uint8_t counter = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t iridium_counter = 0;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001c10:	2201      	movs	r2, #1
 8001c12:	2108      	movs	r1, #8
 8001c14:	4831      	ldr	r0, [pc, #196]	; (8001cdc <StartTelemetry2+0xec>)
 8001c16:	f006 fc83 	bl	8008520 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <StartTelemetry2+0xf0>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <StartTelemetry2+0x3a>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 8001c22:	200a      	movs	r0, #10
 8001c24:	f00f fa40 	bl	80110a8 <osDelay>
 8001c28:	e01b      	b.n	8001c62 <StartTelemetry2+0x72>
	  }
	  else{ //Only send prop data pre-apogee
		  //Send propulsion data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f013 fef1 	bl	8015a1c <memset>
		  MRT_formatPropulsion();
 8001c3a:	f003 fbbf 	bl	80053bc <MRT_formatPropulsion>
		  memcpy(radio_buffer, msg_buffer_pr, strlen(msg_buffer_pr));
 8001c3e:	4829      	ldr	r0, [pc, #164]	; (8001ce4 <StartTelemetry2+0xf4>)
 8001c40:	f7fe fad6 	bl	80001f0 <strlen>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	4926      	ldr	r1, [pc, #152]	; (8001ce4 <StartTelemetry2+0xf4>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f013 febd 	bl	80159cc <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	4618      	mov	r0, r3
 8001c58:	f005 fcea 	bl	8007630 <MRT_radio_tx>

		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 8001c5c:	2014      	movs	r0, #20
 8001c5e:	f00f fa23 	bl	80110a8 <osDelay>
	  }

	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 8001c62:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c66:	2b0a      	cmp	r3, #10
 8001c68:	d12b      	bne.n	8001cc2 <StartTelemetry2+0xd2>
		  counter = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		  float SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
		  float SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
		  */

	  	  //Send sensors data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f013 fece 	bl	8015a1c <memset>
		  MRT_formatAvionics();
 8001c80:	f001 ff2c 	bl	8003adc <MRT_formatAvionics>
		  memcpy(radio_buffer, msg_buffer_av, strlen(msg_buffer_av));
 8001c84:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <StartTelemetry2+0xf8>)
 8001c86:	f7fe fab3 	bl	80001f0 <strlen>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	4915      	ldr	r1, [pc, #84]	; (8001ce8 <StartTelemetry2+0xf8>)
 8001c92:	4618      	mov	r0, r3
 8001c94:	f013 fe9a 	bl	80159cc <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f005 fcc7 	bl	8007630 <MRT_radio_tx>


		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <StartTelemetry2+0xf0>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d006      	beq.n	8001cb8 <StartTelemetry2+0xc8>
 8001caa:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001cae:	2b05      	cmp	r3, #5
 8001cb0:	d102      	bne.n	8001cb8 <StartTelemetry2+0xc8>
			  iridium_counter = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			  #if IRIDIUM_ //Iridium send
			  hiridium.getTime(); //TODO doesn't cost anything
			  //hiridium.sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 8001cb8:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	  }
	  counter++;
 8001cc2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2108      	movs	r1, #8
 8001cd0:	4802      	ldr	r0, [pc, #8]	; (8001cdc <StartTelemetry2+0xec>)
 8001cd2:	f006 fc25 	bl	8008520 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001cd6:	e79b      	b.n	8001c10 <StartTelemetry2+0x20>
 8001cd8:	200061dc 	.word	0x200061dc
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	20000377 	.word	0x20000377
 8001ce4:	20007288 	.word	0x20007288
 8001ce8:	20006538 	.word	0x20006538

08001cec <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadsID[3]=osThreadGetId();
 8001cf4:	f00f f93d 	bl	8010f72 <osThreadGetId>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <StartSensors3+0x5c>)
 8001cfc:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2102      	movs	r1, #2
 8001d02:	4812      	ldr	r0, [pc, #72]	; (8001d4c <StartSensors3+0x60>)
 8001d04:	f006 fc0c 	bl	8008520 <HAL_GPIO_WritePin>

	  //GPS
	  hgps.pollAll();
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <StartSensors3+0x64>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4798      	blx	r3

	  //LSM6DSR
	  hlsm6dsr.pollAll();
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <StartSensors3+0x68>)
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	4798      	blx	r3

	  //LPS22HH
	  hlps22hh.pollAll();
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <StartSensors3+0x6c>)
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	4798      	blx	r3

	  //Gates continuity
	  gates_continuity = MRT_getContinuity();
 8001d1a:	f001 feab 	bl	8003a74 <MRT_getContinuity>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <StartSensors3+0x70>)
 8001d24:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2102      	movs	r1, #2
 8001d2a:	4808      	ldr	r0, [pc, #32]	; (8001d4c <StartSensors3+0x60>)
 8001d2c:	f006 fbf8 	bl	8008520 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <StartSensors3+0x74>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <StartSensors3+0x54>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 8001d38:	200a      	movs	r0, #10
 8001d3a:	f00f f9b5 	bl	80110a8 <osDelay>
 8001d3e:	e7de      	b.n	8001cfe <StartSensors3+0x12>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001d40:	2014      	movs	r0, #20
 8001d42:	f00f f9b1 	bl	80110a8 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001d46:	e7da      	b.n	8001cfe <StartSensors3+0x12>
 8001d48:	200061dc 	.word	0x200061dc
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	200004e8 	.word	0x200004e8
 8001d54:	200004a8 	.word	0x200004a8
 8001d58:	200004d4 	.word	0x200004d4
 8001d5c:	20000363 	.word	0x20000363
 8001d60:	20000377 	.word	0x20000377

08001d64 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8001d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d68:	b0c6      	sub	sp, #280	; 0x118
 8001d6a:	af04      	add	r7, sp, #16
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	6018      	str	r0, [r3, #0]
	char buffer[WD_BUFFER_SIZE];

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001d70:	2201      	movs	r2, #1
 8001d72:	2104      	movs	r1, #4
 8001d74:	4860      	ldr	r0, [pc, #384]	; (8001ef8 <StartWatchDog+0x194>)
 8001d76:	f006 fbd3 	bl	8008520 <HAL_GPIO_WritePin>

	 HAL_IWDG_Refresh(&hiwdg);
 8001d7a:	4860      	ldr	r0, [pc, #384]	; (8001efc <StartWatchDog+0x198>)
 8001d7c:	f007 fcb4 	bl	80096e8 <HAL_IWDG_Refresh>
	 uint64_t* i = 0x20CDCDCD;
	 *i = 10;
	#endif

	 //TODO remove for comp
	 memset(buffer, 0, WD_BUFFER_SIZE);
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f013 fe46 	bl	8015a1c <memset>
	 sprintf(buffer, "Time: %i:%i:%i ::%lu	Altitude: \r\n %f\r\n", prev_hour,prev_min,prev_sec,prev_subsec , altitude_m);
 8001d90:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <StartWatchDog+0x19c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461e      	mov	r6, r3
 8001d96:	4b5b      	ldr	r3, [pc, #364]	; (8001f04 <StartWatchDog+0x1a0>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4698      	mov	r8, r3
 8001d9c:	4b5a      	ldr	r3, [pc, #360]	; (8001f08 <StartWatchDog+0x1a4>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461d      	mov	r5, r3
 8001da2:	4b5a      	ldr	r3, [pc, #360]	; (8001f0c <StartWatchDog+0x1a8>)
 8001da4:	681c      	ldr	r4, [r3, #0]
 8001da6:	4b5a      	ldr	r3, [pc, #360]	; (8001f10 <StartWatchDog+0x1ac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbdc 	bl	8000568 <__aeabi_f2d>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	f107 0008 	add.w	r0, r7, #8
 8001db8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001dbc:	9401      	str	r4, [sp, #4]
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	4643      	mov	r3, r8
 8001dc2:	4632      	mov	r2, r6
 8001dc4:	4953      	ldr	r1, [pc, #332]	; (8001f14 <StartWatchDog+0x1b0>)
 8001dc6:	f014 fea7 	bl	8016b18 <siprintf>
	 println((char*) buffer);
 8001dca:	f107 0308 	add.w	r3, r7, #8
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f91c 	bl	800100c <println>


	 //Check if new ejection stage to save in memory
	 if(wd_ejection_flag == 1){
 8001dd4:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <StartWatchDog+0x1b4>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d15d      	bne.n	8001e98 <StartWatchDog+0x134>

		wd_ejection_flag = 0;
 8001ddc:	4b4e      	ldr	r3, [pc, #312]	; (8001f18 <StartWatchDog+0x1b4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]

		//Update ejection stage flag and save it
		rtc_bckp_reg_ejection_stage = ejection_stage_flag;
 8001de2:	4b4e      	ldr	r3, [pc, #312]	; (8001f1c <StartWatchDog+0x1b8>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	4b4d      	ldr	r3, [pc, #308]	; (8001f20 <StartWatchDog+0x1bc>)
 8001dea:	601a      	str	r2, [r3, #0]
		ext_flash_ejection_stage = ejection_stage_flag;
 8001dec:	4b4b      	ldr	r3, [pc, #300]	; (8001f1c <StartWatchDog+0x1b8>)
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <StartWatchDog+0x1c0>)
 8001df2:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_FLIGHT);
 8001df4:	2004      	movs	r0, #4
 8001df6:	f001 ffc1 	bl	8003d7c <MRT_saveFlagValue>

		//If applicable, update apogee flag
		if (ejection_stage_flag >= DROGUE_DESCENT){
 8001dfa:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <StartWatchDog+0x1b8>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d90e      	bls.n	8001e20 <StartWatchDog+0xbc>
			apogee_flag = 1;
 8001e02:	4b49      	ldr	r3, [pc, #292]	; (8001f28 <StartWatchDog+0x1c4>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_apogee = apogee_flag;
 8001e08:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <StartWatchDog+0x1c4>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <StartWatchDog+0x1c8>)
 8001e10:	601a      	str	r2, [r3, #0]
			ext_flash_apogee = apogee_flag;
 8001e12:	4b45      	ldr	r3, [pc, #276]	; (8001f28 <StartWatchDog+0x1c4>)
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <StartWatchDog+0x1cc>)
 8001e18:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_APOGEE);
 8001e1a:	2003      	movs	r0, #3
 8001e1c:	f001 ffae 	bl	8003d7c <MRT_saveFlagValue>
		}

		//TODO TESTING SAVE EVERY ALT REGISTERS
		MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 8001e20:	4b44      	ldr	r3, [pc, #272]	; (8001f34 <StartWatchDog+0x1d0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4619      	mov	r1, r3
 8001e26:	2009      	movs	r0, #9
 8001e28:	f001 f8e2 	bl	8002ff0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 8001e2c:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <StartWatchDog+0x1d4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	200a      	movs	r0, #10
 8001e34:	f001 f8dc 	bl	8002ff0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_TRUE_APOGEE, rtc_bckp_reg_alt_true_apogee);
 8001e38:	4b40      	ldr	r3, [pc, #256]	; (8001f3c <StartWatchDog+0x1d8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	200b      	movs	r0, #11
 8001e40:	f001 f8d6 	bl	8002ff0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_TRUE_APOGEE_TIME, rtc_bckp_reg_true_apogee_time);
 8001e44:	4b3e      	ldr	r3, [pc, #248]	; (8001f40 <StartWatchDog+0x1dc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	200c      	movs	r0, #12
 8001e4c:	f001 f8d0 	bl	8002ff0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_APOGEE, rtc_bckp_reg_alt_apogee);
 8001e50:	4b3c      	ldr	r3, [pc, #240]	; (8001f44 <StartWatchDog+0x1e0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	200d      	movs	r0, #13
 8001e58:	f001 f8ca 	bl	8002ff0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_APOGEE_TIME, rtc_bckp_reg_apogee_time);
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <StartWatchDog+0x1e4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	200e      	movs	r0, #14
 8001e64:	f001 f8c4 	bl	8002ff0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_MAIN, rtc_bckp_reg_alt_main);
 8001e68:	4b38      	ldr	r3, [pc, #224]	; (8001f4c <StartWatchDog+0x1e8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	200f      	movs	r0, #15
 8001e70:	f001 f8be 	bl	8002ff0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_MAIN_TIME, rtc_bckp_reg_main_time);
 8001e74:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <StartWatchDog+0x1ec>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	2010      	movs	r0, #16
 8001e7c:	f001 f8b8 	bl	8002ff0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_LANDED, rtc_bckp_reg_alt_landed);
 8001e80:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <StartWatchDog+0x1f0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4619      	mov	r1, r3
 8001e86:	2011      	movs	r0, #17
 8001e88:	f001 f8b2 	bl	8002ff0 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_LANDED_TIME, rtc_bckp_reg_landed_time);
 8001e8c:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <StartWatchDog+0x1f4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	2012      	movs	r0, #18
 8001e94:	f001 f8ac 	bl	8002ff0 <MRT_RTC_setBackupReg>
	 }

	  //Check if it's sleep time
	  if (flagA==1 || flagB==1){
 8001e98:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <StartWatchDog+0x1f8>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d003      	beq.n	8001ea8 <StartWatchDog+0x144>
 8001ea0:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <StartWatchDog+0x1fc>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d112      	bne.n	8001ece <StartWatchDog+0x16a>
		//Update iwdg_flag
		iwdg_flag = 1;
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <StartWatchDog+0x200>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_iwdg = iwdg_flag;
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <StartWatchDog+0x200>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <StartWatchDog+0x204>)
 8001eb6:	601a      	str	r2, [r3, #0]
		ext_flash_iwdg = iwdg_flag;
 8001eb8:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <StartWatchDog+0x200>)
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <StartWatchDog+0x208>)
 8001ebe:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_IWDG);
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	f001 ff5b 	bl	8003d7c <MRT_saveFlagValue>

		//Save the RTC time
		MRT_saveTotalTime();
 8001ec6:	f001 ffe5 	bl	8003e94 <MRT_saveTotalTime>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8001eca:	f7ff fb45 	bl	8001558 <__NVIC_SystemReset>
	  }

	  //Save the RTC time
	  MRT_saveTotalTime();
 8001ece:	f001 ffe1 	bl	8003e94 <MRT_saveTotalTime>


	  //Check for complete restart
	  if(restart_flag == 1){
 8001ed2:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <StartWatchDog+0x20c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <StartWatchDog+0x17a>
		  MRT_resetFromStart();
 8001eda:	f001 fb37 	bl	800354c <MRT_resetFromStart>
	  }

	  MRT_checkThreadStates();
 8001ede:	f000 f86f 	bl	8001fc0 <MRT_checkThreadStates>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2104      	movs	r1, #4
 8001ee6:	4804      	ldr	r0, [pc, #16]	; (8001ef8 <StartWatchDog+0x194>)
 8001ee8:	f006 fb1a 	bl	8008520 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8001eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef0:	f00f f8da 	bl	80110a8 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001ef4:	e73c      	b.n	8001d70 <StartWatchDog+0xc>
 8001ef6:	bf00      	nop
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	200062a8 	.word	0x200062a8
 8001f00:	20000379 	.word	0x20000379
 8001f04:	2000037a 	.word	0x2000037a
 8001f08:	2000037b 	.word	0x2000037b
 8001f0c:	2000037c 	.word	0x2000037c
 8001f10:	200002cc 	.word	0x200002cc
 8001f14:	0801ae14 	.word	0x0801ae14
 8001f18:	200002d0 	.word	0x200002d0
 8001f1c:	20000378 	.word	0x20000378
 8001f20:	20000324 	.word	0x20000324
 8001f24:	20000368 	.word	0x20000368
 8001f28:	20000377 	.word	0x20000377
 8001f2c:	20000320 	.word	0x20000320
 8001f30:	20000367 	.word	0x20000367
 8001f34:	20000338 	.word	0x20000338
 8001f38:	2000033c 	.word	0x2000033c
 8001f3c:	20000340 	.word	0x20000340
 8001f40:	20000344 	.word	0x20000344
 8001f44:	20000348 	.word	0x20000348
 8001f48:	2000034c 	.word	0x2000034c
 8001f4c:	20000350 	.word	0x20000350
 8001f50:	20000354 	.word	0x20000354
 8001f54:	20000358 	.word	0x20000358
 8001f58:	2000035c 	.word	0x2000035c
 8001f5c:	20000360 	.word	0x20000360
 8001f60:	20000361 	.word	0x20000361
 8001f64:	20000376 	.word	0x20000376
 8001f68:	2000031c 	.word	0x2000031c
 8001f6c:	20000366 	.word	0x20000366
 8001f70:	20000362 	.word	0x20000362

08001f74 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	//Add thread id to the list
	threadsID[4]=osThreadGetId();
 8001f7c:	f00e fff9 	bl	8010f72 <osThreadGetId>
 8001f80:	4603      	mov	r3, r0
 8001f82:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <StartPropulsion4+0x40>)
 8001f84:	6113      	str	r3, [r2, #16]

	#if !PROPULSION_THREAD
	osThreadExit();
	#endif

	if (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT){
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <StartPropulsion4+0x44>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d103      	bne.n	8001f96 <StartPropulsion4+0x22>
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <StartPropulsion4+0x48>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d901      	bls.n	8001f9a <StartPropulsion4+0x26>
		osThreadExit();
 8001f96:	f00f f854 	bl	8011042 <osThreadExit>

  /* Infinite loop */
  for(;;)
  {
	  //Poll propulsion sensors
	  MRT_pollPropulsion();
 8001f9a:	f003 f9d7 	bl	800534c <MRT_pollPropulsion>

	  if (apogee_flag){
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <StartPropulsion4+0x44>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <StartPropulsion4+0x36>
		  osThreadExit();
 8001fa6:	f00f f84c 	bl	8011042 <osThreadExit>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001faa:	2014      	movs	r0, #20
 8001fac:	f00f f87c 	bl	80110a8 <osDelay>
	  MRT_pollPropulsion();
 8001fb0:	e7f3      	b.n	8001f9a <StartPropulsion4+0x26>
 8001fb2:	bf00      	nop
 8001fb4:	200061dc 	.word	0x200061dc
 8001fb8:	20000377 	.word	0x20000377
 8001fbc:	20000378 	.word	0x20000378

08001fc0 <MRT_checkThreadStates>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

//TODO private functions

void MRT_checkThreadStates(void){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
	  //Check each thread state
	  #if THREAD_KEEPER

	  osThreadState_t thread_state;

	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	e055      	b.n	8002078 <MRT_checkThreadStates+0xb8>

		  thread_state = osThreadGetState(threadsID[i]);
 8001fcc:	4a2e      	ldr	r2, [pc, #184]	; (8002088 <MRT_checkThreadStates+0xc8>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00e ffd7 	bl	8010f88 <osThreadGetState>
 8001fda:	6038      	str	r0, [r7, #0]

		  if (thread_state == osThreadInactive ||
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <MRT_checkThreadStates+0x2e>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d002      	beq.n	8001fee <MRT_checkThreadStates+0x2e>
			  thread_state == osThreadBlocked  ||
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d128      	bne.n	8002040 <MRT_checkThreadStates+0x80>
			  thread_state == osThreadTerminated){

			  //Ejection thread
			  if (i==1 && ejection_stage_flag < LANDED){
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d10a      	bne.n	800200a <MRT_checkThreadStates+0x4a>
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <MRT_checkThreadStates+0xcc>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d806      	bhi.n	800200a <MRT_checkThreadStates+0x4a>
				 osThreadResume(threadsID[i]);
 8001ffc:	4a22      	ldr	r2, [pc, #136]	; (8002088 <MRT_checkThreadStates+0xc8>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	4618      	mov	r0, r3
 8002006:	f00e fffb 	bl	8011000 <osThreadResume>
			  }

			  //Propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b04      	cmp	r3, #4
 800200e:	d10f      	bne.n	8002030 <MRT_checkThreadStates+0x70>
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <MRT_checkThreadStates+0xd0>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <MRT_checkThreadStates+0x60>
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <MRT_checkThreadStates+0xcc>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d907      	bls.n	8002030 <MRT_checkThreadStates+0x70>
				  osThreadTerminate(threadsID[i]);
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <MRT_checkThreadStates+0xc8>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002028:	4618      	mov	r0, r3
 800202a:	f00f f810 	bl	801104e <osThreadTerminate>
				  continue;
 800202e:	e020      	b.n	8002072 <MRT_checkThreadStates+0xb2>
			  }
			  else {
				 //Resume otherwise
				 osThreadResume(threadsID[i]);
 8002030:	4a15      	ldr	r2, [pc, #84]	; (8002088 <MRT_checkThreadStates+0xc8>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	4618      	mov	r0, r3
 800203a:	f00e ffe1 	bl	8011000 <osThreadResume>
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 800203e:	e018      	b.n	8002072 <MRT_checkThreadStates+0xb2>
			  }
		  }

		  else if (thread_state == osThreadError){
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002046:	d114      	bne.n	8002072 <MRT_checkThreadStates+0xb2>
			  //If it's the propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d10f      	bne.n	800206e <MRT_checkThreadStates+0xae>
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <MRT_checkThreadStates+0xd0>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d103      	bne.n	800205e <MRT_checkThreadStates+0x9e>
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <MRT_checkThreadStates+0xcc>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d907      	bls.n	800206e <MRT_checkThreadStates+0xae>
				  osThreadTerminate(threadsID[i]);
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <MRT_checkThreadStates+0xc8>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002066:	4618      	mov	r0, r3
 8002068:	f00e fff1 	bl	801104e <osThreadTerminate>
				  continue;
 800206c:	e001      	b.n	8002072 <MRT_checkThreadStates+0xb2>
			  }
			  else{
				 //Reset otherwise
				 NVIC_SystemReset();
 800206e:	f7ff fa73 	bl	8001558 <__NVIC_SystemReset>
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3301      	adds	r3, #1
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b04      	cmp	r3, #4
 800207c:	dda6      	ble.n	8001fcc <MRT_checkThreadStates+0xc>
		  else if (thread_state == osThreadReserved){ TODO not sure what is this state
		  }
		  */
	  }
	  #endif
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200061dc 	.word	0x200061dc
 800208c:	20000378 	.word	0x20000378
 8002090:	20000377 	.word	0x20000377

08002094 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08e      	sub	sp, #56	; 0x38
 8002098:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
 80020ae:	4bb5      	ldr	r3, [pc, #724]	; (8002384 <MX_GPIO_Init+0x2f0>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4ab4      	ldr	r2, [pc, #720]	; (8002384 <MX_GPIO_Init+0x2f0>)
 80020b4:	f043 0310 	orr.w	r3, r3, #16
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4bb2      	ldr	r3, [pc, #712]	; (8002384 <MX_GPIO_Init+0x2f0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	4bae      	ldr	r3, [pc, #696]	; (8002384 <MX_GPIO_Init+0x2f0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4aad      	ldr	r2, [pc, #692]	; (8002384 <MX_GPIO_Init+0x2f0>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4bab      	ldr	r3, [pc, #684]	; (8002384 <MX_GPIO_Init+0x2f0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	4ba7      	ldr	r3, [pc, #668]	; (8002384 <MX_GPIO_Init+0x2f0>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4aa6      	ldr	r2, [pc, #664]	; (8002384 <MX_GPIO_Init+0x2f0>)
 80020ec:	f043 0320 	orr.w	r3, r3, #32
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4ba4      	ldr	r3, [pc, #656]	; (8002384 <MX_GPIO_Init+0x2f0>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	4ba0      	ldr	r3, [pc, #640]	; (8002384 <MX_GPIO_Init+0x2f0>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	4a9f      	ldr	r2, [pc, #636]	; (8002384 <MX_GPIO_Init+0x2f0>)
 8002108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800210c:	6313      	str	r3, [r2, #48]	; 0x30
 800210e:	4b9d      	ldr	r3, [pc, #628]	; (8002384 <MX_GPIO_Init+0x2f0>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b99      	ldr	r3, [pc, #612]	; (8002384 <MX_GPIO_Init+0x2f0>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a98      	ldr	r2, [pc, #608]	; (8002384 <MX_GPIO_Init+0x2f0>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b96      	ldr	r3, [pc, #600]	; (8002384 <MX_GPIO_Init+0x2f0>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b92      	ldr	r3, [pc, #584]	; (8002384 <MX_GPIO_Init+0x2f0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a91      	ldr	r2, [pc, #580]	; (8002384 <MX_GPIO_Init+0x2f0>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b8f      	ldr	r3, [pc, #572]	; (8002384 <MX_GPIO_Init+0x2f0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	4b8b      	ldr	r3, [pc, #556]	; (8002384 <MX_GPIO_Init+0x2f0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a8a      	ldr	r2, [pc, #552]	; (8002384 <MX_GPIO_Init+0x2f0>)
 800215c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b88      	ldr	r3, [pc, #544]	; (8002384 <MX_GPIO_Init+0x2f0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4b84      	ldr	r3, [pc, #528]	; (8002384 <MX_GPIO_Init+0x2f0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a83      	ldr	r2, [pc, #524]	; (8002384 <MX_GPIO_Init+0x2f0>)
 8002178:	f043 0308 	orr.w	r3, r3, #8
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b81      	ldr	r3, [pc, #516]	; (8002384 <MX_GPIO_Init+0x2f0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 800218a:	2200      	movs	r2, #0
 800218c:	f248 4184 	movw	r1, #33924	; 0x8484
 8002190:	487d      	ldr	r0, [pc, #500]	; (8002388 <MX_GPIO_Init+0x2f4>)
 8002192:	f006 f9c5 	bl	8008520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002196:	2201      	movs	r2, #1
 8002198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219c:	487b      	ldr	r0, [pc, #492]	; (800238c <MX_GPIO_Init+0x2f8>)
 800219e:	f006 f9bf 	bl	8008520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80021a8:	4879      	ldr	r0, [pc, #484]	; (8002390 <MX_GPIO_Init+0x2fc>)
 80021aa:	f006 f9b9 	bl	8008520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2108      	movs	r1, #8
 80021b2:	4878      	ldr	r0, [pc, #480]	; (8002394 <MX_GPIO_Init+0x300>)
 80021b4:	f006 f9b4 	bl	8008520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80021b8:	2200      	movs	r2, #0
 80021ba:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80021be:	4873      	ldr	r0, [pc, #460]	; (800238c <MX_GPIO_Init+0x2f8>)
 80021c0:	f006 f9ae 	bl	8008520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80021c4:	2200      	movs	r2, #0
 80021c6:	f645 2126 	movw	r1, #23078	; 0x5a26
 80021ca:	4873      	ldr	r0, [pc, #460]	; (8002398 <MX_GPIO_Init+0x304>)
 80021cc:	f006 f9a8 	bl	8008520 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 80021d0:	2200      	movs	r2, #0
 80021d2:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80021d6:	4871      	ldr	r0, [pc, #452]	; (800239c <MX_GPIO_Init+0x308>)
 80021d8:	f006 f9a2 	bl	8008520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80021dc:	2200      	movs	r2, #0
 80021de:	f44f 41f9 	mov.w	r1, #31872	; 0x7c80
 80021e2:	486f      	ldr	r0, [pc, #444]	; (80023a0 <MX_GPIO_Init+0x30c>)
 80021e4:	f006 f99c 	bl	8008520 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin, GPIO_PIN_SET);
 80021e8:	2201      	movs	r2, #1
 80021ea:	2170      	movs	r1, #112	; 0x70
 80021ec:	486c      	ldr	r0, [pc, #432]	; (80023a0 <MX_GPIO_Init+0x30c>)
 80021ee:	f006 f997 	bl	8008520 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 80021f2:	f248 4384 	movw	r3, #33924	; 0x8484
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002208:	4619      	mov	r1, r3
 800220a:	485f      	ldr	r0, [pc, #380]	; (8002388 <MX_GPIO_Init+0x2f4>)
 800220c:	f005 ffc4 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002216:	2301      	movs	r3, #1
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800221a:	2301      	movs	r3, #1
 800221c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002226:	4619      	mov	r1, r3
 8002228:	4858      	ldr	r0, [pc, #352]	; (800238c <MX_GPIO_Init+0x2f8>)
 800222a:	f005 ffb5 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 800222e:	2301      	movs	r3, #1
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002232:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002240:	4619      	mov	r1, r3
 8002242:	4853      	ldr	r0, [pc, #332]	; (8002390 <MX_GPIO_Init+0x2fc>)
 8002244:	f005 ffa8 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8002248:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224e:	2301      	movs	r3, #1
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225e:	4619      	mov	r1, r3
 8002260:	484b      	ldr	r0, [pc, #300]	; (8002390 <MX_GPIO_Init+0x2fc>)
 8002262:	f005 ff99 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002266:	2308      	movs	r3, #8
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227a:	4619      	mov	r1, r3
 800227c:	4845      	ldr	r0, [pc, #276]	; (8002394 <MX_GPIO_Init+0x300>)
 800227e:	f005 ff8b 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002282:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002288:	2300      	movs	r3, #0
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002294:	4619      	mov	r1, r3
 8002296:	483e      	ldr	r0, [pc, #248]	; (8002390 <MX_GPIO_Init+0x2fc>)
 8002298:	f005 ff7e 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800229c:	2302      	movs	r3, #2
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ac:	4619      	mov	r1, r3
 80022ae:	483b      	ldr	r0, [pc, #236]	; (800239c <MX_GPIO_Init+0x308>)
 80022b0:	f005 ff72 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80022b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80022c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c6:	4619      	mov	r1, r3
 80022c8:	4830      	ldr	r0, [pc, #192]	; (800238c <MX_GPIO_Init+0x2f8>)
 80022ca:	f005 ff65 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 80022ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d4:	2301      	movs	r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e4:	4619      	mov	r1, r3
 80022e6:	4829      	ldr	r0, [pc, #164]	; (800238c <MX_GPIO_Init+0x2f8>)
 80022e8:	f005 ff56 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 80022ec:	f242 4319 	movw	r3, #9241	; 0x2419
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022fe:	4619      	mov	r1, r3
 8002300:	4825      	ldr	r0, [pc, #148]	; (8002398 <MX_GPIO_Init+0x304>)
 8002302:	f005 ff49 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8002306:	f645 2326 	movw	r3, #23078	; 0x5a26
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230c:	2301      	movs	r3, #1
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231c:	4619      	mov	r1, r3
 800231e:	481e      	ldr	r0, [pc, #120]	; (8002398 <MX_GPIO_Init+0x304>)
 8002320:	f005 ff3a 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8002324:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800232a:	2300      	movs	r3, #0
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002336:	4619      	mov	r1, r3
 8002338:	4813      	ldr	r0, [pc, #76]	; (8002388 <MX_GPIO_Init+0x2f4>)
 800233a:	f005 ff2d 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 800233e:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8002342:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002344:	2301      	movs	r3, #1
 8002346:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002354:	4619      	mov	r1, r3
 8002356:	4811      	ldr	r0, [pc, #68]	; (800239c <MX_GPIO_Init+0x308>)
 8002358:	f005 ff1e 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 800235c:	f44f 43f9 	mov.w	r3, #31872	; 0x7c80
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	2301      	movs	r3, #1
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800236e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002372:	4619      	mov	r1, r3
 8002374:	480a      	ldr	r0, [pc, #40]	; (80023a0 <MX_GPIO_Init+0x30c>)
 8002376:	f005 ff0f 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800237a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002380:	2300      	movs	r3, #0
 8002382:	e00f      	b.n	80023a4 <MX_GPIO_Init+0x310>
 8002384:	40023800 	.word	0x40023800
 8002388:	40021000 	.word	0x40021000
 800238c:	40021400 	.word	0x40021400
 8002390:	40020800 	.word	0x40020800
 8002394:	40020000 	.word	0x40020000
 8002398:	40021800 	.word	0x40021800
 800239c:	40020400 	.word	0x40020400
 80023a0:	40020c00 	.word	0x40020c00
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ae:	4619      	mov	r1, r3
 80023b0:	4815      	ldr	r0, [pc, #84]	; (8002408 <MX_GPIO_Init+0x374>)
 80023b2:	f005 fef1 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 80023b6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80023c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ca:	4619      	mov	r1, r3
 80023cc:	480f      	ldr	r0, [pc, #60]	; (800240c <MX_GPIO_Init+0x378>)
 80023ce:	f005 fee3 	bl	8008198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin;
 80023d2:	2370      	movs	r3, #112	; 0x70
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023da:	2301      	movs	r3, #1
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e6:	4619      	mov	r1, r3
 80023e8:	4807      	ldr	r0, [pc, #28]	; (8002408 <MX_GPIO_Init+0x374>)
 80023ea:	f005 fed5 	bl	8008198 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2105      	movs	r1, #5
 80023f2:	2006      	movs	r0, #6
 80023f4:	f005 fe98 	bl	8008128 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023f8:	2006      	movs	r0, #6
 80023fa:	f005 feb1 	bl	8008160 <HAL_NVIC_EnableIRQ>

}
 80023fe:	bf00      	nop
 8002400:	3738      	adds	r7, #56	; 0x38
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40020c00 	.word	0x40020c00
 800240c:	40021800 	.word	0x40021800

08002410 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <MX_I2C2_Init+0x74>)
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <MX_I2C2_Init+0x78>)
 8002418:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800241a:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <MX_I2C2_Init+0x74>)
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <MX_I2C2_Init+0x7c>)
 800241e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002420:	4b18      	ldr	r3, [pc, #96]	; (8002484 <MX_I2C2_Init+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <MX_I2C2_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <MX_I2C2_Init+0x74>)
 800242e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002432:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <MX_I2C2_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <MX_I2C2_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002440:	4b10      	ldr	r3, [pc, #64]	; (8002484 <MX_I2C2_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <MX_I2C2_Init+0x74>)
 8002448:	2200      	movs	r2, #0
 800244a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800244c:	480d      	ldr	r0, [pc, #52]	; (8002484 <MX_I2C2_Init+0x74>)
 800244e:	f006 f899 	bl	8008584 <HAL_I2C_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002458:	f000 fa6c 	bl	8002934 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800245c:	2100      	movs	r1, #0
 800245e:	4809      	ldr	r0, [pc, #36]	; (8002484 <MX_I2C2_Init+0x74>)
 8002460:	f007 f885 	bl	800956e <HAL_I2CEx_ConfigAnalogFilter>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800246a:	f000 fa63 	bl	8002934 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800246e:	2100      	movs	r1, #0
 8002470:	4804      	ldr	r0, [pc, #16]	; (8002484 <MX_I2C2_Init+0x74>)
 8002472:	f007 f8b8 	bl	80095e6 <HAL_I2CEx_ConfigDigitalFilter>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800247c:	f000 fa5a 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20006254 	.word	0x20006254
 8002488:	40005800 	.word	0x40005800
 800248c:	000186a0 	.word	0x000186a0

08002490 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <MX_I2C3_Init+0x74>)
 8002496:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <MX_I2C3_Init+0x78>)
 8002498:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800249a:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <MX_I2C3_Init+0x74>)
 800249c:	4a1b      	ldr	r2, [pc, #108]	; (800250c <MX_I2C3_Init+0x7c>)
 800249e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024a0:	4b18      	ldr	r3, [pc, #96]	; (8002504 <MX_I2C3_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80024a6:	4b17      	ldr	r3, [pc, #92]	; (8002504 <MX_I2C3_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <MX_I2C3_Init+0x74>)
 80024ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024b2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <MX_I2C3_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80024ba:	4b12      	ldr	r3, [pc, #72]	; (8002504 <MX_I2C3_Init+0x74>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024c0:	4b10      	ldr	r3, [pc, #64]	; (8002504 <MX_I2C3_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <MX_I2C3_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <MX_I2C3_Init+0x74>)
 80024ce:	f006 f859 	bl	8008584 <HAL_I2C_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80024d8:	f000 fa2c 	bl	8002934 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024dc:	2100      	movs	r1, #0
 80024de:	4809      	ldr	r0, [pc, #36]	; (8002504 <MX_I2C3_Init+0x74>)
 80024e0:	f007 f845 	bl	800956e <HAL_I2CEx_ConfigAnalogFilter>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80024ea:	f000 fa23 	bl	8002934 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80024ee:	2100      	movs	r1, #0
 80024f0:	4804      	ldr	r0, [pc, #16]	; (8002504 <MX_I2C3_Init+0x74>)
 80024f2:	f007 f878 	bl	80095e6 <HAL_I2CEx_ConfigDigitalFilter>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80024fc:	f000 fa1a 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20006200 	.word	0x20006200
 8002508:	40005c00 	.word	0x40005c00
 800250c:	000186a0 	.word	0x000186a0

08002510 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a42      	ldr	r2, [pc, #264]	; (8002638 <HAL_I2C_MspInit+0x128>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d12d      	bne.n	800258e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_I2C_MspInit+0x12c>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	4a40      	ldr	r2, [pc, #256]	; (800263c <HAL_I2C_MspInit+0x12c>)
 800253c:	f043 0302 	orr.w	r3, r3, #2
 8002540:	6313      	str	r3, [r2, #48]	; 0x30
 8002542:	4b3e      	ldr	r3, [pc, #248]	; (800263c <HAL_I2C_MspInit+0x12c>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800254e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002554:	2312      	movs	r3, #18
 8002556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002558:	2301      	movs	r3, #1
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002560:	2304      	movs	r3, #4
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	4619      	mov	r1, r3
 800256a:	4835      	ldr	r0, [pc, #212]	; (8002640 <HAL_I2C_MspInit+0x130>)
 800256c:	f005 fe14 	bl	8008198 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	4b31      	ldr	r3, [pc, #196]	; (800263c <HAL_I2C_MspInit+0x12c>)
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	4a30      	ldr	r2, [pc, #192]	; (800263c <HAL_I2C_MspInit+0x12c>)
 800257a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800257e:	6413      	str	r3, [r2, #64]	; 0x40
 8002580:	4b2e      	ldr	r3, [pc, #184]	; (800263c <HAL_I2C_MspInit+0x12c>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800258c:	e050      	b.n	8002630 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2c      	ldr	r2, [pc, #176]	; (8002644 <HAL_I2C_MspInit+0x134>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d14b      	bne.n	8002630 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <HAL_I2C_MspInit+0x12c>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	4a26      	ldr	r2, [pc, #152]	; (800263c <HAL_I2C_MspInit+0x12c>)
 80025a2:	f043 0304 	orr.w	r3, r3, #4
 80025a6:	6313      	str	r3, [r2, #48]	; 0x30
 80025a8:	4b24      	ldr	r3, [pc, #144]	; (800263c <HAL_I2C_MspInit+0x12c>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_I2C_MspInit+0x12c>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	4a1f      	ldr	r2, [pc, #124]	; (800263c <HAL_I2C_MspInit+0x12c>)
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	6313      	str	r3, [r2, #48]	; 0x30
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_I2C_MspInit+0x12c>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d6:	2312      	movs	r3, #18
 80025d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025da:	2301      	movs	r3, #1
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025e2:	2304      	movs	r3, #4
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e6:	f107 031c 	add.w	r3, r7, #28
 80025ea:	4619      	mov	r1, r3
 80025ec:	4816      	ldr	r0, [pc, #88]	; (8002648 <HAL_I2C_MspInit+0x138>)
 80025ee:	f005 fdd3 	bl	8008198 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025f8:	2312      	movs	r3, #18
 80025fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002604:	2304      	movs	r3, #4
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4619      	mov	r1, r3
 800260e:	480f      	ldr	r0, [pc, #60]	; (800264c <HAL_I2C_MspInit+0x13c>)
 8002610:	f005 fdc2 	bl	8008198 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <HAL_I2C_MspInit+0x12c>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4a07      	ldr	r2, [pc, #28]	; (800263c <HAL_I2C_MspInit+0x12c>)
 800261e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002622:	6413      	str	r3, [r2, #64]	; 0x40
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_I2C_MspInit+0x12c>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
}
 8002630:	bf00      	nop
 8002632:	3730      	adds	r7, #48	; 0x30
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40005800 	.word	0x40005800
 800263c:	40023800 	.word	0x40023800
 8002640:	40020400 	.word	0x40020400
 8002644:	40005c00 	.word	0x40005c00
 8002648:	40020800 	.word	0x40020800
 800264c:	40020000 	.word	0x40020000

08002650 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <MX_IWDG_Init+0x2c>)
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <MX_IWDG_Init+0x30>)
 8002658:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <MX_IWDG_Init+0x2c>)
 800265c:	2204      	movs	r2, #4
 800265e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <MX_IWDG_Init+0x2c>)
 8002662:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002666:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002668:	4804      	ldr	r0, [pc, #16]	; (800267c <MX_IWDG_Init+0x2c>)
 800266a:	f006 fffb 	bl	8009664 <HAL_IWDG_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8002674:	f000 f95e 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	200062a8 	.word	0x200062a8
 8002680:	40003000 	.word	0x40003000

08002684 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8002688:	f000 f8aa 	bl	80027e0 <MRT_STM_Init>
	__HAL_DBGMCU_FREEZE_IWDG();	// pause IWDG and RTC during debugging
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <main+0x60>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <main+0x60>)
 8002692:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002696:	6093      	str	r3, [r2, #8]
	__HAL_FREEZE_RTC_DBGMCU();
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <main+0x60>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a11      	ldr	r2, [pc, #68]	; (80026e4 <main+0x60>)
 800269e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a2:	6093      	str	r3, [r2, #8]
	println("\r\n\r\nSTM Init...OK");
 80026a4:	4810      	ldr	r0, [pc, #64]	; (80026e8 <main+0x64>)
 80026a6:	f7fe fcb1 	bl	800100c <println>

	MRT_Init();
 80026aa:	f7fe fd4d 	bl	8001148 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 80026ae:	480f      	ldr	r0, [pc, #60]	; (80026ec <main+0x68>)
 80026b0:	f7fe fcac 	bl	800100c <println>
	HAL_IWDG_Refresh(&hiwdg);
 80026b4:	480e      	ldr	r0, [pc, #56]	; (80026f0 <main+0x6c>)
 80026b6:	f007 f817 	bl	80096e8 <HAL_IWDG_Refresh>
	buzz_startup_success();
 80026ba:	f7fe fd2d 	bl	8001118 <buzz_startup_success>

	MRT_waitForLaunch();
 80026be:	f000 f8b1 	bl	8002824 <MRT_waitForLaunch>
	//if (DEBUG) TESTING_LOOP(); //TODO remove

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	//Initialize the os
	MX_FREERTOS_Init();
 80026c2:	f7fe ff5f 	bl	8001584 <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 80026c6:	480b      	ldr	r0, [pc, #44]	; (80026f4 <main+0x70>)
 80026c8:	f7fe fca0 	bl	800100c <println>
	osKernelStart();
 80026cc:	f00e fb98 	bl	8010e00 <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 80026d0:	4809      	ldr	r0, [pc, #36]	; (80026f8 <main+0x74>)
 80026d2:	f7fe fc9b 	bl	800100c <println>
	HAL_IWDG_Refresh(&hiwdg);
 80026d6:	4806      	ldr	r0, [pc, #24]	; (80026f0 <main+0x6c>)
 80026d8:	f007 f806 	bl	80096e8 <HAL_IWDG_Refresh>
	MRT_Deinit();
 80026dc:	f7fe fd5a 	bl	8001194 <MRT_Deinit>
	while (1){}
 80026e0:	e7fe      	b.n	80026e0 <main+0x5c>
 80026e2:	bf00      	nop
 80026e4:	e0042000 	.word	0xe0042000
 80026e8:	0801ae3c 	.word	0x0801ae3c
 80026ec:	0801ae50 	.word	0x0801ae50
 80026f0:	200062a8 	.word	0x200062a8
 80026f4:	0801ae70 	.word	0x0801ae70
 80026f8:	0801ae90 	.word	0x0801ae90

080026fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b094      	sub	sp, #80	; 0x50
 8002700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002702:	f107 0320 	add.w	r3, r7, #32
 8002706:	2230      	movs	r2, #48	; 0x30
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f013 f986 	bl	8015a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002710:	f107 030c 	add.w	r3, r7, #12
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <SystemClock_Config+0xdc>)
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	4a2b      	ldr	r2, [pc, #172]	; (80027d8 <SystemClock_Config+0xdc>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	6413      	str	r3, [r2, #64]	; 0x40
 8002730:	4b29      	ldr	r3, [pc, #164]	; (80027d8 <SystemClock_Config+0xdc>)
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800273c:	2300      	movs	r3, #0
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	4b26      	ldr	r3, [pc, #152]	; (80027dc <SystemClock_Config+0xe0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a25      	ldr	r2, [pc, #148]	; (80027dc <SystemClock_Config+0xe0>)
 8002746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	4b23      	ldr	r3, [pc, #140]	; (80027dc <SystemClock_Config+0xe0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002758:	2309      	movs	r3, #9
 800275a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800275c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002762:	2301      	movs	r3, #1
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002766:	2302      	movs	r3, #2
 8002768:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800276a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800276e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002770:	2308      	movs	r3, #8
 8002772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002774:	23b4      	movs	r3, #180	; 0xb4
 8002776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002778:	2302      	movs	r3, #2
 800277a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800277c:	2303      	movs	r3, #3
 800277e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002780:	f107 0320 	add.w	r3, r7, #32
 8002784:	4618      	mov	r0, r3
 8002786:	f007 f84d 	bl	8009824 <HAL_RCC_OscConfig>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002790:	f000 f8d0 	bl	8002934 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002794:	f006 fff6 	bl	8009784 <HAL_PWREx_EnableOverDrive>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800279e:	f000 f8c9 	bl	8002934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027a2:	230f      	movs	r3, #15
 80027a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027a6:	2302      	movs	r3, #2
 80027a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80027b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	2105      	movs	r1, #5
 80027c0:	4618      	mov	r0, r3
 80027c2:	f007 faa7 	bl	8009d14 <HAL_RCC_ClockConfig>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80027cc:	f000 f8b2 	bl	8002934 <Error_Handler>
  }
}
 80027d0:	bf00      	nop
 80027d2:	3750      	adds	r7, #80	; 0x50
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40007000 	.word	0x40007000

080027e0 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	HAL_Init();
 80027e4:	f004 ff4e 	bl	8007684 <HAL_Init>
	SystemClock_Config();
 80027e8:	f7ff ff88 	bl	80026fc <SystemClock_Config>

	MX_GPIO_Init();
 80027ec:	f7ff fc52 	bl	8002094 <MX_GPIO_Init>
	MX_ADC1_Init();
 80027f0:	f7fe fe1c 	bl	800142c <MX_ADC1_Init>
	MX_I2C2_Init();
 80027f4:	f7ff fe0c 	bl	8002410 <MX_I2C2_Init>
	MX_I2C3_Init();
 80027f8:	f7ff fe4a 	bl	8002490 <MX_I2C3_Init>
	MX_SPI2_Init();
 80027fc:	f000 fc16 	bl	800302c <MX_SPI2_Init>
	MX_SPI4_Init();
 8002800:	f000 fc4a 	bl	8003098 <MX_SPI4_Init>
	MX_SPI5_Init();
 8002804:	f000 fc7e 	bl	8003104 <MX_SPI5_Init>
	MX_TIM2_Init();
 8002808:	f000 feba 	bl	8003580 <MX_TIM2_Init>
	MX_UART8_Init();
 800280c:	f000 ff86 	bl	800371c <MX_UART8_Init>
	MX_USART3_UART_Init();
 8002810:	f000 ffae 	bl	8003770 <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8002814:	f000 ffd6 	bl	80037c4 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8002818:	f000 f892 	bl	8002940 <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 800281c:	f00a fe8e 	bl	800d53c <MX_FATFS_Init>
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <MRT_waitForLaunch>:

void MRT_waitForLaunch(void){
 8002824:	b580      	push	{r7, lr}
 8002826:	b0c2      	sub	sp, #264	; 0x108
 8002828:	af00      	add	r7, sp, #0

	println("Waiting for launch command from ground station\r\n");
 800282a:	482e      	ldr	r0, [pc, #184]	; (80028e4 <MRT_waitForLaunch+0xc0>)
 800282c:	f7fe fbee 	bl	800100c <println>

	char radio_buffer[RADIO_BUFFER_SIZE];
	radio_command cmd = -1;
 8002830:	23ff      	movs	r3, #255	; 0xff
 8002832:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD){
 8002836:	bf00      	nop
	}


	//TODO testing time (saved in watchdog thread)
	//TODO for testing (saved in wd thread)
	hlps22hh.getPressure();
 8002838:	4b2b      	ldr	r3, [pc, #172]	; (80028e8 <MRT_waitForLaunch+0xc4>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4798      	blx	r3
	rtc_bckp_reg_alt_pad = MRT_getAltitude(hlps22hh.pressure_hPa);
 800283e:	4b2a      	ldr	r3, [pc, #168]	; (80028e8 <MRT_waitForLaunch+0xc4>)
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	eeb0 0a67 	vmov.f32	s0, s15
 8002848:	f001 f8c6 	bl	80039d8 <MRT_getAltitude>
 800284c:	eef0 7a40 	vmov.f32	s15, s0
 8002850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002854:	ee17 2a90 	vmov	r2, s15
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <MRT_waitForLaunch+0xc8>)
 800285a:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 800285c:	4b23      	ldr	r3, [pc, #140]	; (80028ec <MRT_waitForLaunch+0xc8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	2009      	movs	r0, #9
 8002864:	f000 fbc4 	bl	8002ff0 <MRT_RTC_setBackupReg>

	//Get RTC time
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002868:	2200      	movs	r2, #0
 800286a:	4921      	ldr	r1, [pc, #132]	; (80028f0 <MRT_waitForLaunch+0xcc>)
 800286c:	4821      	ldr	r0, [pc, #132]	; (80028f4 <MRT_waitForLaunch+0xd0>)
 800286e:	f007 ff89 	bl	800a784 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002872:	2200      	movs	r2, #0
 8002874:	4920      	ldr	r1, [pc, #128]	; (80028f8 <MRT_waitForLaunch+0xd4>)
 8002876:	481f      	ldr	r0, [pc, #124]	; (80028f4 <MRT_waitForLaunch+0xd0>)
 8002878:	f008 f889 	bl	800a98e <HAL_RTC_GetDate>
	prev_min = sTime.Minutes;
 800287c:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <MRT_waitForLaunch+0xcc>)
 800287e:	785a      	ldrb	r2, [r3, #1]
 8002880:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <MRT_waitForLaunch+0xd8>)
 8002882:	701a      	strb	r2, [r3, #0]
	prev_sec = sTime.Seconds;
 8002884:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <MRT_waitForLaunch+0xcc>)
 8002886:	789a      	ldrb	r2, [r3, #2]
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <MRT_waitForLaunch+0xdc>)
 800288a:	701a      	strb	r2, [r3, #0]
	if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <MRT_waitForLaunch+0xd0>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <MRT_waitForLaunch+0x82>
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <MRT_waitForLaunch+0xdc>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	3301      	adds	r3, #1
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4b17      	ldr	r3, [pc, #92]	; (8002900 <MRT_waitForLaunch+0xdc>)
 80028a4:	701a      	strb	r2, [r3, #0]
	prev_subsec = sTime.SubSeconds;
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <MRT_waitForLaunch+0xcc>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4a16      	ldr	r2, [pc, #88]	; (8002904 <MRT_waitForLaunch+0xe0>)
 80028ac:	6013      	str	r3, [r2, #0]
	rtc_bckp_reg_pad_time = 100*prev_min + prev_sec;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <MRT_waitForLaunch+0xd8>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	2364      	movs	r3, #100	; 0x64
 80028b6:	fb03 f302 	mul.w	r3, r3, r2
 80028ba:	4a11      	ldr	r2, [pc, #68]	; (8002900 <MRT_waitForLaunch+0xdc>)
 80028bc:	7812      	ldrb	r2, [r2, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <MRT_waitForLaunch+0xe4>)
 80028c4:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <MRT_waitForLaunch+0xe4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4619      	mov	r1, r3
 80028cc:	200a      	movs	r0, #10
 80028ce:	f000 fb8f 	bl	8002ff0 <MRT_RTC_setBackupReg>


	//Send acknowledgement
	MRT_radio_tx((char*) "LAUNCH COMMAND RECEIVED"); //TODO CHECK AT WHAT JASPER DID
 80028d2:	480e      	ldr	r0, [pc, #56]	; (800290c <MRT_waitForLaunch+0xe8>)
 80028d4:	f004 feac 	bl	8007630 <MRT_radio_tx>
}
 80028d8:	bf00      	nop
 80028da:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	0801aecc 	.word	0x0801aecc
 80028e8:	200004d4 	.word	0x200004d4
 80028ec:	20000338 	.word	0x20000338
 80028f0:	200002d4 	.word	0x200002d4
 80028f4:	200062b4 	.word	0x200062b4
 80028f8:	200002e8 	.word	0x200002e8
 80028fc:	2000037a 	.word	0x2000037a
 8002900:	2000037b 	.word	0x2000037b
 8002904:	2000037c 	.word	0x2000037c
 8002908:	2000033c 	.word	0x2000033c
 800290c:	0801af00 	.word	0x0801af00

08002910 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002922:	f004 fed1 	bl	80076c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40001000 	.word	0x40001000

08002934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002938:	b672      	cpsid	i
}
 800293a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800293c:	e7fe      	b.n	800293c <Error_Handler+0x8>
	...

08002940 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b090      	sub	sp, #64	; 0x40
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	60da      	str	r2, [r3, #12]
 8002954:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002956:	2300      	movs	r3, #0
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800295a:	463b      	mov	r3, r7
 800295c:	2228      	movs	r2, #40	; 0x28
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f013 f85b 	bl	8015a1c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002966:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <MX_RTC_Init+0x154>)
 8002968:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <MX_RTC_Init+0x158>)
 800296a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800296c:	4b49      	ldr	r3, [pc, #292]	; (8002a94 <MX_RTC_Init+0x154>)
 800296e:	2200      	movs	r2, #0
 8002970:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002972:	4b48      	ldr	r3, [pc, #288]	; (8002a94 <MX_RTC_Init+0x154>)
 8002974:	227f      	movs	r2, #127	; 0x7f
 8002976:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002978:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <MX_RTC_Init+0x154>)
 800297a:	22ff      	movs	r2, #255	; 0xff
 800297c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800297e:	4b45      	ldr	r3, [pc, #276]	; (8002a94 <MX_RTC_Init+0x154>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002984:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <MX_RTC_Init+0x154>)
 8002986:	2200      	movs	r2, #0
 8002988:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800298a:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <MX_RTC_Init+0x154>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002990:	4840      	ldr	r0, [pc, #256]	; (8002a94 <MX_RTC_Init+0x154>)
 8002992:	f007 fda9 	bl	800a4e8 <HAL_RTC_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800299c:	f7ff ffca 	bl	8002934 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80029ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029be:	2201      	movs	r2, #1
 80029c0:	4619      	mov	r1, r3
 80029c2:	4834      	ldr	r0, [pc, #208]	; (8002a94 <MX_RTC_Init+0x154>)
 80029c4:	f007 fe21 	bl	800a60a <HAL_RTC_SetTime>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80029ce:	f7ff ffb1 	bl	8002934 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80029d2:	2301      	movs	r3, #1
 80029d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80029de:	2301      	movs	r3, #1
 80029e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80029ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ee:	2201      	movs	r2, #1
 80029f0:	4619      	mov	r1, r3
 80029f2:	4828      	ldr	r0, [pc, #160]	; (8002a94 <MX_RTC_Init+0x154>)
 80029f4:	f007 ff24 	bl	800a840 <HAL_RTC_SetDate>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80029fe:	f7ff ff99 	bl	8002934 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a32:	463b      	mov	r3, r7
 8002a34:	2201      	movs	r2, #1
 8002a36:	4619      	mov	r1, r3
 8002a38:	4816      	ldr	r0, [pc, #88]	; (8002a94 <MX_RTC_Init+0x154>)
 8002a3a:	f007 fff7 	bl	800aa2c <HAL_RTC_SetAlarm_IT>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002a44:	f7ff ff76 	bl	8002934 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002a4e:	463b      	mov	r3, r7
 8002a50:	2201      	movs	r2, #1
 8002a52:	4619      	mov	r1, r3
 8002a54:	480f      	ldr	r0, [pc, #60]	; (8002a94 <MX_RTC_Init+0x154>)
 8002a56:	f007 ffe9 	bl	800aa2c <HAL_RTC_SetAlarm_IT>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002a60:	f7ff ff68 	bl	8002934 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <MX_RTC_Init+0x154>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <MX_RTC_Init+0x154>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002a74:	60da      	str	r2, [r3, #12]
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002a76:	2200      	movs	r2, #0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4806      	ldr	r0, [pc, #24]	; (8002a94 <MX_RTC_Init+0x154>)
 8002a7c:	f008 f9e4 	bl	800ae48 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 8002a86:	f7ff ff55 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a8a:	bf00      	nop
 8002a8c:	3740      	adds	r7, #64	; 0x40
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	200062b4 	.word	0x200062b4
 8002a98:	40002800 	.word	0x40002800

08002a9c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08e      	sub	sp, #56	; 0x38
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aa4:	f107 0308 	add.w	r3, r7, #8
 8002aa8:	2230      	movs	r2, #48	; 0x30
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f012 ffb5 	bl	8015a1c <memset>
  if(rtcHandle->Instance==RTC)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <HAL_RTC_MspInit+0x6c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d121      	bne.n	8002b00 <HAL_RTC_MspInit+0x64>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002abc:	2320      	movs	r3, #32
 8002abe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ac6:	f107 0308 	add.w	r3, r7, #8
 8002aca:	4618      	mov	r0, r3
 8002acc:	f007 fb4e 	bl	800a16c <HAL_RCCEx_PeriphCLKConfig>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002ad6:	f7ff ff2d 	bl	8002934 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <HAL_RTC_MspInit+0x70>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	2105      	movs	r1, #5
 8002ae4:	2003      	movs	r0, #3
 8002ae6:	f005 fb1f 	bl	8008128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002aea:	2003      	movs	r0, #3
 8002aec:	f005 fb38 	bl	8008160 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002af0:	2200      	movs	r2, #0
 8002af2:	2105      	movs	r1, #5
 8002af4:	2029      	movs	r0, #41	; 0x29
 8002af6:	f005 fb17 	bl	8008128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002afa:	2029      	movs	r0, #41	; 0x29
 8002afc:	f005 fb30 	bl	8008160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002b00:	bf00      	nop
 8002b02:	3738      	adds	r7, #56	; 0x38
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40002800 	.word	0x40002800
 8002b0c:	42470e3c 	.word	0x42470e3c

08002b10 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 8002b14:	4817      	ldr	r0, [pc, #92]	; (8002b74 <MRT_rtc_Init+0x64>)
 8002b16:	f7fe fa79 	bl	800100c <println>

	print("\tSetting RTC to previous time...");
 8002b1a:	4817      	ldr	r0, [pc, #92]	; (8002b78 <MRT_rtc_Init+0x68>)
 8002b1c:	f7fe fa94 	bl	8001048 <print>
	MRT_set_rtc(prev_hour,prev_min,prev_sec);
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <MRT_rtc_Init+0x6c>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <MRT_rtc_Init+0x70>)
 8002b26:	7811      	ldrb	r1, [r2, #0]
 8002b28:	4a16      	ldr	r2, [pc, #88]	; (8002b84 <MRT_rtc_Init+0x74>)
 8002b2a:	7812      	ldrb	r2, [r2, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f8df 	bl	8002cf0 <MRT_set_rtc>
	println("OK");
 8002b32:	4815      	ldr	r0, [pc, #84]	; (8002b88 <MRT_rtc_Init+0x78>)
 8002b34:	f7fe fa6a 	bl	800100c <println>

	HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8002b38:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b3c:	f004 fde4 	bl	8007708 <HAL_Delay>

	//TODO for some reason, both set_alarm need to be uncommented or commented together
	//They can't be used individually (or else we get a hardfault during external flash setup??)
	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 8002b40:	4812      	ldr	r0, [pc, #72]	; (8002b8c <MRT_rtc_Init+0x7c>)
 8002b42:	f7fe fa81 	bl	8001048 <print>
		MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8002b46:	2200      	movs	r2, #0
 8002b48:	211e      	movs	r1, #30
 8002b4a:	2004      	movs	r0, #4
 8002b4c:	f000 f916 	bl	8002d7c <MRT_set_alarmA>
		println("OK");
 8002b50:	480d      	ldr	r0, [pc, #52]	; (8002b88 <MRT_rtc_Init+0x78>)
 8002b52:	f7fe fa5b 	bl	800100c <println>
	#endif


	#if ALARM_B_ACTIVE
		print("\tSetting alarmB...");
 8002b56:	480e      	ldr	r0, [pc, #56]	; (8002b90 <MRT_rtc_Init+0x80>)
 8002b58:	f7fe fa76 	bl	8001048 <print>
		MRT_set_alarmB(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	211e      	movs	r1, #30
 8002b60:	2012      	movs	r0, #18
 8002b62:	f000 f951 	bl	8002e08 <MRT_set_alarmB>
		println("OK");
 8002b66:	4808      	ldr	r0, [pc, #32]	; (8002b88 <MRT_rtc_Init+0x78>)
 8002b68:	f7fe fa50 	bl	800100c <println>
	#endif

	MRT_clear_alarms_flags();
 8002b6c:	f000 f812 	bl	8002b94 <MRT_clear_alarms_flags>
}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	0801af18 	.word	0x0801af18
 8002b78:	0801af28 	.word	0x0801af28
 8002b7c:	20000379 	.word	0x20000379
 8002b80:	2000037a 	.word	0x2000037a
 8002b84:	2000037b 	.word	0x2000037b
 8002b88:	0801af4c 	.word	0x0801af4c
 8002b8c:	0801af50 	.word	0x0801af50
 8002b90:	0801af64 	.word	0x0801af64

08002b94 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 8002b98:	482c      	ldr	r0, [pc, #176]	; (8002c4c <MRT_clear_alarms_flags+0xb8>)
 8002b9a:	f7fe fa55 	bl	8001048 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	22ca      	movs	r2, #202	; 0xca
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ba6:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2253      	movs	r2, #83	; 0x53
 8002bac:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002bae:	e008      	b.n	8002bc2 <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002bb0:	4b27      	ldr	r3, [pc, #156]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002bc0:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ef      	bne.n	8002bb0 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	22ff      	movs	r2, #255	; 0xff
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <MRT_clear_alarms_flags+0xc0>)
 8002bda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bde:	615a      	str	r2, [r3, #20]



  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	22ca      	movs	r2, #202	; 0xca
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2253      	movs	r2, #83	; 0x53
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002bf0:	e008      	b.n	8002c04 <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002c02:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1ef      	bne.n	8002bf2 <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002c12:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	22ff      	movs	r2, #255	; 0xff
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <MRT_clear_alarms_flags+0xc0>)
 8002c1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c20:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <MRT_clear_alarms_flags+0xc4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a0c      	ldr	r2, [pc, #48]	; (8002c58 <MRT_clear_alarms_flags+0xc4>)
 8002c28:	f043 0304 	orr.w	r3, r3, #4
 8002c2c:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MRT_clear_alarms_flags+0xbc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002c3e:	60da      	str	r2, [r3, #12]
	__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <MRT_clear_alarms_flags+0xc0>)
 8002c42:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002c46:	615a      	str	r2, [r3, #20]
}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	0801af78 	.word	0x0801af78
 8002c50:	200062b4 	.word	0x200062b4
 8002c54:	40013c00 	.word	0x40013c00
 8002c58:	40007000 	.word	0x40007000

08002c5c <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08c      	sub	sp, #48	; 0x30
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8002c64:	481e      	ldr	r0, [pc, #120]	; (8002ce0 <MRT_StandByMode+0x84>)
 8002c66:	f7fe f9ef 	bl	8001048 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002c6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c6e:	f006 fd4b 	bl	8009708 <HAL_PWR_EnableWakeUpPin>


	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002c72:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <MRT_StandByMode+0x88>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	22ca      	movs	r2, #202	; 0xca
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <MRT_StandByMode+0x88>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2253      	movs	r2, #83	; 0x53
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24
	//Need this line or else alarm B will wake up the board immediately
	//Weird thing is this is not needed for alarm A
	__HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <MRT_StandByMode+0x88>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <MRT_StandByMode+0x88>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c90:	609a      	str	r2, [r3, #8]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002c92:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <MRT_StandByMode+0x88>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	22ff      	movs	r2, #255	; 0xff
 8002c98:	625a      	str	r2, [r3, #36]	; 0x24

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8002c9a:	f7ff ff7b 	bl	8002b94 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8002c9e:	4812      	ldr	r0, [pc, #72]	; (8002ce8 <MRT_StandByMode+0x8c>)
 8002ca0:	f7fe f9b4 	bl	800100c <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	f107 030c 	add.w	r3, r7, #12
 8002caa:	4910      	ldr	r1, [pc, #64]	; (8002cec <MRT_StandByMode+0x90>)
 8002cac:	4618      	mov	r0, r3
 8002cae:	f013 ff33 	bl	8016b18 <siprintf>
	println(msg);
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe f9a8 	bl	800100c <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4808      	ldr	r0, [pc, #32]	; (8002ce4 <MRT_StandByMode+0x88>)
 8002cc2:	f008 f8c1 	bl	800ae48 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MRT_StandByMode+0x74>
	{
	  Error_Handler();
 8002ccc:	f7ff fe32 	bl	8002934 <Error_Handler>
	}

	HAL_SuspendTick(); //System tick interrupt disabled (might not be necessary)
 8002cd0:	f000 fb8a 	bl	80033e8 <HAL_SuspendTick>

	HAL_PWR_EnterSTANDBYMode();
 8002cd4:	f006 fd3e 	bl	8009754 <HAL_PWR_EnterSTANDBYMode>
}
 8002cd8:	bf00      	nop
 8002cda:	3730      	adds	r7, #48	; 0x30
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	0801af90 	.word	0x0801af90
 8002ce4:	200062b4 	.word	0x200062b4
 8002ce8:	0801afac 	.word	0x0801afac
 8002cec:	0801afbc 	.word	0x0801afbc

08002cf0 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	71bb      	strb	r3, [r7, #6]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	717b      	strb	r3, [r7, #5]

	  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 4U, 0U);
	  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
	  */

	  sTime.Hours = int_to_hex_table[h];
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <MRT_set_rtc+0x80>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8002d0a:	79bb      	ldrb	r3, [r7, #6]
 8002d0c:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <MRT_set_rtc+0x80>)
 8002d0e:	5cd3      	ldrb	r3, [r2, r3]
 8002d10:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8002d12:	797b      	ldrb	r3, [r7, #5]
 8002d14:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <MRT_set_rtc+0x80>)
 8002d16:	5cd3      	ldrb	r3, [r2, r3]
 8002d18:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002d22:	f107 030c 	add.w	r3, r7, #12
 8002d26:	2201      	movs	r2, #1
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4812      	ldr	r0, [pc, #72]	; (8002d74 <MRT_set_rtc+0x84>)
 8002d2c:	f007 fc6d 	bl	800a60a <HAL_RTC_SetTime>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8002d36:	f7ff fdfd 	bl	8002934 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <MRT_set_rtc+0x88>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8002d40:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <MRT_set_rtc+0x88>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <MRT_set_rtc+0x88>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <MRT_set_rtc+0x88>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002d52:	2201      	movs	r2, #1
 8002d54:	4908      	ldr	r1, [pc, #32]	; (8002d78 <MRT_set_rtc+0x88>)
 8002d56:	4807      	ldr	r0, [pc, #28]	; (8002d74 <MRT_set_rtc+0x84>)
 8002d58:	f007 fd72 	bl	800a840 <HAL_RTC_SetDate>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8002d62:	f7ff fde7 	bl	8002934 <Error_Handler>
	  }
}
 8002d66:	bf00      	nop
 8002d68:	3720      	adds	r7, #32
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000000 	.word	0x20000000
 8002d74:	200062b4 	.word	0x200062b4
 8002d78:	200002e8 	.word	0x200002e8

08002d7c <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
 8002d86:	460b      	mov	r3, r1
 8002d88:	71bb      	strb	r3, [r7, #6]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	4a1a      	ldr	r2, [pc, #104]	; (8002dfc <MRT_set_alarmA+0x80>)
 8002d92:	5cd2      	ldrb	r2, [r2, r3]
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <MRT_set_alarmA+0x84>)
 8002d96:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002d98:	79bb      	ldrb	r3, [r7, #6]
 8002d9a:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <MRT_set_alarmA+0x80>)
 8002d9c:	5cd2      	ldrb	r2, [r2, r3]
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <MRT_set_alarmA+0x84>)
 8002da0:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002da2:	797b      	ldrb	r3, [r7, #5]
 8002da4:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <MRT_set_alarmA+0x80>)
 8002da6:	5cd2      	ldrb	r2, [r2, r3]
 8002da8:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <MRT_set_alarmA+0x84>)
 8002daa:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <MRT_set_alarmA+0x84>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002db2:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <MRT_set_alarmA+0x84>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <MRT_set_alarmA+0x84>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <MRT_set_alarmA+0x84>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <MRT_set_alarmA+0x84>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002dca:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <MRT_set_alarmA+0x84>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <MRT_set_alarmA+0x84>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002dd8:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <MRT_set_alarmA+0x84>)
 8002dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002de0:	2201      	movs	r2, #1
 8002de2:	4907      	ldr	r1, [pc, #28]	; (8002e00 <MRT_set_alarmA+0x84>)
 8002de4:	4807      	ldr	r0, [pc, #28]	; (8002e04 <MRT_set_alarmA+0x88>)
 8002de6:	f007 fe21 	bl	800aa2c <HAL_RTC_SetAlarm_IT>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8002df0:	f7ff fda0 	bl	8002934 <Error_Handler>
	  }
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	200002ec 	.word	0x200002ec
 8002e04:	200062b4 	.word	0x200062b4

08002e08 <MRT_set_alarmB>:



void MRT_set_alarmB(uint8_t h, uint8_t m, uint8_t s){
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
 8002e12:	460b      	mov	r3, r1
 8002e14:	71bb      	strb	r3, [r7, #6]
 8002e16:	4613      	mov	r3, r2
 8002e18:	717b      	strb	r3, [r7, #5]
	  /** Enable the AlarmB
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	4a1a      	ldr	r2, [pc, #104]	; (8002e88 <MRT_set_alarmB+0x80>)
 8002e1e:	5cd2      	ldrb	r2, [r2, r3]
 8002e20:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <MRT_set_alarmB+0x84>)
 8002e22:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002e24:	79bb      	ldrb	r3, [r7, #6]
 8002e26:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <MRT_set_alarmB+0x80>)
 8002e28:	5cd2      	ldrb	r2, [r2, r3]
 8002e2a:	4b18      	ldr	r3, [pc, #96]	; (8002e8c <MRT_set_alarmB+0x84>)
 8002e2c:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002e2e:	797b      	ldrb	r3, [r7, #5]
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <MRT_set_alarmB+0x80>)
 8002e32:	5cd2      	ldrb	r2, [r2, r3]
 8002e34:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <MRT_set_alarmB+0x84>)
 8002e36:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <MRT_set_alarmB+0x84>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <MRT_set_alarmB+0x84>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e44:	4b11      	ldr	r3, [pc, #68]	; (8002e8c <MRT_set_alarmB+0x84>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <MRT_set_alarmB+0x84>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <MRT_set_alarmB+0x84>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002e56:	4b0d      	ldr	r3, [pc, #52]	; (8002e8c <MRT_set_alarmB+0x84>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <MRT_set_alarmB+0x84>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_B;
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <MRT_set_alarmB+0x84>)
 8002e66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4907      	ldr	r1, [pc, #28]	; (8002e8c <MRT_set_alarmB+0x84>)
 8002e70:	4807      	ldr	r0, [pc, #28]	; (8002e90 <MRT_set_alarmB+0x88>)
 8002e72:	f007 fddb 	bl	800aa2c <HAL_RTC_SetAlarm_IT>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MRT_set_alarmB+0x78>
	  {
	    Error_Handler();
 8002e7c:	f7ff fd5a 	bl	8002934 <Error_Handler>
	  }
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	200002ec 	.word	0x200002ec
 8002e90:	200062b4 	.word	0x200062b4

08002e94 <MRT_RTC_backup_regs_Init>:
							  &rtc_bckp_reg_alt_apogee, &rtc_bckp_reg_apogee_time, &rtc_bckp_reg_alt_main, &rtc_bckp_reg_main_time,
							  &rtc_bckp_reg_alt_landed, &rtc_bckp_reg_landed_time};


//Get all the backup regs values (initialization)
void MRT_RTC_backup_regs_Init(void){
 8002e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e96:	b0cf      	sub	sp, #316	; 0x13c
 8002e98:	af08      	add	r7, sp, #32
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ea0:	e011      	b.n	8002ec6 <MRT_RTC_backup_regs_Init+0x32>
		*rtc_bckp_regs[i] = MRT_RTC_getBackupReg(i);
 8002ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	4924      	ldr	r1, [pc, #144]	; (8002f3c <MRT_RTC_backup_regs_Init+0xa8>)
 8002eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eae:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f000 f87e 	bl	8002fb4 <MRT_RTC_getBackupReg>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8002ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eca:	2b12      	cmp	r3, #18
 8002ecc:	dde9      	ble.n	8002ea2 <MRT_RTC_backup_regs_Init+0xe>
	}

	//TODO TESTING
	char buffer[256];
	sprintf(buffer, "ALTITUDES:\r\n\tGround: %i \tTime: %i"
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <MRT_RTC_backup_regs_Init+0xac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <MRT_RTC_backup_regs_Init+0xb0>)
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <MRT_RTC_backup_regs_Init+0xb4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1b      	ldr	r2, [pc, #108]	; (8002f4c <MRT_RTC_backup_regs_Init+0xb8>)
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	491b      	ldr	r1, [pc, #108]	; (8002f50 <MRT_RTC_backup_regs_Init+0xbc>)
 8002ee4:	6809      	ldr	r1, [r1, #0]
 8002ee6:	481b      	ldr	r0, [pc, #108]	; (8002f54 <MRT_RTC_backup_regs_Init+0xc0>)
 8002ee8:	6800      	ldr	r0, [r0, #0]
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	4c1a      	ldr	r4, [pc, #104]	; (8002f58 <MRT_RTC_backup_regs_Init+0xc4>)
 8002eee:	6824      	ldr	r4, [r4, #0]
 8002ef0:	4d1a      	ldr	r5, [pc, #104]	; (8002f5c <MRT_RTC_backup_regs_Init+0xc8>)
 8002ef2:	682d      	ldr	r5, [r5, #0]
 8002ef4:	4e1a      	ldr	r6, [pc, #104]	; (8002f60 <MRT_RTC_backup_regs_Init+0xcc>)
 8002ef6:	6836      	ldr	r6, [r6, #0]
 8002ef8:	481a      	ldr	r0, [pc, #104]	; (8002f64 <MRT_RTC_backup_regs_Init+0xd0>)
 8002efa:	6800      	ldr	r0, [r0, #0]
 8002efc:	f107 0c14 	add.w	ip, r7, #20
 8002f00:	9007      	str	r0, [sp, #28]
 8002f02:	9606      	str	r6, [sp, #24]
 8002f04:	9505      	str	r5, [sp, #20]
 8002f06:	9404      	str	r4, [sp, #16]
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	9003      	str	r0, [sp, #12]
 8002f0c:	9102      	str	r1, [sp, #8]
 8002f0e:	9201      	str	r2, [sp, #4]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4914      	ldr	r1, [pc, #80]	; (8002f68 <MRT_RTC_backup_regs_Init+0xd4>)
 8002f18:	4660      	mov	r0, ip
 8002f1a:	f013 fdfd 	bl	8016b18 <siprintf>
					"\r\n\tMain: %i \tTime: %i"
					"\r\n\tLanded: %i \tTime: %i\r\n",
			rtc_bckp_reg_alt_pad, rtc_bckp_reg_pad_time,  rtc_bckp_reg_alt_true_apogee, rtc_bckp_reg_true_apogee_time,
			rtc_bckp_reg_alt_apogee, rtc_bckp_reg_apogee_time, rtc_bckp_reg_alt_main, rtc_bckp_reg_main_time,
			rtc_bckp_reg_alt_landed, rtc_bckp_reg_landed_time);
	print(buffer);
 8002f1e:	f107 0314 	add.w	r3, r7, #20
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fe f890 	bl	8001048 <print>

	HAL_Delay(2000);
 8002f28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f2c:	f004 fbec 	bl	8007708 <HAL_Delay>
}
 8002f30:	bf00      	nop
 8002f32:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	2000003c 	.word	0x2000003c
 8002f40:	20000338 	.word	0x20000338
 8002f44:	2000033c 	.word	0x2000033c
 8002f48:	20000340 	.word	0x20000340
 8002f4c:	20000344 	.word	0x20000344
 8002f50:	20000348 	.word	0x20000348
 8002f54:	2000034c 	.word	0x2000034c
 8002f58:	20000350 	.word	0x20000350
 8002f5c:	20000354 	.word	0x20000354
 8002f60:	20000358 	.word	0x20000358
 8002f64:	2000035c 	.word	0x2000035c
 8002f68:	0801afdc 	.word	0x0801afdc

08002f6c <MRT_RTC_clearBackupRegs>:

// initializes backup register values to zero
void MRT_RTC_clearBackupRegs(void) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <MRT_RTC_clearBackupRegs+0x44>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	22ca      	movs	r2, #202	; 0xca
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <MRT_RTC_clearBackupRegs+0x44>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2253      	movs	r2, #83	; 0x53
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint8_t i = 0; i < 20; i++) {
 8002f82:	2300      	movs	r3, #0
 8002f84:	71fb      	strb	r3, [r7, #7]
 8002f86:	e008      	b.n	8002f9a <MRT_RTC_clearBackupRegs+0x2e>
		HAL_RTCEx_BKUPWrite(&hrtc, i, 0);	// set all backup register values to zero
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4808      	ldr	r0, [pc, #32]	; (8002fb0 <MRT_RTC_clearBackupRegs+0x44>)
 8002f90:	f008 f896 	bl	800b0c0 <HAL_RTCEx_BKUPWrite>
	for (uint8_t i = 0; i < 20; i++) {
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	3301      	adds	r3, #1
 8002f98:	71fb      	strb	r3, [r7, #7]
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	2b13      	cmp	r3, #19
 8002f9e:	d9f3      	bls.n	8002f88 <MRT_RTC_clearBackupRegs+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <MRT_RTC_clearBackupRegs+0x44>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	22ff      	movs	r2, #255	; 0xff
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200062b4 	.word	0x200062b4

08002fb4 <MRT_RTC_getBackupReg>:

// gets the backup register value for the specified state
uint32_t MRT_RTC_getBackupReg(rtc_backup_reg state) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <MRT_RTC_getBackupReg+0x38>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	22ca      	movs	r2, #202	; 0xca
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <MRT_RTC_getBackupReg+0x38>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2253      	movs	r2, #83	; 0x53
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, (uint32_t) state);
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4806      	ldr	r0, [pc, #24]	; (8002fec <MRT_RTC_getBackupReg+0x38>)
 8002fd4:	f008 f88e 	bl	800b0f4 <HAL_RTCEx_BKUPRead>
 8002fd8:	60f8      	str	r0, [r7, #12]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <MRT_RTC_getBackupReg+0x38>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	22ff      	movs	r2, #255	; 0xff
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24
	return val;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200062b4 	.word	0x200062b4

08002ff0 <MRT_RTC_setBackupReg>:

// sets the backup register value for the specified state
void MRT_RTC_setBackupReg(rtc_backup_reg state, uint32_t value) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <MRT_RTC_setBackupReg+0x38>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	22ca      	movs	r2, #202	; 0xca
 8003002:	625a      	str	r2, [r3, #36]	; 0x24
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <MRT_RTC_setBackupReg+0x38>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2253      	movs	r2, #83	; 0x53
 800300a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTCEx_BKUPWrite(&hrtc, (uint32_t) state, value);
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	4619      	mov	r1, r3
 8003012:	4805      	ldr	r0, [pc, #20]	; (8003028 <MRT_RTC_setBackupReg+0x38>)
 8003014:	f008 f854 	bl	800b0c0 <HAL_RTCEx_BKUPWrite>
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8003018:	4b03      	ldr	r3, [pc, #12]	; (8003028 <MRT_RTC_setBackupReg+0x38>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	22ff      	movs	r2, #255	; 0xff
 800301e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	200062b4 	.word	0x200062b4

0800302c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <MX_SPI2_Init+0x64>)
 8003032:	4a18      	ldr	r2, [pc, #96]	; (8003094 <MX_SPI2_Init+0x68>)
 8003034:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003036:	4b16      	ldr	r3, [pc, #88]	; (8003090 <MX_SPI2_Init+0x64>)
 8003038:	f44f 7282 	mov.w	r2, #260	; 0x104
 800303c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800303e:	4b14      	ldr	r3, [pc, #80]	; (8003090 <MX_SPI2_Init+0x64>)
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <MX_SPI2_Init+0x64>)
 8003046:	2200      	movs	r2, #0
 8003048:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <MX_SPI2_Init+0x64>)
 800304c:	2200      	movs	r2, #0
 800304e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003050:	4b0f      	ldr	r3, [pc, #60]	; (8003090 <MX_SPI2_Init+0x64>)
 8003052:	2200      	movs	r2, #0
 8003054:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <MX_SPI2_Init+0x64>)
 8003058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800305c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800305e:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <MX_SPI2_Init+0x64>)
 8003060:	2200      	movs	r2, #0
 8003062:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <MX_SPI2_Init+0x64>)
 8003066:	2200      	movs	r2, #0
 8003068:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <MX_SPI2_Init+0x64>)
 800306c:	2200      	movs	r2, #0
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <MX_SPI2_Init+0x64>)
 8003072:	2200      	movs	r2, #0
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <MX_SPI2_Init+0x64>)
 8003078:	220a      	movs	r2, #10
 800307a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800307c:	4804      	ldr	r0, [pc, #16]	; (8003090 <MX_SPI2_Init+0x64>)
 800307e:	f008 f851 	bl	800b124 <HAL_SPI_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003088:	f7ff fc54 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}
 8003090:	200062d4 	.word	0x200062d4
 8003094:	40003800 	.word	0x40003800

08003098 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 800309c:	4b17      	ldr	r3, [pc, #92]	; (80030fc <MX_SPI4_Init+0x64>)
 800309e:	4a18      	ldr	r2, [pc, #96]	; (8003100 <MX_SPI4_Init+0x68>)
 80030a0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80030a2:	4b16      	ldr	r3, [pc, #88]	; (80030fc <MX_SPI4_Init+0x64>)
 80030a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030a8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <MX_SPI4_Init+0x64>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <MX_SPI4_Init+0x64>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <MX_SPI4_Init+0x64>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <MX_SPI4_Init+0x64>)
 80030be:	2200      	movs	r2, #0
 80030c0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <MX_SPI4_Init+0x64>)
 80030c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <MX_SPI4_Init+0x64>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <MX_SPI4_Init+0x64>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <MX_SPI4_Init+0x64>)
 80030d8:	2200      	movs	r2, #0
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <MX_SPI4_Init+0x64>)
 80030de:	2200      	movs	r2, #0
 80030e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <MX_SPI4_Init+0x64>)
 80030e4:	220a      	movs	r2, #10
 80030e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80030e8:	4804      	ldr	r0, [pc, #16]	; (80030fc <MX_SPI4_Init+0x64>)
 80030ea:	f008 f81b 	bl	800b124 <HAL_SPI_Init>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80030f4:	f7ff fc1e 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20006384 	.word	0x20006384
 8003100:	40013400 	.word	0x40013400

08003104 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003108:	4b17      	ldr	r3, [pc, #92]	; (8003168 <MX_SPI5_Init+0x64>)
 800310a:	4a18      	ldr	r2, [pc, #96]	; (800316c <MX_SPI5_Init+0x68>)
 800310c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800310e:	4b16      	ldr	r3, [pc, #88]	; (8003168 <MX_SPI5_Init+0x64>)
 8003110:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003114:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003116:	4b14      	ldr	r3, [pc, #80]	; (8003168 <MX_SPI5_Init+0x64>)
 8003118:	2200      	movs	r2, #0
 800311a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <MX_SPI5_Init+0x64>)
 800311e:	2200      	movs	r2, #0
 8003120:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <MX_SPI5_Init+0x64>)
 8003124:	2200      	movs	r2, #0
 8003126:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <MX_SPI5_Init+0x64>)
 800312a:	2200      	movs	r2, #0
 800312c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <MX_SPI5_Init+0x64>)
 8003130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003134:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <MX_SPI5_Init+0x64>)
 8003138:	2200      	movs	r2, #0
 800313a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <MX_SPI5_Init+0x64>)
 800313e:	2200      	movs	r2, #0
 8003140:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <MX_SPI5_Init+0x64>)
 8003144:	2200      	movs	r2, #0
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <MX_SPI5_Init+0x64>)
 800314a:	2200      	movs	r2, #0
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <MX_SPI5_Init+0x64>)
 8003150:	220a      	movs	r2, #10
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003154:	4804      	ldr	r0, [pc, #16]	; (8003168 <MX_SPI5_Init+0x64>)
 8003156:	f007 ffe5 	bl	800b124 <HAL_SPI_Init>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003160:	f7ff fbe8 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003164:	bf00      	nop
 8003166:	bd80      	pop	{r7, pc}
 8003168:	2000632c 	.word	0x2000632c
 800316c:	40015000 	.word	0x40015000

08003170 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08e      	sub	sp, #56	; 0x38
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a4c      	ldr	r2, [pc, #304]	; (80032c0 <HAL_SPI_MspInit+0x150>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d12d      	bne.n	80031ee <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
 8003196:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a4a      	ldr	r2, [pc, #296]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 800319c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b48      	ldr	r3, [pc, #288]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031aa:	623b      	str	r3, [r7, #32]
 80031ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	4b44      	ldr	r3, [pc, #272]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a43      	ldr	r2, [pc, #268]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80031ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	2302      	movs	r3, #2
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d8:	2303      	movs	r3, #3
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80031dc:	2305      	movs	r3, #5
 80031de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031e4:	4619      	mov	r1, r3
 80031e6:	4838      	ldr	r0, [pc, #224]	; (80032c8 <HAL_SPI_MspInit+0x158>)
 80031e8:	f004 ffd6 	bl	8008198 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80031ec:	e064      	b.n	80032b8 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a36      	ldr	r2, [pc, #216]	; (80032cc <HAL_SPI_MspInit+0x15c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d12d      	bne.n	8003254 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	4a30      	ldr	r2, [pc, #192]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 8003202:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003206:	6453      	str	r3, [r2, #68]	; 0x44
 8003208:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 800320a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	4a29      	ldr	r2, [pc, #164]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 800321e:	f043 0310 	orr.w	r3, r3, #16
 8003222:	6313      	str	r3, [r2, #48]	; 0x30
 8003224:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 8003226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003230:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800323e:	2303      	movs	r3, #3
 8003240:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003242:	2305      	movs	r3, #5
 8003244:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800324a:	4619      	mov	r1, r3
 800324c:	4820      	ldr	r0, [pc, #128]	; (80032d0 <HAL_SPI_MspInit+0x160>)
 800324e:	f004 ffa3 	bl	8008198 <HAL_GPIO_Init>
}
 8003252:	e031      	b.n	80032b8 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <HAL_SPI_MspInit+0x164>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d12c      	bne.n	80032b8 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 8003268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800326c:	6453      	str	r3, [r2, #68]	; 0x44
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 8003284:	f043 0320 	orr.w	r3, r3, #32
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_SPI_MspInit+0x154>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003296:	f44f 7360 	mov.w	r3, #896	; 0x380
 800329a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329c:	2302      	movs	r3, #2
 800329e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032a0:	2301      	movs	r3, #1
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a4:	2303      	movs	r3, #3
 80032a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80032a8:	2305      	movs	r3, #5
 80032aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032b0:	4619      	mov	r1, r3
 80032b2:	4809      	ldr	r0, [pc, #36]	; (80032d8 <HAL_SPI_MspInit+0x168>)
 80032b4:	f004 ff70 	bl	8008198 <HAL_GPIO_Init>
}
 80032b8:	bf00      	nop
 80032ba:	3738      	adds	r7, #56	; 0x38
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	40003800 	.word	0x40003800
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020400 	.word	0x40020400
 80032cc:	40013400 	.word	0x40013400
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40015000 	.word	0x40015000
 80032d8:	40021400 	.word	0x40021400

080032dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	4b12      	ldr	r3, [pc, #72]	; (8003330 <HAL_MspInit+0x54>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	4a11      	ldr	r2, [pc, #68]	; (8003330 <HAL_MspInit+0x54>)
 80032ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f0:	6453      	str	r3, [r2, #68]	; 0x44
 80032f2:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <HAL_MspInit+0x54>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032fe:	2300      	movs	r3, #0
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_MspInit+0x54>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <HAL_MspInit+0x54>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330c:	6413      	str	r3, [r2, #64]	; 0x40
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <HAL_MspInit+0x54>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	210f      	movs	r1, #15
 800331e:	f06f 0001 	mvn.w	r0, #1
 8003322:	f004 ff01 	bl	8008128 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023800 	.word	0x40023800

08003334 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08c      	sub	sp, #48	; 0x30
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003344:	2200      	movs	r2, #0
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	2036      	movs	r0, #54	; 0x36
 800334a:	f004 feed 	bl	8008128 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800334e:	2036      	movs	r0, #54	; 0x36
 8003350:	f004 ff06 	bl	8008160 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	4b1f      	ldr	r3, [pc, #124]	; (80033d8 <HAL_InitTick+0xa4>)
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	4a1e      	ldr	r2, [pc, #120]	; (80033d8 <HAL_InitTick+0xa4>)
 800335e:	f043 0310 	orr.w	r3, r3, #16
 8003362:	6413      	str	r3, [r2, #64]	; 0x40
 8003364:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <HAL_InitTick+0xa4>)
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f003 0310 	and.w	r3, r3, #16
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003370:	f107 0210 	add.w	r2, r7, #16
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	4611      	mov	r1, r2
 800337a:	4618      	mov	r0, r3
 800337c:	f006 fec4 	bl	800a108 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003380:	f006 fe9a 	bl	800a0b8 <HAL_RCC_GetPCLK1Freq>
 8003384:	4603      	mov	r3, r0
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	4a13      	ldr	r2, [pc, #76]	; (80033dc <HAL_InitTick+0xa8>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	0c9b      	lsrs	r3, r3, #18
 8003394:	3b01      	subs	r3, #1
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003398:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_InitTick+0xac>)
 800339a:	4a12      	ldr	r2, [pc, #72]	; (80033e4 <HAL_InitTick+0xb0>)
 800339c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <HAL_InitTick+0xac>)
 80033a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80033a6:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <HAL_InitTick+0xac>)
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <HAL_InitTick+0xac>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_InitTick+0xac>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80033b8:	4809      	ldr	r0, [pc, #36]	; (80033e0 <HAL_InitTick+0xac>)
 80033ba:	f008 fc5b 	bl	800bc74 <HAL_TIM_Base_Init>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d104      	bne.n	80033ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80033c4:	4806      	ldr	r0, [pc, #24]	; (80033e0 <HAL_InitTick+0xac>)
 80033c6:	f008 fca5 	bl	800bd14 <HAL_TIM_Base_Start_IT>
 80033ca:	4603      	mov	r3, r0
 80033cc:	e000      	b.n	80033d0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3730      	adds	r7, #48	; 0x30
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	431bde83 	.word	0x431bde83
 80033e0:	200063dc 	.word	0x200063dc
 80033e4:	40001000 	.word	0x40001000

080033e8 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 80033ec:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_SuspendTick+0x20>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_SuspendTick+0x20>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0201 	bic.w	r2, r2, #1
 80033fa:	60da      	str	r2, [r3, #12]
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	200063dc 	.word	0x200063dc

0800340c <__NVIC_SystemReset>:
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003410:	f3bf 8f4f 	dsb	sy
}
 8003414:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <__NVIC_SystemReset+0x24>)
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800341e:	4904      	ldr	r1, [pc, #16]	; (8003430 <__NVIC_SystemReset+0x24>)
 8003420:	4b04      	ldr	r3, [pc, #16]	; (8003434 <__NVIC_SystemReset+0x28>)
 8003422:	4313      	orrs	r3, r2
 8003424:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003426:	f3bf 8f4f 	dsb	sy
}
 800342a:	bf00      	nop
    __NOP();
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <__NVIC_SystemReset+0x20>
 8003430:	e000ed00 	.word	0xe000ed00
 8003434:	05fa0004 	.word	0x05fa0004

08003438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800343c:	e7fe      	b.n	800343c <NMI_Handler+0x4>
	...

08003440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	println((char*) "Hardfault: Going into standByMode and waiting for IWDG reset");
 8003444:	4804      	ldr	r0, [pc, #16]	; (8003458 <HardFault_Handler+0x18>)
 8003446:	f7fd fde1 	bl	800100c <println>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800344a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800344e:	f006 f95b 	bl	8009708 <HAL_PWR_EnableWakeUpPin>
	HAL_PWR_EnterSTANDBYMode();
 8003452:	f006 f97f 	bl	8009754 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003456:	e7fe      	b.n	8003456 <HardFault_Handler+0x16>
 8003458:	0801b060 	.word	0x0801b060

0800345c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003460:	e7fe      	b.n	8003460 <MemManage_Handler+0x4>

08003462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003462:	b480      	push	{r7}
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003466:	e7fe      	b.n	8003466 <BusFault_Handler+0x4>

08003468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800346c:	e7fe      	b.n	800346c <UsageFault_Handler+0x4>

0800346e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800346e:	b480      	push	{r7}
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003480:	4802      	ldr	r0, [pc, #8]	; (800348c <RTC_WKUP_IRQHandler+0x10>)
 8003482:	f007 fdf9 	bl	800b078 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	200062b4 	.word	0x200062b4

08003490 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003494:	2001      	movs	r0, #1
 8003496:	f005 f85d 	bl	8008554 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80034a4:	4802      	ldr	r0, [pc, #8]	; (80034b0 <TIM6_DAC_IRQHandler+0x10>)
 80034a6:	f008 fe37 	bl	800c118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	200063dc 	.word	0x200063dc

080034b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin){
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d102      	bne.n	80034ca <HAL_GPIO_EXTI_Callback+0x16>
		//Manual reset from external button
		restart_flag = 1;
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <HAL_GPIO_EXTI_Callback+0x24>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	701a      	strb	r2, [r3, #0]
	}
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000362 	.word	0x20000362

080034dc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80034e0:	4802      	ldr	r0, [pc, #8]	; (80034ec <RTC_Alarm_IRQHandler+0x10>)
 80034e2:	f007 fbdb 	bl	800ac9c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200062b4 	.word	0x200062b4

080034f0 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
	println("\r\nAlarmA");
 80034f8:	4804      	ldr	r0, [pc, #16]	; (800350c <HAL_RTC_AlarmAEventCallback+0x1c>)
 80034fa:	f7fd fd87 	bl	800100c <println>
	flagA = 1;
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <HAL_RTC_AlarmAEventCallback+0x20>)
 8003500:	2201      	movs	r2, #1
 8003502:	701a      	strb	r2, [r3, #0]
	return;
 8003504:	bf00      	nop
}
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	0801b0a0 	.word	0x0801b0a0
 8003510:	20000360 	.word	0x20000360

08003514 <HAL_RTCEx_AlarmBEventCallback>:


void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc){
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	println("\r\nAlarmB");
 800351c:	4804      	ldr	r0, [pc, #16]	; (8003530 <HAL_RTCEx_AlarmBEventCallback+0x1c>)
 800351e:	f7fd fd75 	bl	800100c <println>
	flagB = 1;
 8003522:	4b04      	ldr	r3, [pc, #16]	; (8003534 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
	return;
 8003528:	bf00      	nop
}
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	0801b0ac 	.word	0x0801b0ac
 8003534:	20000361 	.word	0x20000361

08003538 <HAL_RTCEx_WakeUpTimerEventCallback>:


void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	return;
 8003540:	bf00      	nop
}
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <MRT_resetFromStart>:



void MRT_resetFromStart(void){
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0

	//Clear memory
	MRT_clearExternalFlash();
 8003550:	f000 fbfa 	bl	8003d48 <MRT_clearExternalFlash>
	MRT_RTC_clearBackupRegs();
 8003554:	f7ff fd0a 	bl	8002f6c <MRT_RTC_clearBackupRegs>
	#if IRIDIUM_
	MRT_Iridium_Deinit();
	#endif

	//Reset function
	NVIC_SystemReset();
 8003558:	f7ff ff58 	bl	800340c <__NVIC_SystemReset>

0800355c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <SystemInit+0x20>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	4a05      	ldr	r2, [pc, #20]	; (800357c <SystemInit+0x20>)
 8003568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800356c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003570:	bf00      	nop
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08e      	sub	sp, #56	; 0x38
 8003584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003594:	f107 0320 	add.w	r3, r7, #32
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800359e:	1d3b      	adds	r3, r7, #4
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	609a      	str	r2, [r3, #8]
 80035a8:	60da      	str	r2, [r3, #12]
 80035aa:	611a      	str	r2, [r3, #16]
 80035ac:	615a      	str	r2, [r3, #20]
 80035ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80035b0:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <MX_TIM2_Init+0xe8>)
 80035b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80035b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <MX_TIM2_Init+0xe8>)
 80035ba:	2259      	movs	r2, #89	; 0x59
 80035bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035be:	4b2a      	ldr	r3, [pc, #168]	; (8003668 <MX_TIM2_Init+0xe8>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80035c4:	4b28      	ldr	r3, [pc, #160]	; (8003668 <MX_TIM2_Init+0xe8>)
 80035c6:	f240 128f 	movw	r2, #399	; 0x18f
 80035ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035cc:	4b26      	ldr	r3, [pc, #152]	; (8003668 <MX_TIM2_Init+0xe8>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035d2:	4b25      	ldr	r3, [pc, #148]	; (8003668 <MX_TIM2_Init+0xe8>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80035d8:	4823      	ldr	r0, [pc, #140]	; (8003668 <MX_TIM2_Init+0xe8>)
 80035da:	f008 fb4b 	bl	800bc74 <HAL_TIM_Base_Init>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80035e4:	f7ff f9a6 	bl	8002934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80035ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035f2:	4619      	mov	r1, r3
 80035f4:	481c      	ldr	r0, [pc, #112]	; (8003668 <MX_TIM2_Init+0xe8>)
 80035f6:	f008 ff59 	bl	800c4ac <HAL_TIM_ConfigClockSource>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003600:	f7ff f998 	bl	8002934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003604:	4818      	ldr	r0, [pc, #96]	; (8003668 <MX_TIM2_Init+0xe8>)
 8003606:	f008 fbf5 	bl	800bdf4 <HAL_TIM_PWM_Init>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003610:	f7ff f990 	bl	8002934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003614:	2320      	movs	r3, #32
 8003616:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800361c:	f107 0320 	add.w	r3, r7, #32
 8003620:	4619      	mov	r1, r3
 8003622:	4811      	ldr	r0, [pc, #68]	; (8003668 <MX_TIM2_Init+0xe8>)
 8003624:	f009 fb42 	bl	800ccac <HAL_TIMEx_MasterConfigSynchronization>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800362e:	f7ff f981 	bl	8002934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003632:	2360      	movs	r3, #96	; 0x60
 8003634:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8003636:	2364      	movs	r3, #100	; 0x64
 8003638:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	2208      	movs	r2, #8
 8003646:	4619      	mov	r1, r3
 8003648:	4807      	ldr	r0, [pc, #28]	; (8003668 <MX_TIM2_Init+0xe8>)
 800364a:	f008 fe6d 	bl	800c328 <HAL_TIM_PWM_ConfigChannel>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003654:	f7ff f96e 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003658:	4803      	ldr	r0, [pc, #12]	; (8003668 <MX_TIM2_Init+0xe8>)
 800365a:	f000 f827 	bl	80036ac <HAL_TIM_MspPostInit>

}
 800365e:	bf00      	nop
 8003660:	3738      	adds	r7, #56	; 0x38
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20006424 	.word	0x20006424

0800366c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367c:	d10d      	bne.n	800369a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_TIM_Base_MspInit+0x3c>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_TIM_Base_MspInit+0x3c>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6413      	str	r3, [r2, #64]	; 0x40
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_TIM_Base_MspInit+0x3c>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800

080036ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b4:	f107 030c 	add.w	r3, r7, #12
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d11d      	bne.n	800370a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <HAL_TIM_MspPostInit+0x68>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <HAL_TIM_MspPostInit+0x68>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	6313      	str	r3, [r2, #48]	; 0x30
 80036de:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <HAL_TIM_MspPostInit+0x68>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80036ea:	2304      	movs	r3, #4
 80036ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ee:	2302      	movs	r3, #2
 80036f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036fa:	2301      	movs	r3, #1
 80036fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80036fe:	f107 030c 	add.w	r3, r7, #12
 8003702:	4619      	mov	r1, r3
 8003704:	4804      	ldr	r0, [pc, #16]	; (8003718 <HAL_TIM_MspPostInit+0x6c>)
 8003706:	f004 fd47 	bl	8008198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800370a:	bf00      	nop
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
 8003718:	40020000 	.word	0x40020000

0800371c <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <MX_UART8_Init+0x4c>)
 8003722:	4a12      	ldr	r2, [pc, #72]	; (800376c <MX_UART8_Init+0x50>)
 8003724:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <MX_UART8_Init+0x4c>)
 8003728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800372c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <MX_UART8_Init+0x4c>)
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <MX_UART8_Init+0x4c>)
 8003736:	2200      	movs	r2, #0
 8003738:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <MX_UART8_Init+0x4c>)
 800373c:	2200      	movs	r2, #0
 800373e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <MX_UART8_Init+0x4c>)
 8003742:	220c      	movs	r2, #12
 8003744:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <MX_UART8_Init+0x4c>)
 8003748:	2200      	movs	r2, #0
 800374a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <MX_UART8_Init+0x4c>)
 800374e:	2200      	movs	r2, #0
 8003750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003752:	4805      	ldr	r0, [pc, #20]	; (8003768 <MX_UART8_Init+0x4c>)
 8003754:	f009 fb3a 	bl	800cdcc <HAL_UART_Init>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800375e:	f7ff f8e9 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	200064b0 	.word	0x200064b0
 800376c:	40007c00 	.word	0x40007c00

08003770 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <MX_USART3_UART_Init+0x4c>)
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <MX_USART3_UART_Init+0x50>)
 8003778:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <MX_USART3_UART_Init+0x4c>)
 800377c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003780:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <MX_USART3_UART_Init+0x4c>)
 8003784:	2200      	movs	r2, #0
 8003786:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <MX_USART3_UART_Init+0x4c>)
 800378a:	2200      	movs	r2, #0
 800378c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800378e:	4b0b      	ldr	r3, [pc, #44]	; (80037bc <MX_USART3_UART_Init+0x4c>)
 8003790:	2200      	movs	r2, #0
 8003792:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003794:	4b09      	ldr	r3, [pc, #36]	; (80037bc <MX_USART3_UART_Init+0x4c>)
 8003796:	220c      	movs	r2, #12
 8003798:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800379a:	4b08      	ldr	r3, [pc, #32]	; (80037bc <MX_USART3_UART_Init+0x4c>)
 800379c:	2200      	movs	r2, #0
 800379e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <MX_USART3_UART_Init+0x4c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037a6:	4805      	ldr	r0, [pc, #20]	; (80037bc <MX_USART3_UART_Init+0x4c>)
 80037a8:	f009 fb10 	bl	800cdcc <HAL_UART_Init>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80037b2:	f7ff f8bf 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	2000646c 	.word	0x2000646c
 80037c0:	40004800 	.word	0x40004800

080037c4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <MX_USART6_UART_Init+0x4c>)
 80037ca:	4a12      	ldr	r2, [pc, #72]	; (8003814 <MX_USART6_UART_Init+0x50>)
 80037cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <MX_USART6_UART_Init+0x4c>)
 80037d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80037d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80037d6:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <MX_USART6_UART_Init+0x4c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <MX_USART6_UART_Init+0x4c>)
 80037de:	2200      	movs	r2, #0
 80037e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <MX_USART6_UART_Init+0x4c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80037e8:	4b09      	ldr	r3, [pc, #36]	; (8003810 <MX_USART6_UART_Init+0x4c>)
 80037ea:	220c      	movs	r2, #12
 80037ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ee:	4b08      	ldr	r3, [pc, #32]	; (8003810 <MX_USART6_UART_Init+0x4c>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <MX_USART6_UART_Init+0x4c>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80037fa:	4805      	ldr	r0, [pc, #20]	; (8003810 <MX_USART6_UART_Init+0x4c>)
 80037fc:	f009 fae6 	bl	800cdcc <HAL_UART_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003806:	f7ff f895 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	200064f4 	.word	0x200064f4
 8003814:	40011400 	.word	0x40011400

08003818 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08e      	sub	sp, #56	; 0x38
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a4b      	ldr	r2, [pc, #300]	; (8003964 <HAL_UART_MspInit+0x14c>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d12c      	bne.n	8003894 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	623b      	str	r3, [r7, #32]
 800383e:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <HAL_UART_MspInit+0x150>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a49      	ldr	r2, [pc, #292]	; (8003968 <HAL_UART_MspInit+0x150>)
 8003844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
 800384a:	4b47      	ldr	r3, [pc, #284]	; (8003968 <HAL_UART_MspInit+0x150>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003852:	623b      	str	r3, [r7, #32]
 8003854:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	4b43      	ldr	r3, [pc, #268]	; (8003968 <HAL_UART_MspInit+0x150>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a42      	ldr	r2, [pc, #264]	; (8003968 <HAL_UART_MspInit+0x150>)
 8003860:	f043 0310 	orr.w	r3, r3, #16
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b40      	ldr	r3, [pc, #256]	; (8003968 <HAL_UART_MspInit+0x150>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8003872:	2303      	movs	r3, #3
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003876:	2302      	movs	r3, #2
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387e:	2303      	movs	r3, #3
 8003880:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003882:	2308      	movs	r3, #8
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800388a:	4619      	mov	r1, r3
 800388c:	4837      	ldr	r0, [pc, #220]	; (800396c <HAL_UART_MspInit+0x154>)
 800388e:	f004 fc83 	bl	8008198 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003892:	e063      	b.n	800395c <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a35      	ldr	r2, [pc, #212]	; (8003970 <HAL_UART_MspInit+0x158>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d12d      	bne.n	80038fa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	4b31      	ldr	r3, [pc, #196]	; (8003968 <HAL_UART_MspInit+0x150>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	4a30      	ldr	r2, [pc, #192]	; (8003968 <HAL_UART_MspInit+0x150>)
 80038a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ac:	6413      	str	r3, [r2, #64]	; 0x40
 80038ae:	4b2e      	ldr	r3, [pc, #184]	; (8003968 <HAL_UART_MspInit+0x150>)
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b6:	61bb      	str	r3, [r7, #24]
 80038b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <HAL_UART_MspInit+0x150>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a29      	ldr	r2, [pc, #164]	; (8003968 <HAL_UART_MspInit+0x150>)
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b27      	ldr	r3, [pc, #156]	; (8003968 <HAL_UART_MspInit+0x150>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 80038d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038dc:	2302      	movs	r3, #2
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e4:	2303      	movs	r3, #3
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038e8:	2307      	movs	r3, #7
 80038ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f0:	4619      	mov	r1, r3
 80038f2:	4820      	ldr	r0, [pc, #128]	; (8003974 <HAL_UART_MspInit+0x15c>)
 80038f4:	f004 fc50 	bl	8008198 <HAL_GPIO_Init>
}
 80038f8:	e030      	b.n	800395c <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1e      	ldr	r2, [pc, #120]	; (8003978 <HAL_UART_MspInit+0x160>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d12b      	bne.n	800395c <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	4b17      	ldr	r3, [pc, #92]	; (8003968 <HAL_UART_MspInit+0x150>)
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	4a16      	ldr	r2, [pc, #88]	; (8003968 <HAL_UART_MspInit+0x150>)
 800390e:	f043 0320 	orr.w	r3, r3, #32
 8003912:	6453      	str	r3, [r2, #68]	; 0x44
 8003914:	4b14      	ldr	r3, [pc, #80]	; (8003968 <HAL_UART_MspInit+0x150>)
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	4b10      	ldr	r3, [pc, #64]	; (8003968 <HAL_UART_MspInit+0x150>)
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	4a0f      	ldr	r2, [pc, #60]	; (8003968 <HAL_UART_MspInit+0x150>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6313      	str	r3, [r2, #48]	; 0x30
 8003930:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <HAL_UART_MspInit+0x150>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 800393c:	23c0      	movs	r3, #192	; 0xc0
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003940:	2302      	movs	r3, #2
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003944:	2300      	movs	r3, #0
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003948:	2303      	movs	r3, #3
 800394a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800394c:	2308      	movs	r3, #8
 800394e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003954:	4619      	mov	r1, r3
 8003956:	4809      	ldr	r0, [pc, #36]	; (800397c <HAL_UART_MspInit+0x164>)
 8003958:	f004 fc1e 	bl	8008198 <HAL_GPIO_Init>
}
 800395c:	bf00      	nop
 800395e:	3738      	adds	r7, #56	; 0x38
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40007c00 	.word	0x40007c00
 8003968:	40023800 	.word	0x40023800
 800396c:	40021000 	.word	0x40021000
 8003970:	40004800 	.word	0x40004800
 8003974:	40020c00 	.word	0x40020c00
 8003978:	40011400 	.word	0x40011400
 800397c:	40020800 	.word	0x40020800

08003980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003984:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003986:	e003      	b.n	8003990 <LoopCopyDataInit>

08003988 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800398a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800398c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800398e:	3104      	adds	r1, #4

08003990 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003990:	480b      	ldr	r0, [pc, #44]	; (80039c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003992:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003994:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003996:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003998:	d3f6      	bcc.n	8003988 <CopyDataInit>
  ldr  r2, =_sbss
 800399a:	4a0b      	ldr	r2, [pc, #44]	; (80039c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800399c:	e002      	b.n	80039a4 <LoopFillZerobss>

0800399e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800399e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80039a0:	f842 3b04 	str.w	r3, [r2], #4

080039a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80039a4:	4b09      	ldr	r3, [pc, #36]	; (80039cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80039a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80039a8:	d3f9      	bcc.n	800399e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039aa:	f7ff fdd7 	bl	800355c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ae:	f011 ffdd 	bl	801596c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039b2:	f7fe fe67 	bl	8002684 <main>
  bx  lr    
 80039b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039b8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80039bc:	0801c3b4 	.word	0x0801c3b4
  ldr  r0, =_sdata
 80039c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80039c4:	200002b0 	.word	0x200002b0
  ldr  r2, =_sbss
 80039c8:	200002b0 	.word	0x200002b0
  ldr  r3, = _ebss
 80039cc:	20007854 	.word	0x20007854

080039d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039d0:	e7fe      	b.n	80039d0 <ADC_IRQHandler>
 80039d2:	0000      	movs	r0, r0
 80039d4:	0000      	movs	r0, r0
	...

080039d8 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,0.190263236)-1); //(-R*-0.0065/(go*M)) = 0.190263236
 80039e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80039e6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003a68 <MRT_getAltitude+0x90>
 80039ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039ee:	ee16 0a90 	vmov	r0, s13
 80039f2:	f7fc fdb9 	bl	8000568 <__aeabi_f2d>
 80039f6:	4602      	mov	r2, r0
 80039f8:	460b      	mov	r3, r1
 80039fa:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8003a58 <MRT_getAltitude+0x80>
 80039fe:	ec43 2b10 	vmov	d0, r2, r3
 8003a02:	f010 fef9 	bl	80147f8 <pow>
 8003a06:	ec51 0b10 	vmov	r0, r1, d0
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <MRT_getAltitude+0x94>)
 8003a10:	f7fc fc4a 	bl	80002a8 <__aeabi_dsub>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	a310      	add	r3, pc, #64	; (adr r3, 8003a60 <MRT_getAltitude+0x88>)
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f7fc fdf9 	bl	8000618 <__aeabi_dmul>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <MRT_getAltitude+0x98>)
 8003a34:	f7fc fc3a 	bl	80002ac <__adddf3>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f7fd f8e2 	bl	8000c08 <__aeabi_d2f>
 8003a44:	4603      	mov	r3, r0
 8003a46:	ee07 3a90 	vmov	s15, r3
}
 8003a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	f3af 8000 	nop.w
 8003a58:	b4202506 	.word	0xb4202506
 8003a5c:	3fc85a8b 	.word	0x3fc85a8b
 8003a60:	76276276 	.word	0x76276276
 8003a64:	c0e481c2 	.word	0xc0e481c2
 8003a68:	447d8000 	.word	0x447d8000
 8003a6c:	3ff00000 	.word	0x3ff00000
 8003a70:	40590000 	.word	0x40590000

08003a74 <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 8003a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a7e:	4815      	ldr	r0, [pc, #84]	; (8003ad4 <MRT_getContinuity+0x60>)
 8003a80:	f004 fd36 	bl	80084f0 <HAL_GPIO_ReadPin>
 8003a84:	4603      	mov	r3, r0
 8003a86:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 8003a88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a8c:	4811      	ldr	r0, [pc, #68]	; (8003ad4 <MRT_getContinuity+0x60>)
 8003a8e:	f004 fd2f 	bl	80084f0 <HAL_GPIO_ReadPin>
 8003a92:	4603      	mov	r3, r0
 8003a94:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 8003a96:	2101      	movs	r1, #1
 8003a98:	480e      	ldr	r0, [pc, #56]	; (8003ad4 <MRT_getContinuity+0x60>)
 8003a9a:	f004 fd29 	bl	80084f0 <HAL_GPIO_ReadPin>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 8003aa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003aa6:	480c      	ldr	r0, [pc, #48]	; (8003ad8 <MRT_getContinuity+0x64>)
 8003aa8:	f004 fd22 	bl	80084f0 <HAL_GPIO_ReadPin>
 8003aac:	4603      	mov	r3, r0
 8003aae:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	005a      	lsls	r2, r3, #1
 8003ab4:	79bb      	ldrb	r3, [r7, #6]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	005a      	lsls	r2, r3, #1
 8003aba:	797b      	ldrb	r3, [r7, #5]
 8003abc:	4413      	add	r3, r2
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	793b      	ldrb	r3, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8003aca:	78fb      	ldrb	r3, [r7, #3]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021800 	.word	0x40021800
 8003ad8:	40021400 	.word	0x40021400

08003adc <MRT_formatAvionics>:


// formats avionics telemetry string using sprintf
void MRT_formatAvionics(void) {
 8003adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae0:	b0a3      	sub	sp, #140	; 0x8c
 8003ae2:	af16      	add	r7, sp, #88	; 0x58
	memset(msg_buffer_av, 0, 200);
 8003ae4:	22c8      	movs	r2, #200	; 0xc8
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	483c      	ldr	r0, [pc, #240]	; (8003bdc <MRT_formatAvionics+0x100>)
 8003aea:	f011 ff97 	bl	8015a1c <memset>
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003aee:	4b3c      	ldr	r3, [pc, #240]	; (8003be0 <MRT_formatAvionics+0x104>)
 8003af0:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fc fd38 	bl	8000568 <__aeabi_f2d>
 8003af8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003afc:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <MRT_formatAvionics+0x104>)
 8003afe:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fc fd31 	bl	8000568 <__aeabi_f2d>
 8003b06:	e9c7 0108 	strd	r0, r1, [r7, #32]
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003b0a:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <MRT_formatAvionics+0x104>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fc fd2a 	bl	8000568 <__aeabi_f2d>
 8003b14:	e9c7 0106 	strd	r0, r1, [r7, #24]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003b18:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <MRT_formatAvionics+0x104>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fc fd23 	bl	8000568 <__aeabi_f2d>
 8003b22:	e9c7 0104 	strd	r0, r1, [r7, #16]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003b26:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <MRT_formatAvionics+0x104>)
 8003b28:	691b      	ldr	r3, [r3, #16]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fc fd1c 	bl	8000568 <__aeabi_f2d>
 8003b30:	e9c7 0102 	strd	r0, r1, [r7, #8]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <MRT_formatAvionics+0x104>)
 8003b36:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc fd15 	bl	8000568 <__aeabi_f2d>
 8003b3e:	e9c7 0100 	strd	r0, r1, [r7]
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003b42:	4b28      	ldr	r3, [pc, #160]	; (8003be4 <MRT_formatAvionics+0x108>)
 8003b44:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fc fd0e 	bl	8000568 <__aeabi_f2d>
 8003b4c:	4682      	mov	sl, r0
 8003b4e:	468b      	mov	fp, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003b50:	4b25      	ldr	r3, [pc, #148]	; (8003be8 <MRT_formatAvionics+0x10c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fd07 	bl	8000568 <__aeabi_f2d>
 8003b5a:	4680      	mov	r8, r0
 8003b5c:	4689      	mov	r9, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003b5e:	4b22      	ldr	r3, [pc, #136]	; (8003be8 <MRT_formatAvionics+0x10c>)
 8003b60:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fd00 	bl	8000568 <__aeabi_f2d>
 8003b68:	4604      	mov	r4, r0
 8003b6a:	460d      	mov	r5, r1
 8003b6c:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <MRT_formatAvionics+0x110>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	461e      	mov	r6, r3
 8003b72:	4b1f      	ldr	r3, [pc, #124]	; (8003bf0 <MRT_formatAvionics+0x114>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	4b1e      	ldr	r3, [pc, #120]	; (8003bf4 <MRT_formatAvionics+0x118>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	4b1e      	ldr	r3, [pc, #120]	; (8003bf8 <MRT_formatAvionics+0x11c>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	4619      	mov	r1, r3
 8003b82:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <MRT_formatAvionics+0x120>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	9314      	str	r3, [sp, #80]	; 0x50
 8003b88:	9113      	str	r1, [sp, #76]	; 0x4c
 8003b8a:	9212      	str	r2, [sp, #72]	; 0x48
 8003b8c:	9011      	str	r0, [sp, #68]	; 0x44
 8003b8e:	9610      	str	r6, [sp, #64]	; 0x40
 8003b90:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8003b94:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003b98:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003b9c:	ed97 7b00 	vldr	d7, [r7]
 8003ba0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003ba4:	ed97 7b02 	vldr	d7, [r7, #8]
 8003ba8:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003bac:	ed97 7b04 	vldr	d7, [r7, #16]
 8003bb0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003bb4:	ed97 7b06 	vldr	d7, [r7, #24]
 8003bb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003bbc:	ed97 7b08 	vldr	d7, [r7, #32]
 8003bc0:	ed8d 7b00 	vstr	d7, [sp]
 8003bc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bc8:	490d      	ldr	r1, [pc, #52]	; (8003c00 <MRT_formatAvionics+0x124>)
 8003bca:	4804      	ldr	r0, [pc, #16]	; (8003bdc <MRT_formatAvionics+0x100>)
 8003bcc:	f012 ffa4 	bl	8016b18 <siprintf>
		prev_min, prev_sec, prev_subsec,
		gates_continuity,	ejection_stage_flag);
}
 8003bd0:	bf00      	nop
 8003bd2:	3734      	adds	r7, #52	; 0x34
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bda:	bf00      	nop
 8003bdc:	20006538 	.word	0x20006538
 8003be0:	200004a8 	.word	0x200004a8
 8003be4:	200004d4 	.word	0x200004d4
 8003be8:	200004e8 	.word	0x200004e8
 8003bec:	2000037a 	.word	0x2000037a
 8003bf0:	2000037b 	.word	0x2000037b
 8003bf4:	2000037c 	.word	0x2000037c
 8003bf8:	20000363 	.word	0x20000363
 8003bfc:	20000378 	.word	0x20000378
 8003c00:	0801b0b8 	.word	0x0801b0b8

08003c04 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	e007      	b.n	8003c20 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003c10:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <MRT_external_flash_Init+0x5c>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	607b      	str	r3, [r7, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	ddf4      	ble.n	8003c10 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8003c26:	f000 feb1 	bl	800498c <W25qxx_Init>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f083 0301 	eor.w	r3, r3, #1
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8003c36:	f7fe fe7d 	bl	8002934 <Error_Handler>
	}

	//Retrieve flags
	W25qxx_ReadSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003c3a:	2305      	movs	r3, #5
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4808      	ldr	r0, [pc, #32]	; (8003c64 <MRT_external_flash_Init+0x60>)
 8003c42:	f001 fa7d 	bl	8005140 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003c46:	2304      	movs	r3, #4
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	4806      	ldr	r0, [pc, #24]	; (8003c68 <MRT_external_flash_Init+0x64>)
 8003c4e:	f001 fa77 	bl	8005140 <W25qxx_ReadSector>

	//Assign each value read to their variable
	MRT_updateExternalFlashValues();
 8003c52:	f000 f843 	bl	8003cdc <MRT_updateExternalFlashValues>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20006600 	.word	0x20006600
 8003c64:	2000660c 	.word	0x2000660c
 8003c68:	20006608 	.word	0x20006608

08003c6c <MRT_updateExternalFlashBuffers>:


void MRT_updateExternalFlashBuffers(void){
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003c72:	2300      	movs	r3, #0
 8003c74:	607b      	str	r3, [r7, #4]
 8003c76:	e00c      	b.n	8003c92 <MRT_updateExternalFlashBuffers+0x26>
		ext_flash_flags_buffer[i] = *ext_flash_flags[i];
 8003c78:	4a14      	ldr	r2, [pc, #80]	; (8003ccc <MRT_updateExternalFlashBuffers+0x60>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c80:	7819      	ldrb	r1, [r3, #0]
 8003c82:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <MRT_updateExternalFlashBuffers+0x64>)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4413      	add	r3, r2
 8003c88:	460a      	mov	r2, r1
 8003c8a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	607b      	str	r3, [r7, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	ddef      	ble.n	8003c78 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003c98:	2300      	movs	r3, #0
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	e00c      	b.n	8003cb8 <MRT_updateExternalFlashBuffers+0x4c>
		ext_flash_time_buffer[i] = *ext_flash_time[i];
 8003c9e:	4a0d      	ldr	r2, [pc, #52]	; (8003cd4 <MRT_updateExternalFlashBuffers+0x68>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca6:	7819      	ldrb	r1, [r3, #0]
 8003ca8:	4a0b      	ldr	r2, [pc, #44]	; (8003cd8 <MRT_updateExternalFlashBuffers+0x6c>)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	460a      	mov	r2, r1
 8003cb0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	ddef      	ble.n	8003c9e <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	2000008c 	.word	0x2000008c
 8003cd0:	2000660c 	.word	0x2000660c
 8003cd4:	200000a0 	.word	0x200000a0
 8003cd8:	20006608 	.word	0x20006608

08003cdc <MRT_updateExternalFlashValues>:


void MRT_updateExternalFlashValues(void){
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	e00b      	b.n	8003d00 <MRT_updateExternalFlashValues+0x24>
		*ext_flash_flags[i] = ext_flash_flags_buffer[i];
 8003ce8:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <MRT_updateExternalFlashValues+0x5c>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf0:	4912      	ldr	r1, [pc, #72]	; (8003d3c <MRT_updateExternalFlashValues+0x60>)
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	440a      	add	r2, r1
 8003cf6:	7812      	ldrb	r2, [r2, #0]
 8003cf8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	607b      	str	r3, [r7, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	ddf0      	ble.n	8003ce8 <MRT_updateExternalFlashValues+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003d06:	2300      	movs	r3, #0
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	e00b      	b.n	8003d24 <MRT_updateExternalFlashValues+0x48>
		*ext_flash_time[i] = ext_flash_time_buffer[i];
 8003d0c:	4a0c      	ldr	r2, [pc, #48]	; (8003d40 <MRT_updateExternalFlashValues+0x64>)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d14:	490b      	ldr	r1, [pc, #44]	; (8003d44 <MRT_updateExternalFlashValues+0x68>)
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	440a      	add	r2, r1
 8003d1a:	7812      	ldrb	r2, [r2, #0]
 8003d1c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	603b      	str	r3, [r7, #0]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	ddf0      	ble.n	8003d0c <MRT_updateExternalFlashValues+0x30>
	}
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	2000008c 	.word	0x2000008c
 8003d3c:	2000660c 	.word	0x2000660c
 8003d40:	200000a0 	.word	0x200000a0
 8003d44:	20006608 	.word	0x20006608

08003d48 <MRT_clearExternalFlash>:


void MRT_clearExternalFlash(void){
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
	//Clear flags
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	f000 ff6f 	bl	8004c30 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003d52:	2305      	movs	r3, #5
 8003d54:	2200      	movs	r2, #0
 8003d56:	2101      	movs	r1, #1
 8003d58:	4806      	ldr	r0, [pc, #24]	; (8003d74 <MRT_clearExternalFlash+0x2c>)
 8003d5a:	f001 f8b3 	bl	8004ec4 <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(RTC_SECTOR);
 8003d5e:	2002      	movs	r0, #2
 8003d60:	f000 ff66 	bl	8004c30 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003d64:	2304      	movs	r3, #4
 8003d66:	2200      	movs	r2, #0
 8003d68:	2102      	movs	r1, #2
 8003d6a:	4803      	ldr	r0, [pc, #12]	; (8003d78 <MRT_clearExternalFlash+0x30>)
 8003d6c:	f001 f8aa 	bl	8004ec4 <W25qxx_WriteSector>
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20006600 	.word	0x20006600
 8003d78:	20000370 	.word	0x20000370

08003d7c <MRT_saveFlagValue>:
//Public functions

/*
 * Save a flag value (value updated outside the function)
 */
void MRT_saveFlagValue(rtc_backup_reg state){
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
	//Write new flags to flash memory
	MRT_updateExternalFlashBuffers();
 8003d86:	f7ff ff71 	bl	8003c6c <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	f000 ff50 	bl	8004c30 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003d90:	2305      	movs	r3, #5
 8003d92:	2200      	movs	r2, #0
 8003d94:	2101      	movs	r1, #1
 8003d96:	4808      	ldr	r0, [pc, #32]	; (8003db8 <MRT_saveFlagValue+0x3c>)
 8003d98:	f001 f894 	bl	8004ec4 <W25qxx_WriteSector>

	//Write new flag to RTC backup register
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <MRT_saveFlagValue+0x40>)
 8003da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff f920 	bl	8002ff0 <MRT_RTC_setBackupReg>
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	2000660c 	.word	0x2000660c
 8003dbc:	2000003c 	.word	0x2000003c

08003dc0 <MRT_checkFlagsValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkFlagsValues(rtc_backup_reg val_index, uint32_t max_val){
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	6039      	str	r1, [r7, #0]
 8003dca:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	4a2e      	ldr	r2, [pc, #184]	; (8003e8c <MRT_checkFlagsValues+0xcc>)
 8003dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d207      	bcs.n	8003df0 <MRT_checkFlagsValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	4a2a      	ldr	r2, [pc, #168]	; (8003e8c <MRT_checkFlagsValues+0xcc>)
 8003de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
		ret = false;
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_flags[val_index] > max_val){
 8003df0:	79fb      	ldrb	r3, [r7, #7]
 8003df2:	4a27      	ldr	r2, [pc, #156]	; (8003e90 <MRT_checkFlagsValues+0xd0>)
 8003df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d207      	bcs.n	8003e12 <MRT_checkFlagsValues+0x52>
		*ext_flash_flags[val_index] = 0;
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <MRT_checkFlagsValues+0xd0>)
 8003e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_flags[val_index]){
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <MRT_checkFlagsValues+0xcc>)
 8003e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	79fa      	ldrb	r2, [r7, #7]
 8003e1e:	491c      	ldr	r1, [pc, #112]	; (8003e90 <MRT_checkFlagsValues+0xd0>)
 8003e20:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003e24:	7812      	ldrb	r2, [r2, #0]
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d028      	beq.n	8003e7c <MRT_checkFlagsValues+0xbc>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <MRT_checkFlagsValues+0xd0>)
 8003e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <MRT_checkFlagsValues+0xcc>)
 8003e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	4912      	ldr	r1, [pc, #72]	; (8003e8c <MRT_checkFlagsValues+0xcc>)
 8003e44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e48:	4282      	cmp	r2, r0
 8003e4a:	bf38      	it	cc
 8003e4c:	4602      	movcc	r2, r0
 8003e4e:	601a      	str	r2, [r3, #0]
		*ext_flash_flags[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	4a0f      	ldr	r2, [pc, #60]	; (8003e90 <MRT_checkFlagsValues+0xd0>)
 8003e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	4a0b      	ldr	r2, [pc, #44]	; (8003e8c <MRT_checkFlagsValues+0xcc>)
 8003e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4299      	cmp	r1, r3
 8003e68:	bf38      	it	cc
 8003e6a:	4619      	movcc	r1, r3
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <MRT_checkFlagsValues+0xd0>)
 8003e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e74:	b2ca      	uxtb	r2, r1
 8003e76:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	2000003c 	.word	0x2000003c
 8003e90:	2000008c 	.word	0x2000008c

08003e94 <MRT_saveTotalTime>:
//Public functions

/*
 * Update every time values in memory
 */
void MRT_saveTotalTime(void){
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0

	//Update variables
	MRT_updateTimeValues();
 8003e98:	f000 f852 	bl	8003f40 <MRT_updateTimeValues>

	//Write new RTC time to external flash
	MRT_updateExternalFlashBuffers();
 8003e9c:	f7ff fee6 	bl	8003c6c <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8003ea0:	2002      	movs	r0, #2
 8003ea2:	f000 fec5 	bl	8004c30 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2102      	movs	r1, #2
 8003eac:	480e      	ldr	r0, [pc, #56]	; (8003ee8 <MRT_saveTotalTime+0x54>)
 8003eae:	f001 f809 	bl	8004ec4 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, rtc_bckp_reg_hour);
 8003eb2:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <MRT_saveTotalTime+0x58>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	2005      	movs	r0, #5
 8003eba:	f7ff f899 	bl	8002ff0 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, rtc_bckp_reg_min);
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <MRT_saveTotalTime+0x5c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	2006      	movs	r0, #6
 8003ec6:	f7ff f893 	bl	8002ff0 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, rtc_bckp_reg_sec);
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <MRT_saveTotalTime+0x60>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	2007      	movs	r0, #7
 8003ed2:	f7ff f88d 	bl	8002ff0 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, rtc_bckp_reg_subsec);
 8003ed6:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <MRT_saveTotalTime+0x64>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	2008      	movs	r0, #8
 8003ede:	f7ff f887 	bl	8002ff0 <MRT_RTC_setBackupReg>
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20006608 	.word	0x20006608
 8003eec:	20000328 	.word	0x20000328
 8003ef0:	2000032c 	.word	0x2000032c
 8003ef4:	20000330 	.word	0x20000330
 8003ef8:	20000334 	.word	0x20000334

08003efc <MRT_saveTimeValue>:
//Private functions

/*
 * Save an RTC value (value updated outside the function)
 */
void MRT_saveTimeValue(rtc_backup_reg state){
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	71fb      	strb	r3, [r7, #7]

	//Write new RTC time to flash memory
	MRT_updateExternalFlashBuffers();
 8003f06:	f7ff feb1 	bl	8003c6c <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8003f0a:	2002      	movs	r0, #2
 8003f0c:	f000 fe90 	bl	8004c30 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003f10:	2304      	movs	r3, #4
 8003f12:	2200      	movs	r2, #0
 8003f14:	2102      	movs	r1, #2
 8003f16:	4808      	ldr	r0, [pc, #32]	; (8003f38 <MRT_saveTimeValue+0x3c>)
 8003f18:	f000 ffd4 	bl	8004ec4 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	4a07      	ldr	r2, [pc, #28]	; (8003f3c <MRT_saveTimeValue+0x40>)
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff f860 	bl	8002ff0 <MRT_RTC_setBackupReg>
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20006608 	.word	0x20006608
 8003f3c:	2000003c 	.word	0x2000003c

08003f40 <MRT_updateTimeValues>:


/*
 * Update all time values
 */
void MRT_updateTimeValues(void){
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
	//External Flash
	ext_flash_hour = prev_hour;
 8003f44:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <MRT_updateTimeValues+0x54>)
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <MRT_updateTimeValues+0x58>)
 8003f4a:	701a      	strb	r2, [r3, #0]
	ext_flash_min = prev_min;
 8003f4c:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <MRT_updateTimeValues+0x5c>)
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <MRT_updateTimeValues+0x60>)
 8003f52:	701a      	strb	r2, [r3, #0]
	ext_flash_sec = prev_sec;
 8003f54:	4b13      	ldr	r3, [pc, #76]	; (8003fa4 <MRT_updateTimeValues+0x64>)
 8003f56:	781a      	ldrb	r2, [r3, #0]
 8003f58:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <MRT_updateTimeValues+0x68>)
 8003f5a:	701a      	strb	r2, [r3, #0]
	ext_flash_subsec = prev_subsec;
 8003f5c:	4b13      	ldr	r3, [pc, #76]	; (8003fac <MRT_updateTimeValues+0x6c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <MRT_updateTimeValues+0x70>)
 8003f62:	6013      	str	r3, [r2, #0]

	//RTC backup registers
	rtc_bckp_reg_hour = prev_hour;
 8003f64:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <MRT_updateTimeValues+0x54>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <MRT_updateTimeValues+0x74>)
 8003f6c:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_min = prev_min;
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <MRT_updateTimeValues+0x5c>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <MRT_updateTimeValues+0x78>)
 8003f76:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_sec = prev_sec;
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <MRT_updateTimeValues+0x64>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <MRT_updateTimeValues+0x7c>)
 8003f80:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_subsec = prev_subsec;
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <MRT_updateTimeValues+0x6c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <MRT_updateTimeValues+0x80>)
 8003f88:	6013      	str	r3, [r2, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	20000379 	.word	0x20000379
 8003f98:	20000369 	.word	0x20000369
 8003f9c:	2000037a 	.word	0x2000037a
 8003fa0:	2000036a 	.word	0x2000036a
 8003fa4:	2000037b 	.word	0x2000037b
 8003fa8:	2000036b 	.word	0x2000036b
 8003fac:	2000037c 	.word	0x2000037c
 8003fb0:	2000036c 	.word	0x2000036c
 8003fb4:	20000328 	.word	0x20000328
 8003fb8:	2000032c 	.word	0x2000032c
 8003fbc:	20000330 	.word	0x20000330
 8003fc0:	20000334 	.word	0x20000334

08003fc4 <MRT_checkTimeValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkTimeValues(rtc_backup_reg val_index, uint32_t max_val){
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	6039      	str	r1, [r7, #0]
 8003fce:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	4a31      	ldr	r2, [pc, #196]	; (800409c <MRT_checkTimeValues+0xd8>)
 8003fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d207      	bcs.n	8003ff4 <MRT_checkTimeValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	4a2d      	ldr	r2, [pc, #180]	; (800409c <MRT_checkTimeValues+0xd8>)
 8003fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
		ret = false;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_time[val_index - NB_OF_FLAGS] > max_val){
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	3b05      	subs	r3, #5
 8003ff8:	4a29      	ldr	r2, [pc, #164]	; (80040a0 <MRT_checkTimeValues+0xdc>)
 8003ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	461a      	mov	r2, r3
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	4293      	cmp	r3, r2
 8004006:	d208      	bcs.n	800401a <MRT_checkTimeValues+0x56>
		*ext_flash_time[val_index - NB_OF_FLAGS] = 0;
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	3b05      	subs	r3, #5
 800400c:	4a24      	ldr	r2, [pc, #144]	; (80040a0 <MRT_checkTimeValues+0xdc>)
 800400e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
		ret = false;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_time[val_index - NB_OF_FLAGS]){
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	4a1f      	ldr	r2, [pc, #124]	; (800409c <MRT_checkTimeValues+0xd8>)
 800401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	79fa      	ldrb	r2, [r7, #7]
 8004026:	3a05      	subs	r2, #5
 8004028:	491d      	ldr	r1, [pc, #116]	; (80040a0 <MRT_checkTimeValues+0xdc>)
 800402a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800402e:	7812      	ldrb	r2, [r2, #0]
 8004030:	4293      	cmp	r3, r2
 8004032:	d02b      	beq.n	800408c <MRT_checkTimeValues+0xc8>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 8004034:	79fb      	ldrb	r3, [r7, #7]
 8004036:	3b05      	subs	r3, #5
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <MRT_checkTimeValues+0xdc>)
 800403a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	79fb      	ldrb	r3, [r7, #7]
 8004044:	4a15      	ldr	r2, [pc, #84]	; (800409c <MRT_checkTimeValues+0xd8>)
 8004046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	4913      	ldr	r1, [pc, #76]	; (800409c <MRT_checkTimeValues+0xd8>)
 8004050:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004054:	4282      	cmp	r2, r0
 8004056:	bf38      	it	cc
 8004058:	4602      	movcc	r2, r0
 800405a:	601a      	str	r2, [r3, #0]
		*ext_flash_time[val_index - NB_OF_FLAGS] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	3b05      	subs	r3, #5
 8004060:	4a0f      	ldr	r2, [pc, #60]	; (80040a0 <MRT_checkTimeValues+0xdc>)
 8004062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	4619      	mov	r1, r3
 800406a:	79fb      	ldrb	r3, [r7, #7]
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <MRT_checkTimeValues+0xd8>)
 800406e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4299      	cmp	r1, r3
 8004076:	bf38      	it	cc
 8004078:	4619      	movcc	r1, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	3b05      	subs	r3, #5
 800407e:	4a08      	ldr	r2, [pc, #32]	; (80040a0 <MRT_checkTimeValues+0xdc>)
 8004080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004084:	b2ca      	uxtb	r2, r1
 8004086:	701a      	strb	r2, [r3, #0]
		ret = false;
 8004088:	2300      	movs	r3, #0
 800408a:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	2000003c 	.word	0x2000003c
 80040a0:	200000a0 	.word	0x200000a0

080040a4 <MRT_MEMORY_Init>:
//**************************************************//
//MISC


//Public
void MRT_MEMORY_Init(void){
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0

	//External flash
	MRT_external_flash_Init();
 80040a8:	f7ff fdac 	bl	8003c04 <MRT_external_flash_Init>

	//Backup registers
	MRT_RTC_backup_regs_Init();
 80040ac:	f7fe fef2 	bl	8002e94 <MRT_RTC_backup_regs_Init>

	//Get the previous flags and rtc time from memory
	MRT_stateRestoration();
 80040b0:	f000 f82e 	bl	8004110 <MRT_stateRestoration>
	//TODO SD card (doesn't work)
	#if MEMORY_THREAD

		//SD card
		#if SD_CARD_
			HAL_IWDG_Refresh(&hiwdg);
 80040b4:	480f      	ldr	r0, [pc, #60]	; (80040f4 <MRT_MEMORY_Init+0x50>)
 80040b6:	f005 fb17 	bl	80096e8 <HAL_IWDG_Refresh>

			// check if SD card is inserted
			if (HAL_GPIO_ReadPin(IN_SD_CARD_DETECT_GPIO_Port, IN_SD_CARD_DETECT_Pin) == GPIO_PIN_RESET) {
 80040ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040be:	480e      	ldr	r0, [pc, #56]	; (80040f8 <MRT_MEMORY_Init+0x54>)
 80040c0:	f004 fa16 	bl	80084f0 <HAL_GPIO_ReadPin>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10f      	bne.n	80040ea <MRT_MEMORY_Init+0x46>
			  // init sd card with dynamic filename
			  fres = sd_init_dynamic_filename("AB", sd_file_header, filename);
 80040ca:	4a0c      	ldr	r2, [pc, #48]	; (80040fc <MRT_MEMORY_Init+0x58>)
 80040cc:	490c      	ldr	r1, [pc, #48]	; (8004100 <MRT_MEMORY_Init+0x5c>)
 80040ce:	480d      	ldr	r0, [pc, #52]	; (8004104 <MRT_MEMORY_Init+0x60>)
 80040d0:	f000 f92e 	bl	8004330 <sd_init_dynamic_filename>
 80040d4:	4603      	mov	r3, r0
 80040d6:	461a      	mov	r2, r3
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <MRT_MEMORY_Init+0x64>)
 80040da:	701a      	strb	r2, [r3, #0]
			  if (fres != FR_OK) {
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <MRT_MEMORY_Init+0x64>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <MRT_MEMORY_Init+0x4c>
					Error_Handler();
 80040e4:	f7fe fc26 	bl	8002934 <Error_Handler>
				println("No SD card inserted");
			  //Error_Handler(); TODO no a good idea if SD card stops working for no reason (will stop the FC)
			}
		#endif
	#endif
}
 80040e8:	e002      	b.n	80040f0 <MRT_MEMORY_Init+0x4c>
				println("No SD card inserted");
 80040ea:	4808      	ldr	r0, [pc, #32]	; (800410c <MRT_MEMORY_Init+0x68>)
 80040ec:	f7fc ff8e 	bl	800100c <println>
}
 80040f0:	bf00      	nop
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	200062a8 	.word	0x200062a8
 80040f8:	40020800 	.word	0x40020800
 80040fc:	20006c30 	.word	0x20006c30
 8004100:	0801bd74 	.word	0x0801bd74
 8004104:	0801b114 	.word	0x0801b114
 8004108:	20007028 	.word	0x20007028
 800410c:	0801b118 	.word	0x0801b118

08004110 <MRT_stateRestoration>:


//Private

//Get the flags values and RTC time
void MRT_stateRestoration(void){
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0

	//Check for a wakeup
	MRT_checkWakeUp();
 8004114:	f000 f8ca 	bl	80042ac <MRT_checkWakeUp>

	//If RTC detected a wake up, update the flash memory and the backup registers
	if (wu_flag == 1){
 8004118:	4b51      	ldr	r3, [pc, #324]	; (8004260 <MRT_stateRestoration+0x150>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d111      	bne.n	8004144 <MRT_stateRestoration+0x34>

		//Update values
		ext_flash_wu += 1;
 8004120:	4b50      	ldr	r3, [pc, #320]	; (8004264 <MRT_stateRestoration+0x154>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	b2da      	uxtb	r2, r3
 8004128:	4b4e      	ldr	r3, [pc, #312]	; (8004264 <MRT_stateRestoration+0x154>)
 800412a:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_wu += 1;
 800412c:	4b4e      	ldr	r3, [pc, #312]	; (8004268 <MRT_stateRestoration+0x158>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	4a4d      	ldr	r2, [pc, #308]	; (8004268 <MRT_stateRestoration+0x158>)
 8004134:	6013      	str	r3, [r2, #0]

		//Check for memory issues¸
		MRT_checkFlagsValues(FC_STATE_WU, 2);
 8004136:	2102      	movs	r1, #2
 8004138:	2001      	movs	r0, #1
 800413a:	f7ff fe41 	bl	8003dc0 <MRT_checkFlagsValues>

		//Update memory
		MRT_saveFlagValue(FC_STATE_WU);
 800413e:	2001      	movs	r0, #1
 8004140:	f7ff fe1c 	bl	8003d7c <MRT_saveFlagValue>
	}
	//Update the wu_flag value
	wu_flag = rtc_bckp_reg_wu;
 8004144:	4b48      	ldr	r3, [pc, #288]	; (8004268 <MRT_stateRestoration+0x158>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	b2da      	uxtb	r2, r3
 800414a:	4b45      	ldr	r3, [pc, #276]	; (8004260 <MRT_stateRestoration+0x150>)
 800414c:	701a      	strb	r2, [r3, #0]


	//Check flags values

	//Reset flag
	if(MRT_checkFlagsValues(FC_STATE_RESET, 1) == false)	MRT_saveFlagValue(FC_STATE_RESET);
 800414e:	2101      	movs	r1, #1
 8004150:	2000      	movs	r0, #0
 8004152:	f7ff fe35 	bl	8003dc0 <MRT_checkFlagsValues>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d102      	bne.n	8004162 <MRT_stateRestoration+0x52>
 800415c:	2000      	movs	r0, #0
 800415e:	f7ff fe0d 	bl	8003d7c <MRT_saveFlagValue>
	reset_flag = rtc_bckp_reg_reset;
 8004162:	4b42      	ldr	r3, [pc, #264]	; (800426c <MRT_stateRestoration+0x15c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	b2da      	uxtb	r2, r3
 8004168:	4b41      	ldr	r3, [pc, #260]	; (8004270 <MRT_stateRestoration+0x160>)
 800416a:	701a      	strb	r2, [r3, #0]

	//Wake up flag (TODO double check??)
	if(MRT_checkFlagsValues(FC_STATE_WU, 1) == false)	MRT_saveFlagValue(FC_STATE_WU);
 800416c:	2101      	movs	r1, #1
 800416e:	2001      	movs	r0, #1
 8004170:	f7ff fe26 	bl	8003dc0 <MRT_checkFlagsValues>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d102      	bne.n	8004180 <MRT_stateRestoration+0x70>
 800417a:	2001      	movs	r0, #1
 800417c:	f7ff fdfe 	bl	8003d7c <MRT_saveFlagValue>
	wu_flag = rtc_bckp_reg_wu;
 8004180:	4b39      	ldr	r3, [pc, #228]	; (8004268 <MRT_stateRestoration+0x158>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	4b36      	ldr	r3, [pc, #216]	; (8004260 <MRT_stateRestoration+0x150>)
 8004188:	701a      	strb	r2, [r3, #0]

	//IWDG flag
	if(MRT_checkFlagsValues(FC_STATE_IWDG, 1) == false)	MRT_saveFlagValue(FC_STATE_IWDG);
 800418a:	2101      	movs	r1, #1
 800418c:	2002      	movs	r0, #2
 800418e:	f7ff fe17 	bl	8003dc0 <MRT_checkFlagsValues>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <MRT_stateRestoration+0x8e>
 8004198:	2002      	movs	r0, #2
 800419a:	f7ff fdef 	bl	8003d7c <MRT_saveFlagValue>
	iwdg_flag = rtc_bckp_reg_iwdg;
 800419e:	4b35      	ldr	r3, [pc, #212]	; (8004274 <MRT_stateRestoration+0x164>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	4b34      	ldr	r3, [pc, #208]	; (8004278 <MRT_stateRestoration+0x168>)
 80041a6:	701a      	strb	r2, [r3, #0]

	//Apogee flag
	if(MRT_checkFlagsValues(FC_STATE_APOGEE, 1) == false)	MRT_saveFlagValue(FC_STATE_APOGEE);
 80041a8:	2101      	movs	r1, #1
 80041aa:	2003      	movs	r0, #3
 80041ac:	f7ff fe08 	bl	8003dc0 <MRT_checkFlagsValues>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d102      	bne.n	80041bc <MRT_stateRestoration+0xac>
 80041b6:	2003      	movs	r0, #3
 80041b8:	f7ff fde0 	bl	8003d7c <MRT_saveFlagValue>
	apogee_flag = rtc_bckp_reg_apogee;
 80041bc:	4b2f      	ldr	r3, [pc, #188]	; (800427c <MRT_stateRestoration+0x16c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4b2f      	ldr	r3, [pc, #188]	; (8004280 <MRT_stateRestoration+0x170>)
 80041c4:	701a      	strb	r2, [r3, #0]

	//Ejection state flag
	if(MRT_checkFlagsValues(FC_STATE_FLIGHT, 4) == false)	MRT_saveFlagValue(FC_STATE_FLIGHT);
 80041c6:	2104      	movs	r1, #4
 80041c8:	2004      	movs	r0, #4
 80041ca:	f7ff fdf9 	bl	8003dc0 <MRT_checkFlagsValues>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <MRT_stateRestoration+0xca>
 80041d4:	2004      	movs	r0, #4
 80041d6:	f7ff fdd1 	bl	8003d7c <MRT_saveFlagValue>
	ejection_stage_flag = rtc_bckp_reg_ejection_stage;
 80041da:	4b2a      	ldr	r3, [pc, #168]	; (8004284 <MRT_stateRestoration+0x174>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <MRT_stateRestoration+0x178>)
 80041e2:	701a      	strb	r2, [r3, #0]


	//Check RTC time values
	//Hours
	if(MRT_checkTimeValues(RTC_HOUR, 23) == false)	MRT_saveTimeValue(RTC_HOUR);
 80041e4:	2117      	movs	r1, #23
 80041e6:	2005      	movs	r0, #5
 80041e8:	f7ff feec 	bl	8003fc4 <MRT_checkTimeValues>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <MRT_stateRestoration+0xe8>
 80041f2:	2005      	movs	r0, #5
 80041f4:	f7ff fe82 	bl	8003efc <MRT_saveTimeValue>
	prev_hour = rtc_bckp_reg_hour;
 80041f8:	4b24      	ldr	r3, [pc, #144]	; (800428c <MRT_stateRestoration+0x17c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4b24      	ldr	r3, [pc, #144]	; (8004290 <MRT_stateRestoration+0x180>)
 8004200:	701a      	strb	r2, [r3, #0]

	//Minutes
	if(MRT_checkTimeValues(RTC_MINUTE, 59) == false)	MRT_saveTimeValue(RTC_MINUTE);
 8004202:	213b      	movs	r1, #59	; 0x3b
 8004204:	2006      	movs	r0, #6
 8004206:	f7ff fedd 	bl	8003fc4 <MRT_checkTimeValues>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d102      	bne.n	8004216 <MRT_stateRestoration+0x106>
 8004210:	2006      	movs	r0, #6
 8004212:	f7ff fe73 	bl	8003efc <MRT_saveTimeValue>
	prev_min = rtc_bckp_reg_min;
 8004216:	4b1f      	ldr	r3, [pc, #124]	; (8004294 <MRT_stateRestoration+0x184>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	b2da      	uxtb	r2, r3
 800421c:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <MRT_stateRestoration+0x188>)
 800421e:	701a      	strb	r2, [r3, #0]

	//Seconds
	if(MRT_checkTimeValues(RTC_SECOND, 59) == false)	MRT_saveTimeValue(RTC_SECOND);
 8004220:	213b      	movs	r1, #59	; 0x3b
 8004222:	2007      	movs	r0, #7
 8004224:	f7ff fece 	bl	8003fc4 <MRT_checkTimeValues>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <MRT_stateRestoration+0x124>
 800422e:	2007      	movs	r0, #7
 8004230:	f7ff fe64 	bl	8003efc <MRT_saveTimeValue>
	prev_sec = rtc_bckp_reg_sec;
 8004234:	4b19      	ldr	r3, [pc, #100]	; (800429c <MRT_stateRestoration+0x18c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <MRT_stateRestoration+0x190>)
 800423c:	701a      	strb	r2, [r3, #0]

	//Sub-Seconds
	if(MRT_checkTimeValues(RTC_SUBSEC, 999) == false)	MRT_saveTimeValue(RTC_SUBSEC);
 800423e:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004242:	2008      	movs	r0, #8
 8004244:	f7ff febe 	bl	8003fc4 <MRT_checkTimeValues>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <MRT_stateRestoration+0x144>
 800424e:	2008      	movs	r0, #8
 8004250:	f7ff fe54 	bl	8003efc <MRT_saveTimeValue>
	prev_subsec = rtc_bckp_reg_subsec;
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <MRT_stateRestoration+0x194>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <MRT_stateRestoration+0x198>)
 800425a:	6013      	str	r3, [r2, #0]
}
 800425c:	bf00      	nop
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000375 	.word	0x20000375
 8004264:	20000365 	.word	0x20000365
 8004268:	20000318 	.word	0x20000318
 800426c:	20000314 	.word	0x20000314
 8004270:	20000374 	.word	0x20000374
 8004274:	2000031c 	.word	0x2000031c
 8004278:	20000376 	.word	0x20000376
 800427c:	20000320 	.word	0x20000320
 8004280:	20000377 	.word	0x20000377
 8004284:	20000324 	.word	0x20000324
 8004288:	20000378 	.word	0x20000378
 800428c:	20000328 	.word	0x20000328
 8004290:	20000379 	.word	0x20000379
 8004294:	2000032c 	.word	0x2000032c
 8004298:	2000037a 	.word	0x2000037a
 800429c:	20000330 	.word	0x20000330
 80042a0:	2000037b 	.word	0x2000037b
 80042a4:	20000334 	.word	0x20000334
 80042a8:	2000037c 	.word	0x2000037c

080042ac <MRT_checkWakeUp>:


/*
 * Check if FC is back from wakeup
 */
void MRT_checkWakeUp(void){
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80042b0:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <MRT_checkWakeUp+0x40>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d112      	bne.n	80042e2 <MRT_checkWakeUp+0x36>
	{

		wu_flag = 1;
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <MRT_checkWakeUp+0x44>)
 80042be:	2201      	movs	r2, #1
 80042c0:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 80042c2:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <MRT_checkWakeUp+0x40>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <MRT_checkWakeUp+0x40>)
 80042c8:	f043 0308 	orr.w	r3, r3, #8
 80042cc:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 80042ce:	4809      	ldr	r0, [pc, #36]	; (80042f4 <MRT_checkWakeUp+0x48>)
 80042d0:	f7fc fe9c 	bl	800100c <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80042d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80042d8:	f005 fa28 	bl	800972c <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80042dc:	4806      	ldr	r0, [pc, #24]	; (80042f8 <MRT_checkWakeUp+0x4c>)
 80042de:	f006 fe73 	bl	800afc8 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 80042e2:	f7fe fc57 	bl	8002b94 <MRT_clear_alarms_flags>
}
 80042e6:	bf00      	nop
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40007000 	.word	0x40007000
 80042f0:	20000375 	.word	0x20000375
 80042f4:	0801b12c 	.word	0x0801b12c
 80042f8:	200062b4 	.word	0x200062b4

080042fc <myprintf>:


uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value);
void str2upper(char* string, char* upper);

void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 80042fc:	b40f      	push	{r0, r1, r2, r3}
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8004304:	f107 0314 	add.w	r3, r7, #20
 8004308:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004312:	4806      	ldr	r0, [pc, #24]	; (800432c <myprintf+0x30>)
 8004314:	f013 fc12 	bl	8017b3c <vsniprintf>
  va_end(args);

  //CDC_Transmit_FS((uint8_t *)buffer, strlen(buffer));
  //HAL_UART_Transmit(&DEBUG_UART, (uint8_t*)buffer, strlen(buffer), -1);
  print(buffer);
 8004318:	4804      	ldr	r0, [pc, #16]	; (800432c <myprintf+0x30>)
 800431a:	f7fc fe95 	bl	8001048 <print>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004328:	b004      	add	sp, #16
 800432a:	4770      	bx	lr
 800432c:	20000380 	.word	0x20000380

08004330 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 800433c:	2201      	movs	r2, #1
 800433e:	4932      	ldr	r1, [pc, #200]	; (8004408 <sd_init_dynamic_filename+0xd8>)
 8004340:	4832      	ldr	r0, [pc, #200]	; (800440c <sd_init_dynamic_filename+0xdc>)
 8004342:	f00b fc93 	bl	800fc6c <f_mount>
 8004346:	4603      	mov	r3, r0
 8004348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 800434c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8004354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004358:	4619      	mov	r1, r3
 800435a:	482d      	ldr	r0, [pc, #180]	; (8004410 <sd_init_dynamic_filename+0xe0>)
 800435c:	f7ff ffce 	bl	80042fc <myprintf>
		return fres;
 8004360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004364:	e04b      	b.n	80043fe <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 800436a:	f107 0320 	add.w	r3, r7, #32
 800436e:	461a      	mov	r2, r3
 8004370:	68f9      	ldr	r1, [r7, #12]
 8004372:	4825      	ldr	r0, [pc, #148]	; (8004408 <sd_init_dynamic_filename+0xd8>)
 8004374:	f000 f89c 	bl	80044b0 <scan_files>
 8004378:	4603      	mov	r3, r0
 800437a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "%s%06lu.txt", prefix, max_used_value + 1);
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	3301      	adds	r3, #1
 8004382:	f107 0010 	add.w	r0, r7, #16
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4922      	ldr	r1, [pc, #136]	; (8004414 <sd_init_dynamic_filename+0xe4>)
 800438a:	f012 fbc5 	bl	8016b18 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 800438e:	f107 0310 	add.w	r3, r7, #16
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f012 fc50 	bl	8016c3a <strcpy>
 800439a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800439c:	f107 0310 	add.w	r3, r7, #16
 80043a0:	221a      	movs	r2, #26
 80043a2:	4619      	mov	r1, r3
 80043a4:	481c      	ldr	r0, [pc, #112]	; (8004418 <sd_init_dynamic_filename+0xe8>)
 80043a6:	f00b fcc5 	bl	800fd34 <f_open>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 80043b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11a      	bne.n	80043ee <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 80043b8:	4818      	ldr	r0, [pc, #96]	; (800441c <sd_init_dynamic_filename+0xec>)
 80043ba:	f7ff ff9f 	bl	80042fc <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 80043be:	4b16      	ldr	r3, [pc, #88]	; (8004418 <sd_init_dynamic_filename+0xe8>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	4619      	mov	r1, r3
 80043c4:	4814      	ldr	r0, [pc, #80]	; (8004418 <sd_init_dynamic_filename+0xe8>)
 80043c6:	f00c f8d6 	bl	8010576 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 80043ca:	4915      	ldr	r1, [pc, #84]	; (8004420 <sd_init_dynamic_filename+0xf0>)
 80043cc:	4815      	ldr	r0, [pc, #84]	; (8004424 <sd_init_dynamic_filename+0xf4>)
 80043ce:	f012 fba3 	bl	8016b18 <siprintf>
	sd_write(&fil, msg_buffer);
 80043d2:	4914      	ldr	r1, [pc, #80]	; (8004424 <sd_init_dynamic_filename+0xf4>)
 80043d4:	4810      	ldr	r0, [pc, #64]	; (8004418 <sd_init_dynamic_filename+0xe8>)
 80043d6:	f000 f841 	bl	800445c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 80043da:	68b9      	ldr	r1, [r7, #8]
 80043dc:	480e      	ldr	r0, [pc, #56]	; (8004418 <sd_init_dynamic_filename+0xe8>)
 80043de:	f000 f83d 	bl	800445c <sd_write>
	f_close(&fil);
 80043e2:	480d      	ldr	r0, [pc, #52]	; (8004418 <sd_init_dynamic_filename+0xe8>)
 80043e4:	f00c f898 	bl	8010518 <f_close>

	return fres;
 80043e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043ec:	e007      	b.n	80043fe <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 80043ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043f2:	4619      	mov	r1, r3
 80043f4:	480c      	ldr	r0, [pc, #48]	; (8004428 <sd_init_dynamic_filename+0xf8>)
 80043f6:	f7ff ff81 	bl	80042fc <myprintf>
		return fres;
 80043fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3728      	adds	r7, #40	; 0x28
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	0801b148 	.word	0x0801b148
 800440c:	20006614 	.word	0x20006614
 8004410:	0801b14c 	.word	0x0801b14c
 8004414:	0801b1c8 	.word	0x0801b1c8
 8004418:	2000702c 	.word	0x2000702c
 800441c:	0801b164 	.word	0x0801b164
 8004420:	0801b1a8 	.word	0x0801b1a8
 8004424:	20006848 	.word	0x20006848
 8004428:	0801b194 	.word	0x0801b194

0800442c <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8004434:	2212      	movs	r2, #18
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4807      	ldr	r0, [pc, #28]	; (8004458 <sd_open_file+0x2c>)
 800443a:	f00b fc7b 	bl	800fd34 <f_open>
 800443e:	4603      	mov	r3, r0
 8004440:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <sd_open_file+0x2c>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4619      	mov	r1, r3
 8004448:	4803      	ldr	r0, [pc, #12]	; (8004458 <sd_open_file+0x2c>)
 800444a:	f00c f894 	bl	8010576 <f_lseek>

	return fres;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	2000702c 	.word	0x2000702c

0800445c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8004466:	6838      	ldr	r0, [r7, #0]
 8004468:	f7fb fec2 	bl	80001f0 <strlen>
 800446c:	4602      	mov	r2, r0
 800446e:	f107 0308 	add.w	r3, r7, #8
 8004472:	6839      	ldr	r1, [r7, #0]
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f00b fe22 	bl	80100be <f_write>
 800447a:	4603      	mov	r3, r0
 800447c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d107      	bne.n	8004494 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	4619      	mov	r1, r3
 8004488:	4807      	ldr	r0, [pc, #28]	; (80044a8 <sd_write+0x4c>)
 800448a:	f7ff ff37 	bl	80042fc <myprintf>
		return bytesWrote;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	b25b      	sxtb	r3, r3
 8004492:	e004      	b.n	800449e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8004494:	4805      	ldr	r0, [pc, #20]	; (80044ac <sd_write+0x50>)
 8004496:	f7ff ff31 	bl	80042fc <myprintf>
		return -1;
 800449a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	0801b1d4 	.word	0x0801b1d4
 80044ac:	0801b1f8 	.word	0x0801b1f8

080044b0 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 80044b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044b2:	b099      	sub	sp, #100	; 0x64
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	466b      	mov	r3, sp
 80044be:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 80044c0:	68b8      	ldr	r0, [r7, #8]
 80044c2:	f7fb fe95 	bl	80001f0 <strlen>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 80044cc:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 80044d0:	4623      	mov	r3, r4
 80044d2:	3b01      	subs	r3, #1
 80044d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80044d6:	b2e0      	uxtb	r0, r4
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	00cb      	lsls	r3, r1, #3
 80044e6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80044ea:	00c2      	lsls	r2, r0, #3
 80044ec:	b2e0      	uxtb	r0, r4
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	00cb      	lsls	r3, r1, #3
 80044fc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004500:	00c2      	lsls	r2, r0, #3
 8004502:	4623      	mov	r3, r4
 8004504:	3307      	adds	r3, #7
 8004506:	08db      	lsrs	r3, r3, #3
 8004508:	00db      	lsls	r3, r3, #3
 800450a:	ebad 0d03 	sub.w	sp, sp, r3
 800450e:	466b      	mov	r3, sp
 8004510:	3300      	adds	r3, #0
 8004512:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8004514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004516:	4619      	mov	r1, r3
 8004518:	68b8      	ldr	r0, [r7, #8]
 800451a:	f000 f8ff 	bl	800471c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8004528:	f107 0318 	add.w	r3, r7, #24
 800452c:	68f9      	ldr	r1, [r7, #12]
 800452e:	4618      	mov	r0, r3
 8004530:	f00c fa74 	bl	8010a1c <f_opendir>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 800453a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800453e:	2b00      	cmp	r3, #0
 8004540:	d16c      	bne.n	800461c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8004542:	f107 0318 	add.w	r3, r7, #24
 8004546:	4939      	ldr	r1, [pc, #228]	; (800462c <scan_files+0x17c>)
 8004548:	4618      	mov	r0, r3
 800454a:	f00c fb0b 	bl	8010b64 <f_readdir>
 800454e:	4603      	mov	r3, r0
 8004550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8004554:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004558:	2b00      	cmp	r3, #0
 800455a:	d15a      	bne.n	8004612 <scan_files+0x162>
 800455c:	4b33      	ldr	r3, [pc, #204]	; (800462c <scan_files+0x17c>)
 800455e:	7a5b      	ldrb	r3, [r3, #9]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d056      	beq.n	8004612 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8004564:	4b31      	ldr	r3, [pc, #196]	; (800462c <scan_files+0x17c>)
 8004566:	7a1b      	ldrb	r3, [r3, #8]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	d14e      	bne.n	800460e <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8004570:	466b      	mov	r3, sp
 8004572:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8004574:	482e      	ldr	r0, [pc, #184]	; (8004630 <scan_files+0x180>)
 8004576:	f7fb fe3b 	bl	80001f0 <strlen>
 800457a:	4604      	mov	r4, r0
 800457c:	4623      	mov	r3, r4
 800457e:	3b01      	subs	r3, #1
 8004580:	653b      	str	r3, [r7, #80]	; 0x50
 8004582:	4620      	mov	r0, r4
 8004584:	f04f 0100 	mov.w	r1, #0
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	00cb      	lsls	r3, r1, #3
 8004592:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004596:	00c2      	lsls	r2, r0, #3
 8004598:	4620      	mov	r0, r4
 800459a:	f04f 0100 	mov.w	r1, #0
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	00cb      	lsls	r3, r1, #3
 80045a8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80045ac:	00c2      	lsls	r2, r0, #3
 80045ae:	1de3      	adds	r3, r4, #7
 80045b0:	08db      	lsrs	r3, r3, #3
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	ebad 0d03 	sub.w	sp, sp, r3
 80045b8:	466b      	mov	r3, sp
 80045ba:	3300      	adds	r3, #0
 80045bc:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 80045be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c0:	4619      	mov	r1, r3
 80045c2:	481b      	ldr	r0, [pc, #108]	; (8004630 <scan_files+0x180>)
 80045c4:	f000 f8aa 	bl	800471c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 80045c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ca:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80045ce:	4619      	mov	r1, r3
 80045d0:	4817      	ldr	r0, [pc, #92]	; (8004630 <scan_files+0x180>)
 80045d2:	f012 fb3a 	bl	8016c4a <strncmp>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 80045dc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d112      	bne.n	800460a <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 80045e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e6:	f107 0214 	add.w	r2, r7, #20
 80045ea:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f820 	bl	8004634 <extract_filename_suffix>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	429a      	cmp	r2, r3
 8004602:	d202      	bcs.n	800460a <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	46b5      	mov	sp, r6
 800460c:	e799      	b.n	8004542 <scan_files+0x92>
            	continue; // don't enter directory
 800460e:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8004610:	e797      	b.n	8004542 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8004612:	f107 0318 	add.w	r3, r7, #24
 8004616:	4618      	mov	r0, r3
 8004618:	f00c fa79 	bl	8010b0e <f_closedir>
    }

    return res;
 800461c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004620:	46ad      	mov	sp, r5
}
 8004622:	4618      	mov	r0, r3
 8004624:	3764      	adds	r7, #100	; 0x64
 8004626:	46bd      	mov	sp, r7
 8004628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800462a:	bf00      	nop
 800462c:	20000480 	.word	0x20000480
 8004630:	20000489 	.word	0x20000489

08004634 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8004634:	b5b0      	push	{r4, r5, r7, lr}
 8004636:	b088      	sub	sp, #32
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	460b      	mov	r3, r1
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	72fb      	strb	r3, [r7, #11]
 8004642:	466b      	mov	r3, sp
 8004644:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7fb fdd2 	bl	80001f0 <strlen>
 800464c:	4603      	mov	r3, r0
 800464e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8004650:	2308      	movs	r3, #8
 8004652:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8004654:	7f7c      	ldrb	r4, [r7, #29]
 8004656:	4623      	mov	r3, r4
 8004658:	3b01      	subs	r3, #1
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	b2e0      	uxtb	r0, r4
 800465e:	f04f 0100 	mov.w	r1, #0
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	00cb      	lsls	r3, r1, #3
 800466c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004670:	00c2      	lsls	r2, r0, #3
 8004672:	b2e0      	uxtb	r0, r4
 8004674:	f04f 0100 	mov.w	r1, #0
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	00cb      	lsls	r3, r1, #3
 8004682:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004686:	00c2      	lsls	r2, r0, #3
 8004688:	4623      	mov	r3, r4
 800468a:	3307      	adds	r3, #7
 800468c:	08db      	lsrs	r3, r3, #3
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	ebad 0d03 	sub.w	sp, sp, r3
 8004694:	466b      	mov	r3, sp
 8004696:	3300      	adds	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800469a:	2300      	movs	r3, #0
 800469c:	77fb      	strb	r3, [r7, #31]
 800469e:	e014      	b.n	80046ca <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 80046a0:	7afb      	ldrb	r3, [r7, #11]
 80046a2:	1e5a      	subs	r2, r3, #1
 80046a4:	7ffb      	ldrb	r3, [r7, #31]
 80046a6:	441a      	add	r2, r3
 80046a8:	7fbb      	ldrb	r3, [r7, #30]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	429a      	cmp	r2, r3
 80046ae:	da11      	bge.n	80046d4 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 80046b0:	7afa      	ldrb	r2, [r7, #11]
 80046b2:	7ffb      	ldrb	r3, [r7, #31]
 80046b4:	4413      	add	r3, r2
 80046b6:	461a      	mov	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	441a      	add	r2, r3
 80046bc:	7ffb      	ldrb	r3, [r7, #31]
 80046be:	7811      	ldrb	r1, [r2, #0]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 80046c4:	7ffb      	ldrb	r3, [r7, #31]
 80046c6:	3301      	adds	r3, #1
 80046c8:	77fb      	strb	r3, [r7, #31]
 80046ca:	7ffa      	ldrb	r2, [r7, #31]
 80046cc:	7f7b      	ldrb	r3, [r7, #29]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d3e6      	bcc.n	80046a0 <extract_filename_suffix+0x6c>
 80046d2:	e000      	b.n	80046d6 <extract_filename_suffix+0xa2>
		}
		else break;
 80046d4:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	f107 0110 	add.w	r1, r7, #16
 80046dc:	220a      	movs	r2, #10
 80046de:	4618      	mov	r0, r3
 80046e0:	f013 f978 	bl	80179d4 <strtol>
 80046e4:	4603      	mov	r3, r0
 80046e6:	461a      	mov	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d00a      	beq.n	800470a <extract_filename_suffix+0xd6>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046fc:	d005      	beq.n	800470a <extract_filename_suffix+0xd6>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004706:	4293      	cmp	r3, r2
 8004708:	d101      	bne.n	800470e <extract_filename_suffix+0xda>
	{
		return 1;
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <extract_filename_suffix+0xdc>
	}

	return 0;
 800470e:	2300      	movs	r3, #0
 8004710:	46ad      	mov	sp, r5
}
 8004712:	4618      	mov	r0, r3
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800471c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8004726:	2300      	movs	r3, #0
 8004728:	73fb      	strb	r3, [r7, #15]
 800472a:	e019      	b.n	8004760 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4413      	add	r3, r2
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	73bb      	strb	r3, [r7, #14]
 8004736:	7bbb      	ldrb	r3, [r7, #14]
 8004738:	3301      	adds	r3, #1
 800473a:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <str2upper+0x5c>)
 800473c:	4413      	add	r3, r2
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d102      	bne.n	800474e <str2upper+0x32>
 8004748:	7bbb      	ldrb	r3, [r7, #14]
 800474a:	3b20      	subs	r3, #32
 800474c:	e000      	b.n	8004750 <str2upper+0x34>
 800474e:	7bbb      	ldrb	r3, [r7, #14]
 8004750:	7bfa      	ldrb	r2, [r7, #15]
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	440a      	add	r2, r1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	3301      	adds	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	7bfc      	ldrb	r4, [r7, #15]
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fb fd44 	bl	80001f0 <strlen>
 8004768:	4603      	mov	r3, r0
 800476a:	429c      	cmp	r4, r3
 800476c:	d3de      	bcc.n	800472c <str2upper+0x10>
	}
}
 800476e:	bf00      	nop
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	bd90      	pop	{r4, r7, pc}
 8004778:	0801bed8 	.word	0x0801bed8

0800477c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af02      	add	r7, sp, #8
 8004782:	4603      	mov	r3, r0
 8004784:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8004786:	f107 020f 	add.w	r2, r7, #15
 800478a:	1df9      	adds	r1, r7, #7
 800478c:	2364      	movs	r3, #100	; 0x64
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	2301      	movs	r3, #1
 8004792:	4804      	ldr	r0, [pc, #16]	; (80047a4 <W25qxx_Spi+0x28>)
 8004794:	f006 ff9c 	bl	800b6d0 <HAL_SPI_TransmitReceive>
	return ret;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	2000632c 	.word	0x2000632c

080047a8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	2300      	movs	r3, #0
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	2300      	movs	r3, #0
 80047bc:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80047be:	2200      	movs	r2, #0
 80047c0:	2140      	movs	r1, #64	; 0x40
 80047c2:	4813      	ldr	r0, [pc, #76]	; (8004810 <W25qxx_ReadID+0x68>)
 80047c4:	f003 feac 	bl	8008520 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80047c8:	209f      	movs	r0, #159	; 0x9f
 80047ca:	f7ff ffd7 	bl	800477c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80047ce:	20a5      	movs	r0, #165	; 0xa5
 80047d0:	f7ff ffd4 	bl	800477c <W25qxx_Spi>
 80047d4:	4603      	mov	r3, r0
 80047d6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80047d8:	20a5      	movs	r0, #165	; 0xa5
 80047da:	f7ff ffcf 	bl	800477c <W25qxx_Spi>
 80047de:	4603      	mov	r3, r0
 80047e0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80047e2:	20a5      	movs	r0, #165	; 0xa5
 80047e4:	f7ff ffca 	bl	800477c <W25qxx_Spi>
 80047e8:	4603      	mov	r3, r0
 80047ea:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80047ec:	2201      	movs	r2, #1
 80047ee:	2140      	movs	r1, #64	; 0x40
 80047f0:	4807      	ldr	r0, [pc, #28]	; (8004810 <W25qxx_ReadID+0x68>)
 80047f2:	f003 fe95 	bl	8008520 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	041a      	lsls	r2, r3, #16
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	4313      	orrs	r3, r2
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
	return Temp;
 8004806:	68fb      	ldr	r3, [r7, #12]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40020c00 	.word	0x40020c00

08004814 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004814:	b590      	push	{r4, r7, lr}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800481a:	2200      	movs	r2, #0
 800481c:	2140      	movs	r1, #64	; 0x40
 800481e:	4816      	ldr	r0, [pc, #88]	; (8004878 <W25qxx_ReadUniqID+0x64>)
 8004820:	f003 fe7e 	bl	8008520 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004824:	204b      	movs	r0, #75	; 0x4b
 8004826:	f7ff ffa9 	bl	800477c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800482a:	2300      	movs	r3, #0
 800482c:	71fb      	strb	r3, [r7, #7]
 800482e:	e005      	b.n	800483c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004830:	20a5      	movs	r0, #165	; 0xa5
 8004832:	f7ff ffa3 	bl	800477c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	3301      	adds	r3, #1
 800483a:	71fb      	strb	r3, [r7, #7]
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d9f6      	bls.n	8004830 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8004842:	2300      	movs	r3, #0
 8004844:	71bb      	strb	r3, [r7, #6]
 8004846:	e00b      	b.n	8004860 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004848:	79bc      	ldrb	r4, [r7, #6]
 800484a:	20a5      	movs	r0, #165	; 0xa5
 800484c:	f7ff ff96 	bl	800477c <W25qxx_Spi>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	4b09      	ldr	r3, [pc, #36]	; (800487c <W25qxx_ReadUniqID+0x68>)
 8004856:	4423      	add	r3, r4
 8004858:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800485a:	79bb      	ldrb	r3, [r7, #6]
 800485c:	3301      	adds	r3, #1
 800485e:	71bb      	strb	r3, [r7, #6]
 8004860:	79bb      	ldrb	r3, [r7, #6]
 8004862:	2b07      	cmp	r3, #7
 8004864:	d9f0      	bls.n	8004848 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004866:	2201      	movs	r2, #1
 8004868:	2140      	movs	r1, #64	; 0x40
 800486a:	4803      	ldr	r0, [pc, #12]	; (8004878 <W25qxx_ReadUniqID+0x64>)
 800486c:	f003 fe58 	bl	8008520 <HAL_GPIO_WritePin>
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	bd90      	pop	{r4, r7, pc}
 8004878:	40020c00 	.word	0x40020c00
 800487c:	2000725c 	.word	0x2000725c

08004880 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004884:	2200      	movs	r2, #0
 8004886:	2140      	movs	r1, #64	; 0x40
 8004888:	4807      	ldr	r0, [pc, #28]	; (80048a8 <W25qxx_WriteEnable+0x28>)
 800488a:	f003 fe49 	bl	8008520 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800488e:	2006      	movs	r0, #6
 8004890:	f7ff ff74 	bl	800477c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004894:	2201      	movs	r2, #1
 8004896:	2140      	movs	r1, #64	; 0x40
 8004898:	4803      	ldr	r0, [pc, #12]	; (80048a8 <W25qxx_WriteEnable+0x28>)
 800489a:	f003 fe41 	bl	8008520 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800489e:	2001      	movs	r0, #1
 80048a0:	f00c fc02 	bl	80110a8 <osDelay>
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40020c00 	.word	0x40020c00

080048ac <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80048ba:	2200      	movs	r2, #0
 80048bc:	2140      	movs	r1, #64	; 0x40
 80048be:	481c      	ldr	r0, [pc, #112]	; (8004930 <W25qxx_ReadStatusRegister+0x84>)
 80048c0:	f003 fe2e 	bl	8008520 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d10c      	bne.n	80048e4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80048ca:	2005      	movs	r0, #5
 80048cc:	f7ff ff56 	bl	800477c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80048d0:	20a5      	movs	r0, #165	; 0xa5
 80048d2:	f7ff ff53 	bl	800477c <W25qxx_Spi>
 80048d6:	4603      	mov	r3, r0
 80048d8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80048da:	4a16      	ldr	r2, [pc, #88]	; (8004934 <W25qxx_ReadStatusRegister+0x88>)
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80048e2:	e01b      	b.n	800491c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d10c      	bne.n	8004904 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80048ea:	2035      	movs	r0, #53	; 0x35
 80048ec:	f7ff ff46 	bl	800477c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80048f0:	20a5      	movs	r0, #165	; 0xa5
 80048f2:	f7ff ff43 	bl	800477c <W25qxx_Spi>
 80048f6:	4603      	mov	r3, r0
 80048f8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80048fa:	4a0e      	ldr	r2, [pc, #56]	; (8004934 <W25qxx_ReadStatusRegister+0x88>)
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004902:	e00b      	b.n	800491c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004904:	2015      	movs	r0, #21
 8004906:	f7ff ff39 	bl	800477c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800490a:	20a5      	movs	r0, #165	; 0xa5
 800490c:	f7ff ff36 	bl	800477c <W25qxx_Spi>
 8004910:	4603      	mov	r3, r0
 8004912:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004914:	4a07      	ldr	r2, [pc, #28]	; (8004934 <W25qxx_ReadStatusRegister+0x88>)
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800491c:	2201      	movs	r2, #1
 800491e:	2140      	movs	r1, #64	; 0x40
 8004920:	4803      	ldr	r0, [pc, #12]	; (8004930 <W25qxx_ReadStatusRegister+0x84>)
 8004922:	f003 fdfd 	bl	8008520 <HAL_GPIO_WritePin>
	return status;
 8004926:	7bfb      	ldrb	r3, [r7, #15]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40020c00 	.word	0x40020c00
 8004934:	2000725c 	.word	0x2000725c

08004938 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800493c:	2001      	movs	r0, #1
 800493e:	f00c fbb3 	bl	80110a8 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004942:	2200      	movs	r2, #0
 8004944:	2140      	movs	r1, #64	; 0x40
 8004946:	480f      	ldr	r0, [pc, #60]	; (8004984 <W25qxx_WaitForWriteEnd+0x4c>)
 8004948:	f003 fdea 	bl	8008520 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800494c:	2005      	movs	r0, #5
 800494e:	f7ff ff15 	bl	800477c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004952:	20a5      	movs	r0, #165	; 0xa5
 8004954:	f7ff ff12 	bl	800477c <W25qxx_Spi>
 8004958:	4603      	mov	r3, r0
 800495a:	461a      	mov	r2, r3
 800495c:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <W25qxx_WaitForWriteEnd+0x50>)
 800495e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8004962:	2001      	movs	r0, #1
 8004964:	f00c fba0 	bl	80110a8 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8004968:	4b07      	ldr	r3, [pc, #28]	; (8004988 <W25qxx_WaitForWriteEnd+0x50>)
 800496a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1ed      	bne.n	8004952 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004976:	2201      	movs	r2, #1
 8004978:	2140      	movs	r1, #64	; 0x40
 800497a:	4802      	ldr	r0, [pc, #8]	; (8004984 <W25qxx_WaitForWriteEnd+0x4c>)
 800497c:	f003 fdd0 	bl	8008520 <HAL_GPIO_WritePin>
}
 8004980:	bf00      	nop
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40020c00 	.word	0x40020c00
 8004988:	2000725c 	.word	0x2000725c

0800498c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004992:	4b90      	ldr	r3, [pc, #576]	; (8004bd4 <W25qxx_Init+0x248>)
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800499a:	e002      	b.n	80049a2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800499c:	2001      	movs	r0, #1
 800499e:	f00c fb83 	bl	80110a8 <osDelay>
	while (HAL_GetTick() < 100)
 80049a2:	f002 fea5 	bl	80076f0 <HAL_GetTick>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b63      	cmp	r3, #99	; 0x63
 80049aa:	d9f7      	bls.n	800499c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80049ac:	2201      	movs	r2, #1
 80049ae:	2140      	movs	r1, #64	; 0x40
 80049b0:	4889      	ldr	r0, [pc, #548]	; (8004bd8 <W25qxx_Init+0x24c>)
 80049b2:	f003 fdb5 	bl	8008520 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80049b6:	2064      	movs	r0, #100	; 0x64
 80049b8:	f00c fb76 	bl	80110a8 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 80049bc:	4887      	ldr	r0, [pc, #540]	; (8004bdc <W25qxx_Init+0x250>)
 80049be:	f011 ffdf 	bl	8016980 <puts>
#endif
	id = W25qxx_ReadID();
 80049c2:	f7ff fef1 	bl	80047a8 <W25qxx_ReadID>
 80049c6:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	4885      	ldr	r0, [pc, #532]	; (8004be0 <W25qxx_Init+0x254>)
 80049cc:	f011 ff52 	bl	8016874 <iprintf>
#endif
	switch (id & 0x000000FF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	3b11      	subs	r3, #17
 80049d6:	2b0f      	cmp	r3, #15
 80049d8:	f200 808b 	bhi.w	8004af2 <W25qxx_Init+0x166>
 80049dc:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <W25qxx_Init+0x58>)
 80049de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e2:	bf00      	nop
 80049e4:	08004adf 	.word	0x08004adf
 80049e8:	08004acb 	.word	0x08004acb
 80049ec:	08004ab7 	.word	0x08004ab7
 80049f0:	08004aa3 	.word	0x08004aa3
 80049f4:	08004a8f 	.word	0x08004a8f
 80049f8:	08004a7b 	.word	0x08004a7b
 80049fc:	08004a67 	.word	0x08004a67
 8004a00:	08004a51 	.word	0x08004a51
 8004a04:	08004a3b 	.word	0x08004a3b
 8004a08:	08004af3 	.word	0x08004af3
 8004a0c:	08004af3 	.word	0x08004af3
 8004a10:	08004af3 	.word	0x08004af3
 8004a14:	08004af3 	.word	0x08004af3
 8004a18:	08004af3 	.word	0x08004af3
 8004a1c:	08004af3 	.word	0x08004af3
 8004a20:	08004a25 	.word	0x08004a25
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004a24:	4b6b      	ldr	r3, [pc, #428]	; (8004bd4 <W25qxx_Init+0x248>)
 8004a26:	220a      	movs	r2, #10
 8004a28:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8004a2a:	4b6a      	ldr	r3, [pc, #424]	; (8004bd4 <W25qxx_Init+0x248>)
 8004a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a30:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8004a32:	486c      	ldr	r0, [pc, #432]	; (8004be4 <W25qxx_Init+0x258>)
 8004a34:	f011 ffa4 	bl	8016980 <puts>
#endif
		break;
 8004a38:	e064      	b.n	8004b04 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8004a3a:	4b66      	ldr	r3, [pc, #408]	; (8004bd4 <W25qxx_Init+0x248>)
 8004a3c:	2209      	movs	r2, #9
 8004a3e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8004a40:	4b64      	ldr	r3, [pc, #400]	; (8004bd4 <W25qxx_Init+0x248>)
 8004a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a46:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8004a48:	4867      	ldr	r0, [pc, #412]	; (8004be8 <W25qxx_Init+0x25c>)
 8004a4a:	f011 ff99 	bl	8016980 <puts>
#endif
		break;
 8004a4e:	e059      	b.n	8004b04 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8004a50:	4b60      	ldr	r3, [pc, #384]	; (8004bd4 <W25qxx_Init+0x248>)
 8004a52:	2208      	movs	r2, #8
 8004a54:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8004a56:	4b5f      	ldr	r3, [pc, #380]	; (8004bd4 <W25qxx_Init+0x248>)
 8004a58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a5c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8004a5e:	4863      	ldr	r0, [pc, #396]	; (8004bec <W25qxx_Init+0x260>)
 8004a60:	f011 ff8e 	bl	8016980 <puts>
#endif
		break;
 8004a64:	e04e      	b.n	8004b04 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8004a66:	4b5b      	ldr	r3, [pc, #364]	; (8004bd4 <W25qxx_Init+0x248>)
 8004a68:	2207      	movs	r2, #7
 8004a6a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8004a6c:	4b59      	ldr	r3, [pc, #356]	; (8004bd4 <W25qxx_Init+0x248>)
 8004a6e:	2280      	movs	r2, #128	; 0x80
 8004a70:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8004a72:	485f      	ldr	r0, [pc, #380]	; (8004bf0 <W25qxx_Init+0x264>)
 8004a74:	f011 ff84 	bl	8016980 <puts>
#endif
		break;
 8004a78:	e044      	b.n	8004b04 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8004a7a:	4b56      	ldr	r3, [pc, #344]	; (8004bd4 <W25qxx_Init+0x248>)
 8004a7c:	2206      	movs	r2, #6
 8004a7e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8004a80:	4b54      	ldr	r3, [pc, #336]	; (8004bd4 <W25qxx_Init+0x248>)
 8004a82:	2240      	movs	r2, #64	; 0x40
 8004a84:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8004a86:	485b      	ldr	r0, [pc, #364]	; (8004bf4 <W25qxx_Init+0x268>)
 8004a88:	f011 ff7a 	bl	8016980 <puts>
#endif
		break;
 8004a8c:	e03a      	b.n	8004b04 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8004a8e:	4b51      	ldr	r3, [pc, #324]	; (8004bd4 <W25qxx_Init+0x248>)
 8004a90:	2205      	movs	r2, #5
 8004a92:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004a94:	4b4f      	ldr	r3, [pc, #316]	; (8004bd4 <W25qxx_Init+0x248>)
 8004a96:	2220      	movs	r2, #32
 8004a98:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8004a9a:	4857      	ldr	r0, [pc, #348]	; (8004bf8 <W25qxx_Init+0x26c>)
 8004a9c:	f011 ff70 	bl	8016980 <puts>
#endif
		break;
 8004aa0:	e030      	b.n	8004b04 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004aa2:	4b4c      	ldr	r3, [pc, #304]	; (8004bd4 <W25qxx_Init+0x248>)
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004aa8:	4b4a      	ldr	r3, [pc, #296]	; (8004bd4 <W25qxx_Init+0x248>)
 8004aaa:	2210      	movs	r2, #16
 8004aac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8004aae:	4853      	ldr	r0, [pc, #332]	; (8004bfc <W25qxx_Init+0x270>)
 8004ab0:	f011 ff66 	bl	8016980 <puts>
#endif
		break;
 8004ab4:	e026      	b.n	8004b04 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004ab6:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <W25qxx_Init+0x248>)
 8004ab8:	2203      	movs	r2, #3
 8004aba:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8004abc:	4b45      	ldr	r3, [pc, #276]	; (8004bd4 <W25qxx_Init+0x248>)
 8004abe:	2208      	movs	r2, #8
 8004ac0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8004ac2:	484f      	ldr	r0, [pc, #316]	; (8004c00 <W25qxx_Init+0x274>)
 8004ac4:	f011 ff5c 	bl	8016980 <puts>
#endif
		break;
 8004ac8:	e01c      	b.n	8004b04 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8004aca:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <W25qxx_Init+0x248>)
 8004acc:	2202      	movs	r2, #2
 8004ace:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004ad0:	4b40      	ldr	r3, [pc, #256]	; (8004bd4 <W25qxx_Init+0x248>)
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8004ad6:	484b      	ldr	r0, [pc, #300]	; (8004c04 <W25qxx_Init+0x278>)
 8004ad8:	f011 ff52 	bl	8016980 <puts>
#endif
		break;
 8004adc:	e012      	b.n	8004b04 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8004ade:	4b3d      	ldr	r3, [pc, #244]	; (8004bd4 <W25qxx_Init+0x248>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004ae4:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <W25qxx_Init+0x248>)
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8004aea:	4847      	ldr	r0, [pc, #284]	; (8004c08 <W25qxx_Init+0x27c>)
 8004aec:	f011 ff48 	bl	8016980 <puts>
#endif
		break;
 8004af0:	e008      	b.n	8004b04 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8004af2:	4846      	ldr	r0, [pc, #280]	; (8004c0c <W25qxx_Init+0x280>)
 8004af4:	f011 ff44 	bl	8016980 <puts>
#endif
		w25qxx.Lock = 0;
 8004af8:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <W25qxx_Init+0x248>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004b00:	2300      	movs	r3, #0
 8004b02:	e063      	b.n	8004bcc <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8004b04:	4b33      	ldr	r3, [pc, #204]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b0a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8004b0c:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b12:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004b14:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	4a2e      	ldr	r2, [pc, #184]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b1c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8004b1e:	4b2d      	ldr	r3, [pc, #180]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	4a2c      	ldr	r2, [pc, #176]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b24:	6912      	ldr	r2, [r2, #16]
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	4a2a      	ldr	r2, [pc, #168]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b2c:	8952      	ldrh	r2, [r2, #10]
 8004b2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b32:	4a28      	ldr	r2, [pc, #160]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b34:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8004b36:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	4a25      	ldr	r2, [pc, #148]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b3e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8004b40:	4b24      	ldr	r3, [pc, #144]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	4a23      	ldr	r2, [pc, #140]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b46:	6912      	ldr	r2, [r2, #16]
 8004b48:	fb02 f303 	mul.w	r3, r2, r3
 8004b4c:	0a9b      	lsrs	r3, r3, #10
 8004b4e:	4a21      	ldr	r2, [pc, #132]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b50:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8004b52:	f7ff fe5f 	bl	8004814 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8004b56:	2001      	movs	r0, #1
 8004b58:	f7ff fea8 	bl	80048ac <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8004b5c:	2002      	movs	r0, #2
 8004b5e:	f7ff fea5 	bl	80048ac <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8004b62:	2003      	movs	r0, #3
 8004b64:	f7ff fea2 	bl	80048ac <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b6a:	895b      	ldrh	r3, [r3, #10]
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4828      	ldr	r0, [pc, #160]	; (8004c10 <W25qxx_Init+0x284>)
 8004b70:	f011 fe80 	bl	8016874 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8004b74:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4826      	ldr	r0, [pc, #152]	; (8004c14 <W25qxx_Init+0x288>)
 8004b7c:	f011 fe7a 	bl	8016874 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8004b80:	4b14      	ldr	r3, [pc, #80]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	4619      	mov	r1, r3
 8004b86:	4824      	ldr	r0, [pc, #144]	; (8004c18 <W25qxx_Init+0x28c>)
 8004b88:	f011 fe74 	bl	8016874 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8004b8c:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	4619      	mov	r1, r3
 8004b92:	4822      	ldr	r0, [pc, #136]	; (8004c1c <W25qxx_Init+0x290>)
 8004b94:	f011 fe6e 	bl	8016874 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8004b98:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <W25qxx_Init+0x248>)
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4820      	ldr	r0, [pc, #128]	; (8004c20 <W25qxx_Init+0x294>)
 8004ba0:	f011 fe68 	bl	8016874 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <W25qxx_Init+0x248>)
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	481e      	ldr	r0, [pc, #120]	; (8004c24 <W25qxx_Init+0x298>)
 8004bac:	f011 fe62 	bl	8016874 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004bb0:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <W25qxx_Init+0x248>)
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	481c      	ldr	r0, [pc, #112]	; (8004c28 <W25qxx_Init+0x29c>)
 8004bb8:	f011 fe5c 	bl	8016874 <iprintf>
	printf("w25qxx Init Done\r\n");
 8004bbc:	481b      	ldr	r0, [pc, #108]	; (8004c2c <W25qxx_Init+0x2a0>)
 8004bbe:	f011 fedf 	bl	8016980 <puts>
#endif
	w25qxx.Lock = 0;
 8004bc2:	4b04      	ldr	r3, [pc, #16]	; (8004bd4 <W25qxx_Init+0x248>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004bca:	2301      	movs	r3, #1
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3708      	adds	r7, #8
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	2000725c 	.word	0x2000725c
 8004bd8:	40020c00 	.word	0x40020c00
 8004bdc:	0801b210 	.word	0x0801b210
 8004be0:	0801b228 	.word	0x0801b228
 8004be4:	0801b23c 	.word	0x0801b23c
 8004be8:	0801b254 	.word	0x0801b254
 8004bec:	0801b26c 	.word	0x0801b26c
 8004bf0:	0801b284 	.word	0x0801b284
 8004bf4:	0801b29c 	.word	0x0801b29c
 8004bf8:	0801b2b4 	.word	0x0801b2b4
 8004bfc:	0801b2cc 	.word	0x0801b2cc
 8004c00:	0801b2e4 	.word	0x0801b2e4
 8004c04:	0801b2fc 	.word	0x0801b2fc
 8004c08:	0801b314 	.word	0x0801b314
 8004c0c:	0801b32c 	.word	0x0801b32c
 8004c10:	0801b340 	.word	0x0801b340
 8004c14:	0801b360 	.word	0x0801b360
 8004c18:	0801b378 	.word	0x0801b378
 8004c1c:	0801b398 	.word	0x0801b398
 8004c20:	0801b3b4 	.word	0x0801b3b4
 8004c24:	0801b3d4 	.word	0x0801b3d4
 8004c28:	0801b3f0 	.word	0x0801b3f0
 8004c2c:	0801b410 	.word	0x0801b410

08004c30 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004c38:	e002      	b.n	8004c40 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	f00c fa34 	bl	80110a8 <osDelay>
	while (w25qxx.Lock == 1)
 8004c40:	4b2d      	ldr	r3, [pc, #180]	; (8004cf8 <W25qxx_EraseSector+0xc8>)
 8004c42:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d0f7      	beq.n	8004c3a <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8004c4a:	4b2b      	ldr	r3, [pc, #172]	; (8004cf8 <W25qxx_EraseSector+0xc8>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8004c52:	f002 fd4d 	bl	80076f0 <HAL_GetTick>
 8004c56:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4828      	ldr	r0, [pc, #160]	; (8004cfc <W25qxx_EraseSector+0xcc>)
 8004c5c:	f011 fe0a 	bl	8016874 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8004c60:	f7ff fe6a 	bl	8004938 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8004c64:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <W25qxx_EraseSector+0xc8>)
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004c70:	f7ff fe06 	bl	8004880 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004c74:	2200      	movs	r2, #0
 8004c76:	2140      	movs	r1, #64	; 0x40
 8004c78:	4821      	ldr	r0, [pc, #132]	; (8004d00 <W25qxx_EraseSector+0xd0>)
 8004c7a:	f003 fc51 	bl	8008520 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004c7e:	4b1e      	ldr	r3, [pc, #120]	; (8004cf8 <W25qxx_EraseSector+0xc8>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d909      	bls.n	8004c9a <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8004c86:	2021      	movs	r0, #33	; 0x21
 8004c88:	f7ff fd78 	bl	800477c <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	0e1b      	lsrs	r3, r3, #24
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fd72 	bl	800477c <W25qxx_Spi>
 8004c98:	e002      	b.n	8004ca0 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8004c9a:	2020      	movs	r0, #32
 8004c9c:	f7ff fd6e 	bl	800477c <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff fd68 	bl	800477c <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fd62 	bl	800477c <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fd5d 	bl	800477c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	2140      	movs	r1, #64	; 0x40
 8004cc6:	480e      	ldr	r0, [pc, #56]	; (8004d00 <W25qxx_EraseSector+0xd0>)
 8004cc8:	f003 fc2a 	bl	8008520 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004ccc:	f7ff fe34 	bl	8004938 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004cd0:	f002 fd0e 	bl	80076f0 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4809      	ldr	r0, [pc, #36]	; (8004d04 <W25qxx_EraseSector+0xd4>)
 8004cde:	f011 fdc9 	bl	8016874 <iprintf>
#endif
	W25qxx_Delay(1);
 8004ce2:	2001      	movs	r0, #1
 8004ce4:	f00c f9e0 	bl	80110a8 <osDelay>
	w25qxx.Lock = 0;
 8004ce8:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <W25qxx_EraseSector+0xc8>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	2000725c 	.word	0x2000725c
 8004cfc:	0801b468 	.word	0x0801b468
 8004d00:	40020c00 	.word	0x40020c00
 8004d04:	0801b48c 	.word	0x0801b48c

08004d08 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004d10:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <W25qxx_SectorToPage+0x28>)
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	4a05      	ldr	r2, [pc, #20]	; (8004d30 <W25qxx_SectorToPage+0x28>)
 8004d1c:	8952      	ldrh	r2, [r2, #10]
 8004d1e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	2000725c 	.word	0x2000725c

08004d34 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004d42:	e002      	b.n	8004d4a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8004d44:	2001      	movs	r0, #1
 8004d46:	f00c f9af 	bl	80110a8 <osDelay>
	while (w25qxx.Lock == 1)
 8004d4a:	4b57      	ldr	r3, [pc, #348]	; (8004ea8 <W25qxx_WritePage+0x174>)
 8004d4c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d0f7      	beq.n	8004d44 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8004d54:	4b54      	ldr	r3, [pc, #336]	; (8004ea8 <W25qxx_WritePage+0x174>)
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	4a51      	ldr	r2, [pc, #324]	; (8004ea8 <W25qxx_WritePage+0x174>)
 8004d64:	8952      	ldrh	r2, [r2, #10]
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d802      	bhi.n	8004d70 <W25qxx_WritePage+0x3c>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004d70:	4b4d      	ldr	r3, [pc, #308]	; (8004ea8 <W25qxx_WritePage+0x174>)
 8004d72:	895b      	ldrh	r3, [r3, #10]
 8004d74:	461a      	mov	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	4413      	add	r3, r2
 8004d82:	4a49      	ldr	r2, [pc, #292]	; (8004ea8 <W25qxx_WritePage+0x174>)
 8004d84:	8952      	ldrh	r2, [r2, #10]
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d905      	bls.n	8004d96 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004d8a:	4b47      	ldr	r3, [pc, #284]	; (8004ea8 <W25qxx_WritePage+0x174>)
 8004d8c:	895b      	ldrh	r3, [r3, #10]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	4843      	ldr	r0, [pc, #268]	; (8004eac <W25qxx_WritePage+0x178>)
 8004d9e:	f011 fd69 	bl	8016874 <iprintf>
	W25qxx_Delay(100);
 8004da2:	2064      	movs	r0, #100	; 0x64
 8004da4:	f00c f980 	bl	80110a8 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004da8:	f002 fca2 	bl	80076f0 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8004dae:	f7ff fdc3 	bl	8004938 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8004db2:	f7ff fd65 	bl	8004880 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004db6:	2200      	movs	r2, #0
 8004db8:	2140      	movs	r1, #64	; 0x40
 8004dba:	483d      	ldr	r0, [pc, #244]	; (8004eb0 <W25qxx_WritePage+0x17c>)
 8004dbc:	f003 fbb0 	bl	8008520 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004dc0:	4b39      	ldr	r3, [pc, #228]	; (8004ea8 <W25qxx_WritePage+0x174>)
 8004dc2:	895b      	ldrh	r3, [r3, #10]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	fb03 f302 	mul.w	r3, r3, r2
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	4413      	add	r3, r2
 8004dd0:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004dd2:	4b35      	ldr	r3, [pc, #212]	; (8004ea8 <W25qxx_WritePage+0x174>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d909      	bls.n	8004dee <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8004dda:	2012      	movs	r0, #18
 8004ddc:	f7ff fcce 	bl	800477c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	0e1b      	lsrs	r3, r3, #24
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fcc8 	bl	800477c <W25qxx_Spi>
 8004dec:	e002      	b.n	8004df4 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8004dee:	2002      	movs	r0, #2
 8004df0:	f7ff fcc4 	bl	800477c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	0c1b      	lsrs	r3, r3, #16
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff fcbe 	bl	800477c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fcb8 	bl	800477c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fcb3 	bl	800477c <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	2364      	movs	r3, #100	; 0x64
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	4825      	ldr	r0, [pc, #148]	; (8004eb4 <W25qxx_WritePage+0x180>)
 8004e20:	f006 fa09 	bl	800b236 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004e24:	2201      	movs	r2, #1
 8004e26:	2140      	movs	r1, #64	; 0x40
 8004e28:	4821      	ldr	r0, [pc, #132]	; (8004eb0 <W25qxx_WritePage+0x17c>)
 8004e2a:	f003 fb79 	bl	8008520 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8004e2e:	f7ff fd83 	bl	8004938 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004e32:	f002 fc5d 	bl	80076f0 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e018      	b.n	8004e76 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f003 0307 	and.w	r3, r3, #7
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d108      	bne.n	8004e60 <W25qxx_WritePage+0x12c>
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d905      	bls.n	8004e60 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8004e54:	4818      	ldr	r0, [pc, #96]	; (8004eb8 <W25qxx_WritePage+0x184>)
 8004e56:	f011 fd93 	bl	8016980 <puts>
			W25qxx_Delay(10);
 8004e5a:	200a      	movs	r0, #10
 8004e5c:	f00c f924 	bl	80110a8 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4413      	add	r3, r2
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4814      	ldr	r0, [pc, #80]	; (8004ebc <W25qxx_WritePage+0x188>)
 8004e6c:	f011 fd02 	bl	8016874 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	3301      	adds	r3, #1
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d3e2      	bcc.n	8004e44 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8004e7e:	480e      	ldr	r0, [pc, #56]	; (8004eb8 <W25qxx_WritePage+0x184>)
 8004e80:	f011 fd7e 	bl	8016980 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8004e84:	6939      	ldr	r1, [r7, #16]
 8004e86:	480e      	ldr	r0, [pc, #56]	; (8004ec0 <W25qxx_WritePage+0x18c>)
 8004e88:	f011 fcf4 	bl	8016874 <iprintf>
	W25qxx_Delay(100);
 8004e8c:	2064      	movs	r0, #100	; 0x64
 8004e8e:	f00c f90b 	bl	80110a8 <osDelay>
#endif
	W25qxx_Delay(1);
 8004e92:	2001      	movs	r0, #1
 8004e94:	f00c f908 	bl	80110a8 <osDelay>
	w25qxx.Lock = 0;
 8004e98:	4b03      	ldr	r3, [pc, #12]	; (8004ea8 <W25qxx_WritePage+0x174>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004ea0:	bf00      	nop
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	2000725c 	.word	0x2000725c
 8004eac:	0801b6f0 	.word	0x0801b6f0
 8004eb0:	40020c00 	.word	0x40020c00
 8004eb4:	2000632c 	.word	0x2000632c
 8004eb8:	0801b72c 	.word	0x0801b72c
 8004ebc:	0801b730 	.word	0x0801b730
 8004ec0:	0801b738 	.word	0x0801b738

08004ec4 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004ed2:	4b36      	ldr	r3, [pc, #216]	; (8004fac <W25qxx_WriteSector+0xe8>)
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d802      	bhi.n	8004ee2 <W25qxx_WriteSector+0x1e>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004ee2:	4b32      	ldr	r3, [pc, #200]	; (8004fac <W25qxx_WriteSector+0xe8>)
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	4830      	ldr	r0, [pc, #192]	; (8004fb0 <W25qxx_WriteSector+0xec>)
 8004ef0:	f011 fcc0 	bl	8016874 <iprintf>
	W25qxx_Delay(100);
 8004ef4:	2064      	movs	r0, #100	; 0x64
 8004ef6:	f00c f8d7 	bl	80110a8 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004efa:	4b2c      	ldr	r3, [pc, #176]	; (8004fac <W25qxx_WriteSector+0xe8>)
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d306      	bcc.n	8004f12 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8004f04:	482b      	ldr	r0, [pc, #172]	; (8004fb4 <W25qxx_WriteSector+0xf0>)
 8004f06:	f011 fd3b 	bl	8016980 <puts>
		W25qxx_Delay(100);
 8004f0a:	2064      	movs	r0, #100	; 0x64
 8004f0c:	f00c f8cc 	bl	80110a8 <osDelay>
#endif
		return;
 8004f10:	e048      	b.n	8004fa4 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	441a      	add	r2, r3
 8004f18:	4b24      	ldr	r3, [pc, #144]	; (8004fac <W25qxx_WriteSector+0xe8>)
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d905      	bls.n	8004f2c <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004f20:	4b22      	ldr	r3, [pc, #136]	; (8004fac <W25qxx_WriteSector+0xe8>)
 8004f22:	691a      	ldr	r2, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	e001      	b.n	8004f30 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004f30:	68b8      	ldr	r0, [r7, #8]
 8004f32:	f7ff fee9 	bl	8004d08 <W25qxx_SectorToPage>
 8004f36:	4602      	mov	r2, r0
 8004f38:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <W25qxx_WriteSector+0xe8>)
 8004f3a:	895b      	ldrh	r3, [r3, #10]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f44:	4413      	add	r3, r2
 8004f46:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004f48:	4b18      	ldr	r3, [pc, #96]	; (8004fac <W25qxx_WriteSector+0xe8>)
 8004f4a:	895b      	ldrh	r3, [r3, #10]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f54:	fb02 f201 	mul.w	r2, r2, r1
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	69f9      	ldr	r1, [r7, #28]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7ff fee6 	bl	8004d34 <W25qxx_WritePage>
		StartPage++;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8004f6e:	4b0f      	ldr	r3, [pc, #60]	; (8004fac <W25qxx_WriteSector+0xe8>)
 8004f70:	895b      	ldrh	r3, [r3, #10]
 8004f72:	461a      	mov	r2, r3
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	1a9a      	subs	r2, r3, r2
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <W25qxx_WriteSector+0xe8>)
 8004f80:	895b      	ldrh	r3, [r3, #10]
 8004f82:	461a      	mov	r2, r3
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	dce1      	bgt.n	8004f5c <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8004f98:	4807      	ldr	r0, [pc, #28]	; (8004fb8 <W25qxx_WriteSector+0xf4>)
 8004f9a:	f011 fcf1 	bl	8016980 <puts>
	W25qxx_Delay(100);
 8004f9e:	2064      	movs	r0, #100	; 0x64
 8004fa0:	f00c f882 	bl	80110a8 <osDelay>
#endif
}
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	2000725c 	.word	0x2000725c
 8004fb0:	0801b75c 	.word	0x0801b75c
 8004fb4:	0801b79c 	.word	0x0801b79c
 8004fb8:	0801b7bc 	.word	0x0801b7bc

08004fbc <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004fca:	e002      	b.n	8004fd2 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004fcc:	2001      	movs	r0, #1
 8004fce:	f00c f86b 	bl	80110a8 <osDelay>
	while (w25qxx.Lock == 1)
 8004fd2:	4b54      	ldr	r3, [pc, #336]	; (8005124 <W25qxx_ReadPage+0x168>)
 8004fd4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d0f7      	beq.n	8004fcc <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004fdc:	4b51      	ldr	r3, [pc, #324]	; (8005124 <W25qxx_ReadPage+0x168>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004fe4:	4b4f      	ldr	r3, [pc, #316]	; (8005124 <W25qxx_ReadPage+0x168>)
 8004fe6:	895b      	ldrh	r3, [r3, #10]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d802      	bhi.n	8004ff6 <W25qxx_ReadPage+0x3a>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004ff6:	4b4b      	ldr	r3, [pc, #300]	; (8005124 <W25qxx_ReadPage+0x168>)
 8004ff8:	895b      	ldrh	r3, [r3, #10]
 8004ffa:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	4413      	add	r3, r2
 8005002:	4a48      	ldr	r2, [pc, #288]	; (8005124 <W25qxx_ReadPage+0x168>)
 8005004:	8952      	ldrh	r2, [r2, #10]
 8005006:	4293      	cmp	r3, r2
 8005008:	d905      	bls.n	8005016 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800500a:	4b46      	ldr	r3, [pc, #280]	; (8005124 <W25qxx_ReadPage+0x168>)
 800500c:	895b      	ldrh	r3, [r3, #10]
 800500e:	461a      	mov	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	4842      	ldr	r0, [pc, #264]	; (8005128 <W25qxx_ReadPage+0x16c>)
 800501e:	f011 fc29 	bl	8016874 <iprintf>
	W25qxx_Delay(100);
 8005022:	2064      	movs	r0, #100	; 0x64
 8005024:	f00c f840 	bl	80110a8 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8005028:	f002 fb62 	bl	80076f0 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 800502e:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <W25qxx_ReadPage+0x168>)
 8005030:	895b      	ldrh	r3, [r3, #10]
 8005032:	461a      	mov	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	fb03 f302 	mul.w	r3, r3, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	4413      	add	r3, r2
 800503e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005040:	2200      	movs	r2, #0
 8005042:	2140      	movs	r1, #64	; 0x40
 8005044:	4839      	ldr	r0, [pc, #228]	; (800512c <W25qxx_ReadPage+0x170>)
 8005046:	f003 fa6b 	bl	8008520 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800504a:	4b36      	ldr	r3, [pc, #216]	; (8005124 <W25qxx_ReadPage+0x168>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b08      	cmp	r3, #8
 8005050:	d909      	bls.n	8005066 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8005052:	200c      	movs	r0, #12
 8005054:	f7ff fb92 	bl	800477c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	0e1b      	lsrs	r3, r3, #24
 800505c:	b2db      	uxtb	r3, r3
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fb8c 	bl	800477c <W25qxx_Spi>
 8005064:	e002      	b.n	800506c <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8005066:	200b      	movs	r0, #11
 8005068:	f7ff fb88 	bl	800477c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	0c1b      	lsrs	r3, r3, #16
 8005070:	b2db      	uxtb	r3, r3
 8005072:	4618      	mov	r0, r3
 8005074:	f7ff fb82 	bl	800477c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	0a1b      	lsrs	r3, r3, #8
 800507c:	b2db      	uxtb	r3, r3
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fb7c 	bl	800477c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff fb77 	bl	800477c <W25qxx_Spi>
	W25qxx_Spi(0);
 800508e:	2000      	movs	r0, #0
 8005090:	f7ff fb74 	bl	800477c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	b29a      	uxth	r2, r3
 8005098:	2364      	movs	r3, #100	; 0x64
 800509a:	68f9      	ldr	r1, [r7, #12]
 800509c:	4824      	ldr	r0, [pc, #144]	; (8005130 <W25qxx_ReadPage+0x174>)
 800509e:	f006 fa06 	bl	800b4ae <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80050a2:	2201      	movs	r2, #1
 80050a4:	2140      	movs	r1, #64	; 0x40
 80050a6:	4821      	ldr	r0, [pc, #132]	; (800512c <W25qxx_ReadPage+0x170>)
 80050a8:	f003 fa3a 	bl	8008520 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80050ac:	f002 fb20 	bl	80076f0 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e018      	b.n	80050f0 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d108      	bne.n	80050da <W25qxx_ReadPage+0x11e>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d905      	bls.n	80050da <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 80050ce:	4819      	ldr	r0, [pc, #100]	; (8005134 <W25qxx_ReadPage+0x178>)
 80050d0:	f011 fc56 	bl	8016980 <puts>
			W25qxx_Delay(10);
 80050d4:	200a      	movs	r0, #10
 80050d6:	f00b ffe7 	bl	80110a8 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	4413      	add	r3, r2
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	4619      	mov	r1, r3
 80050e4:	4814      	ldr	r0, [pc, #80]	; (8005138 <W25qxx_ReadPage+0x17c>)
 80050e6:	f011 fbc5 	bl	8016874 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	3301      	adds	r3, #1
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d3e2      	bcc.n	80050be <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 80050f8:	480e      	ldr	r0, [pc, #56]	; (8005134 <W25qxx_ReadPage+0x178>)
 80050fa:	f011 fc41 	bl	8016980 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 80050fe:	6939      	ldr	r1, [r7, #16]
 8005100:	480e      	ldr	r0, [pc, #56]	; (800513c <W25qxx_ReadPage+0x180>)
 8005102:	f011 fbb7 	bl	8016874 <iprintf>
	W25qxx_Delay(100);
 8005106:	2064      	movs	r0, #100	; 0x64
 8005108:	f00b ffce 	bl	80110a8 <osDelay>
#endif
	W25qxx_Delay(1);
 800510c:	2001      	movs	r0, #1
 800510e:	f00b ffcb 	bl	80110a8 <osDelay>
	w25qxx.Lock = 0;
 8005112:	4b04      	ldr	r3, [pc, #16]	; (8005124 <W25qxx_ReadPage+0x168>)
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 800511a:	bf00      	nop
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	2000725c 	.word	0x2000725c
 8005128:	0801b908 	.word	0x0801b908
 800512c:	40020c00 	.word	0x40020c00
 8005130:	2000632c 	.word	0x2000632c
 8005134:	0801b72c 	.word	0x0801b72c
 8005138:	0801b730 	.word	0x0801b730
 800513c:	0801b944 	.word	0x0801b944

08005140 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 800514e:	4b36      	ldr	r3, [pc, #216]	; (8005228 <W25qxx_ReadSector+0xe8>)
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d802      	bhi.n	800515e <W25qxx_ReadSector+0x1e>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 800515e:	4b32      	ldr	r3, [pc, #200]	; (8005228 <W25qxx_ReadSector+0xe8>)
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	4830      	ldr	r0, [pc, #192]	; (800522c <W25qxx_ReadSector+0xec>)
 800516c:	f011 fb82 	bl	8016874 <iprintf>
	W25qxx_Delay(100);
 8005170:	2064      	movs	r0, #100	; 0x64
 8005172:	f00b ff99 	bl	80110a8 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8005176:	4b2c      	ldr	r3, [pc, #176]	; (8005228 <W25qxx_ReadSector+0xe8>)
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d306      	bcc.n	800518e <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8005180:	482b      	ldr	r0, [pc, #172]	; (8005230 <W25qxx_ReadSector+0xf0>)
 8005182:	f011 fbfd 	bl	8016980 <puts>
		W25qxx_Delay(100);
 8005186:	2064      	movs	r0, #100	; 0x64
 8005188:	f00b ff8e 	bl	80110a8 <osDelay>
#endif
		return;
 800518c:	e048      	b.n	8005220 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	441a      	add	r2, r3
 8005194:	4b24      	ldr	r3, [pc, #144]	; (8005228 <W25qxx_ReadSector+0xe8>)
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	429a      	cmp	r2, r3
 800519a:	d905      	bls.n	80051a8 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 800519c:	4b22      	ldr	r3, [pc, #136]	; (8005228 <W25qxx_ReadSector+0xe8>)
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	e001      	b.n	80051ac <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80051ac:	68b8      	ldr	r0, [r7, #8]
 80051ae:	f7ff fdab 	bl	8004d08 <W25qxx_SectorToPage>
 80051b2:	4602      	mov	r2, r0
 80051b4:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <W25qxx_ReadSector+0xe8>)
 80051b6:	895b      	ldrh	r3, [r3, #10]
 80051b8:	4619      	mov	r1, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80051c0:	4413      	add	r3, r2
 80051c2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80051c4:	4b18      	ldr	r3, [pc, #96]	; (8005228 <W25qxx_ReadSector+0xe8>)
 80051c6:	895b      	ldrh	r3, [r3, #10]
 80051c8:	461a      	mov	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80051d0:	fb02 f201 	mul.w	r2, r2, r1
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	69f9      	ldr	r1, [r7, #28]
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff feec 	bl	8004fbc <W25qxx_ReadPage>
		StartPage++;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	3301      	adds	r3, #1
 80051e8:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 80051ea:	4b0f      	ldr	r3, [pc, #60]	; (8005228 <W25qxx_ReadSector+0xe8>)
 80051ec:	895b      	ldrh	r3, [r3, #10]
 80051ee:	461a      	mov	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	1a9a      	subs	r2, r3, r2
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	4413      	add	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80051fa:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <W25qxx_ReadSector+0xe8>)
 80051fc:	895b      	ldrh	r3, [r3, #10]
 80051fe:	461a      	mov	r2, r3
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	dce1      	bgt.n	80051d8 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8005214:	4807      	ldr	r0, [pc, #28]	; (8005234 <W25qxx_ReadSector+0xf4>)
 8005216:	f011 fbb3 	bl	8016980 <puts>
	W25qxx_Delay(100);
 800521a:	2064      	movs	r0, #100	; 0x64
 800521c:	f00b ff44 	bl	80110a8 <osDelay>
#endif
}
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	2000725c 	.word	0x2000725c
 800522c:	0801b968 	.word	0x0801b968
 8005230:	0801b9a8 	.word	0x0801b9a8
 8005234:	0801b9c8 	.word	0x0801b9c8

08005238 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 800523e:	2300      	movs	r3, #0
 8005240:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8005242:	2200      	movs	r2, #0
 8005244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005248:	483b      	ldr	r0, [pc, #236]	; (8005338 <Max31855_Read_Temp+0x100>)
 800524a:	f003 f969 	bl	8008520 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 800524e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005252:	2204      	movs	r2, #4
 8005254:	4939      	ldr	r1, [pc, #228]	; (800533c <Max31855_Read_Temp+0x104>)
 8005256:	483a      	ldr	r0, [pc, #232]	; (8005340 <Max31855_Read_Temp+0x108>)
 8005258:	f006 f929 	bl	800b4ae <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 800525c:	2201      	movs	r2, #1
 800525e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005262:	4835      	ldr	r0, [pc, #212]	; (8005338 <Max31855_Read_Temp+0x100>)
 8005264:	f003 f95c 	bl	8008520 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8005268:	4b34      	ldr	r3, [pc, #208]	; (800533c <Max31855_Read_Temp+0x104>)
 800526a:	78db      	ldrb	r3, [r3, #3]
 800526c:	461a      	mov	r2, r3
 800526e:	4b33      	ldr	r3, [pc, #204]	; (800533c <Max31855_Read_Temp+0x104>)
 8005270:	789b      	ldrb	r3, [r3, #2]
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	431a      	orrs	r2, r3
 8005276:	4b31      	ldr	r3, [pc, #196]	; (800533c <Max31855_Read_Temp+0x104>)
 8005278:	785b      	ldrb	r3, [r3, #1]
 800527a:	041b      	lsls	r3, r3, #16
 800527c:	431a      	orrs	r2, r3
 800527e:	4b2f      	ldr	r3, [pc, #188]	; (800533c <Max31855_Read_Temp+0x104>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	061b      	lsls	r3, r3, #24
 8005284:	4313      	orrs	r3, r2
 8005286:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4b2c      	ldr	r3, [pc, #176]	; (8005344 <Max31855_Read_Temp+0x10c>)
 8005294:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8005296:	4b29      	ldr	r3, [pc, #164]	; (800533c <Max31855_Read_Temp+0x104>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	09db      	lsrs	r3, r3, #7
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	4b29      	ldr	r3, [pc, #164]	; (8005348 <Max31855_Read_Temp+0x110>)
 80052a2:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 80052a4:	4b25      	ldr	r3, [pc, #148]	; (800533c <Max31855_Read_Temp+0x104>)
 80052a6:	78db      	ldrb	r3, [r3, #3]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d009      	beq.n	80052c4 <Max31855_Read_Temp+0x8c>
			return (-1 * (DATARX[3] & 0x07));
 80052b0:	4b22      	ldr	r3, [pc, #136]	; (800533c <Max31855_Read_Temp+0x104>)
 80052b2:	78db      	ldrb	r3, [r3, #3]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	425b      	negs	r3, r3
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c2:	e033      	b.n	800532c <Max31855_Read_Temp+0xf4>

		else if (sign == 1) {								// Negative Temperature
 80052c4:	4b20      	ldr	r3, [pc, #128]	; (8005348 <Max31855_Read_Temp+0x110>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d11d      	bne.n	8005308 <Max31855_Read_Temp+0xd0>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 80052cc:	4b1b      	ldr	r3, [pc, #108]	; (800533c <Max31855_Read_Temp+0x104>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	019b      	lsls	r3, r3, #6
 80052d2:	4a1a      	ldr	r2, [pc, #104]	; (800533c <Max31855_Read_Temp+0x104>)
 80052d4:	7852      	ldrb	r2, [r2, #1]
 80052d6:	0892      	lsrs	r2, r2, #2
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	4313      	orrs	r3, r2
 80052dc:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052e4:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 80052ec:	f083 031f 	eor.w	r3, r3, #31
 80052f0:	607b      	str	r3, [r7, #4]
			return ((float) -Temp / 4);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	425b      	negs	r3, r3
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052fe:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005302:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005306:	e011      	b.n	800532c <Max31855_Read_Temp+0xf4>
		}

		else												 // Positive Temperature
		{
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8005308:	4b0c      	ldr	r3, [pc, #48]	; (800533c <Max31855_Read_Temp+0x104>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	019b      	lsls	r3, r3, #6
 800530e:	4a0b      	ldr	r2, [pc, #44]	; (800533c <Max31855_Read_Temp+0x104>)
 8005310:	7852      	ldrb	r2, [r2, #1]
 8005312:	0892      	lsrs	r2, r2, #2
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	4313      	orrs	r3, r2
 8005318:	607b      	str	r3, [r7, #4]
			return ((float) Temp / 4.0);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	ee07 3a90 	vmov	s15, r3
 8005320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005324:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8005328:	eec7 7a26 	vdiv.f32	s15, s14, s13

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 800532c:	eeb0 0a67 	vmov.f32	s0, s15
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	40021000 	.word	0x40021000
 800533c:	20007284 	.word	0x20007284
 8005340:	20006384 	.word	0x20006384
 8005344:	20000498 	.word	0x20000498
 8005348:	2000049c 	.word	0x2000049c

0800534c <MRT_pollPropulsion>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_pollPropulsion(void){
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
	MRT_getThermoTemp();
 8005350:	f000 f806 	bl	8005360 <MRT_getThermoTemp>
	MRT_getTransducerVoltage();
 8005354:	f000 f812 	bl	800537c <MRT_getTransducerVoltage>
	MRT_getValveStatus();
 8005358:	f000 f820 	bl	800539c <MRT_getValveStatus>
}
 800535c:	bf00      	nop
 800535e:	bd80      	pop	{r7, pc}

08005360 <MRT_getThermoTemp>:

void MRT_getThermoTemp(void){
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
	thermocouple_temperature = Max31855_Read_Temp();
 8005364:	f7ff ff68 	bl	8005238 <Max31855_Read_Temp>
 8005368:	eef0 7a40 	vmov.f32	s15, s0
 800536c:	4b02      	ldr	r3, [pc, #8]	; (8005378 <MRT_getThermoTemp+0x18>)
 800536e:	edc3 7a00 	vstr	s15, [r3]
}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	200072bc 	.word	0x200072bc

0800537c <MRT_getTransducerVoltage>:

void MRT_getTransducerVoltage(void){
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
	transducer_voltage = MRT_prop_poll_pressure_transducer(&TRANSDUCER_ADC);
 8005380:	4804      	ldr	r0, [pc, #16]	; (8005394 <MRT_getTransducerVoltage+0x18>)
 8005382:	f000 f85d 	bl	8005440 <MRT_prop_poll_pressure_transducer>
 8005386:	eef0 7a40 	vmov.f32	s15, s0
 800538a:	4b03      	ldr	r3, [pc, #12]	; (8005398 <MRT_getTransducerVoltage+0x1c>)
 800538c:	edc3 7a00 	vstr	s15, [r3]
}
 8005390:	bf00      	nop
 8005392:	bd80      	pop	{r7, pc}
 8005394:	2000618c 	.word	0x2000618c
 8005398:	200072c0 	.word	0x200072c0

0800539c <MRT_getValveStatus>:

void MRT_getValveStatus(void){
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
	valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
 80053a0:	2102      	movs	r1, #2
 80053a2:	4804      	ldr	r0, [pc, #16]	; (80053b4 <MRT_getValveStatus+0x18>)
 80053a4:	f003 f8a4 	bl	80084f0 <HAL_GPIO_ReadPin>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	4b02      	ldr	r3, [pc, #8]	; (80053b8 <MRT_getValveStatus+0x1c>)
 80053ae:	701a      	strb	r2, [r3, #0]
}
 80053b0:	bf00      	nop
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40020400 	.word	0x40020400
 80053b8:	200072ba 	.word	0x200072ba

080053bc <MRT_formatPropulsion>:

// formats propulsion telemetry string using sprintf
void MRT_formatPropulsion(void) {
 80053bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053be:	b089      	sub	sp, #36	; 0x24
 80053c0:	af06      	add	r7, sp, #24
	memset(msg_buffer_pr, 0, 50);
 80053c2:	2232      	movs	r2, #50	; 0x32
 80053c4:	2100      	movs	r1, #0
 80053c6:	4816      	ldr	r0, [pc, #88]	; (8005420 <MRT_formatPropulsion+0x64>)
 80053c8:	f010 fb28 	bl	8015a1c <memset>
	//tank_pressure = convert_prop_tank_pressure(); // convert buffered readings to voltage TODO??
	sprintf(msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 80053cc:	4b15      	ldr	r3, [pc, #84]	; (8005424 <MRT_formatPropulsion+0x68>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fb f8c9 	bl	8000568 <__aeabi_f2d>
 80053d6:	4604      	mov	r4, r0
 80053d8:	460d      	mov	r5, r1
 80053da:	4b13      	ldr	r3, [pc, #76]	; (8005428 <MRT_formatPropulsion+0x6c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fb f8c2 	bl	8000568 <__aeabi_f2d>
 80053e4:	4602      	mov	r2, r0
 80053e6:	460b      	mov	r3, r1
 80053e8:	4910      	ldr	r1, [pc, #64]	; (800542c <MRT_formatPropulsion+0x70>)
 80053ea:	7809      	ldrb	r1, [r1, #0]
 80053ec:	4608      	mov	r0, r1
 80053ee:	4910      	ldr	r1, [pc, #64]	; (8005430 <MRT_formatPropulsion+0x74>)
 80053f0:	7809      	ldrb	r1, [r1, #0]
 80053f2:	460e      	mov	r6, r1
 80053f4:	490f      	ldr	r1, [pc, #60]	; (8005434 <MRT_formatPropulsion+0x78>)
 80053f6:	7809      	ldrb	r1, [r1, #0]
 80053f8:	6079      	str	r1, [r7, #4]
 80053fa:	490f      	ldr	r1, [pc, #60]	; (8005438 <MRT_formatPropulsion+0x7c>)
 80053fc:	6809      	ldr	r1, [r1, #0]
 80053fe:	9105      	str	r1, [sp, #20]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	9104      	str	r1, [sp, #16]
 8005404:	9603      	str	r6, [sp, #12]
 8005406:	9002      	str	r0, [sp, #8]
 8005408:	e9cd 2300 	strd	r2, r3, [sp]
 800540c:	4622      	mov	r2, r4
 800540e:	462b      	mov	r3, r5
 8005410:	490a      	ldr	r1, [pc, #40]	; (800543c <MRT_formatPropulsion+0x80>)
 8005412:	4803      	ldr	r0, [pc, #12]	; (8005420 <MRT_formatPropulsion+0x64>)
 8005414:	f011 fb80 	bl	8016b18 <siprintf>
			transducer_voltage, thermocouple_temperature, valve_status,
			prev_min, prev_sec, prev_subsec);
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005420:	20007288 	.word	0x20007288
 8005424:	200072c0 	.word	0x200072c0
 8005428:	200072bc 	.word	0x200072bc
 800542c:	200072ba 	.word	0x200072ba
 8005430:	2000037a 	.word	0x2000037a
 8005434:	2000037b 	.word	0x2000037b
 8005438:	2000037c 	.word	0x2000037c
 800543c:	0801ba5c 	.word	0x0801ba5c

08005440 <MRT_prop_poll_pressure_transducer>:
//PRIVATE FUNCTIONS

/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f002 f9c5 	bl	80077d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 800544e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f002 fac5 	bl	80079e2 <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f002 fb4d 	bl	8007af8 <HAL_ADC_GetValue>
 800545e:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f002 fa8b 	bl	800797c <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f7fb f85c 	bl	8000524 <__aeabi_ui2d>
 800546c:	a312      	add	r3, pc, #72	; (adr r3, 80054b8 <MRT_prop_poll_pressure_transducer+0x78>)
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	f7fb f9fb 	bl	800086c <__aeabi_ddiv>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4610      	mov	r0, r2
 800547c:	4619      	mov	r1, r3
 800547e:	f7fb fbc3 	bl	8000c08 <__aeabi_d2f>
 8005482:	4603      	mov	r3, r0
 8005484:	4618      	mov	r0, r3
 8005486:	f7fb f86f 	bl	8000568 <__aeabi_f2d>
 800548a:	a30d      	add	r3, pc, #52	; (adr r3, 80054c0 <MRT_prop_poll_pressure_transducer+0x80>)
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	f7fb f8c2 	bl	8000618 <__aeabi_dmul>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4610      	mov	r0, r2
 800549a:	4619      	mov	r1, r3
 800549c:	f7fb fbb4 	bl	8000c08 <__aeabi_d2f>
 80054a0:	4603      	mov	r3, r0
 80054a2:	60bb      	str	r3, [r7, #8]

	return voltage;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	ee07 3a90 	vmov	s15, r3
}
 80054aa:	eeb0 0a67 	vmov.f32	s0, s15
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	f3af 8000 	nop.w
 80054b8:	00000000 	.word	0x00000000
 80054bc:	40affe00 	.word	0x40affe00
 80054c0:	66666666 	.word	0x66666666
 80054c4:	400a6666 	.word	0x400a6666

080054c8 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 80054c8:	b598      	push	{r3, r4, r7, lr}
 80054ca:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 80054cc:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <MRT_LSM6DSR_Constructor+0x28>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10b      	bne.n	80054ec <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 80054d4:	203c      	movs	r0, #60	; 0x3c
 80054d6:	f00f f961 	bl	801479c <_Znwj>
 80054da:	4603      	mov	r3, r0
 80054dc:	461c      	mov	r4, r3
 80054de:	226a      	movs	r2, #106	; 0x6a
 80054e0:	4904      	ldr	r1, [pc, #16]	; (80054f4 <MRT_LSM6DSR_Constructor+0x2c>)
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 f99c 	bl	8005820 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 80054e8:	4b01      	ldr	r3, [pc, #4]	; (80054f0 <MRT_LSM6DSR_Constructor+0x28>)
 80054ea:	601c      	str	r4, [r3, #0]
	}
}
 80054ec:	bf00      	nop
 80054ee:	bd98      	pop	{r3, r4, r7, pc}
 80054f0:	200004a0 	.word	0x200004a0
 80054f4:	20006200 	.word	0x20006200

080054f8 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <MRT_LSM6DSR_Destructor+0x1c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 8005504:	4b03      	ldr	r3, [pc, #12]	; (8005514 <MRT_LSM6DSR_Destructor+0x1c>)
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
	}
}
 800550a:	bf00      	nop
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	200004a0 	.word	0x200004a0

08005518 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAcceleration();
 800551e:	4b0b      	ldr	r3, [pc, #44]	; (800554c <MRT_LSM6DSR_getAcceleration+0x34>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fa22 	bl	800596c <_ZN7LSM6DSR15getAccelerationEv>
 8005528:	6078      	str	r0, [r7, #4]
	hlsm6dsr.acceleration_mg[0] = temp_array[0];
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a08      	ldr	r2, [pc, #32]	; (8005550 <MRT_LSM6DSR_getAcceleration+0x38>)
 8005530:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = temp_array[1];
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	4a06      	ldr	r2, [pc, #24]	; (8005550 <MRT_LSM6DSR_getAcceleration+0x38>)
 8005538:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = temp_array[2];
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	4a04      	ldr	r2, [pc, #16]	; (8005550 <MRT_LSM6DSR_getAcceleration+0x38>)
 8005540:	6093      	str	r3, [r2, #8]
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	200004a0 	.word	0x200004a0
 8005550:	200004a8 	.word	0x200004a8

08005554 <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAngularRate();
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <MRT_LSM6DSR_getAngularRate+0x34>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fa82 	bl	8005a68 <_ZN7LSM6DSR14getAngularRateEv>
 8005564:	6078      	str	r0, [r7, #4]
	hlsm6dsr.angular_rate_mdps[0] = temp_array[0];
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a08      	ldr	r2, [pc, #32]	; (800558c <MRT_LSM6DSR_getAngularRate+0x38>)
 800556c:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = temp_array[1];
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4a06      	ldr	r2, [pc, #24]	; (800558c <MRT_LSM6DSR_getAngularRate+0x38>)
 8005574:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = temp_array[2];
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	4a04      	ldr	r2, [pc, #16]	; (800558c <MRT_LSM6DSR_getAngularRate+0x38>)
 800557c:	6153      	str	r3, [r2, #20]
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	200004a0 	.word	0x200004a0
 800558c:	200004a8 	.word	0x200004a8

08005590 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <MRT_LSM6DSR_getTemperature+0x1c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fa2f 	bl	80059fc <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 800559e:	4b03      	ldr	r3, [pc, #12]	; (80055ac <MRT_LSM6DSR_getTemperature+0x1c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	4a02      	ldr	r2, [pc, #8]	; (80055b0 <MRT_LSM6DSR_getTemperature+0x20>)
 80055a6:	6193      	str	r3, [r2, #24]
}
 80055a8:	bf00      	nop
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	200004a0 	.word	0x200004a0
 80055b0:	200004a8 	.word	0x200004a8

080055b4 <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 80055b8:	f7ff ffae 	bl	8005518 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 80055bc:	f7ff ffca 	bl	8005554 <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 80055c0:	f7ff ffe6 	bl	8005590 <MRT_LSM6DSR_getTemperature>
}
 80055c4:	bf00      	nop
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 80055c8:	b598      	push	{r3, r4, r7, lr}
 80055ca:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 80055cc:	4b08      	ldr	r3, [pc, #32]	; (80055f0 <MRT_LPS22HH_Constructor+0x28>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10b      	bne.n	80055ec <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 80055d4:	2020      	movs	r0, #32
 80055d6:	f00f f8e1 	bl	801479c <_Znwj>
 80055da:	4603      	mov	r3, r0
 80055dc:	461c      	mov	r4, r3
 80055de:	22b3      	movs	r2, #179	; 0xb3
 80055e0:	4904      	ldr	r1, [pc, #16]	; (80055f4 <MRT_LPS22HH_Constructor+0x2c>)
 80055e2:	4620      	mov	r0, r4
 80055e4:	f000 fac4 	bl	8005b70 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 80055e8:	4b01      	ldr	r3, [pc, #4]	; (80055f0 <MRT_LPS22HH_Constructor+0x28>)
 80055ea:	601c      	str	r4, [r3, #0]
	}
}
 80055ec:	bf00      	nop
 80055ee:	bd98      	pop	{r3, r4, r7, pc}
 80055f0:	200004a4 	.word	0x200004a4
 80055f4:	20006200 	.word	0x20006200

080055f8 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <MRT_LPS22HH_Destructor+0x1c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <MRT_LPS22HH_Destructor+0x1c>)
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
	}
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	200004a4 	.word	0x200004a4

08005618 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 8005618:	b580      	push	{r7, lr}
 800561a:	af00      	add	r7, sp, #0
	hlps22hh.pressure_hPa = lps22hh->getPressure();
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <MRT_LPS22HH_getPressure+0x1c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fb27 	bl	8005c74 <_ZN7LPS22HH11getPressureEv>
 8005626:	eef0 7a40 	vmov.f32	s15, s0
 800562a:	4b03      	ldr	r3, [pc, #12]	; (8005638 <MRT_LPS22HH_getPressure+0x20>)
 800562c:	edc3 7a00 	vstr	s15, [r3]
}
 8005630:	bf00      	nop
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200004a4 	.word	0x200004a4
 8005638:	200004d4 	.word	0x200004d4

0800563c <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
	hlps22hh.temperature_degC = lps22hh->getTemperature();
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <MRT_LPS22HH_getTemperature+0x1c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f000 fb49 	bl	8005cdc <_ZN7LPS22HH14getTemperatureEv>
 800564a:	eef0 7a40 	vmov.f32	s15, s0
 800564e:	4b03      	ldr	r3, [pc, #12]	; (800565c <MRT_LPS22HH_getTemperature+0x20>)
 8005650:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8005654:	bf00      	nop
 8005656:	bd80      	pop	{r7, pc}
 8005658:	200004a4 	.word	0x200004a4
 800565c:	200004d4 	.word	0x200004d4

08005660 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 8005664:	f7ff ffd8 	bl	8005618 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 8005668:	f7ff ffe8 	bl	800563c <MRT_LPS22HH_getTemperature>
}
 800566c:	bf00      	nop
 800566e:	bd80      	pop	{r7, pc}

08005670 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 8005674:	4a03      	ldr	r2, [pc, #12]	; (8005684 <MRT_GPS_pollAll+0x14>)
 8005676:	4904      	ldr	r1, [pc, #16]	; (8005688 <MRT_GPS_pollAll+0x18>)
 8005678:	4804      	ldr	r0, [pc, #16]	; (800568c <MRT_GPS_pollAll+0x1c>)
 800567a:	f000 fb9f 	bl	8005dbc <GPS_Poll>
}
 800567e:	bf00      	nop
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	200004f0 	.word	0x200004f0
 8005688:	200004ec 	.word	0x200004ec
 800568c:	200004e8 	.word	0x200004e8

08005690 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8005698:	f7ff ff16 	bl	80054c8 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a16      	ldr	r2, [pc, #88]	; (80056f8 <MRT_LSM6DSR_Init+0x68>)
 80056a0:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a15      	ldr	r2, [pc, #84]	; (80056fc <MRT_LSM6DSR_Init+0x6c>)
 80056a6:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a15      	ldr	r2, [pc, #84]	; (8005700 <MRT_LSM6DSR_Init+0x70>)
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a14      	ldr	r2, [pc, #80]	; (8005704 <MRT_LSM6DSR_Init+0x74>)
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28

	lsm6dsr_handler.acceleration_mg[0] = 0;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = 0;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f04f 0200 	mov.w	r2, #0
 80056c2:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = 0;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f04f 0200 	mov.w	r2, #0
 80056ca:	609a      	str	r2, [r3, #8]
	lsm6dsr_handler.angular_rate_mdps[0] = 0;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = 0;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = 0;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	615a      	str	r2, [r3, #20]
	lsm6dsr_handler.temperature_degC = 0;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 80056ec:	bf00      	nop
}
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	08005519 	.word	0x08005519
 80056fc:	08005555 	.word	0x08005555
 8005700:	08005591 	.word	0x08005591
 8005704:	080055b5 	.word	0x080055b5

08005708 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 8005710:	f7ff ff5a 	bl	80055c8 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <MRT_LPS22HH_Init+0x38>)
 8005718:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a09      	ldr	r2, [pc, #36]	; (8005744 <MRT_LPS22HH_Init+0x3c>)
 800571e:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a09      	ldr	r2, [pc, #36]	; (8005748 <MRT_LPS22HH_Init+0x40>)
 8005724:	611a      	str	r2, [r3, #16]

	lps22hh_handler.pressure_hPa = 0;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = 0;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 8005736:	bf00      	nop
}
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	08005619 	.word	0x08005619
 8005744:	0800563d 	.word	0x0800563d
 8005748:	08005661 	.word	0x08005661

0800574c <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a0c      	ldr	r2, [pc, #48]	; (8005788 <MRT_GPS_Init+0x3c>)
 8005758:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 800575a:	4a0c      	ldr	r2, [pc, #48]	; (800578c <MRT_GPS_Init+0x40>)
 800575c:	490c      	ldr	r1, [pc, #48]	; (8005790 <MRT_GPS_Init+0x44>)
 800575e:	480d      	ldr	r0, [pc, #52]	; (8005794 <MRT_GPS_Init+0x48>)
 8005760:	f000 fd8c 	bl	800627c <GPS_Init>
	gps_handler.latitude = 0;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
	gps_handler.longitude = 0;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f04f 0200 	mov.w	r2, #0
 8005772:	605a      	str	r2, [r3, #4]
	gps_handler.time = 0;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	609a      	str	r2, [r3, #8]
	return gps_handler;
 800577c:	bf00      	nop
}
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	08005671 	.word	0x08005671
 800578c:	08001075 	.word	0x08001075
 8005790:	08001049 	.word	0x08001049
 8005794:	200064f4 	.word	0x200064f4

08005798 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8005798:	b5b0      	push	{r4, r5, r7, lr}
 800579a:	b08c      	sub	sp, #48	; 0x30
 800579c:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
 800579e:	4818      	ldr	r0, [pc, #96]	; (8005800 <MRT_i2c_sensors_Init+0x68>)
 80057a0:	f003 ffa2 	bl	80096e8 <HAL_IWDG_Refresh>
	hlsm6dsr = MRT_LSM6DSR_Init();
 80057a4:	4c17      	ldr	r4, [pc, #92]	; (8005804 <MRT_i2c_sensors_Init+0x6c>)
 80057a6:	463b      	mov	r3, r7
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff ff71 	bl	8005690 <MRT_LSM6DSR_Init>
 80057ae:	4625      	mov	r5, r4
 80057b0:	463c      	mov	r4, r7
 80057b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057ba:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80057be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
 80057c2:	480f      	ldr	r0, [pc, #60]	; (8005800 <MRT_i2c_sensors_Init+0x68>)
 80057c4:	f003 ff90 	bl	80096e8 <HAL_IWDG_Refresh>
	hlps22hh = MRT_LPS22HH_Init();
 80057c8:	4c0f      	ldr	r4, [pc, #60]	; (8005808 <MRT_i2c_sensors_Init+0x70>)
 80057ca:	463b      	mov	r3, r7
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff ff9b 	bl	8005708 <MRT_LPS22HH_Init>
 80057d2:	4625      	mov	r5, r4
 80057d4:	463c      	mov	r4, r7
 80057d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
 80057de:	4808      	ldr	r0, [pc, #32]	; (8005800 <MRT_i2c_sensors_Init+0x68>)
 80057e0:	f003 ff82 	bl	80096e8 <HAL_IWDG_Refresh>
	hgps = MRT_GPS_Init();
 80057e4:	4c09      	ldr	r4, [pc, #36]	; (800580c <MRT_i2c_sensors_Init+0x74>)
 80057e6:	463b      	mov	r3, r7
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff ffaf 	bl	800574c <MRT_GPS_Init>
 80057ee:	463b      	mov	r3, r7
 80057f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 80057f6:	bf00      	nop
 80057f8:	3730      	adds	r7, #48	; 0x30
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bdb0      	pop	{r4, r5, r7, pc}
 80057fe:	bf00      	nop
 8005800:	200062a8 	.word	0x200062a8
 8005804:	200004a8 	.word	0x200004a8
 8005808:	200004d4 	.word	0x200004d4
 800580c:	200004e8 	.word	0x200004e8

08005810 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 8005814:	f7ff fe70 	bl	80054f8 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 8005818:	f7ff feee 	bl	80055f8 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 800581c:	bf00      	nop
 800581e:	bd80      	pop	{r7, pc}

08005820 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	4613      	mov	r3, r2
 800582c:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 800582e:	4846      	ldr	r0, [pc, #280]	; (8005948 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x128>)
 8005830:	f7fb fbec 	bl	800100c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4a45      	ldr	r2, [pc, #276]	; (800594c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x12c>)
 8005838:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	4a44      	ldr	r2, [pc, #272]	; (8005950 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 800583e:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 8005846:	2064      	movs	r0, #100	; 0x64
 8005848:	f001 ff5e 	bl	8007708 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f103 021c 	add.w	r2, r3, #28
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3338      	adds	r3, #56	; 0x38
 8005856:	4619      	mov	r1, r3
 8005858:	4610      	mov	r0, r2
 800585a:	f001 fae5 	bl	8006e28 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 800585e:	483d      	ldr	r0, [pc, #244]	; (8005954 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 8005860:	f7fb fbf2 	bl	8001048 <print>
	if (whoamI != address){
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800586a:	79fa      	ldrb	r2, [r7, #7]
 800586c:	429a      	cmp	r2, r3
 800586e:	d014      	beq.n	800589a <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x7a>
	  println((char*) "NOT OK");
 8005870:	4839      	ldr	r0, [pc, #228]	; (8005958 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 8005872:	f7fb fbcb 	bl	800100c <println>
	  print((char*) "\tThis Device is: ");
 8005876:	4839      	ldr	r0, [pc, #228]	; (800595c <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 8005878:	f7fb fbe6 	bl	8001048 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005882:	461a      	mov	r2, r3
 8005884:	f107 0314 	add.w	r3, r7, #20
 8005888:	4935      	ldr	r1, [pc, #212]	; (8005960 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 800588a:	4618      	mov	r0, r3
 800588c:	f011 f944 	bl	8016b18 <siprintf>
	  print(buffer);
 8005890:	f107 0314 	add.w	r3, r7, #20
 8005894:	4618      	mov	r0, r3
 8005896:	f7fb fbd7 	bl	8001048 <print>
		HAL_PWR_EnterSTANDBYMode();
		*/


	}
	println((char*) "OK");
 800589a:	4832      	ldr	r0, [pc, #200]	; (8005964 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 800589c:	f7fb fbb6 	bl	800100c <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 80058a0:	4831      	ldr	r0, [pc, #196]	; (8005968 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 80058a2:	f7fb fbd1 	bl	8001048 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	331c      	adds	r3, #28
 80058aa:	2101      	movs	r1, #1
 80058ac:	4618      	mov	r0, r3
 80058ae:	f001 facc 	bl	8006e4a <lsm6dsr_reset_set>
	HAL_Delay(500);
 80058b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058b6:	f001 ff27 	bl	8007708 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f103 021c 	add.w	r2, r3, #28
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	3339      	adds	r3, #57	; 0x39
 80058c4:	4619      	mov	r1, r3
 80058c6:	4610      	mov	r0, r2
 80058c8:	f001 fae5 	bl	8006e96 <lsm6dsr_reset_get>
	} while (rst);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d000      	beq.n	80058d8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xb8>
	do {
 80058d6:	e7f0      	b.n	80058ba <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x9a>
	println((char*) "OK");
 80058d8:	4822      	ldr	r0, [pc, #136]	; (8005964 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 80058da:	f7fb fb97 	bl	800100c <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	331c      	adds	r3, #28
 80058e2:	2180      	movs	r1, #128	; 0x80
 80058e4:	4618      	mov	r0, r3
 80058e6:	f001 fb4d 	bl	8006f84 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	331c      	adds	r3, #28
 80058ee:	2101      	movs	r1, #1
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 f949 	bl	8006b88 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	331c      	adds	r3, #28
 80058fa:	2101      	movs	r1, #1
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 ff25 	bl	800674c <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	331c      	adds	r3, #28
 8005906:	2101      	movs	r1, #1
 8005908:	4618      	mov	r0, r3
 800590a:	f001 f841 	bl	8006990 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	331c      	adds	r3, #28
 8005912:	2100      	movs	r1, #0
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fef3 	bl	8006700 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	331c      	adds	r3, #28
 800591e:	210c      	movs	r1, #12
 8005920:	4618      	mov	r0, r3
 8005922:	f001 f80f 	bl	8006944 <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	331c      	adds	r3, #28
 800592a:	2104      	movs	r1, #4
 800592c:	4618      	mov	r0, r3
 800592e:	f001 faf1 	bl	8006f14 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	331c      	adds	r3, #28
 8005936:	2101      	movs	r1, #1
 8005938:	4618      	mov	r0, r3
 800593a:	f001 fac5 	bl	8006ec8 <lsm6dsr_xl_filter_lp2_set>
}
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4618      	mov	r0, r3
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	0801ba84 	.word	0x0801ba84
 800594c:	08005afb 	.word	0x08005afb
 8005950:	08005b35 	.word	0x08005b35
 8005954:	0801ba94 	.word	0x0801ba94
 8005958:	0801baac 	.word	0x0801baac
 800595c:	0801bab4 	.word	0x0801bab4
 8005960:	0801bac8 	.word	0x0801bac8
 8005964:	0801bad0 	.word	0x0801bad0
 8005968:	0801bad4 	.word	0x0801bad4

0800596c <_ZN7LSM6DSR15getAccelerationEv>:


float* LSM6DSR::getAcceleration(void){
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f103 021c 	add.w	r2, r3, #28
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3328      	adds	r3, #40	; 0x28
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f001 f927 	bl	8006bd4 <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800598c:	2b00      	cmp	r3, #0
 800598e:	d030      	beq.n	80059f2 <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	332a      	adds	r3, #42	; 0x2a
 8005994:	2206      	movs	r2, #6
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f010 f83f 	bl	8015a1c <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f103 021c 	add.w	r2, r3, #28
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	332a      	adds	r3, #42	; 0x2a
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f001 f9cb 	bl	8006d46 <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fe56 	bl	8006668 <lsm6dsr_from_fs2g_to_mg>
 80059bc:	eef0 7a40 	vmov.f32	s15, s0
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fe4b 	bl	8006668 <lsm6dsr_from_fs2g_to_mg>
 80059d2:	eef0 7a40 	vmov.f32	s15, s0
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fe40 	bl	8006668 <lsm6dsr_from_fs2g_to_mg>
 80059e8:	eef0 7a40 	vmov.f32	s15, s0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	return acceleration_mg;
 80059f2:	687b      	ldr	r3, [r7, #4]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <_ZN7LSM6DSR14getTemperatureEv>:


float LSM6DSR::getTemperature(void){
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f103 021c 	add.w	r2, r3, #28
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3328      	adds	r3, #40	; 0x28
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f001 f911 	bl	8006c38 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01a      	beq.n	8005a56 <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3336      	adds	r3, #54	; 0x36
 8005a24:	2202      	movs	r2, #2
 8005a26:	2100      	movs	r1, #0
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f00f fff7 	bl	8015a1c <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f103 021c 	add.w	r2, r3, #28
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3336      	adds	r3, #54	; 0x36
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	f001 f915 	bl	8006c6a <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fe3e 	bl	80066c8 <lsm6dsr_from_lsb_to_celsius>
 8005a4c:	eef0 7a40 	vmov.f32	s15, s0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	edc3 7a06 	vstr	s15, [r3, #24]
	}
    return temperature_degC;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	ee07 3a90 	vmov	s15, r3
}
 8005a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <_ZN7LSM6DSR14getAngularRateEv>:


float* LSM6DSR::getAngularRate(void){
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f103 021c 	add.w	r2, r3, #28
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3328      	adds	r3, #40	; 0x28
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	f001 f8c2 	bl	8006c06 <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d030      	beq.n	8005aee <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3330      	adds	r3, #48	; 0x30
 8005a90:	2206      	movs	r2, #6
 8005a92:	2100      	movs	r1, #0
 8005a94:	4618      	mov	r0, r3
 8005a96:	f00f ffc1 	bl	8015a1c <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f103 021c 	add.w	r2, r3, #28
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3330      	adds	r3, #48	; 0x30
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	f001 f902 	bl	8006cb0 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fdf0 	bl	8006698 <lsm6dsr_from_fs2000dps_to_mdps>
 8005ab8:	eef0 7a40 	vmov.f32	s15, s0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fde5 	bl	8006698 <lsm6dsr_from_fs2000dps_to_mdps>
 8005ace:	eef0 7a40 	vmov.f32	s15, s0
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fdda 	bl	8006698 <lsm6dsr_from_fs2000dps_to_mdps>
 8005ae4:	eef0 7a40 	vmov.f32	s15, s0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
    return angular_rate_mdps;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	330c      	adds	r3, #12
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b088      	sub	sp, #32
 8005afe:	af04      	add	r7, sp, #16
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	461a      	mov	r2, r3
 8005b06:	460b      	mov	r3, r1
 8005b08:	72fb      	strb	r3, [r7, #11]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8005b0e:	7afb      	ldrb	r3, [r7, #11]
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b16:	9302      	str	r3, [sp, #8]
 8005b18:	893b      	ldrh	r3, [r7, #8]
 8005b1a:	9301      	str	r3, [sp, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	2301      	movs	r3, #1
 8005b22:	21d5      	movs	r1, #213	; 0xd5
 8005b24:	68f8      	ldr	r0, [r7, #12]
 8005b26:	f002 fe71 	bl	800880c <HAL_I2C_Mem_Write>
  return 0;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af04      	add	r7, sp, #16
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	460b      	mov	r3, r1
 8005b42:	72fb      	strb	r3, [r7, #11]
 8005b44:	4613      	mov	r3, r2
 8005b46:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8005b48:	7afb      	ldrb	r3, [r7, #11]
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b50:	9302      	str	r3, [sp, #8]
 8005b52:	893b      	ldrh	r3, [r7, #8]
 8005b54:	9301      	str	r3, [sp, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	21d5      	movs	r1, #213	; 0xd5
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f002 ff4e 	bl	8008a00 <HAL_I2C_Mem_Read>
  return 0;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b088      	sub	sp, #32
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 8005b7e:	4834      	ldr	r0, [pc, #208]	; (8005c50 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe0>)
 8005b80:	f7fb fa44 	bl	800100c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4a33      	ldr	r2, [pc, #204]	; (8005c54 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe4>)
 8005b88:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a32      	ldr	r2, [pc, #200]	; (8005c58 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 8005b8e:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8005b96:	2064      	movs	r0, #100	; 0x64
 8005b98:	f001 fdb6 	bl	8007708 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f103 0208 	add.w	r2, r3, #8
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	331e      	adds	r3, #30
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f000 fcda 	bl	8006568 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 8005bb4:	4829      	ldr	r0, [pc, #164]	; (8005c5c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 8005bb6:	f7fb fa47 	bl	8001048 <print>
	if ( whoamI != address ){
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	7f9b      	ldrb	r3, [r3, #30]
 8005bbe:	79fa      	ldrb	r2, [r7, #7]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d013      	beq.n	8005bec <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x7c>
	  println((char*) "NOT OK");
 8005bc4:	4826      	ldr	r0, [pc, #152]	; (8005c60 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 8005bc6:	f7fb fa21 	bl	800100c <println>
	  print((char*) "\tThis Device is: ");
 8005bca:	4826      	ldr	r0, [pc, #152]	; (8005c64 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 8005bcc:	f7fb fa3c 	bl	8001048 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	7f9b      	ldrb	r3, [r3, #30]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	f107 0314 	add.w	r3, r7, #20
 8005bda:	4923      	ldr	r1, [pc, #140]	; (8005c68 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f010 ff9b 	bl	8016b18 <siprintf>
	  print(buffer);
 8005be2:	f107 0314 	add.w	r3, r7, #20
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fb fa2e 	bl	8001048 <print>
		MRT_clear_alarms_flags();
		HAL_PWR_EnterSTANDBYMode();
		*/

	}
	println((char*) "OK");
 8005bec:	481f      	ldr	r0, [pc, #124]	; (8005c6c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8005bee:	f7fb fa0d 	bl	800100c <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8005bf2:	481f      	ldr	r0, [pc, #124]	; (8005c70 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8005bf4:	f7fb fa28 	bl	8001048 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fcc3 	bl	800658a <lps22hh_reset_set>
	HAL_Delay(500);
 8005c04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c08:	f001 fd7e 	bl	8007708 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f103 0208 	add.w	r2, r3, #8
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	331f      	adds	r3, #31
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f000 fcdc 	bl	80065d6 <lps22hh_reset_get>
	} while (rst);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	7fdb      	ldrb	r3, [r3, #31]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d000      	beq.n	8005c28 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xb8>
	do {
 8005c26:	e7f1      	b.n	8005c0c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x9c>
	println((char*) "OK");
 8005c28:	4810      	ldr	r0, [pc, #64]	; (8005c6c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 8005c2a:	f7fb f9ef 	bl	800100c <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3308      	adds	r3, #8
 8005c32:	2101      	movs	r1, #1
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 fba5 	bl	8006384 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	2115      	movs	r1, #21
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fbc5 	bl	80063d0 <lps22hh_data_rate_set>
}
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	0801baf8 	.word	0x0801baf8
 8005c54:	08005d47 	.word	0x08005d47
 8005c58:	08005d81 	.word	0x08005d81
 8005c5c:	0801ba94 	.word	0x0801ba94
 8005c60:	0801baac 	.word	0x0801baac
 8005c64:	0801bab4 	.word	0x0801bab4
 8005c68:	0801bac8 	.word	0x0801bac8
 8005c6c:	0801bad0 	.word	0x0801bad0
 8005c70:	0801bad4 	.word	0x0801bad4

08005c74 <_ZN7LPS22HH11getPressureEv>:



float LPS22HH::getPressure(void){
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f103 0208 	add.w	r2, r3, #8
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3314      	adds	r3, #20
 8005c86:	4619      	mov	r1, r3
 8005c88:	4610      	mov	r0, r2
 8005c8a:	f000 fbef 	bl	800646c <lps22hh_press_flag_data_ready_get>

	if (reg) {
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	7d1b      	ldrb	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d019      	beq.n	8005cca <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3318      	adds	r3, #24
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f00f febc 	bl	8015a1c <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f103 0208 	add.w	r2, r3, #8
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3318      	adds	r3, #24
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f000 fc0d 	bl	80064d0 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fb30 	bl	8006320 <lps22hh_from_lsb_to_hpa>
 8005cc0:	eef0 7a40 	vmov.f32	s15, s0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	edc3 7a00 	vstr	s15, [r3]
	}
	return pressure_hPa;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	ee07 3a90 	vmov	s15, r3
}
 8005cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <_ZN7LPS22HH14getTemperatureEv>:


float LPS22HH::getTemperature(void){
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f103 0208 	add.w	r2, r3, #8
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3314      	adds	r3, #20
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f000 fbd4 	bl	800649e <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	7d1b      	ldrb	r3, [r3, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d01a      	beq.n	8005d34 <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	331c      	adds	r3, #28
 8005d02:	2202      	movs	r2, #2
 8005d04:	2100      	movs	r1, #0
 8005d06:	4618      	mov	r0, r3
 8005d08:	f00f fe88 	bl	8015a1c <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f103 0208 	add.w	r2, r3, #8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	331c      	adds	r3, #28
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f000 fc02 	bl	8006522 <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fb13 	bl	8006350 <lps22hh_from_lsb_to_celsius>
 8005d2a:	eef0 7a40 	vmov.f32	s15, s0
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	return temperature_degC;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	ee07 3a90 	vmov	s15, r3
}
 8005d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b088      	sub	sp, #32
 8005d4a:	af04      	add	r7, sp, #16
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	461a      	mov	r2, r3
 8005d52:	460b      	mov	r3, r1
 8005d54:	72fb      	strb	r3, [r7, #11]
 8005d56:	4613      	mov	r3, r2
 8005d58:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8005d5a:	7afb      	ldrb	r3, [r7, #11]
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d62:	9302      	str	r3, [sp, #8]
 8005d64:	893b      	ldrh	r3, [r7, #8]
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	21b9      	movs	r1, #185	; 0xb9
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f002 fd4b 	bl	800880c <HAL_I2C_Mem_Write>
  return 0;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af04      	add	r7, sp, #16
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	607a      	str	r2, [r7, #4]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	72fb      	strb	r3, [r7, #11]
 8005d90:	4613      	mov	r3, r2
 8005d92:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d9c:	9302      	str	r3, [sp, #8]
 8005d9e:	893b      	ldrh	r3, [r7, #8]
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	2301      	movs	r3, #1
 8005da8:	21b9      	movs	r1, #185	; 0xb9
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f002 fe28 	bl	8008a00 <HAL_I2C_Mem_Read>
  return 0;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08c      	sub	sp, #48	; 0x30
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8005dc8:	2364      	movs	r3, #100	; 0x64
 8005dca:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8005dd4:	e073      	b.n	8005ebe <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 8005dd6:	4b3f      	ldr	r3, [pc, #252]	; (8005ed4 <GPS_Poll+0x118>)
 8005dd8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005dda:	2364      	movs	r3, #100	; 0x64
 8005ddc:	2201      	movs	r2, #1
 8005dde:	493e      	ldr	r1, [pc, #248]	; (8005ed8 <GPS_Poll+0x11c>)
 8005de0:	f007 f8d3 	bl	800cf8a <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8005de4:	4b3c      	ldr	r3, [pc, #240]	; (8005ed8 <GPS_Poll+0x11c>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b0a      	cmp	r3, #10
 8005dea:	d00f      	beq.n	8005e0c <GPS_Poll+0x50>
 8005dec:	4b3b      	ldr	r3, [pc, #236]	; (8005edc <GPS_Poll+0x120>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b63      	cmp	r3, #99	; 0x63
 8005df2:	d80b      	bhi.n	8005e0c <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8005df4:	4b39      	ldr	r3, [pc, #228]	; (8005edc <GPS_Poll+0x120>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	b2d1      	uxtb	r1, r2
 8005dfc:	4a37      	ldr	r2, [pc, #220]	; (8005edc <GPS_Poll+0x120>)
 8005dfe:	7011      	strb	r1, [r2, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	4b35      	ldr	r3, [pc, #212]	; (8005ed8 <GPS_Poll+0x11c>)
 8005e04:	7819      	ldrb	r1, [r3, #0]
 8005e06:	4b36      	ldr	r3, [pc, #216]	; (8005ee0 <GPS_Poll+0x124>)
 8005e08:	5499      	strb	r1, [r3, r2]
 8005e0a:	e021      	b.n	8005e50 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 8005e0c:	4834      	ldr	r0, [pc, #208]	; (8005ee0 <GPS_Poll+0x124>)
 8005e0e:	f000 f869 	bl	8005ee4 <GPS_validate>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d013      	beq.n	8005e40 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8005e18:	4831      	ldr	r0, [pc, #196]	; (8005ee0 <GPS_Poll+0x124>)
 8005e1a:	f000 f8c5 	bl	8005fa8 <GPS_parse>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00d      	beq.n	8005e40 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8005e24:	4b2b      	ldr	r3, [pc, #172]	; (8005ed4 <GPS_Poll+0x118>)
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 8005e2c:	4b29      	ldr	r3, [pc, #164]	; (8005ed4 <GPS_Poll+0x118>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 8005e34:	4b27      	ldr	r3, [pc, #156]	; (8005ed4 <GPS_Poll+0x118>)
 8005e36:	695a      	ldr	r2, [r3, #20]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	601a      	str	r2, [r3, #0]
					done = 1;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 8005e40:	4b26      	ldr	r3, [pc, #152]	; (8005edc <GPS_Poll+0x120>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8005e46:	2264      	movs	r2, #100	; 0x64
 8005e48:	2100      	movs	r1, #0
 8005e4a:	4825      	ldr	r0, [pc, #148]	; (8005ee0 <GPS_Poll+0x124>)
 8005e4c:	f00f fde6 	bl	8015a1c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 8005e50:	2300      	movs	r3, #0
 8005e52:	623b      	str	r3, [r7, #32]
 8005e54:	4b1f      	ldr	r3, [pc, #124]	; (8005ed4 <GPS_Poll+0x118>)
 8005e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	623b      	str	r3, [r7, #32]
 8005e5e:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <GPS_Poll+0x118>)
 8005e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	623b      	str	r3, [r7, #32]
 8005e68:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
 8005e6e:	4b19      	ldr	r3, [pc, #100]	; (8005ed4 <GPS_Poll+0x118>)
 8005e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	4b16      	ldr	r3, [pc, #88]	; (8005ed4 <GPS_Poll+0x118>)
 8005e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 8005e84:	2300      	movs	r3, #0
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <GPS_Poll+0x118>)
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <GPS_Poll+0x118>)
 8005e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <GPS_Poll+0x118>)
 8005ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <GPS_Poll+0x118>)
 8005eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8005eb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005eba:	3301      	adds	r3, #1
 8005ebc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 8005ebe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005ec0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d202      	bcs.n	8005ecc <GPS_Poll+0x110>
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d084      	beq.n	8005dd6 <GPS_Poll+0x1a>
	}
}
 8005ecc:	bf00      	nop
 8005ece:	3730      	adds	r7, #48	; 0x30
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	200072c4 	.word	0x200072c4
 8005ed8:	200004f8 	.word	0x200004f8
 8005edc:	200004f9 	.word	0x200004f9
 8005ee0:	20007328 	.word	0x20007328

08005ee4 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	4413      	add	r3, r2
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b24      	cmp	r3, #36	; 0x24
 8005efe:	d103      	bne.n	8005f08 <GPS_validate+0x24>
        i++;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	3301      	adds	r3, #1
 8005f04:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8005f06:	e00c      	b.n	8005f22 <GPS_validate+0x3e>
        return 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e047      	b.n	8005f9c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	4413      	add	r3, r2
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	461a      	mov	r2, r3
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4053      	eors	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
        i++;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	4413      	add	r3, r2
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <GPS_validate+0x5c>
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	4413      	add	r3, r2
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b2a      	cmp	r3, #42	; 0x2a
 8005f38:	d002      	beq.n	8005f40 <GPS_validate+0x5c>
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2b4a      	cmp	r3, #74	; 0x4a
 8005f3e:	dde5      	ble.n	8005f0c <GPS_validate+0x28>
    }

    if(i >= 75){
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b4a      	cmp	r3, #74	; 0x4a
 8005f44:	dd01      	ble.n	8005f4a <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8005f46:	2300      	movs	r3, #0
 8005f48:	e028      	b.n	8005f9c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	4413      	add	r3, r2
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b2a      	cmp	r3, #42	; 0x2a
 8005f54:	d119      	bne.n	8005f8a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	3302      	adds	r3, #2
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	4413      	add	r3, r2
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 8005f72:	f107 0308 	add.w	r3, r7, #8
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	490a      	ldr	r1, [pc, #40]	; (8005fa4 <GPS_validate+0xc0>)
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f010 fdcc 	bl	8016b18 <siprintf>
    return((checkcalcstr[0] == check[0])
 8005f80:	7a3a      	ldrb	r2, [r7, #8]
 8005f82:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d108      	bne.n	8005f9a <GPS_validate+0xb6>
 8005f88:	e001      	b.n	8005f8e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e006      	b.n	8005f9c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8005f8e:	7a7a      	ldrb	r2, [r7, #9]
 8005f90:	7b7b      	ldrb	r3, [r7, #13]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d101      	bne.n	8005f9a <GPS_validate+0xb6>
 8005f96:	2301      	movs	r3, #1
 8005f98:	e000      	b.n	8005f9c <GPS_validate+0xb8>
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	0801bb08 	.word	0x0801bb08

08005fa8 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af08      	add	r7, sp, #32
 8005fae:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8005fb0:	2206      	movs	r2, #6
 8005fb2:	496d      	ldr	r1, [pc, #436]	; (8006168 <GPS_parse+0x1c0>)
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f010 fe48 	bl	8016c4a <strncmp>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d139      	bne.n	8006034 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8005fc0:	4b6a      	ldr	r3, [pc, #424]	; (800616c <GPS_parse+0x1c4>)
 8005fc2:	9307      	str	r3, [sp, #28]
 8005fc4:	4b6a      	ldr	r3, [pc, #424]	; (8006170 <GPS_parse+0x1c8>)
 8005fc6:	9306      	str	r3, [sp, #24]
 8005fc8:	4b6a      	ldr	r3, [pc, #424]	; (8006174 <GPS_parse+0x1cc>)
 8005fca:	9305      	str	r3, [sp, #20]
 8005fcc:	4b6a      	ldr	r3, [pc, #424]	; (8006178 <GPS_parse+0x1d0>)
 8005fce:	9304      	str	r3, [sp, #16]
 8005fd0:	4b6a      	ldr	r3, [pc, #424]	; (800617c <GPS_parse+0x1d4>)
 8005fd2:	9303      	str	r3, [sp, #12]
 8005fd4:	4b6a      	ldr	r3, [pc, #424]	; (8006180 <GPS_parse+0x1d8>)
 8005fd6:	9302      	str	r3, [sp, #8]
 8005fd8:	4b6a      	ldr	r3, [pc, #424]	; (8006184 <GPS_parse+0x1dc>)
 8005fda:	9301      	str	r3, [sp, #4]
 8005fdc:	4b6a      	ldr	r3, [pc, #424]	; (8006188 <GPS_parse+0x1e0>)
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	4b6a      	ldr	r3, [pc, #424]	; (800618c <GPS_parse+0x1e4>)
 8005fe2:	4a6b      	ldr	r2, [pc, #428]	; (8006190 <GPS_parse+0x1e8>)
 8005fe4:	496b      	ldr	r1, [pc, #428]	; (8006194 <GPS_parse+0x1ec>)
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f010 fdb6 	bl	8016b58 <siscanf>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f340 80b5 	ble.w	800615e <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005ff4:	4b68      	ldr	r3, [pc, #416]	; (8006198 <GPS_parse+0x1f0>)
 8005ff6:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ffa:	4b67      	ldr	r3, [pc, #412]	; (8006198 <GPS_parse+0x1f0>)
 8005ffc:	7e1b      	ldrb	r3, [r3, #24]
 8005ffe:	4618      	mov	r0, r3
 8006000:	eeb0 0a67 	vmov.f32	s0, s15
 8006004:	f000 f8ec 	bl	80061e0 <GPS_nmea_to_dec>
 8006008:	eef0 7a40 	vmov.f32	s15, s0
 800600c:	4b62      	ldr	r3, [pc, #392]	; (8006198 <GPS_parse+0x1f0>)
 800600e:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8006012:	4b61      	ldr	r3, [pc, #388]	; (8006198 <GPS_parse+0x1f0>)
 8006014:	edd3 7a03 	vldr	s15, [r3, #12]
 8006018:	4b5f      	ldr	r3, [pc, #380]	; (8006198 <GPS_parse+0x1f0>)
 800601a:	7e5b      	ldrb	r3, [r3, #25]
 800601c:	4618      	mov	r0, r3
 800601e:	eeb0 0a67 	vmov.f32	s0, s15
 8006022:	f000 f8dd 	bl	80061e0 <GPS_nmea_to_dec>
 8006026:	eef0 7a40 	vmov.f32	s15, s0
 800602a:	4b5b      	ldr	r3, [pc, #364]	; (8006198 <GPS_parse+0x1f0>)
 800602c:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8006030:	2301      	movs	r3, #1
 8006032:	e095      	b.n	8006160 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8006034:	2206      	movs	r2, #6
 8006036:	4959      	ldr	r1, [pc, #356]	; (800619c <GPS_parse+0x1f4>)
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f010 fe06 	bl	8016c4a <strncmp>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d134      	bne.n	80060ae <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8006044:	4b56      	ldr	r3, [pc, #344]	; (80061a0 <GPS_parse+0x1f8>)
 8006046:	9305      	str	r3, [sp, #20]
 8006048:	4b56      	ldr	r3, [pc, #344]	; (80061a4 <GPS_parse+0x1fc>)
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	4b56      	ldr	r3, [pc, #344]	; (80061a8 <GPS_parse+0x200>)
 800604e:	9303      	str	r3, [sp, #12]
 8006050:	4b4b      	ldr	r3, [pc, #300]	; (8006180 <GPS_parse+0x1d8>)
 8006052:	9302      	str	r3, [sp, #8]
 8006054:	4b4b      	ldr	r3, [pc, #300]	; (8006184 <GPS_parse+0x1dc>)
 8006056:	9301      	str	r3, [sp, #4]
 8006058:	4b4b      	ldr	r3, [pc, #300]	; (8006188 <GPS_parse+0x1e0>)
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	4b4b      	ldr	r3, [pc, #300]	; (800618c <GPS_parse+0x1e4>)
 800605e:	4a4c      	ldr	r2, [pc, #304]	; (8006190 <GPS_parse+0x1e8>)
 8006060:	4952      	ldr	r1, [pc, #328]	; (80061ac <GPS_parse+0x204>)
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f010 fd78 	bl	8016b58 <siscanf>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	dd77      	ble.n	800615e <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800606e:	4b4a      	ldr	r3, [pc, #296]	; (8006198 <GPS_parse+0x1f0>)
 8006070:	edd3 7a04 	vldr	s15, [r3, #16]
 8006074:	4b48      	ldr	r3, [pc, #288]	; (8006198 <GPS_parse+0x1f0>)
 8006076:	7e1b      	ldrb	r3, [r3, #24]
 8006078:	4618      	mov	r0, r3
 800607a:	eeb0 0a67 	vmov.f32	s0, s15
 800607e:	f000 f8af 	bl	80061e0 <GPS_nmea_to_dec>
 8006082:	eef0 7a40 	vmov.f32	s15, s0
 8006086:	4b44      	ldr	r3, [pc, #272]	; (8006198 <GPS_parse+0x1f0>)
 8006088:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 800608c:	4b42      	ldr	r3, [pc, #264]	; (8006198 <GPS_parse+0x1f0>)
 800608e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006092:	4b41      	ldr	r3, [pc, #260]	; (8006198 <GPS_parse+0x1f0>)
 8006094:	7e5b      	ldrb	r3, [r3, #25]
 8006096:	4618      	mov	r0, r3
 8006098:	eeb0 0a67 	vmov.f32	s0, s15
 800609c:	f000 f8a0 	bl	80061e0 <GPS_nmea_to_dec>
 80060a0:	eef0 7a40 	vmov.f32	s15, s0
 80060a4:	4b3c      	ldr	r3, [pc, #240]	; (8006198 <GPS_parse+0x1f0>)
 80060a6:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e058      	b.n	8006160 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80060ae:	2206      	movs	r2, #6
 80060b0:	493f      	ldr	r1, [pc, #252]	; (80061b0 <GPS_parse+0x208>)
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f010 fdc9 	bl	8016c4a <strncmp>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d130      	bne.n	8006120 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80060be:	4b3d      	ldr	r3, [pc, #244]	; (80061b4 <GPS_parse+0x20c>)
 80060c0:	9303      	str	r3, [sp, #12]
 80060c2:	4b33      	ldr	r3, [pc, #204]	; (8006190 <GPS_parse+0x1e8>)
 80060c4:	9302      	str	r3, [sp, #8]
 80060c6:	4b2e      	ldr	r3, [pc, #184]	; (8006180 <GPS_parse+0x1d8>)
 80060c8:	9301      	str	r3, [sp, #4]
 80060ca:	4b2e      	ldr	r3, [pc, #184]	; (8006184 <GPS_parse+0x1dc>)
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	4b2e      	ldr	r3, [pc, #184]	; (8006188 <GPS_parse+0x1e0>)
 80060d0:	4a2e      	ldr	r2, [pc, #184]	; (800618c <GPS_parse+0x1e4>)
 80060d2:	4939      	ldr	r1, [pc, #228]	; (80061b8 <GPS_parse+0x210>)
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f010 fd3f 	bl	8016b58 <siscanf>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	dd3e      	ble.n	800615e <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80060e0:	4b2d      	ldr	r3, [pc, #180]	; (8006198 <GPS_parse+0x1f0>)
 80060e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80060e6:	4b2c      	ldr	r3, [pc, #176]	; (8006198 <GPS_parse+0x1f0>)
 80060e8:	7e1b      	ldrb	r3, [r3, #24]
 80060ea:	4618      	mov	r0, r3
 80060ec:	eeb0 0a67 	vmov.f32	s0, s15
 80060f0:	f000 f876 	bl	80061e0 <GPS_nmea_to_dec>
 80060f4:	eef0 7a40 	vmov.f32	s15, s0
 80060f8:	4b27      	ldr	r3, [pc, #156]	; (8006198 <GPS_parse+0x1f0>)
 80060fa:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80060fe:	4b26      	ldr	r3, [pc, #152]	; (8006198 <GPS_parse+0x1f0>)
 8006100:	edd3 7a03 	vldr	s15, [r3, #12]
 8006104:	4b24      	ldr	r3, [pc, #144]	; (8006198 <GPS_parse+0x1f0>)
 8006106:	7e5b      	ldrb	r3, [r3, #25]
 8006108:	4618      	mov	r0, r3
 800610a:	eeb0 0a67 	vmov.f32	s0, s15
 800610e:	f000 f867 	bl	80061e0 <GPS_nmea_to_dec>
 8006112:	eef0 7a40 	vmov.f32	s15, s0
 8006116:	4b20      	ldr	r3, [pc, #128]	; (8006198 <GPS_parse+0x1f0>)
 8006118:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 800611c:	2301      	movs	r3, #1
 800611e:	e01f      	b.n	8006160 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8006120:	2206      	movs	r2, #6
 8006122:	4926      	ldr	r1, [pc, #152]	; (80061bc <GPS_parse+0x214>)
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f010 fd90 	bl	8016c4a <strncmp>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d116      	bne.n	800615e <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8006130:	4b23      	ldr	r3, [pc, #140]	; (80061c0 <GPS_parse+0x218>)
 8006132:	9305      	str	r3, [sp, #20]
 8006134:	4b23      	ldr	r3, [pc, #140]	; (80061c4 <GPS_parse+0x21c>)
 8006136:	9304      	str	r3, [sp, #16]
 8006138:	4b23      	ldr	r3, [pc, #140]	; (80061c8 <GPS_parse+0x220>)
 800613a:	9303      	str	r3, [sp, #12]
 800613c:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <GPS_parse+0x200>)
 800613e:	9302      	str	r3, [sp, #8]
 8006140:	4b22      	ldr	r3, [pc, #136]	; (80061cc <GPS_parse+0x224>)
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	4b22      	ldr	r3, [pc, #136]	; (80061d0 <GPS_parse+0x228>)
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	4b22      	ldr	r3, [pc, #136]	; (80061d4 <GPS_parse+0x22c>)
 800614a:	4a23      	ldr	r2, [pc, #140]	; (80061d8 <GPS_parse+0x230>)
 800614c:	4923      	ldr	r1, [pc, #140]	; (80061dc <GPS_parse+0x234>)
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f010 fd02 	bl	8016b58 <siscanf>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	dd01      	ble.n	800615e <GPS_parse+0x1b6>
            return 0;
 800615a:	2300      	movs	r3, #0
 800615c:	e000      	b.n	8006160 <GPS_parse+0x1b8>
    }
    return 0;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	0801bb10 	.word	0x0801bb10
 800616c:	200072f0 	.word	0x200072f0
 8006170:	200072ec 	.word	0x200072ec
 8006174:	200072e8 	.word	0x200072e8
 8006178:	200072e4 	.word	0x200072e4
 800617c:	200072e0 	.word	0x200072e0
 8006180:	200072dd 	.word	0x200072dd
 8006184:	200072d0 	.word	0x200072d0
 8006188:	200072dc 	.word	0x200072dc
 800618c:	200072d4 	.word	0x200072d4
 8006190:	200072d8 	.word	0x200072d8
 8006194:	0801bb18 	.word	0x0801bb18
 8006198:	200072c4 	.word	0x200072c4
 800619c:	0801bb40 	.word	0x0801bb40
 80061a0:	200072fc 	.word	0x200072fc
 80061a4:	200072f8 	.word	0x200072f8
 80061a8:	200072f4 	.word	0x200072f4
 80061ac:	0801bb48 	.word	0x0801bb48
 80061b0:	0801bb68 	.word	0x0801bb68
 80061b4:	20007300 	.word	0x20007300
 80061b8:	0801bb70 	.word	0x0801bb70
 80061bc:	0801bb8c 	.word	0x0801bb8c
 80061c0:	20007318 	.word	0x20007318
 80061c4:	20007314 	.word	0x20007314
 80061c8:	20007311 	.word	0x20007311
 80061cc:	20007310 	.word	0x20007310
 80061d0:	2000730c 	.word	0x2000730c
 80061d4:	20007308 	.word	0x20007308
 80061d8:	20007304 	.word	0x20007304
 80061dc:	0801bb94 	.word	0x0801bb94

080061e0 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80061ea:	4603      	mov	r3, r0
 80061ec:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80061ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80061f2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8006274 <GPS_nmea_to_dec+0x94>
 80061f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061fe:	ee17 3a90 	vmov	r3, s15
 8006202:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	2264      	movs	r2, #100	; 0x64
 8006208:	fb02 f303 	mul.w	r3, r2, r3
 800620c:	ee07 3a90 	vmov	s15, r3
 8006210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006214:	ed97 7a01 	vldr	s14, [r7, #4]
 8006218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800621c:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8006220:	ed97 7a03 	vldr	s14, [r7, #12]
 8006224:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006278 <GPS_nmea_to_dec+0x98>
 8006228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800622c:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800623a:	ed97 7a02 	vldr	s14, [r7, #8]
 800623e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006242:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	2b53      	cmp	r3, #83	; 0x53
 800624a:	d002      	beq.n	8006252 <GPS_nmea_to_dec+0x72>
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	2b57      	cmp	r3, #87	; 0x57
 8006250:	d105      	bne.n	800625e <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8006252:	edd7 7a05 	vldr	s15, [r7, #20]
 8006256:	eef1 7a67 	vneg.f32	s15, s15
 800625a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	ee07 3a90 	vmov	s15, r3
}
 8006264:	eeb0 0a67 	vmov.f32	s0, s15
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	42c80000 	.word	0x42c80000
 8006278:	42700000 	.word	0x42700000

0800627c <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 8006288:	4a0a      	ldr	r2, [pc, #40]	; (80062b4 <GPS_Init+0x38>)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 800628e:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <GPS_Init+0x38>)
 8006290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006292:	4809      	ldr	r0, [pc, #36]	; (80062b8 <GPS_Init+0x3c>)
 8006294:	4798      	blx	r3
	GPS.uart = data_uart;
 8006296:	4a07      	ldr	r2, [pc, #28]	; (80062b4 <GPS_Init+0x38>)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 800629c:	4a05      	ldr	r2, [pc, #20]	; (80062b4 <GPS_Init+0x38>)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 80062a2:	4b04      	ldr	r3, [pc, #16]	; (80062b4 <GPS_Init+0x38>)
 80062a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a6:	4805      	ldr	r0, [pc, #20]	; (80062bc <GPS_Init+0x40>)
 80062a8:	4798      	blx	r3
}
 80062aa:	bf00      	nop
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	200072c4 	.word	0x200072c4
 80062b8:	0801bbb4 	.word	0x0801bbb4
 80062bc:	0801bbc4 	.word	0x0801bbc4

080062c0 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80062c0:	b590      	push	{r4, r7, lr}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	607a      	str	r2, [r7, #4]
 80062ca:	461a      	mov	r2, r3
 80062cc:	460b      	mov	r3, r1
 80062ce:	72fb      	strb	r3, [r7, #11]
 80062d0:	4613      	mov	r3, r2
 80062d2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685c      	ldr	r4, [r3, #4]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6898      	ldr	r0, [r3, #8]
 80062dc:	893b      	ldrh	r3, [r7, #8]
 80062de:	7af9      	ldrb	r1, [r7, #11]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	47a0      	blx	r4
 80062e4:	6178      	str	r0, [r7, #20]

  return ret;
 80062e6:	697b      	ldr	r3, [r7, #20]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd90      	pop	{r4, r7, pc}

080062f0 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80062f0:	b590      	push	{r4, r7, lr}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	607a      	str	r2, [r7, #4]
 80062fa:	461a      	mov	r2, r3
 80062fc:	460b      	mov	r3, r1
 80062fe:	72fb      	strb	r3, [r7, #11]
 8006300:	4613      	mov	r3, r2
 8006302:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681c      	ldr	r4, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6898      	ldr	r0, [r3, #8]
 800630c:	893b      	ldrh	r3, [r7, #8]
 800630e:	7af9      	ldrb	r1, [r7, #11]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	47a0      	blx	r4
 8006314:	6178      	str	r0, [r7, #20]

  return ret;
 8006316:	697b      	ldr	r3, [r7, #20]
}
 8006318:	4618      	mov	r0, r3
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	bd90      	pop	{r4, r7, pc}

08006320 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006332:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800634c <lps22hh_from_lsb_to_hpa+0x2c>
 8006336:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800633a:	eef0 7a66 	vmov.f32	s15, s13
}
 800633e:	eeb0 0a67 	vmov.f32	s0, s15
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	49800000 	.word	0x49800000

08006350 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	4603      	mov	r3, r0
 8006358:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 800635a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006366:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006380 <lps22hh_from_lsb_to_celsius+0x30>
 800636a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800636e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006372:	eeb0 0a67 	vmov.f32	s0, s15
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	42c80000 	.word	0x42c80000

08006384 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8006390:	f107 0208 	add.w	r2, r7, #8
 8006394:	2301      	movs	r3, #1
 8006396:	2110      	movs	r1, #16
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff ff91 	bl	80062c0 <lps22hh_read_reg>
 800639e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10f      	bne.n	80063c6 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	7a3b      	ldrb	r3, [r7, #8]
 80063b0:	f362 0341 	bfi	r3, r2, #1, #1
 80063b4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80063b6:	f107 0208 	add.w	r2, r7, #8
 80063ba:	2301      	movs	r3, #1
 80063bc:	2110      	movs	r1, #16
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7ff ff96 	bl	80062f0 <lps22hh_write_reg>
 80063c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063c6:	68fb      	ldr	r3, [r7, #12]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80063dc:	f107 0210 	add.w	r2, r7, #16
 80063e0:	2301      	movs	r3, #1
 80063e2:	2110      	movs	r1, #16
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff ff6b 	bl	80062c0 <lps22hh_read_reg>
 80063ea:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d107      	bne.n	8006402 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80063f2:	f107 020c 	add.w	r2, r7, #12
 80063f6:	2301      	movs	r3, #1
 80063f8:	2111      	movs	r1, #17
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff ff60 	bl	80062c0 <lps22hh_read_reg>
 8006400:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10f      	bne.n	8006428 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	b2da      	uxtb	r2, r3
 8006410:	7c3b      	ldrb	r3, [r7, #16]
 8006412:	f362 1306 	bfi	r3, r2, #4, #3
 8006416:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8006418:	f107 0210 	add.w	r2, r7, #16
 800641c:	2301      	movs	r3, #1
 800641e:	2110      	movs	r1, #16
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff ff65 	bl	80062f0 <lps22hh_write_reg>
 8006426:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d119      	bne.n	8006462 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	091b      	lsrs	r3, r3, #4
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	b2da      	uxtb	r2, r3
 8006438:	7b3b      	ldrb	r3, [r7, #12]
 800643a:	f362 0341 	bfi	r3, r2, #1, #1
 800643e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	08db      	lsrs	r3, r3, #3
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	b2da      	uxtb	r2, r3
 800644a:	7b3b      	ldrb	r3, [r7, #12]
 800644c:	f362 0300 	bfi	r3, r2, #0, #1
 8006450:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8006452:	f107 020c 	add.w	r2, r7, #12
 8006456:	2301      	movs	r3, #1
 8006458:	2111      	movs	r1, #17
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7ff ff48 	bl	80062f0 <lps22hh_write_reg>
 8006460:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8006462:	697b      	ldr	r3, [r7, #20]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8006476:	f107 0208 	add.w	r2, r7, #8
 800647a:	2301      	movs	r3, #1
 800647c:	2127      	movs	r1, #39	; 0x27
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff ff1e 	bl	80062c0 <lps22hh_read_reg>
 8006484:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 8006486:	7a3b      	ldrb	r3, [r7, #8]
 8006488:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800648c:	b2db      	uxtb	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	701a      	strb	r2, [r3, #0]

  return ret;
 8006494:	68fb      	ldr	r3, [r7, #12]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 80064a8:	f107 0208 	add.w	r2, r7, #8
 80064ac:	2301      	movs	r3, #1
 80064ae:	2127      	movs	r1, #39	; 0x27
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff ff05 	bl	80062c0 <lps22hh_read_reg>
 80064b6:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 80064b8:	7a3b      	ldrb	r3, [r7, #8]
 80064ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	701a      	strb	r2, [r3, #0]

  return ret;
 80064c6:	68fb      	ldr	r3, [r7, #12]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80064da:	f107 0208 	add.w	r2, r7, #8
 80064de:	2303      	movs	r3, #3
 80064e0:	2128      	movs	r1, #40	; 0x28
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff feec 	bl	80062c0 <lps22hh_read_reg>
 80064e8:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80064ea:	7abb      	ldrb	r3, [r7, #10]
 80064ec:	461a      	mov	r2, r3
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	7a7a      	ldrb	r2, [r7, #9]
 80064fa:	441a      	add	r2, r3
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	7a3a      	ldrb	r2, [r7, #8]
 8006508:	441a      	add	r2, r3
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	021a      	lsls	r2, r3, #8
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	601a      	str	r2, [r3, #0]

  return ret;
 8006518:	68fb      	ldr	r3, [r7, #12]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 800652c:	f107 0208 	add.w	r2, r7, #8
 8006530:	2302      	movs	r3, #2
 8006532:	212b      	movs	r1, #43	; 0x2b
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7ff fec3 	bl	80062c0 <lps22hh_read_reg>
 800653a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800653c:	7a7b      	ldrb	r3, [r7, #9]
 800653e:	b21a      	sxth	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800654a:	b29b      	uxth	r3, r3
 800654c:	021b      	lsls	r3, r3, #8
 800654e:	b29a      	uxth	r2, r3
 8006550:	7a3b      	ldrb	r3, [r7, #8]
 8006552:	b29b      	uxth	r3, r3
 8006554:	4413      	add	r3, r2
 8006556:	b29b      	uxth	r3, r3
 8006558:	b21a      	sxth	r2, r3
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	801a      	strh	r2, [r3, #0]

  return ret;
 800655e:	68fb      	ldr	r3, [r7, #12]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8006572:	2301      	movs	r3, #1
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	210f      	movs	r1, #15
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7ff fea1 	bl	80062c0 <lps22hh_read_reg>
 800657e:	60f8      	str	r0, [r7, #12]

  return ret;
 8006580:	68fb      	ldr	r3, [r7, #12]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	460b      	mov	r3, r1
 8006594:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006596:	f107 0208 	add.w	r2, r7, #8
 800659a:	2301      	movs	r3, #1
 800659c:	2111      	movs	r1, #17
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff fe8e 	bl	80062c0 <lps22hh_read_reg>
 80065a4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10f      	bne.n	80065cc <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	7a3b      	ldrb	r3, [r7, #8]
 80065b6:	f362 0382 	bfi	r3, r2, #2, #1
 80065ba:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80065bc:	f107 0208 	add.w	r2, r7, #8
 80065c0:	2301      	movs	r3, #1
 80065c2:	2111      	movs	r1, #17
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7ff fe93 	bl	80062f0 <lps22hh_write_reg>
 80065ca:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80065cc:	68fb      	ldr	r3, [r7, #12]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80065e0:	f107 0208 	add.w	r2, r7, #8
 80065e4:	2301      	movs	r3, #1
 80065e6:	2111      	movs	r1, #17
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff fe69 	bl	80062c0 <lps22hh_read_reg>
 80065ee:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 80065f0:	7a3b      	ldrb	r3, [r7, #8]
 80065f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	701a      	strb	r2, [r3, #0]

  return ret;
 80065fe:	68fb      	ldr	r3, [r7, #12]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006608:	b590      	push	{r4, r7, lr}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	461a      	mov	r2, r3
 8006614:	460b      	mov	r3, r1
 8006616:	72fb      	strb	r3, [r7, #11]
 8006618:	4613      	mov	r3, r2
 800661a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	685c      	ldr	r4, [r3, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6898      	ldr	r0, [r3, #8]
 8006624:	893b      	ldrh	r3, [r7, #8]
 8006626:	7af9      	ldrb	r1, [r7, #11]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	47a0      	blx	r4
 800662c:	6178      	str	r0, [r7, #20]

  return ret;
 800662e:	697b      	ldr	r3, [r7, #20]
}
 8006630:	4618      	mov	r0, r3
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	bd90      	pop	{r4, r7, pc}

08006638 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8006638:	b590      	push	{r4, r7, lr}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	461a      	mov	r2, r3
 8006644:	460b      	mov	r3, r1
 8006646:	72fb      	strb	r3, [r7, #11]
 8006648:	4613      	mov	r3, r2
 800664a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681c      	ldr	r4, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6898      	ldr	r0, [r3, #8]
 8006654:	893b      	ldrh	r3, [r7, #8]
 8006656:	7af9      	ldrb	r1, [r7, #11]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	47a0      	blx	r4
 800665c:	6178      	str	r0, [r7, #20]

  return ret;
 800665e:	697b      	ldr	r3, [r7, #20]
}
 8006660:	4618      	mov	r0, r3
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	bd90      	pop	{r4, r7, pc}

08006668 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8006672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800667e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006694 <lsm6dsr_from_fs2g_to_mg+0x2c>
 8006682:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006686:	eeb0 0a67 	vmov.f32	s0, s15
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	3d79db23 	.word	0x3d79db23

08006698 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80066a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066ae:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80066c4 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 80066b2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80066b6:	eeb0 0a67 	vmov.f32	s0, s15
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	428c0000 	.word	0x428c0000

080066c8 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 80066d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066d6:	ee07 3a90 	vmov	s15, r3
 80066da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066de:	eddf 6a07 	vldr	s13, [pc, #28]	; 80066fc <lsm6dsr_from_lsb_to_celsius+0x34>
 80066e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066e6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80066ea:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80066ee:	eeb0 0a67 	vmov.f32	s0, s15
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	43800000 	.word	0x43800000

08006700 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800670c:	f107 0208 	add.w	r2, r7, #8
 8006710:	2301      	movs	r3, #1
 8006712:	2110      	movs	r1, #16
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff ff77 	bl	8006608 <lsm6dsr_read_reg>
 800671a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10f      	bne.n	8006742 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	b2da      	uxtb	r2, r3
 800672a:	7a3b      	ldrb	r3, [r7, #8]
 800672c:	f362 0383 	bfi	r3, r2, #2, #2
 8006730:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006732:	f107 0208 	add.w	r2, r7, #8
 8006736:	2301      	movs	r3, #1
 8006738:	2110      	movs	r1, #16
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff ff7c 	bl	8006638 <lsm6dsr_write_reg>
 8006740:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006742:	68fb      	ldr	r3, [r7, #12]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800675c:	f107 030c 	add.w	r3, r7, #12
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fc54 	bl	8007010 <lsm6dsr_fsm_enable_get>
 8006768:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f040 80c4 	bne.w	80068fa <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006772:	7b3b      	ldrb	r3, [r7, #12]
 8006774:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006778:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800677a:	7b3b      	ldrb	r3, [r7, #12]
 800677c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006780:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006782:	4313      	orrs	r3, r2
 8006784:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8006786:	7b3b      	ldrb	r3, [r7, #12]
 8006788:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800678c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800678e:	4313      	orrs	r3, r2
 8006790:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006792:	7b3b      	ldrb	r3, [r7, #12]
 8006794:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006798:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800679a:	4313      	orrs	r3, r2
 800679c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800679e:	7b3b      	ldrb	r3, [r7, #12]
 80067a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80067a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80067a6:	4313      	orrs	r3, r2
 80067a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80067aa:	7b3b      	ldrb	r3, [r7, #12]
 80067ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80067b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80067b2:	4313      	orrs	r3, r2
 80067b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80067b6:	7b3b      	ldrb	r3, [r7, #12]
 80067b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80067bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80067be:	4313      	orrs	r3, r2
 80067c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80067c2:	7b3b      	ldrb	r3, [r7, #12]
 80067c4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80067c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80067ca:	4313      	orrs	r3, r2
 80067cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80067ce:	7b7b      	ldrb	r3, [r7, #13]
 80067d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80067d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80067d6:	4313      	orrs	r3, r2
 80067d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80067da:	7b7b      	ldrb	r3, [r7, #13]
 80067dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80067e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80067e2:	4313      	orrs	r3, r2
 80067e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80067e6:	7b7b      	ldrb	r3, [r7, #13]
 80067e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80067ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80067ee:	4313      	orrs	r3, r2
 80067f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80067f2:	7b7b      	ldrb	r3, [r7, #13]
 80067f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80067f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80067fa:	4313      	orrs	r3, r2
 80067fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80067fe:	7b7b      	ldrb	r3, [r7, #13]
 8006800:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006804:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006806:	4313      	orrs	r3, r2
 8006808:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800680a:	7b7b      	ldrb	r3, [r7, #13]
 800680c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006810:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006812:	4313      	orrs	r3, r2
 8006814:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006816:	7b7b      	ldrb	r3, [r7, #13]
 8006818:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800681c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800681e:	4313      	orrs	r3, r2
 8006820:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006822:	7b7b      	ldrb	r3, [r7, #13]
 8006824:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006828:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800682a:	4313      	orrs	r3, r2
 800682c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800682e:	2b01      	cmp	r3, #1
 8006830:	d163      	bne.n	80068fa <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006832:	f107 030b 	add.w	r3, r7, #11
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fc15 	bl	8007068 <lsm6dsr_fsm_data_rate_get>
 800683e:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d159      	bne.n	80068fa <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006846:	7afb      	ldrb	r3, [r7, #11]
 8006848:	2b03      	cmp	r3, #3
 800684a:	d853      	bhi.n	80068f4 <lsm6dsr_xl_data_rate_set+0x1a8>
 800684c:	a201      	add	r2, pc, #4	; (adr r2, 8006854 <lsm6dsr_xl_data_rate_set+0x108>)
 800684e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006852:	bf00      	nop
 8006854:	08006865 	.word	0x08006865
 8006858:	08006877 	.word	0x08006877
 800685c:	08006895 	.word	0x08006895
 8006860:	080068bf 	.word	0x080068bf
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d102      	bne.n	8006870 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800686a:	2301      	movs	r3, #1
 800686c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800686e:	e045      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	75fb      	strb	r3, [r7, #23]
            break;
 8006874:	e042      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d102      	bne.n	8006882 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 800687c:	2302      	movs	r3, #2
 800687e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006880:	e03c      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d102      	bne.n	800688e <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8006888:	2302      	movs	r3, #2
 800688a:	75fb      	strb	r3, [r7, #23]
            break;
 800688c:	e036      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800688e:	78fb      	ldrb	r3, [r7, #3]
 8006890:	75fb      	strb	r3, [r7, #23]
            break;
 8006892:	e033      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d102      	bne.n	80068a0 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800689a:	2303      	movs	r3, #3
 800689c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800689e:	e02d      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d102      	bne.n	80068ac <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80068a6:	2303      	movs	r3, #3
 80068a8:	75fb      	strb	r3, [r7, #23]
            break;
 80068aa:	e027      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d102      	bne.n	80068b8 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80068b2:	2303      	movs	r3, #3
 80068b4:	75fb      	strb	r3, [r7, #23]
            break;
 80068b6:	e021      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	75fb      	strb	r3, [r7, #23]
            break;
 80068bc:	e01e      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80068be:	78fb      	ldrb	r3, [r7, #3]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80068c4:	2304      	movs	r3, #4
 80068c6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80068c8:	e018      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d102      	bne.n	80068d6 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80068d0:	2304      	movs	r3, #4
 80068d2:	75fb      	strb	r3, [r7, #23]
            break;
 80068d4:	e012      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d102      	bne.n	80068e2 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80068dc:	2304      	movs	r3, #4
 80068de:	75fb      	strb	r3, [r7, #23]
            break;
 80068e0:	e00c      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 80068e2:	78fb      	ldrb	r3, [r7, #3]
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d102      	bne.n	80068ee <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 80068e8:	2304      	movs	r3, #4
 80068ea:	75fb      	strb	r3, [r7, #23]
            break;
 80068ec:	e006      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80068ee:	78fb      	ldrb	r3, [r7, #3]
 80068f0:	75fb      	strb	r3, [r7, #23]
            break;
 80068f2:	e003      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	75fb      	strb	r3, [r7, #23]
            break;
 80068f8:	e000      	b.n	80068fc <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 80068fa:	bf00      	nop
    }
  }

  if (ret == 0)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d107      	bne.n	8006912 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006902:	f107 0208 	add.w	r2, r7, #8
 8006906:	2301      	movs	r3, #1
 8006908:	2110      	movs	r1, #16
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fe7c 	bl	8006608 <lsm6dsr_read_reg>
 8006910:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10f      	bne.n	8006938 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8006918:	7dfb      	ldrb	r3, [r7, #23]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	b2da      	uxtb	r2, r3
 8006920:	7a3b      	ldrb	r3, [r7, #8]
 8006922:	f362 1307 	bfi	r3, r2, #4, #4
 8006926:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006928:	f107 0208 	add.w	r2, r7, #8
 800692c:	2301      	movs	r3, #1
 800692e:	2110      	movs	r1, #16
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f7ff fe81 	bl	8006638 <lsm6dsr_write_reg>
 8006936:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006938:	693b      	ldr	r3, [r7, #16]
}
 800693a:	4618      	mov	r0, r3
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop

08006944 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	460b      	mov	r3, r1
 800694e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006950:	f107 0208 	add.w	r2, r7, #8
 8006954:	2301      	movs	r3, #1
 8006956:	2111      	movs	r1, #17
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff fe55 	bl	8006608 <lsm6dsr_read_reg>
 800695e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10f      	bne.n	8006986 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	f003 030f 	and.w	r3, r3, #15
 800696c:	b2da      	uxtb	r2, r3
 800696e:	7a3b      	ldrb	r3, [r7, #8]
 8006970:	f362 0303 	bfi	r3, r2, #0, #4
 8006974:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006976:	f107 0208 	add.w	r2, r7, #8
 800697a:	2301      	movs	r3, #1
 800697c:	2111      	movs	r1, #17
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff fe5a 	bl	8006638 <lsm6dsr_write_reg>
 8006984:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006986:	68fb      	ldr	r3, [r7, #12]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80069a0:	f107 030c 	add.w	r3, r7, #12
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fb32 	bl	8007010 <lsm6dsr_fsm_enable_get>
 80069ac:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f040 80c4 	bne.w	8006b3e <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80069b6:	7b3b      	ldrb	r3, [r7, #12]
 80069b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80069bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80069be:	7b3b      	ldrb	r3, [r7, #12]
 80069c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80069c4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80069c6:	4313      	orrs	r3, r2
 80069c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80069ca:	7b3b      	ldrb	r3, [r7, #12]
 80069cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80069d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80069d2:	4313      	orrs	r3, r2
 80069d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80069d6:	7b3b      	ldrb	r3, [r7, #12]
 80069d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80069dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80069de:	4313      	orrs	r3, r2
 80069e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80069e2:	7b3b      	ldrb	r3, [r7, #12]
 80069e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80069e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80069ea:	4313      	orrs	r3, r2
 80069ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80069ee:	7b3b      	ldrb	r3, [r7, #12]
 80069f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80069f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80069f6:	4313      	orrs	r3, r2
 80069f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80069fa:	7b3b      	ldrb	r3, [r7, #12]
 80069fc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006a00:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006a02:	4313      	orrs	r3, r2
 8006a04:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006a06:	7b3b      	ldrb	r3, [r7, #12]
 8006a08:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006a0c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006a12:	7b7b      	ldrb	r3, [r7, #13]
 8006a14:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a18:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006a1e:	7b7b      	ldrb	r3, [r7, #13]
 8006a20:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006a24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006a26:	4313      	orrs	r3, r2
 8006a28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006a2a:	7b7b      	ldrb	r3, [r7, #13]
 8006a2c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006a30:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8006a32:	4313      	orrs	r3, r2
 8006a34:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006a36:	7b7b      	ldrb	r3, [r7, #13]
 8006a38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006a3c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006a42:	7b7b      	ldrb	r3, [r7, #13]
 8006a44:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006a48:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006a4e:	7b7b      	ldrb	r3, [r7, #13]
 8006a50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006a54:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006a56:	4313      	orrs	r3, r2
 8006a58:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006a5a:	7b7b      	ldrb	r3, [r7, #13]
 8006a5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006a60:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8006a62:	4313      	orrs	r3, r2
 8006a64:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006a66:	7b7b      	ldrb	r3, [r7, #13]
 8006a68:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006a6c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d163      	bne.n	8006b3e <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 8006a76:	f107 030b 	add.w	r3, r7, #11
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 faf3 	bl	8007068 <lsm6dsr_fsm_data_rate_get>
 8006a82:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d159      	bne.n	8006b3e <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8006a8a:	7afb      	ldrb	r3, [r7, #11]
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d853      	bhi.n	8006b38 <lsm6dsr_gy_data_rate_set+0x1a8>
 8006a90:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <lsm6dsr_gy_data_rate_set+0x108>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006aa9 	.word	0x08006aa9
 8006a9c:	08006abb 	.word	0x08006abb
 8006aa0:	08006ad9 	.word	0x08006ad9
 8006aa4:	08006b03 	.word	0x08006b03
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006aa8:	78fb      	ldrb	r3, [r7, #3]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d102      	bne.n	8006ab4 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006ab2:	e045      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	75fb      	strb	r3, [r7, #23]
            break;
 8006ab8:	e042      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006aba:	78fb      	ldrb	r3, [r7, #3]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d102      	bne.n	8006ac6 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006ac4:	e03c      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006ac6:	78fb      	ldrb	r3, [r7, #3]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d102      	bne.n	8006ad2 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006acc:	2302      	movs	r3, #2
 8006ace:	75fb      	strb	r3, [r7, #23]
            break;
 8006ad0:	e036      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006ad2:	78fb      	ldrb	r3, [r7, #3]
 8006ad4:	75fb      	strb	r3, [r7, #23]
            break;
 8006ad6:	e033      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006ae2:	e02d      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d102      	bne.n	8006af0 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006aea:	2303      	movs	r3, #3
 8006aec:	75fb      	strb	r3, [r7, #23]
            break;
 8006aee:	e027      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d102      	bne.n	8006afc <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006af6:	2303      	movs	r3, #3
 8006af8:	75fb      	strb	r3, [r7, #23]
            break;
 8006afa:	e021      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	75fb      	strb	r3, [r7, #23]
            break;
 8006b00:	e01e      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d102      	bne.n	8006b0e <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006b08:	2304      	movs	r3, #4
 8006b0a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006b0c:	e018      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006b0e:	78fb      	ldrb	r3, [r7, #3]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d102      	bne.n	8006b1a <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006b14:	2304      	movs	r3, #4
 8006b16:	75fb      	strb	r3, [r7, #23]
            break;
 8006b18:	e012      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d102      	bne.n	8006b26 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006b20:	2304      	movs	r3, #4
 8006b22:	75fb      	strb	r3, [r7, #23]
            break;
 8006b24:	e00c      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d102      	bne.n	8006b32 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	75fb      	strb	r3, [r7, #23]
            break;
 8006b30:	e006      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006b32:	78fb      	ldrb	r3, [r7, #3]
 8006b34:	75fb      	strb	r3, [r7, #23]
            break;
 8006b36:	e003      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	75fb      	strb	r3, [r7, #23]
            break;
 8006b3c:	e000      	b.n	8006b40 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 8006b3e:	bf00      	nop
    }
  }

  if (ret == 0)
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d107      	bne.n	8006b56 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006b46:	f107 0208 	add.w	r2, r7, #8
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	2111      	movs	r1, #17
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7ff fd5a 	bl	8006608 <lsm6dsr_read_reg>
 8006b54:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10f      	bne.n	8006b7c <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	7a3b      	ldrb	r3, [r7, #8]
 8006b66:	f362 1307 	bfi	r3, r2, #4, #4
 8006b6a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006b6c:	f107 0208 	add.w	r2, r7, #8
 8006b70:	2301      	movs	r3, #1
 8006b72:	2111      	movs	r1, #17
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff fd5f 	bl	8006638 <lsm6dsr_write_reg>
 8006b7a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8006b7c:	693b      	ldr	r3, [r7, #16]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop

08006b88 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006b94:	f107 0208 	add.w	r2, r7, #8
 8006b98:	2301      	movs	r3, #1
 8006b9a:	2112      	movs	r1, #18
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7ff fd33 	bl	8006608 <lsm6dsr_read_reg>
 8006ba2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10f      	bne.n	8006bca <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	7a3b      	ldrb	r3, [r7, #8]
 8006bb4:	f362 1386 	bfi	r3, r2, #6, #1
 8006bb8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006bba:	f107 0208 	add.w	r2, r7, #8
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	2112      	movs	r1, #18
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fd38 	bl	8006638 <lsm6dsr_write_reg>
 8006bc8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006bca:	68fb      	ldr	r3, [r7, #12]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006bde:	f107 0208 	add.w	r2, r7, #8
 8006be2:	2301      	movs	r3, #1
 8006be4:	211e      	movs	r1, #30
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7ff fd0e 	bl	8006608 <lsm6dsr_read_reg>
 8006bec:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8006bee:	7a3b      	ldrb	r3, [r7, #8]
 8006bf0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	701a      	strb	r2, [r3, #0]

  return ret;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006c10:	f107 0208 	add.w	r2, r7, #8
 8006c14:	2301      	movs	r3, #1
 8006c16:	211e      	movs	r1, #30
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7ff fcf5 	bl	8006608 <lsm6dsr_read_reg>
 8006c1e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8006c20:	7a3b      	ldrb	r3, [r7, #8]
 8006c22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	461a      	mov	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	701a      	strb	r2, [r3, #0]

  return ret;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006c42:	f107 0208 	add.w	r2, r7, #8
 8006c46:	2301      	movs	r3, #1
 8006c48:	211e      	movs	r1, #30
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7ff fcdc 	bl	8006608 <lsm6dsr_read_reg>
 8006c50:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8006c52:	7a3b      	ldrb	r3, [r7, #8]
 8006c54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	701a      	strb	r2, [r3, #0]

  return ret;
 8006c60:	68fb      	ldr	r3, [r7, #12]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 8006c74:	f107 0208 	add.w	r2, r7, #8
 8006c78:	2302      	movs	r3, #2
 8006c7a:	2120      	movs	r1, #32
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff fcc3 	bl	8006608 <lsm6dsr_read_reg>
 8006c82:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 8006c84:	7a7b      	ldrb	r3, [r7, #9]
 8006c86:	b21a      	sxth	r2, r3
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	7a3b      	ldrb	r3, [r7, #8]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	4413      	add	r3, r2
 8006c9e:	b29b      	uxth	r3, r3
 8006ca0:	b21a      	sxth	r2, r3
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	801a      	strh	r2, [r3, #0]

  return ret;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 8006cba:	f107 020c 	add.w	r2, r7, #12
 8006cbe:	2306      	movs	r3, #6
 8006cc0:	2122      	movs	r1, #34	; 0x22
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff fca0 	bl	8006608 <lsm6dsr_read_reg>
 8006cc8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006cca:	7b7b      	ldrb	r3, [r7, #13]
 8006ccc:	b21a      	sxth	r2, r3
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	021b      	lsls	r3, r3, #8
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	7b3b      	ldrb	r3, [r7, #12]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	4413      	add	r3, r2
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	b21a      	sxth	r2, r3
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006cec:	7bfa      	ldrb	r2, [r7, #15]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	3302      	adds	r3, #2
 8006cf2:	b212      	sxth	r2, r2
 8006cf4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	3302      	adds	r3, #2
 8006cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	4413      	add	r3, r2
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	3302      	adds	r3, #2
 8006d10:	b212      	sxth	r2, r2
 8006d12:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006d14:	7c7a      	ldrb	r2, [r7, #17]
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	b212      	sxth	r2, r2
 8006d1c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	3304      	adds	r3, #4
 8006d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	021b      	lsls	r3, r3, #8
 8006d2a:	b29a      	uxth	r2, r3
 8006d2c:	7c3b      	ldrb	r3, [r7, #16]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	4413      	add	r3, r2
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	3304      	adds	r3, #4
 8006d38:	b212      	sxth	r2, r2
 8006d3a:	801a      	strh	r2, [r3, #0]

  return ret;
 8006d3c:	697b      	ldr	r3, [r7, #20]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b086      	sub	sp, #24
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 8006d50:	f107 020c 	add.w	r2, r7, #12
 8006d54:	2306      	movs	r3, #6
 8006d56:	2128      	movs	r1, #40	; 0x28
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff fc55 	bl	8006608 <lsm6dsr_read_reg>
 8006d5e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006d60:	7b7b      	ldrb	r3, [r7, #13]
 8006d62:	b21a      	sxth	r2, r3
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	021b      	lsls	r3, r3, #8
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	7b3b      	ldrb	r3, [r7, #12]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	4413      	add	r3, r2
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	b21a      	sxth	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006d82:	7bfa      	ldrb	r2, [r7, #15]
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	3302      	adds	r3, #2
 8006d88:	b212      	sxth	r2, r2
 8006d8a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	3302      	adds	r3, #2
 8006d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	7bbb      	ldrb	r3, [r7, #14]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4413      	add	r3, r2
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	3302      	adds	r3, #2
 8006da6:	b212      	sxth	r2, r2
 8006da8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006daa:	7c7a      	ldrb	r2, [r7, #17]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	3304      	adds	r3, #4
 8006db0:	b212      	sxth	r2, r2
 8006db2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	3304      	adds	r3, #4
 8006db8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	7c3b      	ldrb	r3, [r7, #16]
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	b212      	sxth	r2, r2
 8006dd0:	801a      	strh	r2, [r3, #0]

  return ret;
 8006dd2:	697b      	ldr	r3, [r7, #20]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8006de8:	f107 0208 	add.w	r2, r7, #8
 8006dec:	2301      	movs	r3, #1
 8006dee:	2101      	movs	r1, #1
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7ff fc09 	bl	8006608 <lsm6dsr_read_reg>
 8006df6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10f      	bne.n	8006e1e <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8006dfe:	78fb      	ldrb	r3, [r7, #3]
 8006e00:	f003 0303 	and.w	r3, r3, #3
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	7a3b      	ldrb	r3, [r7, #8]
 8006e08:	f362 1387 	bfi	r3, r2, #6, #2
 8006e0c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8006e0e:	f107 0208 	add.w	r2, r7, #8
 8006e12:	2301      	movs	r3, #1
 8006e14:	2101      	movs	r1, #1
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff fc0e 	bl	8006638 <lsm6dsr_write_reg>
 8006e1c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8006e32:	2301      	movs	r3, #1
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	210f      	movs	r1, #15
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff fbe5 	bl	8006608 <lsm6dsr_read_reg>
 8006e3e:	60f8      	str	r0, [r7, #12]

  return ret;
 8006e40:	68fb      	ldr	r3, [r7, #12]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	460b      	mov	r3, r1
 8006e54:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006e56:	f107 0208 	add.w	r2, r7, #8
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	2112      	movs	r1, #18
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7ff fbd2 	bl	8006608 <lsm6dsr_read_reg>
 8006e64:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10f      	bne.n	8006e8c <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	7a3b      	ldrb	r3, [r7, #8]
 8006e76:	f362 0300 	bfi	r3, r2, #0, #1
 8006e7a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006e7c:	f107 0208 	add.w	r2, r7, #8
 8006e80:	2301      	movs	r3, #1
 8006e82:	2112      	movs	r1, #18
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff fbd7 	bl	8006638 <lsm6dsr_write_reg>
 8006e8a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b084      	sub	sp, #16
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006ea0:	f107 0208 	add.w	r2, r7, #8
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	2112      	movs	r1, #18
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff fbad 	bl	8006608 <lsm6dsr_read_reg>
 8006eae:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8006eb0:	7a3b      	ldrb	r3, [r7, #8]
 8006eb2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	461a      	mov	r2, r3
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	701a      	strb	r2, [r3, #0]

  return ret;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006ed4:	f107 0208 	add.w	r2, r7, #8
 8006ed8:	2301      	movs	r3, #1
 8006eda:	2110      	movs	r1, #16
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff fb93 	bl	8006608 <lsm6dsr_read_reg>
 8006ee2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10f      	bne.n	8006f0a <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	7a3b      	ldrb	r3, [r7, #8]
 8006ef4:	f362 0341 	bfi	r3, r2, #1, #1
 8006ef8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006efa:	f107 0208 	add.w	r2, r7, #8
 8006efe:	2301      	movs	r3, #1
 8006f00:	2110      	movs	r1, #16
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7ff fb98 	bl	8006638 <lsm6dsr_write_reg>
 8006f08:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8006f20:	f107 0208 	add.w	r2, r7, #8
 8006f24:	2301      	movs	r3, #1
 8006f26:	2117      	movs	r1, #23
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff fb6d 	bl	8006608 <lsm6dsr_read_reg>
 8006f2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d121      	bne.n	8006f7a <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8006f36:	78fb      	ldrb	r3, [r7, #3]
 8006f38:	091b      	lsrs	r3, r3, #4
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	7a3b      	ldrb	r3, [r7, #8]
 8006f42:	f362 0382 	bfi	r3, r2, #2, #1
 8006f46:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	095b      	lsrs	r3, r3, #5
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	7a3b      	ldrb	r3, [r7, #8]
 8006f54:	f362 1304 	bfi	r3, r2, #4, #1
 8006f58:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8006f5a:	78fb      	ldrb	r3, [r7, #3]
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	7a3b      	ldrb	r3, [r7, #8]
 8006f64:	f362 1347 	bfi	r3, r2, #5, #3
 8006f68:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 8006f6a:	f107 0208 	add.w	r2, r7, #8
 8006f6e:	2301      	movs	r3, #1
 8006f70:	2117      	movs	r1, #23
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fb60 	bl	8006638 <lsm6dsr_write_reg>
 8006f78:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006f90:	f107 0210 	add.w	r2, r7, #16
 8006f94:	2301      	movs	r3, #1
 8006f96:	2118      	movs	r1, #24
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7ff fb35 	bl	8006608 <lsm6dsr_read_reg>
 8006f9e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d111      	bne.n	8006fca <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006fa6:	78fb      	ldrb	r3, [r7, #3]
 8006fa8:	09db      	lsrs	r3, r3, #7
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	7c3b      	ldrb	r3, [r7, #16]
 8006fb4:	f362 0341 	bfi	r3, r2, #1, #1
 8006fb8:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8006fba:	f107 0210 	add.w	r2, r7, #16
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	2118      	movs	r1, #24
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff fb38 	bl	8006638 <lsm6dsr_write_reg>
 8006fc8:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d107      	bne.n	8006fe0 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8006fd0:	f107 020c 	add.w	r2, r7, #12
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	2162      	movs	r1, #98	; 0x62
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff fb15 	bl	8006608 <lsm6dsr_read_reg>
 8006fde:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10f      	bne.n	8007006 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8006fe6:	78fb      	ldrb	r3, [r7, #3]
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	7b3b      	ldrb	r3, [r7, #12]
 8006ff0:	f362 03c4 	bfi	r3, r2, #3, #2
 8006ff4:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8006ff6:	f107 020c 	add.w	r2, r7, #12
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	2162      	movs	r1, #98	; 0x62
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff fb1a 	bl	8006638 <lsm6dsr_write_reg>
 8007004:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8007006:	697b      	ldr	r3, [r7, #20]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 800701a:	2102      	movs	r1, #2
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff fedd 	bl	8006ddc <lsm6dsr_mem_bank_set>
 8007022:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 800702a:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 800702c:	2301      	movs	r3, #1
 800702e:	2146      	movs	r1, #70	; 0x46
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff fae9 	bl	8006608 <lsm6dsr_read_reg>
 8007036:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d107      	bne.n	800704e <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8007042:	2301      	movs	r3, #1
 8007044:	2147      	movs	r1, #71	; 0x47
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fade 	bl	8006608 <lsm6dsr_read_reg>
 800704c:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007054:	2100      	movs	r1, #0
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7ff fec0 	bl	8006ddc <lsm6dsr_mem_bank_set>
 800705c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800705e:	68fb      	ldr	r3, [r7, #12]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8007072:	2102      	movs	r1, #2
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff feb1 	bl	8006ddc <lsm6dsr_mem_bank_set>
 800707a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d107      	bne.n	8007092 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8007082:	f107 0208 	add.w	r2, r7, #8
 8007086:	2301      	movs	r3, #1
 8007088:	215f      	movs	r1, #95	; 0x5f
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff fabc 	bl	8006608 <lsm6dsr_read_reg>
 8007090:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d104      	bne.n	80070a2 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8007098:	2100      	movs	r1, #0
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff fe9e 	bl	8006ddc <lsm6dsr_mem_bank_set>
 80070a0:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80070a2:	7a3b      	ldrb	r3, [r7, #8]
 80070a4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d81a      	bhi.n	80070e4 <lsm6dsr_fsm_data_rate_get+0x7c>
 80070ae:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <lsm6dsr_fsm_data_rate_get+0x4c>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	080070c5 	.word	0x080070c5
 80070b8:	080070cd 	.word	0x080070cd
 80070bc:	080070d5 	.word	0x080070d5
 80070c0:	080070dd 	.word	0x080070dd
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]
      break;
 80070ca:	e00f      	b.n	80070ec <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2201      	movs	r2, #1
 80070d0:	701a      	strb	r2, [r3, #0]
      break;
 80070d2:	e00b      	b.n	80070ec <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2202      	movs	r2, #2
 80070d8:	701a      	strb	r2, [r3, #0]
      break;
 80070da:	e007      	b.n	80070ec <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	2203      	movs	r2, #3
 80070e0:	701a      	strb	r2, [r3, #0]
      break;
 80070e2:	e003      	b.n	80070ec <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2200      	movs	r2, #0
 80070e8:	701a      	strb	r2, [r3, #0]
      break;
 80070ea:	bf00      	nop
  }

  return ret;
 80070ec:	68fb      	ldr	r3, [r7, #12]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop

080070f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8007104:	2300      	movs	r3, #0
 8007106:	617b      	str	r3, [r7, #20]
  while (size--) {
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	1e5a      	subs	r2, r3, #1
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	bf14      	ite	ne
 8007112:	2301      	movne	r3, #1
 8007114:	2300      	moveq	r3, #0
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00e      	beq.n	800713a <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	1c59      	adds	r1, r3, #1
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	4619      	mov	r1, r3
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	4790      	blx	r2
 8007130:	4602      	mov	r2, r0
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	4413      	add	r3, r2
 8007136:	617b      	str	r3, [r7, #20]
  while (size--) {
 8007138:	e7e6      	b.n	8007108 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800713a:	697b      	ldr	r3, [r7, #20]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	4a06      	ldr	r2, [pc, #24]	; (8007168 <_ZN5PrintC1Ev+0x24>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4618      	mov	r0, r3
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	0801bdcc 	.word	0x0801bdcc

0800716c <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4618      	mov	r0, r3
 8007178:	f7ff ffe4 	bl	8007144 <_ZN5PrintC1Ev>
 800717c:	4a05      	ldr	r2, [pc, #20]	; (8007194 <_ZN6StreamC1Ev+0x28>)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007188:	609a      	str	r2, [r3, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	0801bdfc 	.word	0x0801bdfc

08007198 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7ff ffe1 	bl	800716c <_ZN6StreamC1Ev>
 80071aa:	4a16      	ldr	r2, [pc, #88]	; (8007204 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3390      	adds	r3, #144	; 0x90
 80071ba:	2220      	movs	r2, #32
 80071bc:	2100      	movs	r1, #0
 80071be:	4618      	mov	r0, r3
 80071c0:	f00e fc2c 	bl	8015a1c <memset>
  rxBufferIndex = 0;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	0801bddc 	.word	0x0801bddc

08007208 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800721a:	2b00      	cmp	r3, #0
 800721c:	d01d      	beq.n	800725a <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007224:	2b1f      	cmp	r3, #31
 8007226:	d901      	bls.n	800722c <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8007228:	2300      	movs	r3, #0
 800722a:	e028      	b.n	800727e <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007232:	4619      	mov	r1, r3
 8007234:	78fa      	ldrb	r2, [r7, #3]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	440b      	add	r3, r1
 800723a:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007242:	3301      	adds	r3, #1
 8007244:	b2da      	uxtb	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8007258:	e010      	b.n	800727c <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f984 	bl	8007568 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8007260:	1cfb      	adds	r3, r7, #3
 8007262:	2201      	movs	r2, #1
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f8b7 	bl	80073da <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f949 	bl	8007504 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	333c      	adds	r3, #60	; 0x3c
 8007276:	4618      	mov	r0, r3
 8007278:	f001 fde8 	bl	8008e4c <HAL_I2C_EnableListen_IT>
  }
  return 1;
 800727c:	2301      	movs	r3, #1
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af00      	add	r7, sp, #0
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007298:	2b00      	cmp	r3, #0
 800729a:	d013      	beq.n	80072c4 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d21e      	bcs.n	80072e6 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	440a      	add	r2, r1
 80072b4:	7812      	ldrb	r2, [r2, #0]
 80072b6:	4611      	mov	r1, r2
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	3301      	adds	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	e7ed      	b.n	80072a0 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 f94f 	bl	8007568 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	461a      	mov	r2, r3
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f882 	bl	80073da <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f914 	bl	8007504 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	333c      	adds	r3, #60	; 0x3c
 80072e0:	4618      	mov	r0, r3
 80072e2:	f001 fdb3 	bl	8008e4c <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80072e6:	687b      	ldr	r3, [r7, #4]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	461a      	mov	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8007308:	b2db      	uxtb	r3, r3
 800730a:	1ad3      	subs	r3, r2, r3
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  int value = -1;
 8007320:	f04f 33ff 	mov.w	r3, #4294967295
 8007324:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800732c:	b2da      	uxtb	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007334:	b2db      	uxtb	r3, r3
 8007336:	429a      	cmp	r2, r3
 8007338:	bf34      	ite	cc
 800733a:	2301      	movcc	r3, #1
 800733c:	2300      	movcs	r3, #0
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b00      	cmp	r3, #0
 8007342:	d012      	beq.n	800736a <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4413      	add	r3, r2
 8007352:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007356:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800735e:	b2db      	uxtb	r3, r3
 8007360:	3301      	adds	r3, #1
 8007362:	b2da      	uxtb	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 800736a:	68fb      	ldr	r3, [r7, #12]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  int value = -1;
 8007380:	f04f 33ff 	mov.w	r3, #4294967295
 8007384:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800738c:	b2da      	uxtb	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007394:	b2db      	uxtb	r3, r3
 8007396:	429a      	cmp	r2, r3
 8007398:	bf34      	ite	cc
 800739a:	2301      	movcc	r3, #1
 800739c:	2300      	movcs	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4413      	add	r3, r2
 80073b2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80073b6:	60fb      	str	r3, [r7, #12]
  }

  return value;
 80073b8:	68fb      	ldr	r3, [r7, #12]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3714      	adds	r7, #20
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80073ce:	bf00      	nop
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 80073da:	b480      	push	{r7}
 80073dc:	b089      	sub	sp, #36	; 0x24
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ee:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	dd41      	ble.n	800747a <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80073f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073fa:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007400:	695b      	ldr	r3, [r3, #20]
 8007402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007406:	2b80      	cmp	r3, #128	; 0x80
 8007408:	bf14      	ite	ne
 800740a:	2301      	movne	r3, #1
 800740c:	2300      	moveq	r3, #0
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	3b01      	subs	r3, #1
 8007418:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1ed      	bne.n	80073fc <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8007420:	f04f 33ff 	mov.w	r3, #4294967295
 8007424:	e068      	b.n	80074f8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	60ba      	str	r2, [r7, #8]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	611a      	str	r2, [r3, #16]
        length--;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3b01      	subs	r3, #1
 8007438:	607b      	str	r3, [r7, #4]
        size++;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	3301      	adds	r3, #1
 800743e:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	f003 0304 	and.w	r3, r3, #4
 800744a:	2b04      	cmp	r3, #4
 800744c:	d104      	bne.n	8007458 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8007454:	2301      	movs	r3, #1
 8007456:	e000      	b.n	800745a <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8007458:	2300      	movs	r3, #0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0c8      	beq.n	80073f0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	60ba      	str	r2, [r7, #8]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	611a      	str	r2, [r3, #16]
            length--;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3b01      	subs	r3, #1
 8007470:	607b      	str	r3, [r7, #4]
            size++;
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	3301      	adds	r3, #1
 8007476:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8007478:	e7ba      	b.n	80073f0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 800747a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800747e:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800748a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800748e:	bf14      	ite	ne
 8007490:	2301      	movne	r3, #1
 8007492:	2300      	moveq	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d008      	beq.n	80074ac <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	3b01      	subs	r3, #1
 800749e:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1ec      	bne.n	8007480 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295
 80074aa:	e025      	b.n	80074f8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074b4:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 80074b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074ba:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	bf0c      	ite	eq
 80074ca:	2301      	moveq	r3, #1
 80074cc:	2300      	movne	r3, #0
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d008      	beq.n	80074e6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1ed      	bne.n	80074bc <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 80074e0:	f04f 33ff 	mov.w	r3, #4294967295
 80074e4:	e008      	b.n	80074f8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2220      	movs	r2, #32
 80074ea:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80074f6:	69bb      	ldr	r3, [r7, #24]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3724      	adds	r7, #36	; 0x24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007510:	4a12      	ldr	r2, [pc, #72]	; (800755c <_ZN7TwoWire15enableInterruptEv+0x58>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d106      	bne.n	8007524 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8007516:	2049      	movs	r0, #73	; 0x49
 8007518:	f000 fe22 	bl	8008160 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800751c:	2048      	movs	r0, #72	; 0x48
 800751e:	f000 fe1f 	bl	8008160 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8007522:	e016      	b.n	8007552 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007528:	4a0d      	ldr	r2, [pc, #52]	; (8007560 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d106      	bne.n	800753c <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800752e:	2022      	movs	r0, #34	; 0x22
 8007530:	f000 fe16 	bl	8008160 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8007534:	2021      	movs	r0, #33	; 0x21
 8007536:	f000 fe13 	bl	8008160 <HAL_NVIC_EnableIRQ>
}
 800753a:	e00a      	b.n	8007552 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007540:	4a08      	ldr	r2, [pc, #32]	; (8007564 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d105      	bne.n	8007552 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8007546:	2020      	movs	r0, #32
 8007548:	f000 fe0a 	bl	8008160 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800754c:	201f      	movs	r0, #31
 800754e:	f000 fe07 	bl	8008160 <HAL_NVIC_EnableIRQ>
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	40005c00 	.word	0x40005c00
 8007560:	40005800 	.word	0x40005800
 8007564:	40005400 	.word	0x40005400

08007568 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007574:	4a12      	ldr	r2, [pc, #72]	; (80075c0 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d106      	bne.n	8007588 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800757a:	2049      	movs	r0, #73	; 0x49
 800757c:	f000 fdfe 	bl	800817c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8007580:	2048      	movs	r0, #72	; 0x48
 8007582:	f000 fdfb 	bl	800817c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8007586:	e016      	b.n	80075b6 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758c:	4a0d      	ldr	r2, [pc, #52]	; (80075c4 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d106      	bne.n	80075a0 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8007592:	2022      	movs	r0, #34	; 0x22
 8007594:	f000 fdf2 	bl	800817c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8007598:	2021      	movs	r0, #33	; 0x21
 800759a:	f000 fdef 	bl	800817c <HAL_NVIC_DisableIRQ>
}
 800759e:	e00a      	b.n	80075b6 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a4:	4a08      	ldr	r2, [pc, #32]	; (80075c8 <_ZN7TwoWire16disableInterruptEv+0x60>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d105      	bne.n	80075b6 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80075aa:	2020      	movs	r0, #32
 80075ac:	f000 fde6 	bl	800817c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80075b0:	201f      	movs	r0, #31
 80075b2:	f000 fde3 	bl	800817c <HAL_NVIC_DisableIRQ>
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	40005c00 	.word	0x40005c00
 80075c4:	40005800 	.word	0x40005800
 80075c8:	40005400 	.word	0x40005400

080075cc <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d110      	bne.n	80075fe <_Z41__static_initialization_and_destruction_0ii+0x32>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d10b      	bne.n	80075fe <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 80075e6:	4908      	ldr	r1, [pc, #32]	; (8007608 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80075e8:	4808      	ldr	r0, [pc, #32]	; (800760c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80075ea:	f7ff fdd5 	bl	8007198 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 80075ee:	4908      	ldr	r1, [pc, #32]	; (8007610 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80075f0:	4808      	ldr	r0, [pc, #32]	; (8007614 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80075f2:	f7ff fdd1 	bl	8007198 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 80075f6:	4908      	ldr	r1, [pc, #32]	; (8007618 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80075f8:	4808      	ldr	r0, [pc, #32]	; (800761c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80075fa:	f7ff fdcd 	bl	8007198 <_ZN7TwoWireC1EP11I2C_TypeDef>
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	40005400 	.word	0x40005400
 800760c:	200004fc 	.word	0x200004fc
 8007610:	40005800 	.word	0x40005800
 8007614:	200005b4 	.word	0x200005b4
 8007618:	40005c00 	.word	0x40005c00
 800761c:	2000066c 	.word	0x2000066c

08007620 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
 8007624:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007628:	2001      	movs	r0, #1
 800762a:	f7ff ffcf 	bl	80075cc <_Z41__static_initialization_and_destruction_0ii>
 800762e:	bd80      	pop	{r7, pc}

08007630 <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
			sx126x_set_tx(&SRADIO_SPI, 1000, SRADIO_BUFFER_SIZE);
			TxProtocol((uint8_t*) buffer, strlen(buffer));
		}
	#endif

	print((char*) "Radio sending:\t");
 8007638:	4804      	ldr	r0, [pc, #16]	; (800764c <MRT_radio_tx+0x1c>)
 800763a:	f7f9 fd05 	bl	8001048 <print>
	println(buffer);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7f9 fce4 	bl	800100c <println>
}
 8007644:	bf00      	nop
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	0801bbcc 	.word	0x0801bbcc

08007650 <MRT_radio_Init>:
	println(buffer);
}



void MRT_radio_Init(void){
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
	println("\r\nRadio Init");
 8007654:	4803      	ldr	r0, [pc, #12]	; (8007664 <MRT_radio_Init+0x14>)
 8007656:	f7f9 fcd9 	bl	800100c <println>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	//Tx_setup();
	Rx_setup();
	println("OK");
	#else
	println("\tNo radio currently in use");
 800765a:	4803      	ldr	r0, [pc, #12]	; (8007668 <MRT_radio_Init+0x18>)
 800765c:	f7f9 fcd6 	bl	800100c <println>
	#endif
}
 8007660:	bf00      	nop
 8007662:	bd80      	pop	{r7, pc}
 8007664:	0801bbf0 	.word	0x0801bbf0
 8007668:	0801bc00 	.word	0x0801bc00

0800766c <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 8007670:	f7ff ffee 	bl	8007650 <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);
 8007674:	4802      	ldr	r0, [pc, #8]	; (8007680 <MRT_TELEMETRY_Init+0x14>)
 8007676:	f002 f837 	bl	80096e8 <HAL_IWDG_Refresh>
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
		#else
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, no_print); //Doesn't print the internal commands
		#endif
	#endif
}
 800767a:	bf00      	nop
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	200062a8 	.word	0x200062a8

08007684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007688:	4b0e      	ldr	r3, [pc, #56]	; (80076c4 <HAL_Init+0x40>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a0d      	ldr	r2, [pc, #52]	; (80076c4 <HAL_Init+0x40>)
 800768e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007694:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <HAL_Init+0x40>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a0a      	ldr	r2, [pc, #40]	; (80076c4 <HAL_Init+0x40>)
 800769a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800769e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80076a0:	4b08      	ldr	r3, [pc, #32]	; (80076c4 <HAL_Init+0x40>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a07      	ldr	r2, [pc, #28]	; (80076c4 <HAL_Init+0x40>)
 80076a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076ac:	2003      	movs	r0, #3
 80076ae:	f000 fd30 	bl	8008112 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80076b2:	200f      	movs	r0, #15
 80076b4:	f7fb fe3e 	bl	8003334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80076b8:	f7fb fe10 	bl	80032dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	40023c00 	.word	0x40023c00

080076c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80076c8:	b480      	push	{r7}
 80076ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <HAL_IncTick+0x20>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	461a      	mov	r2, r3
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <HAL_IncTick+0x24>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4413      	add	r3, r2
 80076d8:	4a04      	ldr	r2, [pc, #16]	; (80076ec <HAL_IncTick+0x24>)
 80076da:	6013      	str	r3, [r2, #0]
}
 80076dc:	bf00      	nop
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	200000b4 	.word	0x200000b4
 80076ec:	2000738c 	.word	0x2000738c

080076f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0
  return uwTick;
 80076f4:	4b03      	ldr	r3, [pc, #12]	; (8007704 <HAL_GetTick+0x14>)
 80076f6:	681b      	ldr	r3, [r3, #0]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	2000738c 	.word	0x2000738c

08007708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007710:	f7ff ffee 	bl	80076f0 <HAL_GetTick>
 8007714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d005      	beq.n	800772e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007722:	4b0a      	ldr	r3, [pc, #40]	; (800774c <HAL_Delay+0x44>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800772e:	bf00      	nop
 8007730:	f7ff ffde 	bl	80076f0 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	429a      	cmp	r2, r3
 800773e:	d8f7      	bhi.n	8007730 <HAL_Delay+0x28>
  {
  }
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	200000b4 	.word	0x200000b4

08007750 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e033      	b.n	80077ce <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	2b00      	cmp	r3, #0
 800776c:	d109      	bne.n	8007782 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7f9 feae 	bl	80014d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	f003 0310 	and.w	r3, r3, #16
 800778a:	2b00      	cmp	r3, #0
 800778c:	d118      	bne.n	80077c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007796:	f023 0302 	bic.w	r3, r3, #2
 800779a:	f043 0202 	orr.w	r2, r3, #2
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fae8 	bl	8007d78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f023 0303 	bic.w	r3, r3, #3
 80077b6:	f043 0201 	orr.w	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	641a      	str	r2, [r3, #64]	; 0x40
 80077be:	e001      	b.n	80077c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d101      	bne.n	80077f2 <HAL_ADC_Start+0x1a>
 80077ee:	2302      	movs	r3, #2
 80077f0:	e0b2      	b.n	8007958 <HAL_ADC_Start+0x180>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b01      	cmp	r3, #1
 8007806:	d018      	beq.n	800783a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0201 	orr.w	r2, r2, #1
 8007816:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007818:	4b52      	ldr	r3, [pc, #328]	; (8007964 <HAL_ADC_Start+0x18c>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a52      	ldr	r2, [pc, #328]	; (8007968 <HAL_ADC_Start+0x190>)
 800781e:	fba2 2303 	umull	r2, r3, r2, r3
 8007822:	0c9a      	lsrs	r2, r3, #18
 8007824:	4613      	mov	r3, r2
 8007826:	005b      	lsls	r3, r3, #1
 8007828:	4413      	add	r3, r2
 800782a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800782c:	e002      	b.n	8007834 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	3b01      	subs	r3, #1
 8007832:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1f9      	bne.n	800782e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b01      	cmp	r3, #1
 8007846:	d17a      	bne.n	800793e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007866:	2b00      	cmp	r3, #0
 8007868:	d007      	beq.n	800787a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007872:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007886:	d106      	bne.n	8007896 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788c:	f023 0206 	bic.w	r2, r3, #6
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	645a      	str	r2, [r3, #68]	; 0x44
 8007894:	e002      	b.n	800789c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80078a4:	4b31      	ldr	r3, [pc, #196]	; (800796c <HAL_ADC_Start+0x194>)
 80078a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80078b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f003 031f 	and.w	r3, r3, #31
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d12a      	bne.n	8007914 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a2b      	ldr	r2, [pc, #172]	; (8007970 <HAL_ADC_Start+0x198>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d015      	beq.n	80078f4 <HAL_ADC_Start+0x11c>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a29      	ldr	r2, [pc, #164]	; (8007974 <HAL_ADC_Start+0x19c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d105      	bne.n	80078de <HAL_ADC_Start+0x106>
 80078d2:	4b26      	ldr	r3, [pc, #152]	; (800796c <HAL_ADC_Start+0x194>)
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f003 031f 	and.w	r3, r3, #31
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a25      	ldr	r2, [pc, #148]	; (8007978 <HAL_ADC_Start+0x1a0>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d136      	bne.n	8007956 <HAL_ADC_Start+0x17e>
 80078e8:	4b20      	ldr	r3, [pc, #128]	; (800796c <HAL_ADC_Start+0x194>)
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d130      	bne.n	8007956 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d129      	bne.n	8007956 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007910:	609a      	str	r2, [r3, #8]
 8007912:	e020      	b.n	8007956 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a15      	ldr	r2, [pc, #84]	; (8007970 <HAL_ADC_Start+0x198>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d11b      	bne.n	8007956 <HAL_ADC_Start+0x17e>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d114      	bne.n	8007956 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800793a:	609a      	str	r2, [r3, #8]
 800793c:	e00b      	b.n	8007956 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	f043 0210 	orr.w	r2, r3, #16
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794e:	f043 0201 	orr.w	r2, r3, #1
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3714      	adds	r7, #20
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	20000088 	.word	0x20000088
 8007968:	431bde83 	.word	0x431bde83
 800796c:	40012300 	.word	0x40012300
 8007970:	40012000 	.word	0x40012000
 8007974:	40012100 	.word	0x40012100
 8007978:	40012200 	.word	0x40012200

0800797c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800798a:	2b01      	cmp	r3, #1
 800798c:	d101      	bne.n	8007992 <HAL_ADC_Stop+0x16>
 800798e:	2302      	movs	r3, #2
 8007990:	e021      	b.n	80079d6 <HAL_ADC_Stop+0x5a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689a      	ldr	r2, [r3, #8]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f022 0201 	bic.w	r2, r2, #1
 80079a8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d109      	bne.n	80079cc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80079c0:	f023 0301 	bic.w	r3, r3, #1
 80079c4:	f043 0201 	orr.w	r2, r3, #1
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
 80079ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079fe:	d113      	bne.n	8007a28 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a0e:	d10b      	bne.n	8007a28 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a14:	f043 0220 	orr.w	r2, r3, #32
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e063      	b.n	8007af0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007a28:	f7ff fe62 	bl	80076f0 <HAL_GetTick>
 8007a2c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007a2e:	e021      	b.n	8007a74 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a36:	d01d      	beq.n	8007a74 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d007      	beq.n	8007a4e <HAL_ADC_PollForConversion+0x6c>
 8007a3e:	f7ff fe57 	bl	80076f0 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d212      	bcs.n	8007a74 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d00b      	beq.n	8007a74 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a60:	f043 0204 	orr.w	r2, r3, #4
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e03d      	b.n	8007af0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d1d6      	bne.n	8007a30 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f06f 0212 	mvn.w	r2, #18
 8007a8a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d123      	bne.n	8007aee <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d11f      	bne.n	8007aee <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d006      	beq.n	8007aca <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d111      	bne.n	8007aee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d105      	bne.n	8007aee <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	f043 0201 	orr.w	r2, r3, #1
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
	...

08007b14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d101      	bne.n	8007b30 <HAL_ADC_ConfigChannel+0x1c>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	e113      	b.n	8007d58 <HAL_ADC_ConfigChannel+0x244>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b09      	cmp	r3, #9
 8007b3e:	d925      	bls.n	8007b8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68d9      	ldr	r1, [r3, #12]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	4613      	mov	r3, r2
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	4413      	add	r3, r2
 8007b54:	3b1e      	subs	r3, #30
 8007b56:	2207      	movs	r2, #7
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	43da      	mvns	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	400a      	ands	r2, r1
 8007b64:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68d9      	ldr	r1, [r3, #12]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	4618      	mov	r0, r3
 8007b78:	4603      	mov	r3, r0
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	4403      	add	r3, r0
 8007b7e:	3b1e      	subs	r3, #30
 8007b80:	409a      	lsls	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	60da      	str	r2, [r3, #12]
 8007b8a:	e022      	b.n	8007bd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6919      	ldr	r1, [r3, #16]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	4413      	add	r3, r2
 8007ba0:	2207      	movs	r2, #7
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	43da      	mvns	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	400a      	ands	r2, r1
 8007bae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6919      	ldr	r1, [r3, #16]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	4403      	add	r3, r0
 8007bc8:	409a      	lsls	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	2b06      	cmp	r3, #6
 8007bd8:	d824      	bhi.n	8007c24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	3b05      	subs	r3, #5
 8007bec:	221f      	movs	r2, #31
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	43da      	mvns	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	400a      	ands	r2, r1
 8007bfa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4618      	mov	r0, r3
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	3b05      	subs	r3, #5
 8007c16:	fa00 f203 	lsl.w	r2, r0, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	635a      	str	r2, [r3, #52]	; 0x34
 8007c22:	e04c      	b.n	8007cbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	2b0c      	cmp	r3, #12
 8007c2a:	d824      	bhi.n	8007c76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	3b23      	subs	r3, #35	; 0x23
 8007c3e:	221f      	movs	r2, #31
 8007c40:	fa02 f303 	lsl.w	r3, r2, r3
 8007c44:	43da      	mvns	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	400a      	ands	r2, r1
 8007c4c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	3b23      	subs	r3, #35	; 0x23
 8007c68:	fa00 f203 	lsl.w	r2, r0, r3
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	631a      	str	r2, [r3, #48]	; 0x30
 8007c74:	e023      	b.n	8007cbe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	4613      	mov	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	3b41      	subs	r3, #65	; 0x41
 8007c88:	221f      	movs	r2, #31
 8007c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8e:	43da      	mvns	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	400a      	ands	r2, r1
 8007c96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	3b41      	subs	r3, #65	; 0x41
 8007cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007cbe:	4b29      	ldr	r3, [pc, #164]	; (8007d64 <HAL_ADC_ConfigChannel+0x250>)
 8007cc0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a28      	ldr	r2, [pc, #160]	; (8007d68 <HAL_ADC_ConfigChannel+0x254>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d10f      	bne.n	8007cec <HAL_ADC_ConfigChannel+0x1d8>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b12      	cmp	r3, #18
 8007cd2:	d10b      	bne.n	8007cec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a1d      	ldr	r2, [pc, #116]	; (8007d68 <HAL_ADC_ConfigChannel+0x254>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d12b      	bne.n	8007d4e <HAL_ADC_ConfigChannel+0x23a>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a1c      	ldr	r2, [pc, #112]	; (8007d6c <HAL_ADC_ConfigChannel+0x258>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d003      	beq.n	8007d08 <HAL_ADC_ConfigChannel+0x1f4>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b11      	cmp	r3, #17
 8007d06:	d122      	bne.n	8007d4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a11      	ldr	r2, [pc, #68]	; (8007d6c <HAL_ADC_ConfigChannel+0x258>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d111      	bne.n	8007d4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007d2a:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <HAL_ADC_ConfigChannel+0x25c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a11      	ldr	r2, [pc, #68]	; (8007d74 <HAL_ADC_ConfigChannel+0x260>)
 8007d30:	fba2 2303 	umull	r2, r3, r2, r3
 8007d34:	0c9a      	lsrs	r2, r3, #18
 8007d36:	4613      	mov	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007d40:	e002      	b.n	8007d48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	3b01      	subs	r3, #1
 8007d46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1f9      	bne.n	8007d42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	40012300 	.word	0x40012300
 8007d68:	40012000 	.word	0x40012000
 8007d6c:	10000012 	.word	0x10000012
 8007d70:	20000088 	.word	0x20000088
 8007d74:	431bde83 	.word	0x431bde83

08007d78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007d80:	4b79      	ldr	r3, [pc, #484]	; (8007f68 <ADC_Init+0x1f0>)
 8007d82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6859      	ldr	r1, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	021a      	lsls	r2, r3, #8
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6859      	ldr	r1, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689a      	ldr	r2, [r3, #8]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6899      	ldr	r1, [r3, #8]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	430a      	orrs	r2, r1
 8007e04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0a:	4a58      	ldr	r2, [pc, #352]	; (8007f6c <ADC_Init+0x1f4>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d022      	beq.n	8007e56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6899      	ldr	r1, [r3, #8]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	689a      	ldr	r2, [r3, #8]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6899      	ldr	r1, [r3, #8]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	430a      	orrs	r2, r1
 8007e52:	609a      	str	r2, [r3, #8]
 8007e54:	e00f      	b.n	8007e76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689a      	ldr	r2, [r3, #8]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689a      	ldr	r2, [r3, #8]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0202 	bic.w	r2, r2, #2
 8007e84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6899      	ldr	r1, [r3, #8]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	7e1b      	ldrb	r3, [r3, #24]
 8007e90:	005a      	lsls	r2, r3, #1
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01b      	beq.n	8007edc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007ec2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6859      	ldr	r1, [r3, #4]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	035a      	lsls	r2, r3, #13
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
 8007eda:	e007      	b.n	8007eec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007eea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	051a      	lsls	r2, r3, #20
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6899      	ldr	r1, [r3, #8]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f2e:	025a      	lsls	r2, r3, #9
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689a      	ldr	r2, [r3, #8]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6899      	ldr	r1, [r3, #8]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	029a      	lsls	r2, r3, #10
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	609a      	str	r2, [r3, #8]
}
 8007f5c:	bf00      	nop
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	40012300 	.word	0x40012300
 8007f6c:	0f000001 	.word	0x0f000001

08007f70 <__NVIC_SetPriorityGrouping>:
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f80:	4b0c      	ldr	r3, [pc, #48]	; (8007fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fa2:	4a04      	ldr	r2, [pc, #16]	; (8007fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	60d3      	str	r3, [r2, #12]
}
 8007fa8:	bf00      	nop
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	e000ed00 	.word	0xe000ed00

08007fb8 <__NVIC_GetPriorityGrouping>:
{
 8007fb8:	b480      	push	{r7}
 8007fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007fbc:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	0a1b      	lsrs	r3, r3, #8
 8007fc2:	f003 0307 	and.w	r3, r3, #7
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	e000ed00 	.word	0xe000ed00

08007fd4 <__NVIC_EnableIRQ>:
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	db0b      	blt.n	8007ffe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fe6:	79fb      	ldrb	r3, [r7, #7]
 8007fe8:	f003 021f 	and.w	r2, r3, #31
 8007fec:	4907      	ldr	r1, [pc, #28]	; (800800c <__NVIC_EnableIRQ+0x38>)
 8007fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff2:	095b      	lsrs	r3, r3, #5
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8007ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ffe:	bf00      	nop
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	e000e100 	.word	0xe000e100

08008010 <__NVIC_DisableIRQ>:
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	4603      	mov	r3, r0
 8008018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800801a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800801e:	2b00      	cmp	r3, #0
 8008020:	db12      	blt.n	8008048 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	f003 021f 	and.w	r2, r3, #31
 8008028:	490a      	ldr	r1, [pc, #40]	; (8008054 <__NVIC_DisableIRQ+0x44>)
 800802a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	2001      	movs	r0, #1
 8008032:	fa00 f202 	lsl.w	r2, r0, r2
 8008036:	3320      	adds	r3, #32
 8008038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800803c:	f3bf 8f4f 	dsb	sy
}
 8008040:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008042:	f3bf 8f6f 	isb	sy
}
 8008046:	bf00      	nop
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	e000e100 	.word	0xe000e100

08008058 <__NVIC_SetPriority>:
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	4603      	mov	r3, r0
 8008060:	6039      	str	r1, [r7, #0]
 8008062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008068:	2b00      	cmp	r3, #0
 800806a:	db0a      	blt.n	8008082 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	b2da      	uxtb	r2, r3
 8008070:	490c      	ldr	r1, [pc, #48]	; (80080a4 <__NVIC_SetPriority+0x4c>)
 8008072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008076:	0112      	lsls	r2, r2, #4
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	440b      	add	r3, r1
 800807c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008080:	e00a      	b.n	8008098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	b2da      	uxtb	r2, r3
 8008086:	4908      	ldr	r1, [pc, #32]	; (80080a8 <__NVIC_SetPriority+0x50>)
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	f003 030f 	and.w	r3, r3, #15
 800808e:	3b04      	subs	r3, #4
 8008090:	0112      	lsls	r2, r2, #4
 8008092:	b2d2      	uxtb	r2, r2
 8008094:	440b      	add	r3, r1
 8008096:	761a      	strb	r2, [r3, #24]
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr
 80080a4:	e000e100 	.word	0xe000e100
 80080a8:	e000ed00 	.word	0xe000ed00

080080ac <NVIC_EncodePriority>:
{
 80080ac:	b480      	push	{r7}
 80080ae:	b089      	sub	sp, #36	; 0x24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f1c3 0307 	rsb	r3, r3, #7
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	bf28      	it	cs
 80080ca:	2304      	movcs	r3, #4
 80080cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	3304      	adds	r3, #4
 80080d2:	2b06      	cmp	r3, #6
 80080d4:	d902      	bls.n	80080dc <NVIC_EncodePriority+0x30>
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	3b03      	subs	r3, #3
 80080da:	e000      	b.n	80080de <NVIC_EncodePriority+0x32>
 80080dc:	2300      	movs	r3, #0
 80080de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080e0:	f04f 32ff 	mov.w	r2, #4294967295
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ea:	43da      	mvns	r2, r3
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	401a      	ands	r2, r3
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080f4:	f04f 31ff 	mov.w	r1, #4294967295
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	fa01 f303 	lsl.w	r3, r1, r3
 80080fe:	43d9      	mvns	r1, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008104:	4313      	orrs	r3, r2
}
 8008106:	4618      	mov	r0, r3
 8008108:	3724      	adds	r7, #36	; 0x24
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff ff28 	bl	8007f70 <__NVIC_SetPriorityGrouping>
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008136:	2300      	movs	r3, #0
 8008138:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800813a:	f7ff ff3d 	bl	8007fb8 <__NVIC_GetPriorityGrouping>
 800813e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	6978      	ldr	r0, [r7, #20]
 8008146:	f7ff ffb1 	bl	80080ac <NVIC_EncodePriority>
 800814a:	4602      	mov	r2, r0
 800814c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008150:	4611      	mov	r1, r2
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff ff80 	bl	8008058 <__NVIC_SetPriority>
}
 8008158:	bf00      	nop
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	4603      	mov	r3, r0
 8008168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800816a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800816e:	4618      	mov	r0, r3
 8008170:	f7ff ff30 	bl	8007fd4 <__NVIC_EnableIRQ>
}
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff ff40 	bl	8008010 <__NVIC_DisableIRQ>
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008198:	b480      	push	{r7}
 800819a:	b089      	sub	sp, #36	; 0x24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80081ae:	2300      	movs	r3, #0
 80081b0:	61fb      	str	r3, [r7, #28]
 80081b2:	e177      	b.n	80084a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80081b4:	2201      	movs	r2, #1
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	fa02 f303 	lsl.w	r3, r2, r3
 80081bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	4013      	ands	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	f040 8166 	bne.w	800849e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d005      	beq.n	80081ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d130      	bne.n	800824c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	2203      	movs	r2, #3
 80081f6:	fa02 f303 	lsl.w	r3, r2, r3
 80081fa:	43db      	mvns	r3, r3
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	4013      	ands	r3, r2
 8008200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	fa02 f303 	lsl.w	r3, r2, r3
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	4313      	orrs	r3, r2
 8008212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008220:	2201      	movs	r2, #1
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	fa02 f303 	lsl.w	r3, r2, r3
 8008228:	43db      	mvns	r3, r3
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	4013      	ands	r3, r2
 800822e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	091b      	lsrs	r3, r3, #4
 8008236:	f003 0201 	and.w	r2, r3, #1
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	fa02 f303 	lsl.w	r3, r2, r3
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	4313      	orrs	r3, r2
 8008244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	69ba      	ldr	r2, [r7, #24]
 800824a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f003 0303 	and.w	r3, r3, #3
 8008254:	2b03      	cmp	r3, #3
 8008256:	d017      	beq.n	8008288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	2203      	movs	r2, #3
 8008264:	fa02 f303 	lsl.w	r3, r2, r3
 8008268:	43db      	mvns	r3, r3
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	4013      	ands	r3, r2
 800826e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	fa02 f303 	lsl.w	r3, r2, r3
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	4313      	orrs	r3, r2
 8008280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	69ba      	ldr	r2, [r7, #24]
 8008286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	f003 0303 	and.w	r3, r3, #3
 8008290:	2b02      	cmp	r3, #2
 8008292:	d123      	bne.n	80082dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	08da      	lsrs	r2, r3, #3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3208      	adds	r2, #8
 800829c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	220f      	movs	r2, #15
 80082ac:	fa02 f303 	lsl.w	r3, r2, r3
 80082b0:	43db      	mvns	r3, r3
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	4013      	ands	r3, r2
 80082b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	691a      	ldr	r2, [r3, #16]
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	f003 0307 	and.w	r3, r3, #7
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	69ba      	ldr	r2, [r7, #24]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	08da      	lsrs	r2, r3, #3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	3208      	adds	r2, #8
 80082d6:	69b9      	ldr	r1, [r7, #24]
 80082d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	2203      	movs	r2, #3
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	43db      	mvns	r3, r3
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	4013      	ands	r3, r2
 80082f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f003 0203 	and.w	r2, r3, #3
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	005b      	lsls	r3, r3, #1
 8008300:	fa02 f303 	lsl.w	r3, r2, r3
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	4313      	orrs	r3, r2
 8008308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 80c0 	beq.w	800849e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800831e:	2300      	movs	r3, #0
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	4b66      	ldr	r3, [pc, #408]	; (80084bc <HAL_GPIO_Init+0x324>)
 8008324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008326:	4a65      	ldr	r2, [pc, #404]	; (80084bc <HAL_GPIO_Init+0x324>)
 8008328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800832c:	6453      	str	r3, [r2, #68]	; 0x44
 800832e:	4b63      	ldr	r3, [pc, #396]	; (80084bc <HAL_GPIO_Init+0x324>)
 8008330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800833a:	4a61      	ldr	r2, [pc, #388]	; (80084c0 <HAL_GPIO_Init+0x328>)
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	089b      	lsrs	r3, r3, #2
 8008340:	3302      	adds	r3, #2
 8008342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	220f      	movs	r2, #15
 8008352:	fa02 f303 	lsl.w	r3, r2, r3
 8008356:	43db      	mvns	r3, r3
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	4013      	ands	r3, r2
 800835c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a58      	ldr	r2, [pc, #352]	; (80084c4 <HAL_GPIO_Init+0x32c>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d037      	beq.n	80083d6 <HAL_GPIO_Init+0x23e>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a57      	ldr	r2, [pc, #348]	; (80084c8 <HAL_GPIO_Init+0x330>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d031      	beq.n	80083d2 <HAL_GPIO_Init+0x23a>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a56      	ldr	r2, [pc, #344]	; (80084cc <HAL_GPIO_Init+0x334>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d02b      	beq.n	80083ce <HAL_GPIO_Init+0x236>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a55      	ldr	r2, [pc, #340]	; (80084d0 <HAL_GPIO_Init+0x338>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d025      	beq.n	80083ca <HAL_GPIO_Init+0x232>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a54      	ldr	r2, [pc, #336]	; (80084d4 <HAL_GPIO_Init+0x33c>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d01f      	beq.n	80083c6 <HAL_GPIO_Init+0x22e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a53      	ldr	r2, [pc, #332]	; (80084d8 <HAL_GPIO_Init+0x340>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d019      	beq.n	80083c2 <HAL_GPIO_Init+0x22a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a52      	ldr	r2, [pc, #328]	; (80084dc <HAL_GPIO_Init+0x344>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d013      	beq.n	80083be <HAL_GPIO_Init+0x226>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a51      	ldr	r2, [pc, #324]	; (80084e0 <HAL_GPIO_Init+0x348>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00d      	beq.n	80083ba <HAL_GPIO_Init+0x222>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a50      	ldr	r2, [pc, #320]	; (80084e4 <HAL_GPIO_Init+0x34c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d007      	beq.n	80083b6 <HAL_GPIO_Init+0x21e>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a4f      	ldr	r2, [pc, #316]	; (80084e8 <HAL_GPIO_Init+0x350>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d101      	bne.n	80083b2 <HAL_GPIO_Init+0x21a>
 80083ae:	2309      	movs	r3, #9
 80083b0:	e012      	b.n	80083d8 <HAL_GPIO_Init+0x240>
 80083b2:	230a      	movs	r3, #10
 80083b4:	e010      	b.n	80083d8 <HAL_GPIO_Init+0x240>
 80083b6:	2308      	movs	r3, #8
 80083b8:	e00e      	b.n	80083d8 <HAL_GPIO_Init+0x240>
 80083ba:	2307      	movs	r3, #7
 80083bc:	e00c      	b.n	80083d8 <HAL_GPIO_Init+0x240>
 80083be:	2306      	movs	r3, #6
 80083c0:	e00a      	b.n	80083d8 <HAL_GPIO_Init+0x240>
 80083c2:	2305      	movs	r3, #5
 80083c4:	e008      	b.n	80083d8 <HAL_GPIO_Init+0x240>
 80083c6:	2304      	movs	r3, #4
 80083c8:	e006      	b.n	80083d8 <HAL_GPIO_Init+0x240>
 80083ca:	2303      	movs	r3, #3
 80083cc:	e004      	b.n	80083d8 <HAL_GPIO_Init+0x240>
 80083ce:	2302      	movs	r3, #2
 80083d0:	e002      	b.n	80083d8 <HAL_GPIO_Init+0x240>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e000      	b.n	80083d8 <HAL_GPIO_Init+0x240>
 80083d6:	2300      	movs	r3, #0
 80083d8:	69fa      	ldr	r2, [r7, #28]
 80083da:	f002 0203 	and.w	r2, r2, #3
 80083de:	0092      	lsls	r2, r2, #2
 80083e0:	4093      	lsls	r3, r2
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083e8:	4935      	ldr	r1, [pc, #212]	; (80084c0 <HAL_GPIO_Init+0x328>)
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	089b      	lsrs	r3, r3, #2
 80083ee:	3302      	adds	r3, #2
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80083f6:	4b3d      	ldr	r3, [pc, #244]	; (80084ec <HAL_GPIO_Init+0x354>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	43db      	mvns	r3, r3
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	4013      	ands	r3, r2
 8008404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	4313      	orrs	r3, r2
 8008418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800841a:	4a34      	ldr	r2, [pc, #208]	; (80084ec <HAL_GPIO_Init+0x354>)
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008420:	4b32      	ldr	r3, [pc, #200]	; (80084ec <HAL_GPIO_Init+0x354>)
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	43db      	mvns	r3, r3
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	4013      	ands	r3, r2
 800842e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	4313      	orrs	r3, r2
 8008442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008444:	4a29      	ldr	r2, [pc, #164]	; (80084ec <HAL_GPIO_Init+0x354>)
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800844a:	4b28      	ldr	r3, [pc, #160]	; (80084ec <HAL_GPIO_Init+0x354>)
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	43db      	mvns	r3, r3
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	4013      	ands	r3, r2
 8008458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800846e:	4a1f      	ldr	r2, [pc, #124]	; (80084ec <HAL_GPIO_Init+0x354>)
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008474:	4b1d      	ldr	r3, [pc, #116]	; (80084ec <HAL_GPIO_Init+0x354>)
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	43db      	mvns	r3, r3
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	4013      	ands	r3, r2
 8008482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008498:	4a14      	ldr	r2, [pc, #80]	; (80084ec <HAL_GPIO_Init+0x354>)
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	3301      	adds	r3, #1
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	2b0f      	cmp	r3, #15
 80084a8:	f67f ae84 	bls.w	80081b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80084ac:	bf00      	nop
 80084ae:	bf00      	nop
 80084b0:	3724      	adds	r7, #36	; 0x24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	40023800 	.word	0x40023800
 80084c0:	40013800 	.word	0x40013800
 80084c4:	40020000 	.word	0x40020000
 80084c8:	40020400 	.word	0x40020400
 80084cc:	40020800 	.word	0x40020800
 80084d0:	40020c00 	.word	0x40020c00
 80084d4:	40021000 	.word	0x40021000
 80084d8:	40021400 	.word	0x40021400
 80084dc:	40021800 	.word	0x40021800
 80084e0:	40021c00 	.word	0x40021c00
 80084e4:	40022000 	.word	0x40022000
 80084e8:	40022400 	.word	0x40022400
 80084ec:	40013c00 	.word	0x40013c00

080084f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	887b      	ldrh	r3, [r7, #2]
 8008502:	4013      	ands	r3, r2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008508:	2301      	movs	r3, #1
 800850a:	73fb      	strb	r3, [r7, #15]
 800850c:	e001      	b.n	8008512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800850e:	2300      	movs	r3, #0
 8008510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008512:	7bfb      	ldrb	r3, [r7, #15]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	807b      	strh	r3, [r7, #2]
 800852c:	4613      	mov	r3, r2
 800852e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008530:	787b      	ldrb	r3, [r7, #1]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008536:	887a      	ldrh	r2, [r7, #2]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800853c:	e003      	b.n	8008546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800853e:	887b      	ldrh	r3, [r7, #2]
 8008540:	041a      	lsls	r2, r3, #16
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	619a      	str	r2, [r3, #24]
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
	...

08008554 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800855e:	4b08      	ldr	r3, [pc, #32]	; (8008580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008560:	695a      	ldr	r2, [r3, #20]
 8008562:	88fb      	ldrh	r3, [r7, #6]
 8008564:	4013      	ands	r3, r2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d006      	beq.n	8008578 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800856a:	4a05      	ldr	r2, [pc, #20]	; (8008580 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800856c:	88fb      	ldrh	r3, [r7, #6]
 800856e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008570:	88fb      	ldrh	r3, [r7, #6]
 8008572:	4618      	mov	r0, r3
 8008574:	f7fa ff9e 	bl	80034b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8008578:	bf00      	nop
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	40013c00 	.word	0x40013c00

08008584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d101      	bne.n	8008596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e12b      	b.n	80087ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d106      	bne.n	80085b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7f9 ffb0 	bl	8002510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2224      	movs	r2, #36	; 0x24
 80085b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f022 0201 	bic.w	r2, r2, #1
 80085c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80085e8:	f001 fd66 	bl	800a0b8 <HAL_RCC_GetPCLK1Freq>
 80085ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	4a81      	ldr	r2, [pc, #516]	; (80087f8 <HAL_I2C_Init+0x274>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d807      	bhi.n	8008608 <HAL_I2C_Init+0x84>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4a80      	ldr	r2, [pc, #512]	; (80087fc <HAL_I2C_Init+0x278>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	bf94      	ite	ls
 8008600:	2301      	movls	r3, #1
 8008602:	2300      	movhi	r3, #0
 8008604:	b2db      	uxtb	r3, r3
 8008606:	e006      	b.n	8008616 <HAL_I2C_Init+0x92>
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4a7d      	ldr	r2, [pc, #500]	; (8008800 <HAL_I2C_Init+0x27c>)
 800860c:	4293      	cmp	r3, r2
 800860e:	bf94      	ite	ls
 8008610:	2301      	movls	r3, #1
 8008612:	2300      	movhi	r3, #0
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e0e7      	b.n	80087ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	4a78      	ldr	r2, [pc, #480]	; (8008804 <HAL_I2C_Init+0x280>)
 8008622:	fba2 2303 	umull	r2, r3, r2, r3
 8008626:	0c9b      	lsrs	r3, r3, #18
 8008628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	430a      	orrs	r2, r1
 800863c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	4a6a      	ldr	r2, [pc, #424]	; (80087f8 <HAL_I2C_Init+0x274>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d802      	bhi.n	8008658 <HAL_I2C_Init+0xd4>
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	3301      	adds	r3, #1
 8008656:	e009      	b.n	800866c <HAL_I2C_Init+0xe8>
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800865e:	fb02 f303 	mul.w	r3, r2, r3
 8008662:	4a69      	ldr	r2, [pc, #420]	; (8008808 <HAL_I2C_Init+0x284>)
 8008664:	fba2 2303 	umull	r2, r3, r2, r3
 8008668:	099b      	lsrs	r3, r3, #6
 800866a:	3301      	adds	r3, #1
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	6812      	ldr	r2, [r2, #0]
 8008670:	430b      	orrs	r3, r1
 8008672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800867e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	495c      	ldr	r1, [pc, #368]	; (80087f8 <HAL_I2C_Init+0x274>)
 8008688:	428b      	cmp	r3, r1
 800868a:	d819      	bhi.n	80086c0 <HAL_I2C_Init+0x13c>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	1e59      	subs	r1, r3, #1
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	fbb1 f3f3 	udiv	r3, r1, r3
 800869a:	1c59      	adds	r1, r3, #1
 800869c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80086a0:	400b      	ands	r3, r1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00a      	beq.n	80086bc <HAL_I2C_Init+0x138>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	1e59      	subs	r1, r3, #1
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80086b4:	3301      	adds	r3, #1
 80086b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086ba:	e051      	b.n	8008760 <HAL_I2C_Init+0x1dc>
 80086bc:	2304      	movs	r3, #4
 80086be:	e04f      	b.n	8008760 <HAL_I2C_Init+0x1dc>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d111      	bne.n	80086ec <HAL_I2C_Init+0x168>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	1e58      	subs	r0, r3, #1
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6859      	ldr	r1, [r3, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	005b      	lsls	r3, r3, #1
 80086d4:	440b      	add	r3, r1
 80086d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80086da:	3301      	adds	r3, #1
 80086dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	bf0c      	ite	eq
 80086e4:	2301      	moveq	r3, #1
 80086e6:	2300      	movne	r3, #0
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	e012      	b.n	8008712 <HAL_I2C_Init+0x18e>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	1e58      	subs	r0, r3, #1
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6859      	ldr	r1, [r3, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	440b      	add	r3, r1
 80086fa:	0099      	lsls	r1, r3, #2
 80086fc:	440b      	add	r3, r1
 80086fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008702:	3301      	adds	r3, #1
 8008704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008708:	2b00      	cmp	r3, #0
 800870a:	bf0c      	ite	eq
 800870c:	2301      	moveq	r3, #1
 800870e:	2300      	movne	r3, #0
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <HAL_I2C_Init+0x196>
 8008716:	2301      	movs	r3, #1
 8008718:	e022      	b.n	8008760 <HAL_I2C_Init+0x1dc>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10e      	bne.n	8008740 <HAL_I2C_Init+0x1bc>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	1e58      	subs	r0, r3, #1
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6859      	ldr	r1, [r3, #4]
 800872a:	460b      	mov	r3, r1
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	440b      	add	r3, r1
 8008730:	fbb0 f3f3 	udiv	r3, r0, r3
 8008734:	3301      	adds	r3, #1
 8008736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800873a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800873e:	e00f      	b.n	8008760 <HAL_I2C_Init+0x1dc>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	1e58      	subs	r0, r3, #1
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6859      	ldr	r1, [r3, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	440b      	add	r3, r1
 800874e:	0099      	lsls	r1, r3, #2
 8008750:	440b      	add	r3, r1
 8008752:	fbb0 f3f3 	udiv	r3, r0, r3
 8008756:	3301      	adds	r3, #1
 8008758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800875c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	6809      	ldr	r1, [r1, #0]
 8008764:	4313      	orrs	r3, r2
 8008766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	69da      	ldr	r2, [r3, #28]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800878e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	6911      	ldr	r1, [r2, #16]
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	68d2      	ldr	r2, [r2, #12]
 800879a:	4311      	orrs	r1, r2
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	6812      	ldr	r2, [r2, #0]
 80087a0:	430b      	orrs	r3, r1
 80087a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	695a      	ldr	r2, [r3, #20]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0201 	orr.w	r2, r2, #1
 80087ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2220      	movs	r2, #32
 80087da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	000186a0 	.word	0x000186a0
 80087fc:	001e847f 	.word	0x001e847f
 8008800:	003d08ff 	.word	0x003d08ff
 8008804:	431bde83 	.word	0x431bde83
 8008808:	10624dd3 	.word	0x10624dd3

0800880c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af02      	add	r7, sp, #8
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	4608      	mov	r0, r1
 8008816:	4611      	mov	r1, r2
 8008818:	461a      	mov	r2, r3
 800881a:	4603      	mov	r3, r0
 800881c:	817b      	strh	r3, [r7, #10]
 800881e:	460b      	mov	r3, r1
 8008820:	813b      	strh	r3, [r7, #8]
 8008822:	4613      	mov	r3, r2
 8008824:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008826:	f7fe ff63 	bl	80076f0 <HAL_GetTick>
 800882a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b20      	cmp	r3, #32
 8008836:	f040 80d9 	bne.w	80089ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	2319      	movs	r3, #25
 8008840:	2201      	movs	r2, #1
 8008842:	496d      	ldr	r1, [pc, #436]	; (80089f8 <HAL_I2C_Mem_Write+0x1ec>)
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f000 fcb5 	bl	80091b4 <I2C_WaitOnFlagUntilTimeout>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d001      	beq.n	8008854 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008850:	2302      	movs	r3, #2
 8008852:	e0cc      	b.n	80089ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800885a:	2b01      	cmp	r3, #1
 800885c:	d101      	bne.n	8008862 <HAL_I2C_Mem_Write+0x56>
 800885e:	2302      	movs	r3, #2
 8008860:	e0c5      	b.n	80089ee <HAL_I2C_Mem_Write+0x1e2>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b01      	cmp	r3, #1
 8008876:	d007      	beq.n	8008888 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0201 	orr.w	r2, r2, #1
 8008886:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008896:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2221      	movs	r2, #33	; 0x21
 800889c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2240      	movs	r2, #64	; 0x40
 80088a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a3a      	ldr	r2, [r7, #32]
 80088b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4a4d      	ldr	r2, [pc, #308]	; (80089fc <HAL_I2C_Mem_Write+0x1f0>)
 80088c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80088ca:	88f8      	ldrh	r0, [r7, #6]
 80088cc:	893a      	ldrh	r2, [r7, #8]
 80088ce:	8979      	ldrh	r1, [r7, #10]
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	9301      	str	r3, [sp, #4]
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	4603      	mov	r3, r0
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f000 faec 	bl	8008eb8 <I2C_RequestMemoryWrite>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d052      	beq.n	800898c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e081      	b.n	80089ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 fd36 	bl	8009360 <I2C_WaitOnTXEFlagUntilTimeout>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00d      	beq.n	8008916 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d107      	bne.n	8008912 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008910:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e06b      	b.n	80089ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891a:	781a      	ldrb	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008930:	3b01      	subs	r3, #1
 8008932:	b29a      	uxth	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800893c:	b29b      	uxth	r3, r3
 800893e:	3b01      	subs	r3, #1
 8008940:	b29a      	uxth	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	f003 0304 	and.w	r3, r3, #4
 8008950:	2b04      	cmp	r3, #4
 8008952:	d11b      	bne.n	800898c <HAL_I2C_Mem_Write+0x180>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008958:	2b00      	cmp	r3, #0
 800895a:	d017      	beq.n	800898c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	781a      	ldrb	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008976:	3b01      	subs	r3, #1
 8008978:	b29a      	uxth	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008982:	b29b      	uxth	r3, r3
 8008984:	3b01      	subs	r3, #1
 8008986:	b29a      	uxth	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1aa      	bne.n	80088ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f000 fd22 	bl	80093e2 <I2C_WaitOnBTFFlagUntilTimeout>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00d      	beq.n	80089c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	d107      	bne.n	80089bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e016      	b.n	80089ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2220      	movs	r2, #32
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	e000      	b.n	80089ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80089ec:	2302      	movs	r3, #2
  }
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	00100002 	.word	0x00100002
 80089fc:	ffff0000 	.word	0xffff0000

08008a00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b08c      	sub	sp, #48	; 0x30
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	4608      	mov	r0, r1
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	4603      	mov	r3, r0
 8008a10:	817b      	strh	r3, [r7, #10]
 8008a12:	460b      	mov	r3, r1
 8008a14:	813b      	strh	r3, [r7, #8]
 8008a16:	4613      	mov	r3, r2
 8008a18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a1a:	f7fe fe69 	bl	80076f0 <HAL_GetTick>
 8008a1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b20      	cmp	r3, #32
 8008a2a:	f040 8208 	bne.w	8008e3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	2319      	movs	r3, #25
 8008a34:	2201      	movs	r2, #1
 8008a36:	497b      	ldr	r1, [pc, #492]	; (8008c24 <HAL_I2C_Mem_Read+0x224>)
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 fbbb 	bl	80091b4 <I2C_WaitOnFlagUntilTimeout>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008a44:	2302      	movs	r3, #2
 8008a46:	e1fb      	b.n	8008e40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d101      	bne.n	8008a56 <HAL_I2C_Mem_Read+0x56>
 8008a52:	2302      	movs	r3, #2
 8008a54:	e1f4      	b.n	8008e40 <HAL_I2C_Mem_Read+0x440>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d007      	beq.n	8008a7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f042 0201 	orr.w	r2, r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2222      	movs	r2, #34	; 0x22
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2240      	movs	r2, #64	; 0x40
 8008a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4a5b      	ldr	r2, [pc, #364]	; (8008c28 <HAL_I2C_Mem_Read+0x228>)
 8008abc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008abe:	88f8      	ldrh	r0, [r7, #6]
 8008ac0:	893a      	ldrh	r2, [r7, #8]
 8008ac2:	8979      	ldrh	r1, [r7, #10]
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	4603      	mov	r3, r0
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f000 fa88 	bl	8008fe4 <I2C_RequestMemoryRead>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d001      	beq.n	8008ade <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e1b0      	b.n	8008e40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d113      	bne.n	8008b0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	623b      	str	r3, [r7, #32]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	623b      	str	r3, [r7, #32]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	623b      	str	r3, [r7, #32]
 8008afa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b0a:	601a      	str	r2, [r3, #0]
 8008b0c:	e184      	b.n	8008e18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d11b      	bne.n	8008b4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b26:	2300      	movs	r3, #0
 8008b28:	61fb      	str	r3, [r7, #28]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	61fb      	str	r3, [r7, #28]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	61fb      	str	r3, [r7, #28]
 8008b3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	e164      	b.n	8008e18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d11b      	bne.n	8008b8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b76:	2300      	movs	r3, #0
 8008b78:	61bb      	str	r3, [r7, #24]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	61bb      	str	r3, [r7, #24]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	61bb      	str	r3, [r7, #24]
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	e144      	b.n	8008e18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b8e:	2300      	movs	r3, #0
 8008b90:	617b      	str	r3, [r7, #20]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	699b      	ldr	r3, [r3, #24]
 8008ba0:	617b      	str	r3, [r7, #20]
 8008ba2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008ba4:	e138      	b.n	8008e18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	f200 80f1 	bhi.w	8008d92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d123      	bne.n	8008c00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 fc51 	bl	8009464 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e139      	b.n	8008e40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	691a      	ldr	r2, [r3, #16]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd6:	b2d2      	uxtb	r2, r2
 8008bd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008be8:	3b01      	subs	r3, #1
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bfe:	e10b      	b.n	8008e18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d14e      	bne.n	8008ca6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	2200      	movs	r2, #0
 8008c10:	4906      	ldr	r1, [pc, #24]	; (8008c2c <HAL_I2C_Mem_Read+0x22c>)
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 face 	bl	80091b4 <I2C_WaitOnFlagUntilTimeout>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d008      	beq.n	8008c30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e10e      	b.n	8008e40 <HAL_I2C_Mem_Read+0x440>
 8008c22:	bf00      	nop
 8008c24:	00100002 	.word	0x00100002
 8008c28:	ffff0000 	.word	0xffff0000
 8008c2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	691a      	ldr	r2, [r3, #16]
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	691a      	ldr	r2, [r3, #16]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	b2d2      	uxtb	r2, r2
 8008c7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ca4:	e0b8      	b.n	8008e18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cac:	2200      	movs	r2, #0
 8008cae:	4966      	ldr	r1, [pc, #408]	; (8008e48 <HAL_I2C_Mem_Read+0x448>)
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 fa7f 	bl	80091b4 <I2C_WaitOnFlagUntilTimeout>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e0bf      	b.n	8008e40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	691a      	ldr	r2, [r3, #16]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cda:	b2d2      	uxtb	r2, r2
 8008cdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cec:	3b01      	subs	r3, #1
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	2200      	movs	r2, #0
 8008d0a:	494f      	ldr	r1, [pc, #316]	; (8008e48 <HAL_I2C_Mem_Read+0x448>)
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 fa51 	bl	80091b4 <I2C_WaitOnFlagUntilTimeout>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e091      	b.n	8008e40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	691a      	ldr	r2, [r3, #16]
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	b2d2      	uxtb	r2, r2
 8008d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	691a      	ldr	r2, [r3, #16]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	b2d2      	uxtb	r2, r2
 8008d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	1c5a      	adds	r2, r3, #1
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d90:	e042      	b.n	8008e18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f000 fb64 	bl	8009464 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e04c      	b.n	8008e40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	691a      	ldr	r2, [r3, #16]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	b2d2      	uxtb	r2, r2
 8008db2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	f003 0304 	and.w	r3, r3, #4
 8008de2:	2b04      	cmp	r3, #4
 8008de4:	d118      	bne.n	8008e18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	691a      	ldr	r2, [r3, #16]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e02:	3b01      	subs	r3, #1
 8008e04:	b29a      	uxth	r2, r3
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	3b01      	subs	r3, #1
 8008e12:	b29a      	uxth	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f47f aec2 	bne.w	8008ba6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2220      	movs	r2, #32
 8008e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	e000      	b.n	8008e40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008e3e:	2302      	movs	r3, #2
  }
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3728      	adds	r7, #40	; 0x28
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	00010004 	.word	0x00010004

08008e4c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b20      	cmp	r3, #32
 8008e5e:	d124      	bne.n	8008eaa <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2228      	movs	r2, #40	; 0x28
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d007      	beq.n	8008e86 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f042 0201 	orr.w	r2, r2, #1
 8008e84:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e94:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008ea4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e000      	b.n	8008eac <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008eaa:	2302      	movs	r3, #2
  }
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b088      	sub	sp, #32
 8008ebc:	af02      	add	r7, sp, #8
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	817b      	strh	r3, [r7, #10]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	813b      	strh	r3, [r7, #8]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ee0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 f960 	bl	80091b4 <I2C_WaitOnFlagUntilTimeout>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00d      	beq.n	8008f16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f08:	d103      	bne.n	8008f12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e05f      	b.n	8008fd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008f16:	897b      	ldrh	r3, [r7, #10]
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008f24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	6a3a      	ldr	r2, [r7, #32]
 8008f2a:	492d      	ldr	r1, [pc, #180]	; (8008fe0 <I2C_RequestMemoryWrite+0x128>)
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 f998 	bl	8009262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d001      	beq.n	8008f3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e04c      	b.n	8008fd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	617b      	str	r3, [r7, #20]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	695b      	ldr	r3, [r3, #20]
 8008f46:	617b      	str	r3, [r7, #20]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f54:	6a39      	ldr	r1, [r7, #32]
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f000 fa02 	bl	8009360 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00d      	beq.n	8008f7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	d107      	bne.n	8008f7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e02b      	b.n	8008fd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f7e:	88fb      	ldrh	r3, [r7, #6]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d105      	bne.n	8008f90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008f84:	893b      	ldrh	r3, [r7, #8]
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	611a      	str	r2, [r3, #16]
 8008f8e:	e021      	b.n	8008fd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008f90:	893b      	ldrh	r3, [r7, #8]
 8008f92:	0a1b      	lsrs	r3, r3, #8
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa0:	6a39      	ldr	r1, [r7, #32]
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 f9dc 	bl	8009360 <I2C_WaitOnTXEFlagUntilTimeout>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00d      	beq.n	8008fca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	2b04      	cmp	r3, #4
 8008fb4:	d107      	bne.n	8008fc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e005      	b.n	8008fd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008fca:	893b      	ldrh	r3, [r7, #8]
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3718      	adds	r7, #24
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	00010002 	.word	0x00010002

08008fe4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b088      	sub	sp, #32
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	4608      	mov	r0, r1
 8008fee:	4611      	mov	r1, r2
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	817b      	strh	r3, [r7, #10]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	813b      	strh	r3, [r7, #8]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	681a      	ldr	r2, [r3, #0]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800900c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800901c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	2200      	movs	r2, #0
 8009026:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f8c2 	bl	80091b4 <I2C_WaitOnFlagUntilTimeout>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00d      	beq.n	8009052 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009044:	d103      	bne.n	800904e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800904c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e0aa      	b.n	80091a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009052:	897b      	ldrh	r3, [r7, #10]
 8009054:	b2db      	uxtb	r3, r3
 8009056:	461a      	mov	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009060:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	6a3a      	ldr	r2, [r7, #32]
 8009066:	4952      	ldr	r1, [pc, #328]	; (80091b0 <I2C_RequestMemoryRead+0x1cc>)
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f000 f8fa 	bl	8009262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e097      	b.n	80091a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800908e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009090:	6a39      	ldr	r1, [r7, #32]
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 f964 	bl	8009360 <I2C_WaitOnTXEFlagUntilTimeout>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00d      	beq.n	80090ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	d107      	bne.n	80090b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e076      	b.n	80091a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80090ba:	88fb      	ldrh	r3, [r7, #6]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d105      	bne.n	80090cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80090c0:	893b      	ldrh	r3, [r7, #8]
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	611a      	str	r2, [r3, #16]
 80090ca:	e021      	b.n	8009110 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80090cc:	893b      	ldrh	r3, [r7, #8]
 80090ce:	0a1b      	lsrs	r3, r3, #8
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	b2da      	uxtb	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090dc:	6a39      	ldr	r1, [r7, #32]
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f000 f93e 	bl	8009360 <I2C_WaitOnTXEFlagUntilTimeout>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00d      	beq.n	8009106 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ee:	2b04      	cmp	r3, #4
 80090f0:	d107      	bne.n	8009102 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009100:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e050      	b.n	80091a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009106:	893b      	ldrh	r3, [r7, #8]
 8009108:	b2da      	uxtb	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009112:	6a39      	ldr	r1, [r7, #32]
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 f923 	bl	8009360 <I2C_WaitOnTXEFlagUntilTimeout>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00d      	beq.n	800913c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009124:	2b04      	cmp	r3, #4
 8009126:	d107      	bne.n	8009138 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009136:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e035      	b.n	80091a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800914a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	6a3b      	ldr	r3, [r7, #32]
 8009152:	2200      	movs	r2, #0
 8009154:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 f82b 	bl	80091b4 <I2C_WaitOnFlagUntilTimeout>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00d      	beq.n	8009180 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009172:	d103      	bne.n	800917c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800917a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e013      	b.n	80091a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009180:	897b      	ldrh	r3, [r7, #10]
 8009182:	b2db      	uxtb	r3, r3
 8009184:	f043 0301 	orr.w	r3, r3, #1
 8009188:	b2da      	uxtb	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	6a3a      	ldr	r2, [r7, #32]
 8009194:	4906      	ldr	r1, [pc, #24]	; (80091b0 <I2C_RequestMemoryRead+0x1cc>)
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f863 	bl	8009262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e000      	b.n	80091a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	00010002 	.word	0x00010002

080091b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	4613      	mov	r3, r2
 80091c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80091c4:	e025      	b.n	8009212 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091cc:	d021      	beq.n	8009212 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091ce:	f7fe fa8f 	bl	80076f0 <HAL_GetTick>
 80091d2:	4602      	mov	r2, r0
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d302      	bcc.n	80091e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d116      	bne.n	8009212 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fe:	f043 0220 	orr.w	r2, r3, #32
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e023      	b.n	800925a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	0c1b      	lsrs	r3, r3, #16
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b01      	cmp	r3, #1
 800921a:	d10d      	bne.n	8009238 <I2C_WaitOnFlagUntilTimeout+0x84>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	43da      	mvns	r2, r3
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	4013      	ands	r3, r2
 8009228:	b29b      	uxth	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	bf0c      	ite	eq
 800922e:	2301      	moveq	r3, #1
 8009230:	2300      	movne	r3, #0
 8009232:	b2db      	uxtb	r3, r3
 8009234:	461a      	mov	r2, r3
 8009236:	e00c      	b.n	8009252 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	43da      	mvns	r2, r3
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	4013      	ands	r3, r2
 8009244:	b29b      	uxth	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	bf0c      	ite	eq
 800924a:	2301      	moveq	r3, #1
 800924c:	2300      	movne	r3, #0
 800924e:	b2db      	uxtb	r3, r3
 8009250:	461a      	mov	r2, r3
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	429a      	cmp	r2, r3
 8009256:	d0b6      	beq.n	80091c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	60f8      	str	r0, [r7, #12]
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	607a      	str	r2, [r7, #4]
 800926e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009270:	e051      	b.n	8009316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800927c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009280:	d123      	bne.n	80092ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009290:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800929a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b6:	f043 0204 	orr.w	r2, r3, #4
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e046      	b.n	8009358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d0:	d021      	beq.n	8009316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092d2:	f7fe fa0d 	bl	80076f0 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	687a      	ldr	r2, [r7, #4]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d302      	bcc.n	80092e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d116      	bne.n	8009316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009302:	f043 0220 	orr.w	r2, r3, #32
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e020      	b.n	8009358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	0c1b      	lsrs	r3, r3, #16
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b01      	cmp	r3, #1
 800931e:	d10c      	bne.n	800933a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	43da      	mvns	r2, r3
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	4013      	ands	r3, r2
 800932c:	b29b      	uxth	r3, r3
 800932e:	2b00      	cmp	r3, #0
 8009330:	bf14      	ite	ne
 8009332:	2301      	movne	r3, #1
 8009334:	2300      	moveq	r3, #0
 8009336:	b2db      	uxtb	r3, r3
 8009338:	e00b      	b.n	8009352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	699b      	ldr	r3, [r3, #24]
 8009340:	43da      	mvns	r2, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	4013      	ands	r3, r2
 8009346:	b29b      	uxth	r3, r3
 8009348:	2b00      	cmp	r3, #0
 800934a:	bf14      	ite	ne
 800934c:	2301      	movne	r3, #1
 800934e:	2300      	moveq	r3, #0
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d18d      	bne.n	8009272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800936c:	e02d      	b.n	80093ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 f8ce 	bl	8009510 <I2C_IsAcknowledgeFailed>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800937a:	2301      	movs	r3, #1
 800937c:	e02d      	b.n	80093da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009384:	d021      	beq.n	80093ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009386:	f7fe f9b3 	bl	80076f0 <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	429a      	cmp	r2, r3
 8009394:	d302      	bcc.n	800939c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d116      	bne.n	80093ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	f043 0220 	orr.w	r2, r3, #32
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e007      	b.n	80093da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d4:	2b80      	cmp	r3, #128	; 0x80
 80093d6:	d1ca      	bne.n	800936e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b084      	sub	sp, #16
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80093ee:	e02d      	b.n	800944c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 f88d 	bl	8009510 <I2C_IsAcknowledgeFailed>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e02d      	b.n	800945c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009406:	d021      	beq.n	800944c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009408:	f7fe f972 	bl	80076f0 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	68ba      	ldr	r2, [r7, #8]
 8009414:	429a      	cmp	r2, r3
 8009416:	d302      	bcc.n	800941e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d116      	bne.n	800944c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2220      	movs	r2, #32
 8009428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009438:	f043 0220 	orr.w	r2, r3, #32
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e007      	b.n	800945c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	f003 0304 	and.w	r3, r3, #4
 8009456:	2b04      	cmp	r3, #4
 8009458:	d1ca      	bne.n	80093f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009470:	e042      	b.n	80094f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	f003 0310 	and.w	r3, r3, #16
 800947c:	2b10      	cmp	r3, #16
 800947e:	d119      	bne.n	80094b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f06f 0210 	mvn.w	r2, #16
 8009488:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2220      	movs	r2, #32
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e029      	b.n	8009508 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094b4:	f7fe f91c 	bl	80076f0 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d302      	bcc.n	80094ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d116      	bne.n	80094f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2220      	movs	r2, #32
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e4:	f043 0220 	orr.w	r2, r3, #32
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e007      	b.n	8009508 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009502:	2b40      	cmp	r3, #64	; 0x40
 8009504:	d1b5      	bne.n	8009472 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009526:	d11b      	bne.n	8009560 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009530:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2220      	movs	r2, #32
 800953c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954c:	f043 0204 	orr.w	r2, r3, #4
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e000      	b.n	8009562 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b20      	cmp	r3, #32
 8009582:	d129      	bne.n	80095d8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2224      	movs	r2, #36	; 0x24
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 0201 	bic.w	r2, r2, #1
 800959a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f022 0210 	bic.w	r2, r2, #16
 80095aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	430a      	orrs	r2, r1
 80095ba:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0201 	orr.w	r2, r2, #1
 80095ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2220      	movs	r2, #32
 80095d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	e000      	b.n	80095da <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80095d8:	2302      	movs	r3, #2
  }
}
 80095da:	4618      	mov	r0, r3
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b085      	sub	sp, #20
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b20      	cmp	r3, #32
 80095fe:	d12a      	bne.n	8009656 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2224      	movs	r2, #36	; 0x24
 8009604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f022 0201 	bic.w	r2, r2, #1
 8009616:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009620:	89fb      	ldrh	r3, [r7, #14]
 8009622:	f023 030f 	bic.w	r3, r3, #15
 8009626:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	b29a      	uxth	r2, r3
 800962c:	89fb      	ldrh	r3, [r7, #14]
 800962e:	4313      	orrs	r3, r2
 8009630:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	89fa      	ldrh	r2, [r7, #14]
 8009638:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f042 0201 	orr.w	r2, r2, #1
 8009648:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2220      	movs	r2, #32
 800964e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	e000      	b.n	8009658 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8009656:	2302      	movs	r3, #2
  }
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d101      	bne.n	8009676 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e034      	b.n	80096e0 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800967e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f245 5255 	movw	r2, #21845	; 0x5555
 8009688:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	6852      	ldr	r2, [r2, #4]
 8009692:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6892      	ldr	r2, [r2, #8]
 800969c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800969e:	f7fe f827 	bl	80076f0 <HAL_GetTick>
 80096a2:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80096a4:	e00f      	b.n	80096c6 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80096a6:	f7fe f823 	bl	80076f0 <HAL_GetTick>
 80096aa:	4602      	mov	r2, r0
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	1ad3      	subs	r3, r2, r3
 80096b0:	2b31      	cmp	r3, #49	; 0x31
 80096b2:	d908      	bls.n	80096c6 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	f003 0303 	and.w	r3, r3, #3
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e00c      	b.n	80096e0 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	f003 0303 	and.w	r3, r3, #3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e8      	bne.n	80096a6 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80096dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80096f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8009710:	4b05      	ldr	r3, [pc, #20]	; (8009728 <HAL_PWR_EnableWakeUpPin+0x20>)
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	4904      	ldr	r1, [pc, #16]	; (8009728 <HAL_PWR_EnableWakeUpPin+0x20>)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4313      	orrs	r3, r2
 800971a:	604b      	str	r3, [r1, #4]
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	40007000 	.word	0x40007000

0800972c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8009734:	4b06      	ldr	r3, [pc, #24]	; (8009750 <HAL_PWR_DisableWakeUpPin+0x24>)
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	43db      	mvns	r3, r3
 800973c:	4904      	ldr	r1, [pc, #16]	; (8009750 <HAL_PWR_DisableWakeUpPin+0x24>)
 800973e:	4013      	ands	r3, r2
 8009740:	604b      	str	r3, [r1, #4]
}
 8009742:	bf00      	nop
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	40007000 	.word	0x40007000

08009754 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8009754:	b480      	push	{r7}
 8009756:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8009758:	4b08      	ldr	r3, [pc, #32]	; (800977c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a07      	ldr	r2, [pc, #28]	; (800977c <HAL_PWR_EnterSTANDBYMode+0x28>)
 800975e:	f043 0302 	orr.w	r3, r3, #2
 8009762:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009764:	4b06      	ldr	r3, [pc, #24]	; (8009780 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	4a05      	ldr	r2, [pc, #20]	; (8009780 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800976a:	f043 0304 	orr.w	r3, r3, #4
 800976e:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8009770:	bf30      	wfi
}
 8009772:	bf00      	nop
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	40007000 	.word	0x40007000
 8009780:	e000ed00 	.word	0xe000ed00

08009784 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800978a:	2300      	movs	r3, #0
 800978c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800978e:	2300      	movs	r3, #0
 8009790:	603b      	str	r3, [r7, #0]
 8009792:	4b20      	ldr	r3, [pc, #128]	; (8009814 <HAL_PWREx_EnableOverDrive+0x90>)
 8009794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009796:	4a1f      	ldr	r2, [pc, #124]	; (8009814 <HAL_PWREx_EnableOverDrive+0x90>)
 8009798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800979c:	6413      	str	r3, [r2, #64]	; 0x40
 800979e:	4b1d      	ldr	r3, [pc, #116]	; (8009814 <HAL_PWREx_EnableOverDrive+0x90>)
 80097a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80097aa:	4b1b      	ldr	r3, [pc, #108]	; (8009818 <HAL_PWREx_EnableOverDrive+0x94>)
 80097ac:	2201      	movs	r2, #1
 80097ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097b0:	f7fd ff9e 	bl	80076f0 <HAL_GetTick>
 80097b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80097b6:	e009      	b.n	80097cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80097b8:	f7fd ff9a 	bl	80076f0 <HAL_GetTick>
 80097bc:	4602      	mov	r2, r0
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	1ad3      	subs	r3, r2, r3
 80097c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097c6:	d901      	bls.n	80097cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e01f      	b.n	800980c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80097cc:	4b13      	ldr	r3, [pc, #76]	; (800981c <HAL_PWREx_EnableOverDrive+0x98>)
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097d8:	d1ee      	bne.n	80097b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80097da:	4b11      	ldr	r3, [pc, #68]	; (8009820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80097dc:	2201      	movs	r2, #1
 80097de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097e0:	f7fd ff86 	bl	80076f0 <HAL_GetTick>
 80097e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80097e6:	e009      	b.n	80097fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80097e8:	f7fd ff82 	bl	80076f0 <HAL_GetTick>
 80097ec:	4602      	mov	r2, r0
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097f6:	d901      	bls.n	80097fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e007      	b.n	800980c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80097fc:	4b07      	ldr	r3, [pc, #28]	; (800981c <HAL_PWREx_EnableOverDrive+0x98>)
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009804:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009808:	d1ee      	bne.n	80097e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	3708      	adds	r7, #8
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}
 8009814:	40023800 	.word	0x40023800
 8009818:	420e0040 	.word	0x420e0040
 800981c:	40007000 	.word	0x40007000
 8009820:	420e0044 	.word	0x420e0044

08009824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	e264      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0301 	and.w	r3, r3, #1
 800983e:	2b00      	cmp	r3, #0
 8009840:	d075      	beq.n	800992e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009842:	4ba3      	ldr	r3, [pc, #652]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f003 030c 	and.w	r3, r3, #12
 800984a:	2b04      	cmp	r3, #4
 800984c:	d00c      	beq.n	8009868 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800984e:	4ba0      	ldr	r3, [pc, #640]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009856:	2b08      	cmp	r3, #8
 8009858:	d112      	bne.n	8009880 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800985a:	4b9d      	ldr	r3, [pc, #628]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009866:	d10b      	bne.n	8009880 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009868:	4b99      	ldr	r3, [pc, #612]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d05b      	beq.n	800992c <HAL_RCC_OscConfig+0x108>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d157      	bne.n	800992c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	e23f      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009888:	d106      	bne.n	8009898 <HAL_RCC_OscConfig+0x74>
 800988a:	4b91      	ldr	r3, [pc, #580]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a90      	ldr	r2, [pc, #576]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009894:	6013      	str	r3, [r2, #0]
 8009896:	e01d      	b.n	80098d4 <HAL_RCC_OscConfig+0xb0>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098a0:	d10c      	bne.n	80098bc <HAL_RCC_OscConfig+0x98>
 80098a2:	4b8b      	ldr	r3, [pc, #556]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a8a      	ldr	r2, [pc, #552]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80098a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	4b88      	ldr	r3, [pc, #544]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a87      	ldr	r2, [pc, #540]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80098b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098b8:	6013      	str	r3, [r2, #0]
 80098ba:	e00b      	b.n	80098d4 <HAL_RCC_OscConfig+0xb0>
 80098bc:	4b84      	ldr	r3, [pc, #528]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a83      	ldr	r2, [pc, #524]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80098c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098c6:	6013      	str	r3, [r2, #0]
 80098c8:	4b81      	ldr	r3, [pc, #516]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a80      	ldr	r2, [pc, #512]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80098ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d013      	beq.n	8009904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098dc:	f7fd ff08 	bl	80076f0 <HAL_GetTick>
 80098e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098e2:	e008      	b.n	80098f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098e4:	f7fd ff04 	bl	80076f0 <HAL_GetTick>
 80098e8:	4602      	mov	r2, r0
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	2b64      	cmp	r3, #100	; 0x64
 80098f0:	d901      	bls.n	80098f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e204      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80098f6:	4b76      	ldr	r3, [pc, #472]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d0f0      	beq.n	80098e4 <HAL_RCC_OscConfig+0xc0>
 8009902:	e014      	b.n	800992e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009904:	f7fd fef4 	bl	80076f0 <HAL_GetTick>
 8009908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800990a:	e008      	b.n	800991e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800990c:	f7fd fef0 	bl	80076f0 <HAL_GetTick>
 8009910:	4602      	mov	r2, r0
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	2b64      	cmp	r3, #100	; 0x64
 8009918:	d901      	bls.n	800991e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e1f0      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800991e:	4b6c      	ldr	r3, [pc, #432]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1f0      	bne.n	800990c <HAL_RCC_OscConfig+0xe8>
 800992a:	e000      	b.n	800992e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800992c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f003 0302 	and.w	r3, r3, #2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d063      	beq.n	8009a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800993a:	4b65      	ldr	r3, [pc, #404]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	f003 030c 	and.w	r3, r3, #12
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00b      	beq.n	800995e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009946:	4b62      	ldr	r3, [pc, #392]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800994e:	2b08      	cmp	r3, #8
 8009950:	d11c      	bne.n	800998c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009952:	4b5f      	ldr	r3, [pc, #380]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d116      	bne.n	800998c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800995e:	4b5c      	ldr	r3, [pc, #368]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 0302 	and.w	r3, r3, #2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d005      	beq.n	8009976 <HAL_RCC_OscConfig+0x152>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d001      	beq.n	8009976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e1c4      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009976:	4b56      	ldr	r3, [pc, #344]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	00db      	lsls	r3, r3, #3
 8009984:	4952      	ldr	r1, [pc, #328]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009986:	4313      	orrs	r3, r2
 8009988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800998a:	e03a      	b.n	8009a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d020      	beq.n	80099d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009994:	4b4f      	ldr	r3, [pc, #316]	; (8009ad4 <HAL_RCC_OscConfig+0x2b0>)
 8009996:	2201      	movs	r2, #1
 8009998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800999a:	f7fd fea9 	bl	80076f0 <HAL_GetTick>
 800999e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099a0:	e008      	b.n	80099b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099a2:	f7fd fea5 	bl	80076f0 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d901      	bls.n	80099b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e1a5      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099b4:	4b46      	ldr	r3, [pc, #280]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d0f0      	beq.n	80099a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099c0:	4b43      	ldr	r3, [pc, #268]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	00db      	lsls	r3, r3, #3
 80099ce:	4940      	ldr	r1, [pc, #256]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	600b      	str	r3, [r1, #0]
 80099d4:	e015      	b.n	8009a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099d6:	4b3f      	ldr	r3, [pc, #252]	; (8009ad4 <HAL_RCC_OscConfig+0x2b0>)
 80099d8:	2200      	movs	r2, #0
 80099da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099dc:	f7fd fe88 	bl	80076f0 <HAL_GetTick>
 80099e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099e2:	e008      	b.n	80099f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099e4:	f7fd fe84 	bl	80076f0 <HAL_GetTick>
 80099e8:	4602      	mov	r2, r0
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d901      	bls.n	80099f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80099f2:	2303      	movs	r3, #3
 80099f4:	e184      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80099f6:	4b36      	ldr	r3, [pc, #216]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f003 0302 	and.w	r3, r3, #2
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1f0      	bne.n	80099e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0308 	and.w	r3, r3, #8
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d030      	beq.n	8009a70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d016      	beq.n	8009a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a16:	4b30      	ldr	r3, [pc, #192]	; (8009ad8 <HAL_RCC_OscConfig+0x2b4>)
 8009a18:	2201      	movs	r2, #1
 8009a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a1c:	f7fd fe68 	bl	80076f0 <HAL_GetTick>
 8009a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a22:	e008      	b.n	8009a36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a24:	f7fd fe64 	bl	80076f0 <HAL_GetTick>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d901      	bls.n	8009a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	e164      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009a36:	4b26      	ldr	r3, [pc, #152]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a3a:	f003 0302 	and.w	r3, r3, #2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d0f0      	beq.n	8009a24 <HAL_RCC_OscConfig+0x200>
 8009a42:	e015      	b.n	8009a70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a44:	4b24      	ldr	r3, [pc, #144]	; (8009ad8 <HAL_RCC_OscConfig+0x2b4>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a4a:	f7fd fe51 	bl	80076f0 <HAL_GetTick>
 8009a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a50:	e008      	b.n	8009a64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009a52:	f7fd fe4d 	bl	80076f0 <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d901      	bls.n	8009a64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e14d      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009a64:	4b1a      	ldr	r3, [pc, #104]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a68:	f003 0302 	and.w	r3, r3, #2
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1f0      	bne.n	8009a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 0304 	and.w	r3, r3, #4
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 80a0 	beq.w	8009bbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a82:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10f      	bne.n	8009aae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60bb      	str	r3, [r7, #8]
 8009a92:	4b0f      	ldr	r3, [pc, #60]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a96:	4a0e      	ldr	r2, [pc, #56]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8009a9e:	4b0c      	ldr	r3, [pc, #48]	; (8009ad0 <HAL_RCC_OscConfig+0x2ac>)
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aa6:	60bb      	str	r3, [r7, #8]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009aae:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <HAL_RCC_OscConfig+0x2b8>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d121      	bne.n	8009afe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009aba:	4b08      	ldr	r3, [pc, #32]	; (8009adc <HAL_RCC_OscConfig+0x2b8>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a07      	ldr	r2, [pc, #28]	; (8009adc <HAL_RCC_OscConfig+0x2b8>)
 8009ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ac6:	f7fd fe13 	bl	80076f0 <HAL_GetTick>
 8009aca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009acc:	e011      	b.n	8009af2 <HAL_RCC_OscConfig+0x2ce>
 8009ace:	bf00      	nop
 8009ad0:	40023800 	.word	0x40023800
 8009ad4:	42470000 	.word	0x42470000
 8009ad8:	42470e80 	.word	0x42470e80
 8009adc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ae0:	f7fd fe06 	bl	80076f0 <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d901      	bls.n	8009af2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e106      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009af2:	4b85      	ldr	r3, [pc, #532]	; (8009d08 <HAL_RCC_OscConfig+0x4e4>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d0f0      	beq.n	8009ae0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d106      	bne.n	8009b14 <HAL_RCC_OscConfig+0x2f0>
 8009b06:	4b81      	ldr	r3, [pc, #516]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b0a:	4a80      	ldr	r2, [pc, #512]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009b0c:	f043 0301 	orr.w	r3, r3, #1
 8009b10:	6713      	str	r3, [r2, #112]	; 0x70
 8009b12:	e01c      	b.n	8009b4e <HAL_RCC_OscConfig+0x32a>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	2b05      	cmp	r3, #5
 8009b1a:	d10c      	bne.n	8009b36 <HAL_RCC_OscConfig+0x312>
 8009b1c:	4b7b      	ldr	r3, [pc, #492]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b20:	4a7a      	ldr	r2, [pc, #488]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009b22:	f043 0304 	orr.w	r3, r3, #4
 8009b26:	6713      	str	r3, [r2, #112]	; 0x70
 8009b28:	4b78      	ldr	r3, [pc, #480]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b2c:	4a77      	ldr	r2, [pc, #476]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009b2e:	f043 0301 	orr.w	r3, r3, #1
 8009b32:	6713      	str	r3, [r2, #112]	; 0x70
 8009b34:	e00b      	b.n	8009b4e <HAL_RCC_OscConfig+0x32a>
 8009b36:	4b75      	ldr	r3, [pc, #468]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b3a:	4a74      	ldr	r2, [pc, #464]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009b3c:	f023 0301 	bic.w	r3, r3, #1
 8009b40:	6713      	str	r3, [r2, #112]	; 0x70
 8009b42:	4b72      	ldr	r3, [pc, #456]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b46:	4a71      	ldr	r2, [pc, #452]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009b48:	f023 0304 	bic.w	r3, r3, #4
 8009b4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d015      	beq.n	8009b82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b56:	f7fd fdcb 	bl	80076f0 <HAL_GetTick>
 8009b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b5c:	e00a      	b.n	8009b74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b5e:	f7fd fdc7 	bl	80076f0 <HAL_GetTick>
 8009b62:	4602      	mov	r2, r0
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d901      	bls.n	8009b74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e0c5      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b74:	4b65      	ldr	r3, [pc, #404]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d0ee      	beq.n	8009b5e <HAL_RCC_OscConfig+0x33a>
 8009b80:	e014      	b.n	8009bac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b82:	f7fd fdb5 	bl	80076f0 <HAL_GetTick>
 8009b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009b88:	e00a      	b.n	8009ba0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b8a:	f7fd fdb1 	bl	80076f0 <HAL_GetTick>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d901      	bls.n	8009ba0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e0af      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ba0:	4b5a      	ldr	r3, [pc, #360]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba4:	f003 0302 	and.w	r3, r3, #2
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d1ee      	bne.n	8009b8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d105      	bne.n	8009bbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009bb2:	4b56      	ldr	r3, [pc, #344]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb6:	4a55      	ldr	r2, [pc, #340]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 809b 	beq.w	8009cfe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009bc8:	4b50      	ldr	r3, [pc, #320]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f003 030c 	and.w	r3, r3, #12
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d05c      	beq.n	8009c8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d141      	bne.n	8009c60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009bdc:	4b4c      	ldr	r3, [pc, #304]	; (8009d10 <HAL_RCC_OscConfig+0x4ec>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009be2:	f7fd fd85 	bl	80076f0 <HAL_GetTick>
 8009be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009be8:	e008      	b.n	8009bfc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009bea:	f7fd fd81 	bl	80076f0 <HAL_GetTick>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	1ad3      	subs	r3, r2, r3
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d901      	bls.n	8009bfc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e081      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009bfc:	4b43      	ldr	r3, [pc, #268]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1f0      	bne.n	8009bea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	69da      	ldr	r2, [r3, #28]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a1b      	ldr	r3, [r3, #32]
 8009c10:	431a      	orrs	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c16:	019b      	lsls	r3, r3, #6
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1e:	085b      	lsrs	r3, r3, #1
 8009c20:	3b01      	subs	r3, #1
 8009c22:	041b      	lsls	r3, r3, #16
 8009c24:	431a      	orrs	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2a:	061b      	lsls	r3, r3, #24
 8009c2c:	4937      	ldr	r1, [pc, #220]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009c32:	4b37      	ldr	r3, [pc, #220]	; (8009d10 <HAL_RCC_OscConfig+0x4ec>)
 8009c34:	2201      	movs	r2, #1
 8009c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c38:	f7fd fd5a 	bl	80076f0 <HAL_GetTick>
 8009c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c3e:	e008      	b.n	8009c52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c40:	f7fd fd56 	bl	80076f0 <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d901      	bls.n	8009c52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e056      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c52:	4b2e      	ldr	r3, [pc, #184]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0f0      	beq.n	8009c40 <HAL_RCC_OscConfig+0x41c>
 8009c5e:	e04e      	b.n	8009cfe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c60:	4b2b      	ldr	r3, [pc, #172]	; (8009d10 <HAL_RCC_OscConfig+0x4ec>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c66:	f7fd fd43 	bl	80076f0 <HAL_GetTick>
 8009c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c6c:	e008      	b.n	8009c80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009c6e:	f7fd fd3f 	bl	80076f0 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d901      	bls.n	8009c80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e03f      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009c80:	4b22      	ldr	r3, [pc, #136]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1f0      	bne.n	8009c6e <HAL_RCC_OscConfig+0x44a>
 8009c8c:	e037      	b.n	8009cfe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d101      	bne.n	8009c9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e032      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009c9a:	4b1c      	ldr	r3, [pc, #112]	; (8009d0c <HAL_RCC_OscConfig+0x4e8>)
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d028      	beq.n	8009cfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d121      	bne.n	8009cfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d11a      	bne.n	8009cfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009cca:	4013      	ands	r3, r2
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009cd0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d111      	bne.n	8009cfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce0:	085b      	lsrs	r3, r3, #1
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d107      	bne.n	8009cfa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d001      	beq.n	8009cfe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e000      	b.n	8009d00 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3718      	adds	r7, #24
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	40007000 	.word	0x40007000
 8009d0c:	40023800 	.word	0x40023800
 8009d10:	42470060 	.word	0x42470060

08009d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e0cc      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009d28:	4b68      	ldr	r3, [pc, #416]	; (8009ecc <HAL_RCC_ClockConfig+0x1b8>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 030f 	and.w	r3, r3, #15
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d90c      	bls.n	8009d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d36:	4b65      	ldr	r3, [pc, #404]	; (8009ecc <HAL_RCC_ClockConfig+0x1b8>)
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	b2d2      	uxtb	r2, r2
 8009d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d3e:	4b63      	ldr	r3, [pc, #396]	; (8009ecc <HAL_RCC_ClockConfig+0x1b8>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f003 030f 	and.w	r3, r3, #15
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d001      	beq.n	8009d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e0b8      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d020      	beq.n	8009d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d005      	beq.n	8009d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009d68:	4b59      	ldr	r3, [pc, #356]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	4a58      	ldr	r2, [pc, #352]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0308 	and.w	r3, r3, #8
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d005      	beq.n	8009d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009d80:	4b53      	ldr	r3, [pc, #332]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	4a52      	ldr	r2, [pc, #328]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d8c:	4b50      	ldr	r3, [pc, #320]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	494d      	ldr	r1, [pc, #308]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0301 	and.w	r3, r3, #1
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d044      	beq.n	8009e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d107      	bne.n	8009dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009db2:	4b47      	ldr	r3, [pc, #284]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d119      	bne.n	8009df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e07f      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d003      	beq.n	8009dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009dce:	2b03      	cmp	r3, #3
 8009dd0:	d107      	bne.n	8009de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009dd2:	4b3f      	ldr	r3, [pc, #252]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d109      	bne.n	8009df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e06f      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009de2:	4b3b      	ldr	r3, [pc, #236]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0302 	and.w	r3, r3, #2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d101      	bne.n	8009df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e067      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009df2:	4b37      	ldr	r3, [pc, #220]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f023 0203 	bic.w	r2, r3, #3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	4934      	ldr	r1, [pc, #208]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009e04:	f7fd fc74 	bl	80076f0 <HAL_GetTick>
 8009e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e0a:	e00a      	b.n	8009e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e0c:	f7fd fc70 	bl	80076f0 <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d901      	bls.n	8009e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009e1e:	2303      	movs	r3, #3
 8009e20:	e04f      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009e22:	4b2b      	ldr	r3, [pc, #172]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	f003 020c 	and.w	r2, r3, #12
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d1eb      	bne.n	8009e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009e34:	4b25      	ldr	r3, [pc, #148]	; (8009ecc <HAL_RCC_ClockConfig+0x1b8>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 030f 	and.w	r3, r3, #15
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d20c      	bcs.n	8009e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e42:	4b22      	ldr	r3, [pc, #136]	; (8009ecc <HAL_RCC_ClockConfig+0x1b8>)
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	b2d2      	uxtb	r2, r2
 8009e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e4a:	4b20      	ldr	r3, [pc, #128]	; (8009ecc <HAL_RCC_ClockConfig+0x1b8>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 030f 	and.w	r3, r3, #15
 8009e52:	683a      	ldr	r2, [r7, #0]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d001      	beq.n	8009e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e032      	b.n	8009ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d008      	beq.n	8009e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009e68:	4b19      	ldr	r3, [pc, #100]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68db      	ldr	r3, [r3, #12]
 8009e74:	4916      	ldr	r1, [pc, #88]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e76:	4313      	orrs	r3, r2
 8009e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0308 	and.w	r3, r3, #8
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d009      	beq.n	8009e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009e86:	4b12      	ldr	r3, [pc, #72]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	490e      	ldr	r1, [pc, #56]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009e9a:	f000 f821 	bl	8009ee0 <HAL_RCC_GetSysClockFreq>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	4b0b      	ldr	r3, [pc, #44]	; (8009ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	091b      	lsrs	r3, r3, #4
 8009ea6:	f003 030f 	and.w	r3, r3, #15
 8009eaa:	490a      	ldr	r1, [pc, #40]	; (8009ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8009eac:	5ccb      	ldrb	r3, [r1, r3]
 8009eae:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb2:	4a09      	ldr	r2, [pc, #36]	; (8009ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8009eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009eb6:	4b09      	ldr	r3, [pc, #36]	; (8009edc <HAL_RCC_ClockConfig+0x1c8>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7f9 fa3a 	bl	8003334 <HAL_InitTick>

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	40023c00 	.word	0x40023c00
 8009ed0:	40023800 	.word	0x40023800
 8009ed4:	0801bd5c 	.word	0x0801bd5c
 8009ed8:	20000088 	.word	0x20000088
 8009edc:	200000b0 	.word	0x200000b0

08009ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ee0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009ee4:	b084      	sub	sp, #16
 8009ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	607b      	str	r3, [r7, #4]
 8009eec:	2300      	movs	r3, #0
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009ef8:	4b67      	ldr	r3, [pc, #412]	; (800a098 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f003 030c 	and.w	r3, r3, #12
 8009f00:	2b08      	cmp	r3, #8
 8009f02:	d00d      	beq.n	8009f20 <HAL_RCC_GetSysClockFreq+0x40>
 8009f04:	2b08      	cmp	r3, #8
 8009f06:	f200 80bd 	bhi.w	800a084 <HAL_RCC_GetSysClockFreq+0x1a4>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <HAL_RCC_GetSysClockFreq+0x34>
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d003      	beq.n	8009f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8009f12:	e0b7      	b.n	800a084 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009f14:	4b61      	ldr	r3, [pc, #388]	; (800a09c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009f16:	60bb      	str	r3, [r7, #8]
       break;
 8009f18:	e0b7      	b.n	800a08a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009f1a:	4b60      	ldr	r3, [pc, #384]	; (800a09c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009f1c:	60bb      	str	r3, [r7, #8]
      break;
 8009f1e:	e0b4      	b.n	800a08a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009f20:	4b5d      	ldr	r3, [pc, #372]	; (800a098 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009f2a:	4b5b      	ldr	r3, [pc, #364]	; (800a098 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d04d      	beq.n	8009fd2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009f36:	4b58      	ldr	r3, [pc, #352]	; (800a098 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	099b      	lsrs	r3, r3, #6
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	f04f 0300 	mov.w	r3, #0
 8009f42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009f46:	f04f 0100 	mov.w	r1, #0
 8009f4a:	ea02 0800 	and.w	r8, r2, r0
 8009f4e:	ea03 0901 	and.w	r9, r3, r1
 8009f52:	4640      	mov	r0, r8
 8009f54:	4649      	mov	r1, r9
 8009f56:	f04f 0200 	mov.w	r2, #0
 8009f5a:	f04f 0300 	mov.w	r3, #0
 8009f5e:	014b      	lsls	r3, r1, #5
 8009f60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009f64:	0142      	lsls	r2, r0, #5
 8009f66:	4610      	mov	r0, r2
 8009f68:	4619      	mov	r1, r3
 8009f6a:	ebb0 0008 	subs.w	r0, r0, r8
 8009f6e:	eb61 0109 	sbc.w	r1, r1, r9
 8009f72:	f04f 0200 	mov.w	r2, #0
 8009f76:	f04f 0300 	mov.w	r3, #0
 8009f7a:	018b      	lsls	r3, r1, #6
 8009f7c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009f80:	0182      	lsls	r2, r0, #6
 8009f82:	1a12      	subs	r2, r2, r0
 8009f84:	eb63 0301 	sbc.w	r3, r3, r1
 8009f88:	f04f 0000 	mov.w	r0, #0
 8009f8c:	f04f 0100 	mov.w	r1, #0
 8009f90:	00d9      	lsls	r1, r3, #3
 8009f92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009f96:	00d0      	lsls	r0, r2, #3
 8009f98:	4602      	mov	r2, r0
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	eb12 0208 	adds.w	r2, r2, r8
 8009fa0:	eb43 0309 	adc.w	r3, r3, r9
 8009fa4:	f04f 0000 	mov.w	r0, #0
 8009fa8:	f04f 0100 	mov.w	r1, #0
 8009fac:	0299      	lsls	r1, r3, #10
 8009fae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009fb2:	0290      	lsls	r0, r2, #10
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4619      	mov	r1, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f04f 0300 	mov.w	r3, #0
 8009fc4:	f7f6 fe70 	bl	8000ca8 <__aeabi_uldivmod>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	460b      	mov	r3, r1
 8009fcc:	4613      	mov	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]
 8009fd0:	e04a      	b.n	800a068 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009fd2:	4b31      	ldr	r3, [pc, #196]	; (800a098 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	099b      	lsrs	r3, r3, #6
 8009fd8:	461a      	mov	r2, r3
 8009fda:	f04f 0300 	mov.w	r3, #0
 8009fde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009fe2:	f04f 0100 	mov.w	r1, #0
 8009fe6:	ea02 0400 	and.w	r4, r2, r0
 8009fea:	ea03 0501 	and.w	r5, r3, r1
 8009fee:	4620      	mov	r0, r4
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f04f 0200 	mov.w	r2, #0
 8009ff6:	f04f 0300 	mov.w	r3, #0
 8009ffa:	014b      	lsls	r3, r1, #5
 8009ffc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a000:	0142      	lsls	r2, r0, #5
 800a002:	4610      	mov	r0, r2
 800a004:	4619      	mov	r1, r3
 800a006:	1b00      	subs	r0, r0, r4
 800a008:	eb61 0105 	sbc.w	r1, r1, r5
 800a00c:	f04f 0200 	mov.w	r2, #0
 800a010:	f04f 0300 	mov.w	r3, #0
 800a014:	018b      	lsls	r3, r1, #6
 800a016:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a01a:	0182      	lsls	r2, r0, #6
 800a01c:	1a12      	subs	r2, r2, r0
 800a01e:	eb63 0301 	sbc.w	r3, r3, r1
 800a022:	f04f 0000 	mov.w	r0, #0
 800a026:	f04f 0100 	mov.w	r1, #0
 800a02a:	00d9      	lsls	r1, r3, #3
 800a02c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a030:	00d0      	lsls	r0, r2, #3
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	1912      	adds	r2, r2, r4
 800a038:	eb45 0303 	adc.w	r3, r5, r3
 800a03c:	f04f 0000 	mov.w	r0, #0
 800a040:	f04f 0100 	mov.w	r1, #0
 800a044:	0299      	lsls	r1, r3, #10
 800a046:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a04a:	0290      	lsls	r0, r2, #10
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4610      	mov	r0, r2
 800a052:	4619      	mov	r1, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	461a      	mov	r2, r3
 800a058:	f04f 0300 	mov.w	r3, #0
 800a05c:	f7f6 fe24 	bl	8000ca8 <__aeabi_uldivmod>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4613      	mov	r3, r2
 800a066:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a068:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	0c1b      	lsrs	r3, r3, #16
 800a06e:	f003 0303 	and.w	r3, r3, #3
 800a072:	3301      	adds	r3, #1
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a080:	60bb      	str	r3, [r7, #8]
      break;
 800a082:	e002      	b.n	800a08a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a084:	4b05      	ldr	r3, [pc, #20]	; (800a09c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a086:	60bb      	str	r3, [r7, #8]
      break;
 800a088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a08a:	68bb      	ldr	r3, [r7, #8]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a096:	bf00      	nop
 800a098:	40023800 	.word	0x40023800
 800a09c:	00f42400 	.word	0x00f42400

0800a0a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a0a4:	4b03      	ldr	r3, [pc, #12]	; (800a0b4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	20000088 	.word	0x20000088

0800a0b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a0bc:	f7ff fff0 	bl	800a0a0 <HAL_RCC_GetHCLKFreq>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	4b05      	ldr	r3, [pc, #20]	; (800a0d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	0a9b      	lsrs	r3, r3, #10
 800a0c8:	f003 0307 	and.w	r3, r3, #7
 800a0cc:	4903      	ldr	r1, [pc, #12]	; (800a0dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a0ce:	5ccb      	ldrb	r3, [r1, r3]
 800a0d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	40023800 	.word	0x40023800
 800a0dc:	0801bd6c 	.word	0x0801bd6c

0800a0e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a0e4:	f7ff ffdc 	bl	800a0a0 <HAL_RCC_GetHCLKFreq>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	4b05      	ldr	r3, [pc, #20]	; (800a100 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	0b5b      	lsrs	r3, r3, #13
 800a0f0:	f003 0307 	and.w	r3, r3, #7
 800a0f4:	4903      	ldr	r1, [pc, #12]	; (800a104 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a0f6:	5ccb      	ldrb	r3, [r1, r3]
 800a0f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	40023800 	.word	0x40023800
 800a104:	0801bd6c 	.word	0x0801bd6c

0800a108 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	220f      	movs	r2, #15
 800a116:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a118:	4b12      	ldr	r3, [pc, #72]	; (800a164 <HAL_RCC_GetClockConfig+0x5c>)
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	f003 0203 	and.w	r2, r3, #3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a124:	4b0f      	ldr	r3, [pc, #60]	; (800a164 <HAL_RCC_GetClockConfig+0x5c>)
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a130:	4b0c      	ldr	r3, [pc, #48]	; (800a164 <HAL_RCC_GetClockConfig+0x5c>)
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a13c:	4b09      	ldr	r3, [pc, #36]	; (800a164 <HAL_RCC_GetClockConfig+0x5c>)
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	08db      	lsrs	r3, r3, #3
 800a142:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a14a:	4b07      	ldr	r3, [pc, #28]	; (800a168 <HAL_RCC_GetClockConfig+0x60>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 020f 	and.w	r2, r3, #15
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	601a      	str	r2, [r3, #0]
}
 800a156:	bf00      	nop
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	40023800 	.word	0x40023800
 800a168:	40023c00 	.word	0x40023c00

0800a16c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a178:	2300      	movs	r3, #0
 800a17a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10b      	bne.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a190:	2b00      	cmp	r3, #0
 800a192:	d105      	bne.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d075      	beq.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a1a0:	4bad      	ldr	r3, [pc, #692]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a1a6:	f7fd faa3 	bl	80076f0 <HAL_GetTick>
 800a1aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a1ac:	e008      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a1ae:	f7fd fa9f 	bl	80076f0 <HAL_GetTick>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d901      	bls.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e18b      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a1c0:	4ba6      	ldr	r3, [pc, #664]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1f0      	bne.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 0301 	and.w	r3, r3, #1
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d009      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	019a      	lsls	r2, r3, #6
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	071b      	lsls	r3, r3, #28
 800a1e4:	499d      	ldr	r1, [pc, #628]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 0302 	and.w	r3, r3, #2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d01f      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a1f8:	4b98      	ldr	r3, [pc, #608]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a1fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1fe:	0f1b      	lsrs	r3, r3, #28
 800a200:	f003 0307 	and.w	r3, r3, #7
 800a204:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	019a      	lsls	r2, r3, #6
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	061b      	lsls	r3, r3, #24
 800a212:	431a      	orrs	r2, r3
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	071b      	lsls	r3, r3, #28
 800a218:	4990      	ldr	r1, [pc, #576]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a220:	4b8e      	ldr	r3, [pc, #568]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a226:	f023 021f 	bic.w	r2, r3, #31
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	69db      	ldr	r3, [r3, #28]
 800a22e:	3b01      	subs	r3, #1
 800a230:	498a      	ldr	r1, [pc, #552]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a232:	4313      	orrs	r3, r2
 800a234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00d      	beq.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	019a      	lsls	r2, r3, #6
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	061b      	lsls	r3, r3, #24
 800a250:	431a      	orrs	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	071b      	lsls	r3, r3, #28
 800a258:	4980      	ldr	r1, [pc, #512]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a25a:	4313      	orrs	r3, r2
 800a25c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a260:	4b7d      	ldr	r3, [pc, #500]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a262:	2201      	movs	r2, #1
 800a264:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a266:	f7fd fa43 	bl	80076f0 <HAL_GetTick>
 800a26a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a26c:	e008      	b.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a26e:	f7fd fa3f 	bl	80076f0 <HAL_GetTick>
 800a272:	4602      	mov	r2, r0
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	2b02      	cmp	r3, #2
 800a27a:	d901      	bls.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e12b      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a280:	4b76      	ldr	r3, [pc, #472]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d0f0      	beq.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 0304 	and.w	r3, r3, #4
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d079      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a2a4:	4b6e      	ldr	r3, [pc, #440]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a2aa:	f7fd fa21 	bl	80076f0 <HAL_GetTick>
 800a2ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a2b0:	e008      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a2b2:	f7fd fa1d 	bl	80076f0 <HAL_GetTick>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d901      	bls.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a2c0:	2303      	movs	r3, #3
 800a2c2:	e109      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a2c4:	4b65      	ldr	r3, [pc, #404]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2d0:	d0ef      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f003 0304 	and.w	r3, r3, #4
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d020      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a2de:	4b5f      	ldr	r3, [pc, #380]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2e4:	0f1b      	lsrs	r3, r3, #28
 800a2e6:	f003 0307 	and.w	r3, r3, #7
 800a2ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	019a      	lsls	r2, r3, #6
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	061b      	lsls	r3, r3, #24
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	071b      	lsls	r3, r3, #28
 800a2fe:	4957      	ldr	r1, [pc, #348]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a300:	4313      	orrs	r3, r2
 800a302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a306:	4b55      	ldr	r3, [pc, #340]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a30c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a1b      	ldr	r3, [r3, #32]
 800a314:	3b01      	subs	r3, #1
 800a316:	021b      	lsls	r3, r3, #8
 800a318:	4950      	ldr	r1, [pc, #320]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a31a:	4313      	orrs	r3, r2
 800a31c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0308 	and.w	r3, r3, #8
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d01e      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a32c:	4b4b      	ldr	r3, [pc, #300]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a332:	0e1b      	lsrs	r3, r3, #24
 800a334:	f003 030f 	and.w	r3, r3, #15
 800a338:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	019a      	lsls	r2, r3, #6
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	061b      	lsls	r3, r3, #24
 800a344:	431a      	orrs	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	071b      	lsls	r3, r3, #28
 800a34c:	4943      	ldr	r1, [pc, #268]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a354:	4b41      	ldr	r3, [pc, #260]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a35a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	493e      	ldr	r1, [pc, #248]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a364:	4313      	orrs	r3, r2
 800a366:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a36a:	4b3d      	ldr	r3, [pc, #244]	; (800a460 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a36c:	2201      	movs	r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a370:	f7fd f9be 	bl	80076f0 <HAL_GetTick>
 800a374:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a376:	e008      	b.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a378:	f7fd f9ba 	bl	80076f0 <HAL_GetTick>
 800a37c:	4602      	mov	r2, r0
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	1ad3      	subs	r3, r2, r3
 800a382:	2b02      	cmp	r3, #2
 800a384:	d901      	bls.n	800a38a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e0a6      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a38a:	4b34      	ldr	r3, [pc, #208]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a396:	d1ef      	bne.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0320 	and.w	r3, r3, #32
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 808d 	beq.w	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	60fb      	str	r3, [r7, #12]
 800a3aa:	4b2c      	ldr	r3, [pc, #176]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ae:	4a2b      	ldr	r2, [pc, #172]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3b4:	6413      	str	r3, [r2, #64]	; 0x40
 800a3b6:	4b29      	ldr	r3, [pc, #164]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3be:	60fb      	str	r3, [r7, #12]
 800a3c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a3c2:	4b28      	ldr	r3, [pc, #160]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a27      	ldr	r2, [pc, #156]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a3c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a3ce:	f7fd f98f 	bl	80076f0 <HAL_GetTick>
 800a3d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a3d4:	e008      	b.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a3d6:	f7fd f98b 	bl	80076f0 <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d901      	bls.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e077      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a3e8:	4b1e      	ldr	r3, [pc, #120]	; (800a464 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d0f0      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a3f4:	4b19      	ldr	r3, [pc, #100]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d039      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d032      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a412:	4b12      	ldr	r3, [pc, #72]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a416:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a41a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a41c:	4b12      	ldr	r3, [pc, #72]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800a41e:	2201      	movs	r2, #1
 800a420:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a422:	4b11      	ldr	r3, [pc, #68]	; (800a468 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800a424:	2200      	movs	r2, #0
 800a426:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a428:	4a0c      	ldr	r2, [pc, #48]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a42e:	4b0b      	ldr	r3, [pc, #44]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a432:	f003 0301 	and.w	r3, r3, #1
 800a436:	2b01      	cmp	r3, #1
 800a438:	d11e      	bne.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a43a:	f7fd f959 	bl	80076f0 <HAL_GetTick>
 800a43e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a440:	e014      	b.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a442:	f7fd f955 	bl	80076f0 <HAL_GetTick>
 800a446:	4602      	mov	r2, r0
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a450:	4293      	cmp	r3, r2
 800a452:	d90b      	bls.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e03f      	b.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800a458:	42470068 	.word	0x42470068
 800a45c:	40023800 	.word	0x40023800
 800a460:	42470070 	.word	0x42470070
 800a464:	40007000 	.word	0x40007000
 800a468:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a46c:	4b1c      	ldr	r3, [pc, #112]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a470:	f003 0302 	and.w	r3, r3, #2
 800a474:	2b00      	cmp	r3, #0
 800a476:	d0e4      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a484:	d10d      	bne.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a486:	4b16      	ldr	r3, [pc, #88]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a492:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a49a:	4911      	ldr	r1, [pc, #68]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a49c:	4313      	orrs	r3, r2
 800a49e:	608b      	str	r3, [r1, #8]
 800a4a0:	e005      	b.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	4a0e      	ldr	r2, [pc, #56]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a4ac:	6093      	str	r3, [r2, #8]
 800a4ae:	4b0c      	ldr	r3, [pc, #48]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4ba:	4909      	ldr	r1, [pc, #36]	; (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 0310 	and.w	r3, r3, #16
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d004      	beq.n	800a4d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a4d2:	4b04      	ldr	r3, [pc, #16]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800a4d4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	40023800 	.word	0x40023800
 800a4e4:	424711e0 	.word	0x424711e0

0800a4e8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e083      	b.n	800a602 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	7f5b      	ldrb	r3, [r3, #29]
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	2b00      	cmp	r3, #0
 800a502:	d105      	bne.n	800a510 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7f8 fac6 	bl	8002a9c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2202      	movs	r2, #2
 800a514:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	22ca      	movs	r2, #202	; 0xca
 800a51c:	625a      	str	r2, [r3, #36]	; 0x24
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2253      	movs	r2, #83	; 0x53
 800a524:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fc26 	bl	800ad78 <RTC_EnterInitMode>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d008      	beq.n	800a544 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	22ff      	movs	r2, #255	; 0xff
 800a538:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2204      	movs	r2, #4
 800a53e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e05e      	b.n	800a602 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	6812      	ldr	r2, [r2, #0]
 800a54e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a556:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6899      	ldr	r1, [r3, #8]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	691b      	ldr	r3, [r3, #16]
 800a566:	431a      	orrs	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	431a      	orrs	r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	430a      	orrs	r2, r1
 800a574:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	68d2      	ldr	r2, [r2, #12]
 800a57e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6919      	ldr	r1, [r3, #16]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	041a      	lsls	r2, r3, #16
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	430a      	orrs	r2, r1
 800a592:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68da      	ldr	r2, [r3, #12]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5a2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	f003 0320 	and.w	r3, r3, #32
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10e      	bne.n	800a5d0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fbb8 	bl	800ad28 <HAL_RTC_WaitForSynchro>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d008      	beq.n	800a5d0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	22ff      	movs	r2, #255	; 0xff
 800a5c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2204      	movs	r2, #4
 800a5ca:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e018      	b.n	800a602 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a5de:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	699a      	ldr	r2, [r3, #24]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	22ff      	movs	r2, #255	; 0xff
 800a5f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a600:	2300      	movs	r3, #0
  }
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a60a:	b590      	push	{r4, r7, lr}
 800a60c:	b087      	sub	sp, #28
 800a60e:	af00      	add	r7, sp, #0
 800a610:	60f8      	str	r0, [r7, #12]
 800a612:	60b9      	str	r1, [r7, #8]
 800a614:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a616:	2300      	movs	r3, #0
 800a618:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	7f1b      	ldrb	r3, [r3, #28]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d101      	bne.n	800a626 <HAL_RTC_SetTime+0x1c>
 800a622:	2302      	movs	r3, #2
 800a624:	e0aa      	b.n	800a77c <HAL_RTC_SetTime+0x172>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2201      	movs	r2, #1
 800a62a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2202      	movs	r2, #2
 800a630:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d126      	bne.n	800a686 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a642:	2b00      	cmp	r3, #0
 800a644:	d102      	bne.n	800a64c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	2200      	movs	r2, #0
 800a64a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	4618      	mov	r0, r3
 800a652:	f000 fbbd 	bl	800add0 <RTC_ByteToBcd2>
 800a656:	4603      	mov	r3, r0
 800a658:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	785b      	ldrb	r3, [r3, #1]
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 fbb6 	bl	800add0 <RTC_ByteToBcd2>
 800a664:	4603      	mov	r3, r0
 800a666:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a668:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	789b      	ldrb	r3, [r3, #2]
 800a66e:	4618      	mov	r0, r3
 800a670:	f000 fbae 	bl	800add0 <RTC_ByteToBcd2>
 800a674:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a676:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	78db      	ldrb	r3, [r3, #3]
 800a67e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a680:	4313      	orrs	r3, r2
 800a682:	617b      	str	r3, [r7, #20]
 800a684:	e018      	b.n	800a6b8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a690:	2b00      	cmp	r3, #0
 800a692:	d102      	bne.n	800a69a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2200      	movs	r2, #0
 800a698:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	785b      	ldrb	r3, [r3, #1]
 800a6a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a6a6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a6a8:	68ba      	ldr	r2, [r7, #8]
 800a6aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a6ac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	78db      	ldrb	r3, [r3, #3]
 800a6b2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	22ca      	movs	r2, #202	; 0xca
 800a6be:	625a      	str	r2, [r3, #36]	; 0x24
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2253      	movs	r2, #83	; 0x53
 800a6c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f000 fb55 	bl	800ad78 <RTC_EnterInitMode>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00b      	beq.n	800a6ec <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	22ff      	movs	r2, #255	; 0xff
 800a6da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2204      	movs	r2, #4
 800a6e0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e047      	b.n	800a77c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a6f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a6fa:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689a      	ldr	r2, [r3, #8]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a70a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6899      	ldr	r1, [r3, #8]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	68da      	ldr	r2, [r3, #12]
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	431a      	orrs	r2, r3
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	430a      	orrs	r2, r1
 800a722:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68da      	ldr	r2, [r3, #12]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a732:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f003 0320 	and.w	r3, r3, #32
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d111      	bne.n	800a766 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f000 faf0 	bl	800ad28 <HAL_RTC_WaitForSynchro>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00b      	beq.n	800a766 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	22ff      	movs	r2, #255	; 0xff
 800a754:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2204      	movs	r2, #4
 800a75a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a762:	2301      	movs	r3, #1
 800a764:	e00a      	b.n	800a77c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	22ff      	movs	r2, #255	; 0xff
 800a76c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2201      	movs	r2, #1
 800a772:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a77a:	2300      	movs	r3, #0
  }
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	371c      	adds	r7, #28
 800a780:	46bd      	mov	sp, r7
 800a782:	bd90      	pop	{r4, r7, pc}

0800a784 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a790:	2300      	movs	r3, #0
 800a792:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a7b6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a7ba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	0c1b      	lsrs	r3, r3, #16
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	0a1b      	lsrs	r3, r3, #8
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d6:	b2da      	uxtb	r2, r3
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	0c1b      	lsrs	r3, r3, #16
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d11a      	bne.n	800a836 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	4618      	mov	r0, r3
 800a806:	f000 fb01 	bl	800ae0c <RTC_Bcd2ToByte>
 800a80a:	4603      	mov	r3, r0
 800a80c:	461a      	mov	r2, r3
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	785b      	ldrb	r3, [r3, #1]
 800a816:	4618      	mov	r0, r3
 800a818:	f000 faf8 	bl	800ae0c <RTC_Bcd2ToByte>
 800a81c:	4603      	mov	r3, r0
 800a81e:	461a      	mov	r2, r3
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	789b      	ldrb	r3, [r3, #2]
 800a828:	4618      	mov	r0, r3
 800a82a:	f000 faef 	bl	800ae0c <RTC_Bcd2ToByte>
 800a82e:	4603      	mov	r3, r0
 800a830:	461a      	mov	r2, r3
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a840:	b590      	push	{r4, r7, lr}
 800a842:	b087      	sub	sp, #28
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a84c:	2300      	movs	r3, #0
 800a84e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	7f1b      	ldrb	r3, [r3, #28]
 800a854:	2b01      	cmp	r3, #1
 800a856:	d101      	bne.n	800a85c <HAL_RTC_SetDate+0x1c>
 800a858:	2302      	movs	r3, #2
 800a85a:	e094      	b.n	800a986 <HAL_RTC_SetDate+0x146>
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2202      	movs	r2, #2
 800a866:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d10e      	bne.n	800a88c <HAL_RTC_SetDate+0x4c>
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	785b      	ldrb	r3, [r3, #1]
 800a872:	f003 0310 	and.w	r3, r3, #16
 800a876:	2b00      	cmp	r3, #0
 800a878:	d008      	beq.n	800a88c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	785b      	ldrb	r3, [r3, #1]
 800a87e:	f023 0310 	bic.w	r3, r3, #16
 800a882:	b2db      	uxtb	r3, r3
 800a884:	330a      	adds	r3, #10
 800a886:	b2da      	uxtb	r2, r3
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d11c      	bne.n	800a8cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	78db      	ldrb	r3, [r3, #3]
 800a896:	4618      	mov	r0, r3
 800a898:	f000 fa9a 	bl	800add0 <RTC_ByteToBcd2>
 800a89c:	4603      	mov	r3, r0
 800a89e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	785b      	ldrb	r3, [r3, #1]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 fa93 	bl	800add0 <RTC_ByteToBcd2>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a8ae:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	789b      	ldrb	r3, [r3, #2]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 fa8b 	bl	800add0 <RTC_ByteToBcd2>
 800a8ba:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a8bc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	617b      	str	r3, [r7, #20]
 800a8ca:	e00e      	b.n	800a8ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	78db      	ldrb	r3, [r3, #3]
 800a8d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	785b      	ldrb	r3, [r3, #1]
 800a8d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a8d8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a8de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	781b      	ldrb	r3, [r3, #0]
 800a8e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	22ca      	movs	r2, #202	; 0xca
 800a8f0:	625a      	str	r2, [r3, #36]	; 0x24
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2253      	movs	r2, #83	; 0x53
 800a8f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f000 fa3c 	bl	800ad78 <RTC_EnterInitMode>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00b      	beq.n	800a91e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	22ff      	movs	r2, #255	; 0xff
 800a90c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2204      	movs	r2, #4
 800a912:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2200      	movs	r2, #0
 800a918:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	e033      	b.n	800a986 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a928:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a92c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68da      	ldr	r2, [r3, #12]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a93c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	f003 0320 	and.w	r3, r3, #32
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d111      	bne.n	800a970 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 f9eb 	bl	800ad28 <HAL_RTC_WaitForSynchro>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00b      	beq.n	800a970 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	22ff      	movs	r2, #255	; 0xff
 800a95e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2204      	movs	r2, #4
 800a964:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e00a      	b.n	800a986 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	22ff      	movs	r2, #255	; 0xff
 800a976:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2201      	movs	r2, #1
 800a97c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a984:	2300      	movs	r3, #0
  }
}
 800a986:	4618      	mov	r0, r3
 800a988:	371c      	adds	r7, #28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd90      	pop	{r4, r7, pc}

0800a98e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b086      	sub	sp, #24
 800a992:	af00      	add	r7, sp, #0
 800a994:	60f8      	str	r0, [r7, #12]
 800a996:	60b9      	str	r1, [r7, #8]
 800a998:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a99a:	2300      	movs	r3, #0
 800a99c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a9a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a9ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	0c1b      	lsrs	r3, r3, #16
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	0a1b      	lsrs	r3, r3, #8
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	f003 031f 	and.w	r3, r3, #31
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	0b5b      	lsrs	r3, r3, #13
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	f003 0307 	and.w	r3, r3, #7
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d11a      	bne.n	800aa22 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	78db      	ldrb	r3, [r3, #3]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 fa0b 	bl	800ae0c <RTC_Bcd2ToByte>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	785b      	ldrb	r3, [r3, #1]
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 fa02 	bl	800ae0c <RTC_Bcd2ToByte>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	789b      	ldrb	r3, [r3, #2]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 f9f9 	bl	800ae0c <RTC_Bcd2ToByte>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3718      	adds	r7, #24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800aa2c:	b590      	push	{r4, r7, lr}
 800aa2e:	b089      	sub	sp, #36	; 0x24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	61fb      	str	r3, [r7, #28]
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800aa40:	4b93      	ldr	r3, [pc, #588]	; (800ac90 <HAL_RTC_SetAlarm_IT+0x264>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a93      	ldr	r2, [pc, #588]	; (800ac94 <HAL_RTC_SetAlarm_IT+0x268>)
 800aa46:	fba2 2303 	umull	r2, r3, r2, r3
 800aa4a:	0adb      	lsrs	r3, r3, #11
 800aa4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa50:	fb02 f303 	mul.w	r3, r2, r3
 800aa54:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	7f1b      	ldrb	r3, [r3, #28]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d101      	bne.n	800aa62 <HAL_RTC_SetAlarm_IT+0x36>
 800aa5e:	2302      	movs	r3, #2
 800aa60:	e111      	b.n	800ac86 <HAL_RTC_SetAlarm_IT+0x25a>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2201      	movs	r2, #1
 800aa66:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d137      	bne.n	800aae4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d102      	bne.n	800aa88 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	2200      	movs	r2, #0
 800aa86:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 f99f 	bl	800add0 <RTC_ByteToBcd2>
 800aa92:	4603      	mov	r3, r0
 800aa94:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	785b      	ldrb	r3, [r3, #1]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f000 f998 	bl	800add0 <RTC_ByteToBcd2>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800aaa4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	789b      	ldrb	r3, [r3, #2]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 f990 	bl	800add0 <RTC_ByteToBcd2>
 800aab0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800aab2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	78db      	ldrb	r3, [r3, #3]
 800aaba:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800aabc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 f982 	bl	800add0 <RTC_ByteToBcd2>
 800aacc:	4603      	mov	r3, r0
 800aace:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800aad0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800aad8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800aade:	4313      	orrs	r3, r2
 800aae0:	61fb      	str	r3, [r7, #28]
 800aae2:	e023      	b.n	800ab2c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d102      	bne.n	800aaf8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	785b      	ldrb	r3, [r3, #1]
 800ab02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800ab04:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ab0a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	78db      	ldrb	r3, [r3, #3]
 800ab10:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800ab12:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ab1a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ab1c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ab22:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	685a      	ldr	r2, [r3, #4]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	22ca      	movs	r2, #202	; 0xca
 800ab3e:	625a      	str	r2, [r3, #36]	; 0x24
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2253      	movs	r2, #83	; 0x53
 800ab46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab50:	d141      	bne.n	800abd6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	689a      	ldr	r2, [r3, #8]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab60:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800ab72:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	1e5a      	subs	r2, r3, #1
 800ab78:	617a      	str	r2, [r7, #20]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10b      	bne.n	800ab96 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	22ff      	movs	r2, #255	; 0xff
 800ab84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2203      	movs	r2, #3
 800ab8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e077      	b.n	800ac86 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	f003 0301 	and.w	r3, r3, #1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d0e7      	beq.n	800ab74 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	69fa      	ldr	r2, [r7, #28]
 800abaa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	689a      	ldr	r2, [r3, #8]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abc2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689a      	ldr	r2, [r3, #8]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800abd2:	609a      	str	r2, [r3, #8]
 800abd4:	e040      	b.n	800ac58 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	689a      	ldr	r2, [r3, #8]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800abe4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	b2da      	uxtb	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f462 7220 	orn	r2, r2, #640	; 0x280
 800abf6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	1e5a      	subs	r2, r3, #1
 800abfc:	617a      	str	r2, [r7, #20]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d10b      	bne.n	800ac1a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	22ff      	movs	r2, #255	; 0xff
 800ac08:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2203      	movs	r2, #3
 800ac0e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ac16:	2303      	movs	r3, #3
 800ac18:	e035      	b.n	800ac86 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	f003 0302 	and.w	r3, r3, #2
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d0e7      	beq.n	800abf8 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	69fa      	ldr	r2, [r7, #28]
 800ac2e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	69ba      	ldr	r2, [r7, #24]
 800ac36:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	689a      	ldr	r2, [r3, #8]
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac46:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	689a      	ldr	r2, [r3, #8]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ac56:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800ac58:	4b0f      	ldr	r3, [pc, #60]	; (800ac98 <HAL_RTC_SetAlarm_IT+0x26c>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a0e      	ldr	r2, [pc, #56]	; (800ac98 <HAL_RTC_SetAlarm_IT+0x26c>)
 800ac5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac62:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800ac64:	4b0c      	ldr	r3, [pc, #48]	; (800ac98 <HAL_RTC_SetAlarm_IT+0x26c>)
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	4a0b      	ldr	r2, [pc, #44]	; (800ac98 <HAL_RTC_SetAlarm_IT+0x26c>)
 800ac6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac6e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	22ff      	movs	r2, #255	; 0xff
 800ac76:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3724      	adds	r7, #36	; 0x24
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd90      	pop	{r4, r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000088 	.word	0x20000088
 800ac94:	10624dd3 	.word	0x10624dd3
 800ac98:	40013c00 	.word	0x40013c00

0800ac9c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d012      	beq.n	800acd8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00b      	beq.n	800acd8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7f8 fc15 	bl	80034f0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	b2da      	uxtb	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800acd6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d012      	beq.n	800ad0c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00b      	beq.n	800ad0c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7f8 fc0d 	bl	8003514 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68db      	ldr	r3, [r3, #12]
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f462 7220 	orn	r2, r2, #640	; 0x280
 800ad0a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800ad0c:	4b05      	ldr	r3, [pc, #20]	; (800ad24 <HAL_RTC_AlarmIRQHandler+0x88>)
 800ad0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ad12:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	775a      	strb	r2, [r3, #29]
}
 800ad1a:	bf00      	nop
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	40013c00 	.word	0x40013c00

0800ad28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ad30:	2300      	movs	r3, #0
 800ad32:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68da      	ldr	r2, [r3, #12]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ad42:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ad44:	f7fc fcd4 	bl	80076f0 <HAL_GetTick>
 800ad48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ad4a:	e009      	b.n	800ad60 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ad4c:	f7fc fcd0 	bl	80076f0 <HAL_GetTick>
 800ad50:	4602      	mov	r2, r0
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad5a:	d901      	bls.n	800ad60 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	e007      	b.n	800ad70 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	f003 0320 	and.w	r3, r3, #32
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d0ee      	beq.n	800ad4c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800ad6e:	2300      	movs	r3, #0
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ad80:	2300      	movs	r3, #0
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d119      	bne.n	800adc6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f04f 32ff 	mov.w	r2, #4294967295
 800ad9a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ad9c:	f7fc fca8 	bl	80076f0 <HAL_GetTick>
 800ada0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ada2:	e009      	b.n	800adb8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ada4:	f7fc fca4 	bl	80076f0 <HAL_GetTick>
 800ada8:	4602      	mov	r2, r0
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adb2:	d901      	bls.n	800adb8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800adb4:	2303      	movs	r3, #3
 800adb6:	e007      	b.n	800adc8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0ee      	beq.n	800ada4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	4603      	mov	r3, r0
 800add8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800adde:	e005      	b.n	800adec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	3301      	adds	r3, #1
 800ade4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800ade6:	79fb      	ldrb	r3, [r7, #7]
 800ade8:	3b0a      	subs	r3, #10
 800adea:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800adec:	79fb      	ldrb	r3, [r7, #7]
 800adee:	2b09      	cmp	r3, #9
 800adf0:	d8f6      	bhi.n	800ade0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	011b      	lsls	r3, r3, #4
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	79fb      	ldrb	r3, [r7, #7]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	b2db      	uxtb	r3, r3
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3714      	adds	r7, #20
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	4603      	mov	r3, r0
 800ae14:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800ae16:	2300      	movs	r3, #0
 800ae18:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ae1a:	79fb      	ldrb	r3, [r7, #7]
 800ae1c:	091b      	lsrs	r3, r3, #4
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	461a      	mov	r2, r3
 800ae22:	4613      	mov	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	005b      	lsls	r3, r3, #1
 800ae2a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800ae2c:	79fb      	ldrb	r3, [r7, #7]
 800ae2e:	f003 030f 	and.w	r3, r3, #15
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	4413      	add	r3, r2
 800ae3a:	b2db      	uxtb	r3, r3
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3714      	adds	r7, #20
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	7f1b      	ldrb	r3, [r3, #28]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d101      	bne.n	800ae60 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	e0a6      	b.n	800afae <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2201      	movs	r2, #1
 800ae64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2202      	movs	r2, #2
 800ae6a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	22ca      	movs	r2, #202	; 0xca
 800ae72:	625a      	str	r2, [r3, #36]	; 0x24
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2253      	movs	r2, #83	; 0x53
 800ae7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d022      	beq.n	800aed0 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800ae8a:	4b4c      	ldr	r3, [pc, #304]	; (800afbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a4c      	ldr	r2, [pc, #304]	; (800afc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800ae90:	fba2 2303 	umull	r2, r3, r2, r3
 800ae94:	0adb      	lsrs	r3, r3, #11
 800ae96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ae9a:	fb02 f303 	mul.w	r3, r2, r3
 800ae9e:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	1e5a      	subs	r2, r3, #1
 800aea4:	617a      	str	r2, [r7, #20]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10b      	bne.n	800aec2 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	22ff      	movs	r2, #255	; 0xff
 800aeb0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2203      	movs	r2, #3
 800aeb6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e075      	b.n	800afae <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	f003 0304 	and.w	r3, r3, #4
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e7      	bne.n	800aea0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	689a      	ldr	r2, [r3, #8]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aede:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800aee0:	4b36      	ldr	r3, [pc, #216]	; (800afbc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a36      	ldr	r2, [pc, #216]	; (800afc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800aee6:	fba2 2303 	umull	r2, r3, r2, r3
 800aeea:	0adb      	lsrs	r3, r3, #11
 800aeec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aef0:	fb02 f303 	mul.w	r3, r2, r3
 800aef4:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	1e5a      	subs	r2, r3, #1
 800aefa:	617a      	str	r2, [r7, #20]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10b      	bne.n	800af18 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	22ff      	movs	r2, #255	; 0xff
 800af06:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2203      	movs	r2, #3
 800af0c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	e04a      	b.n	800afae <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	f003 0304 	and.w	r3, r3, #4
 800af22:	2b00      	cmp	r3, #0
 800af24:	d0e7      	beq.n	800aef6 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68ba      	ldr	r2, [r7, #8]
 800af2c:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f022 0207 	bic.w	r2, r2, #7
 800af3c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	6899      	ldr	r1, [r3, #8]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	430a      	orrs	r2, r1
 800af4c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800af4e:	4b1d      	ldr	r3, [pc, #116]	; (800afc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a1c      	ldr	r2, [pc, #112]	; (800afc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800af54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af58:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800af5a:	4b1a      	ldr	r3, [pc, #104]	; (800afc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	4a19      	ldr	r2, [pc, #100]	; (800afc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800af60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af64:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	b2da      	uxtb	r2, r3
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800af76:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	689a      	ldr	r2, [r3, #8]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af86:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	689a      	ldr	r2, [r3, #8]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af96:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	22ff      	movs	r2, #255	; 0xff
 800af9e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2201      	movs	r2, #1
 800afa4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	371c      	adds	r7, #28
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	20000088 	.word	0x20000088
 800afc0:	10624dd3 	.word	0x10624dd3
 800afc4:	40013c00 	.word	0x40013c00

0800afc8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	7f1b      	ldrb	r3, [r3, #28]
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d101      	bne.n	800afe0 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800afdc:	2302      	movs	r3, #2
 800afde:	e047      	b.n	800b070 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2201      	movs	r2, #1
 800afe4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2202      	movs	r2, #2
 800afea:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	22ca      	movs	r2, #202	; 0xca
 800aff2:	625a      	str	r2, [r3, #36]	; 0x24
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2253      	movs	r2, #83	; 0x53
 800affa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	689a      	ldr	r2, [r3, #8]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b00a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	689a      	ldr	r2, [r3, #8]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b01a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b01c:	f7fc fb68 	bl	80076f0 <HAL_GetTick>
 800b020:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800b022:	e013      	b.n	800b04c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b024:	f7fc fb64 	bl	80076f0 <HAL_GetTick>
 800b028:	4602      	mov	r2, r0
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b032:	d90b      	bls.n	800b04c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	22ff      	movs	r2, #255	; 0xff
 800b03a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2203      	movs	r2, #3
 800b040:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800b048:	2303      	movs	r3, #3
 800b04a:	e011      	b.n	800b070 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	f003 0304 	and.w	r3, r3, #4
 800b056:	2b00      	cmp	r3, #0
 800b058:	d0e4      	beq.n	800b024 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	22ff      	movs	r2, #255	; 0xff
 800b060:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2201      	movs	r2, #1
 800b066:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00b      	beq.n	800b0a6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7f8 fa52 	bl	8003538 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b0a4:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800b0a6:	4b05      	ldr	r3, [pc, #20]	; (800b0bc <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800b0a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800b0ac:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	775a      	strb	r2, [r3, #29]
}
 800b0b4:	bf00      	nop
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	40013c00 	.word	0x40013c00

0800b0c0 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3350      	adds	r3, #80	; 0x50
 800b0d6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	697a      	ldr	r2, [r7, #20]
 800b0de:	4413      	add	r3, r2
 800b0e0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	601a      	str	r2, [r3, #0]
}
 800b0e8:	bf00      	nop
 800b0ea:	371c      	adds	r7, #28
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3350      	adds	r3, #80	; 0x50
 800b108:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	4413      	add	r3, r2
 800b112:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b082      	sub	sp, #8
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	e07b      	b.n	800b22e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d108      	bne.n	800b150 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b146:	d009      	beq.n	800b15c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	61da      	str	r2, [r3, #28]
 800b14e:	e005      	b.n	800b15c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2200      	movs	r2, #0
 800b15a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d106      	bne.n	800b17c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7f7 fffa 	bl	8003170 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2202      	movs	r2, #2
 800b180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b192:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b1a4:	431a      	orrs	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1ae:	431a      	orrs	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	f003 0302 	and.w	r3, r3, #2
 800b1b8:	431a      	orrs	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	431a      	orrs	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1d6:	431a      	orrs	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a1b      	ldr	r3, [r3, #32]
 800b1dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1e0:	ea42 0103 	orr.w	r1, r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	430a      	orrs	r2, r1
 800b1f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	0c1b      	lsrs	r3, r3, #16
 800b1fa:	f003 0104 	and.w	r1, r3, #4
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	f003 0210 	and.w	r2, r3, #16
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	430a      	orrs	r2, r1
 800b20c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	69da      	ldr	r2, [r3, #28]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b21c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b088      	sub	sp, #32
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	60f8      	str	r0, [r7, #12]
 800b23e:	60b9      	str	r1, [r7, #8]
 800b240:	603b      	str	r3, [r7, #0]
 800b242:	4613      	mov	r3, r2
 800b244:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b246:	2300      	movs	r3, #0
 800b248:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b250:	2b01      	cmp	r3, #1
 800b252:	d101      	bne.n	800b258 <HAL_SPI_Transmit+0x22>
 800b254:	2302      	movs	r3, #2
 800b256:	e126      	b.n	800b4a6 <HAL_SPI_Transmit+0x270>
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2201      	movs	r2, #1
 800b25c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b260:	f7fc fa46 	bl	80076f0 <HAL_GetTick>
 800b264:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b266:	88fb      	ldrh	r3, [r7, #6]
 800b268:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b270:	b2db      	uxtb	r3, r3
 800b272:	2b01      	cmp	r3, #1
 800b274:	d002      	beq.n	800b27c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b276:	2302      	movs	r3, #2
 800b278:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b27a:	e10b      	b.n	800b494 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d002      	beq.n	800b288 <HAL_SPI_Transmit+0x52>
 800b282:	88fb      	ldrh	r3, [r7, #6]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d102      	bne.n	800b28e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b28c:	e102      	b.n	800b494 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2203      	movs	r2, #3
 800b292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	88fa      	ldrh	r2, [r7, #6]
 800b2a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	88fa      	ldrh	r2, [r7, #6]
 800b2ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2d4:	d10f      	bne.n	800b2f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b300:	2b40      	cmp	r3, #64	; 0x40
 800b302:	d007      	beq.n	800b314 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b312:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b31c:	d14b      	bne.n	800b3b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d002      	beq.n	800b32c <HAL_SPI_Transmit+0xf6>
 800b326:	8afb      	ldrh	r3, [r7, #22]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d13e      	bne.n	800b3aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b330:	881a      	ldrh	r2, [r3, #0]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b33c:	1c9a      	adds	r2, r3, #2
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b346:	b29b      	uxth	r3, r3
 800b348:	3b01      	subs	r3, #1
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b350:	e02b      	b.n	800b3aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	f003 0302 	and.w	r3, r3, #2
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	d112      	bne.n	800b386 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b364:	881a      	ldrh	r2, [r3, #0]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b370:	1c9a      	adds	r2, r3, #2
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	3b01      	subs	r3, #1
 800b37e:	b29a      	uxth	r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	86da      	strh	r2, [r3, #54]	; 0x36
 800b384:	e011      	b.n	800b3aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b386:	f7fc f9b3 	bl	80076f0 <HAL_GetTick>
 800b38a:	4602      	mov	r2, r0
 800b38c:	69bb      	ldr	r3, [r7, #24]
 800b38e:	1ad3      	subs	r3, r2, r3
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	429a      	cmp	r2, r3
 800b394:	d803      	bhi.n	800b39e <HAL_SPI_Transmit+0x168>
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b39c:	d102      	bne.n	800b3a4 <HAL_SPI_Transmit+0x16e>
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d102      	bne.n	800b3aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b3a8:	e074      	b.n	800b494 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1ce      	bne.n	800b352 <HAL_SPI_Transmit+0x11c>
 800b3b4:	e04c      	b.n	800b450 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d002      	beq.n	800b3c4 <HAL_SPI_Transmit+0x18e>
 800b3be:	8afb      	ldrh	r3, [r7, #22]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d140      	bne.n	800b446 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	330c      	adds	r3, #12
 800b3ce:	7812      	ldrb	r2, [r2, #0]
 800b3d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b3ea:	e02c      	b.n	800b446 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	f003 0302 	and.w	r3, r3, #2
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d113      	bne.n	800b422 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	330c      	adds	r3, #12
 800b404:	7812      	ldrb	r2, [r2, #0]
 800b406:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40c:	1c5a      	adds	r2, r3, #1
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b416:	b29b      	uxth	r3, r3
 800b418:	3b01      	subs	r3, #1
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	86da      	strh	r2, [r3, #54]	; 0x36
 800b420:	e011      	b.n	800b446 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b422:	f7fc f965 	bl	80076f0 <HAL_GetTick>
 800b426:	4602      	mov	r2, r0
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d803      	bhi.n	800b43a <HAL_SPI_Transmit+0x204>
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b438:	d102      	bne.n	800b440 <HAL_SPI_Transmit+0x20a>
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d102      	bne.n	800b446 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b440:	2303      	movs	r3, #3
 800b442:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b444:	e026      	b.n	800b494 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d1cd      	bne.n	800b3ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b450:	69ba      	ldr	r2, [r7, #24]
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 fbcb 	bl	800bbf0 <SPI_EndRxTxTransaction>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2220      	movs	r2, #32
 800b464:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10a      	bne.n	800b484 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b46e:	2300      	movs	r3, #0
 800b470:	613b      	str	r3, [r7, #16]
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	613b      	str	r3, [r7, #16]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	613b      	str	r3, [r7, #16]
 800b482:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	77fb      	strb	r3, [r7, #31]
 800b490:	e000      	b.n	800b494 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b492:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b4a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3720      	adds	r7, #32
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b088      	sub	sp, #32
 800b4b2:	af02      	add	r7, sp, #8
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	60b9      	str	r1, [r7, #8]
 800b4b8:	603b      	str	r3, [r7, #0]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b4ca:	d112      	bne.n	800b4f2 <HAL_SPI_Receive+0x44>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10e      	bne.n	800b4f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2204      	movs	r2, #4
 800b4d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b4dc:	88fa      	ldrh	r2, [r7, #6]
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	68b9      	ldr	r1, [r7, #8]
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 f8f1 	bl	800b6d0 <HAL_SPI_TransmitReceive>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	e0ea      	b.n	800b6c8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d101      	bne.n	800b500 <HAL_SPI_Receive+0x52>
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	e0e3      	b.n	800b6c8 <HAL_SPI_Receive+0x21a>
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b508:	f7fc f8f2 	bl	80076f0 <HAL_GetTick>
 800b50c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b514:	b2db      	uxtb	r3, r3
 800b516:	2b01      	cmp	r3, #1
 800b518:	d002      	beq.n	800b520 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b51a:	2302      	movs	r3, #2
 800b51c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b51e:	e0ca      	b.n	800b6b6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <HAL_SPI_Receive+0x7e>
 800b526:	88fb      	ldrh	r3, [r7, #6]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d102      	bne.n	800b532 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b52c:	2301      	movs	r3, #1
 800b52e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b530:	e0c1      	b.n	800b6b6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2204      	movs	r2, #4
 800b536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	88fa      	ldrh	r2, [r7, #6]
 800b54a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	88fa      	ldrh	r2, [r7, #6]
 800b550:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2200      	movs	r2, #0
 800b56e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b578:	d10f      	bne.n	800b59a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b588:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b598:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a4:	2b40      	cmp	r3, #64	; 0x40
 800b5a6:	d007      	beq.n	800b5b8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d162      	bne.n	800b686 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b5c0:	e02e      	b.n	800b620 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d115      	bne.n	800b5fc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f103 020c 	add.w	r2, r3, #12
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5dc:	7812      	ldrb	r2, [r2, #0]
 800b5de:	b2d2      	uxtb	r2, r2
 800b5e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e6:	1c5a      	adds	r2, r3, #1
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	3b01      	subs	r3, #1
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b5fa:	e011      	b.n	800b620 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b5fc:	f7fc f878 	bl	80076f0 <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d803      	bhi.n	800b614 <HAL_SPI_Receive+0x166>
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b612:	d102      	bne.n	800b61a <HAL_SPI_Receive+0x16c>
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d102      	bne.n	800b620 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b61e:	e04a      	b.n	800b6b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b624:	b29b      	uxth	r3, r3
 800b626:	2b00      	cmp	r3, #0
 800b628:	d1cb      	bne.n	800b5c2 <HAL_SPI_Receive+0x114>
 800b62a:	e031      	b.n	800b690 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b01      	cmp	r3, #1
 800b638:	d113      	bne.n	800b662 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68da      	ldr	r2, [r3, #12]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b644:	b292      	uxth	r2, r2
 800b646:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b64c:	1c9a      	adds	r2, r3, #2
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b656:	b29b      	uxth	r3, r3
 800b658:	3b01      	subs	r3, #1
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b660:	e011      	b.n	800b686 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b662:	f7fc f845 	bl	80076f0 <HAL_GetTick>
 800b666:	4602      	mov	r2, r0
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	683a      	ldr	r2, [r7, #0]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d803      	bhi.n	800b67a <HAL_SPI_Receive+0x1cc>
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b678:	d102      	bne.n	800b680 <HAL_SPI_Receive+0x1d2>
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d102      	bne.n	800b686 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b684:	e017      	b.n	800b6b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1cd      	bne.n	800b62c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	6839      	ldr	r1, [r7, #0]
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f000 fa45 	bl	800bb24 <SPI_EndRxTransaction>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d002      	beq.n	800b6a6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2220      	movs	r2, #32
 800b6a4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d002      	beq.n	800b6b4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	75fb      	strb	r3, [r7, #23]
 800b6b2:	e000      	b.n	800b6b6 <HAL_SPI_Receive+0x208>
  }

error :
 800b6b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b6c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08c      	sub	sp, #48	; 0x30
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
 800b6dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d101      	bne.n	800b6f6 <HAL_SPI_TransmitReceive+0x26>
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	e18a      	b.n	800ba0c <HAL_SPI_TransmitReceive+0x33c>
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6fe:	f7fb fff7 	bl	80076f0 <HAL_GetTick>
 800b702:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b70a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b714:	887b      	ldrh	r3, [r7, #2]
 800b716:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d00f      	beq.n	800b740 <HAL_SPI_TransmitReceive+0x70>
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b726:	d107      	bne.n	800b738 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d103      	bne.n	800b738 <HAL_SPI_TransmitReceive+0x68>
 800b730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b734:	2b04      	cmp	r3, #4
 800b736:	d003      	beq.n	800b740 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b738:	2302      	movs	r3, #2
 800b73a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b73e:	e15b      	b.n	800b9f8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d005      	beq.n	800b752 <HAL_SPI_TransmitReceive+0x82>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d002      	beq.n	800b752 <HAL_SPI_TransmitReceive+0x82>
 800b74c:	887b      	ldrh	r3, [r7, #2]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d103      	bne.n	800b75a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b758:	e14e      	b.n	800b9f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b760:	b2db      	uxtb	r3, r3
 800b762:	2b04      	cmp	r3, #4
 800b764:	d003      	beq.n	800b76e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2205      	movs	r2, #5
 800b76a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	687a      	ldr	r2, [r7, #4]
 800b778:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	887a      	ldrh	r2, [r7, #2]
 800b77e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	887a      	ldrh	r2, [r7, #2]
 800b784:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	887a      	ldrh	r2, [r7, #2]
 800b790:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	887a      	ldrh	r2, [r7, #2]
 800b796:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2200      	movs	r2, #0
 800b79c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ae:	2b40      	cmp	r3, #64	; 0x40
 800b7b0:	d007      	beq.n	800b7c2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	68db      	ldr	r3, [r3, #12]
 800b7c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7ca:	d178      	bne.n	800b8be <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d002      	beq.n	800b7da <HAL_SPI_TransmitReceive+0x10a>
 800b7d4:	8b7b      	ldrh	r3, [r7, #26]
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d166      	bne.n	800b8a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7de:	881a      	ldrh	r2, [r3, #0]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ea:	1c9a      	adds	r2, r3, #2
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7fe:	e053      	b.n	800b8a8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	f003 0302 	and.w	r3, r3, #2
 800b80a:	2b02      	cmp	r3, #2
 800b80c:	d11b      	bne.n	800b846 <HAL_SPI_TransmitReceive+0x176>
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b812:	b29b      	uxth	r3, r3
 800b814:	2b00      	cmp	r3, #0
 800b816:	d016      	beq.n	800b846 <HAL_SPI_TransmitReceive+0x176>
 800b818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d113      	bne.n	800b846 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b822:	881a      	ldrh	r2, [r3, #0]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b82e:	1c9a      	adds	r2, r3, #2
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b838:	b29b      	uxth	r3, r3
 800b83a:	3b01      	subs	r3, #1
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b842:	2300      	movs	r3, #0
 800b844:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b01      	cmp	r3, #1
 800b852:	d119      	bne.n	800b888 <HAL_SPI_TransmitReceive+0x1b8>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b858:	b29b      	uxth	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d014      	beq.n	800b888 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	68da      	ldr	r2, [r3, #12]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b868:	b292      	uxth	r2, r2
 800b86a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b870:	1c9a      	adds	r2, r3, #2
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b87a:	b29b      	uxth	r3, r3
 800b87c:	3b01      	subs	r3, #1
 800b87e:	b29a      	uxth	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b884:	2301      	movs	r3, #1
 800b886:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b888:	f7fb ff32 	bl	80076f0 <HAL_GetTick>
 800b88c:	4602      	mov	r2, r0
 800b88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b894:	429a      	cmp	r2, r3
 800b896:	d807      	bhi.n	800b8a8 <HAL_SPI_TransmitReceive+0x1d8>
 800b898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b89e:	d003      	beq.n	800b8a8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b8a6:	e0a7      	b.n	800b9f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1a6      	bne.n	800b800 <HAL_SPI_TransmitReceive+0x130>
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1a1      	bne.n	800b800 <HAL_SPI_TransmitReceive+0x130>
 800b8bc:	e07c      	b.n	800b9b8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d002      	beq.n	800b8cc <HAL_SPI_TransmitReceive+0x1fc>
 800b8c6:	8b7b      	ldrh	r3, [r7, #26]
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d16b      	bne.n	800b9a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	330c      	adds	r3, #12
 800b8d6:	7812      	ldrb	r2, [r2, #0]
 800b8d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8de:	1c5a      	adds	r2, r3, #1
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b8f2:	e057      	b.n	800b9a4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f003 0302 	and.w	r3, r3, #2
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d11c      	bne.n	800b93c <HAL_SPI_TransmitReceive+0x26c>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b906:	b29b      	uxth	r3, r3
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d017      	beq.n	800b93c <HAL_SPI_TransmitReceive+0x26c>
 800b90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90e:	2b01      	cmp	r3, #1
 800b910:	d114      	bne.n	800b93c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	330c      	adds	r3, #12
 800b91c:	7812      	ldrb	r2, [r2, #0]
 800b91e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b924:	1c5a      	adds	r2, r3, #1
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b92e:	b29b      	uxth	r3, r3
 800b930:	3b01      	subs	r3, #1
 800b932:	b29a      	uxth	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b938:	2300      	movs	r3, #0
 800b93a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	f003 0301 	and.w	r3, r3, #1
 800b946:	2b01      	cmp	r3, #1
 800b948:	d119      	bne.n	800b97e <HAL_SPI_TransmitReceive+0x2ae>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b94e:	b29b      	uxth	r3, r3
 800b950:	2b00      	cmp	r3, #0
 800b952:	d014      	beq.n	800b97e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68da      	ldr	r2, [r3, #12]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95e:	b2d2      	uxtb	r2, r2
 800b960:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b966:	1c5a      	adds	r2, r3, #1
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b970:	b29b      	uxth	r3, r3
 800b972:	3b01      	subs	r3, #1
 800b974:	b29a      	uxth	r2, r3
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b97a:	2301      	movs	r3, #1
 800b97c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b97e:	f7fb feb7 	bl	80076f0 <HAL_GetTick>
 800b982:	4602      	mov	r2, r0
 800b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d803      	bhi.n	800b996 <HAL_SPI_TransmitReceive+0x2c6>
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b994:	d102      	bne.n	800b99c <HAL_SPI_TransmitReceive+0x2cc>
 800b996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d103      	bne.n	800b9a4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b99c:	2303      	movs	r3, #3
 800b99e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b9a2:	e029      	b.n	800b9f8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1a2      	bne.n	800b8f4 <HAL_SPI_TransmitReceive+0x224>
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d19d      	bne.n	800b8f4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b9b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f000 f917 	bl	800bbf0 <SPI_EndRxTxTransaction>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d006      	beq.n	800b9d6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2220      	movs	r2, #32
 800b9d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b9d4:	e010      	b.n	800b9f8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10b      	bne.n	800b9f6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9de:	2300      	movs	r3, #0
 800b9e0:	617b      	str	r3, [r7, #20]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	617b      	str	r3, [r7, #20]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	617b      	str	r3, [r7, #20]
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	e000      	b.n	800b9f8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b9f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2200      	movs	r2, #0
 800ba04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ba08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3730      	adds	r7, #48	; 0x30
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b088      	sub	sp, #32
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	603b      	str	r3, [r7, #0]
 800ba20:	4613      	mov	r3, r2
 800ba22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ba24:	f7fb fe64 	bl	80076f0 <HAL_GetTick>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2c:	1a9b      	subs	r3, r3, r2
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	4413      	add	r3, r2
 800ba32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ba34:	f7fb fe5c 	bl	80076f0 <HAL_GetTick>
 800ba38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ba3a:	4b39      	ldr	r3, [pc, #228]	; (800bb20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	015b      	lsls	r3, r3, #5
 800ba40:	0d1b      	lsrs	r3, r3, #20
 800ba42:	69fa      	ldr	r2, [r7, #28]
 800ba44:	fb02 f303 	mul.w	r3, r2, r3
 800ba48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba4a:	e054      	b.n	800baf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba52:	d050      	beq.n	800baf6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ba54:	f7fb fe4c 	bl	80076f0 <HAL_GetTick>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	1ad3      	subs	r3, r2, r3
 800ba5e:	69fa      	ldr	r2, [r7, #28]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d902      	bls.n	800ba6a <SPI_WaitFlagStateUntilTimeout+0x56>
 800ba64:	69fb      	ldr	r3, [r7, #28]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d13d      	bne.n	800bae6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	685a      	ldr	r2, [r3, #4]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ba78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba82:	d111      	bne.n	800baa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba8c:	d004      	beq.n	800ba98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba96:	d107      	bne.n	800baa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800baa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bab0:	d10f      	bne.n	800bad2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bad0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2201      	movs	r2, #1
 800bad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bae2:	2303      	movs	r3, #3
 800bae4:	e017      	b.n	800bb16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d101      	bne.n	800baf0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800baec:	2300      	movs	r3, #0
 800baee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	3b01      	subs	r3, #1
 800baf4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	689a      	ldr	r2, [r3, #8]
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	4013      	ands	r3, r2
 800bb00:	68ba      	ldr	r2, [r7, #8]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	bf0c      	ite	eq
 800bb06:	2301      	moveq	r3, #1
 800bb08:	2300      	movne	r3, #0
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	79fb      	ldrb	r3, [r7, #7]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d19b      	bne.n	800ba4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3720      	adds	r7, #32
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20000088 	.word	0x20000088

0800bb24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af02      	add	r7, sp, #8
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb38:	d111      	bne.n	800bb5e <SPI_EndRxTransaction+0x3a>
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb42:	d004      	beq.n	800bb4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb4c:	d107      	bne.n	800bb5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb66:	d12a      	bne.n	800bbbe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb70:	d012      	beq.n	800bb98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	9300      	str	r3, [sp, #0]
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	2180      	movs	r1, #128	; 0x80
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f7ff ff49 	bl	800ba14 <SPI_WaitFlagStateUntilTimeout>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d02d      	beq.n	800bbe4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb8c:	f043 0220 	orr.w	r2, r3, #32
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bb94:	2303      	movs	r3, #3
 800bb96:	e026      	b.n	800bbe6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2101      	movs	r1, #1
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f7ff ff36 	bl	800ba14 <SPI_WaitFlagStateUntilTimeout>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d01a      	beq.n	800bbe4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbb2:	f043 0220 	orr.w	r2, r3, #32
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bbba:	2303      	movs	r3, #3
 800bbbc:	e013      	b.n	800bbe6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	2101      	movs	r1, #1
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f7ff ff23 	bl	800ba14 <SPI_WaitFlagStateUntilTimeout>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d007      	beq.n	800bbe4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd8:	f043 0220 	orr.w	r2, r3, #32
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e000      	b.n	800bbe6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
	...

0800bbf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b088      	sub	sp, #32
 800bbf4:	af02      	add	r7, sp, #8
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bbfc:	4b1b      	ldr	r3, [pc, #108]	; (800bc6c <SPI_EndRxTxTransaction+0x7c>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a1b      	ldr	r2, [pc, #108]	; (800bc70 <SPI_EndRxTxTransaction+0x80>)
 800bc02:	fba2 2303 	umull	r2, r3, r2, r3
 800bc06:	0d5b      	lsrs	r3, r3, #21
 800bc08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bc0c:	fb02 f303 	mul.w	r3, r2, r3
 800bc10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	685b      	ldr	r3, [r3, #4]
 800bc16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc1a:	d112      	bne.n	800bc42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	2200      	movs	r2, #0
 800bc24:	2180      	movs	r1, #128	; 0x80
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f7ff fef4 	bl	800ba14 <SPI_WaitFlagStateUntilTimeout>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d016      	beq.n	800bc60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc36:	f043 0220 	orr.w	r2, r3, #32
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e00f      	b.n	800bc62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00a      	beq.n	800bc5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc58:	2b80      	cmp	r3, #128	; 0x80
 800bc5a:	d0f2      	beq.n	800bc42 <SPI_EndRxTxTransaction+0x52>
 800bc5c:	e000      	b.n	800bc60 <SPI_EndRxTxTransaction+0x70>
        break;
 800bc5e:	bf00      	nop
  }

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20000088 	.word	0x20000088
 800bc70:	165e9f81 	.word	0x165e9f81

0800bc74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e041      	b.n	800bd0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d106      	bne.n	800bca0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7f7 fce6 	bl	800366c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2202      	movs	r2, #2
 800bca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	4610      	mov	r0, r2
 800bcb4:	f000 fcea 	bl	800c68c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd08:	2300      	movs	r3, #0
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3708      	adds	r7, #8
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d001      	beq.n	800bd2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e04e      	b.n	800bdca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2202      	movs	r2, #2
 800bd30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68da      	ldr	r2, [r3, #12]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f042 0201 	orr.w	r2, r2, #1
 800bd42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a23      	ldr	r2, [pc, #140]	; (800bdd8 <HAL_TIM_Base_Start_IT+0xc4>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d022      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd56:	d01d      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a1f      	ldr	r2, [pc, #124]	; (800bddc <HAL_TIM_Base_Start_IT+0xc8>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d018      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a1e      	ldr	r2, [pc, #120]	; (800bde0 <HAL_TIM_Base_Start_IT+0xcc>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d013      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a1c      	ldr	r2, [pc, #112]	; (800bde4 <HAL_TIM_Base_Start_IT+0xd0>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d00e      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a1b      	ldr	r2, [pc, #108]	; (800bde8 <HAL_TIM_Base_Start_IT+0xd4>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d009      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a19      	ldr	r2, [pc, #100]	; (800bdec <HAL_TIM_Base_Start_IT+0xd8>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d004      	beq.n	800bd94 <HAL_TIM_Base_Start_IT+0x80>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a18      	ldr	r2, [pc, #96]	; (800bdf0 <HAL_TIM_Base_Start_IT+0xdc>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d111      	bne.n	800bdb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	f003 0307 	and.w	r3, r3, #7
 800bd9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2b06      	cmp	r3, #6
 800bda4:	d010      	beq.n	800bdc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f042 0201 	orr.w	r2, r2, #1
 800bdb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdb6:	e007      	b.n	800bdc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f042 0201 	orr.w	r2, r2, #1
 800bdc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	40010000 	.word	0x40010000
 800bddc:	40000400 	.word	0x40000400
 800bde0:	40000800 	.word	0x40000800
 800bde4:	40000c00 	.word	0x40000c00
 800bde8:	40010400 	.word	0x40010400
 800bdec:	40014000 	.word	0x40014000
 800bdf0:	40001800 	.word	0x40001800

0800bdf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e041      	b.n	800be8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d106      	bne.n	800be20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 f839 	bl	800be92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	3304      	adds	r3, #4
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f000 fc2a 	bl	800c68c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2201      	movs	r2, #1
 800be3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2201      	movs	r2, #1
 800be54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2201      	movs	r2, #1
 800be5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2201      	movs	r2, #1
 800be6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2201      	movs	r2, #1
 800be7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3708      	adds	r7, #8
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}

0800be92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800be92:	b480      	push	{r7}
 800be94:	b083      	sub	sp, #12
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800be9a:	bf00      	nop
 800be9c:	370c      	adds	r7, #12
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
	...

0800bea8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d109      	bne.n	800becc <HAL_TIM_PWM_Start+0x24>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	bf14      	ite	ne
 800bec4:	2301      	movne	r3, #1
 800bec6:	2300      	moveq	r3, #0
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	e022      	b.n	800bf12 <HAL_TIM_PWM_Start+0x6a>
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	2b04      	cmp	r3, #4
 800bed0:	d109      	bne.n	800bee6 <HAL_TIM_PWM_Start+0x3e>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	2b01      	cmp	r3, #1
 800bedc:	bf14      	ite	ne
 800bede:	2301      	movne	r3, #1
 800bee0:	2300      	moveq	r3, #0
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	e015      	b.n	800bf12 <HAL_TIM_PWM_Start+0x6a>
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b08      	cmp	r3, #8
 800beea:	d109      	bne.n	800bf00 <HAL_TIM_PWM_Start+0x58>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	bf14      	ite	ne
 800bef8:	2301      	movne	r3, #1
 800befa:	2300      	moveq	r3, #0
 800befc:	b2db      	uxtb	r3, r3
 800befe:	e008      	b.n	800bf12 <HAL_TIM_PWM_Start+0x6a>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	bf14      	ite	ne
 800bf0c:	2301      	movne	r3, #1
 800bf0e:	2300      	moveq	r3, #0
 800bf10:	b2db      	uxtb	r3, r3
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d001      	beq.n	800bf1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800bf16:	2301      	movs	r3, #1
 800bf18:	e07c      	b.n	800c014 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d104      	bne.n	800bf2a <HAL_TIM_PWM_Start+0x82>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2202      	movs	r2, #2
 800bf24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf28:	e013      	b.n	800bf52 <HAL_TIM_PWM_Start+0xaa>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	2b04      	cmp	r3, #4
 800bf2e:	d104      	bne.n	800bf3a <HAL_TIM_PWM_Start+0x92>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2202      	movs	r2, #2
 800bf34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf38:	e00b      	b.n	800bf52 <HAL_TIM_PWM_Start+0xaa>
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	2b08      	cmp	r3, #8
 800bf3e:	d104      	bne.n	800bf4a <HAL_TIM_PWM_Start+0xa2>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2202      	movs	r2, #2
 800bf44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf48:	e003      	b.n	800bf52 <HAL_TIM_PWM_Start+0xaa>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2202      	movs	r2, #2
 800bf4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2201      	movs	r2, #1
 800bf58:	6839      	ldr	r1, [r7, #0]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 fe80 	bl	800cc60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a2d      	ldr	r2, [pc, #180]	; (800c01c <HAL_TIM_PWM_Start+0x174>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d004      	beq.n	800bf74 <HAL_TIM_PWM_Start+0xcc>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a2c      	ldr	r2, [pc, #176]	; (800c020 <HAL_TIM_PWM_Start+0x178>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d101      	bne.n	800bf78 <HAL_TIM_PWM_Start+0xd0>
 800bf74:	2301      	movs	r3, #1
 800bf76:	e000      	b.n	800bf7a <HAL_TIM_PWM_Start+0xd2>
 800bf78:	2300      	movs	r3, #0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d007      	beq.n	800bf8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	4a22      	ldr	r2, [pc, #136]	; (800c01c <HAL_TIM_PWM_Start+0x174>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d022      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfa0:	d01d      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a1f      	ldr	r2, [pc, #124]	; (800c024 <HAL_TIM_PWM_Start+0x17c>)
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d018      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	4a1d      	ldr	r2, [pc, #116]	; (800c028 <HAL_TIM_PWM_Start+0x180>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d013      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a1c      	ldr	r2, [pc, #112]	; (800c02c <HAL_TIM_PWM_Start+0x184>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d00e      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a16      	ldr	r2, [pc, #88]	; (800c020 <HAL_TIM_PWM_Start+0x178>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d009      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a18      	ldr	r2, [pc, #96]	; (800c030 <HAL_TIM_PWM_Start+0x188>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d004      	beq.n	800bfde <HAL_TIM_PWM_Start+0x136>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	4a16      	ldr	r2, [pc, #88]	; (800c034 <HAL_TIM_PWM_Start+0x18c>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	d111      	bne.n	800c002 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f003 0307 	and.w	r3, r3, #7
 800bfe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2b06      	cmp	r3, #6
 800bfee:	d010      	beq.n	800c012 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f042 0201 	orr.w	r2, r2, #1
 800bffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c000:	e007      	b.n	800c012 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f042 0201 	orr.w	r2, r2, #1
 800c010:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	40010000 	.word	0x40010000
 800c020:	40010400 	.word	0x40010400
 800c024:	40000400 	.word	0x40000400
 800c028:	40000800 	.word	0x40000800
 800c02c:	40000c00 	.word	0x40000c00
 800c030:	40014000 	.word	0x40014000
 800c034:	40001800 	.word	0x40001800

0800c038 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2200      	movs	r2, #0
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 fe08 	bl	800cc60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a2e      	ldr	r2, [pc, #184]	; (800c110 <HAL_TIM_PWM_Stop+0xd8>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d004      	beq.n	800c064 <HAL_TIM_PWM_Stop+0x2c>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a2d      	ldr	r2, [pc, #180]	; (800c114 <HAL_TIM_PWM_Stop+0xdc>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d101      	bne.n	800c068 <HAL_TIM_PWM_Stop+0x30>
 800c064:	2301      	movs	r3, #1
 800c066:	e000      	b.n	800c06a <HAL_TIM_PWM_Stop+0x32>
 800c068:	2300      	movs	r3, #0
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d017      	beq.n	800c09e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	6a1a      	ldr	r2, [r3, #32]
 800c074:	f241 1311 	movw	r3, #4369	; 0x1111
 800c078:	4013      	ands	r3, r2
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10f      	bne.n	800c09e <HAL_TIM_PWM_Stop+0x66>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	6a1a      	ldr	r2, [r3, #32]
 800c084:	f240 4344 	movw	r3, #1092	; 0x444
 800c088:	4013      	ands	r3, r2
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d107      	bne.n	800c09e <HAL_TIM_PWM_Stop+0x66>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c09c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	6a1a      	ldr	r2, [r3, #32]
 800c0a4:	f241 1311 	movw	r3, #4369	; 0x1111
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10f      	bne.n	800c0ce <HAL_TIM_PWM_Stop+0x96>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	6a1a      	ldr	r2, [r3, #32]
 800c0b4:	f240 4344 	movw	r3, #1092	; 0x444
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d107      	bne.n	800c0ce <HAL_TIM_PWM_Stop+0x96>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f022 0201 	bic.w	r2, r2, #1
 800c0cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d104      	bne.n	800c0de <HAL_TIM_PWM_Stop+0xa6>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c0dc:	e013      	b.n	800c106 <HAL_TIM_PWM_Stop+0xce>
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	2b04      	cmp	r3, #4
 800c0e2:	d104      	bne.n	800c0ee <HAL_TIM_PWM_Stop+0xb6>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c0ec:	e00b      	b.n	800c106 <HAL_TIM_PWM_Stop+0xce>
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	2b08      	cmp	r3, #8
 800c0f2:	d104      	bne.n	800c0fe <HAL_TIM_PWM_Stop+0xc6>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0fc:	e003      	b.n	800c106 <HAL_TIM_PWM_Stop+0xce>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2201      	movs	r2, #1
 800c102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	40010000 	.word	0x40010000
 800c114:	40010400 	.word	0x40010400

0800c118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	f003 0302 	and.w	r3, r3, #2
 800c12a:	2b02      	cmp	r3, #2
 800c12c:	d122      	bne.n	800c174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	f003 0302 	and.w	r3, r3, #2
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d11b      	bne.n	800c174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f06f 0202 	mvn.w	r2, #2
 800c144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2201      	movs	r2, #1
 800c14a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	f003 0303 	and.w	r3, r3, #3
 800c156:	2b00      	cmp	r3, #0
 800c158:	d003      	beq.n	800c162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fa77 	bl	800c64e <HAL_TIM_IC_CaptureCallback>
 800c160:	e005      	b.n	800c16e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fa69 	bl	800c63a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 fa7a 	bl	800c662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	f003 0304 	and.w	r3, r3, #4
 800c17e:	2b04      	cmp	r3, #4
 800c180:	d122      	bne.n	800c1c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	f003 0304 	and.w	r3, r3, #4
 800c18c:	2b04      	cmp	r3, #4
 800c18e:	d11b      	bne.n	800c1c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f06f 0204 	mvn.w	r2, #4
 800c198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2202      	movs	r2, #2
 800c19e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	699b      	ldr	r3, [r3, #24]
 800c1a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d003      	beq.n	800c1b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 fa4d 	bl	800c64e <HAL_TIM_IC_CaptureCallback>
 800c1b4:	e005      	b.n	800c1c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fa3f 	bl	800c63a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fa50 	bl	800c662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	691b      	ldr	r3, [r3, #16]
 800c1ce:	f003 0308 	and.w	r3, r3, #8
 800c1d2:	2b08      	cmp	r3, #8
 800c1d4:	d122      	bne.n	800c21c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	f003 0308 	and.w	r3, r3, #8
 800c1e0:	2b08      	cmp	r3, #8
 800c1e2:	d11b      	bne.n	800c21c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f06f 0208 	mvn.w	r2, #8
 800c1ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2204      	movs	r2, #4
 800c1f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	69db      	ldr	r3, [r3, #28]
 800c1fa:	f003 0303 	and.w	r3, r3, #3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d003      	beq.n	800c20a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fa23 	bl	800c64e <HAL_TIM_IC_CaptureCallback>
 800c208:	e005      	b.n	800c216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 fa15 	bl	800c63a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fa26 	bl	800c662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	f003 0310 	and.w	r3, r3, #16
 800c226:	2b10      	cmp	r3, #16
 800c228:	d122      	bne.n	800c270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	f003 0310 	and.w	r3, r3, #16
 800c234:	2b10      	cmp	r3, #16
 800c236:	d11b      	bne.n	800c270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f06f 0210 	mvn.w	r2, #16
 800c240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2208      	movs	r2, #8
 800c246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	69db      	ldr	r3, [r3, #28]
 800c24e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c252:	2b00      	cmp	r3, #0
 800c254:	d003      	beq.n	800c25e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 f9f9 	bl	800c64e <HAL_TIM_IC_CaptureCallback>
 800c25c:	e005      	b.n	800c26a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f9eb 	bl	800c63a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 f9fc 	bl	800c662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	691b      	ldr	r3, [r3, #16]
 800c276:	f003 0301 	and.w	r3, r3, #1
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d10e      	bne.n	800c29c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	f003 0301 	and.w	r3, r3, #1
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d107      	bne.n	800c29c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f06f 0201 	mvn.w	r2, #1
 800c294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f7f6 fb3a 	bl	8002910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2a6:	2b80      	cmp	r3, #128	; 0x80
 800c2a8:	d10e      	bne.n	800c2c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2b4:	2b80      	cmp	r3, #128	; 0x80
 800c2b6:	d107      	bne.n	800c2c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c2c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fd78 	bl	800cdb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d2:	2b40      	cmp	r3, #64	; 0x40
 800c2d4:	d10e      	bne.n	800c2f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e0:	2b40      	cmp	r3, #64	; 0x40
 800c2e2:	d107      	bne.n	800c2f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c2ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f9c1 	bl	800c676 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	691b      	ldr	r3, [r3, #16]
 800c2fa:	f003 0320 	and.w	r3, r3, #32
 800c2fe:	2b20      	cmp	r3, #32
 800c300:	d10e      	bne.n	800c320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68db      	ldr	r3, [r3, #12]
 800c308:	f003 0320 	and.w	r3, r3, #32
 800c30c:	2b20      	cmp	r3, #32
 800c30e:	d107      	bne.n	800c320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f06f 0220 	mvn.w	r2, #32
 800c318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fd42 	bl	800cda4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b086      	sub	sp, #24
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d101      	bne.n	800c346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c342:	2302      	movs	r3, #2
 800c344:	e0ae      	b.n	800c4a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b0c      	cmp	r3, #12
 800c352:	f200 809f 	bhi.w	800c494 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c356:	a201      	add	r2, pc, #4	; (adr r2, 800c35c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35c:	0800c391 	.word	0x0800c391
 800c360:	0800c495 	.word	0x0800c495
 800c364:	0800c495 	.word	0x0800c495
 800c368:	0800c495 	.word	0x0800c495
 800c36c:	0800c3d1 	.word	0x0800c3d1
 800c370:	0800c495 	.word	0x0800c495
 800c374:	0800c495 	.word	0x0800c495
 800c378:	0800c495 	.word	0x0800c495
 800c37c:	0800c413 	.word	0x0800c413
 800c380:	0800c495 	.word	0x0800c495
 800c384:	0800c495 	.word	0x0800c495
 800c388:	0800c495 	.word	0x0800c495
 800c38c:	0800c453 	.word	0x0800c453
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68b9      	ldr	r1, [r7, #8]
 800c396:	4618      	mov	r0, r3
 800c398:	f000 fa18 	bl	800c7cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	699a      	ldr	r2, [r3, #24]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f042 0208 	orr.w	r2, r2, #8
 800c3aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	699a      	ldr	r2, [r3, #24]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f022 0204 	bic.w	r2, r2, #4
 800c3ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6999      	ldr	r1, [r3, #24]
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	691a      	ldr	r2, [r3, #16]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	619a      	str	r2, [r3, #24]
      break;
 800c3ce:	e064      	b.n	800c49a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68b9      	ldr	r1, [r7, #8]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f000 fa68 	bl	800c8ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	699a      	ldr	r2, [r3, #24]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	699a      	ldr	r2, [r3, #24]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	6999      	ldr	r1, [r3, #24]
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	021a      	lsls	r2, r3, #8
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	430a      	orrs	r2, r1
 800c40e:	619a      	str	r2, [r3, #24]
      break;
 800c410:	e043      	b.n	800c49a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68b9      	ldr	r1, [r7, #8]
 800c418:	4618      	mov	r0, r3
 800c41a:	f000 fabd 	bl	800c998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	69da      	ldr	r2, [r3, #28]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f042 0208 	orr.w	r2, r2, #8
 800c42c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	69da      	ldr	r2, [r3, #28]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f022 0204 	bic.w	r2, r2, #4
 800c43c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	69d9      	ldr	r1, [r3, #28]
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	691a      	ldr	r2, [r3, #16]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	61da      	str	r2, [r3, #28]
      break;
 800c450:	e023      	b.n	800c49a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68b9      	ldr	r1, [r7, #8]
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 fb11 	bl	800ca80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	69da      	ldr	r2, [r3, #28]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c46c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	69da      	ldr	r2, [r3, #28]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c47c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	69d9      	ldr	r1, [r3, #28]
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	691b      	ldr	r3, [r3, #16]
 800c488:	021a      	lsls	r2, r3, #8
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	430a      	orrs	r2, r1
 800c490:	61da      	str	r2, [r3, #28]
      break;
 800c492:	e002      	b.n	800c49a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	75fb      	strb	r3, [r7, #23]
      break;
 800c498:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3718      	adds	r7, #24
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d101      	bne.n	800c4c8 <HAL_TIM_ConfigClockSource+0x1c>
 800c4c4:	2302      	movs	r3, #2
 800c4c6:	e0b4      	b.n	800c632 <HAL_TIM_ConfigClockSource+0x186>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c4e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68ba      	ldr	r2, [r7, #8]
 800c4f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c500:	d03e      	beq.n	800c580 <HAL_TIM_ConfigClockSource+0xd4>
 800c502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c506:	f200 8087 	bhi.w	800c618 <HAL_TIM_ConfigClockSource+0x16c>
 800c50a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c50e:	f000 8086 	beq.w	800c61e <HAL_TIM_ConfigClockSource+0x172>
 800c512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c516:	d87f      	bhi.n	800c618 <HAL_TIM_ConfigClockSource+0x16c>
 800c518:	2b70      	cmp	r3, #112	; 0x70
 800c51a:	d01a      	beq.n	800c552 <HAL_TIM_ConfigClockSource+0xa6>
 800c51c:	2b70      	cmp	r3, #112	; 0x70
 800c51e:	d87b      	bhi.n	800c618 <HAL_TIM_ConfigClockSource+0x16c>
 800c520:	2b60      	cmp	r3, #96	; 0x60
 800c522:	d050      	beq.n	800c5c6 <HAL_TIM_ConfigClockSource+0x11a>
 800c524:	2b60      	cmp	r3, #96	; 0x60
 800c526:	d877      	bhi.n	800c618 <HAL_TIM_ConfigClockSource+0x16c>
 800c528:	2b50      	cmp	r3, #80	; 0x50
 800c52a:	d03c      	beq.n	800c5a6 <HAL_TIM_ConfigClockSource+0xfa>
 800c52c:	2b50      	cmp	r3, #80	; 0x50
 800c52e:	d873      	bhi.n	800c618 <HAL_TIM_ConfigClockSource+0x16c>
 800c530:	2b40      	cmp	r3, #64	; 0x40
 800c532:	d058      	beq.n	800c5e6 <HAL_TIM_ConfigClockSource+0x13a>
 800c534:	2b40      	cmp	r3, #64	; 0x40
 800c536:	d86f      	bhi.n	800c618 <HAL_TIM_ConfigClockSource+0x16c>
 800c538:	2b30      	cmp	r3, #48	; 0x30
 800c53a:	d064      	beq.n	800c606 <HAL_TIM_ConfigClockSource+0x15a>
 800c53c:	2b30      	cmp	r3, #48	; 0x30
 800c53e:	d86b      	bhi.n	800c618 <HAL_TIM_ConfigClockSource+0x16c>
 800c540:	2b20      	cmp	r3, #32
 800c542:	d060      	beq.n	800c606 <HAL_TIM_ConfigClockSource+0x15a>
 800c544:	2b20      	cmp	r3, #32
 800c546:	d867      	bhi.n	800c618 <HAL_TIM_ConfigClockSource+0x16c>
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d05c      	beq.n	800c606 <HAL_TIM_ConfigClockSource+0x15a>
 800c54c:	2b10      	cmp	r3, #16
 800c54e:	d05a      	beq.n	800c606 <HAL_TIM_ConfigClockSource+0x15a>
 800c550:	e062      	b.n	800c618 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6818      	ldr	r0, [r3, #0]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	6899      	ldr	r1, [r3, #8]
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	685a      	ldr	r2, [r3, #4]
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	68db      	ldr	r3, [r3, #12]
 800c562:	f000 fb5d 	bl	800cc20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	689b      	ldr	r3, [r3, #8]
 800c56c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c574:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	609a      	str	r2, [r3, #8]
      break;
 800c57e:	e04f      	b.n	800c620 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6818      	ldr	r0, [r3, #0]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	6899      	ldr	r1, [r3, #8]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	f000 fb46 	bl	800cc20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	689a      	ldr	r2, [r3, #8]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c5a2:	609a      	str	r2, [r3, #8]
      break;
 800c5a4:	e03c      	b.n	800c620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6818      	ldr	r0, [r3, #0]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	6859      	ldr	r1, [r3, #4]
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	68db      	ldr	r3, [r3, #12]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	f000 faba 	bl	800cb2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2150      	movs	r1, #80	; 0x50
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fb13 	bl	800cbea <TIM_ITRx_SetConfig>
      break;
 800c5c4:	e02c      	b.n	800c620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6818      	ldr	r0, [r3, #0]
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	6859      	ldr	r1, [r3, #4]
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	f000 fad9 	bl	800cb8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	2160      	movs	r1, #96	; 0x60
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 fb03 	bl	800cbea <TIM_ITRx_SetConfig>
      break;
 800c5e4:	e01c      	b.n	800c620 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6818      	ldr	r0, [r3, #0]
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	6859      	ldr	r1, [r3, #4]
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	f000 fa9a 	bl	800cb2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2140      	movs	r1, #64	; 0x40
 800c5fe:	4618      	mov	r0, r3
 800c600:	f000 faf3 	bl	800cbea <TIM_ITRx_SetConfig>
      break;
 800c604:	e00c      	b.n	800c620 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4619      	mov	r1, r3
 800c610:	4610      	mov	r0, r2
 800c612:	f000 faea 	bl	800cbea <TIM_ITRx_SetConfig>
      break;
 800c616:	e003      	b.n	800c620 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c618:	2301      	movs	r3, #1
 800c61a:	73fb      	strb	r3, [r7, #15]
      break;
 800c61c:	e000      	b.n	800c620 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c61e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c630:	7bfb      	ldrb	r3, [r7, #15]
}
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c63a:	b480      	push	{r7}
 800c63c:	b083      	sub	sp, #12
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c642:	bf00      	nop
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c64e:	b480      	push	{r7}
 800c650:	b083      	sub	sp, #12
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c656:	bf00      	nop
 800c658:	370c      	adds	r7, #12
 800c65a:	46bd      	mov	sp, r7
 800c65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c660:	4770      	bx	lr

0800c662 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c662:	b480      	push	{r7}
 800c664:	b083      	sub	sp, #12
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c66a:	bf00      	nop
 800c66c:	370c      	adds	r7, #12
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c676:	b480      	push	{r7}
 800c678:	b083      	sub	sp, #12
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c67e:	bf00      	nop
 800c680:	370c      	adds	r7, #12
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr
	...

0800c68c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a40      	ldr	r2, [pc, #256]	; (800c7a0 <TIM_Base_SetConfig+0x114>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d013      	beq.n	800c6cc <TIM_Base_SetConfig+0x40>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6aa:	d00f      	beq.n	800c6cc <TIM_Base_SetConfig+0x40>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a3d      	ldr	r2, [pc, #244]	; (800c7a4 <TIM_Base_SetConfig+0x118>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d00b      	beq.n	800c6cc <TIM_Base_SetConfig+0x40>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a3c      	ldr	r2, [pc, #240]	; (800c7a8 <TIM_Base_SetConfig+0x11c>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d007      	beq.n	800c6cc <TIM_Base_SetConfig+0x40>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a3b      	ldr	r2, [pc, #236]	; (800c7ac <TIM_Base_SetConfig+0x120>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d003      	beq.n	800c6cc <TIM_Base_SetConfig+0x40>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4a3a      	ldr	r2, [pc, #232]	; (800c7b0 <TIM_Base_SetConfig+0x124>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d108      	bne.n	800c6de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a2f      	ldr	r2, [pc, #188]	; (800c7a0 <TIM_Base_SetConfig+0x114>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d02b      	beq.n	800c73e <TIM_Base_SetConfig+0xb2>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6ec:	d027      	beq.n	800c73e <TIM_Base_SetConfig+0xb2>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a2c      	ldr	r2, [pc, #176]	; (800c7a4 <TIM_Base_SetConfig+0x118>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d023      	beq.n	800c73e <TIM_Base_SetConfig+0xb2>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a2b      	ldr	r2, [pc, #172]	; (800c7a8 <TIM_Base_SetConfig+0x11c>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d01f      	beq.n	800c73e <TIM_Base_SetConfig+0xb2>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a2a      	ldr	r2, [pc, #168]	; (800c7ac <TIM_Base_SetConfig+0x120>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d01b      	beq.n	800c73e <TIM_Base_SetConfig+0xb2>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a29      	ldr	r2, [pc, #164]	; (800c7b0 <TIM_Base_SetConfig+0x124>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d017      	beq.n	800c73e <TIM_Base_SetConfig+0xb2>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a28      	ldr	r2, [pc, #160]	; (800c7b4 <TIM_Base_SetConfig+0x128>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d013      	beq.n	800c73e <TIM_Base_SetConfig+0xb2>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a27      	ldr	r2, [pc, #156]	; (800c7b8 <TIM_Base_SetConfig+0x12c>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d00f      	beq.n	800c73e <TIM_Base_SetConfig+0xb2>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a26      	ldr	r2, [pc, #152]	; (800c7bc <TIM_Base_SetConfig+0x130>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d00b      	beq.n	800c73e <TIM_Base_SetConfig+0xb2>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4a25      	ldr	r2, [pc, #148]	; (800c7c0 <TIM_Base_SetConfig+0x134>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d007      	beq.n	800c73e <TIM_Base_SetConfig+0xb2>
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a24      	ldr	r2, [pc, #144]	; (800c7c4 <TIM_Base_SetConfig+0x138>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d003      	beq.n	800c73e <TIM_Base_SetConfig+0xb2>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4a23      	ldr	r2, [pc, #140]	; (800c7c8 <TIM_Base_SetConfig+0x13c>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d108      	bne.n	800c750 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	695b      	ldr	r3, [r3, #20]
 800c75a:	4313      	orrs	r3, r2
 800c75c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	689a      	ldr	r2, [r3, #8]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a0a      	ldr	r2, [pc, #40]	; (800c7a0 <TIM_Base_SetConfig+0x114>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d003      	beq.n	800c784 <TIM_Base_SetConfig+0xf8>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a0c      	ldr	r2, [pc, #48]	; (800c7b0 <TIM_Base_SetConfig+0x124>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d103      	bne.n	800c78c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	691a      	ldr	r2, [r3, #16]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	615a      	str	r2, [r3, #20]
}
 800c792:	bf00      	nop
 800c794:	3714      	adds	r7, #20
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	40010000 	.word	0x40010000
 800c7a4:	40000400 	.word	0x40000400
 800c7a8:	40000800 	.word	0x40000800
 800c7ac:	40000c00 	.word	0x40000c00
 800c7b0:	40010400 	.word	0x40010400
 800c7b4:	40014000 	.word	0x40014000
 800c7b8:	40014400 	.word	0x40014400
 800c7bc:	40014800 	.word	0x40014800
 800c7c0:	40001800 	.word	0x40001800
 800c7c4:	40001c00 	.word	0x40001c00
 800c7c8:	40002000 	.word	0x40002000

0800c7cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b087      	sub	sp, #28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	f023 0201 	bic.w	r2, r3, #1
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	699b      	ldr	r3, [r3, #24]
 800c7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f023 0303 	bic.w	r3, r3, #3
 800c802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	4313      	orrs	r3, r2
 800c80c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	f023 0302 	bic.w	r3, r3, #2
 800c814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	697a      	ldr	r2, [r7, #20]
 800c81c:	4313      	orrs	r3, r2
 800c81e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	4a20      	ldr	r2, [pc, #128]	; (800c8a4 <TIM_OC1_SetConfig+0xd8>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d003      	beq.n	800c830 <TIM_OC1_SetConfig+0x64>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a1f      	ldr	r2, [pc, #124]	; (800c8a8 <TIM_OC1_SetConfig+0xdc>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d10c      	bne.n	800c84a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	f023 0308 	bic.w	r3, r3, #8
 800c836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	697a      	ldr	r2, [r7, #20]
 800c83e:	4313      	orrs	r3, r2
 800c840:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f023 0304 	bic.w	r3, r3, #4
 800c848:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4a15      	ldr	r2, [pc, #84]	; (800c8a4 <TIM_OC1_SetConfig+0xd8>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d003      	beq.n	800c85a <TIM_OC1_SetConfig+0x8e>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	4a14      	ldr	r2, [pc, #80]	; (800c8a8 <TIM_OC1_SetConfig+0xdc>)
 800c856:	4293      	cmp	r3, r2
 800c858:	d111      	bne.n	800c87e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	695b      	ldr	r3, [r3, #20]
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	4313      	orrs	r3, r2
 800c872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	699b      	ldr	r3, [r3, #24]
 800c878:	693a      	ldr	r2, [r7, #16]
 800c87a:	4313      	orrs	r3, r2
 800c87c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	693a      	ldr	r2, [r7, #16]
 800c882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	685a      	ldr	r2, [r3, #4]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	621a      	str	r2, [r3, #32]
}
 800c898:	bf00      	nop
 800c89a:	371c      	adds	r7, #28
 800c89c:	46bd      	mov	sp, r7
 800c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a2:	4770      	bx	lr
 800c8a4:	40010000 	.word	0x40010000
 800c8a8:	40010400 	.word	0x40010400

0800c8ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b087      	sub	sp, #28
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a1b      	ldr	r3, [r3, #32]
 800c8ba:	f023 0210 	bic.w	r2, r3, #16
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	699b      	ldr	r3, [r3, #24]
 800c8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c8da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c8e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	021b      	lsls	r3, r3, #8
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	f023 0320 	bic.w	r3, r3, #32
 800c8f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	011b      	lsls	r3, r3, #4
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	4313      	orrs	r3, r2
 800c902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	4a22      	ldr	r2, [pc, #136]	; (800c990 <TIM_OC2_SetConfig+0xe4>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d003      	beq.n	800c914 <TIM_OC2_SetConfig+0x68>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	4a21      	ldr	r2, [pc, #132]	; (800c994 <TIM_OC2_SetConfig+0xe8>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d10d      	bne.n	800c930 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c91a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	011b      	lsls	r3, r3, #4
 800c922:	697a      	ldr	r2, [r7, #20]
 800c924:	4313      	orrs	r3, r2
 800c926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c92e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a17      	ldr	r2, [pc, #92]	; (800c990 <TIM_OC2_SetConfig+0xe4>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d003      	beq.n	800c940 <TIM_OC2_SetConfig+0x94>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a16      	ldr	r2, [pc, #88]	; (800c994 <TIM_OC2_SetConfig+0xe8>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d113      	bne.n	800c968 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c94e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	695b      	ldr	r3, [r3, #20]
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	693a      	ldr	r2, [r7, #16]
 800c958:	4313      	orrs	r3, r2
 800c95a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	699b      	ldr	r3, [r3, #24]
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	693a      	ldr	r2, [r7, #16]
 800c964:	4313      	orrs	r3, r2
 800c966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	693a      	ldr	r2, [r7, #16]
 800c96c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	621a      	str	r2, [r3, #32]
}
 800c982:	bf00      	nop
 800c984:	371c      	adds	r7, #28
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	40010000 	.word	0x40010000
 800c994:	40010400 	.word	0x40010400

0800c998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c998:	b480      	push	{r7}
 800c99a:	b087      	sub	sp, #28
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a1b      	ldr	r3, [r3, #32]
 800c9a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6a1b      	ldr	r3, [r3, #32]
 800c9b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	69db      	ldr	r3, [r3, #28]
 800c9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f023 0303 	bic.w	r3, r3, #3
 800c9ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c9e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	689b      	ldr	r3, [r3, #8]
 800c9e6:	021b      	lsls	r3, r3, #8
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	4a21      	ldr	r2, [pc, #132]	; (800ca78 <TIM_OC3_SetConfig+0xe0>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d003      	beq.n	800c9fe <TIM_OC3_SetConfig+0x66>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a20      	ldr	r2, [pc, #128]	; (800ca7c <TIM_OC3_SetConfig+0xe4>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d10d      	bne.n	800ca1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	021b      	lsls	r3, r3, #8
 800ca0c:	697a      	ldr	r2, [r7, #20]
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4a16      	ldr	r2, [pc, #88]	; (800ca78 <TIM_OC3_SetConfig+0xe0>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d003      	beq.n	800ca2a <TIM_OC3_SetConfig+0x92>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	4a15      	ldr	r2, [pc, #84]	; (800ca7c <TIM_OC3_SetConfig+0xe4>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d113      	bne.n	800ca52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	011b      	lsls	r3, r3, #4
 800ca40:	693a      	ldr	r2, [r7, #16]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	699b      	ldr	r3, [r3, #24]
 800ca4a:	011b      	lsls	r3, r3, #4
 800ca4c:	693a      	ldr	r2, [r7, #16]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	685a      	ldr	r2, [r3, #4]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	697a      	ldr	r2, [r7, #20]
 800ca6a:	621a      	str	r2, [r3, #32]
}
 800ca6c:	bf00      	nop
 800ca6e:	371c      	adds	r7, #28
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	40010000 	.word	0x40010000
 800ca7c:	40010400 	.word	0x40010400

0800ca80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b087      	sub	sp, #28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a1b      	ldr	r3, [r3, #32]
 800ca8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6a1b      	ldr	r3, [r3, #32]
 800ca9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	69db      	ldr	r3, [r3, #28]
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800caae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	021b      	lsls	r3, r3, #8
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	4313      	orrs	r3, r2
 800cac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800caca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	031b      	lsls	r3, r3, #12
 800cad2:	693a      	ldr	r2, [r7, #16]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a12      	ldr	r2, [pc, #72]	; (800cb24 <TIM_OC4_SetConfig+0xa4>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d003      	beq.n	800cae8 <TIM_OC4_SetConfig+0x68>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4a11      	ldr	r2, [pc, #68]	; (800cb28 <TIM_OC4_SetConfig+0xa8>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d109      	bne.n	800cafc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800caee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	695b      	ldr	r3, [r3, #20]
 800caf4:	019b      	lsls	r3, r3, #6
 800caf6:	697a      	ldr	r2, [r7, #20]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	697a      	ldr	r2, [r7, #20]
 800cb00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	693a      	ldr	r2, [r7, #16]
 800cb14:	621a      	str	r2, [r3, #32]
}
 800cb16:	bf00      	nop
 800cb18:	371c      	adds	r7, #28
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	40010000 	.word	0x40010000
 800cb28:	40010400 	.word	0x40010400

0800cb2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b087      	sub	sp, #28
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6a1b      	ldr	r3, [r3, #32]
 800cb3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	6a1b      	ldr	r3, [r3, #32]
 800cb42:	f023 0201 	bic.w	r2, r3, #1
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	699b      	ldr	r3, [r3, #24]
 800cb4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	011b      	lsls	r3, r3, #4
 800cb5c:	693a      	ldr	r2, [r7, #16]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f023 030a 	bic.w	r3, r3, #10
 800cb68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cb6a:	697a      	ldr	r2, [r7, #20]
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	693a      	ldr	r2, [r7, #16]
 800cb76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	697a      	ldr	r2, [r7, #20]
 800cb7c:	621a      	str	r2, [r3, #32]
}
 800cb7e:	bf00      	nop
 800cb80:	371c      	adds	r7, #28
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cb8a:	b480      	push	{r7}
 800cb8c:	b087      	sub	sp, #28
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	60f8      	str	r0, [r7, #12]
 800cb92:	60b9      	str	r1, [r7, #8]
 800cb94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	6a1b      	ldr	r3, [r3, #32]
 800cb9a:	f023 0210 	bic.w	r2, r3, #16
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	699b      	ldr	r3, [r3, #24]
 800cba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6a1b      	ldr	r3, [r3, #32]
 800cbac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cbb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	031b      	lsls	r3, r3, #12
 800cbba:	697a      	ldr	r2, [r7, #20]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cbc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	011b      	lsls	r3, r3, #4
 800cbcc:	693a      	ldr	r2, [r7, #16]
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	697a      	ldr	r2, [r7, #20]
 800cbd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	693a      	ldr	r2, [r7, #16]
 800cbdc:	621a      	str	r2, [r3, #32]
}
 800cbde:	bf00      	nop
 800cbe0:	371c      	adds	r7, #28
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr

0800cbea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cbea:	b480      	push	{r7}
 800cbec:	b085      	sub	sp, #20
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	6078      	str	r0, [r7, #4]
 800cbf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc02:	683a      	ldr	r2, [r7, #0]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	4313      	orrs	r3, r2
 800cc08:	f043 0307 	orr.w	r3, r3, #7
 800cc0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	609a      	str	r2, [r3, #8]
}
 800cc14:	bf00      	nop
 800cc16:	3714      	adds	r7, #20
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cc20:	b480      	push	{r7}
 800cc22:	b087      	sub	sp, #28
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
 800cc2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cc3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	021a      	lsls	r2, r3, #8
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	431a      	orrs	r2, r3
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	697a      	ldr	r2, [r7, #20]
 800cc52:	609a      	str	r2, [r3, #8]
}
 800cc54:	bf00      	nop
 800cc56:	371c      	adds	r7, #28
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b087      	sub	sp, #28
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	f003 031f 	and.w	r3, r3, #31
 800cc72:	2201      	movs	r2, #1
 800cc74:	fa02 f303 	lsl.w	r3, r2, r3
 800cc78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6a1a      	ldr	r2, [r3, #32]
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	43db      	mvns	r3, r3
 800cc82:	401a      	ands	r2, r3
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6a1a      	ldr	r2, [r3, #32]
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	f003 031f 	and.w	r3, r3, #31
 800cc92:	6879      	ldr	r1, [r7, #4]
 800cc94:	fa01 f303 	lsl.w	r3, r1, r3
 800cc98:	431a      	orrs	r2, r3
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	621a      	str	r2, [r3, #32]
}
 800cc9e:	bf00      	nop
 800cca0:	371c      	adds	r7, #28
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr
	...

0800ccac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d101      	bne.n	800ccc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ccc0:	2302      	movs	r3, #2
 800ccc2:	e05a      	b.n	800cd7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2202      	movs	r2, #2
 800ccd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a21      	ldr	r2, [pc, #132]	; (800cd88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d022      	beq.n	800cd4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd10:	d01d      	beq.n	800cd4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a1d      	ldr	r2, [pc, #116]	; (800cd8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d018      	beq.n	800cd4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a1b      	ldr	r2, [pc, #108]	; (800cd90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d013      	beq.n	800cd4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a1a      	ldr	r2, [pc, #104]	; (800cd94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d00e      	beq.n	800cd4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a18      	ldr	r2, [pc, #96]	; (800cd98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d009      	beq.n	800cd4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a17      	ldr	r2, [pc, #92]	; (800cd9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d004      	beq.n	800cd4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a15      	ldr	r2, [pc, #84]	; (800cda0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d10c      	bne.n	800cd68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	68ba      	ldr	r2, [r7, #8]
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68ba      	ldr	r2, [r7, #8]
 800cd66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3714      	adds	r7, #20
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr
 800cd86:	bf00      	nop
 800cd88:	40010000 	.word	0x40010000
 800cd8c:	40000400 	.word	0x40000400
 800cd90:	40000800 	.word	0x40000800
 800cd94:	40000c00 	.word	0x40000c00
 800cd98:	40010400 	.word	0x40010400
 800cd9c:	40014000 	.word	0x40014000
 800cda0:	40001800 	.word	0x40001800

0800cda4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cdac:	bf00      	nop
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cdc0:	bf00      	nop
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d101      	bne.n	800cdde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e03f      	b.n	800ce5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d106      	bne.n	800cdf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7f6 fd10 	bl	8003818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2224      	movs	r2, #36	; 0x24
 800cdfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	68da      	ldr	r2, [r3, #12]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ce0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 f9cb 	bl	800d1ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	691a      	ldr	r2, [r3, #16]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ce24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	695a      	ldr	r2, [r3, #20]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ce34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68da      	ldr	r2, [r3, #12]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ce44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2220      	movs	r2, #32
 800ce50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2220      	movs	r2, #32
 800ce58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3708      	adds	r7, #8
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b08a      	sub	sp, #40	; 0x28
 800ce6a:	af02      	add	r7, sp, #8
 800ce6c:	60f8      	str	r0, [r7, #12]
 800ce6e:	60b9      	str	r1, [r7, #8]
 800ce70:	603b      	str	r3, [r7, #0]
 800ce72:	4613      	mov	r3, r2
 800ce74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ce76:	2300      	movs	r3, #0
 800ce78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	2b20      	cmp	r3, #32
 800ce84:	d17c      	bne.n	800cf80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d002      	beq.n	800ce92 <HAL_UART_Transmit+0x2c>
 800ce8c:	88fb      	ldrh	r3, [r7, #6]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d101      	bne.n	800ce96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ce92:	2301      	movs	r3, #1
 800ce94:	e075      	b.n	800cf82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	d101      	bne.n	800cea4 <HAL_UART_Transmit+0x3e>
 800cea0:	2302      	movs	r3, #2
 800cea2:	e06e      	b.n	800cf82 <HAL_UART_Transmit+0x11c>
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2221      	movs	r2, #33	; 0x21
 800ceb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ceba:	f7fa fc19 	bl	80076f0 <HAL_GetTick>
 800cebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	88fa      	ldrh	r2, [r7, #6]
 800cec4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	88fa      	ldrh	r2, [r7, #6]
 800ceca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ced4:	d108      	bne.n	800cee8 <HAL_UART_Transmit+0x82>
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	691b      	ldr	r3, [r3, #16]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d104      	bne.n	800cee8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800cede:	2300      	movs	r3, #0
 800cee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	61bb      	str	r3, [r7, #24]
 800cee6:	e003      	b.n	800cef0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ceec:	2300      	movs	r3, #0
 800ceee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2200      	movs	r2, #0
 800cef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800cef8:	e02a      	b.n	800cf50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	9300      	str	r3, [sp, #0]
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2200      	movs	r2, #0
 800cf02:	2180      	movs	r1, #128	; 0x80
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	f000 f8e2 	bl	800d0ce <UART_WaitOnFlagUntilTimeout>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d001      	beq.n	800cf14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800cf10:	2303      	movs	r3, #3
 800cf12:	e036      	b.n	800cf82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d10b      	bne.n	800cf32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	881b      	ldrh	r3, [r3, #0]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cf2a:	69bb      	ldr	r3, [r7, #24]
 800cf2c:	3302      	adds	r3, #2
 800cf2e:	61bb      	str	r3, [r7, #24]
 800cf30:	e007      	b.n	800cf42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	781a      	ldrb	r2, [r3, #0]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	3b01      	subs	r3, #1
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1cf      	bne.n	800cefa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	9300      	str	r3, [sp, #0]
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	2200      	movs	r2, #0
 800cf62:	2140      	movs	r1, #64	; 0x40
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f000 f8b2 	bl	800d0ce <UART_WaitOnFlagUntilTimeout>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d001      	beq.n	800cf74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800cf70:	2303      	movs	r3, #3
 800cf72:	e006      	b.n	800cf82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2220      	movs	r2, #32
 800cf78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	e000      	b.n	800cf82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800cf80:	2302      	movs	r3, #2
  }
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3720      	adds	r7, #32
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b08a      	sub	sp, #40	; 0x28
 800cf8e:	af02      	add	r7, sp, #8
 800cf90:	60f8      	str	r0, [r7, #12]
 800cf92:	60b9      	str	r1, [r7, #8]
 800cf94:	603b      	str	r3, [r7, #0]
 800cf96:	4613      	mov	r3, r2
 800cf98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	2b20      	cmp	r3, #32
 800cfa8:	f040 808c 	bne.w	800d0c4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d002      	beq.n	800cfb8 <HAL_UART_Receive+0x2e>
 800cfb2:	88fb      	ldrh	r3, [r7, #6]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d101      	bne.n	800cfbc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e084      	b.n	800d0c6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d101      	bne.n	800cfca <HAL_UART_Receive+0x40>
 800cfc6:	2302      	movs	r3, #2
 800cfc8:	e07d      	b.n	800d0c6 <HAL_UART_Receive+0x13c>
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2222      	movs	r2, #34	; 0x22
 800cfdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cfe6:	f7fa fb83 	bl	80076f0 <HAL_GetTick>
 800cfea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	88fa      	ldrh	r2, [r7, #6]
 800cff0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	88fa      	ldrh	r2, [r7, #6]
 800cff6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	689b      	ldr	r3, [r3, #8]
 800cffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d000:	d108      	bne.n	800d014 <HAL_UART_Receive+0x8a>
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d104      	bne.n	800d014 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800d00a:	2300      	movs	r3, #0
 800d00c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	61bb      	str	r3, [r7, #24]
 800d012:	e003      	b.n	800d01c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d018:	2300      	movs	r3, #0
 800d01a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d024:	e043      	b.n	800d0ae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	9300      	str	r3, [sp, #0]
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	2200      	movs	r2, #0
 800d02e:	2120      	movs	r1, #32
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f000 f84c 	bl	800d0ce <UART_WaitOnFlagUntilTimeout>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d001      	beq.n	800d040 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800d03c:	2303      	movs	r3, #3
 800d03e:	e042      	b.n	800d0c6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d10c      	bne.n	800d060 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d052:	b29a      	uxth	r2, r3
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d058:	69bb      	ldr	r3, [r7, #24]
 800d05a:	3302      	adds	r3, #2
 800d05c:	61bb      	str	r3, [r7, #24]
 800d05e:	e01f      	b.n	800d0a0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d068:	d007      	beq.n	800d07a <HAL_UART_Receive+0xf0>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d10a      	bne.n	800d088 <HAL_UART_Receive+0xfe>
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d106      	bne.n	800d088 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	b2da      	uxtb	r2, r3
 800d082:	69fb      	ldr	r3, [r7, #28]
 800d084:	701a      	strb	r2, [r3, #0]
 800d086:	e008      	b.n	800d09a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	b2db      	uxtb	r3, r3
 800d090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d094:	b2da      	uxtb	r2, r3
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d09a:	69fb      	ldr	r3, [r7, #28]
 800d09c:	3301      	adds	r3, #1
 800d09e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d0a4:	b29b      	uxth	r3, r3
 800d0a6:	3b01      	subs	r3, #1
 800d0a8:	b29a      	uxth	r2, r3
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d0b2:	b29b      	uxth	r3, r3
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1b6      	bne.n	800d026 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2220      	movs	r2, #32
 800d0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	e000      	b.n	800d0c6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800d0c4:	2302      	movs	r3, #2
  }
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3720      	adds	r7, #32
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b090      	sub	sp, #64	; 0x40
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	60f8      	str	r0, [r7, #12]
 800d0d6:	60b9      	str	r1, [r7, #8]
 800d0d8:	603b      	str	r3, [r7, #0]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0de:	e050      	b.n	800d182 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e6:	d04c      	beq.n	800d182 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d0e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d007      	beq.n	800d0fe <UART_WaitOnFlagUntilTimeout+0x30>
 800d0ee:	f7fa faff 	bl	80076f0 <HAL_GetTick>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d241      	bcs.n	800d182 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	330c      	adds	r3, #12
 800d104:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d108:	e853 3f00 	ldrex	r3, [r3]
 800d10c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d110:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d114:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	330c      	adds	r3, #12
 800d11c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d11e:	637a      	str	r2, [r7, #52]	; 0x34
 800d120:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d126:	e841 2300 	strex	r3, r2, [r1]
 800d12a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1e5      	bne.n	800d0fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	3314      	adds	r3, #20
 800d138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	e853 3f00 	ldrex	r3, [r3]
 800d140:	613b      	str	r3, [r7, #16]
   return(result);
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	f023 0301 	bic.w	r3, r3, #1
 800d148:	63bb      	str	r3, [r7, #56]	; 0x38
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	3314      	adds	r3, #20
 800d150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d152:	623a      	str	r2, [r7, #32]
 800d154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d156:	69f9      	ldr	r1, [r7, #28]
 800d158:	6a3a      	ldr	r2, [r7, #32]
 800d15a:	e841 2300 	strex	r3, r2, [r1]
 800d15e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d1e5      	bne.n	800d132 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2220      	movs	r2, #32
 800d16a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2220      	movs	r2, #32
 800d172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2200      	movs	r2, #0
 800d17a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800d17e:	2303      	movs	r3, #3
 800d180:	e00f      	b.n	800d1a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	4013      	ands	r3, r2
 800d18c:	68ba      	ldr	r2, [r7, #8]
 800d18e:	429a      	cmp	r2, r3
 800d190:	bf0c      	ite	eq
 800d192:	2301      	moveq	r3, #1
 800d194:	2300      	movne	r3, #0
 800d196:	b2db      	uxtb	r3, r3
 800d198:	461a      	mov	r2, r3
 800d19a:	79fb      	ldrb	r3, [r7, #7]
 800d19c:	429a      	cmp	r2, r3
 800d19e:	d09f      	beq.n	800d0e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3740      	adds	r7, #64	; 0x40
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
	...

0800d1ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b0:	b09f      	sub	sp, #124	; 0x7c
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	691b      	ldr	r3, [r3, #16]
 800d1bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d1c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1c2:	68d9      	ldr	r1, [r3, #12]
 800d1c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	ea40 0301 	orr.w	r3, r0, r1
 800d1cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d1ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1d0:	689a      	ldr	r2, [r3, #8]
 800d1d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1d4:	691b      	ldr	r3, [r3, #16]
 800d1d6:	431a      	orrs	r2, r3
 800d1d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1da:	695b      	ldr	r3, [r3, #20]
 800d1dc:	431a      	orrs	r2, r3
 800d1de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1e0:	69db      	ldr	r3, [r3, #28]
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800d1e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d1f0:	f021 010c 	bic.w	r1, r1, #12
 800d1f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1fa:	430b      	orrs	r3, r1
 800d1fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d1fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	695b      	ldr	r3, [r3, #20]
 800d204:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d20a:	6999      	ldr	r1, [r3, #24]
 800d20c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	ea40 0301 	orr.w	r3, r0, r1
 800d214:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	4bc5      	ldr	r3, [pc, #788]	; (800d530 <UART_SetConfig+0x384>)
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d004      	beq.n	800d22a <UART_SetConfig+0x7e>
 800d220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d222:	681a      	ldr	r2, [r3, #0]
 800d224:	4bc3      	ldr	r3, [pc, #780]	; (800d534 <UART_SetConfig+0x388>)
 800d226:	429a      	cmp	r2, r3
 800d228:	d103      	bne.n	800d232 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d22a:	f7fc ff59 	bl	800a0e0 <HAL_RCC_GetPCLK2Freq>
 800d22e:	6778      	str	r0, [r7, #116]	; 0x74
 800d230:	e002      	b.n	800d238 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d232:	f7fc ff41 	bl	800a0b8 <HAL_RCC_GetPCLK1Freq>
 800d236:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d23a:	69db      	ldr	r3, [r3, #28]
 800d23c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d240:	f040 80b6 	bne.w	800d3b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d244:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d246:	461c      	mov	r4, r3
 800d248:	f04f 0500 	mov.w	r5, #0
 800d24c:	4622      	mov	r2, r4
 800d24e:	462b      	mov	r3, r5
 800d250:	1891      	adds	r1, r2, r2
 800d252:	6439      	str	r1, [r7, #64]	; 0x40
 800d254:	415b      	adcs	r3, r3
 800d256:	647b      	str	r3, [r7, #68]	; 0x44
 800d258:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d25c:	1912      	adds	r2, r2, r4
 800d25e:	eb45 0303 	adc.w	r3, r5, r3
 800d262:	f04f 0000 	mov.w	r0, #0
 800d266:	f04f 0100 	mov.w	r1, #0
 800d26a:	00d9      	lsls	r1, r3, #3
 800d26c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d270:	00d0      	lsls	r0, r2, #3
 800d272:	4602      	mov	r2, r0
 800d274:	460b      	mov	r3, r1
 800d276:	1911      	adds	r1, r2, r4
 800d278:	6639      	str	r1, [r7, #96]	; 0x60
 800d27a:	416b      	adcs	r3, r5
 800d27c:	667b      	str	r3, [r7, #100]	; 0x64
 800d27e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d280:	685b      	ldr	r3, [r3, #4]
 800d282:	461a      	mov	r2, r3
 800d284:	f04f 0300 	mov.w	r3, #0
 800d288:	1891      	adds	r1, r2, r2
 800d28a:	63b9      	str	r1, [r7, #56]	; 0x38
 800d28c:	415b      	adcs	r3, r3
 800d28e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d294:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800d298:	f7f3 fd06 	bl	8000ca8 <__aeabi_uldivmod>
 800d29c:	4602      	mov	r2, r0
 800d29e:	460b      	mov	r3, r1
 800d2a0:	4ba5      	ldr	r3, [pc, #660]	; (800d538 <UART_SetConfig+0x38c>)
 800d2a2:	fba3 2302 	umull	r2, r3, r3, r2
 800d2a6:	095b      	lsrs	r3, r3, #5
 800d2a8:	011e      	lsls	r6, r3, #4
 800d2aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2ac:	461c      	mov	r4, r3
 800d2ae:	f04f 0500 	mov.w	r5, #0
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	462b      	mov	r3, r5
 800d2b6:	1891      	adds	r1, r2, r2
 800d2b8:	6339      	str	r1, [r7, #48]	; 0x30
 800d2ba:	415b      	adcs	r3, r3
 800d2bc:	637b      	str	r3, [r7, #52]	; 0x34
 800d2be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d2c2:	1912      	adds	r2, r2, r4
 800d2c4:	eb45 0303 	adc.w	r3, r5, r3
 800d2c8:	f04f 0000 	mov.w	r0, #0
 800d2cc:	f04f 0100 	mov.w	r1, #0
 800d2d0:	00d9      	lsls	r1, r3, #3
 800d2d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d2d6:	00d0      	lsls	r0, r2, #3
 800d2d8:	4602      	mov	r2, r0
 800d2da:	460b      	mov	r3, r1
 800d2dc:	1911      	adds	r1, r2, r4
 800d2de:	65b9      	str	r1, [r7, #88]	; 0x58
 800d2e0:	416b      	adcs	r3, r5
 800d2e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	f04f 0300 	mov.w	r3, #0
 800d2ee:	1891      	adds	r1, r2, r2
 800d2f0:	62b9      	str	r1, [r7, #40]	; 0x28
 800d2f2:	415b      	adcs	r3, r3
 800d2f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d2fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d2fe:	f7f3 fcd3 	bl	8000ca8 <__aeabi_uldivmod>
 800d302:	4602      	mov	r2, r0
 800d304:	460b      	mov	r3, r1
 800d306:	4b8c      	ldr	r3, [pc, #560]	; (800d538 <UART_SetConfig+0x38c>)
 800d308:	fba3 1302 	umull	r1, r3, r3, r2
 800d30c:	095b      	lsrs	r3, r3, #5
 800d30e:	2164      	movs	r1, #100	; 0x64
 800d310:	fb01 f303 	mul.w	r3, r1, r3
 800d314:	1ad3      	subs	r3, r2, r3
 800d316:	00db      	lsls	r3, r3, #3
 800d318:	3332      	adds	r3, #50	; 0x32
 800d31a:	4a87      	ldr	r2, [pc, #540]	; (800d538 <UART_SetConfig+0x38c>)
 800d31c:	fba2 2303 	umull	r2, r3, r2, r3
 800d320:	095b      	lsrs	r3, r3, #5
 800d322:	005b      	lsls	r3, r3, #1
 800d324:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d328:	441e      	add	r6, r3
 800d32a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d32c:	4618      	mov	r0, r3
 800d32e:	f04f 0100 	mov.w	r1, #0
 800d332:	4602      	mov	r2, r0
 800d334:	460b      	mov	r3, r1
 800d336:	1894      	adds	r4, r2, r2
 800d338:	623c      	str	r4, [r7, #32]
 800d33a:	415b      	adcs	r3, r3
 800d33c:	627b      	str	r3, [r7, #36]	; 0x24
 800d33e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d342:	1812      	adds	r2, r2, r0
 800d344:	eb41 0303 	adc.w	r3, r1, r3
 800d348:	f04f 0400 	mov.w	r4, #0
 800d34c:	f04f 0500 	mov.w	r5, #0
 800d350:	00dd      	lsls	r5, r3, #3
 800d352:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d356:	00d4      	lsls	r4, r2, #3
 800d358:	4622      	mov	r2, r4
 800d35a:	462b      	mov	r3, r5
 800d35c:	1814      	adds	r4, r2, r0
 800d35e:	653c      	str	r4, [r7, #80]	; 0x50
 800d360:	414b      	adcs	r3, r1
 800d362:	657b      	str	r3, [r7, #84]	; 0x54
 800d364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	461a      	mov	r2, r3
 800d36a:	f04f 0300 	mov.w	r3, #0
 800d36e:	1891      	adds	r1, r2, r2
 800d370:	61b9      	str	r1, [r7, #24]
 800d372:	415b      	adcs	r3, r3
 800d374:	61fb      	str	r3, [r7, #28]
 800d376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d37a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d37e:	f7f3 fc93 	bl	8000ca8 <__aeabi_uldivmod>
 800d382:	4602      	mov	r2, r0
 800d384:	460b      	mov	r3, r1
 800d386:	4b6c      	ldr	r3, [pc, #432]	; (800d538 <UART_SetConfig+0x38c>)
 800d388:	fba3 1302 	umull	r1, r3, r3, r2
 800d38c:	095b      	lsrs	r3, r3, #5
 800d38e:	2164      	movs	r1, #100	; 0x64
 800d390:	fb01 f303 	mul.w	r3, r1, r3
 800d394:	1ad3      	subs	r3, r2, r3
 800d396:	00db      	lsls	r3, r3, #3
 800d398:	3332      	adds	r3, #50	; 0x32
 800d39a:	4a67      	ldr	r2, [pc, #412]	; (800d538 <UART_SetConfig+0x38c>)
 800d39c:	fba2 2303 	umull	r2, r3, r2, r3
 800d3a0:	095b      	lsrs	r3, r3, #5
 800d3a2:	f003 0207 	and.w	r2, r3, #7
 800d3a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4432      	add	r2, r6
 800d3ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d3ae:	e0b9      	b.n	800d524 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d3b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3b2:	461c      	mov	r4, r3
 800d3b4:	f04f 0500 	mov.w	r5, #0
 800d3b8:	4622      	mov	r2, r4
 800d3ba:	462b      	mov	r3, r5
 800d3bc:	1891      	adds	r1, r2, r2
 800d3be:	6139      	str	r1, [r7, #16]
 800d3c0:	415b      	adcs	r3, r3
 800d3c2:	617b      	str	r3, [r7, #20]
 800d3c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d3c8:	1912      	adds	r2, r2, r4
 800d3ca:	eb45 0303 	adc.w	r3, r5, r3
 800d3ce:	f04f 0000 	mov.w	r0, #0
 800d3d2:	f04f 0100 	mov.w	r1, #0
 800d3d6:	00d9      	lsls	r1, r3, #3
 800d3d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800d3dc:	00d0      	lsls	r0, r2, #3
 800d3de:	4602      	mov	r2, r0
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	eb12 0804 	adds.w	r8, r2, r4
 800d3e6:	eb43 0905 	adc.w	r9, r3, r5
 800d3ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f04f 0100 	mov.w	r1, #0
 800d3f4:	f04f 0200 	mov.w	r2, #0
 800d3f8:	f04f 0300 	mov.w	r3, #0
 800d3fc:	008b      	lsls	r3, r1, #2
 800d3fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d402:	0082      	lsls	r2, r0, #2
 800d404:	4640      	mov	r0, r8
 800d406:	4649      	mov	r1, r9
 800d408:	f7f3 fc4e 	bl	8000ca8 <__aeabi_uldivmod>
 800d40c:	4602      	mov	r2, r0
 800d40e:	460b      	mov	r3, r1
 800d410:	4b49      	ldr	r3, [pc, #292]	; (800d538 <UART_SetConfig+0x38c>)
 800d412:	fba3 2302 	umull	r2, r3, r3, r2
 800d416:	095b      	lsrs	r3, r3, #5
 800d418:	011e      	lsls	r6, r3, #4
 800d41a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d41c:	4618      	mov	r0, r3
 800d41e:	f04f 0100 	mov.w	r1, #0
 800d422:	4602      	mov	r2, r0
 800d424:	460b      	mov	r3, r1
 800d426:	1894      	adds	r4, r2, r2
 800d428:	60bc      	str	r4, [r7, #8]
 800d42a:	415b      	adcs	r3, r3
 800d42c:	60fb      	str	r3, [r7, #12]
 800d42e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d432:	1812      	adds	r2, r2, r0
 800d434:	eb41 0303 	adc.w	r3, r1, r3
 800d438:	f04f 0400 	mov.w	r4, #0
 800d43c:	f04f 0500 	mov.w	r5, #0
 800d440:	00dd      	lsls	r5, r3, #3
 800d442:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d446:	00d4      	lsls	r4, r2, #3
 800d448:	4622      	mov	r2, r4
 800d44a:	462b      	mov	r3, r5
 800d44c:	1814      	adds	r4, r2, r0
 800d44e:	64bc      	str	r4, [r7, #72]	; 0x48
 800d450:	414b      	adcs	r3, r1
 800d452:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	4618      	mov	r0, r3
 800d45a:	f04f 0100 	mov.w	r1, #0
 800d45e:	f04f 0200 	mov.w	r2, #0
 800d462:	f04f 0300 	mov.w	r3, #0
 800d466:	008b      	lsls	r3, r1, #2
 800d468:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d46c:	0082      	lsls	r2, r0, #2
 800d46e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800d472:	f7f3 fc19 	bl	8000ca8 <__aeabi_uldivmod>
 800d476:	4602      	mov	r2, r0
 800d478:	460b      	mov	r3, r1
 800d47a:	4b2f      	ldr	r3, [pc, #188]	; (800d538 <UART_SetConfig+0x38c>)
 800d47c:	fba3 1302 	umull	r1, r3, r3, r2
 800d480:	095b      	lsrs	r3, r3, #5
 800d482:	2164      	movs	r1, #100	; 0x64
 800d484:	fb01 f303 	mul.w	r3, r1, r3
 800d488:	1ad3      	subs	r3, r2, r3
 800d48a:	011b      	lsls	r3, r3, #4
 800d48c:	3332      	adds	r3, #50	; 0x32
 800d48e:	4a2a      	ldr	r2, [pc, #168]	; (800d538 <UART_SetConfig+0x38c>)
 800d490:	fba2 2303 	umull	r2, r3, r2, r3
 800d494:	095b      	lsrs	r3, r3, #5
 800d496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d49a:	441e      	add	r6, r3
 800d49c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f04f 0100 	mov.w	r1, #0
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	1894      	adds	r4, r2, r2
 800d4aa:	603c      	str	r4, [r7, #0]
 800d4ac:	415b      	adcs	r3, r3
 800d4ae:	607b      	str	r3, [r7, #4]
 800d4b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4b4:	1812      	adds	r2, r2, r0
 800d4b6:	eb41 0303 	adc.w	r3, r1, r3
 800d4ba:	f04f 0400 	mov.w	r4, #0
 800d4be:	f04f 0500 	mov.w	r5, #0
 800d4c2:	00dd      	lsls	r5, r3, #3
 800d4c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800d4c8:	00d4      	lsls	r4, r2, #3
 800d4ca:	4622      	mov	r2, r4
 800d4cc:	462b      	mov	r3, r5
 800d4ce:	eb12 0a00 	adds.w	sl, r2, r0
 800d4d2:	eb43 0b01 	adc.w	fp, r3, r1
 800d4d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4d8:	685b      	ldr	r3, [r3, #4]
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f04f 0100 	mov.w	r1, #0
 800d4e0:	f04f 0200 	mov.w	r2, #0
 800d4e4:	f04f 0300 	mov.w	r3, #0
 800d4e8:	008b      	lsls	r3, r1, #2
 800d4ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800d4ee:	0082      	lsls	r2, r0, #2
 800d4f0:	4650      	mov	r0, sl
 800d4f2:	4659      	mov	r1, fp
 800d4f4:	f7f3 fbd8 	bl	8000ca8 <__aeabi_uldivmod>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	4b0e      	ldr	r3, [pc, #56]	; (800d538 <UART_SetConfig+0x38c>)
 800d4fe:	fba3 1302 	umull	r1, r3, r3, r2
 800d502:	095b      	lsrs	r3, r3, #5
 800d504:	2164      	movs	r1, #100	; 0x64
 800d506:	fb01 f303 	mul.w	r3, r1, r3
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	011b      	lsls	r3, r3, #4
 800d50e:	3332      	adds	r3, #50	; 0x32
 800d510:	4a09      	ldr	r2, [pc, #36]	; (800d538 <UART_SetConfig+0x38c>)
 800d512:	fba2 2303 	umull	r2, r3, r2, r3
 800d516:	095b      	lsrs	r3, r3, #5
 800d518:	f003 020f 	and.w	r2, r3, #15
 800d51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4432      	add	r2, r6
 800d522:	609a      	str	r2, [r3, #8]
}
 800d524:	bf00      	nop
 800d526:	377c      	adds	r7, #124	; 0x7c
 800d528:	46bd      	mov	sp, r7
 800d52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d52e:	bf00      	nop
 800d530:	40011000 	.word	0x40011000
 800d534:	40011400 	.word	0x40011400
 800d538:	51eb851f 	.word	0x51eb851f

0800d53c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d540:	4904      	ldr	r1, [pc, #16]	; (800d554 <MX_FATFS_Init+0x18>)
 800d542:	4805      	ldr	r0, [pc, #20]	; (800d558 <MX_FATFS_Init+0x1c>)
 800d544:	f003 fb9e 	bl	8010c84 <FATFS_LinkDriver>
 800d548:	4603      	mov	r3, r0
 800d54a:	461a      	mov	r2, r3
 800d54c:	4b03      	ldr	r3, [pc, #12]	; (800d55c <MX_FATFS_Init+0x20>)
 800d54e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d550:	bf00      	nop
 800d552:	bd80      	pop	{r7, pc}
 800d554:	20007390 	.word	0x20007390
 800d558:	200000b8 	.word	0x200000b8
 800d55c:	20007394 	.word	0x20007394

0800d560 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d560:	b480      	push	{r7}
 800d562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d564:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d566:	4618      	mov	r0, r3
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	4603      	mov	r3, r0
 800d578:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800d57a:	79fb      	ldrb	r3, [r7, #7]
 800d57c:	4618      	mov	r0, r3
 800d57e:	f000 f9dd 	bl	800d93c <USER_SPI_initialize>
 800d582:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800d584:	4618      	mov	r0, r3
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	4603      	mov	r3, r0
 800d594:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800d596:	79fb      	ldrb	r3, [r7, #7]
 800d598:	4618      	mov	r0, r3
 800d59a:	f000 fab9 	bl	800db10 <USER_SPI_status>
 800d59e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60b9      	str	r1, [r7, #8]
 800d5b0:	607a      	str	r2, [r7, #4]
 800d5b2:	603b      	str	r3, [r7, #0]
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800d5b8:	7bf8      	ldrb	r0, [r7, #15]
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	68b9      	ldr	r1, [r7, #8]
 800d5c0:	f000 fabc 	bl	800db3c <USER_SPI_read>
 800d5c4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3710      	adds	r7, #16
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b084      	sub	sp, #16
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	60b9      	str	r1, [r7, #8]
 800d5d6:	607a      	str	r2, [r7, #4]
 800d5d8:	603b      	str	r3, [r7, #0]
 800d5da:	4603      	mov	r3, r0
 800d5dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800d5de:	7bf8      	ldrb	r0, [r7, #15]
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	68b9      	ldr	r1, [r7, #8]
 800d5e6:	f000 fb0f 	bl	800dc08 <USER_SPI_write>
 800d5ea:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	603a      	str	r2, [r7, #0]
 800d5fe:	71fb      	strb	r3, [r7, #7]
 800d600:	460b      	mov	r3, r1
 800d602:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800d604:	79b9      	ldrb	r1, [r7, #6]
 800d606:	79fb      	ldrb	r3, [r7, #7]
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f000 fb78 	bl	800dd00 <USER_SPI_ioctl>
 800d610:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800d612:	4618      	mov	r0, r3
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
	...

0800d61c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800d624:	f7fa f864 	bl	80076f0 <HAL_GetTick>
 800d628:	4603      	mov	r3, r0
 800d62a:	4a04      	ldr	r2, [pc, #16]	; (800d63c <SPI_Timer_On+0x20>)
 800d62c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800d62e:	4a04      	ldr	r2, [pc, #16]	; (800d640 <SPI_Timer_On+0x24>)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6013      	str	r3, [r2, #0]
}
 800d634:	bf00      	nop
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	200077fc 	.word	0x200077fc
 800d640:	20007800 	.word	0x20007800

0800d644 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800d644:	b580      	push	{r7, lr}
 800d646:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800d648:	f7fa f852 	bl	80076f0 <HAL_GetTick>
 800d64c:	4602      	mov	r2, r0
 800d64e:	4b06      	ldr	r3, [pc, #24]	; (800d668 <SPI_Timer_Status+0x24>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	1ad2      	subs	r2, r2, r3
 800d654:	4b05      	ldr	r3, [pc, #20]	; (800d66c <SPI_Timer_Status+0x28>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	429a      	cmp	r2, r3
 800d65a:	bf34      	ite	cc
 800d65c:	2301      	movcc	r3, #1
 800d65e:	2300      	movcs	r3, #0
 800d660:	b2db      	uxtb	r3, r3
}
 800d662:	4618      	mov	r0, r3
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	200077fc 	.word	0x200077fc
 800d66c:	20007800 	.word	0x20007800

0800d670 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b086      	sub	sp, #24
 800d674:	af02      	add	r7, sp, #8
 800d676:	4603      	mov	r3, r0
 800d678:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800d67a:	f107 020f 	add.w	r2, r7, #15
 800d67e:	1df9      	adds	r1, r7, #7
 800d680:	2332      	movs	r3, #50	; 0x32
 800d682:	9300      	str	r3, [sp, #0]
 800d684:	2301      	movs	r3, #1
 800d686:	4804      	ldr	r0, [pc, #16]	; (800d698 <xchg_spi+0x28>)
 800d688:	f7fe f822 	bl	800b6d0 <HAL_SPI_TransmitReceive>
    return rxDat;
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	2000632c 	.word	0x2000632c

0800d69c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800d69c:	b590      	push	{r4, r7, lr}
 800d69e:	b085      	sub	sp, #20
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	60fb      	str	r3, [r7, #12]
 800d6aa:	e00a      	b.n	800d6c2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	18d4      	adds	r4, r2, r3
 800d6b2:	20ff      	movs	r0, #255	; 0xff
 800d6b4:	f7ff ffdc 	bl	800d670 <xchg_spi>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	60fb      	str	r3, [r7, #12]
 800d6c2:	68fa      	ldr	r2, [r7, #12]
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d3f0      	bcc.n	800d6ac <rcvr_spi_multi+0x10>
	}
}
 800d6ca:	bf00      	nop
 800d6cc:	bf00      	nop
 800d6ce:	3714      	adds	r7, #20
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd90      	pop	{r4, r7, pc}

0800d6d4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800d6de:	2300      	movs	r3, #0
 800d6e0:	60fb      	str	r3, [r7, #12]
 800d6e2:	e009      	b.n	800d6f8 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	4413      	add	r3, r2
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7ff ffbf 	bl	800d670 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	60fb      	str	r3, [r7, #12]
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d3f1      	bcc.n	800d6e4 <xmit_spi_multi+0x10>
	}
}
 800d700:	bf00      	nop
 800d702:	bf00      	nop
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b086      	sub	sp, #24
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800d712:	f7f9 ffed 	bl	80076f0 <HAL_GetTick>
 800d716:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800d71c:	20ff      	movs	r0, #255	; 0xff
 800d71e:	f7ff ffa7 	bl	800d670 <xchg_spi>
 800d722:	4603      	mov	r3, r0
 800d724:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800d726:	7bfb      	ldrb	r3, [r7, #15]
 800d728:	2bff      	cmp	r3, #255	; 0xff
 800d72a:	d007      	beq.n	800d73c <wait_ready+0x32>
 800d72c:	f7f9 ffe0 	bl	80076f0 <HAL_GetTick>
 800d730:	4602      	mov	r2, r0
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	1ad3      	subs	r3, r2, r3
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d8ef      	bhi.n	800d71c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800d73c:	7bfb      	ldrb	r3, [r7, #15]
 800d73e:	2bff      	cmp	r3, #255	; 0xff
 800d740:	bf0c      	ite	eq
 800d742:	2301      	moveq	r3, #1
 800d744:	2300      	movne	r3, #0
 800d746:	b2db      	uxtb	r3, r3
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3718      	adds	r7, #24
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800d754:	2201      	movs	r2, #1
 800d756:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d75a:	4804      	ldr	r0, [pc, #16]	; (800d76c <despiselect+0x1c>)
 800d75c:	f7fa fee0 	bl	8008520 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800d760:	20ff      	movs	r0, #255	; 0xff
 800d762:	f7ff ff85 	bl	800d670 <xchg_spi>

}
 800d766:	bf00      	nop
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	40021400 	.word	0x40021400

0800d770 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800d770:	b580      	push	{r7, lr}
 800d772:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800d774:	2200      	movs	r2, #0
 800d776:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d77a:	480a      	ldr	r0, [pc, #40]	; (800d7a4 <spiselect+0x34>)
 800d77c:	f7fa fed0 	bl	8008520 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800d780:	20ff      	movs	r0, #255	; 0xff
 800d782:	f7ff ff75 	bl	800d670 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800d786:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d78a:	f7ff ffbe 	bl	800d70a <wait_ready>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d001      	beq.n	800d798 <spiselect+0x28>
 800d794:	2301      	movs	r3, #1
 800d796:	e002      	b.n	800d79e <spiselect+0x2e>

	despiselect();
 800d798:	f7ff ffda 	bl	800d750 <despiselect>
	return 0;	/* Timeout */
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	40021400 	.word	0x40021400

0800d7a8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800d7b2:	20c8      	movs	r0, #200	; 0xc8
 800d7b4:	f7ff ff32 	bl	800d61c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800d7b8:	20ff      	movs	r0, #255	; 0xff
 800d7ba:	f7ff ff59 	bl	800d670 <xchg_spi>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800d7c2:	7bfb      	ldrb	r3, [r7, #15]
 800d7c4:	2bff      	cmp	r3, #255	; 0xff
 800d7c6:	d104      	bne.n	800d7d2 <rcvr_datablock+0x2a>
 800d7c8:	f7ff ff3c 	bl	800d644 <SPI_Timer_Status>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d1f2      	bne.n	800d7b8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800d7d2:	7bfb      	ldrb	r3, [r7, #15]
 800d7d4:	2bfe      	cmp	r3, #254	; 0xfe
 800d7d6:	d001      	beq.n	800d7dc <rcvr_datablock+0x34>
 800d7d8:	2300      	movs	r3, #0
 800d7da:	e00a      	b.n	800d7f2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7ff ff5c 	bl	800d69c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800d7e4:	20ff      	movs	r0, #255	; 0xff
 800d7e6:	f7ff ff43 	bl	800d670 <xchg_spi>
 800d7ea:	20ff      	movs	r0, #255	; 0xff
 800d7ec:	f7ff ff40 	bl	800d670 <xchg_spi>

	return 1;						/* Function succeeded */
 800d7f0:	2301      	movs	r3, #1
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b084      	sub	sp, #16
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	6078      	str	r0, [r7, #4]
 800d802:	460b      	mov	r3, r1
 800d804:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800d806:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d80a:	f7ff ff7e 	bl	800d70a <wait_ready>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d101      	bne.n	800d818 <xmit_datablock+0x1e>
 800d814:	2300      	movs	r3, #0
 800d816:	e01e      	b.n	800d856 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800d818:	78fb      	ldrb	r3, [r7, #3]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7ff ff28 	bl	800d670 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800d820:	78fb      	ldrb	r3, [r7, #3]
 800d822:	2bfd      	cmp	r3, #253	; 0xfd
 800d824:	d016      	beq.n	800d854 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800d826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7ff ff52 	bl	800d6d4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800d830:	20ff      	movs	r0, #255	; 0xff
 800d832:	f7ff ff1d 	bl	800d670 <xchg_spi>
 800d836:	20ff      	movs	r0, #255	; 0xff
 800d838:	f7ff ff1a 	bl	800d670 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800d83c:	20ff      	movs	r0, #255	; 0xff
 800d83e:	f7ff ff17 	bl	800d670 <xchg_spi>
 800d842:	4603      	mov	r3, r0
 800d844:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800d846:	7bfb      	ldrb	r3, [r7, #15]
 800d848:	f003 031f 	and.w	r3, r3, #31
 800d84c:	2b05      	cmp	r3, #5
 800d84e:	d001      	beq.n	800d854 <xmit_datablock+0x5a>
 800d850:	2300      	movs	r3, #0
 800d852:	e000      	b.n	800d856 <xmit_datablock+0x5c>
	}
	return 1;
 800d854:	2301      	movs	r3, #1
}
 800d856:	4618      	mov	r0, r3
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b084      	sub	sp, #16
 800d862:	af00      	add	r7, sp, #0
 800d864:	4603      	mov	r3, r0
 800d866:	6039      	str	r1, [r7, #0]
 800d868:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800d86a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	da0e      	bge.n	800d890 <send_cmd+0x32>
		cmd &= 0x7F;
 800d872:	79fb      	ldrb	r3, [r7, #7]
 800d874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d878:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800d87a:	2100      	movs	r1, #0
 800d87c:	2037      	movs	r0, #55	; 0x37
 800d87e:	f7ff ffee 	bl	800d85e <send_cmd>
 800d882:	4603      	mov	r3, r0
 800d884:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800d886:	7bbb      	ldrb	r3, [r7, #14]
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d901      	bls.n	800d890 <send_cmd+0x32>
 800d88c:	7bbb      	ldrb	r3, [r7, #14]
 800d88e:	e051      	b.n	800d934 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800d890:	79fb      	ldrb	r3, [r7, #7]
 800d892:	2b0c      	cmp	r3, #12
 800d894:	d008      	beq.n	800d8a8 <send_cmd+0x4a>
		despiselect();
 800d896:	f7ff ff5b 	bl	800d750 <despiselect>
		if (!spiselect()) return 0xFF;
 800d89a:	f7ff ff69 	bl	800d770 <spiselect>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d101      	bne.n	800d8a8 <send_cmd+0x4a>
 800d8a4:	23ff      	movs	r3, #255	; 0xff
 800d8a6:	e045      	b.n	800d934 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800d8a8:	79fb      	ldrb	r3, [r7, #7]
 800d8aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7ff fedd 	bl	800d670 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	0e1b      	lsrs	r3, r3, #24
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7ff fed7 	bl	800d670 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	0c1b      	lsrs	r3, r3, #16
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7ff fed1 	bl	800d670 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	0a1b      	lsrs	r3, r3, #8
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7ff fecb 	bl	800d670 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7ff fec6 	bl	800d670 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800d8e8:	79fb      	ldrb	r3, [r7, #7]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d101      	bne.n	800d8f2 <send_cmd+0x94>
 800d8ee:	2395      	movs	r3, #149	; 0x95
 800d8f0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800d8f2:	79fb      	ldrb	r3, [r7, #7]
 800d8f4:	2b08      	cmp	r3, #8
 800d8f6:	d101      	bne.n	800d8fc <send_cmd+0x9e>
 800d8f8:	2387      	movs	r3, #135	; 0x87
 800d8fa:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7ff feb6 	bl	800d670 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800d904:	79fb      	ldrb	r3, [r7, #7]
 800d906:	2b0c      	cmp	r3, #12
 800d908:	d102      	bne.n	800d910 <send_cmd+0xb2>
 800d90a:	20ff      	movs	r0, #255	; 0xff
 800d90c:	f7ff feb0 	bl	800d670 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800d910:	230a      	movs	r3, #10
 800d912:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800d914:	20ff      	movs	r0, #255	; 0xff
 800d916:	f7ff feab 	bl	800d670 <xchg_spi>
 800d91a:	4603      	mov	r3, r0
 800d91c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800d91e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d922:	2b00      	cmp	r3, #0
 800d924:	da05      	bge.n	800d932 <send_cmd+0xd4>
 800d926:	7bfb      	ldrb	r3, [r7, #15]
 800d928:	3b01      	subs	r3, #1
 800d92a:	73fb      	strb	r3, [r7, #15]
 800d92c:	7bfb      	ldrb	r3, [r7, #15]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d1f0      	bne.n	800d914 <send_cmd+0xb6>

	return res;							/* Return received response */
 800d932:	7bbb      	ldrb	r3, [r7, #14]
}
 800d934:	4618      	mov	r0, r3
 800d936:	3710      	adds	r7, #16
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800d93c:	b590      	push	{r4, r7, lr}
 800d93e:	b085      	sub	sp, #20
 800d940:	af00      	add	r7, sp, #0
 800d942:	4603      	mov	r3, r0
 800d944:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800d946:	79fb      	ldrb	r3, [r7, #7]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <USER_SPI_initialize+0x14>
 800d94c:	2301      	movs	r3, #1
 800d94e:	e0d4      	b.n	800dafa <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800d950:	4b6c      	ldr	r3, [pc, #432]	; (800db04 <USER_SPI_initialize+0x1c8>)
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	b2db      	uxtb	r3, r3
 800d956:	f003 0302 	and.w	r3, r3, #2
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d003      	beq.n	800d966 <USER_SPI_initialize+0x2a>
 800d95e:	4b69      	ldr	r3, [pc, #420]	; (800db04 <USER_SPI_initialize+0x1c8>)
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	b2db      	uxtb	r3, r3
 800d964:	e0c9      	b.n	800dafa <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800d966:	4b68      	ldr	r3, [pc, #416]	; (800db08 <USER_SPI_initialize+0x1cc>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	4b66      	ldr	r3, [pc, #408]	; (800db08 <USER_SPI_initialize+0x1cc>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800d974:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800d976:	230a      	movs	r3, #10
 800d978:	73fb      	strb	r3, [r7, #15]
 800d97a:	e005      	b.n	800d988 <USER_SPI_initialize+0x4c>
 800d97c:	20ff      	movs	r0, #255	; 0xff
 800d97e:	f7ff fe77 	bl	800d670 <xchg_spi>
 800d982:	7bfb      	ldrb	r3, [r7, #15]
 800d984:	3b01      	subs	r3, #1
 800d986:	73fb      	strb	r3, [r7, #15]
 800d988:	7bfb      	ldrb	r3, [r7, #15]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d1f6      	bne.n	800d97c <USER_SPI_initialize+0x40>

	ty = 0;
 800d98e:	2300      	movs	r3, #0
 800d990:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800d992:	2100      	movs	r1, #0
 800d994:	2000      	movs	r0, #0
 800d996:	f7ff ff62 	bl	800d85e <send_cmd>
 800d99a:	4603      	mov	r3, r0
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	f040 808b 	bne.w	800dab8 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800d9a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d9a6:	f7ff fe39 	bl	800d61c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800d9aa:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d9ae:	2008      	movs	r0, #8
 800d9b0:	f7ff ff55 	bl	800d85e <send_cmd>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d151      	bne.n	800da5e <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	73fb      	strb	r3, [r7, #15]
 800d9be:	e00d      	b.n	800d9dc <USER_SPI_initialize+0xa0>
 800d9c0:	7bfc      	ldrb	r4, [r7, #15]
 800d9c2:	20ff      	movs	r0, #255	; 0xff
 800d9c4:	f7ff fe54 	bl	800d670 <xchg_spi>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	f107 0310 	add.w	r3, r7, #16
 800d9d0:	4423      	add	r3, r4
 800d9d2:	f803 2c08 	strb.w	r2, [r3, #-8]
 800d9d6:	7bfb      	ldrb	r3, [r7, #15]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	73fb      	strb	r3, [r7, #15]
 800d9dc:	7bfb      	ldrb	r3, [r7, #15]
 800d9de:	2b03      	cmp	r3, #3
 800d9e0:	d9ee      	bls.n	800d9c0 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800d9e2:	7abb      	ldrb	r3, [r7, #10]
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d167      	bne.n	800dab8 <USER_SPI_initialize+0x17c>
 800d9e8:	7afb      	ldrb	r3, [r7, #11]
 800d9ea:	2baa      	cmp	r3, #170	; 0xaa
 800d9ec:	d164      	bne.n	800dab8 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800d9ee:	bf00      	nop
 800d9f0:	f7ff fe28 	bl	800d644 <SPI_Timer_Status>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d007      	beq.n	800da0a <USER_SPI_initialize+0xce>
 800d9fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d9fe:	20a9      	movs	r0, #169	; 0xa9
 800da00:	f7ff ff2d 	bl	800d85e <send_cmd>
 800da04:	4603      	mov	r3, r0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d1f2      	bne.n	800d9f0 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800da0a:	f7ff fe1b 	bl	800d644 <SPI_Timer_Status>
 800da0e:	4603      	mov	r3, r0
 800da10:	2b00      	cmp	r3, #0
 800da12:	d051      	beq.n	800dab8 <USER_SPI_initialize+0x17c>
 800da14:	2100      	movs	r1, #0
 800da16:	203a      	movs	r0, #58	; 0x3a
 800da18:	f7ff ff21 	bl	800d85e <send_cmd>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d14a      	bne.n	800dab8 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800da22:	2300      	movs	r3, #0
 800da24:	73fb      	strb	r3, [r7, #15]
 800da26:	e00d      	b.n	800da44 <USER_SPI_initialize+0x108>
 800da28:	7bfc      	ldrb	r4, [r7, #15]
 800da2a:	20ff      	movs	r0, #255	; 0xff
 800da2c:	f7ff fe20 	bl	800d670 <xchg_spi>
 800da30:	4603      	mov	r3, r0
 800da32:	461a      	mov	r2, r3
 800da34:	f107 0310 	add.w	r3, r7, #16
 800da38:	4423      	add	r3, r4
 800da3a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800da3e:	7bfb      	ldrb	r3, [r7, #15]
 800da40:	3301      	adds	r3, #1
 800da42:	73fb      	strb	r3, [r7, #15]
 800da44:	7bfb      	ldrb	r3, [r7, #15]
 800da46:	2b03      	cmp	r3, #3
 800da48:	d9ee      	bls.n	800da28 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800da4a:	7a3b      	ldrb	r3, [r7, #8]
 800da4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da50:	2b00      	cmp	r3, #0
 800da52:	d001      	beq.n	800da58 <USER_SPI_initialize+0x11c>
 800da54:	230c      	movs	r3, #12
 800da56:	e000      	b.n	800da5a <USER_SPI_initialize+0x11e>
 800da58:	2304      	movs	r3, #4
 800da5a:	737b      	strb	r3, [r7, #13]
 800da5c:	e02c      	b.n	800dab8 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800da5e:	2100      	movs	r1, #0
 800da60:	20a9      	movs	r0, #169	; 0xa9
 800da62:	f7ff fefc 	bl	800d85e <send_cmd>
 800da66:	4603      	mov	r3, r0
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d804      	bhi.n	800da76 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800da6c:	2302      	movs	r3, #2
 800da6e:	737b      	strb	r3, [r7, #13]
 800da70:	23a9      	movs	r3, #169	; 0xa9
 800da72:	73bb      	strb	r3, [r7, #14]
 800da74:	e003      	b.n	800da7e <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800da76:	2301      	movs	r3, #1
 800da78:	737b      	strb	r3, [r7, #13]
 800da7a:	2301      	movs	r3, #1
 800da7c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800da7e:	bf00      	nop
 800da80:	f7ff fde0 	bl	800d644 <SPI_Timer_Status>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d007      	beq.n	800da9a <USER_SPI_initialize+0x15e>
 800da8a:	7bbb      	ldrb	r3, [r7, #14]
 800da8c:	2100      	movs	r1, #0
 800da8e:	4618      	mov	r0, r3
 800da90:	f7ff fee5 	bl	800d85e <send_cmd>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1f2      	bne.n	800da80 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800da9a:	f7ff fdd3 	bl	800d644 <SPI_Timer_Status>
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d007      	beq.n	800dab4 <USER_SPI_initialize+0x178>
 800daa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800daa8:	2010      	movs	r0, #16
 800daaa:	f7ff fed8 	bl	800d85e <send_cmd>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d001      	beq.n	800dab8 <USER_SPI_initialize+0x17c>
				ty = 0;
 800dab4:	2300      	movs	r3, #0
 800dab6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800dab8:	4a14      	ldr	r2, [pc, #80]	; (800db0c <USER_SPI_initialize+0x1d0>)
 800daba:	7b7b      	ldrb	r3, [r7, #13]
 800dabc:	7013      	strb	r3, [r2, #0]
	despiselect();
 800dabe:	f7ff fe47 	bl	800d750 <despiselect>

	if (ty) {			/* OK */
 800dac2:	7b7b      	ldrb	r3, [r7, #13]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d012      	beq.n	800daee <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800dac8:	4b0f      	ldr	r3, [pc, #60]	; (800db08 <USER_SPI_initialize+0x1cc>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800dad2:	4b0d      	ldr	r3, [pc, #52]	; (800db08 <USER_SPI_initialize+0x1cc>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f042 0208 	orr.w	r2, r2, #8
 800dada:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800dadc:	4b09      	ldr	r3, [pc, #36]	; (800db04 <USER_SPI_initialize+0x1c8>)
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	f023 0301 	bic.w	r3, r3, #1
 800dae6:	b2da      	uxtb	r2, r3
 800dae8:	4b06      	ldr	r3, [pc, #24]	; (800db04 <USER_SPI_initialize+0x1c8>)
 800daea:	701a      	strb	r2, [r3, #0]
 800daec:	e002      	b.n	800daf4 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800daee:	4b05      	ldr	r3, [pc, #20]	; (800db04 <USER_SPI_initialize+0x1c8>)
 800daf0:	2201      	movs	r2, #1
 800daf2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800daf4:	4b03      	ldr	r3, [pc, #12]	; (800db04 <USER_SPI_initialize+0x1c8>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	b2db      	uxtb	r3, r3
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3714      	adds	r7, #20
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd90      	pop	{r4, r7, pc}
 800db02:	bf00      	nop
 800db04:	200000cc 	.word	0x200000cc
 800db08:	2000632c 	.word	0x2000632c
 800db0c:	20000724 	.word	0x20000724

0800db10 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800db10:	b480      	push	{r7}
 800db12:	b083      	sub	sp, #12
 800db14:	af00      	add	r7, sp, #0
 800db16:	4603      	mov	r3, r0
 800db18:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800db1a:	79fb      	ldrb	r3, [r7, #7]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d001      	beq.n	800db24 <USER_SPI_status+0x14>
 800db20:	2301      	movs	r3, #1
 800db22:	e002      	b.n	800db2a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800db24:	4b04      	ldr	r3, [pc, #16]	; (800db38 <USER_SPI_status+0x28>)
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	b2db      	uxtb	r3, r3
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	370c      	adds	r7, #12
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr
 800db36:	bf00      	nop
 800db38:	200000cc 	.word	0x200000cc

0800db3c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	60b9      	str	r1, [r7, #8]
 800db44:	607a      	str	r2, [r7, #4]
 800db46:	603b      	str	r3, [r7, #0]
 800db48:	4603      	mov	r3, r0
 800db4a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800db4c:	7bfb      	ldrb	r3, [r7, #15]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d102      	bne.n	800db58 <USER_SPI_read+0x1c>
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d101      	bne.n	800db5c <USER_SPI_read+0x20>
 800db58:	2304      	movs	r3, #4
 800db5a:	e04d      	b.n	800dbf8 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800db5c:	4b28      	ldr	r3, [pc, #160]	; (800dc00 <USER_SPI_read+0xc4>)
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	b2db      	uxtb	r3, r3
 800db62:	f003 0301 	and.w	r3, r3, #1
 800db66:	2b00      	cmp	r3, #0
 800db68:	d001      	beq.n	800db6e <USER_SPI_read+0x32>
 800db6a:	2303      	movs	r3, #3
 800db6c:	e044      	b.n	800dbf8 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800db6e:	4b25      	ldr	r3, [pc, #148]	; (800dc04 <USER_SPI_read+0xc8>)
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	f003 0308 	and.w	r3, r3, #8
 800db76:	2b00      	cmp	r3, #0
 800db78:	d102      	bne.n	800db80 <USER_SPI_read+0x44>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	025b      	lsls	r3, r3, #9
 800db7e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	2b01      	cmp	r3, #1
 800db84:	d111      	bne.n	800dbaa <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800db86:	6879      	ldr	r1, [r7, #4]
 800db88:	2011      	movs	r0, #17
 800db8a:	f7ff fe68 	bl	800d85e <send_cmd>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d129      	bne.n	800dbe8 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800db94:	f44f 7100 	mov.w	r1, #512	; 0x200
 800db98:	68b8      	ldr	r0, [r7, #8]
 800db9a:	f7ff fe05 	bl	800d7a8 <rcvr_datablock>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d021      	beq.n	800dbe8 <USER_SPI_read+0xac>
			count = 0;
 800dba4:	2300      	movs	r3, #0
 800dba6:	603b      	str	r3, [r7, #0]
 800dba8:	e01e      	b.n	800dbe8 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800dbaa:	6879      	ldr	r1, [r7, #4]
 800dbac:	2012      	movs	r0, #18
 800dbae:	f7ff fe56 	bl	800d85e <send_cmd>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d117      	bne.n	800dbe8 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800dbb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dbbc:	68b8      	ldr	r0, [r7, #8]
 800dbbe:	f7ff fdf3 	bl	800d7a8 <rcvr_datablock>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d00a      	beq.n	800dbde <USER_SPI_read+0xa2>
				buff += 512;
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dbce:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	603b      	str	r3, [r7, #0]
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1ed      	bne.n	800dbb8 <USER_SPI_read+0x7c>
 800dbdc:	e000      	b.n	800dbe0 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800dbde:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	200c      	movs	r0, #12
 800dbe4:	f7ff fe3b 	bl	800d85e <send_cmd>
		}
	}
	despiselect();
 800dbe8:	f7ff fdb2 	bl	800d750 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	bf14      	ite	ne
 800dbf2:	2301      	movne	r3, #1
 800dbf4:	2300      	moveq	r3, #0
 800dbf6:	b2db      	uxtb	r3, r3
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	200000cc 	.word	0x200000cc
 800dc04:	20000724 	.word	0x20000724

0800dc08 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60b9      	str	r1, [r7, #8]
 800dc10:	607a      	str	r2, [r7, #4]
 800dc12:	603b      	str	r3, [r7, #0]
 800dc14:	4603      	mov	r3, r0
 800dc16:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800dc18:	7bfb      	ldrb	r3, [r7, #15]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d102      	bne.n	800dc24 <USER_SPI_write+0x1c>
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d101      	bne.n	800dc28 <USER_SPI_write+0x20>
 800dc24:	2304      	movs	r3, #4
 800dc26:	e063      	b.n	800dcf0 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800dc28:	4b33      	ldr	r3, [pc, #204]	; (800dcf8 <USER_SPI_write+0xf0>)
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	f003 0301 	and.w	r3, r3, #1
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <USER_SPI_write+0x32>
 800dc36:	2303      	movs	r3, #3
 800dc38:	e05a      	b.n	800dcf0 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800dc3a:	4b2f      	ldr	r3, [pc, #188]	; (800dcf8 <USER_SPI_write+0xf0>)
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	f003 0304 	and.w	r3, r3, #4
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d001      	beq.n	800dc4c <USER_SPI_write+0x44>
 800dc48:	2302      	movs	r3, #2
 800dc4a:	e051      	b.n	800dcf0 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800dc4c:	4b2b      	ldr	r3, [pc, #172]	; (800dcfc <USER_SPI_write+0xf4>)
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	f003 0308 	and.w	r3, r3, #8
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d102      	bne.n	800dc5e <USER_SPI_write+0x56>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	025b      	lsls	r3, r3, #9
 800dc5c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	d110      	bne.n	800dc86 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800dc64:	6879      	ldr	r1, [r7, #4]
 800dc66:	2018      	movs	r0, #24
 800dc68:	f7ff fdf9 	bl	800d85e <send_cmd>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d136      	bne.n	800dce0 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800dc72:	21fe      	movs	r1, #254	; 0xfe
 800dc74:	68b8      	ldr	r0, [r7, #8]
 800dc76:	f7ff fdc0 	bl	800d7fa <xmit_datablock>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d02f      	beq.n	800dce0 <USER_SPI_write+0xd8>
			count = 0;
 800dc80:	2300      	movs	r3, #0
 800dc82:	603b      	str	r3, [r7, #0]
 800dc84:	e02c      	b.n	800dce0 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800dc86:	4b1d      	ldr	r3, [pc, #116]	; (800dcfc <USER_SPI_write+0xf4>)
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	f003 0306 	and.w	r3, r3, #6
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d003      	beq.n	800dc9a <USER_SPI_write+0x92>
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	2097      	movs	r0, #151	; 0x97
 800dc96:	f7ff fde2 	bl	800d85e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	2019      	movs	r0, #25
 800dc9e:	f7ff fdde 	bl	800d85e <send_cmd>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d11b      	bne.n	800dce0 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800dca8:	21fc      	movs	r1, #252	; 0xfc
 800dcaa:	68b8      	ldr	r0, [r7, #8]
 800dcac:	f7ff fda5 	bl	800d7fa <xmit_datablock>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00a      	beq.n	800dccc <USER_SPI_write+0xc4>
				buff += 512;
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800dcbc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	3b01      	subs	r3, #1
 800dcc2:	603b      	str	r3, [r7, #0]
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d1ee      	bne.n	800dca8 <USER_SPI_write+0xa0>
 800dcca:	e000      	b.n	800dcce <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800dccc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800dcce:	21fd      	movs	r1, #253	; 0xfd
 800dcd0:	2000      	movs	r0, #0
 800dcd2:	f7ff fd92 	bl	800d7fa <xmit_datablock>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d101      	bne.n	800dce0 <USER_SPI_write+0xd8>
 800dcdc:	2301      	movs	r3, #1
 800dcde:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800dce0:	f7ff fd36 	bl	800d750 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	bf14      	ite	ne
 800dcea:	2301      	movne	r3, #1
 800dcec:	2300      	moveq	r3, #0
 800dcee:	b2db      	uxtb	r3, r3
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	200000cc 	.word	0x200000cc
 800dcfc:	20000724 	.word	0x20000724

0800dd00 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b08c      	sub	sp, #48	; 0x30
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	4603      	mov	r3, r0
 800dd08:	603a      	str	r2, [r7, #0]
 800dd0a:	71fb      	strb	r3, [r7, #7]
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800dd10:	79fb      	ldrb	r3, [r7, #7]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d001      	beq.n	800dd1a <USER_SPI_ioctl+0x1a>
 800dd16:	2304      	movs	r3, #4
 800dd18:	e15a      	b.n	800dfd0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800dd1a:	4baf      	ldr	r3, [pc, #700]	; (800dfd8 <USER_SPI_ioctl+0x2d8>)
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	f003 0301 	and.w	r3, r3, #1
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d001      	beq.n	800dd2c <USER_SPI_ioctl+0x2c>
 800dd28:	2303      	movs	r3, #3
 800dd2a:	e151      	b.n	800dfd0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800dd32:	79bb      	ldrb	r3, [r7, #6]
 800dd34:	2b04      	cmp	r3, #4
 800dd36:	f200 8136 	bhi.w	800dfa6 <USER_SPI_ioctl+0x2a6>
 800dd3a:	a201      	add	r2, pc, #4	; (adr r2, 800dd40 <USER_SPI_ioctl+0x40>)
 800dd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd40:	0800dd55 	.word	0x0800dd55
 800dd44:	0800dd69 	.word	0x0800dd69
 800dd48:	0800dfa7 	.word	0x0800dfa7
 800dd4c:	0800de15 	.word	0x0800de15
 800dd50:	0800df0b 	.word	0x0800df0b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800dd54:	f7ff fd0c 	bl	800d770 <spiselect>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	f000 8127 	beq.w	800dfae <USER_SPI_ioctl+0x2ae>
 800dd60:	2300      	movs	r3, #0
 800dd62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800dd66:	e122      	b.n	800dfae <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800dd68:	2100      	movs	r1, #0
 800dd6a:	2009      	movs	r0, #9
 800dd6c:	f7ff fd77 	bl	800d85e <send_cmd>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	f040 811d 	bne.w	800dfb2 <USER_SPI_ioctl+0x2b2>
 800dd78:	f107 030c 	add.w	r3, r7, #12
 800dd7c:	2110      	movs	r1, #16
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7ff fd12 	bl	800d7a8 <rcvr_datablock>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	f000 8113 	beq.w	800dfb2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800dd8c:	7b3b      	ldrb	r3, [r7, #12]
 800dd8e:	099b      	lsrs	r3, r3, #6
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d111      	bne.n	800ddba <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800dd96:	7d7b      	ldrb	r3, [r7, #21]
 800dd98:	461a      	mov	r2, r3
 800dd9a:	7d3b      	ldrb	r3, [r7, #20]
 800dd9c:	021b      	lsls	r3, r3, #8
 800dd9e:	4413      	add	r3, r2
 800dda0:	461a      	mov	r2, r3
 800dda2:	7cfb      	ldrb	r3, [r7, #19]
 800dda4:	041b      	lsls	r3, r3, #16
 800dda6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800ddaa:	4413      	add	r3, r2
 800ddac:	3301      	adds	r3, #1
 800ddae:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	029a      	lsls	r2, r3, #10
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	601a      	str	r2, [r3, #0]
 800ddb8:	e028      	b.n	800de0c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800ddba:	7c7b      	ldrb	r3, [r7, #17]
 800ddbc:	f003 030f 	and.w	r3, r3, #15
 800ddc0:	b2da      	uxtb	r2, r3
 800ddc2:	7dbb      	ldrb	r3, [r7, #22]
 800ddc4:	09db      	lsrs	r3, r3, #7
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	4413      	add	r3, r2
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	7d7b      	ldrb	r3, [r7, #21]
 800ddce:	005b      	lsls	r3, r3, #1
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	f003 0306 	and.w	r3, r3, #6
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	4413      	add	r3, r2
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	3302      	adds	r3, #2
 800ddde:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800dde2:	7d3b      	ldrb	r3, [r7, #20]
 800dde4:	099b      	lsrs	r3, r3, #6
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	461a      	mov	r2, r3
 800ddea:	7cfb      	ldrb	r3, [r7, #19]
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	441a      	add	r2, r3
 800ddf0:	7cbb      	ldrb	r3, [r7, #18]
 800ddf2:	029b      	lsls	r3, r3, #10
 800ddf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ddf8:	4413      	add	r3, r2
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800ddfe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800de02:	3b09      	subs	r3, #9
 800de04:	69fa      	ldr	r2, [r7, #28]
 800de06:	409a      	lsls	r2, r3
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800de0c:	2300      	movs	r3, #0
 800de0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800de12:	e0ce      	b.n	800dfb2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800de14:	4b71      	ldr	r3, [pc, #452]	; (800dfdc <USER_SPI_ioctl+0x2dc>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	f003 0304 	and.w	r3, r3, #4
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d031      	beq.n	800de84 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800de20:	2100      	movs	r1, #0
 800de22:	208d      	movs	r0, #141	; 0x8d
 800de24:	f7ff fd1b 	bl	800d85e <send_cmd>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f040 80c3 	bne.w	800dfb6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800de30:	20ff      	movs	r0, #255	; 0xff
 800de32:	f7ff fc1d 	bl	800d670 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800de36:	f107 030c 	add.w	r3, r7, #12
 800de3a:	2110      	movs	r1, #16
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7ff fcb3 	bl	800d7a8 <rcvr_datablock>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	f000 80b6 	beq.w	800dfb6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800de4a:	2330      	movs	r3, #48	; 0x30
 800de4c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800de50:	e007      	b.n	800de62 <USER_SPI_ioctl+0x162>
 800de52:	20ff      	movs	r0, #255	; 0xff
 800de54:	f7ff fc0c 	bl	800d670 <xchg_spi>
 800de58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800de5c:	3b01      	subs	r3, #1
 800de5e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800de62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800de66:	2b00      	cmp	r3, #0
 800de68:	d1f3      	bne.n	800de52 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800de6a:	7dbb      	ldrb	r3, [r7, #22]
 800de6c:	091b      	lsrs	r3, r3, #4
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	461a      	mov	r2, r3
 800de72:	2310      	movs	r3, #16
 800de74:	fa03 f202 	lsl.w	r2, r3, r2
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800de7c:	2300      	movs	r3, #0
 800de7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800de82:	e098      	b.n	800dfb6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800de84:	2100      	movs	r1, #0
 800de86:	2009      	movs	r0, #9
 800de88:	f7ff fce9 	bl	800d85e <send_cmd>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f040 8091 	bne.w	800dfb6 <USER_SPI_ioctl+0x2b6>
 800de94:	f107 030c 	add.w	r3, r7, #12
 800de98:	2110      	movs	r1, #16
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7ff fc84 	bl	800d7a8 <rcvr_datablock>
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	f000 8087 	beq.w	800dfb6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800dea8:	4b4c      	ldr	r3, [pc, #304]	; (800dfdc <USER_SPI_ioctl+0x2dc>)
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	f003 0302 	and.w	r3, r3, #2
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d012      	beq.n	800deda <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800deb4:	7dbb      	ldrb	r3, [r7, #22]
 800deb6:	005b      	lsls	r3, r3, #1
 800deb8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800debc:	7dfa      	ldrb	r2, [r7, #23]
 800debe:	09d2      	lsrs	r2, r2, #7
 800dec0:	b2d2      	uxtb	r2, r2
 800dec2:	4413      	add	r3, r2
 800dec4:	1c5a      	adds	r2, r3, #1
 800dec6:	7e7b      	ldrb	r3, [r7, #25]
 800dec8:	099b      	lsrs	r3, r3, #6
 800deca:	b2db      	uxtb	r3, r3
 800decc:	3b01      	subs	r3, #1
 800dece:	fa02 f303 	lsl.w	r3, r2, r3
 800ded2:	461a      	mov	r2, r3
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	601a      	str	r2, [r3, #0]
 800ded8:	e013      	b.n	800df02 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800deda:	7dbb      	ldrb	r3, [r7, #22]
 800dedc:	109b      	asrs	r3, r3, #2
 800dede:	b29b      	uxth	r3, r3
 800dee0:	f003 031f 	and.w	r3, r3, #31
 800dee4:	3301      	adds	r3, #1
 800dee6:	7dfa      	ldrb	r2, [r7, #23]
 800dee8:	00d2      	lsls	r2, r2, #3
 800deea:	f002 0218 	and.w	r2, r2, #24
 800deee:	7df9      	ldrb	r1, [r7, #23]
 800def0:	0949      	lsrs	r1, r1, #5
 800def2:	b2c9      	uxtb	r1, r1
 800def4:	440a      	add	r2, r1
 800def6:	3201      	adds	r2, #1
 800def8:	fb02 f303 	mul.w	r3, r2, r3
 800defc:	461a      	mov	r2, r3
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800df02:	2300      	movs	r3, #0
 800df04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800df08:	e055      	b.n	800dfb6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800df0a:	4b34      	ldr	r3, [pc, #208]	; (800dfdc <USER_SPI_ioctl+0x2dc>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	f003 0306 	and.w	r3, r3, #6
 800df12:	2b00      	cmp	r3, #0
 800df14:	d051      	beq.n	800dfba <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800df16:	f107 020c 	add.w	r2, r7, #12
 800df1a:	79fb      	ldrb	r3, [r7, #7]
 800df1c:	210b      	movs	r1, #11
 800df1e:	4618      	mov	r0, r3
 800df20:	f7ff feee 	bl	800dd00 <USER_SPI_ioctl>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d149      	bne.n	800dfbe <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800df2a:	7b3b      	ldrb	r3, [r7, #12]
 800df2c:	099b      	lsrs	r3, r3, #6
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	2b00      	cmp	r3, #0
 800df32:	d104      	bne.n	800df3e <USER_SPI_ioctl+0x23e>
 800df34:	7dbb      	ldrb	r3, [r7, #22]
 800df36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d041      	beq.n	800dfc2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	623b      	str	r3, [r7, #32]
 800df42:	6a3b      	ldr	r3, [r7, #32]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	62bb      	str	r3, [r7, #40]	; 0x28
 800df48:	6a3b      	ldr	r3, [r7, #32]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800df4e:	4b23      	ldr	r3, [pc, #140]	; (800dfdc <USER_SPI_ioctl+0x2dc>)
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	f003 0308 	and.w	r3, r3, #8
 800df56:	2b00      	cmp	r3, #0
 800df58:	d105      	bne.n	800df66 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800df5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5c:	025b      	lsls	r3, r3, #9
 800df5e:	62bb      	str	r3, [r7, #40]	; 0x28
 800df60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df62:	025b      	lsls	r3, r3, #9
 800df64:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800df66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df68:	2020      	movs	r0, #32
 800df6a:	f7ff fc78 	bl	800d85e <send_cmd>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d128      	bne.n	800dfc6 <USER_SPI_ioctl+0x2c6>
 800df74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df76:	2021      	movs	r0, #33	; 0x21
 800df78:	f7ff fc71 	bl	800d85e <send_cmd>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d121      	bne.n	800dfc6 <USER_SPI_ioctl+0x2c6>
 800df82:	2100      	movs	r1, #0
 800df84:	2026      	movs	r0, #38	; 0x26
 800df86:	f7ff fc6a 	bl	800d85e <send_cmd>
 800df8a:	4603      	mov	r3, r0
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d11a      	bne.n	800dfc6 <USER_SPI_ioctl+0x2c6>
 800df90:	f247 5030 	movw	r0, #30000	; 0x7530
 800df94:	f7ff fbb9 	bl	800d70a <wait_ready>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d013      	beq.n	800dfc6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800df9e:	2300      	movs	r3, #0
 800dfa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800dfa4:	e00f      	b.n	800dfc6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800dfa6:	2304      	movs	r3, #4
 800dfa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dfac:	e00c      	b.n	800dfc8 <USER_SPI_ioctl+0x2c8>
		break;
 800dfae:	bf00      	nop
 800dfb0:	e00a      	b.n	800dfc8 <USER_SPI_ioctl+0x2c8>
		break;
 800dfb2:	bf00      	nop
 800dfb4:	e008      	b.n	800dfc8 <USER_SPI_ioctl+0x2c8>
		break;
 800dfb6:	bf00      	nop
 800dfb8:	e006      	b.n	800dfc8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800dfba:	bf00      	nop
 800dfbc:	e004      	b.n	800dfc8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800dfbe:	bf00      	nop
 800dfc0:	e002      	b.n	800dfc8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800dfc2:	bf00      	nop
 800dfc4:	e000      	b.n	800dfc8 <USER_SPI_ioctl+0x2c8>
		break;
 800dfc6:	bf00      	nop
	}

	despiselect();
 800dfc8:	f7ff fbc2 	bl	800d750 <despiselect>

	return res;
 800dfcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3730      	adds	r7, #48	; 0x30
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}
 800dfd8:	200000cc 	.word	0x200000cc
 800dfdc:	20000724 	.word	0x20000724

0800dfe0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dfea:	79fb      	ldrb	r3, [r7, #7]
 800dfec:	4a08      	ldr	r2, [pc, #32]	; (800e010 <disk_status+0x30>)
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	4413      	add	r3, r2
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	79fa      	ldrb	r2, [r7, #7]
 800dff8:	4905      	ldr	r1, [pc, #20]	; (800e010 <disk_status+0x30>)
 800dffa:	440a      	add	r2, r1
 800dffc:	7a12      	ldrb	r2, [r2, #8]
 800dffe:	4610      	mov	r0, r2
 800e000:	4798      	blx	r3
 800e002:	4603      	mov	r3, r0
 800e004:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e006:	7bfb      	ldrb	r3, [r7, #15]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3710      	adds	r7, #16
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	20000750 	.word	0x20000750

0800e014 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	4603      	mov	r3, r0
 800e01c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e01e:	2300      	movs	r3, #0
 800e020:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e022:	79fb      	ldrb	r3, [r7, #7]
 800e024:	4a0d      	ldr	r2, [pc, #52]	; (800e05c <disk_initialize+0x48>)
 800e026:	5cd3      	ldrb	r3, [r2, r3]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d111      	bne.n	800e050 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e02c:	79fb      	ldrb	r3, [r7, #7]
 800e02e:	4a0b      	ldr	r2, [pc, #44]	; (800e05c <disk_initialize+0x48>)
 800e030:	2101      	movs	r1, #1
 800e032:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e034:	79fb      	ldrb	r3, [r7, #7]
 800e036:	4a09      	ldr	r2, [pc, #36]	; (800e05c <disk_initialize+0x48>)
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	4413      	add	r3, r2
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	79fa      	ldrb	r2, [r7, #7]
 800e042:	4906      	ldr	r1, [pc, #24]	; (800e05c <disk_initialize+0x48>)
 800e044:	440a      	add	r2, r1
 800e046:	7a12      	ldrb	r2, [r2, #8]
 800e048:	4610      	mov	r0, r2
 800e04a:	4798      	blx	r3
 800e04c:	4603      	mov	r3, r0
 800e04e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e050:	7bfb      	ldrb	r3, [r7, #15]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	bf00      	nop
 800e05c:	20000750 	.word	0x20000750

0800e060 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e060:	b590      	push	{r4, r7, lr}
 800e062:	b087      	sub	sp, #28
 800e064:	af00      	add	r7, sp, #0
 800e066:	60b9      	str	r1, [r7, #8]
 800e068:	607a      	str	r2, [r7, #4]
 800e06a:	603b      	str	r3, [r7, #0]
 800e06c:	4603      	mov	r3, r0
 800e06e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e070:	7bfb      	ldrb	r3, [r7, #15]
 800e072:	4a0a      	ldr	r2, [pc, #40]	; (800e09c <disk_read+0x3c>)
 800e074:	009b      	lsls	r3, r3, #2
 800e076:	4413      	add	r3, r2
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	689c      	ldr	r4, [r3, #8]
 800e07c:	7bfb      	ldrb	r3, [r7, #15]
 800e07e:	4a07      	ldr	r2, [pc, #28]	; (800e09c <disk_read+0x3c>)
 800e080:	4413      	add	r3, r2
 800e082:	7a18      	ldrb	r0, [r3, #8]
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	68b9      	ldr	r1, [r7, #8]
 800e08a:	47a0      	blx	r4
 800e08c:	4603      	mov	r3, r0
 800e08e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e090:	7dfb      	ldrb	r3, [r7, #23]
}
 800e092:	4618      	mov	r0, r3
 800e094:	371c      	adds	r7, #28
 800e096:	46bd      	mov	sp, r7
 800e098:	bd90      	pop	{r4, r7, pc}
 800e09a:	bf00      	nop
 800e09c:	20000750 	.word	0x20000750

0800e0a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e0a0:	b590      	push	{r4, r7, lr}
 800e0a2:	b087      	sub	sp, #28
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	60b9      	str	r1, [r7, #8]
 800e0a8:	607a      	str	r2, [r7, #4]
 800e0aa:	603b      	str	r3, [r7, #0]
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e0b0:	7bfb      	ldrb	r3, [r7, #15]
 800e0b2:	4a0a      	ldr	r2, [pc, #40]	; (800e0dc <disk_write+0x3c>)
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	4413      	add	r3, r2
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	68dc      	ldr	r4, [r3, #12]
 800e0bc:	7bfb      	ldrb	r3, [r7, #15]
 800e0be:	4a07      	ldr	r2, [pc, #28]	; (800e0dc <disk_write+0x3c>)
 800e0c0:	4413      	add	r3, r2
 800e0c2:	7a18      	ldrb	r0, [r3, #8]
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	68b9      	ldr	r1, [r7, #8]
 800e0ca:	47a0      	blx	r4
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800e0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	371c      	adds	r7, #28
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd90      	pop	{r4, r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	20000750 	.word	0x20000750

0800e0e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	603a      	str	r2, [r7, #0]
 800e0ea:	71fb      	strb	r3, [r7, #7]
 800e0ec:	460b      	mov	r3, r1
 800e0ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e0f0:	79fb      	ldrb	r3, [r7, #7]
 800e0f2:	4a09      	ldr	r2, [pc, #36]	; (800e118 <disk_ioctl+0x38>)
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	4413      	add	r3, r2
 800e0f8:	685b      	ldr	r3, [r3, #4]
 800e0fa:	691b      	ldr	r3, [r3, #16]
 800e0fc:	79fa      	ldrb	r2, [r7, #7]
 800e0fe:	4906      	ldr	r1, [pc, #24]	; (800e118 <disk_ioctl+0x38>)
 800e100:	440a      	add	r2, r1
 800e102:	7a10      	ldrb	r0, [r2, #8]
 800e104:	79b9      	ldrb	r1, [r7, #6]
 800e106:	683a      	ldr	r2, [r7, #0]
 800e108:	4798      	blx	r3
 800e10a:	4603      	mov	r3, r0
 800e10c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e110:	4618      	mov	r0, r3
 800e112:	3710      	adds	r7, #16
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}
 800e118:	20000750 	.word	0x20000750

0800e11c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	3301      	adds	r3, #1
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e12c:	89fb      	ldrh	r3, [r7, #14]
 800e12e:	021b      	lsls	r3, r3, #8
 800e130:	b21a      	sxth	r2, r3
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	b21b      	sxth	r3, r3
 800e138:	4313      	orrs	r3, r2
 800e13a:	b21b      	sxth	r3, r3
 800e13c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e13e:	89fb      	ldrh	r3, [r7, #14]
}
 800e140:	4618      	mov	r0, r3
 800e142:	3714      	adds	r7, #20
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	3303      	adds	r3, #3
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	021b      	lsls	r3, r3, #8
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	3202      	adds	r2, #2
 800e164:	7812      	ldrb	r2, [r2, #0]
 800e166:	4313      	orrs	r3, r2
 800e168:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	021b      	lsls	r3, r3, #8
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	3201      	adds	r2, #1
 800e172:	7812      	ldrb	r2, [r2, #0]
 800e174:	4313      	orrs	r3, r2
 800e176:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	021b      	lsls	r3, r3, #8
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	7812      	ldrb	r2, [r2, #0]
 800e180:	4313      	orrs	r3, r2
 800e182:	60fb      	str	r3, [r7, #12]
	return rv;
 800e184:	68fb      	ldr	r3, [r7, #12]
}
 800e186:	4618      	mov	r0, r3
 800e188:	3714      	adds	r7, #20
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e192:	b480      	push	{r7}
 800e194:	b083      	sub	sp, #12
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
 800e19a:	460b      	mov	r3, r1
 800e19c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	1c5a      	adds	r2, r3, #1
 800e1a2:	607a      	str	r2, [r7, #4]
 800e1a4:	887a      	ldrh	r2, [r7, #2]
 800e1a6:	b2d2      	uxtb	r2, r2
 800e1a8:	701a      	strb	r2, [r3, #0]
 800e1aa:	887b      	ldrh	r3, [r7, #2]
 800e1ac:	0a1b      	lsrs	r3, r3, #8
 800e1ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	1c5a      	adds	r2, r3, #1
 800e1b4:	607a      	str	r2, [r7, #4]
 800e1b6:	887a      	ldrh	r2, [r7, #2]
 800e1b8:	b2d2      	uxtb	r2, r2
 800e1ba:	701a      	strb	r2, [r3, #0]
}
 800e1bc:	bf00      	nop
 800e1be:	370c      	adds	r7, #12
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	1c5a      	adds	r2, r3, #1
 800e1d6:	607a      	str	r2, [r7, #4]
 800e1d8:	683a      	ldr	r2, [r7, #0]
 800e1da:	b2d2      	uxtb	r2, r2
 800e1dc:	701a      	strb	r2, [r3, #0]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	0a1b      	lsrs	r3, r3, #8
 800e1e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	1c5a      	adds	r2, r3, #1
 800e1e8:	607a      	str	r2, [r7, #4]
 800e1ea:	683a      	ldr	r2, [r7, #0]
 800e1ec:	b2d2      	uxtb	r2, r2
 800e1ee:	701a      	strb	r2, [r3, #0]
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	0a1b      	lsrs	r3, r3, #8
 800e1f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	1c5a      	adds	r2, r3, #1
 800e1fa:	607a      	str	r2, [r7, #4]
 800e1fc:	683a      	ldr	r2, [r7, #0]
 800e1fe:	b2d2      	uxtb	r2, r2
 800e200:	701a      	strb	r2, [r3, #0]
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	0a1b      	lsrs	r3, r3, #8
 800e206:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	1c5a      	adds	r2, r3, #1
 800e20c:	607a      	str	r2, [r7, #4]
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	b2d2      	uxtb	r2, r2
 800e212:	701a      	strb	r2, [r3, #0]
}
 800e214:	bf00      	nop
 800e216:	370c      	adds	r7, #12
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e220:	b480      	push	{r7}
 800e222:	b087      	sub	sp, #28
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00d      	beq.n	800e256 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e23a:	693a      	ldr	r2, [r7, #16]
 800e23c:	1c53      	adds	r3, r2, #1
 800e23e:	613b      	str	r3, [r7, #16]
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	1c59      	adds	r1, r3, #1
 800e244:	6179      	str	r1, [r7, #20]
 800e246:	7812      	ldrb	r2, [r2, #0]
 800e248:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	3b01      	subs	r3, #1
 800e24e:	607b      	str	r3, [r7, #4]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d1f1      	bne.n	800e23a <mem_cpy+0x1a>
	}
}
 800e256:	bf00      	nop
 800e258:	371c      	adds	r7, #28
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr

0800e262 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e262:	b480      	push	{r7}
 800e264:	b087      	sub	sp, #28
 800e266:	af00      	add	r7, sp, #0
 800e268:	60f8      	str	r0, [r7, #12]
 800e26a:	60b9      	str	r1, [r7, #8]
 800e26c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	1c5a      	adds	r2, r3, #1
 800e276:	617a      	str	r2, [r7, #20]
 800e278:	68ba      	ldr	r2, [r7, #8]
 800e27a:	b2d2      	uxtb	r2, r2
 800e27c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	3b01      	subs	r3, #1
 800e282:	607b      	str	r3, [r7, #4]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d1f3      	bne.n	800e272 <mem_set+0x10>
}
 800e28a:	bf00      	nop
 800e28c:	bf00      	nop
 800e28e:	371c      	adds	r7, #28
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr

0800e298 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e298:	b480      	push	{r7}
 800e29a:	b089      	sub	sp, #36	; 0x24
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	61fb      	str	r3, [r7, #28]
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	1c5a      	adds	r2, r3, #1
 800e2b4:	61fa      	str	r2, [r7, #28]
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	1c5a      	adds	r2, r3, #1
 800e2be:	61ba      	str	r2, [r7, #24]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	1acb      	subs	r3, r1, r3
 800e2c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	607b      	str	r3, [r7, #4]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d002      	beq.n	800e2d8 <mem_cmp+0x40>
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d0eb      	beq.n	800e2b0 <mem_cmp+0x18>

	return r;
 800e2d8:	697b      	ldr	r3, [r7, #20]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3724      	adds	r7, #36	; 0x24
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr

0800e2e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e2e6:	b480      	push	{r7}
 800e2e8:	b083      	sub	sp, #12
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
 800e2ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e2f0:	e002      	b.n	800e2f8 <chk_chr+0x12>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	607b      	str	r3, [r7, #4]
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d005      	beq.n	800e30c <chk_chr+0x26>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	461a      	mov	r2, r3
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	4293      	cmp	r3, r2
 800e30a:	d1f2      	bne.n	800e2f2 <chk_chr+0xc>
	return *str;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	781b      	ldrb	r3, [r3, #0]
}
 800e310:	4618      	mov	r0, r3
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d009      	beq.n	800e33e <lock_fs+0x22>
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	4618      	mov	r0, r3
 800e330:	f002 fcde 	bl	8010cf0 <ff_req_grant>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <lock_fs+0x22>
 800e33a:	2301      	movs	r3, #1
 800e33c:	e000      	b.n	800e340 <lock_fs+0x24>
 800e33e:	2300      	movs	r3, #0
}
 800e340:	4618      	mov	r0, r3
 800e342:	3708      	adds	r7, #8
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}

0800e348 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	460b      	mov	r3, r1
 800e352:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00d      	beq.n	800e376 <unlock_fs+0x2e>
 800e35a:	78fb      	ldrb	r3, [r7, #3]
 800e35c:	2b0c      	cmp	r3, #12
 800e35e:	d00a      	beq.n	800e376 <unlock_fs+0x2e>
 800e360:	78fb      	ldrb	r3, [r7, #3]
 800e362:	2b0b      	cmp	r3, #11
 800e364:	d007      	beq.n	800e376 <unlock_fs+0x2e>
 800e366:	78fb      	ldrb	r3, [r7, #3]
 800e368:	2b0f      	cmp	r3, #15
 800e36a:	d004      	beq.n	800e376 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	68db      	ldr	r3, [r3, #12]
 800e370:	4618      	mov	r0, r3
 800e372:	f002 fcd2 	bl	8010d1a <ff_rel_grant>
	}
}
 800e376:	bf00      	nop
 800e378:	3708      	adds	r7, #8
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
	...

0800e380 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e38a:	2300      	movs	r3, #0
 800e38c:	60bb      	str	r3, [r7, #8]
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	60fb      	str	r3, [r7, #12]
 800e392:	e029      	b.n	800e3e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e394:	4a27      	ldr	r2, [pc, #156]	; (800e434 <chk_lock+0xb4>)
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	011b      	lsls	r3, r3, #4
 800e39a:	4413      	add	r3, r2
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d01d      	beq.n	800e3de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e3a2:	4a24      	ldr	r2, [pc, #144]	; (800e434 <chk_lock+0xb4>)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	011b      	lsls	r3, r3, #4
 800e3a8:	4413      	add	r3, r2
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d116      	bne.n	800e3e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e3b4:	4a1f      	ldr	r2, [pc, #124]	; (800e434 <chk_lock+0xb4>)
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	011b      	lsls	r3, r3, #4
 800e3ba:	4413      	add	r3, r2
 800e3bc:	3304      	adds	r3, #4
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d10c      	bne.n	800e3e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e3c8:	4a1a      	ldr	r2, [pc, #104]	; (800e434 <chk_lock+0xb4>)
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	011b      	lsls	r3, r3, #4
 800e3ce:	4413      	add	r3, r2
 800e3d0:	3308      	adds	r3, #8
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d102      	bne.n	800e3e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e3dc:	e007      	b.n	800e3ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	60fb      	str	r3, [r7, #12]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d9d2      	bls.n	800e394 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2b02      	cmp	r3, #2
 800e3f2:	d109      	bne.n	800e408 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d102      	bne.n	800e400 <chk_lock+0x80>
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	2b02      	cmp	r3, #2
 800e3fe:	d101      	bne.n	800e404 <chk_lock+0x84>
 800e400:	2300      	movs	r3, #0
 800e402:	e010      	b.n	800e426 <chk_lock+0xa6>
 800e404:	2312      	movs	r3, #18
 800e406:	e00e      	b.n	800e426 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d108      	bne.n	800e420 <chk_lock+0xa0>
 800e40e:	4a09      	ldr	r2, [pc, #36]	; (800e434 <chk_lock+0xb4>)
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	011b      	lsls	r3, r3, #4
 800e414:	4413      	add	r3, r2
 800e416:	330c      	adds	r3, #12
 800e418:	881b      	ldrh	r3, [r3, #0]
 800e41a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e41e:	d101      	bne.n	800e424 <chk_lock+0xa4>
 800e420:	2310      	movs	r3, #16
 800e422:	e000      	b.n	800e426 <chk_lock+0xa6>
 800e424:	2300      	movs	r3, #0
}
 800e426:	4618      	mov	r0, r3
 800e428:	3714      	adds	r7, #20
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr
 800e432:	bf00      	nop
 800e434:	20000730 	.word	0x20000730

0800e438 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e43e:	2300      	movs	r3, #0
 800e440:	607b      	str	r3, [r7, #4]
 800e442:	e002      	b.n	800e44a <enq_lock+0x12>
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	3301      	adds	r3, #1
 800e448:	607b      	str	r3, [r7, #4]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d806      	bhi.n	800e45e <enq_lock+0x26>
 800e450:	4a09      	ldr	r2, [pc, #36]	; (800e478 <enq_lock+0x40>)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	011b      	lsls	r3, r3, #4
 800e456:	4413      	add	r3, r2
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d1f2      	bne.n	800e444 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2b02      	cmp	r3, #2
 800e462:	bf14      	ite	ne
 800e464:	2301      	movne	r3, #1
 800e466:	2300      	moveq	r3, #0
 800e468:	b2db      	uxtb	r3, r3
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	370c      	adds	r7, #12
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	20000730 	.word	0x20000730

0800e47c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b085      	sub	sp, #20
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e486:	2300      	movs	r3, #0
 800e488:	60fb      	str	r3, [r7, #12]
 800e48a:	e01f      	b.n	800e4cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e48c:	4a41      	ldr	r2, [pc, #260]	; (800e594 <inc_lock+0x118>)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	011b      	lsls	r3, r3, #4
 800e492:	4413      	add	r3, r2
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d113      	bne.n	800e4c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e49e:	4a3d      	ldr	r2, [pc, #244]	; (800e594 <inc_lock+0x118>)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	011b      	lsls	r3, r3, #4
 800e4a4:	4413      	add	r3, r2
 800e4a6:	3304      	adds	r3, #4
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	d109      	bne.n	800e4c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e4b2:	4a38      	ldr	r2, [pc, #224]	; (800e594 <inc_lock+0x118>)
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	011b      	lsls	r3, r3, #4
 800e4b8:	4413      	add	r3, r2
 800e4ba:	3308      	adds	r3, #8
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d006      	beq.n	800e4d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	60fb      	str	r3, [r7, #12]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d9dc      	bls.n	800e48c <inc_lock+0x10>
 800e4d2:	e000      	b.n	800e4d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e4d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	2b02      	cmp	r3, #2
 800e4da:	d132      	bne.n	800e542 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	60fb      	str	r3, [r7, #12]
 800e4e0:	e002      	b.n	800e4e8 <inc_lock+0x6c>
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	60fb      	str	r3, [r7, #12]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	d806      	bhi.n	800e4fc <inc_lock+0x80>
 800e4ee:	4a29      	ldr	r2, [pc, #164]	; (800e594 <inc_lock+0x118>)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	011b      	lsls	r3, r3, #4
 800e4f4:	4413      	add	r3, r2
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1f2      	bne.n	800e4e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2b02      	cmp	r3, #2
 800e500:	d101      	bne.n	800e506 <inc_lock+0x8a>
 800e502:	2300      	movs	r3, #0
 800e504:	e040      	b.n	800e588 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	4922      	ldr	r1, [pc, #136]	; (800e594 <inc_lock+0x118>)
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	011b      	lsls	r3, r3, #4
 800e510:	440b      	add	r3, r1
 800e512:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	689a      	ldr	r2, [r3, #8]
 800e518:	491e      	ldr	r1, [pc, #120]	; (800e594 <inc_lock+0x118>)
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	011b      	lsls	r3, r3, #4
 800e51e:	440b      	add	r3, r1
 800e520:	3304      	adds	r3, #4
 800e522:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	695a      	ldr	r2, [r3, #20]
 800e528:	491a      	ldr	r1, [pc, #104]	; (800e594 <inc_lock+0x118>)
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	011b      	lsls	r3, r3, #4
 800e52e:	440b      	add	r3, r1
 800e530:	3308      	adds	r3, #8
 800e532:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e534:	4a17      	ldr	r2, [pc, #92]	; (800e594 <inc_lock+0x118>)
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	011b      	lsls	r3, r3, #4
 800e53a:	4413      	add	r3, r2
 800e53c:	330c      	adds	r3, #12
 800e53e:	2200      	movs	r2, #0
 800e540:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d009      	beq.n	800e55c <inc_lock+0xe0>
 800e548:	4a12      	ldr	r2, [pc, #72]	; (800e594 <inc_lock+0x118>)
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	011b      	lsls	r3, r3, #4
 800e54e:	4413      	add	r3, r2
 800e550:	330c      	adds	r3, #12
 800e552:	881b      	ldrh	r3, [r3, #0]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d001      	beq.n	800e55c <inc_lock+0xe0>
 800e558:	2300      	movs	r3, #0
 800e55a:	e015      	b.n	800e588 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d108      	bne.n	800e574 <inc_lock+0xf8>
 800e562:	4a0c      	ldr	r2, [pc, #48]	; (800e594 <inc_lock+0x118>)
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	011b      	lsls	r3, r3, #4
 800e568:	4413      	add	r3, r2
 800e56a:	330c      	adds	r3, #12
 800e56c:	881b      	ldrh	r3, [r3, #0]
 800e56e:	3301      	adds	r3, #1
 800e570:	b29a      	uxth	r2, r3
 800e572:	e001      	b.n	800e578 <inc_lock+0xfc>
 800e574:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e578:	4906      	ldr	r1, [pc, #24]	; (800e594 <inc_lock+0x118>)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	011b      	lsls	r3, r3, #4
 800e57e:	440b      	add	r3, r1
 800e580:	330c      	adds	r3, #12
 800e582:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	3301      	adds	r3, #1
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3714      	adds	r7, #20
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr
 800e594:	20000730 	.word	0x20000730

0800e598 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e598:	b480      	push	{r7}
 800e59a:	b085      	sub	sp, #20
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	3b01      	subs	r3, #1
 800e5a4:	607b      	str	r3, [r7, #4]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d825      	bhi.n	800e5f8 <dec_lock+0x60>
		n = Files[i].ctr;
 800e5ac:	4a17      	ldr	r2, [pc, #92]	; (800e60c <dec_lock+0x74>)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	011b      	lsls	r3, r3, #4
 800e5b2:	4413      	add	r3, r2
 800e5b4:	330c      	adds	r3, #12
 800e5b6:	881b      	ldrh	r3, [r3, #0]
 800e5b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e5ba:	89fb      	ldrh	r3, [r7, #14]
 800e5bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5c0:	d101      	bne.n	800e5c6 <dec_lock+0x2e>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e5c6:	89fb      	ldrh	r3, [r7, #14]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <dec_lock+0x3a>
 800e5cc:	89fb      	ldrh	r3, [r7, #14]
 800e5ce:	3b01      	subs	r3, #1
 800e5d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e5d2:	4a0e      	ldr	r2, [pc, #56]	; (800e60c <dec_lock+0x74>)
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	011b      	lsls	r3, r3, #4
 800e5d8:	4413      	add	r3, r2
 800e5da:	330c      	adds	r3, #12
 800e5dc:	89fa      	ldrh	r2, [r7, #14]
 800e5de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e5e0:	89fb      	ldrh	r3, [r7, #14]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d105      	bne.n	800e5f2 <dec_lock+0x5a>
 800e5e6:	4a09      	ldr	r2, [pc, #36]	; (800e60c <dec_lock+0x74>)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	011b      	lsls	r3, r3, #4
 800e5ec:	4413      	add	r3, r2
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	737b      	strb	r3, [r7, #13]
 800e5f6:	e001      	b.n	800e5fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e5f8:	2302      	movs	r3, #2
 800e5fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e5fc:	7b7b      	ldrb	r3, [r7, #13]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3714      	adds	r7, #20
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	20000730 	.word	0x20000730

0800e610 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e610:	b480      	push	{r7}
 800e612:	b085      	sub	sp, #20
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e618:	2300      	movs	r3, #0
 800e61a:	60fb      	str	r3, [r7, #12]
 800e61c:	e010      	b.n	800e640 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e61e:	4a0d      	ldr	r2, [pc, #52]	; (800e654 <clear_lock+0x44>)
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	011b      	lsls	r3, r3, #4
 800e624:	4413      	add	r3, r2
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	687a      	ldr	r2, [r7, #4]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d105      	bne.n	800e63a <clear_lock+0x2a>
 800e62e:	4a09      	ldr	r2, [pc, #36]	; (800e654 <clear_lock+0x44>)
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	011b      	lsls	r3, r3, #4
 800e634:	4413      	add	r3, r2
 800e636:	2200      	movs	r2, #0
 800e638:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3301      	adds	r3, #1
 800e63e:	60fb      	str	r3, [r7, #12]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2b01      	cmp	r3, #1
 800e644:	d9eb      	bls.n	800e61e <clear_lock+0xe>
	}
}
 800e646:	bf00      	nop
 800e648:	bf00      	nop
 800e64a:	3714      	adds	r7, #20
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr
 800e654:	20000730 	.word	0x20000730

0800e658 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e660:	2300      	movs	r3, #0
 800e662:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	78db      	ldrb	r3, [r3, #3]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d034      	beq.n	800e6d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e670:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	7858      	ldrb	r0, [r3, #1]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e67c:	2301      	movs	r3, #1
 800e67e:	697a      	ldr	r2, [r7, #20]
 800e680:	f7ff fd0e 	bl	800e0a0 <disk_write>
 800e684:	4603      	mov	r3, r0
 800e686:	2b00      	cmp	r3, #0
 800e688:	d002      	beq.n	800e690 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e68a:	2301      	movs	r3, #1
 800e68c:	73fb      	strb	r3, [r7, #15]
 800e68e:	e022      	b.n	800e6d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2200      	movs	r2, #0
 800e694:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e69a:	697a      	ldr	r2, [r7, #20]
 800e69c:	1ad2      	subs	r2, r2, r3
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	69db      	ldr	r3, [r3, #28]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d217      	bcs.n	800e6d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	789b      	ldrb	r3, [r3, #2]
 800e6aa:	613b      	str	r3, [r7, #16]
 800e6ac:	e010      	b.n	800e6d0 <sync_window+0x78>
					wsect += fs->fsize;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	69db      	ldr	r3, [r3, #28]
 800e6b2:	697a      	ldr	r2, [r7, #20]
 800e6b4:	4413      	add	r3, r2
 800e6b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	7858      	ldrb	r0, [r3, #1]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	697a      	ldr	r2, [r7, #20]
 800e6c6:	f7ff fceb 	bl	800e0a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	3b01      	subs	r3, #1
 800e6ce:	613b      	str	r3, [r7, #16]
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d8eb      	bhi.n	800e6ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e6d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3718      	adds	r7, #24
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6f2:	683a      	ldr	r2, [r7, #0]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d01b      	beq.n	800e730 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f7ff ffad 	bl	800e658 <sync_window>
 800e6fe:	4603      	mov	r3, r0
 800e700:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e702:	7bfb      	ldrb	r3, [r7, #15]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d113      	bne.n	800e730 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	7858      	ldrb	r0, [r3, #1]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e712:	2301      	movs	r3, #1
 800e714:	683a      	ldr	r2, [r7, #0]
 800e716:	f7ff fca3 	bl	800e060 <disk_read>
 800e71a:	4603      	mov	r3, r0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d004      	beq.n	800e72a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e720:	f04f 33ff 	mov.w	r3, #4294967295
 800e724:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e726:	2301      	movs	r3, #1
 800e728:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	683a      	ldr	r2, [r7, #0]
 800e72e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e730:	7bfb      	ldrb	r3, [r7, #15]
}
 800e732:	4618      	mov	r0, r3
 800e734:	3710      	adds	r7, #16
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
	...

0800e73c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b084      	sub	sp, #16
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f7ff ff87 	bl	800e658 <sync_window>
 800e74a:	4603      	mov	r3, r0
 800e74c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e74e:	7bfb      	ldrb	r3, [r7, #15]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d158      	bne.n	800e806 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	2b03      	cmp	r3, #3
 800e75a:	d148      	bne.n	800e7ee <sync_fs+0xb2>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	791b      	ldrb	r3, [r3, #4]
 800e760:	2b01      	cmp	r3, #1
 800e762:	d144      	bne.n	800e7ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	3334      	adds	r3, #52	; 0x34
 800e768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e76c:	2100      	movs	r1, #0
 800e76e:	4618      	mov	r0, r3
 800e770:	f7ff fd77 	bl	800e262 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	3334      	adds	r3, #52	; 0x34
 800e778:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e77c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e780:	4618      	mov	r0, r3
 800e782:	f7ff fd06 	bl	800e192 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	3334      	adds	r3, #52	; 0x34
 800e78a:	4921      	ldr	r1, [pc, #132]	; (800e810 <sync_fs+0xd4>)
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7ff fd1b 	bl	800e1c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	3334      	adds	r3, #52	; 0x34
 800e796:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e79a:	491e      	ldr	r1, [pc, #120]	; (800e814 <sync_fs+0xd8>)
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7ff fd13 	bl	800e1c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	3334      	adds	r3, #52	; 0x34
 800e7a6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	695b      	ldr	r3, [r3, #20]
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	4610      	mov	r0, r2
 800e7b2:	f7ff fd09 	bl	800e1c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	3334      	adds	r3, #52	; 0x34
 800e7ba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	691b      	ldr	r3, [r3, #16]
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	4610      	mov	r0, r2
 800e7c6:	f7ff fcff 	bl	800e1c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6a1b      	ldr	r3, [r3, #32]
 800e7ce:	1c5a      	adds	r2, r3, #1
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	7858      	ldrb	r0, [r3, #1]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	f7ff fc5c 	bl	800e0a0 <disk_write>
			fs->fsi_flag = 0;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	785b      	ldrb	r3, [r3, #1]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7ff fc72 	bl	800e0e0 <disk_ioctl>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d001      	beq.n	800e806 <sync_fs+0xca>
 800e802:	2301      	movs	r3, #1
 800e804:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e806:	7bfb      	ldrb	r3, [r7, #15]
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	41615252 	.word	0x41615252
 800e814:	61417272 	.word	0x61417272

0800e818 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	3b02      	subs	r3, #2
 800e826:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	699b      	ldr	r3, [r3, #24]
 800e82c:	3b02      	subs	r3, #2
 800e82e:	683a      	ldr	r2, [r7, #0]
 800e830:	429a      	cmp	r2, r3
 800e832:	d301      	bcc.n	800e838 <clust2sect+0x20>
 800e834:	2300      	movs	r3, #0
 800e836:	e008      	b.n	800e84a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	895b      	ldrh	r3, [r3, #10]
 800e83c:	461a      	mov	r2, r3
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	fb03 f202 	mul.w	r2, r3, r2
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e848:	4413      	add	r3, r2
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	370c      	adds	r7, #12
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr

0800e856 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b086      	sub	sp, #24
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d904      	bls.n	800e876 <get_fat+0x20>
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	683a      	ldr	r2, [r7, #0]
 800e872:	429a      	cmp	r2, r3
 800e874:	d302      	bcc.n	800e87c <get_fat+0x26>
		val = 1;	/* Internal error */
 800e876:	2301      	movs	r3, #1
 800e878:	617b      	str	r3, [r7, #20]
 800e87a:	e08f      	b.n	800e99c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e87c:	f04f 33ff 	mov.w	r3, #4294967295
 800e880:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	2b03      	cmp	r3, #3
 800e888:	d062      	beq.n	800e950 <get_fat+0xfa>
 800e88a:	2b03      	cmp	r3, #3
 800e88c:	dc7c      	bgt.n	800e988 <get_fat+0x132>
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d002      	beq.n	800e898 <get_fat+0x42>
 800e892:	2b02      	cmp	r3, #2
 800e894:	d042      	beq.n	800e91c <get_fat+0xc6>
 800e896:	e077      	b.n	800e988 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	60fb      	str	r3, [r7, #12]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	085b      	lsrs	r3, r3, #1
 800e8a0:	68fa      	ldr	r2, [r7, #12]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	0a5b      	lsrs	r3, r3, #9
 800e8ae:	4413      	add	r3, r2
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	6938      	ldr	r0, [r7, #16]
 800e8b4:	f7ff ff14 	bl	800e6e0 <move_window>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d167      	bne.n	800e98e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	1c5a      	adds	r2, r3, #1
 800e8c2:	60fa      	str	r2, [r7, #12]
 800e8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8c8:	693a      	ldr	r2, [r7, #16]
 800e8ca:	4413      	add	r3, r2
 800e8cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8d0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	0a5b      	lsrs	r3, r3, #9
 800e8da:	4413      	add	r3, r2
 800e8dc:	4619      	mov	r1, r3
 800e8de:	6938      	ldr	r0, [r7, #16]
 800e8e0:	f7ff fefe 	bl	800e6e0 <move_window>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d153      	bne.n	800e992 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8f0:	693a      	ldr	r2, [r7, #16]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8f8:	021b      	lsls	r3, r3, #8
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	4313      	orrs	r3, r2
 800e900:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	f003 0301 	and.w	r3, r3, #1
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d002      	beq.n	800e912 <get_fat+0xbc>
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	091b      	lsrs	r3, r3, #4
 800e910:	e002      	b.n	800e918 <get_fat+0xc2>
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e918:	617b      	str	r3, [r7, #20]
			break;
 800e91a:	e03f      	b.n	800e99c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	0a1b      	lsrs	r3, r3, #8
 800e924:	4413      	add	r3, r2
 800e926:	4619      	mov	r1, r3
 800e928:	6938      	ldr	r0, [r7, #16]
 800e92a:	f7ff fed9 	bl	800e6e0 <move_window>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d130      	bne.n	800e996 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	005b      	lsls	r3, r3, #1
 800e93e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e942:	4413      	add	r3, r2
 800e944:	4618      	mov	r0, r3
 800e946:	f7ff fbe9 	bl	800e11c <ld_word>
 800e94a:	4603      	mov	r3, r0
 800e94c:	617b      	str	r3, [r7, #20]
			break;
 800e94e:	e025      	b.n	800e99c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	09db      	lsrs	r3, r3, #7
 800e958:	4413      	add	r3, r2
 800e95a:	4619      	mov	r1, r3
 800e95c:	6938      	ldr	r0, [r7, #16]
 800e95e:	f7ff febf 	bl	800e6e0 <move_window>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d118      	bne.n	800e99a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e976:	4413      	add	r3, r2
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff fbe7 	bl	800e14c <ld_dword>
 800e97e:	4603      	mov	r3, r0
 800e980:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e984:	617b      	str	r3, [r7, #20]
			break;
 800e986:	e009      	b.n	800e99c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e988:	2301      	movs	r3, #1
 800e98a:	617b      	str	r3, [r7, #20]
 800e98c:	e006      	b.n	800e99c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e98e:	bf00      	nop
 800e990:	e004      	b.n	800e99c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e992:	bf00      	nop
 800e994:	e002      	b.n	800e99c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e996:	bf00      	nop
 800e998:	e000      	b.n	800e99c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e99a:	bf00      	nop
		}
	}

	return val;
 800e99c:	697b      	ldr	r3, [r7, #20]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3718      	adds	r7, #24
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e9a6:	b590      	push	{r4, r7, lr}
 800e9a8:	b089      	sub	sp, #36	; 0x24
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	60f8      	str	r0, [r7, #12]
 800e9ae:	60b9      	str	r1, [r7, #8]
 800e9b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e9b2:	2302      	movs	r3, #2
 800e9b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	f240 80d2 	bls.w	800eb62 <put_fat+0x1bc>
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	68ba      	ldr	r2, [r7, #8]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	f080 80cc 	bcs.w	800eb62 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	2b03      	cmp	r3, #3
 800e9d0:	f000 8096 	beq.w	800eb00 <put_fat+0x15a>
 800e9d4:	2b03      	cmp	r3, #3
 800e9d6:	f300 80cd 	bgt.w	800eb74 <put_fat+0x1ce>
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d002      	beq.n	800e9e4 <put_fat+0x3e>
 800e9de:	2b02      	cmp	r3, #2
 800e9e0:	d06e      	beq.n	800eac0 <put_fat+0x11a>
 800e9e2:	e0c7      	b.n	800eb74 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	61bb      	str	r3, [r7, #24]
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	085b      	lsrs	r3, r3, #1
 800e9ec:	69ba      	ldr	r2, [r7, #24]
 800e9ee:	4413      	add	r3, r2
 800e9f0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	0a5b      	lsrs	r3, r3, #9
 800e9fa:	4413      	add	r3, r2
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7ff fe6e 	bl	800e6e0 <move_window>
 800ea04:	4603      	mov	r3, r0
 800ea06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea08:	7ffb      	ldrb	r3, [r7, #31]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f040 80ab 	bne.w	800eb66 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	1c59      	adds	r1, r3, #1
 800ea1a:	61b9      	str	r1, [r7, #24]
 800ea1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea20:	4413      	add	r3, r2
 800ea22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	f003 0301 	and.w	r3, r3, #1
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d00d      	beq.n	800ea4a <put_fat+0xa4>
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	b25b      	sxtb	r3, r3
 800ea34:	f003 030f 	and.w	r3, r3, #15
 800ea38:	b25a      	sxtb	r2, r3
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	011b      	lsls	r3, r3, #4
 800ea40:	b25b      	sxtb	r3, r3
 800ea42:	4313      	orrs	r3, r2
 800ea44:	b25b      	sxtb	r3, r3
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	e001      	b.n	800ea4e <put_fat+0xa8>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	697a      	ldr	r2, [r7, #20]
 800ea50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2201      	movs	r2, #1
 800ea56:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea5c:	69bb      	ldr	r3, [r7, #24]
 800ea5e:	0a5b      	lsrs	r3, r3, #9
 800ea60:	4413      	add	r3, r2
 800ea62:	4619      	mov	r1, r3
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f7ff fe3b 	bl	800e6e0 <move_window>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea6e:	7ffb      	ldrb	r3, [r7, #31]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d17a      	bne.n	800eb6a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea80:	4413      	add	r3, r2
 800ea82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	f003 0301 	and.w	r3, r3, #1
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d003      	beq.n	800ea96 <put_fat+0xf0>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	091b      	lsrs	r3, r3, #4
 800ea92:	b2db      	uxtb	r3, r3
 800ea94:	e00e      	b.n	800eab4 <put_fat+0x10e>
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	b25b      	sxtb	r3, r3
 800ea9c:	f023 030f 	bic.w	r3, r3, #15
 800eaa0:	b25a      	sxtb	r2, r3
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	0a1b      	lsrs	r3, r3, #8
 800eaa6:	b25b      	sxtb	r3, r3
 800eaa8:	f003 030f 	and.w	r3, r3, #15
 800eaac:	b25b      	sxtb	r3, r3
 800eaae:	4313      	orrs	r3, r2
 800eab0:	b25b      	sxtb	r3, r3
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	697a      	ldr	r2, [r7, #20]
 800eab6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2201      	movs	r2, #1
 800eabc:	70da      	strb	r2, [r3, #3]
			break;
 800eabe:	e059      	b.n	800eb74 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	0a1b      	lsrs	r3, r3, #8
 800eac8:	4413      	add	r3, r2
 800eaca:	4619      	mov	r1, r3
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f7ff fe07 	bl	800e6e0 <move_window>
 800ead2:	4603      	mov	r3, r0
 800ead4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ead6:	7ffb      	ldrb	r3, [r7, #31]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d148      	bne.n	800eb6e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	005b      	lsls	r3, r3, #1
 800eae6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800eaea:	4413      	add	r3, r2
 800eaec:	687a      	ldr	r2, [r7, #4]
 800eaee:	b292      	uxth	r2, r2
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f7ff fb4d 	bl	800e192 <st_word>
			fs->wflag = 1;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2201      	movs	r2, #1
 800eafc:	70da      	strb	r2, [r3, #3]
			break;
 800eafe:	e039      	b.n	800eb74 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	09db      	lsrs	r3, r3, #7
 800eb08:	4413      	add	r3, r2
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	68f8      	ldr	r0, [r7, #12]
 800eb0e:	f7ff fde7 	bl	800e6e0 <move_window>
 800eb12:	4603      	mov	r3, r0
 800eb14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb16:	7ffb      	ldrb	r3, [r7, #31]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d12a      	bne.n	800eb72 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800eb30:	4413      	add	r3, r2
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7ff fb0a 	bl	800e14c <ld_dword>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800eb3e:	4323      	orrs	r3, r4
 800eb40:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	009b      	lsls	r3, r3, #2
 800eb4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800eb50:	4413      	add	r3, r2
 800eb52:	6879      	ldr	r1, [r7, #4]
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7ff fb37 	bl	800e1c8 <st_dword>
			fs->wflag = 1;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	70da      	strb	r2, [r3, #3]
			break;
 800eb60:	e008      	b.n	800eb74 <put_fat+0x1ce>
		}
	}
 800eb62:	bf00      	nop
 800eb64:	e006      	b.n	800eb74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800eb66:	bf00      	nop
 800eb68:	e004      	b.n	800eb74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800eb6a:	bf00      	nop
 800eb6c:	e002      	b.n	800eb74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800eb6e:	bf00      	nop
 800eb70:	e000      	b.n	800eb74 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800eb72:	bf00      	nop
	return res;
 800eb74:	7ffb      	ldrb	r3, [r7, #31]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3724      	adds	r7, #36	; 0x24
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd90      	pop	{r4, r7, pc}

0800eb7e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b088      	sub	sp, #32
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	60f8      	str	r0, [r7, #12]
 800eb86:	60b9      	str	r1, [r7, #8]
 800eb88:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d904      	bls.n	800eba4 <remove_chain+0x26>
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	699b      	ldr	r3, [r3, #24]
 800eb9e:	68ba      	ldr	r2, [r7, #8]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d301      	bcc.n	800eba8 <remove_chain+0x2a>
 800eba4:	2302      	movs	r3, #2
 800eba6:	e04b      	b.n	800ec40 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d00c      	beq.n	800ebc8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ebae:	f04f 32ff 	mov.w	r2, #4294967295
 800ebb2:	6879      	ldr	r1, [r7, #4]
 800ebb4:	69b8      	ldr	r0, [r7, #24]
 800ebb6:	f7ff fef6 	bl	800e9a6 <put_fat>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ebbe:	7ffb      	ldrb	r3, [r7, #31]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d001      	beq.n	800ebc8 <remove_chain+0x4a>
 800ebc4:	7ffb      	ldrb	r3, [r7, #31]
 800ebc6:	e03b      	b.n	800ec40 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ebc8:	68b9      	ldr	r1, [r7, #8]
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	f7ff fe43 	bl	800e856 <get_fat>
 800ebd0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d031      	beq.n	800ec3c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	2b01      	cmp	r3, #1
 800ebdc:	d101      	bne.n	800ebe2 <remove_chain+0x64>
 800ebde:	2302      	movs	r3, #2
 800ebe0:	e02e      	b.n	800ec40 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe8:	d101      	bne.n	800ebee <remove_chain+0x70>
 800ebea:	2301      	movs	r3, #1
 800ebec:	e028      	b.n	800ec40 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ebee:	2200      	movs	r2, #0
 800ebf0:	68b9      	ldr	r1, [r7, #8]
 800ebf2:	69b8      	ldr	r0, [r7, #24]
 800ebf4:	f7ff fed7 	bl	800e9a6 <put_fat>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ebfc:	7ffb      	ldrb	r3, [r7, #31]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d001      	beq.n	800ec06 <remove_chain+0x88>
 800ec02:	7ffb      	ldrb	r3, [r7, #31]
 800ec04:	e01c      	b.n	800ec40 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	695a      	ldr	r2, [r3, #20]
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	699b      	ldr	r3, [r3, #24]
 800ec0e:	3b02      	subs	r3, #2
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d20b      	bcs.n	800ec2c <remove_chain+0xae>
			fs->free_clst++;
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	695b      	ldr	r3, [r3, #20]
 800ec18:	1c5a      	adds	r2, r3, #1
 800ec1a:	69bb      	ldr	r3, [r7, #24]
 800ec1c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ec1e:	69bb      	ldr	r3, [r7, #24]
 800ec20:	791b      	ldrb	r3, [r3, #4]
 800ec22:	f043 0301 	orr.w	r3, r3, #1
 800ec26:	b2da      	uxtb	r2, r3
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	699b      	ldr	r3, [r3, #24]
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d3c6      	bcc.n	800ebc8 <remove_chain+0x4a>
 800ec3a:	e000      	b.n	800ec3e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ec3c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3720      	adds	r7, #32
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b088      	sub	sp, #32
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d10d      	bne.n	800ec7a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	691b      	ldr	r3, [r3, #16]
 800ec62:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ec64:	69bb      	ldr	r3, [r7, #24]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d004      	beq.n	800ec74 <create_chain+0x2c>
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	699b      	ldr	r3, [r3, #24]
 800ec6e:	69ba      	ldr	r2, [r7, #24]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d31b      	bcc.n	800ecac <create_chain+0x64>
 800ec74:	2301      	movs	r3, #1
 800ec76:	61bb      	str	r3, [r7, #24]
 800ec78:	e018      	b.n	800ecac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ec7a:	6839      	ldr	r1, [r7, #0]
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f7ff fdea 	bl	800e856 <get_fat>
 800ec82:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2b01      	cmp	r3, #1
 800ec88:	d801      	bhi.n	800ec8e <create_chain+0x46>
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	e070      	b.n	800ed70 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec94:	d101      	bne.n	800ec9a <create_chain+0x52>
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	e06a      	b.n	800ed70 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	699b      	ldr	r3, [r3, #24]
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d201      	bcs.n	800eca8 <create_chain+0x60>
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	e063      	b.n	800ed70 <create_chain+0x128>
		scl = clst;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	699b      	ldr	r3, [r3, #24]
 800ecba:	69fa      	ldr	r2, [r7, #28]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d307      	bcc.n	800ecd0 <create_chain+0x88>
				ncl = 2;
 800ecc0:	2302      	movs	r3, #2
 800ecc2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ecc4:	69fa      	ldr	r2, [r7, #28]
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d901      	bls.n	800ecd0 <create_chain+0x88>
 800eccc:	2300      	movs	r3, #0
 800ecce:	e04f      	b.n	800ed70 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ecd0:	69f9      	ldr	r1, [r7, #28]
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f7ff fdbf 	bl	800e856 <get_fat>
 800ecd8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d00e      	beq.n	800ecfe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d003      	beq.n	800ecee <create_chain+0xa6>
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecec:	d101      	bne.n	800ecf2 <create_chain+0xaa>
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	e03e      	b.n	800ed70 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ecf2:	69fa      	ldr	r2, [r7, #28]
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d1da      	bne.n	800ecb0 <create_chain+0x68>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	e038      	b.n	800ed70 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ecfe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ed00:	f04f 32ff 	mov.w	r2, #4294967295
 800ed04:	69f9      	ldr	r1, [r7, #28]
 800ed06:	6938      	ldr	r0, [r7, #16]
 800ed08:	f7ff fe4d 	bl	800e9a6 <put_fat>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ed10:	7dfb      	ldrb	r3, [r7, #23]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d109      	bne.n	800ed2a <create_chain+0xe2>
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d006      	beq.n	800ed2a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ed1c:	69fa      	ldr	r2, [r7, #28]
 800ed1e:	6839      	ldr	r1, [r7, #0]
 800ed20:	6938      	ldr	r0, [r7, #16]
 800ed22:	f7ff fe40 	bl	800e9a6 <put_fat>
 800ed26:	4603      	mov	r3, r0
 800ed28:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ed2a:	7dfb      	ldrb	r3, [r7, #23]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d116      	bne.n	800ed5e <create_chain+0x116>
		fs->last_clst = ncl;
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	69fa      	ldr	r2, [r7, #28]
 800ed34:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	695a      	ldr	r2, [r3, #20]
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	699b      	ldr	r3, [r3, #24]
 800ed3e:	3b02      	subs	r3, #2
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d804      	bhi.n	800ed4e <create_chain+0x106>
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	695b      	ldr	r3, [r3, #20]
 800ed48:	1e5a      	subs	r2, r3, #1
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	791b      	ldrb	r3, [r3, #4]
 800ed52:	f043 0301 	orr.w	r3, r3, #1
 800ed56:	b2da      	uxtb	r2, r3
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	711a      	strb	r2, [r3, #4]
 800ed5c:	e007      	b.n	800ed6e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ed5e:	7dfb      	ldrb	r3, [r7, #23]
 800ed60:	2b01      	cmp	r3, #1
 800ed62:	d102      	bne.n	800ed6a <create_chain+0x122>
 800ed64:	f04f 33ff 	mov.w	r3, #4294967295
 800ed68:	e000      	b.n	800ed6c <create_chain+0x124>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ed6e:	69fb      	ldr	r3, [r7, #28]
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3720      	adds	r7, #32
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b087      	sub	sp, #28
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed8c:	3304      	adds	r3, #4
 800ed8e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	0a5b      	lsrs	r3, r3, #9
 800ed94:	68fa      	ldr	r2, [r7, #12]
 800ed96:	8952      	ldrh	r2, [r2, #10]
 800ed98:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed9c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	1d1a      	adds	r2, r3, #4
 800eda2:	613a      	str	r2, [r7, #16]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d101      	bne.n	800edb2 <clmt_clust+0x3a>
 800edae:	2300      	movs	r3, #0
 800edb0:	e010      	b.n	800edd4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800edb2:	697a      	ldr	r2, [r7, #20]
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d307      	bcc.n	800edca <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800edba:	697a      	ldr	r2, [r7, #20]
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	1ad3      	subs	r3, r2, r3
 800edc0:	617b      	str	r3, [r7, #20]
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	3304      	adds	r3, #4
 800edc6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800edc8:	e7e9      	b.n	800ed9e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800edca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	681a      	ldr	r2, [r3, #0]
 800edd0:	697b      	ldr	r3, [r7, #20]
 800edd2:	4413      	add	r3, r2
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	371c      	adds	r7, #28
 800edd8:	46bd      	mov	sp, r7
 800edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edde:	4770      	bx	lr

0800ede0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800edf6:	d204      	bcs.n	800ee02 <dir_sdi+0x22>
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	f003 031f 	and.w	r3, r3, #31
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d001      	beq.n	800ee06 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ee02:	2302      	movs	r3, #2
 800ee04:	e063      	b.n	800eece <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	683a      	ldr	r2, [r7, #0]
 800ee0a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d106      	bne.n	800ee26 <dir_sdi+0x46>
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	2b02      	cmp	r3, #2
 800ee1e:	d902      	bls.n	800ee26 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee24:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d10c      	bne.n	800ee46 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	095b      	lsrs	r3, r3, #5
 800ee30:	693a      	ldr	r2, [r7, #16]
 800ee32:	8912      	ldrh	r2, [r2, #8]
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d301      	bcc.n	800ee3c <dir_sdi+0x5c>
 800ee38:	2302      	movs	r3, #2
 800ee3a:	e048      	b.n	800eece <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ee3c:	693b      	ldr	r3, [r7, #16]
 800ee3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	61da      	str	r2, [r3, #28]
 800ee44:	e029      	b.n	800ee9a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ee46:	693b      	ldr	r3, [r7, #16]
 800ee48:	895b      	ldrh	r3, [r3, #10]
 800ee4a:	025b      	lsls	r3, r3, #9
 800ee4c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ee4e:	e019      	b.n	800ee84 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6979      	ldr	r1, [r7, #20]
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7ff fcfe 	bl	800e856 <get_fat>
 800ee5a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee62:	d101      	bne.n	800ee68 <dir_sdi+0x88>
 800ee64:	2301      	movs	r3, #1
 800ee66:	e032      	b.n	800eece <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d904      	bls.n	800ee78 <dir_sdi+0x98>
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	699b      	ldr	r3, [r3, #24]
 800ee72:	697a      	ldr	r2, [r7, #20]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d301      	bcc.n	800ee7c <dir_sdi+0x9c>
 800ee78:	2302      	movs	r3, #2
 800ee7a:	e028      	b.n	800eece <dir_sdi+0xee>
			ofs -= csz;
 800ee7c:	683a      	ldr	r2, [r7, #0]
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	1ad3      	subs	r3, r2, r3
 800ee82:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ee84:	683a      	ldr	r2, [r7, #0]
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d2e1      	bcs.n	800ee50 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ee8c:	6979      	ldr	r1, [r7, #20]
 800ee8e:	6938      	ldr	r0, [r7, #16]
 800ee90:	f7ff fcc2 	bl	800e818 <clust2sect>
 800ee94:	4602      	mov	r2, r0
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	697a      	ldr	r2, [r7, #20]
 800ee9e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	69db      	ldr	r3, [r3, #28]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d101      	bne.n	800eeac <dir_sdi+0xcc>
 800eea8:	2302      	movs	r3, #2
 800eeaa:	e010      	b.n	800eece <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	69da      	ldr	r2, [r3, #28]
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	0a5b      	lsrs	r3, r3, #9
 800eeb4:	441a      	add	r2, r3
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eec6:	441a      	add	r2, r3
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3718      	adds	r7, #24
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}

0800eed6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800eed6:	b580      	push	{r7, lr}
 800eed8:	b086      	sub	sp, #24
 800eeda:	af00      	add	r7, sp, #0
 800eedc:	6078      	str	r0, [r7, #4]
 800eede:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	695b      	ldr	r3, [r3, #20]
 800eeea:	3320      	adds	r3, #32
 800eeec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	69db      	ldr	r3, [r3, #28]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d003      	beq.n	800eefe <dir_next+0x28>
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eefc:	d301      	bcc.n	800ef02 <dir_next+0x2c>
 800eefe:	2304      	movs	r3, #4
 800ef00:	e0aa      	b.n	800f058 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f040 8098 	bne.w	800f03e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	69db      	ldr	r3, [r3, #28]
 800ef12:	1c5a      	adds	r2, r3, #1
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	699b      	ldr	r3, [r3, #24]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d10b      	bne.n	800ef38 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	095b      	lsrs	r3, r3, #5
 800ef24:	68fa      	ldr	r2, [r7, #12]
 800ef26:	8912      	ldrh	r2, [r2, #8]
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	f0c0 8088 	bcc.w	800f03e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2200      	movs	r2, #0
 800ef32:	61da      	str	r2, [r3, #28]
 800ef34:	2304      	movs	r3, #4
 800ef36:	e08f      	b.n	800f058 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	0a5b      	lsrs	r3, r3, #9
 800ef3c:	68fa      	ldr	r2, [r7, #12]
 800ef3e:	8952      	ldrh	r2, [r2, #10]
 800ef40:	3a01      	subs	r2, #1
 800ef42:	4013      	ands	r3, r2
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d17a      	bne.n	800f03e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ef48:	687a      	ldr	r2, [r7, #4]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	699b      	ldr	r3, [r3, #24]
 800ef4e:	4619      	mov	r1, r3
 800ef50:	4610      	mov	r0, r2
 800ef52:	f7ff fc80 	bl	800e856 <get_fat>
 800ef56:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d801      	bhi.n	800ef62 <dir_next+0x8c>
 800ef5e:	2302      	movs	r3, #2
 800ef60:	e07a      	b.n	800f058 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef68:	d101      	bne.n	800ef6e <dir_next+0x98>
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e074      	b.n	800f058 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	699b      	ldr	r3, [r3, #24]
 800ef72:	697a      	ldr	r2, [r7, #20]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d358      	bcc.n	800f02a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d104      	bne.n	800ef88 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2200      	movs	r2, #0
 800ef82:	61da      	str	r2, [r3, #28]
 800ef84:	2304      	movs	r3, #4
 800ef86:	e067      	b.n	800f058 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ef88:	687a      	ldr	r2, [r7, #4]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	699b      	ldr	r3, [r3, #24]
 800ef8e:	4619      	mov	r1, r3
 800ef90:	4610      	mov	r0, r2
 800ef92:	f7ff fe59 	bl	800ec48 <create_chain>
 800ef96:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d101      	bne.n	800efa2 <dir_next+0xcc>
 800ef9e:	2307      	movs	r3, #7
 800efa0:	e05a      	b.n	800f058 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d101      	bne.n	800efac <dir_next+0xd6>
 800efa8:	2302      	movs	r3, #2
 800efaa:	e055      	b.n	800f058 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efb2:	d101      	bne.n	800efb8 <dir_next+0xe2>
 800efb4:	2301      	movs	r3, #1
 800efb6:	e04f      	b.n	800f058 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800efb8:	68f8      	ldr	r0, [r7, #12]
 800efba:	f7ff fb4d 	bl	800e658 <sync_window>
 800efbe:	4603      	mov	r3, r0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d001      	beq.n	800efc8 <dir_next+0xf2>
 800efc4:	2301      	movs	r3, #1
 800efc6:	e047      	b.n	800f058 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	3334      	adds	r3, #52	; 0x34
 800efcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800efd0:	2100      	movs	r1, #0
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7ff f945 	bl	800e262 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800efd8:	2300      	movs	r3, #0
 800efda:	613b      	str	r3, [r7, #16]
 800efdc:	6979      	ldr	r1, [r7, #20]
 800efde:	68f8      	ldr	r0, [r7, #12]
 800efe0:	f7ff fc1a 	bl	800e818 <clust2sect>
 800efe4:	4602      	mov	r2, r0
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	631a      	str	r2, [r3, #48]	; 0x30
 800efea:	e012      	b.n	800f012 <dir_next+0x13c>
						fs->wflag = 1;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2201      	movs	r2, #1
 800eff0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f7ff fb30 	bl	800e658 <sync_window>
 800eff8:	4603      	mov	r3, r0
 800effa:	2b00      	cmp	r3, #0
 800effc:	d001      	beq.n	800f002 <dir_next+0x12c>
 800effe:	2301      	movs	r3, #1
 800f000:	e02a      	b.n	800f058 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	3301      	adds	r3, #1
 800f006:	613b      	str	r3, [r7, #16]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f00c:	1c5a      	adds	r2, r3, #1
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	631a      	str	r2, [r3, #48]	; 0x30
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	895b      	ldrh	r3, [r3, #10]
 800f016:	461a      	mov	r2, r3
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d3e6      	bcc.n	800efec <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	1ad2      	subs	r2, r2, r3
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	697a      	ldr	r2, [r7, #20]
 800f02e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f030:	6979      	ldr	r1, [r7, #20]
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f7ff fbf0 	bl	800e818 <clust2sect>
 800f038:	4602      	mov	r2, r0
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	68ba      	ldr	r2, [r7, #8]
 800f042:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f050:	441a      	add	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f056:	2300      	movs	r3, #0
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3718      	adds	r7, #24
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f070:	2100      	movs	r1, #0
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f7ff feb4 	bl	800ede0 <dir_sdi>
 800f078:	4603      	mov	r3, r0
 800f07a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f07c:	7dfb      	ldrb	r3, [r7, #23]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d12b      	bne.n	800f0da <dir_alloc+0x7a>
		n = 0;
 800f082:	2300      	movs	r3, #0
 800f084:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	69db      	ldr	r3, [r3, #28]
 800f08a:	4619      	mov	r1, r3
 800f08c:	68f8      	ldr	r0, [r7, #12]
 800f08e:	f7ff fb27 	bl	800e6e0 <move_window>
 800f092:	4603      	mov	r3, r0
 800f094:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f096:	7dfb      	ldrb	r3, [r7, #23]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d11d      	bne.n	800f0d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6a1b      	ldr	r3, [r3, #32]
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	2be5      	cmp	r3, #229	; 0xe5
 800f0a4:	d004      	beq.n	800f0b0 <dir_alloc+0x50>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6a1b      	ldr	r3, [r3, #32]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d107      	bne.n	800f0c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	613b      	str	r3, [r7, #16]
 800f0b6:	693a      	ldr	r2, [r7, #16]
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d102      	bne.n	800f0c4 <dir_alloc+0x64>
 800f0be:	e00c      	b.n	800f0da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f0c4:	2101      	movs	r1, #1
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f7ff ff05 	bl	800eed6 <dir_next>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f0d0:	7dfb      	ldrb	r3, [r7, #23]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d0d7      	beq.n	800f086 <dir_alloc+0x26>
 800f0d6:	e000      	b.n	800f0da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f0d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f0da:	7dfb      	ldrb	r3, [r7, #23]
 800f0dc:	2b04      	cmp	r3, #4
 800f0de:	d101      	bne.n	800f0e4 <dir_alloc+0x84>
 800f0e0:	2307      	movs	r3, #7
 800f0e2:	75fb      	strb	r3, [r7, #23]
	return res;
 800f0e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3718      	adds	r7, #24
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b084      	sub	sp, #16
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	6078      	str	r0, [r7, #4]
 800f0f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	331a      	adds	r3, #26
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7ff f80d 	bl	800e11c <ld_word>
 800f102:	4603      	mov	r3, r0
 800f104:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	2b03      	cmp	r3, #3
 800f10c:	d109      	bne.n	800f122 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	3314      	adds	r3, #20
 800f112:	4618      	mov	r0, r3
 800f114:	f7ff f802 	bl	800e11c <ld_word>
 800f118:	4603      	mov	r3, r0
 800f11a:	041b      	lsls	r3, r3, #16
 800f11c:	68fa      	ldr	r2, [r7, #12]
 800f11e:	4313      	orrs	r3, r2
 800f120:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f122:	68fb      	ldr	r3, [r7, #12]
}
 800f124:	4618      	mov	r0, r3
 800f126:	3710      	adds	r7, #16
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	331a      	adds	r3, #26
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	b292      	uxth	r2, r2
 800f140:	4611      	mov	r1, r2
 800f142:	4618      	mov	r0, r3
 800f144:	f7ff f825 	bl	800e192 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	2b03      	cmp	r3, #3
 800f14e:	d109      	bne.n	800f164 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	f103 0214 	add.w	r2, r3, #20
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	0c1b      	lsrs	r3, r3, #16
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	4619      	mov	r1, r3
 800f15e:	4610      	mov	r0, r2
 800f160:	f7ff f817 	bl	800e192 <st_word>
	}
}
 800f164:	bf00      	nop
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b086      	sub	sp, #24
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f176:	2304      	movs	r3, #4
 800f178:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f180:	e03c      	b.n	800f1fc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	69db      	ldr	r3, [r3, #28]
 800f186:	4619      	mov	r1, r3
 800f188:	6938      	ldr	r0, [r7, #16]
 800f18a:	f7ff faa9 	bl	800e6e0 <move_window>
 800f18e:	4603      	mov	r3, r0
 800f190:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f192:	7dfb      	ldrb	r3, [r7, #23]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d136      	bne.n	800f206 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6a1b      	ldr	r3, [r3, #32]
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d102      	bne.n	800f1ac <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f1a6:	2304      	movs	r3, #4
 800f1a8:	75fb      	strb	r3, [r7, #23]
 800f1aa:	e031      	b.n	800f210 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6a1b      	ldr	r3, [r3, #32]
 800f1b0:	330b      	adds	r3, #11
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1b8:	73bb      	strb	r3, [r7, #14]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	7bba      	ldrb	r2, [r7, #14]
 800f1be:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f1c0:	7bfb      	ldrb	r3, [r7, #15]
 800f1c2:	2be5      	cmp	r3, #229	; 0xe5
 800f1c4:	d011      	beq.n	800f1ea <dir_read+0x7e>
 800f1c6:	7bfb      	ldrb	r3, [r7, #15]
 800f1c8:	2b2e      	cmp	r3, #46	; 0x2e
 800f1ca:	d00e      	beq.n	800f1ea <dir_read+0x7e>
 800f1cc:	7bbb      	ldrb	r3, [r7, #14]
 800f1ce:	2b0f      	cmp	r3, #15
 800f1d0:	d00b      	beq.n	800f1ea <dir_read+0x7e>
 800f1d2:	7bbb      	ldrb	r3, [r7, #14]
 800f1d4:	f023 0320 	bic.w	r3, r3, #32
 800f1d8:	2b08      	cmp	r3, #8
 800f1da:	bf0c      	ite	eq
 800f1dc:	2301      	moveq	r3, #1
 800f1de:	2300      	movne	r3, #0
 800f1e0:	b2db      	uxtb	r3, r3
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d00f      	beq.n	800f20a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f1ea:	2100      	movs	r1, #0
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f7ff fe72 	bl	800eed6 <dir_next>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f1f6:	7dfb      	ldrb	r3, [r7, #23]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d108      	bne.n	800f20e <dir_read+0xa2>
	while (dp->sect) {
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	69db      	ldr	r3, [r3, #28]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1be      	bne.n	800f182 <dir_read+0x16>
 800f204:	e004      	b.n	800f210 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f206:	bf00      	nop
 800f208:	e002      	b.n	800f210 <dir_read+0xa4>
				break;
 800f20a:	bf00      	nop
 800f20c:	e000      	b.n	800f210 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f20e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f210:	7dfb      	ldrb	r3, [r7, #23]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d002      	beq.n	800f21c <dir_read+0xb0>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	61da      	str	r2, [r3, #28]
	return res;
 800f21c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3718      	adds	r7, #24
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b086      	sub	sp, #24
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f234:	2100      	movs	r1, #0
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7ff fdd2 	bl	800ede0 <dir_sdi>
 800f23c:	4603      	mov	r3, r0
 800f23e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f240:	7dfb      	ldrb	r3, [r7, #23]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d001      	beq.n	800f24a <dir_find+0x24>
 800f246:	7dfb      	ldrb	r3, [r7, #23]
 800f248:	e03e      	b.n	800f2c8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	69db      	ldr	r3, [r3, #28]
 800f24e:	4619      	mov	r1, r3
 800f250:	6938      	ldr	r0, [r7, #16]
 800f252:	f7ff fa45 	bl	800e6e0 <move_window>
 800f256:	4603      	mov	r3, r0
 800f258:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f25a:	7dfb      	ldrb	r3, [r7, #23]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d12f      	bne.n	800f2c0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6a1b      	ldr	r3, [r3, #32]
 800f264:	781b      	ldrb	r3, [r3, #0]
 800f266:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f268:	7bfb      	ldrb	r3, [r7, #15]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d102      	bne.n	800f274 <dir_find+0x4e>
 800f26e:	2304      	movs	r3, #4
 800f270:	75fb      	strb	r3, [r7, #23]
 800f272:	e028      	b.n	800f2c6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6a1b      	ldr	r3, [r3, #32]
 800f278:	330b      	adds	r3, #11
 800f27a:	781b      	ldrb	r3, [r3, #0]
 800f27c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f280:	b2da      	uxtb	r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6a1b      	ldr	r3, [r3, #32]
 800f28a:	330b      	adds	r3, #11
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	f003 0308 	and.w	r3, r3, #8
 800f292:	2b00      	cmp	r3, #0
 800f294:	d10a      	bne.n	800f2ac <dir_find+0x86>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a18      	ldr	r0, [r3, #32]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	3324      	adds	r3, #36	; 0x24
 800f29e:	220b      	movs	r2, #11
 800f2a0:	4619      	mov	r1, r3
 800f2a2:	f7fe fff9 	bl	800e298 <mem_cmp>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d00b      	beq.n	800f2c4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f2ac:	2100      	movs	r1, #0
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f7ff fe11 	bl	800eed6 <dir_next>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f2b8:	7dfb      	ldrb	r3, [r7, #23]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d0c5      	beq.n	800f24a <dir_find+0x24>
 800f2be:	e002      	b.n	800f2c6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f2c0:	bf00      	nop
 800f2c2:	e000      	b.n	800f2c6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f2c4:	bf00      	nop

	return res;
 800f2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3718      	adds	r7, #24
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b084      	sub	sp, #16
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f2de:	2101      	movs	r1, #1
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f7ff febd 	bl	800f060 <dir_alloc>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f2ea:	7bfb      	ldrb	r3, [r7, #15]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d11c      	bne.n	800f32a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	69db      	ldr	r3, [r3, #28]
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	68b8      	ldr	r0, [r7, #8]
 800f2f8:	f7ff f9f2 	bl	800e6e0 <move_window>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f300:	7bfb      	ldrb	r3, [r7, #15]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d111      	bne.n	800f32a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6a1b      	ldr	r3, [r3, #32]
 800f30a:	2220      	movs	r2, #32
 800f30c:	2100      	movs	r1, #0
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fe ffa7 	bl	800e262 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	6a18      	ldr	r0, [r3, #32]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	3324      	adds	r3, #36	; 0x24
 800f31c:	220b      	movs	r2, #11
 800f31e:	4619      	mov	r1, r3
 800f320:	f7fe ff7e 	bl	800e220 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	2201      	movs	r2, #1
 800f328:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b086      	sub	sp, #24
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	2200      	movs	r2, #0
 800f342:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	69db      	ldr	r3, [r3, #28]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d04e      	beq.n	800f3ea <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800f34c:	2300      	movs	r3, #0
 800f34e:	613b      	str	r3, [r7, #16]
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800f354:	e021      	b.n	800f39a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6a1a      	ldr	r2, [r3, #32]
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	1c59      	adds	r1, r3, #1
 800f35e:	6179      	str	r1, [r7, #20]
 800f360:	4413      	add	r3, r2
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f366:	7bfb      	ldrb	r3, [r7, #15]
 800f368:	2b20      	cmp	r3, #32
 800f36a:	d100      	bne.n	800f36e <get_fileinfo+0x3a>
 800f36c:	e015      	b.n	800f39a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f36e:	7bfb      	ldrb	r3, [r7, #15]
 800f370:	2b05      	cmp	r3, #5
 800f372:	d101      	bne.n	800f378 <get_fileinfo+0x44>
 800f374:	23e5      	movs	r3, #229	; 0xe5
 800f376:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	2b09      	cmp	r3, #9
 800f37c:	d106      	bne.n	800f38c <get_fileinfo+0x58>
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	1c5a      	adds	r2, r3, #1
 800f382:	613a      	str	r2, [r7, #16]
 800f384:	683a      	ldr	r2, [r7, #0]
 800f386:	4413      	add	r3, r2
 800f388:	222e      	movs	r2, #46	; 0x2e
 800f38a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	1c5a      	adds	r2, r3, #1
 800f390:	613a      	str	r2, [r7, #16]
 800f392:	683a      	ldr	r2, [r7, #0]
 800f394:	4413      	add	r3, r2
 800f396:	7bfa      	ldrb	r2, [r7, #15]
 800f398:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	2b0a      	cmp	r3, #10
 800f39e:	d9da      	bls.n	800f356 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	3309      	adds	r3, #9
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6a1b      	ldr	r3, [r3, #32]
 800f3b0:	7ada      	ldrb	r2, [r3, #11]
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a1b      	ldr	r3, [r3, #32]
 800f3ba:	331c      	adds	r3, #28
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7fe fec5 	bl	800e14c <ld_dword>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6a1b      	ldr	r3, [r3, #32]
 800f3cc:	3316      	adds	r3, #22
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7fe febc 	bl	800e14c <ld_dword>
 800f3d4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	b29a      	uxth	r2, r3
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	80da      	strh	r2, [r3, #6]
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	0c1b      	lsrs	r3, r3, #16
 800f3e2:	b29a      	uxth	r2, r3
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	809a      	strh	r2, [r3, #4]
 800f3e8:	e000      	b.n	800f3ec <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f3ea:	bf00      	nop
}
 800f3ec:	3718      	adds	r7, #24
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
	...

0800f3f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b088      	sub	sp, #32
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
 800f3fc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	60fb      	str	r3, [r7, #12]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	3324      	adds	r3, #36	; 0x24
 800f408:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f40a:	220b      	movs	r2, #11
 800f40c:	2120      	movs	r1, #32
 800f40e:	68b8      	ldr	r0, [r7, #8]
 800f410:	f7fe ff27 	bl	800e262 <mem_set>
	si = i = 0; ni = 8;
 800f414:	2300      	movs	r3, #0
 800f416:	613b      	str	r3, [r7, #16]
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	61fb      	str	r3, [r7, #28]
 800f41c:	2308      	movs	r3, #8
 800f41e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	1c5a      	adds	r2, r3, #1
 800f424:	61fa      	str	r2, [r7, #28]
 800f426:	68fa      	ldr	r2, [r7, #12]
 800f428:	4413      	add	r3, r2
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f42e:	7efb      	ldrb	r3, [r7, #27]
 800f430:	2b20      	cmp	r3, #32
 800f432:	d94e      	bls.n	800f4d2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f434:	7efb      	ldrb	r3, [r7, #27]
 800f436:	2b2f      	cmp	r3, #47	; 0x2f
 800f438:	d006      	beq.n	800f448 <create_name+0x54>
 800f43a:	7efb      	ldrb	r3, [r7, #27]
 800f43c:	2b5c      	cmp	r3, #92	; 0x5c
 800f43e:	d110      	bne.n	800f462 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f440:	e002      	b.n	800f448 <create_name+0x54>
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	3301      	adds	r3, #1
 800f446:	61fb      	str	r3, [r7, #28]
 800f448:	68fa      	ldr	r2, [r7, #12]
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	4413      	add	r3, r2
 800f44e:	781b      	ldrb	r3, [r3, #0]
 800f450:	2b2f      	cmp	r3, #47	; 0x2f
 800f452:	d0f6      	beq.n	800f442 <create_name+0x4e>
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	4413      	add	r3, r2
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	2b5c      	cmp	r3, #92	; 0x5c
 800f45e:	d0f0      	beq.n	800f442 <create_name+0x4e>
			break;
 800f460:	e038      	b.n	800f4d4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f462:	7efb      	ldrb	r3, [r7, #27]
 800f464:	2b2e      	cmp	r3, #46	; 0x2e
 800f466:	d003      	beq.n	800f470 <create_name+0x7c>
 800f468:	693a      	ldr	r2, [r7, #16]
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d30c      	bcc.n	800f48a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	2b0b      	cmp	r3, #11
 800f474:	d002      	beq.n	800f47c <create_name+0x88>
 800f476:	7efb      	ldrb	r3, [r7, #27]
 800f478:	2b2e      	cmp	r3, #46	; 0x2e
 800f47a:	d001      	beq.n	800f480 <create_name+0x8c>
 800f47c:	2306      	movs	r3, #6
 800f47e:	e044      	b.n	800f50a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f480:	2308      	movs	r3, #8
 800f482:	613b      	str	r3, [r7, #16]
 800f484:	230b      	movs	r3, #11
 800f486:	617b      	str	r3, [r7, #20]
			continue;
 800f488:	e022      	b.n	800f4d0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f48a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	da04      	bge.n	800f49c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f492:	7efb      	ldrb	r3, [r7, #27]
 800f494:	3b80      	subs	r3, #128	; 0x80
 800f496:	4a1f      	ldr	r2, [pc, #124]	; (800f514 <create_name+0x120>)
 800f498:	5cd3      	ldrb	r3, [r2, r3]
 800f49a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f49c:	7efb      	ldrb	r3, [r7, #27]
 800f49e:	4619      	mov	r1, r3
 800f4a0:	481d      	ldr	r0, [pc, #116]	; (800f518 <create_name+0x124>)
 800f4a2:	f7fe ff20 	bl	800e2e6 <chk_chr>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d001      	beq.n	800f4b0 <create_name+0xbc>
 800f4ac:	2306      	movs	r3, #6
 800f4ae:	e02c      	b.n	800f50a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f4b0:	7efb      	ldrb	r3, [r7, #27]
 800f4b2:	2b60      	cmp	r3, #96	; 0x60
 800f4b4:	d905      	bls.n	800f4c2 <create_name+0xce>
 800f4b6:	7efb      	ldrb	r3, [r7, #27]
 800f4b8:	2b7a      	cmp	r3, #122	; 0x7a
 800f4ba:	d802      	bhi.n	800f4c2 <create_name+0xce>
 800f4bc:	7efb      	ldrb	r3, [r7, #27]
 800f4be:	3b20      	subs	r3, #32
 800f4c0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f4c2:	693b      	ldr	r3, [r7, #16]
 800f4c4:	1c5a      	adds	r2, r3, #1
 800f4c6:	613a      	str	r2, [r7, #16]
 800f4c8:	68ba      	ldr	r2, [r7, #8]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	7efa      	ldrb	r2, [r7, #27]
 800f4ce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f4d0:	e7a6      	b.n	800f420 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f4d2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f4d4:	68fa      	ldr	r2, [r7, #12]
 800f4d6:	69fb      	ldr	r3, [r7, #28]
 800f4d8:	441a      	add	r2, r3
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d101      	bne.n	800f4e8 <create_name+0xf4>
 800f4e4:	2306      	movs	r3, #6
 800f4e6:	e010      	b.n	800f50a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	2be5      	cmp	r3, #229	; 0xe5
 800f4ee:	d102      	bne.n	800f4f6 <create_name+0x102>
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	2205      	movs	r2, #5
 800f4f4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f4f6:	7efb      	ldrb	r3, [r7, #27]
 800f4f8:	2b20      	cmp	r3, #32
 800f4fa:	d801      	bhi.n	800f500 <create_name+0x10c>
 800f4fc:	2204      	movs	r2, #4
 800f4fe:	e000      	b.n	800f502 <create_name+0x10e>
 800f500:	2200      	movs	r2, #0
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	330b      	adds	r3, #11
 800f506:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f508:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3720      	adds	r7, #32
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
 800f512:	bf00      	nop
 800f514:	0801be14 	.word	0x0801be14
 800f518:	0801bc1c 	.word	0x0801bc1c

0800f51c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b086      	sub	sp, #24
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f530:	e002      	b.n	800f538 <follow_path+0x1c>
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	3301      	adds	r3, #1
 800f536:	603b      	str	r3, [r7, #0]
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	2b2f      	cmp	r3, #47	; 0x2f
 800f53e:	d0f8      	beq.n	800f532 <follow_path+0x16>
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	2b5c      	cmp	r3, #92	; 0x5c
 800f546:	d0f4      	beq.n	800f532 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	2200      	movs	r2, #0
 800f54c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	781b      	ldrb	r3, [r3, #0]
 800f552:	2b1f      	cmp	r3, #31
 800f554:	d80a      	bhi.n	800f56c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2280      	movs	r2, #128	; 0x80
 800f55a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f55e:	2100      	movs	r1, #0
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f7ff fc3d 	bl	800ede0 <dir_sdi>
 800f566:	4603      	mov	r3, r0
 800f568:	75fb      	strb	r3, [r7, #23]
 800f56a:	e043      	b.n	800f5f4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f56c:	463b      	mov	r3, r7
 800f56e:	4619      	mov	r1, r3
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f7ff ff3f 	bl	800f3f4 <create_name>
 800f576:	4603      	mov	r3, r0
 800f578:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f57a:	7dfb      	ldrb	r3, [r7, #23]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d134      	bne.n	800f5ea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f7ff fe50 	bl	800f226 <dir_find>
 800f586:	4603      	mov	r3, r0
 800f588:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f590:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f592:	7dfb      	ldrb	r3, [r7, #23]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d00a      	beq.n	800f5ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f598:	7dfb      	ldrb	r3, [r7, #23]
 800f59a:	2b04      	cmp	r3, #4
 800f59c:	d127      	bne.n	800f5ee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f59e:	7afb      	ldrb	r3, [r7, #11]
 800f5a0:	f003 0304 	and.w	r3, r3, #4
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d122      	bne.n	800f5ee <follow_path+0xd2>
 800f5a8:	2305      	movs	r3, #5
 800f5aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f5ac:	e01f      	b.n	800f5ee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f5ae:	7afb      	ldrb	r3, [r7, #11]
 800f5b0:	f003 0304 	and.w	r3, r3, #4
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d11c      	bne.n	800f5f2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f5b8:	693b      	ldr	r3, [r7, #16]
 800f5ba:	799b      	ldrb	r3, [r3, #6]
 800f5bc:	f003 0310 	and.w	r3, r3, #16
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d102      	bne.n	800f5ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f5c4:	2305      	movs	r3, #5
 800f5c6:	75fb      	strb	r3, [r7, #23]
 800f5c8:	e014      	b.n	800f5f4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	695b      	ldr	r3, [r3, #20]
 800f5d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5d8:	4413      	add	r3, r2
 800f5da:	4619      	mov	r1, r3
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f7ff fd86 	bl	800f0ee <ld_clust>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f5e8:	e7c0      	b.n	800f56c <follow_path+0x50>
			if (res != FR_OK) break;
 800f5ea:	bf00      	nop
 800f5ec:	e002      	b.n	800f5f4 <follow_path+0xd8>
				break;
 800f5ee:	bf00      	nop
 800f5f0:	e000      	b.n	800f5f4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f5f2:	bf00      	nop
			}
		}
	}

	return res;
 800f5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3718      	adds	r7, #24
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}

0800f5fe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f5fe:	b480      	push	{r7}
 800f600:	b087      	sub	sp, #28
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f606:	f04f 33ff 	mov.w	r3, #4294967295
 800f60a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d031      	beq.n	800f678 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	617b      	str	r3, [r7, #20]
 800f61a:	e002      	b.n	800f622 <get_ldnumber+0x24>
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	3301      	adds	r3, #1
 800f620:	617b      	str	r3, [r7, #20]
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	2b20      	cmp	r3, #32
 800f628:	d903      	bls.n	800f632 <get_ldnumber+0x34>
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	2b3a      	cmp	r3, #58	; 0x3a
 800f630:	d1f4      	bne.n	800f61c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	2b3a      	cmp	r3, #58	; 0x3a
 800f638:	d11c      	bne.n	800f674 <get_ldnumber+0x76>
			tp = *path;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	1c5a      	adds	r2, r3, #1
 800f644:	60fa      	str	r2, [r7, #12]
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	3b30      	subs	r3, #48	; 0x30
 800f64a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	2b09      	cmp	r3, #9
 800f650:	d80e      	bhi.n	800f670 <get_ldnumber+0x72>
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	429a      	cmp	r2, r3
 800f658:	d10a      	bne.n	800f670 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d107      	bne.n	800f670 <get_ldnumber+0x72>
					vol = (int)i;
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	3301      	adds	r3, #1
 800f668:	617b      	str	r3, [r7, #20]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	697a      	ldr	r2, [r7, #20]
 800f66e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	e002      	b.n	800f67a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f674:	2300      	movs	r3, #0
 800f676:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f678:	693b      	ldr	r3, [r7, #16]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	371c      	adds	r7, #28
 800f67e:	46bd      	mov	sp, r7
 800f680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f684:	4770      	bx	lr
	...

0800f688 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2200      	movs	r2, #0
 800f696:	70da      	strb	r2, [r3, #3]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f04f 32ff 	mov.w	r2, #4294967295
 800f69e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f6a0:	6839      	ldr	r1, [r7, #0]
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f7ff f81c 	bl	800e6e0 <move_window>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d001      	beq.n	800f6b2 <check_fs+0x2a>
 800f6ae:	2304      	movs	r3, #4
 800f6b0:	e038      	b.n	800f724 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	3334      	adds	r3, #52	; 0x34
 800f6b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7fe fd2e 	bl	800e11c <ld_word>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d001      	beq.n	800f6d0 <check_fs+0x48>
 800f6cc:	2303      	movs	r3, #3
 800f6ce:	e029      	b.n	800f724 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6d6:	2be9      	cmp	r3, #233	; 0xe9
 800f6d8:	d009      	beq.n	800f6ee <check_fs+0x66>
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6e0:	2beb      	cmp	r3, #235	; 0xeb
 800f6e2:	d11e      	bne.n	800f722 <check_fs+0x9a>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f6ea:	2b90      	cmp	r3, #144	; 0x90
 800f6ec:	d119      	bne.n	800f722 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	3334      	adds	r3, #52	; 0x34
 800f6f2:	3336      	adds	r3, #54	; 0x36
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7fe fd29 	bl	800e14c <ld_dword>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f700:	4a0a      	ldr	r2, [pc, #40]	; (800f72c <check_fs+0xa4>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d101      	bne.n	800f70a <check_fs+0x82>
 800f706:	2300      	movs	r3, #0
 800f708:	e00c      	b.n	800f724 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	3334      	adds	r3, #52	; 0x34
 800f70e:	3352      	adds	r3, #82	; 0x52
 800f710:	4618      	mov	r0, r3
 800f712:	f7fe fd1b 	bl	800e14c <ld_dword>
 800f716:	4603      	mov	r3, r0
 800f718:	4a05      	ldr	r2, [pc, #20]	; (800f730 <check_fs+0xa8>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d101      	bne.n	800f722 <check_fs+0x9a>
 800f71e:	2300      	movs	r3, #0
 800f720:	e000      	b.n	800f724 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f722:	2302      	movs	r3, #2
}
 800f724:	4618      	mov	r0, r3
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	00544146 	.word	0x00544146
 800f730:	33544146 	.word	0x33544146

0800f734 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b096      	sub	sp, #88	; 0x58
 800f738:	af00      	add	r7, sp, #0
 800f73a:	60f8      	str	r0, [r7, #12]
 800f73c:	60b9      	str	r1, [r7, #8]
 800f73e:	4613      	mov	r3, r2
 800f740:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	2200      	movs	r2, #0
 800f746:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f748:	68f8      	ldr	r0, [r7, #12]
 800f74a:	f7ff ff58 	bl	800f5fe <get_ldnumber>
 800f74e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f752:	2b00      	cmp	r3, #0
 800f754:	da01      	bge.n	800f75a <find_volume+0x26>
 800f756:	230b      	movs	r3, #11
 800f758:	e236      	b.n	800fbc8 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f75a:	4aac      	ldr	r2, [pc, #688]	; (800fa0c <find_volume+0x2d8>)
 800f75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f75e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f762:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f766:	2b00      	cmp	r3, #0
 800f768:	d101      	bne.n	800f76e <find_volume+0x3a>
 800f76a:	230c      	movs	r3, #12
 800f76c:	e22c      	b.n	800fbc8 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800f76e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f770:	f7fe fdd4 	bl	800e31c <lock_fs>
 800f774:	4603      	mov	r3, r0
 800f776:	2b00      	cmp	r3, #0
 800f778:	d101      	bne.n	800f77e <find_volume+0x4a>
 800f77a:	230f      	movs	r3, #15
 800f77c:	e224      	b.n	800fbc8 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f782:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f784:	79fb      	ldrb	r3, [r7, #7]
 800f786:	f023 0301 	bic.w	r3, r3, #1
 800f78a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d01a      	beq.n	800f7ca <find_volume+0x96>
		stat = disk_status(fs->drv);
 800f794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f796:	785b      	ldrb	r3, [r3, #1]
 800f798:	4618      	mov	r0, r3
 800f79a:	f7fe fc21 	bl	800dfe0 <disk_status>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f7a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7a8:	f003 0301 	and.w	r3, r3, #1
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d10c      	bne.n	800f7ca <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f7b0:	79fb      	ldrb	r3, [r7, #7]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d007      	beq.n	800f7c6 <find_volume+0x92>
 800f7b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7ba:	f003 0304 	and.w	r3, r3, #4
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d001      	beq.n	800f7c6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800f7c2:	230a      	movs	r3, #10
 800f7c4:	e200      	b.n	800fbc8 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	e1fe      	b.n	800fbc8 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d2:	b2da      	uxtb	r2, r3
 800f7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7da:	785b      	ldrb	r3, [r3, #1]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fe fc19 	bl	800e014 <disk_initialize>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f7e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f7ec:	f003 0301 	and.w	r3, r3, #1
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d001      	beq.n	800f7f8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f7f4:	2303      	movs	r3, #3
 800f7f6:	e1e7      	b.n	800fbc8 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f7f8:	79fb      	ldrb	r3, [r7, #7]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d007      	beq.n	800f80e <find_volume+0xda>
 800f7fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f802:	f003 0304 	and.w	r3, r3, #4
 800f806:	2b00      	cmp	r3, #0
 800f808:	d001      	beq.n	800f80e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800f80a:	230a      	movs	r3, #10
 800f80c:	e1dc      	b.n	800fbc8 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f80e:	2300      	movs	r3, #0
 800f810:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f812:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f814:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f816:	f7ff ff37 	bl	800f688 <check_fs>
 800f81a:	4603      	mov	r3, r0
 800f81c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f824:	2b02      	cmp	r3, #2
 800f826:	d14b      	bne.n	800f8c0 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f828:	2300      	movs	r3, #0
 800f82a:	643b      	str	r3, [r7, #64]	; 0x40
 800f82c:	e01f      	b.n	800f86e <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f830:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f836:	011b      	lsls	r3, r3, #4
 800f838:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f83c:	4413      	add	r3, r2
 800f83e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f842:	3304      	adds	r3, #4
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d006      	beq.n	800f858 <find_volume+0x124>
 800f84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f84c:	3308      	adds	r3, #8
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fe fc7c 	bl	800e14c <ld_dword>
 800f854:	4602      	mov	r2, r0
 800f856:	e000      	b.n	800f85a <find_volume+0x126>
 800f858:	2200      	movs	r2, #0
 800f85a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f862:	440b      	add	r3, r1
 800f864:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f86a:	3301      	adds	r3, #1
 800f86c:	643b      	str	r3, [r7, #64]	; 0x40
 800f86e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f870:	2b03      	cmp	r3, #3
 800f872:	d9dc      	bls.n	800f82e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f874:	2300      	movs	r3, #0
 800f876:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d002      	beq.n	800f884 <find_volume+0x150>
 800f87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f880:	3b01      	subs	r3, #1
 800f882:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f88c:	4413      	add	r3, r2
 800f88e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f892:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f896:	2b00      	cmp	r3, #0
 800f898:	d005      	beq.n	800f8a6 <find_volume+0x172>
 800f89a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f89c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f89e:	f7ff fef3 	bl	800f688 <check_fs>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	e000      	b.n	800f8a8 <find_volume+0x174>
 800f8a6:	2303      	movs	r3, #3
 800f8a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f8ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d905      	bls.n	800f8c0 <find_volume+0x18c>
 800f8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	643b      	str	r3, [r7, #64]	; 0x40
 800f8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8bc:	2b03      	cmp	r3, #3
 800f8be:	d9e1      	bls.n	800f884 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f8c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8c4:	2b04      	cmp	r3, #4
 800f8c6:	d101      	bne.n	800f8cc <find_volume+0x198>
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	e17d      	b.n	800fbc8 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f8cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	d901      	bls.n	800f8d8 <find_volume+0x1a4>
 800f8d4:	230d      	movs	r3, #13
 800f8d6:	e177      	b.n	800fbc8 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8da:	3334      	adds	r3, #52	; 0x34
 800f8dc:	330b      	adds	r3, #11
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7fe fc1c 	bl	800e11c <ld_word>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8ea:	d001      	beq.n	800f8f0 <find_volume+0x1bc>
 800f8ec:	230d      	movs	r3, #13
 800f8ee:	e16b      	b.n	800fbc8 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	3334      	adds	r3, #52	; 0x34
 800f8f4:	3316      	adds	r3, #22
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fe fc10 	bl	800e11c <ld_word>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f902:	2b00      	cmp	r3, #0
 800f904:	d106      	bne.n	800f914 <find_volume+0x1e0>
 800f906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f908:	3334      	adds	r3, #52	; 0x34
 800f90a:	3324      	adds	r3, #36	; 0x24
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fe fc1d 	bl	800e14c <ld_dword>
 800f912:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f918:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f922:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	789b      	ldrb	r3, [r3, #2]
 800f928:	2b01      	cmp	r3, #1
 800f92a:	d005      	beq.n	800f938 <find_volume+0x204>
 800f92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92e:	789b      	ldrb	r3, [r3, #2]
 800f930:	2b02      	cmp	r3, #2
 800f932:	d001      	beq.n	800f938 <find_volume+0x204>
 800f934:	230d      	movs	r3, #13
 800f936:	e147      	b.n	800fbc8 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93a:	789b      	ldrb	r3, [r3, #2]
 800f93c:	461a      	mov	r2, r3
 800f93e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f940:	fb02 f303 	mul.w	r3, r2, r3
 800f944:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f94c:	b29a      	uxth	r2, r3
 800f94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f950:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f954:	895b      	ldrh	r3, [r3, #10]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d008      	beq.n	800f96c <find_volume+0x238>
 800f95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f95c:	895b      	ldrh	r3, [r3, #10]
 800f95e:	461a      	mov	r2, r3
 800f960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f962:	895b      	ldrh	r3, [r3, #10]
 800f964:	3b01      	subs	r3, #1
 800f966:	4013      	ands	r3, r2
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d001      	beq.n	800f970 <find_volume+0x23c>
 800f96c:	230d      	movs	r3, #13
 800f96e:	e12b      	b.n	800fbc8 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f972:	3334      	adds	r3, #52	; 0x34
 800f974:	3311      	adds	r3, #17
 800f976:	4618      	mov	r0, r3
 800f978:	f7fe fbd0 	bl	800e11c <ld_word>
 800f97c:	4603      	mov	r3, r0
 800f97e:	461a      	mov	r2, r3
 800f980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f982:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f986:	891b      	ldrh	r3, [r3, #8]
 800f988:	f003 030f 	and.w	r3, r3, #15
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <find_volume+0x262>
 800f992:	230d      	movs	r3, #13
 800f994:	e118      	b.n	800fbc8 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f998:	3334      	adds	r3, #52	; 0x34
 800f99a:	3313      	adds	r3, #19
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7fe fbbd 	bl	800e11c <ld_word>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f9a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d106      	bne.n	800f9ba <find_volume+0x286>
 800f9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ae:	3334      	adds	r3, #52	; 0x34
 800f9b0:	3320      	adds	r3, #32
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7fe fbca 	bl	800e14c <ld_dword>
 800f9b8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9bc:	3334      	adds	r3, #52	; 0x34
 800f9be:	330e      	adds	r3, #14
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7fe fbab 	bl	800e11c <ld_word>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f9ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d101      	bne.n	800f9d4 <find_volume+0x2a0>
 800f9d0:	230d      	movs	r3, #13
 800f9d2:	e0f9      	b.n	800fbc8 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f9d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f9d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9d8:	4413      	add	r3, r2
 800f9da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9dc:	8912      	ldrh	r2, [r2, #8]
 800f9de:	0912      	lsrs	r2, r2, #4
 800f9e0:	b292      	uxth	r2, r2
 800f9e2:	4413      	add	r3, r2
 800f9e4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f9e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d201      	bcs.n	800f9f2 <find_volume+0x2be>
 800f9ee:	230d      	movs	r3, #13
 800f9f0:	e0ea      	b.n	800fbc8 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f9f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f6:	1ad3      	subs	r3, r2, r3
 800f9f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9fa:	8952      	ldrh	r2, [r2, #10]
 800f9fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa00:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fa02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d103      	bne.n	800fa10 <find_volume+0x2dc>
 800fa08:	230d      	movs	r3, #13
 800fa0a:	e0dd      	b.n	800fbc8 <find_volume+0x494>
 800fa0c:	20000728 	.word	0x20000728
		fmt = FS_FAT32;
 800fa10:	2303      	movs	r3, #3
 800fa12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa18:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d802      	bhi.n	800fa26 <find_volume+0x2f2>
 800fa20:	2302      	movs	r3, #2
 800fa22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa28:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d802      	bhi.n	800fa36 <find_volume+0x302>
 800fa30:	2301      	movs	r3, #1
 800fa32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa38:	1c9a      	adds	r2, r3, #2
 800fa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800fa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa42:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fa44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fa46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa48:	441a      	add	r2, r3
 800fa4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa4c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800fa4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa52:	441a      	add	r2, r3
 800fa54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa56:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800fa58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fa5c:	2b03      	cmp	r3, #3
 800fa5e:	d11e      	bne.n	800fa9e <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa62:	3334      	adds	r3, #52	; 0x34
 800fa64:	332a      	adds	r3, #42	; 0x2a
 800fa66:	4618      	mov	r0, r3
 800fa68:	f7fe fb58 	bl	800e11c <ld_word>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d001      	beq.n	800fa76 <find_volume+0x342>
 800fa72:	230d      	movs	r3, #13
 800fa74:	e0a8      	b.n	800fbc8 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fa76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa78:	891b      	ldrh	r3, [r3, #8]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d001      	beq.n	800fa82 <find_volume+0x34e>
 800fa7e:	230d      	movs	r3, #13
 800fa80:	e0a2      	b.n	800fbc8 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa84:	3334      	adds	r3, #52	; 0x34
 800fa86:	332c      	adds	r3, #44	; 0x2c
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fe fb5f 	bl	800e14c <ld_dword>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa92:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa96:	699b      	ldr	r3, [r3, #24]
 800fa98:	009b      	lsls	r3, r3, #2
 800fa9a:	647b      	str	r3, [r7, #68]	; 0x44
 800fa9c:	e01f      	b.n	800fade <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fa9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faa0:	891b      	ldrh	r3, [r3, #8]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d101      	bne.n	800faaa <find_volume+0x376>
 800faa6:	230d      	movs	r3, #13
 800faa8:	e08e      	b.n	800fbc8 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800faaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800faae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fab0:	441a      	add	r2, r3
 800fab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fab6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800faba:	2b02      	cmp	r3, #2
 800fabc:	d103      	bne.n	800fac6 <find_volume+0x392>
 800fabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac0:	699b      	ldr	r3, [r3, #24]
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	e00a      	b.n	800fadc <find_volume+0x3a8>
 800fac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac8:	699a      	ldr	r2, [r3, #24]
 800faca:	4613      	mov	r3, r2
 800facc:	005b      	lsls	r3, r3, #1
 800face:	4413      	add	r3, r2
 800fad0:	085a      	lsrs	r2, r3, #1
 800fad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad4:	699b      	ldr	r3, [r3, #24]
 800fad6:	f003 0301 	and.w	r3, r3, #1
 800fada:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fadc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae0:	69da      	ldr	r2, [r3, #28]
 800fae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fae4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800fae8:	0a5b      	lsrs	r3, r3, #9
 800faea:	429a      	cmp	r2, r3
 800faec:	d201      	bcs.n	800faf2 <find_volume+0x3be>
 800faee:	230d      	movs	r3, #13
 800faf0:	e06a      	b.n	800fbc8 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800faf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf4:	f04f 32ff 	mov.w	r2, #4294967295
 800faf8:	615a      	str	r2, [r3, #20]
 800fafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafc:	695a      	ldr	r2, [r3, #20]
 800fafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb00:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800fb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb04:	2280      	movs	r2, #128	; 0x80
 800fb06:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fb08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fb0c:	2b03      	cmp	r3, #3
 800fb0e:	d149      	bne.n	800fba4 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb12:	3334      	adds	r3, #52	; 0x34
 800fb14:	3330      	adds	r3, #48	; 0x30
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7fe fb00 	bl	800e11c <ld_word>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b01      	cmp	r3, #1
 800fb20:	d140      	bne.n	800fba4 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fb22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb24:	3301      	adds	r3, #1
 800fb26:	4619      	mov	r1, r3
 800fb28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb2a:	f7fe fdd9 	bl	800e6e0 <move_window>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d137      	bne.n	800fba4 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800fb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb36:	2200      	movs	r2, #0
 800fb38:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb3c:	3334      	adds	r3, #52	; 0x34
 800fb3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fe faea 	bl	800e11c <ld_word>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d127      	bne.n	800fba4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb56:	3334      	adds	r3, #52	; 0x34
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f7fe faf7 	bl	800e14c <ld_dword>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	4a1b      	ldr	r2, [pc, #108]	; (800fbd0 <find_volume+0x49c>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d11e      	bne.n	800fba4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb68:	3334      	adds	r3, #52	; 0x34
 800fb6a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7fe faec 	bl	800e14c <ld_dword>
 800fb74:	4603      	mov	r3, r0
 800fb76:	4a17      	ldr	r2, [pc, #92]	; (800fbd4 <find_volume+0x4a0>)
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d113      	bne.n	800fba4 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7e:	3334      	adds	r3, #52	; 0x34
 800fb80:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fb84:	4618      	mov	r0, r3
 800fb86:	f7fe fae1 	bl	800e14c <ld_dword>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb92:	3334      	adds	r3, #52	; 0x34
 800fb94:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7fe fad7 	bl	800e14c <ld_dword>
 800fb9e:	4602      	mov	r2, r0
 800fba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fbaa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fbac:	4b0a      	ldr	r3, [pc, #40]	; (800fbd8 <find_volume+0x4a4>)
 800fbae:	881b      	ldrh	r3, [r3, #0]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	4b08      	ldr	r3, [pc, #32]	; (800fbd8 <find_volume+0x4a4>)
 800fbb6:	801a      	strh	r2, [r3, #0]
 800fbb8:	4b07      	ldr	r3, [pc, #28]	; (800fbd8 <find_volume+0x4a4>)
 800fbba:	881a      	ldrh	r2, [r3, #0]
 800fbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbbe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fbc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbc2:	f7fe fd25 	bl	800e610 <clear_lock>
#endif
	return FR_OK;
 800fbc6:	2300      	movs	r3, #0
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3758      	adds	r7, #88	; 0x58
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}
 800fbd0:	41615252 	.word	0x41615252
 800fbd4:	61417272 	.word	0x61417272
 800fbd8:	2000072c 	.word	0x2000072c

0800fbdc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fbe6:	2309      	movs	r3, #9
 800fbe8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d02e      	beq.n	800fc4e <validate+0x72>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d02a      	beq.n	800fc4e <validate+0x72>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d025      	beq.n	800fc4e <validate+0x72>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	889a      	ldrh	r2, [r3, #4]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	88db      	ldrh	r3, [r3, #6]
 800fc0c:	429a      	cmp	r2, r3
 800fc0e:	d11e      	bne.n	800fc4e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7fe fb81 	bl	800e31c <lock_fs>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d014      	beq.n	800fc4a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	785b      	ldrb	r3, [r3, #1]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fe f9da 	bl	800dfe0 <disk_status>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	f003 0301 	and.w	r3, r3, #1
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d102      	bne.n	800fc3c <validate+0x60>
				res = FR_OK;
 800fc36:	2300      	movs	r3, #0
 800fc38:	73fb      	strb	r3, [r7, #15]
 800fc3a:	e008      	b.n	800fc4e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2100      	movs	r1, #0
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fe fb80 	bl	800e348 <unlock_fs>
 800fc48:	e001      	b.n	800fc4e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800fc4a:	230f      	movs	r3, #15
 800fc4c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fc4e:	7bfb      	ldrb	r3, [r7, #15]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d102      	bne.n	800fc5a <validate+0x7e>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	e000      	b.n	800fc5c <validate+0x80>
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	683a      	ldr	r2, [r7, #0]
 800fc5e:	6013      	str	r3, [r2, #0]
	return res;
 800fc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
	...

0800fc6c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b088      	sub	sp, #32
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	4613      	mov	r3, r2
 800fc78:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fc7e:	f107 0310 	add.w	r3, r7, #16
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7ff fcbb 	bl	800f5fe <get_ldnumber>
 800fc88:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	da01      	bge.n	800fc94 <f_mount+0x28>
 800fc90:	230b      	movs	r3, #11
 800fc92:	e048      	b.n	800fd26 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fc94:	4a26      	ldr	r2, [pc, #152]	; (800fd30 <f_mount+0xc4>)
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc9c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fc9e:	69bb      	ldr	r3, [r7, #24]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d00f      	beq.n	800fcc4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fca4:	69b8      	ldr	r0, [r7, #24]
 800fca6:	f7fe fcb3 	bl	800e610 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f001 f812 	bl	8010cd8 <ff_del_syncobj>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d101      	bne.n	800fcbe <f_mount+0x52>
 800fcba:	2302      	movs	r3, #2
 800fcbc:	e033      	b.n	800fd26 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d00f      	beq.n	800fcea <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2200      	movs	r2, #0
 800fcce:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	b2da      	uxtb	r2, r3
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	330c      	adds	r3, #12
 800fcd8:	4619      	mov	r1, r3
 800fcda:	4610      	mov	r0, r2
 800fcdc:	f000 ffe1 	bl	8010ca2 <ff_cre_syncobj>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d101      	bne.n	800fcea <f_mount+0x7e>
 800fce6:	2302      	movs	r3, #2
 800fce8:	e01d      	b.n	800fd26 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fcea:	68fa      	ldr	r2, [r7, #12]
 800fcec:	4910      	ldr	r1, [pc, #64]	; (800fd30 <f_mount+0xc4>)
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d002      	beq.n	800fd00 <f_mount+0x94>
 800fcfa:	79fb      	ldrb	r3, [r7, #7]
 800fcfc:	2b01      	cmp	r3, #1
 800fcfe:	d001      	beq.n	800fd04 <f_mount+0x98>
 800fd00:	2300      	movs	r3, #0
 800fd02:	e010      	b.n	800fd26 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fd04:	f107 010c 	add.w	r1, r7, #12
 800fd08:	f107 0308 	add.w	r3, r7, #8
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7ff fd10 	bl	800f734 <find_volume>
 800fd14:	4603      	mov	r3, r0
 800fd16:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	7dfa      	ldrb	r2, [r7, #23]
 800fd1c:	4611      	mov	r1, r2
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7fe fb12 	bl	800e348 <unlock_fs>
 800fd24:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3720      	adds	r7, #32
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	20000728 	.word	0x20000728

0800fd34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b098      	sub	sp, #96	; 0x60
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	4613      	mov	r3, r2
 800fd40:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d101      	bne.n	800fd4c <f_open+0x18>
 800fd48:	2309      	movs	r3, #9
 800fd4a:	e1b4      	b.n	80100b6 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fd4c:	79fb      	ldrb	r3, [r7, #7]
 800fd4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd52:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fd54:	79fa      	ldrb	r2, [r7, #7]
 800fd56:	f107 0110 	add.w	r1, r7, #16
 800fd5a:	f107 0308 	add.w	r3, r7, #8
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7ff fce8 	bl	800f734 <find_volume>
 800fd64:	4603      	mov	r3, r0
 800fd66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fd6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	f040 8191 	bne.w	8010096 <f_open+0x362>
		dj.obj.fs = fs;
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fd78:	68ba      	ldr	r2, [r7, #8]
 800fd7a:	f107 0314 	add.w	r3, r7, #20
 800fd7e:	4611      	mov	r1, r2
 800fd80:	4618      	mov	r0, r3
 800fd82:	f7ff fbcb 	bl	800f51c <follow_path>
 800fd86:	4603      	mov	r3, r0
 800fd88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fd8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d11a      	bne.n	800fdca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fd94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fd98:	b25b      	sxtb	r3, r3
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	da03      	bge.n	800fda6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fd9e:	2306      	movs	r3, #6
 800fda0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fda4:	e011      	b.n	800fdca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fda6:	79fb      	ldrb	r3, [r7, #7]
 800fda8:	f023 0301 	bic.w	r3, r3, #1
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	bf14      	ite	ne
 800fdb0:	2301      	movne	r3, #1
 800fdb2:	2300      	moveq	r3, #0
 800fdb4:	b2db      	uxtb	r3, r3
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	f107 0314 	add.w	r3, r7, #20
 800fdbc:	4611      	mov	r1, r2
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7fe fade 	bl	800e380 <chk_lock>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fdca:	79fb      	ldrb	r3, [r7, #7]
 800fdcc:	f003 031c 	and.w	r3, r3, #28
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d07f      	beq.n	800fed4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fdd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d017      	beq.n	800fe0c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fde0:	2b04      	cmp	r3, #4
 800fde2:	d10e      	bne.n	800fe02 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fde4:	f7fe fb28 	bl	800e438 <enq_lock>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d006      	beq.n	800fdfc <f_open+0xc8>
 800fdee:	f107 0314 	add.w	r3, r7, #20
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7ff fa6c 	bl	800f2d0 <dir_register>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	e000      	b.n	800fdfe <f_open+0xca>
 800fdfc:	2312      	movs	r3, #18
 800fdfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fe02:	79fb      	ldrb	r3, [r7, #7]
 800fe04:	f043 0308 	orr.w	r3, r3, #8
 800fe08:	71fb      	strb	r3, [r7, #7]
 800fe0a:	e010      	b.n	800fe2e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fe0c:	7ebb      	ldrb	r3, [r7, #26]
 800fe0e:	f003 0311 	and.w	r3, r3, #17
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d003      	beq.n	800fe1e <f_open+0xea>
					res = FR_DENIED;
 800fe16:	2307      	movs	r3, #7
 800fe18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fe1c:	e007      	b.n	800fe2e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fe1e:	79fb      	ldrb	r3, [r7, #7]
 800fe20:	f003 0304 	and.w	r3, r3, #4
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d002      	beq.n	800fe2e <f_open+0xfa>
 800fe28:	2308      	movs	r3, #8
 800fe2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fe2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d168      	bne.n	800ff08 <f_open+0x1d4>
 800fe36:	79fb      	ldrb	r3, [r7, #7]
 800fe38:	f003 0308 	and.w	r3, r3, #8
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d063      	beq.n	800ff08 <f_open+0x1d4>
				dw = GET_FATTIME();
 800fe40:	f7fd fb8e 	bl	800d560 <get_fattime>
 800fe44:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fe46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe48:	330e      	adds	r3, #14
 800fe4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7fe f9bb 	bl	800e1c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fe52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe54:	3316      	adds	r3, #22
 800fe56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fe f9b5 	bl	800e1c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fe5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe60:	330b      	adds	r3, #11
 800fe62:	2220      	movs	r2, #32
 800fe64:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe6a:	4611      	mov	r1, r2
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7ff f93e 	bl	800f0ee <ld_clust>
 800fe72:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe78:	2200      	movs	r2, #0
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7ff f956 	bl	800f12c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fe80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe82:	331c      	adds	r3, #28
 800fe84:	2100      	movs	r1, #0
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fe f99e 	bl	800e1c8 <st_dword>
					fs->wflag = 1;
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	2201      	movs	r2, #1
 800fe90:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fe92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d037      	beq.n	800ff08 <f_open+0x1d4>
						dw = fs->winsect;
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe9c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fe9e:	f107 0314 	add.w	r3, r7, #20
 800fea2:	2200      	movs	r2, #0
 800fea4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fe fe69 	bl	800eb7e <remove_chain>
 800feac:	4603      	mov	r3, r0
 800feae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800feb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d126      	bne.n	800ff08 <f_open+0x1d4>
							res = move_window(fs, dw);
 800feba:	693b      	ldr	r3, [r7, #16]
 800febc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fe fc0e 	bl	800e6e0 <move_window>
 800fec4:	4603      	mov	r3, r0
 800fec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800feca:	693b      	ldr	r3, [r7, #16]
 800fecc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fece:	3a01      	subs	r2, #1
 800fed0:	611a      	str	r2, [r3, #16]
 800fed2:	e019      	b.n	800ff08 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fed4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d115      	bne.n	800ff08 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fedc:	7ebb      	ldrb	r3, [r7, #26]
 800fede:	f003 0310 	and.w	r3, r3, #16
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d003      	beq.n	800feee <f_open+0x1ba>
					res = FR_NO_FILE;
 800fee6:	2304      	movs	r3, #4
 800fee8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800feec:	e00c      	b.n	800ff08 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800feee:	79fb      	ldrb	r3, [r7, #7]
 800fef0:	f003 0302 	and.w	r3, r3, #2
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d007      	beq.n	800ff08 <f_open+0x1d4>
 800fef8:	7ebb      	ldrb	r3, [r7, #26]
 800fefa:	f003 0301 	and.w	r3, r3, #1
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d002      	beq.n	800ff08 <f_open+0x1d4>
						res = FR_DENIED;
 800ff02:	2307      	movs	r3, #7
 800ff04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ff08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d128      	bne.n	800ff62 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ff10:	79fb      	ldrb	r3, [r7, #7]
 800ff12:	f003 0308 	and.w	r3, r3, #8
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d003      	beq.n	800ff22 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ff1a:	79fb      	ldrb	r3, [r7, #7]
 800ff1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff20:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ff2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ff30:	79fb      	ldrb	r3, [r7, #7]
 800ff32:	f023 0301 	bic.w	r3, r3, #1
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	bf14      	ite	ne
 800ff3a:	2301      	movne	r3, #1
 800ff3c:	2300      	moveq	r3, #0
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	461a      	mov	r2, r3
 800ff42:	f107 0314 	add.w	r3, r7, #20
 800ff46:	4611      	mov	r1, r2
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7fe fa97 	bl	800e47c <inc_lock>
 800ff4e:	4602      	mov	r2, r0
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	691b      	ldr	r3, [r3, #16]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d102      	bne.n	800ff62 <f_open+0x22e>
 800ff5c:	2302      	movs	r3, #2
 800ff5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ff62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	f040 8095 	bne.w	8010096 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff70:	4611      	mov	r1, r2
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7ff f8bb 	bl	800f0ee <ld_clust>
 800ff78:	4602      	mov	r2, r0
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ff7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff80:	331c      	adds	r3, #28
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fe f8e2 	bl	800e14c <ld_dword>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	2200      	movs	r2, #0
 800ff92:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ff94:	693a      	ldr	r2, [r7, #16]
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	88da      	ldrh	r2, [r3, #6]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	79fa      	ldrb	r2, [r7, #7]
 800ffa6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	3330      	adds	r3, #48	; 0x30
 800ffbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffc2:	2100      	movs	r1, #0
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7fe f94c 	bl	800e262 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ffca:	79fb      	ldrb	r3, [r7, #7]
 800ffcc:	f003 0320 	and.w	r3, r3, #32
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d060      	beq.n	8010096 <f_open+0x362>
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	68db      	ldr	r3, [r3, #12]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d05c      	beq.n	8010096 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	68da      	ldr	r2, [r3, #12]
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	895b      	ldrh	r3, [r3, #10]
 800ffe8:	025b      	lsls	r3, r3, #9
 800ffea:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	689b      	ldr	r3, [r3, #8]
 800fff0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	657b      	str	r3, [r7, #84]	; 0x54
 800fff8:	e016      	b.n	8010028 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fe fc29 	bl	800e856 <get_fat>
 8010004:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010008:	2b01      	cmp	r3, #1
 801000a:	d802      	bhi.n	8010012 <f_open+0x2de>
 801000c:	2302      	movs	r3, #2
 801000e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010018:	d102      	bne.n	8010020 <f_open+0x2ec>
 801001a:	2301      	movs	r3, #1
 801001c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010024:	1ad3      	subs	r3, r2, r3
 8010026:	657b      	str	r3, [r7, #84]	; 0x54
 8010028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801002c:	2b00      	cmp	r3, #0
 801002e:	d103      	bne.n	8010038 <f_open+0x304>
 8010030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010034:	429a      	cmp	r2, r3
 8010036:	d8e0      	bhi.n	800fffa <f_open+0x2c6>
				}
				fp->clust = clst;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801003c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801003e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010042:	2b00      	cmp	r3, #0
 8010044:	d127      	bne.n	8010096 <f_open+0x362>
 8010046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801004c:	2b00      	cmp	r3, #0
 801004e:	d022      	beq.n	8010096 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010050:	693b      	ldr	r3, [r7, #16]
 8010052:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010054:	4618      	mov	r0, r3
 8010056:	f7fe fbdf 	bl	800e818 <clust2sect>
 801005a:	6478      	str	r0, [r7, #68]	; 0x44
 801005c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801005e:	2b00      	cmp	r3, #0
 8010060:	d103      	bne.n	801006a <f_open+0x336>
						res = FR_INT_ERR;
 8010062:	2302      	movs	r3, #2
 8010064:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010068:	e015      	b.n	8010096 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801006a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801006c:	0a5a      	lsrs	r2, r3, #9
 801006e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010070:	441a      	add	r2, r3
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	7858      	ldrb	r0, [r3, #1]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6a1a      	ldr	r2, [r3, #32]
 8010084:	2301      	movs	r3, #1
 8010086:	f7fd ffeb 	bl	800e060 <disk_read>
 801008a:	4603      	mov	r3, r0
 801008c:	2b00      	cmp	r3, #0
 801008e:	d002      	beq.n	8010096 <f_open+0x362>
 8010090:	2301      	movs	r3, #1
 8010092:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010096:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801009a:	2b00      	cmp	r3, #0
 801009c:	d002      	beq.n	80100a4 <f_open+0x370>
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2200      	movs	r2, #0
 80100a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80100aa:	4611      	mov	r1, r2
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7fe f94b 	bl	800e348 <unlock_fs>
 80100b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	3760      	adds	r7, #96	; 0x60
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}

080100be <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80100be:	b580      	push	{r7, lr}
 80100c0:	b08c      	sub	sp, #48	; 0x30
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	60f8      	str	r0, [r7, #12]
 80100c6:	60b9      	str	r1, [r7, #8]
 80100c8:	607a      	str	r2, [r7, #4]
 80100ca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	2200      	movs	r2, #0
 80100d4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	f107 0210 	add.w	r2, r7, #16
 80100dc:	4611      	mov	r1, r2
 80100de:	4618      	mov	r0, r3
 80100e0:	f7ff fd7c 	bl	800fbdc <validate>
 80100e4:	4603      	mov	r3, r0
 80100e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80100ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d107      	bne.n	8010102 <f_write+0x44>
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	7d5b      	ldrb	r3, [r3, #21]
 80100f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80100fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d009      	beq.n	8010116 <f_write+0x58>
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010108:	4611      	mov	r1, r2
 801010a:	4618      	mov	r0, r3
 801010c:	f7fe f91c 	bl	800e348 <unlock_fs>
 8010110:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010114:	e173      	b.n	80103fe <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	7d1b      	ldrb	r3, [r3, #20]
 801011a:	f003 0302 	and.w	r3, r3, #2
 801011e:	2b00      	cmp	r3, #0
 8010120:	d106      	bne.n	8010130 <f_write+0x72>
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	2107      	movs	r1, #7
 8010126:	4618      	mov	r0, r3
 8010128:	f7fe f90e 	bl	800e348 <unlock_fs>
 801012c:	2307      	movs	r3, #7
 801012e:	e166      	b.n	80103fe <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	699a      	ldr	r2, [r3, #24]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	441a      	add	r2, r3
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	699b      	ldr	r3, [r3, #24]
 801013c:	429a      	cmp	r2, r3
 801013e:	f080 814b 	bcs.w	80103d8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	699b      	ldr	r3, [r3, #24]
 8010146:	43db      	mvns	r3, r3
 8010148:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801014a:	e145      	b.n	80103d8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	699b      	ldr	r3, [r3, #24]
 8010150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010154:	2b00      	cmp	r3, #0
 8010156:	f040 8101 	bne.w	801035c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	699b      	ldr	r3, [r3, #24]
 801015e:	0a5b      	lsrs	r3, r3, #9
 8010160:	693a      	ldr	r2, [r7, #16]
 8010162:	8952      	ldrh	r2, [r2, #10]
 8010164:	3a01      	subs	r2, #1
 8010166:	4013      	ands	r3, r2
 8010168:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801016a:	69bb      	ldr	r3, [r7, #24]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d14d      	bne.n	801020c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	699b      	ldr	r3, [r3, #24]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d10c      	bne.n	8010192 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	689b      	ldr	r3, [r3, #8]
 801017c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801017e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010180:	2b00      	cmp	r3, #0
 8010182:	d11a      	bne.n	80101ba <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	2100      	movs	r1, #0
 8010188:	4618      	mov	r0, r3
 801018a:	f7fe fd5d 	bl	800ec48 <create_chain>
 801018e:	62b8      	str	r0, [r7, #40]	; 0x28
 8010190:	e013      	b.n	80101ba <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010196:	2b00      	cmp	r3, #0
 8010198:	d007      	beq.n	80101aa <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	699b      	ldr	r3, [r3, #24]
 801019e:	4619      	mov	r1, r3
 80101a0:	68f8      	ldr	r0, [r7, #12]
 80101a2:	f7fe fde9 	bl	800ed78 <clmt_clust>
 80101a6:	62b8      	str	r0, [r7, #40]	; 0x28
 80101a8:	e007      	b.n	80101ba <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80101aa:	68fa      	ldr	r2, [r7, #12]
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	69db      	ldr	r3, [r3, #28]
 80101b0:	4619      	mov	r1, r3
 80101b2:	4610      	mov	r0, r2
 80101b4:	f7fe fd48 	bl	800ec48 <create_chain>
 80101b8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80101ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101bc:	2b00      	cmp	r3, #0
 80101be:	f000 8110 	beq.w	80103e2 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80101c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d109      	bne.n	80101dc <f_write+0x11e>
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2202      	movs	r2, #2
 80101cc:	755a      	strb	r2, [r3, #21]
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	2102      	movs	r1, #2
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7fe f8b8 	bl	800e348 <unlock_fs>
 80101d8:	2302      	movs	r3, #2
 80101da:	e110      	b.n	80103fe <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80101dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e2:	d109      	bne.n	80101f8 <f_write+0x13a>
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2201      	movs	r2, #1
 80101e8:	755a      	strb	r2, [r3, #21]
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	2101      	movs	r1, #1
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7fe f8aa 	bl	800e348 <unlock_fs>
 80101f4:	2301      	movs	r3, #1
 80101f6:	e102      	b.n	80103fe <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101fc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	689b      	ldr	r3, [r3, #8]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d102      	bne.n	801020c <f_write+0x14e>
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801020a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	7d1b      	ldrb	r3, [r3, #20]
 8010210:	b25b      	sxtb	r3, r3
 8010212:	2b00      	cmp	r3, #0
 8010214:	da1d      	bge.n	8010252 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	7858      	ldrb	r0, [r3, #1]
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	6a1a      	ldr	r2, [r3, #32]
 8010224:	2301      	movs	r3, #1
 8010226:	f7fd ff3b 	bl	800e0a0 <disk_write>
 801022a:	4603      	mov	r3, r0
 801022c:	2b00      	cmp	r3, #0
 801022e:	d009      	beq.n	8010244 <f_write+0x186>
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2201      	movs	r2, #1
 8010234:	755a      	strb	r2, [r3, #21]
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	2101      	movs	r1, #1
 801023a:	4618      	mov	r0, r3
 801023c:	f7fe f884 	bl	800e348 <unlock_fs>
 8010240:	2301      	movs	r3, #1
 8010242:	e0dc      	b.n	80103fe <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	7d1b      	ldrb	r3, [r3, #20]
 8010248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801024c:	b2da      	uxtb	r2, r3
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010252:	693a      	ldr	r2, [r7, #16]
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	69db      	ldr	r3, [r3, #28]
 8010258:	4619      	mov	r1, r3
 801025a:	4610      	mov	r0, r2
 801025c:	f7fe fadc 	bl	800e818 <clust2sect>
 8010260:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010262:	697b      	ldr	r3, [r7, #20]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d109      	bne.n	801027c <f_write+0x1be>
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2202      	movs	r2, #2
 801026c:	755a      	strb	r2, [r3, #21]
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	2102      	movs	r1, #2
 8010272:	4618      	mov	r0, r3
 8010274:	f7fe f868 	bl	800e348 <unlock_fs>
 8010278:	2302      	movs	r3, #2
 801027a:	e0c0      	b.n	80103fe <f_write+0x340>
			sect += csect;
 801027c:	697a      	ldr	r2, [r7, #20]
 801027e:	69bb      	ldr	r3, [r7, #24]
 8010280:	4413      	add	r3, r2
 8010282:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	0a5b      	lsrs	r3, r3, #9
 8010288:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801028a:	6a3b      	ldr	r3, [r7, #32]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d041      	beq.n	8010314 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010290:	69ba      	ldr	r2, [r7, #24]
 8010292:	6a3b      	ldr	r3, [r7, #32]
 8010294:	4413      	add	r3, r2
 8010296:	693a      	ldr	r2, [r7, #16]
 8010298:	8952      	ldrh	r2, [r2, #10]
 801029a:	4293      	cmp	r3, r2
 801029c:	d905      	bls.n	80102aa <f_write+0x1ec>
					cc = fs->csize - csect;
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	895b      	ldrh	r3, [r3, #10]
 80102a2:	461a      	mov	r2, r3
 80102a4:	69bb      	ldr	r3, [r7, #24]
 80102a6:	1ad3      	subs	r3, r2, r3
 80102a8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	7858      	ldrb	r0, [r3, #1]
 80102ae:	6a3b      	ldr	r3, [r7, #32]
 80102b0:	697a      	ldr	r2, [r7, #20]
 80102b2:	69f9      	ldr	r1, [r7, #28]
 80102b4:	f7fd fef4 	bl	800e0a0 <disk_write>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d009      	beq.n	80102d2 <f_write+0x214>
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2201      	movs	r2, #1
 80102c2:	755a      	strb	r2, [r3, #21]
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	2101      	movs	r1, #1
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fe f83d 	bl	800e348 <unlock_fs>
 80102ce:	2301      	movs	r3, #1
 80102d0:	e095      	b.n	80103fe <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	6a1a      	ldr	r2, [r3, #32]
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	1ad3      	subs	r3, r2, r3
 80102da:	6a3a      	ldr	r2, [r7, #32]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d915      	bls.n	801030c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6a1a      	ldr	r2, [r3, #32]
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	1ad3      	subs	r3, r2, r3
 80102ee:	025b      	lsls	r3, r3, #9
 80102f0:	69fa      	ldr	r2, [r7, #28]
 80102f2:	4413      	add	r3, r2
 80102f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80102f8:	4619      	mov	r1, r3
 80102fa:	f7fd ff91 	bl	800e220 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	7d1b      	ldrb	r3, [r3, #20]
 8010302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010306:	b2da      	uxtb	r2, r3
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801030c:	6a3b      	ldr	r3, [r7, #32]
 801030e:	025b      	lsls	r3, r3, #9
 8010310:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010312:	e044      	b.n	801039e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	6a1b      	ldr	r3, [r3, #32]
 8010318:	697a      	ldr	r2, [r7, #20]
 801031a:	429a      	cmp	r2, r3
 801031c:	d01b      	beq.n	8010356 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	699a      	ldr	r2, [r3, #24]
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010326:	429a      	cmp	r2, r3
 8010328:	d215      	bcs.n	8010356 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	7858      	ldrb	r0, [r3, #1]
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010334:	2301      	movs	r3, #1
 8010336:	697a      	ldr	r2, [r7, #20]
 8010338:	f7fd fe92 	bl	800e060 <disk_read>
 801033c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801033e:	2b00      	cmp	r3, #0
 8010340:	d009      	beq.n	8010356 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	2201      	movs	r2, #1
 8010346:	755a      	strb	r2, [r3, #21]
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	2101      	movs	r1, #1
 801034c:	4618      	mov	r0, r3
 801034e:	f7fd fffb 	bl	800e348 <unlock_fs>
 8010352:	2301      	movs	r3, #1
 8010354:	e053      	b.n	80103fe <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	697a      	ldr	r2, [r7, #20]
 801035a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	699b      	ldr	r3, [r3, #24]
 8010360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010364:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010368:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801036a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	429a      	cmp	r2, r3
 8010370:	d901      	bls.n	8010376 <f_write+0x2b8>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	699b      	ldr	r3, [r3, #24]
 8010380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010384:	4413      	add	r3, r2
 8010386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010388:	69f9      	ldr	r1, [r7, #28]
 801038a:	4618      	mov	r0, r3
 801038c:	f7fd ff48 	bl	800e220 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	7d1b      	ldrb	r3, [r3, #20]
 8010394:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010398:	b2da      	uxtb	r2, r3
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801039e:	69fa      	ldr	r2, [r7, #28]
 80103a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a2:	4413      	add	r3, r2
 80103a4:	61fb      	str	r3, [r7, #28]
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	699a      	ldr	r2, [r3, #24]
 80103aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ac:	441a      	add	r2, r3
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	619a      	str	r2, [r3, #24]
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	68da      	ldr	r2, [r3, #12]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	699b      	ldr	r3, [r3, #24]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	bf38      	it	cc
 80103be:	461a      	movcc	r2, r3
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	60da      	str	r2, [r3, #12]
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	681a      	ldr	r2, [r3, #0]
 80103c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ca:	441a      	add	r2, r3
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	601a      	str	r2, [r3, #0]
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d4:	1ad3      	subs	r3, r2, r3
 80103d6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f47f aeb6 	bne.w	801014c <f_write+0x8e>
 80103e0:	e000      	b.n	80103e4 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80103e2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	7d1b      	ldrb	r3, [r3, #20]
 80103e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103ec:	b2da      	uxtb	r2, r3
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	2100      	movs	r1, #0
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fd ffa6 	bl	800e348 <unlock_fs>
 80103fc:	2300      	movs	r3, #0
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3730      	adds	r7, #48	; 0x30
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b086      	sub	sp, #24
 801040a:	af00      	add	r7, sp, #0
 801040c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f107 0208 	add.w	r2, r7, #8
 8010414:	4611      	mov	r1, r2
 8010416:	4618      	mov	r0, r3
 8010418:	f7ff fbe0 	bl	800fbdc <validate>
 801041c:	4603      	mov	r3, r0
 801041e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010420:	7dfb      	ldrb	r3, [r7, #23]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d16d      	bne.n	8010502 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	7d1b      	ldrb	r3, [r3, #20]
 801042a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801042e:	2b00      	cmp	r3, #0
 8010430:	d067      	beq.n	8010502 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	7d1b      	ldrb	r3, [r3, #20]
 8010436:	b25b      	sxtb	r3, r3
 8010438:	2b00      	cmp	r3, #0
 801043a:	da1a      	bge.n	8010472 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	7858      	ldrb	r0, [r3, #1]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6a1a      	ldr	r2, [r3, #32]
 801044a:	2301      	movs	r3, #1
 801044c:	f7fd fe28 	bl	800e0a0 <disk_write>
 8010450:	4603      	mov	r3, r0
 8010452:	2b00      	cmp	r3, #0
 8010454:	d006      	beq.n	8010464 <f_sync+0x5e>
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	2101      	movs	r1, #1
 801045a:	4618      	mov	r0, r3
 801045c:	f7fd ff74 	bl	800e348 <unlock_fs>
 8010460:	2301      	movs	r3, #1
 8010462:	e055      	b.n	8010510 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	7d1b      	ldrb	r3, [r3, #20]
 8010468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801046c:	b2da      	uxtb	r2, r3
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010472:	f7fd f875 	bl	800d560 <get_fattime>
 8010476:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010478:	68ba      	ldr	r2, [r7, #8]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801047e:	4619      	mov	r1, r3
 8010480:	4610      	mov	r0, r2
 8010482:	f7fe f92d 	bl	800e6e0 <move_window>
 8010486:	4603      	mov	r3, r0
 8010488:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801048a:	7dfb      	ldrb	r3, [r7, #23]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d138      	bne.n	8010502 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010494:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	330b      	adds	r3, #11
 801049a:	781a      	ldrb	r2, [r3, #0]
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	330b      	adds	r3, #11
 80104a0:	f042 0220 	orr.w	r2, r2, #32
 80104a4:	b2d2      	uxtb	r2, r2
 80104a6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6818      	ldr	r0, [r3, #0]
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	689b      	ldr	r3, [r3, #8]
 80104b0:	461a      	mov	r2, r3
 80104b2:	68f9      	ldr	r1, [r7, #12]
 80104b4:	f7fe fe3a 	bl	800f12c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f103 021c 	add.w	r2, r3, #28
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	68db      	ldr	r3, [r3, #12]
 80104c2:	4619      	mov	r1, r3
 80104c4:	4610      	mov	r0, r2
 80104c6:	f7fd fe7f 	bl	800e1c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	3316      	adds	r3, #22
 80104ce:	6939      	ldr	r1, [r7, #16]
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7fd fe79 	bl	800e1c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	3312      	adds	r3, #18
 80104da:	2100      	movs	r1, #0
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fd fe58 	bl	800e192 <st_word>
					fs->wflag = 1;
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	2201      	movs	r2, #1
 80104e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fe f926 	bl	800e73c <sync_fs>
 80104f0:	4603      	mov	r3, r0
 80104f2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	7d1b      	ldrb	r3, [r3, #20]
 80104f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104fc:	b2da      	uxtb	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	7dfa      	ldrb	r2, [r7, #23]
 8010506:	4611      	mov	r1, r2
 8010508:	4618      	mov	r0, r3
 801050a:	f7fd ff1d 	bl	800e348 <unlock_fs>
 801050e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010510:	4618      	mov	r0, r3
 8010512:	3718      	adds	r7, #24
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b084      	sub	sp, #16
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f7ff ff70 	bl	8010406 <f_sync>
 8010526:	4603      	mov	r3, r0
 8010528:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801052a:	7bfb      	ldrb	r3, [r7, #15]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d11d      	bne.n	801056c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f107 0208 	add.w	r2, r7, #8
 8010536:	4611      	mov	r1, r2
 8010538:	4618      	mov	r0, r3
 801053a:	f7ff fb4f 	bl	800fbdc <validate>
 801053e:	4603      	mov	r3, r0
 8010540:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010542:	7bfb      	ldrb	r3, [r7, #15]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d111      	bne.n	801056c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	691b      	ldr	r3, [r3, #16]
 801054c:	4618      	mov	r0, r3
 801054e:	f7fe f823 	bl	800e598 <dec_lock>
 8010552:	4603      	mov	r3, r0
 8010554:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010556:	7bfb      	ldrb	r3, [r7, #15]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d102      	bne.n	8010562 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2200      	movs	r2, #0
 8010560:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	2100      	movs	r1, #0
 8010566:	4618      	mov	r0, r3
 8010568:	f7fd feee 	bl	800e348 <unlock_fs>
#endif
		}
	}
	return res;
 801056c:	7bfb      	ldrb	r3, [r7, #15]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3710      	adds	r7, #16
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}

08010576 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010576:	b580      	push	{r7, lr}
 8010578:	b090      	sub	sp, #64	; 0x40
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
 801057e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	f107 0208 	add.w	r2, r7, #8
 8010586:	4611      	mov	r1, r2
 8010588:	4618      	mov	r0, r3
 801058a:	f7ff fb27 	bl	800fbdc <validate>
 801058e:	4603      	mov	r3, r0
 8010590:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010594:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010598:	2b00      	cmp	r3, #0
 801059a:	d103      	bne.n	80105a4 <f_lseek+0x2e>
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	7d5b      	ldrb	r3, [r3, #21]
 80105a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80105a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d009      	beq.n	80105c0 <f_lseek+0x4a>
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80105b2:	4611      	mov	r1, r2
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7fd fec7 	bl	800e348 <unlock_fs>
 80105ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80105be:	e229      	b.n	8010a14 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	f000 80ea 	beq.w	801079e <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105d0:	d164      	bne.n	801069c <f_lseek+0x126>
			tbl = fp->cltbl;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105d6:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80105d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105da:	1d1a      	adds	r2, r3, #4
 80105dc:	627a      	str	r2, [r7, #36]	; 0x24
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	617b      	str	r3, [r7, #20]
 80105e2:	2302      	movs	r3, #2
 80105e4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	689b      	ldr	r3, [r3, #8]
 80105ea:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80105ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d044      	beq.n	801067c <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80105f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f4:	613b      	str	r3, [r7, #16]
 80105f6:	2300      	movs	r3, #0
 80105f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fc:	3302      	adds	r3, #2
 80105fe:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010602:	60fb      	str	r3, [r7, #12]
 8010604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010606:	3301      	adds	r3, #1
 8010608:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801060e:	4618      	mov	r0, r3
 8010610:	f7fe f921 	bl	800e856 <get_fat>
 8010614:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010618:	2b01      	cmp	r3, #1
 801061a:	d809      	bhi.n	8010630 <f_lseek+0xba>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2202      	movs	r2, #2
 8010620:	755a      	strb	r2, [r3, #21]
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	2102      	movs	r1, #2
 8010626:	4618      	mov	r0, r3
 8010628:	f7fd fe8e 	bl	800e348 <unlock_fs>
 801062c:	2302      	movs	r3, #2
 801062e:	e1f1      	b.n	8010a14 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010636:	d109      	bne.n	801064c <f_lseek+0xd6>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2201      	movs	r2, #1
 801063c:	755a      	strb	r2, [r3, #21]
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	2101      	movs	r1, #1
 8010642:	4618      	mov	r0, r3
 8010644:	f7fd fe80 	bl	800e348 <unlock_fs>
 8010648:	2301      	movs	r3, #1
 801064a:	e1e3      	b.n	8010a14 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	3301      	adds	r3, #1
 8010650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010652:	429a      	cmp	r2, r3
 8010654:	d0d4      	beq.n	8010600 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	429a      	cmp	r2, r3
 801065c:	d809      	bhi.n	8010672 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 801065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010660:	1d1a      	adds	r2, r3, #4
 8010662:	627a      	str	r2, [r7, #36]	; 0x24
 8010664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010666:	601a      	str	r2, [r3, #0]
 8010668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801066a:	1d1a      	adds	r2, r3, #4
 801066c:	627a      	str	r2, [r7, #36]	; 0x24
 801066e:	693a      	ldr	r2, [r7, #16]
 8010670:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	699b      	ldr	r3, [r3, #24]
 8010676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010678:	429a      	cmp	r2, r3
 801067a:	d3ba      	bcc.n	80105f2 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010682:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	429a      	cmp	r2, r3
 801068a:	d803      	bhi.n	8010694 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 801068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068e:	2200      	movs	r2, #0
 8010690:	601a      	str	r2, [r3, #0]
 8010692:	e1b6      	b.n	8010a02 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010694:	2311      	movs	r3, #17
 8010696:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801069a:	e1b2      	b.n	8010a02 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	68db      	ldr	r3, [r3, #12]
 80106a0:	683a      	ldr	r2, [r7, #0]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d902      	bls.n	80106ac <f_lseek+0x136>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	683a      	ldr	r2, [r7, #0]
 80106b0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	f000 81a4 	beq.w	8010a02 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	3b01      	subs	r3, #1
 80106be:	4619      	mov	r1, r3
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f7fe fb59 	bl	800ed78 <clmt_clust>
 80106c6:	4602      	mov	r2, r0
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80106cc:	68ba      	ldr	r2, [r7, #8]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	69db      	ldr	r3, [r3, #28]
 80106d2:	4619      	mov	r1, r3
 80106d4:	4610      	mov	r0, r2
 80106d6:	f7fe f89f 	bl	800e818 <clust2sect>
 80106da:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80106dc:	69bb      	ldr	r3, [r7, #24]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d109      	bne.n	80106f6 <f_lseek+0x180>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2202      	movs	r2, #2
 80106e6:	755a      	strb	r2, [r3, #21]
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	2102      	movs	r1, #2
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7fd fe2b 	bl	800e348 <unlock_fs>
 80106f2:	2302      	movs	r3, #2
 80106f4:	e18e      	b.n	8010a14 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	3b01      	subs	r3, #1
 80106fa:	0a5b      	lsrs	r3, r3, #9
 80106fc:	68ba      	ldr	r2, [r7, #8]
 80106fe:	8952      	ldrh	r2, [r2, #10]
 8010700:	3a01      	subs	r2, #1
 8010702:	4013      	ands	r3, r2
 8010704:	69ba      	ldr	r2, [r7, #24]
 8010706:	4413      	add	r3, r2
 8010708:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	699b      	ldr	r3, [r3, #24]
 801070e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010712:	2b00      	cmp	r3, #0
 8010714:	f000 8175 	beq.w	8010a02 <f_lseek+0x48c>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6a1b      	ldr	r3, [r3, #32]
 801071c:	69ba      	ldr	r2, [r7, #24]
 801071e:	429a      	cmp	r2, r3
 8010720:	f000 816f 	beq.w	8010a02 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	7d1b      	ldrb	r3, [r3, #20]
 8010728:	b25b      	sxtb	r3, r3
 801072a:	2b00      	cmp	r3, #0
 801072c:	da1d      	bge.n	801076a <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	7858      	ldrb	r0, [r3, #1]
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	6a1a      	ldr	r2, [r3, #32]
 801073c:	2301      	movs	r3, #1
 801073e:	f7fd fcaf 	bl	800e0a0 <disk_write>
 8010742:	4603      	mov	r3, r0
 8010744:	2b00      	cmp	r3, #0
 8010746:	d009      	beq.n	801075c <f_lseek+0x1e6>
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2201      	movs	r2, #1
 801074c:	755a      	strb	r2, [r3, #21]
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	2101      	movs	r1, #1
 8010752:	4618      	mov	r0, r3
 8010754:	f7fd fdf8 	bl	800e348 <unlock_fs>
 8010758:	2301      	movs	r3, #1
 801075a:	e15b      	b.n	8010a14 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	7d1b      	ldrb	r3, [r3, #20]
 8010760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010764:	b2da      	uxtb	r2, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	7858      	ldrb	r0, [r3, #1]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010774:	2301      	movs	r3, #1
 8010776:	69ba      	ldr	r2, [r7, #24]
 8010778:	f7fd fc72 	bl	800e060 <disk_read>
 801077c:	4603      	mov	r3, r0
 801077e:	2b00      	cmp	r3, #0
 8010780:	d009      	beq.n	8010796 <f_lseek+0x220>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	2201      	movs	r2, #1
 8010786:	755a      	strb	r2, [r3, #21]
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	2101      	movs	r1, #1
 801078c:	4618      	mov	r0, r3
 801078e:	f7fd fddb 	bl	800e348 <unlock_fs>
 8010792:	2301      	movs	r3, #1
 8010794:	e13e      	b.n	8010a14 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	69ba      	ldr	r2, [r7, #24]
 801079a:	621a      	str	r2, [r3, #32]
 801079c:	e131      	b.n	8010a02 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	683a      	ldr	r2, [r7, #0]
 80107a4:	429a      	cmp	r2, r3
 80107a6:	d908      	bls.n	80107ba <f_lseek+0x244>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	7d1b      	ldrb	r3, [r3, #20]
 80107ac:	f003 0302 	and.w	r3, r3, #2
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d102      	bne.n	80107ba <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	699b      	ldr	r3, [r3, #24]
 80107be:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80107c0:	2300      	movs	r3, #0
 80107c2:	637b      	str	r3, [r7, #52]	; 0x34
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107c8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	f000 80c0 	beq.w	8010952 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	895b      	ldrh	r3, [r3, #10]
 80107d6:	025b      	lsls	r3, r3, #9
 80107d8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80107da:	6a3b      	ldr	r3, [r7, #32]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d01b      	beq.n	8010818 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	1e5a      	subs	r2, r3, #1
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80107ea:	6a3b      	ldr	r3, [r7, #32]
 80107ec:	1e59      	subs	r1, r3, #1
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d30f      	bcc.n	8010818 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80107f8:	6a3b      	ldr	r3, [r7, #32]
 80107fa:	1e5a      	subs	r2, r3, #1
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	425b      	negs	r3, r3
 8010800:	401a      	ands	r2, r3
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	699b      	ldr	r3, [r3, #24]
 801080a:	683a      	ldr	r2, [r7, #0]
 801080c:	1ad3      	subs	r3, r2, r3
 801080e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	69db      	ldr	r3, [r3, #28]
 8010814:	63bb      	str	r3, [r7, #56]	; 0x38
 8010816:	e02c      	b.n	8010872 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	689b      	ldr	r3, [r3, #8]
 801081c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801081e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010820:	2b00      	cmp	r3, #0
 8010822:	d123      	bne.n	801086c <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2100      	movs	r1, #0
 8010828:	4618      	mov	r0, r3
 801082a:	f7fe fa0d 	bl	800ec48 <create_chain>
 801082e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010832:	2b01      	cmp	r3, #1
 8010834:	d109      	bne.n	801084a <f_lseek+0x2d4>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2202      	movs	r2, #2
 801083a:	755a      	strb	r2, [r3, #21]
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	2102      	movs	r1, #2
 8010840:	4618      	mov	r0, r3
 8010842:	f7fd fd81 	bl	800e348 <unlock_fs>
 8010846:	2302      	movs	r3, #2
 8010848:	e0e4      	b.n	8010a14 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801084a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801084c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010850:	d109      	bne.n	8010866 <f_lseek+0x2f0>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	2201      	movs	r2, #1
 8010856:	755a      	strb	r2, [r3, #21]
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	2101      	movs	r1, #1
 801085c:	4618      	mov	r0, r3
 801085e:	f7fd fd73 	bl	800e348 <unlock_fs>
 8010862:	2301      	movs	r3, #1
 8010864:	e0d6      	b.n	8010a14 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801086a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010870:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010874:	2b00      	cmp	r3, #0
 8010876:	d06c      	beq.n	8010952 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8010878:	e044      	b.n	8010904 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 801087a:	683a      	ldr	r2, [r7, #0]
 801087c:	69fb      	ldr	r3, [r7, #28]
 801087e:	1ad3      	subs	r3, r2, r3
 8010880:	603b      	str	r3, [r7, #0]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	699a      	ldr	r2, [r3, #24]
 8010886:	69fb      	ldr	r3, [r7, #28]
 8010888:	441a      	add	r2, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	7d1b      	ldrb	r3, [r3, #20]
 8010892:	f003 0302 	and.w	r3, r3, #2
 8010896:	2b00      	cmp	r3, #0
 8010898:	d00b      	beq.n	80108b2 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fe f9d2 	bl	800ec48 <create_chain>
 80108a4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80108a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d108      	bne.n	80108be <f_lseek+0x348>
							ofs = 0; break;
 80108ac:	2300      	movs	r3, #0
 80108ae:	603b      	str	r3, [r7, #0]
 80108b0:	e02c      	b.n	801090c <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fd ffcd 	bl	800e856 <get_fat>
 80108bc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80108be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108c4:	d109      	bne.n	80108da <f_lseek+0x364>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2201      	movs	r2, #1
 80108ca:	755a      	strb	r2, [r3, #21]
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	2101      	movs	r1, #1
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7fd fd39 	bl	800e348 <unlock_fs>
 80108d6:	2301      	movs	r3, #1
 80108d8:	e09c      	b.n	8010a14 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80108da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108dc:	2b01      	cmp	r3, #1
 80108de:	d904      	bls.n	80108ea <f_lseek+0x374>
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	699b      	ldr	r3, [r3, #24]
 80108e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d309      	bcc.n	80108fe <f_lseek+0x388>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2202      	movs	r2, #2
 80108ee:	755a      	strb	r2, [r3, #21]
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	2102      	movs	r1, #2
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7fd fd27 	bl	800e348 <unlock_fs>
 80108fa:	2302      	movs	r3, #2
 80108fc:	e08a      	b.n	8010a14 <f_lseek+0x49e>
					fp->clust = clst;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010902:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010904:	683a      	ldr	r2, [r7, #0]
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	429a      	cmp	r2, r3
 801090a:	d8b6      	bhi.n	801087a <f_lseek+0x304>
				}
				fp->fptr += ofs;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	699a      	ldr	r2, [r3, #24]
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	441a      	add	r2, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801091e:	2b00      	cmp	r3, #0
 8010920:	d017      	beq.n	8010952 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010926:	4618      	mov	r0, r3
 8010928:	f7fd ff76 	bl	800e818 <clust2sect>
 801092c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801092e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010930:	2b00      	cmp	r3, #0
 8010932:	d109      	bne.n	8010948 <f_lseek+0x3d2>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2202      	movs	r2, #2
 8010938:	755a      	strb	r2, [r3, #21]
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	2102      	movs	r1, #2
 801093e:	4618      	mov	r0, r3
 8010940:	f7fd fd02 	bl	800e348 <unlock_fs>
 8010944:	2302      	movs	r3, #2
 8010946:	e065      	b.n	8010a14 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	0a5b      	lsrs	r3, r3, #9
 801094c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801094e:	4413      	add	r3, r2
 8010950:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	699a      	ldr	r2, [r3, #24]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	68db      	ldr	r3, [r3, #12]
 801095a:	429a      	cmp	r2, r3
 801095c:	d90a      	bls.n	8010974 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	699a      	ldr	r2, [r3, #24]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	7d1b      	ldrb	r3, [r3, #20]
 801096a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801096e:	b2da      	uxtb	r2, r3
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	699b      	ldr	r3, [r3, #24]
 8010978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801097c:	2b00      	cmp	r3, #0
 801097e:	d040      	beq.n	8010a02 <f_lseek+0x48c>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6a1b      	ldr	r3, [r3, #32]
 8010984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010986:	429a      	cmp	r2, r3
 8010988:	d03b      	beq.n	8010a02 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	7d1b      	ldrb	r3, [r3, #20]
 801098e:	b25b      	sxtb	r3, r3
 8010990:	2b00      	cmp	r3, #0
 8010992:	da1d      	bge.n	80109d0 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	7858      	ldrb	r0, [r3, #1]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6a1a      	ldr	r2, [r3, #32]
 80109a2:	2301      	movs	r3, #1
 80109a4:	f7fd fb7c 	bl	800e0a0 <disk_write>
 80109a8:	4603      	mov	r3, r0
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d009      	beq.n	80109c2 <f_lseek+0x44c>
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2201      	movs	r2, #1
 80109b2:	755a      	strb	r2, [r3, #21]
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	2101      	movs	r1, #1
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7fd fcc5 	bl	800e348 <unlock_fs>
 80109be:	2301      	movs	r3, #1
 80109c0:	e028      	b.n	8010a14 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	7d1b      	ldrb	r3, [r3, #20]
 80109c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109ca:	b2da      	uxtb	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	7858      	ldrb	r0, [r3, #1]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109da:	2301      	movs	r3, #1
 80109dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109de:	f7fd fb3f 	bl	800e060 <disk_read>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d009      	beq.n	80109fc <f_lseek+0x486>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2201      	movs	r2, #1
 80109ec:	755a      	strb	r2, [r3, #21]
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	2101      	movs	r1, #1
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fd fca8 	bl	800e348 <unlock_fs>
 80109f8:	2301      	movs	r3, #1
 80109fa:	e00b      	b.n	8010a14 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a00:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8010a08:	4611      	mov	r1, r2
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7fd fc9c 	bl	800e348 <unlock_fs>
 8010a10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3740      	adds	r7, #64	; 0x40
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b086      	sub	sp, #24
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d101      	bne.n	8010a30 <f_opendir+0x14>
 8010a2c:	2309      	movs	r3, #9
 8010a2e:	e06a      	b.n	8010b06 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010a34:	f107 010c 	add.w	r1, r7, #12
 8010a38:	463b      	mov	r3, r7
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7fe fe79 	bl	800f734 <find_volume>
 8010a42:	4603      	mov	r3, r0
 8010a44:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010a46:	7dfb      	ldrb	r3, [r7, #23]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d14f      	bne.n	8010aec <f_opendir+0xd0>
		obj->fs = fs;
 8010a4c:	68fa      	ldr	r2, [r7, #12]
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	4619      	mov	r1, r3
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f7fe fd60 	bl	800f51c <follow_path>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010a60:	7dfb      	ldrb	r3, [r7, #23]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d13d      	bne.n	8010ae2 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010a6c:	b25b      	sxtb	r3, r3
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	db12      	blt.n	8010a98 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	799b      	ldrb	r3, [r3, #6]
 8010a76:	f003 0310 	and.w	r3, r3, #16
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d00a      	beq.n	8010a94 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010a7e:	68fa      	ldr	r2, [r7, #12]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6a1b      	ldr	r3, [r3, #32]
 8010a84:	4619      	mov	r1, r3
 8010a86:	4610      	mov	r0, r2
 8010a88:	f7fe fb31 	bl	800f0ee <ld_clust>
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	609a      	str	r2, [r3, #8]
 8010a92:	e001      	b.n	8010a98 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010a94:	2305      	movs	r3, #5
 8010a96:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010a98:	7dfb      	ldrb	r3, [r7, #23]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d121      	bne.n	8010ae2 <f_opendir+0xc6>
				obj->id = fs->id;
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	88da      	ldrh	r2, [r3, #6]
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f7fe f999 	bl	800ede0 <dir_sdi>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010ab2:	7dfb      	ldrb	r3, [r7, #23]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d114      	bne.n	8010ae2 <f_opendir+0xc6>
					if (obj->sclust) {
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	689b      	ldr	r3, [r3, #8]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d00d      	beq.n	8010adc <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010ac0:	2100      	movs	r1, #0
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f7fd fcda 	bl	800e47c <inc_lock>
 8010ac8:	4602      	mov	r2, r0
 8010aca:	693b      	ldr	r3, [r7, #16]
 8010acc:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010ace:	693b      	ldr	r3, [r7, #16]
 8010ad0:	691b      	ldr	r3, [r3, #16]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d105      	bne.n	8010ae2 <f_opendir+0xc6>
 8010ad6:	2312      	movs	r3, #18
 8010ad8:	75fb      	strb	r3, [r7, #23]
 8010ada:	e002      	b.n	8010ae2 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010adc:	693b      	ldr	r3, [r7, #16]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010ae2:	7dfb      	ldrb	r3, [r7, #23]
 8010ae4:	2b04      	cmp	r3, #4
 8010ae6:	d101      	bne.n	8010aec <f_opendir+0xd0>
 8010ae8:	2305      	movs	r3, #5
 8010aea:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010aec:	7dfb      	ldrb	r3, [r7, #23]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d002      	beq.n	8010af8 <f_opendir+0xdc>
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	2200      	movs	r2, #0
 8010af6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	7dfa      	ldrb	r2, [r7, #23]
 8010afc:	4611      	mov	r1, r2
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7fd fc22 	bl	800e348 <unlock_fs>
 8010b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3718      	adds	r7, #24
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}

08010b0e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010b0e:	b580      	push	{r7, lr}
 8010b10:	b084      	sub	sp, #16
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f107 0208 	add.w	r2, r7, #8
 8010b1c:	4611      	mov	r1, r2
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7ff f85c 	bl	800fbdc <validate>
 8010b24:	4603      	mov	r3, r0
 8010b26:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010b28:	7bfb      	ldrb	r3, [r7, #15]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d115      	bne.n	8010b5a <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	691b      	ldr	r3, [r3, #16]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d006      	beq.n	8010b44 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	691b      	ldr	r3, [r3, #16]
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fd fd2c 	bl	800e598 <dec_lock>
 8010b40:	4603      	mov	r3, r0
 8010b42:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010b44:	7bfb      	ldrb	r3, [r7, #15]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d102      	bne.n	8010b50 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	2100      	movs	r1, #0
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7fd fbf7 	bl	800e348 <unlock_fs>
#endif
	}
	return res;
 8010b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3710      	adds	r7, #16
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f107 0208 	add.w	r2, r7, #8
 8010b74:	4611      	mov	r1, r2
 8010b76:	4618      	mov	r0, r3
 8010b78:	f7ff f830 	bl	800fbdc <validate>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d126      	bne.n	8010bd4 <f_readdir+0x70>
		if (!fno) {
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d106      	bne.n	8010b9a <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f7fe f926 	bl	800ede0 <dir_sdi>
 8010b94:	4603      	mov	r3, r0
 8010b96:	73fb      	strb	r3, [r7, #15]
 8010b98:	e01c      	b.n	8010bd4 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010b9a:	2100      	movs	r1, #0
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f7fe fae5 	bl	800f16c <dir_read>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010ba6:	7bfb      	ldrb	r3, [r7, #15]
 8010ba8:	2b04      	cmp	r3, #4
 8010baa:	d101      	bne.n	8010bb0 <f_readdir+0x4c>
 8010bac:	2300      	movs	r3, #0
 8010bae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010bb0:	7bfb      	ldrb	r3, [r7, #15]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d10e      	bne.n	8010bd4 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010bb6:	6839      	ldr	r1, [r7, #0]
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f7fe fbbb 	bl	800f334 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010bbe:	2100      	movs	r1, #0
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f7fe f988 	bl	800eed6 <dir_next>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010bca:	7bfb      	ldrb	r3, [r7, #15]
 8010bcc:	2b04      	cmp	r3, #4
 8010bce:	d101      	bne.n	8010bd4 <f_readdir+0x70>
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	7bfa      	ldrb	r2, [r7, #15]
 8010bd8:	4611      	mov	r1, r2
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fd fbb4 	bl	800e348 <unlock_fs>
 8010be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3710      	adds	r7, #16
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
	...

08010bec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010bec:	b480      	push	{r7}
 8010bee:	b087      	sub	sp, #28
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	60f8      	str	r0, [r7, #12]
 8010bf4:	60b9      	str	r1, [r7, #8]
 8010bf6:	4613      	mov	r3, r2
 8010bf8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010c02:	4b1f      	ldr	r3, [pc, #124]	; (8010c80 <FATFS_LinkDriverEx+0x94>)
 8010c04:	7a5b      	ldrb	r3, [r3, #9]
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d131      	bne.n	8010c70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010c0c:	4b1c      	ldr	r3, [pc, #112]	; (8010c80 <FATFS_LinkDriverEx+0x94>)
 8010c0e:	7a5b      	ldrb	r3, [r3, #9]
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	461a      	mov	r2, r3
 8010c14:	4b1a      	ldr	r3, [pc, #104]	; (8010c80 <FATFS_LinkDriverEx+0x94>)
 8010c16:	2100      	movs	r1, #0
 8010c18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010c1a:	4b19      	ldr	r3, [pc, #100]	; (8010c80 <FATFS_LinkDriverEx+0x94>)
 8010c1c:	7a5b      	ldrb	r3, [r3, #9]
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	4a17      	ldr	r2, [pc, #92]	; (8010c80 <FATFS_LinkDriverEx+0x94>)
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	4413      	add	r3, r2
 8010c26:	68fa      	ldr	r2, [r7, #12]
 8010c28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010c2a:	4b15      	ldr	r3, [pc, #84]	; (8010c80 <FATFS_LinkDriverEx+0x94>)
 8010c2c:	7a5b      	ldrb	r3, [r3, #9]
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	461a      	mov	r2, r3
 8010c32:	4b13      	ldr	r3, [pc, #76]	; (8010c80 <FATFS_LinkDriverEx+0x94>)
 8010c34:	4413      	add	r3, r2
 8010c36:	79fa      	ldrb	r2, [r7, #7]
 8010c38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010c3a:	4b11      	ldr	r3, [pc, #68]	; (8010c80 <FATFS_LinkDriverEx+0x94>)
 8010c3c:	7a5b      	ldrb	r3, [r3, #9]
 8010c3e:	b2db      	uxtb	r3, r3
 8010c40:	1c5a      	adds	r2, r3, #1
 8010c42:	b2d1      	uxtb	r1, r2
 8010c44:	4a0e      	ldr	r2, [pc, #56]	; (8010c80 <FATFS_LinkDriverEx+0x94>)
 8010c46:	7251      	strb	r1, [r2, #9]
 8010c48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010c4a:	7dbb      	ldrb	r3, [r7, #22]
 8010c4c:	3330      	adds	r3, #48	; 0x30
 8010c4e:	b2da      	uxtb	r2, r3
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	3301      	adds	r3, #1
 8010c58:	223a      	movs	r2, #58	; 0x3a
 8010c5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	3302      	adds	r3, #2
 8010c60:	222f      	movs	r2, #47	; 0x2f
 8010c62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010c64:	68bb      	ldr	r3, [r7, #8]
 8010c66:	3303      	adds	r3, #3
 8010c68:	2200      	movs	r2, #0
 8010c6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	371c      	adds	r7, #28
 8010c76:	46bd      	mov	sp, r7
 8010c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7c:	4770      	bx	lr
 8010c7e:	bf00      	nop
 8010c80:	20000750 	.word	0x20000750

08010c84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010c8e:	2200      	movs	r2, #0
 8010c90:	6839      	ldr	r1, [r7, #0]
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f7ff ffaa 	bl	8010bec <FATFS_LinkDriverEx>
 8010c98:	4603      	mov	r3, r0
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3708      	adds	r7, #8
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b084      	sub	sp, #16
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	4603      	mov	r3, r0
 8010caa:	6039      	str	r1, [r7, #0]
 8010cac:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8010cae:	2200      	movs	r2, #0
 8010cb0:	2101      	movs	r1, #1
 8010cb2:	2001      	movs	r0, #1
 8010cb4:	f000 fa13 	bl	80110de <osSemaphoreNew>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	bf14      	ite	ne
 8010cc6:	2301      	movne	r3, #1
 8010cc8:	2300      	moveq	r3, #0
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	60fb      	str	r3, [r7, #12]

    return ret;
 8010cce:	68fb      	ldr	r3, [r7, #12]
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3710      	adds	r7, #16
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}

08010cd8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b082      	sub	sp, #8
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f000 fb1b 	bl	801131c <osSemaphoreDelete>
#endif
    return 1;
 8010ce6:	2301      	movs	r3, #1
}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	3708      	adds	r7, #8
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}

08010cf0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b084      	sub	sp, #16
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8010cfc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f000 fa75 	bl	80111f0 <osSemaphoreAcquire>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d101      	bne.n	8010d10 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010d10:	68fb      	ldr	r3, [r7, #12]
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3710      	adds	r7, #16
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}

08010d1a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010d1a:	b580      	push	{r7, lr}
 8010d1c:	b082      	sub	sp, #8
 8010d1e:	af00      	add	r7, sp, #0
 8010d20:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f000 fab6 	bl	8011294 <osSemaphoreRelease>
#endif
}
 8010d28:	bf00      	nop
 8010d2a:	3708      	adds	r7, #8
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <__NVIC_SetPriority>:
{
 8010d30:	b480      	push	{r7}
 8010d32:	b083      	sub	sp, #12
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	4603      	mov	r3, r0
 8010d38:	6039      	str	r1, [r7, #0]
 8010d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	db0a      	blt.n	8010d5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	b2da      	uxtb	r2, r3
 8010d48:	490c      	ldr	r1, [pc, #48]	; (8010d7c <__NVIC_SetPriority+0x4c>)
 8010d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010d4e:	0112      	lsls	r2, r2, #4
 8010d50:	b2d2      	uxtb	r2, r2
 8010d52:	440b      	add	r3, r1
 8010d54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010d58:	e00a      	b.n	8010d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	b2da      	uxtb	r2, r3
 8010d5e:	4908      	ldr	r1, [pc, #32]	; (8010d80 <__NVIC_SetPriority+0x50>)
 8010d60:	79fb      	ldrb	r3, [r7, #7]
 8010d62:	f003 030f 	and.w	r3, r3, #15
 8010d66:	3b04      	subs	r3, #4
 8010d68:	0112      	lsls	r2, r2, #4
 8010d6a:	b2d2      	uxtb	r2, r2
 8010d6c:	440b      	add	r3, r1
 8010d6e:	761a      	strb	r2, [r3, #24]
}
 8010d70:	bf00      	nop
 8010d72:	370c      	adds	r7, #12
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr
 8010d7c:	e000e100 	.word	0xe000e100
 8010d80:	e000ed00 	.word	0xe000ed00

08010d84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010d84:	b580      	push	{r7, lr}
 8010d86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010d88:	4b05      	ldr	r3, [pc, #20]	; (8010da0 <SysTick_Handler+0x1c>)
 8010d8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010d8c:	f002 fba0 	bl	80134d0 <xTaskGetSchedulerState>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b01      	cmp	r3, #1
 8010d94:	d001      	beq.n	8010d9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010d96:	f003 fa87 	bl	80142a8 <xPortSysTickHandler>
  }
}
 8010d9a:	bf00      	nop
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	e000e010 	.word	0xe000e010

08010da4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010da4:	b580      	push	{r7, lr}
 8010da6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010da8:	2100      	movs	r1, #0
 8010daa:	f06f 0004 	mvn.w	r0, #4
 8010dae:	f7ff ffbf 	bl	8010d30 <__NVIC_SetPriority>
#endif
}
 8010db2:	bf00      	nop
 8010db4:	bd80      	pop	{r7, pc}
	...

08010db8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010dbe:	f3ef 8305 	mrs	r3, IPSR
 8010dc2:	603b      	str	r3, [r7, #0]
  return(result);
 8010dc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d003      	beq.n	8010dd2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010dca:	f06f 0305 	mvn.w	r3, #5
 8010dce:	607b      	str	r3, [r7, #4]
 8010dd0:	e00c      	b.n	8010dec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010dd2:	4b0a      	ldr	r3, [pc, #40]	; (8010dfc <osKernelInitialize+0x44>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d105      	bne.n	8010de6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010dda:	4b08      	ldr	r3, [pc, #32]	; (8010dfc <osKernelInitialize+0x44>)
 8010ddc:	2201      	movs	r2, #1
 8010dde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010de0:	2300      	movs	r3, #0
 8010de2:	607b      	str	r3, [r7, #4]
 8010de4:	e002      	b.n	8010dec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010de6:	f04f 33ff 	mov.w	r3, #4294967295
 8010dea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010dec:	687b      	ldr	r3, [r7, #4]
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	370c      	adds	r7, #12
 8010df2:	46bd      	mov	sp, r7
 8010df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop
 8010dfc:	2000075c 	.word	0x2000075c

08010e00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e06:	f3ef 8305 	mrs	r3, IPSR
 8010e0a:	603b      	str	r3, [r7, #0]
  return(result);
 8010e0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d003      	beq.n	8010e1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8010e12:	f06f 0305 	mvn.w	r3, #5
 8010e16:	607b      	str	r3, [r7, #4]
 8010e18:	e010      	b.n	8010e3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010e1a:	4b0b      	ldr	r3, [pc, #44]	; (8010e48 <osKernelStart+0x48>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	2b01      	cmp	r3, #1
 8010e20:	d109      	bne.n	8010e36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010e22:	f7ff ffbf 	bl	8010da4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010e26:	4b08      	ldr	r3, [pc, #32]	; (8010e48 <osKernelStart+0x48>)
 8010e28:	2202      	movs	r2, #2
 8010e2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010e2c:	f001 fee4 	bl	8012bf8 <vTaskStartScheduler>
      stat = osOK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	607b      	str	r3, [r7, #4]
 8010e34:	e002      	b.n	8010e3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010e36:	f04f 33ff 	mov.w	r3, #4294967295
 8010e3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010e3c:	687b      	ldr	r3, [r7, #4]
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3708      	adds	r7, #8
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	bf00      	nop
 8010e48:	2000075c 	.word	0x2000075c

08010e4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b08e      	sub	sp, #56	; 0x38
 8010e50:	af04      	add	r7, sp, #16
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e5c:	f3ef 8305 	mrs	r3, IPSR
 8010e60:	617b      	str	r3, [r7, #20]
  return(result);
 8010e62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d17f      	bne.n	8010f68 <osThreadNew+0x11c>
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d07c      	beq.n	8010f68 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8010e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e72:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010e74:	2318      	movs	r3, #24
 8010e76:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e80:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d045      	beq.n	8010f14 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d002      	beq.n	8010e96 <osThreadNew+0x4a>
        name = attr->name;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	699b      	ldr	r3, [r3, #24]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d002      	beq.n	8010ea4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	699b      	ldr	r3, [r3, #24]
 8010ea2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d008      	beq.n	8010ebc <osThreadNew+0x70>
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	2b38      	cmp	r3, #56	; 0x38
 8010eae:	d805      	bhi.n	8010ebc <osThreadNew+0x70>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	f003 0301 	and.w	r3, r3, #1
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d001      	beq.n	8010ec0 <osThreadNew+0x74>
        return (NULL);
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	e054      	b.n	8010f6a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	695b      	ldr	r3, [r3, #20]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d003      	beq.n	8010ed0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	695b      	ldr	r3, [r3, #20]
 8010ecc:	089b      	lsrs	r3, r3, #2
 8010ece:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	689b      	ldr	r3, [r3, #8]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d00e      	beq.n	8010ef6 <osThreadNew+0xaa>
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	68db      	ldr	r3, [r3, #12]
 8010edc:	2bbb      	cmp	r3, #187	; 0xbb
 8010ede:	d90a      	bls.n	8010ef6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d006      	beq.n	8010ef6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	695b      	ldr	r3, [r3, #20]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d002      	beq.n	8010ef6 <osThreadNew+0xaa>
        mem = 1;
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	61bb      	str	r3, [r7, #24]
 8010ef4:	e010      	b.n	8010f18 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	689b      	ldr	r3, [r3, #8]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d10c      	bne.n	8010f18 <osThreadNew+0xcc>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d108      	bne.n	8010f18 <osThreadNew+0xcc>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	691b      	ldr	r3, [r3, #16]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d104      	bne.n	8010f18 <osThreadNew+0xcc>
          mem = 0;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	61bb      	str	r3, [r7, #24]
 8010f12:	e001      	b.n	8010f18 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8010f14:	2300      	movs	r3, #0
 8010f16:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010f18:	69bb      	ldr	r3, [r7, #24]
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d110      	bne.n	8010f40 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010f22:	687a      	ldr	r2, [r7, #4]
 8010f24:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010f26:	9202      	str	r2, [sp, #8]
 8010f28:	9301      	str	r3, [sp, #4]
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	9300      	str	r3, [sp, #0]
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	6a3a      	ldr	r2, [r7, #32]
 8010f32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f34:	68f8      	ldr	r0, [r7, #12]
 8010f36:	f001 fb0b 	bl	8012550 <xTaskCreateStatic>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	613b      	str	r3, [r7, #16]
 8010f3e:	e013      	b.n	8010f68 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8010f40:	69bb      	ldr	r3, [r7, #24]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d110      	bne.n	8010f68 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010f46:	6a3b      	ldr	r3, [r7, #32]
 8010f48:	b29a      	uxth	r2, r3
 8010f4a:	f107 0310 	add.w	r3, r7, #16
 8010f4e:	9301      	str	r3, [sp, #4]
 8010f50:	69fb      	ldr	r3, [r7, #28]
 8010f52:	9300      	str	r3, [sp, #0]
 8010f54:	68bb      	ldr	r3, [r7, #8]
 8010f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f58:	68f8      	ldr	r0, [r7, #12]
 8010f5a:	f001 fb56 	bl	801260a <xTaskCreate>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	2b01      	cmp	r3, #1
 8010f62:	d001      	beq.n	8010f68 <osThreadNew+0x11c>
            hTask = NULL;
 8010f64:	2300      	movs	r3, #0
 8010f66:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010f68:	693b      	ldr	r3, [r7, #16]
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3728      	adds	r7, #40	; 0x28
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}

08010f72 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8010f72:	b580      	push	{r7, lr}
 8010f74:	b082      	sub	sp, #8
 8010f76:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8010f78:	f002 fa9a 	bl	80134b0 <xTaskGetCurrentTaskHandle>
 8010f7c:	6078      	str	r0, [r7, #4]

  return (id);
 8010f7e:	687b      	ldr	r3, [r7, #4]
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}

08010f88 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b086      	sub	sp, #24
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f94:	f3ef 8305 	mrs	r3, IPSR
 8010f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f9a:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d102      	bne.n	8010fa6 <osThreadGetState+0x1e>
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d103      	bne.n	8010fae <osThreadGetState+0x26>
    state = osThreadError;
 8010fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8010faa:	617b      	str	r3, [r7, #20]
 8010fac:	e022      	b.n	8010ff4 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 8010fae:	6938      	ldr	r0, [r7, #16]
 8010fb0:	f001 fd2c 	bl	8012a0c <eTaskGetState>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b04      	cmp	r3, #4
 8010fb8:	d818      	bhi.n	8010fec <osThreadGetState+0x64>
 8010fba:	a201      	add	r2, pc, #4	; (adr r2, 8010fc0 <osThreadGetState+0x38>)
 8010fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc0:	08010fd5 	.word	0x08010fd5
 8010fc4:	08010fdb 	.word	0x08010fdb
 8010fc8:	08010fe1 	.word	0x08010fe1
 8010fcc:	08010fe1 	.word	0x08010fe1
 8010fd0:	08010fe7 	.word	0x08010fe7
      case eRunning:   state = osThreadRunning;    break;
 8010fd4:	2302      	movs	r3, #2
 8010fd6:	617b      	str	r3, [r7, #20]
 8010fd8:	e00c      	b.n	8010ff4 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 8010fda:	2301      	movs	r3, #1
 8010fdc:	617b      	str	r3, [r7, #20]
 8010fde:	e009      	b.n	8010ff4 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 8010fe0:	2303      	movs	r3, #3
 8010fe2:	617b      	str	r3, [r7, #20]
 8010fe4:	e006      	b.n	8010ff4 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 8010fe6:	2304      	movs	r3, #4
 8010fe8:	617b      	str	r3, [r7, #20]
 8010fea:	e003      	b.n	8010ff4 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 8010fec:	f04f 33ff 	mov.w	r3, #4294967295
 8010ff0:	617b      	str	r3, [r7, #20]
 8010ff2:	bf00      	nop
    }
  }

  return (state);
 8010ff4:	697b      	ldr	r3, [r7, #20]
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3718      	adds	r7, #24
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd80      	pop	{r7, pc}
 8010ffe:	bf00      	nop

08011000 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8011000:	b580      	push	{r7, lr}
 8011002:	b086      	sub	sp, #24
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801100c:	f3ef 8305 	mrs	r3, IPSR
 8011010:	60fb      	str	r3, [r7, #12]
  return(result);
 8011012:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011014:	2b00      	cmp	r3, #0
 8011016:	d003      	beq.n	8011020 <osThreadResume+0x20>
    stat = osErrorISR;
 8011018:	f06f 0305 	mvn.w	r3, #5
 801101c:	617b      	str	r3, [r7, #20]
 801101e:	e00b      	b.n	8011038 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d103      	bne.n	801102e <osThreadResume+0x2e>
    stat = osErrorParameter;
 8011026:	f06f 0303 	mvn.w	r3, #3
 801102a:	617b      	str	r3, [r7, #20]
 801102c:	e004      	b.n	8011038 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 801102e:	2300      	movs	r3, #0
 8011030:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8011032:	6938      	ldr	r0, [r7, #16]
 8011034:	f001 fd82 	bl	8012b3c <vTaskResume>
  }

  return (stat);
 8011038:	697b      	ldr	r3, [r7, #20]
}
 801103a:	4618      	mov	r0, r3
 801103c:	3718      	adds	r7, #24
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8011042:	b580      	push	{r7, lr}
 8011044:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8011046:	2000      	movs	r0, #0
 8011048:	f001 fc3a 	bl	80128c0 <vTaskDelete>
#endif
  for (;;);
 801104c:	e7fe      	b.n	801104c <osThreadExit+0xa>

0801104e <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 801104e:	b580      	push	{r7, lr}
 8011050:	b086      	sub	sp, #24
 8011052:	af00      	add	r7, sp, #0
 8011054:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801105a:	f3ef 8305 	mrs	r3, IPSR
 801105e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011060:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8011062:	2b00      	cmp	r3, #0
 8011064:	d003      	beq.n	801106e <osThreadTerminate+0x20>
    stat = osErrorISR;
 8011066:	f06f 0305 	mvn.w	r3, #5
 801106a:	617b      	str	r3, [r7, #20]
 801106c:	e017      	b.n	801109e <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d103      	bne.n	801107c <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8011074:	f06f 0303 	mvn.w	r3, #3
 8011078:	617b      	str	r3, [r7, #20]
 801107a:	e010      	b.n	801109e <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 801107c:	6938      	ldr	r0, [r7, #16]
 801107e:	f001 fcc5 	bl	8012a0c <eTaskGetState>
 8011082:	4603      	mov	r3, r0
 8011084:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8011086:	7bfb      	ldrb	r3, [r7, #15]
 8011088:	2b04      	cmp	r3, #4
 801108a:	d005      	beq.n	8011098 <osThreadTerminate+0x4a>
      stat = osOK;
 801108c:	2300      	movs	r3, #0
 801108e:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8011090:	6938      	ldr	r0, [r7, #16]
 8011092:	f001 fc15 	bl	80128c0 <vTaskDelete>
 8011096:	e002      	b.n	801109e <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8011098:	f06f 0302 	mvn.w	r3, #2
 801109c:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 801109e:	697b      	ldr	r3, [r7, #20]
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3718      	adds	r7, #24
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110b0:	f3ef 8305 	mrs	r3, IPSR
 80110b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80110b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d003      	beq.n	80110c4 <osDelay+0x1c>
    stat = osErrorISR;
 80110bc:	f06f 0305 	mvn.w	r3, #5
 80110c0:	60fb      	str	r3, [r7, #12]
 80110c2:	e007      	b.n	80110d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80110c4:	2300      	movs	r3, #0
 80110c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d002      	beq.n	80110d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f001 fc68 	bl	80129a4 <vTaskDelay>
    }
  }

  return (stat);
 80110d4:	68fb      	ldr	r3, [r7, #12]
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80110de:	b580      	push	{r7, lr}
 80110e0:	b08a      	sub	sp, #40	; 0x28
 80110e2:	af02      	add	r7, sp, #8
 80110e4:	60f8      	str	r0, [r7, #12]
 80110e6:	60b9      	str	r1, [r7, #8]
 80110e8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80110ea:	2300      	movs	r3, #0
 80110ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110ee:	f3ef 8305 	mrs	r3, IPSR
 80110f2:	613b      	str	r3, [r7, #16]
  return(result);
 80110f4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d175      	bne.n	80111e6 <osSemaphoreNew+0x108>
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d072      	beq.n	80111e6 <osSemaphoreNew+0x108>
 8011100:	68ba      	ldr	r2, [r7, #8]
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	429a      	cmp	r2, r3
 8011106:	d86e      	bhi.n	80111e6 <osSemaphoreNew+0x108>
    mem = -1;
 8011108:	f04f 33ff 	mov.w	r3, #4294967295
 801110c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d015      	beq.n	8011140 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	689b      	ldr	r3, [r3, #8]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d006      	beq.n	801112a <osSemaphoreNew+0x4c>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	68db      	ldr	r3, [r3, #12]
 8011120:	2b4f      	cmp	r3, #79	; 0x4f
 8011122:	d902      	bls.n	801112a <osSemaphoreNew+0x4c>
        mem = 1;
 8011124:	2301      	movs	r3, #1
 8011126:	61bb      	str	r3, [r7, #24]
 8011128:	e00c      	b.n	8011144 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	689b      	ldr	r3, [r3, #8]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d108      	bne.n	8011144 <osSemaphoreNew+0x66>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d104      	bne.n	8011144 <osSemaphoreNew+0x66>
          mem = 0;
 801113a:	2300      	movs	r3, #0
 801113c:	61bb      	str	r3, [r7, #24]
 801113e:	e001      	b.n	8011144 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8011140:	2300      	movs	r3, #0
 8011142:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8011144:	69bb      	ldr	r3, [r7, #24]
 8011146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801114a:	d04c      	beq.n	80111e6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	2b01      	cmp	r3, #1
 8011150:	d128      	bne.n	80111a4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	2b01      	cmp	r3, #1
 8011156:	d10a      	bne.n	801116e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	689b      	ldr	r3, [r3, #8]
 801115c:	2203      	movs	r2, #3
 801115e:	9200      	str	r2, [sp, #0]
 8011160:	2200      	movs	r2, #0
 8011162:	2100      	movs	r1, #0
 8011164:	2001      	movs	r0, #1
 8011166:	f000 fa4d 	bl	8011604 <xQueueGenericCreateStatic>
 801116a:	61f8      	str	r0, [r7, #28]
 801116c:	e005      	b.n	801117a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801116e:	2203      	movs	r2, #3
 8011170:	2100      	movs	r1, #0
 8011172:	2001      	movs	r0, #1
 8011174:	f000 fabe 	bl	80116f4 <xQueueGenericCreate>
 8011178:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d022      	beq.n	80111c6 <osSemaphoreNew+0xe8>
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d01f      	beq.n	80111c6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011186:	2300      	movs	r3, #0
 8011188:	2200      	movs	r2, #0
 801118a:	2100      	movs	r1, #0
 801118c:	69f8      	ldr	r0, [r7, #28]
 801118e:	f000 fb79 	bl	8011884 <xQueueGenericSend>
 8011192:	4603      	mov	r3, r0
 8011194:	2b01      	cmp	r3, #1
 8011196:	d016      	beq.n	80111c6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8011198:	69f8      	ldr	r0, [r7, #28]
 801119a:	f001 f805 	bl	80121a8 <vQueueDelete>
            hSemaphore = NULL;
 801119e:	2300      	movs	r3, #0
 80111a0:	61fb      	str	r3, [r7, #28]
 80111a2:	e010      	b.n	80111c6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80111a4:	69bb      	ldr	r3, [r7, #24]
 80111a6:	2b01      	cmp	r3, #1
 80111a8:	d108      	bne.n	80111bc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	689b      	ldr	r3, [r3, #8]
 80111ae:	461a      	mov	r2, r3
 80111b0:	68b9      	ldr	r1, [r7, #8]
 80111b2:	68f8      	ldr	r0, [r7, #12]
 80111b4:	f000 fafb 	bl	80117ae <xQueueCreateCountingSemaphoreStatic>
 80111b8:	61f8      	str	r0, [r7, #28]
 80111ba:	e004      	b.n	80111c6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80111bc:	68b9      	ldr	r1, [r7, #8]
 80111be:	68f8      	ldr	r0, [r7, #12]
 80111c0:	f000 fb2c 	bl	801181c <xQueueCreateCountingSemaphore>
 80111c4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80111c6:	69fb      	ldr	r3, [r7, #28]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00c      	beq.n	80111e6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d003      	beq.n	80111da <osSemaphoreNew+0xfc>
          name = attr->name;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	617b      	str	r3, [r7, #20]
 80111d8:	e001      	b.n	80111de <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80111da:	2300      	movs	r3, #0
 80111dc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80111de:	6979      	ldr	r1, [r7, #20]
 80111e0:	69f8      	ldr	r0, [r7, #28]
 80111e2:	f001 f92d 	bl	8012440 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80111e6:	69fb      	ldr	r3, [r7, #28]
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3720      	adds	r7, #32
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b086      	sub	sp, #24
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
 80111f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80111fe:	2300      	movs	r3, #0
 8011200:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011202:	693b      	ldr	r3, [r7, #16]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d103      	bne.n	8011210 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011208:	f06f 0303 	mvn.w	r3, #3
 801120c:	617b      	str	r3, [r7, #20]
 801120e:	e039      	b.n	8011284 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011210:	f3ef 8305 	mrs	r3, IPSR
 8011214:	60fb      	str	r3, [r7, #12]
  return(result);
 8011216:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011218:	2b00      	cmp	r3, #0
 801121a:	d022      	beq.n	8011262 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d003      	beq.n	801122a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8011222:	f06f 0303 	mvn.w	r3, #3
 8011226:	617b      	str	r3, [r7, #20]
 8011228:	e02c      	b.n	8011284 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801122a:	2300      	movs	r3, #0
 801122c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801122e:	f107 0308 	add.w	r3, r7, #8
 8011232:	461a      	mov	r2, r3
 8011234:	2100      	movs	r1, #0
 8011236:	6938      	ldr	r0, [r7, #16]
 8011238:	f000 ff36 	bl	80120a8 <xQueueReceiveFromISR>
 801123c:	4603      	mov	r3, r0
 801123e:	2b01      	cmp	r3, #1
 8011240:	d003      	beq.n	801124a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8011242:	f06f 0302 	mvn.w	r3, #2
 8011246:	617b      	str	r3, [r7, #20]
 8011248:	e01c      	b.n	8011284 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d019      	beq.n	8011284 <osSemaphoreAcquire+0x94>
 8011250:	4b0f      	ldr	r3, [pc, #60]	; (8011290 <osSemaphoreAcquire+0xa0>)
 8011252:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011256:	601a      	str	r2, [r3, #0]
 8011258:	f3bf 8f4f 	dsb	sy
 801125c:	f3bf 8f6f 	isb	sy
 8011260:	e010      	b.n	8011284 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011262:	6839      	ldr	r1, [r7, #0]
 8011264:	6938      	ldr	r0, [r7, #16]
 8011266:	f000 fe13 	bl	8011e90 <xQueueSemaphoreTake>
 801126a:	4603      	mov	r3, r0
 801126c:	2b01      	cmp	r3, #1
 801126e:	d009      	beq.n	8011284 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d003      	beq.n	801127e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8011276:	f06f 0301 	mvn.w	r3, #1
 801127a:	617b      	str	r3, [r7, #20]
 801127c:	e002      	b.n	8011284 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801127e:	f06f 0302 	mvn.w	r3, #2
 8011282:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011284:	697b      	ldr	r3, [r7, #20]
}
 8011286:	4618      	mov	r0, r3
 8011288:	3718      	adds	r7, #24
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	e000ed04 	.word	0xe000ed04

08011294 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011294:	b580      	push	{r7, lr}
 8011296:	b086      	sub	sp, #24
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80112a0:	2300      	movs	r3, #0
 80112a2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d103      	bne.n	80112b2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80112aa:	f06f 0303 	mvn.w	r3, #3
 80112ae:	617b      	str	r3, [r7, #20]
 80112b0:	e02c      	b.n	801130c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112b2:	f3ef 8305 	mrs	r3, IPSR
 80112b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80112b8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d01a      	beq.n	80112f4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80112be:	2300      	movs	r3, #0
 80112c0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80112c2:	f107 0308 	add.w	r3, r7, #8
 80112c6:	4619      	mov	r1, r3
 80112c8:	6938      	ldr	r0, [r7, #16]
 80112ca:	f000 fc74 	bl	8011bb6 <xQueueGiveFromISR>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d003      	beq.n	80112dc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80112d4:	f06f 0302 	mvn.w	r3, #2
 80112d8:	617b      	str	r3, [r7, #20]
 80112da:	e017      	b.n	801130c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d014      	beq.n	801130c <osSemaphoreRelease+0x78>
 80112e2:	4b0d      	ldr	r3, [pc, #52]	; (8011318 <osSemaphoreRelease+0x84>)
 80112e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112e8:	601a      	str	r2, [r3, #0]
 80112ea:	f3bf 8f4f 	dsb	sy
 80112ee:	f3bf 8f6f 	isb	sy
 80112f2:	e00b      	b.n	801130c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80112f4:	2300      	movs	r3, #0
 80112f6:	2200      	movs	r2, #0
 80112f8:	2100      	movs	r1, #0
 80112fa:	6938      	ldr	r0, [r7, #16]
 80112fc:	f000 fac2 	bl	8011884 <xQueueGenericSend>
 8011300:	4603      	mov	r3, r0
 8011302:	2b01      	cmp	r3, #1
 8011304:	d002      	beq.n	801130c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8011306:	f06f 0302 	mvn.w	r3, #2
 801130a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801130c:	697b      	ldr	r3, [r7, #20]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3718      	adds	r7, #24
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	e000ed04 	.word	0xe000ed04

0801131c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801131c:	b580      	push	{r7, lr}
 801131e:	b086      	sub	sp, #24
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011328:	f3ef 8305 	mrs	r3, IPSR
 801132c:	60fb      	str	r3, [r7, #12]
  return(result);
 801132e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8011330:	2b00      	cmp	r3, #0
 8011332:	d003      	beq.n	801133c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8011334:	f06f 0305 	mvn.w	r3, #5
 8011338:	617b      	str	r3, [r7, #20]
 801133a:	e00e      	b.n	801135a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d103      	bne.n	801134a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8011342:	f06f 0303 	mvn.w	r3, #3
 8011346:	617b      	str	r3, [r7, #20]
 8011348:	e007      	b.n	801135a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801134a:	6938      	ldr	r0, [r7, #16]
 801134c:	f001 f8a2 	bl	8012494 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011350:	2300      	movs	r3, #0
 8011352:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8011354:	6938      	ldr	r0, [r7, #16]
 8011356:	f000 ff27 	bl	80121a8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801135a:	697b      	ldr	r3, [r7, #20]
}
 801135c:	4618      	mov	r0, r3
 801135e:	3718      	adds	r7, #24
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}

08011364 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011364:	b480      	push	{r7}
 8011366:	b085      	sub	sp, #20
 8011368:	af00      	add	r7, sp, #0
 801136a:	60f8      	str	r0, [r7, #12]
 801136c:	60b9      	str	r1, [r7, #8]
 801136e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	4a07      	ldr	r2, [pc, #28]	; (8011390 <vApplicationGetIdleTaskMemory+0x2c>)
 8011374:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	4a06      	ldr	r2, [pc, #24]	; (8011394 <vApplicationGetIdleTaskMemory+0x30>)
 801137a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011382:	601a      	str	r2, [r3, #0]
}
 8011384:	bf00      	nop
 8011386:	3714      	adds	r7, #20
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr
 8011390:	20000760 	.word	0x20000760
 8011394:	2000081c 	.word	0x2000081c

08011398 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011398:	b480      	push	{r7}
 801139a:	b085      	sub	sp, #20
 801139c:	af00      	add	r7, sp, #0
 801139e:	60f8      	str	r0, [r7, #12]
 80113a0:	60b9      	str	r1, [r7, #8]
 80113a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	4a07      	ldr	r2, [pc, #28]	; (80113c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80113a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	4a06      	ldr	r2, [pc, #24]	; (80113c8 <vApplicationGetTimerTaskMemory+0x30>)
 80113ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80113b6:	601a      	str	r2, [r3, #0]
}
 80113b8:	bf00      	nop
 80113ba:	3714      	adds	r7, #20
 80113bc:	46bd      	mov	sp, r7
 80113be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c2:	4770      	bx	lr
 80113c4:	20000c1c 	.word	0x20000c1c
 80113c8:	20000cd8 	.word	0x20000cd8

080113cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80113cc:	b480      	push	{r7}
 80113ce:	b083      	sub	sp, #12
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f103 0208 	add.w	r2, r3, #8
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f04f 32ff 	mov.w	r2, #4294967295
 80113e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f103 0208 	add.w	r2, r3, #8
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f103 0208 	add.w	r2, r3, #8
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2200      	movs	r2, #0
 80113fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011400:	bf00      	nop
 8011402:	370c      	adds	r7, #12
 8011404:	46bd      	mov	sp, r7
 8011406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140a:	4770      	bx	lr

0801140c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801140c:	b480      	push	{r7}
 801140e:	b083      	sub	sp, #12
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2200      	movs	r2, #0
 8011418:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801141a:	bf00      	nop
 801141c:	370c      	adds	r7, #12
 801141e:	46bd      	mov	sp, r7
 8011420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011424:	4770      	bx	lr

08011426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011426:	b480      	push	{r7}
 8011428:	b085      	sub	sp, #20
 801142a:	af00      	add	r7, sp, #0
 801142c:	6078      	str	r0, [r7, #4]
 801142e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	68fa      	ldr	r2, [r7, #12]
 801143a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	689a      	ldr	r2, [r3, #8]
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	689b      	ldr	r3, [r3, #8]
 8011448:	683a      	ldr	r2, [r7, #0]
 801144a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	683a      	ldr	r2, [r7, #0]
 8011450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	687a      	ldr	r2, [r7, #4]
 8011456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	1c5a      	adds	r2, r3, #1
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	601a      	str	r2, [r3, #0]
}
 8011462:	bf00      	nop
 8011464:	3714      	adds	r7, #20
 8011466:	46bd      	mov	sp, r7
 8011468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146c:	4770      	bx	lr

0801146e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801146e:	b480      	push	{r7}
 8011470:	b085      	sub	sp, #20
 8011472:	af00      	add	r7, sp, #0
 8011474:	6078      	str	r0, [r7, #4]
 8011476:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011484:	d103      	bne.n	801148e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	691b      	ldr	r3, [r3, #16]
 801148a:	60fb      	str	r3, [r7, #12]
 801148c:	e00c      	b.n	80114a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	3308      	adds	r3, #8
 8011492:	60fb      	str	r3, [r7, #12]
 8011494:	e002      	b.n	801149c <vListInsert+0x2e>
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	60fb      	str	r3, [r7, #12]
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	68ba      	ldr	r2, [r7, #8]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d2f6      	bcs.n	8011496 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	685a      	ldr	r2, [r3, #4]
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80114b0:	683b      	ldr	r3, [r7, #0]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	683a      	ldr	r2, [r7, #0]
 80114b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	68fa      	ldr	r2, [r7, #12]
 80114bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	683a      	ldr	r2, [r7, #0]
 80114c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	687a      	ldr	r2, [r7, #4]
 80114c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	1c5a      	adds	r2, r3, #1
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	601a      	str	r2, [r3, #0]
}
 80114d4:	bf00      	nop
 80114d6:	3714      	adds	r7, #20
 80114d8:	46bd      	mov	sp, r7
 80114da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114de:	4770      	bx	lr

080114e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80114e0:	b480      	push	{r7}
 80114e2:	b085      	sub	sp, #20
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	691b      	ldr	r3, [r3, #16]
 80114ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	6892      	ldr	r2, [r2, #8]
 80114f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	689b      	ldr	r3, [r3, #8]
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	6852      	ldr	r2, [r2, #4]
 8011500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	429a      	cmp	r2, r3
 801150a:	d103      	bne.n	8011514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	689a      	ldr	r2, [r3, #8]
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2200      	movs	r2, #0
 8011518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	1e5a      	subs	r2, r3, #1
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	681b      	ldr	r3, [r3, #0]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3714      	adds	r7, #20
 801152c:	46bd      	mov	sp, r7
 801152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011532:	4770      	bx	lr

08011534 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
 801153c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d10a      	bne.n	801155e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801154c:	f383 8811 	msr	BASEPRI, r3
 8011550:	f3bf 8f6f 	isb	sy
 8011554:	f3bf 8f4f 	dsb	sy
 8011558:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801155a:	bf00      	nop
 801155c:	e7fe      	b.n	801155c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801155e:	f002 fe11 	bl	8014184 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801156a:	68f9      	ldr	r1, [r7, #12]
 801156c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801156e:	fb01 f303 	mul.w	r3, r1, r3
 8011572:	441a      	add	r2, r3
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2200      	movs	r2, #0
 801157c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681a      	ldr	r2, [r3, #0]
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801158e:	3b01      	subs	r3, #1
 8011590:	68f9      	ldr	r1, [r7, #12]
 8011592:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011594:	fb01 f303 	mul.w	r3, r1, r3
 8011598:	441a      	add	r2, r3
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	22ff      	movs	r2, #255	; 0xff
 80115a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	22ff      	movs	r2, #255	; 0xff
 80115aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d114      	bne.n	80115de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	691b      	ldr	r3, [r3, #16]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d01a      	beq.n	80115f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	3310      	adds	r3, #16
 80115c0:	4618      	mov	r0, r3
 80115c2:	f001 fdb3 	bl	801312c <xTaskRemoveFromEventList>
 80115c6:	4603      	mov	r3, r0
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d012      	beq.n	80115f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80115cc:	4b0c      	ldr	r3, [pc, #48]	; (8011600 <xQueueGenericReset+0xcc>)
 80115ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115d2:	601a      	str	r2, [r3, #0]
 80115d4:	f3bf 8f4f 	dsb	sy
 80115d8:	f3bf 8f6f 	isb	sy
 80115dc:	e009      	b.n	80115f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	3310      	adds	r3, #16
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7ff fef2 	bl	80113cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	3324      	adds	r3, #36	; 0x24
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7ff feed 	bl	80113cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80115f2:	f002 fdf7 	bl	80141e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80115f6:	2301      	movs	r3, #1
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	3710      	adds	r7, #16
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}
 8011600:	e000ed04 	.word	0xe000ed04

08011604 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011604:	b580      	push	{r7, lr}
 8011606:	b08e      	sub	sp, #56	; 0x38
 8011608:	af02      	add	r7, sp, #8
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	607a      	str	r2, [r7, #4]
 8011610:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d10a      	bne.n	801162e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801161c:	f383 8811 	msr	BASEPRI, r3
 8011620:	f3bf 8f6f 	isb	sy
 8011624:	f3bf 8f4f 	dsb	sy
 8011628:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801162a:	bf00      	nop
 801162c:	e7fe      	b.n	801162c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d10a      	bne.n	801164a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011638:	f383 8811 	msr	BASEPRI, r3
 801163c:	f3bf 8f6f 	isb	sy
 8011640:	f3bf 8f4f 	dsb	sy
 8011644:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011646:	bf00      	nop
 8011648:	e7fe      	b.n	8011648 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d002      	beq.n	8011656 <xQueueGenericCreateStatic+0x52>
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d001      	beq.n	801165a <xQueueGenericCreateStatic+0x56>
 8011656:	2301      	movs	r3, #1
 8011658:	e000      	b.n	801165c <xQueueGenericCreateStatic+0x58>
 801165a:	2300      	movs	r3, #0
 801165c:	2b00      	cmp	r3, #0
 801165e:	d10a      	bne.n	8011676 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011664:	f383 8811 	msr	BASEPRI, r3
 8011668:	f3bf 8f6f 	isb	sy
 801166c:	f3bf 8f4f 	dsb	sy
 8011670:	623b      	str	r3, [r7, #32]
}
 8011672:	bf00      	nop
 8011674:	e7fe      	b.n	8011674 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d102      	bne.n	8011682 <xQueueGenericCreateStatic+0x7e>
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d101      	bne.n	8011686 <xQueueGenericCreateStatic+0x82>
 8011682:	2301      	movs	r3, #1
 8011684:	e000      	b.n	8011688 <xQueueGenericCreateStatic+0x84>
 8011686:	2300      	movs	r3, #0
 8011688:	2b00      	cmp	r3, #0
 801168a:	d10a      	bne.n	80116a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801168c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011690:	f383 8811 	msr	BASEPRI, r3
 8011694:	f3bf 8f6f 	isb	sy
 8011698:	f3bf 8f4f 	dsb	sy
 801169c:	61fb      	str	r3, [r7, #28]
}
 801169e:	bf00      	nop
 80116a0:	e7fe      	b.n	80116a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80116a2:	2350      	movs	r3, #80	; 0x50
 80116a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	2b50      	cmp	r3, #80	; 0x50
 80116aa:	d00a      	beq.n	80116c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80116ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b0:	f383 8811 	msr	BASEPRI, r3
 80116b4:	f3bf 8f6f 	isb	sy
 80116b8:	f3bf 8f4f 	dsb	sy
 80116bc:	61bb      	str	r3, [r7, #24]
}
 80116be:	bf00      	nop
 80116c0:	e7fe      	b.n	80116c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80116c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80116c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d00d      	beq.n	80116ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80116ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d0:	2201      	movs	r2, #1
 80116d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80116d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80116da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116dc:	9300      	str	r3, [sp, #0]
 80116de:	4613      	mov	r3, r2
 80116e0:	687a      	ldr	r2, [r7, #4]
 80116e2:	68b9      	ldr	r1, [r7, #8]
 80116e4:	68f8      	ldr	r0, [r7, #12]
 80116e6:	f000 f83f 	bl	8011768 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80116ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3730      	adds	r7, #48	; 0x30
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}

080116f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b08a      	sub	sp, #40	; 0x28
 80116f8:	af02      	add	r7, sp, #8
 80116fa:	60f8      	str	r0, [r7, #12]
 80116fc:	60b9      	str	r1, [r7, #8]
 80116fe:	4613      	mov	r3, r2
 8011700:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d10a      	bne.n	801171e <xQueueGenericCreate+0x2a>
	__asm volatile
 8011708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801170c:	f383 8811 	msr	BASEPRI, r3
 8011710:	f3bf 8f6f 	isb	sy
 8011714:	f3bf 8f4f 	dsb	sy
 8011718:	613b      	str	r3, [r7, #16]
}
 801171a:	bf00      	nop
 801171c:	e7fe      	b.n	801171c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	68ba      	ldr	r2, [r7, #8]
 8011722:	fb02 f303 	mul.w	r3, r2, r3
 8011726:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011728:	69fb      	ldr	r3, [r7, #28]
 801172a:	3350      	adds	r3, #80	; 0x50
 801172c:	4618      	mov	r0, r3
 801172e:	f002 fe4b 	bl	80143c8 <pvPortMalloc>
 8011732:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d011      	beq.n	801175e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	3350      	adds	r3, #80	; 0x50
 8011742:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	2200      	movs	r2, #0
 8011748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801174c:	79fa      	ldrb	r2, [r7, #7]
 801174e:	69bb      	ldr	r3, [r7, #24]
 8011750:	9300      	str	r3, [sp, #0]
 8011752:	4613      	mov	r3, r2
 8011754:	697a      	ldr	r2, [r7, #20]
 8011756:	68b9      	ldr	r1, [r7, #8]
 8011758:	68f8      	ldr	r0, [r7, #12]
 801175a:	f000 f805 	bl	8011768 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801175e:	69bb      	ldr	r3, [r7, #24]
	}
 8011760:	4618      	mov	r0, r3
 8011762:	3720      	adds	r7, #32
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}

08011768 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	60f8      	str	r0, [r7, #12]
 8011770:	60b9      	str	r1, [r7, #8]
 8011772:	607a      	str	r2, [r7, #4]
 8011774:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d103      	bne.n	8011784 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801177c:	69bb      	ldr	r3, [r7, #24]
 801177e:	69ba      	ldr	r2, [r7, #24]
 8011780:	601a      	str	r2, [r3, #0]
 8011782:	e002      	b.n	801178a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011784:	69bb      	ldr	r3, [r7, #24]
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	68fa      	ldr	r2, [r7, #12]
 801178e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011790:	69bb      	ldr	r3, [r7, #24]
 8011792:	68ba      	ldr	r2, [r7, #8]
 8011794:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011796:	2101      	movs	r1, #1
 8011798:	69b8      	ldr	r0, [r7, #24]
 801179a:	f7ff fecb 	bl	8011534 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801179e:	69bb      	ldr	r3, [r7, #24]
 80117a0:	78fa      	ldrb	r2, [r7, #3]
 80117a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80117a6:	bf00      	nop
 80117a8:	3710      	adds	r7, #16
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bd80      	pop	{r7, pc}

080117ae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80117ae:	b580      	push	{r7, lr}
 80117b0:	b08a      	sub	sp, #40	; 0x28
 80117b2:	af02      	add	r7, sp, #8
 80117b4:	60f8      	str	r0, [r7, #12]
 80117b6:	60b9      	str	r1, [r7, #8]
 80117b8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d10a      	bne.n	80117d6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80117c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117c4:	f383 8811 	msr	BASEPRI, r3
 80117c8:	f3bf 8f6f 	isb	sy
 80117cc:	f3bf 8f4f 	dsb	sy
 80117d0:	61bb      	str	r3, [r7, #24]
}
 80117d2:	bf00      	nop
 80117d4:	e7fe      	b.n	80117d4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80117d6:	68ba      	ldr	r2, [r7, #8]
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	429a      	cmp	r2, r3
 80117dc:	d90a      	bls.n	80117f4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80117de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e2:	f383 8811 	msr	BASEPRI, r3
 80117e6:	f3bf 8f6f 	isb	sy
 80117ea:	f3bf 8f4f 	dsb	sy
 80117ee:	617b      	str	r3, [r7, #20]
}
 80117f0:	bf00      	nop
 80117f2:	e7fe      	b.n	80117f2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80117f4:	2302      	movs	r3, #2
 80117f6:	9300      	str	r3, [sp, #0]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2200      	movs	r2, #0
 80117fc:	2100      	movs	r1, #0
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	f7ff ff00 	bl	8011604 <xQueueGenericCreateStatic>
 8011804:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d002      	beq.n	8011812 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	68ba      	ldr	r2, [r7, #8]
 8011810:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011812:	69fb      	ldr	r3, [r7, #28]
	}
 8011814:	4618      	mov	r0, r3
 8011816:	3720      	adds	r7, #32
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801181c:	b580      	push	{r7, lr}
 801181e:	b086      	sub	sp, #24
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d10a      	bne.n	8011842 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801182c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011830:	f383 8811 	msr	BASEPRI, r3
 8011834:	f3bf 8f6f 	isb	sy
 8011838:	f3bf 8f4f 	dsb	sy
 801183c:	613b      	str	r3, [r7, #16]
}
 801183e:	bf00      	nop
 8011840:	e7fe      	b.n	8011840 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011842:	683a      	ldr	r2, [r7, #0]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	429a      	cmp	r2, r3
 8011848:	d90a      	bls.n	8011860 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801184a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801184e:	f383 8811 	msr	BASEPRI, r3
 8011852:	f3bf 8f6f 	isb	sy
 8011856:	f3bf 8f4f 	dsb	sy
 801185a:	60fb      	str	r3, [r7, #12]
}
 801185c:	bf00      	nop
 801185e:	e7fe      	b.n	801185e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011860:	2202      	movs	r2, #2
 8011862:	2100      	movs	r1, #0
 8011864:	6878      	ldr	r0, [r7, #4]
 8011866:	f7ff ff45 	bl	80116f4 <xQueueGenericCreate>
 801186a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d002      	beq.n	8011878 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	683a      	ldr	r2, [r7, #0]
 8011876:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011878:	697b      	ldr	r3, [r7, #20]
	}
 801187a:	4618      	mov	r0, r3
 801187c:	3718      	adds	r7, #24
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}
	...

08011884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b08e      	sub	sp, #56	; 0x38
 8011888:	af00      	add	r7, sp, #0
 801188a:	60f8      	str	r0, [r7, #12]
 801188c:	60b9      	str	r1, [r7, #8]
 801188e:	607a      	str	r2, [r7, #4]
 8011890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011892:	2300      	movs	r3, #0
 8011894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801189a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10a      	bne.n	80118b6 <xQueueGenericSend+0x32>
	__asm volatile
 80118a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a4:	f383 8811 	msr	BASEPRI, r3
 80118a8:	f3bf 8f6f 	isb	sy
 80118ac:	f3bf 8f4f 	dsb	sy
 80118b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80118b2:	bf00      	nop
 80118b4:	e7fe      	b.n	80118b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d103      	bne.n	80118c4 <xQueueGenericSend+0x40>
 80118bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d101      	bne.n	80118c8 <xQueueGenericSend+0x44>
 80118c4:	2301      	movs	r3, #1
 80118c6:	e000      	b.n	80118ca <xQueueGenericSend+0x46>
 80118c8:	2300      	movs	r3, #0
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d10a      	bne.n	80118e4 <xQueueGenericSend+0x60>
	__asm volatile
 80118ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d2:	f383 8811 	msr	BASEPRI, r3
 80118d6:	f3bf 8f6f 	isb	sy
 80118da:	f3bf 8f4f 	dsb	sy
 80118de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80118e0:	bf00      	nop
 80118e2:	e7fe      	b.n	80118e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	2b02      	cmp	r3, #2
 80118e8:	d103      	bne.n	80118f2 <xQueueGenericSend+0x6e>
 80118ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118ee:	2b01      	cmp	r3, #1
 80118f0:	d101      	bne.n	80118f6 <xQueueGenericSend+0x72>
 80118f2:	2301      	movs	r3, #1
 80118f4:	e000      	b.n	80118f8 <xQueueGenericSend+0x74>
 80118f6:	2300      	movs	r3, #0
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d10a      	bne.n	8011912 <xQueueGenericSend+0x8e>
	__asm volatile
 80118fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011900:	f383 8811 	msr	BASEPRI, r3
 8011904:	f3bf 8f6f 	isb	sy
 8011908:	f3bf 8f4f 	dsb	sy
 801190c:	623b      	str	r3, [r7, #32]
}
 801190e:	bf00      	nop
 8011910:	e7fe      	b.n	8011910 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011912:	f001 fddd 	bl	80134d0 <xTaskGetSchedulerState>
 8011916:	4603      	mov	r3, r0
 8011918:	2b00      	cmp	r3, #0
 801191a:	d102      	bne.n	8011922 <xQueueGenericSend+0x9e>
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d101      	bne.n	8011926 <xQueueGenericSend+0xa2>
 8011922:	2301      	movs	r3, #1
 8011924:	e000      	b.n	8011928 <xQueueGenericSend+0xa4>
 8011926:	2300      	movs	r3, #0
 8011928:	2b00      	cmp	r3, #0
 801192a:	d10a      	bne.n	8011942 <xQueueGenericSend+0xbe>
	__asm volatile
 801192c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011930:	f383 8811 	msr	BASEPRI, r3
 8011934:	f3bf 8f6f 	isb	sy
 8011938:	f3bf 8f4f 	dsb	sy
 801193c:	61fb      	str	r3, [r7, #28]
}
 801193e:	bf00      	nop
 8011940:	e7fe      	b.n	8011940 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011942:	f002 fc1f 	bl	8014184 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801194a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801194c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801194e:	429a      	cmp	r2, r3
 8011950:	d302      	bcc.n	8011958 <xQueueGenericSend+0xd4>
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	2b02      	cmp	r3, #2
 8011956:	d129      	bne.n	80119ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011958:	683a      	ldr	r2, [r7, #0]
 801195a:	68b9      	ldr	r1, [r7, #8]
 801195c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801195e:	f000 fc5e 	bl	801221e <prvCopyDataToQueue>
 8011962:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011968:	2b00      	cmp	r3, #0
 801196a:	d010      	beq.n	801198e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801196c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801196e:	3324      	adds	r3, #36	; 0x24
 8011970:	4618      	mov	r0, r3
 8011972:	f001 fbdb 	bl	801312c <xTaskRemoveFromEventList>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d013      	beq.n	80119a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801197c:	4b3f      	ldr	r3, [pc, #252]	; (8011a7c <xQueueGenericSend+0x1f8>)
 801197e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011982:	601a      	str	r2, [r3, #0]
 8011984:	f3bf 8f4f 	dsb	sy
 8011988:	f3bf 8f6f 	isb	sy
 801198c:	e00a      	b.n	80119a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011990:	2b00      	cmp	r3, #0
 8011992:	d007      	beq.n	80119a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011994:	4b39      	ldr	r3, [pc, #228]	; (8011a7c <xQueueGenericSend+0x1f8>)
 8011996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801199a:	601a      	str	r2, [r3, #0]
 801199c:	f3bf 8f4f 	dsb	sy
 80119a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80119a4:	f002 fc1e 	bl	80141e4 <vPortExitCritical>
				return pdPASS;
 80119a8:	2301      	movs	r3, #1
 80119aa:	e063      	b.n	8011a74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d103      	bne.n	80119ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80119b2:	f002 fc17 	bl	80141e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80119b6:	2300      	movs	r3, #0
 80119b8:	e05c      	b.n	8011a74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80119ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d106      	bne.n	80119ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80119c0:	f107 0314 	add.w	r3, r7, #20
 80119c4:	4618      	mov	r0, r3
 80119c6:	f001 fc15 	bl	80131f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80119ca:	2301      	movs	r3, #1
 80119cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80119ce:	f002 fc09 	bl	80141e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80119d2:	f001 f981 	bl	8012cd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80119d6:	f002 fbd5 	bl	8014184 <vPortEnterCritical>
 80119da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119e0:	b25b      	sxtb	r3, r3
 80119e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119e6:	d103      	bne.n	80119f0 <xQueueGenericSend+0x16c>
 80119e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ea:	2200      	movs	r2, #0
 80119ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80119f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119f6:	b25b      	sxtb	r3, r3
 80119f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119fc:	d103      	bne.n	8011a06 <xQueueGenericSend+0x182>
 80119fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a00:	2200      	movs	r2, #0
 8011a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a06:	f002 fbed 	bl	80141e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a0a:	1d3a      	adds	r2, r7, #4
 8011a0c:	f107 0314 	add.w	r3, r7, #20
 8011a10:	4611      	mov	r1, r2
 8011a12:	4618      	mov	r0, r3
 8011a14:	f001 fc04 	bl	8013220 <xTaskCheckForTimeOut>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d124      	bne.n	8011a68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011a1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a20:	f000 fcf5 	bl	801240e <prvIsQueueFull>
 8011a24:	4603      	mov	r3, r0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d018      	beq.n	8011a5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a2c:	3310      	adds	r3, #16
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	4611      	mov	r1, r2
 8011a32:	4618      	mov	r0, r3
 8011a34:	f001 fb2a 	bl	801308c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011a38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a3a:	f000 fc80 	bl	801233e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011a3e:	f001 f959 	bl	8012cf4 <xTaskResumeAll>
 8011a42:	4603      	mov	r3, r0
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	f47f af7c 	bne.w	8011942 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011a4a:	4b0c      	ldr	r3, [pc, #48]	; (8011a7c <xQueueGenericSend+0x1f8>)
 8011a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a50:	601a      	str	r2, [r3, #0]
 8011a52:	f3bf 8f4f 	dsb	sy
 8011a56:	f3bf 8f6f 	isb	sy
 8011a5a:	e772      	b.n	8011942 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a5e:	f000 fc6e 	bl	801233e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011a62:	f001 f947 	bl	8012cf4 <xTaskResumeAll>
 8011a66:	e76c      	b.n	8011942 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a6a:	f000 fc68 	bl	801233e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011a6e:	f001 f941 	bl	8012cf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011a72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3738      	adds	r7, #56	; 0x38
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	e000ed04 	.word	0xe000ed04

08011a80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b090      	sub	sp, #64	; 0x40
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	60f8      	str	r0, [r7, #12]
 8011a88:	60b9      	str	r1, [r7, #8]
 8011a8a:	607a      	str	r2, [r7, #4]
 8011a8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d10a      	bne.n	8011aae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a9c:	f383 8811 	msr	BASEPRI, r3
 8011aa0:	f3bf 8f6f 	isb	sy
 8011aa4:	f3bf 8f4f 	dsb	sy
 8011aa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011aaa:	bf00      	nop
 8011aac:	e7fe      	b.n	8011aac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011aae:	68bb      	ldr	r3, [r7, #8]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d103      	bne.n	8011abc <xQueueGenericSendFromISR+0x3c>
 8011ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d101      	bne.n	8011ac0 <xQueueGenericSendFromISR+0x40>
 8011abc:	2301      	movs	r3, #1
 8011abe:	e000      	b.n	8011ac2 <xQueueGenericSendFromISR+0x42>
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d10a      	bne.n	8011adc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aca:	f383 8811 	msr	BASEPRI, r3
 8011ace:	f3bf 8f6f 	isb	sy
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011ad8:	bf00      	nop
 8011ada:	e7fe      	b.n	8011ada <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	2b02      	cmp	r3, #2
 8011ae0:	d103      	bne.n	8011aea <xQueueGenericSendFromISR+0x6a>
 8011ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ae6:	2b01      	cmp	r3, #1
 8011ae8:	d101      	bne.n	8011aee <xQueueGenericSendFromISR+0x6e>
 8011aea:	2301      	movs	r3, #1
 8011aec:	e000      	b.n	8011af0 <xQueueGenericSendFromISR+0x70>
 8011aee:	2300      	movs	r3, #0
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d10a      	bne.n	8011b0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af8:	f383 8811 	msr	BASEPRI, r3
 8011afc:	f3bf 8f6f 	isb	sy
 8011b00:	f3bf 8f4f 	dsb	sy
 8011b04:	623b      	str	r3, [r7, #32]
}
 8011b06:	bf00      	nop
 8011b08:	e7fe      	b.n	8011b08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011b0a:	f002 fc1d 	bl	8014348 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011b0e:	f3ef 8211 	mrs	r2, BASEPRI
 8011b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b16:	f383 8811 	msr	BASEPRI, r3
 8011b1a:	f3bf 8f6f 	isb	sy
 8011b1e:	f3bf 8f4f 	dsb	sy
 8011b22:	61fa      	str	r2, [r7, #28]
 8011b24:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011b26:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011b28:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d302      	bcc.n	8011b3c <xQueueGenericSendFromISR+0xbc>
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	2b02      	cmp	r3, #2
 8011b3a:	d12f      	bne.n	8011b9c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011b4c:	683a      	ldr	r2, [r7, #0]
 8011b4e:	68b9      	ldr	r1, [r7, #8]
 8011b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b52:	f000 fb64 	bl	801221e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011b56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b5e:	d112      	bne.n	8011b86 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d016      	beq.n	8011b96 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b6a:	3324      	adds	r3, #36	; 0x24
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f001 fadd 	bl	801312c <xTaskRemoveFromEventList>
 8011b72:	4603      	mov	r3, r0
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d00e      	beq.n	8011b96 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d00b      	beq.n	8011b96 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	2201      	movs	r2, #1
 8011b82:	601a      	str	r2, [r3, #0]
 8011b84:	e007      	b.n	8011b96 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011b86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011b8a:	3301      	adds	r3, #1
 8011b8c:	b2db      	uxtb	r3, r3
 8011b8e:	b25a      	sxtb	r2, r3
 8011b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011b96:	2301      	movs	r3, #1
 8011b98:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011b9a:	e001      	b.n	8011ba0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ba2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011baa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3740      	adds	r7, #64	; 0x40
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}

08011bb6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011bb6:	b580      	push	{r7, lr}
 8011bb8:	b08e      	sub	sp, #56	; 0x38
 8011bba:	af00      	add	r7, sp, #0
 8011bbc:	6078      	str	r0, [r7, #4]
 8011bbe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d10a      	bne.n	8011be0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8011bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bce:	f383 8811 	msr	BASEPRI, r3
 8011bd2:	f3bf 8f6f 	isb	sy
 8011bd6:	f3bf 8f4f 	dsb	sy
 8011bda:	623b      	str	r3, [r7, #32]
}
 8011bdc:	bf00      	nop
 8011bde:	e7fe      	b.n	8011bde <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d00a      	beq.n	8011bfe <xQueueGiveFromISR+0x48>
	__asm volatile
 8011be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bec:	f383 8811 	msr	BASEPRI, r3
 8011bf0:	f3bf 8f6f 	isb	sy
 8011bf4:	f3bf 8f4f 	dsb	sy
 8011bf8:	61fb      	str	r3, [r7, #28]
}
 8011bfa:	bf00      	nop
 8011bfc:	e7fe      	b.n	8011bfc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d103      	bne.n	8011c0e <xQueueGiveFromISR+0x58>
 8011c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c08:	689b      	ldr	r3, [r3, #8]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d101      	bne.n	8011c12 <xQueueGiveFromISR+0x5c>
 8011c0e:	2301      	movs	r3, #1
 8011c10:	e000      	b.n	8011c14 <xQueueGiveFromISR+0x5e>
 8011c12:	2300      	movs	r3, #0
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d10a      	bne.n	8011c2e <xQueueGiveFromISR+0x78>
	__asm volatile
 8011c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c1c:	f383 8811 	msr	BASEPRI, r3
 8011c20:	f3bf 8f6f 	isb	sy
 8011c24:	f3bf 8f4f 	dsb	sy
 8011c28:	61bb      	str	r3, [r7, #24]
}
 8011c2a:	bf00      	nop
 8011c2c:	e7fe      	b.n	8011c2c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011c2e:	f002 fb8b 	bl	8014348 <vPortValidateInterruptPriority>
	__asm volatile
 8011c32:	f3ef 8211 	mrs	r2, BASEPRI
 8011c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c3a:	f383 8811 	msr	BASEPRI, r3
 8011c3e:	f3bf 8f6f 	isb	sy
 8011c42:	f3bf 8f4f 	dsb	sy
 8011c46:	617a      	str	r2, [r7, #20]
 8011c48:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011c4a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c52:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d22b      	bcs.n	8011cb6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c6a:	1c5a      	adds	r2, r3, #1
 8011c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011c70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c78:	d112      	bne.n	8011ca0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d016      	beq.n	8011cb0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c84:	3324      	adds	r3, #36	; 0x24
 8011c86:	4618      	mov	r0, r3
 8011c88:	f001 fa50 	bl	801312c <xTaskRemoveFromEventList>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d00e      	beq.n	8011cb0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d00b      	beq.n	8011cb0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	2201      	movs	r2, #1
 8011c9c:	601a      	str	r2, [r3, #0]
 8011c9e:	e007      	b.n	8011cb0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	b2db      	uxtb	r3, r3
 8011ca8:	b25a      	sxtb	r2, r3
 8011caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011cb0:	2301      	movs	r3, #1
 8011cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8011cb4:	e001      	b.n	8011cba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8011cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cbc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	f383 8811 	msr	BASEPRI, r3
}
 8011cc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011cc8:	4618      	mov	r0, r3
 8011cca:	3738      	adds	r7, #56	; 0x38
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b08c      	sub	sp, #48	; 0x30
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	60f8      	str	r0, [r7, #12]
 8011cd8:	60b9      	str	r1, [r7, #8]
 8011cda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d10a      	bne.n	8011d00 <xQueueReceive+0x30>
	__asm volatile
 8011cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cee:	f383 8811 	msr	BASEPRI, r3
 8011cf2:	f3bf 8f6f 	isb	sy
 8011cf6:	f3bf 8f4f 	dsb	sy
 8011cfa:	623b      	str	r3, [r7, #32]
}
 8011cfc:	bf00      	nop
 8011cfe:	e7fe      	b.n	8011cfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d103      	bne.n	8011d0e <xQueueReceive+0x3e>
 8011d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d101      	bne.n	8011d12 <xQueueReceive+0x42>
 8011d0e:	2301      	movs	r3, #1
 8011d10:	e000      	b.n	8011d14 <xQueueReceive+0x44>
 8011d12:	2300      	movs	r3, #0
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d10a      	bne.n	8011d2e <xQueueReceive+0x5e>
	__asm volatile
 8011d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d1c:	f383 8811 	msr	BASEPRI, r3
 8011d20:	f3bf 8f6f 	isb	sy
 8011d24:	f3bf 8f4f 	dsb	sy
 8011d28:	61fb      	str	r3, [r7, #28]
}
 8011d2a:	bf00      	nop
 8011d2c:	e7fe      	b.n	8011d2c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d2e:	f001 fbcf 	bl	80134d0 <xTaskGetSchedulerState>
 8011d32:	4603      	mov	r3, r0
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d102      	bne.n	8011d3e <xQueueReceive+0x6e>
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d101      	bne.n	8011d42 <xQueueReceive+0x72>
 8011d3e:	2301      	movs	r3, #1
 8011d40:	e000      	b.n	8011d44 <xQueueReceive+0x74>
 8011d42:	2300      	movs	r3, #0
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d10a      	bne.n	8011d5e <xQueueReceive+0x8e>
	__asm volatile
 8011d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d4c:	f383 8811 	msr	BASEPRI, r3
 8011d50:	f3bf 8f6f 	isb	sy
 8011d54:	f3bf 8f4f 	dsb	sy
 8011d58:	61bb      	str	r3, [r7, #24]
}
 8011d5a:	bf00      	nop
 8011d5c:	e7fe      	b.n	8011d5c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011d5e:	f002 fa11 	bl	8014184 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d66:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d01f      	beq.n	8011dae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011d6e:	68b9      	ldr	r1, [r7, #8]
 8011d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d72:	f000 fabe 	bl	80122f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d78:	1e5a      	subs	r2, r3, #1
 8011d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d7c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d80:	691b      	ldr	r3, [r3, #16]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d00f      	beq.n	8011da6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d88:	3310      	adds	r3, #16
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f001 f9ce 	bl	801312c <xTaskRemoveFromEventList>
 8011d90:	4603      	mov	r3, r0
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d007      	beq.n	8011da6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011d96:	4b3d      	ldr	r3, [pc, #244]	; (8011e8c <xQueueReceive+0x1bc>)
 8011d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d9c:	601a      	str	r2, [r3, #0]
 8011d9e:	f3bf 8f4f 	dsb	sy
 8011da2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011da6:	f002 fa1d 	bl	80141e4 <vPortExitCritical>
				return pdPASS;
 8011daa:	2301      	movs	r3, #1
 8011dac:	e069      	b.n	8011e82 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d103      	bne.n	8011dbc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011db4:	f002 fa16 	bl	80141e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011db8:	2300      	movs	r3, #0
 8011dba:	e062      	b.n	8011e82 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d106      	bne.n	8011dd0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011dc2:	f107 0310 	add.w	r3, r7, #16
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f001 fa14 	bl	80131f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011dcc:	2301      	movs	r3, #1
 8011dce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011dd0:	f002 fa08 	bl	80141e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011dd4:	f000 ff80 	bl	8012cd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011dd8:	f002 f9d4 	bl	8014184 <vPortEnterCritical>
 8011ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011de2:	b25b      	sxtb	r3, r3
 8011de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de8:	d103      	bne.n	8011df2 <xQueueReceive+0x122>
 8011dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dec:	2200      	movs	r2, #0
 8011dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011df8:	b25b      	sxtb	r3, r3
 8011dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dfe:	d103      	bne.n	8011e08 <xQueueReceive+0x138>
 8011e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e02:	2200      	movs	r2, #0
 8011e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e08:	f002 f9ec 	bl	80141e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e0c:	1d3a      	adds	r2, r7, #4
 8011e0e:	f107 0310 	add.w	r3, r7, #16
 8011e12:	4611      	mov	r1, r2
 8011e14:	4618      	mov	r0, r3
 8011e16:	f001 fa03 	bl	8013220 <xTaskCheckForTimeOut>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d123      	bne.n	8011e68 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e22:	f000 fade 	bl	80123e2 <prvIsQueueEmpty>
 8011e26:	4603      	mov	r3, r0
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d017      	beq.n	8011e5c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e2e:	3324      	adds	r3, #36	; 0x24
 8011e30:	687a      	ldr	r2, [r7, #4]
 8011e32:	4611      	mov	r1, r2
 8011e34:	4618      	mov	r0, r3
 8011e36:	f001 f929 	bl	801308c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e3c:	f000 fa7f 	bl	801233e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011e40:	f000 ff58 	bl	8012cf4 <xTaskResumeAll>
 8011e44:	4603      	mov	r3, r0
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d189      	bne.n	8011d5e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011e4a:	4b10      	ldr	r3, [pc, #64]	; (8011e8c <xQueueReceive+0x1bc>)
 8011e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e50:	601a      	str	r2, [r3, #0]
 8011e52:	f3bf 8f4f 	dsb	sy
 8011e56:	f3bf 8f6f 	isb	sy
 8011e5a:	e780      	b.n	8011d5e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011e5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e5e:	f000 fa6e 	bl	801233e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011e62:	f000 ff47 	bl	8012cf4 <xTaskResumeAll>
 8011e66:	e77a      	b.n	8011d5e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011e68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e6a:	f000 fa68 	bl	801233e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011e6e:	f000 ff41 	bl	8012cf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e74:	f000 fab5 	bl	80123e2 <prvIsQueueEmpty>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	f43f af6f 	beq.w	8011d5e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011e80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	3730      	adds	r7, #48	; 0x30
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	e000ed04 	.word	0xe000ed04

08011e90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b08e      	sub	sp, #56	; 0x38
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
 8011e98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d10a      	bne.n	8011ec2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb0:	f383 8811 	msr	BASEPRI, r3
 8011eb4:	f3bf 8f6f 	isb	sy
 8011eb8:	f3bf 8f4f 	dsb	sy
 8011ebc:	623b      	str	r3, [r7, #32]
}
 8011ebe:	bf00      	nop
 8011ec0:	e7fe      	b.n	8011ec0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d00a      	beq.n	8011ee0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ece:	f383 8811 	msr	BASEPRI, r3
 8011ed2:	f3bf 8f6f 	isb	sy
 8011ed6:	f3bf 8f4f 	dsb	sy
 8011eda:	61fb      	str	r3, [r7, #28]
}
 8011edc:	bf00      	nop
 8011ede:	e7fe      	b.n	8011ede <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ee0:	f001 faf6 	bl	80134d0 <xTaskGetSchedulerState>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d102      	bne.n	8011ef0 <xQueueSemaphoreTake+0x60>
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d101      	bne.n	8011ef4 <xQueueSemaphoreTake+0x64>
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	e000      	b.n	8011ef6 <xQueueSemaphoreTake+0x66>
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d10a      	bne.n	8011f10 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011efe:	f383 8811 	msr	BASEPRI, r3
 8011f02:	f3bf 8f6f 	isb	sy
 8011f06:	f3bf 8f4f 	dsb	sy
 8011f0a:	61bb      	str	r3, [r7, #24]
}
 8011f0c:	bf00      	nop
 8011f0e:	e7fe      	b.n	8011f0e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011f10:	f002 f938 	bl	8014184 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f18:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d024      	beq.n	8011f6a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f22:	1e5a      	subs	r2, r3, #1
 8011f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f26:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d104      	bne.n	8011f3a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011f30:	f001 fc44 	bl	80137bc <pvTaskIncrementMutexHeldCount>
 8011f34:	4602      	mov	r2, r0
 8011f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f38:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3c:	691b      	ldr	r3, [r3, #16]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d00f      	beq.n	8011f62 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f44:	3310      	adds	r3, #16
 8011f46:	4618      	mov	r0, r3
 8011f48:	f001 f8f0 	bl	801312c <xTaskRemoveFromEventList>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d007      	beq.n	8011f62 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011f52:	4b54      	ldr	r3, [pc, #336]	; (80120a4 <xQueueSemaphoreTake+0x214>)
 8011f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f58:	601a      	str	r2, [r3, #0]
 8011f5a:	f3bf 8f4f 	dsb	sy
 8011f5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011f62:	f002 f93f 	bl	80141e4 <vPortExitCritical>
				return pdPASS;
 8011f66:	2301      	movs	r3, #1
 8011f68:	e097      	b.n	801209a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d111      	bne.n	8011f94 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d00a      	beq.n	8011f8c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8011f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f7a:	f383 8811 	msr	BASEPRI, r3
 8011f7e:	f3bf 8f6f 	isb	sy
 8011f82:	f3bf 8f4f 	dsb	sy
 8011f86:	617b      	str	r3, [r7, #20]
}
 8011f88:	bf00      	nop
 8011f8a:	e7fe      	b.n	8011f8a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011f8c:	f002 f92a 	bl	80141e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011f90:	2300      	movs	r3, #0
 8011f92:	e082      	b.n	801209a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f9a:	f107 030c 	add.w	r3, r7, #12
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f001 f928 	bl	80131f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011fa8:	f002 f91c 	bl	80141e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011fac:	f000 fe94 	bl	8012cd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011fb0:	f002 f8e8 	bl	8014184 <vPortEnterCritical>
 8011fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011fba:	b25b      	sxtb	r3, r3
 8011fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fc0:	d103      	bne.n	8011fca <xQueueSemaphoreTake+0x13a>
 8011fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fd0:	b25b      	sxtb	r3, r3
 8011fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fd6:	d103      	bne.n	8011fe0 <xQueueSemaphoreTake+0x150>
 8011fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fda:	2200      	movs	r2, #0
 8011fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011fe0:	f002 f900 	bl	80141e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011fe4:	463a      	mov	r2, r7
 8011fe6:	f107 030c 	add.w	r3, r7, #12
 8011fea:	4611      	mov	r1, r2
 8011fec:	4618      	mov	r0, r3
 8011fee:	f001 f917 	bl	8013220 <xTaskCheckForTimeOut>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d132      	bne.n	801205e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ffa:	f000 f9f2 	bl	80123e2 <prvIsQueueEmpty>
 8011ffe:	4603      	mov	r3, r0
 8012000:	2b00      	cmp	r3, #0
 8012002:	d026      	beq.n	8012052 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d109      	bne.n	8012020 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801200c:	f002 f8ba 	bl	8014184 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012012:	689b      	ldr	r3, [r3, #8]
 8012014:	4618      	mov	r0, r3
 8012016:	f001 fa79 	bl	801350c <xTaskPriorityInherit>
 801201a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801201c:	f002 f8e2 	bl	80141e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012022:	3324      	adds	r3, #36	; 0x24
 8012024:	683a      	ldr	r2, [r7, #0]
 8012026:	4611      	mov	r1, r2
 8012028:	4618      	mov	r0, r3
 801202a:	f001 f82f 	bl	801308c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801202e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012030:	f000 f985 	bl	801233e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012034:	f000 fe5e 	bl	8012cf4 <xTaskResumeAll>
 8012038:	4603      	mov	r3, r0
 801203a:	2b00      	cmp	r3, #0
 801203c:	f47f af68 	bne.w	8011f10 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012040:	4b18      	ldr	r3, [pc, #96]	; (80120a4 <xQueueSemaphoreTake+0x214>)
 8012042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012046:	601a      	str	r2, [r3, #0]
 8012048:	f3bf 8f4f 	dsb	sy
 801204c:	f3bf 8f6f 	isb	sy
 8012050:	e75e      	b.n	8011f10 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012054:	f000 f973 	bl	801233e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012058:	f000 fe4c 	bl	8012cf4 <xTaskResumeAll>
 801205c:	e758      	b.n	8011f10 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801205e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012060:	f000 f96d 	bl	801233e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012064:	f000 fe46 	bl	8012cf4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012068:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801206a:	f000 f9ba 	bl	80123e2 <prvIsQueueEmpty>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	f43f af4d 	beq.w	8011f10 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012078:	2b00      	cmp	r3, #0
 801207a:	d00d      	beq.n	8012098 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801207c:	f002 f882 	bl	8014184 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012082:	f000 f8b4 	bl	80121ee <prvGetDisinheritPriorityAfterTimeout>
 8012086:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208a:	689b      	ldr	r3, [r3, #8]
 801208c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801208e:	4618      	mov	r0, r3
 8012090:	f001 fb12 	bl	80136b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012094:	f002 f8a6 	bl	80141e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012098:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801209a:	4618      	mov	r0, r3
 801209c:	3738      	adds	r7, #56	; 0x38
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	e000ed04 	.word	0xe000ed04

080120a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b08e      	sub	sp, #56	; 0x38
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80120b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d10a      	bne.n	80120d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80120be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c2:	f383 8811 	msr	BASEPRI, r3
 80120c6:	f3bf 8f6f 	isb	sy
 80120ca:	f3bf 8f4f 	dsb	sy
 80120ce:	623b      	str	r3, [r7, #32]
}
 80120d0:	bf00      	nop
 80120d2:	e7fe      	b.n	80120d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d103      	bne.n	80120e2 <xQueueReceiveFromISR+0x3a>
 80120da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d101      	bne.n	80120e6 <xQueueReceiveFromISR+0x3e>
 80120e2:	2301      	movs	r3, #1
 80120e4:	e000      	b.n	80120e8 <xQueueReceiveFromISR+0x40>
 80120e6:	2300      	movs	r3, #0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d10a      	bne.n	8012102 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80120ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f0:	f383 8811 	msr	BASEPRI, r3
 80120f4:	f3bf 8f6f 	isb	sy
 80120f8:	f3bf 8f4f 	dsb	sy
 80120fc:	61fb      	str	r3, [r7, #28]
}
 80120fe:	bf00      	nop
 8012100:	e7fe      	b.n	8012100 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012102:	f002 f921 	bl	8014348 <vPortValidateInterruptPriority>
	__asm volatile
 8012106:	f3ef 8211 	mrs	r2, BASEPRI
 801210a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801210e:	f383 8811 	msr	BASEPRI, r3
 8012112:	f3bf 8f6f 	isb	sy
 8012116:	f3bf 8f4f 	dsb	sy
 801211a:	61ba      	str	r2, [r7, #24]
 801211c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801211e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012120:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012126:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801212a:	2b00      	cmp	r3, #0
 801212c:	d02f      	beq.n	801218e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801212e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012138:	68b9      	ldr	r1, [r7, #8]
 801213a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801213c:	f000 f8d9 	bl	80122f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012142:	1e5a      	subs	r2, r3, #1
 8012144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012146:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012148:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801214c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012150:	d112      	bne.n	8012178 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	691b      	ldr	r3, [r3, #16]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d016      	beq.n	8012188 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801215a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801215c:	3310      	adds	r3, #16
 801215e:	4618      	mov	r0, r3
 8012160:	f000 ffe4 	bl	801312c <xTaskRemoveFromEventList>
 8012164:	4603      	mov	r3, r0
 8012166:	2b00      	cmp	r3, #0
 8012168:	d00e      	beq.n	8012188 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d00b      	beq.n	8012188 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2201      	movs	r2, #1
 8012174:	601a      	str	r2, [r3, #0]
 8012176:	e007      	b.n	8012188 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801217c:	3301      	adds	r3, #1
 801217e:	b2db      	uxtb	r3, r3
 8012180:	b25a      	sxtb	r2, r3
 8012182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012188:	2301      	movs	r3, #1
 801218a:	637b      	str	r3, [r7, #52]	; 0x34
 801218c:	e001      	b.n	8012192 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801218e:	2300      	movs	r3, #0
 8012190:	637b      	str	r3, [r7, #52]	; 0x34
 8012192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012194:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	f383 8811 	msr	BASEPRI, r3
}
 801219c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801219e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3738      	adds	r7, #56	; 0x38
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b084      	sub	sp, #16
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d10a      	bne.n	80121d0 <vQueueDelete+0x28>
	__asm volatile
 80121ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121be:	f383 8811 	msr	BASEPRI, r3
 80121c2:	f3bf 8f6f 	isb	sy
 80121c6:	f3bf 8f4f 	dsb	sy
 80121ca:	60bb      	str	r3, [r7, #8]
}
 80121cc:	bf00      	nop
 80121ce:	e7fe      	b.n	80121ce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80121d0:	68f8      	ldr	r0, [r7, #12]
 80121d2:	f000 f95f 	bl	8012494 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d102      	bne.n	80121e6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80121e0:	68f8      	ldr	r0, [r7, #12]
 80121e2:	f002 f9bd 	bl	8014560 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80121e6:	bf00      	nop
 80121e8:	3710      	adds	r7, #16
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}

080121ee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80121ee:	b480      	push	{r7}
 80121f0:	b085      	sub	sp, #20
 80121f2:	af00      	add	r7, sp, #0
 80121f4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d006      	beq.n	801220c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012208:	60fb      	str	r3, [r7, #12]
 801220a:	e001      	b.n	8012210 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801220c:	2300      	movs	r3, #0
 801220e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012210:	68fb      	ldr	r3, [r7, #12]
	}
 8012212:	4618      	mov	r0, r3
 8012214:	3714      	adds	r7, #20
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr

0801221e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801221e:	b580      	push	{r7, lr}
 8012220:	b086      	sub	sp, #24
 8012222:	af00      	add	r7, sp, #0
 8012224:	60f8      	str	r0, [r7, #12]
 8012226:	60b9      	str	r1, [r7, #8]
 8012228:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801222a:	2300      	movs	r3, #0
 801222c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012232:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012238:	2b00      	cmp	r3, #0
 801223a:	d10d      	bne.n	8012258 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d14d      	bne.n	80122e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	689b      	ldr	r3, [r3, #8]
 8012248:	4618      	mov	r0, r3
 801224a:	f001 f9c7 	bl	80135dc <xTaskPriorityDisinherit>
 801224e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	2200      	movs	r2, #0
 8012254:	609a      	str	r2, [r3, #8]
 8012256:	e043      	b.n	80122e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d119      	bne.n	8012292 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	6858      	ldr	r0, [r3, #4]
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012266:	461a      	mov	r2, r3
 8012268:	68b9      	ldr	r1, [r7, #8]
 801226a:	f003 fbaf 	bl	80159cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	685a      	ldr	r2, [r3, #4]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012276:	441a      	add	r2, r3
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	685a      	ldr	r2, [r3, #4]
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	689b      	ldr	r3, [r3, #8]
 8012284:	429a      	cmp	r2, r3
 8012286:	d32b      	bcc.n	80122e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	681a      	ldr	r2, [r3, #0]
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	605a      	str	r2, [r3, #4]
 8012290:	e026      	b.n	80122e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	68d8      	ldr	r0, [r3, #12]
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801229a:	461a      	mov	r2, r3
 801229c:	68b9      	ldr	r1, [r7, #8]
 801229e:	f003 fb95 	bl	80159cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	68da      	ldr	r2, [r3, #12]
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122aa:	425b      	negs	r3, r3
 80122ac:	441a      	add	r2, r3
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	68da      	ldr	r2, [r3, #12]
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d207      	bcs.n	80122ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	689a      	ldr	r2, [r3, #8]
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122c6:	425b      	negs	r3, r3
 80122c8:	441a      	add	r2, r3
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2b02      	cmp	r3, #2
 80122d2:	d105      	bne.n	80122e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d002      	beq.n	80122e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	3b01      	subs	r3, #1
 80122de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	1c5a      	adds	r2, r3, #1
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80122e8:	697b      	ldr	r3, [r7, #20]
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3718      	adds	r7, #24
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b082      	sub	sp, #8
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
 80122fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012300:	2b00      	cmp	r3, #0
 8012302:	d018      	beq.n	8012336 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	68da      	ldr	r2, [r3, #12]
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801230c:	441a      	add	r2, r3
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	68da      	ldr	r2, [r3, #12]
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	689b      	ldr	r3, [r3, #8]
 801231a:	429a      	cmp	r2, r3
 801231c:	d303      	bcc.n	8012326 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681a      	ldr	r2, [r3, #0]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	68d9      	ldr	r1, [r3, #12]
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801232e:	461a      	mov	r2, r3
 8012330:	6838      	ldr	r0, [r7, #0]
 8012332:	f003 fb4b 	bl	80159cc <memcpy>
	}
}
 8012336:	bf00      	nop
 8012338:	3708      	adds	r7, #8
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}

0801233e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801233e:	b580      	push	{r7, lr}
 8012340:	b084      	sub	sp, #16
 8012342:	af00      	add	r7, sp, #0
 8012344:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012346:	f001 ff1d 	bl	8014184 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012350:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012352:	e011      	b.n	8012378 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012358:	2b00      	cmp	r3, #0
 801235a:	d012      	beq.n	8012382 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	3324      	adds	r3, #36	; 0x24
 8012360:	4618      	mov	r0, r3
 8012362:	f000 fee3 	bl	801312c <xTaskRemoveFromEventList>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	d001      	beq.n	8012370 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801236c:	f000 ffba 	bl	80132e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012370:	7bfb      	ldrb	r3, [r7, #15]
 8012372:	3b01      	subs	r3, #1
 8012374:	b2db      	uxtb	r3, r3
 8012376:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801237c:	2b00      	cmp	r3, #0
 801237e:	dce9      	bgt.n	8012354 <prvUnlockQueue+0x16>
 8012380:	e000      	b.n	8012384 <prvUnlockQueue+0x46>
					break;
 8012382:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	22ff      	movs	r2, #255	; 0xff
 8012388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801238c:	f001 ff2a 	bl	80141e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012390:	f001 fef8 	bl	8014184 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801239a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801239c:	e011      	b.n	80123c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	691b      	ldr	r3, [r3, #16]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d012      	beq.n	80123cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	3310      	adds	r3, #16
 80123aa:	4618      	mov	r0, r3
 80123ac:	f000 febe 	bl	801312c <xTaskRemoveFromEventList>
 80123b0:	4603      	mov	r3, r0
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d001      	beq.n	80123ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80123b6:	f000 ff95 	bl	80132e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80123ba:	7bbb      	ldrb	r3, [r7, #14]
 80123bc:	3b01      	subs	r3, #1
 80123be:	b2db      	uxtb	r3, r3
 80123c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80123c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	dce9      	bgt.n	801239e <prvUnlockQueue+0x60>
 80123ca:	e000      	b.n	80123ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80123cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	22ff      	movs	r2, #255	; 0xff
 80123d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80123d6:	f001 ff05 	bl	80141e4 <vPortExitCritical>
}
 80123da:	bf00      	nop
 80123dc:	3710      	adds	r7, #16
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}

080123e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80123e2:	b580      	push	{r7, lr}
 80123e4:	b084      	sub	sp, #16
 80123e6:	af00      	add	r7, sp, #0
 80123e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80123ea:	f001 fecb 	bl	8014184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d102      	bne.n	80123fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80123f6:	2301      	movs	r3, #1
 80123f8:	60fb      	str	r3, [r7, #12]
 80123fa:	e001      	b.n	8012400 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80123fc:	2300      	movs	r3, #0
 80123fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012400:	f001 fef0 	bl	80141e4 <vPortExitCritical>

	return xReturn;
 8012404:	68fb      	ldr	r3, [r7, #12]
}
 8012406:	4618      	mov	r0, r3
 8012408:	3710      	adds	r7, #16
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}

0801240e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801240e:	b580      	push	{r7, lr}
 8012410:	b084      	sub	sp, #16
 8012412:	af00      	add	r7, sp, #0
 8012414:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012416:	f001 feb5 	bl	8014184 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012422:	429a      	cmp	r2, r3
 8012424:	d102      	bne.n	801242c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012426:	2301      	movs	r3, #1
 8012428:	60fb      	str	r3, [r7, #12]
 801242a:	e001      	b.n	8012430 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801242c:	2300      	movs	r3, #0
 801242e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012430:	f001 fed8 	bl	80141e4 <vPortExitCritical>

	return xReturn;
 8012434:	68fb      	ldr	r3, [r7, #12]
}
 8012436:	4618      	mov	r0, r3
 8012438:	3710      	adds	r7, #16
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}
	...

08012440 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012440:	b480      	push	{r7}
 8012442:	b085      	sub	sp, #20
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801244a:	2300      	movs	r3, #0
 801244c:	60fb      	str	r3, [r7, #12]
 801244e:	e014      	b.n	801247a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012450:	4a0f      	ldr	r2, [pc, #60]	; (8012490 <vQueueAddToRegistry+0x50>)
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d10b      	bne.n	8012474 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801245c:	490c      	ldr	r1, [pc, #48]	; (8012490 <vQueueAddToRegistry+0x50>)
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	683a      	ldr	r2, [r7, #0]
 8012462:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012466:	4a0a      	ldr	r2, [pc, #40]	; (8012490 <vQueueAddToRegistry+0x50>)
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	00db      	lsls	r3, r3, #3
 801246c:	4413      	add	r3, r2
 801246e:	687a      	ldr	r2, [r7, #4]
 8012470:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012472:	e006      	b.n	8012482 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	3301      	adds	r3, #1
 8012478:	60fb      	str	r3, [r7, #12]
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	2b07      	cmp	r3, #7
 801247e:	d9e7      	bls.n	8012450 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012480:	bf00      	nop
 8012482:	bf00      	nop
 8012484:	3714      	adds	r7, #20
 8012486:	46bd      	mov	sp, r7
 8012488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248c:	4770      	bx	lr
 801248e:	bf00      	nop
 8012490:	20007804 	.word	0x20007804

08012494 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012494:	b480      	push	{r7}
 8012496:	b085      	sub	sp, #20
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801249c:	2300      	movs	r3, #0
 801249e:	60fb      	str	r3, [r7, #12]
 80124a0:	e016      	b.n	80124d0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80124a2:	4a10      	ldr	r2, [pc, #64]	; (80124e4 <vQueueUnregisterQueue+0x50>)
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	00db      	lsls	r3, r3, #3
 80124a8:	4413      	add	r3, r2
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	687a      	ldr	r2, [r7, #4]
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d10b      	bne.n	80124ca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80124b2:	4a0c      	ldr	r2, [pc, #48]	; (80124e4 <vQueueUnregisterQueue+0x50>)
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	2100      	movs	r1, #0
 80124b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80124bc:	4a09      	ldr	r2, [pc, #36]	; (80124e4 <vQueueUnregisterQueue+0x50>)
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	00db      	lsls	r3, r3, #3
 80124c2:	4413      	add	r3, r2
 80124c4:	2200      	movs	r2, #0
 80124c6:	605a      	str	r2, [r3, #4]
				break;
 80124c8:	e006      	b.n	80124d8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	3301      	adds	r3, #1
 80124ce:	60fb      	str	r3, [r7, #12]
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	2b07      	cmp	r3, #7
 80124d4:	d9e5      	bls.n	80124a2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80124d6:	bf00      	nop
 80124d8:	bf00      	nop
 80124da:	3714      	adds	r7, #20
 80124dc:	46bd      	mov	sp, r7
 80124de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e2:	4770      	bx	lr
 80124e4:	20007804 	.word	0x20007804

080124e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b086      	sub	sp, #24
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80124f8:	f001 fe44 	bl	8014184 <vPortEnterCritical>
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012502:	b25b      	sxtb	r3, r3
 8012504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012508:	d103      	bne.n	8012512 <vQueueWaitForMessageRestricted+0x2a>
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	2200      	movs	r2, #0
 801250e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012518:	b25b      	sxtb	r3, r3
 801251a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801251e:	d103      	bne.n	8012528 <vQueueWaitForMessageRestricted+0x40>
 8012520:	697b      	ldr	r3, [r7, #20]
 8012522:	2200      	movs	r2, #0
 8012524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012528:	f001 fe5c 	bl	80141e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012530:	2b00      	cmp	r3, #0
 8012532:	d106      	bne.n	8012542 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	3324      	adds	r3, #36	; 0x24
 8012538:	687a      	ldr	r2, [r7, #4]
 801253a:	68b9      	ldr	r1, [r7, #8]
 801253c:	4618      	mov	r0, r3
 801253e:	f000 fdc9 	bl	80130d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012542:	6978      	ldr	r0, [r7, #20]
 8012544:	f7ff fefb 	bl	801233e <prvUnlockQueue>
	}
 8012548:	bf00      	nop
 801254a:	3718      	adds	r7, #24
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012550:	b580      	push	{r7, lr}
 8012552:	b08e      	sub	sp, #56	; 0x38
 8012554:	af04      	add	r7, sp, #16
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
 801255c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801255e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012560:	2b00      	cmp	r3, #0
 8012562:	d10a      	bne.n	801257a <xTaskCreateStatic+0x2a>
	__asm volatile
 8012564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012568:	f383 8811 	msr	BASEPRI, r3
 801256c:	f3bf 8f6f 	isb	sy
 8012570:	f3bf 8f4f 	dsb	sy
 8012574:	623b      	str	r3, [r7, #32]
}
 8012576:	bf00      	nop
 8012578:	e7fe      	b.n	8012578 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801257a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801257c:	2b00      	cmp	r3, #0
 801257e:	d10a      	bne.n	8012596 <xTaskCreateStatic+0x46>
	__asm volatile
 8012580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012584:	f383 8811 	msr	BASEPRI, r3
 8012588:	f3bf 8f6f 	isb	sy
 801258c:	f3bf 8f4f 	dsb	sy
 8012590:	61fb      	str	r3, [r7, #28]
}
 8012592:	bf00      	nop
 8012594:	e7fe      	b.n	8012594 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012596:	23bc      	movs	r3, #188	; 0xbc
 8012598:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801259a:	693b      	ldr	r3, [r7, #16]
 801259c:	2bbc      	cmp	r3, #188	; 0xbc
 801259e:	d00a      	beq.n	80125b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80125a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a4:	f383 8811 	msr	BASEPRI, r3
 80125a8:	f3bf 8f6f 	isb	sy
 80125ac:	f3bf 8f4f 	dsb	sy
 80125b0:	61bb      	str	r3, [r7, #24]
}
 80125b2:	bf00      	nop
 80125b4:	e7fe      	b.n	80125b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80125b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80125b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d01e      	beq.n	80125fc <xTaskCreateStatic+0xac>
 80125be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d01b      	beq.n	80125fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80125c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80125c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80125ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d0:	2202      	movs	r2, #2
 80125d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80125d6:	2300      	movs	r3, #0
 80125d8:	9303      	str	r3, [sp, #12]
 80125da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125dc:	9302      	str	r3, [sp, #8]
 80125de:	f107 0314 	add.w	r3, r7, #20
 80125e2:	9301      	str	r3, [sp, #4]
 80125e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e6:	9300      	str	r3, [sp, #0]
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	687a      	ldr	r2, [r7, #4]
 80125ec:	68b9      	ldr	r1, [r7, #8]
 80125ee:	68f8      	ldr	r0, [r7, #12]
 80125f0:	f000 f850 	bl	8012694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80125f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125f6:	f000 f8f3 	bl	80127e0 <prvAddNewTaskToReadyList>
 80125fa:	e001      	b.n	8012600 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80125fc:	2300      	movs	r3, #0
 80125fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012600:	697b      	ldr	r3, [r7, #20]
	}
 8012602:	4618      	mov	r0, r3
 8012604:	3728      	adds	r7, #40	; 0x28
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}

0801260a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801260a:	b580      	push	{r7, lr}
 801260c:	b08c      	sub	sp, #48	; 0x30
 801260e:	af04      	add	r7, sp, #16
 8012610:	60f8      	str	r0, [r7, #12]
 8012612:	60b9      	str	r1, [r7, #8]
 8012614:	603b      	str	r3, [r7, #0]
 8012616:	4613      	mov	r3, r2
 8012618:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801261a:	88fb      	ldrh	r3, [r7, #6]
 801261c:	009b      	lsls	r3, r3, #2
 801261e:	4618      	mov	r0, r3
 8012620:	f001 fed2 	bl	80143c8 <pvPortMalloc>
 8012624:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012626:	697b      	ldr	r3, [r7, #20]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d00e      	beq.n	801264a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801262c:	20bc      	movs	r0, #188	; 0xbc
 801262e:	f001 fecb 	bl	80143c8 <pvPortMalloc>
 8012632:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012634:	69fb      	ldr	r3, [r7, #28]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d003      	beq.n	8012642 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801263a:	69fb      	ldr	r3, [r7, #28]
 801263c:	697a      	ldr	r2, [r7, #20]
 801263e:	631a      	str	r2, [r3, #48]	; 0x30
 8012640:	e005      	b.n	801264e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012642:	6978      	ldr	r0, [r7, #20]
 8012644:	f001 ff8c 	bl	8014560 <vPortFree>
 8012648:	e001      	b.n	801264e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801264a:	2300      	movs	r3, #0
 801264c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801264e:	69fb      	ldr	r3, [r7, #28]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d017      	beq.n	8012684 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012654:	69fb      	ldr	r3, [r7, #28]
 8012656:	2200      	movs	r2, #0
 8012658:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801265c:	88fa      	ldrh	r2, [r7, #6]
 801265e:	2300      	movs	r3, #0
 8012660:	9303      	str	r3, [sp, #12]
 8012662:	69fb      	ldr	r3, [r7, #28]
 8012664:	9302      	str	r3, [sp, #8]
 8012666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012668:	9301      	str	r3, [sp, #4]
 801266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266c:	9300      	str	r3, [sp, #0]
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	68b9      	ldr	r1, [r7, #8]
 8012672:	68f8      	ldr	r0, [r7, #12]
 8012674:	f000 f80e 	bl	8012694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012678:	69f8      	ldr	r0, [r7, #28]
 801267a:	f000 f8b1 	bl	80127e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801267e:	2301      	movs	r3, #1
 8012680:	61bb      	str	r3, [r7, #24]
 8012682:	e002      	b.n	801268a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012684:	f04f 33ff 	mov.w	r3, #4294967295
 8012688:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801268a:	69bb      	ldr	r3, [r7, #24]
	}
 801268c:	4618      	mov	r0, r3
 801268e:	3720      	adds	r7, #32
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}

08012694 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b088      	sub	sp, #32
 8012698:	af00      	add	r7, sp, #0
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	60b9      	str	r1, [r7, #8]
 801269e:	607a      	str	r2, [r7, #4]
 80126a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80126a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	009b      	lsls	r3, r3, #2
 80126aa:	461a      	mov	r2, r3
 80126ac:	21a5      	movs	r1, #165	; 0xa5
 80126ae:	f003 f9b5 	bl	8015a1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80126b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80126bc:	3b01      	subs	r3, #1
 80126be:	009b      	lsls	r3, r3, #2
 80126c0:	4413      	add	r3, r2
 80126c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80126c4:	69bb      	ldr	r3, [r7, #24]
 80126c6:	f023 0307 	bic.w	r3, r3, #7
 80126ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80126cc:	69bb      	ldr	r3, [r7, #24]
 80126ce:	f003 0307 	and.w	r3, r3, #7
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d00a      	beq.n	80126ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80126d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126da:	f383 8811 	msr	BASEPRI, r3
 80126de:	f3bf 8f6f 	isb	sy
 80126e2:	f3bf 8f4f 	dsb	sy
 80126e6:	617b      	str	r3, [r7, #20]
}
 80126e8:	bf00      	nop
 80126ea:	e7fe      	b.n	80126ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d01f      	beq.n	8012732 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80126f2:	2300      	movs	r3, #0
 80126f4:	61fb      	str	r3, [r7, #28]
 80126f6:	e012      	b.n	801271e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80126f8:	68ba      	ldr	r2, [r7, #8]
 80126fa:	69fb      	ldr	r3, [r7, #28]
 80126fc:	4413      	add	r3, r2
 80126fe:	7819      	ldrb	r1, [r3, #0]
 8012700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012702:	69fb      	ldr	r3, [r7, #28]
 8012704:	4413      	add	r3, r2
 8012706:	3334      	adds	r3, #52	; 0x34
 8012708:	460a      	mov	r2, r1
 801270a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801270c:	68ba      	ldr	r2, [r7, #8]
 801270e:	69fb      	ldr	r3, [r7, #28]
 8012710:	4413      	add	r3, r2
 8012712:	781b      	ldrb	r3, [r3, #0]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d006      	beq.n	8012726 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	3301      	adds	r3, #1
 801271c:	61fb      	str	r3, [r7, #28]
 801271e:	69fb      	ldr	r3, [r7, #28]
 8012720:	2b0f      	cmp	r3, #15
 8012722:	d9e9      	bls.n	80126f8 <prvInitialiseNewTask+0x64>
 8012724:	e000      	b.n	8012728 <prvInitialiseNewTask+0x94>
			{
				break;
 8012726:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272a:	2200      	movs	r2, #0
 801272c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012730:	e003      	b.n	801273a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012734:	2200      	movs	r2, #0
 8012736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801273c:	2b37      	cmp	r3, #55	; 0x37
 801273e:	d901      	bls.n	8012744 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012740:	2337      	movs	r3, #55	; 0x37
 8012742:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012748:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801274c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801274e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012752:	2200      	movs	r2, #0
 8012754:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012758:	3304      	adds	r3, #4
 801275a:	4618      	mov	r0, r3
 801275c:	f7fe fe56 	bl	801140c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012762:	3318      	adds	r3, #24
 8012764:	4618      	mov	r0, r3
 8012766:	f7fe fe51 	bl	801140c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801276e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012772:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012778:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801277e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012782:	2200      	movs	r2, #0
 8012784:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278a:	2200      	movs	r2, #0
 801278c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012792:	3354      	adds	r3, #84	; 0x54
 8012794:	2260      	movs	r2, #96	; 0x60
 8012796:	2100      	movs	r1, #0
 8012798:	4618      	mov	r0, r3
 801279a:	f003 f93f 	bl	8015a1c <memset>
 801279e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a0:	4a0c      	ldr	r2, [pc, #48]	; (80127d4 <prvInitialiseNewTask+0x140>)
 80127a2:	659a      	str	r2, [r3, #88]	; 0x58
 80127a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a6:	4a0c      	ldr	r2, [pc, #48]	; (80127d8 <prvInitialiseNewTask+0x144>)
 80127a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80127aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ac:	4a0b      	ldr	r2, [pc, #44]	; (80127dc <prvInitialiseNewTask+0x148>)
 80127ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80127b0:	683a      	ldr	r2, [r7, #0]
 80127b2:	68f9      	ldr	r1, [r7, #12]
 80127b4:	69b8      	ldr	r0, [r7, #24]
 80127b6:	f001 fbb7 	bl	8013f28 <pxPortInitialiseStack>
 80127ba:	4602      	mov	r2, r0
 80127bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80127c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d002      	beq.n	80127cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80127c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80127cc:	bf00      	nop
 80127ce:	3720      	adds	r7, #32
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	0801bffc 	.word	0x0801bffc
 80127d8:	0801c01c 	.word	0x0801c01c
 80127dc:	0801bfdc 	.word	0x0801bfdc

080127e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b082      	sub	sp, #8
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80127e8:	f001 fccc 	bl	8014184 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80127ec:	4b2d      	ldr	r3, [pc, #180]	; (80128a4 <prvAddNewTaskToReadyList+0xc4>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	3301      	adds	r3, #1
 80127f2:	4a2c      	ldr	r2, [pc, #176]	; (80128a4 <prvAddNewTaskToReadyList+0xc4>)
 80127f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80127f6:	4b2c      	ldr	r3, [pc, #176]	; (80128a8 <prvAddNewTaskToReadyList+0xc8>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d109      	bne.n	8012812 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80127fe:	4a2a      	ldr	r2, [pc, #168]	; (80128a8 <prvAddNewTaskToReadyList+0xc8>)
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012804:	4b27      	ldr	r3, [pc, #156]	; (80128a4 <prvAddNewTaskToReadyList+0xc4>)
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	2b01      	cmp	r3, #1
 801280a:	d110      	bne.n	801282e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801280c:	f000 fd8e 	bl	801332c <prvInitialiseTaskLists>
 8012810:	e00d      	b.n	801282e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012812:	4b26      	ldr	r3, [pc, #152]	; (80128ac <prvAddNewTaskToReadyList+0xcc>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d109      	bne.n	801282e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801281a:	4b23      	ldr	r3, [pc, #140]	; (80128a8 <prvAddNewTaskToReadyList+0xc8>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012824:	429a      	cmp	r2, r3
 8012826:	d802      	bhi.n	801282e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012828:	4a1f      	ldr	r2, [pc, #124]	; (80128a8 <prvAddNewTaskToReadyList+0xc8>)
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801282e:	4b20      	ldr	r3, [pc, #128]	; (80128b0 <prvAddNewTaskToReadyList+0xd0>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	3301      	adds	r3, #1
 8012834:	4a1e      	ldr	r2, [pc, #120]	; (80128b0 <prvAddNewTaskToReadyList+0xd0>)
 8012836:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012838:	4b1d      	ldr	r3, [pc, #116]	; (80128b0 <prvAddNewTaskToReadyList+0xd0>)
 801283a:	681a      	ldr	r2, [r3, #0]
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012844:	4b1b      	ldr	r3, [pc, #108]	; (80128b4 <prvAddNewTaskToReadyList+0xd4>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	429a      	cmp	r2, r3
 801284a:	d903      	bls.n	8012854 <prvAddNewTaskToReadyList+0x74>
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012850:	4a18      	ldr	r2, [pc, #96]	; (80128b4 <prvAddNewTaskToReadyList+0xd4>)
 8012852:	6013      	str	r3, [r2, #0]
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012858:	4613      	mov	r3, r2
 801285a:	009b      	lsls	r3, r3, #2
 801285c:	4413      	add	r3, r2
 801285e:	009b      	lsls	r3, r3, #2
 8012860:	4a15      	ldr	r2, [pc, #84]	; (80128b8 <prvAddNewTaskToReadyList+0xd8>)
 8012862:	441a      	add	r2, r3
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	3304      	adds	r3, #4
 8012868:	4619      	mov	r1, r3
 801286a:	4610      	mov	r0, r2
 801286c:	f7fe fddb 	bl	8011426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012870:	f001 fcb8 	bl	80141e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012874:	4b0d      	ldr	r3, [pc, #52]	; (80128ac <prvAddNewTaskToReadyList+0xcc>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d00e      	beq.n	801289a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801287c:	4b0a      	ldr	r3, [pc, #40]	; (80128a8 <prvAddNewTaskToReadyList+0xc8>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012886:	429a      	cmp	r2, r3
 8012888:	d207      	bcs.n	801289a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801288a:	4b0c      	ldr	r3, [pc, #48]	; (80128bc <prvAddNewTaskToReadyList+0xdc>)
 801288c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012890:	601a      	str	r2, [r3, #0]
 8012892:	f3bf 8f4f 	dsb	sy
 8012896:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801289a:	bf00      	nop
 801289c:	3708      	adds	r7, #8
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}
 80128a2:	bf00      	nop
 80128a4:	200019ac 	.word	0x200019ac
 80128a8:	200014d8 	.word	0x200014d8
 80128ac:	200019b8 	.word	0x200019b8
 80128b0:	200019c8 	.word	0x200019c8
 80128b4:	200019b4 	.word	0x200019b4
 80128b8:	200014dc 	.word	0x200014dc
 80128bc:	e000ed04 	.word	0xe000ed04

080128c0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b084      	sub	sp, #16
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80128c8:	f001 fc5c 	bl	8014184 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d102      	bne.n	80128d8 <vTaskDelete+0x18>
 80128d2:	4b2c      	ldr	r3, [pc, #176]	; (8012984 <vTaskDelete+0xc4>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	e000      	b.n	80128da <vTaskDelete+0x1a>
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	3304      	adds	r3, #4
 80128e0:	4618      	mov	r0, r3
 80128e2:	f7fe fdfd 	bl	80114e0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d004      	beq.n	80128f8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	3318      	adds	r3, #24
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7fe fdf4 	bl	80114e0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80128f8:	4b23      	ldr	r3, [pc, #140]	; (8012988 <vTaskDelete+0xc8>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	3301      	adds	r3, #1
 80128fe:	4a22      	ldr	r2, [pc, #136]	; (8012988 <vTaskDelete+0xc8>)
 8012900:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8012902:	4b20      	ldr	r3, [pc, #128]	; (8012984 <vTaskDelete+0xc4>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	68fa      	ldr	r2, [r7, #12]
 8012908:	429a      	cmp	r2, r3
 801290a:	d10b      	bne.n	8012924 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	3304      	adds	r3, #4
 8012910:	4619      	mov	r1, r3
 8012912:	481e      	ldr	r0, [pc, #120]	; (801298c <vTaskDelete+0xcc>)
 8012914:	f7fe fd87 	bl	8011426 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8012918:	4b1d      	ldr	r3, [pc, #116]	; (8012990 <vTaskDelete+0xd0>)
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	3301      	adds	r3, #1
 801291e:	4a1c      	ldr	r2, [pc, #112]	; (8012990 <vTaskDelete+0xd0>)
 8012920:	6013      	str	r3, [r2, #0]
 8012922:	e009      	b.n	8012938 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8012924:	4b1b      	ldr	r3, [pc, #108]	; (8012994 <vTaskDelete+0xd4>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	3b01      	subs	r3, #1
 801292a:	4a1a      	ldr	r2, [pc, #104]	; (8012994 <vTaskDelete+0xd4>)
 801292c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801292e:	68f8      	ldr	r0, [r7, #12]
 8012930:	f000 fd6a 	bl	8013408 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8012934:	f000 fd9c 	bl	8013470 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8012938:	f001 fc54 	bl	80141e4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801293c:	4b16      	ldr	r3, [pc, #88]	; (8012998 <vTaskDelete+0xd8>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d01b      	beq.n	801297c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8012944:	4b0f      	ldr	r3, [pc, #60]	; (8012984 <vTaskDelete+0xc4>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	68fa      	ldr	r2, [r7, #12]
 801294a:	429a      	cmp	r2, r3
 801294c:	d116      	bne.n	801297c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801294e:	4b13      	ldr	r3, [pc, #76]	; (801299c <vTaskDelete+0xdc>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d00a      	beq.n	801296c <vTaskDelete+0xac>
	__asm volatile
 8012956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801295a:	f383 8811 	msr	BASEPRI, r3
 801295e:	f3bf 8f6f 	isb	sy
 8012962:	f3bf 8f4f 	dsb	sy
 8012966:	60bb      	str	r3, [r7, #8]
}
 8012968:	bf00      	nop
 801296a:	e7fe      	b.n	801296a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801296c:	4b0c      	ldr	r3, [pc, #48]	; (80129a0 <vTaskDelete+0xe0>)
 801296e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012972:	601a      	str	r2, [r3, #0]
 8012974:	f3bf 8f4f 	dsb	sy
 8012978:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801297c:	bf00      	nop
 801297e:	3710      	adds	r7, #16
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}
 8012984:	200014d8 	.word	0x200014d8
 8012988:	200019c8 	.word	0x200019c8
 801298c:	20001980 	.word	0x20001980
 8012990:	20001994 	.word	0x20001994
 8012994:	200019ac 	.word	0x200019ac
 8012998:	200019b8 	.word	0x200019b8
 801299c:	200019d4 	.word	0x200019d4
 80129a0:	e000ed04 	.word	0xe000ed04

080129a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b084      	sub	sp, #16
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80129ac:	2300      	movs	r3, #0
 80129ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d017      	beq.n	80129e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80129b6:	4b13      	ldr	r3, [pc, #76]	; (8012a04 <vTaskDelay+0x60>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d00a      	beq.n	80129d4 <vTaskDelay+0x30>
	__asm volatile
 80129be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129c2:	f383 8811 	msr	BASEPRI, r3
 80129c6:	f3bf 8f6f 	isb	sy
 80129ca:	f3bf 8f4f 	dsb	sy
 80129ce:	60bb      	str	r3, [r7, #8]
}
 80129d0:	bf00      	nop
 80129d2:	e7fe      	b.n	80129d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80129d4:	f000 f980 	bl	8012cd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80129d8:	2100      	movs	r1, #0
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f000 ff02 	bl	80137e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80129e0:	f000 f988 	bl	8012cf4 <xTaskResumeAll>
 80129e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d107      	bne.n	80129fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80129ec:	4b06      	ldr	r3, [pc, #24]	; (8012a08 <vTaskDelay+0x64>)
 80129ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129f2:	601a      	str	r2, [r3, #0]
 80129f4:	f3bf 8f4f 	dsb	sy
 80129f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80129fc:	bf00      	nop
 80129fe:	3710      	adds	r7, #16
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}
 8012a04:	200019d4 	.word	0x200019d4
 8012a08:	e000ed04 	.word	0xe000ed04

08012a0c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b088      	sub	sp, #32
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8012a18:	69bb      	ldr	r3, [r7, #24]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d10a      	bne.n	8012a34 <eTaskGetState+0x28>
	__asm volatile
 8012a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a22:	f383 8811 	msr	BASEPRI, r3
 8012a26:	f3bf 8f6f 	isb	sy
 8012a2a:	f3bf 8f4f 	dsb	sy
 8012a2e:	60bb      	str	r3, [r7, #8]
}
 8012a30:	bf00      	nop
 8012a32:	e7fe      	b.n	8012a32 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8012a34:	4b23      	ldr	r3, [pc, #140]	; (8012ac4 <eTaskGetState+0xb8>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	69ba      	ldr	r2, [r7, #24]
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d102      	bne.n	8012a44 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	77fb      	strb	r3, [r7, #31]
 8012a42:	e03a      	b.n	8012aba <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8012a44:	f001 fb9e 	bl	8014184 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8012a48:	69bb      	ldr	r3, [r7, #24]
 8012a4a:	695b      	ldr	r3, [r3, #20]
 8012a4c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8012a4e:	4b1e      	ldr	r3, [pc, #120]	; (8012ac8 <eTaskGetState+0xbc>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8012a54:	4b1d      	ldr	r3, [pc, #116]	; (8012acc <eTaskGetState+0xc0>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8012a5a:	f001 fbc3 	bl	80141e4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8012a5e:	697a      	ldr	r2, [r7, #20]
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d003      	beq.n	8012a6e <eTaskGetState+0x62>
 8012a66:	697a      	ldr	r2, [r7, #20]
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d102      	bne.n	8012a74 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8012a6e:	2302      	movs	r3, #2
 8012a70:	77fb      	strb	r3, [r7, #31]
 8012a72:	e022      	b.n	8012aba <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	4a16      	ldr	r2, [pc, #88]	; (8012ad0 <eTaskGetState+0xc4>)
 8012a78:	4293      	cmp	r3, r2
 8012a7a:	d112      	bne.n	8012aa2 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8012a7c:	69bb      	ldr	r3, [r7, #24]
 8012a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d10b      	bne.n	8012a9c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012a84:	69bb      	ldr	r3, [r7, #24]
 8012a86:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	2b01      	cmp	r3, #1
 8012a8e:	d102      	bne.n	8012a96 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8012a90:	2302      	movs	r3, #2
 8012a92:	77fb      	strb	r3, [r7, #31]
 8012a94:	e011      	b.n	8012aba <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8012a96:	2303      	movs	r3, #3
 8012a98:	77fb      	strb	r3, [r7, #31]
 8012a9a:	e00e      	b.n	8012aba <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8012a9c:	2302      	movs	r3, #2
 8012a9e:	77fb      	strb	r3, [r7, #31]
 8012aa0:	e00b      	b.n	8012aba <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	4a0b      	ldr	r2, [pc, #44]	; (8012ad4 <eTaskGetState+0xc8>)
 8012aa6:	4293      	cmp	r3, r2
 8012aa8:	d002      	beq.n	8012ab0 <eTaskGetState+0xa4>
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d102      	bne.n	8012ab6 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8012ab0:	2304      	movs	r3, #4
 8012ab2:	77fb      	strb	r3, [r7, #31]
 8012ab4:	e001      	b.n	8012aba <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8012aba:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012abc:	4618      	mov	r0, r3
 8012abe:	3720      	adds	r7, #32
 8012ac0:	46bd      	mov	sp, r7
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	200014d8 	.word	0x200014d8
 8012ac8:	20001964 	.word	0x20001964
 8012acc:	20001968 	.word	0x20001968
 8012ad0:	20001998 	.word	0x20001998
 8012ad4:	20001980 	.word	0x20001980

08012ad8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8012ad8:	b480      	push	{r7}
 8012ada:	b087      	sub	sp, #28
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d10a      	bne.n	8012b04 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8012aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af2:	f383 8811 	msr	BASEPRI, r3
 8012af6:	f3bf 8f6f 	isb	sy
 8012afa:	f3bf 8f4f 	dsb	sy
 8012afe:	60fb      	str	r3, [r7, #12]
}
 8012b00:	bf00      	nop
 8012b02:	e7fe      	b.n	8012b02 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	695b      	ldr	r3, [r3, #20]
 8012b08:	4a0a      	ldr	r2, [pc, #40]	; (8012b34 <prvTaskIsTaskSuspended+0x5c>)
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d10a      	bne.n	8012b24 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8012b0e:	693b      	ldr	r3, [r7, #16]
 8012b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b12:	4a09      	ldr	r2, [pc, #36]	; (8012b38 <prvTaskIsTaskSuspended+0x60>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d005      	beq.n	8012b24 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d101      	bne.n	8012b24 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8012b20:	2301      	movs	r3, #1
 8012b22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012b24:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012b26:	4618      	mov	r0, r3
 8012b28:	371c      	adds	r7, #28
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b30:	4770      	bx	lr
 8012b32:	bf00      	nop
 8012b34:	20001998 	.word	0x20001998
 8012b38:	2000196c 	.word	0x2000196c

08012b3c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d10a      	bne.n	8012b64 <vTaskResume+0x28>
	__asm volatile
 8012b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b52:	f383 8811 	msr	BASEPRI, r3
 8012b56:	f3bf 8f6f 	isb	sy
 8012b5a:	f3bf 8f4f 	dsb	sy
 8012b5e:	60bb      	str	r3, [r7, #8]
}
 8012b60:	bf00      	nop
 8012b62:	e7fe      	b.n	8012b62 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8012b64:	4b20      	ldr	r3, [pc, #128]	; (8012be8 <vTaskResume+0xac>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	68fa      	ldr	r2, [r7, #12]
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d038      	beq.n	8012be0 <vTaskResume+0xa4>
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d035      	beq.n	8012be0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8012b74:	f001 fb06 	bl	8014184 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8012b78:	68f8      	ldr	r0, [r7, #12]
 8012b7a:	f7ff ffad 	bl	8012ad8 <prvTaskIsTaskSuspended>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d02b      	beq.n	8012bdc <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	3304      	adds	r3, #4
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7fe fca9 	bl	80114e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b92:	4b16      	ldr	r3, [pc, #88]	; (8012bec <vTaskResume+0xb0>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d903      	bls.n	8012ba2 <vTaskResume+0x66>
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b9e:	4a13      	ldr	r2, [pc, #76]	; (8012bec <vTaskResume+0xb0>)
 8012ba0:	6013      	str	r3, [r2, #0]
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ba6:	4613      	mov	r3, r2
 8012ba8:	009b      	lsls	r3, r3, #2
 8012baa:	4413      	add	r3, r2
 8012bac:	009b      	lsls	r3, r3, #2
 8012bae:	4a10      	ldr	r2, [pc, #64]	; (8012bf0 <vTaskResume+0xb4>)
 8012bb0:	441a      	add	r2, r3
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	3304      	adds	r3, #4
 8012bb6:	4619      	mov	r1, r3
 8012bb8:	4610      	mov	r0, r2
 8012bba:	f7fe fc34 	bl	8011426 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bc2:	4b09      	ldr	r3, [pc, #36]	; (8012be8 <vTaskResume+0xac>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d307      	bcc.n	8012bdc <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8012bcc:	4b09      	ldr	r3, [pc, #36]	; (8012bf4 <vTaskResume+0xb8>)
 8012bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bd2:	601a      	str	r2, [r3, #0]
 8012bd4:	f3bf 8f4f 	dsb	sy
 8012bd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8012bdc:	f001 fb02 	bl	80141e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012be0:	bf00      	nop
 8012be2:	3710      	adds	r7, #16
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}
 8012be8:	200014d8 	.word	0x200014d8
 8012bec:	200019b4 	.word	0x200019b4
 8012bf0:	200014dc 	.word	0x200014dc
 8012bf4:	e000ed04 	.word	0xe000ed04

08012bf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b08a      	sub	sp, #40	; 0x28
 8012bfc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012bfe:	2300      	movs	r3, #0
 8012c00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012c02:	2300      	movs	r3, #0
 8012c04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012c06:	463a      	mov	r2, r7
 8012c08:	1d39      	adds	r1, r7, #4
 8012c0a:	f107 0308 	add.w	r3, r7, #8
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7fe fba8 	bl	8011364 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012c14:	6839      	ldr	r1, [r7, #0]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	68ba      	ldr	r2, [r7, #8]
 8012c1a:	9202      	str	r2, [sp, #8]
 8012c1c:	9301      	str	r3, [sp, #4]
 8012c1e:	2300      	movs	r3, #0
 8012c20:	9300      	str	r3, [sp, #0]
 8012c22:	2300      	movs	r3, #0
 8012c24:	460a      	mov	r2, r1
 8012c26:	4924      	ldr	r1, [pc, #144]	; (8012cb8 <vTaskStartScheduler+0xc0>)
 8012c28:	4824      	ldr	r0, [pc, #144]	; (8012cbc <vTaskStartScheduler+0xc4>)
 8012c2a:	f7ff fc91 	bl	8012550 <xTaskCreateStatic>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	4a23      	ldr	r2, [pc, #140]	; (8012cc0 <vTaskStartScheduler+0xc8>)
 8012c32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012c34:	4b22      	ldr	r3, [pc, #136]	; (8012cc0 <vTaskStartScheduler+0xc8>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d002      	beq.n	8012c42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	617b      	str	r3, [r7, #20]
 8012c40:	e001      	b.n	8012c46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012c42:	2300      	movs	r3, #0
 8012c44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d102      	bne.n	8012c52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012c4c:	f000 fe1e 	bl	801388c <xTimerCreateTimerTask>
 8012c50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	2b01      	cmp	r3, #1
 8012c56:	d11b      	bne.n	8012c90 <vTaskStartScheduler+0x98>
	__asm volatile
 8012c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c5c:	f383 8811 	msr	BASEPRI, r3
 8012c60:	f3bf 8f6f 	isb	sy
 8012c64:	f3bf 8f4f 	dsb	sy
 8012c68:	613b      	str	r3, [r7, #16]
}
 8012c6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012c6c:	4b15      	ldr	r3, [pc, #84]	; (8012cc4 <vTaskStartScheduler+0xcc>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	3354      	adds	r3, #84	; 0x54
 8012c72:	4a15      	ldr	r2, [pc, #84]	; (8012cc8 <vTaskStartScheduler+0xd0>)
 8012c74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012c76:	4b15      	ldr	r3, [pc, #84]	; (8012ccc <vTaskStartScheduler+0xd4>)
 8012c78:	f04f 32ff 	mov.w	r2, #4294967295
 8012c7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012c7e:	4b14      	ldr	r3, [pc, #80]	; (8012cd0 <vTaskStartScheduler+0xd8>)
 8012c80:	2201      	movs	r2, #1
 8012c82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012c84:	4b13      	ldr	r3, [pc, #76]	; (8012cd4 <vTaskStartScheduler+0xdc>)
 8012c86:	2200      	movs	r2, #0
 8012c88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012c8a:	f001 f9d9 	bl	8014040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012c8e:	e00e      	b.n	8012cae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c96:	d10a      	bne.n	8012cae <vTaskStartScheduler+0xb6>
	__asm volatile
 8012c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c9c:	f383 8811 	msr	BASEPRI, r3
 8012ca0:	f3bf 8f6f 	isb	sy
 8012ca4:	f3bf 8f4f 	dsb	sy
 8012ca8:	60fb      	str	r3, [r7, #12]
}
 8012caa:	bf00      	nop
 8012cac:	e7fe      	b.n	8012cac <vTaskStartScheduler+0xb4>
}
 8012cae:	bf00      	nop
 8012cb0:	3718      	adds	r7, #24
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	0801bc60 	.word	0x0801bc60
 8012cbc:	080132fd 	.word	0x080132fd
 8012cc0:	200019d0 	.word	0x200019d0
 8012cc4:	200014d8 	.word	0x200014d8
 8012cc8:	200000dc 	.word	0x200000dc
 8012ccc:	200019cc 	.word	0x200019cc
 8012cd0:	200019b8 	.word	0x200019b8
 8012cd4:	200019b0 	.word	0x200019b0

08012cd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012cd8:	b480      	push	{r7}
 8012cda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012cdc:	4b04      	ldr	r3, [pc, #16]	; (8012cf0 <vTaskSuspendAll+0x18>)
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	4a03      	ldr	r2, [pc, #12]	; (8012cf0 <vTaskSuspendAll+0x18>)
 8012ce4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012ce6:	bf00      	nop
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr
 8012cf0:	200019d4 	.word	0x200019d4

08012cf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b084      	sub	sp, #16
 8012cf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012cfe:	2300      	movs	r3, #0
 8012d00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012d02:	4b42      	ldr	r3, [pc, #264]	; (8012e0c <xTaskResumeAll+0x118>)
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d10a      	bne.n	8012d20 <xTaskResumeAll+0x2c>
	__asm volatile
 8012d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d0e:	f383 8811 	msr	BASEPRI, r3
 8012d12:	f3bf 8f6f 	isb	sy
 8012d16:	f3bf 8f4f 	dsb	sy
 8012d1a:	603b      	str	r3, [r7, #0]
}
 8012d1c:	bf00      	nop
 8012d1e:	e7fe      	b.n	8012d1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012d20:	f001 fa30 	bl	8014184 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012d24:	4b39      	ldr	r3, [pc, #228]	; (8012e0c <xTaskResumeAll+0x118>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	3b01      	subs	r3, #1
 8012d2a:	4a38      	ldr	r2, [pc, #224]	; (8012e0c <xTaskResumeAll+0x118>)
 8012d2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d2e:	4b37      	ldr	r3, [pc, #220]	; (8012e0c <xTaskResumeAll+0x118>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d162      	bne.n	8012dfc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012d36:	4b36      	ldr	r3, [pc, #216]	; (8012e10 <xTaskResumeAll+0x11c>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d05e      	beq.n	8012dfc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012d3e:	e02f      	b.n	8012da0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d40:	4b34      	ldr	r3, [pc, #208]	; (8012e14 <xTaskResumeAll+0x120>)
 8012d42:	68db      	ldr	r3, [r3, #12]
 8012d44:	68db      	ldr	r3, [r3, #12]
 8012d46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	3318      	adds	r3, #24
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7fe fbc7 	bl	80114e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	3304      	adds	r3, #4
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7fe fbc2 	bl	80114e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d60:	4b2d      	ldr	r3, [pc, #180]	; (8012e18 <xTaskResumeAll+0x124>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d903      	bls.n	8012d70 <xTaskResumeAll+0x7c>
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d6c:	4a2a      	ldr	r2, [pc, #168]	; (8012e18 <xTaskResumeAll+0x124>)
 8012d6e:	6013      	str	r3, [r2, #0]
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d74:	4613      	mov	r3, r2
 8012d76:	009b      	lsls	r3, r3, #2
 8012d78:	4413      	add	r3, r2
 8012d7a:	009b      	lsls	r3, r3, #2
 8012d7c:	4a27      	ldr	r2, [pc, #156]	; (8012e1c <xTaskResumeAll+0x128>)
 8012d7e:	441a      	add	r2, r3
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	3304      	adds	r3, #4
 8012d84:	4619      	mov	r1, r3
 8012d86:	4610      	mov	r0, r2
 8012d88:	f7fe fb4d 	bl	8011426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d90:	4b23      	ldr	r3, [pc, #140]	; (8012e20 <xTaskResumeAll+0x12c>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d96:	429a      	cmp	r2, r3
 8012d98:	d302      	bcc.n	8012da0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012d9a:	4b22      	ldr	r3, [pc, #136]	; (8012e24 <xTaskResumeAll+0x130>)
 8012d9c:	2201      	movs	r2, #1
 8012d9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012da0:	4b1c      	ldr	r3, [pc, #112]	; (8012e14 <xTaskResumeAll+0x120>)
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d1cb      	bne.n	8012d40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d001      	beq.n	8012db2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012dae:	f000 fb5f 	bl	8013470 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012db2:	4b1d      	ldr	r3, [pc, #116]	; (8012e28 <xTaskResumeAll+0x134>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d010      	beq.n	8012de0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012dbe:	f000 f847 	bl	8012e50 <xTaskIncrementTick>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d002      	beq.n	8012dce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012dc8:	4b16      	ldr	r3, [pc, #88]	; (8012e24 <xTaskResumeAll+0x130>)
 8012dca:	2201      	movs	r2, #1
 8012dcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	3b01      	subs	r3, #1
 8012dd2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d1f1      	bne.n	8012dbe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012dda:	4b13      	ldr	r3, [pc, #76]	; (8012e28 <xTaskResumeAll+0x134>)
 8012ddc:	2200      	movs	r2, #0
 8012dde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012de0:	4b10      	ldr	r3, [pc, #64]	; (8012e24 <xTaskResumeAll+0x130>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d009      	beq.n	8012dfc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012de8:	2301      	movs	r3, #1
 8012dea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012dec:	4b0f      	ldr	r3, [pc, #60]	; (8012e2c <xTaskResumeAll+0x138>)
 8012dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012df2:	601a      	str	r2, [r3, #0]
 8012df4:	f3bf 8f4f 	dsb	sy
 8012df8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012dfc:	f001 f9f2 	bl	80141e4 <vPortExitCritical>

	return xAlreadyYielded;
 8012e00:	68bb      	ldr	r3, [r7, #8]
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3710      	adds	r7, #16
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	200019d4 	.word	0x200019d4
 8012e10:	200019ac 	.word	0x200019ac
 8012e14:	2000196c 	.word	0x2000196c
 8012e18:	200019b4 	.word	0x200019b4
 8012e1c:	200014dc 	.word	0x200014dc
 8012e20:	200014d8 	.word	0x200014d8
 8012e24:	200019c0 	.word	0x200019c0
 8012e28:	200019bc 	.word	0x200019bc
 8012e2c:	e000ed04 	.word	0xe000ed04

08012e30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012e30:	b480      	push	{r7}
 8012e32:	b083      	sub	sp, #12
 8012e34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012e36:	4b05      	ldr	r3, [pc, #20]	; (8012e4c <xTaskGetTickCount+0x1c>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012e3c:	687b      	ldr	r3, [r7, #4]
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	370c      	adds	r7, #12
 8012e42:	46bd      	mov	sp, r7
 8012e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e48:	4770      	bx	lr
 8012e4a:	bf00      	nop
 8012e4c:	200019b0 	.word	0x200019b0

08012e50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b086      	sub	sp, #24
 8012e54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012e56:	2300      	movs	r3, #0
 8012e58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e5a:	4b4f      	ldr	r3, [pc, #316]	; (8012f98 <xTaskIncrementTick+0x148>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	f040 808f 	bne.w	8012f82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012e64:	4b4d      	ldr	r3, [pc, #308]	; (8012f9c <xTaskIncrementTick+0x14c>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	3301      	adds	r3, #1
 8012e6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012e6c:	4a4b      	ldr	r2, [pc, #300]	; (8012f9c <xTaskIncrementTick+0x14c>)
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d120      	bne.n	8012eba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012e78:	4b49      	ldr	r3, [pc, #292]	; (8012fa0 <xTaskIncrementTick+0x150>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d00a      	beq.n	8012e98 <xTaskIncrementTick+0x48>
	__asm volatile
 8012e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e86:	f383 8811 	msr	BASEPRI, r3
 8012e8a:	f3bf 8f6f 	isb	sy
 8012e8e:	f3bf 8f4f 	dsb	sy
 8012e92:	603b      	str	r3, [r7, #0]
}
 8012e94:	bf00      	nop
 8012e96:	e7fe      	b.n	8012e96 <xTaskIncrementTick+0x46>
 8012e98:	4b41      	ldr	r3, [pc, #260]	; (8012fa0 <xTaskIncrementTick+0x150>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	60fb      	str	r3, [r7, #12]
 8012e9e:	4b41      	ldr	r3, [pc, #260]	; (8012fa4 <xTaskIncrementTick+0x154>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	4a3f      	ldr	r2, [pc, #252]	; (8012fa0 <xTaskIncrementTick+0x150>)
 8012ea4:	6013      	str	r3, [r2, #0]
 8012ea6:	4a3f      	ldr	r2, [pc, #252]	; (8012fa4 <xTaskIncrementTick+0x154>)
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	6013      	str	r3, [r2, #0]
 8012eac:	4b3e      	ldr	r3, [pc, #248]	; (8012fa8 <xTaskIncrementTick+0x158>)
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	4a3d      	ldr	r2, [pc, #244]	; (8012fa8 <xTaskIncrementTick+0x158>)
 8012eb4:	6013      	str	r3, [r2, #0]
 8012eb6:	f000 fadb 	bl	8013470 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012eba:	4b3c      	ldr	r3, [pc, #240]	; (8012fac <xTaskIncrementTick+0x15c>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	693a      	ldr	r2, [r7, #16]
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	d349      	bcc.n	8012f58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012ec4:	4b36      	ldr	r3, [pc, #216]	; (8012fa0 <xTaskIncrementTick+0x150>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d104      	bne.n	8012ed8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ece:	4b37      	ldr	r3, [pc, #220]	; (8012fac <xTaskIncrementTick+0x15c>)
 8012ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ed4:	601a      	str	r2, [r3, #0]
					break;
 8012ed6:	e03f      	b.n	8012f58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ed8:	4b31      	ldr	r3, [pc, #196]	; (8012fa0 <xTaskIncrementTick+0x150>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	68db      	ldr	r3, [r3, #12]
 8012ede:	68db      	ldr	r3, [r3, #12]
 8012ee0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	685b      	ldr	r3, [r3, #4]
 8012ee6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012ee8:	693a      	ldr	r2, [r7, #16]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d203      	bcs.n	8012ef8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012ef0:	4a2e      	ldr	r2, [pc, #184]	; (8012fac <xTaskIncrementTick+0x15c>)
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012ef6:	e02f      	b.n	8012f58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	3304      	adds	r3, #4
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7fe faef 	bl	80114e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d004      	beq.n	8012f14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	3318      	adds	r3, #24
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7fe fae6 	bl	80114e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f18:	4b25      	ldr	r3, [pc, #148]	; (8012fb0 <xTaskIncrementTick+0x160>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d903      	bls.n	8012f28 <xTaskIncrementTick+0xd8>
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f24:	4a22      	ldr	r2, [pc, #136]	; (8012fb0 <xTaskIncrementTick+0x160>)
 8012f26:	6013      	str	r3, [r2, #0]
 8012f28:	68bb      	ldr	r3, [r7, #8]
 8012f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f2c:	4613      	mov	r3, r2
 8012f2e:	009b      	lsls	r3, r3, #2
 8012f30:	4413      	add	r3, r2
 8012f32:	009b      	lsls	r3, r3, #2
 8012f34:	4a1f      	ldr	r2, [pc, #124]	; (8012fb4 <xTaskIncrementTick+0x164>)
 8012f36:	441a      	add	r2, r3
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	3304      	adds	r3, #4
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	4610      	mov	r0, r2
 8012f40:	f7fe fa71 	bl	8011426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f48:	4b1b      	ldr	r3, [pc, #108]	; (8012fb8 <xTaskIncrementTick+0x168>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d3b8      	bcc.n	8012ec4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012f52:	2301      	movs	r3, #1
 8012f54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f56:	e7b5      	b.n	8012ec4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012f58:	4b17      	ldr	r3, [pc, #92]	; (8012fb8 <xTaskIncrementTick+0x168>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f5e:	4915      	ldr	r1, [pc, #84]	; (8012fb4 <xTaskIncrementTick+0x164>)
 8012f60:	4613      	mov	r3, r2
 8012f62:	009b      	lsls	r3, r3, #2
 8012f64:	4413      	add	r3, r2
 8012f66:	009b      	lsls	r3, r3, #2
 8012f68:	440b      	add	r3, r1
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	2b01      	cmp	r3, #1
 8012f6e:	d901      	bls.n	8012f74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012f70:	2301      	movs	r3, #1
 8012f72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012f74:	4b11      	ldr	r3, [pc, #68]	; (8012fbc <xTaskIncrementTick+0x16c>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d007      	beq.n	8012f8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	617b      	str	r3, [r7, #20]
 8012f80:	e004      	b.n	8012f8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012f82:	4b0f      	ldr	r3, [pc, #60]	; (8012fc0 <xTaskIncrementTick+0x170>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	3301      	adds	r3, #1
 8012f88:	4a0d      	ldr	r2, [pc, #52]	; (8012fc0 <xTaskIncrementTick+0x170>)
 8012f8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012f8c:	697b      	ldr	r3, [r7, #20]
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3718      	adds	r7, #24
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}
 8012f96:	bf00      	nop
 8012f98:	200019d4 	.word	0x200019d4
 8012f9c:	200019b0 	.word	0x200019b0
 8012fa0:	20001964 	.word	0x20001964
 8012fa4:	20001968 	.word	0x20001968
 8012fa8:	200019c4 	.word	0x200019c4
 8012fac:	200019cc 	.word	0x200019cc
 8012fb0:	200019b4 	.word	0x200019b4
 8012fb4:	200014dc 	.word	0x200014dc
 8012fb8:	200014d8 	.word	0x200014d8
 8012fbc:	200019c0 	.word	0x200019c0
 8012fc0:	200019bc 	.word	0x200019bc

08012fc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012fca:	4b2a      	ldr	r3, [pc, #168]	; (8013074 <vTaskSwitchContext+0xb0>)
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d003      	beq.n	8012fda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012fd2:	4b29      	ldr	r3, [pc, #164]	; (8013078 <vTaskSwitchContext+0xb4>)
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012fd8:	e046      	b.n	8013068 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8012fda:	4b27      	ldr	r3, [pc, #156]	; (8013078 <vTaskSwitchContext+0xb4>)
 8012fdc:	2200      	movs	r2, #0
 8012fde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012fe0:	4b26      	ldr	r3, [pc, #152]	; (801307c <vTaskSwitchContext+0xb8>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	60fb      	str	r3, [r7, #12]
 8012fe6:	e010      	b.n	801300a <vTaskSwitchContext+0x46>
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d10a      	bne.n	8013004 <vTaskSwitchContext+0x40>
	__asm volatile
 8012fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff2:	f383 8811 	msr	BASEPRI, r3
 8012ff6:	f3bf 8f6f 	isb	sy
 8012ffa:	f3bf 8f4f 	dsb	sy
 8012ffe:	607b      	str	r3, [r7, #4]
}
 8013000:	bf00      	nop
 8013002:	e7fe      	b.n	8013002 <vTaskSwitchContext+0x3e>
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	3b01      	subs	r3, #1
 8013008:	60fb      	str	r3, [r7, #12]
 801300a:	491d      	ldr	r1, [pc, #116]	; (8013080 <vTaskSwitchContext+0xbc>)
 801300c:	68fa      	ldr	r2, [r7, #12]
 801300e:	4613      	mov	r3, r2
 8013010:	009b      	lsls	r3, r3, #2
 8013012:	4413      	add	r3, r2
 8013014:	009b      	lsls	r3, r3, #2
 8013016:	440b      	add	r3, r1
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d0e4      	beq.n	8012fe8 <vTaskSwitchContext+0x24>
 801301e:	68fa      	ldr	r2, [r7, #12]
 8013020:	4613      	mov	r3, r2
 8013022:	009b      	lsls	r3, r3, #2
 8013024:	4413      	add	r3, r2
 8013026:	009b      	lsls	r3, r3, #2
 8013028:	4a15      	ldr	r2, [pc, #84]	; (8013080 <vTaskSwitchContext+0xbc>)
 801302a:	4413      	add	r3, r2
 801302c:	60bb      	str	r3, [r7, #8]
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	685b      	ldr	r3, [r3, #4]
 8013032:	685a      	ldr	r2, [r3, #4]
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	605a      	str	r2, [r3, #4]
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	685a      	ldr	r2, [r3, #4]
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	3308      	adds	r3, #8
 8013040:	429a      	cmp	r2, r3
 8013042:	d104      	bne.n	801304e <vTaskSwitchContext+0x8a>
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	685b      	ldr	r3, [r3, #4]
 8013048:	685a      	ldr	r2, [r3, #4]
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	605a      	str	r2, [r3, #4]
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	685b      	ldr	r3, [r3, #4]
 8013052:	68db      	ldr	r3, [r3, #12]
 8013054:	4a0b      	ldr	r2, [pc, #44]	; (8013084 <vTaskSwitchContext+0xc0>)
 8013056:	6013      	str	r3, [r2, #0]
 8013058:	4a08      	ldr	r2, [pc, #32]	; (801307c <vTaskSwitchContext+0xb8>)
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801305e:	4b09      	ldr	r3, [pc, #36]	; (8013084 <vTaskSwitchContext+0xc0>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	3354      	adds	r3, #84	; 0x54
 8013064:	4a08      	ldr	r2, [pc, #32]	; (8013088 <vTaskSwitchContext+0xc4>)
 8013066:	6013      	str	r3, [r2, #0]
}
 8013068:	bf00      	nop
 801306a:	3714      	adds	r7, #20
 801306c:	46bd      	mov	sp, r7
 801306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013072:	4770      	bx	lr
 8013074:	200019d4 	.word	0x200019d4
 8013078:	200019c0 	.word	0x200019c0
 801307c:	200019b4 	.word	0x200019b4
 8013080:	200014dc 	.word	0x200014dc
 8013084:	200014d8 	.word	0x200014d8
 8013088:	200000dc 	.word	0x200000dc

0801308c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b084      	sub	sp, #16
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d10a      	bne.n	80130b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130a0:	f383 8811 	msr	BASEPRI, r3
 80130a4:	f3bf 8f6f 	isb	sy
 80130a8:	f3bf 8f4f 	dsb	sy
 80130ac:	60fb      	str	r3, [r7, #12]
}
 80130ae:	bf00      	nop
 80130b0:	e7fe      	b.n	80130b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80130b2:	4b07      	ldr	r3, [pc, #28]	; (80130d0 <vTaskPlaceOnEventList+0x44>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	3318      	adds	r3, #24
 80130b8:	4619      	mov	r1, r3
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f7fe f9d7 	bl	801146e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80130c0:	2101      	movs	r1, #1
 80130c2:	6838      	ldr	r0, [r7, #0]
 80130c4:	f000 fb8e 	bl	80137e4 <prvAddCurrentTaskToDelayedList>
}
 80130c8:	bf00      	nop
 80130ca:	3710      	adds	r7, #16
 80130cc:	46bd      	mov	sp, r7
 80130ce:	bd80      	pop	{r7, pc}
 80130d0:	200014d8 	.word	0x200014d8

080130d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b086      	sub	sp, #24
 80130d8:	af00      	add	r7, sp, #0
 80130da:	60f8      	str	r0, [r7, #12]
 80130dc:	60b9      	str	r1, [r7, #8]
 80130de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d10a      	bne.n	80130fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80130e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ea:	f383 8811 	msr	BASEPRI, r3
 80130ee:	f3bf 8f6f 	isb	sy
 80130f2:	f3bf 8f4f 	dsb	sy
 80130f6:	617b      	str	r3, [r7, #20]
}
 80130f8:	bf00      	nop
 80130fa:	e7fe      	b.n	80130fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80130fc:	4b0a      	ldr	r3, [pc, #40]	; (8013128 <vTaskPlaceOnEventListRestricted+0x54>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	3318      	adds	r3, #24
 8013102:	4619      	mov	r1, r3
 8013104:	68f8      	ldr	r0, [r7, #12]
 8013106:	f7fe f98e 	bl	8011426 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2b00      	cmp	r3, #0
 801310e:	d002      	beq.n	8013116 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013110:	f04f 33ff 	mov.w	r3, #4294967295
 8013114:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013116:	6879      	ldr	r1, [r7, #4]
 8013118:	68b8      	ldr	r0, [r7, #8]
 801311a:	f000 fb63 	bl	80137e4 <prvAddCurrentTaskToDelayedList>
	}
 801311e:	bf00      	nop
 8013120:	3718      	adds	r7, #24
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
 8013126:	bf00      	nop
 8013128:	200014d8 	.word	0x200014d8

0801312c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b086      	sub	sp, #24
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	68db      	ldr	r3, [r3, #12]
 801313a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801313c:	693b      	ldr	r3, [r7, #16]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d10a      	bne.n	8013158 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013146:	f383 8811 	msr	BASEPRI, r3
 801314a:	f3bf 8f6f 	isb	sy
 801314e:	f3bf 8f4f 	dsb	sy
 8013152:	60fb      	str	r3, [r7, #12]
}
 8013154:	bf00      	nop
 8013156:	e7fe      	b.n	8013156 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013158:	693b      	ldr	r3, [r7, #16]
 801315a:	3318      	adds	r3, #24
 801315c:	4618      	mov	r0, r3
 801315e:	f7fe f9bf 	bl	80114e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013162:	4b1e      	ldr	r3, [pc, #120]	; (80131dc <xTaskRemoveFromEventList+0xb0>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d11d      	bne.n	80131a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	3304      	adds	r3, #4
 801316e:	4618      	mov	r0, r3
 8013170:	f7fe f9b6 	bl	80114e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013178:	4b19      	ldr	r3, [pc, #100]	; (80131e0 <xTaskRemoveFromEventList+0xb4>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	429a      	cmp	r2, r3
 801317e:	d903      	bls.n	8013188 <xTaskRemoveFromEventList+0x5c>
 8013180:	693b      	ldr	r3, [r7, #16]
 8013182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013184:	4a16      	ldr	r2, [pc, #88]	; (80131e0 <xTaskRemoveFromEventList+0xb4>)
 8013186:	6013      	str	r3, [r2, #0]
 8013188:	693b      	ldr	r3, [r7, #16]
 801318a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801318c:	4613      	mov	r3, r2
 801318e:	009b      	lsls	r3, r3, #2
 8013190:	4413      	add	r3, r2
 8013192:	009b      	lsls	r3, r3, #2
 8013194:	4a13      	ldr	r2, [pc, #76]	; (80131e4 <xTaskRemoveFromEventList+0xb8>)
 8013196:	441a      	add	r2, r3
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	3304      	adds	r3, #4
 801319c:	4619      	mov	r1, r3
 801319e:	4610      	mov	r0, r2
 80131a0:	f7fe f941 	bl	8011426 <vListInsertEnd>
 80131a4:	e005      	b.n	80131b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	3318      	adds	r3, #24
 80131aa:	4619      	mov	r1, r3
 80131ac:	480e      	ldr	r0, [pc, #56]	; (80131e8 <xTaskRemoveFromEventList+0xbc>)
 80131ae:	f7fe f93a 	bl	8011426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80131b2:	693b      	ldr	r3, [r7, #16]
 80131b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131b6:	4b0d      	ldr	r3, [pc, #52]	; (80131ec <xTaskRemoveFromEventList+0xc0>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131bc:	429a      	cmp	r2, r3
 80131be:	d905      	bls.n	80131cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80131c0:	2301      	movs	r3, #1
 80131c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80131c4:	4b0a      	ldr	r3, [pc, #40]	; (80131f0 <xTaskRemoveFromEventList+0xc4>)
 80131c6:	2201      	movs	r2, #1
 80131c8:	601a      	str	r2, [r3, #0]
 80131ca:	e001      	b.n	80131d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80131cc:	2300      	movs	r3, #0
 80131ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80131d0:	697b      	ldr	r3, [r7, #20]
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	3718      	adds	r7, #24
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bd80      	pop	{r7, pc}
 80131da:	bf00      	nop
 80131dc:	200019d4 	.word	0x200019d4
 80131e0:	200019b4 	.word	0x200019b4
 80131e4:	200014dc 	.word	0x200014dc
 80131e8:	2000196c 	.word	0x2000196c
 80131ec:	200014d8 	.word	0x200014d8
 80131f0:	200019c0 	.word	0x200019c0

080131f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80131f4:	b480      	push	{r7}
 80131f6:	b083      	sub	sp, #12
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80131fc:	4b06      	ldr	r3, [pc, #24]	; (8013218 <vTaskInternalSetTimeOutState+0x24>)
 80131fe:	681a      	ldr	r2, [r3, #0]
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013204:	4b05      	ldr	r3, [pc, #20]	; (801321c <vTaskInternalSetTimeOutState+0x28>)
 8013206:	681a      	ldr	r2, [r3, #0]
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	605a      	str	r2, [r3, #4]
}
 801320c:	bf00      	nop
 801320e:	370c      	adds	r7, #12
 8013210:	46bd      	mov	sp, r7
 8013212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013216:	4770      	bx	lr
 8013218:	200019c4 	.word	0x200019c4
 801321c:	200019b0 	.word	0x200019b0

08013220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b088      	sub	sp, #32
 8013224:	af00      	add	r7, sp, #0
 8013226:	6078      	str	r0, [r7, #4]
 8013228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d10a      	bne.n	8013246 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013234:	f383 8811 	msr	BASEPRI, r3
 8013238:	f3bf 8f6f 	isb	sy
 801323c:	f3bf 8f4f 	dsb	sy
 8013240:	613b      	str	r3, [r7, #16]
}
 8013242:	bf00      	nop
 8013244:	e7fe      	b.n	8013244 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d10a      	bne.n	8013262 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013250:	f383 8811 	msr	BASEPRI, r3
 8013254:	f3bf 8f6f 	isb	sy
 8013258:	f3bf 8f4f 	dsb	sy
 801325c:	60fb      	str	r3, [r7, #12]
}
 801325e:	bf00      	nop
 8013260:	e7fe      	b.n	8013260 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013262:	f000 ff8f 	bl	8014184 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013266:	4b1d      	ldr	r3, [pc, #116]	; (80132dc <xTaskCheckForTimeOut+0xbc>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	685b      	ldr	r3, [r3, #4]
 8013270:	69ba      	ldr	r2, [r7, #24]
 8013272:	1ad3      	subs	r3, r2, r3
 8013274:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801327e:	d102      	bne.n	8013286 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013280:	2300      	movs	r3, #0
 8013282:	61fb      	str	r3, [r7, #28]
 8013284:	e023      	b.n	80132ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681a      	ldr	r2, [r3, #0]
 801328a:	4b15      	ldr	r3, [pc, #84]	; (80132e0 <xTaskCheckForTimeOut+0xc0>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	429a      	cmp	r2, r3
 8013290:	d007      	beq.n	80132a2 <xTaskCheckForTimeOut+0x82>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	685b      	ldr	r3, [r3, #4]
 8013296:	69ba      	ldr	r2, [r7, #24]
 8013298:	429a      	cmp	r2, r3
 801329a:	d302      	bcc.n	80132a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801329c:	2301      	movs	r3, #1
 801329e:	61fb      	str	r3, [r7, #28]
 80132a0:	e015      	b.n	80132ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	697a      	ldr	r2, [r7, #20]
 80132a8:	429a      	cmp	r2, r3
 80132aa:	d20b      	bcs.n	80132c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	681a      	ldr	r2, [r3, #0]
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	1ad2      	subs	r2, r2, r3
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80132b8:	6878      	ldr	r0, [r7, #4]
 80132ba:	f7ff ff9b 	bl	80131f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80132be:	2300      	movs	r3, #0
 80132c0:	61fb      	str	r3, [r7, #28]
 80132c2:	e004      	b.n	80132ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	2200      	movs	r2, #0
 80132c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80132ca:	2301      	movs	r3, #1
 80132cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80132ce:	f000 ff89 	bl	80141e4 <vPortExitCritical>

	return xReturn;
 80132d2:	69fb      	ldr	r3, [r7, #28]
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3720      	adds	r7, #32
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	200019b0 	.word	0x200019b0
 80132e0:	200019c4 	.word	0x200019c4

080132e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80132e4:	b480      	push	{r7}
 80132e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80132e8:	4b03      	ldr	r3, [pc, #12]	; (80132f8 <vTaskMissedYield+0x14>)
 80132ea:	2201      	movs	r2, #1
 80132ec:	601a      	str	r2, [r3, #0]
}
 80132ee:	bf00      	nop
 80132f0:	46bd      	mov	sp, r7
 80132f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f6:	4770      	bx	lr
 80132f8:	200019c0 	.word	0x200019c0

080132fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b082      	sub	sp, #8
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013304:	f000 f852 	bl	80133ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013308:	4b06      	ldr	r3, [pc, #24]	; (8013324 <prvIdleTask+0x28>)
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	2b01      	cmp	r3, #1
 801330e:	d9f9      	bls.n	8013304 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013310:	4b05      	ldr	r3, [pc, #20]	; (8013328 <prvIdleTask+0x2c>)
 8013312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013316:	601a      	str	r2, [r3, #0]
 8013318:	f3bf 8f4f 	dsb	sy
 801331c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013320:	e7f0      	b.n	8013304 <prvIdleTask+0x8>
 8013322:	bf00      	nop
 8013324:	200014dc 	.word	0x200014dc
 8013328:	e000ed04 	.word	0xe000ed04

0801332c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b082      	sub	sp, #8
 8013330:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013332:	2300      	movs	r3, #0
 8013334:	607b      	str	r3, [r7, #4]
 8013336:	e00c      	b.n	8013352 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013338:	687a      	ldr	r2, [r7, #4]
 801333a:	4613      	mov	r3, r2
 801333c:	009b      	lsls	r3, r3, #2
 801333e:	4413      	add	r3, r2
 8013340:	009b      	lsls	r3, r3, #2
 8013342:	4a12      	ldr	r2, [pc, #72]	; (801338c <prvInitialiseTaskLists+0x60>)
 8013344:	4413      	add	r3, r2
 8013346:	4618      	mov	r0, r3
 8013348:	f7fe f840 	bl	80113cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	3301      	adds	r3, #1
 8013350:	607b      	str	r3, [r7, #4]
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	2b37      	cmp	r3, #55	; 0x37
 8013356:	d9ef      	bls.n	8013338 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013358:	480d      	ldr	r0, [pc, #52]	; (8013390 <prvInitialiseTaskLists+0x64>)
 801335a:	f7fe f837 	bl	80113cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801335e:	480d      	ldr	r0, [pc, #52]	; (8013394 <prvInitialiseTaskLists+0x68>)
 8013360:	f7fe f834 	bl	80113cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013364:	480c      	ldr	r0, [pc, #48]	; (8013398 <prvInitialiseTaskLists+0x6c>)
 8013366:	f7fe f831 	bl	80113cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801336a:	480c      	ldr	r0, [pc, #48]	; (801339c <prvInitialiseTaskLists+0x70>)
 801336c:	f7fe f82e 	bl	80113cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013370:	480b      	ldr	r0, [pc, #44]	; (80133a0 <prvInitialiseTaskLists+0x74>)
 8013372:	f7fe f82b 	bl	80113cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013376:	4b0b      	ldr	r3, [pc, #44]	; (80133a4 <prvInitialiseTaskLists+0x78>)
 8013378:	4a05      	ldr	r2, [pc, #20]	; (8013390 <prvInitialiseTaskLists+0x64>)
 801337a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801337c:	4b0a      	ldr	r3, [pc, #40]	; (80133a8 <prvInitialiseTaskLists+0x7c>)
 801337e:	4a05      	ldr	r2, [pc, #20]	; (8013394 <prvInitialiseTaskLists+0x68>)
 8013380:	601a      	str	r2, [r3, #0]
}
 8013382:	bf00      	nop
 8013384:	3708      	adds	r7, #8
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	200014dc 	.word	0x200014dc
 8013390:	2000193c 	.word	0x2000193c
 8013394:	20001950 	.word	0x20001950
 8013398:	2000196c 	.word	0x2000196c
 801339c:	20001980 	.word	0x20001980
 80133a0:	20001998 	.word	0x20001998
 80133a4:	20001964 	.word	0x20001964
 80133a8:	20001968 	.word	0x20001968

080133ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b082      	sub	sp, #8
 80133b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80133b2:	e019      	b.n	80133e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80133b4:	f000 fee6 	bl	8014184 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133b8:	4b10      	ldr	r3, [pc, #64]	; (80133fc <prvCheckTasksWaitingTermination+0x50>)
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	68db      	ldr	r3, [r3, #12]
 80133be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	3304      	adds	r3, #4
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7fe f88b 	bl	80114e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80133ca:	4b0d      	ldr	r3, [pc, #52]	; (8013400 <prvCheckTasksWaitingTermination+0x54>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	3b01      	subs	r3, #1
 80133d0:	4a0b      	ldr	r2, [pc, #44]	; (8013400 <prvCheckTasksWaitingTermination+0x54>)
 80133d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80133d4:	4b0b      	ldr	r3, [pc, #44]	; (8013404 <prvCheckTasksWaitingTermination+0x58>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	3b01      	subs	r3, #1
 80133da:	4a0a      	ldr	r2, [pc, #40]	; (8013404 <prvCheckTasksWaitingTermination+0x58>)
 80133dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80133de:	f000 ff01 	bl	80141e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f000 f810 	bl	8013408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80133e8:	4b06      	ldr	r3, [pc, #24]	; (8013404 <prvCheckTasksWaitingTermination+0x58>)
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d1e1      	bne.n	80133b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80133f0:	bf00      	nop
 80133f2:	bf00      	nop
 80133f4:	3708      	adds	r7, #8
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	bf00      	nop
 80133fc:	20001980 	.word	0x20001980
 8013400:	200019ac 	.word	0x200019ac
 8013404:	20001994 	.word	0x20001994

08013408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013408:	b580      	push	{r7, lr}
 801340a:	b084      	sub	sp, #16
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	3354      	adds	r3, #84	; 0x54
 8013414:	4618      	mov	r0, r3
 8013416:	f003 fac9 	bl	80169ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8013420:	2b00      	cmp	r3, #0
 8013422:	d108      	bne.n	8013436 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013428:	4618      	mov	r0, r3
 801342a:	f001 f899 	bl	8014560 <vPortFree>
				vPortFree( pxTCB );
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f001 f896 	bl	8014560 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013434:	e018      	b.n	8013468 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801343c:	2b01      	cmp	r3, #1
 801343e:	d103      	bne.n	8013448 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f001 f88d 	bl	8014560 <vPortFree>
	}
 8013446:	e00f      	b.n	8013468 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801344e:	2b02      	cmp	r3, #2
 8013450:	d00a      	beq.n	8013468 <prvDeleteTCB+0x60>
	__asm volatile
 8013452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013456:	f383 8811 	msr	BASEPRI, r3
 801345a:	f3bf 8f6f 	isb	sy
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	60fb      	str	r3, [r7, #12]
}
 8013464:	bf00      	nop
 8013466:	e7fe      	b.n	8013466 <prvDeleteTCB+0x5e>
	}
 8013468:	bf00      	nop
 801346a:	3710      	adds	r7, #16
 801346c:	46bd      	mov	sp, r7
 801346e:	bd80      	pop	{r7, pc}

08013470 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013470:	b480      	push	{r7}
 8013472:	b083      	sub	sp, #12
 8013474:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013476:	4b0c      	ldr	r3, [pc, #48]	; (80134a8 <prvResetNextTaskUnblockTime+0x38>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d104      	bne.n	801348a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013480:	4b0a      	ldr	r3, [pc, #40]	; (80134ac <prvResetNextTaskUnblockTime+0x3c>)
 8013482:	f04f 32ff 	mov.w	r2, #4294967295
 8013486:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013488:	e008      	b.n	801349c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801348a:	4b07      	ldr	r3, [pc, #28]	; (80134a8 <prvResetNextTaskUnblockTime+0x38>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	68db      	ldr	r3, [r3, #12]
 8013492:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	685b      	ldr	r3, [r3, #4]
 8013498:	4a04      	ldr	r2, [pc, #16]	; (80134ac <prvResetNextTaskUnblockTime+0x3c>)
 801349a:	6013      	str	r3, [r2, #0]
}
 801349c:	bf00      	nop
 801349e:	370c      	adds	r7, #12
 80134a0:	46bd      	mov	sp, r7
 80134a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a6:	4770      	bx	lr
 80134a8:	20001964 	.word	0x20001964
 80134ac:	200019cc 	.word	0x200019cc

080134b0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80134b0:	b480      	push	{r7}
 80134b2:	b083      	sub	sp, #12
 80134b4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80134b6:	4b05      	ldr	r3, [pc, #20]	; (80134cc <xTaskGetCurrentTaskHandle+0x1c>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	607b      	str	r3, [r7, #4]

		return xReturn;
 80134bc:	687b      	ldr	r3, [r7, #4]
	}
 80134be:	4618      	mov	r0, r3
 80134c0:	370c      	adds	r7, #12
 80134c2:	46bd      	mov	sp, r7
 80134c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c8:	4770      	bx	lr
 80134ca:	bf00      	nop
 80134cc:	200014d8 	.word	0x200014d8

080134d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80134d0:	b480      	push	{r7}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80134d6:	4b0b      	ldr	r3, [pc, #44]	; (8013504 <xTaskGetSchedulerState+0x34>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d102      	bne.n	80134e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80134de:	2301      	movs	r3, #1
 80134e0:	607b      	str	r3, [r7, #4]
 80134e2:	e008      	b.n	80134f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80134e4:	4b08      	ldr	r3, [pc, #32]	; (8013508 <xTaskGetSchedulerState+0x38>)
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d102      	bne.n	80134f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80134ec:	2302      	movs	r3, #2
 80134ee:	607b      	str	r3, [r7, #4]
 80134f0:	e001      	b.n	80134f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80134f2:	2300      	movs	r3, #0
 80134f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80134f6:	687b      	ldr	r3, [r7, #4]
	}
 80134f8:	4618      	mov	r0, r3
 80134fa:	370c      	adds	r7, #12
 80134fc:	46bd      	mov	sp, r7
 80134fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013502:	4770      	bx	lr
 8013504:	200019b8 	.word	0x200019b8
 8013508:	200019d4 	.word	0x200019d4

0801350c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013518:	2300      	movs	r3, #0
 801351a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d051      	beq.n	80135c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013526:	4b2a      	ldr	r3, [pc, #168]	; (80135d0 <xTaskPriorityInherit+0xc4>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801352c:	429a      	cmp	r2, r3
 801352e:	d241      	bcs.n	80135b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	699b      	ldr	r3, [r3, #24]
 8013534:	2b00      	cmp	r3, #0
 8013536:	db06      	blt.n	8013546 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013538:	4b25      	ldr	r3, [pc, #148]	; (80135d0 <xTaskPriorityInherit+0xc4>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801353e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	6959      	ldr	r1, [r3, #20]
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801354e:	4613      	mov	r3, r2
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	4413      	add	r3, r2
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	4a1f      	ldr	r2, [pc, #124]	; (80135d4 <xTaskPriorityInherit+0xc8>)
 8013558:	4413      	add	r3, r2
 801355a:	4299      	cmp	r1, r3
 801355c:	d122      	bne.n	80135a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	3304      	adds	r3, #4
 8013562:	4618      	mov	r0, r3
 8013564:	f7fd ffbc 	bl	80114e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013568:	4b19      	ldr	r3, [pc, #100]	; (80135d0 <xTaskPriorityInherit+0xc4>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013576:	4b18      	ldr	r3, [pc, #96]	; (80135d8 <xTaskPriorityInherit+0xcc>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	429a      	cmp	r2, r3
 801357c:	d903      	bls.n	8013586 <xTaskPriorityInherit+0x7a>
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013582:	4a15      	ldr	r2, [pc, #84]	; (80135d8 <xTaskPriorityInherit+0xcc>)
 8013584:	6013      	str	r3, [r2, #0]
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801358a:	4613      	mov	r3, r2
 801358c:	009b      	lsls	r3, r3, #2
 801358e:	4413      	add	r3, r2
 8013590:	009b      	lsls	r3, r3, #2
 8013592:	4a10      	ldr	r2, [pc, #64]	; (80135d4 <xTaskPriorityInherit+0xc8>)
 8013594:	441a      	add	r2, r3
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	3304      	adds	r3, #4
 801359a:	4619      	mov	r1, r3
 801359c:	4610      	mov	r0, r2
 801359e:	f7fd ff42 	bl	8011426 <vListInsertEnd>
 80135a2:	e004      	b.n	80135ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80135a4:	4b0a      	ldr	r3, [pc, #40]	; (80135d0 <xTaskPriorityInherit+0xc4>)
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80135ae:	2301      	movs	r3, #1
 80135b0:	60fb      	str	r3, [r7, #12]
 80135b2:	e008      	b.n	80135c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80135b4:	68bb      	ldr	r3, [r7, #8]
 80135b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80135b8:	4b05      	ldr	r3, [pc, #20]	; (80135d0 <xTaskPriorityInherit+0xc4>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135be:	429a      	cmp	r2, r3
 80135c0:	d201      	bcs.n	80135c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80135c2:	2301      	movs	r3, #1
 80135c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80135c6:	68fb      	ldr	r3, [r7, #12]
	}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3710      	adds	r7, #16
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}
 80135d0:	200014d8 	.word	0x200014d8
 80135d4:	200014dc 	.word	0x200014dc
 80135d8:	200019b4 	.word	0x200019b4

080135dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b086      	sub	sp, #24
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80135e8:	2300      	movs	r3, #0
 80135ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d056      	beq.n	80136a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80135f2:	4b2e      	ldr	r3, [pc, #184]	; (80136ac <xTaskPriorityDisinherit+0xd0>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	693a      	ldr	r2, [r7, #16]
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d00a      	beq.n	8013612 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80135fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013600:	f383 8811 	msr	BASEPRI, r3
 8013604:	f3bf 8f6f 	isb	sy
 8013608:	f3bf 8f4f 	dsb	sy
 801360c:	60fb      	str	r3, [r7, #12]
}
 801360e:	bf00      	nop
 8013610:	e7fe      	b.n	8013610 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013616:	2b00      	cmp	r3, #0
 8013618:	d10a      	bne.n	8013630 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801361e:	f383 8811 	msr	BASEPRI, r3
 8013622:	f3bf 8f6f 	isb	sy
 8013626:	f3bf 8f4f 	dsb	sy
 801362a:	60bb      	str	r3, [r7, #8]
}
 801362c:	bf00      	nop
 801362e:	e7fe      	b.n	801362e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013634:	1e5a      	subs	r2, r3, #1
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801363a:	693b      	ldr	r3, [r7, #16]
 801363c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801363e:	693b      	ldr	r3, [r7, #16]
 8013640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013642:	429a      	cmp	r2, r3
 8013644:	d02c      	beq.n	80136a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013646:	693b      	ldr	r3, [r7, #16]
 8013648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801364a:	2b00      	cmp	r3, #0
 801364c:	d128      	bne.n	80136a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801364e:	693b      	ldr	r3, [r7, #16]
 8013650:	3304      	adds	r3, #4
 8013652:	4618      	mov	r0, r3
 8013654:	f7fd ff44 	bl	80114e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013660:	693b      	ldr	r3, [r7, #16]
 8013662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013664:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013668:	693b      	ldr	r3, [r7, #16]
 801366a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801366c:	693b      	ldr	r3, [r7, #16]
 801366e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013670:	4b0f      	ldr	r3, [pc, #60]	; (80136b0 <xTaskPriorityDisinherit+0xd4>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	429a      	cmp	r2, r3
 8013676:	d903      	bls.n	8013680 <xTaskPriorityDisinherit+0xa4>
 8013678:	693b      	ldr	r3, [r7, #16]
 801367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801367c:	4a0c      	ldr	r2, [pc, #48]	; (80136b0 <xTaskPriorityDisinherit+0xd4>)
 801367e:	6013      	str	r3, [r2, #0]
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013684:	4613      	mov	r3, r2
 8013686:	009b      	lsls	r3, r3, #2
 8013688:	4413      	add	r3, r2
 801368a:	009b      	lsls	r3, r3, #2
 801368c:	4a09      	ldr	r2, [pc, #36]	; (80136b4 <xTaskPriorityDisinherit+0xd8>)
 801368e:	441a      	add	r2, r3
 8013690:	693b      	ldr	r3, [r7, #16]
 8013692:	3304      	adds	r3, #4
 8013694:	4619      	mov	r1, r3
 8013696:	4610      	mov	r0, r2
 8013698:	f7fd fec5 	bl	8011426 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801369c:	2301      	movs	r3, #1
 801369e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80136a0:	697b      	ldr	r3, [r7, #20]
	}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3718      	adds	r7, #24
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
 80136aa:	bf00      	nop
 80136ac:	200014d8 	.word	0x200014d8
 80136b0:	200019b4 	.word	0x200019b4
 80136b4:	200014dc 	.word	0x200014dc

080136b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b088      	sub	sp, #32
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80136c6:	2301      	movs	r3, #1
 80136c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d06a      	beq.n	80137a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d10a      	bne.n	80136ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80136d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136dc:	f383 8811 	msr	BASEPRI, r3
 80136e0:	f3bf 8f6f 	isb	sy
 80136e4:	f3bf 8f4f 	dsb	sy
 80136e8:	60fb      	str	r3, [r7, #12]
}
 80136ea:	bf00      	nop
 80136ec:	e7fe      	b.n	80136ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80136ee:	69bb      	ldr	r3, [r7, #24]
 80136f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80136f2:	683a      	ldr	r2, [r7, #0]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	d902      	bls.n	80136fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	61fb      	str	r3, [r7, #28]
 80136fc:	e002      	b.n	8013704 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80136fe:	69bb      	ldr	r3, [r7, #24]
 8013700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013702:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013704:	69bb      	ldr	r3, [r7, #24]
 8013706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013708:	69fa      	ldr	r2, [r7, #28]
 801370a:	429a      	cmp	r2, r3
 801370c:	d04b      	beq.n	80137a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013712:	697a      	ldr	r2, [r7, #20]
 8013714:	429a      	cmp	r2, r3
 8013716:	d146      	bne.n	80137a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013718:	4b25      	ldr	r3, [pc, #148]	; (80137b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	69ba      	ldr	r2, [r7, #24]
 801371e:	429a      	cmp	r2, r3
 8013720:	d10a      	bne.n	8013738 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8013722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013726:	f383 8811 	msr	BASEPRI, r3
 801372a:	f3bf 8f6f 	isb	sy
 801372e:	f3bf 8f4f 	dsb	sy
 8013732:	60bb      	str	r3, [r7, #8]
}
 8013734:	bf00      	nop
 8013736:	e7fe      	b.n	8013736 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013738:	69bb      	ldr	r3, [r7, #24]
 801373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801373c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801373e:	69bb      	ldr	r3, [r7, #24]
 8013740:	69fa      	ldr	r2, [r7, #28]
 8013742:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	699b      	ldr	r3, [r3, #24]
 8013748:	2b00      	cmp	r3, #0
 801374a:	db04      	blt.n	8013756 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801374c:	69fb      	ldr	r3, [r7, #28]
 801374e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013752:	69bb      	ldr	r3, [r7, #24]
 8013754:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	6959      	ldr	r1, [r3, #20]
 801375a:	693a      	ldr	r2, [r7, #16]
 801375c:	4613      	mov	r3, r2
 801375e:	009b      	lsls	r3, r3, #2
 8013760:	4413      	add	r3, r2
 8013762:	009b      	lsls	r3, r3, #2
 8013764:	4a13      	ldr	r2, [pc, #76]	; (80137b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013766:	4413      	add	r3, r2
 8013768:	4299      	cmp	r1, r3
 801376a:	d11c      	bne.n	80137a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	3304      	adds	r3, #4
 8013770:	4618      	mov	r0, r3
 8013772:	f7fd feb5 	bl	80114e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013776:	69bb      	ldr	r3, [r7, #24]
 8013778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801377a:	4b0f      	ldr	r3, [pc, #60]	; (80137b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	429a      	cmp	r2, r3
 8013780:	d903      	bls.n	801378a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8013782:	69bb      	ldr	r3, [r7, #24]
 8013784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013786:	4a0c      	ldr	r2, [pc, #48]	; (80137b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013788:	6013      	str	r3, [r2, #0]
 801378a:	69bb      	ldr	r3, [r7, #24]
 801378c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801378e:	4613      	mov	r3, r2
 8013790:	009b      	lsls	r3, r3, #2
 8013792:	4413      	add	r3, r2
 8013794:	009b      	lsls	r3, r3, #2
 8013796:	4a07      	ldr	r2, [pc, #28]	; (80137b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013798:	441a      	add	r2, r3
 801379a:	69bb      	ldr	r3, [r7, #24]
 801379c:	3304      	adds	r3, #4
 801379e:	4619      	mov	r1, r3
 80137a0:	4610      	mov	r0, r2
 80137a2:	f7fd fe40 	bl	8011426 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80137a6:	bf00      	nop
 80137a8:	3720      	adds	r7, #32
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd80      	pop	{r7, pc}
 80137ae:	bf00      	nop
 80137b0:	200014d8 	.word	0x200014d8
 80137b4:	200014dc 	.word	0x200014dc
 80137b8:	200019b4 	.word	0x200019b4

080137bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80137bc:	b480      	push	{r7}
 80137be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80137c0:	4b07      	ldr	r3, [pc, #28]	; (80137e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d004      	beq.n	80137d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80137c8:	4b05      	ldr	r3, [pc, #20]	; (80137e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137ce:	3201      	adds	r2, #1
 80137d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80137d2:	4b03      	ldr	r3, [pc, #12]	; (80137e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80137d4:	681b      	ldr	r3, [r3, #0]
	}
 80137d6:	4618      	mov	r0, r3
 80137d8:	46bd      	mov	sp, r7
 80137da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137de:	4770      	bx	lr
 80137e0:	200014d8 	.word	0x200014d8

080137e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80137e4:	b580      	push	{r7, lr}
 80137e6:	b084      	sub	sp, #16
 80137e8:	af00      	add	r7, sp, #0
 80137ea:	6078      	str	r0, [r7, #4]
 80137ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80137ee:	4b21      	ldr	r3, [pc, #132]	; (8013874 <prvAddCurrentTaskToDelayedList+0x90>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137f4:	4b20      	ldr	r3, [pc, #128]	; (8013878 <prvAddCurrentTaskToDelayedList+0x94>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	3304      	adds	r3, #4
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7fd fe70 	bl	80114e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013806:	d10a      	bne.n	801381e <prvAddCurrentTaskToDelayedList+0x3a>
 8013808:	683b      	ldr	r3, [r7, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d007      	beq.n	801381e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801380e:	4b1a      	ldr	r3, [pc, #104]	; (8013878 <prvAddCurrentTaskToDelayedList+0x94>)
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	3304      	adds	r3, #4
 8013814:	4619      	mov	r1, r3
 8013816:	4819      	ldr	r0, [pc, #100]	; (801387c <prvAddCurrentTaskToDelayedList+0x98>)
 8013818:	f7fd fe05 	bl	8011426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801381c:	e026      	b.n	801386c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801381e:	68fa      	ldr	r2, [r7, #12]
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	4413      	add	r3, r2
 8013824:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013826:	4b14      	ldr	r3, [pc, #80]	; (8013878 <prvAddCurrentTaskToDelayedList+0x94>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	68ba      	ldr	r2, [r7, #8]
 801382c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801382e:	68ba      	ldr	r2, [r7, #8]
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	429a      	cmp	r2, r3
 8013834:	d209      	bcs.n	801384a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013836:	4b12      	ldr	r3, [pc, #72]	; (8013880 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013838:	681a      	ldr	r2, [r3, #0]
 801383a:	4b0f      	ldr	r3, [pc, #60]	; (8013878 <prvAddCurrentTaskToDelayedList+0x94>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	3304      	adds	r3, #4
 8013840:	4619      	mov	r1, r3
 8013842:	4610      	mov	r0, r2
 8013844:	f7fd fe13 	bl	801146e <vListInsert>
}
 8013848:	e010      	b.n	801386c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801384a:	4b0e      	ldr	r3, [pc, #56]	; (8013884 <prvAddCurrentTaskToDelayedList+0xa0>)
 801384c:	681a      	ldr	r2, [r3, #0]
 801384e:	4b0a      	ldr	r3, [pc, #40]	; (8013878 <prvAddCurrentTaskToDelayedList+0x94>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	3304      	adds	r3, #4
 8013854:	4619      	mov	r1, r3
 8013856:	4610      	mov	r0, r2
 8013858:	f7fd fe09 	bl	801146e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801385c:	4b0a      	ldr	r3, [pc, #40]	; (8013888 <prvAddCurrentTaskToDelayedList+0xa4>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	68ba      	ldr	r2, [r7, #8]
 8013862:	429a      	cmp	r2, r3
 8013864:	d202      	bcs.n	801386c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013866:	4a08      	ldr	r2, [pc, #32]	; (8013888 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	6013      	str	r3, [r2, #0]
}
 801386c:	bf00      	nop
 801386e:	3710      	adds	r7, #16
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}
 8013874:	200019b0 	.word	0x200019b0
 8013878:	200014d8 	.word	0x200014d8
 801387c:	20001998 	.word	0x20001998
 8013880:	20001968 	.word	0x20001968
 8013884:	20001964 	.word	0x20001964
 8013888:	200019cc 	.word	0x200019cc

0801388c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b08a      	sub	sp, #40	; 0x28
 8013890:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013892:	2300      	movs	r3, #0
 8013894:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013896:	f000 fb07 	bl	8013ea8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801389a:	4b1c      	ldr	r3, [pc, #112]	; (801390c <xTimerCreateTimerTask+0x80>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d021      	beq.n	80138e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80138a2:	2300      	movs	r3, #0
 80138a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80138a6:	2300      	movs	r3, #0
 80138a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80138aa:	1d3a      	adds	r2, r7, #4
 80138ac:	f107 0108 	add.w	r1, r7, #8
 80138b0:	f107 030c 	add.w	r3, r7, #12
 80138b4:	4618      	mov	r0, r3
 80138b6:	f7fd fd6f 	bl	8011398 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80138ba:	6879      	ldr	r1, [r7, #4]
 80138bc:	68bb      	ldr	r3, [r7, #8]
 80138be:	68fa      	ldr	r2, [r7, #12]
 80138c0:	9202      	str	r2, [sp, #8]
 80138c2:	9301      	str	r3, [sp, #4]
 80138c4:	2302      	movs	r3, #2
 80138c6:	9300      	str	r3, [sp, #0]
 80138c8:	2300      	movs	r3, #0
 80138ca:	460a      	mov	r2, r1
 80138cc:	4910      	ldr	r1, [pc, #64]	; (8013910 <xTimerCreateTimerTask+0x84>)
 80138ce:	4811      	ldr	r0, [pc, #68]	; (8013914 <xTimerCreateTimerTask+0x88>)
 80138d0:	f7fe fe3e 	bl	8012550 <xTaskCreateStatic>
 80138d4:	4603      	mov	r3, r0
 80138d6:	4a10      	ldr	r2, [pc, #64]	; (8013918 <xTimerCreateTimerTask+0x8c>)
 80138d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80138da:	4b0f      	ldr	r3, [pc, #60]	; (8013918 <xTimerCreateTimerTask+0x8c>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d001      	beq.n	80138e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80138e2:	2301      	movs	r3, #1
 80138e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d10a      	bne.n	8013902 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80138ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f0:	f383 8811 	msr	BASEPRI, r3
 80138f4:	f3bf 8f6f 	isb	sy
 80138f8:	f3bf 8f4f 	dsb	sy
 80138fc:	613b      	str	r3, [r7, #16]
}
 80138fe:	bf00      	nop
 8013900:	e7fe      	b.n	8013900 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013902:	697b      	ldr	r3, [r7, #20]
}
 8013904:	4618      	mov	r0, r3
 8013906:	3718      	adds	r7, #24
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}
 801390c:	20001a08 	.word	0x20001a08
 8013910:	0801bc68 	.word	0x0801bc68
 8013914:	08013a51 	.word	0x08013a51
 8013918:	20001a0c 	.word	0x20001a0c

0801391c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b08a      	sub	sp, #40	; 0x28
 8013920:	af00      	add	r7, sp, #0
 8013922:	60f8      	str	r0, [r7, #12]
 8013924:	60b9      	str	r1, [r7, #8]
 8013926:	607a      	str	r2, [r7, #4]
 8013928:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801392a:	2300      	movs	r3, #0
 801392c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d10a      	bne.n	801394a <xTimerGenericCommand+0x2e>
	__asm volatile
 8013934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013938:	f383 8811 	msr	BASEPRI, r3
 801393c:	f3bf 8f6f 	isb	sy
 8013940:	f3bf 8f4f 	dsb	sy
 8013944:	623b      	str	r3, [r7, #32]
}
 8013946:	bf00      	nop
 8013948:	e7fe      	b.n	8013948 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801394a:	4b1a      	ldr	r3, [pc, #104]	; (80139b4 <xTimerGenericCommand+0x98>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d02a      	beq.n	80139a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	2b05      	cmp	r3, #5
 8013962:	dc18      	bgt.n	8013996 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013964:	f7ff fdb4 	bl	80134d0 <xTaskGetSchedulerState>
 8013968:	4603      	mov	r3, r0
 801396a:	2b02      	cmp	r3, #2
 801396c:	d109      	bne.n	8013982 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801396e:	4b11      	ldr	r3, [pc, #68]	; (80139b4 <xTimerGenericCommand+0x98>)
 8013970:	6818      	ldr	r0, [r3, #0]
 8013972:	f107 0110 	add.w	r1, r7, #16
 8013976:	2300      	movs	r3, #0
 8013978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801397a:	f7fd ff83 	bl	8011884 <xQueueGenericSend>
 801397e:	6278      	str	r0, [r7, #36]	; 0x24
 8013980:	e012      	b.n	80139a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013982:	4b0c      	ldr	r3, [pc, #48]	; (80139b4 <xTimerGenericCommand+0x98>)
 8013984:	6818      	ldr	r0, [r3, #0]
 8013986:	f107 0110 	add.w	r1, r7, #16
 801398a:	2300      	movs	r3, #0
 801398c:	2200      	movs	r2, #0
 801398e:	f7fd ff79 	bl	8011884 <xQueueGenericSend>
 8013992:	6278      	str	r0, [r7, #36]	; 0x24
 8013994:	e008      	b.n	80139a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013996:	4b07      	ldr	r3, [pc, #28]	; (80139b4 <xTimerGenericCommand+0x98>)
 8013998:	6818      	ldr	r0, [r3, #0]
 801399a:	f107 0110 	add.w	r1, r7, #16
 801399e:	2300      	movs	r3, #0
 80139a0:	683a      	ldr	r2, [r7, #0]
 80139a2:	f7fe f86d 	bl	8011a80 <xQueueGenericSendFromISR>
 80139a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80139a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	3728      	adds	r7, #40	; 0x28
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
 80139b2:	bf00      	nop
 80139b4:	20001a08 	.word	0x20001a08

080139b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b088      	sub	sp, #32
 80139bc:	af02      	add	r7, sp, #8
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80139c2:	4b22      	ldr	r3, [pc, #136]	; (8013a4c <prvProcessExpiredTimer+0x94>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	68db      	ldr	r3, [r3, #12]
 80139c8:	68db      	ldr	r3, [r3, #12]
 80139ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	3304      	adds	r3, #4
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7fd fd85 	bl	80114e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80139dc:	f003 0304 	and.w	r3, r3, #4
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d022      	beq.n	8013a2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	699a      	ldr	r2, [r3, #24]
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	18d1      	adds	r1, r2, r3
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	683a      	ldr	r2, [r7, #0]
 80139f0:	6978      	ldr	r0, [r7, #20]
 80139f2:	f000 f8d1 	bl	8013b98 <prvInsertTimerInActiveList>
 80139f6:	4603      	mov	r3, r0
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d01f      	beq.n	8013a3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80139fc:	2300      	movs	r3, #0
 80139fe:	9300      	str	r3, [sp, #0]
 8013a00:	2300      	movs	r3, #0
 8013a02:	687a      	ldr	r2, [r7, #4]
 8013a04:	2100      	movs	r1, #0
 8013a06:	6978      	ldr	r0, [r7, #20]
 8013a08:	f7ff ff88 	bl	801391c <xTimerGenericCommand>
 8013a0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d113      	bne.n	8013a3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a18:	f383 8811 	msr	BASEPRI, r3
 8013a1c:	f3bf 8f6f 	isb	sy
 8013a20:	f3bf 8f4f 	dsb	sy
 8013a24:	60fb      	str	r3, [r7, #12]
}
 8013a26:	bf00      	nop
 8013a28:	e7fe      	b.n	8013a28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a30:	f023 0301 	bic.w	r3, r3, #1
 8013a34:	b2da      	uxtb	r2, r3
 8013a36:	697b      	ldr	r3, [r7, #20]
 8013a38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	6a1b      	ldr	r3, [r3, #32]
 8013a40:	6978      	ldr	r0, [r7, #20]
 8013a42:	4798      	blx	r3
}
 8013a44:	bf00      	nop
 8013a46:	3718      	adds	r7, #24
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	bd80      	pop	{r7, pc}
 8013a4c:	20001a00 	.word	0x20001a00

08013a50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b084      	sub	sp, #16
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013a58:	f107 0308 	add.w	r3, r7, #8
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f000 f857 	bl	8013b10 <prvGetNextExpireTime>
 8013a62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	4619      	mov	r1, r3
 8013a68:	68f8      	ldr	r0, [r7, #12]
 8013a6a:	f000 f803 	bl	8013a74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013a6e:	f000 f8d5 	bl	8013c1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013a72:	e7f1      	b.n	8013a58 <prvTimerTask+0x8>

08013a74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013a7e:	f7ff f92b 	bl	8012cd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013a82:	f107 0308 	add.w	r3, r7, #8
 8013a86:	4618      	mov	r0, r3
 8013a88:	f000 f866 	bl	8013b58 <prvSampleTimeNow>
 8013a8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d130      	bne.n	8013af6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d10a      	bne.n	8013ab0 <prvProcessTimerOrBlockTask+0x3c>
 8013a9a:	687a      	ldr	r2, [r7, #4]
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	429a      	cmp	r2, r3
 8013aa0:	d806      	bhi.n	8013ab0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013aa2:	f7ff f927 	bl	8012cf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013aa6:	68f9      	ldr	r1, [r7, #12]
 8013aa8:	6878      	ldr	r0, [r7, #4]
 8013aaa:	f7ff ff85 	bl	80139b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013aae:	e024      	b.n	8013afa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013ab0:	683b      	ldr	r3, [r7, #0]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d008      	beq.n	8013ac8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013ab6:	4b13      	ldr	r3, [pc, #76]	; (8013b04 <prvProcessTimerOrBlockTask+0x90>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d101      	bne.n	8013ac4 <prvProcessTimerOrBlockTask+0x50>
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	e000      	b.n	8013ac6 <prvProcessTimerOrBlockTask+0x52>
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013ac8:	4b0f      	ldr	r3, [pc, #60]	; (8013b08 <prvProcessTimerOrBlockTask+0x94>)
 8013aca:	6818      	ldr	r0, [r3, #0]
 8013acc:	687a      	ldr	r2, [r7, #4]
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	1ad3      	subs	r3, r2, r3
 8013ad2:	683a      	ldr	r2, [r7, #0]
 8013ad4:	4619      	mov	r1, r3
 8013ad6:	f7fe fd07 	bl	80124e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013ada:	f7ff f90b 	bl	8012cf4 <xTaskResumeAll>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d10a      	bne.n	8013afa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013ae4:	4b09      	ldr	r3, [pc, #36]	; (8013b0c <prvProcessTimerOrBlockTask+0x98>)
 8013ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013aea:	601a      	str	r2, [r3, #0]
 8013aec:	f3bf 8f4f 	dsb	sy
 8013af0:	f3bf 8f6f 	isb	sy
}
 8013af4:	e001      	b.n	8013afa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013af6:	f7ff f8fd 	bl	8012cf4 <xTaskResumeAll>
}
 8013afa:	bf00      	nop
 8013afc:	3710      	adds	r7, #16
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}
 8013b02:	bf00      	nop
 8013b04:	20001a04 	.word	0x20001a04
 8013b08:	20001a08 	.word	0x20001a08
 8013b0c:	e000ed04 	.word	0xe000ed04

08013b10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013b10:	b480      	push	{r7}
 8013b12:	b085      	sub	sp, #20
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013b18:	4b0e      	ldr	r3, [pc, #56]	; (8013b54 <prvGetNextExpireTime+0x44>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d101      	bne.n	8013b26 <prvGetNextExpireTime+0x16>
 8013b22:	2201      	movs	r2, #1
 8013b24:	e000      	b.n	8013b28 <prvGetNextExpireTime+0x18>
 8013b26:	2200      	movs	r2, #0
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d105      	bne.n	8013b40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013b34:	4b07      	ldr	r3, [pc, #28]	; (8013b54 <prvGetNextExpireTime+0x44>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	68db      	ldr	r3, [r3, #12]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	60fb      	str	r3, [r7, #12]
 8013b3e:	e001      	b.n	8013b44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013b40:	2300      	movs	r3, #0
 8013b42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013b44:	68fb      	ldr	r3, [r7, #12]
}
 8013b46:	4618      	mov	r0, r3
 8013b48:	3714      	adds	r7, #20
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b50:	4770      	bx	lr
 8013b52:	bf00      	nop
 8013b54:	20001a00 	.word	0x20001a00

08013b58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b084      	sub	sp, #16
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013b60:	f7ff f966 	bl	8012e30 <xTaskGetTickCount>
 8013b64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013b66:	4b0b      	ldr	r3, [pc, #44]	; (8013b94 <prvSampleTimeNow+0x3c>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	68fa      	ldr	r2, [r7, #12]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d205      	bcs.n	8013b7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013b70:	f000 f936 	bl	8013de0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2201      	movs	r2, #1
 8013b78:	601a      	str	r2, [r3, #0]
 8013b7a:	e002      	b.n	8013b82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013b82:	4a04      	ldr	r2, [pc, #16]	; (8013b94 <prvSampleTimeNow+0x3c>)
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013b88:	68fb      	ldr	r3, [r7, #12]
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3710      	adds	r7, #16
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop
 8013b94:	20001a10 	.word	0x20001a10

08013b98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b086      	sub	sp, #24
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	607a      	str	r2, [r7, #4]
 8013ba4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	68ba      	ldr	r2, [r7, #8]
 8013bae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	68fa      	ldr	r2, [r7, #12]
 8013bb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013bb6:	68ba      	ldr	r2, [r7, #8]
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d812      	bhi.n	8013be4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013bbe:	687a      	ldr	r2, [r7, #4]
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	1ad2      	subs	r2, r2, r3
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	699b      	ldr	r3, [r3, #24]
 8013bc8:	429a      	cmp	r2, r3
 8013bca:	d302      	bcc.n	8013bd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013bcc:	2301      	movs	r3, #1
 8013bce:	617b      	str	r3, [r7, #20]
 8013bd0:	e01b      	b.n	8013c0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013bd2:	4b10      	ldr	r3, [pc, #64]	; (8013c14 <prvInsertTimerInActiveList+0x7c>)
 8013bd4:	681a      	ldr	r2, [r3, #0]
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	3304      	adds	r3, #4
 8013bda:	4619      	mov	r1, r3
 8013bdc:	4610      	mov	r0, r2
 8013bde:	f7fd fc46 	bl	801146e <vListInsert>
 8013be2:	e012      	b.n	8013c0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013be4:	687a      	ldr	r2, [r7, #4]
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d206      	bcs.n	8013bfa <prvInsertTimerInActiveList+0x62>
 8013bec:	68ba      	ldr	r2, [r7, #8]
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	d302      	bcc.n	8013bfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	617b      	str	r3, [r7, #20]
 8013bf8:	e007      	b.n	8013c0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013bfa:	4b07      	ldr	r3, [pc, #28]	; (8013c18 <prvInsertTimerInActiveList+0x80>)
 8013bfc:	681a      	ldr	r2, [r3, #0]
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	3304      	adds	r3, #4
 8013c02:	4619      	mov	r1, r3
 8013c04:	4610      	mov	r0, r2
 8013c06:	f7fd fc32 	bl	801146e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013c0a:	697b      	ldr	r3, [r7, #20]
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3718      	adds	r7, #24
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}
 8013c14:	20001a04 	.word	0x20001a04
 8013c18:	20001a00 	.word	0x20001a00

08013c1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b08e      	sub	sp, #56	; 0x38
 8013c20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013c22:	e0ca      	b.n	8013dba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	da18      	bge.n	8013c5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013c2a:	1d3b      	adds	r3, r7, #4
 8013c2c:	3304      	adds	r3, #4
 8013c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d10a      	bne.n	8013c4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c3a:	f383 8811 	msr	BASEPRI, r3
 8013c3e:	f3bf 8f6f 	isb	sy
 8013c42:	f3bf 8f4f 	dsb	sy
 8013c46:	61fb      	str	r3, [r7, #28]
}
 8013c48:	bf00      	nop
 8013c4a:	e7fe      	b.n	8013c4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c52:	6850      	ldr	r0, [r2, #4]
 8013c54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c56:	6892      	ldr	r2, [r2, #8]
 8013c58:	4611      	mov	r1, r2
 8013c5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	f2c0 80aa 	blt.w	8013db8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6a:	695b      	ldr	r3, [r3, #20]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d004      	beq.n	8013c7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c72:	3304      	adds	r3, #4
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7fd fc33 	bl	80114e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013c7a:	463b      	mov	r3, r7
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f7ff ff6b 	bl	8013b58 <prvSampleTimeNow>
 8013c82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2b09      	cmp	r3, #9
 8013c88:	f200 8097 	bhi.w	8013dba <prvProcessReceivedCommands+0x19e>
 8013c8c:	a201      	add	r2, pc, #4	; (adr r2, 8013c94 <prvProcessReceivedCommands+0x78>)
 8013c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c92:	bf00      	nop
 8013c94:	08013cbd 	.word	0x08013cbd
 8013c98:	08013cbd 	.word	0x08013cbd
 8013c9c:	08013cbd 	.word	0x08013cbd
 8013ca0:	08013d31 	.word	0x08013d31
 8013ca4:	08013d45 	.word	0x08013d45
 8013ca8:	08013d8f 	.word	0x08013d8f
 8013cac:	08013cbd 	.word	0x08013cbd
 8013cb0:	08013cbd 	.word	0x08013cbd
 8013cb4:	08013d31 	.word	0x08013d31
 8013cb8:	08013d45 	.word	0x08013d45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cc2:	f043 0301 	orr.w	r3, r3, #1
 8013cc6:	b2da      	uxtb	r2, r3
 8013cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013cce:	68ba      	ldr	r2, [r7, #8]
 8013cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cd2:	699b      	ldr	r3, [r3, #24]
 8013cd4:	18d1      	adds	r1, r2, r3
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cdc:	f7ff ff5c 	bl	8013b98 <prvInsertTimerInActiveList>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d069      	beq.n	8013dba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ce8:	6a1b      	ldr	r3, [r3, #32]
 8013cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013cec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013cf4:	f003 0304 	and.w	r3, r3, #4
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d05e      	beq.n	8013dba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013cfc:	68ba      	ldr	r2, [r7, #8]
 8013cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d00:	699b      	ldr	r3, [r3, #24]
 8013d02:	441a      	add	r2, r3
 8013d04:	2300      	movs	r3, #0
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	2300      	movs	r3, #0
 8013d0a:	2100      	movs	r1, #0
 8013d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d0e:	f7ff fe05 	bl	801391c <xTimerGenericCommand>
 8013d12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013d14:	6a3b      	ldr	r3, [r7, #32]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d14f      	bne.n	8013dba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d1e:	f383 8811 	msr	BASEPRI, r3
 8013d22:	f3bf 8f6f 	isb	sy
 8013d26:	f3bf 8f4f 	dsb	sy
 8013d2a:	61bb      	str	r3, [r7, #24]
}
 8013d2c:	bf00      	nop
 8013d2e:	e7fe      	b.n	8013d2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d36:	f023 0301 	bic.w	r3, r3, #1
 8013d3a:	b2da      	uxtb	r2, r3
 8013d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013d42:	e03a      	b.n	8013dba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d4a:	f043 0301 	orr.w	r3, r3, #1
 8013d4e:	b2da      	uxtb	r2, r3
 8013d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013d56:	68ba      	ldr	r2, [r7, #8]
 8013d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d5e:	699b      	ldr	r3, [r3, #24]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d10a      	bne.n	8013d7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d68:	f383 8811 	msr	BASEPRI, r3
 8013d6c:	f3bf 8f6f 	isb	sy
 8013d70:	f3bf 8f4f 	dsb	sy
 8013d74:	617b      	str	r3, [r7, #20]
}
 8013d76:	bf00      	nop
 8013d78:	e7fe      	b.n	8013d78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d7c:	699a      	ldr	r2, [r3, #24]
 8013d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d80:	18d1      	adds	r1, r2, r3
 8013d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d88:	f7ff ff06 	bl	8013b98 <prvInsertTimerInActiveList>
					break;
 8013d8c:	e015      	b.n	8013dba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d94:	f003 0302 	and.w	r3, r3, #2
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d103      	bne.n	8013da4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d9e:	f000 fbdf 	bl	8014560 <vPortFree>
 8013da2:	e00a      	b.n	8013dba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013daa:	f023 0301 	bic.w	r3, r3, #1
 8013dae:	b2da      	uxtb	r2, r3
 8013db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013db6:	e000      	b.n	8013dba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013db8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013dba:	4b08      	ldr	r3, [pc, #32]	; (8013ddc <prvProcessReceivedCommands+0x1c0>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	1d39      	adds	r1, r7, #4
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f7fd ff84 	bl	8011cd0 <xQueueReceive>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	f47f af2a 	bne.w	8013c24 <prvProcessReceivedCommands+0x8>
	}
}
 8013dd0:	bf00      	nop
 8013dd2:	bf00      	nop
 8013dd4:	3730      	adds	r7, #48	; 0x30
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	bf00      	nop
 8013ddc:	20001a08 	.word	0x20001a08

08013de0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b088      	sub	sp, #32
 8013de4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013de6:	e048      	b.n	8013e7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013de8:	4b2d      	ldr	r3, [pc, #180]	; (8013ea0 <prvSwitchTimerLists+0xc0>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	68db      	ldr	r3, [r3, #12]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013df2:	4b2b      	ldr	r3, [pc, #172]	; (8013ea0 <prvSwitchTimerLists+0xc0>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	68db      	ldr	r3, [r3, #12]
 8013df8:	68db      	ldr	r3, [r3, #12]
 8013dfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	3304      	adds	r3, #4
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7fd fb6d 	bl	80114e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	6a1b      	ldr	r3, [r3, #32]
 8013e0a:	68f8      	ldr	r0, [r7, #12]
 8013e0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e14:	f003 0304 	and.w	r3, r3, #4
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d02e      	beq.n	8013e7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	699b      	ldr	r3, [r3, #24]
 8013e20:	693a      	ldr	r2, [r7, #16]
 8013e22:	4413      	add	r3, r2
 8013e24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013e26:	68ba      	ldr	r2, [r7, #8]
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	429a      	cmp	r2, r3
 8013e2c:	d90e      	bls.n	8013e4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	68ba      	ldr	r2, [r7, #8]
 8013e32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	68fa      	ldr	r2, [r7, #12]
 8013e38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013e3a:	4b19      	ldr	r3, [pc, #100]	; (8013ea0 <prvSwitchTimerLists+0xc0>)
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	3304      	adds	r3, #4
 8013e42:	4619      	mov	r1, r3
 8013e44:	4610      	mov	r0, r2
 8013e46:	f7fd fb12 	bl	801146e <vListInsert>
 8013e4a:	e016      	b.n	8013e7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	2300      	movs	r3, #0
 8013e52:	693a      	ldr	r2, [r7, #16]
 8013e54:	2100      	movs	r1, #0
 8013e56:	68f8      	ldr	r0, [r7, #12]
 8013e58:	f7ff fd60 	bl	801391c <xTimerGenericCommand>
 8013e5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d10a      	bne.n	8013e7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e68:	f383 8811 	msr	BASEPRI, r3
 8013e6c:	f3bf 8f6f 	isb	sy
 8013e70:	f3bf 8f4f 	dsb	sy
 8013e74:	603b      	str	r3, [r7, #0]
}
 8013e76:	bf00      	nop
 8013e78:	e7fe      	b.n	8013e78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013e7a:	4b09      	ldr	r3, [pc, #36]	; (8013ea0 <prvSwitchTimerLists+0xc0>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d1b1      	bne.n	8013de8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013e84:	4b06      	ldr	r3, [pc, #24]	; (8013ea0 <prvSwitchTimerLists+0xc0>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013e8a:	4b06      	ldr	r3, [pc, #24]	; (8013ea4 <prvSwitchTimerLists+0xc4>)
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	4a04      	ldr	r2, [pc, #16]	; (8013ea0 <prvSwitchTimerLists+0xc0>)
 8013e90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013e92:	4a04      	ldr	r2, [pc, #16]	; (8013ea4 <prvSwitchTimerLists+0xc4>)
 8013e94:	697b      	ldr	r3, [r7, #20]
 8013e96:	6013      	str	r3, [r2, #0]
}
 8013e98:	bf00      	nop
 8013e9a:	3718      	adds	r7, #24
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	20001a00 	.word	0x20001a00
 8013ea4:	20001a04 	.word	0x20001a04

08013ea8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013eae:	f000 f969 	bl	8014184 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013eb2:	4b15      	ldr	r3, [pc, #84]	; (8013f08 <prvCheckForValidListAndQueue+0x60>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d120      	bne.n	8013efc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013eba:	4814      	ldr	r0, [pc, #80]	; (8013f0c <prvCheckForValidListAndQueue+0x64>)
 8013ebc:	f7fd fa86 	bl	80113cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013ec0:	4813      	ldr	r0, [pc, #76]	; (8013f10 <prvCheckForValidListAndQueue+0x68>)
 8013ec2:	f7fd fa83 	bl	80113cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013ec6:	4b13      	ldr	r3, [pc, #76]	; (8013f14 <prvCheckForValidListAndQueue+0x6c>)
 8013ec8:	4a10      	ldr	r2, [pc, #64]	; (8013f0c <prvCheckForValidListAndQueue+0x64>)
 8013eca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013ecc:	4b12      	ldr	r3, [pc, #72]	; (8013f18 <prvCheckForValidListAndQueue+0x70>)
 8013ece:	4a10      	ldr	r2, [pc, #64]	; (8013f10 <prvCheckForValidListAndQueue+0x68>)
 8013ed0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	9300      	str	r3, [sp, #0]
 8013ed6:	4b11      	ldr	r3, [pc, #68]	; (8013f1c <prvCheckForValidListAndQueue+0x74>)
 8013ed8:	4a11      	ldr	r2, [pc, #68]	; (8013f20 <prvCheckForValidListAndQueue+0x78>)
 8013eda:	2110      	movs	r1, #16
 8013edc:	200a      	movs	r0, #10
 8013ede:	f7fd fb91 	bl	8011604 <xQueueGenericCreateStatic>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	4a08      	ldr	r2, [pc, #32]	; (8013f08 <prvCheckForValidListAndQueue+0x60>)
 8013ee6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013ee8:	4b07      	ldr	r3, [pc, #28]	; (8013f08 <prvCheckForValidListAndQueue+0x60>)
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d005      	beq.n	8013efc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013ef0:	4b05      	ldr	r3, [pc, #20]	; (8013f08 <prvCheckForValidListAndQueue+0x60>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	490b      	ldr	r1, [pc, #44]	; (8013f24 <prvCheckForValidListAndQueue+0x7c>)
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	f7fe faa2 	bl	8012440 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013efc:	f000 f972 	bl	80141e4 <vPortExitCritical>
}
 8013f00:	bf00      	nop
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}
 8013f06:	bf00      	nop
 8013f08:	20001a08 	.word	0x20001a08
 8013f0c:	200019d8 	.word	0x200019d8
 8013f10:	200019ec 	.word	0x200019ec
 8013f14:	20001a00 	.word	0x20001a00
 8013f18:	20001a04 	.word	0x20001a04
 8013f1c:	20001ab4 	.word	0x20001ab4
 8013f20:	20001a14 	.word	0x20001a14
 8013f24:	0801bc70 	.word	0x0801bc70

08013f28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013f28:	b480      	push	{r7}
 8013f2a:	b085      	sub	sp, #20
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	60f8      	str	r0, [r7, #12]
 8013f30:	60b9      	str	r1, [r7, #8]
 8013f32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	3b04      	subs	r3, #4
 8013f38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	3b04      	subs	r3, #4
 8013f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	f023 0201 	bic.w	r2, r3, #1
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	3b04      	subs	r3, #4
 8013f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013f58:	4a0c      	ldr	r2, [pc, #48]	; (8013f8c <pxPortInitialiseStack+0x64>)
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	3b14      	subs	r3, #20
 8013f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013f64:	687a      	ldr	r2, [r7, #4]
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	3b04      	subs	r3, #4
 8013f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	f06f 0202 	mvn.w	r2, #2
 8013f76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	3b20      	subs	r3, #32
 8013f7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013f7e:	68fb      	ldr	r3, [r7, #12]
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	3714      	adds	r7, #20
 8013f84:	46bd      	mov	sp, r7
 8013f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f8a:	4770      	bx	lr
 8013f8c:	08013f91 	.word	0x08013f91

08013f90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013f90:	b480      	push	{r7}
 8013f92:	b085      	sub	sp, #20
 8013f94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013f96:	2300      	movs	r3, #0
 8013f98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013f9a:	4b12      	ldr	r3, [pc, #72]	; (8013fe4 <prvTaskExitError+0x54>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fa2:	d00a      	beq.n	8013fba <prvTaskExitError+0x2a>
	__asm volatile
 8013fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa8:	f383 8811 	msr	BASEPRI, r3
 8013fac:	f3bf 8f6f 	isb	sy
 8013fb0:	f3bf 8f4f 	dsb	sy
 8013fb4:	60fb      	str	r3, [r7, #12]
}
 8013fb6:	bf00      	nop
 8013fb8:	e7fe      	b.n	8013fb8 <prvTaskExitError+0x28>
	__asm volatile
 8013fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fbe:	f383 8811 	msr	BASEPRI, r3
 8013fc2:	f3bf 8f6f 	isb	sy
 8013fc6:	f3bf 8f4f 	dsb	sy
 8013fca:	60bb      	str	r3, [r7, #8]
}
 8013fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013fce:	bf00      	nop
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d0fc      	beq.n	8013fd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013fd6:	bf00      	nop
 8013fd8:	bf00      	nop
 8013fda:	3714      	adds	r7, #20
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe2:	4770      	bx	lr
 8013fe4:	200000d0 	.word	0x200000d0
	...

08013ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013ff0:	4b07      	ldr	r3, [pc, #28]	; (8014010 <pxCurrentTCBConst2>)
 8013ff2:	6819      	ldr	r1, [r3, #0]
 8013ff4:	6808      	ldr	r0, [r1, #0]
 8013ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ffa:	f380 8809 	msr	PSP, r0
 8013ffe:	f3bf 8f6f 	isb	sy
 8014002:	f04f 0000 	mov.w	r0, #0
 8014006:	f380 8811 	msr	BASEPRI, r0
 801400a:	4770      	bx	lr
 801400c:	f3af 8000 	nop.w

08014010 <pxCurrentTCBConst2>:
 8014010:	200014d8 	.word	0x200014d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014014:	bf00      	nop
 8014016:	bf00      	nop

08014018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014018:	4808      	ldr	r0, [pc, #32]	; (801403c <prvPortStartFirstTask+0x24>)
 801401a:	6800      	ldr	r0, [r0, #0]
 801401c:	6800      	ldr	r0, [r0, #0]
 801401e:	f380 8808 	msr	MSP, r0
 8014022:	f04f 0000 	mov.w	r0, #0
 8014026:	f380 8814 	msr	CONTROL, r0
 801402a:	b662      	cpsie	i
 801402c:	b661      	cpsie	f
 801402e:	f3bf 8f4f 	dsb	sy
 8014032:	f3bf 8f6f 	isb	sy
 8014036:	df00      	svc	0
 8014038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801403a:	bf00      	nop
 801403c:	e000ed08 	.word	0xe000ed08

08014040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b086      	sub	sp, #24
 8014044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014046:	4b46      	ldr	r3, [pc, #280]	; (8014160 <xPortStartScheduler+0x120>)
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	4a46      	ldr	r2, [pc, #280]	; (8014164 <xPortStartScheduler+0x124>)
 801404c:	4293      	cmp	r3, r2
 801404e:	d10a      	bne.n	8014066 <xPortStartScheduler+0x26>
	__asm volatile
 8014050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014054:	f383 8811 	msr	BASEPRI, r3
 8014058:	f3bf 8f6f 	isb	sy
 801405c:	f3bf 8f4f 	dsb	sy
 8014060:	613b      	str	r3, [r7, #16]
}
 8014062:	bf00      	nop
 8014064:	e7fe      	b.n	8014064 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014066:	4b3e      	ldr	r3, [pc, #248]	; (8014160 <xPortStartScheduler+0x120>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	4a3f      	ldr	r2, [pc, #252]	; (8014168 <xPortStartScheduler+0x128>)
 801406c:	4293      	cmp	r3, r2
 801406e:	d10a      	bne.n	8014086 <xPortStartScheduler+0x46>
	__asm volatile
 8014070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014074:	f383 8811 	msr	BASEPRI, r3
 8014078:	f3bf 8f6f 	isb	sy
 801407c:	f3bf 8f4f 	dsb	sy
 8014080:	60fb      	str	r3, [r7, #12]
}
 8014082:	bf00      	nop
 8014084:	e7fe      	b.n	8014084 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014086:	4b39      	ldr	r3, [pc, #228]	; (801416c <xPortStartScheduler+0x12c>)
 8014088:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	b2db      	uxtb	r3, r3
 8014090:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	22ff      	movs	r2, #255	; 0xff
 8014096:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014098:	697b      	ldr	r3, [r7, #20]
 801409a:	781b      	ldrb	r3, [r3, #0]
 801409c:	b2db      	uxtb	r3, r3
 801409e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80140a0:	78fb      	ldrb	r3, [r7, #3]
 80140a2:	b2db      	uxtb	r3, r3
 80140a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80140a8:	b2da      	uxtb	r2, r3
 80140aa:	4b31      	ldr	r3, [pc, #196]	; (8014170 <xPortStartScheduler+0x130>)
 80140ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80140ae:	4b31      	ldr	r3, [pc, #196]	; (8014174 <xPortStartScheduler+0x134>)
 80140b0:	2207      	movs	r2, #7
 80140b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80140b4:	e009      	b.n	80140ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80140b6:	4b2f      	ldr	r3, [pc, #188]	; (8014174 <xPortStartScheduler+0x134>)
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	3b01      	subs	r3, #1
 80140bc:	4a2d      	ldr	r2, [pc, #180]	; (8014174 <xPortStartScheduler+0x134>)
 80140be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80140c0:	78fb      	ldrb	r3, [r7, #3]
 80140c2:	b2db      	uxtb	r3, r3
 80140c4:	005b      	lsls	r3, r3, #1
 80140c6:	b2db      	uxtb	r3, r3
 80140c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80140ca:	78fb      	ldrb	r3, [r7, #3]
 80140cc:	b2db      	uxtb	r3, r3
 80140ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80140d2:	2b80      	cmp	r3, #128	; 0x80
 80140d4:	d0ef      	beq.n	80140b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80140d6:	4b27      	ldr	r3, [pc, #156]	; (8014174 <xPortStartScheduler+0x134>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	f1c3 0307 	rsb	r3, r3, #7
 80140de:	2b04      	cmp	r3, #4
 80140e0:	d00a      	beq.n	80140f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80140e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140e6:	f383 8811 	msr	BASEPRI, r3
 80140ea:	f3bf 8f6f 	isb	sy
 80140ee:	f3bf 8f4f 	dsb	sy
 80140f2:	60bb      	str	r3, [r7, #8]
}
 80140f4:	bf00      	nop
 80140f6:	e7fe      	b.n	80140f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80140f8:	4b1e      	ldr	r3, [pc, #120]	; (8014174 <xPortStartScheduler+0x134>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	021b      	lsls	r3, r3, #8
 80140fe:	4a1d      	ldr	r2, [pc, #116]	; (8014174 <xPortStartScheduler+0x134>)
 8014100:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014102:	4b1c      	ldr	r3, [pc, #112]	; (8014174 <xPortStartScheduler+0x134>)
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801410a:	4a1a      	ldr	r2, [pc, #104]	; (8014174 <xPortStartScheduler+0x134>)
 801410c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	b2da      	uxtb	r2, r3
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014116:	4b18      	ldr	r3, [pc, #96]	; (8014178 <xPortStartScheduler+0x138>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	4a17      	ldr	r2, [pc, #92]	; (8014178 <xPortStartScheduler+0x138>)
 801411c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014120:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014122:	4b15      	ldr	r3, [pc, #84]	; (8014178 <xPortStartScheduler+0x138>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	4a14      	ldr	r2, [pc, #80]	; (8014178 <xPortStartScheduler+0x138>)
 8014128:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801412c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801412e:	f000 f8dd 	bl	80142ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014132:	4b12      	ldr	r3, [pc, #72]	; (801417c <xPortStartScheduler+0x13c>)
 8014134:	2200      	movs	r2, #0
 8014136:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014138:	f000 f8fc 	bl	8014334 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801413c:	4b10      	ldr	r3, [pc, #64]	; (8014180 <xPortStartScheduler+0x140>)
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	4a0f      	ldr	r2, [pc, #60]	; (8014180 <xPortStartScheduler+0x140>)
 8014142:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014146:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014148:	f7ff ff66 	bl	8014018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801414c:	f7fe ff3a 	bl	8012fc4 <vTaskSwitchContext>
	prvTaskExitError();
 8014150:	f7ff ff1e 	bl	8013f90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014154:	2300      	movs	r3, #0
}
 8014156:	4618      	mov	r0, r3
 8014158:	3718      	adds	r7, #24
 801415a:	46bd      	mov	sp, r7
 801415c:	bd80      	pop	{r7, pc}
 801415e:	bf00      	nop
 8014160:	e000ed00 	.word	0xe000ed00
 8014164:	410fc271 	.word	0x410fc271
 8014168:	410fc270 	.word	0x410fc270
 801416c:	e000e400 	.word	0xe000e400
 8014170:	20001b04 	.word	0x20001b04
 8014174:	20001b08 	.word	0x20001b08
 8014178:	e000ed20 	.word	0xe000ed20
 801417c:	200000d0 	.word	0x200000d0
 8014180:	e000ef34 	.word	0xe000ef34

08014184 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014184:	b480      	push	{r7}
 8014186:	b083      	sub	sp, #12
 8014188:	af00      	add	r7, sp, #0
	__asm volatile
 801418a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801418e:	f383 8811 	msr	BASEPRI, r3
 8014192:	f3bf 8f6f 	isb	sy
 8014196:	f3bf 8f4f 	dsb	sy
 801419a:	607b      	str	r3, [r7, #4]
}
 801419c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801419e:	4b0f      	ldr	r3, [pc, #60]	; (80141dc <vPortEnterCritical+0x58>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	3301      	adds	r3, #1
 80141a4:	4a0d      	ldr	r2, [pc, #52]	; (80141dc <vPortEnterCritical+0x58>)
 80141a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80141a8:	4b0c      	ldr	r3, [pc, #48]	; (80141dc <vPortEnterCritical+0x58>)
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	2b01      	cmp	r3, #1
 80141ae:	d10f      	bne.n	80141d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80141b0:	4b0b      	ldr	r3, [pc, #44]	; (80141e0 <vPortEnterCritical+0x5c>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	b2db      	uxtb	r3, r3
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d00a      	beq.n	80141d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80141ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141be:	f383 8811 	msr	BASEPRI, r3
 80141c2:	f3bf 8f6f 	isb	sy
 80141c6:	f3bf 8f4f 	dsb	sy
 80141ca:	603b      	str	r3, [r7, #0]
}
 80141cc:	bf00      	nop
 80141ce:	e7fe      	b.n	80141ce <vPortEnterCritical+0x4a>
	}
}
 80141d0:	bf00      	nop
 80141d2:	370c      	adds	r7, #12
 80141d4:	46bd      	mov	sp, r7
 80141d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141da:	4770      	bx	lr
 80141dc:	200000d0 	.word	0x200000d0
 80141e0:	e000ed04 	.word	0xe000ed04

080141e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80141e4:	b480      	push	{r7}
 80141e6:	b083      	sub	sp, #12
 80141e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80141ea:	4b12      	ldr	r3, [pc, #72]	; (8014234 <vPortExitCritical+0x50>)
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d10a      	bne.n	8014208 <vPortExitCritical+0x24>
	__asm volatile
 80141f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141f6:	f383 8811 	msr	BASEPRI, r3
 80141fa:	f3bf 8f6f 	isb	sy
 80141fe:	f3bf 8f4f 	dsb	sy
 8014202:	607b      	str	r3, [r7, #4]
}
 8014204:	bf00      	nop
 8014206:	e7fe      	b.n	8014206 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014208:	4b0a      	ldr	r3, [pc, #40]	; (8014234 <vPortExitCritical+0x50>)
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	3b01      	subs	r3, #1
 801420e:	4a09      	ldr	r2, [pc, #36]	; (8014234 <vPortExitCritical+0x50>)
 8014210:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014212:	4b08      	ldr	r3, [pc, #32]	; (8014234 <vPortExitCritical+0x50>)
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d105      	bne.n	8014226 <vPortExitCritical+0x42>
 801421a:	2300      	movs	r3, #0
 801421c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	f383 8811 	msr	BASEPRI, r3
}
 8014224:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014226:	bf00      	nop
 8014228:	370c      	adds	r7, #12
 801422a:	46bd      	mov	sp, r7
 801422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014230:	4770      	bx	lr
 8014232:	bf00      	nop
 8014234:	200000d0 	.word	0x200000d0
	...

08014240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014240:	f3ef 8009 	mrs	r0, PSP
 8014244:	f3bf 8f6f 	isb	sy
 8014248:	4b15      	ldr	r3, [pc, #84]	; (80142a0 <pxCurrentTCBConst>)
 801424a:	681a      	ldr	r2, [r3, #0]
 801424c:	f01e 0f10 	tst.w	lr, #16
 8014250:	bf08      	it	eq
 8014252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801425a:	6010      	str	r0, [r2, #0]
 801425c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014264:	f380 8811 	msr	BASEPRI, r0
 8014268:	f3bf 8f4f 	dsb	sy
 801426c:	f3bf 8f6f 	isb	sy
 8014270:	f7fe fea8 	bl	8012fc4 <vTaskSwitchContext>
 8014274:	f04f 0000 	mov.w	r0, #0
 8014278:	f380 8811 	msr	BASEPRI, r0
 801427c:	bc09      	pop	{r0, r3}
 801427e:	6819      	ldr	r1, [r3, #0]
 8014280:	6808      	ldr	r0, [r1, #0]
 8014282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014286:	f01e 0f10 	tst.w	lr, #16
 801428a:	bf08      	it	eq
 801428c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014290:	f380 8809 	msr	PSP, r0
 8014294:	f3bf 8f6f 	isb	sy
 8014298:	4770      	bx	lr
 801429a:	bf00      	nop
 801429c:	f3af 8000 	nop.w

080142a0 <pxCurrentTCBConst>:
 80142a0:	200014d8 	.word	0x200014d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80142a4:	bf00      	nop
 80142a6:	bf00      	nop

080142a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
	__asm volatile
 80142ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142b2:	f383 8811 	msr	BASEPRI, r3
 80142b6:	f3bf 8f6f 	isb	sy
 80142ba:	f3bf 8f4f 	dsb	sy
 80142be:	607b      	str	r3, [r7, #4]
}
 80142c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80142c2:	f7fe fdc5 	bl	8012e50 <xTaskIncrementTick>
 80142c6:	4603      	mov	r3, r0
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d003      	beq.n	80142d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80142cc:	4b06      	ldr	r3, [pc, #24]	; (80142e8 <xPortSysTickHandler+0x40>)
 80142ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142d2:	601a      	str	r2, [r3, #0]
 80142d4:	2300      	movs	r3, #0
 80142d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	f383 8811 	msr	BASEPRI, r3
}
 80142de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80142e0:	bf00      	nop
 80142e2:	3708      	adds	r7, #8
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}
 80142e8:	e000ed04 	.word	0xe000ed04

080142ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80142ec:	b480      	push	{r7}
 80142ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80142f0:	4b0b      	ldr	r3, [pc, #44]	; (8014320 <vPortSetupTimerInterrupt+0x34>)
 80142f2:	2200      	movs	r2, #0
 80142f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80142f6:	4b0b      	ldr	r3, [pc, #44]	; (8014324 <vPortSetupTimerInterrupt+0x38>)
 80142f8:	2200      	movs	r2, #0
 80142fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80142fc:	4b0a      	ldr	r3, [pc, #40]	; (8014328 <vPortSetupTimerInterrupt+0x3c>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	4a0a      	ldr	r2, [pc, #40]	; (801432c <vPortSetupTimerInterrupt+0x40>)
 8014302:	fba2 2303 	umull	r2, r3, r2, r3
 8014306:	099b      	lsrs	r3, r3, #6
 8014308:	4a09      	ldr	r2, [pc, #36]	; (8014330 <vPortSetupTimerInterrupt+0x44>)
 801430a:	3b01      	subs	r3, #1
 801430c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801430e:	4b04      	ldr	r3, [pc, #16]	; (8014320 <vPortSetupTimerInterrupt+0x34>)
 8014310:	2207      	movs	r2, #7
 8014312:	601a      	str	r2, [r3, #0]
}
 8014314:	bf00      	nop
 8014316:	46bd      	mov	sp, r7
 8014318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431c:	4770      	bx	lr
 801431e:	bf00      	nop
 8014320:	e000e010 	.word	0xe000e010
 8014324:	e000e018 	.word	0xe000e018
 8014328:	20000088 	.word	0x20000088
 801432c:	10624dd3 	.word	0x10624dd3
 8014330:	e000e014 	.word	0xe000e014

08014334 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014334:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014344 <vPortEnableVFP+0x10>
 8014338:	6801      	ldr	r1, [r0, #0]
 801433a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801433e:	6001      	str	r1, [r0, #0]
 8014340:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014342:	bf00      	nop
 8014344:	e000ed88 	.word	0xe000ed88

08014348 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014348:	b480      	push	{r7}
 801434a:	b085      	sub	sp, #20
 801434c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801434e:	f3ef 8305 	mrs	r3, IPSR
 8014352:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	2b0f      	cmp	r3, #15
 8014358:	d914      	bls.n	8014384 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801435a:	4a17      	ldr	r2, [pc, #92]	; (80143b8 <vPortValidateInterruptPriority+0x70>)
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	4413      	add	r3, r2
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014364:	4b15      	ldr	r3, [pc, #84]	; (80143bc <vPortValidateInterruptPriority+0x74>)
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	7afa      	ldrb	r2, [r7, #11]
 801436a:	429a      	cmp	r2, r3
 801436c:	d20a      	bcs.n	8014384 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801436e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014372:	f383 8811 	msr	BASEPRI, r3
 8014376:	f3bf 8f6f 	isb	sy
 801437a:	f3bf 8f4f 	dsb	sy
 801437e:	607b      	str	r3, [r7, #4]
}
 8014380:	bf00      	nop
 8014382:	e7fe      	b.n	8014382 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014384:	4b0e      	ldr	r3, [pc, #56]	; (80143c0 <vPortValidateInterruptPriority+0x78>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801438c:	4b0d      	ldr	r3, [pc, #52]	; (80143c4 <vPortValidateInterruptPriority+0x7c>)
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	429a      	cmp	r2, r3
 8014392:	d90a      	bls.n	80143aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014398:	f383 8811 	msr	BASEPRI, r3
 801439c:	f3bf 8f6f 	isb	sy
 80143a0:	f3bf 8f4f 	dsb	sy
 80143a4:	603b      	str	r3, [r7, #0]
}
 80143a6:	bf00      	nop
 80143a8:	e7fe      	b.n	80143a8 <vPortValidateInterruptPriority+0x60>
	}
 80143aa:	bf00      	nop
 80143ac:	3714      	adds	r7, #20
 80143ae:	46bd      	mov	sp, r7
 80143b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143b4:	4770      	bx	lr
 80143b6:	bf00      	nop
 80143b8:	e000e3f0 	.word	0xe000e3f0
 80143bc:	20001b04 	.word	0x20001b04
 80143c0:	e000ed0c 	.word	0xe000ed0c
 80143c4:	20001b08 	.word	0x20001b08

080143c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b08a      	sub	sp, #40	; 0x28
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80143d0:	2300      	movs	r3, #0
 80143d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80143d4:	f7fe fc80 	bl	8012cd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80143d8:	4b5b      	ldr	r3, [pc, #364]	; (8014548 <pvPortMalloc+0x180>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d101      	bne.n	80143e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80143e0:	f000 f920 	bl	8014624 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80143e4:	4b59      	ldr	r3, [pc, #356]	; (801454c <pvPortMalloc+0x184>)
 80143e6:	681a      	ldr	r2, [r3, #0]
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	4013      	ands	r3, r2
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	f040 8093 	bne.w	8014518 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d01d      	beq.n	8014434 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80143f8:	2208      	movs	r2, #8
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	4413      	add	r3, r2
 80143fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f003 0307 	and.w	r3, r3, #7
 8014406:	2b00      	cmp	r3, #0
 8014408:	d014      	beq.n	8014434 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	f023 0307 	bic.w	r3, r3, #7
 8014410:	3308      	adds	r3, #8
 8014412:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f003 0307 	and.w	r3, r3, #7
 801441a:	2b00      	cmp	r3, #0
 801441c:	d00a      	beq.n	8014434 <pvPortMalloc+0x6c>
	__asm volatile
 801441e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014422:	f383 8811 	msr	BASEPRI, r3
 8014426:	f3bf 8f6f 	isb	sy
 801442a:	f3bf 8f4f 	dsb	sy
 801442e:	617b      	str	r3, [r7, #20]
}
 8014430:	bf00      	nop
 8014432:	e7fe      	b.n	8014432 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d06e      	beq.n	8014518 <pvPortMalloc+0x150>
 801443a:	4b45      	ldr	r3, [pc, #276]	; (8014550 <pvPortMalloc+0x188>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	687a      	ldr	r2, [r7, #4]
 8014440:	429a      	cmp	r2, r3
 8014442:	d869      	bhi.n	8014518 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014444:	4b43      	ldr	r3, [pc, #268]	; (8014554 <pvPortMalloc+0x18c>)
 8014446:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014448:	4b42      	ldr	r3, [pc, #264]	; (8014554 <pvPortMalloc+0x18c>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801444e:	e004      	b.n	801445a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014452:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801445c:	685b      	ldr	r3, [r3, #4]
 801445e:	687a      	ldr	r2, [r7, #4]
 8014460:	429a      	cmp	r2, r3
 8014462:	d903      	bls.n	801446c <pvPortMalloc+0xa4>
 8014464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d1f1      	bne.n	8014450 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801446c:	4b36      	ldr	r3, [pc, #216]	; (8014548 <pvPortMalloc+0x180>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014472:	429a      	cmp	r2, r3
 8014474:	d050      	beq.n	8014518 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014476:	6a3b      	ldr	r3, [r7, #32]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	2208      	movs	r2, #8
 801447c:	4413      	add	r3, r2
 801447e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014482:	681a      	ldr	r2, [r3, #0]
 8014484:	6a3b      	ldr	r3, [r7, #32]
 8014486:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801448a:	685a      	ldr	r2, [r3, #4]
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	1ad2      	subs	r2, r2, r3
 8014490:	2308      	movs	r3, #8
 8014492:	005b      	lsls	r3, r3, #1
 8014494:	429a      	cmp	r2, r3
 8014496:	d91f      	bls.n	80144d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	4413      	add	r3, r2
 801449e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80144a0:	69bb      	ldr	r3, [r7, #24]
 80144a2:	f003 0307 	and.w	r3, r3, #7
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d00a      	beq.n	80144c0 <pvPortMalloc+0xf8>
	__asm volatile
 80144aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ae:	f383 8811 	msr	BASEPRI, r3
 80144b2:	f3bf 8f6f 	isb	sy
 80144b6:	f3bf 8f4f 	dsb	sy
 80144ba:	613b      	str	r3, [r7, #16]
}
 80144bc:	bf00      	nop
 80144be:	e7fe      	b.n	80144be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80144c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c2:	685a      	ldr	r2, [r3, #4]
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	1ad2      	subs	r2, r2, r3
 80144c8:	69bb      	ldr	r3, [r7, #24]
 80144ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80144cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80144d2:	69b8      	ldr	r0, [r7, #24]
 80144d4:	f000 f908 	bl	80146e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80144d8:	4b1d      	ldr	r3, [pc, #116]	; (8014550 <pvPortMalloc+0x188>)
 80144da:	681a      	ldr	r2, [r3, #0]
 80144dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	1ad3      	subs	r3, r2, r3
 80144e2:	4a1b      	ldr	r2, [pc, #108]	; (8014550 <pvPortMalloc+0x188>)
 80144e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80144e6:	4b1a      	ldr	r3, [pc, #104]	; (8014550 <pvPortMalloc+0x188>)
 80144e8:	681a      	ldr	r2, [r3, #0]
 80144ea:	4b1b      	ldr	r3, [pc, #108]	; (8014558 <pvPortMalloc+0x190>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d203      	bcs.n	80144fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80144f2:	4b17      	ldr	r3, [pc, #92]	; (8014550 <pvPortMalloc+0x188>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	4a18      	ldr	r2, [pc, #96]	; (8014558 <pvPortMalloc+0x190>)
 80144f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80144fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144fc:	685a      	ldr	r2, [r3, #4]
 80144fe:	4b13      	ldr	r3, [pc, #76]	; (801454c <pvPortMalloc+0x184>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	431a      	orrs	r2, r3
 8014504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014506:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801450a:	2200      	movs	r2, #0
 801450c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801450e:	4b13      	ldr	r3, [pc, #76]	; (801455c <pvPortMalloc+0x194>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	3301      	adds	r3, #1
 8014514:	4a11      	ldr	r2, [pc, #68]	; (801455c <pvPortMalloc+0x194>)
 8014516:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014518:	f7fe fbec 	bl	8012cf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801451c:	69fb      	ldr	r3, [r7, #28]
 801451e:	f003 0307 	and.w	r3, r3, #7
 8014522:	2b00      	cmp	r3, #0
 8014524:	d00a      	beq.n	801453c <pvPortMalloc+0x174>
	__asm volatile
 8014526:	f04f 0350 	mov.w	r3, #80	; 0x50
 801452a:	f383 8811 	msr	BASEPRI, r3
 801452e:	f3bf 8f6f 	isb	sy
 8014532:	f3bf 8f4f 	dsb	sy
 8014536:	60fb      	str	r3, [r7, #12]
}
 8014538:	bf00      	nop
 801453a:	e7fe      	b.n	801453a <pvPortMalloc+0x172>
	return pvReturn;
 801453c:	69fb      	ldr	r3, [r7, #28]
}
 801453e:	4618      	mov	r0, r3
 8014540:	3728      	adds	r7, #40	; 0x28
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
 8014546:	bf00      	nop
 8014548:	20006164 	.word	0x20006164
 801454c:	20006178 	.word	0x20006178
 8014550:	20006168 	.word	0x20006168
 8014554:	2000615c 	.word	0x2000615c
 8014558:	2000616c 	.word	0x2000616c
 801455c:	20006170 	.word	0x20006170

08014560 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b086      	sub	sp, #24
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d04d      	beq.n	801460e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014572:	2308      	movs	r3, #8
 8014574:	425b      	negs	r3, r3
 8014576:	697a      	ldr	r2, [r7, #20]
 8014578:	4413      	add	r3, r2
 801457a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801457c:	697b      	ldr	r3, [r7, #20]
 801457e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	685a      	ldr	r2, [r3, #4]
 8014584:	4b24      	ldr	r3, [pc, #144]	; (8014618 <vPortFree+0xb8>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	4013      	ands	r3, r2
 801458a:	2b00      	cmp	r3, #0
 801458c:	d10a      	bne.n	80145a4 <vPortFree+0x44>
	__asm volatile
 801458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014592:	f383 8811 	msr	BASEPRI, r3
 8014596:	f3bf 8f6f 	isb	sy
 801459a:	f3bf 8f4f 	dsb	sy
 801459e:	60fb      	str	r3, [r7, #12]
}
 80145a0:	bf00      	nop
 80145a2:	e7fe      	b.n	80145a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d00a      	beq.n	80145c2 <vPortFree+0x62>
	__asm volatile
 80145ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b0:	f383 8811 	msr	BASEPRI, r3
 80145b4:	f3bf 8f6f 	isb	sy
 80145b8:	f3bf 8f4f 	dsb	sy
 80145bc:	60bb      	str	r3, [r7, #8]
}
 80145be:	bf00      	nop
 80145c0:	e7fe      	b.n	80145c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	685a      	ldr	r2, [r3, #4]
 80145c6:	4b14      	ldr	r3, [pc, #80]	; (8014618 <vPortFree+0xb8>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	4013      	ands	r3, r2
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d01e      	beq.n	801460e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d11a      	bne.n	801460e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	685a      	ldr	r2, [r3, #4]
 80145dc:	4b0e      	ldr	r3, [pc, #56]	; (8014618 <vPortFree+0xb8>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	43db      	mvns	r3, r3
 80145e2:	401a      	ands	r2, r3
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80145e8:	f7fe fb76 	bl	8012cd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	685a      	ldr	r2, [r3, #4]
 80145f0:	4b0a      	ldr	r3, [pc, #40]	; (801461c <vPortFree+0xbc>)
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	4413      	add	r3, r2
 80145f6:	4a09      	ldr	r2, [pc, #36]	; (801461c <vPortFree+0xbc>)
 80145f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80145fa:	6938      	ldr	r0, [r7, #16]
 80145fc:	f000 f874 	bl	80146e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014600:	4b07      	ldr	r3, [pc, #28]	; (8014620 <vPortFree+0xc0>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	3301      	adds	r3, #1
 8014606:	4a06      	ldr	r2, [pc, #24]	; (8014620 <vPortFree+0xc0>)
 8014608:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801460a:	f7fe fb73 	bl	8012cf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801460e:	bf00      	nop
 8014610:	3718      	adds	r7, #24
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}
 8014616:	bf00      	nop
 8014618:	20006178 	.word	0x20006178
 801461c:	20006168 	.word	0x20006168
 8014620:	20006174 	.word	0x20006174

08014624 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014624:	b480      	push	{r7}
 8014626:	b085      	sub	sp, #20
 8014628:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801462a:	f244 6350 	movw	r3, #18000	; 0x4650
 801462e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014630:	4b27      	ldr	r3, [pc, #156]	; (80146d0 <prvHeapInit+0xac>)
 8014632:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	f003 0307 	and.w	r3, r3, #7
 801463a:	2b00      	cmp	r3, #0
 801463c:	d00c      	beq.n	8014658 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	3307      	adds	r3, #7
 8014642:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	f023 0307 	bic.w	r3, r3, #7
 801464a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801464c:	68ba      	ldr	r2, [r7, #8]
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	1ad3      	subs	r3, r2, r3
 8014652:	4a1f      	ldr	r2, [pc, #124]	; (80146d0 <prvHeapInit+0xac>)
 8014654:	4413      	add	r3, r2
 8014656:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801465c:	4a1d      	ldr	r2, [pc, #116]	; (80146d4 <prvHeapInit+0xb0>)
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014662:	4b1c      	ldr	r3, [pc, #112]	; (80146d4 <prvHeapInit+0xb0>)
 8014664:	2200      	movs	r2, #0
 8014666:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	68ba      	ldr	r2, [r7, #8]
 801466c:	4413      	add	r3, r2
 801466e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014670:	2208      	movs	r2, #8
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	1a9b      	subs	r3, r3, r2
 8014676:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	f023 0307 	bic.w	r3, r3, #7
 801467e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	4a15      	ldr	r2, [pc, #84]	; (80146d8 <prvHeapInit+0xb4>)
 8014684:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014686:	4b14      	ldr	r3, [pc, #80]	; (80146d8 <prvHeapInit+0xb4>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	2200      	movs	r2, #0
 801468c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801468e:	4b12      	ldr	r3, [pc, #72]	; (80146d8 <prvHeapInit+0xb4>)
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	2200      	movs	r2, #0
 8014694:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	68fa      	ldr	r2, [r7, #12]
 801469e:	1ad2      	subs	r2, r2, r3
 80146a0:	683b      	ldr	r3, [r7, #0]
 80146a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80146a4:	4b0c      	ldr	r3, [pc, #48]	; (80146d8 <prvHeapInit+0xb4>)
 80146a6:	681a      	ldr	r2, [r3, #0]
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80146ac:	683b      	ldr	r3, [r7, #0]
 80146ae:	685b      	ldr	r3, [r3, #4]
 80146b0:	4a0a      	ldr	r2, [pc, #40]	; (80146dc <prvHeapInit+0xb8>)
 80146b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80146b4:	683b      	ldr	r3, [r7, #0]
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	4a09      	ldr	r2, [pc, #36]	; (80146e0 <prvHeapInit+0xbc>)
 80146ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80146bc:	4b09      	ldr	r3, [pc, #36]	; (80146e4 <prvHeapInit+0xc0>)
 80146be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80146c2:	601a      	str	r2, [r3, #0]
}
 80146c4:	bf00      	nop
 80146c6:	3714      	adds	r7, #20
 80146c8:	46bd      	mov	sp, r7
 80146ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ce:	4770      	bx	lr
 80146d0:	20001b0c 	.word	0x20001b0c
 80146d4:	2000615c 	.word	0x2000615c
 80146d8:	20006164 	.word	0x20006164
 80146dc:	2000616c 	.word	0x2000616c
 80146e0:	20006168 	.word	0x20006168
 80146e4:	20006178 	.word	0x20006178

080146e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80146e8:	b480      	push	{r7}
 80146ea:	b085      	sub	sp, #20
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80146f0:	4b28      	ldr	r3, [pc, #160]	; (8014794 <prvInsertBlockIntoFreeList+0xac>)
 80146f2:	60fb      	str	r3, [r7, #12]
 80146f4:	e002      	b.n	80146fc <prvInsertBlockIntoFreeList+0x14>
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	60fb      	str	r3, [r7, #12]
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	687a      	ldr	r2, [r7, #4]
 8014702:	429a      	cmp	r2, r3
 8014704:	d8f7      	bhi.n	80146f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	685b      	ldr	r3, [r3, #4]
 801470e:	68ba      	ldr	r2, [r7, #8]
 8014710:	4413      	add	r3, r2
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	429a      	cmp	r2, r3
 8014716:	d108      	bne.n	801472a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	685a      	ldr	r2, [r3, #4]
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	685b      	ldr	r3, [r3, #4]
 8014720:	441a      	add	r2, r3
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	685b      	ldr	r3, [r3, #4]
 8014732:	68ba      	ldr	r2, [r7, #8]
 8014734:	441a      	add	r2, r3
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	429a      	cmp	r2, r3
 801473c:	d118      	bne.n	8014770 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	681a      	ldr	r2, [r3, #0]
 8014742:	4b15      	ldr	r3, [pc, #84]	; (8014798 <prvInsertBlockIntoFreeList+0xb0>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	429a      	cmp	r2, r3
 8014748:	d00d      	beq.n	8014766 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	685a      	ldr	r2, [r3, #4]
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	685b      	ldr	r3, [r3, #4]
 8014754:	441a      	add	r2, r3
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	681a      	ldr	r2, [r3, #0]
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	601a      	str	r2, [r3, #0]
 8014764:	e008      	b.n	8014778 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014766:	4b0c      	ldr	r3, [pc, #48]	; (8014798 <prvInsertBlockIntoFreeList+0xb0>)
 8014768:	681a      	ldr	r2, [r3, #0]
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	601a      	str	r2, [r3, #0]
 801476e:	e003      	b.n	8014778 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	681a      	ldr	r2, [r3, #0]
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014778:	68fa      	ldr	r2, [r7, #12]
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	429a      	cmp	r2, r3
 801477e:	d002      	beq.n	8014786 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014786:	bf00      	nop
 8014788:	3714      	adds	r7, #20
 801478a:	46bd      	mov	sp, r7
 801478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014790:	4770      	bx	lr
 8014792:	bf00      	nop
 8014794:	2000615c 	.word	0x2000615c
 8014798:	20006164 	.word	0x20006164

0801479c <_Znwj>:
 801479c:	2801      	cmp	r0, #1
 801479e:	bf38      	it	cc
 80147a0:	2001      	movcc	r0, #1
 80147a2:	b510      	push	{r4, lr}
 80147a4:	4604      	mov	r4, r0
 80147a6:	4620      	mov	r0, r4
 80147a8:	f001 f908 	bl	80159bc <malloc>
 80147ac:	b930      	cbnz	r0, 80147bc <_Znwj+0x20>
 80147ae:	f000 f81b 	bl	80147e8 <_ZSt15get_new_handlerv>
 80147b2:	b908      	cbnz	r0, 80147b8 <_Znwj+0x1c>
 80147b4:	f000 ffd6 	bl	8015764 <abort>
 80147b8:	4780      	blx	r0
 80147ba:	e7f4      	b.n	80147a6 <_Znwj+0xa>
 80147bc:	bd10      	pop	{r4, pc}

080147be <__cxa_pure_virtual>:
 80147be:	b508      	push	{r3, lr}
 80147c0:	f000 f80c 	bl	80147dc <_ZSt9terminatev>

080147c4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80147c4:	b508      	push	{r3, lr}
 80147c6:	4780      	blx	r0
 80147c8:	f000 ffcc 	bl	8015764 <abort>

080147cc <_ZSt13get_terminatev>:
 80147cc:	4b02      	ldr	r3, [pc, #8]	; (80147d8 <_ZSt13get_terminatev+0xc>)
 80147ce:	6818      	ldr	r0, [r3, #0]
 80147d0:	f3bf 8f5b 	dmb	ish
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop
 80147d8:	200000d4 	.word	0x200000d4

080147dc <_ZSt9terminatev>:
 80147dc:	b508      	push	{r3, lr}
 80147de:	f7ff fff5 	bl	80147cc <_ZSt13get_terminatev>
 80147e2:	f7ff ffef 	bl	80147c4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080147e8 <_ZSt15get_new_handlerv>:
 80147e8:	4b02      	ldr	r3, [pc, #8]	; (80147f4 <_ZSt15get_new_handlerv+0xc>)
 80147ea:	6818      	ldr	r0, [r3, #0]
 80147ec:	f3bf 8f5b 	dmb	ish
 80147f0:	4770      	bx	lr
 80147f2:	bf00      	nop
 80147f4:	2000617c 	.word	0x2000617c

080147f8 <pow>:
 80147f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147fc:	ec59 8b10 	vmov	r8, r9, d0
 8014800:	ec57 6b11 	vmov	r6, r7, d1
 8014804:	f000 f8a8 	bl	8014958 <__ieee754_pow>
 8014808:	4b4e      	ldr	r3, [pc, #312]	; (8014944 <pow+0x14c>)
 801480a:	f993 3000 	ldrsb.w	r3, [r3]
 801480e:	3301      	adds	r3, #1
 8014810:	ec55 4b10 	vmov	r4, r5, d0
 8014814:	d015      	beq.n	8014842 <pow+0x4a>
 8014816:	4632      	mov	r2, r6
 8014818:	463b      	mov	r3, r7
 801481a:	4630      	mov	r0, r6
 801481c:	4639      	mov	r1, r7
 801481e:	f7ec f995 	bl	8000b4c <__aeabi_dcmpun>
 8014822:	b970      	cbnz	r0, 8014842 <pow+0x4a>
 8014824:	4642      	mov	r2, r8
 8014826:	464b      	mov	r3, r9
 8014828:	4640      	mov	r0, r8
 801482a:	4649      	mov	r1, r9
 801482c:	f7ec f98e 	bl	8000b4c <__aeabi_dcmpun>
 8014830:	2200      	movs	r2, #0
 8014832:	2300      	movs	r3, #0
 8014834:	b148      	cbz	r0, 801484a <pow+0x52>
 8014836:	4630      	mov	r0, r6
 8014838:	4639      	mov	r1, r7
 801483a:	f7ec f955 	bl	8000ae8 <__aeabi_dcmpeq>
 801483e:	2800      	cmp	r0, #0
 8014840:	d17d      	bne.n	801493e <pow+0x146>
 8014842:	ec45 4b10 	vmov	d0, r4, r5
 8014846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801484a:	4640      	mov	r0, r8
 801484c:	4649      	mov	r1, r9
 801484e:	f7ec f94b 	bl	8000ae8 <__aeabi_dcmpeq>
 8014852:	b1e0      	cbz	r0, 801488e <pow+0x96>
 8014854:	2200      	movs	r2, #0
 8014856:	2300      	movs	r3, #0
 8014858:	4630      	mov	r0, r6
 801485a:	4639      	mov	r1, r7
 801485c:	f7ec f944 	bl	8000ae8 <__aeabi_dcmpeq>
 8014860:	2800      	cmp	r0, #0
 8014862:	d16c      	bne.n	801493e <pow+0x146>
 8014864:	ec47 6b10 	vmov	d0, r6, r7
 8014868:	f000 fe55 	bl	8015516 <finite>
 801486c:	2800      	cmp	r0, #0
 801486e:	d0e8      	beq.n	8014842 <pow+0x4a>
 8014870:	2200      	movs	r2, #0
 8014872:	2300      	movs	r3, #0
 8014874:	4630      	mov	r0, r6
 8014876:	4639      	mov	r1, r7
 8014878:	f7ec f940 	bl	8000afc <__aeabi_dcmplt>
 801487c:	2800      	cmp	r0, #0
 801487e:	d0e0      	beq.n	8014842 <pow+0x4a>
 8014880:	f000 ff78 	bl	8015774 <__errno>
 8014884:	2321      	movs	r3, #33	; 0x21
 8014886:	6003      	str	r3, [r0, #0]
 8014888:	2400      	movs	r4, #0
 801488a:	4d2f      	ldr	r5, [pc, #188]	; (8014948 <pow+0x150>)
 801488c:	e7d9      	b.n	8014842 <pow+0x4a>
 801488e:	ec45 4b10 	vmov	d0, r4, r5
 8014892:	f000 fe40 	bl	8015516 <finite>
 8014896:	bbb8      	cbnz	r0, 8014908 <pow+0x110>
 8014898:	ec49 8b10 	vmov	d0, r8, r9
 801489c:	f000 fe3b 	bl	8015516 <finite>
 80148a0:	b390      	cbz	r0, 8014908 <pow+0x110>
 80148a2:	ec47 6b10 	vmov	d0, r6, r7
 80148a6:	f000 fe36 	bl	8015516 <finite>
 80148aa:	b368      	cbz	r0, 8014908 <pow+0x110>
 80148ac:	4622      	mov	r2, r4
 80148ae:	462b      	mov	r3, r5
 80148b0:	4620      	mov	r0, r4
 80148b2:	4629      	mov	r1, r5
 80148b4:	f7ec f94a 	bl	8000b4c <__aeabi_dcmpun>
 80148b8:	b160      	cbz	r0, 80148d4 <pow+0xdc>
 80148ba:	f000 ff5b 	bl	8015774 <__errno>
 80148be:	2321      	movs	r3, #33	; 0x21
 80148c0:	6003      	str	r3, [r0, #0]
 80148c2:	2200      	movs	r2, #0
 80148c4:	2300      	movs	r3, #0
 80148c6:	4610      	mov	r0, r2
 80148c8:	4619      	mov	r1, r3
 80148ca:	f7eb ffcf 	bl	800086c <__aeabi_ddiv>
 80148ce:	4604      	mov	r4, r0
 80148d0:	460d      	mov	r5, r1
 80148d2:	e7b6      	b.n	8014842 <pow+0x4a>
 80148d4:	f000 ff4e 	bl	8015774 <__errno>
 80148d8:	2322      	movs	r3, #34	; 0x22
 80148da:	6003      	str	r3, [r0, #0]
 80148dc:	2200      	movs	r2, #0
 80148de:	2300      	movs	r3, #0
 80148e0:	4640      	mov	r0, r8
 80148e2:	4649      	mov	r1, r9
 80148e4:	f7ec f90a 	bl	8000afc <__aeabi_dcmplt>
 80148e8:	2400      	movs	r4, #0
 80148ea:	b158      	cbz	r0, 8014904 <pow+0x10c>
 80148ec:	ec47 6b10 	vmov	d0, r6, r7
 80148f0:	f000 fe26 	bl	8015540 <rint>
 80148f4:	4632      	mov	r2, r6
 80148f6:	ec51 0b10 	vmov	r0, r1, d0
 80148fa:	463b      	mov	r3, r7
 80148fc:	f7ec f8f4 	bl	8000ae8 <__aeabi_dcmpeq>
 8014900:	2800      	cmp	r0, #0
 8014902:	d0c2      	beq.n	801488a <pow+0x92>
 8014904:	4d11      	ldr	r5, [pc, #68]	; (801494c <pow+0x154>)
 8014906:	e79c      	b.n	8014842 <pow+0x4a>
 8014908:	2200      	movs	r2, #0
 801490a:	2300      	movs	r3, #0
 801490c:	4620      	mov	r0, r4
 801490e:	4629      	mov	r1, r5
 8014910:	f7ec f8ea 	bl	8000ae8 <__aeabi_dcmpeq>
 8014914:	2800      	cmp	r0, #0
 8014916:	d094      	beq.n	8014842 <pow+0x4a>
 8014918:	ec49 8b10 	vmov	d0, r8, r9
 801491c:	f000 fdfb 	bl	8015516 <finite>
 8014920:	2800      	cmp	r0, #0
 8014922:	d08e      	beq.n	8014842 <pow+0x4a>
 8014924:	ec47 6b10 	vmov	d0, r6, r7
 8014928:	f000 fdf5 	bl	8015516 <finite>
 801492c:	2800      	cmp	r0, #0
 801492e:	d088      	beq.n	8014842 <pow+0x4a>
 8014930:	f000 ff20 	bl	8015774 <__errno>
 8014934:	2322      	movs	r3, #34	; 0x22
 8014936:	6003      	str	r3, [r0, #0]
 8014938:	2400      	movs	r4, #0
 801493a:	2500      	movs	r5, #0
 801493c:	e781      	b.n	8014842 <pow+0x4a>
 801493e:	4d04      	ldr	r5, [pc, #16]	; (8014950 <pow+0x158>)
 8014940:	2400      	movs	r4, #0
 8014942:	e77e      	b.n	8014842 <pow+0x4a>
 8014944:	200000d8 	.word	0x200000d8
 8014948:	fff00000 	.word	0xfff00000
 801494c:	7ff00000 	.word	0x7ff00000
 8014950:	3ff00000 	.word	0x3ff00000
 8014954:	00000000 	.word	0x00000000

08014958 <__ieee754_pow>:
 8014958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801495c:	ed2d 8b06 	vpush	{d8-d10}
 8014960:	b08d      	sub	sp, #52	; 0x34
 8014962:	ed8d 1b02 	vstr	d1, [sp, #8]
 8014966:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801496a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801496e:	ea56 0100 	orrs.w	r1, r6, r0
 8014972:	ec53 2b10 	vmov	r2, r3, d0
 8014976:	f000 84d1 	beq.w	801531c <__ieee754_pow+0x9c4>
 801497a:	497f      	ldr	r1, [pc, #508]	; (8014b78 <__ieee754_pow+0x220>)
 801497c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8014980:	428c      	cmp	r4, r1
 8014982:	ee10 8a10 	vmov	r8, s0
 8014986:	4699      	mov	r9, r3
 8014988:	dc09      	bgt.n	801499e <__ieee754_pow+0x46>
 801498a:	d103      	bne.n	8014994 <__ieee754_pow+0x3c>
 801498c:	b97a      	cbnz	r2, 80149ae <__ieee754_pow+0x56>
 801498e:	42a6      	cmp	r6, r4
 8014990:	dd02      	ble.n	8014998 <__ieee754_pow+0x40>
 8014992:	e00c      	b.n	80149ae <__ieee754_pow+0x56>
 8014994:	428e      	cmp	r6, r1
 8014996:	dc02      	bgt.n	801499e <__ieee754_pow+0x46>
 8014998:	428e      	cmp	r6, r1
 801499a:	d110      	bne.n	80149be <__ieee754_pow+0x66>
 801499c:	b178      	cbz	r0, 80149be <__ieee754_pow+0x66>
 801499e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80149a2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80149a6:	ea54 0308 	orrs.w	r3, r4, r8
 80149aa:	f000 84b7 	beq.w	801531c <__ieee754_pow+0x9c4>
 80149ae:	4873      	ldr	r0, [pc, #460]	; (8014b7c <__ieee754_pow+0x224>)
 80149b0:	b00d      	add	sp, #52	; 0x34
 80149b2:	ecbd 8b06 	vpop	{d8-d10}
 80149b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ba:	f000 bdb9 	b.w	8015530 <nan>
 80149be:	f1b9 0f00 	cmp.w	r9, #0
 80149c2:	da36      	bge.n	8014a32 <__ieee754_pow+0xda>
 80149c4:	496e      	ldr	r1, [pc, #440]	; (8014b80 <__ieee754_pow+0x228>)
 80149c6:	428e      	cmp	r6, r1
 80149c8:	dc51      	bgt.n	8014a6e <__ieee754_pow+0x116>
 80149ca:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80149ce:	428e      	cmp	r6, r1
 80149d0:	f340 84af 	ble.w	8015332 <__ieee754_pow+0x9da>
 80149d4:	1531      	asrs	r1, r6, #20
 80149d6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80149da:	2914      	cmp	r1, #20
 80149dc:	dd0f      	ble.n	80149fe <__ieee754_pow+0xa6>
 80149de:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80149e2:	fa20 fc01 	lsr.w	ip, r0, r1
 80149e6:	fa0c f101 	lsl.w	r1, ip, r1
 80149ea:	4281      	cmp	r1, r0
 80149ec:	f040 84a1 	bne.w	8015332 <__ieee754_pow+0x9da>
 80149f0:	f00c 0c01 	and.w	ip, ip, #1
 80149f4:	f1cc 0102 	rsb	r1, ip, #2
 80149f8:	9100      	str	r1, [sp, #0]
 80149fa:	b180      	cbz	r0, 8014a1e <__ieee754_pow+0xc6>
 80149fc:	e059      	b.n	8014ab2 <__ieee754_pow+0x15a>
 80149fe:	2800      	cmp	r0, #0
 8014a00:	d155      	bne.n	8014aae <__ieee754_pow+0x156>
 8014a02:	f1c1 0114 	rsb	r1, r1, #20
 8014a06:	fa46 fc01 	asr.w	ip, r6, r1
 8014a0a:	fa0c f101 	lsl.w	r1, ip, r1
 8014a0e:	42b1      	cmp	r1, r6
 8014a10:	f040 848c 	bne.w	801532c <__ieee754_pow+0x9d4>
 8014a14:	f00c 0c01 	and.w	ip, ip, #1
 8014a18:	f1cc 0102 	rsb	r1, ip, #2
 8014a1c:	9100      	str	r1, [sp, #0]
 8014a1e:	4959      	ldr	r1, [pc, #356]	; (8014b84 <__ieee754_pow+0x22c>)
 8014a20:	428e      	cmp	r6, r1
 8014a22:	d12d      	bne.n	8014a80 <__ieee754_pow+0x128>
 8014a24:	2f00      	cmp	r7, #0
 8014a26:	da79      	bge.n	8014b1c <__ieee754_pow+0x1c4>
 8014a28:	4956      	ldr	r1, [pc, #344]	; (8014b84 <__ieee754_pow+0x22c>)
 8014a2a:	2000      	movs	r0, #0
 8014a2c:	f7eb ff1e 	bl	800086c <__aeabi_ddiv>
 8014a30:	e016      	b.n	8014a60 <__ieee754_pow+0x108>
 8014a32:	2100      	movs	r1, #0
 8014a34:	9100      	str	r1, [sp, #0]
 8014a36:	2800      	cmp	r0, #0
 8014a38:	d13b      	bne.n	8014ab2 <__ieee754_pow+0x15a>
 8014a3a:	494f      	ldr	r1, [pc, #316]	; (8014b78 <__ieee754_pow+0x220>)
 8014a3c:	428e      	cmp	r6, r1
 8014a3e:	d1ee      	bne.n	8014a1e <__ieee754_pow+0xc6>
 8014a40:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014a44:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014a48:	ea53 0308 	orrs.w	r3, r3, r8
 8014a4c:	f000 8466 	beq.w	801531c <__ieee754_pow+0x9c4>
 8014a50:	4b4d      	ldr	r3, [pc, #308]	; (8014b88 <__ieee754_pow+0x230>)
 8014a52:	429c      	cmp	r4, r3
 8014a54:	dd0d      	ble.n	8014a72 <__ieee754_pow+0x11a>
 8014a56:	2f00      	cmp	r7, #0
 8014a58:	f280 8464 	bge.w	8015324 <__ieee754_pow+0x9cc>
 8014a5c:	2000      	movs	r0, #0
 8014a5e:	2100      	movs	r1, #0
 8014a60:	ec41 0b10 	vmov	d0, r0, r1
 8014a64:	b00d      	add	sp, #52	; 0x34
 8014a66:	ecbd 8b06 	vpop	{d8-d10}
 8014a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a6e:	2102      	movs	r1, #2
 8014a70:	e7e0      	b.n	8014a34 <__ieee754_pow+0xdc>
 8014a72:	2f00      	cmp	r7, #0
 8014a74:	daf2      	bge.n	8014a5c <__ieee754_pow+0x104>
 8014a76:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8014a7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014a7e:	e7ef      	b.n	8014a60 <__ieee754_pow+0x108>
 8014a80:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8014a84:	d104      	bne.n	8014a90 <__ieee754_pow+0x138>
 8014a86:	4610      	mov	r0, r2
 8014a88:	4619      	mov	r1, r3
 8014a8a:	f7eb fdc5 	bl	8000618 <__aeabi_dmul>
 8014a8e:	e7e7      	b.n	8014a60 <__ieee754_pow+0x108>
 8014a90:	493e      	ldr	r1, [pc, #248]	; (8014b8c <__ieee754_pow+0x234>)
 8014a92:	428f      	cmp	r7, r1
 8014a94:	d10d      	bne.n	8014ab2 <__ieee754_pow+0x15a>
 8014a96:	f1b9 0f00 	cmp.w	r9, #0
 8014a9a:	db0a      	blt.n	8014ab2 <__ieee754_pow+0x15a>
 8014a9c:	ec43 2b10 	vmov	d0, r2, r3
 8014aa0:	b00d      	add	sp, #52	; 0x34
 8014aa2:	ecbd 8b06 	vpop	{d8-d10}
 8014aa6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aaa:	f000 bc77 	b.w	801539c <__ieee754_sqrt>
 8014aae:	2100      	movs	r1, #0
 8014ab0:	9100      	str	r1, [sp, #0]
 8014ab2:	ec43 2b10 	vmov	d0, r2, r3
 8014ab6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014aba:	f000 fd23 	bl	8015504 <fabs>
 8014abe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ac2:	ec51 0b10 	vmov	r0, r1, d0
 8014ac6:	f1b8 0f00 	cmp.w	r8, #0
 8014aca:	d12a      	bne.n	8014b22 <__ieee754_pow+0x1ca>
 8014acc:	b12c      	cbz	r4, 8014ada <__ieee754_pow+0x182>
 8014ace:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8014b84 <__ieee754_pow+0x22c>
 8014ad2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8014ad6:	45e6      	cmp	lr, ip
 8014ad8:	d123      	bne.n	8014b22 <__ieee754_pow+0x1ca>
 8014ada:	2f00      	cmp	r7, #0
 8014adc:	da05      	bge.n	8014aea <__ieee754_pow+0x192>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	460b      	mov	r3, r1
 8014ae2:	2000      	movs	r0, #0
 8014ae4:	4927      	ldr	r1, [pc, #156]	; (8014b84 <__ieee754_pow+0x22c>)
 8014ae6:	f7eb fec1 	bl	800086c <__aeabi_ddiv>
 8014aea:	f1b9 0f00 	cmp.w	r9, #0
 8014aee:	dab7      	bge.n	8014a60 <__ieee754_pow+0x108>
 8014af0:	9b00      	ldr	r3, [sp, #0]
 8014af2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014af6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014afa:	4323      	orrs	r3, r4
 8014afc:	d108      	bne.n	8014b10 <__ieee754_pow+0x1b8>
 8014afe:	4602      	mov	r2, r0
 8014b00:	460b      	mov	r3, r1
 8014b02:	4610      	mov	r0, r2
 8014b04:	4619      	mov	r1, r3
 8014b06:	f7eb fbcf 	bl	80002a8 <__aeabi_dsub>
 8014b0a:	4602      	mov	r2, r0
 8014b0c:	460b      	mov	r3, r1
 8014b0e:	e78d      	b.n	8014a2c <__ieee754_pow+0xd4>
 8014b10:	9b00      	ldr	r3, [sp, #0]
 8014b12:	2b01      	cmp	r3, #1
 8014b14:	d1a4      	bne.n	8014a60 <__ieee754_pow+0x108>
 8014b16:	4602      	mov	r2, r0
 8014b18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b1c:	4610      	mov	r0, r2
 8014b1e:	4619      	mov	r1, r3
 8014b20:	e79e      	b.n	8014a60 <__ieee754_pow+0x108>
 8014b22:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8014b26:	f10c 35ff 	add.w	r5, ip, #4294967295
 8014b2a:	950a      	str	r5, [sp, #40]	; 0x28
 8014b2c:	9d00      	ldr	r5, [sp, #0]
 8014b2e:	46ac      	mov	ip, r5
 8014b30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014b32:	ea5c 0505 	orrs.w	r5, ip, r5
 8014b36:	d0e4      	beq.n	8014b02 <__ieee754_pow+0x1aa>
 8014b38:	4b15      	ldr	r3, [pc, #84]	; (8014b90 <__ieee754_pow+0x238>)
 8014b3a:	429e      	cmp	r6, r3
 8014b3c:	f340 80fc 	ble.w	8014d38 <__ieee754_pow+0x3e0>
 8014b40:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014b44:	429e      	cmp	r6, r3
 8014b46:	4b10      	ldr	r3, [pc, #64]	; (8014b88 <__ieee754_pow+0x230>)
 8014b48:	dd07      	ble.n	8014b5a <__ieee754_pow+0x202>
 8014b4a:	429c      	cmp	r4, r3
 8014b4c:	dc0a      	bgt.n	8014b64 <__ieee754_pow+0x20c>
 8014b4e:	2f00      	cmp	r7, #0
 8014b50:	da84      	bge.n	8014a5c <__ieee754_pow+0x104>
 8014b52:	a307      	add	r3, pc, #28	; (adr r3, 8014b70 <__ieee754_pow+0x218>)
 8014b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b58:	e795      	b.n	8014a86 <__ieee754_pow+0x12e>
 8014b5a:	429c      	cmp	r4, r3
 8014b5c:	dbf7      	blt.n	8014b4e <__ieee754_pow+0x1f6>
 8014b5e:	4b09      	ldr	r3, [pc, #36]	; (8014b84 <__ieee754_pow+0x22c>)
 8014b60:	429c      	cmp	r4, r3
 8014b62:	dd17      	ble.n	8014b94 <__ieee754_pow+0x23c>
 8014b64:	2f00      	cmp	r7, #0
 8014b66:	dcf4      	bgt.n	8014b52 <__ieee754_pow+0x1fa>
 8014b68:	e778      	b.n	8014a5c <__ieee754_pow+0x104>
 8014b6a:	bf00      	nop
 8014b6c:	f3af 8000 	nop.w
 8014b70:	8800759c 	.word	0x8800759c
 8014b74:	7e37e43c 	.word	0x7e37e43c
 8014b78:	7ff00000 	.word	0x7ff00000
 8014b7c:	0801c103 	.word	0x0801c103
 8014b80:	433fffff 	.word	0x433fffff
 8014b84:	3ff00000 	.word	0x3ff00000
 8014b88:	3fefffff 	.word	0x3fefffff
 8014b8c:	3fe00000 	.word	0x3fe00000
 8014b90:	41e00000 	.word	0x41e00000
 8014b94:	4b64      	ldr	r3, [pc, #400]	; (8014d28 <__ieee754_pow+0x3d0>)
 8014b96:	2200      	movs	r2, #0
 8014b98:	f7eb fb86 	bl	80002a8 <__aeabi_dsub>
 8014b9c:	a356      	add	r3, pc, #344	; (adr r3, 8014cf8 <__ieee754_pow+0x3a0>)
 8014b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ba2:	4604      	mov	r4, r0
 8014ba4:	460d      	mov	r5, r1
 8014ba6:	f7eb fd37 	bl	8000618 <__aeabi_dmul>
 8014baa:	a355      	add	r3, pc, #340	; (adr r3, 8014d00 <__ieee754_pow+0x3a8>)
 8014bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb0:	4606      	mov	r6, r0
 8014bb2:	460f      	mov	r7, r1
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	4629      	mov	r1, r5
 8014bb8:	f7eb fd2e 	bl	8000618 <__aeabi_dmul>
 8014bbc:	4b5b      	ldr	r3, [pc, #364]	; (8014d2c <__ieee754_pow+0x3d4>)
 8014bbe:	4682      	mov	sl, r0
 8014bc0:	468b      	mov	fp, r1
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	4629      	mov	r1, r5
 8014bc8:	f7eb fd26 	bl	8000618 <__aeabi_dmul>
 8014bcc:	4602      	mov	r2, r0
 8014bce:	460b      	mov	r3, r1
 8014bd0:	a14d      	add	r1, pc, #308	; (adr r1, 8014d08 <__ieee754_pow+0x3b0>)
 8014bd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014bd6:	f7eb fb67 	bl	80002a8 <__aeabi_dsub>
 8014bda:	4622      	mov	r2, r4
 8014bdc:	462b      	mov	r3, r5
 8014bde:	f7eb fd1b 	bl	8000618 <__aeabi_dmul>
 8014be2:	4602      	mov	r2, r0
 8014be4:	460b      	mov	r3, r1
 8014be6:	2000      	movs	r0, #0
 8014be8:	4951      	ldr	r1, [pc, #324]	; (8014d30 <__ieee754_pow+0x3d8>)
 8014bea:	f7eb fb5d 	bl	80002a8 <__aeabi_dsub>
 8014bee:	4622      	mov	r2, r4
 8014bf0:	4680      	mov	r8, r0
 8014bf2:	4689      	mov	r9, r1
 8014bf4:	462b      	mov	r3, r5
 8014bf6:	4620      	mov	r0, r4
 8014bf8:	4629      	mov	r1, r5
 8014bfa:	f7eb fd0d 	bl	8000618 <__aeabi_dmul>
 8014bfe:	4602      	mov	r2, r0
 8014c00:	460b      	mov	r3, r1
 8014c02:	4640      	mov	r0, r8
 8014c04:	4649      	mov	r1, r9
 8014c06:	f7eb fd07 	bl	8000618 <__aeabi_dmul>
 8014c0a:	a341      	add	r3, pc, #260	; (adr r3, 8014d10 <__ieee754_pow+0x3b8>)
 8014c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c10:	f7eb fd02 	bl	8000618 <__aeabi_dmul>
 8014c14:	4602      	mov	r2, r0
 8014c16:	460b      	mov	r3, r1
 8014c18:	4650      	mov	r0, sl
 8014c1a:	4659      	mov	r1, fp
 8014c1c:	f7eb fb44 	bl	80002a8 <__aeabi_dsub>
 8014c20:	4602      	mov	r2, r0
 8014c22:	460b      	mov	r3, r1
 8014c24:	4680      	mov	r8, r0
 8014c26:	4689      	mov	r9, r1
 8014c28:	4630      	mov	r0, r6
 8014c2a:	4639      	mov	r1, r7
 8014c2c:	f7eb fb3e 	bl	80002ac <__adddf3>
 8014c30:	2400      	movs	r4, #0
 8014c32:	4632      	mov	r2, r6
 8014c34:	463b      	mov	r3, r7
 8014c36:	4620      	mov	r0, r4
 8014c38:	460d      	mov	r5, r1
 8014c3a:	f7eb fb35 	bl	80002a8 <__aeabi_dsub>
 8014c3e:	4602      	mov	r2, r0
 8014c40:	460b      	mov	r3, r1
 8014c42:	4640      	mov	r0, r8
 8014c44:	4649      	mov	r1, r9
 8014c46:	f7eb fb2f 	bl	80002a8 <__aeabi_dsub>
 8014c4a:	9b00      	ldr	r3, [sp, #0]
 8014c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c4e:	3b01      	subs	r3, #1
 8014c50:	4313      	orrs	r3, r2
 8014c52:	4682      	mov	sl, r0
 8014c54:	468b      	mov	fp, r1
 8014c56:	f040 81f1 	bne.w	801503c <__ieee754_pow+0x6e4>
 8014c5a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8014d18 <__ieee754_pow+0x3c0>
 8014c5e:	eeb0 8a47 	vmov.f32	s16, s14
 8014c62:	eef0 8a67 	vmov.f32	s17, s15
 8014c66:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014c6a:	2600      	movs	r6, #0
 8014c6c:	4632      	mov	r2, r6
 8014c6e:	463b      	mov	r3, r7
 8014c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c74:	f7eb fb18 	bl	80002a8 <__aeabi_dsub>
 8014c78:	4622      	mov	r2, r4
 8014c7a:	462b      	mov	r3, r5
 8014c7c:	f7eb fccc 	bl	8000618 <__aeabi_dmul>
 8014c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014c84:	4680      	mov	r8, r0
 8014c86:	4689      	mov	r9, r1
 8014c88:	4650      	mov	r0, sl
 8014c8a:	4659      	mov	r1, fp
 8014c8c:	f7eb fcc4 	bl	8000618 <__aeabi_dmul>
 8014c90:	4602      	mov	r2, r0
 8014c92:	460b      	mov	r3, r1
 8014c94:	4640      	mov	r0, r8
 8014c96:	4649      	mov	r1, r9
 8014c98:	f7eb fb08 	bl	80002ac <__adddf3>
 8014c9c:	4632      	mov	r2, r6
 8014c9e:	463b      	mov	r3, r7
 8014ca0:	4680      	mov	r8, r0
 8014ca2:	4689      	mov	r9, r1
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	4629      	mov	r1, r5
 8014ca8:	f7eb fcb6 	bl	8000618 <__aeabi_dmul>
 8014cac:	460b      	mov	r3, r1
 8014cae:	4604      	mov	r4, r0
 8014cb0:	460d      	mov	r5, r1
 8014cb2:	4602      	mov	r2, r0
 8014cb4:	4649      	mov	r1, r9
 8014cb6:	4640      	mov	r0, r8
 8014cb8:	f7eb faf8 	bl	80002ac <__adddf3>
 8014cbc:	4b1d      	ldr	r3, [pc, #116]	; (8014d34 <__ieee754_pow+0x3dc>)
 8014cbe:	4299      	cmp	r1, r3
 8014cc0:	ec45 4b19 	vmov	d9, r4, r5
 8014cc4:	4606      	mov	r6, r0
 8014cc6:	460f      	mov	r7, r1
 8014cc8:	468b      	mov	fp, r1
 8014cca:	f340 82fe 	ble.w	80152ca <__ieee754_pow+0x972>
 8014cce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014cd2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014cd6:	4303      	orrs	r3, r0
 8014cd8:	f000 81f0 	beq.w	80150bc <__ieee754_pow+0x764>
 8014cdc:	a310      	add	r3, pc, #64	; (adr r3, 8014d20 <__ieee754_pow+0x3c8>)
 8014cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce2:	ec51 0b18 	vmov	r0, r1, d8
 8014ce6:	f7eb fc97 	bl	8000618 <__aeabi_dmul>
 8014cea:	a30d      	add	r3, pc, #52	; (adr r3, 8014d20 <__ieee754_pow+0x3c8>)
 8014cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf0:	e6cb      	b.n	8014a8a <__ieee754_pow+0x132>
 8014cf2:	bf00      	nop
 8014cf4:	f3af 8000 	nop.w
 8014cf8:	60000000 	.word	0x60000000
 8014cfc:	3ff71547 	.word	0x3ff71547
 8014d00:	f85ddf44 	.word	0xf85ddf44
 8014d04:	3e54ae0b 	.word	0x3e54ae0b
 8014d08:	55555555 	.word	0x55555555
 8014d0c:	3fd55555 	.word	0x3fd55555
 8014d10:	652b82fe 	.word	0x652b82fe
 8014d14:	3ff71547 	.word	0x3ff71547
 8014d18:	00000000 	.word	0x00000000
 8014d1c:	bff00000 	.word	0xbff00000
 8014d20:	8800759c 	.word	0x8800759c
 8014d24:	7e37e43c 	.word	0x7e37e43c
 8014d28:	3ff00000 	.word	0x3ff00000
 8014d2c:	3fd00000 	.word	0x3fd00000
 8014d30:	3fe00000 	.word	0x3fe00000
 8014d34:	408fffff 	.word	0x408fffff
 8014d38:	4bd7      	ldr	r3, [pc, #860]	; (8015098 <__ieee754_pow+0x740>)
 8014d3a:	ea03 0309 	and.w	r3, r3, r9
 8014d3e:	2200      	movs	r2, #0
 8014d40:	b92b      	cbnz	r3, 8014d4e <__ieee754_pow+0x3f6>
 8014d42:	4bd6      	ldr	r3, [pc, #856]	; (801509c <__ieee754_pow+0x744>)
 8014d44:	f7eb fc68 	bl	8000618 <__aeabi_dmul>
 8014d48:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014d4c:	460c      	mov	r4, r1
 8014d4e:	1523      	asrs	r3, r4, #20
 8014d50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014d54:	4413      	add	r3, r2
 8014d56:	9309      	str	r3, [sp, #36]	; 0x24
 8014d58:	4bd1      	ldr	r3, [pc, #836]	; (80150a0 <__ieee754_pow+0x748>)
 8014d5a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014d5e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014d62:	429c      	cmp	r4, r3
 8014d64:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014d68:	dd08      	ble.n	8014d7c <__ieee754_pow+0x424>
 8014d6a:	4bce      	ldr	r3, [pc, #824]	; (80150a4 <__ieee754_pow+0x74c>)
 8014d6c:	429c      	cmp	r4, r3
 8014d6e:	f340 8163 	ble.w	8015038 <__ieee754_pow+0x6e0>
 8014d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d74:	3301      	adds	r3, #1
 8014d76:	9309      	str	r3, [sp, #36]	; 0x24
 8014d78:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014d7c:	2400      	movs	r4, #0
 8014d7e:	00e3      	lsls	r3, r4, #3
 8014d80:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d82:	4bc9      	ldr	r3, [pc, #804]	; (80150a8 <__ieee754_pow+0x750>)
 8014d84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014d88:	ed93 7b00 	vldr	d7, [r3]
 8014d8c:	4629      	mov	r1, r5
 8014d8e:	ec53 2b17 	vmov	r2, r3, d7
 8014d92:	eeb0 8a47 	vmov.f32	s16, s14
 8014d96:	eef0 8a67 	vmov.f32	s17, s15
 8014d9a:	4682      	mov	sl, r0
 8014d9c:	f7eb fa84 	bl	80002a8 <__aeabi_dsub>
 8014da0:	4652      	mov	r2, sl
 8014da2:	4606      	mov	r6, r0
 8014da4:	460f      	mov	r7, r1
 8014da6:	462b      	mov	r3, r5
 8014da8:	ec51 0b18 	vmov	r0, r1, d8
 8014dac:	f7eb fa7e 	bl	80002ac <__adddf3>
 8014db0:	4602      	mov	r2, r0
 8014db2:	460b      	mov	r3, r1
 8014db4:	2000      	movs	r0, #0
 8014db6:	49bd      	ldr	r1, [pc, #756]	; (80150ac <__ieee754_pow+0x754>)
 8014db8:	f7eb fd58 	bl	800086c <__aeabi_ddiv>
 8014dbc:	ec41 0b19 	vmov	d9, r0, r1
 8014dc0:	4602      	mov	r2, r0
 8014dc2:	460b      	mov	r3, r1
 8014dc4:	4630      	mov	r0, r6
 8014dc6:	4639      	mov	r1, r7
 8014dc8:	f7eb fc26 	bl	8000618 <__aeabi_dmul>
 8014dcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014dd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014dd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014dd8:	2300      	movs	r3, #0
 8014dda:	9304      	str	r3, [sp, #16]
 8014ddc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014de0:	46ab      	mov	fp, r5
 8014de2:	106d      	asrs	r5, r5, #1
 8014de4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014de8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014dec:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8014df0:	2200      	movs	r2, #0
 8014df2:	4640      	mov	r0, r8
 8014df4:	4649      	mov	r1, r9
 8014df6:	4614      	mov	r4, r2
 8014df8:	461d      	mov	r5, r3
 8014dfa:	f7eb fc0d 	bl	8000618 <__aeabi_dmul>
 8014dfe:	4602      	mov	r2, r0
 8014e00:	460b      	mov	r3, r1
 8014e02:	4630      	mov	r0, r6
 8014e04:	4639      	mov	r1, r7
 8014e06:	f7eb fa4f 	bl	80002a8 <__aeabi_dsub>
 8014e0a:	ec53 2b18 	vmov	r2, r3, d8
 8014e0e:	4606      	mov	r6, r0
 8014e10:	460f      	mov	r7, r1
 8014e12:	4620      	mov	r0, r4
 8014e14:	4629      	mov	r1, r5
 8014e16:	f7eb fa47 	bl	80002a8 <__aeabi_dsub>
 8014e1a:	4602      	mov	r2, r0
 8014e1c:	460b      	mov	r3, r1
 8014e1e:	4650      	mov	r0, sl
 8014e20:	4659      	mov	r1, fp
 8014e22:	f7eb fa41 	bl	80002a8 <__aeabi_dsub>
 8014e26:	4642      	mov	r2, r8
 8014e28:	464b      	mov	r3, r9
 8014e2a:	f7eb fbf5 	bl	8000618 <__aeabi_dmul>
 8014e2e:	4602      	mov	r2, r0
 8014e30:	460b      	mov	r3, r1
 8014e32:	4630      	mov	r0, r6
 8014e34:	4639      	mov	r1, r7
 8014e36:	f7eb fa37 	bl	80002a8 <__aeabi_dsub>
 8014e3a:	ec53 2b19 	vmov	r2, r3, d9
 8014e3e:	f7eb fbeb 	bl	8000618 <__aeabi_dmul>
 8014e42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014e46:	ec41 0b18 	vmov	d8, r0, r1
 8014e4a:	4610      	mov	r0, r2
 8014e4c:	4619      	mov	r1, r3
 8014e4e:	f7eb fbe3 	bl	8000618 <__aeabi_dmul>
 8014e52:	a37d      	add	r3, pc, #500	; (adr r3, 8015048 <__ieee754_pow+0x6f0>)
 8014e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e58:	4604      	mov	r4, r0
 8014e5a:	460d      	mov	r5, r1
 8014e5c:	f7eb fbdc 	bl	8000618 <__aeabi_dmul>
 8014e60:	a37b      	add	r3, pc, #492	; (adr r3, 8015050 <__ieee754_pow+0x6f8>)
 8014e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e66:	f7eb fa21 	bl	80002ac <__adddf3>
 8014e6a:	4622      	mov	r2, r4
 8014e6c:	462b      	mov	r3, r5
 8014e6e:	f7eb fbd3 	bl	8000618 <__aeabi_dmul>
 8014e72:	a379      	add	r3, pc, #484	; (adr r3, 8015058 <__ieee754_pow+0x700>)
 8014e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e78:	f7eb fa18 	bl	80002ac <__adddf3>
 8014e7c:	4622      	mov	r2, r4
 8014e7e:	462b      	mov	r3, r5
 8014e80:	f7eb fbca 	bl	8000618 <__aeabi_dmul>
 8014e84:	a376      	add	r3, pc, #472	; (adr r3, 8015060 <__ieee754_pow+0x708>)
 8014e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e8a:	f7eb fa0f 	bl	80002ac <__adddf3>
 8014e8e:	4622      	mov	r2, r4
 8014e90:	462b      	mov	r3, r5
 8014e92:	f7eb fbc1 	bl	8000618 <__aeabi_dmul>
 8014e96:	a374      	add	r3, pc, #464	; (adr r3, 8015068 <__ieee754_pow+0x710>)
 8014e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e9c:	f7eb fa06 	bl	80002ac <__adddf3>
 8014ea0:	4622      	mov	r2, r4
 8014ea2:	462b      	mov	r3, r5
 8014ea4:	f7eb fbb8 	bl	8000618 <__aeabi_dmul>
 8014ea8:	a371      	add	r3, pc, #452	; (adr r3, 8015070 <__ieee754_pow+0x718>)
 8014eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eae:	f7eb f9fd 	bl	80002ac <__adddf3>
 8014eb2:	4622      	mov	r2, r4
 8014eb4:	4606      	mov	r6, r0
 8014eb6:	460f      	mov	r7, r1
 8014eb8:	462b      	mov	r3, r5
 8014eba:	4620      	mov	r0, r4
 8014ebc:	4629      	mov	r1, r5
 8014ebe:	f7eb fbab 	bl	8000618 <__aeabi_dmul>
 8014ec2:	4602      	mov	r2, r0
 8014ec4:	460b      	mov	r3, r1
 8014ec6:	4630      	mov	r0, r6
 8014ec8:	4639      	mov	r1, r7
 8014eca:	f7eb fba5 	bl	8000618 <__aeabi_dmul>
 8014ece:	4642      	mov	r2, r8
 8014ed0:	4604      	mov	r4, r0
 8014ed2:	460d      	mov	r5, r1
 8014ed4:	464b      	mov	r3, r9
 8014ed6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014eda:	f7eb f9e7 	bl	80002ac <__adddf3>
 8014ede:	ec53 2b18 	vmov	r2, r3, d8
 8014ee2:	f7eb fb99 	bl	8000618 <__aeabi_dmul>
 8014ee6:	4622      	mov	r2, r4
 8014ee8:	462b      	mov	r3, r5
 8014eea:	f7eb f9df 	bl	80002ac <__adddf3>
 8014eee:	4642      	mov	r2, r8
 8014ef0:	4682      	mov	sl, r0
 8014ef2:	468b      	mov	fp, r1
 8014ef4:	464b      	mov	r3, r9
 8014ef6:	4640      	mov	r0, r8
 8014ef8:	4649      	mov	r1, r9
 8014efa:	f7eb fb8d 	bl	8000618 <__aeabi_dmul>
 8014efe:	4b6c      	ldr	r3, [pc, #432]	; (80150b0 <__ieee754_pow+0x758>)
 8014f00:	2200      	movs	r2, #0
 8014f02:	4606      	mov	r6, r0
 8014f04:	460f      	mov	r7, r1
 8014f06:	f7eb f9d1 	bl	80002ac <__adddf3>
 8014f0a:	4652      	mov	r2, sl
 8014f0c:	465b      	mov	r3, fp
 8014f0e:	f7eb f9cd 	bl	80002ac <__adddf3>
 8014f12:	9c04      	ldr	r4, [sp, #16]
 8014f14:	460d      	mov	r5, r1
 8014f16:	4622      	mov	r2, r4
 8014f18:	460b      	mov	r3, r1
 8014f1a:	4640      	mov	r0, r8
 8014f1c:	4649      	mov	r1, r9
 8014f1e:	f7eb fb7b 	bl	8000618 <__aeabi_dmul>
 8014f22:	4b63      	ldr	r3, [pc, #396]	; (80150b0 <__ieee754_pow+0x758>)
 8014f24:	4680      	mov	r8, r0
 8014f26:	4689      	mov	r9, r1
 8014f28:	2200      	movs	r2, #0
 8014f2a:	4620      	mov	r0, r4
 8014f2c:	4629      	mov	r1, r5
 8014f2e:	f7eb f9bb 	bl	80002a8 <__aeabi_dsub>
 8014f32:	4632      	mov	r2, r6
 8014f34:	463b      	mov	r3, r7
 8014f36:	f7eb f9b7 	bl	80002a8 <__aeabi_dsub>
 8014f3a:	4602      	mov	r2, r0
 8014f3c:	460b      	mov	r3, r1
 8014f3e:	4650      	mov	r0, sl
 8014f40:	4659      	mov	r1, fp
 8014f42:	f7eb f9b1 	bl	80002a8 <__aeabi_dsub>
 8014f46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014f4a:	f7eb fb65 	bl	8000618 <__aeabi_dmul>
 8014f4e:	4622      	mov	r2, r4
 8014f50:	4606      	mov	r6, r0
 8014f52:	460f      	mov	r7, r1
 8014f54:	462b      	mov	r3, r5
 8014f56:	ec51 0b18 	vmov	r0, r1, d8
 8014f5a:	f7eb fb5d 	bl	8000618 <__aeabi_dmul>
 8014f5e:	4602      	mov	r2, r0
 8014f60:	460b      	mov	r3, r1
 8014f62:	4630      	mov	r0, r6
 8014f64:	4639      	mov	r1, r7
 8014f66:	f7eb f9a1 	bl	80002ac <__adddf3>
 8014f6a:	4606      	mov	r6, r0
 8014f6c:	460f      	mov	r7, r1
 8014f6e:	4602      	mov	r2, r0
 8014f70:	460b      	mov	r3, r1
 8014f72:	4640      	mov	r0, r8
 8014f74:	4649      	mov	r1, r9
 8014f76:	f7eb f999 	bl	80002ac <__adddf3>
 8014f7a:	9c04      	ldr	r4, [sp, #16]
 8014f7c:	a33e      	add	r3, pc, #248	; (adr r3, 8015078 <__ieee754_pow+0x720>)
 8014f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f82:	4620      	mov	r0, r4
 8014f84:	460d      	mov	r5, r1
 8014f86:	f7eb fb47 	bl	8000618 <__aeabi_dmul>
 8014f8a:	4642      	mov	r2, r8
 8014f8c:	ec41 0b18 	vmov	d8, r0, r1
 8014f90:	464b      	mov	r3, r9
 8014f92:	4620      	mov	r0, r4
 8014f94:	4629      	mov	r1, r5
 8014f96:	f7eb f987 	bl	80002a8 <__aeabi_dsub>
 8014f9a:	4602      	mov	r2, r0
 8014f9c:	460b      	mov	r3, r1
 8014f9e:	4630      	mov	r0, r6
 8014fa0:	4639      	mov	r1, r7
 8014fa2:	f7eb f981 	bl	80002a8 <__aeabi_dsub>
 8014fa6:	a336      	add	r3, pc, #216	; (adr r3, 8015080 <__ieee754_pow+0x728>)
 8014fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fac:	f7eb fb34 	bl	8000618 <__aeabi_dmul>
 8014fb0:	a335      	add	r3, pc, #212	; (adr r3, 8015088 <__ieee754_pow+0x730>)
 8014fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb6:	4606      	mov	r6, r0
 8014fb8:	460f      	mov	r7, r1
 8014fba:	4620      	mov	r0, r4
 8014fbc:	4629      	mov	r1, r5
 8014fbe:	f7eb fb2b 	bl	8000618 <__aeabi_dmul>
 8014fc2:	4602      	mov	r2, r0
 8014fc4:	460b      	mov	r3, r1
 8014fc6:	4630      	mov	r0, r6
 8014fc8:	4639      	mov	r1, r7
 8014fca:	f7eb f96f 	bl	80002ac <__adddf3>
 8014fce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014fd0:	4b38      	ldr	r3, [pc, #224]	; (80150b4 <__ieee754_pow+0x75c>)
 8014fd2:	4413      	add	r3, r2
 8014fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fd8:	f7eb f968 	bl	80002ac <__adddf3>
 8014fdc:	4682      	mov	sl, r0
 8014fde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fe0:	468b      	mov	fp, r1
 8014fe2:	f7eb faaf 	bl	8000544 <__aeabi_i2d>
 8014fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014fe8:	4b33      	ldr	r3, [pc, #204]	; (80150b8 <__ieee754_pow+0x760>)
 8014fea:	4413      	add	r3, r2
 8014fec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014ff0:	4606      	mov	r6, r0
 8014ff2:	460f      	mov	r7, r1
 8014ff4:	4652      	mov	r2, sl
 8014ff6:	465b      	mov	r3, fp
 8014ff8:	ec51 0b18 	vmov	r0, r1, d8
 8014ffc:	f7eb f956 	bl	80002ac <__adddf3>
 8015000:	4642      	mov	r2, r8
 8015002:	464b      	mov	r3, r9
 8015004:	f7eb f952 	bl	80002ac <__adddf3>
 8015008:	4632      	mov	r2, r6
 801500a:	463b      	mov	r3, r7
 801500c:	f7eb f94e 	bl	80002ac <__adddf3>
 8015010:	9c04      	ldr	r4, [sp, #16]
 8015012:	4632      	mov	r2, r6
 8015014:	463b      	mov	r3, r7
 8015016:	4620      	mov	r0, r4
 8015018:	460d      	mov	r5, r1
 801501a:	f7eb f945 	bl	80002a8 <__aeabi_dsub>
 801501e:	4642      	mov	r2, r8
 8015020:	464b      	mov	r3, r9
 8015022:	f7eb f941 	bl	80002a8 <__aeabi_dsub>
 8015026:	ec53 2b18 	vmov	r2, r3, d8
 801502a:	f7eb f93d 	bl	80002a8 <__aeabi_dsub>
 801502e:	4602      	mov	r2, r0
 8015030:	460b      	mov	r3, r1
 8015032:	4650      	mov	r0, sl
 8015034:	4659      	mov	r1, fp
 8015036:	e606      	b.n	8014c46 <__ieee754_pow+0x2ee>
 8015038:	2401      	movs	r4, #1
 801503a:	e6a0      	b.n	8014d7e <__ieee754_pow+0x426>
 801503c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015090 <__ieee754_pow+0x738>
 8015040:	e60d      	b.n	8014c5e <__ieee754_pow+0x306>
 8015042:	bf00      	nop
 8015044:	f3af 8000 	nop.w
 8015048:	4a454eef 	.word	0x4a454eef
 801504c:	3fca7e28 	.word	0x3fca7e28
 8015050:	93c9db65 	.word	0x93c9db65
 8015054:	3fcd864a 	.word	0x3fcd864a
 8015058:	a91d4101 	.word	0xa91d4101
 801505c:	3fd17460 	.word	0x3fd17460
 8015060:	518f264d 	.word	0x518f264d
 8015064:	3fd55555 	.word	0x3fd55555
 8015068:	db6fabff 	.word	0xdb6fabff
 801506c:	3fdb6db6 	.word	0x3fdb6db6
 8015070:	33333303 	.word	0x33333303
 8015074:	3fe33333 	.word	0x3fe33333
 8015078:	e0000000 	.word	0xe0000000
 801507c:	3feec709 	.word	0x3feec709
 8015080:	dc3a03fd 	.word	0xdc3a03fd
 8015084:	3feec709 	.word	0x3feec709
 8015088:	145b01f5 	.word	0x145b01f5
 801508c:	be3e2fe0 	.word	0xbe3e2fe0
 8015090:	00000000 	.word	0x00000000
 8015094:	3ff00000 	.word	0x3ff00000
 8015098:	7ff00000 	.word	0x7ff00000
 801509c:	43400000 	.word	0x43400000
 80150a0:	0003988e 	.word	0x0003988e
 80150a4:	000bb679 	.word	0x000bb679
 80150a8:	0801be98 	.word	0x0801be98
 80150ac:	3ff00000 	.word	0x3ff00000
 80150b0:	40080000 	.word	0x40080000
 80150b4:	0801beb8 	.word	0x0801beb8
 80150b8:	0801bea8 	.word	0x0801bea8
 80150bc:	a3b5      	add	r3, pc, #724	; (adr r3, 8015394 <__ieee754_pow+0xa3c>)
 80150be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c2:	4640      	mov	r0, r8
 80150c4:	4649      	mov	r1, r9
 80150c6:	f7eb f8f1 	bl	80002ac <__adddf3>
 80150ca:	4622      	mov	r2, r4
 80150cc:	ec41 0b1a 	vmov	d10, r0, r1
 80150d0:	462b      	mov	r3, r5
 80150d2:	4630      	mov	r0, r6
 80150d4:	4639      	mov	r1, r7
 80150d6:	f7eb f8e7 	bl	80002a8 <__aeabi_dsub>
 80150da:	4602      	mov	r2, r0
 80150dc:	460b      	mov	r3, r1
 80150de:	ec51 0b1a 	vmov	r0, r1, d10
 80150e2:	f7eb fd29 	bl	8000b38 <__aeabi_dcmpgt>
 80150e6:	2800      	cmp	r0, #0
 80150e8:	f47f adf8 	bne.w	8014cdc <__ieee754_pow+0x384>
 80150ec:	4aa4      	ldr	r2, [pc, #656]	; (8015380 <__ieee754_pow+0xa28>)
 80150ee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80150f2:	4293      	cmp	r3, r2
 80150f4:	f340 810b 	ble.w	801530e <__ieee754_pow+0x9b6>
 80150f8:	151b      	asrs	r3, r3, #20
 80150fa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80150fe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015102:	fa4a f303 	asr.w	r3, sl, r3
 8015106:	445b      	add	r3, fp
 8015108:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801510c:	4e9d      	ldr	r6, [pc, #628]	; (8015384 <__ieee754_pow+0xa2c>)
 801510e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015112:	4116      	asrs	r6, r2
 8015114:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015118:	2000      	movs	r0, #0
 801511a:	ea23 0106 	bic.w	r1, r3, r6
 801511e:	f1c2 0214 	rsb	r2, r2, #20
 8015122:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015126:	fa4a fa02 	asr.w	sl, sl, r2
 801512a:	f1bb 0f00 	cmp.w	fp, #0
 801512e:	4602      	mov	r2, r0
 8015130:	460b      	mov	r3, r1
 8015132:	4620      	mov	r0, r4
 8015134:	4629      	mov	r1, r5
 8015136:	bfb8      	it	lt
 8015138:	f1ca 0a00 	rsblt	sl, sl, #0
 801513c:	f7eb f8b4 	bl	80002a8 <__aeabi_dsub>
 8015140:	ec41 0b19 	vmov	d9, r0, r1
 8015144:	4642      	mov	r2, r8
 8015146:	464b      	mov	r3, r9
 8015148:	ec51 0b19 	vmov	r0, r1, d9
 801514c:	f7eb f8ae 	bl	80002ac <__adddf3>
 8015150:	2400      	movs	r4, #0
 8015152:	a379      	add	r3, pc, #484	; (adr r3, 8015338 <__ieee754_pow+0x9e0>)
 8015154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015158:	4620      	mov	r0, r4
 801515a:	460d      	mov	r5, r1
 801515c:	f7eb fa5c 	bl	8000618 <__aeabi_dmul>
 8015160:	ec53 2b19 	vmov	r2, r3, d9
 8015164:	4606      	mov	r6, r0
 8015166:	460f      	mov	r7, r1
 8015168:	4620      	mov	r0, r4
 801516a:	4629      	mov	r1, r5
 801516c:	f7eb f89c 	bl	80002a8 <__aeabi_dsub>
 8015170:	4602      	mov	r2, r0
 8015172:	460b      	mov	r3, r1
 8015174:	4640      	mov	r0, r8
 8015176:	4649      	mov	r1, r9
 8015178:	f7eb f896 	bl	80002a8 <__aeabi_dsub>
 801517c:	a370      	add	r3, pc, #448	; (adr r3, 8015340 <__ieee754_pow+0x9e8>)
 801517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015182:	f7eb fa49 	bl	8000618 <__aeabi_dmul>
 8015186:	a370      	add	r3, pc, #448	; (adr r3, 8015348 <__ieee754_pow+0x9f0>)
 8015188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801518c:	4680      	mov	r8, r0
 801518e:	4689      	mov	r9, r1
 8015190:	4620      	mov	r0, r4
 8015192:	4629      	mov	r1, r5
 8015194:	f7eb fa40 	bl	8000618 <__aeabi_dmul>
 8015198:	4602      	mov	r2, r0
 801519a:	460b      	mov	r3, r1
 801519c:	4640      	mov	r0, r8
 801519e:	4649      	mov	r1, r9
 80151a0:	f7eb f884 	bl	80002ac <__adddf3>
 80151a4:	4604      	mov	r4, r0
 80151a6:	460d      	mov	r5, r1
 80151a8:	4602      	mov	r2, r0
 80151aa:	460b      	mov	r3, r1
 80151ac:	4630      	mov	r0, r6
 80151ae:	4639      	mov	r1, r7
 80151b0:	f7eb f87c 	bl	80002ac <__adddf3>
 80151b4:	4632      	mov	r2, r6
 80151b6:	463b      	mov	r3, r7
 80151b8:	4680      	mov	r8, r0
 80151ba:	4689      	mov	r9, r1
 80151bc:	f7eb f874 	bl	80002a8 <__aeabi_dsub>
 80151c0:	4602      	mov	r2, r0
 80151c2:	460b      	mov	r3, r1
 80151c4:	4620      	mov	r0, r4
 80151c6:	4629      	mov	r1, r5
 80151c8:	f7eb f86e 	bl	80002a8 <__aeabi_dsub>
 80151cc:	4642      	mov	r2, r8
 80151ce:	4606      	mov	r6, r0
 80151d0:	460f      	mov	r7, r1
 80151d2:	464b      	mov	r3, r9
 80151d4:	4640      	mov	r0, r8
 80151d6:	4649      	mov	r1, r9
 80151d8:	f7eb fa1e 	bl	8000618 <__aeabi_dmul>
 80151dc:	a35c      	add	r3, pc, #368	; (adr r3, 8015350 <__ieee754_pow+0x9f8>)
 80151de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e2:	4604      	mov	r4, r0
 80151e4:	460d      	mov	r5, r1
 80151e6:	f7eb fa17 	bl	8000618 <__aeabi_dmul>
 80151ea:	a35b      	add	r3, pc, #364	; (adr r3, 8015358 <__ieee754_pow+0xa00>)
 80151ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f0:	f7eb f85a 	bl	80002a8 <__aeabi_dsub>
 80151f4:	4622      	mov	r2, r4
 80151f6:	462b      	mov	r3, r5
 80151f8:	f7eb fa0e 	bl	8000618 <__aeabi_dmul>
 80151fc:	a358      	add	r3, pc, #352	; (adr r3, 8015360 <__ieee754_pow+0xa08>)
 80151fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015202:	f7eb f853 	bl	80002ac <__adddf3>
 8015206:	4622      	mov	r2, r4
 8015208:	462b      	mov	r3, r5
 801520a:	f7eb fa05 	bl	8000618 <__aeabi_dmul>
 801520e:	a356      	add	r3, pc, #344	; (adr r3, 8015368 <__ieee754_pow+0xa10>)
 8015210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015214:	f7eb f848 	bl	80002a8 <__aeabi_dsub>
 8015218:	4622      	mov	r2, r4
 801521a:	462b      	mov	r3, r5
 801521c:	f7eb f9fc 	bl	8000618 <__aeabi_dmul>
 8015220:	a353      	add	r3, pc, #332	; (adr r3, 8015370 <__ieee754_pow+0xa18>)
 8015222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015226:	f7eb f841 	bl	80002ac <__adddf3>
 801522a:	4622      	mov	r2, r4
 801522c:	462b      	mov	r3, r5
 801522e:	f7eb f9f3 	bl	8000618 <__aeabi_dmul>
 8015232:	4602      	mov	r2, r0
 8015234:	460b      	mov	r3, r1
 8015236:	4640      	mov	r0, r8
 8015238:	4649      	mov	r1, r9
 801523a:	f7eb f835 	bl	80002a8 <__aeabi_dsub>
 801523e:	4604      	mov	r4, r0
 8015240:	460d      	mov	r5, r1
 8015242:	4602      	mov	r2, r0
 8015244:	460b      	mov	r3, r1
 8015246:	4640      	mov	r0, r8
 8015248:	4649      	mov	r1, r9
 801524a:	f7eb f9e5 	bl	8000618 <__aeabi_dmul>
 801524e:	2200      	movs	r2, #0
 8015250:	ec41 0b19 	vmov	d9, r0, r1
 8015254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015258:	4620      	mov	r0, r4
 801525a:	4629      	mov	r1, r5
 801525c:	f7eb f824 	bl	80002a8 <__aeabi_dsub>
 8015260:	4602      	mov	r2, r0
 8015262:	460b      	mov	r3, r1
 8015264:	ec51 0b19 	vmov	r0, r1, d9
 8015268:	f7eb fb00 	bl	800086c <__aeabi_ddiv>
 801526c:	4632      	mov	r2, r6
 801526e:	4604      	mov	r4, r0
 8015270:	460d      	mov	r5, r1
 8015272:	463b      	mov	r3, r7
 8015274:	4640      	mov	r0, r8
 8015276:	4649      	mov	r1, r9
 8015278:	f7eb f9ce 	bl	8000618 <__aeabi_dmul>
 801527c:	4632      	mov	r2, r6
 801527e:	463b      	mov	r3, r7
 8015280:	f7eb f814 	bl	80002ac <__adddf3>
 8015284:	4602      	mov	r2, r0
 8015286:	460b      	mov	r3, r1
 8015288:	4620      	mov	r0, r4
 801528a:	4629      	mov	r1, r5
 801528c:	f7eb f80c 	bl	80002a8 <__aeabi_dsub>
 8015290:	4642      	mov	r2, r8
 8015292:	464b      	mov	r3, r9
 8015294:	f7eb f808 	bl	80002a8 <__aeabi_dsub>
 8015298:	460b      	mov	r3, r1
 801529a:	4602      	mov	r2, r0
 801529c:	493a      	ldr	r1, [pc, #232]	; (8015388 <__ieee754_pow+0xa30>)
 801529e:	2000      	movs	r0, #0
 80152a0:	f7eb f802 	bl	80002a8 <__aeabi_dsub>
 80152a4:	e9cd 0100 	strd	r0, r1, [sp]
 80152a8:	9b01      	ldr	r3, [sp, #4]
 80152aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80152ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80152b2:	da2f      	bge.n	8015314 <__ieee754_pow+0x9bc>
 80152b4:	4650      	mov	r0, sl
 80152b6:	ed9d 0b00 	vldr	d0, [sp]
 80152ba:	f000 f9cd 	bl	8015658 <scalbn>
 80152be:	ec51 0b10 	vmov	r0, r1, d0
 80152c2:	ec53 2b18 	vmov	r2, r3, d8
 80152c6:	f7ff bbe0 	b.w	8014a8a <__ieee754_pow+0x132>
 80152ca:	4b30      	ldr	r3, [pc, #192]	; (801538c <__ieee754_pow+0xa34>)
 80152cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80152d0:	429e      	cmp	r6, r3
 80152d2:	f77f af0b 	ble.w	80150ec <__ieee754_pow+0x794>
 80152d6:	4b2e      	ldr	r3, [pc, #184]	; (8015390 <__ieee754_pow+0xa38>)
 80152d8:	440b      	add	r3, r1
 80152da:	4303      	orrs	r3, r0
 80152dc:	d00b      	beq.n	80152f6 <__ieee754_pow+0x99e>
 80152de:	a326      	add	r3, pc, #152	; (adr r3, 8015378 <__ieee754_pow+0xa20>)
 80152e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152e4:	ec51 0b18 	vmov	r0, r1, d8
 80152e8:	f7eb f996 	bl	8000618 <__aeabi_dmul>
 80152ec:	a322      	add	r3, pc, #136	; (adr r3, 8015378 <__ieee754_pow+0xa20>)
 80152ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152f2:	f7ff bbca 	b.w	8014a8a <__ieee754_pow+0x132>
 80152f6:	4622      	mov	r2, r4
 80152f8:	462b      	mov	r3, r5
 80152fa:	f7ea ffd5 	bl	80002a8 <__aeabi_dsub>
 80152fe:	4642      	mov	r2, r8
 8015300:	464b      	mov	r3, r9
 8015302:	f7eb fc0f 	bl	8000b24 <__aeabi_dcmpge>
 8015306:	2800      	cmp	r0, #0
 8015308:	f43f aef0 	beq.w	80150ec <__ieee754_pow+0x794>
 801530c:	e7e7      	b.n	80152de <__ieee754_pow+0x986>
 801530e:	f04f 0a00 	mov.w	sl, #0
 8015312:	e717      	b.n	8015144 <__ieee754_pow+0x7ec>
 8015314:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015318:	4619      	mov	r1, r3
 801531a:	e7d2      	b.n	80152c2 <__ieee754_pow+0x96a>
 801531c:	491a      	ldr	r1, [pc, #104]	; (8015388 <__ieee754_pow+0xa30>)
 801531e:	2000      	movs	r0, #0
 8015320:	f7ff bb9e 	b.w	8014a60 <__ieee754_pow+0x108>
 8015324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015328:	f7ff bb9a 	b.w	8014a60 <__ieee754_pow+0x108>
 801532c:	9000      	str	r0, [sp, #0]
 801532e:	f7ff bb76 	b.w	8014a1e <__ieee754_pow+0xc6>
 8015332:	2100      	movs	r1, #0
 8015334:	f7ff bb60 	b.w	80149f8 <__ieee754_pow+0xa0>
 8015338:	00000000 	.word	0x00000000
 801533c:	3fe62e43 	.word	0x3fe62e43
 8015340:	fefa39ef 	.word	0xfefa39ef
 8015344:	3fe62e42 	.word	0x3fe62e42
 8015348:	0ca86c39 	.word	0x0ca86c39
 801534c:	be205c61 	.word	0xbe205c61
 8015350:	72bea4d0 	.word	0x72bea4d0
 8015354:	3e663769 	.word	0x3e663769
 8015358:	c5d26bf1 	.word	0xc5d26bf1
 801535c:	3ebbbd41 	.word	0x3ebbbd41
 8015360:	af25de2c 	.word	0xaf25de2c
 8015364:	3f11566a 	.word	0x3f11566a
 8015368:	16bebd93 	.word	0x16bebd93
 801536c:	3f66c16c 	.word	0x3f66c16c
 8015370:	5555553e 	.word	0x5555553e
 8015374:	3fc55555 	.word	0x3fc55555
 8015378:	c2f8f359 	.word	0xc2f8f359
 801537c:	01a56e1f 	.word	0x01a56e1f
 8015380:	3fe00000 	.word	0x3fe00000
 8015384:	000fffff 	.word	0x000fffff
 8015388:	3ff00000 	.word	0x3ff00000
 801538c:	4090cbff 	.word	0x4090cbff
 8015390:	3f6f3400 	.word	0x3f6f3400
 8015394:	652b82fe 	.word	0x652b82fe
 8015398:	3c971547 	.word	0x3c971547

0801539c <__ieee754_sqrt>:
 801539c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a0:	ec55 4b10 	vmov	r4, r5, d0
 80153a4:	4e56      	ldr	r6, [pc, #344]	; (8015500 <__ieee754_sqrt+0x164>)
 80153a6:	43ae      	bics	r6, r5
 80153a8:	ee10 0a10 	vmov	r0, s0
 80153ac:	ee10 3a10 	vmov	r3, s0
 80153b0:	4629      	mov	r1, r5
 80153b2:	462a      	mov	r2, r5
 80153b4:	d110      	bne.n	80153d8 <__ieee754_sqrt+0x3c>
 80153b6:	ee10 2a10 	vmov	r2, s0
 80153ba:	462b      	mov	r3, r5
 80153bc:	f7eb f92c 	bl	8000618 <__aeabi_dmul>
 80153c0:	4602      	mov	r2, r0
 80153c2:	460b      	mov	r3, r1
 80153c4:	4620      	mov	r0, r4
 80153c6:	4629      	mov	r1, r5
 80153c8:	f7ea ff70 	bl	80002ac <__adddf3>
 80153cc:	4604      	mov	r4, r0
 80153ce:	460d      	mov	r5, r1
 80153d0:	ec45 4b10 	vmov	d0, r4, r5
 80153d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153d8:	2d00      	cmp	r5, #0
 80153da:	dc10      	bgt.n	80153fe <__ieee754_sqrt+0x62>
 80153dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80153e0:	4330      	orrs	r0, r6
 80153e2:	d0f5      	beq.n	80153d0 <__ieee754_sqrt+0x34>
 80153e4:	b15d      	cbz	r5, 80153fe <__ieee754_sqrt+0x62>
 80153e6:	ee10 2a10 	vmov	r2, s0
 80153ea:	462b      	mov	r3, r5
 80153ec:	ee10 0a10 	vmov	r0, s0
 80153f0:	f7ea ff5a 	bl	80002a8 <__aeabi_dsub>
 80153f4:	4602      	mov	r2, r0
 80153f6:	460b      	mov	r3, r1
 80153f8:	f7eb fa38 	bl	800086c <__aeabi_ddiv>
 80153fc:	e7e6      	b.n	80153cc <__ieee754_sqrt+0x30>
 80153fe:	1509      	asrs	r1, r1, #20
 8015400:	d076      	beq.n	80154f0 <__ieee754_sqrt+0x154>
 8015402:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015406:	07ce      	lsls	r6, r1, #31
 8015408:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801540c:	bf5e      	ittt	pl
 801540e:	0fda      	lsrpl	r2, r3, #31
 8015410:	005b      	lslpl	r3, r3, #1
 8015412:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8015416:	0fda      	lsrs	r2, r3, #31
 8015418:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801541c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015420:	2000      	movs	r0, #0
 8015422:	106d      	asrs	r5, r5, #1
 8015424:	005b      	lsls	r3, r3, #1
 8015426:	f04f 0e16 	mov.w	lr, #22
 801542a:	4684      	mov	ip, r0
 801542c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015430:	eb0c 0401 	add.w	r4, ip, r1
 8015434:	4294      	cmp	r4, r2
 8015436:	bfde      	ittt	le
 8015438:	1b12      	suble	r2, r2, r4
 801543a:	eb04 0c01 	addle.w	ip, r4, r1
 801543e:	1840      	addle	r0, r0, r1
 8015440:	0052      	lsls	r2, r2, #1
 8015442:	f1be 0e01 	subs.w	lr, lr, #1
 8015446:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801544a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801544e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015452:	d1ed      	bne.n	8015430 <__ieee754_sqrt+0x94>
 8015454:	4671      	mov	r1, lr
 8015456:	2720      	movs	r7, #32
 8015458:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801545c:	4562      	cmp	r2, ip
 801545e:	eb04 060e 	add.w	r6, r4, lr
 8015462:	dc02      	bgt.n	801546a <__ieee754_sqrt+0xce>
 8015464:	d113      	bne.n	801548e <__ieee754_sqrt+0xf2>
 8015466:	429e      	cmp	r6, r3
 8015468:	d811      	bhi.n	801548e <__ieee754_sqrt+0xf2>
 801546a:	2e00      	cmp	r6, #0
 801546c:	eb06 0e04 	add.w	lr, r6, r4
 8015470:	da43      	bge.n	80154fa <__ieee754_sqrt+0x15e>
 8015472:	f1be 0f00 	cmp.w	lr, #0
 8015476:	db40      	blt.n	80154fa <__ieee754_sqrt+0x15e>
 8015478:	f10c 0801 	add.w	r8, ip, #1
 801547c:	eba2 020c 	sub.w	r2, r2, ip
 8015480:	429e      	cmp	r6, r3
 8015482:	bf88      	it	hi
 8015484:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015488:	1b9b      	subs	r3, r3, r6
 801548a:	4421      	add	r1, r4
 801548c:	46c4      	mov	ip, r8
 801548e:	0052      	lsls	r2, r2, #1
 8015490:	3f01      	subs	r7, #1
 8015492:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015496:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801549a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801549e:	d1dd      	bne.n	801545c <__ieee754_sqrt+0xc0>
 80154a0:	4313      	orrs	r3, r2
 80154a2:	d006      	beq.n	80154b2 <__ieee754_sqrt+0x116>
 80154a4:	1c4c      	adds	r4, r1, #1
 80154a6:	bf13      	iteet	ne
 80154a8:	3101      	addne	r1, #1
 80154aa:	3001      	addeq	r0, #1
 80154ac:	4639      	moveq	r1, r7
 80154ae:	f021 0101 	bicne.w	r1, r1, #1
 80154b2:	1043      	asrs	r3, r0, #1
 80154b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80154b8:	0849      	lsrs	r1, r1, #1
 80154ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80154be:	07c2      	lsls	r2, r0, #31
 80154c0:	bf48      	it	mi
 80154c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80154c6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80154ca:	460c      	mov	r4, r1
 80154cc:	463d      	mov	r5, r7
 80154ce:	e77f      	b.n	80153d0 <__ieee754_sqrt+0x34>
 80154d0:	0ada      	lsrs	r2, r3, #11
 80154d2:	3815      	subs	r0, #21
 80154d4:	055b      	lsls	r3, r3, #21
 80154d6:	2a00      	cmp	r2, #0
 80154d8:	d0fa      	beq.n	80154d0 <__ieee754_sqrt+0x134>
 80154da:	02d7      	lsls	r7, r2, #11
 80154dc:	d50a      	bpl.n	80154f4 <__ieee754_sqrt+0x158>
 80154de:	f1c1 0420 	rsb	r4, r1, #32
 80154e2:	fa23 f404 	lsr.w	r4, r3, r4
 80154e6:	1e4d      	subs	r5, r1, #1
 80154e8:	408b      	lsls	r3, r1
 80154ea:	4322      	orrs	r2, r4
 80154ec:	1b41      	subs	r1, r0, r5
 80154ee:	e788      	b.n	8015402 <__ieee754_sqrt+0x66>
 80154f0:	4608      	mov	r0, r1
 80154f2:	e7f0      	b.n	80154d6 <__ieee754_sqrt+0x13a>
 80154f4:	0052      	lsls	r2, r2, #1
 80154f6:	3101      	adds	r1, #1
 80154f8:	e7ef      	b.n	80154da <__ieee754_sqrt+0x13e>
 80154fa:	46e0      	mov	r8, ip
 80154fc:	e7be      	b.n	801547c <__ieee754_sqrt+0xe0>
 80154fe:	bf00      	nop
 8015500:	7ff00000 	.word	0x7ff00000

08015504 <fabs>:
 8015504:	ec51 0b10 	vmov	r0, r1, d0
 8015508:	ee10 2a10 	vmov	r2, s0
 801550c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015510:	ec43 2b10 	vmov	d0, r2, r3
 8015514:	4770      	bx	lr

08015516 <finite>:
 8015516:	b082      	sub	sp, #8
 8015518:	ed8d 0b00 	vstr	d0, [sp]
 801551c:	9801      	ldr	r0, [sp, #4]
 801551e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8015522:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015526:	0fc0      	lsrs	r0, r0, #31
 8015528:	b002      	add	sp, #8
 801552a:	4770      	bx	lr
 801552c:	0000      	movs	r0, r0
	...

08015530 <nan>:
 8015530:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015538 <nan+0x8>
 8015534:	4770      	bx	lr
 8015536:	bf00      	nop
 8015538:	00000000 	.word	0x00000000
 801553c:	7ff80000 	.word	0x7ff80000

08015540 <rint>:
 8015540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015542:	ec51 0b10 	vmov	r0, r1, d0
 8015546:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801554a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801554e:	2e13      	cmp	r6, #19
 8015550:	ee10 4a10 	vmov	r4, s0
 8015554:	460b      	mov	r3, r1
 8015556:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801555a:	dc58      	bgt.n	801560e <rint+0xce>
 801555c:	2e00      	cmp	r6, #0
 801555e:	da2b      	bge.n	80155b8 <rint+0x78>
 8015560:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8015564:	4302      	orrs	r2, r0
 8015566:	d023      	beq.n	80155b0 <rint+0x70>
 8015568:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801556c:	4302      	orrs	r2, r0
 801556e:	4254      	negs	r4, r2
 8015570:	4314      	orrs	r4, r2
 8015572:	0c4b      	lsrs	r3, r1, #17
 8015574:	0b24      	lsrs	r4, r4, #12
 8015576:	045b      	lsls	r3, r3, #17
 8015578:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801557c:	ea44 0103 	orr.w	r1, r4, r3
 8015580:	4b32      	ldr	r3, [pc, #200]	; (801564c <rint+0x10c>)
 8015582:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8015586:	e9d3 6700 	ldrd	r6, r7, [r3]
 801558a:	4602      	mov	r2, r0
 801558c:	460b      	mov	r3, r1
 801558e:	4630      	mov	r0, r6
 8015590:	4639      	mov	r1, r7
 8015592:	f7ea fe8b 	bl	80002ac <__adddf3>
 8015596:	e9cd 0100 	strd	r0, r1, [sp]
 801559a:	463b      	mov	r3, r7
 801559c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155a0:	4632      	mov	r2, r6
 80155a2:	f7ea fe81 	bl	80002a8 <__aeabi_dsub>
 80155a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80155aa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80155ae:	4639      	mov	r1, r7
 80155b0:	ec41 0b10 	vmov	d0, r0, r1
 80155b4:	b003      	add	sp, #12
 80155b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155b8:	4a25      	ldr	r2, [pc, #148]	; (8015650 <rint+0x110>)
 80155ba:	4132      	asrs	r2, r6
 80155bc:	ea01 0702 	and.w	r7, r1, r2
 80155c0:	4307      	orrs	r7, r0
 80155c2:	d0f5      	beq.n	80155b0 <rint+0x70>
 80155c4:	0851      	lsrs	r1, r2, #1
 80155c6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80155ca:	4314      	orrs	r4, r2
 80155cc:	d00c      	beq.n	80155e8 <rint+0xa8>
 80155ce:	ea23 0201 	bic.w	r2, r3, r1
 80155d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80155d6:	2e13      	cmp	r6, #19
 80155d8:	fa43 f606 	asr.w	r6, r3, r6
 80155dc:	bf0c      	ite	eq
 80155de:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80155e2:	2400      	movne	r4, #0
 80155e4:	ea42 0306 	orr.w	r3, r2, r6
 80155e8:	4918      	ldr	r1, [pc, #96]	; (801564c <rint+0x10c>)
 80155ea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80155ee:	4622      	mov	r2, r4
 80155f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80155f4:	4620      	mov	r0, r4
 80155f6:	4629      	mov	r1, r5
 80155f8:	f7ea fe58 	bl	80002ac <__adddf3>
 80155fc:	e9cd 0100 	strd	r0, r1, [sp]
 8015600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015604:	4622      	mov	r2, r4
 8015606:	462b      	mov	r3, r5
 8015608:	f7ea fe4e 	bl	80002a8 <__aeabi_dsub>
 801560c:	e7d0      	b.n	80155b0 <rint+0x70>
 801560e:	2e33      	cmp	r6, #51	; 0x33
 8015610:	dd07      	ble.n	8015622 <rint+0xe2>
 8015612:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015616:	d1cb      	bne.n	80155b0 <rint+0x70>
 8015618:	ee10 2a10 	vmov	r2, s0
 801561c:	f7ea fe46 	bl	80002ac <__adddf3>
 8015620:	e7c6      	b.n	80155b0 <rint+0x70>
 8015622:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8015626:	f04f 36ff 	mov.w	r6, #4294967295
 801562a:	40d6      	lsrs	r6, r2
 801562c:	4230      	tst	r0, r6
 801562e:	d0bf      	beq.n	80155b0 <rint+0x70>
 8015630:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8015634:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8015638:	bf1f      	itttt	ne
 801563a:	ea24 0101 	bicne.w	r1, r4, r1
 801563e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8015642:	fa44 f202 	asrne.w	r2, r4, r2
 8015646:	ea41 0402 	orrne.w	r4, r1, r2
 801564a:	e7cd      	b.n	80155e8 <rint+0xa8>
 801564c:	0801bec8 	.word	0x0801bec8
 8015650:	000fffff 	.word	0x000fffff
 8015654:	00000000 	.word	0x00000000

08015658 <scalbn>:
 8015658:	b570      	push	{r4, r5, r6, lr}
 801565a:	ec55 4b10 	vmov	r4, r5, d0
 801565e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015662:	4606      	mov	r6, r0
 8015664:	462b      	mov	r3, r5
 8015666:	b99a      	cbnz	r2, 8015690 <scalbn+0x38>
 8015668:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801566c:	4323      	orrs	r3, r4
 801566e:	d036      	beq.n	80156de <scalbn+0x86>
 8015670:	4b39      	ldr	r3, [pc, #228]	; (8015758 <scalbn+0x100>)
 8015672:	4629      	mov	r1, r5
 8015674:	ee10 0a10 	vmov	r0, s0
 8015678:	2200      	movs	r2, #0
 801567a:	f7ea ffcd 	bl	8000618 <__aeabi_dmul>
 801567e:	4b37      	ldr	r3, [pc, #220]	; (801575c <scalbn+0x104>)
 8015680:	429e      	cmp	r6, r3
 8015682:	4604      	mov	r4, r0
 8015684:	460d      	mov	r5, r1
 8015686:	da10      	bge.n	80156aa <scalbn+0x52>
 8015688:	a32b      	add	r3, pc, #172	; (adr r3, 8015738 <scalbn+0xe0>)
 801568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801568e:	e03a      	b.n	8015706 <scalbn+0xae>
 8015690:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015694:	428a      	cmp	r2, r1
 8015696:	d10c      	bne.n	80156b2 <scalbn+0x5a>
 8015698:	ee10 2a10 	vmov	r2, s0
 801569c:	4620      	mov	r0, r4
 801569e:	4629      	mov	r1, r5
 80156a0:	f7ea fe04 	bl	80002ac <__adddf3>
 80156a4:	4604      	mov	r4, r0
 80156a6:	460d      	mov	r5, r1
 80156a8:	e019      	b.n	80156de <scalbn+0x86>
 80156aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80156ae:	460b      	mov	r3, r1
 80156b0:	3a36      	subs	r2, #54	; 0x36
 80156b2:	4432      	add	r2, r6
 80156b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80156b8:	428a      	cmp	r2, r1
 80156ba:	dd08      	ble.n	80156ce <scalbn+0x76>
 80156bc:	2d00      	cmp	r5, #0
 80156be:	a120      	add	r1, pc, #128	; (adr r1, 8015740 <scalbn+0xe8>)
 80156c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156c4:	da1c      	bge.n	8015700 <scalbn+0xa8>
 80156c6:	a120      	add	r1, pc, #128	; (adr r1, 8015748 <scalbn+0xf0>)
 80156c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156cc:	e018      	b.n	8015700 <scalbn+0xa8>
 80156ce:	2a00      	cmp	r2, #0
 80156d0:	dd08      	ble.n	80156e4 <scalbn+0x8c>
 80156d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80156d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80156da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80156de:	ec45 4b10 	vmov	d0, r4, r5
 80156e2:	bd70      	pop	{r4, r5, r6, pc}
 80156e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80156e8:	da19      	bge.n	801571e <scalbn+0xc6>
 80156ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 80156ee:	429e      	cmp	r6, r3
 80156f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80156f4:	dd0a      	ble.n	801570c <scalbn+0xb4>
 80156f6:	a112      	add	r1, pc, #72	; (adr r1, 8015740 <scalbn+0xe8>)
 80156f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d1e2      	bne.n	80156c6 <scalbn+0x6e>
 8015700:	a30f      	add	r3, pc, #60	; (adr r3, 8015740 <scalbn+0xe8>)
 8015702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015706:	f7ea ff87 	bl	8000618 <__aeabi_dmul>
 801570a:	e7cb      	b.n	80156a4 <scalbn+0x4c>
 801570c:	a10a      	add	r1, pc, #40	; (adr r1, 8015738 <scalbn+0xe0>)
 801570e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d0b8      	beq.n	8015688 <scalbn+0x30>
 8015716:	a10e      	add	r1, pc, #56	; (adr r1, 8015750 <scalbn+0xf8>)
 8015718:	e9d1 0100 	ldrd	r0, r1, [r1]
 801571c:	e7b4      	b.n	8015688 <scalbn+0x30>
 801571e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015722:	3236      	adds	r2, #54	; 0x36
 8015724:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015728:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801572c:	4620      	mov	r0, r4
 801572e:	4b0c      	ldr	r3, [pc, #48]	; (8015760 <scalbn+0x108>)
 8015730:	2200      	movs	r2, #0
 8015732:	e7e8      	b.n	8015706 <scalbn+0xae>
 8015734:	f3af 8000 	nop.w
 8015738:	c2f8f359 	.word	0xc2f8f359
 801573c:	01a56e1f 	.word	0x01a56e1f
 8015740:	8800759c 	.word	0x8800759c
 8015744:	7e37e43c 	.word	0x7e37e43c
 8015748:	8800759c 	.word	0x8800759c
 801574c:	fe37e43c 	.word	0xfe37e43c
 8015750:	c2f8f359 	.word	0xc2f8f359
 8015754:	81a56e1f 	.word	0x81a56e1f
 8015758:	43500000 	.word	0x43500000
 801575c:	ffff3cb0 	.word	0xffff3cb0
 8015760:	3c900000 	.word	0x3c900000

08015764 <abort>:
 8015764:	b508      	push	{r3, lr}
 8015766:	2006      	movs	r0, #6
 8015768:	f001 f9ba 	bl	8016ae0 <raise>
 801576c:	2001      	movs	r0, #1
 801576e:	f005 fa17 	bl	801aba0 <_exit>
	...

08015774 <__errno>:
 8015774:	4b01      	ldr	r3, [pc, #4]	; (801577c <__errno+0x8>)
 8015776:	6818      	ldr	r0, [r3, #0]
 8015778:	4770      	bx	lr
 801577a:	bf00      	nop
 801577c:	200000dc 	.word	0x200000dc

08015780 <std>:
 8015780:	2300      	movs	r3, #0
 8015782:	b510      	push	{r4, lr}
 8015784:	4604      	mov	r4, r0
 8015786:	e9c0 3300 	strd	r3, r3, [r0]
 801578a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801578e:	6083      	str	r3, [r0, #8]
 8015790:	8181      	strh	r1, [r0, #12]
 8015792:	6643      	str	r3, [r0, #100]	; 0x64
 8015794:	81c2      	strh	r2, [r0, #14]
 8015796:	6183      	str	r3, [r0, #24]
 8015798:	4619      	mov	r1, r3
 801579a:	2208      	movs	r2, #8
 801579c:	305c      	adds	r0, #92	; 0x5c
 801579e:	f000 f93d 	bl	8015a1c <memset>
 80157a2:	4b05      	ldr	r3, [pc, #20]	; (80157b8 <std+0x38>)
 80157a4:	6263      	str	r3, [r4, #36]	; 0x24
 80157a6:	4b05      	ldr	r3, [pc, #20]	; (80157bc <std+0x3c>)
 80157a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80157aa:	4b05      	ldr	r3, [pc, #20]	; (80157c0 <std+0x40>)
 80157ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80157ae:	4b05      	ldr	r3, [pc, #20]	; (80157c4 <std+0x44>)
 80157b0:	6224      	str	r4, [r4, #32]
 80157b2:	6323      	str	r3, [r4, #48]	; 0x30
 80157b4:	bd10      	pop	{r4, pc}
 80157b6:	bf00      	nop
 80157b8:	08016bb1 	.word	0x08016bb1
 80157bc:	08016bd7 	.word	0x08016bd7
 80157c0:	08016c0f 	.word	0x08016c0f
 80157c4:	08016c33 	.word	0x08016c33

080157c8 <_cleanup_r>:
 80157c8:	4901      	ldr	r1, [pc, #4]	; (80157d0 <_cleanup_r+0x8>)
 80157ca:	f000 b8af 	b.w	801592c <_fwalk_reent>
 80157ce:	bf00      	nop
 80157d0:	08018b55 	.word	0x08018b55

080157d4 <__sfmoreglue>:
 80157d4:	b570      	push	{r4, r5, r6, lr}
 80157d6:	1e4a      	subs	r2, r1, #1
 80157d8:	2568      	movs	r5, #104	; 0x68
 80157da:	4355      	muls	r5, r2
 80157dc:	460e      	mov	r6, r1
 80157de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80157e2:	f000 f973 	bl	8015acc <_malloc_r>
 80157e6:	4604      	mov	r4, r0
 80157e8:	b140      	cbz	r0, 80157fc <__sfmoreglue+0x28>
 80157ea:	2100      	movs	r1, #0
 80157ec:	e9c0 1600 	strd	r1, r6, [r0]
 80157f0:	300c      	adds	r0, #12
 80157f2:	60a0      	str	r0, [r4, #8]
 80157f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80157f8:	f000 f910 	bl	8015a1c <memset>
 80157fc:	4620      	mov	r0, r4
 80157fe:	bd70      	pop	{r4, r5, r6, pc}

08015800 <__sfp_lock_acquire>:
 8015800:	4801      	ldr	r0, [pc, #4]	; (8015808 <__sfp_lock_acquire+0x8>)
 8015802:	f000 b8d8 	b.w	80159b6 <__retarget_lock_acquire_recursive>
 8015806:	bf00      	nop
 8015808:	2000784c 	.word	0x2000784c

0801580c <__sfp_lock_release>:
 801580c:	4801      	ldr	r0, [pc, #4]	; (8015814 <__sfp_lock_release+0x8>)
 801580e:	f000 b8d3 	b.w	80159b8 <__retarget_lock_release_recursive>
 8015812:	bf00      	nop
 8015814:	2000784c 	.word	0x2000784c

08015818 <__sinit_lock_acquire>:
 8015818:	4801      	ldr	r0, [pc, #4]	; (8015820 <__sinit_lock_acquire+0x8>)
 801581a:	f000 b8cc 	b.w	80159b6 <__retarget_lock_acquire_recursive>
 801581e:	bf00      	nop
 8015820:	20007847 	.word	0x20007847

08015824 <__sinit_lock_release>:
 8015824:	4801      	ldr	r0, [pc, #4]	; (801582c <__sinit_lock_release+0x8>)
 8015826:	f000 b8c7 	b.w	80159b8 <__retarget_lock_release_recursive>
 801582a:	bf00      	nop
 801582c:	20007847 	.word	0x20007847

08015830 <__sinit>:
 8015830:	b510      	push	{r4, lr}
 8015832:	4604      	mov	r4, r0
 8015834:	f7ff fff0 	bl	8015818 <__sinit_lock_acquire>
 8015838:	69a3      	ldr	r3, [r4, #24]
 801583a:	b11b      	cbz	r3, 8015844 <__sinit+0x14>
 801583c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015840:	f7ff bff0 	b.w	8015824 <__sinit_lock_release>
 8015844:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015848:	6523      	str	r3, [r4, #80]	; 0x50
 801584a:	4b13      	ldr	r3, [pc, #76]	; (8015898 <__sinit+0x68>)
 801584c:	4a13      	ldr	r2, [pc, #76]	; (801589c <__sinit+0x6c>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	62a2      	str	r2, [r4, #40]	; 0x28
 8015852:	42a3      	cmp	r3, r4
 8015854:	bf04      	itt	eq
 8015856:	2301      	moveq	r3, #1
 8015858:	61a3      	streq	r3, [r4, #24]
 801585a:	4620      	mov	r0, r4
 801585c:	f000 f820 	bl	80158a0 <__sfp>
 8015860:	6060      	str	r0, [r4, #4]
 8015862:	4620      	mov	r0, r4
 8015864:	f000 f81c 	bl	80158a0 <__sfp>
 8015868:	60a0      	str	r0, [r4, #8]
 801586a:	4620      	mov	r0, r4
 801586c:	f000 f818 	bl	80158a0 <__sfp>
 8015870:	2200      	movs	r2, #0
 8015872:	60e0      	str	r0, [r4, #12]
 8015874:	2104      	movs	r1, #4
 8015876:	6860      	ldr	r0, [r4, #4]
 8015878:	f7ff ff82 	bl	8015780 <std>
 801587c:	68a0      	ldr	r0, [r4, #8]
 801587e:	2201      	movs	r2, #1
 8015880:	2109      	movs	r1, #9
 8015882:	f7ff ff7d 	bl	8015780 <std>
 8015886:	68e0      	ldr	r0, [r4, #12]
 8015888:	2202      	movs	r2, #2
 801588a:	2112      	movs	r1, #18
 801588c:	f7ff ff78 	bl	8015780 <std>
 8015890:	2301      	movs	r3, #1
 8015892:	61a3      	str	r3, [r4, #24]
 8015894:	e7d2      	b.n	801583c <__sinit+0xc>
 8015896:	bf00      	nop
 8015898:	0801c03c 	.word	0x0801c03c
 801589c:	080157c9 	.word	0x080157c9

080158a0 <__sfp>:
 80158a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158a2:	4607      	mov	r7, r0
 80158a4:	f7ff ffac 	bl	8015800 <__sfp_lock_acquire>
 80158a8:	4b1e      	ldr	r3, [pc, #120]	; (8015924 <__sfp+0x84>)
 80158aa:	681e      	ldr	r6, [r3, #0]
 80158ac:	69b3      	ldr	r3, [r6, #24]
 80158ae:	b913      	cbnz	r3, 80158b6 <__sfp+0x16>
 80158b0:	4630      	mov	r0, r6
 80158b2:	f7ff ffbd 	bl	8015830 <__sinit>
 80158b6:	3648      	adds	r6, #72	; 0x48
 80158b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80158bc:	3b01      	subs	r3, #1
 80158be:	d503      	bpl.n	80158c8 <__sfp+0x28>
 80158c0:	6833      	ldr	r3, [r6, #0]
 80158c2:	b30b      	cbz	r3, 8015908 <__sfp+0x68>
 80158c4:	6836      	ldr	r6, [r6, #0]
 80158c6:	e7f7      	b.n	80158b8 <__sfp+0x18>
 80158c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80158cc:	b9d5      	cbnz	r5, 8015904 <__sfp+0x64>
 80158ce:	4b16      	ldr	r3, [pc, #88]	; (8015928 <__sfp+0x88>)
 80158d0:	60e3      	str	r3, [r4, #12]
 80158d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80158d6:	6665      	str	r5, [r4, #100]	; 0x64
 80158d8:	f000 f86c 	bl	80159b4 <__retarget_lock_init_recursive>
 80158dc:	f7ff ff96 	bl	801580c <__sfp_lock_release>
 80158e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80158e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80158e8:	6025      	str	r5, [r4, #0]
 80158ea:	61a5      	str	r5, [r4, #24]
 80158ec:	2208      	movs	r2, #8
 80158ee:	4629      	mov	r1, r5
 80158f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80158f4:	f000 f892 	bl	8015a1c <memset>
 80158f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80158fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015900:	4620      	mov	r0, r4
 8015902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015904:	3468      	adds	r4, #104	; 0x68
 8015906:	e7d9      	b.n	80158bc <__sfp+0x1c>
 8015908:	2104      	movs	r1, #4
 801590a:	4638      	mov	r0, r7
 801590c:	f7ff ff62 	bl	80157d4 <__sfmoreglue>
 8015910:	4604      	mov	r4, r0
 8015912:	6030      	str	r0, [r6, #0]
 8015914:	2800      	cmp	r0, #0
 8015916:	d1d5      	bne.n	80158c4 <__sfp+0x24>
 8015918:	f7ff ff78 	bl	801580c <__sfp_lock_release>
 801591c:	230c      	movs	r3, #12
 801591e:	603b      	str	r3, [r7, #0]
 8015920:	e7ee      	b.n	8015900 <__sfp+0x60>
 8015922:	bf00      	nop
 8015924:	0801c03c 	.word	0x0801c03c
 8015928:	ffff0001 	.word	0xffff0001

0801592c <_fwalk_reent>:
 801592c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015930:	4606      	mov	r6, r0
 8015932:	4688      	mov	r8, r1
 8015934:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015938:	2700      	movs	r7, #0
 801593a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801593e:	f1b9 0901 	subs.w	r9, r9, #1
 8015942:	d505      	bpl.n	8015950 <_fwalk_reent+0x24>
 8015944:	6824      	ldr	r4, [r4, #0]
 8015946:	2c00      	cmp	r4, #0
 8015948:	d1f7      	bne.n	801593a <_fwalk_reent+0xe>
 801594a:	4638      	mov	r0, r7
 801594c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015950:	89ab      	ldrh	r3, [r5, #12]
 8015952:	2b01      	cmp	r3, #1
 8015954:	d907      	bls.n	8015966 <_fwalk_reent+0x3a>
 8015956:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801595a:	3301      	adds	r3, #1
 801595c:	d003      	beq.n	8015966 <_fwalk_reent+0x3a>
 801595e:	4629      	mov	r1, r5
 8015960:	4630      	mov	r0, r6
 8015962:	47c0      	blx	r8
 8015964:	4307      	orrs	r7, r0
 8015966:	3568      	adds	r5, #104	; 0x68
 8015968:	e7e9      	b.n	801593e <_fwalk_reent+0x12>
	...

0801596c <__libc_init_array>:
 801596c:	b570      	push	{r4, r5, r6, lr}
 801596e:	4d0d      	ldr	r5, [pc, #52]	; (80159a4 <__libc_init_array+0x38>)
 8015970:	4c0d      	ldr	r4, [pc, #52]	; (80159a8 <__libc_init_array+0x3c>)
 8015972:	1b64      	subs	r4, r4, r5
 8015974:	10a4      	asrs	r4, r4, #2
 8015976:	2600      	movs	r6, #0
 8015978:	42a6      	cmp	r6, r4
 801597a:	d109      	bne.n	8015990 <__libc_init_array+0x24>
 801597c:	4d0b      	ldr	r5, [pc, #44]	; (80159ac <__libc_init_array+0x40>)
 801597e:	4c0c      	ldr	r4, [pc, #48]	; (80159b0 <__libc_init_array+0x44>)
 8015980:	f005 f910 	bl	801aba4 <_init>
 8015984:	1b64      	subs	r4, r4, r5
 8015986:	10a4      	asrs	r4, r4, #2
 8015988:	2600      	movs	r6, #0
 801598a:	42a6      	cmp	r6, r4
 801598c:	d105      	bne.n	801599a <__libc_init_array+0x2e>
 801598e:	bd70      	pop	{r4, r5, r6, pc}
 8015990:	f855 3b04 	ldr.w	r3, [r5], #4
 8015994:	4798      	blx	r3
 8015996:	3601      	adds	r6, #1
 8015998:	e7ee      	b.n	8015978 <__libc_init_array+0xc>
 801599a:	f855 3b04 	ldr.w	r3, [r5], #4
 801599e:	4798      	blx	r3
 80159a0:	3601      	adds	r6, #1
 80159a2:	e7f2      	b.n	801598a <__libc_init_array+0x1e>
 80159a4:	0801c3a8 	.word	0x0801c3a8
 80159a8:	0801c3a8 	.word	0x0801c3a8
 80159ac:	0801c3a8 	.word	0x0801c3a8
 80159b0:	0801c3b0 	.word	0x0801c3b0

080159b4 <__retarget_lock_init_recursive>:
 80159b4:	4770      	bx	lr

080159b6 <__retarget_lock_acquire_recursive>:
 80159b6:	4770      	bx	lr

080159b8 <__retarget_lock_release_recursive>:
 80159b8:	4770      	bx	lr
	...

080159bc <malloc>:
 80159bc:	4b02      	ldr	r3, [pc, #8]	; (80159c8 <malloc+0xc>)
 80159be:	4601      	mov	r1, r0
 80159c0:	6818      	ldr	r0, [r3, #0]
 80159c2:	f000 b883 	b.w	8015acc <_malloc_r>
 80159c6:	bf00      	nop
 80159c8:	200000dc 	.word	0x200000dc

080159cc <memcpy>:
 80159cc:	440a      	add	r2, r1
 80159ce:	4291      	cmp	r1, r2
 80159d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80159d4:	d100      	bne.n	80159d8 <memcpy+0xc>
 80159d6:	4770      	bx	lr
 80159d8:	b510      	push	{r4, lr}
 80159da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80159e2:	4291      	cmp	r1, r2
 80159e4:	d1f9      	bne.n	80159da <memcpy+0xe>
 80159e6:	bd10      	pop	{r4, pc}

080159e8 <memmove>:
 80159e8:	4288      	cmp	r0, r1
 80159ea:	b510      	push	{r4, lr}
 80159ec:	eb01 0402 	add.w	r4, r1, r2
 80159f0:	d902      	bls.n	80159f8 <memmove+0x10>
 80159f2:	4284      	cmp	r4, r0
 80159f4:	4623      	mov	r3, r4
 80159f6:	d807      	bhi.n	8015a08 <memmove+0x20>
 80159f8:	1e43      	subs	r3, r0, #1
 80159fa:	42a1      	cmp	r1, r4
 80159fc:	d008      	beq.n	8015a10 <memmove+0x28>
 80159fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015a06:	e7f8      	b.n	80159fa <memmove+0x12>
 8015a08:	4402      	add	r2, r0
 8015a0a:	4601      	mov	r1, r0
 8015a0c:	428a      	cmp	r2, r1
 8015a0e:	d100      	bne.n	8015a12 <memmove+0x2a>
 8015a10:	bd10      	pop	{r4, pc}
 8015a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015a1a:	e7f7      	b.n	8015a0c <memmove+0x24>

08015a1c <memset>:
 8015a1c:	4402      	add	r2, r0
 8015a1e:	4603      	mov	r3, r0
 8015a20:	4293      	cmp	r3, r2
 8015a22:	d100      	bne.n	8015a26 <memset+0xa>
 8015a24:	4770      	bx	lr
 8015a26:	f803 1b01 	strb.w	r1, [r3], #1
 8015a2a:	e7f9      	b.n	8015a20 <memset+0x4>

08015a2c <_free_r>:
 8015a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015a2e:	2900      	cmp	r1, #0
 8015a30:	d048      	beq.n	8015ac4 <_free_r+0x98>
 8015a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a36:	9001      	str	r0, [sp, #4]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	f1a1 0404 	sub.w	r4, r1, #4
 8015a3e:	bfb8      	it	lt
 8015a40:	18e4      	addlt	r4, r4, r3
 8015a42:	f003 fcd1 	bl	80193e8 <__malloc_lock>
 8015a46:	4a20      	ldr	r2, [pc, #128]	; (8015ac8 <_free_r+0x9c>)
 8015a48:	9801      	ldr	r0, [sp, #4]
 8015a4a:	6813      	ldr	r3, [r2, #0]
 8015a4c:	4615      	mov	r5, r2
 8015a4e:	b933      	cbnz	r3, 8015a5e <_free_r+0x32>
 8015a50:	6063      	str	r3, [r4, #4]
 8015a52:	6014      	str	r4, [r2, #0]
 8015a54:	b003      	add	sp, #12
 8015a56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a5a:	f003 bccb 	b.w	80193f4 <__malloc_unlock>
 8015a5e:	42a3      	cmp	r3, r4
 8015a60:	d90b      	bls.n	8015a7a <_free_r+0x4e>
 8015a62:	6821      	ldr	r1, [r4, #0]
 8015a64:	1862      	adds	r2, r4, r1
 8015a66:	4293      	cmp	r3, r2
 8015a68:	bf04      	itt	eq
 8015a6a:	681a      	ldreq	r2, [r3, #0]
 8015a6c:	685b      	ldreq	r3, [r3, #4]
 8015a6e:	6063      	str	r3, [r4, #4]
 8015a70:	bf04      	itt	eq
 8015a72:	1852      	addeq	r2, r2, r1
 8015a74:	6022      	streq	r2, [r4, #0]
 8015a76:	602c      	str	r4, [r5, #0]
 8015a78:	e7ec      	b.n	8015a54 <_free_r+0x28>
 8015a7a:	461a      	mov	r2, r3
 8015a7c:	685b      	ldr	r3, [r3, #4]
 8015a7e:	b10b      	cbz	r3, 8015a84 <_free_r+0x58>
 8015a80:	42a3      	cmp	r3, r4
 8015a82:	d9fa      	bls.n	8015a7a <_free_r+0x4e>
 8015a84:	6811      	ldr	r1, [r2, #0]
 8015a86:	1855      	adds	r5, r2, r1
 8015a88:	42a5      	cmp	r5, r4
 8015a8a:	d10b      	bne.n	8015aa4 <_free_r+0x78>
 8015a8c:	6824      	ldr	r4, [r4, #0]
 8015a8e:	4421      	add	r1, r4
 8015a90:	1854      	adds	r4, r2, r1
 8015a92:	42a3      	cmp	r3, r4
 8015a94:	6011      	str	r1, [r2, #0]
 8015a96:	d1dd      	bne.n	8015a54 <_free_r+0x28>
 8015a98:	681c      	ldr	r4, [r3, #0]
 8015a9a:	685b      	ldr	r3, [r3, #4]
 8015a9c:	6053      	str	r3, [r2, #4]
 8015a9e:	4421      	add	r1, r4
 8015aa0:	6011      	str	r1, [r2, #0]
 8015aa2:	e7d7      	b.n	8015a54 <_free_r+0x28>
 8015aa4:	d902      	bls.n	8015aac <_free_r+0x80>
 8015aa6:	230c      	movs	r3, #12
 8015aa8:	6003      	str	r3, [r0, #0]
 8015aaa:	e7d3      	b.n	8015a54 <_free_r+0x28>
 8015aac:	6825      	ldr	r5, [r4, #0]
 8015aae:	1961      	adds	r1, r4, r5
 8015ab0:	428b      	cmp	r3, r1
 8015ab2:	bf04      	itt	eq
 8015ab4:	6819      	ldreq	r1, [r3, #0]
 8015ab6:	685b      	ldreq	r3, [r3, #4]
 8015ab8:	6063      	str	r3, [r4, #4]
 8015aba:	bf04      	itt	eq
 8015abc:	1949      	addeq	r1, r1, r5
 8015abe:	6021      	streq	r1, [r4, #0]
 8015ac0:	6054      	str	r4, [r2, #4]
 8015ac2:	e7c7      	b.n	8015a54 <_free_r+0x28>
 8015ac4:	b003      	add	sp, #12
 8015ac6:	bd30      	pop	{r4, r5, pc}
 8015ac8:	20006180 	.word	0x20006180

08015acc <_malloc_r>:
 8015acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ace:	1ccd      	adds	r5, r1, #3
 8015ad0:	f025 0503 	bic.w	r5, r5, #3
 8015ad4:	3508      	adds	r5, #8
 8015ad6:	2d0c      	cmp	r5, #12
 8015ad8:	bf38      	it	cc
 8015ada:	250c      	movcc	r5, #12
 8015adc:	2d00      	cmp	r5, #0
 8015ade:	4606      	mov	r6, r0
 8015ae0:	db01      	blt.n	8015ae6 <_malloc_r+0x1a>
 8015ae2:	42a9      	cmp	r1, r5
 8015ae4:	d903      	bls.n	8015aee <_malloc_r+0x22>
 8015ae6:	230c      	movs	r3, #12
 8015ae8:	6033      	str	r3, [r6, #0]
 8015aea:	2000      	movs	r0, #0
 8015aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aee:	f003 fc7b 	bl	80193e8 <__malloc_lock>
 8015af2:	4921      	ldr	r1, [pc, #132]	; (8015b78 <_malloc_r+0xac>)
 8015af4:	680a      	ldr	r2, [r1, #0]
 8015af6:	4614      	mov	r4, r2
 8015af8:	b99c      	cbnz	r4, 8015b22 <_malloc_r+0x56>
 8015afa:	4f20      	ldr	r7, [pc, #128]	; (8015b7c <_malloc_r+0xb0>)
 8015afc:	683b      	ldr	r3, [r7, #0]
 8015afe:	b923      	cbnz	r3, 8015b0a <_malloc_r+0x3e>
 8015b00:	4621      	mov	r1, r4
 8015b02:	4630      	mov	r0, r6
 8015b04:	f000 ffae 	bl	8016a64 <_sbrk_r>
 8015b08:	6038      	str	r0, [r7, #0]
 8015b0a:	4629      	mov	r1, r5
 8015b0c:	4630      	mov	r0, r6
 8015b0e:	f000 ffa9 	bl	8016a64 <_sbrk_r>
 8015b12:	1c43      	adds	r3, r0, #1
 8015b14:	d123      	bne.n	8015b5e <_malloc_r+0x92>
 8015b16:	230c      	movs	r3, #12
 8015b18:	6033      	str	r3, [r6, #0]
 8015b1a:	4630      	mov	r0, r6
 8015b1c:	f003 fc6a 	bl	80193f4 <__malloc_unlock>
 8015b20:	e7e3      	b.n	8015aea <_malloc_r+0x1e>
 8015b22:	6823      	ldr	r3, [r4, #0]
 8015b24:	1b5b      	subs	r3, r3, r5
 8015b26:	d417      	bmi.n	8015b58 <_malloc_r+0x8c>
 8015b28:	2b0b      	cmp	r3, #11
 8015b2a:	d903      	bls.n	8015b34 <_malloc_r+0x68>
 8015b2c:	6023      	str	r3, [r4, #0]
 8015b2e:	441c      	add	r4, r3
 8015b30:	6025      	str	r5, [r4, #0]
 8015b32:	e004      	b.n	8015b3e <_malloc_r+0x72>
 8015b34:	6863      	ldr	r3, [r4, #4]
 8015b36:	42a2      	cmp	r2, r4
 8015b38:	bf0c      	ite	eq
 8015b3a:	600b      	streq	r3, [r1, #0]
 8015b3c:	6053      	strne	r3, [r2, #4]
 8015b3e:	4630      	mov	r0, r6
 8015b40:	f003 fc58 	bl	80193f4 <__malloc_unlock>
 8015b44:	f104 000b 	add.w	r0, r4, #11
 8015b48:	1d23      	adds	r3, r4, #4
 8015b4a:	f020 0007 	bic.w	r0, r0, #7
 8015b4e:	1ac2      	subs	r2, r0, r3
 8015b50:	d0cc      	beq.n	8015aec <_malloc_r+0x20>
 8015b52:	1a1b      	subs	r3, r3, r0
 8015b54:	50a3      	str	r3, [r4, r2]
 8015b56:	e7c9      	b.n	8015aec <_malloc_r+0x20>
 8015b58:	4622      	mov	r2, r4
 8015b5a:	6864      	ldr	r4, [r4, #4]
 8015b5c:	e7cc      	b.n	8015af8 <_malloc_r+0x2c>
 8015b5e:	1cc4      	adds	r4, r0, #3
 8015b60:	f024 0403 	bic.w	r4, r4, #3
 8015b64:	42a0      	cmp	r0, r4
 8015b66:	d0e3      	beq.n	8015b30 <_malloc_r+0x64>
 8015b68:	1a21      	subs	r1, r4, r0
 8015b6a:	4630      	mov	r0, r6
 8015b6c:	f000 ff7a 	bl	8016a64 <_sbrk_r>
 8015b70:	3001      	adds	r0, #1
 8015b72:	d1dd      	bne.n	8015b30 <_malloc_r+0x64>
 8015b74:	e7cf      	b.n	8015b16 <_malloc_r+0x4a>
 8015b76:	bf00      	nop
 8015b78:	20006180 	.word	0x20006180
 8015b7c:	20006184 	.word	0x20006184

08015b80 <__cvt>:
 8015b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b84:	ec55 4b10 	vmov	r4, r5, d0
 8015b88:	2d00      	cmp	r5, #0
 8015b8a:	460e      	mov	r6, r1
 8015b8c:	4619      	mov	r1, r3
 8015b8e:	462b      	mov	r3, r5
 8015b90:	bfbb      	ittet	lt
 8015b92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015b96:	461d      	movlt	r5, r3
 8015b98:	2300      	movge	r3, #0
 8015b9a:	232d      	movlt	r3, #45	; 0x2d
 8015b9c:	700b      	strb	r3, [r1, #0]
 8015b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ba0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015ba4:	4691      	mov	r9, r2
 8015ba6:	f023 0820 	bic.w	r8, r3, #32
 8015baa:	bfbc      	itt	lt
 8015bac:	4622      	movlt	r2, r4
 8015bae:	4614      	movlt	r4, r2
 8015bb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015bb4:	d005      	beq.n	8015bc2 <__cvt+0x42>
 8015bb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015bba:	d100      	bne.n	8015bbe <__cvt+0x3e>
 8015bbc:	3601      	adds	r6, #1
 8015bbe:	2102      	movs	r1, #2
 8015bc0:	e000      	b.n	8015bc4 <__cvt+0x44>
 8015bc2:	2103      	movs	r1, #3
 8015bc4:	ab03      	add	r3, sp, #12
 8015bc6:	9301      	str	r3, [sp, #4]
 8015bc8:	ab02      	add	r3, sp, #8
 8015bca:	9300      	str	r3, [sp, #0]
 8015bcc:	ec45 4b10 	vmov	d0, r4, r5
 8015bd0:	4653      	mov	r3, sl
 8015bd2:	4632      	mov	r2, r6
 8015bd4:	f002 f94c 	bl	8017e70 <_dtoa_r>
 8015bd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015bdc:	4607      	mov	r7, r0
 8015bde:	d102      	bne.n	8015be6 <__cvt+0x66>
 8015be0:	f019 0f01 	tst.w	r9, #1
 8015be4:	d022      	beq.n	8015c2c <__cvt+0xac>
 8015be6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015bea:	eb07 0906 	add.w	r9, r7, r6
 8015bee:	d110      	bne.n	8015c12 <__cvt+0x92>
 8015bf0:	783b      	ldrb	r3, [r7, #0]
 8015bf2:	2b30      	cmp	r3, #48	; 0x30
 8015bf4:	d10a      	bne.n	8015c0c <__cvt+0x8c>
 8015bf6:	2200      	movs	r2, #0
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	4629      	mov	r1, r5
 8015bfe:	f7ea ff73 	bl	8000ae8 <__aeabi_dcmpeq>
 8015c02:	b918      	cbnz	r0, 8015c0c <__cvt+0x8c>
 8015c04:	f1c6 0601 	rsb	r6, r6, #1
 8015c08:	f8ca 6000 	str.w	r6, [sl]
 8015c0c:	f8da 3000 	ldr.w	r3, [sl]
 8015c10:	4499      	add	r9, r3
 8015c12:	2200      	movs	r2, #0
 8015c14:	2300      	movs	r3, #0
 8015c16:	4620      	mov	r0, r4
 8015c18:	4629      	mov	r1, r5
 8015c1a:	f7ea ff65 	bl	8000ae8 <__aeabi_dcmpeq>
 8015c1e:	b108      	cbz	r0, 8015c24 <__cvt+0xa4>
 8015c20:	f8cd 900c 	str.w	r9, [sp, #12]
 8015c24:	2230      	movs	r2, #48	; 0x30
 8015c26:	9b03      	ldr	r3, [sp, #12]
 8015c28:	454b      	cmp	r3, r9
 8015c2a:	d307      	bcc.n	8015c3c <__cvt+0xbc>
 8015c2c:	9b03      	ldr	r3, [sp, #12]
 8015c2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c30:	1bdb      	subs	r3, r3, r7
 8015c32:	4638      	mov	r0, r7
 8015c34:	6013      	str	r3, [r2, #0]
 8015c36:	b004      	add	sp, #16
 8015c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c3c:	1c59      	adds	r1, r3, #1
 8015c3e:	9103      	str	r1, [sp, #12]
 8015c40:	701a      	strb	r2, [r3, #0]
 8015c42:	e7f0      	b.n	8015c26 <__cvt+0xa6>

08015c44 <__exponent>:
 8015c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015c46:	4603      	mov	r3, r0
 8015c48:	2900      	cmp	r1, #0
 8015c4a:	bfb8      	it	lt
 8015c4c:	4249      	neglt	r1, r1
 8015c4e:	f803 2b02 	strb.w	r2, [r3], #2
 8015c52:	bfb4      	ite	lt
 8015c54:	222d      	movlt	r2, #45	; 0x2d
 8015c56:	222b      	movge	r2, #43	; 0x2b
 8015c58:	2909      	cmp	r1, #9
 8015c5a:	7042      	strb	r2, [r0, #1]
 8015c5c:	dd2a      	ble.n	8015cb4 <__exponent+0x70>
 8015c5e:	f10d 0407 	add.w	r4, sp, #7
 8015c62:	46a4      	mov	ip, r4
 8015c64:	270a      	movs	r7, #10
 8015c66:	46a6      	mov	lr, r4
 8015c68:	460a      	mov	r2, r1
 8015c6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8015c6e:	fb07 1516 	mls	r5, r7, r6, r1
 8015c72:	3530      	adds	r5, #48	; 0x30
 8015c74:	2a63      	cmp	r2, #99	; 0x63
 8015c76:	f104 34ff 	add.w	r4, r4, #4294967295
 8015c7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015c7e:	4631      	mov	r1, r6
 8015c80:	dcf1      	bgt.n	8015c66 <__exponent+0x22>
 8015c82:	3130      	adds	r1, #48	; 0x30
 8015c84:	f1ae 0502 	sub.w	r5, lr, #2
 8015c88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015c8c:	1c44      	adds	r4, r0, #1
 8015c8e:	4629      	mov	r1, r5
 8015c90:	4561      	cmp	r1, ip
 8015c92:	d30a      	bcc.n	8015caa <__exponent+0x66>
 8015c94:	f10d 0209 	add.w	r2, sp, #9
 8015c98:	eba2 020e 	sub.w	r2, r2, lr
 8015c9c:	4565      	cmp	r5, ip
 8015c9e:	bf88      	it	hi
 8015ca0:	2200      	movhi	r2, #0
 8015ca2:	4413      	add	r3, r2
 8015ca4:	1a18      	subs	r0, r3, r0
 8015ca6:	b003      	add	sp, #12
 8015ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015caa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015cae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015cb2:	e7ed      	b.n	8015c90 <__exponent+0x4c>
 8015cb4:	2330      	movs	r3, #48	; 0x30
 8015cb6:	3130      	adds	r1, #48	; 0x30
 8015cb8:	7083      	strb	r3, [r0, #2]
 8015cba:	70c1      	strb	r1, [r0, #3]
 8015cbc:	1d03      	adds	r3, r0, #4
 8015cbe:	e7f1      	b.n	8015ca4 <__exponent+0x60>

08015cc0 <_printf_float>:
 8015cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cc4:	ed2d 8b02 	vpush	{d8}
 8015cc8:	b08d      	sub	sp, #52	; 0x34
 8015cca:	460c      	mov	r4, r1
 8015ccc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015cd0:	4616      	mov	r6, r2
 8015cd2:	461f      	mov	r7, r3
 8015cd4:	4605      	mov	r5, r0
 8015cd6:	f003 fafb 	bl	80192d0 <_localeconv_r>
 8015cda:	f8d0 a000 	ldr.w	sl, [r0]
 8015cde:	4650      	mov	r0, sl
 8015ce0:	f7ea fa86 	bl	80001f0 <strlen>
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8015ce8:	6823      	ldr	r3, [r4, #0]
 8015cea:	9305      	str	r3, [sp, #20]
 8015cec:	f8d8 3000 	ldr.w	r3, [r8]
 8015cf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015cf4:	3307      	adds	r3, #7
 8015cf6:	f023 0307 	bic.w	r3, r3, #7
 8015cfa:	f103 0208 	add.w	r2, r3, #8
 8015cfe:	f8c8 2000 	str.w	r2, [r8]
 8015d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015d0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015d0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015d12:	9307      	str	r3, [sp, #28]
 8015d14:	f8cd 8018 	str.w	r8, [sp, #24]
 8015d18:	ee08 0a10 	vmov	s16, r0
 8015d1c:	4b9f      	ldr	r3, [pc, #636]	; (8015f9c <_printf_float+0x2dc>)
 8015d1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015d22:	f04f 32ff 	mov.w	r2, #4294967295
 8015d26:	f7ea ff11 	bl	8000b4c <__aeabi_dcmpun>
 8015d2a:	bb88      	cbnz	r0, 8015d90 <_printf_float+0xd0>
 8015d2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015d30:	4b9a      	ldr	r3, [pc, #616]	; (8015f9c <_printf_float+0x2dc>)
 8015d32:	f04f 32ff 	mov.w	r2, #4294967295
 8015d36:	f7ea feeb 	bl	8000b10 <__aeabi_dcmple>
 8015d3a:	bb48      	cbnz	r0, 8015d90 <_printf_float+0xd0>
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	2300      	movs	r3, #0
 8015d40:	4640      	mov	r0, r8
 8015d42:	4649      	mov	r1, r9
 8015d44:	f7ea feda 	bl	8000afc <__aeabi_dcmplt>
 8015d48:	b110      	cbz	r0, 8015d50 <_printf_float+0x90>
 8015d4a:	232d      	movs	r3, #45	; 0x2d
 8015d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d50:	4b93      	ldr	r3, [pc, #588]	; (8015fa0 <_printf_float+0x2e0>)
 8015d52:	4894      	ldr	r0, [pc, #592]	; (8015fa4 <_printf_float+0x2e4>)
 8015d54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015d58:	bf94      	ite	ls
 8015d5a:	4698      	movls	r8, r3
 8015d5c:	4680      	movhi	r8, r0
 8015d5e:	2303      	movs	r3, #3
 8015d60:	6123      	str	r3, [r4, #16]
 8015d62:	9b05      	ldr	r3, [sp, #20]
 8015d64:	f023 0204 	bic.w	r2, r3, #4
 8015d68:	6022      	str	r2, [r4, #0]
 8015d6a:	f04f 0900 	mov.w	r9, #0
 8015d6e:	9700      	str	r7, [sp, #0]
 8015d70:	4633      	mov	r3, r6
 8015d72:	aa0b      	add	r2, sp, #44	; 0x2c
 8015d74:	4621      	mov	r1, r4
 8015d76:	4628      	mov	r0, r5
 8015d78:	f000 f9d8 	bl	801612c <_printf_common>
 8015d7c:	3001      	adds	r0, #1
 8015d7e:	f040 8090 	bne.w	8015ea2 <_printf_float+0x1e2>
 8015d82:	f04f 30ff 	mov.w	r0, #4294967295
 8015d86:	b00d      	add	sp, #52	; 0x34
 8015d88:	ecbd 8b02 	vpop	{d8}
 8015d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d90:	4642      	mov	r2, r8
 8015d92:	464b      	mov	r3, r9
 8015d94:	4640      	mov	r0, r8
 8015d96:	4649      	mov	r1, r9
 8015d98:	f7ea fed8 	bl	8000b4c <__aeabi_dcmpun>
 8015d9c:	b140      	cbz	r0, 8015db0 <_printf_float+0xf0>
 8015d9e:	464b      	mov	r3, r9
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	bfbc      	itt	lt
 8015da4:	232d      	movlt	r3, #45	; 0x2d
 8015da6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015daa:	487f      	ldr	r0, [pc, #508]	; (8015fa8 <_printf_float+0x2e8>)
 8015dac:	4b7f      	ldr	r3, [pc, #508]	; (8015fac <_printf_float+0x2ec>)
 8015dae:	e7d1      	b.n	8015d54 <_printf_float+0x94>
 8015db0:	6863      	ldr	r3, [r4, #4]
 8015db2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015db6:	9206      	str	r2, [sp, #24]
 8015db8:	1c5a      	adds	r2, r3, #1
 8015dba:	d13f      	bne.n	8015e3c <_printf_float+0x17c>
 8015dbc:	2306      	movs	r3, #6
 8015dbe:	6063      	str	r3, [r4, #4]
 8015dc0:	9b05      	ldr	r3, [sp, #20]
 8015dc2:	6861      	ldr	r1, [r4, #4]
 8015dc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015dc8:	2300      	movs	r3, #0
 8015dca:	9303      	str	r3, [sp, #12]
 8015dcc:	ab0a      	add	r3, sp, #40	; 0x28
 8015dce:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015dd2:	ab09      	add	r3, sp, #36	; 0x24
 8015dd4:	ec49 8b10 	vmov	d0, r8, r9
 8015dd8:	9300      	str	r3, [sp, #0]
 8015dda:	6022      	str	r2, [r4, #0]
 8015ddc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015de0:	4628      	mov	r0, r5
 8015de2:	f7ff fecd 	bl	8015b80 <__cvt>
 8015de6:	9b06      	ldr	r3, [sp, #24]
 8015de8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015dea:	2b47      	cmp	r3, #71	; 0x47
 8015dec:	4680      	mov	r8, r0
 8015dee:	d108      	bne.n	8015e02 <_printf_float+0x142>
 8015df0:	1cc8      	adds	r0, r1, #3
 8015df2:	db02      	blt.n	8015dfa <_printf_float+0x13a>
 8015df4:	6863      	ldr	r3, [r4, #4]
 8015df6:	4299      	cmp	r1, r3
 8015df8:	dd41      	ble.n	8015e7e <_printf_float+0x1be>
 8015dfa:	f1ab 0b02 	sub.w	fp, fp, #2
 8015dfe:	fa5f fb8b 	uxtb.w	fp, fp
 8015e02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015e06:	d820      	bhi.n	8015e4a <_printf_float+0x18a>
 8015e08:	3901      	subs	r1, #1
 8015e0a:	465a      	mov	r2, fp
 8015e0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015e10:	9109      	str	r1, [sp, #36]	; 0x24
 8015e12:	f7ff ff17 	bl	8015c44 <__exponent>
 8015e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e18:	1813      	adds	r3, r2, r0
 8015e1a:	2a01      	cmp	r2, #1
 8015e1c:	4681      	mov	r9, r0
 8015e1e:	6123      	str	r3, [r4, #16]
 8015e20:	dc02      	bgt.n	8015e28 <_printf_float+0x168>
 8015e22:	6822      	ldr	r2, [r4, #0]
 8015e24:	07d2      	lsls	r2, r2, #31
 8015e26:	d501      	bpl.n	8015e2c <_printf_float+0x16c>
 8015e28:	3301      	adds	r3, #1
 8015e2a:	6123      	str	r3, [r4, #16]
 8015e2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d09c      	beq.n	8015d6e <_printf_float+0xae>
 8015e34:	232d      	movs	r3, #45	; 0x2d
 8015e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e3a:	e798      	b.n	8015d6e <_printf_float+0xae>
 8015e3c:	9a06      	ldr	r2, [sp, #24]
 8015e3e:	2a47      	cmp	r2, #71	; 0x47
 8015e40:	d1be      	bne.n	8015dc0 <_printf_float+0x100>
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d1bc      	bne.n	8015dc0 <_printf_float+0x100>
 8015e46:	2301      	movs	r3, #1
 8015e48:	e7b9      	b.n	8015dbe <_printf_float+0xfe>
 8015e4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015e4e:	d118      	bne.n	8015e82 <_printf_float+0x1c2>
 8015e50:	2900      	cmp	r1, #0
 8015e52:	6863      	ldr	r3, [r4, #4]
 8015e54:	dd0b      	ble.n	8015e6e <_printf_float+0x1ae>
 8015e56:	6121      	str	r1, [r4, #16]
 8015e58:	b913      	cbnz	r3, 8015e60 <_printf_float+0x1a0>
 8015e5a:	6822      	ldr	r2, [r4, #0]
 8015e5c:	07d0      	lsls	r0, r2, #31
 8015e5e:	d502      	bpl.n	8015e66 <_printf_float+0x1a6>
 8015e60:	3301      	adds	r3, #1
 8015e62:	440b      	add	r3, r1
 8015e64:	6123      	str	r3, [r4, #16]
 8015e66:	65a1      	str	r1, [r4, #88]	; 0x58
 8015e68:	f04f 0900 	mov.w	r9, #0
 8015e6c:	e7de      	b.n	8015e2c <_printf_float+0x16c>
 8015e6e:	b913      	cbnz	r3, 8015e76 <_printf_float+0x1b6>
 8015e70:	6822      	ldr	r2, [r4, #0]
 8015e72:	07d2      	lsls	r2, r2, #31
 8015e74:	d501      	bpl.n	8015e7a <_printf_float+0x1ba>
 8015e76:	3302      	adds	r3, #2
 8015e78:	e7f4      	b.n	8015e64 <_printf_float+0x1a4>
 8015e7a:	2301      	movs	r3, #1
 8015e7c:	e7f2      	b.n	8015e64 <_printf_float+0x1a4>
 8015e7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e84:	4299      	cmp	r1, r3
 8015e86:	db05      	blt.n	8015e94 <_printf_float+0x1d4>
 8015e88:	6823      	ldr	r3, [r4, #0]
 8015e8a:	6121      	str	r1, [r4, #16]
 8015e8c:	07d8      	lsls	r0, r3, #31
 8015e8e:	d5ea      	bpl.n	8015e66 <_printf_float+0x1a6>
 8015e90:	1c4b      	adds	r3, r1, #1
 8015e92:	e7e7      	b.n	8015e64 <_printf_float+0x1a4>
 8015e94:	2900      	cmp	r1, #0
 8015e96:	bfd4      	ite	le
 8015e98:	f1c1 0202 	rsble	r2, r1, #2
 8015e9c:	2201      	movgt	r2, #1
 8015e9e:	4413      	add	r3, r2
 8015ea0:	e7e0      	b.n	8015e64 <_printf_float+0x1a4>
 8015ea2:	6823      	ldr	r3, [r4, #0]
 8015ea4:	055a      	lsls	r2, r3, #21
 8015ea6:	d407      	bmi.n	8015eb8 <_printf_float+0x1f8>
 8015ea8:	6923      	ldr	r3, [r4, #16]
 8015eaa:	4642      	mov	r2, r8
 8015eac:	4631      	mov	r1, r6
 8015eae:	4628      	mov	r0, r5
 8015eb0:	47b8      	blx	r7
 8015eb2:	3001      	adds	r0, #1
 8015eb4:	d12c      	bne.n	8015f10 <_printf_float+0x250>
 8015eb6:	e764      	b.n	8015d82 <_printf_float+0xc2>
 8015eb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015ebc:	f240 80e0 	bls.w	8016080 <_printf_float+0x3c0>
 8015ec0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	f7ea fe0e 	bl	8000ae8 <__aeabi_dcmpeq>
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	d034      	beq.n	8015f3a <_printf_float+0x27a>
 8015ed0:	4a37      	ldr	r2, [pc, #220]	; (8015fb0 <_printf_float+0x2f0>)
 8015ed2:	2301      	movs	r3, #1
 8015ed4:	4631      	mov	r1, r6
 8015ed6:	4628      	mov	r0, r5
 8015ed8:	47b8      	blx	r7
 8015eda:	3001      	adds	r0, #1
 8015edc:	f43f af51 	beq.w	8015d82 <_printf_float+0xc2>
 8015ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	db02      	blt.n	8015eee <_printf_float+0x22e>
 8015ee8:	6823      	ldr	r3, [r4, #0]
 8015eea:	07d8      	lsls	r0, r3, #31
 8015eec:	d510      	bpl.n	8015f10 <_printf_float+0x250>
 8015eee:	ee18 3a10 	vmov	r3, s16
 8015ef2:	4652      	mov	r2, sl
 8015ef4:	4631      	mov	r1, r6
 8015ef6:	4628      	mov	r0, r5
 8015ef8:	47b8      	blx	r7
 8015efa:	3001      	adds	r0, #1
 8015efc:	f43f af41 	beq.w	8015d82 <_printf_float+0xc2>
 8015f00:	f04f 0800 	mov.w	r8, #0
 8015f04:	f104 091a 	add.w	r9, r4, #26
 8015f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f0a:	3b01      	subs	r3, #1
 8015f0c:	4543      	cmp	r3, r8
 8015f0e:	dc09      	bgt.n	8015f24 <_printf_float+0x264>
 8015f10:	6823      	ldr	r3, [r4, #0]
 8015f12:	079b      	lsls	r3, r3, #30
 8015f14:	f100 8105 	bmi.w	8016122 <_printf_float+0x462>
 8015f18:	68e0      	ldr	r0, [r4, #12]
 8015f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f1c:	4298      	cmp	r0, r3
 8015f1e:	bfb8      	it	lt
 8015f20:	4618      	movlt	r0, r3
 8015f22:	e730      	b.n	8015d86 <_printf_float+0xc6>
 8015f24:	2301      	movs	r3, #1
 8015f26:	464a      	mov	r2, r9
 8015f28:	4631      	mov	r1, r6
 8015f2a:	4628      	mov	r0, r5
 8015f2c:	47b8      	blx	r7
 8015f2e:	3001      	adds	r0, #1
 8015f30:	f43f af27 	beq.w	8015d82 <_printf_float+0xc2>
 8015f34:	f108 0801 	add.w	r8, r8, #1
 8015f38:	e7e6      	b.n	8015f08 <_printf_float+0x248>
 8015f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	dc39      	bgt.n	8015fb4 <_printf_float+0x2f4>
 8015f40:	4a1b      	ldr	r2, [pc, #108]	; (8015fb0 <_printf_float+0x2f0>)
 8015f42:	2301      	movs	r3, #1
 8015f44:	4631      	mov	r1, r6
 8015f46:	4628      	mov	r0, r5
 8015f48:	47b8      	blx	r7
 8015f4a:	3001      	adds	r0, #1
 8015f4c:	f43f af19 	beq.w	8015d82 <_printf_float+0xc2>
 8015f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015f54:	4313      	orrs	r3, r2
 8015f56:	d102      	bne.n	8015f5e <_printf_float+0x29e>
 8015f58:	6823      	ldr	r3, [r4, #0]
 8015f5a:	07d9      	lsls	r1, r3, #31
 8015f5c:	d5d8      	bpl.n	8015f10 <_printf_float+0x250>
 8015f5e:	ee18 3a10 	vmov	r3, s16
 8015f62:	4652      	mov	r2, sl
 8015f64:	4631      	mov	r1, r6
 8015f66:	4628      	mov	r0, r5
 8015f68:	47b8      	blx	r7
 8015f6a:	3001      	adds	r0, #1
 8015f6c:	f43f af09 	beq.w	8015d82 <_printf_float+0xc2>
 8015f70:	f04f 0900 	mov.w	r9, #0
 8015f74:	f104 0a1a 	add.w	sl, r4, #26
 8015f78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f7a:	425b      	negs	r3, r3
 8015f7c:	454b      	cmp	r3, r9
 8015f7e:	dc01      	bgt.n	8015f84 <_printf_float+0x2c4>
 8015f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f82:	e792      	b.n	8015eaa <_printf_float+0x1ea>
 8015f84:	2301      	movs	r3, #1
 8015f86:	4652      	mov	r2, sl
 8015f88:	4631      	mov	r1, r6
 8015f8a:	4628      	mov	r0, r5
 8015f8c:	47b8      	blx	r7
 8015f8e:	3001      	adds	r0, #1
 8015f90:	f43f aef7 	beq.w	8015d82 <_printf_float+0xc2>
 8015f94:	f109 0901 	add.w	r9, r9, #1
 8015f98:	e7ee      	b.n	8015f78 <_printf_float+0x2b8>
 8015f9a:	bf00      	nop
 8015f9c:	7fefffff 	.word	0x7fefffff
 8015fa0:	0801c040 	.word	0x0801c040
 8015fa4:	0801c044 	.word	0x0801c044
 8015fa8:	0801c04c 	.word	0x0801c04c
 8015fac:	0801c048 	.word	0x0801c048
 8015fb0:	0801c389 	.word	0x0801c389
 8015fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015fb8:	429a      	cmp	r2, r3
 8015fba:	bfa8      	it	ge
 8015fbc:	461a      	movge	r2, r3
 8015fbe:	2a00      	cmp	r2, #0
 8015fc0:	4691      	mov	r9, r2
 8015fc2:	dc37      	bgt.n	8016034 <_printf_float+0x374>
 8015fc4:	f04f 0b00 	mov.w	fp, #0
 8015fc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015fcc:	f104 021a 	add.w	r2, r4, #26
 8015fd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015fd2:	9305      	str	r3, [sp, #20]
 8015fd4:	eba3 0309 	sub.w	r3, r3, r9
 8015fd8:	455b      	cmp	r3, fp
 8015fda:	dc33      	bgt.n	8016044 <_printf_float+0x384>
 8015fdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015fe0:	429a      	cmp	r2, r3
 8015fe2:	db3b      	blt.n	801605c <_printf_float+0x39c>
 8015fe4:	6823      	ldr	r3, [r4, #0]
 8015fe6:	07da      	lsls	r2, r3, #31
 8015fe8:	d438      	bmi.n	801605c <_printf_float+0x39c>
 8015fea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fec:	9b05      	ldr	r3, [sp, #20]
 8015fee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ff0:	1ad3      	subs	r3, r2, r3
 8015ff2:	eba2 0901 	sub.w	r9, r2, r1
 8015ff6:	4599      	cmp	r9, r3
 8015ff8:	bfa8      	it	ge
 8015ffa:	4699      	movge	r9, r3
 8015ffc:	f1b9 0f00 	cmp.w	r9, #0
 8016000:	dc35      	bgt.n	801606e <_printf_float+0x3ae>
 8016002:	f04f 0800 	mov.w	r8, #0
 8016006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801600a:	f104 0a1a 	add.w	sl, r4, #26
 801600e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016012:	1a9b      	subs	r3, r3, r2
 8016014:	eba3 0309 	sub.w	r3, r3, r9
 8016018:	4543      	cmp	r3, r8
 801601a:	f77f af79 	ble.w	8015f10 <_printf_float+0x250>
 801601e:	2301      	movs	r3, #1
 8016020:	4652      	mov	r2, sl
 8016022:	4631      	mov	r1, r6
 8016024:	4628      	mov	r0, r5
 8016026:	47b8      	blx	r7
 8016028:	3001      	adds	r0, #1
 801602a:	f43f aeaa 	beq.w	8015d82 <_printf_float+0xc2>
 801602e:	f108 0801 	add.w	r8, r8, #1
 8016032:	e7ec      	b.n	801600e <_printf_float+0x34e>
 8016034:	4613      	mov	r3, r2
 8016036:	4631      	mov	r1, r6
 8016038:	4642      	mov	r2, r8
 801603a:	4628      	mov	r0, r5
 801603c:	47b8      	blx	r7
 801603e:	3001      	adds	r0, #1
 8016040:	d1c0      	bne.n	8015fc4 <_printf_float+0x304>
 8016042:	e69e      	b.n	8015d82 <_printf_float+0xc2>
 8016044:	2301      	movs	r3, #1
 8016046:	4631      	mov	r1, r6
 8016048:	4628      	mov	r0, r5
 801604a:	9205      	str	r2, [sp, #20]
 801604c:	47b8      	blx	r7
 801604e:	3001      	adds	r0, #1
 8016050:	f43f ae97 	beq.w	8015d82 <_printf_float+0xc2>
 8016054:	9a05      	ldr	r2, [sp, #20]
 8016056:	f10b 0b01 	add.w	fp, fp, #1
 801605a:	e7b9      	b.n	8015fd0 <_printf_float+0x310>
 801605c:	ee18 3a10 	vmov	r3, s16
 8016060:	4652      	mov	r2, sl
 8016062:	4631      	mov	r1, r6
 8016064:	4628      	mov	r0, r5
 8016066:	47b8      	blx	r7
 8016068:	3001      	adds	r0, #1
 801606a:	d1be      	bne.n	8015fea <_printf_float+0x32a>
 801606c:	e689      	b.n	8015d82 <_printf_float+0xc2>
 801606e:	9a05      	ldr	r2, [sp, #20]
 8016070:	464b      	mov	r3, r9
 8016072:	4442      	add	r2, r8
 8016074:	4631      	mov	r1, r6
 8016076:	4628      	mov	r0, r5
 8016078:	47b8      	blx	r7
 801607a:	3001      	adds	r0, #1
 801607c:	d1c1      	bne.n	8016002 <_printf_float+0x342>
 801607e:	e680      	b.n	8015d82 <_printf_float+0xc2>
 8016080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016082:	2a01      	cmp	r2, #1
 8016084:	dc01      	bgt.n	801608a <_printf_float+0x3ca>
 8016086:	07db      	lsls	r3, r3, #31
 8016088:	d538      	bpl.n	80160fc <_printf_float+0x43c>
 801608a:	2301      	movs	r3, #1
 801608c:	4642      	mov	r2, r8
 801608e:	4631      	mov	r1, r6
 8016090:	4628      	mov	r0, r5
 8016092:	47b8      	blx	r7
 8016094:	3001      	adds	r0, #1
 8016096:	f43f ae74 	beq.w	8015d82 <_printf_float+0xc2>
 801609a:	ee18 3a10 	vmov	r3, s16
 801609e:	4652      	mov	r2, sl
 80160a0:	4631      	mov	r1, r6
 80160a2:	4628      	mov	r0, r5
 80160a4:	47b8      	blx	r7
 80160a6:	3001      	adds	r0, #1
 80160a8:	f43f ae6b 	beq.w	8015d82 <_printf_float+0xc2>
 80160ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80160b0:	2200      	movs	r2, #0
 80160b2:	2300      	movs	r3, #0
 80160b4:	f7ea fd18 	bl	8000ae8 <__aeabi_dcmpeq>
 80160b8:	b9d8      	cbnz	r0, 80160f2 <_printf_float+0x432>
 80160ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160bc:	f108 0201 	add.w	r2, r8, #1
 80160c0:	3b01      	subs	r3, #1
 80160c2:	4631      	mov	r1, r6
 80160c4:	4628      	mov	r0, r5
 80160c6:	47b8      	blx	r7
 80160c8:	3001      	adds	r0, #1
 80160ca:	d10e      	bne.n	80160ea <_printf_float+0x42a>
 80160cc:	e659      	b.n	8015d82 <_printf_float+0xc2>
 80160ce:	2301      	movs	r3, #1
 80160d0:	4652      	mov	r2, sl
 80160d2:	4631      	mov	r1, r6
 80160d4:	4628      	mov	r0, r5
 80160d6:	47b8      	blx	r7
 80160d8:	3001      	adds	r0, #1
 80160da:	f43f ae52 	beq.w	8015d82 <_printf_float+0xc2>
 80160de:	f108 0801 	add.w	r8, r8, #1
 80160e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160e4:	3b01      	subs	r3, #1
 80160e6:	4543      	cmp	r3, r8
 80160e8:	dcf1      	bgt.n	80160ce <_printf_float+0x40e>
 80160ea:	464b      	mov	r3, r9
 80160ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80160f0:	e6dc      	b.n	8015eac <_printf_float+0x1ec>
 80160f2:	f04f 0800 	mov.w	r8, #0
 80160f6:	f104 0a1a 	add.w	sl, r4, #26
 80160fa:	e7f2      	b.n	80160e2 <_printf_float+0x422>
 80160fc:	2301      	movs	r3, #1
 80160fe:	4642      	mov	r2, r8
 8016100:	e7df      	b.n	80160c2 <_printf_float+0x402>
 8016102:	2301      	movs	r3, #1
 8016104:	464a      	mov	r2, r9
 8016106:	4631      	mov	r1, r6
 8016108:	4628      	mov	r0, r5
 801610a:	47b8      	blx	r7
 801610c:	3001      	adds	r0, #1
 801610e:	f43f ae38 	beq.w	8015d82 <_printf_float+0xc2>
 8016112:	f108 0801 	add.w	r8, r8, #1
 8016116:	68e3      	ldr	r3, [r4, #12]
 8016118:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801611a:	1a5b      	subs	r3, r3, r1
 801611c:	4543      	cmp	r3, r8
 801611e:	dcf0      	bgt.n	8016102 <_printf_float+0x442>
 8016120:	e6fa      	b.n	8015f18 <_printf_float+0x258>
 8016122:	f04f 0800 	mov.w	r8, #0
 8016126:	f104 0919 	add.w	r9, r4, #25
 801612a:	e7f4      	b.n	8016116 <_printf_float+0x456>

0801612c <_printf_common>:
 801612c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016130:	4616      	mov	r6, r2
 8016132:	4699      	mov	r9, r3
 8016134:	688a      	ldr	r2, [r1, #8]
 8016136:	690b      	ldr	r3, [r1, #16]
 8016138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801613c:	4293      	cmp	r3, r2
 801613e:	bfb8      	it	lt
 8016140:	4613      	movlt	r3, r2
 8016142:	6033      	str	r3, [r6, #0]
 8016144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016148:	4607      	mov	r7, r0
 801614a:	460c      	mov	r4, r1
 801614c:	b10a      	cbz	r2, 8016152 <_printf_common+0x26>
 801614e:	3301      	adds	r3, #1
 8016150:	6033      	str	r3, [r6, #0]
 8016152:	6823      	ldr	r3, [r4, #0]
 8016154:	0699      	lsls	r1, r3, #26
 8016156:	bf42      	ittt	mi
 8016158:	6833      	ldrmi	r3, [r6, #0]
 801615a:	3302      	addmi	r3, #2
 801615c:	6033      	strmi	r3, [r6, #0]
 801615e:	6825      	ldr	r5, [r4, #0]
 8016160:	f015 0506 	ands.w	r5, r5, #6
 8016164:	d106      	bne.n	8016174 <_printf_common+0x48>
 8016166:	f104 0a19 	add.w	sl, r4, #25
 801616a:	68e3      	ldr	r3, [r4, #12]
 801616c:	6832      	ldr	r2, [r6, #0]
 801616e:	1a9b      	subs	r3, r3, r2
 8016170:	42ab      	cmp	r3, r5
 8016172:	dc26      	bgt.n	80161c2 <_printf_common+0x96>
 8016174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016178:	1e13      	subs	r3, r2, #0
 801617a:	6822      	ldr	r2, [r4, #0]
 801617c:	bf18      	it	ne
 801617e:	2301      	movne	r3, #1
 8016180:	0692      	lsls	r2, r2, #26
 8016182:	d42b      	bmi.n	80161dc <_printf_common+0xb0>
 8016184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016188:	4649      	mov	r1, r9
 801618a:	4638      	mov	r0, r7
 801618c:	47c0      	blx	r8
 801618e:	3001      	adds	r0, #1
 8016190:	d01e      	beq.n	80161d0 <_printf_common+0xa4>
 8016192:	6823      	ldr	r3, [r4, #0]
 8016194:	68e5      	ldr	r5, [r4, #12]
 8016196:	6832      	ldr	r2, [r6, #0]
 8016198:	f003 0306 	and.w	r3, r3, #6
 801619c:	2b04      	cmp	r3, #4
 801619e:	bf08      	it	eq
 80161a0:	1aad      	subeq	r5, r5, r2
 80161a2:	68a3      	ldr	r3, [r4, #8]
 80161a4:	6922      	ldr	r2, [r4, #16]
 80161a6:	bf0c      	ite	eq
 80161a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80161ac:	2500      	movne	r5, #0
 80161ae:	4293      	cmp	r3, r2
 80161b0:	bfc4      	itt	gt
 80161b2:	1a9b      	subgt	r3, r3, r2
 80161b4:	18ed      	addgt	r5, r5, r3
 80161b6:	2600      	movs	r6, #0
 80161b8:	341a      	adds	r4, #26
 80161ba:	42b5      	cmp	r5, r6
 80161bc:	d11a      	bne.n	80161f4 <_printf_common+0xc8>
 80161be:	2000      	movs	r0, #0
 80161c0:	e008      	b.n	80161d4 <_printf_common+0xa8>
 80161c2:	2301      	movs	r3, #1
 80161c4:	4652      	mov	r2, sl
 80161c6:	4649      	mov	r1, r9
 80161c8:	4638      	mov	r0, r7
 80161ca:	47c0      	blx	r8
 80161cc:	3001      	adds	r0, #1
 80161ce:	d103      	bne.n	80161d8 <_printf_common+0xac>
 80161d0:	f04f 30ff 	mov.w	r0, #4294967295
 80161d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161d8:	3501      	adds	r5, #1
 80161da:	e7c6      	b.n	801616a <_printf_common+0x3e>
 80161dc:	18e1      	adds	r1, r4, r3
 80161de:	1c5a      	adds	r2, r3, #1
 80161e0:	2030      	movs	r0, #48	; 0x30
 80161e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80161e6:	4422      	add	r2, r4
 80161e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80161ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80161f0:	3302      	adds	r3, #2
 80161f2:	e7c7      	b.n	8016184 <_printf_common+0x58>
 80161f4:	2301      	movs	r3, #1
 80161f6:	4622      	mov	r2, r4
 80161f8:	4649      	mov	r1, r9
 80161fa:	4638      	mov	r0, r7
 80161fc:	47c0      	blx	r8
 80161fe:	3001      	adds	r0, #1
 8016200:	d0e6      	beq.n	80161d0 <_printf_common+0xa4>
 8016202:	3601      	adds	r6, #1
 8016204:	e7d9      	b.n	80161ba <_printf_common+0x8e>
	...

08016208 <_printf_i>:
 8016208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801620c:	460c      	mov	r4, r1
 801620e:	4691      	mov	r9, r2
 8016210:	7e27      	ldrb	r7, [r4, #24]
 8016212:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016214:	2f78      	cmp	r7, #120	; 0x78
 8016216:	4680      	mov	r8, r0
 8016218:	469a      	mov	sl, r3
 801621a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801621e:	d807      	bhi.n	8016230 <_printf_i+0x28>
 8016220:	2f62      	cmp	r7, #98	; 0x62
 8016222:	d80a      	bhi.n	801623a <_printf_i+0x32>
 8016224:	2f00      	cmp	r7, #0
 8016226:	f000 80d8 	beq.w	80163da <_printf_i+0x1d2>
 801622a:	2f58      	cmp	r7, #88	; 0x58
 801622c:	f000 80a3 	beq.w	8016376 <_printf_i+0x16e>
 8016230:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016238:	e03a      	b.n	80162b0 <_printf_i+0xa8>
 801623a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801623e:	2b15      	cmp	r3, #21
 8016240:	d8f6      	bhi.n	8016230 <_printf_i+0x28>
 8016242:	a001      	add	r0, pc, #4	; (adr r0, 8016248 <_printf_i+0x40>)
 8016244:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016248:	080162a1 	.word	0x080162a1
 801624c:	080162b5 	.word	0x080162b5
 8016250:	08016231 	.word	0x08016231
 8016254:	08016231 	.word	0x08016231
 8016258:	08016231 	.word	0x08016231
 801625c:	08016231 	.word	0x08016231
 8016260:	080162b5 	.word	0x080162b5
 8016264:	08016231 	.word	0x08016231
 8016268:	08016231 	.word	0x08016231
 801626c:	08016231 	.word	0x08016231
 8016270:	08016231 	.word	0x08016231
 8016274:	080163c1 	.word	0x080163c1
 8016278:	080162e5 	.word	0x080162e5
 801627c:	080163a3 	.word	0x080163a3
 8016280:	08016231 	.word	0x08016231
 8016284:	08016231 	.word	0x08016231
 8016288:	080163e3 	.word	0x080163e3
 801628c:	08016231 	.word	0x08016231
 8016290:	080162e5 	.word	0x080162e5
 8016294:	08016231 	.word	0x08016231
 8016298:	08016231 	.word	0x08016231
 801629c:	080163ab 	.word	0x080163ab
 80162a0:	680b      	ldr	r3, [r1, #0]
 80162a2:	1d1a      	adds	r2, r3, #4
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	600a      	str	r2, [r1, #0]
 80162a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80162ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80162b0:	2301      	movs	r3, #1
 80162b2:	e0a3      	b.n	80163fc <_printf_i+0x1f4>
 80162b4:	6825      	ldr	r5, [r4, #0]
 80162b6:	6808      	ldr	r0, [r1, #0]
 80162b8:	062e      	lsls	r6, r5, #24
 80162ba:	f100 0304 	add.w	r3, r0, #4
 80162be:	d50a      	bpl.n	80162d6 <_printf_i+0xce>
 80162c0:	6805      	ldr	r5, [r0, #0]
 80162c2:	600b      	str	r3, [r1, #0]
 80162c4:	2d00      	cmp	r5, #0
 80162c6:	da03      	bge.n	80162d0 <_printf_i+0xc8>
 80162c8:	232d      	movs	r3, #45	; 0x2d
 80162ca:	426d      	negs	r5, r5
 80162cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162d0:	485e      	ldr	r0, [pc, #376]	; (801644c <_printf_i+0x244>)
 80162d2:	230a      	movs	r3, #10
 80162d4:	e019      	b.n	801630a <_printf_i+0x102>
 80162d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80162da:	6805      	ldr	r5, [r0, #0]
 80162dc:	600b      	str	r3, [r1, #0]
 80162de:	bf18      	it	ne
 80162e0:	b22d      	sxthne	r5, r5
 80162e2:	e7ef      	b.n	80162c4 <_printf_i+0xbc>
 80162e4:	680b      	ldr	r3, [r1, #0]
 80162e6:	6825      	ldr	r5, [r4, #0]
 80162e8:	1d18      	adds	r0, r3, #4
 80162ea:	6008      	str	r0, [r1, #0]
 80162ec:	0628      	lsls	r0, r5, #24
 80162ee:	d501      	bpl.n	80162f4 <_printf_i+0xec>
 80162f0:	681d      	ldr	r5, [r3, #0]
 80162f2:	e002      	b.n	80162fa <_printf_i+0xf2>
 80162f4:	0669      	lsls	r1, r5, #25
 80162f6:	d5fb      	bpl.n	80162f0 <_printf_i+0xe8>
 80162f8:	881d      	ldrh	r5, [r3, #0]
 80162fa:	4854      	ldr	r0, [pc, #336]	; (801644c <_printf_i+0x244>)
 80162fc:	2f6f      	cmp	r7, #111	; 0x6f
 80162fe:	bf0c      	ite	eq
 8016300:	2308      	moveq	r3, #8
 8016302:	230a      	movne	r3, #10
 8016304:	2100      	movs	r1, #0
 8016306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801630a:	6866      	ldr	r6, [r4, #4]
 801630c:	60a6      	str	r6, [r4, #8]
 801630e:	2e00      	cmp	r6, #0
 8016310:	bfa2      	ittt	ge
 8016312:	6821      	ldrge	r1, [r4, #0]
 8016314:	f021 0104 	bicge.w	r1, r1, #4
 8016318:	6021      	strge	r1, [r4, #0]
 801631a:	b90d      	cbnz	r5, 8016320 <_printf_i+0x118>
 801631c:	2e00      	cmp	r6, #0
 801631e:	d04d      	beq.n	80163bc <_printf_i+0x1b4>
 8016320:	4616      	mov	r6, r2
 8016322:	fbb5 f1f3 	udiv	r1, r5, r3
 8016326:	fb03 5711 	mls	r7, r3, r1, r5
 801632a:	5dc7      	ldrb	r7, [r0, r7]
 801632c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016330:	462f      	mov	r7, r5
 8016332:	42bb      	cmp	r3, r7
 8016334:	460d      	mov	r5, r1
 8016336:	d9f4      	bls.n	8016322 <_printf_i+0x11a>
 8016338:	2b08      	cmp	r3, #8
 801633a:	d10b      	bne.n	8016354 <_printf_i+0x14c>
 801633c:	6823      	ldr	r3, [r4, #0]
 801633e:	07df      	lsls	r7, r3, #31
 8016340:	d508      	bpl.n	8016354 <_printf_i+0x14c>
 8016342:	6923      	ldr	r3, [r4, #16]
 8016344:	6861      	ldr	r1, [r4, #4]
 8016346:	4299      	cmp	r1, r3
 8016348:	bfde      	ittt	le
 801634a:	2330      	movle	r3, #48	; 0x30
 801634c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016350:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016354:	1b92      	subs	r2, r2, r6
 8016356:	6122      	str	r2, [r4, #16]
 8016358:	f8cd a000 	str.w	sl, [sp]
 801635c:	464b      	mov	r3, r9
 801635e:	aa03      	add	r2, sp, #12
 8016360:	4621      	mov	r1, r4
 8016362:	4640      	mov	r0, r8
 8016364:	f7ff fee2 	bl	801612c <_printf_common>
 8016368:	3001      	adds	r0, #1
 801636a:	d14c      	bne.n	8016406 <_printf_i+0x1fe>
 801636c:	f04f 30ff 	mov.w	r0, #4294967295
 8016370:	b004      	add	sp, #16
 8016372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016376:	4835      	ldr	r0, [pc, #212]	; (801644c <_printf_i+0x244>)
 8016378:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801637c:	6823      	ldr	r3, [r4, #0]
 801637e:	680e      	ldr	r6, [r1, #0]
 8016380:	061f      	lsls	r7, r3, #24
 8016382:	f856 5b04 	ldr.w	r5, [r6], #4
 8016386:	600e      	str	r6, [r1, #0]
 8016388:	d514      	bpl.n	80163b4 <_printf_i+0x1ac>
 801638a:	07d9      	lsls	r1, r3, #31
 801638c:	bf44      	itt	mi
 801638e:	f043 0320 	orrmi.w	r3, r3, #32
 8016392:	6023      	strmi	r3, [r4, #0]
 8016394:	b91d      	cbnz	r5, 801639e <_printf_i+0x196>
 8016396:	6823      	ldr	r3, [r4, #0]
 8016398:	f023 0320 	bic.w	r3, r3, #32
 801639c:	6023      	str	r3, [r4, #0]
 801639e:	2310      	movs	r3, #16
 80163a0:	e7b0      	b.n	8016304 <_printf_i+0xfc>
 80163a2:	6823      	ldr	r3, [r4, #0]
 80163a4:	f043 0320 	orr.w	r3, r3, #32
 80163a8:	6023      	str	r3, [r4, #0]
 80163aa:	2378      	movs	r3, #120	; 0x78
 80163ac:	4828      	ldr	r0, [pc, #160]	; (8016450 <_printf_i+0x248>)
 80163ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80163b2:	e7e3      	b.n	801637c <_printf_i+0x174>
 80163b4:	065e      	lsls	r6, r3, #25
 80163b6:	bf48      	it	mi
 80163b8:	b2ad      	uxthmi	r5, r5
 80163ba:	e7e6      	b.n	801638a <_printf_i+0x182>
 80163bc:	4616      	mov	r6, r2
 80163be:	e7bb      	b.n	8016338 <_printf_i+0x130>
 80163c0:	680b      	ldr	r3, [r1, #0]
 80163c2:	6826      	ldr	r6, [r4, #0]
 80163c4:	6960      	ldr	r0, [r4, #20]
 80163c6:	1d1d      	adds	r5, r3, #4
 80163c8:	600d      	str	r5, [r1, #0]
 80163ca:	0635      	lsls	r5, r6, #24
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	d501      	bpl.n	80163d4 <_printf_i+0x1cc>
 80163d0:	6018      	str	r0, [r3, #0]
 80163d2:	e002      	b.n	80163da <_printf_i+0x1d2>
 80163d4:	0671      	lsls	r1, r6, #25
 80163d6:	d5fb      	bpl.n	80163d0 <_printf_i+0x1c8>
 80163d8:	8018      	strh	r0, [r3, #0]
 80163da:	2300      	movs	r3, #0
 80163dc:	6123      	str	r3, [r4, #16]
 80163de:	4616      	mov	r6, r2
 80163e0:	e7ba      	b.n	8016358 <_printf_i+0x150>
 80163e2:	680b      	ldr	r3, [r1, #0]
 80163e4:	1d1a      	adds	r2, r3, #4
 80163e6:	600a      	str	r2, [r1, #0]
 80163e8:	681e      	ldr	r6, [r3, #0]
 80163ea:	6862      	ldr	r2, [r4, #4]
 80163ec:	2100      	movs	r1, #0
 80163ee:	4630      	mov	r0, r6
 80163f0:	f7e9 ff06 	bl	8000200 <memchr>
 80163f4:	b108      	cbz	r0, 80163fa <_printf_i+0x1f2>
 80163f6:	1b80      	subs	r0, r0, r6
 80163f8:	6060      	str	r0, [r4, #4]
 80163fa:	6863      	ldr	r3, [r4, #4]
 80163fc:	6123      	str	r3, [r4, #16]
 80163fe:	2300      	movs	r3, #0
 8016400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016404:	e7a8      	b.n	8016358 <_printf_i+0x150>
 8016406:	6923      	ldr	r3, [r4, #16]
 8016408:	4632      	mov	r2, r6
 801640a:	4649      	mov	r1, r9
 801640c:	4640      	mov	r0, r8
 801640e:	47d0      	blx	sl
 8016410:	3001      	adds	r0, #1
 8016412:	d0ab      	beq.n	801636c <_printf_i+0x164>
 8016414:	6823      	ldr	r3, [r4, #0]
 8016416:	079b      	lsls	r3, r3, #30
 8016418:	d413      	bmi.n	8016442 <_printf_i+0x23a>
 801641a:	68e0      	ldr	r0, [r4, #12]
 801641c:	9b03      	ldr	r3, [sp, #12]
 801641e:	4298      	cmp	r0, r3
 8016420:	bfb8      	it	lt
 8016422:	4618      	movlt	r0, r3
 8016424:	e7a4      	b.n	8016370 <_printf_i+0x168>
 8016426:	2301      	movs	r3, #1
 8016428:	4632      	mov	r2, r6
 801642a:	4649      	mov	r1, r9
 801642c:	4640      	mov	r0, r8
 801642e:	47d0      	blx	sl
 8016430:	3001      	adds	r0, #1
 8016432:	d09b      	beq.n	801636c <_printf_i+0x164>
 8016434:	3501      	adds	r5, #1
 8016436:	68e3      	ldr	r3, [r4, #12]
 8016438:	9903      	ldr	r1, [sp, #12]
 801643a:	1a5b      	subs	r3, r3, r1
 801643c:	42ab      	cmp	r3, r5
 801643e:	dcf2      	bgt.n	8016426 <_printf_i+0x21e>
 8016440:	e7eb      	b.n	801641a <_printf_i+0x212>
 8016442:	2500      	movs	r5, #0
 8016444:	f104 0619 	add.w	r6, r4, #25
 8016448:	e7f5      	b.n	8016436 <_printf_i+0x22e>
 801644a:	bf00      	nop
 801644c:	0801c050 	.word	0x0801c050
 8016450:	0801c061 	.word	0x0801c061

08016454 <_scanf_float>:
 8016454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016458:	b087      	sub	sp, #28
 801645a:	4617      	mov	r7, r2
 801645c:	9303      	str	r3, [sp, #12]
 801645e:	688b      	ldr	r3, [r1, #8]
 8016460:	1e5a      	subs	r2, r3, #1
 8016462:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016466:	bf83      	ittte	hi
 8016468:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801646c:	195b      	addhi	r3, r3, r5
 801646e:	9302      	strhi	r3, [sp, #8]
 8016470:	2300      	movls	r3, #0
 8016472:	bf86      	itte	hi
 8016474:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016478:	608b      	strhi	r3, [r1, #8]
 801647a:	9302      	strls	r3, [sp, #8]
 801647c:	680b      	ldr	r3, [r1, #0]
 801647e:	468b      	mov	fp, r1
 8016480:	2500      	movs	r5, #0
 8016482:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016486:	f84b 3b1c 	str.w	r3, [fp], #28
 801648a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801648e:	4680      	mov	r8, r0
 8016490:	460c      	mov	r4, r1
 8016492:	465e      	mov	r6, fp
 8016494:	46aa      	mov	sl, r5
 8016496:	46a9      	mov	r9, r5
 8016498:	9501      	str	r5, [sp, #4]
 801649a:	68a2      	ldr	r2, [r4, #8]
 801649c:	b152      	cbz	r2, 80164b4 <_scanf_float+0x60>
 801649e:	683b      	ldr	r3, [r7, #0]
 80164a0:	781b      	ldrb	r3, [r3, #0]
 80164a2:	2b4e      	cmp	r3, #78	; 0x4e
 80164a4:	d864      	bhi.n	8016570 <_scanf_float+0x11c>
 80164a6:	2b40      	cmp	r3, #64	; 0x40
 80164a8:	d83c      	bhi.n	8016524 <_scanf_float+0xd0>
 80164aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80164ae:	b2c8      	uxtb	r0, r1
 80164b0:	280e      	cmp	r0, #14
 80164b2:	d93a      	bls.n	801652a <_scanf_float+0xd6>
 80164b4:	f1b9 0f00 	cmp.w	r9, #0
 80164b8:	d003      	beq.n	80164c2 <_scanf_float+0x6e>
 80164ba:	6823      	ldr	r3, [r4, #0]
 80164bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80164c0:	6023      	str	r3, [r4, #0]
 80164c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80164c6:	f1ba 0f01 	cmp.w	sl, #1
 80164ca:	f200 8113 	bhi.w	80166f4 <_scanf_float+0x2a0>
 80164ce:	455e      	cmp	r6, fp
 80164d0:	f200 8105 	bhi.w	80166de <_scanf_float+0x28a>
 80164d4:	2501      	movs	r5, #1
 80164d6:	4628      	mov	r0, r5
 80164d8:	b007      	add	sp, #28
 80164da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80164e2:	2a0d      	cmp	r2, #13
 80164e4:	d8e6      	bhi.n	80164b4 <_scanf_float+0x60>
 80164e6:	a101      	add	r1, pc, #4	; (adr r1, 80164ec <_scanf_float+0x98>)
 80164e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80164ec:	0801662b 	.word	0x0801662b
 80164f0:	080164b5 	.word	0x080164b5
 80164f4:	080164b5 	.word	0x080164b5
 80164f8:	080164b5 	.word	0x080164b5
 80164fc:	0801668b 	.word	0x0801668b
 8016500:	08016663 	.word	0x08016663
 8016504:	080164b5 	.word	0x080164b5
 8016508:	080164b5 	.word	0x080164b5
 801650c:	08016639 	.word	0x08016639
 8016510:	080164b5 	.word	0x080164b5
 8016514:	080164b5 	.word	0x080164b5
 8016518:	080164b5 	.word	0x080164b5
 801651c:	080164b5 	.word	0x080164b5
 8016520:	080165f1 	.word	0x080165f1
 8016524:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016528:	e7db      	b.n	80164e2 <_scanf_float+0x8e>
 801652a:	290e      	cmp	r1, #14
 801652c:	d8c2      	bhi.n	80164b4 <_scanf_float+0x60>
 801652e:	a001      	add	r0, pc, #4	; (adr r0, 8016534 <_scanf_float+0xe0>)
 8016530:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016534:	080165e3 	.word	0x080165e3
 8016538:	080164b5 	.word	0x080164b5
 801653c:	080165e3 	.word	0x080165e3
 8016540:	08016677 	.word	0x08016677
 8016544:	080164b5 	.word	0x080164b5
 8016548:	08016591 	.word	0x08016591
 801654c:	080165cd 	.word	0x080165cd
 8016550:	080165cd 	.word	0x080165cd
 8016554:	080165cd 	.word	0x080165cd
 8016558:	080165cd 	.word	0x080165cd
 801655c:	080165cd 	.word	0x080165cd
 8016560:	080165cd 	.word	0x080165cd
 8016564:	080165cd 	.word	0x080165cd
 8016568:	080165cd 	.word	0x080165cd
 801656c:	080165cd 	.word	0x080165cd
 8016570:	2b6e      	cmp	r3, #110	; 0x6e
 8016572:	d809      	bhi.n	8016588 <_scanf_float+0x134>
 8016574:	2b60      	cmp	r3, #96	; 0x60
 8016576:	d8b2      	bhi.n	80164de <_scanf_float+0x8a>
 8016578:	2b54      	cmp	r3, #84	; 0x54
 801657a:	d077      	beq.n	801666c <_scanf_float+0x218>
 801657c:	2b59      	cmp	r3, #89	; 0x59
 801657e:	d199      	bne.n	80164b4 <_scanf_float+0x60>
 8016580:	2d07      	cmp	r5, #7
 8016582:	d197      	bne.n	80164b4 <_scanf_float+0x60>
 8016584:	2508      	movs	r5, #8
 8016586:	e029      	b.n	80165dc <_scanf_float+0x188>
 8016588:	2b74      	cmp	r3, #116	; 0x74
 801658a:	d06f      	beq.n	801666c <_scanf_float+0x218>
 801658c:	2b79      	cmp	r3, #121	; 0x79
 801658e:	e7f6      	b.n	801657e <_scanf_float+0x12a>
 8016590:	6821      	ldr	r1, [r4, #0]
 8016592:	05c8      	lsls	r0, r1, #23
 8016594:	d51a      	bpl.n	80165cc <_scanf_float+0x178>
 8016596:	9b02      	ldr	r3, [sp, #8]
 8016598:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801659c:	6021      	str	r1, [r4, #0]
 801659e:	f109 0901 	add.w	r9, r9, #1
 80165a2:	b11b      	cbz	r3, 80165ac <_scanf_float+0x158>
 80165a4:	3b01      	subs	r3, #1
 80165a6:	3201      	adds	r2, #1
 80165a8:	9302      	str	r3, [sp, #8]
 80165aa:	60a2      	str	r2, [r4, #8]
 80165ac:	68a3      	ldr	r3, [r4, #8]
 80165ae:	3b01      	subs	r3, #1
 80165b0:	60a3      	str	r3, [r4, #8]
 80165b2:	6923      	ldr	r3, [r4, #16]
 80165b4:	3301      	adds	r3, #1
 80165b6:	6123      	str	r3, [r4, #16]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	3b01      	subs	r3, #1
 80165bc:	2b00      	cmp	r3, #0
 80165be:	607b      	str	r3, [r7, #4]
 80165c0:	f340 8084 	ble.w	80166cc <_scanf_float+0x278>
 80165c4:	683b      	ldr	r3, [r7, #0]
 80165c6:	3301      	adds	r3, #1
 80165c8:	603b      	str	r3, [r7, #0]
 80165ca:	e766      	b.n	801649a <_scanf_float+0x46>
 80165cc:	eb1a 0f05 	cmn.w	sl, r5
 80165d0:	f47f af70 	bne.w	80164b4 <_scanf_float+0x60>
 80165d4:	6822      	ldr	r2, [r4, #0]
 80165d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80165da:	6022      	str	r2, [r4, #0]
 80165dc:	f806 3b01 	strb.w	r3, [r6], #1
 80165e0:	e7e4      	b.n	80165ac <_scanf_float+0x158>
 80165e2:	6822      	ldr	r2, [r4, #0]
 80165e4:	0610      	lsls	r0, r2, #24
 80165e6:	f57f af65 	bpl.w	80164b4 <_scanf_float+0x60>
 80165ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80165ee:	e7f4      	b.n	80165da <_scanf_float+0x186>
 80165f0:	f1ba 0f00 	cmp.w	sl, #0
 80165f4:	d10e      	bne.n	8016614 <_scanf_float+0x1c0>
 80165f6:	f1b9 0f00 	cmp.w	r9, #0
 80165fa:	d10e      	bne.n	801661a <_scanf_float+0x1c6>
 80165fc:	6822      	ldr	r2, [r4, #0]
 80165fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016602:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016606:	d108      	bne.n	801661a <_scanf_float+0x1c6>
 8016608:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801660c:	6022      	str	r2, [r4, #0]
 801660e:	f04f 0a01 	mov.w	sl, #1
 8016612:	e7e3      	b.n	80165dc <_scanf_float+0x188>
 8016614:	f1ba 0f02 	cmp.w	sl, #2
 8016618:	d055      	beq.n	80166c6 <_scanf_float+0x272>
 801661a:	2d01      	cmp	r5, #1
 801661c:	d002      	beq.n	8016624 <_scanf_float+0x1d0>
 801661e:	2d04      	cmp	r5, #4
 8016620:	f47f af48 	bne.w	80164b4 <_scanf_float+0x60>
 8016624:	3501      	adds	r5, #1
 8016626:	b2ed      	uxtb	r5, r5
 8016628:	e7d8      	b.n	80165dc <_scanf_float+0x188>
 801662a:	f1ba 0f01 	cmp.w	sl, #1
 801662e:	f47f af41 	bne.w	80164b4 <_scanf_float+0x60>
 8016632:	f04f 0a02 	mov.w	sl, #2
 8016636:	e7d1      	b.n	80165dc <_scanf_float+0x188>
 8016638:	b97d      	cbnz	r5, 801665a <_scanf_float+0x206>
 801663a:	f1b9 0f00 	cmp.w	r9, #0
 801663e:	f47f af3c 	bne.w	80164ba <_scanf_float+0x66>
 8016642:	6822      	ldr	r2, [r4, #0]
 8016644:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016648:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801664c:	f47f af39 	bne.w	80164c2 <_scanf_float+0x6e>
 8016650:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016654:	6022      	str	r2, [r4, #0]
 8016656:	2501      	movs	r5, #1
 8016658:	e7c0      	b.n	80165dc <_scanf_float+0x188>
 801665a:	2d03      	cmp	r5, #3
 801665c:	d0e2      	beq.n	8016624 <_scanf_float+0x1d0>
 801665e:	2d05      	cmp	r5, #5
 8016660:	e7de      	b.n	8016620 <_scanf_float+0x1cc>
 8016662:	2d02      	cmp	r5, #2
 8016664:	f47f af26 	bne.w	80164b4 <_scanf_float+0x60>
 8016668:	2503      	movs	r5, #3
 801666a:	e7b7      	b.n	80165dc <_scanf_float+0x188>
 801666c:	2d06      	cmp	r5, #6
 801666e:	f47f af21 	bne.w	80164b4 <_scanf_float+0x60>
 8016672:	2507      	movs	r5, #7
 8016674:	e7b2      	b.n	80165dc <_scanf_float+0x188>
 8016676:	6822      	ldr	r2, [r4, #0]
 8016678:	0591      	lsls	r1, r2, #22
 801667a:	f57f af1b 	bpl.w	80164b4 <_scanf_float+0x60>
 801667e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016682:	6022      	str	r2, [r4, #0]
 8016684:	f8cd 9004 	str.w	r9, [sp, #4]
 8016688:	e7a8      	b.n	80165dc <_scanf_float+0x188>
 801668a:	6822      	ldr	r2, [r4, #0]
 801668c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016690:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016694:	d006      	beq.n	80166a4 <_scanf_float+0x250>
 8016696:	0550      	lsls	r0, r2, #21
 8016698:	f57f af0c 	bpl.w	80164b4 <_scanf_float+0x60>
 801669c:	f1b9 0f00 	cmp.w	r9, #0
 80166a0:	f43f af0f 	beq.w	80164c2 <_scanf_float+0x6e>
 80166a4:	0591      	lsls	r1, r2, #22
 80166a6:	bf58      	it	pl
 80166a8:	9901      	ldrpl	r1, [sp, #4]
 80166aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80166ae:	bf58      	it	pl
 80166b0:	eba9 0101 	subpl.w	r1, r9, r1
 80166b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80166b8:	bf58      	it	pl
 80166ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80166be:	6022      	str	r2, [r4, #0]
 80166c0:	f04f 0900 	mov.w	r9, #0
 80166c4:	e78a      	b.n	80165dc <_scanf_float+0x188>
 80166c6:	f04f 0a03 	mov.w	sl, #3
 80166ca:	e787      	b.n	80165dc <_scanf_float+0x188>
 80166cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80166d0:	4639      	mov	r1, r7
 80166d2:	4640      	mov	r0, r8
 80166d4:	4798      	blx	r3
 80166d6:	2800      	cmp	r0, #0
 80166d8:	f43f aedf 	beq.w	801649a <_scanf_float+0x46>
 80166dc:	e6ea      	b.n	80164b4 <_scanf_float+0x60>
 80166de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80166e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80166e6:	463a      	mov	r2, r7
 80166e8:	4640      	mov	r0, r8
 80166ea:	4798      	blx	r3
 80166ec:	6923      	ldr	r3, [r4, #16]
 80166ee:	3b01      	subs	r3, #1
 80166f0:	6123      	str	r3, [r4, #16]
 80166f2:	e6ec      	b.n	80164ce <_scanf_float+0x7a>
 80166f4:	1e6b      	subs	r3, r5, #1
 80166f6:	2b06      	cmp	r3, #6
 80166f8:	d825      	bhi.n	8016746 <_scanf_float+0x2f2>
 80166fa:	2d02      	cmp	r5, #2
 80166fc:	d836      	bhi.n	801676c <_scanf_float+0x318>
 80166fe:	455e      	cmp	r6, fp
 8016700:	f67f aee8 	bls.w	80164d4 <_scanf_float+0x80>
 8016704:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016708:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801670c:	463a      	mov	r2, r7
 801670e:	4640      	mov	r0, r8
 8016710:	4798      	blx	r3
 8016712:	6923      	ldr	r3, [r4, #16]
 8016714:	3b01      	subs	r3, #1
 8016716:	6123      	str	r3, [r4, #16]
 8016718:	e7f1      	b.n	80166fe <_scanf_float+0x2aa>
 801671a:	9802      	ldr	r0, [sp, #8]
 801671c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016720:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016724:	9002      	str	r0, [sp, #8]
 8016726:	463a      	mov	r2, r7
 8016728:	4640      	mov	r0, r8
 801672a:	4798      	blx	r3
 801672c:	6923      	ldr	r3, [r4, #16]
 801672e:	3b01      	subs	r3, #1
 8016730:	6123      	str	r3, [r4, #16]
 8016732:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016736:	fa5f fa8a 	uxtb.w	sl, sl
 801673a:	f1ba 0f02 	cmp.w	sl, #2
 801673e:	d1ec      	bne.n	801671a <_scanf_float+0x2c6>
 8016740:	3d03      	subs	r5, #3
 8016742:	b2ed      	uxtb	r5, r5
 8016744:	1b76      	subs	r6, r6, r5
 8016746:	6823      	ldr	r3, [r4, #0]
 8016748:	05da      	lsls	r2, r3, #23
 801674a:	d52f      	bpl.n	80167ac <_scanf_float+0x358>
 801674c:	055b      	lsls	r3, r3, #21
 801674e:	d510      	bpl.n	8016772 <_scanf_float+0x31e>
 8016750:	455e      	cmp	r6, fp
 8016752:	f67f aebf 	bls.w	80164d4 <_scanf_float+0x80>
 8016756:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801675a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801675e:	463a      	mov	r2, r7
 8016760:	4640      	mov	r0, r8
 8016762:	4798      	blx	r3
 8016764:	6923      	ldr	r3, [r4, #16]
 8016766:	3b01      	subs	r3, #1
 8016768:	6123      	str	r3, [r4, #16]
 801676a:	e7f1      	b.n	8016750 <_scanf_float+0x2fc>
 801676c:	46aa      	mov	sl, r5
 801676e:	9602      	str	r6, [sp, #8]
 8016770:	e7df      	b.n	8016732 <_scanf_float+0x2de>
 8016772:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016776:	6923      	ldr	r3, [r4, #16]
 8016778:	2965      	cmp	r1, #101	; 0x65
 801677a:	f103 33ff 	add.w	r3, r3, #4294967295
 801677e:	f106 35ff 	add.w	r5, r6, #4294967295
 8016782:	6123      	str	r3, [r4, #16]
 8016784:	d00c      	beq.n	80167a0 <_scanf_float+0x34c>
 8016786:	2945      	cmp	r1, #69	; 0x45
 8016788:	d00a      	beq.n	80167a0 <_scanf_float+0x34c>
 801678a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801678e:	463a      	mov	r2, r7
 8016790:	4640      	mov	r0, r8
 8016792:	4798      	blx	r3
 8016794:	6923      	ldr	r3, [r4, #16]
 8016796:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801679a:	3b01      	subs	r3, #1
 801679c:	1eb5      	subs	r5, r6, #2
 801679e:	6123      	str	r3, [r4, #16]
 80167a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80167a4:	463a      	mov	r2, r7
 80167a6:	4640      	mov	r0, r8
 80167a8:	4798      	blx	r3
 80167aa:	462e      	mov	r6, r5
 80167ac:	6825      	ldr	r5, [r4, #0]
 80167ae:	f015 0510 	ands.w	r5, r5, #16
 80167b2:	d158      	bne.n	8016866 <_scanf_float+0x412>
 80167b4:	7035      	strb	r5, [r6, #0]
 80167b6:	6823      	ldr	r3, [r4, #0]
 80167b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80167bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80167c0:	d11c      	bne.n	80167fc <_scanf_float+0x3a8>
 80167c2:	9b01      	ldr	r3, [sp, #4]
 80167c4:	454b      	cmp	r3, r9
 80167c6:	eba3 0209 	sub.w	r2, r3, r9
 80167ca:	d124      	bne.n	8016816 <_scanf_float+0x3c2>
 80167cc:	2200      	movs	r2, #0
 80167ce:	4659      	mov	r1, fp
 80167d0:	4640      	mov	r0, r8
 80167d2:	f001 f873 	bl	80178bc <_strtod_r>
 80167d6:	9b03      	ldr	r3, [sp, #12]
 80167d8:	6821      	ldr	r1, [r4, #0]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	f011 0f02 	tst.w	r1, #2
 80167e0:	ec57 6b10 	vmov	r6, r7, d0
 80167e4:	f103 0204 	add.w	r2, r3, #4
 80167e8:	d020      	beq.n	801682c <_scanf_float+0x3d8>
 80167ea:	9903      	ldr	r1, [sp, #12]
 80167ec:	600a      	str	r2, [r1, #0]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	e9c3 6700 	strd	r6, r7, [r3]
 80167f4:	68e3      	ldr	r3, [r4, #12]
 80167f6:	3301      	adds	r3, #1
 80167f8:	60e3      	str	r3, [r4, #12]
 80167fa:	e66c      	b.n	80164d6 <_scanf_float+0x82>
 80167fc:	9b04      	ldr	r3, [sp, #16]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d0e4      	beq.n	80167cc <_scanf_float+0x378>
 8016802:	9905      	ldr	r1, [sp, #20]
 8016804:	230a      	movs	r3, #10
 8016806:	462a      	mov	r2, r5
 8016808:	3101      	adds	r1, #1
 801680a:	4640      	mov	r0, r8
 801680c:	f001 f8e0 	bl	80179d0 <_strtol_r>
 8016810:	9b04      	ldr	r3, [sp, #16]
 8016812:	9e05      	ldr	r6, [sp, #20]
 8016814:	1ac2      	subs	r2, r0, r3
 8016816:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801681a:	429e      	cmp	r6, r3
 801681c:	bf28      	it	cs
 801681e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016822:	4912      	ldr	r1, [pc, #72]	; (801686c <_scanf_float+0x418>)
 8016824:	4630      	mov	r0, r6
 8016826:	f000 f977 	bl	8016b18 <siprintf>
 801682a:	e7cf      	b.n	80167cc <_scanf_float+0x378>
 801682c:	f011 0f04 	tst.w	r1, #4
 8016830:	9903      	ldr	r1, [sp, #12]
 8016832:	600a      	str	r2, [r1, #0]
 8016834:	d1db      	bne.n	80167ee <_scanf_float+0x39a>
 8016836:	f8d3 8000 	ldr.w	r8, [r3]
 801683a:	ee10 2a10 	vmov	r2, s0
 801683e:	ee10 0a10 	vmov	r0, s0
 8016842:	463b      	mov	r3, r7
 8016844:	4639      	mov	r1, r7
 8016846:	f7ea f981 	bl	8000b4c <__aeabi_dcmpun>
 801684a:	b128      	cbz	r0, 8016858 <_scanf_float+0x404>
 801684c:	4808      	ldr	r0, [pc, #32]	; (8016870 <_scanf_float+0x41c>)
 801684e:	f000 f919 	bl	8016a84 <nanf>
 8016852:	ed88 0a00 	vstr	s0, [r8]
 8016856:	e7cd      	b.n	80167f4 <_scanf_float+0x3a0>
 8016858:	4630      	mov	r0, r6
 801685a:	4639      	mov	r1, r7
 801685c:	f7ea f9d4 	bl	8000c08 <__aeabi_d2f>
 8016860:	f8c8 0000 	str.w	r0, [r8]
 8016864:	e7c6      	b.n	80167f4 <_scanf_float+0x3a0>
 8016866:	2500      	movs	r5, #0
 8016868:	e635      	b.n	80164d6 <_scanf_float+0x82>
 801686a:	bf00      	nop
 801686c:	0801c072 	.word	0x0801c072
 8016870:	0801c103 	.word	0x0801c103

08016874 <iprintf>:
 8016874:	b40f      	push	{r0, r1, r2, r3}
 8016876:	4b0a      	ldr	r3, [pc, #40]	; (80168a0 <iprintf+0x2c>)
 8016878:	b513      	push	{r0, r1, r4, lr}
 801687a:	681c      	ldr	r4, [r3, #0]
 801687c:	b124      	cbz	r4, 8016888 <iprintf+0x14>
 801687e:	69a3      	ldr	r3, [r4, #24]
 8016880:	b913      	cbnz	r3, 8016888 <iprintf+0x14>
 8016882:	4620      	mov	r0, r4
 8016884:	f7fe ffd4 	bl	8015830 <__sinit>
 8016888:	ab05      	add	r3, sp, #20
 801688a:	9a04      	ldr	r2, [sp, #16]
 801688c:	68a1      	ldr	r1, [r4, #8]
 801688e:	9301      	str	r3, [sp, #4]
 8016890:	4620      	mov	r0, r4
 8016892:	f003 fdfd 	bl	801a490 <_vfiprintf_r>
 8016896:	b002      	add	sp, #8
 8016898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801689c:	b004      	add	sp, #16
 801689e:	4770      	bx	lr
 80168a0:	200000dc 	.word	0x200000dc

080168a4 <_puts_r>:
 80168a4:	b570      	push	{r4, r5, r6, lr}
 80168a6:	460e      	mov	r6, r1
 80168a8:	4605      	mov	r5, r0
 80168aa:	b118      	cbz	r0, 80168b4 <_puts_r+0x10>
 80168ac:	6983      	ldr	r3, [r0, #24]
 80168ae:	b90b      	cbnz	r3, 80168b4 <_puts_r+0x10>
 80168b0:	f7fe ffbe 	bl	8015830 <__sinit>
 80168b4:	69ab      	ldr	r3, [r5, #24]
 80168b6:	68ac      	ldr	r4, [r5, #8]
 80168b8:	b913      	cbnz	r3, 80168c0 <_puts_r+0x1c>
 80168ba:	4628      	mov	r0, r5
 80168bc:	f7fe ffb8 	bl	8015830 <__sinit>
 80168c0:	4b2c      	ldr	r3, [pc, #176]	; (8016974 <_puts_r+0xd0>)
 80168c2:	429c      	cmp	r4, r3
 80168c4:	d120      	bne.n	8016908 <_puts_r+0x64>
 80168c6:	686c      	ldr	r4, [r5, #4]
 80168c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168ca:	07db      	lsls	r3, r3, #31
 80168cc:	d405      	bmi.n	80168da <_puts_r+0x36>
 80168ce:	89a3      	ldrh	r3, [r4, #12]
 80168d0:	0598      	lsls	r0, r3, #22
 80168d2:	d402      	bmi.n	80168da <_puts_r+0x36>
 80168d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168d6:	f7ff f86e 	bl	80159b6 <__retarget_lock_acquire_recursive>
 80168da:	89a3      	ldrh	r3, [r4, #12]
 80168dc:	0719      	lsls	r1, r3, #28
 80168de:	d51d      	bpl.n	801691c <_puts_r+0x78>
 80168e0:	6923      	ldr	r3, [r4, #16]
 80168e2:	b1db      	cbz	r3, 801691c <_puts_r+0x78>
 80168e4:	3e01      	subs	r6, #1
 80168e6:	68a3      	ldr	r3, [r4, #8]
 80168e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80168ec:	3b01      	subs	r3, #1
 80168ee:	60a3      	str	r3, [r4, #8]
 80168f0:	bb39      	cbnz	r1, 8016942 <_puts_r+0x9e>
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	da38      	bge.n	8016968 <_puts_r+0xc4>
 80168f6:	4622      	mov	r2, r4
 80168f8:	210a      	movs	r1, #10
 80168fa:	4628      	mov	r0, r5
 80168fc:	f001 f92c 	bl	8017b58 <__swbuf_r>
 8016900:	3001      	adds	r0, #1
 8016902:	d011      	beq.n	8016928 <_puts_r+0x84>
 8016904:	250a      	movs	r5, #10
 8016906:	e011      	b.n	801692c <_puts_r+0x88>
 8016908:	4b1b      	ldr	r3, [pc, #108]	; (8016978 <_puts_r+0xd4>)
 801690a:	429c      	cmp	r4, r3
 801690c:	d101      	bne.n	8016912 <_puts_r+0x6e>
 801690e:	68ac      	ldr	r4, [r5, #8]
 8016910:	e7da      	b.n	80168c8 <_puts_r+0x24>
 8016912:	4b1a      	ldr	r3, [pc, #104]	; (801697c <_puts_r+0xd8>)
 8016914:	429c      	cmp	r4, r3
 8016916:	bf08      	it	eq
 8016918:	68ec      	ldreq	r4, [r5, #12]
 801691a:	e7d5      	b.n	80168c8 <_puts_r+0x24>
 801691c:	4621      	mov	r1, r4
 801691e:	4628      	mov	r0, r5
 8016920:	f001 f97e 	bl	8017c20 <__swsetup_r>
 8016924:	2800      	cmp	r0, #0
 8016926:	d0dd      	beq.n	80168e4 <_puts_r+0x40>
 8016928:	f04f 35ff 	mov.w	r5, #4294967295
 801692c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801692e:	07da      	lsls	r2, r3, #31
 8016930:	d405      	bmi.n	801693e <_puts_r+0x9a>
 8016932:	89a3      	ldrh	r3, [r4, #12]
 8016934:	059b      	lsls	r3, r3, #22
 8016936:	d402      	bmi.n	801693e <_puts_r+0x9a>
 8016938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801693a:	f7ff f83d 	bl	80159b8 <__retarget_lock_release_recursive>
 801693e:	4628      	mov	r0, r5
 8016940:	bd70      	pop	{r4, r5, r6, pc}
 8016942:	2b00      	cmp	r3, #0
 8016944:	da04      	bge.n	8016950 <_puts_r+0xac>
 8016946:	69a2      	ldr	r2, [r4, #24]
 8016948:	429a      	cmp	r2, r3
 801694a:	dc06      	bgt.n	801695a <_puts_r+0xb6>
 801694c:	290a      	cmp	r1, #10
 801694e:	d004      	beq.n	801695a <_puts_r+0xb6>
 8016950:	6823      	ldr	r3, [r4, #0]
 8016952:	1c5a      	adds	r2, r3, #1
 8016954:	6022      	str	r2, [r4, #0]
 8016956:	7019      	strb	r1, [r3, #0]
 8016958:	e7c5      	b.n	80168e6 <_puts_r+0x42>
 801695a:	4622      	mov	r2, r4
 801695c:	4628      	mov	r0, r5
 801695e:	f001 f8fb 	bl	8017b58 <__swbuf_r>
 8016962:	3001      	adds	r0, #1
 8016964:	d1bf      	bne.n	80168e6 <_puts_r+0x42>
 8016966:	e7df      	b.n	8016928 <_puts_r+0x84>
 8016968:	6823      	ldr	r3, [r4, #0]
 801696a:	250a      	movs	r5, #10
 801696c:	1c5a      	adds	r2, r3, #1
 801696e:	6022      	str	r2, [r4, #0]
 8016970:	701d      	strb	r5, [r3, #0]
 8016972:	e7db      	b.n	801692c <_puts_r+0x88>
 8016974:	0801bffc 	.word	0x0801bffc
 8016978:	0801c01c 	.word	0x0801c01c
 801697c:	0801bfdc 	.word	0x0801bfdc

08016980 <puts>:
 8016980:	4b02      	ldr	r3, [pc, #8]	; (801698c <puts+0xc>)
 8016982:	4601      	mov	r1, r0
 8016984:	6818      	ldr	r0, [r3, #0]
 8016986:	f7ff bf8d 	b.w	80168a4 <_puts_r>
 801698a:	bf00      	nop
 801698c:	200000dc 	.word	0x200000dc

08016990 <cleanup_glue>:
 8016990:	b538      	push	{r3, r4, r5, lr}
 8016992:	460c      	mov	r4, r1
 8016994:	6809      	ldr	r1, [r1, #0]
 8016996:	4605      	mov	r5, r0
 8016998:	b109      	cbz	r1, 801699e <cleanup_glue+0xe>
 801699a:	f7ff fff9 	bl	8016990 <cleanup_glue>
 801699e:	4621      	mov	r1, r4
 80169a0:	4628      	mov	r0, r5
 80169a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169a6:	f7ff b841 	b.w	8015a2c <_free_r>
	...

080169ac <_reclaim_reent>:
 80169ac:	4b2c      	ldr	r3, [pc, #176]	; (8016a60 <_reclaim_reent+0xb4>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	4283      	cmp	r3, r0
 80169b2:	b570      	push	{r4, r5, r6, lr}
 80169b4:	4604      	mov	r4, r0
 80169b6:	d051      	beq.n	8016a5c <_reclaim_reent+0xb0>
 80169b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80169ba:	b143      	cbz	r3, 80169ce <_reclaim_reent+0x22>
 80169bc:	68db      	ldr	r3, [r3, #12]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d14a      	bne.n	8016a58 <_reclaim_reent+0xac>
 80169c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80169c4:	6819      	ldr	r1, [r3, #0]
 80169c6:	b111      	cbz	r1, 80169ce <_reclaim_reent+0x22>
 80169c8:	4620      	mov	r0, r4
 80169ca:	f7ff f82f 	bl	8015a2c <_free_r>
 80169ce:	6961      	ldr	r1, [r4, #20]
 80169d0:	b111      	cbz	r1, 80169d8 <_reclaim_reent+0x2c>
 80169d2:	4620      	mov	r0, r4
 80169d4:	f7ff f82a 	bl	8015a2c <_free_r>
 80169d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80169da:	b111      	cbz	r1, 80169e2 <_reclaim_reent+0x36>
 80169dc:	4620      	mov	r0, r4
 80169de:	f7ff f825 	bl	8015a2c <_free_r>
 80169e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80169e4:	b111      	cbz	r1, 80169ec <_reclaim_reent+0x40>
 80169e6:	4620      	mov	r0, r4
 80169e8:	f7ff f820 	bl	8015a2c <_free_r>
 80169ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80169ee:	b111      	cbz	r1, 80169f6 <_reclaim_reent+0x4a>
 80169f0:	4620      	mov	r0, r4
 80169f2:	f7ff f81b 	bl	8015a2c <_free_r>
 80169f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80169f8:	b111      	cbz	r1, 8016a00 <_reclaim_reent+0x54>
 80169fa:	4620      	mov	r0, r4
 80169fc:	f7ff f816 	bl	8015a2c <_free_r>
 8016a00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016a02:	b111      	cbz	r1, 8016a0a <_reclaim_reent+0x5e>
 8016a04:	4620      	mov	r0, r4
 8016a06:	f7ff f811 	bl	8015a2c <_free_r>
 8016a0a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016a0c:	b111      	cbz	r1, 8016a14 <_reclaim_reent+0x68>
 8016a0e:	4620      	mov	r0, r4
 8016a10:	f7ff f80c 	bl	8015a2c <_free_r>
 8016a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016a16:	b111      	cbz	r1, 8016a1e <_reclaim_reent+0x72>
 8016a18:	4620      	mov	r0, r4
 8016a1a:	f7ff f807 	bl	8015a2c <_free_r>
 8016a1e:	69a3      	ldr	r3, [r4, #24]
 8016a20:	b1e3      	cbz	r3, 8016a5c <_reclaim_reent+0xb0>
 8016a22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016a24:	4620      	mov	r0, r4
 8016a26:	4798      	blx	r3
 8016a28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016a2a:	b1b9      	cbz	r1, 8016a5c <_reclaim_reent+0xb0>
 8016a2c:	4620      	mov	r0, r4
 8016a2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016a32:	f7ff bfad 	b.w	8016990 <cleanup_glue>
 8016a36:	5949      	ldr	r1, [r1, r5]
 8016a38:	b941      	cbnz	r1, 8016a4c <_reclaim_reent+0xa0>
 8016a3a:	3504      	adds	r5, #4
 8016a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016a3e:	2d80      	cmp	r5, #128	; 0x80
 8016a40:	68d9      	ldr	r1, [r3, #12]
 8016a42:	d1f8      	bne.n	8016a36 <_reclaim_reent+0x8a>
 8016a44:	4620      	mov	r0, r4
 8016a46:	f7fe fff1 	bl	8015a2c <_free_r>
 8016a4a:	e7ba      	b.n	80169c2 <_reclaim_reent+0x16>
 8016a4c:	680e      	ldr	r6, [r1, #0]
 8016a4e:	4620      	mov	r0, r4
 8016a50:	f7fe ffec 	bl	8015a2c <_free_r>
 8016a54:	4631      	mov	r1, r6
 8016a56:	e7ef      	b.n	8016a38 <_reclaim_reent+0x8c>
 8016a58:	2500      	movs	r5, #0
 8016a5a:	e7ef      	b.n	8016a3c <_reclaim_reent+0x90>
 8016a5c:	bd70      	pop	{r4, r5, r6, pc}
 8016a5e:	bf00      	nop
 8016a60:	200000dc 	.word	0x200000dc

08016a64 <_sbrk_r>:
 8016a64:	b538      	push	{r3, r4, r5, lr}
 8016a66:	4d06      	ldr	r5, [pc, #24]	; (8016a80 <_sbrk_r+0x1c>)
 8016a68:	2300      	movs	r3, #0
 8016a6a:	4604      	mov	r4, r0
 8016a6c:	4608      	mov	r0, r1
 8016a6e:	602b      	str	r3, [r5, #0]
 8016a70:	f004 f880 	bl	801ab74 <_sbrk>
 8016a74:	1c43      	adds	r3, r0, #1
 8016a76:	d102      	bne.n	8016a7e <_sbrk_r+0x1a>
 8016a78:	682b      	ldr	r3, [r5, #0]
 8016a7a:	b103      	cbz	r3, 8016a7e <_sbrk_r+0x1a>
 8016a7c:	6023      	str	r3, [r4, #0]
 8016a7e:	bd38      	pop	{r3, r4, r5, pc}
 8016a80:	20007850 	.word	0x20007850

08016a84 <nanf>:
 8016a84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016a8c <nanf+0x8>
 8016a88:	4770      	bx	lr
 8016a8a:	bf00      	nop
 8016a8c:	7fc00000 	.word	0x7fc00000

08016a90 <_raise_r>:
 8016a90:	291f      	cmp	r1, #31
 8016a92:	b538      	push	{r3, r4, r5, lr}
 8016a94:	4604      	mov	r4, r0
 8016a96:	460d      	mov	r5, r1
 8016a98:	d904      	bls.n	8016aa4 <_raise_r+0x14>
 8016a9a:	2316      	movs	r3, #22
 8016a9c:	6003      	str	r3, [r0, #0]
 8016a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8016aa2:	bd38      	pop	{r3, r4, r5, pc}
 8016aa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016aa6:	b112      	cbz	r2, 8016aae <_raise_r+0x1e>
 8016aa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016aac:	b94b      	cbnz	r3, 8016ac2 <_raise_r+0x32>
 8016aae:	4620      	mov	r0, r4
 8016ab0:	f000 f830 	bl	8016b14 <_getpid_r>
 8016ab4:	462a      	mov	r2, r5
 8016ab6:	4601      	mov	r1, r0
 8016ab8:	4620      	mov	r0, r4
 8016aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016abe:	f000 b817 	b.w	8016af0 <_kill_r>
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d00a      	beq.n	8016adc <_raise_r+0x4c>
 8016ac6:	1c59      	adds	r1, r3, #1
 8016ac8:	d103      	bne.n	8016ad2 <_raise_r+0x42>
 8016aca:	2316      	movs	r3, #22
 8016acc:	6003      	str	r3, [r0, #0]
 8016ace:	2001      	movs	r0, #1
 8016ad0:	e7e7      	b.n	8016aa2 <_raise_r+0x12>
 8016ad2:	2400      	movs	r4, #0
 8016ad4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016ad8:	4628      	mov	r0, r5
 8016ada:	4798      	blx	r3
 8016adc:	2000      	movs	r0, #0
 8016ade:	e7e0      	b.n	8016aa2 <_raise_r+0x12>

08016ae0 <raise>:
 8016ae0:	4b02      	ldr	r3, [pc, #8]	; (8016aec <raise+0xc>)
 8016ae2:	4601      	mov	r1, r0
 8016ae4:	6818      	ldr	r0, [r3, #0]
 8016ae6:	f7ff bfd3 	b.w	8016a90 <_raise_r>
 8016aea:	bf00      	nop
 8016aec:	200000dc 	.word	0x200000dc

08016af0 <_kill_r>:
 8016af0:	b538      	push	{r3, r4, r5, lr}
 8016af2:	4d07      	ldr	r5, [pc, #28]	; (8016b10 <_kill_r+0x20>)
 8016af4:	2300      	movs	r3, #0
 8016af6:	4604      	mov	r4, r0
 8016af8:	4608      	mov	r0, r1
 8016afa:	4611      	mov	r1, r2
 8016afc:	602b      	str	r3, [r5, #0]
 8016afe:	f004 f821 	bl	801ab44 <_kill>
 8016b02:	1c43      	adds	r3, r0, #1
 8016b04:	d102      	bne.n	8016b0c <_kill_r+0x1c>
 8016b06:	682b      	ldr	r3, [r5, #0]
 8016b08:	b103      	cbz	r3, 8016b0c <_kill_r+0x1c>
 8016b0a:	6023      	str	r3, [r4, #0]
 8016b0c:	bd38      	pop	{r3, r4, r5, pc}
 8016b0e:	bf00      	nop
 8016b10:	20007850 	.word	0x20007850

08016b14 <_getpid_r>:
 8016b14:	f004 b806 	b.w	801ab24 <_getpid>

08016b18 <siprintf>:
 8016b18:	b40e      	push	{r1, r2, r3}
 8016b1a:	b500      	push	{lr}
 8016b1c:	b09c      	sub	sp, #112	; 0x70
 8016b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8016b20:	9002      	str	r0, [sp, #8]
 8016b22:	9006      	str	r0, [sp, #24]
 8016b24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016b28:	4809      	ldr	r0, [pc, #36]	; (8016b50 <siprintf+0x38>)
 8016b2a:	9107      	str	r1, [sp, #28]
 8016b2c:	9104      	str	r1, [sp, #16]
 8016b2e:	4909      	ldr	r1, [pc, #36]	; (8016b54 <siprintf+0x3c>)
 8016b30:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b34:	9105      	str	r1, [sp, #20]
 8016b36:	6800      	ldr	r0, [r0, #0]
 8016b38:	9301      	str	r3, [sp, #4]
 8016b3a:	a902      	add	r1, sp, #8
 8016b3c:	f003 f9ac 	bl	8019e98 <_svfiprintf_r>
 8016b40:	9b02      	ldr	r3, [sp, #8]
 8016b42:	2200      	movs	r2, #0
 8016b44:	701a      	strb	r2, [r3, #0]
 8016b46:	b01c      	add	sp, #112	; 0x70
 8016b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b4c:	b003      	add	sp, #12
 8016b4e:	4770      	bx	lr
 8016b50:	200000dc 	.word	0x200000dc
 8016b54:	ffff0208 	.word	0xffff0208

08016b58 <siscanf>:
 8016b58:	b40e      	push	{r1, r2, r3}
 8016b5a:	b510      	push	{r4, lr}
 8016b5c:	b09f      	sub	sp, #124	; 0x7c
 8016b5e:	ac21      	add	r4, sp, #132	; 0x84
 8016b60:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016b64:	f854 2b04 	ldr.w	r2, [r4], #4
 8016b68:	9201      	str	r2, [sp, #4]
 8016b6a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016b6e:	9004      	str	r0, [sp, #16]
 8016b70:	9008      	str	r0, [sp, #32]
 8016b72:	f7e9 fb3d 	bl	80001f0 <strlen>
 8016b76:	4b0c      	ldr	r3, [pc, #48]	; (8016ba8 <siscanf+0x50>)
 8016b78:	9005      	str	r0, [sp, #20]
 8016b7a:	9009      	str	r0, [sp, #36]	; 0x24
 8016b7c:	930d      	str	r3, [sp, #52]	; 0x34
 8016b7e:	480b      	ldr	r0, [pc, #44]	; (8016bac <siscanf+0x54>)
 8016b80:	9a01      	ldr	r2, [sp, #4]
 8016b82:	6800      	ldr	r0, [r0, #0]
 8016b84:	9403      	str	r4, [sp, #12]
 8016b86:	2300      	movs	r3, #0
 8016b88:	9311      	str	r3, [sp, #68]	; 0x44
 8016b8a:	9316      	str	r3, [sp, #88]	; 0x58
 8016b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016b94:	a904      	add	r1, sp, #16
 8016b96:	4623      	mov	r3, r4
 8016b98:	f003 fad8 	bl	801a14c <__ssvfiscanf_r>
 8016b9c:	b01f      	add	sp, #124	; 0x7c
 8016b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ba2:	b003      	add	sp, #12
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop
 8016ba8:	08016bd3 	.word	0x08016bd3
 8016bac:	200000dc 	.word	0x200000dc

08016bb0 <__sread>:
 8016bb0:	b510      	push	{r4, lr}
 8016bb2:	460c      	mov	r4, r1
 8016bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bb8:	f003 fee6 	bl	801a988 <_read_r>
 8016bbc:	2800      	cmp	r0, #0
 8016bbe:	bfab      	itete	ge
 8016bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8016bc4:	181b      	addge	r3, r3, r0
 8016bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016bca:	bfac      	ite	ge
 8016bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8016bce:	81a3      	strhlt	r3, [r4, #12]
 8016bd0:	bd10      	pop	{r4, pc}

08016bd2 <__seofread>:
 8016bd2:	2000      	movs	r0, #0
 8016bd4:	4770      	bx	lr

08016bd6 <__swrite>:
 8016bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bda:	461f      	mov	r7, r3
 8016bdc:	898b      	ldrh	r3, [r1, #12]
 8016bde:	05db      	lsls	r3, r3, #23
 8016be0:	4605      	mov	r5, r0
 8016be2:	460c      	mov	r4, r1
 8016be4:	4616      	mov	r6, r2
 8016be6:	d505      	bpl.n	8016bf4 <__swrite+0x1e>
 8016be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bec:	2302      	movs	r3, #2
 8016bee:	2200      	movs	r2, #0
 8016bf0:	f002 fb72 	bl	80192d8 <_lseek_r>
 8016bf4:	89a3      	ldrh	r3, [r4, #12]
 8016bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016bfe:	81a3      	strh	r3, [r4, #12]
 8016c00:	4632      	mov	r2, r6
 8016c02:	463b      	mov	r3, r7
 8016c04:	4628      	mov	r0, r5
 8016c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c0a:	f000 bff7 	b.w	8017bfc <_write_r>

08016c0e <__sseek>:
 8016c0e:	b510      	push	{r4, lr}
 8016c10:	460c      	mov	r4, r1
 8016c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c16:	f002 fb5f 	bl	80192d8 <_lseek_r>
 8016c1a:	1c43      	adds	r3, r0, #1
 8016c1c:	89a3      	ldrh	r3, [r4, #12]
 8016c1e:	bf15      	itete	ne
 8016c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c2a:	81a3      	strheq	r3, [r4, #12]
 8016c2c:	bf18      	it	ne
 8016c2e:	81a3      	strhne	r3, [r4, #12]
 8016c30:	bd10      	pop	{r4, pc}

08016c32 <__sclose>:
 8016c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c36:	f001 b87f 	b.w	8017d38 <_close_r>

08016c3a <strcpy>:
 8016c3a:	4603      	mov	r3, r0
 8016c3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c40:	f803 2b01 	strb.w	r2, [r3], #1
 8016c44:	2a00      	cmp	r2, #0
 8016c46:	d1f9      	bne.n	8016c3c <strcpy+0x2>
 8016c48:	4770      	bx	lr

08016c4a <strncmp>:
 8016c4a:	b510      	push	{r4, lr}
 8016c4c:	b16a      	cbz	r2, 8016c6a <strncmp+0x20>
 8016c4e:	3901      	subs	r1, #1
 8016c50:	1884      	adds	r4, r0, r2
 8016c52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016c56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016c5a:	4293      	cmp	r3, r2
 8016c5c:	d103      	bne.n	8016c66 <strncmp+0x1c>
 8016c5e:	42a0      	cmp	r0, r4
 8016c60:	d001      	beq.n	8016c66 <strncmp+0x1c>
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d1f5      	bne.n	8016c52 <strncmp+0x8>
 8016c66:	1a98      	subs	r0, r3, r2
 8016c68:	bd10      	pop	{r4, pc}
 8016c6a:	4610      	mov	r0, r2
 8016c6c:	e7fc      	b.n	8016c68 <strncmp+0x1e>

08016c6e <sulp>:
 8016c6e:	b570      	push	{r4, r5, r6, lr}
 8016c70:	4604      	mov	r4, r0
 8016c72:	460d      	mov	r5, r1
 8016c74:	ec45 4b10 	vmov	d0, r4, r5
 8016c78:	4616      	mov	r6, r2
 8016c7a:	f002 ff2d 	bl	8019ad8 <__ulp>
 8016c7e:	ec51 0b10 	vmov	r0, r1, d0
 8016c82:	b17e      	cbz	r6, 8016ca4 <sulp+0x36>
 8016c84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016c88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	dd09      	ble.n	8016ca4 <sulp+0x36>
 8016c90:	051b      	lsls	r3, r3, #20
 8016c92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016c96:	2400      	movs	r4, #0
 8016c98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016c9c:	4622      	mov	r2, r4
 8016c9e:	462b      	mov	r3, r5
 8016ca0:	f7e9 fcba 	bl	8000618 <__aeabi_dmul>
 8016ca4:	bd70      	pop	{r4, r5, r6, pc}
	...

08016ca8 <_strtod_l>:
 8016ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cac:	b0a3      	sub	sp, #140	; 0x8c
 8016cae:	461f      	mov	r7, r3
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	931e      	str	r3, [sp, #120]	; 0x78
 8016cb4:	4ba4      	ldr	r3, [pc, #656]	; (8016f48 <_strtod_l+0x2a0>)
 8016cb6:	9219      	str	r2, [sp, #100]	; 0x64
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	9307      	str	r3, [sp, #28]
 8016cbc:	4604      	mov	r4, r0
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	4688      	mov	r8, r1
 8016cc2:	f7e9 fa95 	bl	80001f0 <strlen>
 8016cc6:	f04f 0a00 	mov.w	sl, #0
 8016cca:	4605      	mov	r5, r0
 8016ccc:	f04f 0b00 	mov.w	fp, #0
 8016cd0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016cd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016cd6:	781a      	ldrb	r2, [r3, #0]
 8016cd8:	2a2b      	cmp	r2, #43	; 0x2b
 8016cda:	d04c      	beq.n	8016d76 <_strtod_l+0xce>
 8016cdc:	d839      	bhi.n	8016d52 <_strtod_l+0xaa>
 8016cde:	2a0d      	cmp	r2, #13
 8016ce0:	d832      	bhi.n	8016d48 <_strtod_l+0xa0>
 8016ce2:	2a08      	cmp	r2, #8
 8016ce4:	d832      	bhi.n	8016d4c <_strtod_l+0xa4>
 8016ce6:	2a00      	cmp	r2, #0
 8016ce8:	d03c      	beq.n	8016d64 <_strtod_l+0xbc>
 8016cea:	2300      	movs	r3, #0
 8016cec:	930e      	str	r3, [sp, #56]	; 0x38
 8016cee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016cf0:	7833      	ldrb	r3, [r6, #0]
 8016cf2:	2b30      	cmp	r3, #48	; 0x30
 8016cf4:	f040 80b4 	bne.w	8016e60 <_strtod_l+0x1b8>
 8016cf8:	7873      	ldrb	r3, [r6, #1]
 8016cfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016cfe:	2b58      	cmp	r3, #88	; 0x58
 8016d00:	d16c      	bne.n	8016ddc <_strtod_l+0x134>
 8016d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d04:	9301      	str	r3, [sp, #4]
 8016d06:	ab1e      	add	r3, sp, #120	; 0x78
 8016d08:	9702      	str	r7, [sp, #8]
 8016d0a:	9300      	str	r3, [sp, #0]
 8016d0c:	4a8f      	ldr	r2, [pc, #572]	; (8016f4c <_strtod_l+0x2a4>)
 8016d0e:	ab1f      	add	r3, sp, #124	; 0x7c
 8016d10:	a91d      	add	r1, sp, #116	; 0x74
 8016d12:	4620      	mov	r0, r4
 8016d14:	f001 ffd4 	bl	8018cc0 <__gethex>
 8016d18:	f010 0707 	ands.w	r7, r0, #7
 8016d1c:	4605      	mov	r5, r0
 8016d1e:	d005      	beq.n	8016d2c <_strtod_l+0x84>
 8016d20:	2f06      	cmp	r7, #6
 8016d22:	d12a      	bne.n	8016d7a <_strtod_l+0xd2>
 8016d24:	3601      	adds	r6, #1
 8016d26:	2300      	movs	r3, #0
 8016d28:	961d      	str	r6, [sp, #116]	; 0x74
 8016d2a:	930e      	str	r3, [sp, #56]	; 0x38
 8016d2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	f040 8596 	bne.w	8017860 <_strtod_l+0xbb8>
 8016d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d36:	b1db      	cbz	r3, 8016d70 <_strtod_l+0xc8>
 8016d38:	4652      	mov	r2, sl
 8016d3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016d3e:	ec43 2b10 	vmov	d0, r2, r3
 8016d42:	b023      	add	sp, #140	; 0x8c
 8016d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d48:	2a20      	cmp	r2, #32
 8016d4a:	d1ce      	bne.n	8016cea <_strtod_l+0x42>
 8016d4c:	3301      	adds	r3, #1
 8016d4e:	931d      	str	r3, [sp, #116]	; 0x74
 8016d50:	e7c0      	b.n	8016cd4 <_strtod_l+0x2c>
 8016d52:	2a2d      	cmp	r2, #45	; 0x2d
 8016d54:	d1c9      	bne.n	8016cea <_strtod_l+0x42>
 8016d56:	2201      	movs	r2, #1
 8016d58:	920e      	str	r2, [sp, #56]	; 0x38
 8016d5a:	1c5a      	adds	r2, r3, #1
 8016d5c:	921d      	str	r2, [sp, #116]	; 0x74
 8016d5e:	785b      	ldrb	r3, [r3, #1]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d1c4      	bne.n	8016cee <_strtod_l+0x46>
 8016d64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016d66:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	f040 8576 	bne.w	801785c <_strtod_l+0xbb4>
 8016d70:	4652      	mov	r2, sl
 8016d72:	465b      	mov	r3, fp
 8016d74:	e7e3      	b.n	8016d3e <_strtod_l+0x96>
 8016d76:	2200      	movs	r2, #0
 8016d78:	e7ee      	b.n	8016d58 <_strtod_l+0xb0>
 8016d7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016d7c:	b13a      	cbz	r2, 8016d8e <_strtod_l+0xe6>
 8016d7e:	2135      	movs	r1, #53	; 0x35
 8016d80:	a820      	add	r0, sp, #128	; 0x80
 8016d82:	f002 ffb4 	bl	8019cee <__copybits>
 8016d86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8016d88:	4620      	mov	r0, r4
 8016d8a:	f002 fb79 	bl	8019480 <_Bfree>
 8016d8e:	3f01      	subs	r7, #1
 8016d90:	2f05      	cmp	r7, #5
 8016d92:	d807      	bhi.n	8016da4 <_strtod_l+0xfc>
 8016d94:	e8df f007 	tbb	[pc, r7]
 8016d98:	1d180b0e 	.word	0x1d180b0e
 8016d9c:	030e      	.short	0x030e
 8016d9e:	f04f 0b00 	mov.w	fp, #0
 8016da2:	46da      	mov	sl, fp
 8016da4:	0728      	lsls	r0, r5, #28
 8016da6:	d5c1      	bpl.n	8016d2c <_strtod_l+0x84>
 8016da8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016dac:	e7be      	b.n	8016d2c <_strtod_l+0x84>
 8016dae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8016db2:	e7f7      	b.n	8016da4 <_strtod_l+0xfc>
 8016db4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8016db8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016dba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016dbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016dc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016dc6:	e7ed      	b.n	8016da4 <_strtod_l+0xfc>
 8016dc8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8016f50 <_strtod_l+0x2a8>
 8016dcc:	f04f 0a00 	mov.w	sl, #0
 8016dd0:	e7e8      	b.n	8016da4 <_strtod_l+0xfc>
 8016dd2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016dd6:	f04f 3aff 	mov.w	sl, #4294967295
 8016dda:	e7e3      	b.n	8016da4 <_strtod_l+0xfc>
 8016ddc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016dde:	1c5a      	adds	r2, r3, #1
 8016de0:	921d      	str	r2, [sp, #116]	; 0x74
 8016de2:	785b      	ldrb	r3, [r3, #1]
 8016de4:	2b30      	cmp	r3, #48	; 0x30
 8016de6:	d0f9      	beq.n	8016ddc <_strtod_l+0x134>
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d09f      	beq.n	8016d2c <_strtod_l+0x84>
 8016dec:	2301      	movs	r3, #1
 8016dee:	f04f 0900 	mov.w	r9, #0
 8016df2:	9304      	str	r3, [sp, #16]
 8016df4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016df6:	930a      	str	r3, [sp, #40]	; 0x28
 8016df8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016dfc:	464f      	mov	r7, r9
 8016dfe:	220a      	movs	r2, #10
 8016e00:	981d      	ldr	r0, [sp, #116]	; 0x74
 8016e02:	7806      	ldrb	r6, [r0, #0]
 8016e04:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8016e08:	b2d9      	uxtb	r1, r3
 8016e0a:	2909      	cmp	r1, #9
 8016e0c:	d92a      	bls.n	8016e64 <_strtod_l+0x1bc>
 8016e0e:	9907      	ldr	r1, [sp, #28]
 8016e10:	462a      	mov	r2, r5
 8016e12:	f7ff ff1a 	bl	8016c4a <strncmp>
 8016e16:	b398      	cbz	r0, 8016e80 <_strtod_l+0x1d8>
 8016e18:	2000      	movs	r0, #0
 8016e1a:	4633      	mov	r3, r6
 8016e1c:	463d      	mov	r5, r7
 8016e1e:	9007      	str	r0, [sp, #28]
 8016e20:	4602      	mov	r2, r0
 8016e22:	2b65      	cmp	r3, #101	; 0x65
 8016e24:	d001      	beq.n	8016e2a <_strtod_l+0x182>
 8016e26:	2b45      	cmp	r3, #69	; 0x45
 8016e28:	d118      	bne.n	8016e5c <_strtod_l+0x1b4>
 8016e2a:	b91d      	cbnz	r5, 8016e34 <_strtod_l+0x18c>
 8016e2c:	9b04      	ldr	r3, [sp, #16]
 8016e2e:	4303      	orrs	r3, r0
 8016e30:	d098      	beq.n	8016d64 <_strtod_l+0xbc>
 8016e32:	2500      	movs	r5, #0
 8016e34:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8016e38:	f108 0301 	add.w	r3, r8, #1
 8016e3c:	931d      	str	r3, [sp, #116]	; 0x74
 8016e3e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016e42:	2b2b      	cmp	r3, #43	; 0x2b
 8016e44:	d075      	beq.n	8016f32 <_strtod_l+0x28a>
 8016e46:	2b2d      	cmp	r3, #45	; 0x2d
 8016e48:	d07b      	beq.n	8016f42 <_strtod_l+0x29a>
 8016e4a:	f04f 0c00 	mov.w	ip, #0
 8016e4e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016e52:	2909      	cmp	r1, #9
 8016e54:	f240 8082 	bls.w	8016f5c <_strtod_l+0x2b4>
 8016e58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8016e5c:	2600      	movs	r6, #0
 8016e5e:	e09d      	b.n	8016f9c <_strtod_l+0x2f4>
 8016e60:	2300      	movs	r3, #0
 8016e62:	e7c4      	b.n	8016dee <_strtod_l+0x146>
 8016e64:	2f08      	cmp	r7, #8
 8016e66:	bfd8      	it	le
 8016e68:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016e6a:	f100 0001 	add.w	r0, r0, #1
 8016e6e:	bfda      	itte	le
 8016e70:	fb02 3301 	mlale	r3, r2, r1, r3
 8016e74:	9309      	strle	r3, [sp, #36]	; 0x24
 8016e76:	fb02 3909 	mlagt	r9, r2, r9, r3
 8016e7a:	3701      	adds	r7, #1
 8016e7c:	901d      	str	r0, [sp, #116]	; 0x74
 8016e7e:	e7bf      	b.n	8016e00 <_strtod_l+0x158>
 8016e80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016e82:	195a      	adds	r2, r3, r5
 8016e84:	921d      	str	r2, [sp, #116]	; 0x74
 8016e86:	5d5b      	ldrb	r3, [r3, r5]
 8016e88:	2f00      	cmp	r7, #0
 8016e8a:	d037      	beq.n	8016efc <_strtod_l+0x254>
 8016e8c:	9007      	str	r0, [sp, #28]
 8016e8e:	463d      	mov	r5, r7
 8016e90:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016e94:	2a09      	cmp	r2, #9
 8016e96:	d912      	bls.n	8016ebe <_strtod_l+0x216>
 8016e98:	2201      	movs	r2, #1
 8016e9a:	e7c2      	b.n	8016e22 <_strtod_l+0x17a>
 8016e9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016e9e:	1c5a      	adds	r2, r3, #1
 8016ea0:	921d      	str	r2, [sp, #116]	; 0x74
 8016ea2:	785b      	ldrb	r3, [r3, #1]
 8016ea4:	3001      	adds	r0, #1
 8016ea6:	2b30      	cmp	r3, #48	; 0x30
 8016ea8:	d0f8      	beq.n	8016e9c <_strtod_l+0x1f4>
 8016eaa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016eae:	2a08      	cmp	r2, #8
 8016eb0:	f200 84db 	bhi.w	801786a <_strtod_l+0xbc2>
 8016eb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016eb6:	9007      	str	r0, [sp, #28]
 8016eb8:	2000      	movs	r0, #0
 8016eba:	920a      	str	r2, [sp, #40]	; 0x28
 8016ebc:	4605      	mov	r5, r0
 8016ebe:	3b30      	subs	r3, #48	; 0x30
 8016ec0:	f100 0201 	add.w	r2, r0, #1
 8016ec4:	d014      	beq.n	8016ef0 <_strtod_l+0x248>
 8016ec6:	9907      	ldr	r1, [sp, #28]
 8016ec8:	4411      	add	r1, r2
 8016eca:	9107      	str	r1, [sp, #28]
 8016ecc:	462a      	mov	r2, r5
 8016ece:	eb00 0e05 	add.w	lr, r0, r5
 8016ed2:	210a      	movs	r1, #10
 8016ed4:	4572      	cmp	r2, lr
 8016ed6:	d113      	bne.n	8016f00 <_strtod_l+0x258>
 8016ed8:	182a      	adds	r2, r5, r0
 8016eda:	2a08      	cmp	r2, #8
 8016edc:	f105 0501 	add.w	r5, r5, #1
 8016ee0:	4405      	add	r5, r0
 8016ee2:	dc1c      	bgt.n	8016f1e <_strtod_l+0x276>
 8016ee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016ee6:	220a      	movs	r2, #10
 8016ee8:	fb02 3301 	mla	r3, r2, r1, r3
 8016eec:	9309      	str	r3, [sp, #36]	; 0x24
 8016eee:	2200      	movs	r2, #0
 8016ef0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016ef2:	1c59      	adds	r1, r3, #1
 8016ef4:	911d      	str	r1, [sp, #116]	; 0x74
 8016ef6:	785b      	ldrb	r3, [r3, #1]
 8016ef8:	4610      	mov	r0, r2
 8016efa:	e7c9      	b.n	8016e90 <_strtod_l+0x1e8>
 8016efc:	4638      	mov	r0, r7
 8016efe:	e7d2      	b.n	8016ea6 <_strtod_l+0x1fe>
 8016f00:	2a08      	cmp	r2, #8
 8016f02:	dc04      	bgt.n	8016f0e <_strtod_l+0x266>
 8016f04:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8016f06:	434e      	muls	r6, r1
 8016f08:	9609      	str	r6, [sp, #36]	; 0x24
 8016f0a:	3201      	adds	r2, #1
 8016f0c:	e7e2      	b.n	8016ed4 <_strtod_l+0x22c>
 8016f0e:	f102 0c01 	add.w	ip, r2, #1
 8016f12:	f1bc 0f10 	cmp.w	ip, #16
 8016f16:	bfd8      	it	le
 8016f18:	fb01 f909 	mulle.w	r9, r1, r9
 8016f1c:	e7f5      	b.n	8016f0a <_strtod_l+0x262>
 8016f1e:	2d10      	cmp	r5, #16
 8016f20:	bfdc      	itt	le
 8016f22:	220a      	movle	r2, #10
 8016f24:	fb02 3909 	mlale	r9, r2, r9, r3
 8016f28:	e7e1      	b.n	8016eee <_strtod_l+0x246>
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	9307      	str	r3, [sp, #28]
 8016f2e:	2201      	movs	r2, #1
 8016f30:	e77c      	b.n	8016e2c <_strtod_l+0x184>
 8016f32:	f04f 0c00 	mov.w	ip, #0
 8016f36:	f108 0302 	add.w	r3, r8, #2
 8016f3a:	931d      	str	r3, [sp, #116]	; 0x74
 8016f3c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016f40:	e785      	b.n	8016e4e <_strtod_l+0x1a6>
 8016f42:	f04f 0c01 	mov.w	ip, #1
 8016f46:	e7f6      	b.n	8016f36 <_strtod_l+0x28e>
 8016f48:	0801c204 	.word	0x0801c204
 8016f4c:	0801c078 	.word	0x0801c078
 8016f50:	7ff00000 	.word	0x7ff00000
 8016f54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f56:	1c59      	adds	r1, r3, #1
 8016f58:	911d      	str	r1, [sp, #116]	; 0x74
 8016f5a:	785b      	ldrb	r3, [r3, #1]
 8016f5c:	2b30      	cmp	r3, #48	; 0x30
 8016f5e:	d0f9      	beq.n	8016f54 <_strtod_l+0x2ac>
 8016f60:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8016f64:	2908      	cmp	r1, #8
 8016f66:	f63f af79 	bhi.w	8016e5c <_strtod_l+0x1b4>
 8016f6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016f6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f70:	9308      	str	r3, [sp, #32]
 8016f72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016f74:	1c59      	adds	r1, r3, #1
 8016f76:	911d      	str	r1, [sp, #116]	; 0x74
 8016f78:	785b      	ldrb	r3, [r3, #1]
 8016f7a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8016f7e:	2e09      	cmp	r6, #9
 8016f80:	d937      	bls.n	8016ff2 <_strtod_l+0x34a>
 8016f82:	9e08      	ldr	r6, [sp, #32]
 8016f84:	1b89      	subs	r1, r1, r6
 8016f86:	2908      	cmp	r1, #8
 8016f88:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8016f8c:	dc02      	bgt.n	8016f94 <_strtod_l+0x2ec>
 8016f8e:	4576      	cmp	r6, lr
 8016f90:	bfa8      	it	ge
 8016f92:	4676      	movge	r6, lr
 8016f94:	f1bc 0f00 	cmp.w	ip, #0
 8016f98:	d000      	beq.n	8016f9c <_strtod_l+0x2f4>
 8016f9a:	4276      	negs	r6, r6
 8016f9c:	2d00      	cmp	r5, #0
 8016f9e:	d14f      	bne.n	8017040 <_strtod_l+0x398>
 8016fa0:	9904      	ldr	r1, [sp, #16]
 8016fa2:	4301      	orrs	r1, r0
 8016fa4:	f47f aec2 	bne.w	8016d2c <_strtod_l+0x84>
 8016fa8:	2a00      	cmp	r2, #0
 8016faa:	f47f aedb 	bne.w	8016d64 <_strtod_l+0xbc>
 8016fae:	2b69      	cmp	r3, #105	; 0x69
 8016fb0:	d027      	beq.n	8017002 <_strtod_l+0x35a>
 8016fb2:	dc24      	bgt.n	8016ffe <_strtod_l+0x356>
 8016fb4:	2b49      	cmp	r3, #73	; 0x49
 8016fb6:	d024      	beq.n	8017002 <_strtod_l+0x35a>
 8016fb8:	2b4e      	cmp	r3, #78	; 0x4e
 8016fba:	f47f aed3 	bne.w	8016d64 <_strtod_l+0xbc>
 8016fbe:	499e      	ldr	r1, [pc, #632]	; (8017238 <_strtod_l+0x590>)
 8016fc0:	a81d      	add	r0, sp, #116	; 0x74
 8016fc2:	f002 f8d5 	bl	8019170 <__match>
 8016fc6:	2800      	cmp	r0, #0
 8016fc8:	f43f aecc 	beq.w	8016d64 <_strtod_l+0xbc>
 8016fcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016fce:	781b      	ldrb	r3, [r3, #0]
 8016fd0:	2b28      	cmp	r3, #40	; 0x28
 8016fd2:	d12d      	bne.n	8017030 <_strtod_l+0x388>
 8016fd4:	4999      	ldr	r1, [pc, #612]	; (801723c <_strtod_l+0x594>)
 8016fd6:	aa20      	add	r2, sp, #128	; 0x80
 8016fd8:	a81d      	add	r0, sp, #116	; 0x74
 8016fda:	f002 f8dd 	bl	8019198 <__hexnan>
 8016fde:	2805      	cmp	r0, #5
 8016fe0:	d126      	bne.n	8017030 <_strtod_l+0x388>
 8016fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016fe4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8016fe8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016fec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016ff0:	e69c      	b.n	8016d2c <_strtod_l+0x84>
 8016ff2:	210a      	movs	r1, #10
 8016ff4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016ff8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016ffc:	e7b9      	b.n	8016f72 <_strtod_l+0x2ca>
 8016ffe:	2b6e      	cmp	r3, #110	; 0x6e
 8017000:	e7db      	b.n	8016fba <_strtod_l+0x312>
 8017002:	498f      	ldr	r1, [pc, #572]	; (8017240 <_strtod_l+0x598>)
 8017004:	a81d      	add	r0, sp, #116	; 0x74
 8017006:	f002 f8b3 	bl	8019170 <__match>
 801700a:	2800      	cmp	r0, #0
 801700c:	f43f aeaa 	beq.w	8016d64 <_strtod_l+0xbc>
 8017010:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017012:	498c      	ldr	r1, [pc, #560]	; (8017244 <_strtod_l+0x59c>)
 8017014:	3b01      	subs	r3, #1
 8017016:	a81d      	add	r0, sp, #116	; 0x74
 8017018:	931d      	str	r3, [sp, #116]	; 0x74
 801701a:	f002 f8a9 	bl	8019170 <__match>
 801701e:	b910      	cbnz	r0, 8017026 <_strtod_l+0x37e>
 8017020:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017022:	3301      	adds	r3, #1
 8017024:	931d      	str	r3, [sp, #116]	; 0x74
 8017026:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017254 <_strtod_l+0x5ac>
 801702a:	f04f 0a00 	mov.w	sl, #0
 801702e:	e67d      	b.n	8016d2c <_strtod_l+0x84>
 8017030:	4885      	ldr	r0, [pc, #532]	; (8017248 <_strtod_l+0x5a0>)
 8017032:	f7fe fa7d 	bl	8015530 <nan>
 8017036:	ed8d 0b04 	vstr	d0, [sp, #16]
 801703a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801703e:	e675      	b.n	8016d2c <_strtod_l+0x84>
 8017040:	9b07      	ldr	r3, [sp, #28]
 8017042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017044:	1af3      	subs	r3, r6, r3
 8017046:	2f00      	cmp	r7, #0
 8017048:	bf08      	it	eq
 801704a:	462f      	moveq	r7, r5
 801704c:	2d10      	cmp	r5, #16
 801704e:	9308      	str	r3, [sp, #32]
 8017050:	46a8      	mov	r8, r5
 8017052:	bfa8      	it	ge
 8017054:	f04f 0810 	movge.w	r8, #16
 8017058:	f7e9 fa64 	bl	8000524 <__aeabi_ui2d>
 801705c:	2d09      	cmp	r5, #9
 801705e:	4682      	mov	sl, r0
 8017060:	468b      	mov	fp, r1
 8017062:	dd13      	ble.n	801708c <_strtod_l+0x3e4>
 8017064:	4b79      	ldr	r3, [pc, #484]	; (801724c <_strtod_l+0x5a4>)
 8017066:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801706a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801706e:	f7e9 fad3 	bl	8000618 <__aeabi_dmul>
 8017072:	4682      	mov	sl, r0
 8017074:	4648      	mov	r0, r9
 8017076:	468b      	mov	fp, r1
 8017078:	f7e9 fa54 	bl	8000524 <__aeabi_ui2d>
 801707c:	4602      	mov	r2, r0
 801707e:	460b      	mov	r3, r1
 8017080:	4650      	mov	r0, sl
 8017082:	4659      	mov	r1, fp
 8017084:	f7e9 f912 	bl	80002ac <__adddf3>
 8017088:	4682      	mov	sl, r0
 801708a:	468b      	mov	fp, r1
 801708c:	2d0f      	cmp	r5, #15
 801708e:	dc38      	bgt.n	8017102 <_strtod_l+0x45a>
 8017090:	9b08      	ldr	r3, [sp, #32]
 8017092:	2b00      	cmp	r3, #0
 8017094:	f43f ae4a 	beq.w	8016d2c <_strtod_l+0x84>
 8017098:	dd24      	ble.n	80170e4 <_strtod_l+0x43c>
 801709a:	2b16      	cmp	r3, #22
 801709c:	dc0b      	bgt.n	80170b6 <_strtod_l+0x40e>
 801709e:	4d6b      	ldr	r5, [pc, #428]	; (801724c <_strtod_l+0x5a4>)
 80170a0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80170a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80170a8:	4652      	mov	r2, sl
 80170aa:	465b      	mov	r3, fp
 80170ac:	f7e9 fab4 	bl	8000618 <__aeabi_dmul>
 80170b0:	4682      	mov	sl, r0
 80170b2:	468b      	mov	fp, r1
 80170b4:	e63a      	b.n	8016d2c <_strtod_l+0x84>
 80170b6:	9a08      	ldr	r2, [sp, #32]
 80170b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80170bc:	4293      	cmp	r3, r2
 80170be:	db20      	blt.n	8017102 <_strtod_l+0x45a>
 80170c0:	4c62      	ldr	r4, [pc, #392]	; (801724c <_strtod_l+0x5a4>)
 80170c2:	f1c5 050f 	rsb	r5, r5, #15
 80170c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80170ca:	4652      	mov	r2, sl
 80170cc:	465b      	mov	r3, fp
 80170ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80170d2:	f7e9 faa1 	bl	8000618 <__aeabi_dmul>
 80170d6:	9b08      	ldr	r3, [sp, #32]
 80170d8:	1b5d      	subs	r5, r3, r5
 80170da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80170de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80170e2:	e7e3      	b.n	80170ac <_strtod_l+0x404>
 80170e4:	9b08      	ldr	r3, [sp, #32]
 80170e6:	3316      	adds	r3, #22
 80170e8:	db0b      	blt.n	8017102 <_strtod_l+0x45a>
 80170ea:	9b07      	ldr	r3, [sp, #28]
 80170ec:	4a57      	ldr	r2, [pc, #348]	; (801724c <_strtod_l+0x5a4>)
 80170ee:	1b9e      	subs	r6, r3, r6
 80170f0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80170f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80170f8:	4650      	mov	r0, sl
 80170fa:	4659      	mov	r1, fp
 80170fc:	f7e9 fbb6 	bl	800086c <__aeabi_ddiv>
 8017100:	e7d6      	b.n	80170b0 <_strtod_l+0x408>
 8017102:	9b08      	ldr	r3, [sp, #32]
 8017104:	eba5 0808 	sub.w	r8, r5, r8
 8017108:	4498      	add	r8, r3
 801710a:	f1b8 0f00 	cmp.w	r8, #0
 801710e:	dd71      	ble.n	80171f4 <_strtod_l+0x54c>
 8017110:	f018 030f 	ands.w	r3, r8, #15
 8017114:	d00a      	beq.n	801712c <_strtod_l+0x484>
 8017116:	494d      	ldr	r1, [pc, #308]	; (801724c <_strtod_l+0x5a4>)
 8017118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801711c:	4652      	mov	r2, sl
 801711e:	465b      	mov	r3, fp
 8017120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017124:	f7e9 fa78 	bl	8000618 <__aeabi_dmul>
 8017128:	4682      	mov	sl, r0
 801712a:	468b      	mov	fp, r1
 801712c:	f038 080f 	bics.w	r8, r8, #15
 8017130:	d04d      	beq.n	80171ce <_strtod_l+0x526>
 8017132:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017136:	dd22      	ble.n	801717e <_strtod_l+0x4d6>
 8017138:	2500      	movs	r5, #0
 801713a:	462e      	mov	r6, r5
 801713c:	9509      	str	r5, [sp, #36]	; 0x24
 801713e:	9507      	str	r5, [sp, #28]
 8017140:	2322      	movs	r3, #34	; 0x22
 8017142:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017254 <_strtod_l+0x5ac>
 8017146:	6023      	str	r3, [r4, #0]
 8017148:	f04f 0a00 	mov.w	sl, #0
 801714c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801714e:	2b00      	cmp	r3, #0
 8017150:	f43f adec 	beq.w	8016d2c <_strtod_l+0x84>
 8017154:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017156:	4620      	mov	r0, r4
 8017158:	f002 f992 	bl	8019480 <_Bfree>
 801715c:	9907      	ldr	r1, [sp, #28]
 801715e:	4620      	mov	r0, r4
 8017160:	f002 f98e 	bl	8019480 <_Bfree>
 8017164:	4631      	mov	r1, r6
 8017166:	4620      	mov	r0, r4
 8017168:	f002 f98a 	bl	8019480 <_Bfree>
 801716c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801716e:	4620      	mov	r0, r4
 8017170:	f002 f986 	bl	8019480 <_Bfree>
 8017174:	4629      	mov	r1, r5
 8017176:	4620      	mov	r0, r4
 8017178:	f002 f982 	bl	8019480 <_Bfree>
 801717c:	e5d6      	b.n	8016d2c <_strtod_l+0x84>
 801717e:	2300      	movs	r3, #0
 8017180:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017184:	4650      	mov	r0, sl
 8017186:	4659      	mov	r1, fp
 8017188:	4699      	mov	r9, r3
 801718a:	f1b8 0f01 	cmp.w	r8, #1
 801718e:	dc21      	bgt.n	80171d4 <_strtod_l+0x52c>
 8017190:	b10b      	cbz	r3, 8017196 <_strtod_l+0x4ee>
 8017192:	4682      	mov	sl, r0
 8017194:	468b      	mov	fp, r1
 8017196:	4b2e      	ldr	r3, [pc, #184]	; (8017250 <_strtod_l+0x5a8>)
 8017198:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801719c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80171a0:	4652      	mov	r2, sl
 80171a2:	465b      	mov	r3, fp
 80171a4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80171a8:	f7e9 fa36 	bl	8000618 <__aeabi_dmul>
 80171ac:	4b29      	ldr	r3, [pc, #164]	; (8017254 <_strtod_l+0x5ac>)
 80171ae:	460a      	mov	r2, r1
 80171b0:	400b      	ands	r3, r1
 80171b2:	4929      	ldr	r1, [pc, #164]	; (8017258 <_strtod_l+0x5b0>)
 80171b4:	428b      	cmp	r3, r1
 80171b6:	4682      	mov	sl, r0
 80171b8:	d8be      	bhi.n	8017138 <_strtod_l+0x490>
 80171ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80171be:	428b      	cmp	r3, r1
 80171c0:	bf86      	itte	hi
 80171c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801725c <_strtod_l+0x5b4>
 80171c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80171ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80171ce:	2300      	movs	r3, #0
 80171d0:	9304      	str	r3, [sp, #16]
 80171d2:	e081      	b.n	80172d8 <_strtod_l+0x630>
 80171d4:	f018 0f01 	tst.w	r8, #1
 80171d8:	d007      	beq.n	80171ea <_strtod_l+0x542>
 80171da:	4b1d      	ldr	r3, [pc, #116]	; (8017250 <_strtod_l+0x5a8>)
 80171dc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80171e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171e4:	f7e9 fa18 	bl	8000618 <__aeabi_dmul>
 80171e8:	2301      	movs	r3, #1
 80171ea:	f109 0901 	add.w	r9, r9, #1
 80171ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80171f2:	e7ca      	b.n	801718a <_strtod_l+0x4e2>
 80171f4:	d0eb      	beq.n	80171ce <_strtod_l+0x526>
 80171f6:	f1c8 0800 	rsb	r8, r8, #0
 80171fa:	f018 020f 	ands.w	r2, r8, #15
 80171fe:	d00a      	beq.n	8017216 <_strtod_l+0x56e>
 8017200:	4b12      	ldr	r3, [pc, #72]	; (801724c <_strtod_l+0x5a4>)
 8017202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017206:	4650      	mov	r0, sl
 8017208:	4659      	mov	r1, fp
 801720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801720e:	f7e9 fb2d 	bl	800086c <__aeabi_ddiv>
 8017212:	4682      	mov	sl, r0
 8017214:	468b      	mov	fp, r1
 8017216:	ea5f 1828 	movs.w	r8, r8, asr #4
 801721a:	d0d8      	beq.n	80171ce <_strtod_l+0x526>
 801721c:	f1b8 0f1f 	cmp.w	r8, #31
 8017220:	dd1e      	ble.n	8017260 <_strtod_l+0x5b8>
 8017222:	2500      	movs	r5, #0
 8017224:	462e      	mov	r6, r5
 8017226:	9509      	str	r5, [sp, #36]	; 0x24
 8017228:	9507      	str	r5, [sp, #28]
 801722a:	2322      	movs	r3, #34	; 0x22
 801722c:	f04f 0a00 	mov.w	sl, #0
 8017230:	f04f 0b00 	mov.w	fp, #0
 8017234:	6023      	str	r3, [r4, #0]
 8017236:	e789      	b.n	801714c <_strtod_l+0x4a4>
 8017238:	0801c04d 	.word	0x0801c04d
 801723c:	0801c08c 	.word	0x0801c08c
 8017240:	0801c045 	.word	0x0801c045
 8017244:	0801c107 	.word	0x0801c107
 8017248:	0801c103 	.word	0x0801c103
 801724c:	0801c2a0 	.word	0x0801c2a0
 8017250:	0801c278 	.word	0x0801c278
 8017254:	7ff00000 	.word	0x7ff00000
 8017258:	7ca00000 	.word	0x7ca00000
 801725c:	7fefffff 	.word	0x7fefffff
 8017260:	f018 0310 	ands.w	r3, r8, #16
 8017264:	bf18      	it	ne
 8017266:	236a      	movne	r3, #106	; 0x6a
 8017268:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017620 <_strtod_l+0x978>
 801726c:	9304      	str	r3, [sp, #16]
 801726e:	4650      	mov	r0, sl
 8017270:	4659      	mov	r1, fp
 8017272:	2300      	movs	r3, #0
 8017274:	f018 0f01 	tst.w	r8, #1
 8017278:	d004      	beq.n	8017284 <_strtod_l+0x5dc>
 801727a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801727e:	f7e9 f9cb 	bl	8000618 <__aeabi_dmul>
 8017282:	2301      	movs	r3, #1
 8017284:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017288:	f109 0908 	add.w	r9, r9, #8
 801728c:	d1f2      	bne.n	8017274 <_strtod_l+0x5cc>
 801728e:	b10b      	cbz	r3, 8017294 <_strtod_l+0x5ec>
 8017290:	4682      	mov	sl, r0
 8017292:	468b      	mov	fp, r1
 8017294:	9b04      	ldr	r3, [sp, #16]
 8017296:	b1bb      	cbz	r3, 80172c8 <_strtod_l+0x620>
 8017298:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801729c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	4659      	mov	r1, fp
 80172a4:	dd10      	ble.n	80172c8 <_strtod_l+0x620>
 80172a6:	2b1f      	cmp	r3, #31
 80172a8:	f340 8128 	ble.w	80174fc <_strtod_l+0x854>
 80172ac:	2b34      	cmp	r3, #52	; 0x34
 80172ae:	bfde      	ittt	le
 80172b0:	3b20      	suble	r3, #32
 80172b2:	f04f 32ff 	movle.w	r2, #4294967295
 80172b6:	fa02 f303 	lslle.w	r3, r2, r3
 80172ba:	f04f 0a00 	mov.w	sl, #0
 80172be:	bfcc      	ite	gt
 80172c0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80172c4:	ea03 0b01 	andle.w	fp, r3, r1
 80172c8:	2200      	movs	r2, #0
 80172ca:	2300      	movs	r3, #0
 80172cc:	4650      	mov	r0, sl
 80172ce:	4659      	mov	r1, fp
 80172d0:	f7e9 fc0a 	bl	8000ae8 <__aeabi_dcmpeq>
 80172d4:	2800      	cmp	r0, #0
 80172d6:	d1a4      	bne.n	8017222 <_strtod_l+0x57a>
 80172d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172da:	9300      	str	r3, [sp, #0]
 80172dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80172de:	462b      	mov	r3, r5
 80172e0:	463a      	mov	r2, r7
 80172e2:	4620      	mov	r0, r4
 80172e4:	f002 f938 	bl	8019558 <__s2b>
 80172e8:	9009      	str	r0, [sp, #36]	; 0x24
 80172ea:	2800      	cmp	r0, #0
 80172ec:	f43f af24 	beq.w	8017138 <_strtod_l+0x490>
 80172f0:	9b07      	ldr	r3, [sp, #28]
 80172f2:	1b9e      	subs	r6, r3, r6
 80172f4:	9b08      	ldr	r3, [sp, #32]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	bfb4      	ite	lt
 80172fa:	4633      	movlt	r3, r6
 80172fc:	2300      	movge	r3, #0
 80172fe:	9310      	str	r3, [sp, #64]	; 0x40
 8017300:	9b08      	ldr	r3, [sp, #32]
 8017302:	2500      	movs	r5, #0
 8017304:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017308:	9318      	str	r3, [sp, #96]	; 0x60
 801730a:	462e      	mov	r6, r5
 801730c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801730e:	4620      	mov	r0, r4
 8017310:	6859      	ldr	r1, [r3, #4]
 8017312:	f002 f875 	bl	8019400 <_Balloc>
 8017316:	9007      	str	r0, [sp, #28]
 8017318:	2800      	cmp	r0, #0
 801731a:	f43f af11 	beq.w	8017140 <_strtod_l+0x498>
 801731e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017320:	691a      	ldr	r2, [r3, #16]
 8017322:	3202      	adds	r2, #2
 8017324:	f103 010c 	add.w	r1, r3, #12
 8017328:	0092      	lsls	r2, r2, #2
 801732a:	300c      	adds	r0, #12
 801732c:	f7fe fb4e 	bl	80159cc <memcpy>
 8017330:	ec4b ab10 	vmov	d0, sl, fp
 8017334:	aa20      	add	r2, sp, #128	; 0x80
 8017336:	a91f      	add	r1, sp, #124	; 0x7c
 8017338:	4620      	mov	r0, r4
 801733a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801733e:	f002 fc47 	bl	8019bd0 <__d2b>
 8017342:	901e      	str	r0, [sp, #120]	; 0x78
 8017344:	2800      	cmp	r0, #0
 8017346:	f43f aefb 	beq.w	8017140 <_strtod_l+0x498>
 801734a:	2101      	movs	r1, #1
 801734c:	4620      	mov	r0, r4
 801734e:	f002 f99d 	bl	801968c <__i2b>
 8017352:	4606      	mov	r6, r0
 8017354:	2800      	cmp	r0, #0
 8017356:	f43f aef3 	beq.w	8017140 <_strtod_l+0x498>
 801735a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801735c:	9904      	ldr	r1, [sp, #16]
 801735e:	2b00      	cmp	r3, #0
 8017360:	bfab      	itete	ge
 8017362:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8017364:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8017366:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017368:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801736c:	bfac      	ite	ge
 801736e:	eb03 0902 	addge.w	r9, r3, r2
 8017372:	1ad7      	sublt	r7, r2, r3
 8017374:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017376:	eba3 0801 	sub.w	r8, r3, r1
 801737a:	4490      	add	r8, r2
 801737c:	4ba3      	ldr	r3, [pc, #652]	; (801760c <_strtod_l+0x964>)
 801737e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017382:	4598      	cmp	r8, r3
 8017384:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017388:	f280 80cc 	bge.w	8017524 <_strtod_l+0x87c>
 801738c:	eba3 0308 	sub.w	r3, r3, r8
 8017390:	2b1f      	cmp	r3, #31
 8017392:	eba2 0203 	sub.w	r2, r2, r3
 8017396:	f04f 0101 	mov.w	r1, #1
 801739a:	f300 80b6 	bgt.w	801750a <_strtod_l+0x862>
 801739e:	fa01 f303 	lsl.w	r3, r1, r3
 80173a2:	9311      	str	r3, [sp, #68]	; 0x44
 80173a4:	2300      	movs	r3, #0
 80173a6:	930c      	str	r3, [sp, #48]	; 0x30
 80173a8:	eb09 0802 	add.w	r8, r9, r2
 80173ac:	9b04      	ldr	r3, [sp, #16]
 80173ae:	45c1      	cmp	r9, r8
 80173b0:	4417      	add	r7, r2
 80173b2:	441f      	add	r7, r3
 80173b4:	464b      	mov	r3, r9
 80173b6:	bfa8      	it	ge
 80173b8:	4643      	movge	r3, r8
 80173ba:	42bb      	cmp	r3, r7
 80173bc:	bfa8      	it	ge
 80173be:	463b      	movge	r3, r7
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	bfc2      	ittt	gt
 80173c4:	eba8 0803 	subgt.w	r8, r8, r3
 80173c8:	1aff      	subgt	r7, r7, r3
 80173ca:	eba9 0903 	subgt.w	r9, r9, r3
 80173ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	dd17      	ble.n	8017404 <_strtod_l+0x75c>
 80173d4:	4631      	mov	r1, r6
 80173d6:	461a      	mov	r2, r3
 80173d8:	4620      	mov	r0, r4
 80173da:	f002 fa13 	bl	8019804 <__pow5mult>
 80173de:	4606      	mov	r6, r0
 80173e0:	2800      	cmp	r0, #0
 80173e2:	f43f aead 	beq.w	8017140 <_strtod_l+0x498>
 80173e6:	4601      	mov	r1, r0
 80173e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80173ea:	4620      	mov	r0, r4
 80173ec:	f002 f964 	bl	80196b8 <__multiply>
 80173f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80173f2:	2800      	cmp	r0, #0
 80173f4:	f43f aea4 	beq.w	8017140 <_strtod_l+0x498>
 80173f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80173fa:	4620      	mov	r0, r4
 80173fc:	f002 f840 	bl	8019480 <_Bfree>
 8017400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017402:	931e      	str	r3, [sp, #120]	; 0x78
 8017404:	f1b8 0f00 	cmp.w	r8, #0
 8017408:	f300 8091 	bgt.w	801752e <_strtod_l+0x886>
 801740c:	9b08      	ldr	r3, [sp, #32]
 801740e:	2b00      	cmp	r3, #0
 8017410:	dd08      	ble.n	8017424 <_strtod_l+0x77c>
 8017412:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017414:	9907      	ldr	r1, [sp, #28]
 8017416:	4620      	mov	r0, r4
 8017418:	f002 f9f4 	bl	8019804 <__pow5mult>
 801741c:	9007      	str	r0, [sp, #28]
 801741e:	2800      	cmp	r0, #0
 8017420:	f43f ae8e 	beq.w	8017140 <_strtod_l+0x498>
 8017424:	2f00      	cmp	r7, #0
 8017426:	dd08      	ble.n	801743a <_strtod_l+0x792>
 8017428:	9907      	ldr	r1, [sp, #28]
 801742a:	463a      	mov	r2, r7
 801742c:	4620      	mov	r0, r4
 801742e:	f002 fa43 	bl	80198b8 <__lshift>
 8017432:	9007      	str	r0, [sp, #28]
 8017434:	2800      	cmp	r0, #0
 8017436:	f43f ae83 	beq.w	8017140 <_strtod_l+0x498>
 801743a:	f1b9 0f00 	cmp.w	r9, #0
 801743e:	dd08      	ble.n	8017452 <_strtod_l+0x7aa>
 8017440:	4631      	mov	r1, r6
 8017442:	464a      	mov	r2, r9
 8017444:	4620      	mov	r0, r4
 8017446:	f002 fa37 	bl	80198b8 <__lshift>
 801744a:	4606      	mov	r6, r0
 801744c:	2800      	cmp	r0, #0
 801744e:	f43f ae77 	beq.w	8017140 <_strtod_l+0x498>
 8017452:	9a07      	ldr	r2, [sp, #28]
 8017454:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017456:	4620      	mov	r0, r4
 8017458:	f002 fab6 	bl	80199c8 <__mdiff>
 801745c:	4605      	mov	r5, r0
 801745e:	2800      	cmp	r0, #0
 8017460:	f43f ae6e 	beq.w	8017140 <_strtod_l+0x498>
 8017464:	68c3      	ldr	r3, [r0, #12]
 8017466:	930f      	str	r3, [sp, #60]	; 0x3c
 8017468:	2300      	movs	r3, #0
 801746a:	60c3      	str	r3, [r0, #12]
 801746c:	4631      	mov	r1, r6
 801746e:	f002 fa8f 	bl	8019990 <__mcmp>
 8017472:	2800      	cmp	r0, #0
 8017474:	da65      	bge.n	8017542 <_strtod_l+0x89a>
 8017476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017478:	ea53 030a 	orrs.w	r3, r3, sl
 801747c:	f040 8087 	bne.w	801758e <_strtod_l+0x8e6>
 8017480:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017484:	2b00      	cmp	r3, #0
 8017486:	f040 8082 	bne.w	801758e <_strtod_l+0x8e6>
 801748a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801748e:	0d1b      	lsrs	r3, r3, #20
 8017490:	051b      	lsls	r3, r3, #20
 8017492:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017496:	d97a      	bls.n	801758e <_strtod_l+0x8e6>
 8017498:	696b      	ldr	r3, [r5, #20]
 801749a:	b913      	cbnz	r3, 80174a2 <_strtod_l+0x7fa>
 801749c:	692b      	ldr	r3, [r5, #16]
 801749e:	2b01      	cmp	r3, #1
 80174a0:	dd75      	ble.n	801758e <_strtod_l+0x8e6>
 80174a2:	4629      	mov	r1, r5
 80174a4:	2201      	movs	r2, #1
 80174a6:	4620      	mov	r0, r4
 80174a8:	f002 fa06 	bl	80198b8 <__lshift>
 80174ac:	4631      	mov	r1, r6
 80174ae:	4605      	mov	r5, r0
 80174b0:	f002 fa6e 	bl	8019990 <__mcmp>
 80174b4:	2800      	cmp	r0, #0
 80174b6:	dd6a      	ble.n	801758e <_strtod_l+0x8e6>
 80174b8:	9904      	ldr	r1, [sp, #16]
 80174ba:	4a55      	ldr	r2, [pc, #340]	; (8017610 <_strtod_l+0x968>)
 80174bc:	465b      	mov	r3, fp
 80174be:	2900      	cmp	r1, #0
 80174c0:	f000 8085 	beq.w	80175ce <_strtod_l+0x926>
 80174c4:	ea02 010b 	and.w	r1, r2, fp
 80174c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80174cc:	dc7f      	bgt.n	80175ce <_strtod_l+0x926>
 80174ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80174d2:	f77f aeaa 	ble.w	801722a <_strtod_l+0x582>
 80174d6:	4a4f      	ldr	r2, [pc, #316]	; (8017614 <_strtod_l+0x96c>)
 80174d8:	2300      	movs	r3, #0
 80174da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80174de:	4650      	mov	r0, sl
 80174e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80174e4:	4659      	mov	r1, fp
 80174e6:	f7e9 f897 	bl	8000618 <__aeabi_dmul>
 80174ea:	460b      	mov	r3, r1
 80174ec:	4303      	orrs	r3, r0
 80174ee:	bf08      	it	eq
 80174f0:	2322      	moveq	r3, #34	; 0x22
 80174f2:	4682      	mov	sl, r0
 80174f4:	468b      	mov	fp, r1
 80174f6:	bf08      	it	eq
 80174f8:	6023      	streq	r3, [r4, #0]
 80174fa:	e62b      	b.n	8017154 <_strtod_l+0x4ac>
 80174fc:	f04f 32ff 	mov.w	r2, #4294967295
 8017500:	fa02 f303 	lsl.w	r3, r2, r3
 8017504:	ea03 0a0a 	and.w	sl, r3, sl
 8017508:	e6de      	b.n	80172c8 <_strtod_l+0x620>
 801750a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801750e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017512:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017516:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801751a:	fa01 f308 	lsl.w	r3, r1, r8
 801751e:	930c      	str	r3, [sp, #48]	; 0x30
 8017520:	9111      	str	r1, [sp, #68]	; 0x44
 8017522:	e741      	b.n	80173a8 <_strtod_l+0x700>
 8017524:	2300      	movs	r3, #0
 8017526:	930c      	str	r3, [sp, #48]	; 0x30
 8017528:	2301      	movs	r3, #1
 801752a:	9311      	str	r3, [sp, #68]	; 0x44
 801752c:	e73c      	b.n	80173a8 <_strtod_l+0x700>
 801752e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017530:	4642      	mov	r2, r8
 8017532:	4620      	mov	r0, r4
 8017534:	f002 f9c0 	bl	80198b8 <__lshift>
 8017538:	901e      	str	r0, [sp, #120]	; 0x78
 801753a:	2800      	cmp	r0, #0
 801753c:	f47f af66 	bne.w	801740c <_strtod_l+0x764>
 8017540:	e5fe      	b.n	8017140 <_strtod_l+0x498>
 8017542:	465f      	mov	r7, fp
 8017544:	d16e      	bne.n	8017624 <_strtod_l+0x97c>
 8017546:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017548:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801754c:	b342      	cbz	r2, 80175a0 <_strtod_l+0x8f8>
 801754e:	4a32      	ldr	r2, [pc, #200]	; (8017618 <_strtod_l+0x970>)
 8017550:	4293      	cmp	r3, r2
 8017552:	d128      	bne.n	80175a6 <_strtod_l+0x8fe>
 8017554:	9b04      	ldr	r3, [sp, #16]
 8017556:	4650      	mov	r0, sl
 8017558:	b1eb      	cbz	r3, 8017596 <_strtod_l+0x8ee>
 801755a:	4a2d      	ldr	r2, [pc, #180]	; (8017610 <_strtod_l+0x968>)
 801755c:	403a      	ands	r2, r7
 801755e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017562:	f04f 31ff 	mov.w	r1, #4294967295
 8017566:	d819      	bhi.n	801759c <_strtod_l+0x8f4>
 8017568:	0d12      	lsrs	r2, r2, #20
 801756a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801756e:	fa01 f303 	lsl.w	r3, r1, r3
 8017572:	4298      	cmp	r0, r3
 8017574:	d117      	bne.n	80175a6 <_strtod_l+0x8fe>
 8017576:	4b29      	ldr	r3, [pc, #164]	; (801761c <_strtod_l+0x974>)
 8017578:	429f      	cmp	r7, r3
 801757a:	d102      	bne.n	8017582 <_strtod_l+0x8da>
 801757c:	3001      	adds	r0, #1
 801757e:	f43f addf 	beq.w	8017140 <_strtod_l+0x498>
 8017582:	4b23      	ldr	r3, [pc, #140]	; (8017610 <_strtod_l+0x968>)
 8017584:	403b      	ands	r3, r7
 8017586:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801758a:	f04f 0a00 	mov.w	sl, #0
 801758e:	9b04      	ldr	r3, [sp, #16]
 8017590:	2b00      	cmp	r3, #0
 8017592:	d1a0      	bne.n	80174d6 <_strtod_l+0x82e>
 8017594:	e5de      	b.n	8017154 <_strtod_l+0x4ac>
 8017596:	f04f 33ff 	mov.w	r3, #4294967295
 801759a:	e7ea      	b.n	8017572 <_strtod_l+0x8ca>
 801759c:	460b      	mov	r3, r1
 801759e:	e7e8      	b.n	8017572 <_strtod_l+0x8ca>
 80175a0:	ea53 030a 	orrs.w	r3, r3, sl
 80175a4:	d088      	beq.n	80174b8 <_strtod_l+0x810>
 80175a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175a8:	b1db      	cbz	r3, 80175e2 <_strtod_l+0x93a>
 80175aa:	423b      	tst	r3, r7
 80175ac:	d0ef      	beq.n	801758e <_strtod_l+0x8e6>
 80175ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175b0:	9a04      	ldr	r2, [sp, #16]
 80175b2:	4650      	mov	r0, sl
 80175b4:	4659      	mov	r1, fp
 80175b6:	b1c3      	cbz	r3, 80175ea <_strtod_l+0x942>
 80175b8:	f7ff fb59 	bl	8016c6e <sulp>
 80175bc:	4602      	mov	r2, r0
 80175be:	460b      	mov	r3, r1
 80175c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80175c4:	f7e8 fe72 	bl	80002ac <__adddf3>
 80175c8:	4682      	mov	sl, r0
 80175ca:	468b      	mov	fp, r1
 80175cc:	e7df      	b.n	801758e <_strtod_l+0x8e6>
 80175ce:	4013      	ands	r3, r2
 80175d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80175d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80175d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80175dc:	f04f 3aff 	mov.w	sl, #4294967295
 80175e0:	e7d5      	b.n	801758e <_strtod_l+0x8e6>
 80175e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80175e4:	ea13 0f0a 	tst.w	r3, sl
 80175e8:	e7e0      	b.n	80175ac <_strtod_l+0x904>
 80175ea:	f7ff fb40 	bl	8016c6e <sulp>
 80175ee:	4602      	mov	r2, r0
 80175f0:	460b      	mov	r3, r1
 80175f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80175f6:	f7e8 fe57 	bl	80002a8 <__aeabi_dsub>
 80175fa:	2200      	movs	r2, #0
 80175fc:	2300      	movs	r3, #0
 80175fe:	4682      	mov	sl, r0
 8017600:	468b      	mov	fp, r1
 8017602:	f7e9 fa71 	bl	8000ae8 <__aeabi_dcmpeq>
 8017606:	2800      	cmp	r0, #0
 8017608:	d0c1      	beq.n	801758e <_strtod_l+0x8e6>
 801760a:	e60e      	b.n	801722a <_strtod_l+0x582>
 801760c:	fffffc02 	.word	0xfffffc02
 8017610:	7ff00000 	.word	0x7ff00000
 8017614:	39500000 	.word	0x39500000
 8017618:	000fffff 	.word	0x000fffff
 801761c:	7fefffff 	.word	0x7fefffff
 8017620:	0801c0a0 	.word	0x0801c0a0
 8017624:	4631      	mov	r1, r6
 8017626:	4628      	mov	r0, r5
 8017628:	f002 fb2e 	bl	8019c88 <__ratio>
 801762c:	ec59 8b10 	vmov	r8, r9, d0
 8017630:	ee10 0a10 	vmov	r0, s0
 8017634:	2200      	movs	r2, #0
 8017636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801763a:	4649      	mov	r1, r9
 801763c:	f7e9 fa68 	bl	8000b10 <__aeabi_dcmple>
 8017640:	2800      	cmp	r0, #0
 8017642:	d07c      	beq.n	801773e <_strtod_l+0xa96>
 8017644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017646:	2b00      	cmp	r3, #0
 8017648:	d04c      	beq.n	80176e4 <_strtod_l+0xa3c>
 801764a:	4b95      	ldr	r3, [pc, #596]	; (80178a0 <_strtod_l+0xbf8>)
 801764c:	2200      	movs	r2, #0
 801764e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017652:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80178a0 <_strtod_l+0xbf8>
 8017656:	f04f 0800 	mov.w	r8, #0
 801765a:	4b92      	ldr	r3, [pc, #584]	; (80178a4 <_strtod_l+0xbfc>)
 801765c:	403b      	ands	r3, r7
 801765e:	9311      	str	r3, [sp, #68]	; 0x44
 8017660:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017662:	4b91      	ldr	r3, [pc, #580]	; (80178a8 <_strtod_l+0xc00>)
 8017664:	429a      	cmp	r2, r3
 8017666:	f040 80b2 	bne.w	80177ce <_strtod_l+0xb26>
 801766a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801766e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017672:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017676:	ec4b ab10 	vmov	d0, sl, fp
 801767a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801767e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017682:	f002 fa29 	bl	8019ad8 <__ulp>
 8017686:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801768a:	ec53 2b10 	vmov	r2, r3, d0
 801768e:	f7e8 ffc3 	bl	8000618 <__aeabi_dmul>
 8017692:	4652      	mov	r2, sl
 8017694:	465b      	mov	r3, fp
 8017696:	f7e8 fe09 	bl	80002ac <__adddf3>
 801769a:	460b      	mov	r3, r1
 801769c:	4981      	ldr	r1, [pc, #516]	; (80178a4 <_strtod_l+0xbfc>)
 801769e:	4a83      	ldr	r2, [pc, #524]	; (80178ac <_strtod_l+0xc04>)
 80176a0:	4019      	ands	r1, r3
 80176a2:	4291      	cmp	r1, r2
 80176a4:	4682      	mov	sl, r0
 80176a6:	d95e      	bls.n	8017766 <_strtod_l+0xabe>
 80176a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80176ae:	4293      	cmp	r3, r2
 80176b0:	d103      	bne.n	80176ba <_strtod_l+0xa12>
 80176b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176b4:	3301      	adds	r3, #1
 80176b6:	f43f ad43 	beq.w	8017140 <_strtod_l+0x498>
 80176ba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80178b8 <_strtod_l+0xc10>
 80176be:	f04f 3aff 	mov.w	sl, #4294967295
 80176c2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80176c4:	4620      	mov	r0, r4
 80176c6:	f001 fedb 	bl	8019480 <_Bfree>
 80176ca:	9907      	ldr	r1, [sp, #28]
 80176cc:	4620      	mov	r0, r4
 80176ce:	f001 fed7 	bl	8019480 <_Bfree>
 80176d2:	4631      	mov	r1, r6
 80176d4:	4620      	mov	r0, r4
 80176d6:	f001 fed3 	bl	8019480 <_Bfree>
 80176da:	4629      	mov	r1, r5
 80176dc:	4620      	mov	r0, r4
 80176de:	f001 fecf 	bl	8019480 <_Bfree>
 80176e2:	e613      	b.n	801730c <_strtod_l+0x664>
 80176e4:	f1ba 0f00 	cmp.w	sl, #0
 80176e8:	d11b      	bne.n	8017722 <_strtod_l+0xa7a>
 80176ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80176ee:	b9f3      	cbnz	r3, 801772e <_strtod_l+0xa86>
 80176f0:	4b6b      	ldr	r3, [pc, #428]	; (80178a0 <_strtod_l+0xbf8>)
 80176f2:	2200      	movs	r2, #0
 80176f4:	4640      	mov	r0, r8
 80176f6:	4649      	mov	r1, r9
 80176f8:	f7e9 fa00 	bl	8000afc <__aeabi_dcmplt>
 80176fc:	b9d0      	cbnz	r0, 8017734 <_strtod_l+0xa8c>
 80176fe:	4640      	mov	r0, r8
 8017700:	4649      	mov	r1, r9
 8017702:	4b6b      	ldr	r3, [pc, #428]	; (80178b0 <_strtod_l+0xc08>)
 8017704:	2200      	movs	r2, #0
 8017706:	f7e8 ff87 	bl	8000618 <__aeabi_dmul>
 801770a:	4680      	mov	r8, r0
 801770c:	4689      	mov	r9, r1
 801770e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017712:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017716:	931b      	str	r3, [sp, #108]	; 0x6c
 8017718:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801771c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017720:	e79b      	b.n	801765a <_strtod_l+0x9b2>
 8017722:	f1ba 0f01 	cmp.w	sl, #1
 8017726:	d102      	bne.n	801772e <_strtod_l+0xa86>
 8017728:	2f00      	cmp	r7, #0
 801772a:	f43f ad7e 	beq.w	801722a <_strtod_l+0x582>
 801772e:	4b61      	ldr	r3, [pc, #388]	; (80178b4 <_strtod_l+0xc0c>)
 8017730:	2200      	movs	r2, #0
 8017732:	e78c      	b.n	801764e <_strtod_l+0x9a6>
 8017734:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80178b0 <_strtod_l+0xc08>
 8017738:	f04f 0800 	mov.w	r8, #0
 801773c:	e7e7      	b.n	801770e <_strtod_l+0xa66>
 801773e:	4b5c      	ldr	r3, [pc, #368]	; (80178b0 <_strtod_l+0xc08>)
 8017740:	4640      	mov	r0, r8
 8017742:	4649      	mov	r1, r9
 8017744:	2200      	movs	r2, #0
 8017746:	f7e8 ff67 	bl	8000618 <__aeabi_dmul>
 801774a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801774c:	4680      	mov	r8, r0
 801774e:	4689      	mov	r9, r1
 8017750:	b933      	cbnz	r3, 8017760 <_strtod_l+0xab8>
 8017752:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017756:	9012      	str	r0, [sp, #72]	; 0x48
 8017758:	9313      	str	r3, [sp, #76]	; 0x4c
 801775a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801775e:	e7dd      	b.n	801771c <_strtod_l+0xa74>
 8017760:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017764:	e7f9      	b.n	801775a <_strtod_l+0xab2>
 8017766:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801776a:	9b04      	ldr	r3, [sp, #16]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d1a8      	bne.n	80176c2 <_strtod_l+0xa1a>
 8017770:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017774:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017776:	0d1b      	lsrs	r3, r3, #20
 8017778:	051b      	lsls	r3, r3, #20
 801777a:	429a      	cmp	r2, r3
 801777c:	d1a1      	bne.n	80176c2 <_strtod_l+0xa1a>
 801777e:	4640      	mov	r0, r8
 8017780:	4649      	mov	r1, r9
 8017782:	f7e9 faa9 	bl	8000cd8 <__aeabi_d2lz>
 8017786:	f7e8 ff19 	bl	80005bc <__aeabi_l2d>
 801778a:	4602      	mov	r2, r0
 801778c:	460b      	mov	r3, r1
 801778e:	4640      	mov	r0, r8
 8017790:	4649      	mov	r1, r9
 8017792:	f7e8 fd89 	bl	80002a8 <__aeabi_dsub>
 8017796:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017798:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801779c:	ea43 030a 	orr.w	r3, r3, sl
 80177a0:	4313      	orrs	r3, r2
 80177a2:	4680      	mov	r8, r0
 80177a4:	4689      	mov	r9, r1
 80177a6:	d053      	beq.n	8017850 <_strtod_l+0xba8>
 80177a8:	a335      	add	r3, pc, #212	; (adr r3, 8017880 <_strtod_l+0xbd8>)
 80177aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ae:	f7e9 f9a5 	bl	8000afc <__aeabi_dcmplt>
 80177b2:	2800      	cmp	r0, #0
 80177b4:	f47f acce 	bne.w	8017154 <_strtod_l+0x4ac>
 80177b8:	a333      	add	r3, pc, #204	; (adr r3, 8017888 <_strtod_l+0xbe0>)
 80177ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177be:	4640      	mov	r0, r8
 80177c0:	4649      	mov	r1, r9
 80177c2:	f7e9 f9b9 	bl	8000b38 <__aeabi_dcmpgt>
 80177c6:	2800      	cmp	r0, #0
 80177c8:	f43f af7b 	beq.w	80176c2 <_strtod_l+0xa1a>
 80177cc:	e4c2      	b.n	8017154 <_strtod_l+0x4ac>
 80177ce:	9b04      	ldr	r3, [sp, #16]
 80177d0:	b333      	cbz	r3, 8017820 <_strtod_l+0xb78>
 80177d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80177d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80177d8:	d822      	bhi.n	8017820 <_strtod_l+0xb78>
 80177da:	a32d      	add	r3, pc, #180	; (adr r3, 8017890 <_strtod_l+0xbe8>)
 80177dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177e0:	4640      	mov	r0, r8
 80177e2:	4649      	mov	r1, r9
 80177e4:	f7e9 f994 	bl	8000b10 <__aeabi_dcmple>
 80177e8:	b1a0      	cbz	r0, 8017814 <_strtod_l+0xb6c>
 80177ea:	4649      	mov	r1, r9
 80177ec:	4640      	mov	r0, r8
 80177ee:	f7e9 f9eb 	bl	8000bc8 <__aeabi_d2uiz>
 80177f2:	2801      	cmp	r0, #1
 80177f4:	bf38      	it	cc
 80177f6:	2001      	movcc	r0, #1
 80177f8:	f7e8 fe94 	bl	8000524 <__aeabi_ui2d>
 80177fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177fe:	4680      	mov	r8, r0
 8017800:	4689      	mov	r9, r1
 8017802:	bb13      	cbnz	r3, 801784a <_strtod_l+0xba2>
 8017804:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017808:	9014      	str	r0, [sp, #80]	; 0x50
 801780a:	9315      	str	r3, [sp, #84]	; 0x54
 801780c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8017810:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017816:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017818:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801781c:	1a9b      	subs	r3, r3, r2
 801781e:	930d      	str	r3, [sp, #52]	; 0x34
 8017820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017824:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017828:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801782c:	f002 f954 	bl	8019ad8 <__ulp>
 8017830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017834:	ec53 2b10 	vmov	r2, r3, d0
 8017838:	f7e8 feee 	bl	8000618 <__aeabi_dmul>
 801783c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017840:	f7e8 fd34 	bl	80002ac <__adddf3>
 8017844:	4682      	mov	sl, r0
 8017846:	468b      	mov	fp, r1
 8017848:	e78f      	b.n	801776a <_strtod_l+0xac2>
 801784a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801784e:	e7dd      	b.n	801780c <_strtod_l+0xb64>
 8017850:	a311      	add	r3, pc, #68	; (adr r3, 8017898 <_strtod_l+0xbf0>)
 8017852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017856:	f7e9 f951 	bl	8000afc <__aeabi_dcmplt>
 801785a:	e7b4      	b.n	80177c6 <_strtod_l+0xb1e>
 801785c:	2300      	movs	r3, #0
 801785e:	930e      	str	r3, [sp, #56]	; 0x38
 8017860:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017862:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017864:	6013      	str	r3, [r2, #0]
 8017866:	f7ff ba65 	b.w	8016d34 <_strtod_l+0x8c>
 801786a:	2b65      	cmp	r3, #101	; 0x65
 801786c:	f43f ab5d 	beq.w	8016f2a <_strtod_l+0x282>
 8017870:	2b45      	cmp	r3, #69	; 0x45
 8017872:	f43f ab5a 	beq.w	8016f2a <_strtod_l+0x282>
 8017876:	2201      	movs	r2, #1
 8017878:	f7ff bb92 	b.w	8016fa0 <_strtod_l+0x2f8>
 801787c:	f3af 8000 	nop.w
 8017880:	94a03595 	.word	0x94a03595
 8017884:	3fdfffff 	.word	0x3fdfffff
 8017888:	35afe535 	.word	0x35afe535
 801788c:	3fe00000 	.word	0x3fe00000
 8017890:	ffc00000 	.word	0xffc00000
 8017894:	41dfffff 	.word	0x41dfffff
 8017898:	94a03595 	.word	0x94a03595
 801789c:	3fcfffff 	.word	0x3fcfffff
 80178a0:	3ff00000 	.word	0x3ff00000
 80178a4:	7ff00000 	.word	0x7ff00000
 80178a8:	7fe00000 	.word	0x7fe00000
 80178ac:	7c9fffff 	.word	0x7c9fffff
 80178b0:	3fe00000 	.word	0x3fe00000
 80178b4:	bff00000 	.word	0xbff00000
 80178b8:	7fefffff 	.word	0x7fefffff

080178bc <_strtod_r>:
 80178bc:	4b01      	ldr	r3, [pc, #4]	; (80178c4 <_strtod_r+0x8>)
 80178be:	f7ff b9f3 	b.w	8016ca8 <_strtod_l>
 80178c2:	bf00      	nop
 80178c4:	20000144 	.word	0x20000144

080178c8 <_strtol_l.isra.0>:
 80178c8:	2b01      	cmp	r3, #1
 80178ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178ce:	d001      	beq.n	80178d4 <_strtol_l.isra.0+0xc>
 80178d0:	2b24      	cmp	r3, #36	; 0x24
 80178d2:	d906      	bls.n	80178e2 <_strtol_l.isra.0+0x1a>
 80178d4:	f7fd ff4e 	bl	8015774 <__errno>
 80178d8:	2316      	movs	r3, #22
 80178da:	6003      	str	r3, [r0, #0]
 80178dc:	2000      	movs	r0, #0
 80178de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178e2:	4f3a      	ldr	r7, [pc, #232]	; (80179cc <_strtol_l.isra.0+0x104>)
 80178e4:	468e      	mov	lr, r1
 80178e6:	4676      	mov	r6, lr
 80178e8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80178ec:	5de5      	ldrb	r5, [r4, r7]
 80178ee:	f015 0508 	ands.w	r5, r5, #8
 80178f2:	d1f8      	bne.n	80178e6 <_strtol_l.isra.0+0x1e>
 80178f4:	2c2d      	cmp	r4, #45	; 0x2d
 80178f6:	d134      	bne.n	8017962 <_strtol_l.isra.0+0x9a>
 80178f8:	f89e 4000 	ldrb.w	r4, [lr]
 80178fc:	f04f 0801 	mov.w	r8, #1
 8017900:	f106 0e02 	add.w	lr, r6, #2
 8017904:	2b00      	cmp	r3, #0
 8017906:	d05c      	beq.n	80179c2 <_strtol_l.isra.0+0xfa>
 8017908:	2b10      	cmp	r3, #16
 801790a:	d10c      	bne.n	8017926 <_strtol_l.isra.0+0x5e>
 801790c:	2c30      	cmp	r4, #48	; 0x30
 801790e:	d10a      	bne.n	8017926 <_strtol_l.isra.0+0x5e>
 8017910:	f89e 4000 	ldrb.w	r4, [lr]
 8017914:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017918:	2c58      	cmp	r4, #88	; 0x58
 801791a:	d14d      	bne.n	80179b8 <_strtol_l.isra.0+0xf0>
 801791c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8017920:	2310      	movs	r3, #16
 8017922:	f10e 0e02 	add.w	lr, lr, #2
 8017926:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801792a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801792e:	2600      	movs	r6, #0
 8017930:	fbbc f9f3 	udiv	r9, ip, r3
 8017934:	4635      	mov	r5, r6
 8017936:	fb03 ca19 	mls	sl, r3, r9, ip
 801793a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801793e:	2f09      	cmp	r7, #9
 8017940:	d818      	bhi.n	8017974 <_strtol_l.isra.0+0xac>
 8017942:	463c      	mov	r4, r7
 8017944:	42a3      	cmp	r3, r4
 8017946:	dd24      	ble.n	8017992 <_strtol_l.isra.0+0xca>
 8017948:	2e00      	cmp	r6, #0
 801794a:	db1f      	blt.n	801798c <_strtol_l.isra.0+0xc4>
 801794c:	45a9      	cmp	r9, r5
 801794e:	d31d      	bcc.n	801798c <_strtol_l.isra.0+0xc4>
 8017950:	d101      	bne.n	8017956 <_strtol_l.isra.0+0x8e>
 8017952:	45a2      	cmp	sl, r4
 8017954:	db1a      	blt.n	801798c <_strtol_l.isra.0+0xc4>
 8017956:	fb05 4503 	mla	r5, r5, r3, r4
 801795a:	2601      	movs	r6, #1
 801795c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017960:	e7eb      	b.n	801793a <_strtol_l.isra.0+0x72>
 8017962:	2c2b      	cmp	r4, #43	; 0x2b
 8017964:	bf08      	it	eq
 8017966:	f89e 4000 	ldrbeq.w	r4, [lr]
 801796a:	46a8      	mov	r8, r5
 801796c:	bf08      	it	eq
 801796e:	f106 0e02 	addeq.w	lr, r6, #2
 8017972:	e7c7      	b.n	8017904 <_strtol_l.isra.0+0x3c>
 8017974:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017978:	2f19      	cmp	r7, #25
 801797a:	d801      	bhi.n	8017980 <_strtol_l.isra.0+0xb8>
 801797c:	3c37      	subs	r4, #55	; 0x37
 801797e:	e7e1      	b.n	8017944 <_strtol_l.isra.0+0x7c>
 8017980:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017984:	2f19      	cmp	r7, #25
 8017986:	d804      	bhi.n	8017992 <_strtol_l.isra.0+0xca>
 8017988:	3c57      	subs	r4, #87	; 0x57
 801798a:	e7db      	b.n	8017944 <_strtol_l.isra.0+0x7c>
 801798c:	f04f 36ff 	mov.w	r6, #4294967295
 8017990:	e7e4      	b.n	801795c <_strtol_l.isra.0+0x94>
 8017992:	2e00      	cmp	r6, #0
 8017994:	da05      	bge.n	80179a2 <_strtol_l.isra.0+0xda>
 8017996:	2322      	movs	r3, #34	; 0x22
 8017998:	6003      	str	r3, [r0, #0]
 801799a:	4665      	mov	r5, ip
 801799c:	b942      	cbnz	r2, 80179b0 <_strtol_l.isra.0+0xe8>
 801799e:	4628      	mov	r0, r5
 80179a0:	e79d      	b.n	80178de <_strtol_l.isra.0+0x16>
 80179a2:	f1b8 0f00 	cmp.w	r8, #0
 80179a6:	d000      	beq.n	80179aa <_strtol_l.isra.0+0xe2>
 80179a8:	426d      	negs	r5, r5
 80179aa:	2a00      	cmp	r2, #0
 80179ac:	d0f7      	beq.n	801799e <_strtol_l.isra.0+0xd6>
 80179ae:	b10e      	cbz	r6, 80179b4 <_strtol_l.isra.0+0xec>
 80179b0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80179b4:	6011      	str	r1, [r2, #0]
 80179b6:	e7f2      	b.n	801799e <_strtol_l.isra.0+0xd6>
 80179b8:	2430      	movs	r4, #48	; 0x30
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d1b3      	bne.n	8017926 <_strtol_l.isra.0+0x5e>
 80179be:	2308      	movs	r3, #8
 80179c0:	e7b1      	b.n	8017926 <_strtol_l.isra.0+0x5e>
 80179c2:	2c30      	cmp	r4, #48	; 0x30
 80179c4:	d0a4      	beq.n	8017910 <_strtol_l.isra.0+0x48>
 80179c6:	230a      	movs	r3, #10
 80179c8:	e7ad      	b.n	8017926 <_strtol_l.isra.0+0x5e>
 80179ca:	bf00      	nop
 80179cc:	0801bed9 	.word	0x0801bed9

080179d0 <_strtol_r>:
 80179d0:	f7ff bf7a 	b.w	80178c8 <_strtol_l.isra.0>

080179d4 <strtol>:
 80179d4:	4613      	mov	r3, r2
 80179d6:	460a      	mov	r2, r1
 80179d8:	4601      	mov	r1, r0
 80179da:	4802      	ldr	r0, [pc, #8]	; (80179e4 <strtol+0x10>)
 80179dc:	6800      	ldr	r0, [r0, #0]
 80179de:	f7ff bf73 	b.w	80178c8 <_strtol_l.isra.0>
 80179e2:	bf00      	nop
 80179e4:	200000dc 	.word	0x200000dc

080179e8 <_strtoul_l.isra.0>:
 80179e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179ec:	4e3b      	ldr	r6, [pc, #236]	; (8017adc <_strtoul_l.isra.0+0xf4>)
 80179ee:	4686      	mov	lr, r0
 80179f0:	468c      	mov	ip, r1
 80179f2:	4660      	mov	r0, ip
 80179f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80179f8:	5da5      	ldrb	r5, [r4, r6]
 80179fa:	f015 0508 	ands.w	r5, r5, #8
 80179fe:	d1f8      	bne.n	80179f2 <_strtoul_l.isra.0+0xa>
 8017a00:	2c2d      	cmp	r4, #45	; 0x2d
 8017a02:	d134      	bne.n	8017a6e <_strtoul_l.isra.0+0x86>
 8017a04:	f89c 4000 	ldrb.w	r4, [ip]
 8017a08:	f04f 0801 	mov.w	r8, #1
 8017a0c:	f100 0c02 	add.w	ip, r0, #2
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d05e      	beq.n	8017ad2 <_strtoul_l.isra.0+0xea>
 8017a14:	2b10      	cmp	r3, #16
 8017a16:	d10c      	bne.n	8017a32 <_strtoul_l.isra.0+0x4a>
 8017a18:	2c30      	cmp	r4, #48	; 0x30
 8017a1a:	d10a      	bne.n	8017a32 <_strtoul_l.isra.0+0x4a>
 8017a1c:	f89c 0000 	ldrb.w	r0, [ip]
 8017a20:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8017a24:	2858      	cmp	r0, #88	; 0x58
 8017a26:	d14f      	bne.n	8017ac8 <_strtoul_l.isra.0+0xe0>
 8017a28:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8017a2c:	2310      	movs	r3, #16
 8017a2e:	f10c 0c02 	add.w	ip, ip, #2
 8017a32:	f04f 37ff 	mov.w	r7, #4294967295
 8017a36:	2500      	movs	r5, #0
 8017a38:	fbb7 f7f3 	udiv	r7, r7, r3
 8017a3c:	fb03 f907 	mul.w	r9, r3, r7
 8017a40:	ea6f 0909 	mvn.w	r9, r9
 8017a44:	4628      	mov	r0, r5
 8017a46:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8017a4a:	2e09      	cmp	r6, #9
 8017a4c:	d818      	bhi.n	8017a80 <_strtoul_l.isra.0+0x98>
 8017a4e:	4634      	mov	r4, r6
 8017a50:	42a3      	cmp	r3, r4
 8017a52:	dd24      	ble.n	8017a9e <_strtoul_l.isra.0+0xb6>
 8017a54:	2d00      	cmp	r5, #0
 8017a56:	db1f      	blt.n	8017a98 <_strtoul_l.isra.0+0xb0>
 8017a58:	4287      	cmp	r7, r0
 8017a5a:	d31d      	bcc.n	8017a98 <_strtoul_l.isra.0+0xb0>
 8017a5c:	d101      	bne.n	8017a62 <_strtoul_l.isra.0+0x7a>
 8017a5e:	45a1      	cmp	r9, r4
 8017a60:	db1a      	blt.n	8017a98 <_strtoul_l.isra.0+0xb0>
 8017a62:	fb00 4003 	mla	r0, r0, r3, r4
 8017a66:	2501      	movs	r5, #1
 8017a68:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8017a6c:	e7eb      	b.n	8017a46 <_strtoul_l.isra.0+0x5e>
 8017a6e:	2c2b      	cmp	r4, #43	; 0x2b
 8017a70:	bf08      	it	eq
 8017a72:	f89c 4000 	ldrbeq.w	r4, [ip]
 8017a76:	46a8      	mov	r8, r5
 8017a78:	bf08      	it	eq
 8017a7a:	f100 0c02 	addeq.w	ip, r0, #2
 8017a7e:	e7c7      	b.n	8017a10 <_strtoul_l.isra.0+0x28>
 8017a80:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8017a84:	2e19      	cmp	r6, #25
 8017a86:	d801      	bhi.n	8017a8c <_strtoul_l.isra.0+0xa4>
 8017a88:	3c37      	subs	r4, #55	; 0x37
 8017a8a:	e7e1      	b.n	8017a50 <_strtoul_l.isra.0+0x68>
 8017a8c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8017a90:	2e19      	cmp	r6, #25
 8017a92:	d804      	bhi.n	8017a9e <_strtoul_l.isra.0+0xb6>
 8017a94:	3c57      	subs	r4, #87	; 0x57
 8017a96:	e7db      	b.n	8017a50 <_strtoul_l.isra.0+0x68>
 8017a98:	f04f 35ff 	mov.w	r5, #4294967295
 8017a9c:	e7e4      	b.n	8017a68 <_strtoul_l.isra.0+0x80>
 8017a9e:	2d00      	cmp	r5, #0
 8017aa0:	da07      	bge.n	8017ab2 <_strtoul_l.isra.0+0xca>
 8017aa2:	2322      	movs	r3, #34	; 0x22
 8017aa4:	f8ce 3000 	str.w	r3, [lr]
 8017aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8017aac:	b942      	cbnz	r2, 8017ac0 <_strtoul_l.isra.0+0xd8>
 8017aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ab2:	f1b8 0f00 	cmp.w	r8, #0
 8017ab6:	d000      	beq.n	8017aba <_strtoul_l.isra.0+0xd2>
 8017ab8:	4240      	negs	r0, r0
 8017aba:	2a00      	cmp	r2, #0
 8017abc:	d0f7      	beq.n	8017aae <_strtoul_l.isra.0+0xc6>
 8017abe:	b10d      	cbz	r5, 8017ac4 <_strtoul_l.isra.0+0xdc>
 8017ac0:	f10c 31ff 	add.w	r1, ip, #4294967295
 8017ac4:	6011      	str	r1, [r2, #0]
 8017ac6:	e7f2      	b.n	8017aae <_strtoul_l.isra.0+0xc6>
 8017ac8:	2430      	movs	r4, #48	; 0x30
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d1b1      	bne.n	8017a32 <_strtoul_l.isra.0+0x4a>
 8017ace:	2308      	movs	r3, #8
 8017ad0:	e7af      	b.n	8017a32 <_strtoul_l.isra.0+0x4a>
 8017ad2:	2c30      	cmp	r4, #48	; 0x30
 8017ad4:	d0a2      	beq.n	8017a1c <_strtoul_l.isra.0+0x34>
 8017ad6:	230a      	movs	r3, #10
 8017ad8:	e7ab      	b.n	8017a32 <_strtoul_l.isra.0+0x4a>
 8017ada:	bf00      	nop
 8017adc:	0801bed9 	.word	0x0801bed9

08017ae0 <_strtoul_r>:
 8017ae0:	f7ff bf82 	b.w	80179e8 <_strtoul_l.isra.0>

08017ae4 <_vsniprintf_r>:
 8017ae4:	b530      	push	{r4, r5, lr}
 8017ae6:	1e14      	subs	r4, r2, #0
 8017ae8:	4605      	mov	r5, r0
 8017aea:	b09b      	sub	sp, #108	; 0x6c
 8017aec:	4618      	mov	r0, r3
 8017aee:	da05      	bge.n	8017afc <_vsniprintf_r+0x18>
 8017af0:	238b      	movs	r3, #139	; 0x8b
 8017af2:	602b      	str	r3, [r5, #0]
 8017af4:	f04f 30ff 	mov.w	r0, #4294967295
 8017af8:	b01b      	add	sp, #108	; 0x6c
 8017afa:	bd30      	pop	{r4, r5, pc}
 8017afc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017b00:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017b04:	bf14      	ite	ne
 8017b06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017b0a:	4623      	moveq	r3, r4
 8017b0c:	9302      	str	r3, [sp, #8]
 8017b0e:	9305      	str	r3, [sp, #20]
 8017b10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b14:	9100      	str	r1, [sp, #0]
 8017b16:	9104      	str	r1, [sp, #16]
 8017b18:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b1c:	4602      	mov	r2, r0
 8017b1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017b20:	4669      	mov	r1, sp
 8017b22:	4628      	mov	r0, r5
 8017b24:	f002 f9b8 	bl	8019e98 <_svfiprintf_r>
 8017b28:	1c43      	adds	r3, r0, #1
 8017b2a:	bfbc      	itt	lt
 8017b2c:	238b      	movlt	r3, #139	; 0x8b
 8017b2e:	602b      	strlt	r3, [r5, #0]
 8017b30:	2c00      	cmp	r4, #0
 8017b32:	d0e1      	beq.n	8017af8 <_vsniprintf_r+0x14>
 8017b34:	9b00      	ldr	r3, [sp, #0]
 8017b36:	2200      	movs	r2, #0
 8017b38:	701a      	strb	r2, [r3, #0]
 8017b3a:	e7dd      	b.n	8017af8 <_vsniprintf_r+0x14>

08017b3c <vsniprintf>:
 8017b3c:	b507      	push	{r0, r1, r2, lr}
 8017b3e:	9300      	str	r3, [sp, #0]
 8017b40:	4613      	mov	r3, r2
 8017b42:	460a      	mov	r2, r1
 8017b44:	4601      	mov	r1, r0
 8017b46:	4803      	ldr	r0, [pc, #12]	; (8017b54 <vsniprintf+0x18>)
 8017b48:	6800      	ldr	r0, [r0, #0]
 8017b4a:	f7ff ffcb 	bl	8017ae4 <_vsniprintf_r>
 8017b4e:	b003      	add	sp, #12
 8017b50:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b54:	200000dc 	.word	0x200000dc

08017b58 <__swbuf_r>:
 8017b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b5a:	460e      	mov	r6, r1
 8017b5c:	4614      	mov	r4, r2
 8017b5e:	4605      	mov	r5, r0
 8017b60:	b118      	cbz	r0, 8017b6a <__swbuf_r+0x12>
 8017b62:	6983      	ldr	r3, [r0, #24]
 8017b64:	b90b      	cbnz	r3, 8017b6a <__swbuf_r+0x12>
 8017b66:	f7fd fe63 	bl	8015830 <__sinit>
 8017b6a:	4b21      	ldr	r3, [pc, #132]	; (8017bf0 <__swbuf_r+0x98>)
 8017b6c:	429c      	cmp	r4, r3
 8017b6e:	d12b      	bne.n	8017bc8 <__swbuf_r+0x70>
 8017b70:	686c      	ldr	r4, [r5, #4]
 8017b72:	69a3      	ldr	r3, [r4, #24]
 8017b74:	60a3      	str	r3, [r4, #8]
 8017b76:	89a3      	ldrh	r3, [r4, #12]
 8017b78:	071a      	lsls	r2, r3, #28
 8017b7a:	d52f      	bpl.n	8017bdc <__swbuf_r+0x84>
 8017b7c:	6923      	ldr	r3, [r4, #16]
 8017b7e:	b36b      	cbz	r3, 8017bdc <__swbuf_r+0x84>
 8017b80:	6923      	ldr	r3, [r4, #16]
 8017b82:	6820      	ldr	r0, [r4, #0]
 8017b84:	1ac0      	subs	r0, r0, r3
 8017b86:	6963      	ldr	r3, [r4, #20]
 8017b88:	b2f6      	uxtb	r6, r6
 8017b8a:	4283      	cmp	r3, r0
 8017b8c:	4637      	mov	r7, r6
 8017b8e:	dc04      	bgt.n	8017b9a <__swbuf_r+0x42>
 8017b90:	4621      	mov	r1, r4
 8017b92:	4628      	mov	r0, r5
 8017b94:	f000 ffde 	bl	8018b54 <_fflush_r>
 8017b98:	bb30      	cbnz	r0, 8017be8 <__swbuf_r+0x90>
 8017b9a:	68a3      	ldr	r3, [r4, #8]
 8017b9c:	3b01      	subs	r3, #1
 8017b9e:	60a3      	str	r3, [r4, #8]
 8017ba0:	6823      	ldr	r3, [r4, #0]
 8017ba2:	1c5a      	adds	r2, r3, #1
 8017ba4:	6022      	str	r2, [r4, #0]
 8017ba6:	701e      	strb	r6, [r3, #0]
 8017ba8:	6963      	ldr	r3, [r4, #20]
 8017baa:	3001      	adds	r0, #1
 8017bac:	4283      	cmp	r3, r0
 8017bae:	d004      	beq.n	8017bba <__swbuf_r+0x62>
 8017bb0:	89a3      	ldrh	r3, [r4, #12]
 8017bb2:	07db      	lsls	r3, r3, #31
 8017bb4:	d506      	bpl.n	8017bc4 <__swbuf_r+0x6c>
 8017bb6:	2e0a      	cmp	r6, #10
 8017bb8:	d104      	bne.n	8017bc4 <__swbuf_r+0x6c>
 8017bba:	4621      	mov	r1, r4
 8017bbc:	4628      	mov	r0, r5
 8017bbe:	f000 ffc9 	bl	8018b54 <_fflush_r>
 8017bc2:	b988      	cbnz	r0, 8017be8 <__swbuf_r+0x90>
 8017bc4:	4638      	mov	r0, r7
 8017bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017bc8:	4b0a      	ldr	r3, [pc, #40]	; (8017bf4 <__swbuf_r+0x9c>)
 8017bca:	429c      	cmp	r4, r3
 8017bcc:	d101      	bne.n	8017bd2 <__swbuf_r+0x7a>
 8017bce:	68ac      	ldr	r4, [r5, #8]
 8017bd0:	e7cf      	b.n	8017b72 <__swbuf_r+0x1a>
 8017bd2:	4b09      	ldr	r3, [pc, #36]	; (8017bf8 <__swbuf_r+0xa0>)
 8017bd4:	429c      	cmp	r4, r3
 8017bd6:	bf08      	it	eq
 8017bd8:	68ec      	ldreq	r4, [r5, #12]
 8017bda:	e7ca      	b.n	8017b72 <__swbuf_r+0x1a>
 8017bdc:	4621      	mov	r1, r4
 8017bde:	4628      	mov	r0, r5
 8017be0:	f000 f81e 	bl	8017c20 <__swsetup_r>
 8017be4:	2800      	cmp	r0, #0
 8017be6:	d0cb      	beq.n	8017b80 <__swbuf_r+0x28>
 8017be8:	f04f 37ff 	mov.w	r7, #4294967295
 8017bec:	e7ea      	b.n	8017bc4 <__swbuf_r+0x6c>
 8017bee:	bf00      	nop
 8017bf0:	0801bffc 	.word	0x0801bffc
 8017bf4:	0801c01c 	.word	0x0801c01c
 8017bf8:	0801bfdc 	.word	0x0801bfdc

08017bfc <_write_r>:
 8017bfc:	b538      	push	{r3, r4, r5, lr}
 8017bfe:	4d07      	ldr	r5, [pc, #28]	; (8017c1c <_write_r+0x20>)
 8017c00:	4604      	mov	r4, r0
 8017c02:	4608      	mov	r0, r1
 8017c04:	4611      	mov	r1, r2
 8017c06:	2200      	movs	r2, #0
 8017c08:	602a      	str	r2, [r5, #0]
 8017c0a:	461a      	mov	r2, r3
 8017c0c:	f002 ffc0 	bl	801ab90 <_write>
 8017c10:	1c43      	adds	r3, r0, #1
 8017c12:	d102      	bne.n	8017c1a <_write_r+0x1e>
 8017c14:	682b      	ldr	r3, [r5, #0]
 8017c16:	b103      	cbz	r3, 8017c1a <_write_r+0x1e>
 8017c18:	6023      	str	r3, [r4, #0]
 8017c1a:	bd38      	pop	{r3, r4, r5, pc}
 8017c1c:	20007850 	.word	0x20007850

08017c20 <__swsetup_r>:
 8017c20:	4b32      	ldr	r3, [pc, #200]	; (8017cec <__swsetup_r+0xcc>)
 8017c22:	b570      	push	{r4, r5, r6, lr}
 8017c24:	681d      	ldr	r5, [r3, #0]
 8017c26:	4606      	mov	r6, r0
 8017c28:	460c      	mov	r4, r1
 8017c2a:	b125      	cbz	r5, 8017c36 <__swsetup_r+0x16>
 8017c2c:	69ab      	ldr	r3, [r5, #24]
 8017c2e:	b913      	cbnz	r3, 8017c36 <__swsetup_r+0x16>
 8017c30:	4628      	mov	r0, r5
 8017c32:	f7fd fdfd 	bl	8015830 <__sinit>
 8017c36:	4b2e      	ldr	r3, [pc, #184]	; (8017cf0 <__swsetup_r+0xd0>)
 8017c38:	429c      	cmp	r4, r3
 8017c3a:	d10f      	bne.n	8017c5c <__swsetup_r+0x3c>
 8017c3c:	686c      	ldr	r4, [r5, #4]
 8017c3e:	89a3      	ldrh	r3, [r4, #12]
 8017c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017c44:	0719      	lsls	r1, r3, #28
 8017c46:	d42c      	bmi.n	8017ca2 <__swsetup_r+0x82>
 8017c48:	06dd      	lsls	r5, r3, #27
 8017c4a:	d411      	bmi.n	8017c70 <__swsetup_r+0x50>
 8017c4c:	2309      	movs	r3, #9
 8017c4e:	6033      	str	r3, [r6, #0]
 8017c50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017c54:	81a3      	strh	r3, [r4, #12]
 8017c56:	f04f 30ff 	mov.w	r0, #4294967295
 8017c5a:	e03e      	b.n	8017cda <__swsetup_r+0xba>
 8017c5c:	4b25      	ldr	r3, [pc, #148]	; (8017cf4 <__swsetup_r+0xd4>)
 8017c5e:	429c      	cmp	r4, r3
 8017c60:	d101      	bne.n	8017c66 <__swsetup_r+0x46>
 8017c62:	68ac      	ldr	r4, [r5, #8]
 8017c64:	e7eb      	b.n	8017c3e <__swsetup_r+0x1e>
 8017c66:	4b24      	ldr	r3, [pc, #144]	; (8017cf8 <__swsetup_r+0xd8>)
 8017c68:	429c      	cmp	r4, r3
 8017c6a:	bf08      	it	eq
 8017c6c:	68ec      	ldreq	r4, [r5, #12]
 8017c6e:	e7e6      	b.n	8017c3e <__swsetup_r+0x1e>
 8017c70:	0758      	lsls	r0, r3, #29
 8017c72:	d512      	bpl.n	8017c9a <__swsetup_r+0x7a>
 8017c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c76:	b141      	cbz	r1, 8017c8a <__swsetup_r+0x6a>
 8017c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c7c:	4299      	cmp	r1, r3
 8017c7e:	d002      	beq.n	8017c86 <__swsetup_r+0x66>
 8017c80:	4630      	mov	r0, r6
 8017c82:	f7fd fed3 	bl	8015a2c <_free_r>
 8017c86:	2300      	movs	r3, #0
 8017c88:	6363      	str	r3, [r4, #52]	; 0x34
 8017c8a:	89a3      	ldrh	r3, [r4, #12]
 8017c8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017c90:	81a3      	strh	r3, [r4, #12]
 8017c92:	2300      	movs	r3, #0
 8017c94:	6063      	str	r3, [r4, #4]
 8017c96:	6923      	ldr	r3, [r4, #16]
 8017c98:	6023      	str	r3, [r4, #0]
 8017c9a:	89a3      	ldrh	r3, [r4, #12]
 8017c9c:	f043 0308 	orr.w	r3, r3, #8
 8017ca0:	81a3      	strh	r3, [r4, #12]
 8017ca2:	6923      	ldr	r3, [r4, #16]
 8017ca4:	b94b      	cbnz	r3, 8017cba <__swsetup_r+0x9a>
 8017ca6:	89a3      	ldrh	r3, [r4, #12]
 8017ca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017cb0:	d003      	beq.n	8017cba <__swsetup_r+0x9a>
 8017cb2:	4621      	mov	r1, r4
 8017cb4:	4630      	mov	r0, r6
 8017cb6:	f001 fb45 	bl	8019344 <__smakebuf_r>
 8017cba:	89a0      	ldrh	r0, [r4, #12]
 8017cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017cc0:	f010 0301 	ands.w	r3, r0, #1
 8017cc4:	d00a      	beq.n	8017cdc <__swsetup_r+0xbc>
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	60a3      	str	r3, [r4, #8]
 8017cca:	6963      	ldr	r3, [r4, #20]
 8017ccc:	425b      	negs	r3, r3
 8017cce:	61a3      	str	r3, [r4, #24]
 8017cd0:	6923      	ldr	r3, [r4, #16]
 8017cd2:	b943      	cbnz	r3, 8017ce6 <__swsetup_r+0xc6>
 8017cd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017cd8:	d1ba      	bne.n	8017c50 <__swsetup_r+0x30>
 8017cda:	bd70      	pop	{r4, r5, r6, pc}
 8017cdc:	0781      	lsls	r1, r0, #30
 8017cde:	bf58      	it	pl
 8017ce0:	6963      	ldrpl	r3, [r4, #20]
 8017ce2:	60a3      	str	r3, [r4, #8]
 8017ce4:	e7f4      	b.n	8017cd0 <__swsetup_r+0xb0>
 8017ce6:	2000      	movs	r0, #0
 8017ce8:	e7f7      	b.n	8017cda <__swsetup_r+0xba>
 8017cea:	bf00      	nop
 8017cec:	200000dc 	.word	0x200000dc
 8017cf0:	0801bffc 	.word	0x0801bffc
 8017cf4:	0801c01c 	.word	0x0801c01c
 8017cf8:	0801bfdc 	.word	0x0801bfdc

08017cfc <__assert_func>:
 8017cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017cfe:	4614      	mov	r4, r2
 8017d00:	461a      	mov	r2, r3
 8017d02:	4b09      	ldr	r3, [pc, #36]	; (8017d28 <__assert_func+0x2c>)
 8017d04:	681b      	ldr	r3, [r3, #0]
 8017d06:	4605      	mov	r5, r0
 8017d08:	68d8      	ldr	r0, [r3, #12]
 8017d0a:	b14c      	cbz	r4, 8017d20 <__assert_func+0x24>
 8017d0c:	4b07      	ldr	r3, [pc, #28]	; (8017d2c <__assert_func+0x30>)
 8017d0e:	9100      	str	r1, [sp, #0]
 8017d10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d14:	4906      	ldr	r1, [pc, #24]	; (8017d30 <__assert_func+0x34>)
 8017d16:	462b      	mov	r3, r5
 8017d18:	f000 ff58 	bl	8018bcc <fiprintf>
 8017d1c:	f7fd fd22 	bl	8015764 <abort>
 8017d20:	4b04      	ldr	r3, [pc, #16]	; (8017d34 <__assert_func+0x38>)
 8017d22:	461c      	mov	r4, r3
 8017d24:	e7f3      	b.n	8017d0e <__assert_func+0x12>
 8017d26:	bf00      	nop
 8017d28:	200000dc 	.word	0x200000dc
 8017d2c:	0801c0c8 	.word	0x0801c0c8
 8017d30:	0801c0d5 	.word	0x0801c0d5
 8017d34:	0801c103 	.word	0x0801c103

08017d38 <_close_r>:
 8017d38:	b538      	push	{r3, r4, r5, lr}
 8017d3a:	4d06      	ldr	r5, [pc, #24]	; (8017d54 <_close_r+0x1c>)
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	4604      	mov	r4, r0
 8017d40:	4608      	mov	r0, r1
 8017d42:	602b      	str	r3, [r5, #0]
 8017d44:	f002 fede 	bl	801ab04 <_close>
 8017d48:	1c43      	adds	r3, r0, #1
 8017d4a:	d102      	bne.n	8017d52 <_close_r+0x1a>
 8017d4c:	682b      	ldr	r3, [r5, #0]
 8017d4e:	b103      	cbz	r3, 8017d52 <_close_r+0x1a>
 8017d50:	6023      	str	r3, [r4, #0]
 8017d52:	bd38      	pop	{r3, r4, r5, pc}
 8017d54:	20007850 	.word	0x20007850

08017d58 <quorem>:
 8017d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d5c:	6903      	ldr	r3, [r0, #16]
 8017d5e:	690c      	ldr	r4, [r1, #16]
 8017d60:	42a3      	cmp	r3, r4
 8017d62:	4607      	mov	r7, r0
 8017d64:	f2c0 8081 	blt.w	8017e6a <quorem+0x112>
 8017d68:	3c01      	subs	r4, #1
 8017d6a:	f101 0814 	add.w	r8, r1, #20
 8017d6e:	f100 0514 	add.w	r5, r0, #20
 8017d72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017d76:	9301      	str	r3, [sp, #4]
 8017d78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017d7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017d80:	3301      	adds	r3, #1
 8017d82:	429a      	cmp	r2, r3
 8017d84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017d88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017d8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8017d90:	d331      	bcc.n	8017df6 <quorem+0x9e>
 8017d92:	f04f 0e00 	mov.w	lr, #0
 8017d96:	4640      	mov	r0, r8
 8017d98:	46ac      	mov	ip, r5
 8017d9a:	46f2      	mov	sl, lr
 8017d9c:	f850 2b04 	ldr.w	r2, [r0], #4
 8017da0:	b293      	uxth	r3, r2
 8017da2:	fb06 e303 	mla	r3, r6, r3, lr
 8017da6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017daa:	b29b      	uxth	r3, r3
 8017dac:	ebaa 0303 	sub.w	r3, sl, r3
 8017db0:	0c12      	lsrs	r2, r2, #16
 8017db2:	f8dc a000 	ldr.w	sl, [ip]
 8017db6:	fb06 e202 	mla	r2, r6, r2, lr
 8017dba:	fa13 f38a 	uxtah	r3, r3, sl
 8017dbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017dc2:	fa1f fa82 	uxth.w	sl, r2
 8017dc6:	f8dc 2000 	ldr.w	r2, [ip]
 8017dca:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017dce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017dd2:	b29b      	uxth	r3, r3
 8017dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017dd8:	4581      	cmp	r9, r0
 8017dda:	f84c 3b04 	str.w	r3, [ip], #4
 8017dde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017de2:	d2db      	bcs.n	8017d9c <quorem+0x44>
 8017de4:	f855 300b 	ldr.w	r3, [r5, fp]
 8017de8:	b92b      	cbnz	r3, 8017df6 <quorem+0x9e>
 8017dea:	9b01      	ldr	r3, [sp, #4]
 8017dec:	3b04      	subs	r3, #4
 8017dee:	429d      	cmp	r5, r3
 8017df0:	461a      	mov	r2, r3
 8017df2:	d32e      	bcc.n	8017e52 <quorem+0xfa>
 8017df4:	613c      	str	r4, [r7, #16]
 8017df6:	4638      	mov	r0, r7
 8017df8:	f001 fdca 	bl	8019990 <__mcmp>
 8017dfc:	2800      	cmp	r0, #0
 8017dfe:	db24      	blt.n	8017e4a <quorem+0xf2>
 8017e00:	3601      	adds	r6, #1
 8017e02:	4628      	mov	r0, r5
 8017e04:	f04f 0c00 	mov.w	ip, #0
 8017e08:	f858 2b04 	ldr.w	r2, [r8], #4
 8017e0c:	f8d0 e000 	ldr.w	lr, [r0]
 8017e10:	b293      	uxth	r3, r2
 8017e12:	ebac 0303 	sub.w	r3, ip, r3
 8017e16:	0c12      	lsrs	r2, r2, #16
 8017e18:	fa13 f38e 	uxtah	r3, r3, lr
 8017e1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017e20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017e24:	b29b      	uxth	r3, r3
 8017e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017e2a:	45c1      	cmp	r9, r8
 8017e2c:	f840 3b04 	str.w	r3, [r0], #4
 8017e30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017e34:	d2e8      	bcs.n	8017e08 <quorem+0xb0>
 8017e36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017e3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017e3e:	b922      	cbnz	r2, 8017e4a <quorem+0xf2>
 8017e40:	3b04      	subs	r3, #4
 8017e42:	429d      	cmp	r5, r3
 8017e44:	461a      	mov	r2, r3
 8017e46:	d30a      	bcc.n	8017e5e <quorem+0x106>
 8017e48:	613c      	str	r4, [r7, #16]
 8017e4a:	4630      	mov	r0, r6
 8017e4c:	b003      	add	sp, #12
 8017e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e52:	6812      	ldr	r2, [r2, #0]
 8017e54:	3b04      	subs	r3, #4
 8017e56:	2a00      	cmp	r2, #0
 8017e58:	d1cc      	bne.n	8017df4 <quorem+0x9c>
 8017e5a:	3c01      	subs	r4, #1
 8017e5c:	e7c7      	b.n	8017dee <quorem+0x96>
 8017e5e:	6812      	ldr	r2, [r2, #0]
 8017e60:	3b04      	subs	r3, #4
 8017e62:	2a00      	cmp	r2, #0
 8017e64:	d1f0      	bne.n	8017e48 <quorem+0xf0>
 8017e66:	3c01      	subs	r4, #1
 8017e68:	e7eb      	b.n	8017e42 <quorem+0xea>
 8017e6a:	2000      	movs	r0, #0
 8017e6c:	e7ee      	b.n	8017e4c <quorem+0xf4>
	...

08017e70 <_dtoa_r>:
 8017e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e74:	ed2d 8b02 	vpush	{d8}
 8017e78:	ec57 6b10 	vmov	r6, r7, d0
 8017e7c:	b095      	sub	sp, #84	; 0x54
 8017e7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017e80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017e84:	9105      	str	r1, [sp, #20]
 8017e86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017e8a:	4604      	mov	r4, r0
 8017e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8017e8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e90:	b975      	cbnz	r5, 8017eb0 <_dtoa_r+0x40>
 8017e92:	2010      	movs	r0, #16
 8017e94:	f7fd fd92 	bl	80159bc <malloc>
 8017e98:	4602      	mov	r2, r0
 8017e9a:	6260      	str	r0, [r4, #36]	; 0x24
 8017e9c:	b920      	cbnz	r0, 8017ea8 <_dtoa_r+0x38>
 8017e9e:	4bb2      	ldr	r3, [pc, #712]	; (8018168 <_dtoa_r+0x2f8>)
 8017ea0:	21ea      	movs	r1, #234	; 0xea
 8017ea2:	48b2      	ldr	r0, [pc, #712]	; (801816c <_dtoa_r+0x2fc>)
 8017ea4:	f7ff ff2a 	bl	8017cfc <__assert_func>
 8017ea8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017eac:	6005      	str	r5, [r0, #0]
 8017eae:	60c5      	str	r5, [r0, #12]
 8017eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017eb2:	6819      	ldr	r1, [r3, #0]
 8017eb4:	b151      	cbz	r1, 8017ecc <_dtoa_r+0x5c>
 8017eb6:	685a      	ldr	r2, [r3, #4]
 8017eb8:	604a      	str	r2, [r1, #4]
 8017eba:	2301      	movs	r3, #1
 8017ebc:	4093      	lsls	r3, r2
 8017ebe:	608b      	str	r3, [r1, #8]
 8017ec0:	4620      	mov	r0, r4
 8017ec2:	f001 fadd 	bl	8019480 <_Bfree>
 8017ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ec8:	2200      	movs	r2, #0
 8017eca:	601a      	str	r2, [r3, #0]
 8017ecc:	1e3b      	subs	r3, r7, #0
 8017ece:	bfb9      	ittee	lt
 8017ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017ed4:	9303      	strlt	r3, [sp, #12]
 8017ed6:	2300      	movge	r3, #0
 8017ed8:	f8c8 3000 	strge.w	r3, [r8]
 8017edc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017ee0:	4ba3      	ldr	r3, [pc, #652]	; (8018170 <_dtoa_r+0x300>)
 8017ee2:	bfbc      	itt	lt
 8017ee4:	2201      	movlt	r2, #1
 8017ee6:	f8c8 2000 	strlt.w	r2, [r8]
 8017eea:	ea33 0309 	bics.w	r3, r3, r9
 8017eee:	d11b      	bne.n	8017f28 <_dtoa_r+0xb8>
 8017ef0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017ef2:	f242 730f 	movw	r3, #9999	; 0x270f
 8017ef6:	6013      	str	r3, [r2, #0]
 8017ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017efc:	4333      	orrs	r3, r6
 8017efe:	f000 857a 	beq.w	80189f6 <_dtoa_r+0xb86>
 8017f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f04:	b963      	cbnz	r3, 8017f20 <_dtoa_r+0xb0>
 8017f06:	4b9b      	ldr	r3, [pc, #620]	; (8018174 <_dtoa_r+0x304>)
 8017f08:	e024      	b.n	8017f54 <_dtoa_r+0xe4>
 8017f0a:	4b9b      	ldr	r3, [pc, #620]	; (8018178 <_dtoa_r+0x308>)
 8017f0c:	9300      	str	r3, [sp, #0]
 8017f0e:	3308      	adds	r3, #8
 8017f10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017f12:	6013      	str	r3, [r2, #0]
 8017f14:	9800      	ldr	r0, [sp, #0]
 8017f16:	b015      	add	sp, #84	; 0x54
 8017f18:	ecbd 8b02 	vpop	{d8}
 8017f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f20:	4b94      	ldr	r3, [pc, #592]	; (8018174 <_dtoa_r+0x304>)
 8017f22:	9300      	str	r3, [sp, #0]
 8017f24:	3303      	adds	r3, #3
 8017f26:	e7f3      	b.n	8017f10 <_dtoa_r+0xa0>
 8017f28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	ec51 0b17 	vmov	r0, r1, d7
 8017f32:	2300      	movs	r3, #0
 8017f34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017f38:	f7e8 fdd6 	bl	8000ae8 <__aeabi_dcmpeq>
 8017f3c:	4680      	mov	r8, r0
 8017f3e:	b158      	cbz	r0, 8017f58 <_dtoa_r+0xe8>
 8017f40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f42:	2301      	movs	r3, #1
 8017f44:	6013      	str	r3, [r2, #0]
 8017f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	f000 8551 	beq.w	80189f0 <_dtoa_r+0xb80>
 8017f4e:	488b      	ldr	r0, [pc, #556]	; (801817c <_dtoa_r+0x30c>)
 8017f50:	6018      	str	r0, [r3, #0]
 8017f52:	1e43      	subs	r3, r0, #1
 8017f54:	9300      	str	r3, [sp, #0]
 8017f56:	e7dd      	b.n	8017f14 <_dtoa_r+0xa4>
 8017f58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017f5c:	aa12      	add	r2, sp, #72	; 0x48
 8017f5e:	a913      	add	r1, sp, #76	; 0x4c
 8017f60:	4620      	mov	r0, r4
 8017f62:	f001 fe35 	bl	8019bd0 <__d2b>
 8017f66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017f6a:	4683      	mov	fp, r0
 8017f6c:	2d00      	cmp	r5, #0
 8017f6e:	d07c      	beq.n	801806a <_dtoa_r+0x1fa>
 8017f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017f7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017f7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017f82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017f86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017f8a:	4b7d      	ldr	r3, [pc, #500]	; (8018180 <_dtoa_r+0x310>)
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	4630      	mov	r0, r6
 8017f90:	4639      	mov	r1, r7
 8017f92:	f7e8 f989 	bl	80002a8 <__aeabi_dsub>
 8017f96:	a36e      	add	r3, pc, #440	; (adr r3, 8018150 <_dtoa_r+0x2e0>)
 8017f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f9c:	f7e8 fb3c 	bl	8000618 <__aeabi_dmul>
 8017fa0:	a36d      	add	r3, pc, #436	; (adr r3, 8018158 <_dtoa_r+0x2e8>)
 8017fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fa6:	f7e8 f981 	bl	80002ac <__adddf3>
 8017faa:	4606      	mov	r6, r0
 8017fac:	4628      	mov	r0, r5
 8017fae:	460f      	mov	r7, r1
 8017fb0:	f7e8 fac8 	bl	8000544 <__aeabi_i2d>
 8017fb4:	a36a      	add	r3, pc, #424	; (adr r3, 8018160 <_dtoa_r+0x2f0>)
 8017fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fba:	f7e8 fb2d 	bl	8000618 <__aeabi_dmul>
 8017fbe:	4602      	mov	r2, r0
 8017fc0:	460b      	mov	r3, r1
 8017fc2:	4630      	mov	r0, r6
 8017fc4:	4639      	mov	r1, r7
 8017fc6:	f7e8 f971 	bl	80002ac <__adddf3>
 8017fca:	4606      	mov	r6, r0
 8017fcc:	460f      	mov	r7, r1
 8017fce:	f7e8 fdd3 	bl	8000b78 <__aeabi_d2iz>
 8017fd2:	2200      	movs	r2, #0
 8017fd4:	4682      	mov	sl, r0
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	4630      	mov	r0, r6
 8017fda:	4639      	mov	r1, r7
 8017fdc:	f7e8 fd8e 	bl	8000afc <__aeabi_dcmplt>
 8017fe0:	b148      	cbz	r0, 8017ff6 <_dtoa_r+0x186>
 8017fe2:	4650      	mov	r0, sl
 8017fe4:	f7e8 faae 	bl	8000544 <__aeabi_i2d>
 8017fe8:	4632      	mov	r2, r6
 8017fea:	463b      	mov	r3, r7
 8017fec:	f7e8 fd7c 	bl	8000ae8 <__aeabi_dcmpeq>
 8017ff0:	b908      	cbnz	r0, 8017ff6 <_dtoa_r+0x186>
 8017ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017ff6:	f1ba 0f16 	cmp.w	sl, #22
 8017ffa:	d854      	bhi.n	80180a6 <_dtoa_r+0x236>
 8017ffc:	4b61      	ldr	r3, [pc, #388]	; (8018184 <_dtoa_r+0x314>)
 8017ffe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018006:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801800a:	f7e8 fd77 	bl	8000afc <__aeabi_dcmplt>
 801800e:	2800      	cmp	r0, #0
 8018010:	d04b      	beq.n	80180aa <_dtoa_r+0x23a>
 8018012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018016:	2300      	movs	r3, #0
 8018018:	930e      	str	r3, [sp, #56]	; 0x38
 801801a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801801c:	1b5d      	subs	r5, r3, r5
 801801e:	1e6b      	subs	r3, r5, #1
 8018020:	9304      	str	r3, [sp, #16]
 8018022:	bf43      	ittte	mi
 8018024:	2300      	movmi	r3, #0
 8018026:	f1c5 0801 	rsbmi	r8, r5, #1
 801802a:	9304      	strmi	r3, [sp, #16]
 801802c:	f04f 0800 	movpl.w	r8, #0
 8018030:	f1ba 0f00 	cmp.w	sl, #0
 8018034:	db3b      	blt.n	80180ae <_dtoa_r+0x23e>
 8018036:	9b04      	ldr	r3, [sp, #16]
 8018038:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801803c:	4453      	add	r3, sl
 801803e:	9304      	str	r3, [sp, #16]
 8018040:	2300      	movs	r3, #0
 8018042:	9306      	str	r3, [sp, #24]
 8018044:	9b05      	ldr	r3, [sp, #20]
 8018046:	2b09      	cmp	r3, #9
 8018048:	d869      	bhi.n	801811e <_dtoa_r+0x2ae>
 801804a:	2b05      	cmp	r3, #5
 801804c:	bfc4      	itt	gt
 801804e:	3b04      	subgt	r3, #4
 8018050:	9305      	strgt	r3, [sp, #20]
 8018052:	9b05      	ldr	r3, [sp, #20]
 8018054:	f1a3 0302 	sub.w	r3, r3, #2
 8018058:	bfcc      	ite	gt
 801805a:	2500      	movgt	r5, #0
 801805c:	2501      	movle	r5, #1
 801805e:	2b03      	cmp	r3, #3
 8018060:	d869      	bhi.n	8018136 <_dtoa_r+0x2c6>
 8018062:	e8df f003 	tbb	[pc, r3]
 8018066:	4e2c      	.short	0x4e2c
 8018068:	5a4c      	.short	0x5a4c
 801806a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801806e:	441d      	add	r5, r3
 8018070:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018074:	2b20      	cmp	r3, #32
 8018076:	bfc1      	itttt	gt
 8018078:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801807c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018080:	fa09 f303 	lslgt.w	r3, r9, r3
 8018084:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018088:	bfda      	itte	le
 801808a:	f1c3 0320 	rsble	r3, r3, #32
 801808e:	fa06 f003 	lslle.w	r0, r6, r3
 8018092:	4318      	orrgt	r0, r3
 8018094:	f7e8 fa46 	bl	8000524 <__aeabi_ui2d>
 8018098:	2301      	movs	r3, #1
 801809a:	4606      	mov	r6, r0
 801809c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80180a0:	3d01      	subs	r5, #1
 80180a2:	9310      	str	r3, [sp, #64]	; 0x40
 80180a4:	e771      	b.n	8017f8a <_dtoa_r+0x11a>
 80180a6:	2301      	movs	r3, #1
 80180a8:	e7b6      	b.n	8018018 <_dtoa_r+0x1a8>
 80180aa:	900e      	str	r0, [sp, #56]	; 0x38
 80180ac:	e7b5      	b.n	801801a <_dtoa_r+0x1aa>
 80180ae:	f1ca 0300 	rsb	r3, sl, #0
 80180b2:	9306      	str	r3, [sp, #24]
 80180b4:	2300      	movs	r3, #0
 80180b6:	eba8 080a 	sub.w	r8, r8, sl
 80180ba:	930d      	str	r3, [sp, #52]	; 0x34
 80180bc:	e7c2      	b.n	8018044 <_dtoa_r+0x1d4>
 80180be:	2300      	movs	r3, #0
 80180c0:	9308      	str	r3, [sp, #32]
 80180c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	dc39      	bgt.n	801813c <_dtoa_r+0x2cc>
 80180c8:	f04f 0901 	mov.w	r9, #1
 80180cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80180d0:	464b      	mov	r3, r9
 80180d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80180d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80180d8:	2200      	movs	r2, #0
 80180da:	6042      	str	r2, [r0, #4]
 80180dc:	2204      	movs	r2, #4
 80180de:	f102 0614 	add.w	r6, r2, #20
 80180e2:	429e      	cmp	r6, r3
 80180e4:	6841      	ldr	r1, [r0, #4]
 80180e6:	d92f      	bls.n	8018148 <_dtoa_r+0x2d8>
 80180e8:	4620      	mov	r0, r4
 80180ea:	f001 f989 	bl	8019400 <_Balloc>
 80180ee:	9000      	str	r0, [sp, #0]
 80180f0:	2800      	cmp	r0, #0
 80180f2:	d14b      	bne.n	801818c <_dtoa_r+0x31c>
 80180f4:	4b24      	ldr	r3, [pc, #144]	; (8018188 <_dtoa_r+0x318>)
 80180f6:	4602      	mov	r2, r0
 80180f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80180fc:	e6d1      	b.n	8017ea2 <_dtoa_r+0x32>
 80180fe:	2301      	movs	r3, #1
 8018100:	e7de      	b.n	80180c0 <_dtoa_r+0x250>
 8018102:	2300      	movs	r3, #0
 8018104:	9308      	str	r3, [sp, #32]
 8018106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018108:	eb0a 0903 	add.w	r9, sl, r3
 801810c:	f109 0301 	add.w	r3, r9, #1
 8018110:	2b01      	cmp	r3, #1
 8018112:	9301      	str	r3, [sp, #4]
 8018114:	bfb8      	it	lt
 8018116:	2301      	movlt	r3, #1
 8018118:	e7dd      	b.n	80180d6 <_dtoa_r+0x266>
 801811a:	2301      	movs	r3, #1
 801811c:	e7f2      	b.n	8018104 <_dtoa_r+0x294>
 801811e:	2501      	movs	r5, #1
 8018120:	2300      	movs	r3, #0
 8018122:	9305      	str	r3, [sp, #20]
 8018124:	9508      	str	r5, [sp, #32]
 8018126:	f04f 39ff 	mov.w	r9, #4294967295
 801812a:	2200      	movs	r2, #0
 801812c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018130:	2312      	movs	r3, #18
 8018132:	9209      	str	r2, [sp, #36]	; 0x24
 8018134:	e7cf      	b.n	80180d6 <_dtoa_r+0x266>
 8018136:	2301      	movs	r3, #1
 8018138:	9308      	str	r3, [sp, #32]
 801813a:	e7f4      	b.n	8018126 <_dtoa_r+0x2b6>
 801813c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018140:	f8cd 9004 	str.w	r9, [sp, #4]
 8018144:	464b      	mov	r3, r9
 8018146:	e7c6      	b.n	80180d6 <_dtoa_r+0x266>
 8018148:	3101      	adds	r1, #1
 801814a:	6041      	str	r1, [r0, #4]
 801814c:	0052      	lsls	r2, r2, #1
 801814e:	e7c6      	b.n	80180de <_dtoa_r+0x26e>
 8018150:	636f4361 	.word	0x636f4361
 8018154:	3fd287a7 	.word	0x3fd287a7
 8018158:	8b60c8b3 	.word	0x8b60c8b3
 801815c:	3fc68a28 	.word	0x3fc68a28
 8018160:	509f79fb 	.word	0x509f79fb
 8018164:	3fd34413 	.word	0x3fd34413
 8018168:	0801c111 	.word	0x0801c111
 801816c:	0801c128 	.word	0x0801c128
 8018170:	7ff00000 	.word	0x7ff00000
 8018174:	0801c10d 	.word	0x0801c10d
 8018178:	0801c104 	.word	0x0801c104
 801817c:	0801c38a 	.word	0x0801c38a
 8018180:	3ff80000 	.word	0x3ff80000
 8018184:	0801c2a0 	.word	0x0801c2a0
 8018188:	0801c187 	.word	0x0801c187
 801818c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801818e:	9a00      	ldr	r2, [sp, #0]
 8018190:	601a      	str	r2, [r3, #0]
 8018192:	9b01      	ldr	r3, [sp, #4]
 8018194:	2b0e      	cmp	r3, #14
 8018196:	f200 80ad 	bhi.w	80182f4 <_dtoa_r+0x484>
 801819a:	2d00      	cmp	r5, #0
 801819c:	f000 80aa 	beq.w	80182f4 <_dtoa_r+0x484>
 80181a0:	f1ba 0f00 	cmp.w	sl, #0
 80181a4:	dd36      	ble.n	8018214 <_dtoa_r+0x3a4>
 80181a6:	4ac3      	ldr	r2, [pc, #780]	; (80184b4 <_dtoa_r+0x644>)
 80181a8:	f00a 030f 	and.w	r3, sl, #15
 80181ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80181b0:	ed93 7b00 	vldr	d7, [r3]
 80181b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80181b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80181bc:	eeb0 8a47 	vmov.f32	s16, s14
 80181c0:	eef0 8a67 	vmov.f32	s17, s15
 80181c4:	d016      	beq.n	80181f4 <_dtoa_r+0x384>
 80181c6:	4bbc      	ldr	r3, [pc, #752]	; (80184b8 <_dtoa_r+0x648>)
 80181c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80181cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80181d0:	f7e8 fb4c 	bl	800086c <__aeabi_ddiv>
 80181d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181d8:	f007 070f 	and.w	r7, r7, #15
 80181dc:	2503      	movs	r5, #3
 80181de:	4eb6      	ldr	r6, [pc, #728]	; (80184b8 <_dtoa_r+0x648>)
 80181e0:	b957      	cbnz	r7, 80181f8 <_dtoa_r+0x388>
 80181e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80181e6:	ec53 2b18 	vmov	r2, r3, d8
 80181ea:	f7e8 fb3f 	bl	800086c <__aeabi_ddiv>
 80181ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80181f2:	e029      	b.n	8018248 <_dtoa_r+0x3d8>
 80181f4:	2502      	movs	r5, #2
 80181f6:	e7f2      	b.n	80181de <_dtoa_r+0x36e>
 80181f8:	07f9      	lsls	r1, r7, #31
 80181fa:	d508      	bpl.n	801820e <_dtoa_r+0x39e>
 80181fc:	ec51 0b18 	vmov	r0, r1, d8
 8018200:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018204:	f7e8 fa08 	bl	8000618 <__aeabi_dmul>
 8018208:	ec41 0b18 	vmov	d8, r0, r1
 801820c:	3501      	adds	r5, #1
 801820e:	107f      	asrs	r7, r7, #1
 8018210:	3608      	adds	r6, #8
 8018212:	e7e5      	b.n	80181e0 <_dtoa_r+0x370>
 8018214:	f000 80a6 	beq.w	8018364 <_dtoa_r+0x4f4>
 8018218:	f1ca 0600 	rsb	r6, sl, #0
 801821c:	4ba5      	ldr	r3, [pc, #660]	; (80184b4 <_dtoa_r+0x644>)
 801821e:	4fa6      	ldr	r7, [pc, #664]	; (80184b8 <_dtoa_r+0x648>)
 8018220:	f006 020f 	and.w	r2, r6, #15
 8018224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801822c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018230:	f7e8 f9f2 	bl	8000618 <__aeabi_dmul>
 8018234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018238:	1136      	asrs	r6, r6, #4
 801823a:	2300      	movs	r3, #0
 801823c:	2502      	movs	r5, #2
 801823e:	2e00      	cmp	r6, #0
 8018240:	f040 8085 	bne.w	801834e <_dtoa_r+0x4de>
 8018244:	2b00      	cmp	r3, #0
 8018246:	d1d2      	bne.n	80181ee <_dtoa_r+0x37e>
 8018248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801824a:	2b00      	cmp	r3, #0
 801824c:	f000 808c 	beq.w	8018368 <_dtoa_r+0x4f8>
 8018250:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018254:	4b99      	ldr	r3, [pc, #612]	; (80184bc <_dtoa_r+0x64c>)
 8018256:	2200      	movs	r2, #0
 8018258:	4630      	mov	r0, r6
 801825a:	4639      	mov	r1, r7
 801825c:	f7e8 fc4e 	bl	8000afc <__aeabi_dcmplt>
 8018260:	2800      	cmp	r0, #0
 8018262:	f000 8081 	beq.w	8018368 <_dtoa_r+0x4f8>
 8018266:	9b01      	ldr	r3, [sp, #4]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d07d      	beq.n	8018368 <_dtoa_r+0x4f8>
 801826c:	f1b9 0f00 	cmp.w	r9, #0
 8018270:	dd3c      	ble.n	80182ec <_dtoa_r+0x47c>
 8018272:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018276:	9307      	str	r3, [sp, #28]
 8018278:	2200      	movs	r2, #0
 801827a:	4b91      	ldr	r3, [pc, #580]	; (80184c0 <_dtoa_r+0x650>)
 801827c:	4630      	mov	r0, r6
 801827e:	4639      	mov	r1, r7
 8018280:	f7e8 f9ca 	bl	8000618 <__aeabi_dmul>
 8018284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018288:	3501      	adds	r5, #1
 801828a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801828e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018292:	4628      	mov	r0, r5
 8018294:	f7e8 f956 	bl	8000544 <__aeabi_i2d>
 8018298:	4632      	mov	r2, r6
 801829a:	463b      	mov	r3, r7
 801829c:	f7e8 f9bc 	bl	8000618 <__aeabi_dmul>
 80182a0:	4b88      	ldr	r3, [pc, #544]	; (80184c4 <_dtoa_r+0x654>)
 80182a2:	2200      	movs	r2, #0
 80182a4:	f7e8 f802 	bl	80002ac <__adddf3>
 80182a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80182ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182b0:	9303      	str	r3, [sp, #12]
 80182b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d15c      	bne.n	8018372 <_dtoa_r+0x502>
 80182b8:	4b83      	ldr	r3, [pc, #524]	; (80184c8 <_dtoa_r+0x658>)
 80182ba:	2200      	movs	r2, #0
 80182bc:	4630      	mov	r0, r6
 80182be:	4639      	mov	r1, r7
 80182c0:	f7e7 fff2 	bl	80002a8 <__aeabi_dsub>
 80182c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80182c8:	4606      	mov	r6, r0
 80182ca:	460f      	mov	r7, r1
 80182cc:	f7e8 fc34 	bl	8000b38 <__aeabi_dcmpgt>
 80182d0:	2800      	cmp	r0, #0
 80182d2:	f040 8296 	bne.w	8018802 <_dtoa_r+0x992>
 80182d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80182da:	4630      	mov	r0, r6
 80182dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80182e0:	4639      	mov	r1, r7
 80182e2:	f7e8 fc0b 	bl	8000afc <__aeabi_dcmplt>
 80182e6:	2800      	cmp	r0, #0
 80182e8:	f040 8288 	bne.w	80187fc <_dtoa_r+0x98c>
 80182ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80182f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80182f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	f2c0 8158 	blt.w	80185ac <_dtoa_r+0x73c>
 80182fc:	f1ba 0f0e 	cmp.w	sl, #14
 8018300:	f300 8154 	bgt.w	80185ac <_dtoa_r+0x73c>
 8018304:	4b6b      	ldr	r3, [pc, #428]	; (80184b4 <_dtoa_r+0x644>)
 8018306:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801830a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801830e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018310:	2b00      	cmp	r3, #0
 8018312:	f280 80e3 	bge.w	80184dc <_dtoa_r+0x66c>
 8018316:	9b01      	ldr	r3, [sp, #4]
 8018318:	2b00      	cmp	r3, #0
 801831a:	f300 80df 	bgt.w	80184dc <_dtoa_r+0x66c>
 801831e:	f040 826d 	bne.w	80187fc <_dtoa_r+0x98c>
 8018322:	4b69      	ldr	r3, [pc, #420]	; (80184c8 <_dtoa_r+0x658>)
 8018324:	2200      	movs	r2, #0
 8018326:	4640      	mov	r0, r8
 8018328:	4649      	mov	r1, r9
 801832a:	f7e8 f975 	bl	8000618 <__aeabi_dmul>
 801832e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018332:	f7e8 fbf7 	bl	8000b24 <__aeabi_dcmpge>
 8018336:	9e01      	ldr	r6, [sp, #4]
 8018338:	4637      	mov	r7, r6
 801833a:	2800      	cmp	r0, #0
 801833c:	f040 8243 	bne.w	80187c6 <_dtoa_r+0x956>
 8018340:	9d00      	ldr	r5, [sp, #0]
 8018342:	2331      	movs	r3, #49	; 0x31
 8018344:	f805 3b01 	strb.w	r3, [r5], #1
 8018348:	f10a 0a01 	add.w	sl, sl, #1
 801834c:	e23f      	b.n	80187ce <_dtoa_r+0x95e>
 801834e:	07f2      	lsls	r2, r6, #31
 8018350:	d505      	bpl.n	801835e <_dtoa_r+0x4ee>
 8018352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018356:	f7e8 f95f 	bl	8000618 <__aeabi_dmul>
 801835a:	3501      	adds	r5, #1
 801835c:	2301      	movs	r3, #1
 801835e:	1076      	asrs	r6, r6, #1
 8018360:	3708      	adds	r7, #8
 8018362:	e76c      	b.n	801823e <_dtoa_r+0x3ce>
 8018364:	2502      	movs	r5, #2
 8018366:	e76f      	b.n	8018248 <_dtoa_r+0x3d8>
 8018368:	9b01      	ldr	r3, [sp, #4]
 801836a:	f8cd a01c 	str.w	sl, [sp, #28]
 801836e:	930c      	str	r3, [sp, #48]	; 0x30
 8018370:	e78d      	b.n	801828e <_dtoa_r+0x41e>
 8018372:	9900      	ldr	r1, [sp, #0]
 8018374:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018378:	4b4e      	ldr	r3, [pc, #312]	; (80184b4 <_dtoa_r+0x644>)
 801837a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801837e:	4401      	add	r1, r0
 8018380:	9102      	str	r1, [sp, #8]
 8018382:	9908      	ldr	r1, [sp, #32]
 8018384:	eeb0 8a47 	vmov.f32	s16, s14
 8018388:	eef0 8a67 	vmov.f32	s17, s15
 801838c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018390:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018394:	2900      	cmp	r1, #0
 8018396:	d045      	beq.n	8018424 <_dtoa_r+0x5b4>
 8018398:	494c      	ldr	r1, [pc, #304]	; (80184cc <_dtoa_r+0x65c>)
 801839a:	2000      	movs	r0, #0
 801839c:	f7e8 fa66 	bl	800086c <__aeabi_ddiv>
 80183a0:	ec53 2b18 	vmov	r2, r3, d8
 80183a4:	f7e7 ff80 	bl	80002a8 <__aeabi_dsub>
 80183a8:	9d00      	ldr	r5, [sp, #0]
 80183aa:	ec41 0b18 	vmov	d8, r0, r1
 80183ae:	4639      	mov	r1, r7
 80183b0:	4630      	mov	r0, r6
 80183b2:	f7e8 fbe1 	bl	8000b78 <__aeabi_d2iz>
 80183b6:	900c      	str	r0, [sp, #48]	; 0x30
 80183b8:	f7e8 f8c4 	bl	8000544 <__aeabi_i2d>
 80183bc:	4602      	mov	r2, r0
 80183be:	460b      	mov	r3, r1
 80183c0:	4630      	mov	r0, r6
 80183c2:	4639      	mov	r1, r7
 80183c4:	f7e7 ff70 	bl	80002a8 <__aeabi_dsub>
 80183c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183ca:	3330      	adds	r3, #48	; 0x30
 80183cc:	f805 3b01 	strb.w	r3, [r5], #1
 80183d0:	ec53 2b18 	vmov	r2, r3, d8
 80183d4:	4606      	mov	r6, r0
 80183d6:	460f      	mov	r7, r1
 80183d8:	f7e8 fb90 	bl	8000afc <__aeabi_dcmplt>
 80183dc:	2800      	cmp	r0, #0
 80183de:	d165      	bne.n	80184ac <_dtoa_r+0x63c>
 80183e0:	4632      	mov	r2, r6
 80183e2:	463b      	mov	r3, r7
 80183e4:	4935      	ldr	r1, [pc, #212]	; (80184bc <_dtoa_r+0x64c>)
 80183e6:	2000      	movs	r0, #0
 80183e8:	f7e7 ff5e 	bl	80002a8 <__aeabi_dsub>
 80183ec:	ec53 2b18 	vmov	r2, r3, d8
 80183f0:	f7e8 fb84 	bl	8000afc <__aeabi_dcmplt>
 80183f4:	2800      	cmp	r0, #0
 80183f6:	f040 80b9 	bne.w	801856c <_dtoa_r+0x6fc>
 80183fa:	9b02      	ldr	r3, [sp, #8]
 80183fc:	429d      	cmp	r5, r3
 80183fe:	f43f af75 	beq.w	80182ec <_dtoa_r+0x47c>
 8018402:	4b2f      	ldr	r3, [pc, #188]	; (80184c0 <_dtoa_r+0x650>)
 8018404:	ec51 0b18 	vmov	r0, r1, d8
 8018408:	2200      	movs	r2, #0
 801840a:	f7e8 f905 	bl	8000618 <__aeabi_dmul>
 801840e:	4b2c      	ldr	r3, [pc, #176]	; (80184c0 <_dtoa_r+0x650>)
 8018410:	ec41 0b18 	vmov	d8, r0, r1
 8018414:	2200      	movs	r2, #0
 8018416:	4630      	mov	r0, r6
 8018418:	4639      	mov	r1, r7
 801841a:	f7e8 f8fd 	bl	8000618 <__aeabi_dmul>
 801841e:	4606      	mov	r6, r0
 8018420:	460f      	mov	r7, r1
 8018422:	e7c4      	b.n	80183ae <_dtoa_r+0x53e>
 8018424:	ec51 0b17 	vmov	r0, r1, d7
 8018428:	f7e8 f8f6 	bl	8000618 <__aeabi_dmul>
 801842c:	9b02      	ldr	r3, [sp, #8]
 801842e:	9d00      	ldr	r5, [sp, #0]
 8018430:	930c      	str	r3, [sp, #48]	; 0x30
 8018432:	ec41 0b18 	vmov	d8, r0, r1
 8018436:	4639      	mov	r1, r7
 8018438:	4630      	mov	r0, r6
 801843a:	f7e8 fb9d 	bl	8000b78 <__aeabi_d2iz>
 801843e:	9011      	str	r0, [sp, #68]	; 0x44
 8018440:	f7e8 f880 	bl	8000544 <__aeabi_i2d>
 8018444:	4602      	mov	r2, r0
 8018446:	460b      	mov	r3, r1
 8018448:	4630      	mov	r0, r6
 801844a:	4639      	mov	r1, r7
 801844c:	f7e7 ff2c 	bl	80002a8 <__aeabi_dsub>
 8018450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018452:	3330      	adds	r3, #48	; 0x30
 8018454:	f805 3b01 	strb.w	r3, [r5], #1
 8018458:	9b02      	ldr	r3, [sp, #8]
 801845a:	429d      	cmp	r5, r3
 801845c:	4606      	mov	r6, r0
 801845e:	460f      	mov	r7, r1
 8018460:	f04f 0200 	mov.w	r2, #0
 8018464:	d134      	bne.n	80184d0 <_dtoa_r+0x660>
 8018466:	4b19      	ldr	r3, [pc, #100]	; (80184cc <_dtoa_r+0x65c>)
 8018468:	ec51 0b18 	vmov	r0, r1, d8
 801846c:	f7e7 ff1e 	bl	80002ac <__adddf3>
 8018470:	4602      	mov	r2, r0
 8018472:	460b      	mov	r3, r1
 8018474:	4630      	mov	r0, r6
 8018476:	4639      	mov	r1, r7
 8018478:	f7e8 fb5e 	bl	8000b38 <__aeabi_dcmpgt>
 801847c:	2800      	cmp	r0, #0
 801847e:	d175      	bne.n	801856c <_dtoa_r+0x6fc>
 8018480:	ec53 2b18 	vmov	r2, r3, d8
 8018484:	4911      	ldr	r1, [pc, #68]	; (80184cc <_dtoa_r+0x65c>)
 8018486:	2000      	movs	r0, #0
 8018488:	f7e7 ff0e 	bl	80002a8 <__aeabi_dsub>
 801848c:	4602      	mov	r2, r0
 801848e:	460b      	mov	r3, r1
 8018490:	4630      	mov	r0, r6
 8018492:	4639      	mov	r1, r7
 8018494:	f7e8 fb32 	bl	8000afc <__aeabi_dcmplt>
 8018498:	2800      	cmp	r0, #0
 801849a:	f43f af27 	beq.w	80182ec <_dtoa_r+0x47c>
 801849e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80184a0:	1e6b      	subs	r3, r5, #1
 80184a2:	930c      	str	r3, [sp, #48]	; 0x30
 80184a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80184a8:	2b30      	cmp	r3, #48	; 0x30
 80184aa:	d0f8      	beq.n	801849e <_dtoa_r+0x62e>
 80184ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80184b0:	e04a      	b.n	8018548 <_dtoa_r+0x6d8>
 80184b2:	bf00      	nop
 80184b4:	0801c2a0 	.word	0x0801c2a0
 80184b8:	0801c278 	.word	0x0801c278
 80184bc:	3ff00000 	.word	0x3ff00000
 80184c0:	40240000 	.word	0x40240000
 80184c4:	401c0000 	.word	0x401c0000
 80184c8:	40140000 	.word	0x40140000
 80184cc:	3fe00000 	.word	0x3fe00000
 80184d0:	4baf      	ldr	r3, [pc, #700]	; (8018790 <_dtoa_r+0x920>)
 80184d2:	f7e8 f8a1 	bl	8000618 <__aeabi_dmul>
 80184d6:	4606      	mov	r6, r0
 80184d8:	460f      	mov	r7, r1
 80184da:	e7ac      	b.n	8018436 <_dtoa_r+0x5c6>
 80184dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80184e0:	9d00      	ldr	r5, [sp, #0]
 80184e2:	4642      	mov	r2, r8
 80184e4:	464b      	mov	r3, r9
 80184e6:	4630      	mov	r0, r6
 80184e8:	4639      	mov	r1, r7
 80184ea:	f7e8 f9bf 	bl	800086c <__aeabi_ddiv>
 80184ee:	f7e8 fb43 	bl	8000b78 <__aeabi_d2iz>
 80184f2:	9002      	str	r0, [sp, #8]
 80184f4:	f7e8 f826 	bl	8000544 <__aeabi_i2d>
 80184f8:	4642      	mov	r2, r8
 80184fa:	464b      	mov	r3, r9
 80184fc:	f7e8 f88c 	bl	8000618 <__aeabi_dmul>
 8018500:	4602      	mov	r2, r0
 8018502:	460b      	mov	r3, r1
 8018504:	4630      	mov	r0, r6
 8018506:	4639      	mov	r1, r7
 8018508:	f7e7 fece 	bl	80002a8 <__aeabi_dsub>
 801850c:	9e02      	ldr	r6, [sp, #8]
 801850e:	9f01      	ldr	r7, [sp, #4]
 8018510:	3630      	adds	r6, #48	; 0x30
 8018512:	f805 6b01 	strb.w	r6, [r5], #1
 8018516:	9e00      	ldr	r6, [sp, #0]
 8018518:	1bae      	subs	r6, r5, r6
 801851a:	42b7      	cmp	r7, r6
 801851c:	4602      	mov	r2, r0
 801851e:	460b      	mov	r3, r1
 8018520:	d137      	bne.n	8018592 <_dtoa_r+0x722>
 8018522:	f7e7 fec3 	bl	80002ac <__adddf3>
 8018526:	4642      	mov	r2, r8
 8018528:	464b      	mov	r3, r9
 801852a:	4606      	mov	r6, r0
 801852c:	460f      	mov	r7, r1
 801852e:	f7e8 fb03 	bl	8000b38 <__aeabi_dcmpgt>
 8018532:	b9c8      	cbnz	r0, 8018568 <_dtoa_r+0x6f8>
 8018534:	4642      	mov	r2, r8
 8018536:	464b      	mov	r3, r9
 8018538:	4630      	mov	r0, r6
 801853a:	4639      	mov	r1, r7
 801853c:	f7e8 fad4 	bl	8000ae8 <__aeabi_dcmpeq>
 8018540:	b110      	cbz	r0, 8018548 <_dtoa_r+0x6d8>
 8018542:	9b02      	ldr	r3, [sp, #8]
 8018544:	07d9      	lsls	r1, r3, #31
 8018546:	d40f      	bmi.n	8018568 <_dtoa_r+0x6f8>
 8018548:	4620      	mov	r0, r4
 801854a:	4659      	mov	r1, fp
 801854c:	f000 ff98 	bl	8019480 <_Bfree>
 8018550:	2300      	movs	r3, #0
 8018552:	702b      	strb	r3, [r5, #0]
 8018554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018556:	f10a 0001 	add.w	r0, sl, #1
 801855a:	6018      	str	r0, [r3, #0]
 801855c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801855e:	2b00      	cmp	r3, #0
 8018560:	f43f acd8 	beq.w	8017f14 <_dtoa_r+0xa4>
 8018564:	601d      	str	r5, [r3, #0]
 8018566:	e4d5      	b.n	8017f14 <_dtoa_r+0xa4>
 8018568:	f8cd a01c 	str.w	sl, [sp, #28]
 801856c:	462b      	mov	r3, r5
 801856e:	461d      	mov	r5, r3
 8018570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018574:	2a39      	cmp	r2, #57	; 0x39
 8018576:	d108      	bne.n	801858a <_dtoa_r+0x71a>
 8018578:	9a00      	ldr	r2, [sp, #0]
 801857a:	429a      	cmp	r2, r3
 801857c:	d1f7      	bne.n	801856e <_dtoa_r+0x6fe>
 801857e:	9a07      	ldr	r2, [sp, #28]
 8018580:	9900      	ldr	r1, [sp, #0]
 8018582:	3201      	adds	r2, #1
 8018584:	9207      	str	r2, [sp, #28]
 8018586:	2230      	movs	r2, #48	; 0x30
 8018588:	700a      	strb	r2, [r1, #0]
 801858a:	781a      	ldrb	r2, [r3, #0]
 801858c:	3201      	adds	r2, #1
 801858e:	701a      	strb	r2, [r3, #0]
 8018590:	e78c      	b.n	80184ac <_dtoa_r+0x63c>
 8018592:	4b7f      	ldr	r3, [pc, #508]	; (8018790 <_dtoa_r+0x920>)
 8018594:	2200      	movs	r2, #0
 8018596:	f7e8 f83f 	bl	8000618 <__aeabi_dmul>
 801859a:	2200      	movs	r2, #0
 801859c:	2300      	movs	r3, #0
 801859e:	4606      	mov	r6, r0
 80185a0:	460f      	mov	r7, r1
 80185a2:	f7e8 faa1 	bl	8000ae8 <__aeabi_dcmpeq>
 80185a6:	2800      	cmp	r0, #0
 80185a8:	d09b      	beq.n	80184e2 <_dtoa_r+0x672>
 80185aa:	e7cd      	b.n	8018548 <_dtoa_r+0x6d8>
 80185ac:	9a08      	ldr	r2, [sp, #32]
 80185ae:	2a00      	cmp	r2, #0
 80185b0:	f000 80c4 	beq.w	801873c <_dtoa_r+0x8cc>
 80185b4:	9a05      	ldr	r2, [sp, #20]
 80185b6:	2a01      	cmp	r2, #1
 80185b8:	f300 80a8 	bgt.w	801870c <_dtoa_r+0x89c>
 80185bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80185be:	2a00      	cmp	r2, #0
 80185c0:	f000 80a0 	beq.w	8018704 <_dtoa_r+0x894>
 80185c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80185c8:	9e06      	ldr	r6, [sp, #24]
 80185ca:	4645      	mov	r5, r8
 80185cc:	9a04      	ldr	r2, [sp, #16]
 80185ce:	2101      	movs	r1, #1
 80185d0:	441a      	add	r2, r3
 80185d2:	4620      	mov	r0, r4
 80185d4:	4498      	add	r8, r3
 80185d6:	9204      	str	r2, [sp, #16]
 80185d8:	f001 f858 	bl	801968c <__i2b>
 80185dc:	4607      	mov	r7, r0
 80185de:	2d00      	cmp	r5, #0
 80185e0:	dd0b      	ble.n	80185fa <_dtoa_r+0x78a>
 80185e2:	9b04      	ldr	r3, [sp, #16]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	dd08      	ble.n	80185fa <_dtoa_r+0x78a>
 80185e8:	42ab      	cmp	r3, r5
 80185ea:	9a04      	ldr	r2, [sp, #16]
 80185ec:	bfa8      	it	ge
 80185ee:	462b      	movge	r3, r5
 80185f0:	eba8 0803 	sub.w	r8, r8, r3
 80185f4:	1aed      	subs	r5, r5, r3
 80185f6:	1ad3      	subs	r3, r2, r3
 80185f8:	9304      	str	r3, [sp, #16]
 80185fa:	9b06      	ldr	r3, [sp, #24]
 80185fc:	b1fb      	cbz	r3, 801863e <_dtoa_r+0x7ce>
 80185fe:	9b08      	ldr	r3, [sp, #32]
 8018600:	2b00      	cmp	r3, #0
 8018602:	f000 809f 	beq.w	8018744 <_dtoa_r+0x8d4>
 8018606:	2e00      	cmp	r6, #0
 8018608:	dd11      	ble.n	801862e <_dtoa_r+0x7be>
 801860a:	4639      	mov	r1, r7
 801860c:	4632      	mov	r2, r6
 801860e:	4620      	mov	r0, r4
 8018610:	f001 f8f8 	bl	8019804 <__pow5mult>
 8018614:	465a      	mov	r2, fp
 8018616:	4601      	mov	r1, r0
 8018618:	4607      	mov	r7, r0
 801861a:	4620      	mov	r0, r4
 801861c:	f001 f84c 	bl	80196b8 <__multiply>
 8018620:	4659      	mov	r1, fp
 8018622:	9007      	str	r0, [sp, #28]
 8018624:	4620      	mov	r0, r4
 8018626:	f000 ff2b 	bl	8019480 <_Bfree>
 801862a:	9b07      	ldr	r3, [sp, #28]
 801862c:	469b      	mov	fp, r3
 801862e:	9b06      	ldr	r3, [sp, #24]
 8018630:	1b9a      	subs	r2, r3, r6
 8018632:	d004      	beq.n	801863e <_dtoa_r+0x7ce>
 8018634:	4659      	mov	r1, fp
 8018636:	4620      	mov	r0, r4
 8018638:	f001 f8e4 	bl	8019804 <__pow5mult>
 801863c:	4683      	mov	fp, r0
 801863e:	2101      	movs	r1, #1
 8018640:	4620      	mov	r0, r4
 8018642:	f001 f823 	bl	801968c <__i2b>
 8018646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018648:	2b00      	cmp	r3, #0
 801864a:	4606      	mov	r6, r0
 801864c:	dd7c      	ble.n	8018748 <_dtoa_r+0x8d8>
 801864e:	461a      	mov	r2, r3
 8018650:	4601      	mov	r1, r0
 8018652:	4620      	mov	r0, r4
 8018654:	f001 f8d6 	bl	8019804 <__pow5mult>
 8018658:	9b05      	ldr	r3, [sp, #20]
 801865a:	2b01      	cmp	r3, #1
 801865c:	4606      	mov	r6, r0
 801865e:	dd76      	ble.n	801874e <_dtoa_r+0x8de>
 8018660:	2300      	movs	r3, #0
 8018662:	9306      	str	r3, [sp, #24]
 8018664:	6933      	ldr	r3, [r6, #16]
 8018666:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801866a:	6918      	ldr	r0, [r3, #16]
 801866c:	f000 ffbe 	bl	80195ec <__hi0bits>
 8018670:	f1c0 0020 	rsb	r0, r0, #32
 8018674:	9b04      	ldr	r3, [sp, #16]
 8018676:	4418      	add	r0, r3
 8018678:	f010 001f 	ands.w	r0, r0, #31
 801867c:	f000 8086 	beq.w	801878c <_dtoa_r+0x91c>
 8018680:	f1c0 0320 	rsb	r3, r0, #32
 8018684:	2b04      	cmp	r3, #4
 8018686:	dd7f      	ble.n	8018788 <_dtoa_r+0x918>
 8018688:	f1c0 001c 	rsb	r0, r0, #28
 801868c:	9b04      	ldr	r3, [sp, #16]
 801868e:	4403      	add	r3, r0
 8018690:	4480      	add	r8, r0
 8018692:	4405      	add	r5, r0
 8018694:	9304      	str	r3, [sp, #16]
 8018696:	f1b8 0f00 	cmp.w	r8, #0
 801869a:	dd05      	ble.n	80186a8 <_dtoa_r+0x838>
 801869c:	4659      	mov	r1, fp
 801869e:	4642      	mov	r2, r8
 80186a0:	4620      	mov	r0, r4
 80186a2:	f001 f909 	bl	80198b8 <__lshift>
 80186a6:	4683      	mov	fp, r0
 80186a8:	9b04      	ldr	r3, [sp, #16]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	dd05      	ble.n	80186ba <_dtoa_r+0x84a>
 80186ae:	4631      	mov	r1, r6
 80186b0:	461a      	mov	r2, r3
 80186b2:	4620      	mov	r0, r4
 80186b4:	f001 f900 	bl	80198b8 <__lshift>
 80186b8:	4606      	mov	r6, r0
 80186ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d069      	beq.n	8018794 <_dtoa_r+0x924>
 80186c0:	4631      	mov	r1, r6
 80186c2:	4658      	mov	r0, fp
 80186c4:	f001 f964 	bl	8019990 <__mcmp>
 80186c8:	2800      	cmp	r0, #0
 80186ca:	da63      	bge.n	8018794 <_dtoa_r+0x924>
 80186cc:	2300      	movs	r3, #0
 80186ce:	4659      	mov	r1, fp
 80186d0:	220a      	movs	r2, #10
 80186d2:	4620      	mov	r0, r4
 80186d4:	f000 fef6 	bl	80194c4 <__multadd>
 80186d8:	9b08      	ldr	r3, [sp, #32]
 80186da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80186de:	4683      	mov	fp, r0
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	f000 818f 	beq.w	8018a04 <_dtoa_r+0xb94>
 80186e6:	4639      	mov	r1, r7
 80186e8:	2300      	movs	r3, #0
 80186ea:	220a      	movs	r2, #10
 80186ec:	4620      	mov	r0, r4
 80186ee:	f000 fee9 	bl	80194c4 <__multadd>
 80186f2:	f1b9 0f00 	cmp.w	r9, #0
 80186f6:	4607      	mov	r7, r0
 80186f8:	f300 808e 	bgt.w	8018818 <_dtoa_r+0x9a8>
 80186fc:	9b05      	ldr	r3, [sp, #20]
 80186fe:	2b02      	cmp	r3, #2
 8018700:	dc50      	bgt.n	80187a4 <_dtoa_r+0x934>
 8018702:	e089      	b.n	8018818 <_dtoa_r+0x9a8>
 8018704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801870a:	e75d      	b.n	80185c8 <_dtoa_r+0x758>
 801870c:	9b01      	ldr	r3, [sp, #4]
 801870e:	1e5e      	subs	r6, r3, #1
 8018710:	9b06      	ldr	r3, [sp, #24]
 8018712:	42b3      	cmp	r3, r6
 8018714:	bfbf      	itttt	lt
 8018716:	9b06      	ldrlt	r3, [sp, #24]
 8018718:	9606      	strlt	r6, [sp, #24]
 801871a:	1af2      	sublt	r2, r6, r3
 801871c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801871e:	bfb6      	itet	lt
 8018720:	189b      	addlt	r3, r3, r2
 8018722:	1b9e      	subge	r6, r3, r6
 8018724:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018726:	9b01      	ldr	r3, [sp, #4]
 8018728:	bfb8      	it	lt
 801872a:	2600      	movlt	r6, #0
 801872c:	2b00      	cmp	r3, #0
 801872e:	bfb5      	itete	lt
 8018730:	eba8 0503 	sublt.w	r5, r8, r3
 8018734:	9b01      	ldrge	r3, [sp, #4]
 8018736:	2300      	movlt	r3, #0
 8018738:	4645      	movge	r5, r8
 801873a:	e747      	b.n	80185cc <_dtoa_r+0x75c>
 801873c:	9e06      	ldr	r6, [sp, #24]
 801873e:	9f08      	ldr	r7, [sp, #32]
 8018740:	4645      	mov	r5, r8
 8018742:	e74c      	b.n	80185de <_dtoa_r+0x76e>
 8018744:	9a06      	ldr	r2, [sp, #24]
 8018746:	e775      	b.n	8018634 <_dtoa_r+0x7c4>
 8018748:	9b05      	ldr	r3, [sp, #20]
 801874a:	2b01      	cmp	r3, #1
 801874c:	dc18      	bgt.n	8018780 <_dtoa_r+0x910>
 801874e:	9b02      	ldr	r3, [sp, #8]
 8018750:	b9b3      	cbnz	r3, 8018780 <_dtoa_r+0x910>
 8018752:	9b03      	ldr	r3, [sp, #12]
 8018754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018758:	b9a3      	cbnz	r3, 8018784 <_dtoa_r+0x914>
 801875a:	9b03      	ldr	r3, [sp, #12]
 801875c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018760:	0d1b      	lsrs	r3, r3, #20
 8018762:	051b      	lsls	r3, r3, #20
 8018764:	b12b      	cbz	r3, 8018772 <_dtoa_r+0x902>
 8018766:	9b04      	ldr	r3, [sp, #16]
 8018768:	3301      	adds	r3, #1
 801876a:	9304      	str	r3, [sp, #16]
 801876c:	f108 0801 	add.w	r8, r8, #1
 8018770:	2301      	movs	r3, #1
 8018772:	9306      	str	r3, [sp, #24]
 8018774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018776:	2b00      	cmp	r3, #0
 8018778:	f47f af74 	bne.w	8018664 <_dtoa_r+0x7f4>
 801877c:	2001      	movs	r0, #1
 801877e:	e779      	b.n	8018674 <_dtoa_r+0x804>
 8018780:	2300      	movs	r3, #0
 8018782:	e7f6      	b.n	8018772 <_dtoa_r+0x902>
 8018784:	9b02      	ldr	r3, [sp, #8]
 8018786:	e7f4      	b.n	8018772 <_dtoa_r+0x902>
 8018788:	d085      	beq.n	8018696 <_dtoa_r+0x826>
 801878a:	4618      	mov	r0, r3
 801878c:	301c      	adds	r0, #28
 801878e:	e77d      	b.n	801868c <_dtoa_r+0x81c>
 8018790:	40240000 	.word	0x40240000
 8018794:	9b01      	ldr	r3, [sp, #4]
 8018796:	2b00      	cmp	r3, #0
 8018798:	dc38      	bgt.n	801880c <_dtoa_r+0x99c>
 801879a:	9b05      	ldr	r3, [sp, #20]
 801879c:	2b02      	cmp	r3, #2
 801879e:	dd35      	ble.n	801880c <_dtoa_r+0x99c>
 80187a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80187a4:	f1b9 0f00 	cmp.w	r9, #0
 80187a8:	d10d      	bne.n	80187c6 <_dtoa_r+0x956>
 80187aa:	4631      	mov	r1, r6
 80187ac:	464b      	mov	r3, r9
 80187ae:	2205      	movs	r2, #5
 80187b0:	4620      	mov	r0, r4
 80187b2:	f000 fe87 	bl	80194c4 <__multadd>
 80187b6:	4601      	mov	r1, r0
 80187b8:	4606      	mov	r6, r0
 80187ba:	4658      	mov	r0, fp
 80187bc:	f001 f8e8 	bl	8019990 <__mcmp>
 80187c0:	2800      	cmp	r0, #0
 80187c2:	f73f adbd 	bgt.w	8018340 <_dtoa_r+0x4d0>
 80187c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187c8:	9d00      	ldr	r5, [sp, #0]
 80187ca:	ea6f 0a03 	mvn.w	sl, r3
 80187ce:	f04f 0800 	mov.w	r8, #0
 80187d2:	4631      	mov	r1, r6
 80187d4:	4620      	mov	r0, r4
 80187d6:	f000 fe53 	bl	8019480 <_Bfree>
 80187da:	2f00      	cmp	r7, #0
 80187dc:	f43f aeb4 	beq.w	8018548 <_dtoa_r+0x6d8>
 80187e0:	f1b8 0f00 	cmp.w	r8, #0
 80187e4:	d005      	beq.n	80187f2 <_dtoa_r+0x982>
 80187e6:	45b8      	cmp	r8, r7
 80187e8:	d003      	beq.n	80187f2 <_dtoa_r+0x982>
 80187ea:	4641      	mov	r1, r8
 80187ec:	4620      	mov	r0, r4
 80187ee:	f000 fe47 	bl	8019480 <_Bfree>
 80187f2:	4639      	mov	r1, r7
 80187f4:	4620      	mov	r0, r4
 80187f6:	f000 fe43 	bl	8019480 <_Bfree>
 80187fa:	e6a5      	b.n	8018548 <_dtoa_r+0x6d8>
 80187fc:	2600      	movs	r6, #0
 80187fe:	4637      	mov	r7, r6
 8018800:	e7e1      	b.n	80187c6 <_dtoa_r+0x956>
 8018802:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018804:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018808:	4637      	mov	r7, r6
 801880a:	e599      	b.n	8018340 <_dtoa_r+0x4d0>
 801880c:	9b08      	ldr	r3, [sp, #32]
 801880e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018812:	2b00      	cmp	r3, #0
 8018814:	f000 80fd 	beq.w	8018a12 <_dtoa_r+0xba2>
 8018818:	2d00      	cmp	r5, #0
 801881a:	dd05      	ble.n	8018828 <_dtoa_r+0x9b8>
 801881c:	4639      	mov	r1, r7
 801881e:	462a      	mov	r2, r5
 8018820:	4620      	mov	r0, r4
 8018822:	f001 f849 	bl	80198b8 <__lshift>
 8018826:	4607      	mov	r7, r0
 8018828:	9b06      	ldr	r3, [sp, #24]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d05c      	beq.n	80188e8 <_dtoa_r+0xa78>
 801882e:	6879      	ldr	r1, [r7, #4]
 8018830:	4620      	mov	r0, r4
 8018832:	f000 fde5 	bl	8019400 <_Balloc>
 8018836:	4605      	mov	r5, r0
 8018838:	b928      	cbnz	r0, 8018846 <_dtoa_r+0x9d6>
 801883a:	4b80      	ldr	r3, [pc, #512]	; (8018a3c <_dtoa_r+0xbcc>)
 801883c:	4602      	mov	r2, r0
 801883e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018842:	f7ff bb2e 	b.w	8017ea2 <_dtoa_r+0x32>
 8018846:	693a      	ldr	r2, [r7, #16]
 8018848:	3202      	adds	r2, #2
 801884a:	0092      	lsls	r2, r2, #2
 801884c:	f107 010c 	add.w	r1, r7, #12
 8018850:	300c      	adds	r0, #12
 8018852:	f7fd f8bb 	bl	80159cc <memcpy>
 8018856:	2201      	movs	r2, #1
 8018858:	4629      	mov	r1, r5
 801885a:	4620      	mov	r0, r4
 801885c:	f001 f82c 	bl	80198b8 <__lshift>
 8018860:	9b00      	ldr	r3, [sp, #0]
 8018862:	3301      	adds	r3, #1
 8018864:	9301      	str	r3, [sp, #4]
 8018866:	9b00      	ldr	r3, [sp, #0]
 8018868:	444b      	add	r3, r9
 801886a:	9307      	str	r3, [sp, #28]
 801886c:	9b02      	ldr	r3, [sp, #8]
 801886e:	f003 0301 	and.w	r3, r3, #1
 8018872:	46b8      	mov	r8, r7
 8018874:	9306      	str	r3, [sp, #24]
 8018876:	4607      	mov	r7, r0
 8018878:	9b01      	ldr	r3, [sp, #4]
 801887a:	4631      	mov	r1, r6
 801887c:	3b01      	subs	r3, #1
 801887e:	4658      	mov	r0, fp
 8018880:	9302      	str	r3, [sp, #8]
 8018882:	f7ff fa69 	bl	8017d58 <quorem>
 8018886:	4603      	mov	r3, r0
 8018888:	3330      	adds	r3, #48	; 0x30
 801888a:	9004      	str	r0, [sp, #16]
 801888c:	4641      	mov	r1, r8
 801888e:	4658      	mov	r0, fp
 8018890:	9308      	str	r3, [sp, #32]
 8018892:	f001 f87d 	bl	8019990 <__mcmp>
 8018896:	463a      	mov	r2, r7
 8018898:	4681      	mov	r9, r0
 801889a:	4631      	mov	r1, r6
 801889c:	4620      	mov	r0, r4
 801889e:	f001 f893 	bl	80199c8 <__mdiff>
 80188a2:	68c2      	ldr	r2, [r0, #12]
 80188a4:	9b08      	ldr	r3, [sp, #32]
 80188a6:	4605      	mov	r5, r0
 80188a8:	bb02      	cbnz	r2, 80188ec <_dtoa_r+0xa7c>
 80188aa:	4601      	mov	r1, r0
 80188ac:	4658      	mov	r0, fp
 80188ae:	f001 f86f 	bl	8019990 <__mcmp>
 80188b2:	9b08      	ldr	r3, [sp, #32]
 80188b4:	4602      	mov	r2, r0
 80188b6:	4629      	mov	r1, r5
 80188b8:	4620      	mov	r0, r4
 80188ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80188be:	f000 fddf 	bl	8019480 <_Bfree>
 80188c2:	9b05      	ldr	r3, [sp, #20]
 80188c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80188c6:	9d01      	ldr	r5, [sp, #4]
 80188c8:	ea43 0102 	orr.w	r1, r3, r2
 80188cc:	9b06      	ldr	r3, [sp, #24]
 80188ce:	430b      	orrs	r3, r1
 80188d0:	9b08      	ldr	r3, [sp, #32]
 80188d2:	d10d      	bne.n	80188f0 <_dtoa_r+0xa80>
 80188d4:	2b39      	cmp	r3, #57	; 0x39
 80188d6:	d029      	beq.n	801892c <_dtoa_r+0xabc>
 80188d8:	f1b9 0f00 	cmp.w	r9, #0
 80188dc:	dd01      	ble.n	80188e2 <_dtoa_r+0xa72>
 80188de:	9b04      	ldr	r3, [sp, #16]
 80188e0:	3331      	adds	r3, #49	; 0x31
 80188e2:	9a02      	ldr	r2, [sp, #8]
 80188e4:	7013      	strb	r3, [r2, #0]
 80188e6:	e774      	b.n	80187d2 <_dtoa_r+0x962>
 80188e8:	4638      	mov	r0, r7
 80188ea:	e7b9      	b.n	8018860 <_dtoa_r+0x9f0>
 80188ec:	2201      	movs	r2, #1
 80188ee:	e7e2      	b.n	80188b6 <_dtoa_r+0xa46>
 80188f0:	f1b9 0f00 	cmp.w	r9, #0
 80188f4:	db06      	blt.n	8018904 <_dtoa_r+0xa94>
 80188f6:	9905      	ldr	r1, [sp, #20]
 80188f8:	ea41 0909 	orr.w	r9, r1, r9
 80188fc:	9906      	ldr	r1, [sp, #24]
 80188fe:	ea59 0101 	orrs.w	r1, r9, r1
 8018902:	d120      	bne.n	8018946 <_dtoa_r+0xad6>
 8018904:	2a00      	cmp	r2, #0
 8018906:	ddec      	ble.n	80188e2 <_dtoa_r+0xa72>
 8018908:	4659      	mov	r1, fp
 801890a:	2201      	movs	r2, #1
 801890c:	4620      	mov	r0, r4
 801890e:	9301      	str	r3, [sp, #4]
 8018910:	f000 ffd2 	bl	80198b8 <__lshift>
 8018914:	4631      	mov	r1, r6
 8018916:	4683      	mov	fp, r0
 8018918:	f001 f83a 	bl	8019990 <__mcmp>
 801891c:	2800      	cmp	r0, #0
 801891e:	9b01      	ldr	r3, [sp, #4]
 8018920:	dc02      	bgt.n	8018928 <_dtoa_r+0xab8>
 8018922:	d1de      	bne.n	80188e2 <_dtoa_r+0xa72>
 8018924:	07da      	lsls	r2, r3, #31
 8018926:	d5dc      	bpl.n	80188e2 <_dtoa_r+0xa72>
 8018928:	2b39      	cmp	r3, #57	; 0x39
 801892a:	d1d8      	bne.n	80188de <_dtoa_r+0xa6e>
 801892c:	9a02      	ldr	r2, [sp, #8]
 801892e:	2339      	movs	r3, #57	; 0x39
 8018930:	7013      	strb	r3, [r2, #0]
 8018932:	462b      	mov	r3, r5
 8018934:	461d      	mov	r5, r3
 8018936:	3b01      	subs	r3, #1
 8018938:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801893c:	2a39      	cmp	r2, #57	; 0x39
 801893e:	d050      	beq.n	80189e2 <_dtoa_r+0xb72>
 8018940:	3201      	adds	r2, #1
 8018942:	701a      	strb	r2, [r3, #0]
 8018944:	e745      	b.n	80187d2 <_dtoa_r+0x962>
 8018946:	2a00      	cmp	r2, #0
 8018948:	dd03      	ble.n	8018952 <_dtoa_r+0xae2>
 801894a:	2b39      	cmp	r3, #57	; 0x39
 801894c:	d0ee      	beq.n	801892c <_dtoa_r+0xabc>
 801894e:	3301      	adds	r3, #1
 8018950:	e7c7      	b.n	80188e2 <_dtoa_r+0xa72>
 8018952:	9a01      	ldr	r2, [sp, #4]
 8018954:	9907      	ldr	r1, [sp, #28]
 8018956:	f802 3c01 	strb.w	r3, [r2, #-1]
 801895a:	428a      	cmp	r2, r1
 801895c:	d02a      	beq.n	80189b4 <_dtoa_r+0xb44>
 801895e:	4659      	mov	r1, fp
 8018960:	2300      	movs	r3, #0
 8018962:	220a      	movs	r2, #10
 8018964:	4620      	mov	r0, r4
 8018966:	f000 fdad 	bl	80194c4 <__multadd>
 801896a:	45b8      	cmp	r8, r7
 801896c:	4683      	mov	fp, r0
 801896e:	f04f 0300 	mov.w	r3, #0
 8018972:	f04f 020a 	mov.w	r2, #10
 8018976:	4641      	mov	r1, r8
 8018978:	4620      	mov	r0, r4
 801897a:	d107      	bne.n	801898c <_dtoa_r+0xb1c>
 801897c:	f000 fda2 	bl	80194c4 <__multadd>
 8018980:	4680      	mov	r8, r0
 8018982:	4607      	mov	r7, r0
 8018984:	9b01      	ldr	r3, [sp, #4]
 8018986:	3301      	adds	r3, #1
 8018988:	9301      	str	r3, [sp, #4]
 801898a:	e775      	b.n	8018878 <_dtoa_r+0xa08>
 801898c:	f000 fd9a 	bl	80194c4 <__multadd>
 8018990:	4639      	mov	r1, r7
 8018992:	4680      	mov	r8, r0
 8018994:	2300      	movs	r3, #0
 8018996:	220a      	movs	r2, #10
 8018998:	4620      	mov	r0, r4
 801899a:	f000 fd93 	bl	80194c4 <__multadd>
 801899e:	4607      	mov	r7, r0
 80189a0:	e7f0      	b.n	8018984 <_dtoa_r+0xb14>
 80189a2:	f1b9 0f00 	cmp.w	r9, #0
 80189a6:	9a00      	ldr	r2, [sp, #0]
 80189a8:	bfcc      	ite	gt
 80189aa:	464d      	movgt	r5, r9
 80189ac:	2501      	movle	r5, #1
 80189ae:	4415      	add	r5, r2
 80189b0:	f04f 0800 	mov.w	r8, #0
 80189b4:	4659      	mov	r1, fp
 80189b6:	2201      	movs	r2, #1
 80189b8:	4620      	mov	r0, r4
 80189ba:	9301      	str	r3, [sp, #4]
 80189bc:	f000 ff7c 	bl	80198b8 <__lshift>
 80189c0:	4631      	mov	r1, r6
 80189c2:	4683      	mov	fp, r0
 80189c4:	f000 ffe4 	bl	8019990 <__mcmp>
 80189c8:	2800      	cmp	r0, #0
 80189ca:	dcb2      	bgt.n	8018932 <_dtoa_r+0xac2>
 80189cc:	d102      	bne.n	80189d4 <_dtoa_r+0xb64>
 80189ce:	9b01      	ldr	r3, [sp, #4]
 80189d0:	07db      	lsls	r3, r3, #31
 80189d2:	d4ae      	bmi.n	8018932 <_dtoa_r+0xac2>
 80189d4:	462b      	mov	r3, r5
 80189d6:	461d      	mov	r5, r3
 80189d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80189dc:	2a30      	cmp	r2, #48	; 0x30
 80189de:	d0fa      	beq.n	80189d6 <_dtoa_r+0xb66>
 80189e0:	e6f7      	b.n	80187d2 <_dtoa_r+0x962>
 80189e2:	9a00      	ldr	r2, [sp, #0]
 80189e4:	429a      	cmp	r2, r3
 80189e6:	d1a5      	bne.n	8018934 <_dtoa_r+0xac4>
 80189e8:	f10a 0a01 	add.w	sl, sl, #1
 80189ec:	2331      	movs	r3, #49	; 0x31
 80189ee:	e779      	b.n	80188e4 <_dtoa_r+0xa74>
 80189f0:	4b13      	ldr	r3, [pc, #76]	; (8018a40 <_dtoa_r+0xbd0>)
 80189f2:	f7ff baaf 	b.w	8017f54 <_dtoa_r+0xe4>
 80189f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	f47f aa86 	bne.w	8017f0a <_dtoa_r+0x9a>
 80189fe:	4b11      	ldr	r3, [pc, #68]	; (8018a44 <_dtoa_r+0xbd4>)
 8018a00:	f7ff baa8 	b.w	8017f54 <_dtoa_r+0xe4>
 8018a04:	f1b9 0f00 	cmp.w	r9, #0
 8018a08:	dc03      	bgt.n	8018a12 <_dtoa_r+0xba2>
 8018a0a:	9b05      	ldr	r3, [sp, #20]
 8018a0c:	2b02      	cmp	r3, #2
 8018a0e:	f73f aec9 	bgt.w	80187a4 <_dtoa_r+0x934>
 8018a12:	9d00      	ldr	r5, [sp, #0]
 8018a14:	4631      	mov	r1, r6
 8018a16:	4658      	mov	r0, fp
 8018a18:	f7ff f99e 	bl	8017d58 <quorem>
 8018a1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018a20:	f805 3b01 	strb.w	r3, [r5], #1
 8018a24:	9a00      	ldr	r2, [sp, #0]
 8018a26:	1aaa      	subs	r2, r5, r2
 8018a28:	4591      	cmp	r9, r2
 8018a2a:	ddba      	ble.n	80189a2 <_dtoa_r+0xb32>
 8018a2c:	4659      	mov	r1, fp
 8018a2e:	2300      	movs	r3, #0
 8018a30:	220a      	movs	r2, #10
 8018a32:	4620      	mov	r0, r4
 8018a34:	f000 fd46 	bl	80194c4 <__multadd>
 8018a38:	4683      	mov	fp, r0
 8018a3a:	e7eb      	b.n	8018a14 <_dtoa_r+0xba4>
 8018a3c:	0801c187 	.word	0x0801c187
 8018a40:	0801c389 	.word	0x0801c389
 8018a44:	0801c104 	.word	0x0801c104

08018a48 <__sflush_r>:
 8018a48:	898a      	ldrh	r2, [r1, #12]
 8018a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a4e:	4605      	mov	r5, r0
 8018a50:	0710      	lsls	r0, r2, #28
 8018a52:	460c      	mov	r4, r1
 8018a54:	d458      	bmi.n	8018b08 <__sflush_r+0xc0>
 8018a56:	684b      	ldr	r3, [r1, #4]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	dc05      	bgt.n	8018a68 <__sflush_r+0x20>
 8018a5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	dc02      	bgt.n	8018a68 <__sflush_r+0x20>
 8018a62:	2000      	movs	r0, #0
 8018a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018a6a:	2e00      	cmp	r6, #0
 8018a6c:	d0f9      	beq.n	8018a62 <__sflush_r+0x1a>
 8018a6e:	2300      	movs	r3, #0
 8018a70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018a74:	682f      	ldr	r7, [r5, #0]
 8018a76:	602b      	str	r3, [r5, #0]
 8018a78:	d032      	beq.n	8018ae0 <__sflush_r+0x98>
 8018a7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018a7c:	89a3      	ldrh	r3, [r4, #12]
 8018a7e:	075a      	lsls	r2, r3, #29
 8018a80:	d505      	bpl.n	8018a8e <__sflush_r+0x46>
 8018a82:	6863      	ldr	r3, [r4, #4]
 8018a84:	1ac0      	subs	r0, r0, r3
 8018a86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018a88:	b10b      	cbz	r3, 8018a8e <__sflush_r+0x46>
 8018a8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018a8c:	1ac0      	subs	r0, r0, r3
 8018a8e:	2300      	movs	r3, #0
 8018a90:	4602      	mov	r2, r0
 8018a92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018a94:	6a21      	ldr	r1, [r4, #32]
 8018a96:	4628      	mov	r0, r5
 8018a98:	47b0      	blx	r6
 8018a9a:	1c43      	adds	r3, r0, #1
 8018a9c:	89a3      	ldrh	r3, [r4, #12]
 8018a9e:	d106      	bne.n	8018aae <__sflush_r+0x66>
 8018aa0:	6829      	ldr	r1, [r5, #0]
 8018aa2:	291d      	cmp	r1, #29
 8018aa4:	d82c      	bhi.n	8018b00 <__sflush_r+0xb8>
 8018aa6:	4a2a      	ldr	r2, [pc, #168]	; (8018b50 <__sflush_r+0x108>)
 8018aa8:	40ca      	lsrs	r2, r1
 8018aaa:	07d6      	lsls	r6, r2, #31
 8018aac:	d528      	bpl.n	8018b00 <__sflush_r+0xb8>
 8018aae:	2200      	movs	r2, #0
 8018ab0:	6062      	str	r2, [r4, #4]
 8018ab2:	04d9      	lsls	r1, r3, #19
 8018ab4:	6922      	ldr	r2, [r4, #16]
 8018ab6:	6022      	str	r2, [r4, #0]
 8018ab8:	d504      	bpl.n	8018ac4 <__sflush_r+0x7c>
 8018aba:	1c42      	adds	r2, r0, #1
 8018abc:	d101      	bne.n	8018ac2 <__sflush_r+0x7a>
 8018abe:	682b      	ldr	r3, [r5, #0]
 8018ac0:	b903      	cbnz	r3, 8018ac4 <__sflush_r+0x7c>
 8018ac2:	6560      	str	r0, [r4, #84]	; 0x54
 8018ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ac6:	602f      	str	r7, [r5, #0]
 8018ac8:	2900      	cmp	r1, #0
 8018aca:	d0ca      	beq.n	8018a62 <__sflush_r+0x1a>
 8018acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ad0:	4299      	cmp	r1, r3
 8018ad2:	d002      	beq.n	8018ada <__sflush_r+0x92>
 8018ad4:	4628      	mov	r0, r5
 8018ad6:	f7fc ffa9 	bl	8015a2c <_free_r>
 8018ada:	2000      	movs	r0, #0
 8018adc:	6360      	str	r0, [r4, #52]	; 0x34
 8018ade:	e7c1      	b.n	8018a64 <__sflush_r+0x1c>
 8018ae0:	6a21      	ldr	r1, [r4, #32]
 8018ae2:	2301      	movs	r3, #1
 8018ae4:	4628      	mov	r0, r5
 8018ae6:	47b0      	blx	r6
 8018ae8:	1c41      	adds	r1, r0, #1
 8018aea:	d1c7      	bne.n	8018a7c <__sflush_r+0x34>
 8018aec:	682b      	ldr	r3, [r5, #0]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d0c4      	beq.n	8018a7c <__sflush_r+0x34>
 8018af2:	2b1d      	cmp	r3, #29
 8018af4:	d001      	beq.n	8018afa <__sflush_r+0xb2>
 8018af6:	2b16      	cmp	r3, #22
 8018af8:	d101      	bne.n	8018afe <__sflush_r+0xb6>
 8018afa:	602f      	str	r7, [r5, #0]
 8018afc:	e7b1      	b.n	8018a62 <__sflush_r+0x1a>
 8018afe:	89a3      	ldrh	r3, [r4, #12]
 8018b00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b04:	81a3      	strh	r3, [r4, #12]
 8018b06:	e7ad      	b.n	8018a64 <__sflush_r+0x1c>
 8018b08:	690f      	ldr	r7, [r1, #16]
 8018b0a:	2f00      	cmp	r7, #0
 8018b0c:	d0a9      	beq.n	8018a62 <__sflush_r+0x1a>
 8018b0e:	0793      	lsls	r3, r2, #30
 8018b10:	680e      	ldr	r6, [r1, #0]
 8018b12:	bf08      	it	eq
 8018b14:	694b      	ldreq	r3, [r1, #20]
 8018b16:	600f      	str	r7, [r1, #0]
 8018b18:	bf18      	it	ne
 8018b1a:	2300      	movne	r3, #0
 8018b1c:	eba6 0807 	sub.w	r8, r6, r7
 8018b20:	608b      	str	r3, [r1, #8]
 8018b22:	f1b8 0f00 	cmp.w	r8, #0
 8018b26:	dd9c      	ble.n	8018a62 <__sflush_r+0x1a>
 8018b28:	6a21      	ldr	r1, [r4, #32]
 8018b2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018b2c:	4643      	mov	r3, r8
 8018b2e:	463a      	mov	r2, r7
 8018b30:	4628      	mov	r0, r5
 8018b32:	47b0      	blx	r6
 8018b34:	2800      	cmp	r0, #0
 8018b36:	dc06      	bgt.n	8018b46 <__sflush_r+0xfe>
 8018b38:	89a3      	ldrh	r3, [r4, #12]
 8018b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b3e:	81a3      	strh	r3, [r4, #12]
 8018b40:	f04f 30ff 	mov.w	r0, #4294967295
 8018b44:	e78e      	b.n	8018a64 <__sflush_r+0x1c>
 8018b46:	4407      	add	r7, r0
 8018b48:	eba8 0800 	sub.w	r8, r8, r0
 8018b4c:	e7e9      	b.n	8018b22 <__sflush_r+0xda>
 8018b4e:	bf00      	nop
 8018b50:	20400001 	.word	0x20400001

08018b54 <_fflush_r>:
 8018b54:	b538      	push	{r3, r4, r5, lr}
 8018b56:	690b      	ldr	r3, [r1, #16]
 8018b58:	4605      	mov	r5, r0
 8018b5a:	460c      	mov	r4, r1
 8018b5c:	b913      	cbnz	r3, 8018b64 <_fflush_r+0x10>
 8018b5e:	2500      	movs	r5, #0
 8018b60:	4628      	mov	r0, r5
 8018b62:	bd38      	pop	{r3, r4, r5, pc}
 8018b64:	b118      	cbz	r0, 8018b6e <_fflush_r+0x1a>
 8018b66:	6983      	ldr	r3, [r0, #24]
 8018b68:	b90b      	cbnz	r3, 8018b6e <_fflush_r+0x1a>
 8018b6a:	f7fc fe61 	bl	8015830 <__sinit>
 8018b6e:	4b14      	ldr	r3, [pc, #80]	; (8018bc0 <_fflush_r+0x6c>)
 8018b70:	429c      	cmp	r4, r3
 8018b72:	d11b      	bne.n	8018bac <_fflush_r+0x58>
 8018b74:	686c      	ldr	r4, [r5, #4]
 8018b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d0ef      	beq.n	8018b5e <_fflush_r+0xa>
 8018b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018b80:	07d0      	lsls	r0, r2, #31
 8018b82:	d404      	bmi.n	8018b8e <_fflush_r+0x3a>
 8018b84:	0599      	lsls	r1, r3, #22
 8018b86:	d402      	bmi.n	8018b8e <_fflush_r+0x3a>
 8018b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018b8a:	f7fc ff14 	bl	80159b6 <__retarget_lock_acquire_recursive>
 8018b8e:	4628      	mov	r0, r5
 8018b90:	4621      	mov	r1, r4
 8018b92:	f7ff ff59 	bl	8018a48 <__sflush_r>
 8018b96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018b98:	07da      	lsls	r2, r3, #31
 8018b9a:	4605      	mov	r5, r0
 8018b9c:	d4e0      	bmi.n	8018b60 <_fflush_r+0xc>
 8018b9e:	89a3      	ldrh	r3, [r4, #12]
 8018ba0:	059b      	lsls	r3, r3, #22
 8018ba2:	d4dd      	bmi.n	8018b60 <_fflush_r+0xc>
 8018ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ba6:	f7fc ff07 	bl	80159b8 <__retarget_lock_release_recursive>
 8018baa:	e7d9      	b.n	8018b60 <_fflush_r+0xc>
 8018bac:	4b05      	ldr	r3, [pc, #20]	; (8018bc4 <_fflush_r+0x70>)
 8018bae:	429c      	cmp	r4, r3
 8018bb0:	d101      	bne.n	8018bb6 <_fflush_r+0x62>
 8018bb2:	68ac      	ldr	r4, [r5, #8]
 8018bb4:	e7df      	b.n	8018b76 <_fflush_r+0x22>
 8018bb6:	4b04      	ldr	r3, [pc, #16]	; (8018bc8 <_fflush_r+0x74>)
 8018bb8:	429c      	cmp	r4, r3
 8018bba:	bf08      	it	eq
 8018bbc:	68ec      	ldreq	r4, [r5, #12]
 8018bbe:	e7da      	b.n	8018b76 <_fflush_r+0x22>
 8018bc0:	0801bffc 	.word	0x0801bffc
 8018bc4:	0801c01c 	.word	0x0801c01c
 8018bc8:	0801bfdc 	.word	0x0801bfdc

08018bcc <fiprintf>:
 8018bcc:	b40e      	push	{r1, r2, r3}
 8018bce:	b503      	push	{r0, r1, lr}
 8018bd0:	4601      	mov	r1, r0
 8018bd2:	ab03      	add	r3, sp, #12
 8018bd4:	4805      	ldr	r0, [pc, #20]	; (8018bec <fiprintf+0x20>)
 8018bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018bda:	6800      	ldr	r0, [r0, #0]
 8018bdc:	9301      	str	r3, [sp, #4]
 8018bde:	f001 fc57 	bl	801a490 <_vfiprintf_r>
 8018be2:	b002      	add	sp, #8
 8018be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018be8:	b003      	add	sp, #12
 8018bea:	4770      	bx	lr
 8018bec:	200000dc 	.word	0x200000dc

08018bf0 <rshift>:
 8018bf0:	6903      	ldr	r3, [r0, #16]
 8018bf2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018bf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018bfa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8018bfe:	f100 0414 	add.w	r4, r0, #20
 8018c02:	dd45      	ble.n	8018c90 <rshift+0xa0>
 8018c04:	f011 011f 	ands.w	r1, r1, #31
 8018c08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018c0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8018c10:	d10c      	bne.n	8018c2c <rshift+0x3c>
 8018c12:	f100 0710 	add.w	r7, r0, #16
 8018c16:	4629      	mov	r1, r5
 8018c18:	42b1      	cmp	r1, r6
 8018c1a:	d334      	bcc.n	8018c86 <rshift+0x96>
 8018c1c:	1a9b      	subs	r3, r3, r2
 8018c1e:	009b      	lsls	r3, r3, #2
 8018c20:	1eea      	subs	r2, r5, #3
 8018c22:	4296      	cmp	r6, r2
 8018c24:	bf38      	it	cc
 8018c26:	2300      	movcc	r3, #0
 8018c28:	4423      	add	r3, r4
 8018c2a:	e015      	b.n	8018c58 <rshift+0x68>
 8018c2c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8018c30:	f1c1 0820 	rsb	r8, r1, #32
 8018c34:	40cf      	lsrs	r7, r1
 8018c36:	f105 0e04 	add.w	lr, r5, #4
 8018c3a:	46a1      	mov	r9, r4
 8018c3c:	4576      	cmp	r6, lr
 8018c3e:	46f4      	mov	ip, lr
 8018c40:	d815      	bhi.n	8018c6e <rshift+0x7e>
 8018c42:	1a9b      	subs	r3, r3, r2
 8018c44:	009a      	lsls	r2, r3, #2
 8018c46:	3a04      	subs	r2, #4
 8018c48:	3501      	adds	r5, #1
 8018c4a:	42ae      	cmp	r6, r5
 8018c4c:	bf38      	it	cc
 8018c4e:	2200      	movcc	r2, #0
 8018c50:	18a3      	adds	r3, r4, r2
 8018c52:	50a7      	str	r7, [r4, r2]
 8018c54:	b107      	cbz	r7, 8018c58 <rshift+0x68>
 8018c56:	3304      	adds	r3, #4
 8018c58:	1b1a      	subs	r2, r3, r4
 8018c5a:	42a3      	cmp	r3, r4
 8018c5c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018c60:	bf08      	it	eq
 8018c62:	2300      	moveq	r3, #0
 8018c64:	6102      	str	r2, [r0, #16]
 8018c66:	bf08      	it	eq
 8018c68:	6143      	streq	r3, [r0, #20]
 8018c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c6e:	f8dc c000 	ldr.w	ip, [ip]
 8018c72:	fa0c fc08 	lsl.w	ip, ip, r8
 8018c76:	ea4c 0707 	orr.w	r7, ip, r7
 8018c7a:	f849 7b04 	str.w	r7, [r9], #4
 8018c7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018c82:	40cf      	lsrs	r7, r1
 8018c84:	e7da      	b.n	8018c3c <rshift+0x4c>
 8018c86:	f851 cb04 	ldr.w	ip, [r1], #4
 8018c8a:	f847 cf04 	str.w	ip, [r7, #4]!
 8018c8e:	e7c3      	b.n	8018c18 <rshift+0x28>
 8018c90:	4623      	mov	r3, r4
 8018c92:	e7e1      	b.n	8018c58 <rshift+0x68>

08018c94 <__hexdig_fun>:
 8018c94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018c98:	2b09      	cmp	r3, #9
 8018c9a:	d802      	bhi.n	8018ca2 <__hexdig_fun+0xe>
 8018c9c:	3820      	subs	r0, #32
 8018c9e:	b2c0      	uxtb	r0, r0
 8018ca0:	4770      	bx	lr
 8018ca2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018ca6:	2b05      	cmp	r3, #5
 8018ca8:	d801      	bhi.n	8018cae <__hexdig_fun+0x1a>
 8018caa:	3847      	subs	r0, #71	; 0x47
 8018cac:	e7f7      	b.n	8018c9e <__hexdig_fun+0xa>
 8018cae:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018cb2:	2b05      	cmp	r3, #5
 8018cb4:	d801      	bhi.n	8018cba <__hexdig_fun+0x26>
 8018cb6:	3827      	subs	r0, #39	; 0x27
 8018cb8:	e7f1      	b.n	8018c9e <__hexdig_fun+0xa>
 8018cba:	2000      	movs	r0, #0
 8018cbc:	4770      	bx	lr
	...

08018cc0 <__gethex>:
 8018cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc4:	ed2d 8b02 	vpush	{d8}
 8018cc8:	b089      	sub	sp, #36	; 0x24
 8018cca:	ee08 0a10 	vmov	s16, r0
 8018cce:	9304      	str	r3, [sp, #16]
 8018cd0:	4bbc      	ldr	r3, [pc, #752]	; (8018fc4 <__gethex+0x304>)
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	9301      	str	r3, [sp, #4]
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	468b      	mov	fp, r1
 8018cda:	4690      	mov	r8, r2
 8018cdc:	f7e7 fa88 	bl	80001f0 <strlen>
 8018ce0:	9b01      	ldr	r3, [sp, #4]
 8018ce2:	f8db 2000 	ldr.w	r2, [fp]
 8018ce6:	4403      	add	r3, r0
 8018ce8:	4682      	mov	sl, r0
 8018cea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018cee:	9305      	str	r3, [sp, #20]
 8018cf0:	1c93      	adds	r3, r2, #2
 8018cf2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8018cf6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018cfa:	32fe      	adds	r2, #254	; 0xfe
 8018cfc:	18d1      	adds	r1, r2, r3
 8018cfe:	461f      	mov	r7, r3
 8018d00:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018d04:	9100      	str	r1, [sp, #0]
 8018d06:	2830      	cmp	r0, #48	; 0x30
 8018d08:	d0f8      	beq.n	8018cfc <__gethex+0x3c>
 8018d0a:	f7ff ffc3 	bl	8018c94 <__hexdig_fun>
 8018d0e:	4604      	mov	r4, r0
 8018d10:	2800      	cmp	r0, #0
 8018d12:	d13a      	bne.n	8018d8a <__gethex+0xca>
 8018d14:	9901      	ldr	r1, [sp, #4]
 8018d16:	4652      	mov	r2, sl
 8018d18:	4638      	mov	r0, r7
 8018d1a:	f7fd ff96 	bl	8016c4a <strncmp>
 8018d1e:	4605      	mov	r5, r0
 8018d20:	2800      	cmp	r0, #0
 8018d22:	d168      	bne.n	8018df6 <__gethex+0x136>
 8018d24:	f817 000a 	ldrb.w	r0, [r7, sl]
 8018d28:	eb07 060a 	add.w	r6, r7, sl
 8018d2c:	f7ff ffb2 	bl	8018c94 <__hexdig_fun>
 8018d30:	2800      	cmp	r0, #0
 8018d32:	d062      	beq.n	8018dfa <__gethex+0x13a>
 8018d34:	4633      	mov	r3, r6
 8018d36:	7818      	ldrb	r0, [r3, #0]
 8018d38:	2830      	cmp	r0, #48	; 0x30
 8018d3a:	461f      	mov	r7, r3
 8018d3c:	f103 0301 	add.w	r3, r3, #1
 8018d40:	d0f9      	beq.n	8018d36 <__gethex+0x76>
 8018d42:	f7ff ffa7 	bl	8018c94 <__hexdig_fun>
 8018d46:	2301      	movs	r3, #1
 8018d48:	fab0 f480 	clz	r4, r0
 8018d4c:	0964      	lsrs	r4, r4, #5
 8018d4e:	4635      	mov	r5, r6
 8018d50:	9300      	str	r3, [sp, #0]
 8018d52:	463a      	mov	r2, r7
 8018d54:	4616      	mov	r6, r2
 8018d56:	3201      	adds	r2, #1
 8018d58:	7830      	ldrb	r0, [r6, #0]
 8018d5a:	f7ff ff9b 	bl	8018c94 <__hexdig_fun>
 8018d5e:	2800      	cmp	r0, #0
 8018d60:	d1f8      	bne.n	8018d54 <__gethex+0x94>
 8018d62:	9901      	ldr	r1, [sp, #4]
 8018d64:	4652      	mov	r2, sl
 8018d66:	4630      	mov	r0, r6
 8018d68:	f7fd ff6f 	bl	8016c4a <strncmp>
 8018d6c:	b980      	cbnz	r0, 8018d90 <__gethex+0xd0>
 8018d6e:	b94d      	cbnz	r5, 8018d84 <__gethex+0xc4>
 8018d70:	eb06 050a 	add.w	r5, r6, sl
 8018d74:	462a      	mov	r2, r5
 8018d76:	4616      	mov	r6, r2
 8018d78:	3201      	adds	r2, #1
 8018d7a:	7830      	ldrb	r0, [r6, #0]
 8018d7c:	f7ff ff8a 	bl	8018c94 <__hexdig_fun>
 8018d80:	2800      	cmp	r0, #0
 8018d82:	d1f8      	bne.n	8018d76 <__gethex+0xb6>
 8018d84:	1bad      	subs	r5, r5, r6
 8018d86:	00ad      	lsls	r5, r5, #2
 8018d88:	e004      	b.n	8018d94 <__gethex+0xd4>
 8018d8a:	2400      	movs	r4, #0
 8018d8c:	4625      	mov	r5, r4
 8018d8e:	e7e0      	b.n	8018d52 <__gethex+0x92>
 8018d90:	2d00      	cmp	r5, #0
 8018d92:	d1f7      	bne.n	8018d84 <__gethex+0xc4>
 8018d94:	7833      	ldrb	r3, [r6, #0]
 8018d96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018d9a:	2b50      	cmp	r3, #80	; 0x50
 8018d9c:	d13b      	bne.n	8018e16 <__gethex+0x156>
 8018d9e:	7873      	ldrb	r3, [r6, #1]
 8018da0:	2b2b      	cmp	r3, #43	; 0x2b
 8018da2:	d02c      	beq.n	8018dfe <__gethex+0x13e>
 8018da4:	2b2d      	cmp	r3, #45	; 0x2d
 8018da6:	d02e      	beq.n	8018e06 <__gethex+0x146>
 8018da8:	1c71      	adds	r1, r6, #1
 8018daa:	f04f 0900 	mov.w	r9, #0
 8018dae:	7808      	ldrb	r0, [r1, #0]
 8018db0:	f7ff ff70 	bl	8018c94 <__hexdig_fun>
 8018db4:	1e43      	subs	r3, r0, #1
 8018db6:	b2db      	uxtb	r3, r3
 8018db8:	2b18      	cmp	r3, #24
 8018dba:	d82c      	bhi.n	8018e16 <__gethex+0x156>
 8018dbc:	f1a0 0210 	sub.w	r2, r0, #16
 8018dc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018dc4:	f7ff ff66 	bl	8018c94 <__hexdig_fun>
 8018dc8:	1e43      	subs	r3, r0, #1
 8018dca:	b2db      	uxtb	r3, r3
 8018dcc:	2b18      	cmp	r3, #24
 8018dce:	d91d      	bls.n	8018e0c <__gethex+0x14c>
 8018dd0:	f1b9 0f00 	cmp.w	r9, #0
 8018dd4:	d000      	beq.n	8018dd8 <__gethex+0x118>
 8018dd6:	4252      	negs	r2, r2
 8018dd8:	4415      	add	r5, r2
 8018dda:	f8cb 1000 	str.w	r1, [fp]
 8018dde:	b1e4      	cbz	r4, 8018e1a <__gethex+0x15a>
 8018de0:	9b00      	ldr	r3, [sp, #0]
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	bf14      	ite	ne
 8018de6:	2700      	movne	r7, #0
 8018de8:	2706      	moveq	r7, #6
 8018dea:	4638      	mov	r0, r7
 8018dec:	b009      	add	sp, #36	; 0x24
 8018dee:	ecbd 8b02 	vpop	{d8}
 8018df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018df6:	463e      	mov	r6, r7
 8018df8:	4625      	mov	r5, r4
 8018dfa:	2401      	movs	r4, #1
 8018dfc:	e7ca      	b.n	8018d94 <__gethex+0xd4>
 8018dfe:	f04f 0900 	mov.w	r9, #0
 8018e02:	1cb1      	adds	r1, r6, #2
 8018e04:	e7d3      	b.n	8018dae <__gethex+0xee>
 8018e06:	f04f 0901 	mov.w	r9, #1
 8018e0a:	e7fa      	b.n	8018e02 <__gethex+0x142>
 8018e0c:	230a      	movs	r3, #10
 8018e0e:	fb03 0202 	mla	r2, r3, r2, r0
 8018e12:	3a10      	subs	r2, #16
 8018e14:	e7d4      	b.n	8018dc0 <__gethex+0x100>
 8018e16:	4631      	mov	r1, r6
 8018e18:	e7df      	b.n	8018dda <__gethex+0x11a>
 8018e1a:	1bf3      	subs	r3, r6, r7
 8018e1c:	3b01      	subs	r3, #1
 8018e1e:	4621      	mov	r1, r4
 8018e20:	2b07      	cmp	r3, #7
 8018e22:	dc0b      	bgt.n	8018e3c <__gethex+0x17c>
 8018e24:	ee18 0a10 	vmov	r0, s16
 8018e28:	f000 faea 	bl	8019400 <_Balloc>
 8018e2c:	4604      	mov	r4, r0
 8018e2e:	b940      	cbnz	r0, 8018e42 <__gethex+0x182>
 8018e30:	4b65      	ldr	r3, [pc, #404]	; (8018fc8 <__gethex+0x308>)
 8018e32:	4602      	mov	r2, r0
 8018e34:	21de      	movs	r1, #222	; 0xde
 8018e36:	4865      	ldr	r0, [pc, #404]	; (8018fcc <__gethex+0x30c>)
 8018e38:	f7fe ff60 	bl	8017cfc <__assert_func>
 8018e3c:	3101      	adds	r1, #1
 8018e3e:	105b      	asrs	r3, r3, #1
 8018e40:	e7ee      	b.n	8018e20 <__gethex+0x160>
 8018e42:	f100 0914 	add.w	r9, r0, #20
 8018e46:	f04f 0b00 	mov.w	fp, #0
 8018e4a:	f1ca 0301 	rsb	r3, sl, #1
 8018e4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8018e52:	f8cd b000 	str.w	fp, [sp]
 8018e56:	9306      	str	r3, [sp, #24]
 8018e58:	42b7      	cmp	r7, r6
 8018e5a:	d340      	bcc.n	8018ede <__gethex+0x21e>
 8018e5c:	9802      	ldr	r0, [sp, #8]
 8018e5e:	9b00      	ldr	r3, [sp, #0]
 8018e60:	f840 3b04 	str.w	r3, [r0], #4
 8018e64:	eba0 0009 	sub.w	r0, r0, r9
 8018e68:	1080      	asrs	r0, r0, #2
 8018e6a:	0146      	lsls	r6, r0, #5
 8018e6c:	6120      	str	r0, [r4, #16]
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f000 fbbc 	bl	80195ec <__hi0bits>
 8018e74:	1a30      	subs	r0, r6, r0
 8018e76:	f8d8 6000 	ldr.w	r6, [r8]
 8018e7a:	42b0      	cmp	r0, r6
 8018e7c:	dd63      	ble.n	8018f46 <__gethex+0x286>
 8018e7e:	1b87      	subs	r7, r0, r6
 8018e80:	4639      	mov	r1, r7
 8018e82:	4620      	mov	r0, r4
 8018e84:	f000 ff56 	bl	8019d34 <__any_on>
 8018e88:	4682      	mov	sl, r0
 8018e8a:	b1a8      	cbz	r0, 8018eb8 <__gethex+0x1f8>
 8018e8c:	1e7b      	subs	r3, r7, #1
 8018e8e:	1159      	asrs	r1, r3, #5
 8018e90:	f003 021f 	and.w	r2, r3, #31
 8018e94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018e98:	f04f 0a01 	mov.w	sl, #1
 8018e9c:	fa0a f202 	lsl.w	r2, sl, r2
 8018ea0:	420a      	tst	r2, r1
 8018ea2:	d009      	beq.n	8018eb8 <__gethex+0x1f8>
 8018ea4:	4553      	cmp	r3, sl
 8018ea6:	dd05      	ble.n	8018eb4 <__gethex+0x1f4>
 8018ea8:	1eb9      	subs	r1, r7, #2
 8018eaa:	4620      	mov	r0, r4
 8018eac:	f000 ff42 	bl	8019d34 <__any_on>
 8018eb0:	2800      	cmp	r0, #0
 8018eb2:	d145      	bne.n	8018f40 <__gethex+0x280>
 8018eb4:	f04f 0a02 	mov.w	sl, #2
 8018eb8:	4639      	mov	r1, r7
 8018eba:	4620      	mov	r0, r4
 8018ebc:	f7ff fe98 	bl	8018bf0 <rshift>
 8018ec0:	443d      	add	r5, r7
 8018ec2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018ec6:	42ab      	cmp	r3, r5
 8018ec8:	da4c      	bge.n	8018f64 <__gethex+0x2a4>
 8018eca:	ee18 0a10 	vmov	r0, s16
 8018ece:	4621      	mov	r1, r4
 8018ed0:	f000 fad6 	bl	8019480 <_Bfree>
 8018ed4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018ed6:	2300      	movs	r3, #0
 8018ed8:	6013      	str	r3, [r2, #0]
 8018eda:	27a3      	movs	r7, #163	; 0xa3
 8018edc:	e785      	b.n	8018dea <__gethex+0x12a>
 8018ede:	1e73      	subs	r3, r6, #1
 8018ee0:	9a05      	ldr	r2, [sp, #20]
 8018ee2:	9303      	str	r3, [sp, #12]
 8018ee4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018ee8:	4293      	cmp	r3, r2
 8018eea:	d019      	beq.n	8018f20 <__gethex+0x260>
 8018eec:	f1bb 0f20 	cmp.w	fp, #32
 8018ef0:	d107      	bne.n	8018f02 <__gethex+0x242>
 8018ef2:	9b02      	ldr	r3, [sp, #8]
 8018ef4:	9a00      	ldr	r2, [sp, #0]
 8018ef6:	f843 2b04 	str.w	r2, [r3], #4
 8018efa:	9302      	str	r3, [sp, #8]
 8018efc:	2300      	movs	r3, #0
 8018efe:	9300      	str	r3, [sp, #0]
 8018f00:	469b      	mov	fp, r3
 8018f02:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018f06:	f7ff fec5 	bl	8018c94 <__hexdig_fun>
 8018f0a:	9b00      	ldr	r3, [sp, #0]
 8018f0c:	f000 000f 	and.w	r0, r0, #15
 8018f10:	fa00 f00b 	lsl.w	r0, r0, fp
 8018f14:	4303      	orrs	r3, r0
 8018f16:	9300      	str	r3, [sp, #0]
 8018f18:	f10b 0b04 	add.w	fp, fp, #4
 8018f1c:	9b03      	ldr	r3, [sp, #12]
 8018f1e:	e00d      	b.n	8018f3c <__gethex+0x27c>
 8018f20:	9b03      	ldr	r3, [sp, #12]
 8018f22:	9a06      	ldr	r2, [sp, #24]
 8018f24:	4413      	add	r3, r2
 8018f26:	42bb      	cmp	r3, r7
 8018f28:	d3e0      	bcc.n	8018eec <__gethex+0x22c>
 8018f2a:	4618      	mov	r0, r3
 8018f2c:	9901      	ldr	r1, [sp, #4]
 8018f2e:	9307      	str	r3, [sp, #28]
 8018f30:	4652      	mov	r2, sl
 8018f32:	f7fd fe8a 	bl	8016c4a <strncmp>
 8018f36:	9b07      	ldr	r3, [sp, #28]
 8018f38:	2800      	cmp	r0, #0
 8018f3a:	d1d7      	bne.n	8018eec <__gethex+0x22c>
 8018f3c:	461e      	mov	r6, r3
 8018f3e:	e78b      	b.n	8018e58 <__gethex+0x198>
 8018f40:	f04f 0a03 	mov.w	sl, #3
 8018f44:	e7b8      	b.n	8018eb8 <__gethex+0x1f8>
 8018f46:	da0a      	bge.n	8018f5e <__gethex+0x29e>
 8018f48:	1a37      	subs	r7, r6, r0
 8018f4a:	4621      	mov	r1, r4
 8018f4c:	ee18 0a10 	vmov	r0, s16
 8018f50:	463a      	mov	r2, r7
 8018f52:	f000 fcb1 	bl	80198b8 <__lshift>
 8018f56:	1bed      	subs	r5, r5, r7
 8018f58:	4604      	mov	r4, r0
 8018f5a:	f100 0914 	add.w	r9, r0, #20
 8018f5e:	f04f 0a00 	mov.w	sl, #0
 8018f62:	e7ae      	b.n	8018ec2 <__gethex+0x202>
 8018f64:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018f68:	42a8      	cmp	r0, r5
 8018f6a:	dd72      	ble.n	8019052 <__gethex+0x392>
 8018f6c:	1b45      	subs	r5, r0, r5
 8018f6e:	42ae      	cmp	r6, r5
 8018f70:	dc36      	bgt.n	8018fe0 <__gethex+0x320>
 8018f72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018f76:	2b02      	cmp	r3, #2
 8018f78:	d02a      	beq.n	8018fd0 <__gethex+0x310>
 8018f7a:	2b03      	cmp	r3, #3
 8018f7c:	d02c      	beq.n	8018fd8 <__gethex+0x318>
 8018f7e:	2b01      	cmp	r3, #1
 8018f80:	d115      	bne.n	8018fae <__gethex+0x2ee>
 8018f82:	42ae      	cmp	r6, r5
 8018f84:	d113      	bne.n	8018fae <__gethex+0x2ee>
 8018f86:	2e01      	cmp	r6, #1
 8018f88:	d10b      	bne.n	8018fa2 <__gethex+0x2e2>
 8018f8a:	9a04      	ldr	r2, [sp, #16]
 8018f8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018f90:	6013      	str	r3, [r2, #0]
 8018f92:	2301      	movs	r3, #1
 8018f94:	6123      	str	r3, [r4, #16]
 8018f96:	f8c9 3000 	str.w	r3, [r9]
 8018f9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018f9c:	2762      	movs	r7, #98	; 0x62
 8018f9e:	601c      	str	r4, [r3, #0]
 8018fa0:	e723      	b.n	8018dea <__gethex+0x12a>
 8018fa2:	1e71      	subs	r1, r6, #1
 8018fa4:	4620      	mov	r0, r4
 8018fa6:	f000 fec5 	bl	8019d34 <__any_on>
 8018faa:	2800      	cmp	r0, #0
 8018fac:	d1ed      	bne.n	8018f8a <__gethex+0x2ca>
 8018fae:	ee18 0a10 	vmov	r0, s16
 8018fb2:	4621      	mov	r1, r4
 8018fb4:	f000 fa64 	bl	8019480 <_Bfree>
 8018fb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018fba:	2300      	movs	r3, #0
 8018fbc:	6013      	str	r3, [r2, #0]
 8018fbe:	2750      	movs	r7, #80	; 0x50
 8018fc0:	e713      	b.n	8018dea <__gethex+0x12a>
 8018fc2:	bf00      	nop
 8018fc4:	0801c204 	.word	0x0801c204
 8018fc8:	0801c187 	.word	0x0801c187
 8018fcc:	0801c198 	.word	0x0801c198
 8018fd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d1eb      	bne.n	8018fae <__gethex+0x2ee>
 8018fd6:	e7d8      	b.n	8018f8a <__gethex+0x2ca>
 8018fd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d1d5      	bne.n	8018f8a <__gethex+0x2ca>
 8018fde:	e7e6      	b.n	8018fae <__gethex+0x2ee>
 8018fe0:	1e6f      	subs	r7, r5, #1
 8018fe2:	f1ba 0f00 	cmp.w	sl, #0
 8018fe6:	d131      	bne.n	801904c <__gethex+0x38c>
 8018fe8:	b127      	cbz	r7, 8018ff4 <__gethex+0x334>
 8018fea:	4639      	mov	r1, r7
 8018fec:	4620      	mov	r0, r4
 8018fee:	f000 fea1 	bl	8019d34 <__any_on>
 8018ff2:	4682      	mov	sl, r0
 8018ff4:	117b      	asrs	r3, r7, #5
 8018ff6:	2101      	movs	r1, #1
 8018ff8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018ffc:	f007 071f 	and.w	r7, r7, #31
 8019000:	fa01 f707 	lsl.w	r7, r1, r7
 8019004:	421f      	tst	r7, r3
 8019006:	4629      	mov	r1, r5
 8019008:	4620      	mov	r0, r4
 801900a:	bf18      	it	ne
 801900c:	f04a 0a02 	orrne.w	sl, sl, #2
 8019010:	1b76      	subs	r6, r6, r5
 8019012:	f7ff fded 	bl	8018bf0 <rshift>
 8019016:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801901a:	2702      	movs	r7, #2
 801901c:	f1ba 0f00 	cmp.w	sl, #0
 8019020:	d048      	beq.n	80190b4 <__gethex+0x3f4>
 8019022:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019026:	2b02      	cmp	r3, #2
 8019028:	d015      	beq.n	8019056 <__gethex+0x396>
 801902a:	2b03      	cmp	r3, #3
 801902c:	d017      	beq.n	801905e <__gethex+0x39e>
 801902e:	2b01      	cmp	r3, #1
 8019030:	d109      	bne.n	8019046 <__gethex+0x386>
 8019032:	f01a 0f02 	tst.w	sl, #2
 8019036:	d006      	beq.n	8019046 <__gethex+0x386>
 8019038:	f8d9 0000 	ldr.w	r0, [r9]
 801903c:	ea4a 0a00 	orr.w	sl, sl, r0
 8019040:	f01a 0f01 	tst.w	sl, #1
 8019044:	d10e      	bne.n	8019064 <__gethex+0x3a4>
 8019046:	f047 0710 	orr.w	r7, r7, #16
 801904a:	e033      	b.n	80190b4 <__gethex+0x3f4>
 801904c:	f04f 0a01 	mov.w	sl, #1
 8019050:	e7d0      	b.n	8018ff4 <__gethex+0x334>
 8019052:	2701      	movs	r7, #1
 8019054:	e7e2      	b.n	801901c <__gethex+0x35c>
 8019056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019058:	f1c3 0301 	rsb	r3, r3, #1
 801905c:	9315      	str	r3, [sp, #84]	; 0x54
 801905e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019060:	2b00      	cmp	r3, #0
 8019062:	d0f0      	beq.n	8019046 <__gethex+0x386>
 8019064:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019068:	f104 0314 	add.w	r3, r4, #20
 801906c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019070:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019074:	f04f 0c00 	mov.w	ip, #0
 8019078:	4618      	mov	r0, r3
 801907a:	f853 2b04 	ldr.w	r2, [r3], #4
 801907e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8019082:	d01c      	beq.n	80190be <__gethex+0x3fe>
 8019084:	3201      	adds	r2, #1
 8019086:	6002      	str	r2, [r0, #0]
 8019088:	2f02      	cmp	r7, #2
 801908a:	f104 0314 	add.w	r3, r4, #20
 801908e:	d13f      	bne.n	8019110 <__gethex+0x450>
 8019090:	f8d8 2000 	ldr.w	r2, [r8]
 8019094:	3a01      	subs	r2, #1
 8019096:	42b2      	cmp	r2, r6
 8019098:	d10a      	bne.n	80190b0 <__gethex+0x3f0>
 801909a:	1171      	asrs	r1, r6, #5
 801909c:	2201      	movs	r2, #1
 801909e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80190a2:	f006 061f 	and.w	r6, r6, #31
 80190a6:	fa02 f606 	lsl.w	r6, r2, r6
 80190aa:	421e      	tst	r6, r3
 80190ac:	bf18      	it	ne
 80190ae:	4617      	movne	r7, r2
 80190b0:	f047 0720 	orr.w	r7, r7, #32
 80190b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80190b6:	601c      	str	r4, [r3, #0]
 80190b8:	9b04      	ldr	r3, [sp, #16]
 80190ba:	601d      	str	r5, [r3, #0]
 80190bc:	e695      	b.n	8018dea <__gethex+0x12a>
 80190be:	4299      	cmp	r1, r3
 80190c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80190c4:	d8d8      	bhi.n	8019078 <__gethex+0x3b8>
 80190c6:	68a3      	ldr	r3, [r4, #8]
 80190c8:	459b      	cmp	fp, r3
 80190ca:	db19      	blt.n	8019100 <__gethex+0x440>
 80190cc:	6861      	ldr	r1, [r4, #4]
 80190ce:	ee18 0a10 	vmov	r0, s16
 80190d2:	3101      	adds	r1, #1
 80190d4:	f000 f994 	bl	8019400 <_Balloc>
 80190d8:	4681      	mov	r9, r0
 80190da:	b918      	cbnz	r0, 80190e4 <__gethex+0x424>
 80190dc:	4b1a      	ldr	r3, [pc, #104]	; (8019148 <__gethex+0x488>)
 80190de:	4602      	mov	r2, r0
 80190e0:	2184      	movs	r1, #132	; 0x84
 80190e2:	e6a8      	b.n	8018e36 <__gethex+0x176>
 80190e4:	6922      	ldr	r2, [r4, #16]
 80190e6:	3202      	adds	r2, #2
 80190e8:	f104 010c 	add.w	r1, r4, #12
 80190ec:	0092      	lsls	r2, r2, #2
 80190ee:	300c      	adds	r0, #12
 80190f0:	f7fc fc6c 	bl	80159cc <memcpy>
 80190f4:	4621      	mov	r1, r4
 80190f6:	ee18 0a10 	vmov	r0, s16
 80190fa:	f000 f9c1 	bl	8019480 <_Bfree>
 80190fe:	464c      	mov	r4, r9
 8019100:	6923      	ldr	r3, [r4, #16]
 8019102:	1c5a      	adds	r2, r3, #1
 8019104:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019108:	6122      	str	r2, [r4, #16]
 801910a:	2201      	movs	r2, #1
 801910c:	615a      	str	r2, [r3, #20]
 801910e:	e7bb      	b.n	8019088 <__gethex+0x3c8>
 8019110:	6922      	ldr	r2, [r4, #16]
 8019112:	455a      	cmp	r2, fp
 8019114:	dd0b      	ble.n	801912e <__gethex+0x46e>
 8019116:	2101      	movs	r1, #1
 8019118:	4620      	mov	r0, r4
 801911a:	f7ff fd69 	bl	8018bf0 <rshift>
 801911e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019122:	3501      	adds	r5, #1
 8019124:	42ab      	cmp	r3, r5
 8019126:	f6ff aed0 	blt.w	8018eca <__gethex+0x20a>
 801912a:	2701      	movs	r7, #1
 801912c:	e7c0      	b.n	80190b0 <__gethex+0x3f0>
 801912e:	f016 061f 	ands.w	r6, r6, #31
 8019132:	d0fa      	beq.n	801912a <__gethex+0x46a>
 8019134:	449a      	add	sl, r3
 8019136:	f1c6 0620 	rsb	r6, r6, #32
 801913a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801913e:	f000 fa55 	bl	80195ec <__hi0bits>
 8019142:	42b0      	cmp	r0, r6
 8019144:	dbe7      	blt.n	8019116 <__gethex+0x456>
 8019146:	e7f0      	b.n	801912a <__gethex+0x46a>
 8019148:	0801c187 	.word	0x0801c187

0801914c <L_shift>:
 801914c:	f1c2 0208 	rsb	r2, r2, #8
 8019150:	0092      	lsls	r2, r2, #2
 8019152:	b570      	push	{r4, r5, r6, lr}
 8019154:	f1c2 0620 	rsb	r6, r2, #32
 8019158:	6843      	ldr	r3, [r0, #4]
 801915a:	6804      	ldr	r4, [r0, #0]
 801915c:	fa03 f506 	lsl.w	r5, r3, r6
 8019160:	432c      	orrs	r4, r5
 8019162:	40d3      	lsrs	r3, r2
 8019164:	6004      	str	r4, [r0, #0]
 8019166:	f840 3f04 	str.w	r3, [r0, #4]!
 801916a:	4288      	cmp	r0, r1
 801916c:	d3f4      	bcc.n	8019158 <L_shift+0xc>
 801916e:	bd70      	pop	{r4, r5, r6, pc}

08019170 <__match>:
 8019170:	b530      	push	{r4, r5, lr}
 8019172:	6803      	ldr	r3, [r0, #0]
 8019174:	3301      	adds	r3, #1
 8019176:	f811 4b01 	ldrb.w	r4, [r1], #1
 801917a:	b914      	cbnz	r4, 8019182 <__match+0x12>
 801917c:	6003      	str	r3, [r0, #0]
 801917e:	2001      	movs	r0, #1
 8019180:	bd30      	pop	{r4, r5, pc}
 8019182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019186:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801918a:	2d19      	cmp	r5, #25
 801918c:	bf98      	it	ls
 801918e:	3220      	addls	r2, #32
 8019190:	42a2      	cmp	r2, r4
 8019192:	d0f0      	beq.n	8019176 <__match+0x6>
 8019194:	2000      	movs	r0, #0
 8019196:	e7f3      	b.n	8019180 <__match+0x10>

08019198 <__hexnan>:
 8019198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801919c:	680b      	ldr	r3, [r1, #0]
 801919e:	6801      	ldr	r1, [r0, #0]
 80191a0:	115e      	asrs	r6, r3, #5
 80191a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80191a6:	f013 031f 	ands.w	r3, r3, #31
 80191aa:	b087      	sub	sp, #28
 80191ac:	bf18      	it	ne
 80191ae:	3604      	addne	r6, #4
 80191b0:	2500      	movs	r5, #0
 80191b2:	1f37      	subs	r7, r6, #4
 80191b4:	4682      	mov	sl, r0
 80191b6:	4690      	mov	r8, r2
 80191b8:	9301      	str	r3, [sp, #4]
 80191ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80191be:	46b9      	mov	r9, r7
 80191c0:	463c      	mov	r4, r7
 80191c2:	9502      	str	r5, [sp, #8]
 80191c4:	46ab      	mov	fp, r5
 80191c6:	784a      	ldrb	r2, [r1, #1]
 80191c8:	1c4b      	adds	r3, r1, #1
 80191ca:	9303      	str	r3, [sp, #12]
 80191cc:	b342      	cbz	r2, 8019220 <__hexnan+0x88>
 80191ce:	4610      	mov	r0, r2
 80191d0:	9105      	str	r1, [sp, #20]
 80191d2:	9204      	str	r2, [sp, #16]
 80191d4:	f7ff fd5e 	bl	8018c94 <__hexdig_fun>
 80191d8:	2800      	cmp	r0, #0
 80191da:	d14f      	bne.n	801927c <__hexnan+0xe4>
 80191dc:	9a04      	ldr	r2, [sp, #16]
 80191de:	9905      	ldr	r1, [sp, #20]
 80191e0:	2a20      	cmp	r2, #32
 80191e2:	d818      	bhi.n	8019216 <__hexnan+0x7e>
 80191e4:	9b02      	ldr	r3, [sp, #8]
 80191e6:	459b      	cmp	fp, r3
 80191e8:	dd13      	ble.n	8019212 <__hexnan+0x7a>
 80191ea:	454c      	cmp	r4, r9
 80191ec:	d206      	bcs.n	80191fc <__hexnan+0x64>
 80191ee:	2d07      	cmp	r5, #7
 80191f0:	dc04      	bgt.n	80191fc <__hexnan+0x64>
 80191f2:	462a      	mov	r2, r5
 80191f4:	4649      	mov	r1, r9
 80191f6:	4620      	mov	r0, r4
 80191f8:	f7ff ffa8 	bl	801914c <L_shift>
 80191fc:	4544      	cmp	r4, r8
 80191fe:	d950      	bls.n	80192a2 <__hexnan+0x10a>
 8019200:	2300      	movs	r3, #0
 8019202:	f1a4 0904 	sub.w	r9, r4, #4
 8019206:	f844 3c04 	str.w	r3, [r4, #-4]
 801920a:	f8cd b008 	str.w	fp, [sp, #8]
 801920e:	464c      	mov	r4, r9
 8019210:	461d      	mov	r5, r3
 8019212:	9903      	ldr	r1, [sp, #12]
 8019214:	e7d7      	b.n	80191c6 <__hexnan+0x2e>
 8019216:	2a29      	cmp	r2, #41	; 0x29
 8019218:	d156      	bne.n	80192c8 <__hexnan+0x130>
 801921a:	3102      	adds	r1, #2
 801921c:	f8ca 1000 	str.w	r1, [sl]
 8019220:	f1bb 0f00 	cmp.w	fp, #0
 8019224:	d050      	beq.n	80192c8 <__hexnan+0x130>
 8019226:	454c      	cmp	r4, r9
 8019228:	d206      	bcs.n	8019238 <__hexnan+0xa0>
 801922a:	2d07      	cmp	r5, #7
 801922c:	dc04      	bgt.n	8019238 <__hexnan+0xa0>
 801922e:	462a      	mov	r2, r5
 8019230:	4649      	mov	r1, r9
 8019232:	4620      	mov	r0, r4
 8019234:	f7ff ff8a 	bl	801914c <L_shift>
 8019238:	4544      	cmp	r4, r8
 801923a:	d934      	bls.n	80192a6 <__hexnan+0x10e>
 801923c:	f1a8 0204 	sub.w	r2, r8, #4
 8019240:	4623      	mov	r3, r4
 8019242:	f853 1b04 	ldr.w	r1, [r3], #4
 8019246:	f842 1f04 	str.w	r1, [r2, #4]!
 801924a:	429f      	cmp	r7, r3
 801924c:	d2f9      	bcs.n	8019242 <__hexnan+0xaa>
 801924e:	1b3b      	subs	r3, r7, r4
 8019250:	f023 0303 	bic.w	r3, r3, #3
 8019254:	3304      	adds	r3, #4
 8019256:	3401      	adds	r4, #1
 8019258:	3e03      	subs	r6, #3
 801925a:	42b4      	cmp	r4, r6
 801925c:	bf88      	it	hi
 801925e:	2304      	movhi	r3, #4
 8019260:	4443      	add	r3, r8
 8019262:	2200      	movs	r2, #0
 8019264:	f843 2b04 	str.w	r2, [r3], #4
 8019268:	429f      	cmp	r7, r3
 801926a:	d2fb      	bcs.n	8019264 <__hexnan+0xcc>
 801926c:	683b      	ldr	r3, [r7, #0]
 801926e:	b91b      	cbnz	r3, 8019278 <__hexnan+0xe0>
 8019270:	4547      	cmp	r7, r8
 8019272:	d127      	bne.n	80192c4 <__hexnan+0x12c>
 8019274:	2301      	movs	r3, #1
 8019276:	603b      	str	r3, [r7, #0]
 8019278:	2005      	movs	r0, #5
 801927a:	e026      	b.n	80192ca <__hexnan+0x132>
 801927c:	3501      	adds	r5, #1
 801927e:	2d08      	cmp	r5, #8
 8019280:	f10b 0b01 	add.w	fp, fp, #1
 8019284:	dd06      	ble.n	8019294 <__hexnan+0xfc>
 8019286:	4544      	cmp	r4, r8
 8019288:	d9c3      	bls.n	8019212 <__hexnan+0x7a>
 801928a:	2300      	movs	r3, #0
 801928c:	f844 3c04 	str.w	r3, [r4, #-4]
 8019290:	2501      	movs	r5, #1
 8019292:	3c04      	subs	r4, #4
 8019294:	6822      	ldr	r2, [r4, #0]
 8019296:	f000 000f 	and.w	r0, r0, #15
 801929a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801929e:	6022      	str	r2, [r4, #0]
 80192a0:	e7b7      	b.n	8019212 <__hexnan+0x7a>
 80192a2:	2508      	movs	r5, #8
 80192a4:	e7b5      	b.n	8019212 <__hexnan+0x7a>
 80192a6:	9b01      	ldr	r3, [sp, #4]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d0df      	beq.n	801926c <__hexnan+0xd4>
 80192ac:	f04f 32ff 	mov.w	r2, #4294967295
 80192b0:	f1c3 0320 	rsb	r3, r3, #32
 80192b4:	fa22 f303 	lsr.w	r3, r2, r3
 80192b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80192bc:	401a      	ands	r2, r3
 80192be:	f846 2c04 	str.w	r2, [r6, #-4]
 80192c2:	e7d3      	b.n	801926c <__hexnan+0xd4>
 80192c4:	3f04      	subs	r7, #4
 80192c6:	e7d1      	b.n	801926c <__hexnan+0xd4>
 80192c8:	2004      	movs	r0, #4
 80192ca:	b007      	add	sp, #28
 80192cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080192d0 <_localeconv_r>:
 80192d0:	4800      	ldr	r0, [pc, #0]	; (80192d4 <_localeconv_r+0x4>)
 80192d2:	4770      	bx	lr
 80192d4:	20000234 	.word	0x20000234

080192d8 <_lseek_r>:
 80192d8:	b538      	push	{r3, r4, r5, lr}
 80192da:	4d07      	ldr	r5, [pc, #28]	; (80192f8 <_lseek_r+0x20>)
 80192dc:	4604      	mov	r4, r0
 80192de:	4608      	mov	r0, r1
 80192e0:	4611      	mov	r1, r2
 80192e2:	2200      	movs	r2, #0
 80192e4:	602a      	str	r2, [r5, #0]
 80192e6:	461a      	mov	r2, r3
 80192e8:	f001 fc34 	bl	801ab54 <_lseek>
 80192ec:	1c43      	adds	r3, r0, #1
 80192ee:	d102      	bne.n	80192f6 <_lseek_r+0x1e>
 80192f0:	682b      	ldr	r3, [r5, #0]
 80192f2:	b103      	cbz	r3, 80192f6 <_lseek_r+0x1e>
 80192f4:	6023      	str	r3, [r4, #0]
 80192f6:	bd38      	pop	{r3, r4, r5, pc}
 80192f8:	20007850 	.word	0x20007850

080192fc <__swhatbuf_r>:
 80192fc:	b570      	push	{r4, r5, r6, lr}
 80192fe:	460e      	mov	r6, r1
 8019300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019304:	2900      	cmp	r1, #0
 8019306:	b096      	sub	sp, #88	; 0x58
 8019308:	4614      	mov	r4, r2
 801930a:	461d      	mov	r5, r3
 801930c:	da07      	bge.n	801931e <__swhatbuf_r+0x22>
 801930e:	2300      	movs	r3, #0
 8019310:	602b      	str	r3, [r5, #0]
 8019312:	89b3      	ldrh	r3, [r6, #12]
 8019314:	061a      	lsls	r2, r3, #24
 8019316:	d410      	bmi.n	801933a <__swhatbuf_r+0x3e>
 8019318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801931c:	e00e      	b.n	801933c <__swhatbuf_r+0x40>
 801931e:	466a      	mov	r2, sp
 8019320:	f001 fbc6 	bl	801aab0 <_fstat_r>
 8019324:	2800      	cmp	r0, #0
 8019326:	dbf2      	blt.n	801930e <__swhatbuf_r+0x12>
 8019328:	9a01      	ldr	r2, [sp, #4]
 801932a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801932e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019332:	425a      	negs	r2, r3
 8019334:	415a      	adcs	r2, r3
 8019336:	602a      	str	r2, [r5, #0]
 8019338:	e7ee      	b.n	8019318 <__swhatbuf_r+0x1c>
 801933a:	2340      	movs	r3, #64	; 0x40
 801933c:	2000      	movs	r0, #0
 801933e:	6023      	str	r3, [r4, #0]
 8019340:	b016      	add	sp, #88	; 0x58
 8019342:	bd70      	pop	{r4, r5, r6, pc}

08019344 <__smakebuf_r>:
 8019344:	898b      	ldrh	r3, [r1, #12]
 8019346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019348:	079d      	lsls	r5, r3, #30
 801934a:	4606      	mov	r6, r0
 801934c:	460c      	mov	r4, r1
 801934e:	d507      	bpl.n	8019360 <__smakebuf_r+0x1c>
 8019350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019354:	6023      	str	r3, [r4, #0]
 8019356:	6123      	str	r3, [r4, #16]
 8019358:	2301      	movs	r3, #1
 801935a:	6163      	str	r3, [r4, #20]
 801935c:	b002      	add	sp, #8
 801935e:	bd70      	pop	{r4, r5, r6, pc}
 8019360:	ab01      	add	r3, sp, #4
 8019362:	466a      	mov	r2, sp
 8019364:	f7ff ffca 	bl	80192fc <__swhatbuf_r>
 8019368:	9900      	ldr	r1, [sp, #0]
 801936a:	4605      	mov	r5, r0
 801936c:	4630      	mov	r0, r6
 801936e:	f7fc fbad 	bl	8015acc <_malloc_r>
 8019372:	b948      	cbnz	r0, 8019388 <__smakebuf_r+0x44>
 8019374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019378:	059a      	lsls	r2, r3, #22
 801937a:	d4ef      	bmi.n	801935c <__smakebuf_r+0x18>
 801937c:	f023 0303 	bic.w	r3, r3, #3
 8019380:	f043 0302 	orr.w	r3, r3, #2
 8019384:	81a3      	strh	r3, [r4, #12]
 8019386:	e7e3      	b.n	8019350 <__smakebuf_r+0xc>
 8019388:	4b0d      	ldr	r3, [pc, #52]	; (80193c0 <__smakebuf_r+0x7c>)
 801938a:	62b3      	str	r3, [r6, #40]	; 0x28
 801938c:	89a3      	ldrh	r3, [r4, #12]
 801938e:	6020      	str	r0, [r4, #0]
 8019390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019394:	81a3      	strh	r3, [r4, #12]
 8019396:	9b00      	ldr	r3, [sp, #0]
 8019398:	6163      	str	r3, [r4, #20]
 801939a:	9b01      	ldr	r3, [sp, #4]
 801939c:	6120      	str	r0, [r4, #16]
 801939e:	b15b      	cbz	r3, 80193b8 <__smakebuf_r+0x74>
 80193a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80193a4:	4630      	mov	r0, r6
 80193a6:	f001 fb95 	bl	801aad4 <_isatty_r>
 80193aa:	b128      	cbz	r0, 80193b8 <__smakebuf_r+0x74>
 80193ac:	89a3      	ldrh	r3, [r4, #12]
 80193ae:	f023 0303 	bic.w	r3, r3, #3
 80193b2:	f043 0301 	orr.w	r3, r3, #1
 80193b6:	81a3      	strh	r3, [r4, #12]
 80193b8:	89a0      	ldrh	r0, [r4, #12]
 80193ba:	4305      	orrs	r5, r0
 80193bc:	81a5      	strh	r5, [r4, #12]
 80193be:	e7cd      	b.n	801935c <__smakebuf_r+0x18>
 80193c0:	080157c9 	.word	0x080157c9

080193c4 <__ascii_mbtowc>:
 80193c4:	b082      	sub	sp, #8
 80193c6:	b901      	cbnz	r1, 80193ca <__ascii_mbtowc+0x6>
 80193c8:	a901      	add	r1, sp, #4
 80193ca:	b142      	cbz	r2, 80193de <__ascii_mbtowc+0x1a>
 80193cc:	b14b      	cbz	r3, 80193e2 <__ascii_mbtowc+0x1e>
 80193ce:	7813      	ldrb	r3, [r2, #0]
 80193d0:	600b      	str	r3, [r1, #0]
 80193d2:	7812      	ldrb	r2, [r2, #0]
 80193d4:	1e10      	subs	r0, r2, #0
 80193d6:	bf18      	it	ne
 80193d8:	2001      	movne	r0, #1
 80193da:	b002      	add	sp, #8
 80193dc:	4770      	bx	lr
 80193de:	4610      	mov	r0, r2
 80193e0:	e7fb      	b.n	80193da <__ascii_mbtowc+0x16>
 80193e2:	f06f 0001 	mvn.w	r0, #1
 80193e6:	e7f8      	b.n	80193da <__ascii_mbtowc+0x16>

080193e8 <__malloc_lock>:
 80193e8:	4801      	ldr	r0, [pc, #4]	; (80193f0 <__malloc_lock+0x8>)
 80193ea:	f7fc bae4 	b.w	80159b6 <__retarget_lock_acquire_recursive>
 80193ee:	bf00      	nop
 80193f0:	20007848 	.word	0x20007848

080193f4 <__malloc_unlock>:
 80193f4:	4801      	ldr	r0, [pc, #4]	; (80193fc <__malloc_unlock+0x8>)
 80193f6:	f7fc badf 	b.w	80159b8 <__retarget_lock_release_recursive>
 80193fa:	bf00      	nop
 80193fc:	20007848 	.word	0x20007848

08019400 <_Balloc>:
 8019400:	b570      	push	{r4, r5, r6, lr}
 8019402:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019404:	4604      	mov	r4, r0
 8019406:	460d      	mov	r5, r1
 8019408:	b976      	cbnz	r6, 8019428 <_Balloc+0x28>
 801940a:	2010      	movs	r0, #16
 801940c:	f7fc fad6 	bl	80159bc <malloc>
 8019410:	4602      	mov	r2, r0
 8019412:	6260      	str	r0, [r4, #36]	; 0x24
 8019414:	b920      	cbnz	r0, 8019420 <_Balloc+0x20>
 8019416:	4b18      	ldr	r3, [pc, #96]	; (8019478 <_Balloc+0x78>)
 8019418:	4818      	ldr	r0, [pc, #96]	; (801947c <_Balloc+0x7c>)
 801941a:	2166      	movs	r1, #102	; 0x66
 801941c:	f7fe fc6e 	bl	8017cfc <__assert_func>
 8019420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019424:	6006      	str	r6, [r0, #0]
 8019426:	60c6      	str	r6, [r0, #12]
 8019428:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801942a:	68f3      	ldr	r3, [r6, #12]
 801942c:	b183      	cbz	r3, 8019450 <_Balloc+0x50>
 801942e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019430:	68db      	ldr	r3, [r3, #12]
 8019432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019436:	b9b8      	cbnz	r0, 8019468 <_Balloc+0x68>
 8019438:	2101      	movs	r1, #1
 801943a:	fa01 f605 	lsl.w	r6, r1, r5
 801943e:	1d72      	adds	r2, r6, #5
 8019440:	0092      	lsls	r2, r2, #2
 8019442:	4620      	mov	r0, r4
 8019444:	f000 fc97 	bl	8019d76 <_calloc_r>
 8019448:	b160      	cbz	r0, 8019464 <_Balloc+0x64>
 801944a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801944e:	e00e      	b.n	801946e <_Balloc+0x6e>
 8019450:	2221      	movs	r2, #33	; 0x21
 8019452:	2104      	movs	r1, #4
 8019454:	4620      	mov	r0, r4
 8019456:	f000 fc8e 	bl	8019d76 <_calloc_r>
 801945a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801945c:	60f0      	str	r0, [r6, #12]
 801945e:	68db      	ldr	r3, [r3, #12]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d1e4      	bne.n	801942e <_Balloc+0x2e>
 8019464:	2000      	movs	r0, #0
 8019466:	bd70      	pop	{r4, r5, r6, pc}
 8019468:	6802      	ldr	r2, [r0, #0]
 801946a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801946e:	2300      	movs	r3, #0
 8019470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019474:	e7f7      	b.n	8019466 <_Balloc+0x66>
 8019476:	bf00      	nop
 8019478:	0801c111 	.word	0x0801c111
 801947c:	0801c218 	.word	0x0801c218

08019480 <_Bfree>:
 8019480:	b570      	push	{r4, r5, r6, lr}
 8019482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019484:	4605      	mov	r5, r0
 8019486:	460c      	mov	r4, r1
 8019488:	b976      	cbnz	r6, 80194a8 <_Bfree+0x28>
 801948a:	2010      	movs	r0, #16
 801948c:	f7fc fa96 	bl	80159bc <malloc>
 8019490:	4602      	mov	r2, r0
 8019492:	6268      	str	r0, [r5, #36]	; 0x24
 8019494:	b920      	cbnz	r0, 80194a0 <_Bfree+0x20>
 8019496:	4b09      	ldr	r3, [pc, #36]	; (80194bc <_Bfree+0x3c>)
 8019498:	4809      	ldr	r0, [pc, #36]	; (80194c0 <_Bfree+0x40>)
 801949a:	218a      	movs	r1, #138	; 0x8a
 801949c:	f7fe fc2e 	bl	8017cfc <__assert_func>
 80194a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80194a4:	6006      	str	r6, [r0, #0]
 80194a6:	60c6      	str	r6, [r0, #12]
 80194a8:	b13c      	cbz	r4, 80194ba <_Bfree+0x3a>
 80194aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80194ac:	6862      	ldr	r2, [r4, #4]
 80194ae:	68db      	ldr	r3, [r3, #12]
 80194b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80194b4:	6021      	str	r1, [r4, #0]
 80194b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80194ba:	bd70      	pop	{r4, r5, r6, pc}
 80194bc:	0801c111 	.word	0x0801c111
 80194c0:	0801c218 	.word	0x0801c218

080194c4 <__multadd>:
 80194c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194c8:	690e      	ldr	r6, [r1, #16]
 80194ca:	4607      	mov	r7, r0
 80194cc:	4698      	mov	r8, r3
 80194ce:	460c      	mov	r4, r1
 80194d0:	f101 0014 	add.w	r0, r1, #20
 80194d4:	2300      	movs	r3, #0
 80194d6:	6805      	ldr	r5, [r0, #0]
 80194d8:	b2a9      	uxth	r1, r5
 80194da:	fb02 8101 	mla	r1, r2, r1, r8
 80194de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80194e2:	0c2d      	lsrs	r5, r5, #16
 80194e4:	fb02 c505 	mla	r5, r2, r5, ip
 80194e8:	b289      	uxth	r1, r1
 80194ea:	3301      	adds	r3, #1
 80194ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80194f0:	429e      	cmp	r6, r3
 80194f2:	f840 1b04 	str.w	r1, [r0], #4
 80194f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80194fa:	dcec      	bgt.n	80194d6 <__multadd+0x12>
 80194fc:	f1b8 0f00 	cmp.w	r8, #0
 8019500:	d022      	beq.n	8019548 <__multadd+0x84>
 8019502:	68a3      	ldr	r3, [r4, #8]
 8019504:	42b3      	cmp	r3, r6
 8019506:	dc19      	bgt.n	801953c <__multadd+0x78>
 8019508:	6861      	ldr	r1, [r4, #4]
 801950a:	4638      	mov	r0, r7
 801950c:	3101      	adds	r1, #1
 801950e:	f7ff ff77 	bl	8019400 <_Balloc>
 8019512:	4605      	mov	r5, r0
 8019514:	b928      	cbnz	r0, 8019522 <__multadd+0x5e>
 8019516:	4602      	mov	r2, r0
 8019518:	4b0d      	ldr	r3, [pc, #52]	; (8019550 <__multadd+0x8c>)
 801951a:	480e      	ldr	r0, [pc, #56]	; (8019554 <__multadd+0x90>)
 801951c:	21b5      	movs	r1, #181	; 0xb5
 801951e:	f7fe fbed 	bl	8017cfc <__assert_func>
 8019522:	6922      	ldr	r2, [r4, #16]
 8019524:	3202      	adds	r2, #2
 8019526:	f104 010c 	add.w	r1, r4, #12
 801952a:	0092      	lsls	r2, r2, #2
 801952c:	300c      	adds	r0, #12
 801952e:	f7fc fa4d 	bl	80159cc <memcpy>
 8019532:	4621      	mov	r1, r4
 8019534:	4638      	mov	r0, r7
 8019536:	f7ff ffa3 	bl	8019480 <_Bfree>
 801953a:	462c      	mov	r4, r5
 801953c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019540:	3601      	adds	r6, #1
 8019542:	f8c3 8014 	str.w	r8, [r3, #20]
 8019546:	6126      	str	r6, [r4, #16]
 8019548:	4620      	mov	r0, r4
 801954a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801954e:	bf00      	nop
 8019550:	0801c187 	.word	0x0801c187
 8019554:	0801c218 	.word	0x0801c218

08019558 <__s2b>:
 8019558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801955c:	460c      	mov	r4, r1
 801955e:	4615      	mov	r5, r2
 8019560:	461f      	mov	r7, r3
 8019562:	2209      	movs	r2, #9
 8019564:	3308      	adds	r3, #8
 8019566:	4606      	mov	r6, r0
 8019568:	fb93 f3f2 	sdiv	r3, r3, r2
 801956c:	2100      	movs	r1, #0
 801956e:	2201      	movs	r2, #1
 8019570:	429a      	cmp	r2, r3
 8019572:	db09      	blt.n	8019588 <__s2b+0x30>
 8019574:	4630      	mov	r0, r6
 8019576:	f7ff ff43 	bl	8019400 <_Balloc>
 801957a:	b940      	cbnz	r0, 801958e <__s2b+0x36>
 801957c:	4602      	mov	r2, r0
 801957e:	4b19      	ldr	r3, [pc, #100]	; (80195e4 <__s2b+0x8c>)
 8019580:	4819      	ldr	r0, [pc, #100]	; (80195e8 <__s2b+0x90>)
 8019582:	21ce      	movs	r1, #206	; 0xce
 8019584:	f7fe fbba 	bl	8017cfc <__assert_func>
 8019588:	0052      	lsls	r2, r2, #1
 801958a:	3101      	adds	r1, #1
 801958c:	e7f0      	b.n	8019570 <__s2b+0x18>
 801958e:	9b08      	ldr	r3, [sp, #32]
 8019590:	6143      	str	r3, [r0, #20]
 8019592:	2d09      	cmp	r5, #9
 8019594:	f04f 0301 	mov.w	r3, #1
 8019598:	6103      	str	r3, [r0, #16]
 801959a:	dd16      	ble.n	80195ca <__s2b+0x72>
 801959c:	f104 0909 	add.w	r9, r4, #9
 80195a0:	46c8      	mov	r8, r9
 80195a2:	442c      	add	r4, r5
 80195a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80195a8:	4601      	mov	r1, r0
 80195aa:	3b30      	subs	r3, #48	; 0x30
 80195ac:	220a      	movs	r2, #10
 80195ae:	4630      	mov	r0, r6
 80195b0:	f7ff ff88 	bl	80194c4 <__multadd>
 80195b4:	45a0      	cmp	r8, r4
 80195b6:	d1f5      	bne.n	80195a4 <__s2b+0x4c>
 80195b8:	f1a5 0408 	sub.w	r4, r5, #8
 80195bc:	444c      	add	r4, r9
 80195be:	1b2d      	subs	r5, r5, r4
 80195c0:	1963      	adds	r3, r4, r5
 80195c2:	42bb      	cmp	r3, r7
 80195c4:	db04      	blt.n	80195d0 <__s2b+0x78>
 80195c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195ca:	340a      	adds	r4, #10
 80195cc:	2509      	movs	r5, #9
 80195ce:	e7f6      	b.n	80195be <__s2b+0x66>
 80195d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80195d4:	4601      	mov	r1, r0
 80195d6:	3b30      	subs	r3, #48	; 0x30
 80195d8:	220a      	movs	r2, #10
 80195da:	4630      	mov	r0, r6
 80195dc:	f7ff ff72 	bl	80194c4 <__multadd>
 80195e0:	e7ee      	b.n	80195c0 <__s2b+0x68>
 80195e2:	bf00      	nop
 80195e4:	0801c187 	.word	0x0801c187
 80195e8:	0801c218 	.word	0x0801c218

080195ec <__hi0bits>:
 80195ec:	0c03      	lsrs	r3, r0, #16
 80195ee:	041b      	lsls	r3, r3, #16
 80195f0:	b9d3      	cbnz	r3, 8019628 <__hi0bits+0x3c>
 80195f2:	0400      	lsls	r0, r0, #16
 80195f4:	2310      	movs	r3, #16
 80195f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80195fa:	bf04      	itt	eq
 80195fc:	0200      	lsleq	r0, r0, #8
 80195fe:	3308      	addeq	r3, #8
 8019600:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019604:	bf04      	itt	eq
 8019606:	0100      	lsleq	r0, r0, #4
 8019608:	3304      	addeq	r3, #4
 801960a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801960e:	bf04      	itt	eq
 8019610:	0080      	lsleq	r0, r0, #2
 8019612:	3302      	addeq	r3, #2
 8019614:	2800      	cmp	r0, #0
 8019616:	db05      	blt.n	8019624 <__hi0bits+0x38>
 8019618:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801961c:	f103 0301 	add.w	r3, r3, #1
 8019620:	bf08      	it	eq
 8019622:	2320      	moveq	r3, #32
 8019624:	4618      	mov	r0, r3
 8019626:	4770      	bx	lr
 8019628:	2300      	movs	r3, #0
 801962a:	e7e4      	b.n	80195f6 <__hi0bits+0xa>

0801962c <__lo0bits>:
 801962c:	6803      	ldr	r3, [r0, #0]
 801962e:	f013 0207 	ands.w	r2, r3, #7
 8019632:	4601      	mov	r1, r0
 8019634:	d00b      	beq.n	801964e <__lo0bits+0x22>
 8019636:	07da      	lsls	r2, r3, #31
 8019638:	d424      	bmi.n	8019684 <__lo0bits+0x58>
 801963a:	0798      	lsls	r0, r3, #30
 801963c:	bf49      	itett	mi
 801963e:	085b      	lsrmi	r3, r3, #1
 8019640:	089b      	lsrpl	r3, r3, #2
 8019642:	2001      	movmi	r0, #1
 8019644:	600b      	strmi	r3, [r1, #0]
 8019646:	bf5c      	itt	pl
 8019648:	600b      	strpl	r3, [r1, #0]
 801964a:	2002      	movpl	r0, #2
 801964c:	4770      	bx	lr
 801964e:	b298      	uxth	r0, r3
 8019650:	b9b0      	cbnz	r0, 8019680 <__lo0bits+0x54>
 8019652:	0c1b      	lsrs	r3, r3, #16
 8019654:	2010      	movs	r0, #16
 8019656:	f013 0fff 	tst.w	r3, #255	; 0xff
 801965a:	bf04      	itt	eq
 801965c:	0a1b      	lsreq	r3, r3, #8
 801965e:	3008      	addeq	r0, #8
 8019660:	071a      	lsls	r2, r3, #28
 8019662:	bf04      	itt	eq
 8019664:	091b      	lsreq	r3, r3, #4
 8019666:	3004      	addeq	r0, #4
 8019668:	079a      	lsls	r2, r3, #30
 801966a:	bf04      	itt	eq
 801966c:	089b      	lsreq	r3, r3, #2
 801966e:	3002      	addeq	r0, #2
 8019670:	07da      	lsls	r2, r3, #31
 8019672:	d403      	bmi.n	801967c <__lo0bits+0x50>
 8019674:	085b      	lsrs	r3, r3, #1
 8019676:	f100 0001 	add.w	r0, r0, #1
 801967a:	d005      	beq.n	8019688 <__lo0bits+0x5c>
 801967c:	600b      	str	r3, [r1, #0]
 801967e:	4770      	bx	lr
 8019680:	4610      	mov	r0, r2
 8019682:	e7e8      	b.n	8019656 <__lo0bits+0x2a>
 8019684:	2000      	movs	r0, #0
 8019686:	4770      	bx	lr
 8019688:	2020      	movs	r0, #32
 801968a:	4770      	bx	lr

0801968c <__i2b>:
 801968c:	b510      	push	{r4, lr}
 801968e:	460c      	mov	r4, r1
 8019690:	2101      	movs	r1, #1
 8019692:	f7ff feb5 	bl	8019400 <_Balloc>
 8019696:	4602      	mov	r2, r0
 8019698:	b928      	cbnz	r0, 80196a6 <__i2b+0x1a>
 801969a:	4b05      	ldr	r3, [pc, #20]	; (80196b0 <__i2b+0x24>)
 801969c:	4805      	ldr	r0, [pc, #20]	; (80196b4 <__i2b+0x28>)
 801969e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80196a2:	f7fe fb2b 	bl	8017cfc <__assert_func>
 80196a6:	2301      	movs	r3, #1
 80196a8:	6144      	str	r4, [r0, #20]
 80196aa:	6103      	str	r3, [r0, #16]
 80196ac:	bd10      	pop	{r4, pc}
 80196ae:	bf00      	nop
 80196b0:	0801c187 	.word	0x0801c187
 80196b4:	0801c218 	.word	0x0801c218

080196b8 <__multiply>:
 80196b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196bc:	4614      	mov	r4, r2
 80196be:	690a      	ldr	r2, [r1, #16]
 80196c0:	6923      	ldr	r3, [r4, #16]
 80196c2:	429a      	cmp	r2, r3
 80196c4:	bfb8      	it	lt
 80196c6:	460b      	movlt	r3, r1
 80196c8:	460d      	mov	r5, r1
 80196ca:	bfbc      	itt	lt
 80196cc:	4625      	movlt	r5, r4
 80196ce:	461c      	movlt	r4, r3
 80196d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80196d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80196d8:	68ab      	ldr	r3, [r5, #8]
 80196da:	6869      	ldr	r1, [r5, #4]
 80196dc:	eb0a 0709 	add.w	r7, sl, r9
 80196e0:	42bb      	cmp	r3, r7
 80196e2:	b085      	sub	sp, #20
 80196e4:	bfb8      	it	lt
 80196e6:	3101      	addlt	r1, #1
 80196e8:	f7ff fe8a 	bl	8019400 <_Balloc>
 80196ec:	b930      	cbnz	r0, 80196fc <__multiply+0x44>
 80196ee:	4602      	mov	r2, r0
 80196f0:	4b42      	ldr	r3, [pc, #264]	; (80197fc <__multiply+0x144>)
 80196f2:	4843      	ldr	r0, [pc, #268]	; (8019800 <__multiply+0x148>)
 80196f4:	f240 115d 	movw	r1, #349	; 0x15d
 80196f8:	f7fe fb00 	bl	8017cfc <__assert_func>
 80196fc:	f100 0614 	add.w	r6, r0, #20
 8019700:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019704:	4633      	mov	r3, r6
 8019706:	2200      	movs	r2, #0
 8019708:	4543      	cmp	r3, r8
 801970a:	d31e      	bcc.n	801974a <__multiply+0x92>
 801970c:	f105 0c14 	add.w	ip, r5, #20
 8019710:	f104 0314 	add.w	r3, r4, #20
 8019714:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019718:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801971c:	9202      	str	r2, [sp, #8]
 801971e:	ebac 0205 	sub.w	r2, ip, r5
 8019722:	3a15      	subs	r2, #21
 8019724:	f022 0203 	bic.w	r2, r2, #3
 8019728:	3204      	adds	r2, #4
 801972a:	f105 0115 	add.w	r1, r5, #21
 801972e:	458c      	cmp	ip, r1
 8019730:	bf38      	it	cc
 8019732:	2204      	movcc	r2, #4
 8019734:	9201      	str	r2, [sp, #4]
 8019736:	9a02      	ldr	r2, [sp, #8]
 8019738:	9303      	str	r3, [sp, #12]
 801973a:	429a      	cmp	r2, r3
 801973c:	d808      	bhi.n	8019750 <__multiply+0x98>
 801973e:	2f00      	cmp	r7, #0
 8019740:	dc55      	bgt.n	80197ee <__multiply+0x136>
 8019742:	6107      	str	r7, [r0, #16]
 8019744:	b005      	add	sp, #20
 8019746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801974a:	f843 2b04 	str.w	r2, [r3], #4
 801974e:	e7db      	b.n	8019708 <__multiply+0x50>
 8019750:	f8b3 a000 	ldrh.w	sl, [r3]
 8019754:	f1ba 0f00 	cmp.w	sl, #0
 8019758:	d020      	beq.n	801979c <__multiply+0xe4>
 801975a:	f105 0e14 	add.w	lr, r5, #20
 801975e:	46b1      	mov	r9, r6
 8019760:	2200      	movs	r2, #0
 8019762:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019766:	f8d9 b000 	ldr.w	fp, [r9]
 801976a:	b2a1      	uxth	r1, r4
 801976c:	fa1f fb8b 	uxth.w	fp, fp
 8019770:	fb0a b101 	mla	r1, sl, r1, fp
 8019774:	4411      	add	r1, r2
 8019776:	f8d9 2000 	ldr.w	r2, [r9]
 801977a:	0c24      	lsrs	r4, r4, #16
 801977c:	0c12      	lsrs	r2, r2, #16
 801977e:	fb0a 2404 	mla	r4, sl, r4, r2
 8019782:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019786:	b289      	uxth	r1, r1
 8019788:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801978c:	45f4      	cmp	ip, lr
 801978e:	f849 1b04 	str.w	r1, [r9], #4
 8019792:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019796:	d8e4      	bhi.n	8019762 <__multiply+0xaa>
 8019798:	9901      	ldr	r1, [sp, #4]
 801979a:	5072      	str	r2, [r6, r1]
 801979c:	9a03      	ldr	r2, [sp, #12]
 801979e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80197a2:	3304      	adds	r3, #4
 80197a4:	f1b9 0f00 	cmp.w	r9, #0
 80197a8:	d01f      	beq.n	80197ea <__multiply+0x132>
 80197aa:	6834      	ldr	r4, [r6, #0]
 80197ac:	f105 0114 	add.w	r1, r5, #20
 80197b0:	46b6      	mov	lr, r6
 80197b2:	f04f 0a00 	mov.w	sl, #0
 80197b6:	880a      	ldrh	r2, [r1, #0]
 80197b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80197bc:	fb09 b202 	mla	r2, r9, r2, fp
 80197c0:	4492      	add	sl, r2
 80197c2:	b2a4      	uxth	r4, r4
 80197c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80197c8:	f84e 4b04 	str.w	r4, [lr], #4
 80197cc:	f851 4b04 	ldr.w	r4, [r1], #4
 80197d0:	f8be 2000 	ldrh.w	r2, [lr]
 80197d4:	0c24      	lsrs	r4, r4, #16
 80197d6:	fb09 2404 	mla	r4, r9, r4, r2
 80197da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80197de:	458c      	cmp	ip, r1
 80197e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80197e4:	d8e7      	bhi.n	80197b6 <__multiply+0xfe>
 80197e6:	9a01      	ldr	r2, [sp, #4]
 80197e8:	50b4      	str	r4, [r6, r2]
 80197ea:	3604      	adds	r6, #4
 80197ec:	e7a3      	b.n	8019736 <__multiply+0x7e>
 80197ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d1a5      	bne.n	8019742 <__multiply+0x8a>
 80197f6:	3f01      	subs	r7, #1
 80197f8:	e7a1      	b.n	801973e <__multiply+0x86>
 80197fa:	bf00      	nop
 80197fc:	0801c187 	.word	0x0801c187
 8019800:	0801c218 	.word	0x0801c218

08019804 <__pow5mult>:
 8019804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019808:	4615      	mov	r5, r2
 801980a:	f012 0203 	ands.w	r2, r2, #3
 801980e:	4606      	mov	r6, r0
 8019810:	460f      	mov	r7, r1
 8019812:	d007      	beq.n	8019824 <__pow5mult+0x20>
 8019814:	4c25      	ldr	r4, [pc, #148]	; (80198ac <__pow5mult+0xa8>)
 8019816:	3a01      	subs	r2, #1
 8019818:	2300      	movs	r3, #0
 801981a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801981e:	f7ff fe51 	bl	80194c4 <__multadd>
 8019822:	4607      	mov	r7, r0
 8019824:	10ad      	asrs	r5, r5, #2
 8019826:	d03d      	beq.n	80198a4 <__pow5mult+0xa0>
 8019828:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801982a:	b97c      	cbnz	r4, 801984c <__pow5mult+0x48>
 801982c:	2010      	movs	r0, #16
 801982e:	f7fc f8c5 	bl	80159bc <malloc>
 8019832:	4602      	mov	r2, r0
 8019834:	6270      	str	r0, [r6, #36]	; 0x24
 8019836:	b928      	cbnz	r0, 8019844 <__pow5mult+0x40>
 8019838:	4b1d      	ldr	r3, [pc, #116]	; (80198b0 <__pow5mult+0xac>)
 801983a:	481e      	ldr	r0, [pc, #120]	; (80198b4 <__pow5mult+0xb0>)
 801983c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019840:	f7fe fa5c 	bl	8017cfc <__assert_func>
 8019844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019848:	6004      	str	r4, [r0, #0]
 801984a:	60c4      	str	r4, [r0, #12]
 801984c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019854:	b94c      	cbnz	r4, 801986a <__pow5mult+0x66>
 8019856:	f240 2171 	movw	r1, #625	; 0x271
 801985a:	4630      	mov	r0, r6
 801985c:	f7ff ff16 	bl	801968c <__i2b>
 8019860:	2300      	movs	r3, #0
 8019862:	f8c8 0008 	str.w	r0, [r8, #8]
 8019866:	4604      	mov	r4, r0
 8019868:	6003      	str	r3, [r0, #0]
 801986a:	f04f 0900 	mov.w	r9, #0
 801986e:	07eb      	lsls	r3, r5, #31
 8019870:	d50a      	bpl.n	8019888 <__pow5mult+0x84>
 8019872:	4639      	mov	r1, r7
 8019874:	4622      	mov	r2, r4
 8019876:	4630      	mov	r0, r6
 8019878:	f7ff ff1e 	bl	80196b8 <__multiply>
 801987c:	4639      	mov	r1, r7
 801987e:	4680      	mov	r8, r0
 8019880:	4630      	mov	r0, r6
 8019882:	f7ff fdfd 	bl	8019480 <_Bfree>
 8019886:	4647      	mov	r7, r8
 8019888:	106d      	asrs	r5, r5, #1
 801988a:	d00b      	beq.n	80198a4 <__pow5mult+0xa0>
 801988c:	6820      	ldr	r0, [r4, #0]
 801988e:	b938      	cbnz	r0, 80198a0 <__pow5mult+0x9c>
 8019890:	4622      	mov	r2, r4
 8019892:	4621      	mov	r1, r4
 8019894:	4630      	mov	r0, r6
 8019896:	f7ff ff0f 	bl	80196b8 <__multiply>
 801989a:	6020      	str	r0, [r4, #0]
 801989c:	f8c0 9000 	str.w	r9, [r0]
 80198a0:	4604      	mov	r4, r0
 80198a2:	e7e4      	b.n	801986e <__pow5mult+0x6a>
 80198a4:	4638      	mov	r0, r7
 80198a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198aa:	bf00      	nop
 80198ac:	0801c368 	.word	0x0801c368
 80198b0:	0801c111 	.word	0x0801c111
 80198b4:	0801c218 	.word	0x0801c218

080198b8 <__lshift>:
 80198b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198bc:	460c      	mov	r4, r1
 80198be:	6849      	ldr	r1, [r1, #4]
 80198c0:	6923      	ldr	r3, [r4, #16]
 80198c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80198c6:	68a3      	ldr	r3, [r4, #8]
 80198c8:	4607      	mov	r7, r0
 80198ca:	4691      	mov	r9, r2
 80198cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80198d0:	f108 0601 	add.w	r6, r8, #1
 80198d4:	42b3      	cmp	r3, r6
 80198d6:	db0b      	blt.n	80198f0 <__lshift+0x38>
 80198d8:	4638      	mov	r0, r7
 80198da:	f7ff fd91 	bl	8019400 <_Balloc>
 80198de:	4605      	mov	r5, r0
 80198e0:	b948      	cbnz	r0, 80198f6 <__lshift+0x3e>
 80198e2:	4602      	mov	r2, r0
 80198e4:	4b28      	ldr	r3, [pc, #160]	; (8019988 <__lshift+0xd0>)
 80198e6:	4829      	ldr	r0, [pc, #164]	; (801998c <__lshift+0xd4>)
 80198e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80198ec:	f7fe fa06 	bl	8017cfc <__assert_func>
 80198f0:	3101      	adds	r1, #1
 80198f2:	005b      	lsls	r3, r3, #1
 80198f4:	e7ee      	b.n	80198d4 <__lshift+0x1c>
 80198f6:	2300      	movs	r3, #0
 80198f8:	f100 0114 	add.w	r1, r0, #20
 80198fc:	f100 0210 	add.w	r2, r0, #16
 8019900:	4618      	mov	r0, r3
 8019902:	4553      	cmp	r3, sl
 8019904:	db33      	blt.n	801996e <__lshift+0xb6>
 8019906:	6920      	ldr	r0, [r4, #16]
 8019908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801990c:	f104 0314 	add.w	r3, r4, #20
 8019910:	f019 091f 	ands.w	r9, r9, #31
 8019914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019918:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801991c:	d02b      	beq.n	8019976 <__lshift+0xbe>
 801991e:	f1c9 0e20 	rsb	lr, r9, #32
 8019922:	468a      	mov	sl, r1
 8019924:	2200      	movs	r2, #0
 8019926:	6818      	ldr	r0, [r3, #0]
 8019928:	fa00 f009 	lsl.w	r0, r0, r9
 801992c:	4302      	orrs	r2, r0
 801992e:	f84a 2b04 	str.w	r2, [sl], #4
 8019932:	f853 2b04 	ldr.w	r2, [r3], #4
 8019936:	459c      	cmp	ip, r3
 8019938:	fa22 f20e 	lsr.w	r2, r2, lr
 801993c:	d8f3      	bhi.n	8019926 <__lshift+0x6e>
 801993e:	ebac 0304 	sub.w	r3, ip, r4
 8019942:	3b15      	subs	r3, #21
 8019944:	f023 0303 	bic.w	r3, r3, #3
 8019948:	3304      	adds	r3, #4
 801994a:	f104 0015 	add.w	r0, r4, #21
 801994e:	4584      	cmp	ip, r0
 8019950:	bf38      	it	cc
 8019952:	2304      	movcc	r3, #4
 8019954:	50ca      	str	r2, [r1, r3]
 8019956:	b10a      	cbz	r2, 801995c <__lshift+0xa4>
 8019958:	f108 0602 	add.w	r6, r8, #2
 801995c:	3e01      	subs	r6, #1
 801995e:	4638      	mov	r0, r7
 8019960:	612e      	str	r6, [r5, #16]
 8019962:	4621      	mov	r1, r4
 8019964:	f7ff fd8c 	bl	8019480 <_Bfree>
 8019968:	4628      	mov	r0, r5
 801996a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801996e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019972:	3301      	adds	r3, #1
 8019974:	e7c5      	b.n	8019902 <__lshift+0x4a>
 8019976:	3904      	subs	r1, #4
 8019978:	f853 2b04 	ldr.w	r2, [r3], #4
 801997c:	f841 2f04 	str.w	r2, [r1, #4]!
 8019980:	459c      	cmp	ip, r3
 8019982:	d8f9      	bhi.n	8019978 <__lshift+0xc0>
 8019984:	e7ea      	b.n	801995c <__lshift+0xa4>
 8019986:	bf00      	nop
 8019988:	0801c187 	.word	0x0801c187
 801998c:	0801c218 	.word	0x0801c218

08019990 <__mcmp>:
 8019990:	b530      	push	{r4, r5, lr}
 8019992:	6902      	ldr	r2, [r0, #16]
 8019994:	690c      	ldr	r4, [r1, #16]
 8019996:	1b12      	subs	r2, r2, r4
 8019998:	d10e      	bne.n	80199b8 <__mcmp+0x28>
 801999a:	f100 0314 	add.w	r3, r0, #20
 801999e:	3114      	adds	r1, #20
 80199a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80199a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80199a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80199ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80199b0:	42a5      	cmp	r5, r4
 80199b2:	d003      	beq.n	80199bc <__mcmp+0x2c>
 80199b4:	d305      	bcc.n	80199c2 <__mcmp+0x32>
 80199b6:	2201      	movs	r2, #1
 80199b8:	4610      	mov	r0, r2
 80199ba:	bd30      	pop	{r4, r5, pc}
 80199bc:	4283      	cmp	r3, r0
 80199be:	d3f3      	bcc.n	80199a8 <__mcmp+0x18>
 80199c0:	e7fa      	b.n	80199b8 <__mcmp+0x28>
 80199c2:	f04f 32ff 	mov.w	r2, #4294967295
 80199c6:	e7f7      	b.n	80199b8 <__mcmp+0x28>

080199c8 <__mdiff>:
 80199c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199cc:	460c      	mov	r4, r1
 80199ce:	4606      	mov	r6, r0
 80199d0:	4611      	mov	r1, r2
 80199d2:	4620      	mov	r0, r4
 80199d4:	4617      	mov	r7, r2
 80199d6:	f7ff ffdb 	bl	8019990 <__mcmp>
 80199da:	1e05      	subs	r5, r0, #0
 80199dc:	d110      	bne.n	8019a00 <__mdiff+0x38>
 80199de:	4629      	mov	r1, r5
 80199e0:	4630      	mov	r0, r6
 80199e2:	f7ff fd0d 	bl	8019400 <_Balloc>
 80199e6:	b930      	cbnz	r0, 80199f6 <__mdiff+0x2e>
 80199e8:	4b39      	ldr	r3, [pc, #228]	; (8019ad0 <__mdiff+0x108>)
 80199ea:	4602      	mov	r2, r0
 80199ec:	f240 2132 	movw	r1, #562	; 0x232
 80199f0:	4838      	ldr	r0, [pc, #224]	; (8019ad4 <__mdiff+0x10c>)
 80199f2:	f7fe f983 	bl	8017cfc <__assert_func>
 80199f6:	2301      	movs	r3, #1
 80199f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80199fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a00:	bfa4      	itt	ge
 8019a02:	463b      	movge	r3, r7
 8019a04:	4627      	movge	r7, r4
 8019a06:	4630      	mov	r0, r6
 8019a08:	6879      	ldr	r1, [r7, #4]
 8019a0a:	bfa6      	itte	ge
 8019a0c:	461c      	movge	r4, r3
 8019a0e:	2500      	movge	r5, #0
 8019a10:	2501      	movlt	r5, #1
 8019a12:	f7ff fcf5 	bl	8019400 <_Balloc>
 8019a16:	b920      	cbnz	r0, 8019a22 <__mdiff+0x5a>
 8019a18:	4b2d      	ldr	r3, [pc, #180]	; (8019ad0 <__mdiff+0x108>)
 8019a1a:	4602      	mov	r2, r0
 8019a1c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019a20:	e7e6      	b.n	80199f0 <__mdiff+0x28>
 8019a22:	693e      	ldr	r6, [r7, #16]
 8019a24:	60c5      	str	r5, [r0, #12]
 8019a26:	6925      	ldr	r5, [r4, #16]
 8019a28:	f107 0114 	add.w	r1, r7, #20
 8019a2c:	f104 0914 	add.w	r9, r4, #20
 8019a30:	f100 0e14 	add.w	lr, r0, #20
 8019a34:	f107 0210 	add.w	r2, r7, #16
 8019a38:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019a3c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019a40:	46f2      	mov	sl, lr
 8019a42:	2700      	movs	r7, #0
 8019a44:	f859 3b04 	ldr.w	r3, [r9], #4
 8019a48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019a4c:	fa1f f883 	uxth.w	r8, r3
 8019a50:	fa17 f78b 	uxtah	r7, r7, fp
 8019a54:	0c1b      	lsrs	r3, r3, #16
 8019a56:	eba7 0808 	sub.w	r8, r7, r8
 8019a5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019a5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019a62:	fa1f f888 	uxth.w	r8, r8
 8019a66:	141f      	asrs	r7, r3, #16
 8019a68:	454d      	cmp	r5, r9
 8019a6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019a6e:	f84a 3b04 	str.w	r3, [sl], #4
 8019a72:	d8e7      	bhi.n	8019a44 <__mdiff+0x7c>
 8019a74:	1b2b      	subs	r3, r5, r4
 8019a76:	3b15      	subs	r3, #21
 8019a78:	f023 0303 	bic.w	r3, r3, #3
 8019a7c:	3304      	adds	r3, #4
 8019a7e:	3415      	adds	r4, #21
 8019a80:	42a5      	cmp	r5, r4
 8019a82:	bf38      	it	cc
 8019a84:	2304      	movcc	r3, #4
 8019a86:	4419      	add	r1, r3
 8019a88:	4473      	add	r3, lr
 8019a8a:	469e      	mov	lr, r3
 8019a8c:	460d      	mov	r5, r1
 8019a8e:	4565      	cmp	r5, ip
 8019a90:	d30e      	bcc.n	8019ab0 <__mdiff+0xe8>
 8019a92:	f10c 0203 	add.w	r2, ip, #3
 8019a96:	1a52      	subs	r2, r2, r1
 8019a98:	f022 0203 	bic.w	r2, r2, #3
 8019a9c:	3903      	subs	r1, #3
 8019a9e:	458c      	cmp	ip, r1
 8019aa0:	bf38      	it	cc
 8019aa2:	2200      	movcc	r2, #0
 8019aa4:	441a      	add	r2, r3
 8019aa6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019aaa:	b17b      	cbz	r3, 8019acc <__mdiff+0x104>
 8019aac:	6106      	str	r6, [r0, #16]
 8019aae:	e7a5      	b.n	80199fc <__mdiff+0x34>
 8019ab0:	f855 8b04 	ldr.w	r8, [r5], #4
 8019ab4:	fa17 f488 	uxtah	r4, r7, r8
 8019ab8:	1422      	asrs	r2, r4, #16
 8019aba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019abe:	b2a4      	uxth	r4, r4
 8019ac0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019ac4:	f84e 4b04 	str.w	r4, [lr], #4
 8019ac8:	1417      	asrs	r7, r2, #16
 8019aca:	e7e0      	b.n	8019a8e <__mdiff+0xc6>
 8019acc:	3e01      	subs	r6, #1
 8019ace:	e7ea      	b.n	8019aa6 <__mdiff+0xde>
 8019ad0:	0801c187 	.word	0x0801c187
 8019ad4:	0801c218 	.word	0x0801c218

08019ad8 <__ulp>:
 8019ad8:	b082      	sub	sp, #8
 8019ada:	ed8d 0b00 	vstr	d0, [sp]
 8019ade:	9b01      	ldr	r3, [sp, #4]
 8019ae0:	4912      	ldr	r1, [pc, #72]	; (8019b2c <__ulp+0x54>)
 8019ae2:	4019      	ands	r1, r3
 8019ae4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8019ae8:	2900      	cmp	r1, #0
 8019aea:	dd05      	ble.n	8019af8 <__ulp+0x20>
 8019aec:	2200      	movs	r2, #0
 8019aee:	460b      	mov	r3, r1
 8019af0:	ec43 2b10 	vmov	d0, r2, r3
 8019af4:	b002      	add	sp, #8
 8019af6:	4770      	bx	lr
 8019af8:	4249      	negs	r1, r1
 8019afa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8019afe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8019b02:	f04f 0200 	mov.w	r2, #0
 8019b06:	f04f 0300 	mov.w	r3, #0
 8019b0a:	da04      	bge.n	8019b16 <__ulp+0x3e>
 8019b0c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8019b10:	fa41 f300 	asr.w	r3, r1, r0
 8019b14:	e7ec      	b.n	8019af0 <__ulp+0x18>
 8019b16:	f1a0 0114 	sub.w	r1, r0, #20
 8019b1a:	291e      	cmp	r1, #30
 8019b1c:	bfda      	itte	le
 8019b1e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8019b22:	fa20 f101 	lsrle.w	r1, r0, r1
 8019b26:	2101      	movgt	r1, #1
 8019b28:	460a      	mov	r2, r1
 8019b2a:	e7e1      	b.n	8019af0 <__ulp+0x18>
 8019b2c:	7ff00000 	.word	0x7ff00000

08019b30 <__b2d>:
 8019b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b32:	6905      	ldr	r5, [r0, #16]
 8019b34:	f100 0714 	add.w	r7, r0, #20
 8019b38:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019b3c:	1f2e      	subs	r6, r5, #4
 8019b3e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8019b42:	4620      	mov	r0, r4
 8019b44:	f7ff fd52 	bl	80195ec <__hi0bits>
 8019b48:	f1c0 0320 	rsb	r3, r0, #32
 8019b4c:	280a      	cmp	r0, #10
 8019b4e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8019bcc <__b2d+0x9c>
 8019b52:	600b      	str	r3, [r1, #0]
 8019b54:	dc14      	bgt.n	8019b80 <__b2d+0x50>
 8019b56:	f1c0 0e0b 	rsb	lr, r0, #11
 8019b5a:	fa24 f10e 	lsr.w	r1, r4, lr
 8019b5e:	42b7      	cmp	r7, r6
 8019b60:	ea41 030c 	orr.w	r3, r1, ip
 8019b64:	bf34      	ite	cc
 8019b66:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019b6a:	2100      	movcs	r1, #0
 8019b6c:	3015      	adds	r0, #21
 8019b6e:	fa04 f000 	lsl.w	r0, r4, r0
 8019b72:	fa21 f10e 	lsr.w	r1, r1, lr
 8019b76:	ea40 0201 	orr.w	r2, r0, r1
 8019b7a:	ec43 2b10 	vmov	d0, r2, r3
 8019b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b80:	42b7      	cmp	r7, r6
 8019b82:	bf3a      	itte	cc
 8019b84:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019b88:	f1a5 0608 	subcc.w	r6, r5, #8
 8019b8c:	2100      	movcs	r1, #0
 8019b8e:	380b      	subs	r0, #11
 8019b90:	d017      	beq.n	8019bc2 <__b2d+0x92>
 8019b92:	f1c0 0c20 	rsb	ip, r0, #32
 8019b96:	fa04 f500 	lsl.w	r5, r4, r0
 8019b9a:	42be      	cmp	r6, r7
 8019b9c:	fa21 f40c 	lsr.w	r4, r1, ip
 8019ba0:	ea45 0504 	orr.w	r5, r5, r4
 8019ba4:	bf8c      	ite	hi
 8019ba6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019baa:	2400      	movls	r4, #0
 8019bac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8019bb0:	fa01 f000 	lsl.w	r0, r1, r0
 8019bb4:	fa24 f40c 	lsr.w	r4, r4, ip
 8019bb8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019bbc:	ea40 0204 	orr.w	r2, r0, r4
 8019bc0:	e7db      	b.n	8019b7a <__b2d+0x4a>
 8019bc2:	ea44 030c 	orr.w	r3, r4, ip
 8019bc6:	460a      	mov	r2, r1
 8019bc8:	e7d7      	b.n	8019b7a <__b2d+0x4a>
 8019bca:	bf00      	nop
 8019bcc:	3ff00000 	.word	0x3ff00000

08019bd0 <__d2b>:
 8019bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019bd4:	4689      	mov	r9, r1
 8019bd6:	2101      	movs	r1, #1
 8019bd8:	ec57 6b10 	vmov	r6, r7, d0
 8019bdc:	4690      	mov	r8, r2
 8019bde:	f7ff fc0f 	bl	8019400 <_Balloc>
 8019be2:	4604      	mov	r4, r0
 8019be4:	b930      	cbnz	r0, 8019bf4 <__d2b+0x24>
 8019be6:	4602      	mov	r2, r0
 8019be8:	4b25      	ldr	r3, [pc, #148]	; (8019c80 <__d2b+0xb0>)
 8019bea:	4826      	ldr	r0, [pc, #152]	; (8019c84 <__d2b+0xb4>)
 8019bec:	f240 310a 	movw	r1, #778	; 0x30a
 8019bf0:	f7fe f884 	bl	8017cfc <__assert_func>
 8019bf4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019bf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019bfc:	bb35      	cbnz	r5, 8019c4c <__d2b+0x7c>
 8019bfe:	2e00      	cmp	r6, #0
 8019c00:	9301      	str	r3, [sp, #4]
 8019c02:	d028      	beq.n	8019c56 <__d2b+0x86>
 8019c04:	4668      	mov	r0, sp
 8019c06:	9600      	str	r6, [sp, #0]
 8019c08:	f7ff fd10 	bl	801962c <__lo0bits>
 8019c0c:	9900      	ldr	r1, [sp, #0]
 8019c0e:	b300      	cbz	r0, 8019c52 <__d2b+0x82>
 8019c10:	9a01      	ldr	r2, [sp, #4]
 8019c12:	f1c0 0320 	rsb	r3, r0, #32
 8019c16:	fa02 f303 	lsl.w	r3, r2, r3
 8019c1a:	430b      	orrs	r3, r1
 8019c1c:	40c2      	lsrs	r2, r0
 8019c1e:	6163      	str	r3, [r4, #20]
 8019c20:	9201      	str	r2, [sp, #4]
 8019c22:	9b01      	ldr	r3, [sp, #4]
 8019c24:	61a3      	str	r3, [r4, #24]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	bf14      	ite	ne
 8019c2a:	2202      	movne	r2, #2
 8019c2c:	2201      	moveq	r2, #1
 8019c2e:	6122      	str	r2, [r4, #16]
 8019c30:	b1d5      	cbz	r5, 8019c68 <__d2b+0x98>
 8019c32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019c36:	4405      	add	r5, r0
 8019c38:	f8c9 5000 	str.w	r5, [r9]
 8019c3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019c40:	f8c8 0000 	str.w	r0, [r8]
 8019c44:	4620      	mov	r0, r4
 8019c46:	b003      	add	sp, #12
 8019c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019c4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019c50:	e7d5      	b.n	8019bfe <__d2b+0x2e>
 8019c52:	6161      	str	r1, [r4, #20]
 8019c54:	e7e5      	b.n	8019c22 <__d2b+0x52>
 8019c56:	a801      	add	r0, sp, #4
 8019c58:	f7ff fce8 	bl	801962c <__lo0bits>
 8019c5c:	9b01      	ldr	r3, [sp, #4]
 8019c5e:	6163      	str	r3, [r4, #20]
 8019c60:	2201      	movs	r2, #1
 8019c62:	6122      	str	r2, [r4, #16]
 8019c64:	3020      	adds	r0, #32
 8019c66:	e7e3      	b.n	8019c30 <__d2b+0x60>
 8019c68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019c6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019c70:	f8c9 0000 	str.w	r0, [r9]
 8019c74:	6918      	ldr	r0, [r3, #16]
 8019c76:	f7ff fcb9 	bl	80195ec <__hi0bits>
 8019c7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019c7e:	e7df      	b.n	8019c40 <__d2b+0x70>
 8019c80:	0801c187 	.word	0x0801c187
 8019c84:	0801c218 	.word	0x0801c218

08019c88 <__ratio>:
 8019c88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c8c:	4688      	mov	r8, r1
 8019c8e:	4669      	mov	r1, sp
 8019c90:	4681      	mov	r9, r0
 8019c92:	f7ff ff4d 	bl	8019b30 <__b2d>
 8019c96:	a901      	add	r1, sp, #4
 8019c98:	4640      	mov	r0, r8
 8019c9a:	ec55 4b10 	vmov	r4, r5, d0
 8019c9e:	f7ff ff47 	bl	8019b30 <__b2d>
 8019ca2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019ca6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019caa:	eba3 0c02 	sub.w	ip, r3, r2
 8019cae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019cb2:	1a9b      	subs	r3, r3, r2
 8019cb4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019cb8:	ec51 0b10 	vmov	r0, r1, d0
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	bfd6      	itet	le
 8019cc0:	460a      	movle	r2, r1
 8019cc2:	462a      	movgt	r2, r5
 8019cc4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019cc8:	468b      	mov	fp, r1
 8019cca:	462f      	mov	r7, r5
 8019ccc:	bfd4      	ite	le
 8019cce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019cd2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019cd6:	4620      	mov	r0, r4
 8019cd8:	ee10 2a10 	vmov	r2, s0
 8019cdc:	465b      	mov	r3, fp
 8019cde:	4639      	mov	r1, r7
 8019ce0:	f7e6 fdc4 	bl	800086c <__aeabi_ddiv>
 8019ce4:	ec41 0b10 	vmov	d0, r0, r1
 8019ce8:	b003      	add	sp, #12
 8019cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019cee <__copybits>:
 8019cee:	3901      	subs	r1, #1
 8019cf0:	b570      	push	{r4, r5, r6, lr}
 8019cf2:	1149      	asrs	r1, r1, #5
 8019cf4:	6914      	ldr	r4, [r2, #16]
 8019cf6:	3101      	adds	r1, #1
 8019cf8:	f102 0314 	add.w	r3, r2, #20
 8019cfc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019d00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019d04:	1f05      	subs	r5, r0, #4
 8019d06:	42a3      	cmp	r3, r4
 8019d08:	d30c      	bcc.n	8019d24 <__copybits+0x36>
 8019d0a:	1aa3      	subs	r3, r4, r2
 8019d0c:	3b11      	subs	r3, #17
 8019d0e:	f023 0303 	bic.w	r3, r3, #3
 8019d12:	3211      	adds	r2, #17
 8019d14:	42a2      	cmp	r2, r4
 8019d16:	bf88      	it	hi
 8019d18:	2300      	movhi	r3, #0
 8019d1a:	4418      	add	r0, r3
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	4288      	cmp	r0, r1
 8019d20:	d305      	bcc.n	8019d2e <__copybits+0x40>
 8019d22:	bd70      	pop	{r4, r5, r6, pc}
 8019d24:	f853 6b04 	ldr.w	r6, [r3], #4
 8019d28:	f845 6f04 	str.w	r6, [r5, #4]!
 8019d2c:	e7eb      	b.n	8019d06 <__copybits+0x18>
 8019d2e:	f840 3b04 	str.w	r3, [r0], #4
 8019d32:	e7f4      	b.n	8019d1e <__copybits+0x30>

08019d34 <__any_on>:
 8019d34:	f100 0214 	add.w	r2, r0, #20
 8019d38:	6900      	ldr	r0, [r0, #16]
 8019d3a:	114b      	asrs	r3, r1, #5
 8019d3c:	4298      	cmp	r0, r3
 8019d3e:	b510      	push	{r4, lr}
 8019d40:	db11      	blt.n	8019d66 <__any_on+0x32>
 8019d42:	dd0a      	ble.n	8019d5a <__any_on+0x26>
 8019d44:	f011 011f 	ands.w	r1, r1, #31
 8019d48:	d007      	beq.n	8019d5a <__any_on+0x26>
 8019d4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019d4e:	fa24 f001 	lsr.w	r0, r4, r1
 8019d52:	fa00 f101 	lsl.w	r1, r0, r1
 8019d56:	428c      	cmp	r4, r1
 8019d58:	d10b      	bne.n	8019d72 <__any_on+0x3e>
 8019d5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019d5e:	4293      	cmp	r3, r2
 8019d60:	d803      	bhi.n	8019d6a <__any_on+0x36>
 8019d62:	2000      	movs	r0, #0
 8019d64:	bd10      	pop	{r4, pc}
 8019d66:	4603      	mov	r3, r0
 8019d68:	e7f7      	b.n	8019d5a <__any_on+0x26>
 8019d6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019d6e:	2900      	cmp	r1, #0
 8019d70:	d0f5      	beq.n	8019d5e <__any_on+0x2a>
 8019d72:	2001      	movs	r0, #1
 8019d74:	e7f6      	b.n	8019d64 <__any_on+0x30>

08019d76 <_calloc_r>:
 8019d76:	b513      	push	{r0, r1, r4, lr}
 8019d78:	434a      	muls	r2, r1
 8019d7a:	4611      	mov	r1, r2
 8019d7c:	9201      	str	r2, [sp, #4]
 8019d7e:	f7fb fea5 	bl	8015acc <_malloc_r>
 8019d82:	4604      	mov	r4, r0
 8019d84:	b118      	cbz	r0, 8019d8e <_calloc_r+0x18>
 8019d86:	9a01      	ldr	r2, [sp, #4]
 8019d88:	2100      	movs	r1, #0
 8019d8a:	f7fb fe47 	bl	8015a1c <memset>
 8019d8e:	4620      	mov	r0, r4
 8019d90:	b002      	add	sp, #8
 8019d92:	bd10      	pop	{r4, pc}

08019d94 <_realloc_r>:
 8019d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d96:	4607      	mov	r7, r0
 8019d98:	4614      	mov	r4, r2
 8019d9a:	460e      	mov	r6, r1
 8019d9c:	b921      	cbnz	r1, 8019da8 <_realloc_r+0x14>
 8019d9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019da2:	4611      	mov	r1, r2
 8019da4:	f7fb be92 	b.w	8015acc <_malloc_r>
 8019da8:	b922      	cbnz	r2, 8019db4 <_realloc_r+0x20>
 8019daa:	f7fb fe3f 	bl	8015a2c <_free_r>
 8019dae:	4625      	mov	r5, r4
 8019db0:	4628      	mov	r0, r5
 8019db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019db4:	f000 fe9e 	bl	801aaf4 <_malloc_usable_size_r>
 8019db8:	42a0      	cmp	r0, r4
 8019dba:	d20f      	bcs.n	8019ddc <_realloc_r+0x48>
 8019dbc:	4621      	mov	r1, r4
 8019dbe:	4638      	mov	r0, r7
 8019dc0:	f7fb fe84 	bl	8015acc <_malloc_r>
 8019dc4:	4605      	mov	r5, r0
 8019dc6:	2800      	cmp	r0, #0
 8019dc8:	d0f2      	beq.n	8019db0 <_realloc_r+0x1c>
 8019dca:	4631      	mov	r1, r6
 8019dcc:	4622      	mov	r2, r4
 8019dce:	f7fb fdfd 	bl	80159cc <memcpy>
 8019dd2:	4631      	mov	r1, r6
 8019dd4:	4638      	mov	r0, r7
 8019dd6:	f7fb fe29 	bl	8015a2c <_free_r>
 8019dda:	e7e9      	b.n	8019db0 <_realloc_r+0x1c>
 8019ddc:	4635      	mov	r5, r6
 8019dde:	e7e7      	b.n	8019db0 <_realloc_r+0x1c>

08019de0 <__ssputs_r>:
 8019de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019de4:	688e      	ldr	r6, [r1, #8]
 8019de6:	429e      	cmp	r6, r3
 8019de8:	4682      	mov	sl, r0
 8019dea:	460c      	mov	r4, r1
 8019dec:	4690      	mov	r8, r2
 8019dee:	461f      	mov	r7, r3
 8019df0:	d838      	bhi.n	8019e64 <__ssputs_r+0x84>
 8019df2:	898a      	ldrh	r2, [r1, #12]
 8019df4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019df8:	d032      	beq.n	8019e60 <__ssputs_r+0x80>
 8019dfa:	6825      	ldr	r5, [r4, #0]
 8019dfc:	6909      	ldr	r1, [r1, #16]
 8019dfe:	eba5 0901 	sub.w	r9, r5, r1
 8019e02:	6965      	ldr	r5, [r4, #20]
 8019e04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019e08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019e0c:	3301      	adds	r3, #1
 8019e0e:	444b      	add	r3, r9
 8019e10:	106d      	asrs	r5, r5, #1
 8019e12:	429d      	cmp	r5, r3
 8019e14:	bf38      	it	cc
 8019e16:	461d      	movcc	r5, r3
 8019e18:	0553      	lsls	r3, r2, #21
 8019e1a:	d531      	bpl.n	8019e80 <__ssputs_r+0xa0>
 8019e1c:	4629      	mov	r1, r5
 8019e1e:	f7fb fe55 	bl	8015acc <_malloc_r>
 8019e22:	4606      	mov	r6, r0
 8019e24:	b950      	cbnz	r0, 8019e3c <__ssputs_r+0x5c>
 8019e26:	230c      	movs	r3, #12
 8019e28:	f8ca 3000 	str.w	r3, [sl]
 8019e2c:	89a3      	ldrh	r3, [r4, #12]
 8019e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e32:	81a3      	strh	r3, [r4, #12]
 8019e34:	f04f 30ff 	mov.w	r0, #4294967295
 8019e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e3c:	6921      	ldr	r1, [r4, #16]
 8019e3e:	464a      	mov	r2, r9
 8019e40:	f7fb fdc4 	bl	80159cc <memcpy>
 8019e44:	89a3      	ldrh	r3, [r4, #12]
 8019e46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019e4e:	81a3      	strh	r3, [r4, #12]
 8019e50:	6126      	str	r6, [r4, #16]
 8019e52:	6165      	str	r5, [r4, #20]
 8019e54:	444e      	add	r6, r9
 8019e56:	eba5 0509 	sub.w	r5, r5, r9
 8019e5a:	6026      	str	r6, [r4, #0]
 8019e5c:	60a5      	str	r5, [r4, #8]
 8019e5e:	463e      	mov	r6, r7
 8019e60:	42be      	cmp	r6, r7
 8019e62:	d900      	bls.n	8019e66 <__ssputs_r+0x86>
 8019e64:	463e      	mov	r6, r7
 8019e66:	4632      	mov	r2, r6
 8019e68:	6820      	ldr	r0, [r4, #0]
 8019e6a:	4641      	mov	r1, r8
 8019e6c:	f7fb fdbc 	bl	80159e8 <memmove>
 8019e70:	68a3      	ldr	r3, [r4, #8]
 8019e72:	6822      	ldr	r2, [r4, #0]
 8019e74:	1b9b      	subs	r3, r3, r6
 8019e76:	4432      	add	r2, r6
 8019e78:	60a3      	str	r3, [r4, #8]
 8019e7a:	6022      	str	r2, [r4, #0]
 8019e7c:	2000      	movs	r0, #0
 8019e7e:	e7db      	b.n	8019e38 <__ssputs_r+0x58>
 8019e80:	462a      	mov	r2, r5
 8019e82:	f7ff ff87 	bl	8019d94 <_realloc_r>
 8019e86:	4606      	mov	r6, r0
 8019e88:	2800      	cmp	r0, #0
 8019e8a:	d1e1      	bne.n	8019e50 <__ssputs_r+0x70>
 8019e8c:	6921      	ldr	r1, [r4, #16]
 8019e8e:	4650      	mov	r0, sl
 8019e90:	f7fb fdcc 	bl	8015a2c <_free_r>
 8019e94:	e7c7      	b.n	8019e26 <__ssputs_r+0x46>
	...

08019e98 <_svfiprintf_r>:
 8019e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e9c:	4698      	mov	r8, r3
 8019e9e:	898b      	ldrh	r3, [r1, #12]
 8019ea0:	061b      	lsls	r3, r3, #24
 8019ea2:	b09d      	sub	sp, #116	; 0x74
 8019ea4:	4607      	mov	r7, r0
 8019ea6:	460d      	mov	r5, r1
 8019ea8:	4614      	mov	r4, r2
 8019eaa:	d50e      	bpl.n	8019eca <_svfiprintf_r+0x32>
 8019eac:	690b      	ldr	r3, [r1, #16]
 8019eae:	b963      	cbnz	r3, 8019eca <_svfiprintf_r+0x32>
 8019eb0:	2140      	movs	r1, #64	; 0x40
 8019eb2:	f7fb fe0b 	bl	8015acc <_malloc_r>
 8019eb6:	6028      	str	r0, [r5, #0]
 8019eb8:	6128      	str	r0, [r5, #16]
 8019eba:	b920      	cbnz	r0, 8019ec6 <_svfiprintf_r+0x2e>
 8019ebc:	230c      	movs	r3, #12
 8019ebe:	603b      	str	r3, [r7, #0]
 8019ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ec4:	e0d1      	b.n	801a06a <_svfiprintf_r+0x1d2>
 8019ec6:	2340      	movs	r3, #64	; 0x40
 8019ec8:	616b      	str	r3, [r5, #20]
 8019eca:	2300      	movs	r3, #0
 8019ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8019ece:	2320      	movs	r3, #32
 8019ed0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8019ed8:	2330      	movs	r3, #48	; 0x30
 8019eda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a084 <_svfiprintf_r+0x1ec>
 8019ede:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ee2:	f04f 0901 	mov.w	r9, #1
 8019ee6:	4623      	mov	r3, r4
 8019ee8:	469a      	mov	sl, r3
 8019eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019eee:	b10a      	cbz	r2, 8019ef4 <_svfiprintf_r+0x5c>
 8019ef0:	2a25      	cmp	r2, #37	; 0x25
 8019ef2:	d1f9      	bne.n	8019ee8 <_svfiprintf_r+0x50>
 8019ef4:	ebba 0b04 	subs.w	fp, sl, r4
 8019ef8:	d00b      	beq.n	8019f12 <_svfiprintf_r+0x7a>
 8019efa:	465b      	mov	r3, fp
 8019efc:	4622      	mov	r2, r4
 8019efe:	4629      	mov	r1, r5
 8019f00:	4638      	mov	r0, r7
 8019f02:	f7ff ff6d 	bl	8019de0 <__ssputs_r>
 8019f06:	3001      	adds	r0, #1
 8019f08:	f000 80aa 	beq.w	801a060 <_svfiprintf_r+0x1c8>
 8019f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f0e:	445a      	add	r2, fp
 8019f10:	9209      	str	r2, [sp, #36]	; 0x24
 8019f12:	f89a 3000 	ldrb.w	r3, [sl]
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	f000 80a2 	beq.w	801a060 <_svfiprintf_r+0x1c8>
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8019f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f26:	f10a 0a01 	add.w	sl, sl, #1
 8019f2a:	9304      	str	r3, [sp, #16]
 8019f2c:	9307      	str	r3, [sp, #28]
 8019f2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019f32:	931a      	str	r3, [sp, #104]	; 0x68
 8019f34:	4654      	mov	r4, sl
 8019f36:	2205      	movs	r2, #5
 8019f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f3c:	4851      	ldr	r0, [pc, #324]	; (801a084 <_svfiprintf_r+0x1ec>)
 8019f3e:	f7e6 f95f 	bl	8000200 <memchr>
 8019f42:	9a04      	ldr	r2, [sp, #16]
 8019f44:	b9d8      	cbnz	r0, 8019f7e <_svfiprintf_r+0xe6>
 8019f46:	06d0      	lsls	r0, r2, #27
 8019f48:	bf44      	itt	mi
 8019f4a:	2320      	movmi	r3, #32
 8019f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f50:	0711      	lsls	r1, r2, #28
 8019f52:	bf44      	itt	mi
 8019f54:	232b      	movmi	r3, #43	; 0x2b
 8019f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8019f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8019f60:	d015      	beq.n	8019f8e <_svfiprintf_r+0xf6>
 8019f62:	9a07      	ldr	r2, [sp, #28]
 8019f64:	4654      	mov	r4, sl
 8019f66:	2000      	movs	r0, #0
 8019f68:	f04f 0c0a 	mov.w	ip, #10
 8019f6c:	4621      	mov	r1, r4
 8019f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019f72:	3b30      	subs	r3, #48	; 0x30
 8019f74:	2b09      	cmp	r3, #9
 8019f76:	d94e      	bls.n	801a016 <_svfiprintf_r+0x17e>
 8019f78:	b1b0      	cbz	r0, 8019fa8 <_svfiprintf_r+0x110>
 8019f7a:	9207      	str	r2, [sp, #28]
 8019f7c:	e014      	b.n	8019fa8 <_svfiprintf_r+0x110>
 8019f7e:	eba0 0308 	sub.w	r3, r0, r8
 8019f82:	fa09 f303 	lsl.w	r3, r9, r3
 8019f86:	4313      	orrs	r3, r2
 8019f88:	9304      	str	r3, [sp, #16]
 8019f8a:	46a2      	mov	sl, r4
 8019f8c:	e7d2      	b.n	8019f34 <_svfiprintf_r+0x9c>
 8019f8e:	9b03      	ldr	r3, [sp, #12]
 8019f90:	1d19      	adds	r1, r3, #4
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	9103      	str	r1, [sp, #12]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	bfbb      	ittet	lt
 8019f9a:	425b      	neglt	r3, r3
 8019f9c:	f042 0202 	orrlt.w	r2, r2, #2
 8019fa0:	9307      	strge	r3, [sp, #28]
 8019fa2:	9307      	strlt	r3, [sp, #28]
 8019fa4:	bfb8      	it	lt
 8019fa6:	9204      	strlt	r2, [sp, #16]
 8019fa8:	7823      	ldrb	r3, [r4, #0]
 8019faa:	2b2e      	cmp	r3, #46	; 0x2e
 8019fac:	d10c      	bne.n	8019fc8 <_svfiprintf_r+0x130>
 8019fae:	7863      	ldrb	r3, [r4, #1]
 8019fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8019fb2:	d135      	bne.n	801a020 <_svfiprintf_r+0x188>
 8019fb4:	9b03      	ldr	r3, [sp, #12]
 8019fb6:	1d1a      	adds	r2, r3, #4
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	9203      	str	r2, [sp, #12]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	bfb8      	it	lt
 8019fc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8019fc4:	3402      	adds	r4, #2
 8019fc6:	9305      	str	r3, [sp, #20]
 8019fc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a094 <_svfiprintf_r+0x1fc>
 8019fcc:	7821      	ldrb	r1, [r4, #0]
 8019fce:	2203      	movs	r2, #3
 8019fd0:	4650      	mov	r0, sl
 8019fd2:	f7e6 f915 	bl	8000200 <memchr>
 8019fd6:	b140      	cbz	r0, 8019fea <_svfiprintf_r+0x152>
 8019fd8:	2340      	movs	r3, #64	; 0x40
 8019fda:	eba0 000a 	sub.w	r0, r0, sl
 8019fde:	fa03 f000 	lsl.w	r0, r3, r0
 8019fe2:	9b04      	ldr	r3, [sp, #16]
 8019fe4:	4303      	orrs	r3, r0
 8019fe6:	3401      	adds	r4, #1
 8019fe8:	9304      	str	r3, [sp, #16]
 8019fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fee:	4826      	ldr	r0, [pc, #152]	; (801a088 <_svfiprintf_r+0x1f0>)
 8019ff0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019ff4:	2206      	movs	r2, #6
 8019ff6:	f7e6 f903 	bl	8000200 <memchr>
 8019ffa:	2800      	cmp	r0, #0
 8019ffc:	d038      	beq.n	801a070 <_svfiprintf_r+0x1d8>
 8019ffe:	4b23      	ldr	r3, [pc, #140]	; (801a08c <_svfiprintf_r+0x1f4>)
 801a000:	bb1b      	cbnz	r3, 801a04a <_svfiprintf_r+0x1b2>
 801a002:	9b03      	ldr	r3, [sp, #12]
 801a004:	3307      	adds	r3, #7
 801a006:	f023 0307 	bic.w	r3, r3, #7
 801a00a:	3308      	adds	r3, #8
 801a00c:	9303      	str	r3, [sp, #12]
 801a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a010:	4433      	add	r3, r6
 801a012:	9309      	str	r3, [sp, #36]	; 0x24
 801a014:	e767      	b.n	8019ee6 <_svfiprintf_r+0x4e>
 801a016:	fb0c 3202 	mla	r2, ip, r2, r3
 801a01a:	460c      	mov	r4, r1
 801a01c:	2001      	movs	r0, #1
 801a01e:	e7a5      	b.n	8019f6c <_svfiprintf_r+0xd4>
 801a020:	2300      	movs	r3, #0
 801a022:	3401      	adds	r4, #1
 801a024:	9305      	str	r3, [sp, #20]
 801a026:	4619      	mov	r1, r3
 801a028:	f04f 0c0a 	mov.w	ip, #10
 801a02c:	4620      	mov	r0, r4
 801a02e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a032:	3a30      	subs	r2, #48	; 0x30
 801a034:	2a09      	cmp	r2, #9
 801a036:	d903      	bls.n	801a040 <_svfiprintf_r+0x1a8>
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d0c5      	beq.n	8019fc8 <_svfiprintf_r+0x130>
 801a03c:	9105      	str	r1, [sp, #20]
 801a03e:	e7c3      	b.n	8019fc8 <_svfiprintf_r+0x130>
 801a040:	fb0c 2101 	mla	r1, ip, r1, r2
 801a044:	4604      	mov	r4, r0
 801a046:	2301      	movs	r3, #1
 801a048:	e7f0      	b.n	801a02c <_svfiprintf_r+0x194>
 801a04a:	ab03      	add	r3, sp, #12
 801a04c:	9300      	str	r3, [sp, #0]
 801a04e:	462a      	mov	r2, r5
 801a050:	4b0f      	ldr	r3, [pc, #60]	; (801a090 <_svfiprintf_r+0x1f8>)
 801a052:	a904      	add	r1, sp, #16
 801a054:	4638      	mov	r0, r7
 801a056:	f7fb fe33 	bl	8015cc0 <_printf_float>
 801a05a:	1c42      	adds	r2, r0, #1
 801a05c:	4606      	mov	r6, r0
 801a05e:	d1d6      	bne.n	801a00e <_svfiprintf_r+0x176>
 801a060:	89ab      	ldrh	r3, [r5, #12]
 801a062:	065b      	lsls	r3, r3, #25
 801a064:	f53f af2c 	bmi.w	8019ec0 <_svfiprintf_r+0x28>
 801a068:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a06a:	b01d      	add	sp, #116	; 0x74
 801a06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a070:	ab03      	add	r3, sp, #12
 801a072:	9300      	str	r3, [sp, #0]
 801a074:	462a      	mov	r2, r5
 801a076:	4b06      	ldr	r3, [pc, #24]	; (801a090 <_svfiprintf_r+0x1f8>)
 801a078:	a904      	add	r1, sp, #16
 801a07a:	4638      	mov	r0, r7
 801a07c:	f7fc f8c4 	bl	8016208 <_printf_i>
 801a080:	e7eb      	b.n	801a05a <_svfiprintf_r+0x1c2>
 801a082:	bf00      	nop
 801a084:	0801c374 	.word	0x0801c374
 801a088:	0801c37e 	.word	0x0801c37e
 801a08c:	08015cc1 	.word	0x08015cc1
 801a090:	08019de1 	.word	0x08019de1
 801a094:	0801c37a 	.word	0x0801c37a

0801a098 <_sungetc_r>:
 801a098:	b538      	push	{r3, r4, r5, lr}
 801a09a:	1c4b      	adds	r3, r1, #1
 801a09c:	4614      	mov	r4, r2
 801a09e:	d103      	bne.n	801a0a8 <_sungetc_r+0x10>
 801a0a0:	f04f 35ff 	mov.w	r5, #4294967295
 801a0a4:	4628      	mov	r0, r5
 801a0a6:	bd38      	pop	{r3, r4, r5, pc}
 801a0a8:	8993      	ldrh	r3, [r2, #12]
 801a0aa:	f023 0320 	bic.w	r3, r3, #32
 801a0ae:	8193      	strh	r3, [r2, #12]
 801a0b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a0b2:	6852      	ldr	r2, [r2, #4]
 801a0b4:	b2cd      	uxtb	r5, r1
 801a0b6:	b18b      	cbz	r3, 801a0dc <_sungetc_r+0x44>
 801a0b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a0ba:	4293      	cmp	r3, r2
 801a0bc:	dd08      	ble.n	801a0d0 <_sungetc_r+0x38>
 801a0be:	6823      	ldr	r3, [r4, #0]
 801a0c0:	1e5a      	subs	r2, r3, #1
 801a0c2:	6022      	str	r2, [r4, #0]
 801a0c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 801a0c8:	6863      	ldr	r3, [r4, #4]
 801a0ca:	3301      	adds	r3, #1
 801a0cc:	6063      	str	r3, [r4, #4]
 801a0ce:	e7e9      	b.n	801a0a4 <_sungetc_r+0xc>
 801a0d0:	4621      	mov	r1, r4
 801a0d2:	f000 fca5 	bl	801aa20 <__submore>
 801a0d6:	2800      	cmp	r0, #0
 801a0d8:	d0f1      	beq.n	801a0be <_sungetc_r+0x26>
 801a0da:	e7e1      	b.n	801a0a0 <_sungetc_r+0x8>
 801a0dc:	6921      	ldr	r1, [r4, #16]
 801a0de:	6823      	ldr	r3, [r4, #0]
 801a0e0:	b151      	cbz	r1, 801a0f8 <_sungetc_r+0x60>
 801a0e2:	4299      	cmp	r1, r3
 801a0e4:	d208      	bcs.n	801a0f8 <_sungetc_r+0x60>
 801a0e6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801a0ea:	42a9      	cmp	r1, r5
 801a0ec:	d104      	bne.n	801a0f8 <_sungetc_r+0x60>
 801a0ee:	3b01      	subs	r3, #1
 801a0f0:	3201      	adds	r2, #1
 801a0f2:	6023      	str	r3, [r4, #0]
 801a0f4:	6062      	str	r2, [r4, #4]
 801a0f6:	e7d5      	b.n	801a0a4 <_sungetc_r+0xc>
 801a0f8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801a0fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a100:	6363      	str	r3, [r4, #52]	; 0x34
 801a102:	2303      	movs	r3, #3
 801a104:	63a3      	str	r3, [r4, #56]	; 0x38
 801a106:	4623      	mov	r3, r4
 801a108:	f803 5f46 	strb.w	r5, [r3, #70]!
 801a10c:	6023      	str	r3, [r4, #0]
 801a10e:	2301      	movs	r3, #1
 801a110:	e7dc      	b.n	801a0cc <_sungetc_r+0x34>

0801a112 <__ssrefill_r>:
 801a112:	b510      	push	{r4, lr}
 801a114:	460c      	mov	r4, r1
 801a116:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801a118:	b169      	cbz	r1, 801a136 <__ssrefill_r+0x24>
 801a11a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a11e:	4299      	cmp	r1, r3
 801a120:	d001      	beq.n	801a126 <__ssrefill_r+0x14>
 801a122:	f7fb fc83 	bl	8015a2c <_free_r>
 801a126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a128:	6063      	str	r3, [r4, #4]
 801a12a:	2000      	movs	r0, #0
 801a12c:	6360      	str	r0, [r4, #52]	; 0x34
 801a12e:	b113      	cbz	r3, 801a136 <__ssrefill_r+0x24>
 801a130:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a132:	6023      	str	r3, [r4, #0]
 801a134:	bd10      	pop	{r4, pc}
 801a136:	6923      	ldr	r3, [r4, #16]
 801a138:	6023      	str	r3, [r4, #0]
 801a13a:	2300      	movs	r3, #0
 801a13c:	6063      	str	r3, [r4, #4]
 801a13e:	89a3      	ldrh	r3, [r4, #12]
 801a140:	f043 0320 	orr.w	r3, r3, #32
 801a144:	81a3      	strh	r3, [r4, #12]
 801a146:	f04f 30ff 	mov.w	r0, #4294967295
 801a14a:	e7f3      	b.n	801a134 <__ssrefill_r+0x22>

0801a14c <__ssvfiscanf_r>:
 801a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a150:	460c      	mov	r4, r1
 801a152:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801a156:	2100      	movs	r1, #0
 801a158:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801a15c:	49b2      	ldr	r1, [pc, #712]	; (801a428 <__ssvfiscanf_r+0x2dc>)
 801a15e:	91a0      	str	r1, [sp, #640]	; 0x280
 801a160:	f10d 0804 	add.w	r8, sp, #4
 801a164:	49b1      	ldr	r1, [pc, #708]	; (801a42c <__ssvfiscanf_r+0x2e0>)
 801a166:	4fb2      	ldr	r7, [pc, #712]	; (801a430 <__ssvfiscanf_r+0x2e4>)
 801a168:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801a434 <__ssvfiscanf_r+0x2e8>
 801a16c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801a170:	4606      	mov	r6, r0
 801a172:	91a1      	str	r1, [sp, #644]	; 0x284
 801a174:	9300      	str	r3, [sp, #0]
 801a176:	f892 a000 	ldrb.w	sl, [r2]
 801a17a:	f1ba 0f00 	cmp.w	sl, #0
 801a17e:	f000 8151 	beq.w	801a424 <__ssvfiscanf_r+0x2d8>
 801a182:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801a186:	f013 0308 	ands.w	r3, r3, #8
 801a18a:	f102 0501 	add.w	r5, r2, #1
 801a18e:	d019      	beq.n	801a1c4 <__ssvfiscanf_r+0x78>
 801a190:	6863      	ldr	r3, [r4, #4]
 801a192:	2b00      	cmp	r3, #0
 801a194:	dd0f      	ble.n	801a1b6 <__ssvfiscanf_r+0x6a>
 801a196:	6823      	ldr	r3, [r4, #0]
 801a198:	781a      	ldrb	r2, [r3, #0]
 801a19a:	5cba      	ldrb	r2, [r7, r2]
 801a19c:	0712      	lsls	r2, r2, #28
 801a19e:	d401      	bmi.n	801a1a4 <__ssvfiscanf_r+0x58>
 801a1a0:	462a      	mov	r2, r5
 801a1a2:	e7e8      	b.n	801a176 <__ssvfiscanf_r+0x2a>
 801a1a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a1a6:	3201      	adds	r2, #1
 801a1a8:	9245      	str	r2, [sp, #276]	; 0x114
 801a1aa:	6862      	ldr	r2, [r4, #4]
 801a1ac:	3301      	adds	r3, #1
 801a1ae:	3a01      	subs	r2, #1
 801a1b0:	6062      	str	r2, [r4, #4]
 801a1b2:	6023      	str	r3, [r4, #0]
 801a1b4:	e7ec      	b.n	801a190 <__ssvfiscanf_r+0x44>
 801a1b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a1b8:	4621      	mov	r1, r4
 801a1ba:	4630      	mov	r0, r6
 801a1bc:	4798      	blx	r3
 801a1be:	2800      	cmp	r0, #0
 801a1c0:	d0e9      	beq.n	801a196 <__ssvfiscanf_r+0x4a>
 801a1c2:	e7ed      	b.n	801a1a0 <__ssvfiscanf_r+0x54>
 801a1c4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801a1c8:	f040 8083 	bne.w	801a2d2 <__ssvfiscanf_r+0x186>
 801a1cc:	9341      	str	r3, [sp, #260]	; 0x104
 801a1ce:	9343      	str	r3, [sp, #268]	; 0x10c
 801a1d0:	7853      	ldrb	r3, [r2, #1]
 801a1d2:	2b2a      	cmp	r3, #42	; 0x2a
 801a1d4:	bf02      	ittt	eq
 801a1d6:	2310      	moveq	r3, #16
 801a1d8:	1c95      	addeq	r5, r2, #2
 801a1da:	9341      	streq	r3, [sp, #260]	; 0x104
 801a1dc:	220a      	movs	r2, #10
 801a1de:	46ab      	mov	fp, r5
 801a1e0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801a1e4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801a1e8:	2b09      	cmp	r3, #9
 801a1ea:	d91d      	bls.n	801a228 <__ssvfiscanf_r+0xdc>
 801a1ec:	4891      	ldr	r0, [pc, #580]	; (801a434 <__ssvfiscanf_r+0x2e8>)
 801a1ee:	2203      	movs	r2, #3
 801a1f0:	f7e6 f806 	bl	8000200 <memchr>
 801a1f4:	b140      	cbz	r0, 801a208 <__ssvfiscanf_r+0xbc>
 801a1f6:	2301      	movs	r3, #1
 801a1f8:	eba0 0009 	sub.w	r0, r0, r9
 801a1fc:	fa03 f000 	lsl.w	r0, r3, r0
 801a200:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a202:	4318      	orrs	r0, r3
 801a204:	9041      	str	r0, [sp, #260]	; 0x104
 801a206:	465d      	mov	r5, fp
 801a208:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a20c:	2b78      	cmp	r3, #120	; 0x78
 801a20e:	d806      	bhi.n	801a21e <__ssvfiscanf_r+0xd2>
 801a210:	2b57      	cmp	r3, #87	; 0x57
 801a212:	d810      	bhi.n	801a236 <__ssvfiscanf_r+0xea>
 801a214:	2b25      	cmp	r3, #37	; 0x25
 801a216:	d05c      	beq.n	801a2d2 <__ssvfiscanf_r+0x186>
 801a218:	d856      	bhi.n	801a2c8 <__ssvfiscanf_r+0x17c>
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d074      	beq.n	801a308 <__ssvfiscanf_r+0x1bc>
 801a21e:	2303      	movs	r3, #3
 801a220:	9347      	str	r3, [sp, #284]	; 0x11c
 801a222:	230a      	movs	r3, #10
 801a224:	9342      	str	r3, [sp, #264]	; 0x108
 801a226:	e081      	b.n	801a32c <__ssvfiscanf_r+0x1e0>
 801a228:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801a22a:	fb02 1303 	mla	r3, r2, r3, r1
 801a22e:	3b30      	subs	r3, #48	; 0x30
 801a230:	9343      	str	r3, [sp, #268]	; 0x10c
 801a232:	465d      	mov	r5, fp
 801a234:	e7d3      	b.n	801a1de <__ssvfiscanf_r+0x92>
 801a236:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801a23a:	2a20      	cmp	r2, #32
 801a23c:	d8ef      	bhi.n	801a21e <__ssvfiscanf_r+0xd2>
 801a23e:	a101      	add	r1, pc, #4	; (adr r1, 801a244 <__ssvfiscanf_r+0xf8>)
 801a240:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a244:	0801a317 	.word	0x0801a317
 801a248:	0801a21f 	.word	0x0801a21f
 801a24c:	0801a21f 	.word	0x0801a21f
 801a250:	0801a375 	.word	0x0801a375
 801a254:	0801a21f 	.word	0x0801a21f
 801a258:	0801a21f 	.word	0x0801a21f
 801a25c:	0801a21f 	.word	0x0801a21f
 801a260:	0801a21f 	.word	0x0801a21f
 801a264:	0801a21f 	.word	0x0801a21f
 801a268:	0801a21f 	.word	0x0801a21f
 801a26c:	0801a21f 	.word	0x0801a21f
 801a270:	0801a38b 	.word	0x0801a38b
 801a274:	0801a361 	.word	0x0801a361
 801a278:	0801a2cf 	.word	0x0801a2cf
 801a27c:	0801a2cf 	.word	0x0801a2cf
 801a280:	0801a2cf 	.word	0x0801a2cf
 801a284:	0801a21f 	.word	0x0801a21f
 801a288:	0801a365 	.word	0x0801a365
 801a28c:	0801a21f 	.word	0x0801a21f
 801a290:	0801a21f 	.word	0x0801a21f
 801a294:	0801a21f 	.word	0x0801a21f
 801a298:	0801a21f 	.word	0x0801a21f
 801a29c:	0801a39b 	.word	0x0801a39b
 801a2a0:	0801a36d 	.word	0x0801a36d
 801a2a4:	0801a30f 	.word	0x0801a30f
 801a2a8:	0801a21f 	.word	0x0801a21f
 801a2ac:	0801a21f 	.word	0x0801a21f
 801a2b0:	0801a397 	.word	0x0801a397
 801a2b4:	0801a21f 	.word	0x0801a21f
 801a2b8:	0801a361 	.word	0x0801a361
 801a2bc:	0801a21f 	.word	0x0801a21f
 801a2c0:	0801a21f 	.word	0x0801a21f
 801a2c4:	0801a317 	.word	0x0801a317
 801a2c8:	3b45      	subs	r3, #69	; 0x45
 801a2ca:	2b02      	cmp	r3, #2
 801a2cc:	d8a7      	bhi.n	801a21e <__ssvfiscanf_r+0xd2>
 801a2ce:	2305      	movs	r3, #5
 801a2d0:	e02b      	b.n	801a32a <__ssvfiscanf_r+0x1de>
 801a2d2:	6863      	ldr	r3, [r4, #4]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	dd0d      	ble.n	801a2f4 <__ssvfiscanf_r+0x1a8>
 801a2d8:	6823      	ldr	r3, [r4, #0]
 801a2da:	781a      	ldrb	r2, [r3, #0]
 801a2dc:	4552      	cmp	r2, sl
 801a2de:	f040 80a1 	bne.w	801a424 <__ssvfiscanf_r+0x2d8>
 801a2e2:	3301      	adds	r3, #1
 801a2e4:	6862      	ldr	r2, [r4, #4]
 801a2e6:	6023      	str	r3, [r4, #0]
 801a2e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801a2ea:	3a01      	subs	r2, #1
 801a2ec:	3301      	adds	r3, #1
 801a2ee:	6062      	str	r2, [r4, #4]
 801a2f0:	9345      	str	r3, [sp, #276]	; 0x114
 801a2f2:	e755      	b.n	801a1a0 <__ssvfiscanf_r+0x54>
 801a2f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a2f6:	4621      	mov	r1, r4
 801a2f8:	4630      	mov	r0, r6
 801a2fa:	4798      	blx	r3
 801a2fc:	2800      	cmp	r0, #0
 801a2fe:	d0eb      	beq.n	801a2d8 <__ssvfiscanf_r+0x18c>
 801a300:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a302:	2800      	cmp	r0, #0
 801a304:	f040 8084 	bne.w	801a410 <__ssvfiscanf_r+0x2c4>
 801a308:	f04f 30ff 	mov.w	r0, #4294967295
 801a30c:	e086      	b.n	801a41c <__ssvfiscanf_r+0x2d0>
 801a30e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a310:	f042 0220 	orr.w	r2, r2, #32
 801a314:	9241      	str	r2, [sp, #260]	; 0x104
 801a316:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801a318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a31c:	9241      	str	r2, [sp, #260]	; 0x104
 801a31e:	2210      	movs	r2, #16
 801a320:	2b6f      	cmp	r3, #111	; 0x6f
 801a322:	9242      	str	r2, [sp, #264]	; 0x108
 801a324:	bf34      	ite	cc
 801a326:	2303      	movcc	r3, #3
 801a328:	2304      	movcs	r3, #4
 801a32a:	9347      	str	r3, [sp, #284]	; 0x11c
 801a32c:	6863      	ldr	r3, [r4, #4]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	dd41      	ble.n	801a3b6 <__ssvfiscanf_r+0x26a>
 801a332:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a334:	0659      	lsls	r1, r3, #25
 801a336:	d404      	bmi.n	801a342 <__ssvfiscanf_r+0x1f6>
 801a338:	6823      	ldr	r3, [r4, #0]
 801a33a:	781a      	ldrb	r2, [r3, #0]
 801a33c:	5cba      	ldrb	r2, [r7, r2]
 801a33e:	0712      	lsls	r2, r2, #28
 801a340:	d440      	bmi.n	801a3c4 <__ssvfiscanf_r+0x278>
 801a342:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801a344:	2b02      	cmp	r3, #2
 801a346:	dc4f      	bgt.n	801a3e8 <__ssvfiscanf_r+0x29c>
 801a348:	466b      	mov	r3, sp
 801a34a:	4622      	mov	r2, r4
 801a34c:	a941      	add	r1, sp, #260	; 0x104
 801a34e:	4630      	mov	r0, r6
 801a350:	f000 f9ce 	bl	801a6f0 <_scanf_chars>
 801a354:	2801      	cmp	r0, #1
 801a356:	d065      	beq.n	801a424 <__ssvfiscanf_r+0x2d8>
 801a358:	2802      	cmp	r0, #2
 801a35a:	f47f af21 	bne.w	801a1a0 <__ssvfiscanf_r+0x54>
 801a35e:	e7cf      	b.n	801a300 <__ssvfiscanf_r+0x1b4>
 801a360:	220a      	movs	r2, #10
 801a362:	e7dd      	b.n	801a320 <__ssvfiscanf_r+0x1d4>
 801a364:	2300      	movs	r3, #0
 801a366:	9342      	str	r3, [sp, #264]	; 0x108
 801a368:	2303      	movs	r3, #3
 801a36a:	e7de      	b.n	801a32a <__ssvfiscanf_r+0x1de>
 801a36c:	2308      	movs	r3, #8
 801a36e:	9342      	str	r3, [sp, #264]	; 0x108
 801a370:	2304      	movs	r3, #4
 801a372:	e7da      	b.n	801a32a <__ssvfiscanf_r+0x1de>
 801a374:	4629      	mov	r1, r5
 801a376:	4640      	mov	r0, r8
 801a378:	f000 fb18 	bl	801a9ac <__sccl>
 801a37c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a37e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a382:	9341      	str	r3, [sp, #260]	; 0x104
 801a384:	4605      	mov	r5, r0
 801a386:	2301      	movs	r3, #1
 801a388:	e7cf      	b.n	801a32a <__ssvfiscanf_r+0x1de>
 801a38a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801a38c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a390:	9341      	str	r3, [sp, #260]	; 0x104
 801a392:	2300      	movs	r3, #0
 801a394:	e7c9      	b.n	801a32a <__ssvfiscanf_r+0x1de>
 801a396:	2302      	movs	r3, #2
 801a398:	e7c7      	b.n	801a32a <__ssvfiscanf_r+0x1de>
 801a39a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801a39c:	06c3      	lsls	r3, r0, #27
 801a39e:	f53f aeff 	bmi.w	801a1a0 <__ssvfiscanf_r+0x54>
 801a3a2:	9b00      	ldr	r3, [sp, #0]
 801a3a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a3a6:	1d19      	adds	r1, r3, #4
 801a3a8:	9100      	str	r1, [sp, #0]
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	07c0      	lsls	r0, r0, #31
 801a3ae:	bf4c      	ite	mi
 801a3b0:	801a      	strhmi	r2, [r3, #0]
 801a3b2:	601a      	strpl	r2, [r3, #0]
 801a3b4:	e6f4      	b.n	801a1a0 <__ssvfiscanf_r+0x54>
 801a3b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a3b8:	4621      	mov	r1, r4
 801a3ba:	4630      	mov	r0, r6
 801a3bc:	4798      	blx	r3
 801a3be:	2800      	cmp	r0, #0
 801a3c0:	d0b7      	beq.n	801a332 <__ssvfiscanf_r+0x1e6>
 801a3c2:	e79d      	b.n	801a300 <__ssvfiscanf_r+0x1b4>
 801a3c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801a3c6:	3201      	adds	r2, #1
 801a3c8:	9245      	str	r2, [sp, #276]	; 0x114
 801a3ca:	6862      	ldr	r2, [r4, #4]
 801a3cc:	3a01      	subs	r2, #1
 801a3ce:	2a00      	cmp	r2, #0
 801a3d0:	6062      	str	r2, [r4, #4]
 801a3d2:	dd02      	ble.n	801a3da <__ssvfiscanf_r+0x28e>
 801a3d4:	3301      	adds	r3, #1
 801a3d6:	6023      	str	r3, [r4, #0]
 801a3d8:	e7ae      	b.n	801a338 <__ssvfiscanf_r+0x1ec>
 801a3da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801a3dc:	4621      	mov	r1, r4
 801a3de:	4630      	mov	r0, r6
 801a3e0:	4798      	blx	r3
 801a3e2:	2800      	cmp	r0, #0
 801a3e4:	d0a8      	beq.n	801a338 <__ssvfiscanf_r+0x1ec>
 801a3e6:	e78b      	b.n	801a300 <__ssvfiscanf_r+0x1b4>
 801a3e8:	2b04      	cmp	r3, #4
 801a3ea:	dc06      	bgt.n	801a3fa <__ssvfiscanf_r+0x2ae>
 801a3ec:	466b      	mov	r3, sp
 801a3ee:	4622      	mov	r2, r4
 801a3f0:	a941      	add	r1, sp, #260	; 0x104
 801a3f2:	4630      	mov	r0, r6
 801a3f4:	f000 f9d4 	bl	801a7a0 <_scanf_i>
 801a3f8:	e7ac      	b.n	801a354 <__ssvfiscanf_r+0x208>
 801a3fa:	4b0f      	ldr	r3, [pc, #60]	; (801a438 <__ssvfiscanf_r+0x2ec>)
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	f43f aecf 	beq.w	801a1a0 <__ssvfiscanf_r+0x54>
 801a402:	466b      	mov	r3, sp
 801a404:	4622      	mov	r2, r4
 801a406:	a941      	add	r1, sp, #260	; 0x104
 801a408:	4630      	mov	r0, r6
 801a40a:	f7fc f823 	bl	8016454 <_scanf_float>
 801a40e:	e7a1      	b.n	801a354 <__ssvfiscanf_r+0x208>
 801a410:	89a3      	ldrh	r3, [r4, #12]
 801a412:	f013 0f40 	tst.w	r3, #64	; 0x40
 801a416:	bf18      	it	ne
 801a418:	f04f 30ff 	movne.w	r0, #4294967295
 801a41c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a424:	9844      	ldr	r0, [sp, #272]	; 0x110
 801a426:	e7f9      	b.n	801a41c <__ssvfiscanf_r+0x2d0>
 801a428:	0801a099 	.word	0x0801a099
 801a42c:	0801a113 	.word	0x0801a113
 801a430:	0801bed9 	.word	0x0801bed9
 801a434:	0801c37a 	.word	0x0801c37a
 801a438:	08016455 	.word	0x08016455

0801a43c <__sfputc_r>:
 801a43c:	6893      	ldr	r3, [r2, #8]
 801a43e:	3b01      	subs	r3, #1
 801a440:	2b00      	cmp	r3, #0
 801a442:	b410      	push	{r4}
 801a444:	6093      	str	r3, [r2, #8]
 801a446:	da08      	bge.n	801a45a <__sfputc_r+0x1e>
 801a448:	6994      	ldr	r4, [r2, #24]
 801a44a:	42a3      	cmp	r3, r4
 801a44c:	db01      	blt.n	801a452 <__sfputc_r+0x16>
 801a44e:	290a      	cmp	r1, #10
 801a450:	d103      	bne.n	801a45a <__sfputc_r+0x1e>
 801a452:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a456:	f7fd bb7f 	b.w	8017b58 <__swbuf_r>
 801a45a:	6813      	ldr	r3, [r2, #0]
 801a45c:	1c58      	adds	r0, r3, #1
 801a45e:	6010      	str	r0, [r2, #0]
 801a460:	7019      	strb	r1, [r3, #0]
 801a462:	4608      	mov	r0, r1
 801a464:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a468:	4770      	bx	lr

0801a46a <__sfputs_r>:
 801a46a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a46c:	4606      	mov	r6, r0
 801a46e:	460f      	mov	r7, r1
 801a470:	4614      	mov	r4, r2
 801a472:	18d5      	adds	r5, r2, r3
 801a474:	42ac      	cmp	r4, r5
 801a476:	d101      	bne.n	801a47c <__sfputs_r+0x12>
 801a478:	2000      	movs	r0, #0
 801a47a:	e007      	b.n	801a48c <__sfputs_r+0x22>
 801a47c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a480:	463a      	mov	r2, r7
 801a482:	4630      	mov	r0, r6
 801a484:	f7ff ffda 	bl	801a43c <__sfputc_r>
 801a488:	1c43      	adds	r3, r0, #1
 801a48a:	d1f3      	bne.n	801a474 <__sfputs_r+0xa>
 801a48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a490 <_vfiprintf_r>:
 801a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a494:	460d      	mov	r5, r1
 801a496:	b09d      	sub	sp, #116	; 0x74
 801a498:	4614      	mov	r4, r2
 801a49a:	4698      	mov	r8, r3
 801a49c:	4606      	mov	r6, r0
 801a49e:	b118      	cbz	r0, 801a4a8 <_vfiprintf_r+0x18>
 801a4a0:	6983      	ldr	r3, [r0, #24]
 801a4a2:	b90b      	cbnz	r3, 801a4a8 <_vfiprintf_r+0x18>
 801a4a4:	f7fb f9c4 	bl	8015830 <__sinit>
 801a4a8:	4b89      	ldr	r3, [pc, #548]	; (801a6d0 <_vfiprintf_r+0x240>)
 801a4aa:	429d      	cmp	r5, r3
 801a4ac:	d11b      	bne.n	801a4e6 <_vfiprintf_r+0x56>
 801a4ae:	6875      	ldr	r5, [r6, #4]
 801a4b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a4b2:	07d9      	lsls	r1, r3, #31
 801a4b4:	d405      	bmi.n	801a4c2 <_vfiprintf_r+0x32>
 801a4b6:	89ab      	ldrh	r3, [r5, #12]
 801a4b8:	059a      	lsls	r2, r3, #22
 801a4ba:	d402      	bmi.n	801a4c2 <_vfiprintf_r+0x32>
 801a4bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a4be:	f7fb fa7a 	bl	80159b6 <__retarget_lock_acquire_recursive>
 801a4c2:	89ab      	ldrh	r3, [r5, #12]
 801a4c4:	071b      	lsls	r3, r3, #28
 801a4c6:	d501      	bpl.n	801a4cc <_vfiprintf_r+0x3c>
 801a4c8:	692b      	ldr	r3, [r5, #16]
 801a4ca:	b9eb      	cbnz	r3, 801a508 <_vfiprintf_r+0x78>
 801a4cc:	4629      	mov	r1, r5
 801a4ce:	4630      	mov	r0, r6
 801a4d0:	f7fd fba6 	bl	8017c20 <__swsetup_r>
 801a4d4:	b1c0      	cbz	r0, 801a508 <_vfiprintf_r+0x78>
 801a4d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a4d8:	07dc      	lsls	r4, r3, #31
 801a4da:	d50e      	bpl.n	801a4fa <_vfiprintf_r+0x6a>
 801a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 801a4e0:	b01d      	add	sp, #116	; 0x74
 801a4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4e6:	4b7b      	ldr	r3, [pc, #492]	; (801a6d4 <_vfiprintf_r+0x244>)
 801a4e8:	429d      	cmp	r5, r3
 801a4ea:	d101      	bne.n	801a4f0 <_vfiprintf_r+0x60>
 801a4ec:	68b5      	ldr	r5, [r6, #8]
 801a4ee:	e7df      	b.n	801a4b0 <_vfiprintf_r+0x20>
 801a4f0:	4b79      	ldr	r3, [pc, #484]	; (801a6d8 <_vfiprintf_r+0x248>)
 801a4f2:	429d      	cmp	r5, r3
 801a4f4:	bf08      	it	eq
 801a4f6:	68f5      	ldreq	r5, [r6, #12]
 801a4f8:	e7da      	b.n	801a4b0 <_vfiprintf_r+0x20>
 801a4fa:	89ab      	ldrh	r3, [r5, #12]
 801a4fc:	0598      	lsls	r0, r3, #22
 801a4fe:	d4ed      	bmi.n	801a4dc <_vfiprintf_r+0x4c>
 801a500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a502:	f7fb fa59 	bl	80159b8 <__retarget_lock_release_recursive>
 801a506:	e7e9      	b.n	801a4dc <_vfiprintf_r+0x4c>
 801a508:	2300      	movs	r3, #0
 801a50a:	9309      	str	r3, [sp, #36]	; 0x24
 801a50c:	2320      	movs	r3, #32
 801a50e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a512:	f8cd 800c 	str.w	r8, [sp, #12]
 801a516:	2330      	movs	r3, #48	; 0x30
 801a518:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a6dc <_vfiprintf_r+0x24c>
 801a51c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a520:	f04f 0901 	mov.w	r9, #1
 801a524:	4623      	mov	r3, r4
 801a526:	469a      	mov	sl, r3
 801a528:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a52c:	b10a      	cbz	r2, 801a532 <_vfiprintf_r+0xa2>
 801a52e:	2a25      	cmp	r2, #37	; 0x25
 801a530:	d1f9      	bne.n	801a526 <_vfiprintf_r+0x96>
 801a532:	ebba 0b04 	subs.w	fp, sl, r4
 801a536:	d00b      	beq.n	801a550 <_vfiprintf_r+0xc0>
 801a538:	465b      	mov	r3, fp
 801a53a:	4622      	mov	r2, r4
 801a53c:	4629      	mov	r1, r5
 801a53e:	4630      	mov	r0, r6
 801a540:	f7ff ff93 	bl	801a46a <__sfputs_r>
 801a544:	3001      	adds	r0, #1
 801a546:	f000 80aa 	beq.w	801a69e <_vfiprintf_r+0x20e>
 801a54a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a54c:	445a      	add	r2, fp
 801a54e:	9209      	str	r2, [sp, #36]	; 0x24
 801a550:	f89a 3000 	ldrb.w	r3, [sl]
 801a554:	2b00      	cmp	r3, #0
 801a556:	f000 80a2 	beq.w	801a69e <_vfiprintf_r+0x20e>
 801a55a:	2300      	movs	r3, #0
 801a55c:	f04f 32ff 	mov.w	r2, #4294967295
 801a560:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a564:	f10a 0a01 	add.w	sl, sl, #1
 801a568:	9304      	str	r3, [sp, #16]
 801a56a:	9307      	str	r3, [sp, #28]
 801a56c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a570:	931a      	str	r3, [sp, #104]	; 0x68
 801a572:	4654      	mov	r4, sl
 801a574:	2205      	movs	r2, #5
 801a576:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a57a:	4858      	ldr	r0, [pc, #352]	; (801a6dc <_vfiprintf_r+0x24c>)
 801a57c:	f7e5 fe40 	bl	8000200 <memchr>
 801a580:	9a04      	ldr	r2, [sp, #16]
 801a582:	b9d8      	cbnz	r0, 801a5bc <_vfiprintf_r+0x12c>
 801a584:	06d1      	lsls	r1, r2, #27
 801a586:	bf44      	itt	mi
 801a588:	2320      	movmi	r3, #32
 801a58a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a58e:	0713      	lsls	r3, r2, #28
 801a590:	bf44      	itt	mi
 801a592:	232b      	movmi	r3, #43	; 0x2b
 801a594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a598:	f89a 3000 	ldrb.w	r3, [sl]
 801a59c:	2b2a      	cmp	r3, #42	; 0x2a
 801a59e:	d015      	beq.n	801a5cc <_vfiprintf_r+0x13c>
 801a5a0:	9a07      	ldr	r2, [sp, #28]
 801a5a2:	4654      	mov	r4, sl
 801a5a4:	2000      	movs	r0, #0
 801a5a6:	f04f 0c0a 	mov.w	ip, #10
 801a5aa:	4621      	mov	r1, r4
 801a5ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a5b0:	3b30      	subs	r3, #48	; 0x30
 801a5b2:	2b09      	cmp	r3, #9
 801a5b4:	d94e      	bls.n	801a654 <_vfiprintf_r+0x1c4>
 801a5b6:	b1b0      	cbz	r0, 801a5e6 <_vfiprintf_r+0x156>
 801a5b8:	9207      	str	r2, [sp, #28]
 801a5ba:	e014      	b.n	801a5e6 <_vfiprintf_r+0x156>
 801a5bc:	eba0 0308 	sub.w	r3, r0, r8
 801a5c0:	fa09 f303 	lsl.w	r3, r9, r3
 801a5c4:	4313      	orrs	r3, r2
 801a5c6:	9304      	str	r3, [sp, #16]
 801a5c8:	46a2      	mov	sl, r4
 801a5ca:	e7d2      	b.n	801a572 <_vfiprintf_r+0xe2>
 801a5cc:	9b03      	ldr	r3, [sp, #12]
 801a5ce:	1d19      	adds	r1, r3, #4
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	9103      	str	r1, [sp, #12]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	bfbb      	ittet	lt
 801a5d8:	425b      	neglt	r3, r3
 801a5da:	f042 0202 	orrlt.w	r2, r2, #2
 801a5de:	9307      	strge	r3, [sp, #28]
 801a5e0:	9307      	strlt	r3, [sp, #28]
 801a5e2:	bfb8      	it	lt
 801a5e4:	9204      	strlt	r2, [sp, #16]
 801a5e6:	7823      	ldrb	r3, [r4, #0]
 801a5e8:	2b2e      	cmp	r3, #46	; 0x2e
 801a5ea:	d10c      	bne.n	801a606 <_vfiprintf_r+0x176>
 801a5ec:	7863      	ldrb	r3, [r4, #1]
 801a5ee:	2b2a      	cmp	r3, #42	; 0x2a
 801a5f0:	d135      	bne.n	801a65e <_vfiprintf_r+0x1ce>
 801a5f2:	9b03      	ldr	r3, [sp, #12]
 801a5f4:	1d1a      	adds	r2, r3, #4
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	9203      	str	r2, [sp, #12]
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	bfb8      	it	lt
 801a5fe:	f04f 33ff 	movlt.w	r3, #4294967295
 801a602:	3402      	adds	r4, #2
 801a604:	9305      	str	r3, [sp, #20]
 801a606:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a6ec <_vfiprintf_r+0x25c>
 801a60a:	7821      	ldrb	r1, [r4, #0]
 801a60c:	2203      	movs	r2, #3
 801a60e:	4650      	mov	r0, sl
 801a610:	f7e5 fdf6 	bl	8000200 <memchr>
 801a614:	b140      	cbz	r0, 801a628 <_vfiprintf_r+0x198>
 801a616:	2340      	movs	r3, #64	; 0x40
 801a618:	eba0 000a 	sub.w	r0, r0, sl
 801a61c:	fa03 f000 	lsl.w	r0, r3, r0
 801a620:	9b04      	ldr	r3, [sp, #16]
 801a622:	4303      	orrs	r3, r0
 801a624:	3401      	adds	r4, #1
 801a626:	9304      	str	r3, [sp, #16]
 801a628:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a62c:	482c      	ldr	r0, [pc, #176]	; (801a6e0 <_vfiprintf_r+0x250>)
 801a62e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a632:	2206      	movs	r2, #6
 801a634:	f7e5 fde4 	bl	8000200 <memchr>
 801a638:	2800      	cmp	r0, #0
 801a63a:	d03f      	beq.n	801a6bc <_vfiprintf_r+0x22c>
 801a63c:	4b29      	ldr	r3, [pc, #164]	; (801a6e4 <_vfiprintf_r+0x254>)
 801a63e:	bb1b      	cbnz	r3, 801a688 <_vfiprintf_r+0x1f8>
 801a640:	9b03      	ldr	r3, [sp, #12]
 801a642:	3307      	adds	r3, #7
 801a644:	f023 0307 	bic.w	r3, r3, #7
 801a648:	3308      	adds	r3, #8
 801a64a:	9303      	str	r3, [sp, #12]
 801a64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a64e:	443b      	add	r3, r7
 801a650:	9309      	str	r3, [sp, #36]	; 0x24
 801a652:	e767      	b.n	801a524 <_vfiprintf_r+0x94>
 801a654:	fb0c 3202 	mla	r2, ip, r2, r3
 801a658:	460c      	mov	r4, r1
 801a65a:	2001      	movs	r0, #1
 801a65c:	e7a5      	b.n	801a5aa <_vfiprintf_r+0x11a>
 801a65e:	2300      	movs	r3, #0
 801a660:	3401      	adds	r4, #1
 801a662:	9305      	str	r3, [sp, #20]
 801a664:	4619      	mov	r1, r3
 801a666:	f04f 0c0a 	mov.w	ip, #10
 801a66a:	4620      	mov	r0, r4
 801a66c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a670:	3a30      	subs	r2, #48	; 0x30
 801a672:	2a09      	cmp	r2, #9
 801a674:	d903      	bls.n	801a67e <_vfiprintf_r+0x1ee>
 801a676:	2b00      	cmp	r3, #0
 801a678:	d0c5      	beq.n	801a606 <_vfiprintf_r+0x176>
 801a67a:	9105      	str	r1, [sp, #20]
 801a67c:	e7c3      	b.n	801a606 <_vfiprintf_r+0x176>
 801a67e:	fb0c 2101 	mla	r1, ip, r1, r2
 801a682:	4604      	mov	r4, r0
 801a684:	2301      	movs	r3, #1
 801a686:	e7f0      	b.n	801a66a <_vfiprintf_r+0x1da>
 801a688:	ab03      	add	r3, sp, #12
 801a68a:	9300      	str	r3, [sp, #0]
 801a68c:	462a      	mov	r2, r5
 801a68e:	4b16      	ldr	r3, [pc, #88]	; (801a6e8 <_vfiprintf_r+0x258>)
 801a690:	a904      	add	r1, sp, #16
 801a692:	4630      	mov	r0, r6
 801a694:	f7fb fb14 	bl	8015cc0 <_printf_float>
 801a698:	4607      	mov	r7, r0
 801a69a:	1c78      	adds	r0, r7, #1
 801a69c:	d1d6      	bne.n	801a64c <_vfiprintf_r+0x1bc>
 801a69e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a6a0:	07d9      	lsls	r1, r3, #31
 801a6a2:	d405      	bmi.n	801a6b0 <_vfiprintf_r+0x220>
 801a6a4:	89ab      	ldrh	r3, [r5, #12]
 801a6a6:	059a      	lsls	r2, r3, #22
 801a6a8:	d402      	bmi.n	801a6b0 <_vfiprintf_r+0x220>
 801a6aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a6ac:	f7fb f984 	bl	80159b8 <__retarget_lock_release_recursive>
 801a6b0:	89ab      	ldrh	r3, [r5, #12]
 801a6b2:	065b      	lsls	r3, r3, #25
 801a6b4:	f53f af12 	bmi.w	801a4dc <_vfiprintf_r+0x4c>
 801a6b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a6ba:	e711      	b.n	801a4e0 <_vfiprintf_r+0x50>
 801a6bc:	ab03      	add	r3, sp, #12
 801a6be:	9300      	str	r3, [sp, #0]
 801a6c0:	462a      	mov	r2, r5
 801a6c2:	4b09      	ldr	r3, [pc, #36]	; (801a6e8 <_vfiprintf_r+0x258>)
 801a6c4:	a904      	add	r1, sp, #16
 801a6c6:	4630      	mov	r0, r6
 801a6c8:	f7fb fd9e 	bl	8016208 <_printf_i>
 801a6cc:	e7e4      	b.n	801a698 <_vfiprintf_r+0x208>
 801a6ce:	bf00      	nop
 801a6d0:	0801bffc 	.word	0x0801bffc
 801a6d4:	0801c01c 	.word	0x0801c01c
 801a6d8:	0801bfdc 	.word	0x0801bfdc
 801a6dc:	0801c374 	.word	0x0801c374
 801a6e0:	0801c37e 	.word	0x0801c37e
 801a6e4:	08015cc1 	.word	0x08015cc1
 801a6e8:	0801a46b 	.word	0x0801a46b
 801a6ec:	0801c37a 	.word	0x0801c37a

0801a6f0 <_scanf_chars>:
 801a6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a6f4:	4615      	mov	r5, r2
 801a6f6:	688a      	ldr	r2, [r1, #8]
 801a6f8:	4680      	mov	r8, r0
 801a6fa:	460c      	mov	r4, r1
 801a6fc:	b932      	cbnz	r2, 801a70c <_scanf_chars+0x1c>
 801a6fe:	698a      	ldr	r2, [r1, #24]
 801a700:	2a00      	cmp	r2, #0
 801a702:	bf0c      	ite	eq
 801a704:	2201      	moveq	r2, #1
 801a706:	f04f 32ff 	movne.w	r2, #4294967295
 801a70a:	608a      	str	r2, [r1, #8]
 801a70c:	6822      	ldr	r2, [r4, #0]
 801a70e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801a79c <_scanf_chars+0xac>
 801a712:	06d1      	lsls	r1, r2, #27
 801a714:	bf5f      	itttt	pl
 801a716:	681a      	ldrpl	r2, [r3, #0]
 801a718:	1d11      	addpl	r1, r2, #4
 801a71a:	6019      	strpl	r1, [r3, #0]
 801a71c:	6816      	ldrpl	r6, [r2, #0]
 801a71e:	2700      	movs	r7, #0
 801a720:	69a0      	ldr	r0, [r4, #24]
 801a722:	b188      	cbz	r0, 801a748 <_scanf_chars+0x58>
 801a724:	2801      	cmp	r0, #1
 801a726:	d107      	bne.n	801a738 <_scanf_chars+0x48>
 801a728:	682b      	ldr	r3, [r5, #0]
 801a72a:	781a      	ldrb	r2, [r3, #0]
 801a72c:	6963      	ldr	r3, [r4, #20]
 801a72e:	5c9b      	ldrb	r3, [r3, r2]
 801a730:	b953      	cbnz	r3, 801a748 <_scanf_chars+0x58>
 801a732:	bb27      	cbnz	r7, 801a77e <_scanf_chars+0x8e>
 801a734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a738:	2802      	cmp	r0, #2
 801a73a:	d120      	bne.n	801a77e <_scanf_chars+0x8e>
 801a73c:	682b      	ldr	r3, [r5, #0]
 801a73e:	781b      	ldrb	r3, [r3, #0]
 801a740:	f813 3009 	ldrb.w	r3, [r3, r9]
 801a744:	071b      	lsls	r3, r3, #28
 801a746:	d41a      	bmi.n	801a77e <_scanf_chars+0x8e>
 801a748:	6823      	ldr	r3, [r4, #0]
 801a74a:	06da      	lsls	r2, r3, #27
 801a74c:	bf5e      	ittt	pl
 801a74e:	682b      	ldrpl	r3, [r5, #0]
 801a750:	781b      	ldrbpl	r3, [r3, #0]
 801a752:	f806 3b01 	strbpl.w	r3, [r6], #1
 801a756:	682a      	ldr	r2, [r5, #0]
 801a758:	686b      	ldr	r3, [r5, #4]
 801a75a:	3201      	adds	r2, #1
 801a75c:	602a      	str	r2, [r5, #0]
 801a75e:	68a2      	ldr	r2, [r4, #8]
 801a760:	3b01      	subs	r3, #1
 801a762:	3a01      	subs	r2, #1
 801a764:	606b      	str	r3, [r5, #4]
 801a766:	3701      	adds	r7, #1
 801a768:	60a2      	str	r2, [r4, #8]
 801a76a:	b142      	cbz	r2, 801a77e <_scanf_chars+0x8e>
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	dcd7      	bgt.n	801a720 <_scanf_chars+0x30>
 801a770:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a774:	4629      	mov	r1, r5
 801a776:	4640      	mov	r0, r8
 801a778:	4798      	blx	r3
 801a77a:	2800      	cmp	r0, #0
 801a77c:	d0d0      	beq.n	801a720 <_scanf_chars+0x30>
 801a77e:	6823      	ldr	r3, [r4, #0]
 801a780:	f013 0310 	ands.w	r3, r3, #16
 801a784:	d105      	bne.n	801a792 <_scanf_chars+0xa2>
 801a786:	68e2      	ldr	r2, [r4, #12]
 801a788:	3201      	adds	r2, #1
 801a78a:	60e2      	str	r2, [r4, #12]
 801a78c:	69a2      	ldr	r2, [r4, #24]
 801a78e:	b102      	cbz	r2, 801a792 <_scanf_chars+0xa2>
 801a790:	7033      	strb	r3, [r6, #0]
 801a792:	6923      	ldr	r3, [r4, #16]
 801a794:	441f      	add	r7, r3
 801a796:	6127      	str	r7, [r4, #16]
 801a798:	2000      	movs	r0, #0
 801a79a:	e7cb      	b.n	801a734 <_scanf_chars+0x44>
 801a79c:	0801bed9 	.word	0x0801bed9

0801a7a0 <_scanf_i>:
 801a7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7a4:	4698      	mov	r8, r3
 801a7a6:	4b74      	ldr	r3, [pc, #464]	; (801a978 <_scanf_i+0x1d8>)
 801a7a8:	460c      	mov	r4, r1
 801a7aa:	4682      	mov	sl, r0
 801a7ac:	4616      	mov	r6, r2
 801a7ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a7b2:	b087      	sub	sp, #28
 801a7b4:	ab03      	add	r3, sp, #12
 801a7b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a7ba:	4b70      	ldr	r3, [pc, #448]	; (801a97c <_scanf_i+0x1dc>)
 801a7bc:	69a1      	ldr	r1, [r4, #24]
 801a7be:	4a70      	ldr	r2, [pc, #448]	; (801a980 <_scanf_i+0x1e0>)
 801a7c0:	2903      	cmp	r1, #3
 801a7c2:	bf18      	it	ne
 801a7c4:	461a      	movne	r2, r3
 801a7c6:	68a3      	ldr	r3, [r4, #8]
 801a7c8:	9201      	str	r2, [sp, #4]
 801a7ca:	1e5a      	subs	r2, r3, #1
 801a7cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a7d0:	bf88      	it	hi
 801a7d2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a7d6:	4627      	mov	r7, r4
 801a7d8:	bf82      	ittt	hi
 801a7da:	eb03 0905 	addhi.w	r9, r3, r5
 801a7de:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a7e2:	60a3      	strhi	r3, [r4, #8]
 801a7e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 801a7e8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801a7ec:	bf98      	it	ls
 801a7ee:	f04f 0900 	movls.w	r9, #0
 801a7f2:	6023      	str	r3, [r4, #0]
 801a7f4:	463d      	mov	r5, r7
 801a7f6:	f04f 0b00 	mov.w	fp, #0
 801a7fa:	6831      	ldr	r1, [r6, #0]
 801a7fc:	ab03      	add	r3, sp, #12
 801a7fe:	7809      	ldrb	r1, [r1, #0]
 801a800:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801a804:	2202      	movs	r2, #2
 801a806:	f7e5 fcfb 	bl	8000200 <memchr>
 801a80a:	b328      	cbz	r0, 801a858 <_scanf_i+0xb8>
 801a80c:	f1bb 0f01 	cmp.w	fp, #1
 801a810:	d159      	bne.n	801a8c6 <_scanf_i+0x126>
 801a812:	6862      	ldr	r2, [r4, #4]
 801a814:	b92a      	cbnz	r2, 801a822 <_scanf_i+0x82>
 801a816:	6822      	ldr	r2, [r4, #0]
 801a818:	2308      	movs	r3, #8
 801a81a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801a81e:	6063      	str	r3, [r4, #4]
 801a820:	6022      	str	r2, [r4, #0]
 801a822:	6822      	ldr	r2, [r4, #0]
 801a824:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801a828:	6022      	str	r2, [r4, #0]
 801a82a:	68a2      	ldr	r2, [r4, #8]
 801a82c:	1e51      	subs	r1, r2, #1
 801a82e:	60a1      	str	r1, [r4, #8]
 801a830:	b192      	cbz	r2, 801a858 <_scanf_i+0xb8>
 801a832:	6832      	ldr	r2, [r6, #0]
 801a834:	1c51      	adds	r1, r2, #1
 801a836:	6031      	str	r1, [r6, #0]
 801a838:	7812      	ldrb	r2, [r2, #0]
 801a83a:	f805 2b01 	strb.w	r2, [r5], #1
 801a83e:	6872      	ldr	r2, [r6, #4]
 801a840:	3a01      	subs	r2, #1
 801a842:	2a00      	cmp	r2, #0
 801a844:	6072      	str	r2, [r6, #4]
 801a846:	dc07      	bgt.n	801a858 <_scanf_i+0xb8>
 801a848:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801a84c:	4631      	mov	r1, r6
 801a84e:	4650      	mov	r0, sl
 801a850:	4790      	blx	r2
 801a852:	2800      	cmp	r0, #0
 801a854:	f040 8085 	bne.w	801a962 <_scanf_i+0x1c2>
 801a858:	f10b 0b01 	add.w	fp, fp, #1
 801a85c:	f1bb 0f03 	cmp.w	fp, #3
 801a860:	d1cb      	bne.n	801a7fa <_scanf_i+0x5a>
 801a862:	6863      	ldr	r3, [r4, #4]
 801a864:	b90b      	cbnz	r3, 801a86a <_scanf_i+0xca>
 801a866:	230a      	movs	r3, #10
 801a868:	6063      	str	r3, [r4, #4]
 801a86a:	6863      	ldr	r3, [r4, #4]
 801a86c:	4945      	ldr	r1, [pc, #276]	; (801a984 <_scanf_i+0x1e4>)
 801a86e:	6960      	ldr	r0, [r4, #20]
 801a870:	1ac9      	subs	r1, r1, r3
 801a872:	f000 f89b 	bl	801a9ac <__sccl>
 801a876:	f04f 0b00 	mov.w	fp, #0
 801a87a:	68a3      	ldr	r3, [r4, #8]
 801a87c:	6822      	ldr	r2, [r4, #0]
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d03d      	beq.n	801a8fe <_scanf_i+0x15e>
 801a882:	6831      	ldr	r1, [r6, #0]
 801a884:	6960      	ldr	r0, [r4, #20]
 801a886:	f891 c000 	ldrb.w	ip, [r1]
 801a88a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801a88e:	2800      	cmp	r0, #0
 801a890:	d035      	beq.n	801a8fe <_scanf_i+0x15e>
 801a892:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801a896:	d124      	bne.n	801a8e2 <_scanf_i+0x142>
 801a898:	0510      	lsls	r0, r2, #20
 801a89a:	d522      	bpl.n	801a8e2 <_scanf_i+0x142>
 801a89c:	f10b 0b01 	add.w	fp, fp, #1
 801a8a0:	f1b9 0f00 	cmp.w	r9, #0
 801a8a4:	d003      	beq.n	801a8ae <_scanf_i+0x10e>
 801a8a6:	3301      	adds	r3, #1
 801a8a8:	f109 39ff 	add.w	r9, r9, #4294967295
 801a8ac:	60a3      	str	r3, [r4, #8]
 801a8ae:	6873      	ldr	r3, [r6, #4]
 801a8b0:	3b01      	subs	r3, #1
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	6073      	str	r3, [r6, #4]
 801a8b6:	dd1b      	ble.n	801a8f0 <_scanf_i+0x150>
 801a8b8:	6833      	ldr	r3, [r6, #0]
 801a8ba:	3301      	adds	r3, #1
 801a8bc:	6033      	str	r3, [r6, #0]
 801a8be:	68a3      	ldr	r3, [r4, #8]
 801a8c0:	3b01      	subs	r3, #1
 801a8c2:	60a3      	str	r3, [r4, #8]
 801a8c4:	e7d9      	b.n	801a87a <_scanf_i+0xda>
 801a8c6:	f1bb 0f02 	cmp.w	fp, #2
 801a8ca:	d1ae      	bne.n	801a82a <_scanf_i+0x8a>
 801a8cc:	6822      	ldr	r2, [r4, #0]
 801a8ce:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801a8d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801a8d6:	d1bf      	bne.n	801a858 <_scanf_i+0xb8>
 801a8d8:	2310      	movs	r3, #16
 801a8da:	6063      	str	r3, [r4, #4]
 801a8dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a8e0:	e7a2      	b.n	801a828 <_scanf_i+0x88>
 801a8e2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801a8e6:	6022      	str	r2, [r4, #0]
 801a8e8:	780b      	ldrb	r3, [r1, #0]
 801a8ea:	f805 3b01 	strb.w	r3, [r5], #1
 801a8ee:	e7de      	b.n	801a8ae <_scanf_i+0x10e>
 801a8f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a8f4:	4631      	mov	r1, r6
 801a8f6:	4650      	mov	r0, sl
 801a8f8:	4798      	blx	r3
 801a8fa:	2800      	cmp	r0, #0
 801a8fc:	d0df      	beq.n	801a8be <_scanf_i+0x11e>
 801a8fe:	6823      	ldr	r3, [r4, #0]
 801a900:	05d9      	lsls	r1, r3, #23
 801a902:	d50d      	bpl.n	801a920 <_scanf_i+0x180>
 801a904:	42bd      	cmp	r5, r7
 801a906:	d909      	bls.n	801a91c <_scanf_i+0x17c>
 801a908:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a90c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a910:	4632      	mov	r2, r6
 801a912:	4650      	mov	r0, sl
 801a914:	4798      	blx	r3
 801a916:	f105 39ff 	add.w	r9, r5, #4294967295
 801a91a:	464d      	mov	r5, r9
 801a91c:	42bd      	cmp	r5, r7
 801a91e:	d028      	beq.n	801a972 <_scanf_i+0x1d2>
 801a920:	6822      	ldr	r2, [r4, #0]
 801a922:	f012 0210 	ands.w	r2, r2, #16
 801a926:	d113      	bne.n	801a950 <_scanf_i+0x1b0>
 801a928:	702a      	strb	r2, [r5, #0]
 801a92a:	6863      	ldr	r3, [r4, #4]
 801a92c:	9e01      	ldr	r6, [sp, #4]
 801a92e:	4639      	mov	r1, r7
 801a930:	4650      	mov	r0, sl
 801a932:	47b0      	blx	r6
 801a934:	f8d8 3000 	ldr.w	r3, [r8]
 801a938:	6821      	ldr	r1, [r4, #0]
 801a93a:	1d1a      	adds	r2, r3, #4
 801a93c:	f8c8 2000 	str.w	r2, [r8]
 801a940:	f011 0f20 	tst.w	r1, #32
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	d00f      	beq.n	801a968 <_scanf_i+0x1c8>
 801a948:	6018      	str	r0, [r3, #0]
 801a94a:	68e3      	ldr	r3, [r4, #12]
 801a94c:	3301      	adds	r3, #1
 801a94e:	60e3      	str	r3, [r4, #12]
 801a950:	1bed      	subs	r5, r5, r7
 801a952:	44ab      	add	fp, r5
 801a954:	6925      	ldr	r5, [r4, #16]
 801a956:	445d      	add	r5, fp
 801a958:	6125      	str	r5, [r4, #16]
 801a95a:	2000      	movs	r0, #0
 801a95c:	b007      	add	sp, #28
 801a95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a962:	f04f 0b00 	mov.w	fp, #0
 801a966:	e7ca      	b.n	801a8fe <_scanf_i+0x15e>
 801a968:	07ca      	lsls	r2, r1, #31
 801a96a:	bf4c      	ite	mi
 801a96c:	8018      	strhmi	r0, [r3, #0]
 801a96e:	6018      	strpl	r0, [r3, #0]
 801a970:	e7eb      	b.n	801a94a <_scanf_i+0x1aa>
 801a972:	2001      	movs	r0, #1
 801a974:	e7f2      	b.n	801a95c <_scanf_i+0x1bc>
 801a976:	bf00      	nop
 801a978:	0801bc78 	.word	0x0801bc78
 801a97c:	08017ae1 	.word	0x08017ae1
 801a980:	080179d1 	.word	0x080179d1
 801a984:	0801c39e 	.word	0x0801c39e

0801a988 <_read_r>:
 801a988:	b538      	push	{r3, r4, r5, lr}
 801a98a:	4d07      	ldr	r5, [pc, #28]	; (801a9a8 <_read_r+0x20>)
 801a98c:	4604      	mov	r4, r0
 801a98e:	4608      	mov	r0, r1
 801a990:	4611      	mov	r1, r2
 801a992:	2200      	movs	r2, #0
 801a994:	602a      	str	r2, [r5, #0]
 801a996:	461a      	mov	r2, r3
 801a998:	f000 f8e4 	bl	801ab64 <_read>
 801a99c:	1c43      	adds	r3, r0, #1
 801a99e:	d102      	bne.n	801a9a6 <_read_r+0x1e>
 801a9a0:	682b      	ldr	r3, [r5, #0]
 801a9a2:	b103      	cbz	r3, 801a9a6 <_read_r+0x1e>
 801a9a4:	6023      	str	r3, [r4, #0]
 801a9a6:	bd38      	pop	{r3, r4, r5, pc}
 801a9a8:	20007850 	.word	0x20007850

0801a9ac <__sccl>:
 801a9ac:	b570      	push	{r4, r5, r6, lr}
 801a9ae:	780b      	ldrb	r3, [r1, #0]
 801a9b0:	4604      	mov	r4, r0
 801a9b2:	2b5e      	cmp	r3, #94	; 0x5e
 801a9b4:	bf0b      	itete	eq
 801a9b6:	784b      	ldrbeq	r3, [r1, #1]
 801a9b8:	1c48      	addne	r0, r1, #1
 801a9ba:	1c88      	addeq	r0, r1, #2
 801a9bc:	2200      	movne	r2, #0
 801a9be:	bf08      	it	eq
 801a9c0:	2201      	moveq	r2, #1
 801a9c2:	1e61      	subs	r1, r4, #1
 801a9c4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801a9c8:	f801 2f01 	strb.w	r2, [r1, #1]!
 801a9cc:	42a9      	cmp	r1, r5
 801a9ce:	d1fb      	bne.n	801a9c8 <__sccl+0x1c>
 801a9d0:	b90b      	cbnz	r3, 801a9d6 <__sccl+0x2a>
 801a9d2:	3801      	subs	r0, #1
 801a9d4:	bd70      	pop	{r4, r5, r6, pc}
 801a9d6:	f082 0101 	eor.w	r1, r2, #1
 801a9da:	54e1      	strb	r1, [r4, r3]
 801a9dc:	1c42      	adds	r2, r0, #1
 801a9de:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801a9e2:	2d2d      	cmp	r5, #45	; 0x2d
 801a9e4:	f102 36ff 	add.w	r6, r2, #4294967295
 801a9e8:	4610      	mov	r0, r2
 801a9ea:	d006      	beq.n	801a9fa <__sccl+0x4e>
 801a9ec:	2d5d      	cmp	r5, #93	; 0x5d
 801a9ee:	d0f1      	beq.n	801a9d4 <__sccl+0x28>
 801a9f0:	b90d      	cbnz	r5, 801a9f6 <__sccl+0x4a>
 801a9f2:	4630      	mov	r0, r6
 801a9f4:	e7ee      	b.n	801a9d4 <__sccl+0x28>
 801a9f6:	462b      	mov	r3, r5
 801a9f8:	e7ef      	b.n	801a9da <__sccl+0x2e>
 801a9fa:	7816      	ldrb	r6, [r2, #0]
 801a9fc:	2e5d      	cmp	r6, #93	; 0x5d
 801a9fe:	d0fa      	beq.n	801a9f6 <__sccl+0x4a>
 801aa00:	42b3      	cmp	r3, r6
 801aa02:	dcf8      	bgt.n	801a9f6 <__sccl+0x4a>
 801aa04:	4618      	mov	r0, r3
 801aa06:	3001      	adds	r0, #1
 801aa08:	4286      	cmp	r6, r0
 801aa0a:	5421      	strb	r1, [r4, r0]
 801aa0c:	dcfb      	bgt.n	801aa06 <__sccl+0x5a>
 801aa0e:	43d8      	mvns	r0, r3
 801aa10:	4430      	add	r0, r6
 801aa12:	1c5d      	adds	r5, r3, #1
 801aa14:	42b3      	cmp	r3, r6
 801aa16:	bfa8      	it	ge
 801aa18:	2000      	movge	r0, #0
 801aa1a:	182b      	adds	r3, r5, r0
 801aa1c:	3202      	adds	r2, #2
 801aa1e:	e7de      	b.n	801a9de <__sccl+0x32>

0801aa20 <__submore>:
 801aa20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa24:	460c      	mov	r4, r1
 801aa26:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801aa28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aa2c:	4299      	cmp	r1, r3
 801aa2e:	d11d      	bne.n	801aa6c <__submore+0x4c>
 801aa30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801aa34:	f7fb f84a 	bl	8015acc <_malloc_r>
 801aa38:	b918      	cbnz	r0, 801aa42 <__submore+0x22>
 801aa3a:	f04f 30ff 	mov.w	r0, #4294967295
 801aa3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aa46:	63a3      	str	r3, [r4, #56]	; 0x38
 801aa48:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801aa4c:	6360      	str	r0, [r4, #52]	; 0x34
 801aa4e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801aa52:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801aa56:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801aa5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801aa5e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801aa62:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801aa66:	6020      	str	r0, [r4, #0]
 801aa68:	2000      	movs	r0, #0
 801aa6a:	e7e8      	b.n	801aa3e <__submore+0x1e>
 801aa6c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801aa6e:	0077      	lsls	r7, r6, #1
 801aa70:	463a      	mov	r2, r7
 801aa72:	f7ff f98f 	bl	8019d94 <_realloc_r>
 801aa76:	4605      	mov	r5, r0
 801aa78:	2800      	cmp	r0, #0
 801aa7a:	d0de      	beq.n	801aa3a <__submore+0x1a>
 801aa7c:	eb00 0806 	add.w	r8, r0, r6
 801aa80:	4601      	mov	r1, r0
 801aa82:	4632      	mov	r2, r6
 801aa84:	4640      	mov	r0, r8
 801aa86:	f7fa ffa1 	bl	80159cc <memcpy>
 801aa8a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801aa8e:	f8c4 8000 	str.w	r8, [r4]
 801aa92:	e7e9      	b.n	801aa68 <__submore+0x48>

0801aa94 <__ascii_wctomb>:
 801aa94:	b149      	cbz	r1, 801aaaa <__ascii_wctomb+0x16>
 801aa96:	2aff      	cmp	r2, #255	; 0xff
 801aa98:	bf85      	ittet	hi
 801aa9a:	238a      	movhi	r3, #138	; 0x8a
 801aa9c:	6003      	strhi	r3, [r0, #0]
 801aa9e:	700a      	strbls	r2, [r1, #0]
 801aaa0:	f04f 30ff 	movhi.w	r0, #4294967295
 801aaa4:	bf98      	it	ls
 801aaa6:	2001      	movls	r0, #1
 801aaa8:	4770      	bx	lr
 801aaaa:	4608      	mov	r0, r1
 801aaac:	4770      	bx	lr
	...

0801aab0 <_fstat_r>:
 801aab0:	b538      	push	{r3, r4, r5, lr}
 801aab2:	4d07      	ldr	r5, [pc, #28]	; (801aad0 <_fstat_r+0x20>)
 801aab4:	2300      	movs	r3, #0
 801aab6:	4604      	mov	r4, r0
 801aab8:	4608      	mov	r0, r1
 801aaba:	4611      	mov	r1, r2
 801aabc:	602b      	str	r3, [r5, #0]
 801aabe:	f000 f829 	bl	801ab14 <_fstat>
 801aac2:	1c43      	adds	r3, r0, #1
 801aac4:	d102      	bne.n	801aacc <_fstat_r+0x1c>
 801aac6:	682b      	ldr	r3, [r5, #0]
 801aac8:	b103      	cbz	r3, 801aacc <_fstat_r+0x1c>
 801aaca:	6023      	str	r3, [r4, #0]
 801aacc:	bd38      	pop	{r3, r4, r5, pc}
 801aace:	bf00      	nop
 801aad0:	20007850 	.word	0x20007850

0801aad4 <_isatty_r>:
 801aad4:	b538      	push	{r3, r4, r5, lr}
 801aad6:	4d06      	ldr	r5, [pc, #24]	; (801aaf0 <_isatty_r+0x1c>)
 801aad8:	2300      	movs	r3, #0
 801aada:	4604      	mov	r4, r0
 801aadc:	4608      	mov	r0, r1
 801aade:	602b      	str	r3, [r5, #0]
 801aae0:	f000 f828 	bl	801ab34 <_isatty>
 801aae4:	1c43      	adds	r3, r0, #1
 801aae6:	d102      	bne.n	801aaee <_isatty_r+0x1a>
 801aae8:	682b      	ldr	r3, [r5, #0]
 801aaea:	b103      	cbz	r3, 801aaee <_isatty_r+0x1a>
 801aaec:	6023      	str	r3, [r4, #0]
 801aaee:	bd38      	pop	{r3, r4, r5, pc}
 801aaf0:	20007850 	.word	0x20007850

0801aaf4 <_malloc_usable_size_r>:
 801aaf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aaf8:	1f18      	subs	r0, r3, #4
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	bfbc      	itt	lt
 801aafe:	580b      	ldrlt	r3, [r1, r0]
 801ab00:	18c0      	addlt	r0, r0, r3
 801ab02:	4770      	bx	lr

0801ab04 <_close>:
 801ab04:	4b02      	ldr	r3, [pc, #8]	; (801ab10 <_close+0xc>)
 801ab06:	2258      	movs	r2, #88	; 0x58
 801ab08:	601a      	str	r2, [r3, #0]
 801ab0a:	f04f 30ff 	mov.w	r0, #4294967295
 801ab0e:	4770      	bx	lr
 801ab10:	20007850 	.word	0x20007850

0801ab14 <_fstat>:
 801ab14:	4b02      	ldr	r3, [pc, #8]	; (801ab20 <_fstat+0xc>)
 801ab16:	2258      	movs	r2, #88	; 0x58
 801ab18:	601a      	str	r2, [r3, #0]
 801ab1a:	f04f 30ff 	mov.w	r0, #4294967295
 801ab1e:	4770      	bx	lr
 801ab20:	20007850 	.word	0x20007850

0801ab24 <_getpid>:
 801ab24:	4b02      	ldr	r3, [pc, #8]	; (801ab30 <_getpid+0xc>)
 801ab26:	2258      	movs	r2, #88	; 0x58
 801ab28:	601a      	str	r2, [r3, #0]
 801ab2a:	f04f 30ff 	mov.w	r0, #4294967295
 801ab2e:	4770      	bx	lr
 801ab30:	20007850 	.word	0x20007850

0801ab34 <_isatty>:
 801ab34:	4b02      	ldr	r3, [pc, #8]	; (801ab40 <_isatty+0xc>)
 801ab36:	2258      	movs	r2, #88	; 0x58
 801ab38:	601a      	str	r2, [r3, #0]
 801ab3a:	2000      	movs	r0, #0
 801ab3c:	4770      	bx	lr
 801ab3e:	bf00      	nop
 801ab40:	20007850 	.word	0x20007850

0801ab44 <_kill>:
 801ab44:	4b02      	ldr	r3, [pc, #8]	; (801ab50 <_kill+0xc>)
 801ab46:	2258      	movs	r2, #88	; 0x58
 801ab48:	601a      	str	r2, [r3, #0]
 801ab4a:	f04f 30ff 	mov.w	r0, #4294967295
 801ab4e:	4770      	bx	lr
 801ab50:	20007850 	.word	0x20007850

0801ab54 <_lseek>:
 801ab54:	4b02      	ldr	r3, [pc, #8]	; (801ab60 <_lseek+0xc>)
 801ab56:	2258      	movs	r2, #88	; 0x58
 801ab58:	601a      	str	r2, [r3, #0]
 801ab5a:	f04f 30ff 	mov.w	r0, #4294967295
 801ab5e:	4770      	bx	lr
 801ab60:	20007850 	.word	0x20007850

0801ab64 <_read>:
 801ab64:	4b02      	ldr	r3, [pc, #8]	; (801ab70 <_read+0xc>)
 801ab66:	2258      	movs	r2, #88	; 0x58
 801ab68:	601a      	str	r2, [r3, #0]
 801ab6a:	f04f 30ff 	mov.w	r0, #4294967295
 801ab6e:	4770      	bx	lr
 801ab70:	20007850 	.word	0x20007850

0801ab74 <_sbrk>:
 801ab74:	4b04      	ldr	r3, [pc, #16]	; (801ab88 <_sbrk+0x14>)
 801ab76:	6819      	ldr	r1, [r3, #0]
 801ab78:	4602      	mov	r2, r0
 801ab7a:	b909      	cbnz	r1, 801ab80 <_sbrk+0xc>
 801ab7c:	4903      	ldr	r1, [pc, #12]	; (801ab8c <_sbrk+0x18>)
 801ab7e:	6019      	str	r1, [r3, #0]
 801ab80:	6818      	ldr	r0, [r3, #0]
 801ab82:	4402      	add	r2, r0
 801ab84:	601a      	str	r2, [r3, #0]
 801ab86:	4770      	bx	lr
 801ab88:	20006188 	.word	0x20006188
 801ab8c:	20007858 	.word	0x20007858

0801ab90 <_write>:
 801ab90:	4b02      	ldr	r3, [pc, #8]	; (801ab9c <_write+0xc>)
 801ab92:	2258      	movs	r2, #88	; 0x58
 801ab94:	601a      	str	r2, [r3, #0]
 801ab96:	f04f 30ff 	mov.w	r0, #4294967295
 801ab9a:	4770      	bx	lr
 801ab9c:	20007850 	.word	0x20007850

0801aba0 <_exit>:
 801aba0:	e7fe      	b.n	801aba0 <_exit>
	...

0801aba4 <_init>:
 801aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aba6:	bf00      	nop
 801aba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801abaa:	bc08      	pop	{r3}
 801abac:	469e      	mov	lr, r3
 801abae:	4770      	bx	lr

0801abb0 <_fini>:
 801abb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abb2:	bf00      	nop
 801abb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801abb6:	bc08      	pop	{r3}
 801abb8:	469e      	mov	lr, r3
 801abba:	4770      	bx	lr
