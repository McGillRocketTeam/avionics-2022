
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000162c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015e8  08016478  08016478  00026478  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a60  08017a60  000302ac  2**0
                  CONTENTS
  4 .ARM          00000008  08017a60  08017a60  00027a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a68  08017a68  000302ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017a68  08017a68  00027a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017a70  08017a70  00027a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  08017a74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302ac  2**0
                  CONTENTS
 10 .bss          00006810  200002ac  200002ac  000302ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20006abc  20006abc  000302ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   000645a7  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008ef0  00000000  00000000  00094883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000033c0  00000000  00000000  0009d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000030c8  00000000  00000000  000a0b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035daa  00000000  00000000  000a3c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d4e5  00000000  00000000  000d99aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f403  00000000  00000000  00116e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00226292  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f424  00000000  00000000  002262e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  0023570c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  002357d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002ac 	.word	0x200002ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801645c 	.word	0x0801645c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002b0 	.word	0x200002b0
 80001ec:	0801645c 	.word	0x0801645c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <println>:

#include <MRT_helpers.h>
#include <MRT_setup.h>
#include <tim.h>

void println(char* s){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff f8eb 	bl	80001f0 <strlen>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <println+0x34>)
 8001026:	f00b fc60 	bl	800c8ea <HAL_UART_Transmit>
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) "\r\n", 2, HAL_MAX_DELAY);
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	2202      	movs	r2, #2
 8001030:	4904      	ldr	r1, [pc, #16]	; (8001044 <println+0x38>)
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <println+0x34>)
 8001034:	f00b fc59 	bl	800c8ea <HAL_UART_Transmit>
	#endif
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20006368 	.word	0x20006368
 8001044:	08016478 	.word	0x08016478

08001048 <print>:

void print(char* s){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	#if PRINT
	HAL_UART_Transmit(&DEBUG_UART, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff f8cd 	bl	80001f0 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <print+0x28>)
 8001062:	f00b fc42 	bl	800c8ea <HAL_UART_Transmit>
	#endif
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20006368 	.word	0x20006368

08001074 <tone_freq>:
void no_print(char* s){
	//TODO Buffer function for Iridium
}

// buzz at particular frequency
void tone_freq(uint32_t duration, uint32_t repeats, uint32_t freq) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
	#if !NO_BUZZ
	// TIM2 base frequency is 90 MHz, PSC = 90-1
	// can calculate required ARR value
	TIM2->ARR = 1000000 / freq;
 8001080:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001084:	491c      	ldr	r1, [pc, #112]	; (80010f8 <tone_freq+0x84>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	fbb1 f3f3 	udiv	r3, r1, r3
 800108c:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 800108e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6153      	str	r3, [r2, #20]

	for (uint32_t i = 0; i < repeats; i++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	e01f      	b.n	80010e4 <tone_freq+0x70>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010a4:	2108      	movs	r1, #8
 80010a6:	4815      	ldr	r0, [pc, #84]	; (80010fc <tone_freq+0x88>)
 80010a8:	f00a fc40 	bl	800b92c <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, SET);
 80010ac:	2201      	movs	r2, #1
 80010ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b2:	4813      	ldr	r0, [pc, #76]	; (8001100 <tone_freq+0x8c>)
 80010b4:	f006 ff6c 	bl	8007f90 <HAL_GPIO_WritePin>
		HAL_Delay(duration);
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f006 f85d 	bl	8007178 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80010be:	2108      	movs	r1, #8
 80010c0:	480e      	ldr	r0, [pc, #56]	; (80010fc <tone_freq+0x88>)
 80010c2:	f00a fcfb 	bl	800babc <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(POWER_ON_EXT_LED_GPIO_Port, POWER_ON_EXT_LED_Pin, RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <tone_freq+0x8c>)
 80010ce:	f006 ff5f 	bl	8007f90 <HAL_GPIO_WritePin>
		if (repeats > 1)
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d902      	bls.n	80010de <tone_freq+0x6a>
			HAL_Delay(duration);
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f006 f84d 	bl	8007178 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3db      	bcc.n	80010a4 <tone_freq+0x30>
	}
	#endif
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	000f4240 	.word	0x000f4240
 80010fc:	200062dc 	.word	0x200062dc
 8001100:	40020400 	.word	0x40020400

08001104 <buzz_success>:
void buzz_success(void) { tone_freq(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS, BUZZ_SUCCESS_FREQ); }
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
 8001108:	f240 4216 	movw	r2, #1046	; 0x416
 800110c:	2102      	movs	r1, #2
 800110e:	204b      	movs	r0, #75	; 0x4b
 8001110:	f7ff ffb0 	bl	8001074 <tone_freq>
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <buzz_startup_success>:
void buzz_failure(void) { tone_freq(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS, BUZZ_FAILURE_FREQ); }
void buzz_startup_success(void) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e008      	b.n	8001136 <buzz_startup_success+0x1e>
		buzz_success();
 8001124:	f7ff ffee 	bl	8001104 <buzz_success>
		HAL_Delay(1000);
 8001128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112c:	f006 f824 	bl	8007178 <HAL_Delay>
	for (uint8_t i = 0; i < 3; i++) {
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	3301      	adds	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b02      	cmp	r3, #2
 800113a:	d9f3      	bls.n	8001124 <buzz_startup_success+0xc>
	}
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Init********/\r\n");
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <MRT_Init+0x3c>)
 800114e:	f7ff ff7b 	bl	8001048 <print>

	MRT_Reinitialize_Peripherals();
 8001152:	f000 f8fb 	bl	800134c <MRT_Reinitialize_Peripherals>

	//Memory
	MRT_MEMORY_Init();
 8001156:	f002 ff49 	bl	8003fec <MRT_MEMORY_Init>
	MRT_reset_info();
 800115a:	f000 f829 	bl	80011b0 <MRT_reset_info>

	//IWDG
	#if IWDG_ACTIVE
	print((char*) "IWDG Init...");
 800115e:	480a      	ldr	r0, [pc, #40]	; (8001188 <MRT_Init+0x40>)
 8001160:	f7ff ff72 	bl	8001048 <print>
	MX_IWDG_Init();
 8001164:	f001 fa32 	bl	80025cc <MX_IWDG_Init>
	print((char*) "OK\r\n");
 8001168:	4808      	ldr	r0, [pc, #32]	; (800118c <MRT_Init+0x44>)
 800116a:	f7ff ff6d 	bl	8001048 <print>
	#endif

	//RTC
	HAL_IWDG_Refresh(&hiwdg);
 800116e:	4808      	ldr	r0, [pc, #32]	; (8001190 <MRT_Init+0x48>)
 8001170:	f007 fff2 	bl	8009158 <HAL_IWDG_Refresh>
	MRT_rtc_Init();
 8001174:	f001 fc7c 	bl	8002a70 <MRT_rtc_Init>
		  checkForI2CDevices(huart8,hi2c1);
		  checkForI2CDevices(huart8,hi2c2);
		  checkForI2CDevices(huart8,hi2c3);
		#endif

		MRT_i2c_sensors_Init();
 8001178:	f004 f846 	bl	8005208 <MRT_i2c_sensors_Init>
	#endif


	//Telemetry
	#if TELEMETRY_THREAD
		MRT_TELEMETRY_Init();
 800117c:	f005 ffae 	bl	80070dc <MRT_TELEMETRY_Init>
	#endif

	#if FORCED_EJECTION_STAGE
		   ejection_stage_flag = FORCED_STAGE;
	#endif
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	0801647c 	.word	0x0801647c
 8001188:	080164a0 	.word	0x080164a0
 800118c:	080164b0 	.word	0x080164b0
 8001190:	20006160 	.word	0x20006160

08001194 <MRT_Deinit>:




void MRT_Deinit(void){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	print((char*) "\r\n\r\n/********MRT Deinit********/\r\n");
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MRT_Deinit+0x18>)
 800119a:	f7ff ff55 	bl	8001048 <print>

	MRT_Reinitialize_Peripherals();
 800119e:	f000 f8d5 	bl	800134c <MRT_Reinitialize_Peripherals>
	#endif


	//Sensors
	#if SENSORS_THREAD
		MRT_i2c_sensors_Deinit();
 80011a2:	f004 f86d 	bl	8005280 <MRT_i2c_sensors_Deinit>
	#endif

    //TODO
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	080164b8 	.word	0x080164b8

080011b0 <MRT_reset_info>:

//**************************************************//
//PRIVATE FUNCTIONS


void MRT_reset_info(void){
 80011b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b2:	b0a9      	sub	sp, #164	; 0xa4
 80011b4:	af06      	add	r7, sp, #24

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i ::%i\r\n",
 80011b6:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <MRT_reset_info+0x140>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461e      	mov	r6, r3
 80011bc:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <MRT_reset_info+0x144>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	469c      	mov	ip, r3
 80011c2:	4b4d      	ldr	r3, [pc, #308]	; (80012f8 <MRT_reset_info+0x148>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <MRT_reset_info+0x14c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	4b4c      	ldr	r3, [pc, #304]	; (8001300 <MRT_reset_info+0x150>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461c      	mov	r4, r3
 80011d4:	4b4b      	ldr	r3, [pc, #300]	; (8001304 <MRT_reset_info+0x154>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461d      	mov	r5, r3
 80011da:	4b4b      	ldr	r3, [pc, #300]	; (8001308 <MRT_reset_info+0x158>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80011e2:	9304      	str	r3, [sp, #16]
 80011e4:	9503      	str	r5, [sp, #12]
 80011e6:	9402      	str	r4, [sp, #8]
 80011e8:	9101      	str	r1, [sp, #4]
 80011ea:	9200      	str	r2, [sp, #0]
 80011ec:	4663      	mov	r3, ip
 80011ee:	4632      	mov	r2, r6
 80011f0:	4946      	ldr	r1, [pc, #280]	; (800130c <MRT_reset_info+0x15c>)
 80011f2:	f011 f939 	bl	8012468 <siprintf>
			  reset_flag, wu_flag, iwdg_flag, prev_hour, prev_min, prev_sec, prev_subsec);
	  print(buffer);
 80011f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff24 	bl	8001048 <print>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 8001200:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <MRT_reset_info+0x148>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d119      	bne.n	800123c <MRT_reset_info+0x8c>
		  print((char*) "Deactivating IWDG\r\n");
 8001208:	4841      	ldr	r0, [pc, #260]	; (8001310 <MRT_reset_info+0x160>)
 800120a:	f7ff ff1d 	bl	8001048 <print>

		  iwdg_flag = 0; //Flip flag
 800120e:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <MRT_reset_info+0x148>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]

		  //Write new flag to memory
		  rtc_bckp_reg_iwdg = iwdg_flag;
 8001214:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <MRT_reset_info+0x148>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <MRT_reset_info+0x164>)
 800121c:	601a      	str	r2, [r3, #0]
		  ext_flash_iwdg = iwdg_flag;
 800121e:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <MRT_reset_info+0x148>)
 8001220:	781a      	ldrb	r2, [r3, #0]
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <MRT_reset_info+0x168>)
 8001224:	701a      	strb	r2, [r3, #0]
		  MRT_saveFlagValue(FC_STATE_IWDG);
 8001226:	2002      	movs	r0, #2
 8001228:	f002 fd4c 	bl	8003cc4 <MRT_saveFlagValue>

		  HAL_Delay(500);
 800122c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001230:	f005 ffa2 	bl	8007178 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 8001234:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 8001238:	f001 fcc0 	bl	8002bbc <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag > 0){
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MRT_reset_info+0x144>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00b      	beq.n	800125c <MRT_reset_info+0xac>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <MRT_reset_info+0x144>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	4933      	ldr	r1, [pc, #204]	; (800131c <MRT_reset_info+0x16c>)
 800124e:	4618      	mov	r0, r3
 8001250:	f011 f90a 	bl	8012468 <siprintf>
		  print(buf);
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fef6 	bl	8001048 <print>
	  }


	  //Check if we start from the beginning
	  if (reset_flag == 0){
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <MRT_reset_info+0x140>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d108      	bne.n	8001276 <MRT_reset_info+0xc6>
		  print((char*) "FC restarted\r\n");
 8001264:	482e      	ldr	r0, [pc, #184]	; (8001320 <MRT_reset_info+0x170>)
 8001266:	f7ff feef 	bl	8001048 <print>

		  reset_flag = 1; //Flip flag
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MRT_reset_info+0x140>)
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]

		  MRT_saveFlagValue(FC_STATE_RESET);
 8001270:	2000      	movs	r0, #0
 8001272:	f002 fd27 	bl	8003cc4 <MRT_saveFlagValue>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 8001276:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <MRT_reset_info+0x174>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <MRT_reset_info+0xd6>
		  print((char*) "Pre-apogee\r\n");
 800127e:	482a      	ldr	r0, [pc, #168]	; (8001328 <MRT_reset_info+0x178>)
 8001280:	f7ff fee2 	bl	8001048 <print>
 8001284:	e006      	b.n	8001294 <MRT_reset_info+0xe4>
	  }
	  else if(apogee_flag==1){
 8001286:	4b27      	ldr	r3, [pc, #156]	; (8001324 <MRT_reset_info+0x174>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <MRT_reset_info+0xe4>
		  print((char*) "Post-apogee\r\n");
 800128e:	4827      	ldr	r0, [pc, #156]	; (800132c <MRT_reset_info+0x17c>)
 8001290:	f7ff feda 	bl	8001048 <print>
	  }


	  //Check ejection stage
	  print((char*)"Ejection Stage: ");
 8001294:	4826      	ldr	r0, [pc, #152]	; (8001330 <MRT_reset_info+0x180>)
 8001296:	f7ff fed7 	bl	8001048 <print>
	  if (ejection_stage_flag==PAD){
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <MRT_reset_info+0x184>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d103      	bne.n	80012aa <MRT_reset_info+0xfa>
		  print((char*)"Pad\r\n");
 80012a2:	4825      	ldr	r0, [pc, #148]	; (8001338 <MRT_reset_info+0x188>)
 80012a4:	f7ff fed0 	bl	8001048 <print>
		  print((char*)"Main descent\r\n");
	  }
	  else if(ejection_stage_flag==LANDED){
		  print((char*)"Landed\r\n");
	  }
}
 80012a8:	e01e      	b.n	80012e8 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==BOOST){
 80012aa:	4b22      	ldr	r3, [pc, #136]	; (8001334 <MRT_reset_info+0x184>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d103      	bne.n	80012ba <MRT_reset_info+0x10a>
		  print((char*)"Boost\r\n");
 80012b2:	4822      	ldr	r0, [pc, #136]	; (800133c <MRT_reset_info+0x18c>)
 80012b4:	f7ff fec8 	bl	8001048 <print>
}
 80012b8:	e016      	b.n	80012e8 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==DROGUE_DESCENT){
 80012ba:	4b1e      	ldr	r3, [pc, #120]	; (8001334 <MRT_reset_info+0x184>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d103      	bne.n	80012ca <MRT_reset_info+0x11a>
		  print((char*)"Drogue descent\r\n");
 80012c2:	481f      	ldr	r0, [pc, #124]	; (8001340 <MRT_reset_info+0x190>)
 80012c4:	f7ff fec0 	bl	8001048 <print>
}
 80012c8:	e00e      	b.n	80012e8 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==MAIN_DESCENT){
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MRT_reset_info+0x184>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d103      	bne.n	80012da <MRT_reset_info+0x12a>
		  print((char*)"Main descent\r\n");
 80012d2:	481c      	ldr	r0, [pc, #112]	; (8001344 <MRT_reset_info+0x194>)
 80012d4:	f7ff feb8 	bl	8001048 <print>
}
 80012d8:	e006      	b.n	80012e8 <MRT_reset_info+0x138>
	  else if(ejection_stage_flag==LANDED){
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <MRT_reset_info+0x184>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b04      	cmp	r3, #4
 80012e0:	d102      	bne.n	80012e8 <MRT_reset_info+0x138>
		  print((char*)"Landed\r\n");
 80012e2:	4819      	ldr	r0, [pc, #100]	; (8001348 <MRT_reset_info+0x198>)
 80012e4:	f7ff feb0 	bl	8001048 <print>
}
 80012e8:	bf00      	nop
 80012ea:	378c      	adds	r7, #140	; 0x8c
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f0:	20000370 	.word	0x20000370
 80012f4:	20000371 	.word	0x20000371
 80012f8:	20000372 	.word	0x20000372
 80012fc:	20000375 	.word	0x20000375
 8001300:	20000376 	.word	0x20000376
 8001304:	20000377 	.word	0x20000377
 8001308:	20000378 	.word	0x20000378
 800130c:	080164dc 	.word	0x080164dc
 8001310:	08016520 	.word	0x08016520
 8001314:	20000318 	.word	0x20000318
 8001318:	20000362 	.word	0x20000362
 800131c:	08016534 	.word	0x08016534
 8001320:	08016544 	.word	0x08016544
 8001324:	20000373 	.word	0x20000373
 8001328:	08016554 	.word	0x08016554
 800132c:	08016564 	.word	0x08016564
 8001330:	08016574 	.word	0x08016574
 8001334:	20000374 	.word	0x20000374
 8001338:	08016588 	.word	0x08016588
 800133c:	08016590 	.word	0x08016590
 8001340:	08016598 	.word	0x08016598
 8001344:	080165ac 	.word	0x080165ac
 8001348:	080165bc 	.word	0x080165bc

0800134c <MRT_Reinitialize_Peripherals>:


void MRT_Reinitialize_Peripherals(void){
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print((char*)"Reinitializing Peripherals...");
 8001350:	482f      	ldr	r0, [pc, #188]	; (8001410 <MRT_Reinitialize_Peripherals+0xc4>)
 8001352:	f7ff fe79 	bl	8001048 <print>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	2102      	movs	r1, #2
 800135a:	482e      	ldr	r0, [pc, #184]	; (8001414 <MRT_Reinitialize_Peripherals+0xc8>)
 800135c:	f006 fe18 	bl	8007f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001360:	2200      	movs	r2, #0
 8001362:	2104      	movs	r1, #4
 8001364:	482b      	ldr	r0, [pc, #172]	; (8001414 <MRT_Reinitialize_Peripherals+0xc8>)
 8001366:	f006 fe13 	bl	8007f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2108      	movs	r1, #8
 800136e:	4829      	ldr	r0, [pc, #164]	; (8001414 <MRT_Reinitialize_Peripherals+0xc8>)
 8001370:	f006 fe0e 	bl	8007f90 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800137a:	4827      	ldr	r0, [pc, #156]	; (8001418 <MRT_Reinitialize_Peripherals+0xcc>)
 800137c:	f006 fe08 	bl	8007f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001386:	4824      	ldr	r0, [pc, #144]	; (8001418 <MRT_Reinitialize_Peripherals+0xcc>)
 8001388:	f006 fe02 	bl	8007f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001392:	4821      	ldr	r0, [pc, #132]	; (8001418 <MRT_Reinitialize_Peripherals+0xcc>)
 8001394:	f006 fdfc 	bl	8007f90 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 8001398:	2201      	movs	r2, #1
 800139a:	2102      	movs	r1, #2
 800139c:	481e      	ldr	r0, [pc, #120]	; (8001418 <MRT_Reinitialize_Peripherals+0xcc>)
 800139e:	f006 fdf7 	bl	8007f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80013a2:	2200      	movs	r2, #0
 80013a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013a8:	481c      	ldr	r0, [pc, #112]	; (800141c <MRT_Reinitialize_Peripherals+0xd0>)
 80013aa:	f006 fdf1 	bl	8007f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b4:	4819      	ldr	r0, [pc, #100]	; (800141c <MRT_Reinitialize_Peripherals+0xd0>)
 80013b6:	f006 fdeb 	bl	8007f90 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80013ba:	2200      	movs	r2, #0
 80013bc:	2104      	movs	r1, #4
 80013be:	4818      	ldr	r0, [pc, #96]	; (8001420 <MRT_Reinitialize_Peripherals+0xd4>)
 80013c0:	f006 fde6 	bl	8007f90 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013ca:	4815      	ldr	r0, [pc, #84]	; (8001420 <MRT_Reinitialize_Peripherals+0xd4>)
 80013cc:	f006 fde0 	bl	8007f90 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013d6:	4810      	ldr	r0, [pc, #64]	; (8001418 <MRT_Reinitialize_Peripherals+0xcc>)
 80013d8:	f006 fdda 	bl	8007f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80013dc:	2200      	movs	r2, #0
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	4810      	ldr	r0, [pc, #64]	; (8001424 <MRT_Reinitialize_Peripherals+0xd8>)
 80013e2:	f006 fdd5 	bl	8007f90 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2140      	movs	r1, #64	; 0x40
 80013ea:	480e      	ldr	r0, [pc, #56]	; (8001424 <MRT_Reinitialize_Peripherals+0xd8>)
 80013ec:	f006 fdd0 	bl	8007f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2120      	movs	r1, #32
 80013f4:	480b      	ldr	r0, [pc, #44]	; (8001424 <MRT_Reinitialize_Peripherals+0xd8>)
 80013f6:	f006 fdcb 	bl	8007f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2110      	movs	r1, #16
 80013fe:	4809      	ldr	r0, [pc, #36]	; (8001424 <MRT_Reinitialize_Peripherals+0xd8>)
 8001400:	f006 fdc6 	bl	8007f90 <HAL_GPIO_WritePin>

	  print((char*)"OK\r\n");
 8001404:	4808      	ldr	r0, [pc, #32]	; (8001428 <MRT_Reinitialize_Peripherals+0xdc>)
 8001406:	f7ff fe1f 	bl	8001048 <print>
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	080165c8 	.word	0x080165c8
 8001414:	40020800 	.word	0x40020800
 8001418:	40021800 	.word	0x40021800
 800141c:	40021400 	.word	0x40021400
 8001420:	40021000 	.word	0x40021000
 8001424:	40020c00 	.word	0x40020c00
 8001428:	080164b0 	.word	0x080164b0

0800142c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001432:	463b      	mov	r3, r7
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001440:	4a21      	ldr	r2, [pc, #132]	; (80014c8 <MX_ADC1_Init+0x9c>)
 8001442:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_ADC1_Init+0x98>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001456:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MX_ADC1_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <MX_ADC1_Init+0x98>)
 800146c:	4a17      	ldr	r2, [pc, #92]	; (80014cc <MX_ADC1_Init+0xa0>)
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001478:	2201      	movs	r2, #1
 800147a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_ADC1_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_ADC1_Init+0x98>)
 8001486:	2201      	movs	r2, #1
 8001488:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800148a:	480e      	ldr	r0, [pc, #56]	; (80014c4 <MX_ADC1_Init+0x98>)
 800148c:	f005 fe98 	bl	80071c0 <HAL_ADC_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001496:	f001 f9fd 	bl	8002894 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800149a:	2306      	movs	r3, #6
 800149c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_ADC1_Init+0x98>)
 80014ac:	f006 f86a 	bl	8007584 <HAL_ADC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014b6:	f001 f9ed 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20006044 	.word	0x20006044
 80014c8:	40012000 	.word	0x40012000
 80014cc:	0f000001 	.word	0x0f000001

080014d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a17      	ldr	r2, [pc, #92]	; (800154c <HAL_ADC_MspInit+0x7c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d127      	bne.n	8001542 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_ADC_MspInit+0x80>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a15      	ldr	r2, [pc, #84]	; (8001550 <HAL_ADC_MspInit+0x80>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <HAL_ADC_MspInit+0x80>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_ADC_MspInit+0x80>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a0e      	ldr	r2, [pc, #56]	; (8001550 <HAL_ADC_MspInit+0x80>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_ADC_MspInit+0x80>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800152a:	2340      	movs	r3, #64	; 0x40
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152e:	2303      	movs	r3, #3
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4805      	ldr	r0, [pc, #20]	; (8001554 <HAL_ADC_MspInit+0x84>)
 800153e:	f006 fb63 	bl	8007c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001542:	bf00      	nop
 8001544:	3728      	adds	r7, #40	; 0x28
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40012000 	.word	0x40012000
 8001550:	40023800 	.word	0x40023800
 8001554:	40020000 	.word	0x40020000

08001558 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800155c:	f3bf 8f4f 	dsb	sy
}
 8001560:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <__NVIC_SystemReset+0x24>)
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800156a:	4904      	ldr	r1, [pc, #16]	; (800157c <__NVIC_SystemReset+0x24>)
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <__NVIC_SystemReset+0x28>)
 800156e:	4313      	orrs	r3, r2
 8001570:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001572:	f3bf 8f4f 	dsb	sy
}
 8001576:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <__NVIC_SystemReset+0x20>
 800157c:	e000ed00 	.word	0xe000ed00
 8001580:	05fa0004 	.word	0x05fa0004

08001584 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

	println("\r\nFREERTOS Init");
 8001588:	4821      	ldr	r0, [pc, #132]	; (8001610 <MX_FREERTOS_Init+0x8c>)
 800158a:	f7ff fd3f 	bl	800100c <println>
	print("\tInitializing the kernel...");
 800158e:	4821      	ldr	r0, [pc, #132]	; (8001614 <MX_FREERTOS_Init+0x90>)
 8001590:	f7ff fd5a 	bl	8001048 <print>
	osKernelInitialize();
 8001594:	f00b fe1e 	bl	800d1d4 <osKernelInitialize>
	println("OK");
 8001598:	481f      	ldr	r0, [pc, #124]	; (8001618 <MX_FREERTOS_Init+0x94>)
 800159a:	f7ff fd37 	bl	800100c <println>

	print("\tCreating the threads...");
 800159e:	481f      	ldr	r0, [pc, #124]	; (800161c <MX_FREERTOS_Init+0x98>)
 80015a0:	f7ff fd52 	bl	8001048 <print>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 80015a4:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <MX_FREERTOS_Init+0x9c>)
 80015a6:	2100      	movs	r1, #0
 80015a8:	481e      	ldr	r0, [pc, #120]	; (8001624 <MX_FREERTOS_Init+0xa0>)
 80015aa:	f00b fe5d 	bl	800d268 <osThreadNew>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <MX_FREERTOS_Init+0xa4>)
 80015b2:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 80015b4:	4a1d      	ldr	r2, [pc, #116]	; (800162c <MX_FREERTOS_Init+0xa8>)
 80015b6:	2100      	movs	r1, #0
 80015b8:	481d      	ldr	r0, [pc, #116]	; (8001630 <MX_FREERTOS_Init+0xac>)
 80015ba:	f00b fe55 	bl	800d268 <osThreadNew>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <MX_FREERTOS_Init+0xb0>)
 80015c2:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80015c4:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <MX_FREERTOS_Init+0xb4>)
 80015c6:	2100      	movs	r1, #0
 80015c8:	481c      	ldr	r0, [pc, #112]	; (800163c <MX_FREERTOS_Init+0xb8>)
 80015ca:	f00b fe4d 	bl	800d268 <osThreadNew>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <MX_FREERTOS_Init+0xbc>)
 80015d2:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80015d4:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <MX_FREERTOS_Init+0xc0>)
 80015d6:	2100      	movs	r1, #0
 80015d8:	481b      	ldr	r0, [pc, #108]	; (8001648 <MX_FREERTOS_Init+0xc4>)
 80015da:	f00b fe45 	bl	800d268 <osThreadNew>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a1a      	ldr	r2, [pc, #104]	; (800164c <MX_FREERTOS_Init+0xc8>)
 80015e2:	6013      	str	r3, [r2, #0]

  /* creation of WatchDog */
  WatchDogHandle = osThreadNew(StartWatchDog, NULL, &WatchDog_attributes);
 80015e4:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <MX_FREERTOS_Init+0xcc>)
 80015e6:	2100      	movs	r1, #0
 80015e8:	481a      	ldr	r0, [pc, #104]	; (8001654 <MX_FREERTOS_Init+0xd0>)
 80015ea:	f00b fe3d 	bl	800d268 <osThreadNew>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <MX_FREERTOS_Init+0xd4>)
 80015f2:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80015f4:	4a19      	ldr	r2, [pc, #100]	; (800165c <MX_FREERTOS_Init+0xd8>)
 80015f6:	2100      	movs	r1, #0
 80015f8:	4819      	ldr	r0, [pc, #100]	; (8001660 <MX_FREERTOS_Init+0xdc>)
 80015fa:	f00b fe35 	bl	800d268 <osThreadNew>
 80015fe:	4603      	mov	r3, r0
 8001600:	4a18      	ldr	r2, [pc, #96]	; (8001664 <MX_FREERTOS_Init+0xe0>)
 8001602:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  println("OK");
 8001604:	4804      	ldr	r0, [pc, #16]	; (8001618 <MX_FREERTOS_Init+0x94>)
 8001606:	f7ff fd01 	bl	800100c <println>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	0801662c 	.word	0x0801662c
 8001614:	0801663c 	.word	0x0801663c
 8001618:	08016658 	.word	0x08016658
 800161c:	0801665c 	.word	0x0801665c
 8001620:	08017414 	.word	0x08017414
 8001624:	08001669 	.word	0x08001669
 8001628:	20006090 	.word	0x20006090
 800162c:	08017438 	.word	0x08017438
 8001630:	080016f1 	.word	0x080016f1
 8001634:	200060a8 	.word	0x200060a8
 8001638:	0801745c 	.word	0x0801745c
 800163c:	08001ba5 	.word	0x08001ba5
 8001640:	200060ac 	.word	0x200060ac
 8001644:	08017480 	.word	0x08017480
 8001648:	08001ca1 	.word	0x08001ca1
 800164c:	200060b0 	.word	0x200060b0
 8001650:	080174a4 	.word	0x080174a4
 8001654:	08001d19 	.word	0x08001d19
 8001658:	2000608c 	.word	0x2000608c
 800165c:	080174c8 	.word	0x080174c8
 8001660:	08001f29 	.word	0x08001f29
 8001664:	200060b4 	.word	0x200060b4

08001668 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	//TODO UNTESTED

	//Add thread id to the list
	threadsID[0]=osThreadGetId();
 8001670:	f00b fe8d 	bl	800d38e <osThreadGetId>
 8001674:	4603      	mov	r3, r0
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <StartMemory0+0x68>)
 8001678:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  for(;;)
  {

	 //Get RTC time
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800167a:	2200      	movs	r2, #0
 800167c:	4915      	ldr	r1, [pc, #84]	; (80016d4 <StartMemory0+0x6c>)
 800167e:	4816      	ldr	r0, [pc, #88]	; (80016d8 <StartMemory0+0x70>)
 8001680:	f008 fdb8 	bl	800a1f4 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001684:	2200      	movs	r2, #0
 8001686:	4915      	ldr	r1, [pc, #84]	; (80016dc <StartMemory0+0x74>)
 8001688:	4813      	ldr	r0, [pc, #76]	; (80016d8 <StartMemory0+0x70>)
 800168a:	f008 feb8 	bl	800a3fe <HAL_RTC_GetDate>

	 //Update global variables
	 prev_hour = sTime.Hours;
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <StartMemory0+0x6c>)
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <StartMemory0+0x78>)
 8001694:	701a      	strb	r2, [r3, #0]
	 prev_min = sTime.Minutes;
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <StartMemory0+0x6c>)
 8001698:	785a      	ldrb	r2, [r3, #1]
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <StartMemory0+0x7c>)
 800169c:	701a      	strb	r2, [r3, #0]
	 prev_sec = sTime.Seconds;
 800169e:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <StartMemory0+0x6c>)
 80016a0:	789a      	ldrb	r2, [r3, #2]
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <StartMemory0+0x80>)
 80016a4:	701a      	strb	r2, [r3, #0]
	 if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <StartMemory0+0x70>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <StartMemory0+0x58>
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <StartMemory0+0x80>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <StartMemory0+0x80>)
 80016be:	701a      	strb	r2, [r3, #0]
	 prev_subsec = sTime.SubSeconds;
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <StartMemory0+0x6c>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a09      	ldr	r2, [pc, #36]	; (80016ec <StartMemory0+0x84>)
 80016c6:	6013      	str	r3, [r2, #0]
		sd_write(&fil, msg_buffer_pr);
	}
	f_close(&fil);
	#endif

	osDelay(1000/DATA_FREQ);
 80016c8:	2064      	movs	r0, #100	; 0x64
 80016ca:	f00b fefb 	bl	800d4c4 <osDelay>
	 HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80016ce:	e7d4      	b.n	800167a <StartMemory0+0x12>
 80016d0:	20006094 	.word	0x20006094
 80016d4:	200002d0 	.word	0x200002d0
 80016d8:	2000616c 	.word	0x2000616c
 80016dc:	200002e4 	.word	0x200002e4
 80016e0:	20000375 	.word	0x20000375
 80016e4:	20000376 	.word	0x20000376
 80016e8:	20000377 	.word	0x20000377
 80016ec:	20000378 	.word	0x20000378

080016f0 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b096      	sub	sp, #88	; 0x58
 80016f4:	af04      	add	r7, sp, #16
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */

	//Add thread id to the list
	threadsID[1]=osThreadGetId();
 80016f8:	f00b fe49 	bl	800d38e <osThreadGetId>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4ac6      	ldr	r2, [pc, #792]	; (8001a18 <StartEjection1+0x328>)
 8001700:	6053      	str	r3, [r2, #4]
	#if !EJECTION_THREAD
	osThreadExit();
	#endif

	//Double check the state TODO bad? (say wakeup flag is raised but ground isn't reached yet
	if (ejection_stage_flag >= LANDED)  osThreadExit(); //Ground reached
 8001702:	4bc6      	ldr	r3, [pc, #792]	; (8001a1c <StartEjection1+0x32c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d901      	bls.n	800170e <StartEjection1+0x1e>
 800170a:	f00b fea8 	bl	800d45e <osThreadExit>

	osDelay(5000); //Let the LPS "warm up" to have a valid pressure_hPa
 800170e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001712:	f00b fed7 	bl	800d4c4 <osDelay>

	//TODO put in setup.h?
	uint8_t counter = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t COUNTER_THRESHOLD = 500;
 800171c:	23f4      	movs	r3, #244	; 0xf4
 800171e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t ALT_ERROR_MARGIN = 10; //In meters
 8001722:	230a      	movs	r3, #10
 8001724:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t prev_alt = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  /* Infinite loop */
  for(;;)
  {
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 800172e:	4bbc      	ldr	r3, [pc, #752]	; (8001a20 <StartEjection1+0x330>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	eeb0 0a67 	vmov.f32	s0, s15
 8001738:	f002 f8f2 	bl	8003920 <MRT_getAltitude>
 800173c:	eef0 7a40 	vmov.f32	s15, s0
 8001740:	4bb8      	ldr	r3, [pc, #736]	; (8001a24 <StartEjection1+0x334>)
 8001742:	edc3 7a00 	vstr	s15, [r3]

	  //TODO UPDATE TRUE APOGEE (TESTING?)
	  if (altitude_m > rtc_bckp_reg_alt_true_apogee){
 8001746:	4bb8      	ldr	r3, [pc, #736]	; (8001a28 <StartEjection1+0x338>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001752:	4bb4      	ldr	r3, [pc, #720]	; (8001a24 <StartEjection1+0x334>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001760:	d514      	bpl.n	800178c <StartEjection1+0x9c>
		  rtc_bckp_reg_alt_true_apogee = altitude_m;
 8001762:	4bb0      	ldr	r3, [pc, #704]	; (8001a24 <StartEjection1+0x334>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800176c:	ee17 2a90 	vmov	r2, s15
 8001770:	4bad      	ldr	r3, [pc, #692]	; (8001a28 <StartEjection1+0x338>)
 8001772:	601a      	str	r2, [r3, #0]
		  rtc_bckp_reg_true_apogee_time = 100*prev_min + prev_sec;
 8001774:	4bad      	ldr	r3, [pc, #692]	; (8001a2c <StartEjection1+0x33c>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	2364      	movs	r3, #100	; 0x64
 800177c:	fb03 f302 	mul.w	r3, r3, r2
 8001780:	4aab      	ldr	r2, [pc, #684]	; (8001a30 <StartEjection1+0x340>)
 8001782:	7812      	ldrb	r2, [r2, #0]
 8001784:	4413      	add	r3, r2
 8001786:	461a      	mov	r2, r3
 8001788:	4baa      	ldr	r3, [pc, #680]	; (8001a34 <StartEjection1+0x344>)
 800178a:	601a      	str	r2, [r3, #0]
	  }

	  //TODO check for apogee (starting to go down or stagnating, add to counter)
	  if(altitude_m < prev_alt || MAX(altitude_m - prev_alt, prev_alt - altitude_m) < ALT_ERROR_MARGIN){
 800178c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001798:	4ba2      	ldr	r3, [pc, #648]	; (8001a24 <StartEjection1+0x334>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	dc3c      	bgt.n	8001822 <StartEjection1+0x132>
 80017a8:	4b9e      	ldr	r3, [pc, #632]	; (8001a24 <StartEjection1+0x334>)
 80017aa:	ed93 7a00 	vldr	s14, [r3]
 80017ae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017b2:	ee07 3a90 	vmov	s15, r3
 80017b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017be:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017ca:	4b96      	ldr	r3, [pc, #600]	; (8001a24 <StartEjection1+0x334>)
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80017d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017dc:	dd0b      	ble.n	80017f6 <StartEjection1+0x106>
 80017de:	4b91      	ldr	r3, [pc, #580]	; (8001a24 <StartEjection1+0x334>)
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f4:	e00a      	b.n	800180c <StartEjection1+0x11c>
 80017f6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001802:	4b88      	ldr	r3, [pc, #544]	; (8001a24 <StartEjection1+0x334>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ee77 7a67 	vsub.f32	s15, s14, s15
 800180c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001810:	ee07 3a10 	vmov	s14, r3
 8001814:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	d54f      	bpl.n	80018c2 <StartEjection1+0x1d2>
		  counter++;
 8001822:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001826:	3301      	adds	r3, #1
 8001828:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		  char buff[50];
		  sprintf(buff, "Alt: %i,  MAX:%i, counter: %i", altitude_m, MAX(altitude_m - prev_alt, prev_alt - altitude_m), counter);
 800182c:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <StartEjection1+0x334>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fe99 	bl	8000568 <__aeabi_f2d>
 8001836:	4604      	mov	r4, r0
 8001838:	460d      	mov	r5, r1
 800183a:	4b7a      	ldr	r3, [pc, #488]	; (8001a24 <StartEjection1+0x334>)
 800183c:	ed93 7a00 	vldr	s14, [r3]
 8001840:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001844:	ee07 3a90 	vmov	s15, r3
 8001848:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001850:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001854:	ee07 3a90 	vmov	s15, r3
 8001858:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800185c:	4b71      	ldr	r3, [pc, #452]	; (8001a24 <StartEjection1+0x334>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	dd0b      	ble.n	8001888 <StartEjection1+0x198>
 8001870:	4b6c      	ldr	r3, [pc, #432]	; (8001a24 <StartEjection1+0x334>)
 8001872:	ed93 7a00 	vldr	s14, [r3]
 8001876:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001886:	e00a      	b.n	800189e <StartEjection1+0x1ae>
 8001888:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001894:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <StartEjection1+0x334>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189e:	ee17 0a90 	vmov	r0, s15
 80018a2:	f7fe fe61 	bl	8000568 <__aeabi_f2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80018ae:	f107 000c 	add.w	r0, r7, #12
 80018b2:	9102      	str	r1, [sp, #8]
 80018b4:	e9cd 2300 	strd	r2, r3, [sp]
 80018b8:	4622      	mov	r2, r4
 80018ba:	462b      	mov	r3, r5
 80018bc:	495e      	ldr	r1, [pc, #376]	; (8001a38 <StartEjection1+0x348>)
 80018be:	f010 fdd3 	bl	8012468 <siprintf>
	  }

	  if (counter >= COUNTER_THRESHOLD || ejection_stage_flag >= DROGUE_DESCENT){
 80018c2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80018c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d204      	bcs.n	80018d8 <StartEjection1+0x1e8>
 80018ce:	4b53      	ldr	r3, [pc, #332]	; (8001a1c <StartEjection1+0x32c>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	f240 8143 	bls.w	8001b5e <StartEjection1+0x46e>

		  if (ejection_stage_flag < DROGUE_DESCENT){
 80018d8:	4b50      	ldr	r3, [pc, #320]	; (8001a1c <StartEjection1+0x32c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d827      	bhi.n	8001930 <StartEjection1+0x240>

			  //TODO update value to be saved in rtc bckp registers
			  rtc_bckp_reg_alt_apogee = altitude_m;
 80018e0:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <StartEjection1+0x334>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ea:	ee17 2a90 	vmov	r2, s15
 80018ee:	4b53      	ldr	r3, [pc, #332]	; (8001a3c <StartEjection1+0x34c>)
 80018f0:	601a      	str	r2, [r3, #0]
			  rtc_bckp_reg_apogee_time = 100*prev_min + prev_sec;
 80018f2:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <StartEjection1+0x33c>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	2364      	movs	r3, #100	; 0x64
 80018fa:	fb03 f302 	mul.w	r3, r3, r2
 80018fe:	4a4c      	ldr	r2, [pc, #304]	; (8001a30 <StartEjection1+0x340>)
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	4413      	add	r3, r2
 8001904:	461a      	mov	r2, r3
 8001906:	4b4e      	ldr	r3, [pc, #312]	; (8001a40 <StartEjection1+0x350>)
 8001908:	601a      	str	r2, [r3, #0]

			  //Update state (save the state in WatchDog thread)
			  ejection_stage_flag = DROGUE_DESCENT;
 800190a:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <StartEjection1+0x32c>)
 800190c:	2202      	movs	r2, #2
 800190e:	701a      	strb	r2, [r3, #0]
			  apogee_flag = 1; //Apogee reached //TODO is it where we change it???
 8001910:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <StartEjection1+0x354>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
			  wd_ejection_flag = 1; //Raise the flag
 8001916:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <StartEjection1+0x358>)
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]

			  println("Eject Drogue");
 800191c:	484b      	ldr	r0, [pc, #300]	; (8001a4c <StartEjection1+0x35c>)
 800191e:	f7ff fb75 	bl	800100c <println>
		  }

		  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
		  //TODO should I put a while loop, a foor loop or just "one time functions"?
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001922:	e005      	b.n	8001930 <StartEjection1+0x240>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800192a:	4849      	ldr	r0, [pc, #292]	; (8001a50 <StartEjection1+0x360>)
 800192c:	f006 fb30 	bl	8007f90 <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001930:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001934:	4846      	ldr	r0, [pc, #280]	; (8001a50 <StartEjection1+0x360>)
 8001936:	f006 fb13 	bl	8007f60 <HAL_GPIO_ReadPin>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f1      	beq.n	8001924 <StartEjection1+0x234>
		  }
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 8001940:	e005      	b.n	800194e <StartEjection1+0x25e>
			  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, SET); //PG12 DROGUE GATE
 8001942:	2201      	movs	r2, #1
 8001944:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001948:	4841      	ldr	r0, [pc, #260]	; (8001a50 <StartEjection1+0x360>)
 800194a:	f006 fb21 	bl	8007f90 <HAL_GPIO_WritePin>
		  while(!HAL_GPIO_ReadPin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin)){
 800194e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001952:	483f      	ldr	r0, [pc, #252]	; (8001a50 <StartEjection1+0x360>)
 8001954:	f006 fb04 	bl	8007f60 <HAL_GPIO_ReadPin>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f1      	beq.n	8001942 <StartEjection1+0x252>
		  }
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800195e:	e005      	b.n	800196c <StartEjection1+0x27c>
			  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8001960:	2200      	movs	r2, #0
 8001962:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001966:	483a      	ldr	r0, [pc, #232]	; (8001a50 <StartEjection1+0x360>)
 8001968:	f006 fb12 	bl	8007f90 <HAL_GPIO_WritePin>
		  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 800196c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001970:	4837      	ldr	r0, [pc, #220]	; (8001a50 <StartEjection1+0x360>)
 8001972:	f006 faf5 	bl	8007f60 <HAL_GPIO_ReadPin>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f1      	bne.n	8001960 <StartEjection1+0x270>
		  }

		  for(;;){

			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 800197c:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <StartEjection1+0x330>)
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	eeb0 0a67 	vmov.f32	s0, s15
 8001986:	f001 ffcb 	bl	8003920 <MRT_getAltitude>
 800198a:	eef0 7a40 	vmov.f32	s15, s0
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <StartEjection1+0x334>)
 8001990:	edc3 7a00 	vstr	s15, [r3]

			  //We reached main deployment altitude
			  if (altitude_m < DEPLOY_ALT || ejection_stage_flag >= MAIN_DESCENT){
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <StartEjection1+0x334>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001a54 <StartEjection1+0x364>
 800199e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	d404      	bmi.n	80019b2 <StartEjection1+0x2c2>
 80019a8:	4b1c      	ldr	r3, [pc, #112]	; (8001a1c <StartEjection1+0x32c>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	f240 80d2 	bls.w	8001b56 <StartEjection1+0x466>

				  if (ejection_stage_flag < MAIN_DESCENT){
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <StartEjection1+0x32c>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d824      	bhi.n	8001a04 <StartEjection1+0x314>

					  //TODO update value to be saved in rtc bckp registers
					  rtc_bckp_reg_alt_main = altitude_m;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <StartEjection1+0x334>)
 80019bc:	edd3 7a00 	vldr	s15, [r3]
 80019c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019c4:	ee17 2a90 	vmov	r2, s15
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <StartEjection1+0x368>)
 80019ca:	601a      	str	r2, [r3, #0]
					  rtc_bckp_reg_main_time = 100*prev_min + prev_sec;
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <StartEjection1+0x33c>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	2364      	movs	r3, #100	; 0x64
 80019d4:	fb03 f302 	mul.w	r3, r3, r2
 80019d8:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <StartEjection1+0x340>)
 80019da:	7812      	ldrb	r2, [r2, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	461a      	mov	r2, r3
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <StartEjection1+0x36c>)
 80019e2:	601a      	str	r2, [r3, #0]

					  //Update state (save the state in WatchDog thread)
					  ejection_stage_flag = MAIN_DESCENT;
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <StartEjection1+0x32c>)
 80019e6:	2203      	movs	r2, #3
 80019e8:	701a      	strb	r2, [r3, #0]
					  wd_ejection_flag = 1; //Raise the flag
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <StartEjection1+0x358>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]

					  println("Eject Main");
 80019f0:	481b      	ldr	r0, [pc, #108]	; (8001a60 <StartEjection1+0x370>)
 80019f2:	f7ff fb0b 	bl	800100c <println>
				  }

				  //Put outside of "if" such that we only need to remember the ejection stage instead if it + arming state
				  //TODO should I put a while loop, a foor loop or just "one time functions"?
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 80019f6:	e005      	b.n	8001a04 <StartEjection1+0x314>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019fe:	4814      	ldr	r0, [pc, #80]	; (8001a50 <StartEjection1+0x360>)
 8001a00:	f006 fac6 	bl	8007f90 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a08:	4811      	ldr	r0, [pc, #68]	; (8001a50 <StartEjection1+0x360>)
 8001a0a:	f006 faa9 	bl	8007f60 <HAL_GPIO_ReadPin>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f1      	beq.n	80019f8 <StartEjection1+0x308>
				  }
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001a14:	e02c      	b.n	8001a70 <StartEjection1+0x380>
 8001a16:	bf00      	nop
 8001a18:	20006094 	.word	0x20006094
 8001a1c:	20000374 	.word	0x20000374
 8001a20:	200003b8 	.word	0x200003b8
 8001a24:	200002c8 	.word	0x200002c8
 8001a28:	2000033c 	.word	0x2000033c
 8001a2c:	20000376 	.word	0x20000376
 8001a30:	20000377 	.word	0x20000377
 8001a34:	20000340 	.word	0x20000340
 8001a38:	08016678 	.word	0x08016678
 8001a3c:	20000344 	.word	0x20000344
 8001a40:	20000348 	.word	0x20000348
 8001a44:	20000373 	.word	0x20000373
 8001a48:	200002cc 	.word	0x200002cc
 8001a4c:	08016698 	.word	0x08016698
 8001a50:	40021800 	.word	0x40021800
 8001a54:	44fa0000 	.word	0x44fa0000
 8001a58:	2000034c 	.word	0x2000034c
 8001a5c:	20000350 	.word	0x20000350
 8001a60:	080166a8 	.word	0x080166a8
					  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, SET); //PG11 MAIN GATE
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a6a:	4844      	ldr	r0, [pc, #272]	; (8001b7c <StartEjection1+0x48c>)
 8001a6c:	f006 fa90 	bl	8007f90 <HAL_GPIO_WritePin>
				  while(!HAL_GPIO_ReadPin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin)){
 8001a70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a74:	4841      	ldr	r0, [pc, #260]	; (8001b7c <StartEjection1+0x48c>)
 8001a76:	f006 fa73 	bl	8007f60 <HAL_GPIO_ReadPin>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f1      	beq.n	8001a64 <StartEjection1+0x374>
				  }
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a80:	e005      	b.n	8001a8e <StartEjection1+0x39e>
					  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, RESET); //PG14 ARMING RCOV
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a88:	483c      	ldr	r0, [pc, #240]	; (8001b7c <StartEjection1+0x48c>)
 8001a8a:	f006 fa81 	bl	8007f90 <HAL_GPIO_WritePin>
				  while(HAL_GPIO_ReadPin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin)){
 8001a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a92:	483a      	ldr	r0, [pc, #232]	; (8001b7c <StartEjection1+0x48c>)
 8001a94:	f006 fa64 	bl	8007f60 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f1      	bne.n	8001a82 <StartEjection1+0x392>
				  }

				  uint8_t prev_altitude = 0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				  uint8_t cur_altitude = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
				  uint8_t counter = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
				  while(counter < 5){
 8001ab0:	e02d      	b.n	8001b0e <StartEjection1+0x41e>
					  cur_altitude = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001ab2:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <StartEjection1+0x490>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	f001 ff30 	bl	8003920 <MRT_getAltitude>
 8001ac0:	eef0 7a40 	vmov.f32	s15, s0
 8001ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac8:	edc7 7a00 	vstr	s15, [r7]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
					  if (cur_altitude - prev_altitude < 1 && cur_altitude - prev_altitude > -1){ //TODO might need a bigger range to account for errors (gotta know what we expect to be our slowest descent speed)
 8001ad2:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001ad6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	dc0c      	bgt.n	8001afa <StartEjection1+0x40a>
 8001ae0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8001ae4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db05      	blt.n	8001afa <StartEjection1+0x40a>
						  counter++;
 8001aee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001af2:	3301      	adds	r3, #1
 8001af4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8001af8:	e002      	b.n	8001b00 <StartEjection1+0x410>
					  }
					  else{
						  counter = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					  }
					  prev_altitude = cur_altitude;
 8001b00:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001b04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					  osDelay(100);
 8001b08:	2064      	movs	r0, #100	; 0x64
 8001b0a:	f00b fcdb 	bl	800d4c4 <osDelay>
				  while(counter < 5){
 8001b0e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d9cd      	bls.n	8001ab2 <StartEjection1+0x3c2>
				  }

				  //TODO update value to be saved in rtc bckp registers
				  rtc_bckp_reg_alt_landed = altitude_m;
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <StartEjection1+0x494>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b20:	ee17 2a90 	vmov	r2, s15
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <StartEjection1+0x498>)
 8001b26:	601a      	str	r2, [r3, #0]
				  rtc_bckp_reg_landed_time = 100*prev_min + prev_sec;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <StartEjection1+0x49c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	2364      	movs	r3, #100	; 0x64
 8001b30:	fb03 f302 	mul.w	r3, r3, r2
 8001b34:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <StartEjection1+0x4a0>)
 8001b36:	7812      	ldrb	r2, [r2, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <StartEjection1+0x4a4>)
 8001b3e:	601a      	str	r2, [r3, #0]

				  //Update state (saved state in WatchDog thread)
				  ejection_stage_flag = LANDED;
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <StartEjection1+0x4a8>)
 8001b42:	2204      	movs	r2, #4
 8001b44:	701a      	strb	r2, [r3, #0]
				  wd_ejection_flag = 1;
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <StartEjection1+0x4ac>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]

				  println("Ground Level Reached");
 8001b4c:	4814      	ldr	r0, [pc, #80]	; (8001ba0 <StartEjection1+0x4b0>)
 8001b4e:	f7ff fa5d 	bl	800100c <println>
				  osThreadExit();
 8001b52:	f00b fc84 	bl	800d45e <osThreadExit>

			  }

			  osDelay(10);
 8001b56:	200a      	movs	r0, #10
 8001b58:	f00b fcb4 	bl	800d4c4 <osDelay>
			  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001b5c:	e70e      	b.n	800197c <StartEjection1+0x28c>
		  }
	  }


	  //Update previous altitude
	  prev_alt = altitude_m;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <StartEjection1+0x494>)
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b68:	edc7 7a00 	vstr	s15, [r7]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	  osDelay(10);
 8001b72:	200a      	movs	r0, #10
 8001b74:	f00b fca6 	bl	800d4c4 <osDelay>
	  altitude_m = MRT_getAltitude(hlps22hh.pressure_hPa);
 8001b78:	e5d9      	b.n	800172e <StartEjection1+0x3e>
 8001b7a:	bf00      	nop
 8001b7c:	40021800 	.word	0x40021800
 8001b80:	200003b8 	.word	0x200003b8
 8001b84:	200002c8 	.word	0x200002c8
 8001b88:	20000354 	.word	0x20000354
 8001b8c:	20000376 	.word	0x20000376
 8001b90:	20000377 	.word	0x20000377
 8001b94:	20000358 	.word	0x20000358
 8001b98:	20000374 	.word	0x20000374
 8001b9c:	200002cc 	.word	0x200002cc
 8001ba0:	080166b4 	.word	0x080166b4

08001ba4 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b0c4      	sub	sp, #272	; 0x110
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadsID[2]=osThreadGetId();
 8001bae:	f00b fbee 	bl	800d38e <osThreadGetId>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a35      	ldr	r2, [pc, #212]	; (8001c8c <StartTelemetry2+0xe8>)
 8001bb6:	6093      	str	r3, [r2, #8]
	#if !TELEMETRY_THREAD
	osThreadExit();
	#endif

	char radio_buffer[RADIO_BUFFER_SIZE];
	uint8_t counter = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	uint8_t iridium_counter = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	2108      	movs	r1, #8
 8001bc8:	4831      	ldr	r0, [pc, #196]	; (8001c90 <StartTelemetry2+0xec>)
 8001bca:	f006 f9e1 	bl	8007f90 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001bce:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <StartTelemetry2+0xf0>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <StartTelemetry2+0x3a>
		  osDelay(1000/POST_APOGEE_SEND_FREQ);
 8001bd6:	200a      	movs	r0, #10
 8001bd8:	f00b fc74 	bl	800d4c4 <osDelay>
 8001bdc:	e01b      	b.n	8001c16 <StartTelemetry2+0x72>
	  }
	  else{ //Only send prop data pre-apogee
		  //Send propulsion data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f00f fbbf 	bl	801136c <memset>
		  MRT_formatPropulsion();
 8001bee:	f003 f91d 	bl	8004e2c <MRT_formatPropulsion>
		  memcpy(radio_buffer, msg_buffer_pr, strlen(msg_buffer_pr));
 8001bf2:	4829      	ldr	r0, [pc, #164]	; (8001c98 <StartTelemetry2+0xf4>)
 8001bf4:	f7fe fafc 	bl	80001f0 <strlen>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4926      	ldr	r1, [pc, #152]	; (8001c98 <StartTelemetry2+0xf4>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00f fb8b 	bl	801131c <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 fa48 	bl	80070a0 <MRT_radio_tx>

		  osDelay(1000/PRE_APOGEE_SEND_FREQ);
 8001c10:	2014      	movs	r0, #20
 8001c12:	f00b fc57 	bl	800d4c4 <osDelay>
	  }

	  if (counter == SENSORS_SEND_FREQ_DIVIDER){
 8001c16:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c1a:	2b0a      	cmp	r3, #10
 8001c1c:	d12b      	bne.n	8001c76 <StartTelemetry2+0xd2>
		  counter = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		  float SEC = (uint8_t) time % 60; sprintf(&SEC,"%.0f",SEC);
		  float SUBSEC = time / 3600.0; sprintf(&SUBSEC,"%.0f",SUBSEC);
		  */

	  	  //Send sensors data
		  memset(radio_buffer, 0, RADIO_BUFFER_SIZE);
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f00f fb9c 	bl	801136c <memset>
		  MRT_formatAvionics();
 8001c34:	f001 fef6 	bl	8003a24 <MRT_formatAvionics>
		  memcpy(radio_buffer, msg_buffer_av, strlen(msg_buffer_av));
 8001c38:	4818      	ldr	r0, [pc, #96]	; (8001c9c <StartTelemetry2+0xf8>)
 8001c3a:	f7fe fad9 	bl	80001f0 <strlen>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	4915      	ldr	r1, [pc, #84]	; (8001c9c <StartTelemetry2+0xf8>)
 8001c46:	4618      	mov	r0, r3
 8001c48:	f00f fb68 	bl	801131c <memcpy>
		  MRT_radio_tx((char*) radio_buffer);
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	4618      	mov	r0, r3
 8001c52:	f005 fa25 	bl	80070a0 <MRT_radio_tx>


		  if(apogee_flag && iridium_counter == IRIDIUM_SEND_FREQ_DIVIDER){
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <StartTelemetry2+0xf0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <StartTelemetry2+0xc8>
 8001c5e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001c62:	2b05      	cmp	r3, #5
 8001c64:	d102      	bne.n	8001c6c <StartTelemetry2+0xc8>
			  iridium_counter = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
			  #if IRIDIUM_ //Iridium send
			  hiridium.getTime(); //TODO doesn't cost anything
			  //hiridium.sendMessage(msg); TODO IT COSTS CREDITS WATCH OUT
			  #endif
		  }
		  iridium_counter++;
 8001c6c:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8001c70:	3301      	adds	r3, #1
 8001c72:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	  }
	  counter++;
 8001c76:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f


	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2108      	movs	r1, #8
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <StartTelemetry2+0xec>)
 8001c86:	f006 f983 	bl	8007f90 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 8001c8a:	e79b      	b.n	8001bc4 <StartTelemetry2+0x20>
 8001c8c:	20006094 	.word	0x20006094
 8001c90:	40020800 	.word	0x40020800
 8001c94:	20000373 	.word	0x20000373
 8001c98:	200064f8 	.word	0x200064f8
 8001c9c:	200063f0 	.word	0x200063f0

08001ca0 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	//Add thread id to the list
	threadsID[3]=osThreadGetId();
 8001ca8:	f00b fb71 	bl	800d38e <osThreadGetId>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <StartSensors3+0x5c>)
 8001cb0:	60d3      	str	r3, [r2, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	4812      	ldr	r0, [pc, #72]	; (8001d00 <StartSensors3+0x60>)
 8001cb8:	f006 f96a 	bl	8007f90 <HAL_GPIO_WritePin>

	  //GPS
	  hgps.pollAll();
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <StartSensors3+0x64>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4798      	blx	r3

	  //LSM6DSR
	  hlsm6dsr.pollAll();
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <StartSensors3+0x68>)
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	4798      	blx	r3

	  //LPS22HH
	  hlps22hh.pollAll();
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <StartSensors3+0x6c>)
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	4798      	blx	r3

	  //Gates continuity
	  gates_continuity = MRT_getContinuity();
 8001cce:	f001 fe75 	bl	80039bc <MRT_getContinuity>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <StartSensors3+0x70>)
 8001cd8:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2102      	movs	r1, #2
 8001cde:	4808      	ldr	r0, [pc, #32]	; (8001d00 <StartSensors3+0x60>)
 8001ce0:	f006 f956 	bl	8007f90 <HAL_GPIO_WritePin>

	  if (apogee_flag){
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <StartSensors3+0x74>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <StartSensors3+0x54>
		  osDelay(1000/POST_APOGEE_POLL_FREQ);
 8001cec:	200a      	movs	r0, #10
 8001cee:	f00b fbe9 	bl	800d4c4 <osDelay>
 8001cf2:	e7de      	b.n	8001cb2 <StartSensors3+0x12>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001cf4:	2014      	movs	r0, #20
 8001cf6:	f00b fbe5 	bl	800d4c4 <osDelay>
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, SET);
 8001cfa:	e7da      	b.n	8001cb2 <StartSensors3+0x12>
 8001cfc:	20006094 	.word	0x20006094
 8001d00:	40020800 	.word	0x40020800
 8001d04:	200003cc 	.word	0x200003cc
 8001d08:	2000038c 	.word	0x2000038c
 8001d0c:	200003b8 	.word	0x200003b8
 8001d10:	2000035f 	.word	0x2000035f
 8001d14:	20000373 	.word	0x20000373

08001d18 <StartWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchDog */
void StartWatchDog(void *argument)
{
 8001d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d1c:	b0c6      	sub	sp, #280	; 0x118
 8001d1e:	af04      	add	r7, sp, #16
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	6018      	str	r0, [r3, #0]
	char buffer[WD_BUFFER_SIZE];

  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001d24:	2201      	movs	r2, #1
 8001d26:	2104      	movs	r1, #4
 8001d28:	4860      	ldr	r0, [pc, #384]	; (8001eac <StartWatchDog+0x194>)
 8001d2a:	f006 f931 	bl	8007f90 <HAL_GPIO_WritePin>

	 HAL_IWDG_Refresh(&hiwdg);
 8001d2e:	4860      	ldr	r0, [pc, #384]	; (8001eb0 <StartWatchDog+0x198>)
 8001d30:	f007 fa12 	bl	8009158 <HAL_IWDG_Refresh>
	 uint64_t* i = 0x20CDCDCD;
	 *i = 10;
	#endif

	 //TODO remove for comp
	 memset(buffer, 0, WD_BUFFER_SIZE);
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f00f fb14 	bl	801136c <memset>
	 sprintf(buffer, "Time: %i:%i:%i ::%lu	Altitude: \r\n %f\r\n", prev_hour,prev_min,prev_sec,prev_subsec , altitude_m);
 8001d44:	4b5b      	ldr	r3, [pc, #364]	; (8001eb4 <StartWatchDog+0x19c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461e      	mov	r6, r3
 8001d4a:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <StartWatchDog+0x1a0>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	4698      	mov	r8, r3
 8001d50:	4b5a      	ldr	r3, [pc, #360]	; (8001ebc <StartWatchDog+0x1a4>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461d      	mov	r5, r3
 8001d56:	4b5a      	ldr	r3, [pc, #360]	; (8001ec0 <StartWatchDog+0x1a8>)
 8001d58:	681c      	ldr	r4, [r3, #0]
 8001d5a:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <StartWatchDog+0x1ac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fc02 	bl	8000568 <__aeabi_f2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	f107 0008 	add.w	r0, r7, #8
 8001d6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d70:	9401      	str	r4, [sp, #4]
 8001d72:	9500      	str	r5, [sp, #0]
 8001d74:	4643      	mov	r3, r8
 8001d76:	4632      	mov	r2, r6
 8001d78:	4953      	ldr	r1, [pc, #332]	; (8001ec8 <StartWatchDog+0x1b0>)
 8001d7a:	f010 fb75 	bl	8012468 <siprintf>
	 println((char*) buffer);
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f942 	bl	800100c <println>


	 //Check if new ejection stage to save in memory
	 if(wd_ejection_flag == 1){
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <StartWatchDog+0x1b4>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d15d      	bne.n	8001e4c <StartWatchDog+0x134>

		wd_ejection_flag = 0;
 8001d90:	4b4e      	ldr	r3, [pc, #312]	; (8001ecc <StartWatchDog+0x1b4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]

		//Update ejection stage flag and save it
		rtc_bckp_reg_ejection_stage = ejection_stage_flag;
 8001d96:	4b4e      	ldr	r3, [pc, #312]	; (8001ed0 <StartWatchDog+0x1b8>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b4d      	ldr	r3, [pc, #308]	; (8001ed4 <StartWatchDog+0x1bc>)
 8001d9e:	601a      	str	r2, [r3, #0]
		ext_flash_ejection_stage = ejection_stage_flag;
 8001da0:	4b4b      	ldr	r3, [pc, #300]	; (8001ed0 <StartWatchDog+0x1b8>)
 8001da2:	781a      	ldrb	r2, [r3, #0]
 8001da4:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <StartWatchDog+0x1c0>)
 8001da6:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_FLIGHT);
 8001da8:	2004      	movs	r0, #4
 8001daa:	f001 ff8b 	bl	8003cc4 <MRT_saveFlagValue>

		//If applicable, update apogee flag
		if (ejection_stage_flag >= DROGUE_DESCENT){
 8001dae:	4b48      	ldr	r3, [pc, #288]	; (8001ed0 <StartWatchDog+0x1b8>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d90e      	bls.n	8001dd4 <StartWatchDog+0xbc>
			apogee_flag = 1;
 8001db6:	4b49      	ldr	r3, [pc, #292]	; (8001edc <StartWatchDog+0x1c4>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
			rtc_bckp_reg_apogee = apogee_flag;
 8001dbc:	4b47      	ldr	r3, [pc, #284]	; (8001edc <StartWatchDog+0x1c4>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b47      	ldr	r3, [pc, #284]	; (8001ee0 <StartWatchDog+0x1c8>)
 8001dc4:	601a      	str	r2, [r3, #0]
			ext_flash_apogee = apogee_flag;
 8001dc6:	4b45      	ldr	r3, [pc, #276]	; (8001edc <StartWatchDog+0x1c4>)
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <StartWatchDog+0x1cc>)
 8001dcc:	701a      	strb	r2, [r3, #0]
			MRT_saveFlagValue(FC_STATE_APOGEE);
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f001 ff78 	bl	8003cc4 <MRT_saveFlagValue>
		}

		//TODO TESTING SAVE EVERY ALT REGISTERS
		MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 8001dd4:	4b44      	ldr	r3, [pc, #272]	; (8001ee8 <StartWatchDog+0x1d0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	2009      	movs	r0, #9
 8001ddc:	f001 f8b8 	bl	8002f50 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 8001de0:	4b42      	ldr	r3, [pc, #264]	; (8001eec <StartWatchDog+0x1d4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	200a      	movs	r0, #10
 8001de8:	f001 f8b2 	bl	8002f50 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_TRUE_APOGEE, rtc_bckp_reg_alt_true_apogee);
 8001dec:	4b40      	ldr	r3, [pc, #256]	; (8001ef0 <StartWatchDog+0x1d8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4619      	mov	r1, r3
 8001df2:	200b      	movs	r0, #11
 8001df4:	f001 f8ac 	bl	8002f50 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_TRUE_APOGEE_TIME, rtc_bckp_reg_true_apogee_time);
 8001df8:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <StartWatchDog+0x1dc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	200c      	movs	r0, #12
 8001e00:	f001 f8a6 	bl	8002f50 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_APOGEE, rtc_bckp_reg_alt_apogee);
 8001e04:	4b3c      	ldr	r3, [pc, #240]	; (8001ef8 <StartWatchDog+0x1e0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	200d      	movs	r0, #13
 8001e0c:	f001 f8a0 	bl	8002f50 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_APOGEE_TIME, rtc_bckp_reg_apogee_time);
 8001e10:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <StartWatchDog+0x1e4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	200e      	movs	r0, #14
 8001e18:	f001 f89a 	bl	8002f50 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_MAIN, rtc_bckp_reg_alt_main);
 8001e1c:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <StartWatchDog+0x1e8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	200f      	movs	r0, #15
 8001e24:	f001 f894 	bl	8002f50 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_MAIN_TIME, rtc_bckp_reg_main_time);
 8001e28:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <StartWatchDog+0x1ec>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2010      	movs	r0, #16
 8001e30:	f001 f88e 	bl	8002f50 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_STATE_ALT_LANDED, rtc_bckp_reg_alt_landed);
 8001e34:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <StartWatchDog+0x1f0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	2011      	movs	r0, #17
 8001e3c:	f001 f888 	bl	8002f50 <MRT_RTC_setBackupReg>
		MRT_RTC_setBackupReg(FC_LANDED_TIME, rtc_bckp_reg_landed_time);
 8001e40:	4b32      	ldr	r3, [pc, #200]	; (8001f0c <StartWatchDog+0x1f4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	2012      	movs	r0, #18
 8001e48:	f001 f882 	bl	8002f50 <MRT_RTC_setBackupReg>
	 }

	  //Check if it's sleep time
	  if (flagA==1 || flagB==1){
 8001e4c:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <StartWatchDog+0x1f8>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d003      	beq.n	8001e5c <StartWatchDog+0x144>
 8001e54:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <StartWatchDog+0x1fc>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d112      	bne.n	8001e82 <StartWatchDog+0x16a>
		//Update iwdg_flag
		iwdg_flag = 1;
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <StartWatchDog+0x200>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_iwdg = iwdg_flag;
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <StartWatchDog+0x200>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <StartWatchDog+0x204>)
 8001e6a:	601a      	str	r2, [r3, #0]
		ext_flash_iwdg = iwdg_flag;
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <StartWatchDog+0x200>)
 8001e6e:	781a      	ldrb	r2, [r3, #0]
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <StartWatchDog+0x208>)
 8001e72:	701a      	strb	r2, [r3, #0]
		MRT_saveFlagValue(FC_STATE_IWDG);
 8001e74:	2002      	movs	r0, #2
 8001e76:	f001 ff25 	bl	8003cc4 <MRT_saveFlagValue>

		//Save the RTC time
		MRT_saveTotalTime();
 8001e7a:	f001 ffaf 	bl	8003ddc <MRT_saveTotalTime>

		//Reset to deactivate IWDG
		NVIC_SystemReset();
 8001e7e:	f7ff fb6b 	bl	8001558 <__NVIC_SystemReset>
	  }

	  //Save the RTC time
	  MRT_saveTotalTime();
 8001e82:	f001 ffab 	bl	8003ddc <MRT_saveTotalTime>


	  //Check for complete restart
	  if(restart_flag == 1){
 8001e86:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <StartWatchDog+0x20c>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <StartWatchDog+0x17a>
		  MRT_resetFromStart();
 8001e8e:	f001 fb03 	bl	8003498 <MRT_resetFromStart>
	  }

	  MRT_checkThreadStates();
 8001e92:	f000 f86f 	bl	8001f74 <MRT_checkThreadStates>

	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2104      	movs	r1, #4
 8001e9a:	4804      	ldr	r0, [pc, #16]	; (8001eac <StartWatchDog+0x194>)
 8001e9c:	f006 f878 	bl	8007f90 <HAL_GPIO_WritePin>

	  osDelay(1000/WD_FREQ);
 8001ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ea4:	f00b fb0e 	bl	800d4c4 <osDelay>
	 HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 8001ea8:	e73c      	b.n	8001d24 <StartWatchDog+0xc>
 8001eaa:	bf00      	nop
 8001eac:	40020800 	.word	0x40020800
 8001eb0:	20006160 	.word	0x20006160
 8001eb4:	20000375 	.word	0x20000375
 8001eb8:	20000376 	.word	0x20000376
 8001ebc:	20000377 	.word	0x20000377
 8001ec0:	20000378 	.word	0x20000378
 8001ec4:	200002c8 	.word	0x200002c8
 8001ec8:	080166cc 	.word	0x080166cc
 8001ecc:	200002cc 	.word	0x200002cc
 8001ed0:	20000374 	.word	0x20000374
 8001ed4:	20000320 	.word	0x20000320
 8001ed8:	20000364 	.word	0x20000364
 8001edc:	20000373 	.word	0x20000373
 8001ee0:	2000031c 	.word	0x2000031c
 8001ee4:	20000363 	.word	0x20000363
 8001ee8:	20000334 	.word	0x20000334
 8001eec:	20000338 	.word	0x20000338
 8001ef0:	2000033c 	.word	0x2000033c
 8001ef4:	20000340 	.word	0x20000340
 8001ef8:	20000344 	.word	0x20000344
 8001efc:	20000348 	.word	0x20000348
 8001f00:	2000034c 	.word	0x2000034c
 8001f04:	20000350 	.word	0x20000350
 8001f08:	20000354 	.word	0x20000354
 8001f0c:	20000358 	.word	0x20000358
 8001f10:	2000035c 	.word	0x2000035c
 8001f14:	2000035d 	.word	0x2000035d
 8001f18:	20000372 	.word	0x20000372
 8001f1c:	20000318 	.word	0x20000318
 8001f20:	20000362 	.word	0x20000362
 8001f24:	2000035e 	.word	0x2000035e

08001f28 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */

	//Add thread id to the list
	threadsID[4]=osThreadGetId();
 8001f30:	f00b fa2d 	bl	800d38e <osThreadGetId>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <StartPropulsion4+0x40>)
 8001f38:	6113      	str	r3, [r2, #16]

	#if !PROPULSION_THREAD
	osThreadExit();
	#endif

	if (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT){
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <StartPropulsion4+0x44>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d103      	bne.n	8001f4a <StartPropulsion4+0x22>
 8001f42:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <StartPropulsion4+0x48>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d901      	bls.n	8001f4e <StartPropulsion4+0x26>
		osThreadExit();
 8001f4a:	f00b fa88 	bl	800d45e <osThreadExit>

  /* Infinite loop */
  for(;;)
  {
	  //Poll propulsion sensors
	  MRT_pollPropulsion();
 8001f4e:	f002 ff35 	bl	8004dbc <MRT_pollPropulsion>

	  if (apogee_flag){
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <StartPropulsion4+0x44>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <StartPropulsion4+0x36>
		  osThreadExit();
 8001f5a:	f00b fa80 	bl	800d45e <osThreadExit>
	  }
	  else{
		  osDelay(1000/PRE_APOGEE_POLL_FREQ);
 8001f5e:	2014      	movs	r0, #20
 8001f60:	f00b fab0 	bl	800d4c4 <osDelay>
	  MRT_pollPropulsion();
 8001f64:	e7f3      	b.n	8001f4e <StartPropulsion4+0x26>
 8001f66:	bf00      	nop
 8001f68:	20006094 	.word	0x20006094
 8001f6c:	20000373 	.word	0x20000373
 8001f70:	20000374 	.word	0x20000374

08001f74 <MRT_checkThreadStates>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

//TODO private functions

void MRT_checkThreadStates(void){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
	  //Check each thread state
	  #if THREAD_KEEPER

	  osThreadState_t thread_state;

	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	e055      	b.n	800202c <MRT_checkThreadStates+0xb8>

		  thread_state = osThreadGetState(threadsID[i]);
 8001f80:	4a2e      	ldr	r2, [pc, #184]	; (800203c <MRT_checkThreadStates+0xc8>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f00b fa0b 	bl	800d3a4 <osThreadGetState>
 8001f8e:	6038      	str	r0, [r7, #0]

		  if (thread_state == osThreadInactive ||
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <MRT_checkThreadStates+0x2e>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d002      	beq.n	8001fa2 <MRT_checkThreadStates+0x2e>
			  thread_state == osThreadBlocked  ||
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b04      	cmp	r3, #4
 8001fa0:	d128      	bne.n	8001ff4 <MRT_checkThreadStates+0x80>
			  thread_state == osThreadTerminated){

			  //Ejection thread
			  if (i==1 && ejection_stage_flag < LANDED){
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d10a      	bne.n	8001fbe <MRT_checkThreadStates+0x4a>
 8001fa8:	4b25      	ldr	r3, [pc, #148]	; (8002040 <MRT_checkThreadStates+0xcc>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d806      	bhi.n	8001fbe <MRT_checkThreadStates+0x4a>
				 osThreadResume(threadsID[i]);
 8001fb0:	4a22      	ldr	r2, [pc, #136]	; (800203c <MRT_checkThreadStates+0xc8>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00b fa2f 	bl	800d41c <osThreadResume>
			  }

			  //Propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d10f      	bne.n	8001fe4 <MRT_checkThreadStates+0x70>
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <MRT_checkThreadStates+0xd0>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d103      	bne.n	8001fd4 <MRT_checkThreadStates+0x60>
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <MRT_checkThreadStates+0xcc>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d907      	bls.n	8001fe4 <MRT_checkThreadStates+0x70>
				  osThreadTerminate(threadsID[i]);
 8001fd4:	4a19      	ldr	r2, [pc, #100]	; (800203c <MRT_checkThreadStates+0xc8>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00b fa44 	bl	800d46a <osThreadTerminate>
				  continue;
 8001fe2:	e020      	b.n	8002026 <MRT_checkThreadStates+0xb2>
			  }
			  else {
				 //Resume otherwise
				 osThreadResume(threadsID[i]);
 8001fe4:	4a15      	ldr	r2, [pc, #84]	; (800203c <MRT_checkThreadStates+0xc8>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00b fa15 	bl	800d41c <osThreadResume>
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001ff2:	e018      	b.n	8002026 <MRT_checkThreadStates+0xb2>
			  }
		  }

		  else if (thread_state == osThreadError){
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffa:	d114      	bne.n	8002026 <MRT_checkThreadStates+0xb2>
			  //If it's the propulsion thread
			  if (i==4 && (apogee_flag || ejection_stage_flag >= DROGUE_DESCENT)){
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d10f      	bne.n	8002022 <MRT_checkThreadStates+0xae>
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <MRT_checkThreadStates+0xd0>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <MRT_checkThreadStates+0x9e>
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <MRT_checkThreadStates+0xcc>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d907      	bls.n	8002022 <MRT_checkThreadStates+0xae>
				  osThreadTerminate(threadsID[i]);
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <MRT_checkThreadStates+0xc8>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	4618      	mov	r0, r3
 800201c:	f00b fa25 	bl	800d46a <osThreadTerminate>
				  continue;
 8002020:	e001      	b.n	8002026 <MRT_checkThreadStates+0xb2>
			  }
			  else{
				 //Reset otherwise
				 NVIC_SystemReset();
 8002022:	f7ff fa99 	bl	8001558 <__NVIC_SystemReset>
	  for (int i=0; i < NUMBER_OF_THREADS;i++){
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3301      	adds	r3, #1
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b04      	cmp	r3, #4
 8002030:	dda6      	ble.n	8001f80 <MRT_checkThreadStates+0xc>
		  else if (thread_state == osThreadReserved){ TODO not sure what is this state
		  }
		  */
	  }
	  #endif
}
 8002032:	bf00      	nop
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20006094 	.word	0x20006094
 8002040:	20000374 	.word	0x20000374
 8002044:	20000373 	.word	0x20000373

08002048 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08e      	sub	sp, #56	; 0x38
 800204c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
 800205c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
 8002062:	4bb5      	ldr	r3, [pc, #724]	; (8002338 <MX_GPIO_Init+0x2f0>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4ab4      	ldr	r2, [pc, #720]	; (8002338 <MX_GPIO_Init+0x2f0>)
 8002068:	f043 0310 	orr.w	r3, r3, #16
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4bb2      	ldr	r3, [pc, #712]	; (8002338 <MX_GPIO_Init+0x2f0>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	623b      	str	r3, [r7, #32]
 8002078:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	4bae      	ldr	r3, [pc, #696]	; (8002338 <MX_GPIO_Init+0x2f0>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4aad      	ldr	r2, [pc, #692]	; (8002338 <MX_GPIO_Init+0x2f0>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4bab      	ldr	r3, [pc, #684]	; (8002338 <MX_GPIO_Init+0x2f0>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
 800209a:	4ba7      	ldr	r3, [pc, #668]	; (8002338 <MX_GPIO_Init+0x2f0>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4aa6      	ldr	r2, [pc, #664]	; (8002338 <MX_GPIO_Init+0x2f0>)
 80020a0:	f043 0320 	orr.w	r3, r3, #32
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4ba4      	ldr	r3, [pc, #656]	; (8002338 <MX_GPIO_Init+0x2f0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	4ba0      	ldr	r3, [pc, #640]	; (8002338 <MX_GPIO_Init+0x2f0>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a9f      	ldr	r2, [pc, #636]	; (8002338 <MX_GPIO_Init+0x2f0>)
 80020bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b9d      	ldr	r3, [pc, #628]	; (8002338 <MX_GPIO_Init+0x2f0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b99      	ldr	r3, [pc, #612]	; (8002338 <MX_GPIO_Init+0x2f0>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a98      	ldr	r2, [pc, #608]	; (8002338 <MX_GPIO_Init+0x2f0>)
 80020d8:	f043 0301 	orr.w	r3, r3, #1
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b96      	ldr	r3, [pc, #600]	; (8002338 <MX_GPIO_Init+0x2f0>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b92      	ldr	r3, [pc, #584]	; (8002338 <MX_GPIO_Init+0x2f0>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a91      	ldr	r2, [pc, #580]	; (8002338 <MX_GPIO_Init+0x2f0>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b8f      	ldr	r3, [pc, #572]	; (8002338 <MX_GPIO_Init+0x2f0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	4b8b      	ldr	r3, [pc, #556]	; (8002338 <MX_GPIO_Init+0x2f0>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a8a      	ldr	r2, [pc, #552]	; (8002338 <MX_GPIO_Init+0x2f0>)
 8002110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b88      	ldr	r3, [pc, #544]	; (8002338 <MX_GPIO_Init+0x2f0>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	4b84      	ldr	r3, [pc, #528]	; (8002338 <MX_GPIO_Init+0x2f0>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a83      	ldr	r2, [pc, #524]	; (8002338 <MX_GPIO_Init+0x2f0>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b81      	ldr	r3, [pc, #516]	; (8002338 <MX_GPIO_Init+0x2f0>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	f248 4184 	movw	r1, #33924	; 0x8484
 8002144:	487d      	ldr	r0, [pc, #500]	; (800233c <MX_GPIO_Init+0x2f4>)
 8002146:	f005 ff23 	bl	8007f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002150:	487b      	ldr	r0, [pc, #492]	; (8002340 <MX_GPIO_Init+0x2f8>)
 8002152:	f005 ff1d 	bl	8007f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800215c:	4879      	ldr	r0, [pc, #484]	; (8002344 <MX_GPIO_Init+0x2fc>)
 800215e:	f005 ff17 	bl	8007f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	2108      	movs	r1, #8
 8002166:	4878      	ldr	r0, [pc, #480]	; (8002348 <MX_GPIO_Init+0x300>)
 8002168:	f005 ff12 	bl	8007f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 800216c:	2200      	movs	r2, #0
 800216e:	f645 2126 	movw	r1, #23078	; 0x5a26
 8002172:	4876      	ldr	r0, [pc, #472]	; (800234c <MX_GPIO_Init+0x304>)
 8002174:	f005 ff0c 	bl	8007f90 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800217e:	4874      	ldr	r0, [pc, #464]	; (8002350 <MX_GPIO_Init+0x308>)
 8002180:	f005 ff06 	bl	8007f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002184:	2200      	movs	r2, #0
 8002186:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 800218a:	4872      	ldr	r0, [pc, #456]	; (8002354 <MX_GPIO_Init+0x30c>)
 800218c:	f005 ff00 	bl	8007f90 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8002190:	f248 4384 	movw	r3, #33924	; 0x8484
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002196:	2301      	movs	r3, #1
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a6:	4619      	mov	r1, r3
 80021a8:	4864      	ldr	r0, [pc, #400]	; (800233c <MX_GPIO_Init+0x2f4>)
 80021aa:	f005 fd2d 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80021ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b4:	2301      	movs	r3, #1
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	4619      	mov	r1, r3
 80021c6:	485e      	ldr	r0, [pc, #376]	; (8002340 <MX_GPIO_Init+0x2f8>)
 80021c8:	f005 fd1e 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80021cc:	2301      	movs	r3, #1
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021d0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80021da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021de:	4619      	mov	r1, r3
 80021e0:	4858      	ldr	r0, [pc, #352]	; (8002344 <MX_GPIO_Init+0x2fc>)
 80021e2:	f005 fd11 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 80021e6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ec:	2301      	movs	r3, #1
 80021ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f4:	2300      	movs	r3, #0
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fc:	4619      	mov	r1, r3
 80021fe:	4851      	ldr	r0, [pc, #324]	; (8002344 <MX_GPIO_Init+0x2fc>)
 8002200:	f005 fd02 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8002204:	2308      	movs	r3, #8
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002208:	2301      	movs	r3, #1
 800220a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8002214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002218:	4619      	mov	r1, r3
 800221a:	484b      	ldr	r0, [pc, #300]	; (8002348 <MX_GPIO_Init+0x300>)
 800221c:	f005 fcf4 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002220:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002232:	4619      	mov	r1, r3
 8002234:	4843      	ldr	r0, [pc, #268]	; (8002344 <MX_GPIO_Init+0x2fc>)
 8002236:	f005 fce7 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 800223a:	2302      	movs	r3, #2
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223e:	2300      	movs	r3, #0
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8002246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224a:	4619      	mov	r1, r3
 800224c:	4840      	ldr	r0, [pc, #256]	; (8002350 <MX_GPIO_Init+0x308>)
 800224e:	f005 fcdb 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8002252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002258:	2300      	movs	r3, #0
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	4836      	ldr	r0, [pc, #216]	; (8002340 <MX_GPIO_Init+0x2f8>)
 8002268:	f005 fcce 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800226c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002272:	2301      	movs	r3, #1
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800227e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002282:	4619      	mov	r1, r3
 8002284:	482e      	ldr	r0, [pc, #184]	; (8002340 <MX_GPIO_Init+0x2f8>)
 8002286:	f005 fcbf 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 800228a:	f242 4319 	movw	r3, #9241	; 0x2419
 800228e:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002290:	2300      	movs	r3, #0
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229c:	4619      	mov	r1, r3
 800229e:	482b      	ldr	r0, [pc, #172]	; (800234c <MX_GPIO_Init+0x304>)
 80022a0:	f005 fcb2 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80022a4:	f645 2326 	movw	r3, #23078	; 0x5a26
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ba:	4619      	mov	r1, r3
 80022bc:	4823      	ldr	r0, [pc, #140]	; (800234c <MX_GPIO_Init+0x304>)
 80022be:	f005 fca3 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 80022c2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d4:	4619      	mov	r1, r3
 80022d6:	4819      	ldr	r0, [pc, #100]	; (800233c <MX_GPIO_Init+0x2f4>)
 80022d8:	f005 fc96 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 80022dc:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e2:	2301      	movs	r3, #1
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f2:	4619      	mov	r1, r3
 80022f4:	4816      	ldr	r0, [pc, #88]	; (8002350 <MX_GPIO_Init+0x308>)
 80022f6:	f005 fc87 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80022fa:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002300:	2301      	movs	r3, #1
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002308:	2300      	movs	r3, #0
 800230a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002310:	4619      	mov	r1, r3
 8002312:	4810      	ldr	r0, [pc, #64]	; (8002354 <MX_GPIO_Init+0x30c>)
 8002314:	f005 fc78 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8002318:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231e:	2300      	movs	r3, #0
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232a:	4619      	mov	r1, r3
 800232c:	4809      	ldr	r0, [pc, #36]	; (8002354 <MX_GPIO_Init+0x30c>)
 800232e:	f005 fc6b 	bl	8007c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8002332:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002336:	e00f      	b.n	8002358 <MX_GPIO_Init+0x310>
 8002338:	40023800 	.word	0x40023800
 800233c:	40021000 	.word	0x40021000
 8002340:	40021400 	.word	0x40021400
 8002344:	40020800 	.word	0x40020800
 8002348:	40020000 	.word	0x40020000
 800234c:	40021800 	.word	0x40021800
 8002350:	40020400 	.word	0x40020400
 8002354:	40020c00 	.word	0x40020c00
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800235a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002368:	4619      	mov	r1, r3
 800236a:	4807      	ldr	r0, [pc, #28]	; (8002388 <MX_GPIO_Init+0x340>)
 800236c:	f005 fc4c 	bl	8007c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002370:	2200      	movs	r2, #0
 8002372:	2105      	movs	r1, #5
 8002374:	2006      	movs	r0, #6
 8002376:	f005 fc0f 	bl	8007b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800237a:	2006      	movs	r0, #6
 800237c:	f005 fc28 	bl	8007bd0 <HAL_NVIC_EnableIRQ>

}
 8002380:	bf00      	nop
 8002382:	3738      	adds	r7, #56	; 0x38
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40021800 	.word	0x40021800

0800238c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <MX_I2C2_Init+0x74>)
 8002392:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <MX_I2C2_Init+0x78>)
 8002394:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002396:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <MX_I2C2_Init+0x74>)
 8002398:	4a1b      	ldr	r2, [pc, #108]	; (8002408 <MX_I2C2_Init+0x7c>)
 800239a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800239c:	4b18      	ldr	r3, [pc, #96]	; (8002400 <MX_I2C2_Init+0x74>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <MX_I2C2_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023a8:	4b15      	ldr	r3, [pc, #84]	; (8002400 <MX_I2C2_Init+0x74>)
 80023aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023b0:	4b13      	ldr	r3, [pc, #76]	; (8002400 <MX_I2C2_Init+0x74>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <MX_I2C2_Init+0x74>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023bc:	4b10      	ldr	r3, [pc, #64]	; (8002400 <MX_I2C2_Init+0x74>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023c2:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <MX_I2C2_Init+0x74>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80023c8:	480d      	ldr	r0, [pc, #52]	; (8002400 <MX_I2C2_Init+0x74>)
 80023ca:	f005 fe13 	bl	8007ff4 <HAL_I2C_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80023d4:	f000 fa5e 	bl	8002894 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023d8:	2100      	movs	r1, #0
 80023da:	4809      	ldr	r0, [pc, #36]	; (8002400 <MX_I2C2_Init+0x74>)
 80023dc:	f006 fdff 	bl	8008fde <HAL_I2CEx_ConfigAnalogFilter>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80023e6:	f000 fa55 	bl	8002894 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80023ea:	2100      	movs	r1, #0
 80023ec:	4804      	ldr	r0, [pc, #16]	; (8002400 <MX_I2C2_Init+0x74>)
 80023ee:	f006 fe32 	bl	8009056 <HAL_I2CEx_ConfigDigitalFilter>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80023f8:	f000 fa4c 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	2000610c 	.word	0x2000610c
 8002404:	40005800 	.word	0x40005800
 8002408:	000186a0 	.word	0x000186a0

0800240c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <MX_I2C3_Init+0x74>)
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <MX_I2C3_Init+0x78>)
 8002414:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <MX_I2C3_Init+0x74>)
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <MX_I2C3_Init+0x7c>)
 800241a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <MX_I2C3_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_I2C3_Init+0x74>)
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MX_I2C3_Init+0x74>)
 800242a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800242e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <MX_I2C3_Init+0x74>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MX_I2C3_Init+0x74>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_I2C3_Init+0x74>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_I2C3_Init+0x74>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002448:	480d      	ldr	r0, [pc, #52]	; (8002480 <MX_I2C3_Init+0x74>)
 800244a:	f005 fdd3 	bl	8007ff4 <HAL_I2C_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002454:	f000 fa1e 	bl	8002894 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002458:	2100      	movs	r1, #0
 800245a:	4809      	ldr	r0, [pc, #36]	; (8002480 <MX_I2C3_Init+0x74>)
 800245c:	f006 fdbf 	bl	8008fde <HAL_I2CEx_ConfigAnalogFilter>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002466:	f000 fa15 	bl	8002894 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800246a:	2100      	movs	r1, #0
 800246c:	4804      	ldr	r0, [pc, #16]	; (8002480 <MX_I2C3_Init+0x74>)
 800246e:	f006 fdf2 	bl	8009056 <HAL_I2CEx_ConfigDigitalFilter>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002478:	f000 fa0c 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	200060b8 	.word	0x200060b8
 8002484:	40005c00 	.word	0x40005c00
 8002488:	000186a0 	.word	0x000186a0

0800248c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08c      	sub	sp, #48	; 0x30
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a42      	ldr	r2, [pc, #264]	; (80025b4 <HAL_I2C_MspInit+0x128>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d12d      	bne.n	800250a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a40      	ldr	r2, [pc, #256]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 80024b8:	f043 0302 	orr.w	r3, r3, #2
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d0:	2312      	movs	r3, #18
 80024d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024dc:	2304      	movs	r3, #4
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	4619      	mov	r1, r3
 80024e6:	4835      	ldr	r0, [pc, #212]	; (80025bc <HAL_I2C_MspInit+0x130>)
 80024e8:	f005 fb8e 	bl	8007c08 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	4a30      	ldr	r2, [pc, #192]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 80024f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024fa:	6413      	str	r3, [r2, #64]	; 0x40
 80024fc:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002508:	e050      	b.n	80025ac <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a2c      	ldr	r2, [pc, #176]	; (80025c0 <HAL_I2C_MspInit+0x134>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d14b      	bne.n	80025ac <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	4b27      	ldr	r3, [pc, #156]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4a26      	ldr	r2, [pc, #152]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	6313      	str	r3, [r2, #48]	; 0x30
 8002524:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6313      	str	r3, [r2, #48]	; 0x30
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800254c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002552:	2312      	movs	r3, #18
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002556:	2301      	movs	r3, #1
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800255e:	2304      	movs	r3, #4
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	4816      	ldr	r0, [pc, #88]	; (80025c4 <HAL_I2C_MspInit+0x138>)
 800256a:	f005 fb4d 	bl	8007c08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800256e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002574:	2312      	movs	r3, #18
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002578:	2301      	movs	r3, #1
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002580:	2304      	movs	r3, #4
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4619      	mov	r1, r3
 800258a:	480f      	ldr	r0, [pc, #60]	; (80025c8 <HAL_I2C_MspInit+0x13c>)
 800258c:	f005 fb3c 	bl	8007c08 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002590:	2300      	movs	r3, #0
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 800259a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800259e:	6413      	str	r3, [r2, #64]	; 0x40
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_I2C_MspInit+0x12c>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
}
 80025ac:	bf00      	nop
 80025ae:	3730      	adds	r7, #48	; 0x30
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40005800 	.word	0x40005800
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40005c00 	.word	0x40005c00
 80025c4:	40020800 	.word	0x40020800
 80025c8:	40020000 	.word	0x40020000

080025cc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <MX_IWDG_Init+0x2c>)
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <MX_IWDG_Init+0x30>)
 80025d4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <MX_IWDG_Init+0x2c>)
 80025d8:	2204      	movs	r2, #4
 80025da:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2499;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <MX_IWDG_Init+0x2c>)
 80025de:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80025e2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80025e4:	4804      	ldr	r0, [pc, #16]	; (80025f8 <MX_IWDG_Init+0x2c>)
 80025e6:	f006 fd75 	bl	80090d4 <HAL_IWDG_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80025f0:	f000 f950 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20006160 	.word	0x20006160
 80025fc:	40003000 	.word	0x40003000

08002600 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8002604:	f000 f89c 	bl	8002740 <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8002608:	480f      	ldr	r0, [pc, #60]	; (8002648 <main+0x48>)
 800260a:	f7fe fcff 	bl	800100c <println>

	MRT_Init();
 800260e:	f7fe fd9b 	bl	8001148 <MRT_Init>

	println("\r\n\r\n/****Starting FC****/\r\n\r\n");
 8002612:	480e      	ldr	r0, [pc, #56]	; (800264c <main+0x4c>)
 8002614:	f7fe fcfa 	bl	800100c <println>
	HAL_IWDG_Refresh(&hiwdg);
 8002618:	480d      	ldr	r0, [pc, #52]	; (8002650 <main+0x50>)
 800261a:	f006 fd9d 	bl	8009158 <HAL_IWDG_Refresh>
	buzz_startup_success();
 800261e:	f7fe fd7b 	bl	8001118 <buzz_startup_success>

	MRT_waitForLaunch();
 8002622:	f000 f8af 	bl	8002784 <MRT_waitForLaunch>
	//if (DEBUG) TESTING_LOOP(); //TODO remove

	//TODO I2C SENSORS (lsm and lps) SOMETIMES DON'T WANT TO WORK ANYMORE -> NEED TO RESET THE POWER (Enter quick standByMode?)

	//Initialize the os
	MX_FREERTOS_Init();
 8002626:	f7fe ffad 	bl	8001584 <MX_FREERTOS_Init>

	//Starting the os
	println("\r\n/****Starting the OS****/\r\n");
 800262a:	480a      	ldr	r0, [pc, #40]	; (8002654 <main+0x54>)
 800262c:	f7fe fcee 	bl	800100c <println>
	osKernelStart();
 8002630:	f00a fdf4 	bl	800d21c <osKernelStart>

	println("SOMETHING WENT HORRIBLY WRONG, WAITING FOR WATCH DOG RESET");
 8002634:	4808      	ldr	r0, [pc, #32]	; (8002658 <main+0x58>)
 8002636:	f7fe fce9 	bl	800100c <println>
	HAL_IWDG_Refresh(&hiwdg);
 800263a:	4805      	ldr	r0, [pc, #20]	; (8002650 <main+0x50>)
 800263c:	f006 fd8c 	bl	8009158 <HAL_IWDG_Refresh>
	MRT_Deinit();
 8002640:	f7fe fda8 	bl	8001194 <MRT_Deinit>
	while (1){}
 8002644:	e7fe      	b.n	8002644 <main+0x44>
 8002646:	bf00      	nop
 8002648:	080166f4 	.word	0x080166f4
 800264c:	08016708 	.word	0x08016708
 8002650:	20006160 	.word	0x20006160
 8002654:	08016728 	.word	0x08016728
 8002658:	08016748 	.word	0x08016748

0800265c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b094      	sub	sp, #80	; 0x50
 8002660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002662:	f107 0320 	add.w	r3, r7, #32
 8002666:	2230      	movs	r2, #48	; 0x30
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f00e fe7e 	bl	801136c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002680:	2300      	movs	r3, #0
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <SystemClock_Config+0xdc>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	4a2b      	ldr	r2, [pc, #172]	; (8002738 <SystemClock_Config+0xdc>)
 800268a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268e:	6413      	str	r3, [r2, #64]	; 0x40
 8002690:	4b29      	ldr	r3, [pc, #164]	; (8002738 <SystemClock_Config+0xdc>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800269c:	2300      	movs	r3, #0
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	4b26      	ldr	r3, [pc, #152]	; (800273c <SystemClock_Config+0xe0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a25      	ldr	r2, [pc, #148]	; (800273c <SystemClock_Config+0xe0>)
 80026a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <SystemClock_Config+0xe0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80026b8:	2309      	movs	r3, #9
 80026ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80026c2:	2301      	movs	r3, #1
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026c6:	2302      	movs	r3, #2
 80026c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026d0:	2308      	movs	r3, #8
 80026d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80026d4:	23b4      	movs	r3, #180	; 0xb4
 80026d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026d8:	2302      	movs	r3, #2
 80026da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80026dc:	2303      	movs	r3, #3
 80026de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026e0:	f107 0320 	add.w	r3, r7, #32
 80026e4:	4618      	mov	r0, r3
 80026e6:	f006 fdd5 	bl	8009294 <HAL_RCC_OscConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80026f0:	f000 f8d0 	bl	8002894 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80026f4:	f006 fd7e 	bl	80091f4 <HAL_PWREx_EnableOverDrive>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80026fe:	f000 f8c9 	bl	8002894 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002702:	230f      	movs	r3, #15
 8002704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002706:	2302      	movs	r3, #2
 8002708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800270e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002714:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	2105      	movs	r1, #5
 8002720:	4618      	mov	r0, r3
 8002722:	f007 f82f 	bl	8009784 <HAL_RCC_ClockConfig>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800272c:	f000 f8b2 	bl	8002894 <Error_Handler>
  }
}
 8002730:	bf00      	nop
 8002732:	3750      	adds	r7, #80	; 0x50
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40023800 	.word	0x40023800
 800273c:	40007000 	.word	0x40007000

08002740 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
	HAL_Init();
 8002744:	f004 fcd6 	bl	80070f4 <HAL_Init>
	SystemClock_Config();
 8002748:	f7ff ff88 	bl	800265c <SystemClock_Config>

	MX_GPIO_Init();
 800274c:	f7ff fc7c 	bl	8002048 <MX_GPIO_Init>
	MX_ADC1_Init();
 8002750:	f7fe fe6c 	bl	800142c <MX_ADC1_Init>
	MX_I2C2_Init();
 8002754:	f7ff fe1a 	bl	800238c <MX_I2C2_Init>
	MX_I2C3_Init();
 8002758:	f7ff fe58 	bl	800240c <MX_I2C3_Init>
	MX_SPI2_Init();
 800275c:	f000 fc16 	bl	8002f8c <MX_SPI2_Init>
	MX_SPI4_Init();
 8002760:	f000 fc4a 	bl	8002ff8 <MX_SPI4_Init>
	MX_SPI5_Init();
 8002764:	f000 fc7e 	bl	8003064 <MX_SPI5_Init>
	MX_TIM2_Init();
 8002768:	f000 feb0 	bl	80034cc <MX_TIM2_Init>
	MX_UART8_Init();
 800276c:	f000 ff7c 	bl	8003668 <MX_UART8_Init>
	MX_USART3_UART_Init();
 8002770:	f000 ffa4 	bl	80036bc <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8002774:	f000 ffcc 	bl	8003710 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8002778:	f000 f892 	bl	80028a0 <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADDED IN MRT_Init()
	MX_FATFS_Init();
 800277c:	f00a fc20 	bl	800cfc0 <MX_FATFS_Init>
}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}

08002784 <MRT_waitForLaunch>:

void MRT_waitForLaunch(void){
 8002784:	b580      	push	{r7, lr}
 8002786:	b0c2      	sub	sp, #264	; 0x108
 8002788:	af00      	add	r7, sp, #0

	println("Waiting for launch command from ground station\r\n");
 800278a:	482e      	ldr	r0, [pc, #184]	; (8002844 <MRT_waitForLaunch+0xc0>)
 800278c:	f7fe fc3e 	bl	800100c <println>

	char radio_buffer[RADIO_BUFFER_SIZE];
	radio_command cmd = -1;
 8002790:	23ff      	movs	r3, #255	; 0xff
 8002792:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	//Poll propulsion until launch command sent
	while((XTEND_ || SRADIO_) && ejection_stage_flag == PAD){
 8002796:	bf00      	nop
	}


	//TODO testing time (saved in watchdog thread)
	//TODO for testing (saved in wd thread)
	hlps22hh.getPressure();
 8002798:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <MRT_waitForLaunch+0xc4>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4798      	blx	r3
	rtc_bckp_reg_alt_pad = MRT_getAltitude(hlps22hh.pressure_hPa);
 800279e:	4b2a      	ldr	r3, [pc, #168]	; (8002848 <MRT_waitForLaunch+0xc4>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	eeb0 0a67 	vmov.f32	s0, s15
 80027a8:	f001 f8ba 	bl	8003920 <MRT_getAltitude>
 80027ac:	eef0 7a40 	vmov.f32	s15, s0
 80027b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b4:	ee17 2a90 	vmov	r2, s15
 80027b8:	4b24      	ldr	r3, [pc, #144]	; (800284c <MRT_waitForLaunch+0xc8>)
 80027ba:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_STATE_ALT_PAD, rtc_bckp_reg_alt_pad);
 80027bc:	4b23      	ldr	r3, [pc, #140]	; (800284c <MRT_waitForLaunch+0xc8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	2009      	movs	r0, #9
 80027c4:	f000 fbc4 	bl	8002f50 <MRT_RTC_setBackupReg>

	//Get RTC time
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80027c8:	2200      	movs	r2, #0
 80027ca:	4921      	ldr	r1, [pc, #132]	; (8002850 <MRT_waitForLaunch+0xcc>)
 80027cc:	4821      	ldr	r0, [pc, #132]	; (8002854 <MRT_waitForLaunch+0xd0>)
 80027ce:	f007 fd11 	bl	800a1f4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80027d2:	2200      	movs	r2, #0
 80027d4:	4920      	ldr	r1, [pc, #128]	; (8002858 <MRT_waitForLaunch+0xd4>)
 80027d6:	481f      	ldr	r0, [pc, #124]	; (8002854 <MRT_waitForLaunch+0xd0>)
 80027d8:	f007 fe11 	bl	800a3fe <HAL_RTC_GetDate>
	prev_min = sTime.Minutes;
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <MRT_waitForLaunch+0xcc>)
 80027de:	785a      	ldrb	r2, [r3, #1]
 80027e0:	4b1e      	ldr	r3, [pc, #120]	; (800285c <MRT_waitForLaunch+0xd8>)
 80027e2:	701a      	strb	r2, [r3, #0]
	prev_sec = sTime.Seconds;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <MRT_waitForLaunch+0xcc>)
 80027e6:	789a      	ldrb	r2, [r3, #2]
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MRT_waitForLaunch+0xdc>)
 80027ea:	701a      	strb	r2, [r3, #0]
	if (__HAL_RTC_SHIFT_GET_FLAG(&hrtc, RTC_FLAG_SHPF)) prev_sec++; //Adjust following the user manual
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <MRT_waitForLaunch+0xd0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <MRT_waitForLaunch+0x82>
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <MRT_waitForLaunch+0xdc>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	3301      	adds	r3, #1
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4b17      	ldr	r3, [pc, #92]	; (8002860 <MRT_waitForLaunch+0xdc>)
 8002804:	701a      	strb	r2, [r3, #0]
	prev_subsec = sTime.SubSeconds;
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <MRT_waitForLaunch+0xcc>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a16      	ldr	r2, [pc, #88]	; (8002864 <MRT_waitForLaunch+0xe0>)
 800280c:	6013      	str	r3, [r2, #0]
	rtc_bckp_reg_pad_time = 100*prev_min + prev_sec;
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <MRT_waitForLaunch+0xd8>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	2364      	movs	r3, #100	; 0x64
 8002816:	fb03 f302 	mul.w	r3, r3, r2
 800281a:	4a11      	ldr	r2, [pc, #68]	; (8002860 <MRT_waitForLaunch+0xdc>)
 800281c:	7812      	ldrb	r2, [r2, #0]
 800281e:	4413      	add	r3, r2
 8002820:	461a      	mov	r2, r3
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <MRT_waitForLaunch+0xe4>)
 8002824:	601a      	str	r2, [r3, #0]
	MRT_RTC_setBackupReg(FC_PAD_TIME, rtc_bckp_reg_pad_time);
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <MRT_waitForLaunch+0xe4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	200a      	movs	r0, #10
 800282e:	f000 fb8f 	bl	8002f50 <MRT_RTC_setBackupReg>


	//Send acknowledgement
	MRT_radio_tx((char*) "LAUNCH COMMAND RECEIVED"); //TODO CHECK AT WHAT JASPER DID
 8002832:	480e      	ldr	r0, [pc, #56]	; (800286c <MRT_waitForLaunch+0xe8>)
 8002834:	f004 fc34 	bl	80070a0 <MRT_radio_tx>
}
 8002838:	bf00      	nop
 800283a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	08016784 	.word	0x08016784
 8002848:	200003b8 	.word	0x200003b8
 800284c:	20000334 	.word	0x20000334
 8002850:	200002d0 	.word	0x200002d0
 8002854:	2000616c 	.word	0x2000616c
 8002858:	200002e4 	.word	0x200002e4
 800285c:	20000376 	.word	0x20000376
 8002860:	20000377 	.word	0x20000377
 8002864:	20000378 	.word	0x20000378
 8002868:	20000338 	.word	0x20000338
 800286c:	080167b8 	.word	0x080167b8

08002870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a04      	ldr	r2, [pc, #16]	; (8002890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002882:	f004 fc59 	bl	8007138 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40001000 	.word	0x40001000

08002894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002898:	b672      	cpsid	i
}
 800289a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800289c:	e7fe      	b.n	800289c <Error_Handler+0x8>
	...

080028a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b090      	sub	sp, #64	; 0x40
 80028a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80028a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80028b6:	2300      	movs	r3, #0
 80028b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80028ba:	463b      	mov	r3, r7
 80028bc:	2228      	movs	r2, #40	; 0x28
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f00e fd53 	bl	801136c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028c6:	4b4b      	ldr	r3, [pc, #300]	; (80029f4 <MX_RTC_Init+0x154>)
 80028c8:	4a4b      	ldr	r2, [pc, #300]	; (80029f8 <MX_RTC_Init+0x158>)
 80028ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028cc:	4b49      	ldr	r3, [pc, #292]	; (80029f4 <MX_RTC_Init+0x154>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80028d2:	4b48      	ldr	r3, [pc, #288]	; (80029f4 <MX_RTC_Init+0x154>)
 80028d4:	227f      	movs	r2, #127	; 0x7f
 80028d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80028d8:	4b46      	ldr	r3, [pc, #280]	; (80029f4 <MX_RTC_Init+0x154>)
 80028da:	22ff      	movs	r2, #255	; 0xff
 80028dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028de:	4b45      	ldr	r3, [pc, #276]	; (80029f4 <MX_RTC_Init+0x154>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028e4:	4b43      	ldr	r3, [pc, #268]	; (80029f4 <MX_RTC_Init+0x154>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028ea:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <MX_RTC_Init+0x154>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028f0:	4840      	ldr	r0, [pc, #256]	; (80029f4 <MX_RTC_Init+0x154>)
 80028f2:	f007 fb31 	bl	8009f58 <HAL_RTC_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80028fc:	f7ff ffca 	bl	8002894 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002900:	2300      	movs	r3, #0
 8002902:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002906:	2300      	movs	r3, #0
 8002908:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002912:	2300      	movs	r3, #0
 8002914:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002916:	2300      	movs	r3, #0
 8002918:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800291a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291e:	2201      	movs	r2, #1
 8002920:	4619      	mov	r1, r3
 8002922:	4834      	ldr	r0, [pc, #208]	; (80029f4 <MX_RTC_Init+0x154>)
 8002924:	f007 fba9 	bl	800a07a <HAL_RTC_SetTime>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800292e:	f7ff ffb1 	bl	8002894 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002938:	2301      	movs	r3, #1
 800293a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800293e:	2301      	movs	r3, #1
 8002940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800294a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800294e:	2201      	movs	r2, #1
 8002950:	4619      	mov	r1, r3
 8002952:	4828      	ldr	r0, [pc, #160]	; (80029f4 <MX_RTC_Init+0x154>)
 8002954:	f007 fcac 	bl	800a2b0 <HAL_RTC_SetDate>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800295e:	f7ff ff99 	bl	8002894 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002962:	2300      	movs	r3, #0
 8002964:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002966:	2300      	movs	r3, #0
 8002968:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800296a:	2300      	movs	r3, #0
 800296c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800296e:	2300      	movs	r3, #0
 8002970:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800298c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002992:	463b      	mov	r3, r7
 8002994:	2201      	movs	r2, #1
 8002996:	4619      	mov	r1, r3
 8002998:	4816      	ldr	r0, [pc, #88]	; (80029f4 <MX_RTC_Init+0x154>)
 800299a:	f007 fd7f 	bl	800a49c <HAL_RTC_SetAlarm_IT>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80029a4:	f7ff ff76 	bl	8002894 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80029a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80029ae:	463b      	mov	r3, r7
 80029b0:	2201      	movs	r2, #1
 80029b2:	4619      	mov	r1, r3
 80029b4:	480f      	ldr	r0, [pc, #60]	; (80029f4 <MX_RTC_Init+0x154>)
 80029b6:	f007 fd71 	bl	800a49c <HAL_RTC_SetAlarm_IT>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80029c0:	f7ff ff68 	bl	8002894 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <MX_RTC_Init+0x154>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <MX_RTC_Init+0x154>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80029d4:	60da      	str	r2, [r3, #12]
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80029d6:	2200      	movs	r2, #0
 80029d8:	2100      	movs	r1, #0
 80029da:	4806      	ldr	r0, [pc, #24]	; (80029f4 <MX_RTC_Init+0x154>)
 80029dc:	f007 ff6c 	bl	800a8b8 <HAL_RTCEx_SetWakeUpTimer_IT>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 80029e6:	f7ff ff55 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029ea:	bf00      	nop
 80029ec:	3740      	adds	r7, #64	; 0x40
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2000616c 	.word	0x2000616c
 80029f8:	40002800 	.word	0x40002800

080029fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a04:	f107 0308 	add.w	r3, r7, #8
 8002a08:	2230      	movs	r2, #48	; 0x30
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f00e fcad 	bl	801136c <memset>
  if(rtcHandle->Instance==RTC)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_RTC_MspInit+0x6c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d121      	bne.n	8002a60 <HAL_RTC_MspInit+0x64>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a26:	f107 0308 	add.w	r3, r7, #8
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f007 f8d6 	bl	8009bdc <HAL_RCCEx_PeriphCLKConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a36:	f7ff ff2d 	bl	8002894 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <HAL_RTC_MspInit+0x70>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8002a40:	2200      	movs	r2, #0
 8002a42:	2105      	movs	r1, #5
 8002a44:	2003      	movs	r0, #3
 8002a46:	f005 f8a7 	bl	8007b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002a4a:	2003      	movs	r0, #3
 8002a4c:	f005 f8c0 	bl	8007bd0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2105      	movs	r1, #5
 8002a54:	2029      	movs	r0, #41	; 0x29
 8002a56:	f005 f89f 	bl	8007b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002a5a:	2029      	movs	r0, #41	; 0x29
 8002a5c:	f005 f8b8 	bl	8007bd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002a60:	bf00      	nop
 8002a62:	3738      	adds	r7, #56	; 0x38
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40002800 	.word	0x40002800
 8002a6c:	42470e3c 	.word	0x42470e3c

08002a70 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
	println("\r\nMRT RTC Init");
 8002a74:	4817      	ldr	r0, [pc, #92]	; (8002ad4 <MRT_rtc_Init+0x64>)
 8002a76:	f7fe fac9 	bl	800100c <println>

	print("\tSetting RTC to previous time...");
 8002a7a:	4817      	ldr	r0, [pc, #92]	; (8002ad8 <MRT_rtc_Init+0x68>)
 8002a7c:	f7fe fae4 	bl	8001048 <print>
	MRT_set_rtc(prev_hour,prev_min,prev_sec);
 8002a80:	4b16      	ldr	r3, [pc, #88]	; (8002adc <MRT_rtc_Init+0x6c>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <MRT_rtc_Init+0x70>)
 8002a86:	7811      	ldrb	r1, [r2, #0]
 8002a88:	4a16      	ldr	r2, [pc, #88]	; (8002ae4 <MRT_rtc_Init+0x74>)
 8002a8a:	7812      	ldrb	r2, [r2, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f8df 	bl	8002c50 <MRT_set_rtc>
	println("OK");
 8002a92:	4815      	ldr	r0, [pc, #84]	; (8002ae8 <MRT_rtc_Init+0x78>)
 8002a94:	f7fe faba 	bl	800100c <println>

	HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8002a98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a9c:	f004 fb6c 	bl	8007178 <HAL_Delay>

	//TODO for some reason, both set_alarm need to be uncommented or commented together
	//They can't be used individually (or else we get a hardfault during external flash setup??)
	#if ALARM_A_ACTIVE
		print("\tSetting alarmA...");
 8002aa0:	4812      	ldr	r0, [pc, #72]	; (8002aec <MRT_rtc_Init+0x7c>)
 8002aa2:	f7fe fad1 	bl	8001048 <print>
		MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	211e      	movs	r1, #30
 8002aaa:	2004      	movs	r0, #4
 8002aac:	f000 f916 	bl	8002cdc <MRT_set_alarmA>
		println("OK");
 8002ab0:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <MRT_rtc_Init+0x78>)
 8002ab2:	f7fe faab 	bl	800100c <println>
	#endif


	#if ALARM_B_ACTIVE
		print("\tSetting alarmB...");
 8002ab6:	480e      	ldr	r0, [pc, #56]	; (8002af0 <MRT_rtc_Init+0x80>)
 8002ab8:	f7fe fac6 	bl	8001048 <print>
		MRT_set_alarmB(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 8002abc:	2200      	movs	r2, #0
 8002abe:	211e      	movs	r1, #30
 8002ac0:	2012      	movs	r0, #18
 8002ac2:	f000 f951 	bl	8002d68 <MRT_set_alarmB>
		println("OK");
 8002ac6:	4808      	ldr	r0, [pc, #32]	; (8002ae8 <MRT_rtc_Init+0x78>)
 8002ac8:	f7fe faa0 	bl	800100c <println>
	#endif

	MRT_clear_alarms_flags();
 8002acc:	f000 f812 	bl	8002af4 <MRT_clear_alarms_flags>
}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	080167d0 	.word	0x080167d0
 8002ad8:	080167e0 	.word	0x080167e0
 8002adc:	20000375 	.word	0x20000375
 8002ae0:	20000376 	.word	0x20000376
 8002ae4:	20000377 	.word	0x20000377
 8002ae8:	08016804 	.word	0x08016804
 8002aec:	08016808 	.word	0x08016808
 8002af0:	0801681c 	.word	0x0801681c

08002af4 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 8002af8:	482c      	ldr	r0, [pc, #176]	; (8002bac <MRT_clear_alarms_flags+0xb8>)
 8002afa:	f7fe faa5 	bl	8001048 <print>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002afe:	4b2c      	ldr	r3, [pc, #176]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	22ca      	movs	r2, #202	; 0xca
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2253      	movs	r2, #83	; 0x53
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002b0e:	e008      	b.n	8002b22 <MRT_clear_alarms_flags+0x2e>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002b10:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002b20:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002b22:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ef      	bne.n	8002b10 <MRT_clear_alarms_flags+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002b30:	4b1f      	ldr	r3, [pc, #124]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	22ff      	movs	r2, #255	; 0xff
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <MRT_clear_alarms_flags+0xc0>)
 8002b3a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b3e:	615a      	str	r2, [r3, #20]



  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	22ca      	movs	r2, #202	; 0xca
 8002b46:	625a      	str	r2, [r3, #36]	; 0x24
 8002b48:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2253      	movs	r2, #83	; 0x53
 8002b4e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002b50:	e008      	b.n	8002b64 <MRT_clear_alarms_flags+0x70>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002b62:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1ef      	bne.n	8002b52 <MRT_clear_alarms_flags+0x5e>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002b72:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	22ff      	movs	r2, #255	; 0xff
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <MRT_clear_alarms_flags+0xc0>)
 8002b7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b80:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <MRT_clear_alarms_flags+0xc4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a0c      	ldr	r2, [pc, #48]	; (8002bb8 <MRT_clear_alarms_flags+0xc4>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <MRT_clear_alarms_flags+0xbc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002b9e:	60da      	str	r2, [r3, #12]
	__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002ba0:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <MRT_clear_alarms_flags+0xc0>)
 8002ba2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ba6:	615a      	str	r2, [r3, #20]
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	08016830 	.word	0x08016830
 8002bb0:	2000616c 	.word	0x2000616c
 8002bb4:	40013c00 	.word	0x40013c00
 8002bb8:	40007000 	.word	0x40007000

08002bbc <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	; 0x30
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 8002bc4:	481e      	ldr	r0, [pc, #120]	; (8002c40 <MRT_StandByMode+0x84>)
 8002bc6:	f7fe fa3f 	bl	8001048 <print>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8002bca:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002bce:	f006 fad3 	bl	8009178 <HAL_PWR_EnableWakeUpPin>


	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <MRT_StandByMode+0x88>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	22ca      	movs	r2, #202	; 0xca
 8002bd8:	625a      	str	r2, [r3, #36]	; 0x24
 8002bda:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <MRT_StandByMode+0x88>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2253      	movs	r2, #83	; 0x53
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24
	//Need this line or else alarm B will wake up the board immediately
	//Weird thing is this is not needed for alarm A
	__HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002be2:	4b18      	ldr	r3, [pc, #96]	; (8002c44 <MRT_StandByMode+0x88>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <MRT_StandByMode+0x88>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf0:	609a      	str	r2, [r3, #8]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <MRT_StandByMode+0x88>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	22ff      	movs	r2, #255	; 0xff
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8002bfa:	f7ff ff7b 	bl	8002af4 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8002bfe:	4812      	ldr	r0, [pc, #72]	; (8002c48 <MRT_StandByMode+0x8c>)
 8002c00:	f7fe fa04 	bl	800100c <println>
	  Error_Handler();
	}
	*/

	char msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",(int) seconds);
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	4910      	ldr	r1, [pc, #64]	; (8002c4c <MRT_StandByMode+0x90>)
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f00f fc2b 	bl	8012468 <siprintf>
	println(msg);
 8002c12:	f107 030c 	add.w	r3, r7, #12
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe f9f8 	bl	800100c <println>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4808      	ldr	r0, [pc, #32]	; (8002c44 <MRT_StandByMode+0x88>)
 8002c22:	f007 fe49 	bl	800a8b8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MRT_StandByMode+0x74>
	{
	  Error_Handler();
 8002c2c:	f7ff fe32 	bl	8002894 <Error_Handler>
	}

	HAL_SuspendTick(); //System tick interrupt disabled (might not be necessary)
 8002c30:	f000 fb8a 	bl	8003348 <HAL_SuspendTick>

	HAL_PWR_EnterSTANDBYMode();
 8002c34:	f006 fac6 	bl	80091c4 <HAL_PWR_EnterSTANDBYMode>
}
 8002c38:	bf00      	nop
 8002c3a:	3730      	adds	r7, #48	; 0x30
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	08016848 	.word	0x08016848
 8002c44:	2000616c 	.word	0x2000616c
 8002c48:	08016864 	.word	0x08016864
 8002c4c:	08016874 	.word	0x08016874

08002c50 <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	71bb      	strb	r3, [r7, #6]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	717b      	strb	r3, [r7, #5]

	  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 4U, 0U);
	  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
	  */

	  sTime.Hours = int_to_hex_table[h];
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	4a1a      	ldr	r2, [pc, #104]	; (8002cd0 <MRT_set_rtc+0x80>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 8002c6a:	79bb      	ldrb	r3, [r7, #6]
 8002c6c:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <MRT_set_rtc+0x80>)
 8002c6e:	5cd3      	ldrb	r3, [r2, r3]
 8002c70:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 8002c72:	797b      	ldrb	r3, [r7, #5]
 8002c74:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <MRT_set_rtc+0x80>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002c82:	f107 030c 	add.w	r3, r7, #12
 8002c86:	2201      	movs	r2, #1
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4812      	ldr	r0, [pc, #72]	; (8002cd4 <MRT_set_rtc+0x84>)
 8002c8c:	f007 f9f5 	bl	800a07a <HAL_RTC_SetTime>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8002c96:	f7ff fdfd 	bl	8002894 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <MRT_set_rtc+0x88>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <MRT_set_rtc+0x88>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <MRT_set_rtc+0x88>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <MRT_set_rtc+0x88>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4908      	ldr	r1, [pc, #32]	; (8002cd8 <MRT_set_rtc+0x88>)
 8002cb6:	4807      	ldr	r0, [pc, #28]	; (8002cd4 <MRT_set_rtc+0x84>)
 8002cb8:	f007 fafa 	bl	800a2b0 <HAL_RTC_SetDate>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 8002cc2:	f7ff fde7 	bl	8002894 <Error_Handler>
	  }
}
 8002cc6:	bf00      	nop
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	2000616c 	.word	0x2000616c
 8002cd8:	200002e4 	.word	0x200002e4

08002cdc <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	71bb      	strb	r3, [r7, #6]
 8002cea:	4613      	mov	r3, r2
 8002cec:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	4a1a      	ldr	r2, [pc, #104]	; (8002d5c <MRT_set_alarmA+0x80>)
 8002cf2:	5cd2      	ldrb	r2, [r2, r3]
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <MRT_set_alarmA+0x84>)
 8002cf6:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002cf8:	79bb      	ldrb	r3, [r7, #6]
 8002cfa:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <MRT_set_alarmA+0x80>)
 8002cfc:	5cd2      	ldrb	r2, [r2, r3]
 8002cfe:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <MRT_set_alarmA+0x84>)
 8002d00:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002d02:	797b      	ldrb	r3, [r7, #5]
 8002d04:	4a15      	ldr	r2, [pc, #84]	; (8002d5c <MRT_set_alarmA+0x80>)
 8002d06:	5cd2      	ldrb	r2, [r2, r3]
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <MRT_set_alarmA+0x84>)
 8002d0a:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002d0c:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <MRT_set_alarmA+0x84>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d12:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <MRT_set_alarmA+0x84>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <MRT_set_alarmA+0x84>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <MRT_set_alarmA+0x84>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002d24:	4b0e      	ldr	r3, [pc, #56]	; (8002d60 <MRT_set_alarmA+0x84>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <MRT_set_alarmA+0x84>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <MRT_set_alarmA+0x84>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <MRT_set_alarmA+0x84>)
 8002d3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002d40:	2201      	movs	r2, #1
 8002d42:	4907      	ldr	r1, [pc, #28]	; (8002d60 <MRT_set_alarmA+0x84>)
 8002d44:	4807      	ldr	r0, [pc, #28]	; (8002d64 <MRT_set_alarmA+0x88>)
 8002d46:	f007 fba9 	bl	800a49c <HAL_RTC_SetAlarm_IT>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 8002d50:	f7ff fda0 	bl	8002894 <Error_Handler>
	  }
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	200002e8 	.word	0x200002e8
 8002d64:	2000616c 	.word	0x2000616c

08002d68 <MRT_set_alarmB>:



void MRT_set_alarmB(uint8_t h, uint8_t m, uint8_t s){
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
 8002d72:	460b      	mov	r3, r1
 8002d74:	71bb      	strb	r3, [r7, #6]
 8002d76:	4613      	mov	r3, r2
 8002d78:	717b      	strb	r3, [r7, #5]
	  /** Enable the AlarmB
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	4a1a      	ldr	r2, [pc, #104]	; (8002de8 <MRT_set_alarmB+0x80>)
 8002d7e:	5cd2      	ldrb	r2, [r2, r3]
 8002d80:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <MRT_set_alarmB+0x84>)
 8002d82:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8002d84:	79bb      	ldrb	r3, [r7, #6]
 8002d86:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <MRT_set_alarmB+0x80>)
 8002d88:	5cd2      	ldrb	r2, [r2, r3]
 8002d8a:	4b18      	ldr	r3, [pc, #96]	; (8002dec <MRT_set_alarmB+0x84>)
 8002d8c:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 8002d8e:	797b      	ldrb	r3, [r7, #5]
 8002d90:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <MRT_set_alarmB+0x80>)
 8002d92:	5cd2      	ldrb	r2, [r2, r3]
 8002d94:	4b15      	ldr	r3, [pc, #84]	; (8002dec <MRT_set_alarmB+0x84>)
 8002d96:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <MRT_set_alarmB+0x84>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d9e:	4b13      	ldr	r3, [pc, #76]	; (8002dec <MRT_set_alarmB+0x84>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <MRT_set_alarmB+0x84>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <MRT_set_alarmB+0x84>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002db0:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <MRT_set_alarmB+0x84>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002db6:	4b0d      	ldr	r3, [pc, #52]	; (8002dec <MRT_set_alarmB+0x84>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <MRT_set_alarmB+0x84>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_B;
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <MRT_set_alarmB+0x84>)
 8002dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dca:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	4907      	ldr	r1, [pc, #28]	; (8002dec <MRT_set_alarmB+0x84>)
 8002dd0:	4807      	ldr	r0, [pc, #28]	; (8002df0 <MRT_set_alarmB+0x88>)
 8002dd2:	f007 fb63 	bl	800a49c <HAL_RTC_SetAlarm_IT>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <MRT_set_alarmB+0x78>
	  {
	    Error_Handler();
 8002ddc:	f7ff fd5a 	bl	8002894 <Error_Handler>
	  }
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000000 	.word	0x20000000
 8002dec:	200002e8 	.word	0x200002e8
 8002df0:	2000616c 	.word	0x2000616c

08002df4 <MRT_RTC_backup_regs_Init>:
							  &rtc_bckp_reg_alt_apogee, &rtc_bckp_reg_apogee_time, &rtc_bckp_reg_alt_main, &rtc_bckp_reg_main_time,
							  &rtc_bckp_reg_alt_landed, &rtc_bckp_reg_landed_time};


//Get all the backup regs values (initialization)
void MRT_RTC_backup_regs_Init(void){
 8002df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df6:	b0cf      	sub	sp, #316	; 0x13c
 8002df8:	af08      	add	r7, sp, #32
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002e00:	e011      	b.n	8002e26 <MRT_RTC_backup_regs_Init+0x32>
		*rtc_bckp_regs[i] = MRT_RTC_getBackupReg(i);
 8002e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	4924      	ldr	r1, [pc, #144]	; (8002e9c <MRT_RTC_backup_regs_Init+0xa8>)
 8002e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e0e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8002e12:	4610      	mov	r0, r2
 8002e14:	f000 f87e 	bl	8002f14 <MRT_RTC_getBackupReg>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < NB_RTC_BCKP_REGS; i++){
 8002e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e20:	3301      	adds	r3, #1
 8002e22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e2a:	2b12      	cmp	r3, #18
 8002e2c:	dde9      	ble.n	8002e02 <MRT_RTC_backup_regs_Init+0xe>
	}

	//TODO TESTING
	char buffer[256];
	sprintf(buffer, "ALTITUDES:\r\n\tGround: %i \tTime: %i"
 8002e2e:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <MRT_RTC_backup_regs_Init+0xac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <MRT_RTC_backup_regs_Init+0xb0>)
 8002e36:	6819      	ldr	r1, [r3, #0]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <MRT_RTC_backup_regs_Init+0xb4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1b      	ldr	r2, [pc, #108]	; (8002eac <MRT_RTC_backup_regs_Init+0xb8>)
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	491b      	ldr	r1, [pc, #108]	; (8002eb0 <MRT_RTC_backup_regs_Init+0xbc>)
 8002e44:	6809      	ldr	r1, [r1, #0]
 8002e46:	481b      	ldr	r0, [pc, #108]	; (8002eb4 <MRT_RTC_backup_regs_Init+0xc0>)
 8002e48:	6800      	ldr	r0, [r0, #0]
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	4c1a      	ldr	r4, [pc, #104]	; (8002eb8 <MRT_RTC_backup_regs_Init+0xc4>)
 8002e4e:	6824      	ldr	r4, [r4, #0]
 8002e50:	4d1a      	ldr	r5, [pc, #104]	; (8002ebc <MRT_RTC_backup_regs_Init+0xc8>)
 8002e52:	682d      	ldr	r5, [r5, #0]
 8002e54:	4e1a      	ldr	r6, [pc, #104]	; (8002ec0 <MRT_RTC_backup_regs_Init+0xcc>)
 8002e56:	6836      	ldr	r6, [r6, #0]
 8002e58:	481a      	ldr	r0, [pc, #104]	; (8002ec4 <MRT_RTC_backup_regs_Init+0xd0>)
 8002e5a:	6800      	ldr	r0, [r0, #0]
 8002e5c:	f107 0c14 	add.w	ip, r7, #20
 8002e60:	9007      	str	r0, [sp, #28]
 8002e62:	9606      	str	r6, [sp, #24]
 8002e64:	9505      	str	r5, [sp, #20]
 8002e66:	9404      	str	r4, [sp, #16]
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	9003      	str	r0, [sp, #12]
 8002e6c:	9102      	str	r1, [sp, #8]
 8002e6e:	9201      	str	r2, [sp, #4]
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4914      	ldr	r1, [pc, #80]	; (8002ec8 <MRT_RTC_backup_regs_Init+0xd4>)
 8002e78:	4660      	mov	r0, ip
 8002e7a:	f00f faf5 	bl	8012468 <siprintf>
					"\r\n\tMain: %i \tTime: %i"
					"\r\n\tLanded: %i \tTime: %i\r\n",
			rtc_bckp_reg_alt_pad, rtc_bckp_reg_pad_time,  rtc_bckp_reg_alt_true_apogee, rtc_bckp_reg_true_apogee_time,
			rtc_bckp_reg_alt_apogee, rtc_bckp_reg_apogee_time, rtc_bckp_reg_alt_main, rtc_bckp_reg_main_time,
			rtc_bckp_reg_alt_landed, rtc_bckp_reg_landed_time);
	print(buffer);
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe f8e0 	bl	8001048 <print>

	HAL_Delay(2000);
 8002e88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002e8c:	f004 f974 	bl	8007178 <HAL_Delay>
}
 8002e90:	bf00      	nop
 8002e92:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000003c 	.word	0x2000003c
 8002ea0:	20000334 	.word	0x20000334
 8002ea4:	20000338 	.word	0x20000338
 8002ea8:	2000033c 	.word	0x2000033c
 8002eac:	20000340 	.word	0x20000340
 8002eb0:	20000344 	.word	0x20000344
 8002eb4:	20000348 	.word	0x20000348
 8002eb8:	2000034c 	.word	0x2000034c
 8002ebc:	20000350 	.word	0x20000350
 8002ec0:	20000354 	.word	0x20000354
 8002ec4:	20000358 	.word	0x20000358
 8002ec8:	08016894 	.word	0x08016894

08002ecc <MRT_RTC_clearBackupRegs>:

// initializes backup register values to zero
void MRT_RTC_clearBackupRegs(void) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002ed2:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <MRT_RTC_clearBackupRegs+0x44>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	22ca      	movs	r2, #202	; 0xca
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <MRT_RTC_clearBackupRegs+0x44>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2253      	movs	r2, #83	; 0x53
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24
	for (uint8_t i = 0; i < 20; i++) {
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	71fb      	strb	r3, [r7, #7]
 8002ee6:	e008      	b.n	8002efa <MRT_RTC_clearBackupRegs+0x2e>
		HAL_RTCEx_BKUPWrite(&hrtc, i, 0);	// set all backup register values to zero
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	2200      	movs	r2, #0
 8002eec:	4619      	mov	r1, r3
 8002eee:	4808      	ldr	r0, [pc, #32]	; (8002f10 <MRT_RTC_clearBackupRegs+0x44>)
 8002ef0:	f007 fe28 	bl	800ab44 <HAL_RTCEx_BKUPWrite>
	for (uint8_t i = 0; i < 20; i++) {
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	71fb      	strb	r3, [r7, #7]
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	2b13      	cmp	r3, #19
 8002efe:	d9f3      	bls.n	8002ee8 <MRT_RTC_clearBackupRegs+0x1c>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <MRT_RTC_clearBackupRegs+0x44>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	22ff      	movs	r2, #255	; 0xff
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	2000616c 	.word	0x2000616c

08002f14 <MRT_RTC_getBackupReg>:

// gets the backup register value for the specified state
uint32_t MRT_RTC_getBackupReg(rtc_backup_reg state) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002f1e:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <MRT_RTC_getBackupReg+0x38>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	22ca      	movs	r2, #202	; 0xca
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <MRT_RTC_getBackupReg+0x38>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2253      	movs	r2, #83	; 0x53
 8002f2c:	625a      	str	r2, [r3, #36]	; 0x24
	uint32_t val = HAL_RTCEx_BKUPRead(&hrtc, (uint32_t) state);
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	4619      	mov	r1, r3
 8002f32:	4806      	ldr	r0, [pc, #24]	; (8002f4c <MRT_RTC_getBackupReg+0x38>)
 8002f34:	f007 fe20 	bl	800ab78 <HAL_RTCEx_BKUPRead>
 8002f38:	60f8      	str	r0, [r7, #12]
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002f3a:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <MRT_RTC_getBackupReg+0x38>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	22ff      	movs	r2, #255	; 0xff
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24
	return val;
 8002f42:	68fb      	ldr	r3, [r7, #12]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	2000616c 	.word	0x2000616c

08002f50 <MRT_RTC_setBackupReg>:

// sets the backup register value for the specified state
void MRT_RTC_setBackupReg(rtc_backup_reg state, uint32_t value) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	71fb      	strb	r3, [r7, #7]
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <MRT_RTC_setBackupReg+0x38>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	22ca      	movs	r2, #202	; 0xca
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <MRT_RTC_setBackupReg+0x38>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2253      	movs	r2, #83	; 0x53
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTCEx_BKUPWrite(&hrtc, (uint32_t) state, value);
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	4619      	mov	r1, r3
 8002f72:	4805      	ldr	r0, [pc, #20]	; (8002f88 <MRT_RTC_setBackupReg+0x38>)
 8002f74:	f007 fde6 	bl	800ab44 <HAL_RTCEx_BKUPWrite>
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <MRT_RTC_setBackupReg+0x38>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	22ff      	movs	r2, #255	; 0xff
 8002f7e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	2000616c 	.word	0x2000616c

08002f8c <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002f90:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002f92:	4a18      	ldr	r2, [pc, #96]	; (8002ff4 <MX_SPI2_Init+0x68>)
 8002f94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f96:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002fa4:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002faa:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002fd8:	220a      	movs	r2, #10
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002fdc:	4804      	ldr	r0, [pc, #16]	; (8002ff0 <MX_SPI2_Init+0x64>)
 8002fde:	f007 fde3 	bl	800aba8 <HAL_SPI_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002fe8:	f7ff fc54 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	2000618c 	.word	0x2000618c
 8002ff4:	40003800 	.word	0x40003800

08002ff8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002ffc:	4b17      	ldr	r3, [pc, #92]	; (800305c <MX_SPI4_Init+0x64>)
 8002ffe:	4a18      	ldr	r2, [pc, #96]	; (8003060 <MX_SPI4_Init+0x68>)
 8003000:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003002:	4b16      	ldr	r3, [pc, #88]	; (800305c <MX_SPI4_Init+0x64>)
 8003004:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003008:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800300a:	4b14      	ldr	r3, [pc, #80]	; (800305c <MX_SPI4_Init+0x64>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003010:	4b12      	ldr	r3, [pc, #72]	; (800305c <MX_SPI4_Init+0x64>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003016:	4b11      	ldr	r3, [pc, #68]	; (800305c <MX_SPI4_Init+0x64>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800301c:	4b0f      	ldr	r3, [pc, #60]	; (800305c <MX_SPI4_Init+0x64>)
 800301e:	2200      	movs	r2, #0
 8003020:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003022:	4b0e      	ldr	r3, [pc, #56]	; (800305c <MX_SPI4_Init+0x64>)
 8003024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003028:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <MX_SPI4_Init+0x64>)
 800302c:	2200      	movs	r2, #0
 800302e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <MX_SPI4_Init+0x64>)
 8003032:	2200      	movs	r2, #0
 8003034:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <MX_SPI4_Init+0x64>)
 8003038:	2200      	movs	r2, #0
 800303a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800303c:	4b07      	ldr	r3, [pc, #28]	; (800305c <MX_SPI4_Init+0x64>)
 800303e:	2200      	movs	r2, #0
 8003040:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <MX_SPI4_Init+0x64>)
 8003044:	220a      	movs	r2, #10
 8003046:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003048:	4804      	ldr	r0, [pc, #16]	; (800305c <MX_SPI4_Init+0x64>)
 800304a:	f007 fdad 	bl	800aba8 <HAL_SPI_Init>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8003054:	f7ff fc1e 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}
 800305c:	2000623c 	.word	0x2000623c
 8003060:	40013400 	.word	0x40013400

08003064 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003068:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <MX_SPI5_Init+0x64>)
 800306a:	4a18      	ldr	r2, [pc, #96]	; (80030cc <MX_SPI5_Init+0x68>)
 800306c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800306e:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <MX_SPI5_Init+0x64>)
 8003070:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003074:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <MX_SPI5_Init+0x64>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <MX_SPI5_Init+0x64>)
 800307e:	2200      	movs	r2, #0
 8003080:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <MX_SPI5_Init+0x64>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <MX_SPI5_Init+0x64>)
 800308a:	2200      	movs	r2, #0
 800308c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800308e:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <MX_SPI5_Init+0x64>)
 8003090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003094:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <MX_SPI5_Init+0x64>)
 8003098:	2200      	movs	r2, #0
 800309a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <MX_SPI5_Init+0x64>)
 800309e:	2200      	movs	r2, #0
 80030a0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <MX_SPI5_Init+0x64>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a8:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <MX_SPI5_Init+0x64>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <MX_SPI5_Init+0x64>)
 80030b0:	220a      	movs	r2, #10
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80030b4:	4804      	ldr	r0, [pc, #16]	; (80030c8 <MX_SPI5_Init+0x64>)
 80030b6:	f007 fd77 	bl	800aba8 <HAL_SPI_Init>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80030c0:	f7ff fbe8 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200061e4 	.word	0x200061e4
 80030cc:	40015000 	.word	0x40015000

080030d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08e      	sub	sp, #56	; 0x38
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a4c      	ldr	r2, [pc, #304]	; (8003220 <HAL_SPI_MspInit+0x150>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d12d      	bne.n	800314e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
 80030f6:	4b4b      	ldr	r3, [pc, #300]	; (8003224 <HAL_SPI_MspInit+0x154>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a4a      	ldr	r2, [pc, #296]	; (8003224 <HAL_SPI_MspInit+0x154>)
 80030fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b48      	ldr	r3, [pc, #288]	; (8003224 <HAL_SPI_MspInit+0x154>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310a:	623b      	str	r3, [r7, #32]
 800310c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	4b44      	ldr	r3, [pc, #272]	; (8003224 <HAL_SPI_MspInit+0x154>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a43      	ldr	r2, [pc, #268]	; (8003224 <HAL_SPI_MspInit+0x154>)
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b41      	ldr	r3, [pc, #260]	; (8003224 <HAL_SPI_MspInit+0x154>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800312a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003138:	2303      	movs	r3, #3
 800313a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800313c:	2305      	movs	r3, #5
 800313e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003144:	4619      	mov	r1, r3
 8003146:	4838      	ldr	r0, [pc, #224]	; (8003228 <HAL_SPI_MspInit+0x158>)
 8003148:	f004 fd5e 	bl	8007c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800314c:	e064      	b.n	8003218 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a36      	ldr	r2, [pc, #216]	; (800322c <HAL_SPI_MspInit+0x15c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d12d      	bne.n	80031b4 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_SPI_MspInit+0x154>)
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	4a30      	ldr	r2, [pc, #192]	; (8003224 <HAL_SPI_MspInit+0x154>)
 8003162:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003166:	6453      	str	r3, [r2, #68]	; 0x44
 8003168:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <HAL_SPI_MspInit+0x154>)
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_SPI_MspInit+0x154>)
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	4a29      	ldr	r2, [pc, #164]	; (8003224 <HAL_SPI_MspInit+0x154>)
 800317e:	f043 0310 	orr.w	r3, r3, #16
 8003182:	6313      	str	r3, [r2, #48]	; 0x30
 8003184:	4b27      	ldr	r3, [pc, #156]	; (8003224 <HAL_SPI_MspInit+0x154>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003190:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319e:	2303      	movs	r3, #3
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80031a2:	2305      	movs	r3, #5
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031aa:	4619      	mov	r1, r3
 80031ac:	4820      	ldr	r0, [pc, #128]	; (8003230 <HAL_SPI_MspInit+0x160>)
 80031ae:	f004 fd2b 	bl	8007c08 <HAL_GPIO_Init>
}
 80031b2:	e031      	b.n	8003218 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_SPI_MspInit+0x164>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d12c      	bne.n	8003218 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <HAL_SPI_MspInit+0x154>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	4a17      	ldr	r2, [pc, #92]	; (8003224 <HAL_SPI_MspInit+0x154>)
 80031c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031cc:	6453      	str	r3, [r2, #68]	; 0x44
 80031ce:	4b15      	ldr	r3, [pc, #84]	; (8003224 <HAL_SPI_MspInit+0x154>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_SPI_MspInit+0x154>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	4a10      	ldr	r2, [pc, #64]	; (8003224 <HAL_SPI_MspInit+0x154>)
 80031e4:	f043 0320 	orr.w	r3, r3, #32
 80031e8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ea:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <HAL_SPI_MspInit+0x154>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80031f6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fc:	2302      	movs	r3, #2
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003200:	2301      	movs	r3, #1
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003204:	2303      	movs	r3, #3
 8003206:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003208:	2305      	movs	r3, #5
 800320a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800320c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003210:	4619      	mov	r1, r3
 8003212:	4809      	ldr	r0, [pc, #36]	; (8003238 <HAL_SPI_MspInit+0x168>)
 8003214:	f004 fcf8 	bl	8007c08 <HAL_GPIO_Init>
}
 8003218:	bf00      	nop
 800321a:	3738      	adds	r7, #56	; 0x38
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40003800 	.word	0x40003800
 8003224:	40023800 	.word	0x40023800
 8003228:	40020400 	.word	0x40020400
 800322c:	40013400 	.word	0x40013400
 8003230:	40021000 	.word	0x40021000
 8003234:	40015000 	.word	0x40015000
 8003238:	40021400 	.word	0x40021400

0800323c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_MspInit+0x54>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	4a11      	ldr	r2, [pc, #68]	; (8003290 <HAL_MspInit+0x54>)
 800324c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003250:	6453      	str	r3, [r2, #68]	; 0x44
 8003252:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_MspInit+0x54>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_MspInit+0x54>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <HAL_MspInit+0x54>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	6413      	str	r3, [r2, #64]	; 0x40
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <HAL_MspInit+0x54>)
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800327a:	2200      	movs	r2, #0
 800327c:	210f      	movs	r1, #15
 800327e:	f06f 0001 	mvn.w	r0, #1
 8003282:	f004 fc89 	bl	8007b98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800

08003294 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08c      	sub	sp, #48	; 0x30
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80032a4:	2200      	movs	r2, #0
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	2036      	movs	r0, #54	; 0x36
 80032aa:	f004 fc75 	bl	8007b98 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80032ae:	2036      	movs	r0, #54	; 0x36
 80032b0:	f004 fc8e 	bl	8007bd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <HAL_InitTick+0xa4>)
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032bc:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <HAL_InitTick+0xa4>)
 80032be:	f043 0310 	orr.w	r3, r3, #16
 80032c2:	6413      	str	r3, [r2, #64]	; 0x40
 80032c4:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <HAL_InitTick+0xa4>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032d0:	f107 0210 	add.w	r2, r7, #16
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f006 fc4c 	bl	8009b78 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80032e0:	f006 fc22 	bl	8009b28 <HAL_RCC_GetPCLK1Freq>
 80032e4:	4603      	mov	r3, r0
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	4a13      	ldr	r2, [pc, #76]	; (800333c <HAL_InitTick+0xa8>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	0c9b      	lsrs	r3, r3, #18
 80032f4:	3b01      	subs	r3, #1
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80032f8:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_InitTick+0xac>)
 80032fa:	4a12      	ldr	r2, [pc, #72]	; (8003344 <HAL_InitTick+0xb0>)
 80032fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80032fe:	4b10      	ldr	r3, [pc, #64]	; (8003340 <HAL_InitTick+0xac>)
 8003300:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003304:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003306:	4a0e      	ldr	r2, [pc, #56]	; (8003340 <HAL_InitTick+0xac>)
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <HAL_InitTick+0xac>)
 800330e:	2200      	movs	r2, #0
 8003310:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <HAL_InitTick+0xac>)
 8003314:	2200      	movs	r2, #0
 8003316:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003318:	4809      	ldr	r0, [pc, #36]	; (8003340 <HAL_InitTick+0xac>)
 800331a:	f008 f9ed 	bl	800b6f8 <HAL_TIM_Base_Init>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003324:	4806      	ldr	r0, [pc, #24]	; (8003340 <HAL_InitTick+0xac>)
 8003326:	f008 fa37 	bl	800b798 <HAL_TIM_Base_Start_IT>
 800332a:	4603      	mov	r3, r0
 800332c:	e000      	b.n	8003330 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
}
 8003330:	4618      	mov	r0, r3
 8003332:	3730      	adds	r7, #48	; 0x30
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40023800 	.word	0x40023800
 800333c:	431bde83 	.word	0x431bde83
 8003340:	20006294 	.word	0x20006294
 8003344:	40001000 	.word	0x40001000

08003348 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM6 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* Disable TIM6 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim6, TIM_IT_UPDATE);
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_SuspendTick+0x20>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_SuspendTick+0x20>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	60da      	str	r2, [r3, #12]
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	20006294 	.word	0x20006294

0800336c <__NVIC_SystemReset>:
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003370:	f3bf 8f4f 	dsb	sy
}
 8003374:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <__NVIC_SystemReset+0x24>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800337e:	4904      	ldr	r1, [pc, #16]	; (8003390 <__NVIC_SystemReset+0x24>)
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <__NVIC_SystemReset+0x28>)
 8003382:	4313      	orrs	r3, r2
 8003384:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003386:	f3bf 8f4f 	dsb	sy
}
 800338a:	bf00      	nop
    __NOP();
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <__NVIC_SystemReset+0x20>
 8003390:	e000ed00 	.word	0xe000ed00
 8003394:	05fa0004 	.word	0x05fa0004

08003398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800339c:	e7fe      	b.n	800339c <NMI_Handler+0x4>
	...

080033a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	println((char*) "Hardfault: Going into standByMode and waiting for IWDG reset");
 80033a4:	4804      	ldr	r0, [pc, #16]	; (80033b8 <HardFault_Handler+0x18>)
 80033a6:	f7fd fe31 	bl	800100c <println>
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80033aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80033ae:	f005 fee3 	bl	8009178 <HAL_PWR_EnableWakeUpPin>
	HAL_PWR_EnterSTANDBYMode();
 80033b2:	f005 ff07 	bl	80091c4 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033b6:	e7fe      	b.n	80033b6 <HardFault_Handler+0x16>
 80033b8:	08016918 	.word	0x08016918

080033bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c0:	e7fe      	b.n	80033c0 <MemManage_Handler+0x4>

080033c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033c6:	e7fe      	b.n	80033c6 <BusFault_Handler+0x4>

080033c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <UsageFault_Handler+0x4>

080033ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80033e0:	4802      	ldr	r0, [pc, #8]	; (80033ec <RTC_WKUP_IRQHandler+0x10>)
 80033e2:	f007 fb81 	bl	800aae8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	2000616c 	.word	0x2000616c

080033f0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80033f4:	2001      	movs	r0, #1
 80033f6:	f004 fde5 	bl	8007fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <TIM6_DAC_IRQHandler+0x10>)
 8003406:	f008 fbc9 	bl	800bb9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20006294 	.word	0x20006294

08003414 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin){
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d102      	bne.n	800342a <HAL_GPIO_EXTI_Callback+0x16>
		//Manual reset from external button
		restart_flag = 1;
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <HAL_GPIO_EXTI_Callback+0x24>)
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
	}
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	2000035e 	.word	0x2000035e

0800343c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003440:	4802      	ldr	r0, [pc, #8]	; (800344c <RTC_Alarm_IRQHandler+0x10>)
 8003442:	f007 f963 	bl	800a70c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2000616c 	.word	0x2000616c

08003450 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
	println("\r\nAlarmA");
 8003458:	4804      	ldr	r0, [pc, #16]	; (800346c <HAL_RTC_AlarmAEventCallback+0x1c>)
 800345a:	f7fd fdd7 	bl	800100c <println>
	flagA = 1;
 800345e:	4b04      	ldr	r3, [pc, #16]	; (8003470 <HAL_RTC_AlarmAEventCallback+0x20>)
 8003460:	2201      	movs	r2, #1
 8003462:	701a      	strb	r2, [r3, #0]
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	08016958 	.word	0x08016958
 8003470:	2000035c 	.word	0x2000035c

08003474 <HAL_RTCEx_AlarmBEventCallback>:


void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc){
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	println("\r\nAlarmB");
 800347c:	4804      	ldr	r0, [pc, #16]	; (8003490 <HAL_RTCEx_AlarmBEventCallback+0x1c>)
 800347e:	f7fd fdc5 	bl	800100c <println>
	flagB = 1;
 8003482:	4b04      	ldr	r3, [pc, #16]	; (8003494 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	08016964 	.word	0x08016964
 8003494:	2000035d 	.word	0x2000035d

08003498 <MRT_resetFromStart>:
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
}
*/


void MRT_resetFromStart(void){
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0

	//Clear memory
	MRT_clearExternalFlash();
 800349c:	f000 fbf8 	bl	8003c90 <MRT_clearExternalFlash>
	MRT_RTC_clearBackupRegs();
 80034a0:	f7ff fd14 	bl	8002ecc <MRT_RTC_clearBackupRegs>
	#if IRIDIUM_
	MRT_Iridium_Deinit();
	#endif

	//Reset function
	NVIC_SystemReset();
 80034a4:	f7ff ff62 	bl	800336c <__NVIC_SystemReset>

080034a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <SystemInit+0x20>)
 80034ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b2:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <SystemInit+0x20>)
 80034b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	e000ed00 	.word	0xe000ed00

080034cc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08e      	sub	sp, #56	; 0x38
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034e0:	f107 0320 	add.w	r3, r7, #32
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034ea:	1d3b      	adds	r3, r7, #4
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
 80034f8:	615a      	str	r2, [r3, #20]
 80034fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034fc:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <MX_TIM2_Init+0xe8>)
 80034fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003504:	4b2b      	ldr	r3, [pc, #172]	; (80035b4 <MX_TIM2_Init+0xe8>)
 8003506:	2259      	movs	r2, #89	; 0x59
 8003508:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800350a:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <MX_TIM2_Init+0xe8>)
 800350c:	2200      	movs	r2, #0
 800350e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <MX_TIM2_Init+0xe8>)
 8003512:	f240 128f 	movw	r2, #399	; 0x18f
 8003516:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003518:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <MX_TIM2_Init+0xe8>)
 800351a:	2200      	movs	r2, #0
 800351c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800351e:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <MX_TIM2_Init+0xe8>)
 8003520:	2200      	movs	r2, #0
 8003522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003524:	4823      	ldr	r0, [pc, #140]	; (80035b4 <MX_TIM2_Init+0xe8>)
 8003526:	f008 f8e7 	bl	800b6f8 <HAL_TIM_Base_Init>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003530:	f7ff f9b0 	bl	8002894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800353a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800353e:	4619      	mov	r1, r3
 8003540:	481c      	ldr	r0, [pc, #112]	; (80035b4 <MX_TIM2_Init+0xe8>)
 8003542:	f008 fcf5 	bl	800bf30 <HAL_TIM_ConfigClockSource>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d001      	beq.n	8003550 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800354c:	f7ff f9a2 	bl	8002894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003550:	4818      	ldr	r0, [pc, #96]	; (80035b4 <MX_TIM2_Init+0xe8>)
 8003552:	f008 f991 	bl	800b878 <HAL_TIM_PWM_Init>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800355c:	f7ff f99a 	bl	8002894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003560:	2320      	movs	r3, #32
 8003562:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003564:	2300      	movs	r3, #0
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003568:	f107 0320 	add.w	r3, r7, #32
 800356c:	4619      	mov	r1, r3
 800356e:	4811      	ldr	r0, [pc, #68]	; (80035b4 <MX_TIM2_Init+0xe8>)
 8003570:	f009 f8de 	bl	800c730 <HAL_TIMEx_MasterConfigSynchronization>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800357a:	f7ff f98b 	bl	8002894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800357e:	2360      	movs	r3, #96	; 0x60
 8003580:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8003582:	2364      	movs	r3, #100	; 0x64
 8003584:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	2208      	movs	r2, #8
 8003592:	4619      	mov	r1, r3
 8003594:	4807      	ldr	r0, [pc, #28]	; (80035b4 <MX_TIM2_Init+0xe8>)
 8003596:	f008 fc09 	bl	800bdac <HAL_TIM_PWM_ConfigChannel>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80035a0:	f7ff f978 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80035a4:	4803      	ldr	r0, [pc, #12]	; (80035b4 <MX_TIM2_Init+0xe8>)
 80035a6:	f000 f827 	bl	80035f8 <HAL_TIM_MspPostInit>

}
 80035aa:	bf00      	nop
 80035ac:	3738      	adds	r7, #56	; 0x38
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	200062dc 	.word	0x200062dc

080035b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c8:	d10d      	bne.n	80035e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_TIM_Base_MspInit+0x3c>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_TIM_Base_MspInit+0x3c>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6413      	str	r3, [r2, #64]	; 0x40
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_TIM_Base_MspInit+0x3c>)
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80035e6:	bf00      	nop
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800

080035f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 030c 	add.w	r3, r7, #12
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d11d      	bne.n	8003656 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_TIM_MspPostInit+0x68>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a0f      	ldr	r2, [pc, #60]	; (8003660 <HAL_TIM_MspPostInit+0x68>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <HAL_TIM_MspPostInit+0x68>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8003636:	2304      	movs	r3, #4
 8003638:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003646:	2301      	movs	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800364a:	f107 030c 	add.w	r3, r7, #12
 800364e:	4619      	mov	r1, r3
 8003650:	4804      	ldr	r0, [pc, #16]	; (8003664 <HAL_TIM_MspPostInit+0x6c>)
 8003652:	f004 fad9 	bl	8007c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003656:	bf00      	nop
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	40020000 	.word	0x40020000

08003668 <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <MX_UART8_Init+0x4c>)
 800366e:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <MX_UART8_Init+0x50>)
 8003670:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <MX_UART8_Init+0x4c>)
 8003674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003678:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800367a:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <MX_UART8_Init+0x4c>)
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <MX_UART8_Init+0x4c>)
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <MX_UART8_Init+0x4c>)
 8003688:	2200      	movs	r2, #0
 800368a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <MX_UART8_Init+0x4c>)
 800368e:	220c      	movs	r2, #12
 8003690:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <MX_UART8_Init+0x4c>)
 8003694:	2200      	movs	r2, #0
 8003696:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <MX_UART8_Init+0x4c>)
 800369a:	2200      	movs	r2, #0
 800369c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800369e:	4805      	ldr	r0, [pc, #20]	; (80036b4 <MX_UART8_Init+0x4c>)
 80036a0:	f009 f8d6 	bl	800c850 <HAL_UART_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80036aa:	f7ff f8f3 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20006368 	.word	0x20006368
 80036b8:	40007c00 	.word	0x40007c00

080036bc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <MX_USART3_UART_Init+0x4c>)
 80036c2:	4a12      	ldr	r2, [pc, #72]	; (800370c <MX_USART3_UART_Init+0x50>)
 80036c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <MX_USART3_UART_Init+0x4c>)
 80036c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80036cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036ce:	4b0e      	ldr	r3, [pc, #56]	; (8003708 <MX_USART3_UART_Init+0x4c>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <MX_USART3_UART_Init+0x4c>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <MX_USART3_UART_Init+0x4c>)
 80036dc:	2200      	movs	r2, #0
 80036de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80036e0:	4b09      	ldr	r3, [pc, #36]	; (8003708 <MX_USART3_UART_Init+0x4c>)
 80036e2:	220c      	movs	r2, #12
 80036e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036e6:	4b08      	ldr	r3, [pc, #32]	; (8003708 <MX_USART3_UART_Init+0x4c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <MX_USART3_UART_Init+0x4c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80036f2:	4805      	ldr	r0, [pc, #20]	; (8003708 <MX_USART3_UART_Init+0x4c>)
 80036f4:	f009 f8ac 	bl	800c850 <HAL_UART_Init>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80036fe:	f7ff f8c9 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20006324 	.word	0x20006324
 800370c:	40004800 	.word	0x40004800

08003710 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <MX_USART6_UART_Init+0x4c>)
 8003716:	4a12      	ldr	r2, [pc, #72]	; (8003760 <MX_USART6_UART_Init+0x50>)
 8003718:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <MX_USART6_UART_Init+0x4c>)
 800371c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003720:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003722:	4b0e      	ldr	r3, [pc, #56]	; (800375c <MX_USART6_UART_Init+0x4c>)
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <MX_USART6_UART_Init+0x4c>)
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800372e:	4b0b      	ldr	r3, [pc, #44]	; (800375c <MX_USART6_UART_Init+0x4c>)
 8003730:	2200      	movs	r2, #0
 8003732:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <MX_USART6_UART_Init+0x4c>)
 8003736:	220c      	movs	r2, #12
 8003738:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <MX_USART6_UART_Init+0x4c>)
 800373c:	2200      	movs	r2, #0
 800373e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <MX_USART6_UART_Init+0x4c>)
 8003742:	2200      	movs	r2, #0
 8003744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003746:	4805      	ldr	r0, [pc, #20]	; (800375c <MX_USART6_UART_Init+0x4c>)
 8003748:	f009 f882 	bl	800c850 <HAL_UART_Init>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003752:	f7ff f89f 	bl	8002894 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200063ac 	.word	0x200063ac
 8003760:	40011400 	.word	0x40011400

08003764 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08e      	sub	sp, #56	; 0x38
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	609a      	str	r2, [r3, #8]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a4b      	ldr	r2, [pc, #300]	; (80038b0 <HAL_UART_MspInit+0x14c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d12c      	bne.n	80037e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	623b      	str	r3, [r7, #32]
 800378a:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <HAL_UART_MspInit+0x150>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	4a49      	ldr	r2, [pc, #292]	; (80038b4 <HAL_UART_MspInit+0x150>)
 8003790:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003794:	6413      	str	r3, [r2, #64]	; 0x40
 8003796:	4b47      	ldr	r3, [pc, #284]	; (80038b4 <HAL_UART_MspInit+0x150>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800379e:	623b      	str	r3, [r7, #32]
 80037a0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	4b43      	ldr	r3, [pc, #268]	; (80038b4 <HAL_UART_MspInit+0x150>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	4a42      	ldr	r2, [pc, #264]	; (80038b4 <HAL_UART_MspInit+0x150>)
 80037ac:	f043 0310 	orr.w	r3, r3, #16
 80037b0:	6313      	str	r3, [r2, #48]	; 0x30
 80037b2:	4b40      	ldr	r3, [pc, #256]	; (80038b4 <HAL_UART_MspInit+0x150>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f003 0310 	and.w	r3, r3, #16
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 80037be:	2303      	movs	r3, #3
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c2:	2302      	movs	r3, #2
 80037c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ca:	2303      	movs	r3, #3
 80037cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80037ce:	2308      	movs	r3, #8
 80037d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d6:	4619      	mov	r1, r3
 80037d8:	4837      	ldr	r0, [pc, #220]	; (80038b8 <HAL_UART_MspInit+0x154>)
 80037da:	f004 fa15 	bl	8007c08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80037de:	e063      	b.n	80038a8 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a35      	ldr	r2, [pc, #212]	; (80038bc <HAL_UART_MspInit+0x158>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d12d      	bne.n	8003846 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <HAL_UART_MspInit+0x150>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	4a30      	ldr	r2, [pc, #192]	; (80038b4 <HAL_UART_MspInit+0x150>)
 80037f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f8:	6413      	str	r3, [r2, #64]	; 0x40
 80037fa:	4b2e      	ldr	r3, [pc, #184]	; (80038b4 <HAL_UART_MspInit+0x150>)
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <HAL_UART_MspInit+0x150>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a29      	ldr	r2, [pc, #164]	; (80038b4 <HAL_UART_MspInit+0x150>)
 8003810:	f043 0308 	orr.w	r3, r3, #8
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <HAL_UART_MspInit+0x150>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8003822:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003828:	2302      	movs	r3, #2
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	2300      	movs	r3, #0
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003830:	2303      	movs	r3, #3
 8003832:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003834:	2307      	movs	r3, #7
 8003836:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800383c:	4619      	mov	r1, r3
 800383e:	4820      	ldr	r0, [pc, #128]	; (80038c0 <HAL_UART_MspInit+0x15c>)
 8003840:	f004 f9e2 	bl	8007c08 <HAL_GPIO_Init>
}
 8003844:	e030      	b.n	80038a8 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <HAL_UART_MspInit+0x160>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d12b      	bne.n	80038a8 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003850:	2300      	movs	r3, #0
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <HAL_UART_MspInit+0x150>)
 8003856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003858:	4a16      	ldr	r2, [pc, #88]	; (80038b4 <HAL_UART_MspInit+0x150>)
 800385a:	f043 0320 	orr.w	r3, r3, #32
 800385e:	6453      	str	r3, [r2, #68]	; 0x44
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <HAL_UART_MspInit+0x150>)
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	613b      	str	r3, [r7, #16]
 800386a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <HAL_UART_MspInit+0x150>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <HAL_UART_MspInit+0x150>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	6313      	str	r3, [r2, #48]	; 0x30
 800387c:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <HAL_UART_MspInit+0x150>)
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8003888:	23c0      	movs	r3, #192	; 0xc0
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800388c:	2302      	movs	r3, #2
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003894:	2303      	movs	r3, #3
 8003896:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003898:	2308      	movs	r3, #8
 800389a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800389c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038a0:	4619      	mov	r1, r3
 80038a2:	4809      	ldr	r0, [pc, #36]	; (80038c8 <HAL_UART_MspInit+0x164>)
 80038a4:	f004 f9b0 	bl	8007c08 <HAL_GPIO_Init>
}
 80038a8:	bf00      	nop
 80038aa:	3738      	adds	r7, #56	; 0x38
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40007c00 	.word	0x40007c00
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40004800 	.word	0x40004800
 80038c0:	40020c00 	.word	0x40020c00
 80038c4:	40011400 	.word	0x40011400
 80038c8:	40020800 	.word	0x40020800

080038cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80038cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003904 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038d2:	e003      	b.n	80038dc <LoopCopyDataInit>

080038d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038d4:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038da:	3104      	adds	r1, #4

080038dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038dc:	480b      	ldr	r0, [pc, #44]	; (800390c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038de:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038e4:	d3f6      	bcc.n	80038d4 <CopyDataInit>
  ldr  r2, =_sbss
 80038e6:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038e8:	e002      	b.n	80038f0 <LoopFillZerobss>

080038ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80038ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038ec:	f842 3b04 	str.w	r3, [r2], #4

080038f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038f4:	d3f9      	bcc.n	80038ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038f6:	f7ff fdd7 	bl	80034a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038fa:	f00d fcdf 	bl	80112bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038fe:	f7fe fe7f 	bl	8002600 <main>
  bx  lr    
 8003902:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003904:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003908:	08017a74 	.word	0x08017a74
  ldr  r0, =_sdata
 800390c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003910:	200002ac 	.word	0x200002ac
  ldr  r2, =_sbss
 8003914:	200002ac 	.word	0x200002ac
  ldr  r3, = _ebss
 8003918:	20006abc 	.word	0x20006abc

0800391c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800391c:	e7fe      	b.n	800391c <ADC_IRQHandler>
	...

08003920 <MRT_getAltitude>:

/*
 * Gets the altitude using temperature, pressure and sea-level pressure
 *https://www.mide.com/air-pressure-at-altitude-calculator
 */
float MRT_getAltitude(float pressure){
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	ed87 0a01 	vstr	s0, [r7, #4]
	return BASE_HEIGHT+(SEA_LEVEL_TEMPERATURE/-0.0065)*(pow(pressure/SEA_LEVEL_PRESSURE,0.190263236)-1); //(-R*-0.0065/(go*M)) = 0.190263236
 800392a:	edd7 7a01 	vldr	s15, [r7, #4]
 800392e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80039b0 <MRT_getAltitude+0x90>
 8003932:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003936:	ee16 0a90 	vmov	r0, s13
 800393a:	f7fc fe15 	bl	8000568 <__aeabi_f2d>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	ed9f 1b17 	vldr	d1, [pc, #92]	; 80039a0 <MRT_getAltitude+0x80>
 8003946:	ec43 2b10 	vmov	d0, r2, r3
 800394a:	f00c fbfd 	bl	8010148 <pow>
 800394e:	ec51 0b10 	vmov	r0, r1, d0
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	4b17      	ldr	r3, [pc, #92]	; (80039b4 <MRT_getAltitude+0x94>)
 8003958:	f7fc fca6 	bl	80002a8 <__aeabi_dsub>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	a310      	add	r3, pc, #64	; (adr r3, 80039a8 <MRT_getAltitude+0x88>)
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	f7fc fe55 	bl	8000618 <__aeabi_dmul>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4610      	mov	r0, r2
 8003974:	4619      	mov	r1, r3
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <MRT_getAltitude+0x98>)
 800397c:	f7fc fc96 	bl	80002ac <__adddf3>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4610      	mov	r0, r2
 8003986:	4619      	mov	r1, r3
 8003988:	f7fd f93e 	bl	8000c08 <__aeabi_d2f>
 800398c:	4603      	mov	r3, r0
 800398e:	ee07 3a90 	vmov	s15, r3
}
 8003992:	eeb0 0a67 	vmov.f32	s0, s15
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	f3af 8000 	nop.w
 80039a0:	b4202506 	.word	0xb4202506
 80039a4:	3fc85a8b 	.word	0x3fc85a8b
 80039a8:	76276276 	.word	0x76276276
 80039ac:	c0e481c2 	.word	0xc0e481c2
 80039b0:	447d8000 	.word	0x447d8000
 80039b4:	3ff00000 	.word	0x3ff00000
 80039b8:	40590000 	.word	0x40590000

080039bc <MRT_getContinuity>:
 * Checks the continuity of the gates
 *
 * returns a binary number in its decimal form. Each bit is the state of a gate.
 * bit3 bit2 bit1 bit0 = drogue1 drogue2 prop1 prop2
 */
uint8_t MRT_getContinuity(void){
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
	uint8_t drogue1 = HAL_GPIO_ReadPin(IN_EJ_Drogue_Cont_GPIO_Port, IN_EJ_Drogue_Cont_Pin);
 80039c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039c6:	4815      	ldr	r0, [pc, #84]	; (8003a1c <MRT_getContinuity+0x60>)
 80039c8:	f004 faca 	bl	8007f60 <HAL_GPIO_ReadPin>
 80039cc:	4603      	mov	r3, r0
 80039ce:	71fb      	strb	r3, [r7, #7]
	uint8_t drogue2 = HAL_GPIO_ReadPin(IN_EJ_Main_Cont_GPIO_Port, IN_EJ_Main_Cont_Pin);
 80039d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80039d4:	4811      	ldr	r0, [pc, #68]	; (8003a1c <MRT_getContinuity+0x60>)
 80039d6:	f004 fac3 	bl	8007f60 <HAL_GPIO_ReadPin>
 80039da:	4603      	mov	r3, r0
 80039dc:	71bb      	strb	r3, [r7, #6]
	uint8_t prop1 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_1_GPIO_Port, IN_PyroValve_Cont_1_Pin);
 80039de:	2101      	movs	r1, #1
 80039e0:	480e      	ldr	r0, [pc, #56]	; (8003a1c <MRT_getContinuity+0x60>)
 80039e2:	f004 fabd 	bl	8007f60 <HAL_GPIO_ReadPin>
 80039e6:	4603      	mov	r3, r0
 80039e8:	717b      	strb	r3, [r7, #5]
	uint8_t prop2 = HAL_GPIO_ReadPin(IN_PyroValve_Cont_2_GPIO_Port, IN_PyroValve_Cont_2_Pin);
 80039ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039ee:	480c      	ldr	r0, [pc, #48]	; (8003a20 <MRT_getContinuity+0x64>)
 80039f0:	f004 fab6 	bl	8007f60 <HAL_GPIO_ReadPin>
 80039f4:	4603      	mov	r3, r0
 80039f6:	713b      	strb	r3, [r7, #4]
	uint8_t continuity = 8*drogue1 + 4*drogue2 + 2*prop1 + prop2;
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	005a      	lsls	r2, r3, #1
 80039fc:	79bb      	ldrb	r3, [r7, #6]
 80039fe:	4413      	add	r3, r2
 8003a00:	005a      	lsls	r2, r3, #1
 8003a02:	797b      	ldrb	r3, [r7, #5]
 8003a04:	4413      	add	r3, r2
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	793b      	ldrb	r3, [r7, #4]
 8003a0e:	4413      	add	r3, r2
 8003a10:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8003a12:	78fb      	ldrb	r3, [r7, #3]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021800 	.word	0x40021800
 8003a20:	40021400 	.word	0x40021400

08003a24 <MRT_formatAvionics>:


// formats avionics telemetry string using sprintf
void MRT_formatAvionics(void) {
 8003a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a28:	b0a3      	sub	sp, #140	; 0x8c
 8003a2a:	af16      	add	r7, sp, #88	; 0x58
	memset(msg_buffer_av, 0, 200);
 8003a2c:	22c8      	movs	r2, #200	; 0xc8
 8003a2e:	2100      	movs	r1, #0
 8003a30:	483c      	ldr	r0, [pc, #240]	; (8003b24 <MRT_formatAvionics+0x100>)
 8003a32:	f00d fc9b 	bl	801136c <memset>
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003a36:	4b3c      	ldr	r3, [pc, #240]	; (8003b28 <MRT_formatAvionics+0x104>)
 8003a38:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fc fd94 	bl	8000568 <__aeabi_f2d>
 8003a40:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003a44:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <MRT_formatAvionics+0x104>)
 8003a46:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc fd8d 	bl	8000568 <__aeabi_f2d>
 8003a4e:	e9c7 0108 	strd	r0, r1, [r7, #32]
		hlsm6dsr.acceleration_mg[0],	hlsm6dsr.acceleration_mg[1],	hlsm6dsr.acceleration_mg[2],
 8003a52:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <MRT_formatAvionics+0x104>)
 8003a54:	689b      	ldr	r3, [r3, #8]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fc fd86 	bl	8000568 <__aeabi_f2d>
 8003a5c:	e9c7 0106 	strd	r0, r1, [r7, #24]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003a60:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <MRT_formatAvionics+0x104>)
 8003a62:	68db      	ldr	r3, [r3, #12]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fc fd7f 	bl	8000568 <__aeabi_f2d>
 8003a6a:	e9c7 0104 	strd	r0, r1, [r7, #16]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003a6e:	4b2e      	ldr	r3, [pc, #184]	; (8003b28 <MRT_formatAvionics+0x104>)
 8003a70:	691b      	ldr	r3, [r3, #16]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fc fd78 	bl	8000568 <__aeabi_f2d>
 8003a78:	e9c7 0102 	strd	r0, r1, [r7, #8]
		hlsm6dsr.angular_rate_mdps[0],	hlsm6dsr.angular_rate_mdps[1],	hlsm6dsr.angular_rate_mdps[2],
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <MRT_formatAvionics+0x104>)
 8003a7e:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fc fd71 	bl	8000568 <__aeabi_f2d>
 8003a86:	e9c7 0100 	strd	r0, r1, [r7]
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003a8a:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <MRT_formatAvionics+0x108>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fc fd6a 	bl	8000568 <__aeabi_f2d>
 8003a94:	4682      	mov	sl, r0
 8003a96:	468b      	mov	fp, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <MRT_formatAvionics+0x10c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fc fd63 	bl	8000568 <__aeabi_f2d>
 8003aa2:	4680      	mov	r8, r0
 8003aa4:	4689      	mov	r9, r1
		hlps22hh.pressure_hPa,	hgps.latitude,	hgps.longitude,
 8003aa6:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <MRT_formatAvionics+0x10c>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
	sprintf(msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E",
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fd5c 	bl	8000568 <__aeabi_f2d>
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	460d      	mov	r5, r1
 8003ab4:	4b1f      	ldr	r3, [pc, #124]	; (8003b34 <MRT_formatAvionics+0x110>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461e      	mov	r6, r3
 8003aba:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <MRT_formatAvionics+0x114>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	4b1e      	ldr	r3, [pc, #120]	; (8003b3c <MRT_formatAvionics+0x118>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <MRT_formatAvionics+0x11c>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	4b1e      	ldr	r3, [pc, #120]	; (8003b44 <MRT_formatAvionics+0x120>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	9314      	str	r3, [sp, #80]	; 0x50
 8003ad0:	9113      	str	r1, [sp, #76]	; 0x4c
 8003ad2:	9212      	str	r2, [sp, #72]	; 0x48
 8003ad4:	9011      	str	r0, [sp, #68]	; 0x44
 8003ad6:	9610      	str	r6, [sp, #64]	; 0x40
 8003ad8:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8003adc:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003ae0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8003ae4:	ed97 7b00 	vldr	d7, [r7]
 8003ae8:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003aec:	ed97 7b02 	vldr	d7, [r7, #8]
 8003af0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003af4:	ed97 7b04 	vldr	d7, [r7, #16]
 8003af8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003afc:	ed97 7b06 	vldr	d7, [r7, #24]
 8003b00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003b04:	ed97 7b08 	vldr	d7, [r7, #32]
 8003b08:	ed8d 7b00 	vstr	d7, [sp]
 8003b0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b10:	490d      	ldr	r1, [pc, #52]	; (8003b48 <MRT_formatAvionics+0x124>)
 8003b12:	4804      	ldr	r0, [pc, #16]	; (8003b24 <MRT_formatAvionics+0x100>)
 8003b14:	f00e fca8 	bl	8012468 <siprintf>
		prev_min, prev_sec, prev_subsec,
		gates_continuity,	ejection_stage_flag);
}
 8003b18:	bf00      	nop
 8003b1a:	3734      	adds	r7, #52	; 0x34
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b22:	bf00      	nop
 8003b24:	200063f0 	.word	0x200063f0
 8003b28:	2000038c 	.word	0x2000038c
 8003b2c:	200003b8 	.word	0x200003b8
 8003b30:	200003cc 	.word	0x200003cc
 8003b34:	20000376 	.word	0x20000376
 8003b38:	20000377 	.word	0x20000377
 8003b3c:	20000378 	.word	0x20000378
 8003b40:	2000035f 	.word	0x2000035f
 8003b44:	20000374 	.word	0x20000374
 8003b48:	08016970 	.word	0x08016970

08003b4c <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	e007      	b.n	8003b68 <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 8003b58:	4a13      	ldr	r2, [pc, #76]	; (8003ba8 <MRT_external_flash_Init+0x5c>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3301      	adds	r3, #1
 8003b66:	607b      	str	r3, [r7, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	ddf4      	ble.n	8003b58 <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8003b6e:	f000 fc45 	bl	80043fc <W25qxx_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f083 0301 	eor.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8003b7e:	f7fe fe89 	bl	8002894 <Error_Handler>
	}

	//Retrieve flags
	W25qxx_ReadSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003b82:	2305      	movs	r3, #5
 8003b84:	2200      	movs	r2, #0
 8003b86:	2101      	movs	r1, #1
 8003b88:	4808      	ldr	r0, [pc, #32]	; (8003bac <MRT_external_flash_Init+0x60>)
 8003b8a:	f001 f811 	bl	8004bb0 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003b8e:	2304      	movs	r3, #4
 8003b90:	2200      	movs	r2, #0
 8003b92:	2102      	movs	r1, #2
 8003b94:	4806      	ldr	r0, [pc, #24]	; (8003bb0 <MRT_external_flash_Init+0x64>)
 8003b96:	f001 f80b 	bl	8004bb0 <W25qxx_ReadSector>

	//Assign each value read to their variable
	MRT_updateExternalFlashValues();
 8003b9a:	f000 f843 	bl	8003c24 <MRT_updateExternalFlashValues>
}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200064b8 	.word	0x200064b8
 8003bac:	200064c4 	.word	0x200064c4
 8003bb0:	200064c0 	.word	0x200064c0

08003bb4 <MRT_updateExternalFlashBuffers>:


void MRT_updateExternalFlashBuffers(void){
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	e00c      	b.n	8003bda <MRT_updateExternalFlashBuffers+0x26>
		ext_flash_flags_buffer[i] = *ext_flash_flags[i];
 8003bc0:	4a14      	ldr	r2, [pc, #80]	; (8003c14 <MRT_updateExternalFlashBuffers+0x60>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc8:	7819      	ldrb	r1, [r3, #0]
 8003bca:	4a13      	ldr	r2, [pc, #76]	; (8003c18 <MRT_updateExternalFlashBuffers+0x64>)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4413      	add	r3, r2
 8003bd0:	460a      	mov	r2, r1
 8003bd2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	ddef      	ble.n	8003bc0 <MRT_updateExternalFlashBuffers+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003be0:	2300      	movs	r3, #0
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	e00c      	b.n	8003c00 <MRT_updateExternalFlashBuffers+0x4c>
		ext_flash_time_buffer[i] = *ext_flash_time[i];
 8003be6:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <MRT_updateExternalFlashBuffers+0x68>)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bee:	7819      	ldrb	r1, [r3, #0]
 8003bf0:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <MRT_updateExternalFlashBuffers+0x6c>)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	460a      	mov	r2, r1
 8003bf8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	ddef      	ble.n	8003be6 <MRT_updateExternalFlashBuffers+0x32>
	}
}
 8003c06:	bf00      	nop
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	2000008c 	.word	0x2000008c
 8003c18:	200064c4 	.word	0x200064c4
 8003c1c:	200000a0 	.word	0x200000a0
 8003c20:	200064c0 	.word	0x200064c0

08003c24 <MRT_updateExternalFlashValues>:


void MRT_updateExternalFlashValues(void){
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	e00b      	b.n	8003c48 <MRT_updateExternalFlashValues+0x24>
		*ext_flash_flags[i] = ext_flash_flags_buffer[i];
 8003c30:	4a13      	ldr	r2, [pc, #76]	; (8003c80 <MRT_updateExternalFlashValues+0x5c>)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c38:	4912      	ldr	r1, [pc, #72]	; (8003c84 <MRT_updateExternalFlashValues+0x60>)
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	7812      	ldrb	r2, [r2, #0]
 8003c40:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3301      	adds	r3, #1
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	ddf0      	ble.n	8003c30 <MRT_updateExternalFlashValues+0xc>
	}
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003c4e:	2300      	movs	r3, #0
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	e00b      	b.n	8003c6c <MRT_updateExternalFlashValues+0x48>
		*ext_flash_time[i] = ext_flash_time_buffer[i];
 8003c54:	4a0c      	ldr	r2, [pc, #48]	; (8003c88 <MRT_updateExternalFlashValues+0x64>)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5c:	490b      	ldr	r1, [pc, #44]	; (8003c8c <MRT_updateExternalFlashValues+0x68>)
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	440a      	add	r2, r1
 8003c62:	7812      	ldrb	r2, [r2, #0]
 8003c64:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RTC_NB_OF_VAR; i++){
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	ddf0      	ble.n	8003c54 <MRT_updateExternalFlashValues+0x30>
	}
}
 8003c72:	bf00      	nop
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	2000008c 	.word	0x2000008c
 8003c84:	200064c4 	.word	0x200064c4
 8003c88:	200000a0 	.word	0x200000a0
 8003c8c:	200064c0 	.word	0x200064c0

08003c90 <MRT_clearExternalFlash>:


void MRT_clearExternalFlash(void){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
	//Clear flags
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003c94:	2001      	movs	r0, #1
 8003c96:	f000 fd03 	bl	80046a0 <W25qxx_EraseSector>
	W25qxx_WriteSector(FLAGS_NULL_BUFFER, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003c9a:	2305      	movs	r3, #5
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4806      	ldr	r0, [pc, #24]	; (8003cbc <MRT_clearExternalFlash+0x2c>)
 8003ca2:	f000 fe47 	bl	8004934 <W25qxx_WriteSector>

	//Clear RTC time (last recorded)
	W25qxx_EraseSector(RTC_SECTOR);
 8003ca6:	2002      	movs	r0, #2
 8003ca8:	f000 fcfa 	bl	80046a0 <W25qxx_EraseSector>
	W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003cac:	2304      	movs	r3, #4
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	4803      	ldr	r0, [pc, #12]	; (8003cc0 <MRT_clearExternalFlash+0x30>)
 8003cb4:	f000 fe3e 	bl	8004934 <W25qxx_WriteSector>
}
 8003cb8:	bf00      	nop
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	200064b8 	.word	0x200064b8
 8003cc0:	2000036c 	.word	0x2000036c

08003cc4 <MRT_saveFlagValue>:
//Public functions

/*
 * Save a flag value (value updated outside the function)
 */
void MRT_saveFlagValue(rtc_backup_reg state){
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
	//Write new flags to flash memory
	MRT_updateExternalFlashBuffers();
 8003cce:	f7ff ff71 	bl	8003bb4 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(FLAGS_SECTOR);
 8003cd2:	2001      	movs	r0, #1
 8003cd4:	f000 fce4 	bl	80046a0 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_flags_buffer, FLAGS_SECTOR, FLAGS_OFFSET, NB_OF_FLAGS);
 8003cd8:	2305      	movs	r3, #5
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4808      	ldr	r0, [pc, #32]	; (8003d00 <MRT_saveFlagValue+0x3c>)
 8003ce0:	f000 fe28 	bl	8004934 <W25qxx_WriteSector>

	//Write new flag to RTC backup register
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	4a07      	ldr	r2, [pc, #28]	; (8003d04 <MRT_saveFlagValue+0x40>)
 8003ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff f92c 	bl	8002f50 <MRT_RTC_setBackupReg>
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	200064c4 	.word	0x200064c4
 8003d04:	2000003c 	.word	0x2000003c

08003d08 <MRT_checkFlagsValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkFlagsValues(rtc_backup_reg val_index, uint32_t max_val){
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	6039      	str	r1, [r7, #0]
 8003d12:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003d18:	79fb      	ldrb	r3, [r7, #7]
 8003d1a:	4a2e      	ldr	r2, [pc, #184]	; (8003dd4 <MRT_checkFlagsValues+0xcc>)
 8003d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d207      	bcs.n	8003d38 <MRT_checkFlagsValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	4a2a      	ldr	r2, [pc, #168]	; (8003dd4 <MRT_checkFlagsValues+0xcc>)
 8003d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
		ret = false;
 8003d34:	2300      	movs	r3, #0
 8003d36:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_flags[val_index] > max_val){
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	4a27      	ldr	r2, [pc, #156]	; (8003dd8 <MRT_checkFlagsValues+0xd0>)
 8003d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d207      	bcs.n	8003d5a <MRT_checkFlagsValues+0x52>
		*ext_flash_flags[val_index] = 0;
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	4a22      	ldr	r2, [pc, #136]	; (8003dd8 <MRT_checkFlagsValues+0xd0>)
 8003d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_flags[val_index]){
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <MRT_checkFlagsValues+0xcc>)
 8003d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	79fa      	ldrb	r2, [r7, #7]
 8003d66:	491c      	ldr	r1, [pc, #112]	; (8003dd8 <MRT_checkFlagsValues+0xd0>)
 8003d68:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003d6c:	7812      	ldrb	r2, [r2, #0]
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d028      	beq.n	8003dc4 <MRT_checkFlagsValues+0xbc>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	4a18      	ldr	r2, [pc, #96]	; (8003dd8 <MRT_checkFlagsValues+0xd0>)
 8003d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <MRT_checkFlagsValues+0xcc>)
 8003d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	4912      	ldr	r1, [pc, #72]	; (8003dd4 <MRT_checkFlagsValues+0xcc>)
 8003d8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d90:	4282      	cmp	r2, r0
 8003d92:	bf38      	it	cc
 8003d94:	4602      	movcc	r2, r0
 8003d96:	601a      	str	r2, [r3, #0]
		*ext_flash_flags[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_flags[val_index]);
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	4a0f      	ldr	r2, [pc, #60]	; (8003dd8 <MRT_checkFlagsValues+0xd0>)
 8003d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	4619      	mov	r1, r3
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	4a0b      	ldr	r2, [pc, #44]	; (8003dd4 <MRT_checkFlagsValues+0xcc>)
 8003da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4299      	cmp	r1, r3
 8003db0:	bf38      	it	cc
 8003db2:	4619      	movcc	r1, r3
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	4a08      	ldr	r2, [pc, #32]	; (8003dd8 <MRT_checkFlagsValues+0xd0>)
 8003db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbc:	b2ca      	uxtb	r2, r1
 8003dbe:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	2000003c 	.word	0x2000003c
 8003dd8:	2000008c 	.word	0x2000008c

08003ddc <MRT_saveTotalTime>:
//Public functions

/*
 * Update every time values in memory
 */
void MRT_saveTotalTime(void){
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0

	//Update variables
	MRT_updateTimeValues();
 8003de0:	f000 f852 	bl	8003e88 <MRT_updateTimeValues>

	//Write new RTC time to external flash
	MRT_updateExternalFlashBuffers();
 8003de4:	f7ff fee6 	bl	8003bb4 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8003de8:	2002      	movs	r0, #2
 8003dea:	f000 fc59 	bl	80046a0 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003dee:	2304      	movs	r3, #4
 8003df0:	2200      	movs	r2, #0
 8003df2:	2102      	movs	r1, #2
 8003df4:	480e      	ldr	r0, [pc, #56]	; (8003e30 <MRT_saveTotalTime+0x54>)
 8003df6:	f000 fd9d 	bl	8004934 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(RTC_HOUR, rtc_bckp_reg_hour);
 8003dfa:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <MRT_saveTotalTime+0x58>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	2005      	movs	r0, #5
 8003e02:	f7ff f8a5 	bl	8002f50 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_MINUTE, rtc_bckp_reg_min);
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <MRT_saveTotalTime+0x5c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	2006      	movs	r0, #6
 8003e0e:	f7ff f89f 	bl	8002f50 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SECOND, rtc_bckp_reg_sec);
 8003e12:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <MRT_saveTotalTime+0x60>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4619      	mov	r1, r3
 8003e18:	2007      	movs	r0, #7
 8003e1a:	f7ff f899 	bl	8002f50 <MRT_RTC_setBackupReg>
	MRT_RTC_setBackupReg(RTC_SUBSEC, rtc_bckp_reg_subsec);
 8003e1e:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <MRT_saveTotalTime+0x64>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4619      	mov	r1, r3
 8003e24:	2008      	movs	r0, #8
 8003e26:	f7ff f893 	bl	8002f50 <MRT_RTC_setBackupReg>
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	200064c0 	.word	0x200064c0
 8003e34:	20000324 	.word	0x20000324
 8003e38:	20000328 	.word	0x20000328
 8003e3c:	2000032c 	.word	0x2000032c
 8003e40:	20000330 	.word	0x20000330

08003e44 <MRT_saveTimeValue>:
//Private functions

/*
 * Save an RTC value (value updated outside the function)
 */
void MRT_saveTimeValue(rtc_backup_reg state){
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71fb      	strb	r3, [r7, #7]

	//Write new RTC time to flash memory
	MRT_updateExternalFlashBuffers();
 8003e4e:	f7ff feb1 	bl	8003bb4 <MRT_updateExternalFlashBuffers>
	W25qxx_EraseSector(RTC_SECTOR);
 8003e52:	2002      	movs	r0, #2
 8003e54:	f000 fc24 	bl	80046a0 <W25qxx_EraseSector>
	W25qxx_WriteSector(ext_flash_time_buffer, RTC_SECTOR, RTC_TIME_OFFSET, RTC_NB_OF_VAR);
 8003e58:	2304      	movs	r3, #4
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2102      	movs	r1, #2
 8003e5e:	4808      	ldr	r0, [pc, #32]	; (8003e80 <MRT_saveTimeValue+0x3c>)
 8003e60:	f000 fd68 	bl	8004934 <W25qxx_WriteSector>

	//Write new RTC time to backup registers
	MRT_RTC_setBackupReg(state, *rtc_bckp_regs[state]);
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <MRT_saveTimeValue+0x40>)
 8003e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff f86c 	bl	8002f50 <MRT_RTC_setBackupReg>
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	200064c0 	.word	0x200064c0
 8003e84:	2000003c 	.word	0x2000003c

08003e88 <MRT_updateTimeValues>:


/*
 * Update all time values
 */
void MRT_updateTimeValues(void){
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
	//External Flash
	ext_flash_hour = prev_hour;
 8003e8c:	4b13      	ldr	r3, [pc, #76]	; (8003edc <MRT_updateTimeValues+0x54>)
 8003e8e:	781a      	ldrb	r2, [r3, #0]
 8003e90:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <MRT_updateTimeValues+0x58>)
 8003e92:	701a      	strb	r2, [r3, #0]
	ext_flash_min = prev_min;
 8003e94:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <MRT_updateTimeValues+0x5c>)
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	4b13      	ldr	r3, [pc, #76]	; (8003ee8 <MRT_updateTimeValues+0x60>)
 8003e9a:	701a      	strb	r2, [r3, #0]
	ext_flash_sec = prev_sec;
 8003e9c:	4b13      	ldr	r3, [pc, #76]	; (8003eec <MRT_updateTimeValues+0x64>)
 8003e9e:	781a      	ldrb	r2, [r3, #0]
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <MRT_updateTimeValues+0x68>)
 8003ea2:	701a      	strb	r2, [r3, #0]
	ext_flash_subsec = prev_subsec;
 8003ea4:	4b13      	ldr	r3, [pc, #76]	; (8003ef4 <MRT_updateTimeValues+0x6c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <MRT_updateTimeValues+0x70>)
 8003eaa:	6013      	str	r3, [r2, #0]

	//RTC backup registers
	rtc_bckp_reg_hour = prev_hour;
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <MRT_updateTimeValues+0x54>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <MRT_updateTimeValues+0x74>)
 8003eb4:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_min = prev_min;
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <MRT_updateTimeValues+0x5c>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <MRT_updateTimeValues+0x78>)
 8003ebe:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_sec = prev_sec;
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <MRT_updateTimeValues+0x64>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <MRT_updateTimeValues+0x7c>)
 8003ec8:	601a      	str	r2, [r3, #0]
	rtc_bckp_reg_subsec = prev_subsec;
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <MRT_updateTimeValues+0x6c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <MRT_updateTimeValues+0x80>)
 8003ed0:	6013      	str	r3, [r2, #0]
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	20000375 	.word	0x20000375
 8003ee0:	20000365 	.word	0x20000365
 8003ee4:	20000376 	.word	0x20000376
 8003ee8:	20000366 	.word	0x20000366
 8003eec:	20000377 	.word	0x20000377
 8003ef0:	20000367 	.word	0x20000367
 8003ef4:	20000378 	.word	0x20000378
 8003ef8:	20000368 	.word	0x20000368
 8003efc:	20000324 	.word	0x20000324
 8003f00:	20000328 	.word	0x20000328
 8003f04:	2000032c 	.word	0x2000032c
 8003f08:	20000330 	.word	0x20000330

08003f0c <MRT_checkTimeValues>:


/*
 * Check for memory issues
 */
uint8_t MRT_checkTimeValues(rtc_backup_reg val_index, uint32_t max_val){
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	6039      	str	r1, [r7, #0]
 8003f16:	71fb      	strb	r3, [r7, #7]

	uint8_t ret = true;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]

	//Check for a random value (unsigned int so can't be negative)
	if (*rtc_bckp_regs[val_index] > max_val){
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	4a31      	ldr	r2, [pc, #196]	; (8003fe4 <MRT_checkTimeValues+0xd8>)
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d207      	bcs.n	8003f3c <MRT_checkTimeValues+0x30>
		*rtc_bckp_regs[val_index] = 0;
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	4a2d      	ldr	r2, [pc, #180]	; (8003fe4 <MRT_checkTimeValues+0xd8>)
 8003f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
		ret = false;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	73fb      	strb	r3, [r7, #15]
	}
	if (*ext_flash_time[val_index - NB_OF_FLAGS] > max_val){
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	3b05      	subs	r3, #5
 8003f40:	4a29      	ldr	r2, [pc, #164]	; (8003fe8 <MRT_checkTimeValues+0xdc>)
 8003f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d208      	bcs.n	8003f62 <MRT_checkTimeValues+0x56>
		*ext_flash_time[val_index - NB_OF_FLAGS] = 0;
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	3b05      	subs	r3, #5
 8003f54:	4a24      	ldr	r2, [pc, #144]	; (8003fe8 <MRT_checkTimeValues+0xdc>)
 8003f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
	}

	if (*rtc_bckp_regs[val_index] != *ext_flash_time[val_index - NB_OF_FLAGS]){
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	4a1f      	ldr	r2, [pc, #124]	; (8003fe4 <MRT_checkTimeValues+0xd8>)
 8003f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	79fa      	ldrb	r2, [r7, #7]
 8003f6e:	3a05      	subs	r2, #5
 8003f70:	491d      	ldr	r1, [pc, #116]	; (8003fe8 <MRT_checkTimeValues+0xdc>)
 8003f72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d02b      	beq.n	8003fd4 <MRT_checkTimeValues+0xc8>
		*rtc_bckp_regs[val_index] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	3b05      	subs	r3, #5
 8003f80:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <MRT_checkTimeValues+0xdc>)
 8003f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	4a15      	ldr	r2, [pc, #84]	; (8003fe4 <MRT_checkTimeValues+0xd8>)
 8003f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	4913      	ldr	r1, [pc, #76]	; (8003fe4 <MRT_checkTimeValues+0xd8>)
 8003f98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f9c:	4282      	cmp	r2, r0
 8003f9e:	bf38      	it	cc
 8003fa0:	4602      	movcc	r2, r0
 8003fa2:	601a      	str	r2, [r3, #0]
		*ext_flash_time[val_index - NB_OF_FLAGS] = MAX(*rtc_bckp_regs[val_index], *ext_flash_time[val_index - NB_OF_FLAGS]);
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	3b05      	subs	r3, #5
 8003fa8:	4a0f      	ldr	r2, [pc, #60]	; (8003fe8 <MRT_checkTimeValues+0xdc>)
 8003faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <MRT_checkTimeValues+0xd8>)
 8003fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4299      	cmp	r1, r3
 8003fbe:	bf38      	it	cc
 8003fc0:	4619      	movcc	r1, r3
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	3b05      	subs	r3, #5
 8003fc6:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <MRT_checkTimeValues+0xdc>)
 8003fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fcc:	b2ca      	uxtb	r2, r1
 8003fce:	701a      	strb	r2, [r3, #0]
		ret = false;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	2000003c 	.word	0x2000003c
 8003fe8:	200000a0 	.word	0x200000a0

08003fec <MRT_MEMORY_Init>:
//**************************************************//
//MISC


//Public
void MRT_MEMORY_Init(void){
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0

	//External flash
	MRT_external_flash_Init();
 8003ff0:	f7ff fdac 	bl	8003b4c <MRT_external_flash_Init>

	//Backup registers
	MRT_RTC_backup_regs_Init();
 8003ff4:	f7fe fefe 	bl	8002df4 <MRT_RTC_backup_regs_Init>

	//Get the previous flags and rtc time from memory
	MRT_stateRestoration();
 8003ff8:	f000 f802 	bl	8004000 <MRT_stateRestoration>
			else {
			  Error_Handler();
			}
		#endif
	#endif
}
 8003ffc:	bf00      	nop
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <MRT_stateRestoration>:


//Private

//Get the flags values and RTC time
void MRT_stateRestoration(void){
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0

	//Check for a wakeup
	MRT_checkWakeUp();
 8004004:	f000 f8ca 	bl	800419c <MRT_checkWakeUp>

	//If RTC detected a wake up, update the flash memory and the backup registers
	if (wu_flag == 1){
 8004008:	4b51      	ldr	r3, [pc, #324]	; (8004150 <MRT_stateRestoration+0x150>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d111      	bne.n	8004034 <MRT_stateRestoration+0x34>

		//Update values
		ext_flash_wu += 1;
 8004010:	4b50      	ldr	r3, [pc, #320]	; (8004154 <MRT_stateRestoration+0x154>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	3301      	adds	r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	4b4e      	ldr	r3, [pc, #312]	; (8004154 <MRT_stateRestoration+0x154>)
 800401a:	701a      	strb	r2, [r3, #0]
		rtc_bckp_reg_wu += 1;
 800401c:	4b4e      	ldr	r3, [pc, #312]	; (8004158 <MRT_stateRestoration+0x158>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3301      	adds	r3, #1
 8004022:	4a4d      	ldr	r2, [pc, #308]	; (8004158 <MRT_stateRestoration+0x158>)
 8004024:	6013      	str	r3, [r2, #0]

		//Check for memory issues¸
		MRT_checkFlagsValues(FC_STATE_WU, 2);
 8004026:	2102      	movs	r1, #2
 8004028:	2001      	movs	r0, #1
 800402a:	f7ff fe6d 	bl	8003d08 <MRT_checkFlagsValues>

		//Update memory
		MRT_saveFlagValue(FC_STATE_WU);
 800402e:	2001      	movs	r0, #1
 8004030:	f7ff fe48 	bl	8003cc4 <MRT_saveFlagValue>
	}
	//Update the wu_flag value
	wu_flag = rtc_bckp_reg_wu;
 8004034:	4b48      	ldr	r3, [pc, #288]	; (8004158 <MRT_stateRestoration+0x158>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	b2da      	uxtb	r2, r3
 800403a:	4b45      	ldr	r3, [pc, #276]	; (8004150 <MRT_stateRestoration+0x150>)
 800403c:	701a      	strb	r2, [r3, #0]


	//Check flags values

	//Reset flag
	if(MRT_checkFlagsValues(FC_STATE_RESET, 1) == false)	MRT_saveFlagValue(FC_STATE_RESET);
 800403e:	2101      	movs	r1, #1
 8004040:	2000      	movs	r0, #0
 8004042:	f7ff fe61 	bl	8003d08 <MRT_checkFlagsValues>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d102      	bne.n	8004052 <MRT_stateRestoration+0x52>
 800404c:	2000      	movs	r0, #0
 800404e:	f7ff fe39 	bl	8003cc4 <MRT_saveFlagValue>
	reset_flag = rtc_bckp_reg_reset;
 8004052:	4b42      	ldr	r3, [pc, #264]	; (800415c <MRT_stateRestoration+0x15c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	b2da      	uxtb	r2, r3
 8004058:	4b41      	ldr	r3, [pc, #260]	; (8004160 <MRT_stateRestoration+0x160>)
 800405a:	701a      	strb	r2, [r3, #0]

	//Wake up flag (TODO double check??)
	if(MRT_checkFlagsValues(FC_STATE_WU, 1) == false)	MRT_saveFlagValue(FC_STATE_WU);
 800405c:	2101      	movs	r1, #1
 800405e:	2001      	movs	r0, #1
 8004060:	f7ff fe52 	bl	8003d08 <MRT_checkFlagsValues>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <MRT_stateRestoration+0x70>
 800406a:	2001      	movs	r0, #1
 800406c:	f7ff fe2a 	bl	8003cc4 <MRT_saveFlagValue>
	wu_flag = rtc_bckp_reg_wu;
 8004070:	4b39      	ldr	r3, [pc, #228]	; (8004158 <MRT_stateRestoration+0x158>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	b2da      	uxtb	r2, r3
 8004076:	4b36      	ldr	r3, [pc, #216]	; (8004150 <MRT_stateRestoration+0x150>)
 8004078:	701a      	strb	r2, [r3, #0]

	//IWDG flag
	if(MRT_checkFlagsValues(FC_STATE_IWDG, 1) == false)	MRT_saveFlagValue(FC_STATE_IWDG);
 800407a:	2101      	movs	r1, #1
 800407c:	2002      	movs	r0, #2
 800407e:	f7ff fe43 	bl	8003d08 <MRT_checkFlagsValues>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <MRT_stateRestoration+0x8e>
 8004088:	2002      	movs	r0, #2
 800408a:	f7ff fe1b 	bl	8003cc4 <MRT_saveFlagValue>
	iwdg_flag = rtc_bckp_reg_iwdg;
 800408e:	4b35      	ldr	r3, [pc, #212]	; (8004164 <MRT_stateRestoration+0x164>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	b2da      	uxtb	r2, r3
 8004094:	4b34      	ldr	r3, [pc, #208]	; (8004168 <MRT_stateRestoration+0x168>)
 8004096:	701a      	strb	r2, [r3, #0]

	//Apogee flag
	if(MRT_checkFlagsValues(FC_STATE_APOGEE, 1) == false)	MRT_saveFlagValue(FC_STATE_APOGEE);
 8004098:	2101      	movs	r1, #1
 800409a:	2003      	movs	r0, #3
 800409c:	f7ff fe34 	bl	8003d08 <MRT_checkFlagsValues>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d102      	bne.n	80040ac <MRT_stateRestoration+0xac>
 80040a6:	2003      	movs	r0, #3
 80040a8:	f7ff fe0c 	bl	8003cc4 <MRT_saveFlagValue>
	apogee_flag = rtc_bckp_reg_apogee;
 80040ac:	4b2f      	ldr	r3, [pc, #188]	; (800416c <MRT_stateRestoration+0x16c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	4b2f      	ldr	r3, [pc, #188]	; (8004170 <MRT_stateRestoration+0x170>)
 80040b4:	701a      	strb	r2, [r3, #0]

	//Ejection state flag
	if(MRT_checkFlagsValues(FC_STATE_FLIGHT, 4) == false)	MRT_saveFlagValue(FC_STATE_FLIGHT);
 80040b6:	2104      	movs	r1, #4
 80040b8:	2004      	movs	r0, #4
 80040ba:	f7ff fe25 	bl	8003d08 <MRT_checkFlagsValues>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d102      	bne.n	80040ca <MRT_stateRestoration+0xca>
 80040c4:	2004      	movs	r0, #4
 80040c6:	f7ff fdfd 	bl	8003cc4 <MRT_saveFlagValue>
	ejection_stage_flag = rtc_bckp_reg_ejection_stage;
 80040ca:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <MRT_stateRestoration+0x174>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	4b29      	ldr	r3, [pc, #164]	; (8004178 <MRT_stateRestoration+0x178>)
 80040d2:	701a      	strb	r2, [r3, #0]


	//Check RTC time values
	//Hours
	if(MRT_checkTimeValues(RTC_HOUR, 23) == false)	MRT_saveTimeValue(RTC_HOUR);
 80040d4:	2117      	movs	r1, #23
 80040d6:	2005      	movs	r0, #5
 80040d8:	f7ff ff18 	bl	8003f0c <MRT_checkTimeValues>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <MRT_stateRestoration+0xe8>
 80040e2:	2005      	movs	r0, #5
 80040e4:	f7ff feae 	bl	8003e44 <MRT_saveTimeValue>
	prev_hour = rtc_bckp_reg_hour;
 80040e8:	4b24      	ldr	r3, [pc, #144]	; (800417c <MRT_stateRestoration+0x17c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	4b24      	ldr	r3, [pc, #144]	; (8004180 <MRT_stateRestoration+0x180>)
 80040f0:	701a      	strb	r2, [r3, #0]

	//Minutes
	if(MRT_checkTimeValues(RTC_MINUTE, 59) == false)	MRT_saveTimeValue(RTC_MINUTE);
 80040f2:	213b      	movs	r1, #59	; 0x3b
 80040f4:	2006      	movs	r0, #6
 80040f6:	f7ff ff09 	bl	8003f0c <MRT_checkTimeValues>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <MRT_stateRestoration+0x106>
 8004100:	2006      	movs	r0, #6
 8004102:	f7ff fe9f 	bl	8003e44 <MRT_saveTimeValue>
	prev_min = rtc_bckp_reg_min;
 8004106:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <MRT_stateRestoration+0x184>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	b2da      	uxtb	r2, r3
 800410c:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <MRT_stateRestoration+0x188>)
 800410e:	701a      	strb	r2, [r3, #0]

	//Seconds
	if(MRT_checkTimeValues(RTC_SECOND, 59) == false)	MRT_saveTimeValue(RTC_SECOND);
 8004110:	213b      	movs	r1, #59	; 0x3b
 8004112:	2007      	movs	r0, #7
 8004114:	f7ff fefa 	bl	8003f0c <MRT_checkTimeValues>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <MRT_stateRestoration+0x124>
 800411e:	2007      	movs	r0, #7
 8004120:	f7ff fe90 	bl	8003e44 <MRT_saveTimeValue>
	prev_sec = rtc_bckp_reg_sec;
 8004124:	4b19      	ldr	r3, [pc, #100]	; (800418c <MRT_stateRestoration+0x18c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	4b19      	ldr	r3, [pc, #100]	; (8004190 <MRT_stateRestoration+0x190>)
 800412c:	701a      	strb	r2, [r3, #0]

	//Sub-Seconds
	if(MRT_checkTimeValues(RTC_SUBSEC, 999) == false)	MRT_saveTimeValue(RTC_SUBSEC);
 800412e:	f240 31e7 	movw	r1, #999	; 0x3e7
 8004132:	2008      	movs	r0, #8
 8004134:	f7ff feea 	bl	8003f0c <MRT_checkTimeValues>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d102      	bne.n	8004144 <MRT_stateRestoration+0x144>
 800413e:	2008      	movs	r0, #8
 8004140:	f7ff fe80 	bl	8003e44 <MRT_saveTimeValue>
	prev_subsec = rtc_bckp_reg_subsec;
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <MRT_stateRestoration+0x194>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a13      	ldr	r2, [pc, #76]	; (8004198 <MRT_stateRestoration+0x198>)
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000371 	.word	0x20000371
 8004154:	20000361 	.word	0x20000361
 8004158:	20000314 	.word	0x20000314
 800415c:	20000310 	.word	0x20000310
 8004160:	20000370 	.word	0x20000370
 8004164:	20000318 	.word	0x20000318
 8004168:	20000372 	.word	0x20000372
 800416c:	2000031c 	.word	0x2000031c
 8004170:	20000373 	.word	0x20000373
 8004174:	20000320 	.word	0x20000320
 8004178:	20000374 	.word	0x20000374
 800417c:	20000324 	.word	0x20000324
 8004180:	20000375 	.word	0x20000375
 8004184:	20000328 	.word	0x20000328
 8004188:	20000376 	.word	0x20000376
 800418c:	2000032c 	.word	0x2000032c
 8004190:	20000377 	.word	0x20000377
 8004194:	20000330 	.word	0x20000330
 8004198:	20000378 	.word	0x20000378

0800419c <MRT_checkWakeUp>:


/*
 * Check if FC is back from wakeup
 */
void MRT_checkWakeUp(void){
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80041a0:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <MRT_checkWakeUp+0x40>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d112      	bne.n	80041d2 <MRT_checkWakeUp+0x36>
	{

		wu_flag = 1;
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <MRT_checkWakeUp+0x44>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 80041b2:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <MRT_checkWakeUp+0x40>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a09      	ldr	r2, [pc, #36]	; (80041dc <MRT_checkWakeUp+0x40>)
 80041b8:	f043 0308 	orr.w	r3, r3, #8
 80041bc:	6013      	str	r3, [r2, #0]

		println("Wakeup from STANDBY MODE");
 80041be:	4809      	ldr	r0, [pc, #36]	; (80041e4 <MRT_checkWakeUp+0x48>)
 80041c0:	f7fc ff24 	bl	800100c <println>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80041c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80041c8:	f004 ffe8 	bl	800919c <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80041cc:	4806      	ldr	r0, [pc, #24]	; (80041e8 <MRT_checkWakeUp+0x4c>)
 80041ce:	f006 fc33 	bl	800aa38 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 80041d2:	f7fe fc8f 	bl	8002af4 <MRT_clear_alarms_flags>
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40007000 	.word	0x40007000
 80041e0:	20000371 	.word	0x20000371
 80041e4:	080169c8 	.word	0x080169c8
 80041e8:	2000616c 	.word	0x2000616c

080041ec <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	4603      	mov	r3, r0
 80041f4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80041f6:	f107 020f 	add.w	r2, r7, #15
 80041fa:	1df9      	adds	r1, r7, #7
 80041fc:	2364      	movs	r3, #100	; 0x64
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	2301      	movs	r3, #1
 8004202:	4804      	ldr	r0, [pc, #16]	; (8004214 <W25qxx_Spi+0x28>)
 8004204:	f006 ffa6 	bl	800b154 <HAL_SPI_TransmitReceive>
	return ret;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	200061e4 	.word	0x200061e4

08004218 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	2300      	movs	r3, #0
 8004224:	60bb      	str	r3, [r7, #8]
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	2300      	movs	r3, #0
 800422c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800422e:	2200      	movs	r2, #0
 8004230:	2140      	movs	r1, #64	; 0x40
 8004232:	4813      	ldr	r0, [pc, #76]	; (8004280 <W25qxx_ReadID+0x68>)
 8004234:	f003 feac 	bl	8007f90 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8004238:	209f      	movs	r0, #159	; 0x9f
 800423a:	f7ff ffd7 	bl	80041ec <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800423e:	20a5      	movs	r0, #165	; 0xa5
 8004240:	f7ff ffd4 	bl	80041ec <W25qxx_Spi>
 8004244:	4603      	mov	r3, r0
 8004246:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004248:	20a5      	movs	r0, #165	; 0xa5
 800424a:	f7ff ffcf 	bl	80041ec <W25qxx_Spi>
 800424e:	4603      	mov	r3, r0
 8004250:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004252:	20a5      	movs	r0, #165	; 0xa5
 8004254:	f7ff ffca 	bl	80041ec <W25qxx_Spi>
 8004258:	4603      	mov	r3, r0
 800425a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800425c:	2201      	movs	r2, #1
 800425e:	2140      	movs	r1, #64	; 0x40
 8004260:	4807      	ldr	r0, [pc, #28]	; (8004280 <W25qxx_ReadID+0x68>)
 8004262:	f003 fe95 	bl	8007f90 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	041a      	lsls	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	4313      	orrs	r3, r2
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
	return Temp;
 8004276:	68fb      	ldr	r3, [r7, #12]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40020c00 	.word	0x40020c00

08004284 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800428a:	2200      	movs	r2, #0
 800428c:	2140      	movs	r1, #64	; 0x40
 800428e:	4816      	ldr	r0, [pc, #88]	; (80042e8 <W25qxx_ReadUniqID+0x64>)
 8004290:	f003 fe7e 	bl	8007f90 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8004294:	204b      	movs	r0, #75	; 0x4b
 8004296:	f7ff ffa9 	bl	80041ec <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800429a:	2300      	movs	r3, #0
 800429c:	71fb      	strb	r3, [r7, #7]
 800429e:	e005      	b.n	80042ac <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80042a0:	20a5      	movs	r0, #165	; 0xa5
 80042a2:	f7ff ffa3 	bl	80041ec <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	3301      	adds	r3, #1
 80042aa:	71fb      	strb	r3, [r7, #7]
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d9f6      	bls.n	80042a0 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80042b2:	2300      	movs	r3, #0
 80042b4:	71bb      	strb	r3, [r7, #6]
 80042b6:	e00b      	b.n	80042d0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80042b8:	79bc      	ldrb	r4, [r7, #6]
 80042ba:	20a5      	movs	r0, #165	; 0xa5
 80042bc:	f7ff ff96 	bl	80041ec <W25qxx_Spi>
 80042c0:	4603      	mov	r3, r0
 80042c2:	461a      	mov	r2, r3
 80042c4:	4b09      	ldr	r3, [pc, #36]	; (80042ec <W25qxx_ReadUniqID+0x68>)
 80042c6:	4423      	add	r3, r4
 80042c8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80042ca:	79bb      	ldrb	r3, [r7, #6]
 80042cc:	3301      	adds	r3, #1
 80042ce:	71bb      	strb	r3, [r7, #6]
 80042d0:	79bb      	ldrb	r3, [r7, #6]
 80042d2:	2b07      	cmp	r3, #7
 80042d4:	d9f0      	bls.n	80042b8 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042d6:	2201      	movs	r2, #1
 80042d8:	2140      	movs	r1, #64	; 0x40
 80042da:	4803      	ldr	r0, [pc, #12]	; (80042e8 <W25qxx_ReadUniqID+0x64>)
 80042dc:	f003 fe58 	bl	8007f90 <HAL_GPIO_WritePin>
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd90      	pop	{r4, r7, pc}
 80042e8:	40020c00 	.word	0x40020c00
 80042ec:	200064cc 	.word	0x200064cc

080042f0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80042f4:	2200      	movs	r2, #0
 80042f6:	2140      	movs	r1, #64	; 0x40
 80042f8:	4807      	ldr	r0, [pc, #28]	; (8004318 <W25qxx_WriteEnable+0x28>)
 80042fa:	f003 fe49 	bl	8007f90 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80042fe:	2006      	movs	r0, #6
 8004300:	f7ff ff74 	bl	80041ec <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004304:	2201      	movs	r2, #1
 8004306:	2140      	movs	r1, #64	; 0x40
 8004308:	4803      	ldr	r0, [pc, #12]	; (8004318 <W25qxx_WriteEnable+0x28>)
 800430a:	f003 fe41 	bl	8007f90 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800430e:	2001      	movs	r0, #1
 8004310:	f009 f8d8 	bl	800d4c4 <osDelay>
}
 8004314:	bf00      	nop
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40020c00 	.word	0x40020c00

0800431c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800432a:	2200      	movs	r2, #0
 800432c:	2140      	movs	r1, #64	; 0x40
 800432e:	481c      	ldr	r0, [pc, #112]	; (80043a0 <W25qxx_ReadStatusRegister+0x84>)
 8004330:	f003 fe2e 	bl	8007f90 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d10c      	bne.n	8004354 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 800433a:	2005      	movs	r0, #5
 800433c:	f7ff ff56 	bl	80041ec <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004340:	20a5      	movs	r0, #165	; 0xa5
 8004342:	f7ff ff53 	bl	80041ec <W25qxx_Spi>
 8004346:	4603      	mov	r3, r0
 8004348:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800434a:	4a16      	ldr	r2, [pc, #88]	; (80043a4 <W25qxx_ReadStatusRegister+0x88>)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8004352:	e01b      	b.n	800438c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	2b02      	cmp	r3, #2
 8004358:	d10c      	bne.n	8004374 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 800435a:	2035      	movs	r0, #53	; 0x35
 800435c:	f7ff ff46 	bl	80041ec <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8004360:	20a5      	movs	r0, #165	; 0xa5
 8004362:	f7ff ff43 	bl	80041ec <W25qxx_Spi>
 8004366:	4603      	mov	r3, r0
 8004368:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 800436a:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <W25qxx_ReadStatusRegister+0x88>)
 800436c:	7bfb      	ldrb	r3, [r7, #15]
 800436e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8004372:	e00b      	b.n	800438c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8004374:	2015      	movs	r0, #21
 8004376:	f7ff ff39 	bl	80041ec <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800437a:	20a5      	movs	r0, #165	; 0xa5
 800437c:	f7ff ff36 	bl	80041ec <W25qxx_Spi>
 8004380:	4603      	mov	r3, r0
 8004382:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8004384:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <W25qxx_ReadStatusRegister+0x88>)
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800438c:	2201      	movs	r2, #1
 800438e:	2140      	movs	r1, #64	; 0x40
 8004390:	4803      	ldr	r0, [pc, #12]	; (80043a0 <W25qxx_ReadStatusRegister+0x84>)
 8004392:	f003 fdfd 	bl	8007f90 <HAL_GPIO_WritePin>
	return status;
 8004396:	7bfb      	ldrb	r3, [r7, #15]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40020c00 	.word	0x40020c00
 80043a4:	200064cc 	.word	0x200064cc

080043a8 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80043ac:	2001      	movs	r0, #1
 80043ae:	f009 f889 	bl	800d4c4 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80043b2:	2200      	movs	r2, #0
 80043b4:	2140      	movs	r1, #64	; 0x40
 80043b6:	480f      	ldr	r0, [pc, #60]	; (80043f4 <W25qxx_WaitForWriteEnd+0x4c>)
 80043b8:	f003 fdea 	bl	8007f90 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80043bc:	2005      	movs	r0, #5
 80043be:	f7ff ff15 	bl	80041ec <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80043c2:	20a5      	movs	r0, #165	; 0xa5
 80043c4:	f7ff ff12 	bl	80041ec <W25qxx_Spi>
 80043c8:	4603      	mov	r3, r0
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <W25qxx_WaitForWriteEnd+0x50>)
 80043ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80043d2:	2001      	movs	r0, #1
 80043d4:	f009 f876 	bl	800d4c4 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80043d8:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <W25qxx_WaitForWriteEnd+0x50>)
 80043da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1ed      	bne.n	80043c2 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80043e6:	2201      	movs	r2, #1
 80043e8:	2140      	movs	r1, #64	; 0x40
 80043ea:	4802      	ldr	r0, [pc, #8]	; (80043f4 <W25qxx_WaitForWriteEnd+0x4c>)
 80043ec:	f003 fdd0 	bl	8007f90 <HAL_GPIO_WritePin>
}
 80043f0:	bf00      	nop
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40020c00 	.word	0x40020c00
 80043f8:	200064cc 	.word	0x200064cc

080043fc <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8004402:	4b90      	ldr	r3, [pc, #576]	; (8004644 <W25qxx_Init+0x248>)
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800440a:	e002      	b.n	8004412 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800440c:	2001      	movs	r0, #1
 800440e:	f009 f859 	bl	800d4c4 <osDelay>
	while (HAL_GetTick() < 100)
 8004412:	f002 fea5 	bl	8007160 <HAL_GetTick>
 8004416:	4603      	mov	r3, r0
 8004418:	2b63      	cmp	r3, #99	; 0x63
 800441a:	d9f7      	bls.n	800440c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800441c:	2201      	movs	r2, #1
 800441e:	2140      	movs	r1, #64	; 0x40
 8004420:	4889      	ldr	r0, [pc, #548]	; (8004648 <W25qxx_Init+0x24c>)
 8004422:	f003 fdb5 	bl	8007f90 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8004426:	2064      	movs	r0, #100	; 0x64
 8004428:	f009 f84c 	bl	800d4c4 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 800442c:	4887      	ldr	r0, [pc, #540]	; (800464c <W25qxx_Init+0x250>)
 800442e:	f00d ff4f 	bl	80122d0 <puts>
#endif
	id = W25qxx_ReadID();
 8004432:	f7ff fef1 	bl	8004218 <W25qxx_ReadID>
 8004436:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4885      	ldr	r0, [pc, #532]	; (8004650 <W25qxx_Init+0x254>)
 800443c:	f00d fec2 	bl	80121c4 <iprintf>
#endif
	switch (id & 0x000000FF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	3b11      	subs	r3, #17
 8004446:	2b0f      	cmp	r3, #15
 8004448:	f200 808b 	bhi.w	8004562 <W25qxx_Init+0x166>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <W25qxx_Init+0x58>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	0800454f 	.word	0x0800454f
 8004458:	0800453b 	.word	0x0800453b
 800445c:	08004527 	.word	0x08004527
 8004460:	08004513 	.word	0x08004513
 8004464:	080044ff 	.word	0x080044ff
 8004468:	080044eb 	.word	0x080044eb
 800446c:	080044d7 	.word	0x080044d7
 8004470:	080044c1 	.word	0x080044c1
 8004474:	080044ab 	.word	0x080044ab
 8004478:	08004563 	.word	0x08004563
 800447c:	08004563 	.word	0x08004563
 8004480:	08004563 	.word	0x08004563
 8004484:	08004563 	.word	0x08004563
 8004488:	08004563 	.word	0x08004563
 800448c:	08004563 	.word	0x08004563
 8004490:	08004495 	.word	0x08004495
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8004494:	4b6b      	ldr	r3, [pc, #428]	; (8004644 <W25qxx_Init+0x248>)
 8004496:	220a      	movs	r2, #10
 8004498:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800449a:	4b6a      	ldr	r3, [pc, #424]	; (8004644 <W25qxx_Init+0x248>)
 800449c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044a0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80044a2:	486c      	ldr	r0, [pc, #432]	; (8004654 <W25qxx_Init+0x258>)
 80044a4:	f00d ff14 	bl	80122d0 <puts>
#endif
		break;
 80044a8:	e064      	b.n	8004574 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80044aa:	4b66      	ldr	r3, [pc, #408]	; (8004644 <W25qxx_Init+0x248>)
 80044ac:	2209      	movs	r2, #9
 80044ae:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80044b0:	4b64      	ldr	r3, [pc, #400]	; (8004644 <W25qxx_Init+0x248>)
 80044b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044b6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 80044b8:	4867      	ldr	r0, [pc, #412]	; (8004658 <W25qxx_Init+0x25c>)
 80044ba:	f00d ff09 	bl	80122d0 <puts>
#endif
		break;
 80044be:	e059      	b.n	8004574 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80044c0:	4b60      	ldr	r3, [pc, #384]	; (8004644 <W25qxx_Init+0x248>)
 80044c2:	2208      	movs	r2, #8
 80044c4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80044c6:	4b5f      	ldr	r3, [pc, #380]	; (8004644 <W25qxx_Init+0x248>)
 80044c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044cc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 80044ce:	4863      	ldr	r0, [pc, #396]	; (800465c <W25qxx_Init+0x260>)
 80044d0:	f00d fefe 	bl	80122d0 <puts>
#endif
		break;
 80044d4:	e04e      	b.n	8004574 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80044d6:	4b5b      	ldr	r3, [pc, #364]	; (8004644 <W25qxx_Init+0x248>)
 80044d8:	2207      	movs	r2, #7
 80044da:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80044dc:	4b59      	ldr	r3, [pc, #356]	; (8004644 <W25qxx_Init+0x248>)
 80044de:	2280      	movs	r2, #128	; 0x80
 80044e0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80044e2:	485f      	ldr	r0, [pc, #380]	; (8004660 <W25qxx_Init+0x264>)
 80044e4:	f00d fef4 	bl	80122d0 <puts>
#endif
		break;
 80044e8:	e044      	b.n	8004574 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80044ea:	4b56      	ldr	r3, [pc, #344]	; (8004644 <W25qxx_Init+0x248>)
 80044ec:	2206      	movs	r2, #6
 80044ee:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80044f0:	4b54      	ldr	r3, [pc, #336]	; (8004644 <W25qxx_Init+0x248>)
 80044f2:	2240      	movs	r2, #64	; 0x40
 80044f4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 80044f6:	485b      	ldr	r0, [pc, #364]	; (8004664 <W25qxx_Init+0x268>)
 80044f8:	f00d feea 	bl	80122d0 <puts>
#endif
		break;
 80044fc:	e03a      	b.n	8004574 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80044fe:	4b51      	ldr	r3, [pc, #324]	; (8004644 <W25qxx_Init+0x248>)
 8004500:	2205      	movs	r2, #5
 8004502:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8004504:	4b4f      	ldr	r3, [pc, #316]	; (8004644 <W25qxx_Init+0x248>)
 8004506:	2220      	movs	r2, #32
 8004508:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 800450a:	4857      	ldr	r0, [pc, #348]	; (8004668 <W25qxx_Init+0x26c>)
 800450c:	f00d fee0 	bl	80122d0 <puts>
#endif
		break;
 8004510:	e030      	b.n	8004574 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8004512:	4b4c      	ldr	r3, [pc, #304]	; (8004644 <W25qxx_Init+0x248>)
 8004514:	2204      	movs	r2, #4
 8004516:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8004518:	4b4a      	ldr	r3, [pc, #296]	; (8004644 <W25qxx_Init+0x248>)
 800451a:	2210      	movs	r2, #16
 800451c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 800451e:	4853      	ldr	r0, [pc, #332]	; (800466c <W25qxx_Init+0x270>)
 8004520:	f00d fed6 	bl	80122d0 <puts>
#endif
		break;
 8004524:	e026      	b.n	8004574 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8004526:	4b47      	ldr	r3, [pc, #284]	; (8004644 <W25qxx_Init+0x248>)
 8004528:	2203      	movs	r2, #3
 800452a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800452c:	4b45      	ldr	r3, [pc, #276]	; (8004644 <W25qxx_Init+0x248>)
 800452e:	2208      	movs	r2, #8
 8004530:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8004532:	484f      	ldr	r0, [pc, #316]	; (8004670 <W25qxx_Init+0x274>)
 8004534:	f00d fecc 	bl	80122d0 <puts>
#endif
		break;
 8004538:	e01c      	b.n	8004574 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800453a:	4b42      	ldr	r3, [pc, #264]	; (8004644 <W25qxx_Init+0x248>)
 800453c:	2202      	movs	r2, #2
 800453e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8004540:	4b40      	ldr	r3, [pc, #256]	; (8004644 <W25qxx_Init+0x248>)
 8004542:	2204      	movs	r2, #4
 8004544:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8004546:	484b      	ldr	r0, [pc, #300]	; (8004674 <W25qxx_Init+0x278>)
 8004548:	f00d fec2 	bl	80122d0 <puts>
#endif
		break;
 800454c:	e012      	b.n	8004574 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800454e:	4b3d      	ldr	r3, [pc, #244]	; (8004644 <W25qxx_Init+0x248>)
 8004550:	2201      	movs	r2, #1
 8004552:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8004554:	4b3b      	ldr	r3, [pc, #236]	; (8004644 <W25qxx_Init+0x248>)
 8004556:	2202      	movs	r2, #2
 8004558:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 800455a:	4847      	ldr	r0, [pc, #284]	; (8004678 <W25qxx_Init+0x27c>)
 800455c:	f00d feb8 	bl	80122d0 <puts>
#endif
		break;
 8004560:	e008      	b.n	8004574 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8004562:	4846      	ldr	r0, [pc, #280]	; (800467c <W25qxx_Init+0x280>)
 8004564:	f00d feb4 	bl	80122d0 <puts>
#endif
		w25qxx.Lock = 0;
 8004568:	4b36      	ldr	r3, [pc, #216]	; (8004644 <W25qxx_Init+0x248>)
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8004570:	2300      	movs	r3, #0
 8004572:	e063      	b.n	800463c <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8004574:	4b33      	ldr	r3, [pc, #204]	; (8004644 <W25qxx_Init+0x248>)
 8004576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800457a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800457c:	4b31      	ldr	r3, [pc, #196]	; (8004644 <W25qxx_Init+0x248>)
 800457e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004582:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8004584:	4b2f      	ldr	r3, [pc, #188]	; (8004644 <W25qxx_Init+0x248>)
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	4a2e      	ldr	r2, [pc, #184]	; (8004644 <W25qxx_Init+0x248>)
 800458c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800458e:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <W25qxx_Init+0x248>)
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <W25qxx_Init+0x248>)
 8004594:	6912      	ldr	r2, [r2, #16]
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	4a2a      	ldr	r2, [pc, #168]	; (8004644 <W25qxx_Init+0x248>)
 800459c:	8952      	ldrh	r2, [r2, #10]
 800459e:	fbb3 f3f2 	udiv	r3, r3, r2
 80045a2:	4a28      	ldr	r2, [pc, #160]	; (8004644 <W25qxx_Init+0x248>)
 80045a4:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80045a6:	4b27      	ldr	r3, [pc, #156]	; (8004644 <W25qxx_Init+0x248>)
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	011b      	lsls	r3, r3, #4
 80045ac:	4a25      	ldr	r2, [pc, #148]	; (8004644 <W25qxx_Init+0x248>)
 80045ae:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80045b0:	4b24      	ldr	r3, [pc, #144]	; (8004644 <W25qxx_Init+0x248>)
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	4a23      	ldr	r2, [pc, #140]	; (8004644 <W25qxx_Init+0x248>)
 80045b6:	6912      	ldr	r2, [r2, #16]
 80045b8:	fb02 f303 	mul.w	r3, r2, r3
 80045bc:	0a9b      	lsrs	r3, r3, #10
 80045be:	4a21      	ldr	r2, [pc, #132]	; (8004644 <W25qxx_Init+0x248>)
 80045c0:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80045c2:	f7ff fe5f 	bl	8004284 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80045c6:	2001      	movs	r0, #1
 80045c8:	f7ff fea8 	bl	800431c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80045cc:	2002      	movs	r0, #2
 80045ce:	f7ff fea5 	bl	800431c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80045d2:	2003      	movs	r0, #3
 80045d4:	f7ff fea2 	bl	800431c <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80045d8:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <W25qxx_Init+0x248>)
 80045da:	895b      	ldrh	r3, [r3, #10]
 80045dc:	4619      	mov	r1, r3
 80045de:	4828      	ldr	r0, [pc, #160]	; (8004680 <W25qxx_Init+0x284>)
 80045e0:	f00d fdf0 	bl	80121c4 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80045e4:	4b17      	ldr	r3, [pc, #92]	; (8004644 <W25qxx_Init+0x248>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4619      	mov	r1, r3
 80045ea:	4826      	ldr	r0, [pc, #152]	; (8004684 <W25qxx_Init+0x288>)
 80045ec:	f00d fdea 	bl	80121c4 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 80045f0:	4b14      	ldr	r3, [pc, #80]	; (8004644 <W25qxx_Init+0x248>)
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	4619      	mov	r1, r3
 80045f6:	4824      	ldr	r0, [pc, #144]	; (8004688 <W25qxx_Init+0x28c>)
 80045f8:	f00d fde4 	bl	80121c4 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80045fc:	4b11      	ldr	r3, [pc, #68]	; (8004644 <W25qxx_Init+0x248>)
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	4619      	mov	r1, r3
 8004602:	4822      	ldr	r0, [pc, #136]	; (800468c <W25qxx_Init+0x290>)
 8004604:	f00d fdde 	bl	80121c4 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <W25qxx_Init+0x248>)
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	4619      	mov	r1, r3
 800460e:	4820      	ldr	r0, [pc, #128]	; (8004690 <W25qxx_Init+0x294>)
 8004610:	f00d fdd8 	bl	80121c4 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <W25qxx_Init+0x248>)
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	4619      	mov	r1, r3
 800461a:	481e      	ldr	r0, [pc, #120]	; (8004694 <W25qxx_Init+0x298>)
 800461c:	f00d fdd2 	bl	80121c4 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8004620:	4b08      	ldr	r3, [pc, #32]	; (8004644 <W25qxx_Init+0x248>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	4619      	mov	r1, r3
 8004626:	481c      	ldr	r0, [pc, #112]	; (8004698 <W25qxx_Init+0x29c>)
 8004628:	f00d fdcc 	bl	80121c4 <iprintf>
	printf("w25qxx Init Done\r\n");
 800462c:	481b      	ldr	r0, [pc, #108]	; (800469c <W25qxx_Init+0x2a0>)
 800462e:	f00d fe4f 	bl	80122d0 <puts>
#endif
	w25qxx.Lock = 0;
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <W25qxx_Init+0x248>)
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800463a:	2301      	movs	r3, #1
}
 800463c:	4618      	mov	r0, r3
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	200064cc 	.word	0x200064cc
 8004648:	40020c00 	.word	0x40020c00
 800464c:	080169e4 	.word	0x080169e4
 8004650:	080169fc 	.word	0x080169fc
 8004654:	08016a10 	.word	0x08016a10
 8004658:	08016a28 	.word	0x08016a28
 800465c:	08016a40 	.word	0x08016a40
 8004660:	08016a58 	.word	0x08016a58
 8004664:	08016a70 	.word	0x08016a70
 8004668:	08016a88 	.word	0x08016a88
 800466c:	08016aa0 	.word	0x08016aa0
 8004670:	08016ab8 	.word	0x08016ab8
 8004674:	08016ad0 	.word	0x08016ad0
 8004678:	08016ae8 	.word	0x08016ae8
 800467c:	08016b00 	.word	0x08016b00
 8004680:	08016b14 	.word	0x08016b14
 8004684:	08016b34 	.word	0x08016b34
 8004688:	08016b4c 	.word	0x08016b4c
 800468c:	08016b6c 	.word	0x08016b6c
 8004690:	08016b88 	.word	0x08016b88
 8004694:	08016ba8 	.word	0x08016ba8
 8004698:	08016bc4 	.word	0x08016bc4
 800469c:	08016be4 	.word	0x08016be4

080046a0 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 80046a8:	e002      	b.n	80046b0 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 80046aa:	2001      	movs	r0, #1
 80046ac:	f008 ff0a 	bl	800d4c4 <osDelay>
	while (w25qxx.Lock == 1)
 80046b0:	4b2d      	ldr	r3, [pc, #180]	; (8004768 <W25qxx_EraseSector+0xc8>)
 80046b2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d0f7      	beq.n	80046aa <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 80046ba:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <W25qxx_EraseSector+0xc8>)
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 80046c2:	f002 fd4d 	bl	8007160 <HAL_GetTick>
 80046c6:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4828      	ldr	r0, [pc, #160]	; (800476c <W25qxx_EraseSector+0xcc>)
 80046cc:	f00d fd7a 	bl	80121c4 <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 80046d0:	f7ff fe6a 	bl	80043a8 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 80046d4:	4b24      	ldr	r3, [pc, #144]	; (8004768 <W25qxx_EraseSector+0xc8>)
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 80046e0:	f7ff fe06 	bl	80042f0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80046e4:	2200      	movs	r2, #0
 80046e6:	2140      	movs	r1, #64	; 0x40
 80046e8:	4821      	ldr	r0, [pc, #132]	; (8004770 <W25qxx_EraseSector+0xd0>)
 80046ea:	f003 fc51 	bl	8007f90 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80046ee:	4b1e      	ldr	r3, [pc, #120]	; (8004768 <W25qxx_EraseSector+0xc8>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d909      	bls.n	800470a <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 80046f6:	2021      	movs	r0, #33	; 0x21
 80046f8:	f7ff fd78 	bl	80041ec <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	0e1b      	lsrs	r3, r3, #24
 8004700:	b2db      	uxtb	r3, r3
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fd72 	bl	80041ec <W25qxx_Spi>
 8004708:	e002      	b.n	8004710 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 800470a:	2020      	movs	r0, #32
 800470c:	f7ff fd6e 	bl	80041ec <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	0c1b      	lsrs	r3, r3, #16
 8004714:	b2db      	uxtb	r3, r3
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff fd68 	bl	80041ec <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	0a1b      	lsrs	r3, r3, #8
 8004720:	b2db      	uxtb	r3, r3
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fd62 	bl	80041ec <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fd5d 	bl	80041ec <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004732:	2201      	movs	r2, #1
 8004734:	2140      	movs	r1, #64	; 0x40
 8004736:	480e      	ldr	r0, [pc, #56]	; (8004770 <W25qxx_EraseSector+0xd0>)
 8004738:	f003 fc2a 	bl	8007f90 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800473c:	f7ff fe34 	bl	80043a8 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8004740:	f002 fd0e 	bl	8007160 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	4619      	mov	r1, r3
 800474c:	4809      	ldr	r0, [pc, #36]	; (8004774 <W25qxx_EraseSector+0xd4>)
 800474e:	f00d fd39 	bl	80121c4 <iprintf>
#endif
	W25qxx_Delay(1);
 8004752:	2001      	movs	r0, #1
 8004754:	f008 feb6 	bl	800d4c4 <osDelay>
	w25qxx.Lock = 0;
 8004758:	4b03      	ldr	r3, [pc, #12]	; (8004768 <W25qxx_EraseSector+0xc8>)
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	200064cc 	.word	0x200064cc
 800476c:	08016c3c 	.word	0x08016c3c
 8004770:	40020c00 	.word	0x40020c00
 8004774:	08016c60 	.word	0x08016c60

08004778 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <W25qxx_SectorToPage+0x28>)
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	4a05      	ldr	r2, [pc, #20]	; (80047a0 <W25qxx_SectorToPage+0x28>)
 800478c:	8952      	ldrh	r2, [r2, #10]
 800478e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	200064cc 	.word	0x200064cc

080047a4 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80047b2:	e002      	b.n	80047ba <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 80047b4:	2001      	movs	r0, #1
 80047b6:	f008 fe85 	bl	800d4c4 <osDelay>
	while (w25qxx.Lock == 1)
 80047ba:	4b57      	ldr	r3, [pc, #348]	; (8004918 <W25qxx_WritePage+0x174>)
 80047bc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d0f7      	beq.n	80047b4 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 80047c4:	4b54      	ldr	r3, [pc, #336]	; (8004918 <W25qxx_WritePage+0x174>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4413      	add	r3, r2
 80047d2:	4a51      	ldr	r2, [pc, #324]	; (8004918 <W25qxx_WritePage+0x174>)
 80047d4:	8952      	ldrh	r2, [r2, #10]
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d802      	bhi.n	80047e0 <W25qxx_WritePage+0x3c>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d105      	bne.n	80047ec <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80047e0:	4b4d      	ldr	r3, [pc, #308]	; (8004918 <W25qxx_WritePage+0x174>)
 80047e2:	895b      	ldrh	r3, [r3, #10]
 80047e4:	461a      	mov	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	4413      	add	r3, r2
 80047f2:	4a49      	ldr	r2, [pc, #292]	; (8004918 <W25qxx_WritePage+0x174>)
 80047f4:	8952      	ldrh	r2, [r2, #10]
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d905      	bls.n	8004806 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80047fa:	4b47      	ldr	r3, [pc, #284]	; (8004918 <W25qxx_WritePage+0x174>)
 80047fc:	895b      	ldrh	r3, [r3, #10]
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	4843      	ldr	r0, [pc, #268]	; (800491c <W25qxx_WritePage+0x178>)
 800480e:	f00d fcd9 	bl	80121c4 <iprintf>
	W25qxx_Delay(100);
 8004812:	2064      	movs	r0, #100	; 0x64
 8004814:	f008 fe56 	bl	800d4c4 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004818:	f002 fca2 	bl	8007160 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 800481e:	f7ff fdc3 	bl	80043a8 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8004822:	f7ff fd65 	bl	80042f0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004826:	2200      	movs	r2, #0
 8004828:	2140      	movs	r1, #64	; 0x40
 800482a:	483d      	ldr	r0, [pc, #244]	; (8004920 <W25qxx_WritePage+0x17c>)
 800482c:	f003 fbb0 	bl	8007f90 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8004830:	4b39      	ldr	r3, [pc, #228]	; (8004918 <W25qxx_WritePage+0x174>)
 8004832:	895b      	ldrh	r3, [r3, #10]
 8004834:	461a      	mov	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	fb03 f302 	mul.w	r3, r3, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	4413      	add	r3, r2
 8004840:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8004842:	4b35      	ldr	r3, [pc, #212]	; (8004918 <W25qxx_WritePage+0x174>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b08      	cmp	r3, #8
 8004848:	d909      	bls.n	800485e <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 800484a:	2012      	movs	r0, #18
 800484c:	f7ff fcce 	bl	80041ec <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	0e1b      	lsrs	r3, r3, #24
 8004854:	b2db      	uxtb	r3, r3
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fcc8 	bl	80041ec <W25qxx_Spi>
 800485c:	e002      	b.n	8004864 <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 800485e:	2002      	movs	r0, #2
 8004860:	f7ff fcc4 	bl	80041ec <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	0c1b      	lsrs	r3, r3, #16
 8004868:	b2db      	uxtb	r3, r3
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff fcbe 	bl	80041ec <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	0a1b      	lsrs	r3, r3, #8
 8004874:	b2db      	uxtb	r3, r3
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fcb8 	bl	80041ec <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fcb3 	bl	80041ec <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	b29a      	uxth	r2, r3
 800488a:	2364      	movs	r3, #100	; 0x64
 800488c:	68f9      	ldr	r1, [r7, #12]
 800488e:	4825      	ldr	r0, [pc, #148]	; (8004924 <W25qxx_WritePage+0x180>)
 8004890:	f006 fa13 	bl	800acba <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004894:	2201      	movs	r2, #1
 8004896:	2140      	movs	r1, #64	; 0x40
 8004898:	4821      	ldr	r0, [pc, #132]	; (8004920 <W25qxx_WritePage+0x17c>)
 800489a:	f003 fb79 	bl	8007f90 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 800489e:	f7ff fd83 	bl	80043a8 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80048a2:	f002 fc5d 	bl	8007160 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	e018      	b.n	80048e6 <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d108      	bne.n	80048d0 <W25qxx_WritePage+0x12c>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d905      	bls.n	80048d0 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 80048c4:	4818      	ldr	r0, [pc, #96]	; (8004928 <W25qxx_WritePage+0x184>)
 80048c6:	f00d fd03 	bl	80122d0 <puts>
			W25qxx_Delay(10);
 80048ca:	200a      	movs	r0, #10
 80048cc:	f008 fdfa 	bl	800d4c4 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	4413      	add	r3, r2
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	4619      	mov	r1, r3
 80048da:	4814      	ldr	r0, [pc, #80]	; (800492c <W25qxx_WritePage+0x188>)
 80048dc:	f00d fc72 	bl	80121c4 <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	3301      	adds	r3, #1
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d3e2      	bcc.n	80048b4 <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 80048ee:	480e      	ldr	r0, [pc, #56]	; (8004928 <W25qxx_WritePage+0x184>)
 80048f0:	f00d fcee 	bl	80122d0 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 80048f4:	6939      	ldr	r1, [r7, #16]
 80048f6:	480e      	ldr	r0, [pc, #56]	; (8004930 <W25qxx_WritePage+0x18c>)
 80048f8:	f00d fc64 	bl	80121c4 <iprintf>
	W25qxx_Delay(100);
 80048fc:	2064      	movs	r0, #100	; 0x64
 80048fe:	f008 fde1 	bl	800d4c4 <osDelay>
#endif
	W25qxx_Delay(1);
 8004902:	2001      	movs	r0, #1
 8004904:	f008 fdde 	bl	800d4c4 <osDelay>
	w25qxx.Lock = 0;
 8004908:	4b03      	ldr	r3, [pc, #12]	; (8004918 <W25qxx_WritePage+0x174>)
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004910:	bf00      	nop
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	200064cc 	.word	0x200064cc
 800491c:	08016ec4 	.word	0x08016ec4
 8004920:	40020c00 	.word	0x40020c00
 8004924:	200061e4 	.word	0x200061e4
 8004928:	08016f00 	.word	0x08016f00
 800492c:	08016f04 	.word	0x08016f04
 8004930:	08016f0c 	.word	0x08016f0c

08004934 <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8004942:	4b36      	ldr	r3, [pc, #216]	; (8004a1c <W25qxx_WriteSector+0xe8>)
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d802      	bhi.n	8004952 <W25qxx_WriteSector+0x1e>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8004952:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <W25qxx_WriteSector+0xe8>)
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	4830      	ldr	r0, [pc, #192]	; (8004a20 <W25qxx_WriteSector+0xec>)
 8004960:	f00d fc30 	bl	80121c4 <iprintf>
	W25qxx_Delay(100);
 8004964:	2064      	movs	r0, #100	; 0x64
 8004966:	f008 fdad 	bl	800d4c4 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800496a:	4b2c      	ldr	r3, [pc, #176]	; (8004a1c <W25qxx_WriteSector+0xe8>)
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d306      	bcc.n	8004982 <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 8004974:	482b      	ldr	r0, [pc, #172]	; (8004a24 <W25qxx_WriteSector+0xf0>)
 8004976:	f00d fcab 	bl	80122d0 <puts>
		W25qxx_Delay(100);
 800497a:	2064      	movs	r0, #100	; 0x64
 800497c:	f008 fda2 	bl	800d4c4 <osDelay>
#endif
		return;
 8004980:	e048      	b.n	8004a14 <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	441a      	add	r2, r3
 8004988:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <W25qxx_WriteSector+0xe8>)
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	429a      	cmp	r2, r3
 800498e:	d905      	bls.n	800499c <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8004990:	4b22      	ldr	r3, [pc, #136]	; (8004a1c <W25qxx_WriteSector+0xe8>)
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	e001      	b.n	80049a0 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80049a0:	68b8      	ldr	r0, [r7, #8]
 80049a2:	f7ff fee9 	bl	8004778 <W25qxx_SectorToPage>
 80049a6:	4602      	mov	r2, r0
 80049a8:	4b1c      	ldr	r3, [pc, #112]	; (8004a1c <W25qxx_WriteSector+0xe8>)
 80049aa:	895b      	ldrh	r3, [r3, #10]
 80049ac:	4619      	mov	r1, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80049b4:	4413      	add	r3, r2
 80049b6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80049b8:	4b18      	ldr	r3, [pc, #96]	; (8004a1c <W25qxx_WriteSector+0xe8>)
 80049ba:	895b      	ldrh	r3, [r3, #10]
 80049bc:	461a      	mov	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80049c4:	fb02 f201 	mul.w	r2, r2, r1
 80049c8:	1a9b      	subs	r3, r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	69f9      	ldr	r1, [r7, #28]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff fee6 	bl	80047a4 <W25qxx_WritePage>
		StartPage++;
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	3301      	adds	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80049de:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <W25qxx_WriteSector+0xe8>)
 80049e0:	895b      	ldrh	r3, [r3, #10]
 80049e2:	461a      	mov	r2, r3
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	1a9a      	subs	r2, r3, r2
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	4413      	add	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <W25qxx_WriteSector+0xe8>)
 80049f0:	895b      	ldrh	r3, [r3, #10]
 80049f2:	461a      	mov	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	dce1      	bgt.n	80049cc <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 8004a08:	4807      	ldr	r0, [pc, #28]	; (8004a28 <W25qxx_WriteSector+0xf4>)
 8004a0a:	f00d fc61 	bl	80122d0 <puts>
	W25qxx_Delay(100);
 8004a0e:	2064      	movs	r0, #100	; 0x64
 8004a10:	f008 fd58 	bl	800d4c4 <osDelay>
#endif
}
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	200064cc 	.word	0x200064cc
 8004a20:	08016f30 	.word	0x08016f30
 8004a24:	08016f70 	.word	0x08016f70
 8004a28:	08016f90 	.word	0x08016f90

08004a2c <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8004a3a:	e002      	b.n	8004a42 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	f008 fd41 	bl	800d4c4 <osDelay>
	while (w25qxx.Lock == 1)
 8004a42:	4b54      	ldr	r3, [pc, #336]	; (8004b94 <W25qxx_ReadPage+0x168>)
 8004a44:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d0f7      	beq.n	8004a3c <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004a4c:	4b51      	ldr	r3, [pc, #324]	; (8004b94 <W25qxx_ReadPage+0x168>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004a54:	4b4f      	ldr	r3, [pc, #316]	; (8004b94 <W25qxx_ReadPage+0x168>)
 8004a56:	895b      	ldrh	r3, [r3, #10]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d802      	bhi.n	8004a66 <W25qxx_ReadPage+0x3a>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d102      	bne.n	8004a6c <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8004a66:	4b4b      	ldr	r3, [pc, #300]	; (8004b94 <W25qxx_ReadPage+0x168>)
 8004a68:	895b      	ldrh	r3, [r3, #10]
 8004a6a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	4413      	add	r3, r2
 8004a72:	4a48      	ldr	r2, [pc, #288]	; (8004b94 <W25qxx_ReadPage+0x168>)
 8004a74:	8952      	ldrh	r2, [r2, #10]
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d905      	bls.n	8004a86 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004a7a:	4b46      	ldr	r3, [pc, #280]	; (8004b94 <W25qxx_ReadPage+0x168>)
 8004a7c:	895b      	ldrh	r3, [r3, #10]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	4842      	ldr	r0, [pc, #264]	; (8004b98 <W25qxx_ReadPage+0x16c>)
 8004a8e:	f00d fb99 	bl	80121c4 <iprintf>
	W25qxx_Delay(100);
 8004a92:	2064      	movs	r0, #100	; 0x64
 8004a94:	f008 fd16 	bl	800d4c4 <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8004a98:	f002 fb62 	bl	8007160 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <W25qxx_ReadPage+0x168>)
 8004aa0:	895b      	ldrh	r3, [r3, #10]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	fb03 f302 	mul.w	r3, r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2140      	movs	r1, #64	; 0x40
 8004ab4:	4839      	ldr	r0, [pc, #228]	; (8004b9c <W25qxx_ReadPage+0x170>)
 8004ab6:	f003 fa6b 	bl	8007f90 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8004aba:	4b36      	ldr	r3, [pc, #216]	; (8004b94 <W25qxx_ReadPage+0x168>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d909      	bls.n	8004ad6 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8004ac2:	200c      	movs	r0, #12
 8004ac4:	f7ff fb92 	bl	80041ec <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	0e1b      	lsrs	r3, r3, #24
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff fb8c 	bl	80041ec <W25qxx_Spi>
 8004ad4:	e002      	b.n	8004adc <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8004ad6:	200b      	movs	r0, #11
 8004ad8:	f7ff fb88 	bl	80041ec <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	0c1b      	lsrs	r3, r3, #16
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff fb82 	bl	80041ec <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff fb7c 	bl	80041ec <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff fb77 	bl	80041ec <W25qxx_Spi>
	W25qxx_Spi(0);
 8004afe:	2000      	movs	r0, #0
 8004b00:	f7ff fb74 	bl	80041ec <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	2364      	movs	r3, #100	; 0x64
 8004b0a:	68f9      	ldr	r1, [r7, #12]
 8004b0c:	4824      	ldr	r0, [pc, #144]	; (8004ba0 <W25qxx_ReadPage+0x174>)
 8004b0e:	f006 fa10 	bl	800af32 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004b12:	2201      	movs	r2, #1
 8004b14:	2140      	movs	r1, #64	; 0x40
 8004b16:	4821      	ldr	r0, [pc, #132]	; (8004b9c <W25qxx_ReadPage+0x170>)
 8004b18:	f003 fa3a 	bl	8007f90 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004b1c:	f002 fb20 	bl	8007160 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	e018      	b.n	8004b60 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d108      	bne.n	8004b4a <W25qxx_ReadPage+0x11e>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d905      	bls.n	8004b4a <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004b3e:	4819      	ldr	r0, [pc, #100]	; (8004ba4 <W25qxx_ReadPage+0x178>)
 8004b40:	f00d fbc6 	bl	80122d0 <puts>
			W25qxx_Delay(10);
 8004b44:	200a      	movs	r0, #10
 8004b46:	f008 fcbd 	bl	800d4c4 <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	4413      	add	r3, r2
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	4619      	mov	r1, r3
 8004b54:	4814      	ldr	r0, [pc, #80]	; (8004ba8 <W25qxx_ReadPage+0x17c>)
 8004b56:	f00d fb35 	bl	80121c4 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d3e2      	bcc.n	8004b2e <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8004b68:	480e      	ldr	r0, [pc, #56]	; (8004ba4 <W25qxx_ReadPage+0x178>)
 8004b6a:	f00d fbb1 	bl	80122d0 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8004b6e:	6939      	ldr	r1, [r7, #16]
 8004b70:	480e      	ldr	r0, [pc, #56]	; (8004bac <W25qxx_ReadPage+0x180>)
 8004b72:	f00d fb27 	bl	80121c4 <iprintf>
	W25qxx_Delay(100);
 8004b76:	2064      	movs	r0, #100	; 0x64
 8004b78:	f008 fca4 	bl	800d4c4 <osDelay>
#endif
	W25qxx_Delay(1);
 8004b7c:	2001      	movs	r0, #1
 8004b7e:	f008 fca1 	bl	800d4c4 <osDelay>
	w25qxx.Lock = 0;
 8004b82:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <W25qxx_ReadPage+0x168>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8004b8a:	bf00      	nop
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	200064cc 	.word	0x200064cc
 8004b98:	080170dc 	.word	0x080170dc
 8004b9c:	40020c00 	.word	0x40020c00
 8004ba0:	200061e4 	.word	0x200061e4
 8004ba4:	08016f00 	.word	0x08016f00
 8004ba8:	08016f04 	.word	0x08016f04
 8004bac:	08017118 	.word	0x08017118

08004bb0 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8004bbe:	4b36      	ldr	r3, [pc, #216]	; (8004c98 <W25qxx_ReadSector+0xe8>)
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d802      	bhi.n	8004bce <W25qxx_ReadSector+0x1e>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8004bce:	4b32      	ldr	r3, [pc, #200]	; (8004c98 <W25qxx_ReadSector+0xe8>)
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	4830      	ldr	r0, [pc, #192]	; (8004c9c <W25qxx_ReadSector+0xec>)
 8004bdc:	f00d faf2 	bl	80121c4 <iprintf>
	W25qxx_Delay(100);
 8004be0:	2064      	movs	r0, #100	; 0x64
 8004be2:	f008 fc6f 	bl	800d4c4 <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8004be6:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <W25qxx_ReadSector+0xe8>)
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d306      	bcc.n	8004bfe <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8004bf0:	482b      	ldr	r0, [pc, #172]	; (8004ca0 <W25qxx_ReadSector+0xf0>)
 8004bf2:	f00d fb6d 	bl	80122d0 <puts>
		W25qxx_Delay(100);
 8004bf6:	2064      	movs	r0, #100	; 0x64
 8004bf8:	f008 fc64 	bl	800d4c4 <osDelay>
#endif
		return;
 8004bfc:	e048      	b.n	8004c90 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	441a      	add	r2, r3
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <W25qxx_ReadSector+0xe8>)
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d905      	bls.n	8004c18 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8004c0c:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <W25qxx_ReadSector+0xe8>)
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e001      	b.n	8004c1c <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8004c1c:	68b8      	ldr	r0, [r7, #8]
 8004c1e:	f7ff fdab 	bl	8004778 <W25qxx_SectorToPage>
 8004c22:	4602      	mov	r2, r0
 8004c24:	4b1c      	ldr	r3, [pc, #112]	; (8004c98 <W25qxx_ReadSector+0xe8>)
 8004c26:	895b      	ldrh	r3, [r3, #10]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c30:	4413      	add	r3, r2
 8004c32:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8004c34:	4b18      	ldr	r3, [pc, #96]	; (8004c98 <W25qxx_ReadSector+0xe8>)
 8004c36:	895b      	ldrh	r3, [r3, #10]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c40:	fb02 f201 	mul.w	r2, r2, r1
 8004c44:	1a9b      	subs	r3, r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	69f9      	ldr	r1, [r7, #28]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7ff feec 	bl	8004a2c <W25qxx_ReadPage>
		StartPage++;
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	3301      	adds	r3, #1
 8004c58:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <W25qxx_ReadSector+0xe8>)
 8004c5c:	895b      	ldrh	r3, [r3, #10]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1a9a      	subs	r2, r3, r2
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	4413      	add	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8004c6a:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <W25qxx_ReadSector+0xe8>)
 8004c6c:	895b      	ldrh	r3, [r3, #10]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	dce1      	bgt.n	8004c48 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 8004c84:	4807      	ldr	r0, [pc, #28]	; (8004ca4 <W25qxx_ReadSector+0xf4>)
 8004c86:	f00d fb23 	bl	80122d0 <puts>
	W25qxx_Delay(100);
 8004c8a:	2064      	movs	r0, #100	; 0x64
 8004c8c:	f008 fc1a 	bl	800d4c4 <osDelay>
#endif
}
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	200064cc 	.word	0x200064cc
 8004c9c:	0801713c 	.word	0x0801713c
 8004ca0:	0801717c 	.word	0x0801717c
 8004ca4:	0801719c 	.word	0x0801719c

08004ca8 <Max31855_Read_Temp>:
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8004cae:	2300      	movs	r3, #0
 8004cb0:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cb8:	483b      	ldr	r0, [pc, #236]	; (8004da8 <Max31855_Read_Temp+0x100>)
 8004cba:	f003 f969 	bl	8007f90 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8004cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	4939      	ldr	r1, [pc, #228]	; (8004dac <Max31855_Read_Temp+0x104>)
 8004cc6:	483a      	ldr	r0, [pc, #232]	; (8004db0 <Max31855_Read_Temp+0x108>)
 8004cc8:	f006 f933 	bl	800af32 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cd2:	4835      	ldr	r0, [pc, #212]	; (8004da8 <Max31855_Read_Temp+0x100>)
 8004cd4:	f003 f95c 	bl	8007f90 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8004cd8:	4b34      	ldr	r3, [pc, #208]	; (8004dac <Max31855_Read_Temp+0x104>)
 8004cda:	78db      	ldrb	r3, [r3, #3]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4b33      	ldr	r3, [pc, #204]	; (8004dac <Max31855_Read_Temp+0x104>)
 8004ce0:	789b      	ldrb	r3, [r3, #2]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	4b31      	ldr	r3, [pc, #196]	; (8004dac <Max31855_Read_Temp+0x104>)
 8004ce8:	785b      	ldrb	r3, [r3, #1]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	431a      	orrs	r2, r3
 8004cee:	4b2f      	ldr	r3, [pc, #188]	; (8004dac <Max31855_Read_Temp+0x104>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	061b      	lsls	r3, r3, #24
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	603b      	str	r3, [r7, #0]

	Error = v & 0x07;								  // Error Detection
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b2c      	ldr	r3, [pc, #176]	; (8004db4 <Max31855_Read_Temp+0x10c>)
 8004d04:	701a      	strb	r2, [r3, #0]



		sign = (DATARX[0] & (0x80)) >> 7;					// Sign Bit calculation
 8004d06:	4b29      	ldr	r3, [pc, #164]	; (8004dac <Max31855_Read_Temp+0x104>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	09db      	lsrs	r3, r3, #7
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4b29      	ldr	r3, [pc, #164]	; (8004db8 <Max31855_Read_Temp+0x110>)
 8004d12:	601a      	str	r2, [r3, #0]

		if (DATARX[3] & 0x07)								 // Returns Error Number
 8004d14:	4b25      	ldr	r3, [pc, #148]	; (8004dac <Max31855_Read_Temp+0x104>)
 8004d16:	78db      	ldrb	r3, [r3, #3]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d009      	beq.n	8004d34 <Max31855_Read_Temp+0x8c>
			return (-1 * (DATARX[3] & 0x07));
 8004d20:	4b22      	ldr	r3, [pc, #136]	; (8004dac <Max31855_Read_Temp+0x104>)
 8004d22:	78db      	ldrb	r3, [r3, #3]
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	425b      	negs	r3, r3
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d32:	e033      	b.n	8004d9c <Max31855_Read_Temp+0xf4>

		else if (sign == 1) {								// Negative Temperature
 8004d34:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <Max31855_Read_Temp+0x110>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d11d      	bne.n	8004d78 <Max31855_Read_Temp+0xd0>
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <Max31855_Read_Temp+0x104>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	019b      	lsls	r3, r3, #6
 8004d42:	4a1a      	ldr	r2, [pc, #104]	; (8004dac <Max31855_Read_Temp+0x104>)
 8004d44:	7852      	ldrb	r2, [r2, #1]
 8004d46:	0892      	lsrs	r2, r2, #2
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	607b      	str	r3, [r7, #4]
			Temp &= 0b01111111111111;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d54:	607b      	str	r3, [r7, #4]
			Temp ^= 0b01111111111111;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f483 53ff 	eor.w	r3, r3, #8160	; 0x1fe0
 8004d5c:	f083 031f 	eor.w	r3, r3, #31
 8004d60:	607b      	str	r3, [r7, #4]
			return ((float) -Temp / 4);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	425b      	negs	r3, r3
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d6e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004d72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d76:	e011      	b.n	8004d9c <Max31855_Read_Temp+0xf4>
		}

		else												 // Positive Temperature
		{
			Temp = (DATARX[0] << 6) | (DATARX[1] >> 2);
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <Max31855_Read_Temp+0x104>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	019b      	lsls	r3, r3, #6
 8004d7e:	4a0b      	ldr	r2, [pc, #44]	; (8004dac <Max31855_Read_Temp+0x104>)
 8004d80:	7852      	ldrb	r2, [r2, #1]
 8004d82:	0892      	lsrs	r2, r2, #2
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	4313      	orrs	r3, r2
 8004d88:	607b      	str	r3, [r7, #4]
			return ((float) Temp / 4.0);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d94:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004d98:	eec7 7a26 	vdiv.f32	s15, s14, s13

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
	return centigrade;
	*/
}
 8004d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40021000 	.word	0x40021000
 8004dac:	200064f4 	.word	0x200064f4
 8004db0:	2000623c 	.word	0x2000623c
 8004db4:	2000037c 	.word	0x2000037c
 8004db8:	20000380 	.word	0x20000380

08004dbc <MRT_pollPropulsion>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_pollPropulsion(void){
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
	MRT_getThermoTemp();
 8004dc0:	f000 f806 	bl	8004dd0 <MRT_getThermoTemp>
	MRT_getTransducerVoltage();
 8004dc4:	f000 f812 	bl	8004dec <MRT_getTransducerVoltage>
	MRT_getValveStatus();
 8004dc8:	f000 f820 	bl	8004e0c <MRT_getValveStatus>
}
 8004dcc:	bf00      	nop
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <MRT_getThermoTemp>:

void MRT_getThermoTemp(void){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
	thermocouple_temperature = Max31855_Read_Temp();
 8004dd4:	f7ff ff68 	bl	8004ca8 <Max31855_Read_Temp>
 8004dd8:	eef0 7a40 	vmov.f32	s15, s0
 8004ddc:	4b02      	ldr	r3, [pc, #8]	; (8004de8 <MRT_getThermoTemp+0x18>)
 8004dde:	edc3 7a00 	vstr	s15, [r3]
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	2000652c 	.word	0x2000652c

08004dec <MRT_getTransducerVoltage>:

void MRT_getTransducerVoltage(void){
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
	transducer_voltage = MRT_prop_poll_pressure_transducer(&TRANSDUCER_ADC);
 8004df0:	4804      	ldr	r0, [pc, #16]	; (8004e04 <MRT_getTransducerVoltage+0x18>)
 8004df2:	f000 f85d 	bl	8004eb0 <MRT_prop_poll_pressure_transducer>
 8004df6:	eef0 7a40 	vmov.f32	s15, s0
 8004dfa:	4b03      	ldr	r3, [pc, #12]	; (8004e08 <MRT_getTransducerVoltage+0x1c>)
 8004dfc:	edc3 7a00 	vstr	s15, [r3]
}
 8004e00:	bf00      	nop
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20006044 	.word	0x20006044
 8004e08:	20006530 	.word	0x20006530

08004e0c <MRT_getValveStatus>:

void MRT_getValveStatus(void){
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
	valve_status = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port,IN_Prop_ActuatedVent_Feedback_Pin);
 8004e10:	2102      	movs	r1, #2
 8004e12:	4804      	ldr	r0, [pc, #16]	; (8004e24 <MRT_getValveStatus+0x18>)
 8004e14:	f003 f8a4 	bl	8007f60 <HAL_GPIO_ReadPin>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4b02      	ldr	r3, [pc, #8]	; (8004e28 <MRT_getValveStatus+0x1c>)
 8004e1e:	701a      	strb	r2, [r3, #0]
}
 8004e20:	bf00      	nop
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40020400 	.word	0x40020400
 8004e28:	2000652a 	.word	0x2000652a

08004e2c <MRT_formatPropulsion>:

// formats propulsion telemetry string using sprintf
void MRT_formatPropulsion(void) {
 8004e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e2e:	b089      	sub	sp, #36	; 0x24
 8004e30:	af06      	add	r7, sp, #24
	memset(msg_buffer_pr, 0, 50);
 8004e32:	2232      	movs	r2, #50	; 0x32
 8004e34:	2100      	movs	r1, #0
 8004e36:	4816      	ldr	r0, [pc, #88]	; (8004e90 <MRT_formatPropulsion+0x64>)
 8004e38:	f00c fa98 	bl	801136c <memset>
	//tank_pressure = convert_prop_tank_pressure(); // convert buffered readings to voltage TODO??
	sprintf(msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8004e3c:	4b15      	ldr	r3, [pc, #84]	; (8004e94 <MRT_formatPropulsion+0x68>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fb fb91 	bl	8000568 <__aeabi_f2d>
 8004e46:	4604      	mov	r4, r0
 8004e48:	460d      	mov	r5, r1
 8004e4a:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <MRT_formatPropulsion+0x6c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fb fb8a 	bl	8000568 <__aeabi_f2d>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4910      	ldr	r1, [pc, #64]	; (8004e9c <MRT_formatPropulsion+0x70>)
 8004e5a:	7809      	ldrb	r1, [r1, #0]
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	4910      	ldr	r1, [pc, #64]	; (8004ea0 <MRT_formatPropulsion+0x74>)
 8004e60:	7809      	ldrb	r1, [r1, #0]
 8004e62:	460e      	mov	r6, r1
 8004e64:	490f      	ldr	r1, [pc, #60]	; (8004ea4 <MRT_formatPropulsion+0x78>)
 8004e66:	7809      	ldrb	r1, [r1, #0]
 8004e68:	6079      	str	r1, [r7, #4]
 8004e6a:	490f      	ldr	r1, [pc, #60]	; (8004ea8 <MRT_formatPropulsion+0x7c>)
 8004e6c:	6809      	ldr	r1, [r1, #0]
 8004e6e:	9105      	str	r1, [sp, #20]
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	9104      	str	r1, [sp, #16]
 8004e74:	9603      	str	r6, [sp, #12]
 8004e76:	9002      	str	r0, [sp, #8]
 8004e78:	e9cd 2300 	strd	r2, r3, [sp]
 8004e7c:	4622      	mov	r2, r4
 8004e7e:	462b      	mov	r3, r5
 8004e80:	490a      	ldr	r1, [pc, #40]	; (8004eac <MRT_formatPropulsion+0x80>)
 8004e82:	4803      	ldr	r0, [pc, #12]	; (8004e90 <MRT_formatPropulsion+0x64>)
 8004e84:	f00d faf0 	bl	8012468 <siprintf>
			transducer_voltage, thermocouple_temperature, valve_status,
			prev_min, prev_sec, prev_subsec);
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e90:	200064f8 	.word	0x200064f8
 8004e94:	20006530 	.word	0x20006530
 8004e98:	2000652c 	.word	0x2000652c
 8004e9c:	2000652a 	.word	0x2000652a
 8004ea0:	20000376 	.word	0x20000376
 8004ea4:	20000377 	.word	0x20000377
 8004ea8:	20000378 	.word	0x20000378
 8004eac:	08017230 	.word	0x08017230

08004eb0 <MRT_prop_poll_pressure_transducer>:
//PRIVATE FUNCTIONS

/*
 * Get the pressure transducer voltage (poll ADC)
 */
float MRT_prop_poll_pressure_transducer(ADC_HandleTypeDef* hadc) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	// reading adc
	HAL_ADC_Start(hadc);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f002 f9c5 	bl	8007248 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 1000);
 8004ebe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f002 fac5 	bl	8007452 <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(hadc);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f002 fb4d 	bl	8007568 <HAL_ADC_GetValue>
 8004ece:	60f8      	str	r0, [r7, #12]
	HAL_ADC_Stop(hadc);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f002 fa8b 	bl	80073ec <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0) * 3.3; // assuming 12 bits
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f7fb fb24 	bl	8000524 <__aeabi_ui2d>
 8004edc:	a312      	add	r3, pc, #72	; (adr r3, 8004f28 <MRT_prop_poll_pressure_transducer+0x78>)
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	f7fb fcc3 	bl	800086c <__aeabi_ddiv>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4610      	mov	r0, r2
 8004eec:	4619      	mov	r1, r3
 8004eee:	f7fb fe8b 	bl	8000c08 <__aeabi_d2f>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fb fb37 	bl	8000568 <__aeabi_f2d>
 8004efa:	a30d      	add	r3, pc, #52	; (adr r3, 8004f30 <MRT_prop_poll_pressure_transducer+0x80>)
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f7fb fb8a 	bl	8000618 <__aeabi_dmul>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4610      	mov	r0, r2
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	f7fb fe7c 	bl	8000c08 <__aeabi_d2f>
 8004f10:	4603      	mov	r3, r0
 8004f12:	60bb      	str	r3, [r7, #8]

	return voltage;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	ee07 3a90 	vmov	s15, r3
}
 8004f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	f3af 8000 	nop.w
 8004f28:	00000000 	.word	0x00000000
 8004f2c:	40affe00 	.word	0x40affe00
 8004f30:	66666666 	.word	0x66666666
 8004f34:	400a6666 	.word	0x400a6666

08004f38 <MRT_LSM6DSR_Constructor>:


//**************************************************//
/*****LSM6DSR STATIC FUNCTIONS*****/

void MRT_LSM6DSR_Constructor(){
 8004f38:	b598      	push	{r3, r4, r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
	if (lsm6dsr==NULL){
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <MRT_LSM6DSR_Constructor+0x28>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <MRT_LSM6DSR_Constructor+0x24>
		lsm6dsr = new LSM6DSR(&LSM6DSR_I2C, (uint8_t) MRT_LSM6DSR_ADDRESS);
 8004f44:	203c      	movs	r0, #60	; 0x3c
 8004f46:	f00b f8d1 	bl	80100ec <_Znwj>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	461c      	mov	r4, r3
 8004f4e:	226a      	movs	r2, #106	; 0x6a
 8004f50:	4904      	ldr	r1, [pc, #16]	; (8004f64 <MRT_LSM6DSR_Constructor+0x2c>)
 8004f52:	4620      	mov	r0, r4
 8004f54:	f000 f99c 	bl	8005290 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>
 8004f58:	4b01      	ldr	r3, [pc, #4]	; (8004f60 <MRT_LSM6DSR_Constructor+0x28>)
 8004f5a:	601c      	str	r4, [r3, #0]
	}
}
 8004f5c:	bf00      	nop
 8004f5e:	bd98      	pop	{r3, r4, r7, pc}
 8004f60:	20000384 	.word	0x20000384
 8004f64:	200060b8 	.word	0x200060b8

08004f68 <MRT_LSM6DSR_Destructor>:

void MRT_LSM6DSR_Destructor(){
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
	if (lsm6dsr!=NULL){
 8004f6c:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <MRT_LSM6DSR_Destructor+0x1c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <MRT_LSM6DSR_Destructor+0x12>
		lsm6dsr = NULL;
 8004f74:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <MRT_LSM6DSR_Destructor+0x1c>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
	}
}
 8004f7a:	bf00      	nop
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	20000384 	.word	0x20000384

08004f88 <MRT_LSM6DSR_getAcceleration>:

void MRT_LSM6DSR_getAcceleration(void){
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAcceleration();
 8004f8e:	4b0b      	ldr	r3, [pc, #44]	; (8004fbc <MRT_LSM6DSR_getAcceleration+0x34>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fa22 	bl	80053dc <_ZN7LSM6DSR15getAccelerationEv>
 8004f98:	6078      	str	r0, [r7, #4]
	hlsm6dsr.acceleration_mg[0] = temp_array[0];
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004fa0:	6013      	str	r3, [r2, #0]
	hlsm6dsr.acceleration_mg[1] = temp_array[1];
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4a06      	ldr	r2, [pc, #24]	; (8004fc0 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004fa8:	6053      	str	r3, [r2, #4]
	hlsm6dsr.acceleration_mg[2] = temp_array[2];
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <MRT_LSM6DSR_getAcceleration+0x38>)
 8004fb0:	6093      	str	r3, [r2, #8]
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000384 	.word	0x20000384
 8004fc0:	2000038c 	.word	0x2000038c

08004fc4 <MRT_LSM6DSR_getAngularRate>:
void MRT_LSM6DSR_getAngularRate(void){
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
	float* temp_array = lsm6dsr->getAngularRate();
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <MRT_LSM6DSR_getAngularRate+0x34>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fa82 	bl	80054d8 <_ZN7LSM6DSR14getAngularRateEv>
 8004fd4:	6078      	str	r0, [r7, #4]
	hlsm6dsr.angular_rate_mdps[0] = temp_array[0];
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <MRT_LSM6DSR_getAngularRate+0x38>)
 8004fdc:	60d3      	str	r3, [r2, #12]
	hlsm6dsr.angular_rate_mdps[1] = temp_array[1];
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	4a06      	ldr	r2, [pc, #24]	; (8004ffc <MRT_LSM6DSR_getAngularRate+0x38>)
 8004fe4:	6113      	str	r3, [r2, #16]
	hlsm6dsr.angular_rate_mdps[2] = temp_array[2];
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	4a04      	ldr	r2, [pc, #16]	; (8004ffc <MRT_LSM6DSR_getAngularRate+0x38>)
 8004fec:	6153      	str	r3, [r2, #20]
}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000384 	.word	0x20000384
 8004ffc:	2000038c 	.word	0x2000038c

08005000 <MRT_LSM6DSR_getTemperature>:
void MRT_LSM6DSR_getTemperature(void){
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
	lsm6dsr->getTemperature();
 8005004:	4b05      	ldr	r3, [pc, #20]	; (800501c <MRT_LSM6DSR_getTemperature+0x1c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fa2f 	bl	800546c <_ZN7LSM6DSR14getTemperatureEv>
	hlsm6dsr.temperature_degC = lsm6dsr->temperature_degC;
 800500e:	4b03      	ldr	r3, [pc, #12]	; (800501c <MRT_LSM6DSR_getTemperature+0x1c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	4a02      	ldr	r2, [pc, #8]	; (8005020 <MRT_LSM6DSR_getTemperature+0x20>)
 8005016:	6193      	str	r3, [r2, #24]
}
 8005018:	bf00      	nop
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000384 	.word	0x20000384
 8005020:	2000038c 	.word	0x2000038c

08005024 <MRT_LSM6DSR_pollAll>:

void MRT_LSM6DSR_pollAll(void){
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
	MRT_LSM6DSR_getAcceleration();
 8005028:	f7ff ffae 	bl	8004f88 <MRT_LSM6DSR_getAcceleration>
	MRT_LSM6DSR_getAngularRate();
 800502c:	f7ff ffca 	bl	8004fc4 <MRT_LSM6DSR_getAngularRate>
	MRT_LSM6DSR_getTemperature();
 8005030:	f7ff ffe6 	bl	8005000 <MRT_LSM6DSR_getTemperature>
}
 8005034:	bf00      	nop
 8005036:	bd80      	pop	{r7, pc}

08005038 <MRT_LPS22HH_Constructor>:


//**************************************************//
/*****LPS22HH STATIC FUNCTIONS*****/

void MRT_LPS22HH_Constructor(){
 8005038:	b598      	push	{r3, r4, r7, lr}
 800503a:	af00      	add	r7, sp, #0
	if (lps22hh==NULL){
 800503c:	4b08      	ldr	r3, [pc, #32]	; (8005060 <MRT_LPS22HH_Constructor+0x28>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <MRT_LPS22HH_Constructor+0x24>
		lps22hh = new LPS22HH(&LPS22HH_I2C, (uint8_t) MRT_LPS22HH_ADDRESS);
 8005044:	2020      	movs	r0, #32
 8005046:	f00b f851 	bl	80100ec <_Znwj>
 800504a:	4603      	mov	r3, r0
 800504c:	461c      	mov	r4, r3
 800504e:	22b3      	movs	r2, #179	; 0xb3
 8005050:	4904      	ldr	r1, [pc, #16]	; (8005064 <MRT_LPS22HH_Constructor+0x2c>)
 8005052:	4620      	mov	r0, r4
 8005054:	f000 fac4 	bl	80055e0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>
 8005058:	4b01      	ldr	r3, [pc, #4]	; (8005060 <MRT_LPS22HH_Constructor+0x28>)
 800505a:	601c      	str	r4, [r3, #0]
	}
}
 800505c:	bf00      	nop
 800505e:	bd98      	pop	{r3, r4, r7, pc}
 8005060:	20000388 	.word	0x20000388
 8005064:	200060b8 	.word	0x200060b8

08005068 <MRT_LPS22HH_Destructor>:

void MRT_LPS22HH_Destructor(){
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
	if (lps22hh!=NULL){
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <MRT_LPS22HH_Destructor+0x1c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <MRT_LPS22HH_Destructor+0x12>
		lps22hh = NULL;
 8005074:	4b03      	ldr	r3, [pc, #12]	; (8005084 <MRT_LPS22HH_Destructor+0x1c>)
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
	}
}
 800507a:	bf00      	nop
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	20000388 	.word	0x20000388

08005088 <MRT_LPS22HH_getPressure>:

void MRT_LPS22HH_getPressure(void){
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
	hlps22hh.pressure_hPa = lps22hh->getPressure();
 800508c:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <MRT_LPS22HH_getPressure+0x1c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fb27 	bl	80056e4 <_ZN7LPS22HH11getPressureEv>
 8005096:	eef0 7a40 	vmov.f32	s15, s0
 800509a:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <MRT_LPS22HH_getPressure+0x20>)
 800509c:	edc3 7a00 	vstr	s15, [r3]
}
 80050a0:	bf00      	nop
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000388 	.word	0x20000388
 80050a8:	200003b8 	.word	0x200003b8

080050ac <MRT_LPS22HH_getTemperature>:

void MRT_LPS22HH_getTemperature(void){
 80050ac:	b580      	push	{r7, lr}
 80050ae:	af00      	add	r7, sp, #0
	hlps22hh.temperature_degC = lps22hh->getTemperature();
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <MRT_LPS22HH_getTemperature+0x1c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fb49 	bl	800574c <_ZN7LPS22HH14getTemperatureEv>
 80050ba:	eef0 7a40 	vmov.f32	s15, s0
 80050be:	4b03      	ldr	r3, [pc, #12]	; (80050cc <MRT_LPS22HH_getTemperature+0x20>)
 80050c0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80050c4:	bf00      	nop
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000388 	.word	0x20000388
 80050cc:	200003b8 	.word	0x200003b8

080050d0 <MRT_LPS22HH_pollAll>:

void MRT_LPS22HH_pollAll(void){
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
	MRT_LPS22HH_getPressure();
 80050d4:	f7ff ffd8 	bl	8005088 <MRT_LPS22HH_getPressure>
	MRT_LPS22HH_getTemperature();
 80050d8:	f7ff ffe8 	bl	80050ac <MRT_LPS22HH_getTemperature>
}
 80050dc:	bf00      	nop
 80050de:	bd80      	pop	{r7, pc}

080050e0 <MRT_GPS_pollAll>:


//**************************************************//
/*****GPS STATIC FUNCTIONS*****/

void MRT_GPS_pollAll(void){
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
	GPS_Poll(&hgps.latitude, &hgps.longitude, &hgps.time);
 80050e4:	4a03      	ldr	r2, [pc, #12]	; (80050f4 <MRT_GPS_pollAll+0x14>)
 80050e6:	4904      	ldr	r1, [pc, #16]	; (80050f8 <MRT_GPS_pollAll+0x18>)
 80050e8:	4804      	ldr	r0, [pc, #16]	; (80050fc <MRT_GPS_pollAll+0x1c>)
 80050ea:	f000 fb9f 	bl	800582c <GPS_Poll>
}
 80050ee:	bf00      	nop
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	200003d4 	.word	0x200003d4
 80050f8:	200003d0 	.word	0x200003d0
 80050fc:	200003cc 	.word	0x200003cc

08005100 <MRT_LSM6DSR_Init>:


//**************************************************//
/*****PUBLIC STATIC FUNCTIONS*****/

HLSM6DSR MRT_LSM6DSR_Init(void){
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	MRT_LSM6DSR_Constructor();
 8005108:	f7ff ff16 	bl	8004f38 <MRT_LSM6DSR_Constructor>
	HLSM6DSR lsm6dsr_handler;
	lsm6dsr_handler.getAcceleration = &MRT_LSM6DSR_getAcceleration;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a16      	ldr	r2, [pc, #88]	; (8005168 <MRT_LSM6DSR_Init+0x68>)
 8005110:	61da      	str	r2, [r3, #28]
	lsm6dsr_handler.getAngularRate = &MRT_LSM6DSR_getAngularRate;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a15      	ldr	r2, [pc, #84]	; (800516c <MRT_LSM6DSR_Init+0x6c>)
 8005116:	621a      	str	r2, [r3, #32]
	lsm6dsr_handler.getTemperature = &MRT_LSM6DSR_getTemperature;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a15      	ldr	r2, [pc, #84]	; (8005170 <MRT_LSM6DSR_Init+0x70>)
 800511c:	625a      	str	r2, [r3, #36]	; 0x24
	lsm6dsr_handler.pollAll = &MRT_LSM6DSR_pollAll;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a14      	ldr	r2, [pc, #80]	; (8005174 <MRT_LSM6DSR_Init+0x74>)
 8005122:	629a      	str	r2, [r3, #40]	; 0x28

	lsm6dsr_handler.acceleration_mg[0] = 0;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
	lsm6dsr_handler.acceleration_mg[1] = 0;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	605a      	str	r2, [r3, #4]
	lsm6dsr_handler.acceleration_mg[2] = 0;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	609a      	str	r2, [r3, #8]
	lsm6dsr_handler.angular_rate_mdps[0] = 0;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	60da      	str	r2, [r3, #12]
	lsm6dsr_handler.angular_rate_mdps[1] = 0;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	611a      	str	r2, [r3, #16]
	lsm6dsr_handler.angular_rate_mdps[2] = 0;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	615a      	str	r2, [r3, #20]
	lsm6dsr_handler.temperature_degC = 0;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	619a      	str	r2, [r3, #24]
	return lsm6dsr_handler;
 800515c:	bf00      	nop
}
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	08004f89 	.word	0x08004f89
 800516c:	08004fc5 	.word	0x08004fc5
 8005170:	08005001 	.word	0x08005001
 8005174:	08005025 	.word	0x08005025

08005178 <MRT_LPS22HH_Init>:

struct HLPS22HH MRT_LPS22HH_Init(void){
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
	MRT_LPS22HH_Constructor();
 8005180:	f7ff ff5a 	bl	8005038 <MRT_LPS22HH_Constructor>
	struct HLPS22HH lps22hh_handler;
	lps22hh_handler.getPressure = &MRT_LPS22HH_getPressure;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <MRT_LPS22HH_Init+0x38>)
 8005188:	609a      	str	r2, [r3, #8]
	lps22hh_handler.getTemperature = &MRT_LPS22HH_getTemperature;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a09      	ldr	r2, [pc, #36]	; (80051b4 <MRT_LPS22HH_Init+0x3c>)
 800518e:	60da      	str	r2, [r3, #12]
	lps22hh_handler.pollAll = &MRT_LPS22HH_pollAll;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <MRT_LPS22HH_Init+0x40>)
 8005194:	611a      	str	r2, [r3, #16]

	lps22hh_handler.pressure_hPa = 0;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
	lps22hh_handler.temperature_degC = 0;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	605a      	str	r2, [r3, #4]
	return lps22hh_handler;
 80051a6:	bf00      	nop
}
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	08005089 	.word	0x08005089
 80051b4:	080050ad 	.word	0x080050ad
 80051b8:	080050d1 	.word	0x080050d1

080051bc <MRT_GPS_Init>:

struct HGPS MRT_GPS_Init(void){
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	struct HGPS gps_handler;
	gps_handler.pollAll = &MRT_GPS_pollAll;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a0c      	ldr	r2, [pc, #48]	; (80051f8 <MRT_GPS_Init+0x3c>)
 80051c8:	60da      	str	r2, [r3, #12]
	GPS_Init(&GPS_UART, print, tone_freq);
 80051ca:	4a0c      	ldr	r2, [pc, #48]	; (80051fc <MRT_GPS_Init+0x40>)
 80051cc:	490c      	ldr	r1, [pc, #48]	; (8005200 <MRT_GPS_Init+0x44>)
 80051ce:	480d      	ldr	r0, [pc, #52]	; (8005204 <MRT_GPS_Init+0x48>)
 80051d0:	f000 fd8c 	bl	8005cec <GPS_Init>
	gps_handler.latitude = 0;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
	gps_handler.longitude = 0;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	605a      	str	r2, [r3, #4]
	gps_handler.time = 0;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	609a      	str	r2, [r3, #8]
	return gps_handler;
 80051ec:	bf00      	nop
}
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	080050e1 	.word	0x080050e1
 80051fc:	08001075 	.word	0x08001075
 8005200:	08001049 	.word	0x08001049
 8005204:	200063ac 	.word	0x200063ac

08005208 <MRT_i2c_sensors_Init>:

void MRT_i2c_sensors_Init(void){
 8005208:	b5b0      	push	{r4, r5, r7, lr}
 800520a:	b08c      	sub	sp, #48	; 0x30
 800520c:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	HAL_IWDG_Refresh(&hiwdg);
 800520e:	4818      	ldr	r0, [pc, #96]	; (8005270 <MRT_i2c_sensors_Init+0x68>)
 8005210:	f003 ffa2 	bl	8009158 <HAL_IWDG_Refresh>
	hlsm6dsr = MRT_LSM6DSR_Init();
 8005214:	4c17      	ldr	r4, [pc, #92]	; (8005274 <MRT_i2c_sensors_Init+0x6c>)
 8005216:	463b      	mov	r3, r7
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff ff71 	bl	8005100 <MRT_LSM6DSR_Init>
 800521e:	4625      	mov	r5, r4
 8005220:	463c      	mov	r4, r7
 8005222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800522a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800522e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	#endif

	//LPS22HH
	#if LPS22HH_
	HAL_IWDG_Refresh(&hiwdg);
 8005232:	480f      	ldr	r0, [pc, #60]	; (8005270 <MRT_i2c_sensors_Init+0x68>)
 8005234:	f003 ff90 	bl	8009158 <HAL_IWDG_Refresh>
	hlps22hh = MRT_LPS22HH_Init();
 8005238:	4c0f      	ldr	r4, [pc, #60]	; (8005278 <MRT_i2c_sensors_Init+0x70>)
 800523a:	463b      	mov	r3, r7
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff ff9b 	bl	8005178 <MRT_LPS22HH_Init>
 8005242:	4625      	mov	r5, r4
 8005244:	463c      	mov	r4, r7
 8005246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	602b      	str	r3, [r5, #0]
	#endif

	//GPS
	#if GPS_
	HAL_IWDG_Refresh(&hiwdg);
 800524e:	4808      	ldr	r0, [pc, #32]	; (8005270 <MRT_i2c_sensors_Init+0x68>)
 8005250:	f003 ff82 	bl	8009158 <HAL_IWDG_Refresh>
	hgps = MRT_GPS_Init();
 8005254:	4c09      	ldr	r4, [pc, #36]	; (800527c <MRT_i2c_sensors_Init+0x74>)
 8005256:	463b      	mov	r3, r7
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ffaf 	bl	80051bc <MRT_GPS_Init>
 800525e:	463b      	mov	r3, r7
 8005260:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005262:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	#endif

}
 8005266:	bf00      	nop
 8005268:	3730      	adds	r7, #48	; 0x30
 800526a:	46bd      	mov	sp, r7
 800526c:	bdb0      	pop	{r4, r5, r7, pc}
 800526e:	bf00      	nop
 8005270:	20006160 	.word	0x20006160
 8005274:	2000038c 	.word	0x2000038c
 8005278:	200003b8 	.word	0x200003b8
 800527c:	200003cc 	.word	0x200003cc

08005280 <MRT_i2c_sensors_Deinit>:


void MRT_i2c_sensors_Deinit(void){
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0

	//LSM6DSR
	#if LSM6DSR_
	MRT_LSM6DSR_Destructor();
 8005284:	f7ff fe70 	bl	8004f68 <MRT_LSM6DSR_Destructor>
	#endif

	//LPS22HH
	#if LPS22HH_
	MRT_LPS22HH_Destructor();
 8005288:	f7ff feee 	bl	8005068 <MRT_LPS22HH_Destructor>
	#endif

	//GPS
	//NO DEINIT NEEDED HERE
}
 800528c:	bf00      	nop
 800528e:	bd80      	pop	{r7, pc}

08005290 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh>:


//**************************************************//
/*****LSM6DSR*****/

LSM6DSR::LSM6DSR(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	4613      	mov	r3, r2
 800529c:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLSM6DSR Init");
 800529e:	4846      	ldr	r0, [pc, #280]	; (80053b8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x128>)
 80052a0:	f7fb feb4 	bl	800100c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4a45      	ldr	r2, [pc, #276]	; (80053bc <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x12c>)
 80052a8:	61da      	str	r2, [r3, #28]
	ctx.read_reg = read;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4a44      	ldr	r2, [pc, #272]	; (80053c0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x130>)
 80052ae:	621a      	str	r2, [r3, #32]
	ctx.handle = i2c_bus;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait sensor boot time */
	HAL_Delay(LSM6DSR_BOOT_TIME);
 80052b6:	2064      	movs	r0, #100	; 0x64
 80052b8:	f001 ff5e 	bl	8007178 <HAL_Delay>
	/* Check device ID */
	lsm6dsr_device_id_get(&ctx, &whoamI);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f103 021c 	add.w	r2, r3, #28
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3338      	adds	r3, #56	; 0x38
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f001 fae5 	bl	8006898 <lsm6dsr_device_id_get>

	print((char*) "\tChecking Sensor ID...");
 80052ce:	483d      	ldr	r0, [pc, #244]	; (80053c4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x134>)
 80052d0:	f7fb feba 	bl	8001048 <print>
	if (whoamI != address){
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052da:	79fa      	ldrb	r2, [r7, #7]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d014      	beq.n	800530a <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x7a>
	  println((char*) "NOT OK");
 80052e0:	4839      	ldr	r0, [pc, #228]	; (80053c8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x138>)
 80052e2:	f7fb fe93 	bl	800100c <println>
	  print((char*) "\tThis Device is: ");
 80052e6:	4839      	ldr	r0, [pc, #228]	; (80053cc <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x13c>)
 80052e8:	f7fb feae 	bl	8001048 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052f2:	461a      	mov	r2, r3
 80052f4:	f107 0314 	add.w	r3, r7, #20
 80052f8:	4935      	ldr	r1, [pc, #212]	; (80053d0 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x140>)
 80052fa:	4618      	mov	r0, r3
 80052fc:	f00d f8b4 	bl	8012468 <siprintf>
	  print(buffer);
 8005300:	f107 0314 	add.w	r3, r7, #20
 8005304:	4618      	mov	r0, r3
 8005306:	f7fb fe9f 	bl	8001048 <print>
		HAL_PWR_EnterSTANDBYMode();
		*/


	}
	println((char*) "OK");
 800530a:	4832      	ldr	r0, [pc, #200]	; (80053d4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 800530c:	f7fb fe7e 	bl	800100c <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8005310:	4831      	ldr	r0, [pc, #196]	; (80053d8 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x148>)
 8005312:	f7fb fe99 	bl	8001048 <print>
	lsm6dsr_reset_set(&ctx, PROPERTY_ENABLE);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	331c      	adds	r3, #28
 800531a:	2101      	movs	r1, #1
 800531c:	4618      	mov	r0, r3
 800531e:	f001 facc 	bl	80068ba <lsm6dsr_reset_set>
	HAL_Delay(500);
 8005322:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005326:	f001 ff27 	bl	8007178 <HAL_Delay>
	do {
	lsm6dsr_reset_get(&ctx, &rst);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f103 021c 	add.w	r2, r3, #28
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3339      	adds	r3, #57	; 0x39
 8005334:	4619      	mov	r1, r3
 8005336:	4610      	mov	r0, r2
 8005338:	f001 fae5 	bl	8006906 <lsm6dsr_reset_get>
	} while (rst);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005342:	2b00      	cmp	r3, #0
 8005344:	d000      	beq.n	8005348 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0xb8>
	do {
 8005346:	e7f0      	b.n	800532a <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x9a>
	println((char*) "OK");
 8005348:	4822      	ldr	r0, [pc, #136]	; (80053d4 <_ZN7LSM6DSRC1EP17I2C_HandleTypeDefh+0x144>)
 800534a:	f7fb fe5f 	bl	800100c <println>

	/* Disable I3C interface */
    lsm6dsr_i3c_disable_set(&ctx, LSM6DSR_I3C_DISABLE);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	331c      	adds	r3, #28
 8005352:	2180      	movs	r1, #128	; 0x80
 8005354:	4618      	mov	r0, r3
 8005356:	f001 fb4d 	bl	80069f4 <lsm6dsr_i3c_disable_set>

	/* Enable Block Data Update */
	lsm6dsr_block_data_update_set(&ctx, PROPERTY_ENABLE);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	331c      	adds	r3, #28
 800535e:	2101      	movs	r1, #1
 8005360:	4618      	mov	r0, r3
 8005362:	f001 f949 	bl	80065f8 <lsm6dsr_block_data_update_set>
	/* Set Output Data Rate */
	lsm6dsr_xl_data_rate_set(&ctx, LSM6DSR_XL_ODR_12Hz5);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	331c      	adds	r3, #28
 800536a:	2101      	movs	r1, #1
 800536c:	4618      	mov	r0, r3
 800536e:	f000 ff25 	bl	80061bc <lsm6dsr_xl_data_rate_set>
	lsm6dsr_gy_data_rate_set(&ctx, LSM6DSR_GY_ODR_12Hz5);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	331c      	adds	r3, #28
 8005376:	2101      	movs	r1, #1
 8005378:	4618      	mov	r0, r3
 800537a:	f001 f841 	bl	8006400 <lsm6dsr_gy_data_rate_set>
	/* Set full scale */
	lsm6dsr_xl_full_scale_set(&ctx, LSM6DSR_2g);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	331c      	adds	r3, #28
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fef3 	bl	8006170 <lsm6dsr_xl_full_scale_set>
	lsm6dsr_gy_full_scale_set(&ctx, LSM6DSR_2000dps);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	331c      	adds	r3, #28
 800538e:	210c      	movs	r1, #12
 8005390:	4618      	mov	r0, r3
 8005392:	f001 f80f 	bl	80063b4 <lsm6dsr_gy_full_scale_set>
	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsr_xl_hp_path_on_out_set(&ctx, LSM6DSR_LP_ODR_DIV_100);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	331c      	adds	r3, #28
 800539a:	2104      	movs	r1, #4
 800539c:	4618      	mov	r0, r3
 800539e:	f001 faf1 	bl	8006984 <lsm6dsr_xl_hp_path_on_out_set>
	lsm6dsr_xl_filter_lp2_set(&ctx, PROPERTY_ENABLE);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	331c      	adds	r3, #28
 80053a6:	2101      	movs	r1, #1
 80053a8:	4618      	mov	r0, r3
 80053aa:	f001 fac5 	bl	8006938 <lsm6dsr_xl_filter_lp2_set>
}
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4618      	mov	r0, r3
 80053b2:	3720      	adds	r7, #32
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	08017258 	.word	0x08017258
 80053bc:	0800556b 	.word	0x0800556b
 80053c0:	080055a5 	.word	0x080055a5
 80053c4:	08017268 	.word	0x08017268
 80053c8:	08017280 	.word	0x08017280
 80053cc:	08017288 	.word	0x08017288
 80053d0:	0801729c 	.word	0x0801729c
 80053d4:	080172a4 	.word	0x080172a4
 80053d8:	080172a8 	.word	0x080172a8

080053dc <_ZN7LSM6DSR15getAccelerationEv>:


float* LSM6DSR::getAcceleration(void){
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	lsm6dsr_xl_flag_data_ready_get(&ctx, &reg);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f103 021c 	add.w	r2, r3, #28
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3328      	adds	r3, #40	; 0x28
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f001 f927 	bl	8006644 <lsm6dsr_xl_flag_data_ready_get>

	if (reg){
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d030      	beq.n	8005462 <_ZN7LSM6DSR15getAccelerationEv+0x86>
		// Read magnetic field data
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	332a      	adds	r3, #42	; 0x2a
 8005404:	2206      	movs	r2, #6
 8005406:	2100      	movs	r1, #0
 8005408:	4618      	mov	r0, r3
 800540a:	f00b ffaf 	bl	801136c <memset>
		lsm6dsr_acceleration_raw_get(&ctx, data_raw_acceleration);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f103 021c 	add.w	r2, r3, #28
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	332a      	adds	r3, #42	; 0x2a
 8005418:	4619      	mov	r1, r3
 800541a:	4610      	mov	r0, r2
 800541c:	f001 f9cb 	bl	80067b6 <lsm6dsr_acceleration_raw_get>
		acceleration_mg[0] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[0]);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fe56 	bl	80060d8 <lsm6dsr_from_fs2g_to_mg>
 800542c:	eef0 7a40 	vmov.f32	s15, s0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	edc3 7a00 	vstr	s15, [r3]
		acceleration_mg[1] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[1]);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fe4b 	bl	80060d8 <lsm6dsr_from_fs2g_to_mg>
 8005442:	eef0 7a40 	vmov.f32	s15, s0
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	edc3 7a01 	vstr	s15, [r3, #4]
		acceleration_mg[2] = lsm6dsr_from_fs2g_to_mg(data_raw_acceleration[2]);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fe40 	bl	80060d8 <lsm6dsr_from_fs2g_to_mg>
 8005458:	eef0 7a40 	vmov.f32	s15, s0
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	return acceleration_mg;
 8005462:	687b      	ldr	r3, [r7, #4]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <_ZN7LSM6DSR14getTemperatureEv>:


float LSM6DSR::getTemperature(void){
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
    lsm6dsr_temp_flag_data_ready_get(&ctx, &reg);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f103 021c 	add.w	r2, r3, #28
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	3328      	adds	r3, #40	; 0x28
 800547e:	4619      	mov	r1, r3
 8005480:	4610      	mov	r0, r2
 8005482:	f001 f911 	bl	80066a8 <lsm6dsr_temp_flag_data_ready_get>

    if (reg){
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01a      	beq.n	80054c6 <_ZN7LSM6DSR14getTemperatureEv+0x5a>
		// Read temperature data
		memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3336      	adds	r3, #54	; 0x36
 8005494:	2202      	movs	r2, #2
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f00b ff67 	bl	801136c <memset>
		lsm6dsr_temperature_raw_get(&ctx, &data_raw_temperature);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f103 021c 	add.w	r2, r3, #28
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3336      	adds	r3, #54	; 0x36
 80054a8:	4619      	mov	r1, r3
 80054aa:	4610      	mov	r0, r2
 80054ac:	f001 f915 	bl	80066da <lsm6dsr_temperature_raw_get>
		temperature_degC = lsm6dsr_from_lsb_to_celsius(data_raw_temperature);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fe3e 	bl	8006138 <lsm6dsr_from_lsb_to_celsius>
 80054bc:	eef0 7a40 	vmov.f32	s15, s0
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	edc3 7a06 	vstr	s15, [r3, #24]
	}
    return temperature_degC;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	ee07 3a90 	vmov	s15, r3
}
 80054ce:	eeb0 0a67 	vmov.f32	s0, s15
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <_ZN7LSM6DSR14getAngularRateEv>:


float* LSM6DSR::getAngularRate(void){
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
    lsm6dsr_gy_flag_data_ready_get(&ctx, &reg);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f103 021c 	add.w	r2, r3, #28
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3328      	adds	r3, #40	; 0x28
 80054ea:	4619      	mov	r1, r3
 80054ec:	4610      	mov	r0, r2
 80054ee:	f001 f8c2 	bl	8006676 <lsm6dsr_gy_flag_data_ready_get>

    if (reg){
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d030      	beq.n	800555e <_ZN7LSM6DSR14getAngularRateEv+0x86>
		// Read magnetic field data
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3330      	adds	r3, #48	; 0x30
 8005500:	2206      	movs	r2, #6
 8005502:	2100      	movs	r1, #0
 8005504:	4618      	mov	r0, r3
 8005506:	f00b ff31 	bl	801136c <memset>
		lsm6dsr_angular_rate_raw_get(&ctx, data_raw_angular_rate);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f103 021c 	add.w	r2, r3, #28
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3330      	adds	r3, #48	; 0x30
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f001 f902 	bl	8006720 <lsm6dsr_angular_rate_raw_get>
		angular_rate_mdps[0] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fdf0 	bl	8006108 <lsm6dsr_from_fs2000dps_to_mdps>
 8005528:	eef0 7a40 	vmov.f32	s15, s0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	edc3 7a03 	vstr	s15, [r3, #12]
		angular_rate_mdps[1] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fde5 	bl	8006108 <lsm6dsr_from_fs2000dps_to_mdps>
 800553e:	eef0 7a40 	vmov.f32	s15, s0
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	edc3 7a04 	vstr	s15, [r3, #16]
		angular_rate_mdps[2] = lsm6dsr_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800554e:	4618      	mov	r0, r3
 8005550:	f000 fdda 	bl	8006108 <lsm6dsr_from_fs2000dps_to_mdps>
 8005554:	eef0 7a40 	vmov.f32	s15, s0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	edc3 7a05 	vstr	s15, [r3, #20]
		fs500dps_to_mdps
		fs1000dps_to_mdps
		fs2000dps_to_mdps
		*/
	}
    return angular_rate_mdps;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	330c      	adds	r3, #12
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <_ZN7LSM6DSR5writeEPvhPKht>:


int32_t LSM6DSR::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800556a:	b580      	push	{r7, lr}
 800556c:	b088      	sub	sp, #32
 800556e:	af04      	add	r7, sp, #16
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	461a      	mov	r2, r3
 8005576:	460b      	mov	r3, r1
 8005578:	72fb      	strb	r3, [r7, #11]
 800557a:	4613      	mov	r3, r2
 800557c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800557e:	7afb      	ldrb	r3, [r7, #11]
 8005580:	b29a      	uxth	r2, r3
 8005582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005586:	9302      	str	r3, [sp, #8]
 8005588:	893b      	ldrh	r3, [r7, #8]
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	2301      	movs	r3, #1
 8005592:	21d5      	movs	r1, #213	; 0xd5
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f002 fe71 	bl	800827c <HAL_I2C_Mem_Write>
  return 0;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <_ZN7LSM6DSR4readEPvhPht>:

int32_t LSM6DSR::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b088      	sub	sp, #32
 80055a8:	af04      	add	r7, sp, #16
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	461a      	mov	r2, r3
 80055b0:	460b      	mov	r3, r1
 80055b2:	72fb      	strb	r3, [r7, #11]
 80055b4:	4613      	mov	r3, r2
 80055b6:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LSM6DSR_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80055b8:	7afb      	ldrb	r3, [r7, #11]
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055c0:	9302      	str	r3, [sp, #8]
 80055c2:	893b      	ldrh	r3, [r7, #8]
 80055c4:	9301      	str	r3, [sp, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	2301      	movs	r3, #1
 80055cc:	21d5      	movs	r1, #213	; 0xd5
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f002 ff4e 	bl	8008470 <HAL_I2C_Mem_Read>
  return 0;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh>:

//**************************************************//
/*****LPS22HH*****/


LPS22HH::LPS22HH(I2C_HandleTypeDef* i2c_bus, uint8_t address){
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b088      	sub	sp, #32
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	4613      	mov	r3, r2
 80055ec:	71fb      	strb	r3, [r7, #7]
	println((char*) "\r\nLPS22HH Init");
 80055ee:	4834      	ldr	r0, [pc, #208]	; (80056c0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe0>)
 80055f0:	f7fb fd0c 	bl	800100c <println>

	/* Initialize mems driver interface */
	ctx.write_reg = write;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4a33      	ldr	r2, [pc, #204]	; (80056c4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe4>)
 80055f8:	609a      	str	r2, [r3, #8]
	ctx.read_reg = read;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a32      	ldr	r2, [pc, #200]	; (80056c8 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xe8>)
 80055fe:	60da      	str	r2, [r3, #12]
	ctx.handle = i2c_bus;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	611a      	str	r2, [r3, #16]
	/* Wait sensor boot time */
	HAL_Delay(LPS22HH_BOOT_TIME);
 8005606:	2064      	movs	r0, #100	; 0x64
 8005608:	f001 fdb6 	bl	8007178 <HAL_Delay>
	/* Check device ID */
	whoamI = 0;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	779a      	strb	r2, [r3, #30]
	lps22hh_device_id_get(&ctx, &whoamI);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f103 0208 	add.w	r2, r3, #8
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	331e      	adds	r3, #30
 800561c:	4619      	mov	r1, r3
 800561e:	4610      	mov	r0, r2
 8005620:	f000 fcda 	bl	8005fd8 <lps22hh_device_id_get>


	print((char*) "\tChecking Sensor ID...");
 8005624:	4829      	ldr	r0, [pc, #164]	; (80056cc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xec>)
 8005626:	f7fb fd0f 	bl	8001048 <print>
	if ( whoamI != address ){
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	7f9b      	ldrb	r3, [r3, #30]
 800562e:	79fa      	ldrb	r2, [r7, #7]
 8005630:	429a      	cmp	r2, r3
 8005632:	d013      	beq.n	800565c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x7c>
	  println((char*) "NOT OK");
 8005634:	4826      	ldr	r0, [pc, #152]	; (80056d0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf0>)
 8005636:	f7fb fce9 	bl	800100c <println>
	  print((char*) "\tThis Device is: ");
 800563a:	4826      	ldr	r0, [pc, #152]	; (80056d4 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf4>)
 800563c:	f7fb fd04 	bl	8001048 <print>

	  char buffer[10];
	  sprintf(buffer, "%X\r\n", whoamI);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	7f9b      	ldrb	r3, [r3, #30]
 8005644:	461a      	mov	r2, r3
 8005646:	f107 0314 	add.w	r3, r7, #20
 800564a:	4923      	ldr	r1, [pc, #140]	; (80056d8 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xf8>)
 800564c:	4618      	mov	r0, r3
 800564e:	f00c ff0b 	bl	8012468 <siprintf>
	  print(buffer);
 8005652:	f107 0314 	add.w	r3, r7, #20
 8005656:	4618      	mov	r0, r3
 8005658:	f7fb fcf6 	bl	8001048 <print>
		MRT_clear_alarms_flags();
		HAL_PWR_EnterSTANDBYMode();
		*/

	}
	println((char*) "OK");
 800565c:	481f      	ldr	r0, [pc, #124]	; (80056dc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 800565e:	f7fb fcd5 	bl	800100c <println>

	/* Restore default configuration */
	print((char*) "\tRestore default configuration...");
 8005662:	481f      	ldr	r0, [pc, #124]	; (80056e0 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x100>)
 8005664:	f7fb fcf0 	bl	8001048 <print>
	lps22hh_reset_set(&ctx, PROPERTY_ENABLE);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3308      	adds	r3, #8
 800566c:	2101      	movs	r1, #1
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fcc3 	bl	8005ffa <lps22hh_reset_set>
	HAL_Delay(500);
 8005674:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005678:	f001 fd7e 	bl	8007178 <HAL_Delay>
	do {
	lps22hh_reset_get(&ctx, &rst);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f103 0208 	add.w	r2, r3, #8
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	331f      	adds	r3, #31
 8005686:	4619      	mov	r1, r3
 8005688:	4610      	mov	r0, r2
 800568a:	f000 fcdc 	bl	8006046 <lps22hh_reset_get>
	} while (rst);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	7fdb      	ldrb	r3, [r3, #31]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d000      	beq.n	8005698 <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xb8>
	do {
 8005696:	e7f1      	b.n	800567c <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0x9c>
	println((char*) "OK");
 8005698:	4810      	ldr	r0, [pc, #64]	; (80056dc <_ZN7LPS22HHC1EP17I2C_HandleTypeDefh+0xfc>)
 800569a:	f7fb fcb7 	bl	800100c <println>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&ctx, PROPERTY_ENABLE);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3308      	adds	r3, #8
 80056a2:	2101      	movs	r1, #1
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fba5 	bl	8005df4 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&ctx, LPS22HH_75_Hz_LOW_NOISE);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	3308      	adds	r3, #8
 80056ae:	2115      	movs	r1, #21
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fbc5 	bl	8005e40 <lps22hh_data_rate_set>
}
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4618      	mov	r0, r3
 80056ba:	3720      	adds	r7, #32
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	080172cc 	.word	0x080172cc
 80056c4:	080057b7 	.word	0x080057b7
 80056c8:	080057f1 	.word	0x080057f1
 80056cc:	08017268 	.word	0x08017268
 80056d0:	08017280 	.word	0x08017280
 80056d4:	08017288 	.word	0x08017288
 80056d8:	0801729c 	.word	0x0801729c
 80056dc:	080172a4 	.word	0x080172a4
 80056e0:	080172a8 	.word	0x080172a8

080056e4 <_ZN7LPS22HH11getPressureEv>:



float LPS22HH::getPressure(void){
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_press_flag_data_ready_get(&ctx, &reg);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f103 0208 	add.w	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3314      	adds	r3, #20
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f000 fbef 	bl	8005edc <lps22hh_press_flag_data_ready_get>

	if (reg) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	7d1b      	ldrb	r3, [r3, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d019      	beq.n	800573a <_ZN7LPS22HH11getPressureEv+0x56>
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3318      	adds	r3, #24
 800570a:	2204      	movs	r2, #4
 800570c:	2100      	movs	r1, #0
 800570e:	4618      	mov	r0, r3
 8005710:	f00b fe2c 	bl	801136c <memset>
	  lps22hh_pressure_raw_get(&ctx, &data_raw_pressure);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f103 0208 	add.w	r2, r3, #8
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3318      	adds	r3, #24
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f000 fc0d 	bl	8005f40 <lps22hh_pressure_raw_get>
	  pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fb30 	bl	8005d90 <lps22hh_from_lsb_to_hpa>
 8005730:	eef0 7a40 	vmov.f32	s15, s0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	edc3 7a00 	vstr	s15, [r3]
	}
	return pressure_hPa;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	ee07 3a90 	vmov	s15, r3
}
 8005742:	eeb0 0a67 	vmov.f32	s0, s15
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <_ZN7LPS22HH14getTemperatureEv>:


float LPS22HH::getTemperature(void){
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	/* Read output only if new value is available */
	lps22hh_temp_flag_data_ready_get(&ctx, &reg);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f103 0208 	add.w	r2, r3, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3314      	adds	r3, #20
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f000 fbd4 	bl	8005f0e <lps22hh_temp_flag_data_ready_get>

	if (reg) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7d1b      	ldrb	r3, [r3, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01a      	beq.n	80057a4 <_ZN7LPS22HH14getTemperatureEv+0x58>
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	331c      	adds	r3, #28
 8005772:	2202      	movs	r2, #2
 8005774:	2100      	movs	r1, #0
 8005776:	4618      	mov	r0, r3
 8005778:	f00b fdf8 	bl	801136c <memset>
	  lps22hh_temperature_raw_get(&ctx, &data_raw_temperature);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f103 0208 	add.w	r2, r3, #8
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	331c      	adds	r3, #28
 8005786:	4619      	mov	r1, r3
 8005788:	4610      	mov	r0, r2
 800578a:	f000 fc02 	bl	8005f92 <lps22hh_temperature_raw_get>
	  temperature_degC = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fb13 	bl	8005dc0 <lps22hh_from_lsb_to_celsius>
 800579a:	eef0 7a40 	vmov.f32	s15, s0
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	return temperature_degC;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	ee07 3a90 	vmov	s15, r3
}
 80057ac:	eeb0 0a67 	vmov.f32	s0, s15
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <_ZN7LPS22HH5writeEPvhPKht>:



int32_t LPS22HH::write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b088      	sub	sp, #32
 80057ba:	af04      	add	r7, sp, #16
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	461a      	mov	r2, r3
 80057c2:	460b      	mov	r3, r1
 80057c4:	72fb      	strb	r3, [r7, #11]
 80057c6:	4613      	mov	r3, r2
 80057c8:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80057ca:	7afb      	ldrb	r3, [r7, #11]
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057d2:	9302      	str	r3, [sp, #8]
 80057d4:	893b      	ldrh	r3, [r7, #8]
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	2301      	movs	r3, #1
 80057de:	21b9      	movs	r1, #185	; 0xb9
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f002 fd4b 	bl	800827c <HAL_I2C_Mem_Write>
  return 0;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <_ZN7LPS22HH4readEPvhPht>:

int32_t LPS22HH::read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af04      	add	r7, sp, #16
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	461a      	mov	r2, r3
 80057fc:	460b      	mov	r3, r1
 80057fe:	72fb      	strb	r3, [r7, #11]
 8005800:	4613      	mov	r3, r2
 8005802:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle, LPS22HH_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8005804:	7afb      	ldrb	r3, [r7, #11]
 8005806:	b29a      	uxth	r2, r3
 8005808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800580c:	9302      	str	r3, [sp, #8]
 800580e:	893b      	ldrh	r3, [r7, #8]
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	2301      	movs	r3, #1
 8005818:	21b9      	movs	r1, #185	; 0xb9
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f002 fe28 	bl	8008470 <HAL_I2C_Mem_Read>
  return 0;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <GPS_Poll>:
#define LED3_GPIO_Port	((GPIO_TypeDef *) ((0x40000000UL + 0x00020000UL) + 0x0800UL))//OUT_LED3_GPIO_Port
#define LED3_Pin	(uint16_t)0x0008//OUT_LED3_Pin


void GPS_Poll(float *latitude, float *longitude, float *time)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08c      	sub	sp, #48	; 0x30
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
	uint16_t max_loop_count = 100;
 8005838:	2364      	movs	r3, #100	; 0x64
 800583a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t loop_count = 0;
 800583c:	2300      	movs	r3, #0
 800583e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int done = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
	while(loop_count < max_loop_count && !done){
 8005844:	e073      	b.n	800592e <GPS_Poll+0x102>
		HAL_UART_Receive(GPS.uart, (uint8_t*)&rx_current, 1, 100);
 8005846:	4b3f      	ldr	r3, [pc, #252]	; (8005944 <GPS_Poll+0x118>)
 8005848:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800584a:	2364      	movs	r3, #100	; 0x64
 800584c:	2201      	movs	r2, #1
 800584e:	493e      	ldr	r1, [pc, #248]	; (8005948 <GPS_Poll+0x11c>)
 8005850:	f007 f8dd 	bl	800ca0e <HAL_UART_Receive>
		//HAL_UART_Transmit(&huart1, (uint8_t*)&rx_current, 1, 100);
		if (rx_current != '\n' && rx_index < sizeof(rx_buffer)) {
 8005854:	4b3c      	ldr	r3, [pc, #240]	; (8005948 <GPS_Poll+0x11c>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b0a      	cmp	r3, #10
 800585a:	d00f      	beq.n	800587c <GPS_Poll+0x50>
 800585c:	4b3b      	ldr	r3, [pc, #236]	; (800594c <GPS_Poll+0x120>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b63      	cmp	r3, #99	; 0x63
 8005862:	d80b      	bhi.n	800587c <GPS_Poll+0x50>
			rx_buffer[rx_index++] = rx_current;
 8005864:	4b39      	ldr	r3, [pc, #228]	; (800594c <GPS_Poll+0x120>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	b2d1      	uxtb	r1, r2
 800586c:	4a37      	ldr	r2, [pc, #220]	; (800594c <GPS_Poll+0x120>)
 800586e:	7011      	strb	r1, [r2, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	4b35      	ldr	r3, [pc, #212]	; (8005948 <GPS_Poll+0x11c>)
 8005874:	7819      	ldrb	r1, [r3, #0]
 8005876:	4b36      	ldr	r3, [pc, #216]	; (8005950 <GPS_Poll+0x124>)
 8005878:	5499      	strb	r1, [r3, r2]
 800587a:	e021      	b.n	80058c0 <GPS_Poll+0x94>
		} else {
			if(GPS_validate((char*) rx_buffer)){
 800587c:	4834      	ldr	r0, [pc, #208]	; (8005950 <GPS_Poll+0x124>)
 800587e:	f000 f869 	bl	8005954 <GPS_validate>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d013      	beq.n	80058b0 <GPS_Poll+0x84>
				if(GPS_parse((char*) rx_buffer)){
 8005888:	4831      	ldr	r0, [pc, #196]	; (8005950 <GPS_Poll+0x124>)
 800588a:	f000 f8c5 	bl	8005a18 <GPS_parse>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00d      	beq.n	80058b0 <GPS_Poll+0x84>
					*latitude = GPS.dec_latitude;
 8005894:	4b2b      	ldr	r3, [pc, #172]	; (8005944 <GPS_Poll+0x118>)
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]
					*longitude = GPS.dec_longitude;
 800589c:	4b29      	ldr	r3, [pc, #164]	; (8005944 <GPS_Poll+0x118>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	601a      	str	r2, [r3, #0]
					*time = GPS.utc_time;
 80058a4:	4b27      	ldr	r3, [pc, #156]	; (8005944 <GPS_Poll+0x118>)
 80058a6:	695a      	ldr	r2, [r3, #20]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	601a      	str	r2, [r3, #0]
					done = 1;
 80058ac:	2301      	movs	r3, #1
 80058ae:	62bb      	str	r3, [r7, #40]	; 0x28
				}
			}
			rx_index = 0;
 80058b0:	4b26      	ldr	r3, [pc, #152]	; (800594c <GPS_Poll+0x120>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	701a      	strb	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 80058b6:	2264      	movs	r2, #100	; 0x64
 80058b8:	2100      	movs	r1, #0
 80058ba:	4825      	ldr	r0, [pc, #148]	; (8005950 <GPS_Poll+0x124>)
 80058bc:	f00b fd56 	bl	801136c <memset>
		}

		// f437 usart doesnt have these flags in hardware, use software to clear the flags
		// (check docstring for __HAL_UART_CLEAR_FLAG function)
		__HAL_UART_CLEAR_OREFLAG(GPS.uart);
 80058c0:	2300      	movs	r3, #0
 80058c2:	623b      	str	r3, [r7, #32]
 80058c4:	4b1f      	ldr	r3, [pc, #124]	; (8005944 <GPS_Poll+0x118>)
 80058c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	623b      	str	r3, [r7, #32]
 80058ce:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <GPS_Poll+0x118>)
 80058d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	623b      	str	r3, [r7, #32]
 80058d8:	6a3b      	ldr	r3, [r7, #32]
		__HAL_UART_CLEAR_NEFLAG(GPS.uart);
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
 80058de:	4b19      	ldr	r3, [pc, #100]	; (8005944 <GPS_Poll+0x118>)
 80058e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	4b16      	ldr	r3, [pc, #88]	; (8005944 <GPS_Poll+0x118>)
 80058ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	61fb      	str	r3, [r7, #28]
 80058f2:	69fb      	ldr	r3, [r7, #28]
		__HAL_UART_CLEAR_PEFLAG(GPS.uart);
 80058f4:	2300      	movs	r3, #0
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	4b12      	ldr	r3, [pc, #72]	; (8005944 <GPS_Poll+0x118>)
 80058fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	4b10      	ldr	r3, [pc, #64]	; (8005944 <GPS_Poll+0x118>)
 8005904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	61bb      	str	r3, [r7, #24]
 800590c:	69bb      	ldr	r3, [r7, #24]
		__HAL_UART_CLEAR_FEFLAG(GPS.uart);
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <GPS_Poll+0x118>)
 8005914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	4b09      	ldr	r3, [pc, #36]	; (8005944 <GPS_Poll+0x118>)
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	697b      	ldr	r3, [r7, #20]

		loop_count++;
 8005928:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800592a:	3301      	adds	r3, #1
 800592c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	while(loop_count < max_loop_count && !done){
 800592e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005930:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005932:	429a      	cmp	r2, r3
 8005934:	d202      	bcs.n	800593c <GPS_Poll+0x110>
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	2b00      	cmp	r3, #0
 800593a:	d084      	beq.n	8005846 <GPS_Poll+0x1a>
	}
}
 800593c:	bf00      	nop
 800593e:	3730      	adds	r7, #48	; 0x30
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	20006534 	.word	0x20006534
 8005948:	200003dc 	.word	0x200003dc
 800594c:	200003dd 	.word	0x200003dd
 8005950:	20006598 	.word	0x20006598

08005954 <GPS_validate>:

int GPS_validate(char *nmeastr){
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	2b24      	cmp	r3, #36	; 0x24
 800596e:	d103      	bne.n	8005978 <GPS_validate+0x24>
        i++;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	3301      	adds	r3, #1
 8005974:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8005976:	e00c      	b.n	8005992 <GPS_validate+0x3e>
        return 0;
 8005978:	2300      	movs	r3, #0
 800597a:	e047      	b.n	8005a0c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	4413      	add	r3, r2
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4053      	eors	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
        i++;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	3301      	adds	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d008      	beq.n	80059b0 <GPS_validate+0x5c>
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	4413      	add	r3, r2
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b2a      	cmp	r3, #42	; 0x2a
 80059a8:	d002      	beq.n	80059b0 <GPS_validate+0x5c>
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b4a      	cmp	r3, #74	; 0x4a
 80059ae:	dde5      	ble.n	800597c <GPS_validate+0x28>
    }

    if(i >= 75){
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2b4a      	cmp	r3, #74	; 0x4a
 80059b4:	dd01      	ble.n	80059ba <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80059b6:	2300      	movs	r3, #0
 80059b8:	e028      	b.n	8005a0c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4413      	add	r3, r2
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b2a      	cmp	r3, #42	; 0x2a
 80059c4:	d119      	bne.n	80059fa <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	3301      	adds	r3, #1
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	4413      	add	r3, r2
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	3302      	adds	r3, #2
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4413      	add	r3, r2
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80059e2:	f107 0308 	add.w	r3, r7, #8
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	490a      	ldr	r1, [pc, #40]	; (8005a14 <GPS_validate+0xc0>)
 80059ea:	4618      	mov	r0, r3
 80059ec:	f00c fd3c 	bl	8012468 <siprintf>
    return((checkcalcstr[0] == check[0])
 80059f0:	7a3a      	ldrb	r2, [r7, #8]
 80059f2:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d108      	bne.n	8005a0a <GPS_validate+0xb6>
 80059f8:	e001      	b.n	80059fe <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 80059fa:	2300      	movs	r3, #0
 80059fc:	e006      	b.n	8005a0c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 80059fe:	7a7a      	ldrb	r2, [r7, #9]
 8005a00:	7b7b      	ldrb	r3, [r7, #13]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d101      	bne.n	8005a0a <GPS_validate+0xb6>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <GPS_validate+0xb8>
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	080172dc 	.word	0x080172dc

08005a18 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	; 0x28
 8005a1c:	af08      	add	r7, sp, #32
 8005a1e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8005a20:	2206      	movs	r2, #6
 8005a22:	496d      	ldr	r1, [pc, #436]	; (8005bd8 <GPS_parse+0x1c0>)
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f00c fdb0 	bl	801258a <strncmp>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d139      	bne.n	8005aa4 <GPS_parse+0x8c>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8005a30:	4b6a      	ldr	r3, [pc, #424]	; (8005bdc <GPS_parse+0x1c4>)
 8005a32:	9307      	str	r3, [sp, #28]
 8005a34:	4b6a      	ldr	r3, [pc, #424]	; (8005be0 <GPS_parse+0x1c8>)
 8005a36:	9306      	str	r3, [sp, #24]
 8005a38:	4b6a      	ldr	r3, [pc, #424]	; (8005be4 <GPS_parse+0x1cc>)
 8005a3a:	9305      	str	r3, [sp, #20]
 8005a3c:	4b6a      	ldr	r3, [pc, #424]	; (8005be8 <GPS_parse+0x1d0>)
 8005a3e:	9304      	str	r3, [sp, #16]
 8005a40:	4b6a      	ldr	r3, [pc, #424]	; (8005bec <GPS_parse+0x1d4>)
 8005a42:	9303      	str	r3, [sp, #12]
 8005a44:	4b6a      	ldr	r3, [pc, #424]	; (8005bf0 <GPS_parse+0x1d8>)
 8005a46:	9302      	str	r3, [sp, #8]
 8005a48:	4b6a      	ldr	r3, [pc, #424]	; (8005bf4 <GPS_parse+0x1dc>)
 8005a4a:	9301      	str	r3, [sp, #4]
 8005a4c:	4b6a      	ldr	r3, [pc, #424]	; (8005bf8 <GPS_parse+0x1e0>)
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	4b6a      	ldr	r3, [pc, #424]	; (8005bfc <GPS_parse+0x1e4>)
 8005a52:	4a6b      	ldr	r2, [pc, #428]	; (8005c00 <GPS_parse+0x1e8>)
 8005a54:	496b      	ldr	r1, [pc, #428]	; (8005c04 <GPS_parse+0x1ec>)
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f00c fd26 	bl	80124a8 <siscanf>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f340 80b5 	ble.w	8005bce <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005a64:	4b68      	ldr	r3, [pc, #416]	; (8005c08 <GPS_parse+0x1f0>)
 8005a66:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a6a:	4b67      	ldr	r3, [pc, #412]	; (8005c08 <GPS_parse+0x1f0>)
 8005a6c:	7e1b      	ldrb	r3, [r3, #24]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	eeb0 0a67 	vmov.f32	s0, s15
 8005a74:	f000 f8ec 	bl	8005c50 <GPS_nmea_to_dec>
 8005a78:	eef0 7a40 	vmov.f32	s15, s0
 8005a7c:	4b62      	ldr	r3, [pc, #392]	; (8005c08 <GPS_parse+0x1f0>)
 8005a7e:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8005a82:	4b61      	ldr	r3, [pc, #388]	; (8005c08 <GPS_parse+0x1f0>)
 8005a84:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a88:	4b5f      	ldr	r3, [pc, #380]	; (8005c08 <GPS_parse+0x1f0>)
 8005a8a:	7e5b      	ldrb	r3, [r3, #25]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a92:	f000 f8dd 	bl	8005c50 <GPS_nmea_to_dec>
 8005a96:	eef0 7a40 	vmov.f32	s15, s0
 8005a9a:	4b5b      	ldr	r3, [pc, #364]	; (8005c08 <GPS_parse+0x1f0>)
 8005a9c:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e095      	b.n	8005bd0 <GPS_parse+0x1b8>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8005aa4:	2206      	movs	r2, #6
 8005aa6:	4959      	ldr	r1, [pc, #356]	; (8005c0c <GPS_parse+0x1f4>)
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f00c fd6e 	bl	801258a <strncmp>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d134      	bne.n	8005b1e <GPS_parse+0x106>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8005ab4:	4b56      	ldr	r3, [pc, #344]	; (8005c10 <GPS_parse+0x1f8>)
 8005ab6:	9305      	str	r3, [sp, #20]
 8005ab8:	4b56      	ldr	r3, [pc, #344]	; (8005c14 <GPS_parse+0x1fc>)
 8005aba:	9304      	str	r3, [sp, #16]
 8005abc:	4b56      	ldr	r3, [pc, #344]	; (8005c18 <GPS_parse+0x200>)
 8005abe:	9303      	str	r3, [sp, #12]
 8005ac0:	4b4b      	ldr	r3, [pc, #300]	; (8005bf0 <GPS_parse+0x1d8>)
 8005ac2:	9302      	str	r3, [sp, #8]
 8005ac4:	4b4b      	ldr	r3, [pc, #300]	; (8005bf4 <GPS_parse+0x1dc>)
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	4b4b      	ldr	r3, [pc, #300]	; (8005bf8 <GPS_parse+0x1e0>)
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	4b4b      	ldr	r3, [pc, #300]	; (8005bfc <GPS_parse+0x1e4>)
 8005ace:	4a4c      	ldr	r2, [pc, #304]	; (8005c00 <GPS_parse+0x1e8>)
 8005ad0:	4952      	ldr	r1, [pc, #328]	; (8005c1c <GPS_parse+0x204>)
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f00c fce8 	bl	80124a8 <siscanf>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	dd77      	ble.n	8005bce <GPS_parse+0x1b6>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005ade:	4b4a      	ldr	r3, [pc, #296]	; (8005c08 <GPS_parse+0x1f0>)
 8005ae0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005ae4:	4b48      	ldr	r3, [pc, #288]	; (8005c08 <GPS_parse+0x1f0>)
 8005ae6:	7e1b      	ldrb	r3, [r3, #24]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	eeb0 0a67 	vmov.f32	s0, s15
 8005aee:	f000 f8af 	bl	8005c50 <GPS_nmea_to_dec>
 8005af2:	eef0 7a40 	vmov.f32	s15, s0
 8005af6:	4b44      	ldr	r3, [pc, #272]	; (8005c08 <GPS_parse+0x1f0>)
 8005af8:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8005afc:	4b42      	ldr	r3, [pc, #264]	; (8005c08 <GPS_parse+0x1f0>)
 8005afe:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b02:	4b41      	ldr	r3, [pc, #260]	; (8005c08 <GPS_parse+0x1f0>)
 8005b04:	7e5b      	ldrb	r3, [r3, #25]
 8005b06:	4618      	mov	r0, r3
 8005b08:	eeb0 0a67 	vmov.f32	s0, s15
 8005b0c:	f000 f8a0 	bl	8005c50 <GPS_nmea_to_dec>
 8005b10:	eef0 7a40 	vmov.f32	s15, s0
 8005b14:	4b3c      	ldr	r3, [pc, #240]	; (8005c08 <GPS_parse+0x1f0>)
 8005b16:	edc3 7a00 	vstr	s15, [r3]
    		return 1;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e058      	b.n	8005bd0 <GPS_parse+0x1b8>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 8005b1e:	2206      	movs	r2, #6
 8005b20:	493f      	ldr	r1, [pc, #252]	; (8005c20 <GPS_parse+0x208>)
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f00c fd31 	bl	801258a <strncmp>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d130      	bne.n	8005b90 <GPS_parse+0x178>
        if(sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 8005b2e:	4b3d      	ldr	r3, [pc, #244]	; (8005c24 <GPS_parse+0x20c>)
 8005b30:	9303      	str	r3, [sp, #12]
 8005b32:	4b33      	ldr	r3, [pc, #204]	; (8005c00 <GPS_parse+0x1e8>)
 8005b34:	9302      	str	r3, [sp, #8]
 8005b36:	4b2e      	ldr	r3, [pc, #184]	; (8005bf0 <GPS_parse+0x1d8>)
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	4b2e      	ldr	r3, [pc, #184]	; (8005bf4 <GPS_parse+0x1dc>)
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	4b2e      	ldr	r3, [pc, #184]	; (8005bf8 <GPS_parse+0x1e0>)
 8005b40:	4a2e      	ldr	r2, [pc, #184]	; (8005bfc <GPS_parse+0x1e4>)
 8005b42:	4939      	ldr	r1, [pc, #228]	; (8005c28 <GPS_parse+0x210>)
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f00c fcaf 	bl	80124a8 <siscanf>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	dd3e      	ble.n	8005bce <GPS_parse+0x1b6>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8005b50:	4b2d      	ldr	r3, [pc, #180]	; (8005c08 <GPS_parse+0x1f0>)
 8005b52:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b56:	4b2c      	ldr	r3, [pc, #176]	; (8005c08 <GPS_parse+0x1f0>)
 8005b58:	7e1b      	ldrb	r3, [r3, #24]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b60:	f000 f876 	bl	8005c50 <GPS_nmea_to_dec>
 8005b64:	eef0 7a40 	vmov.f32	s15, s0
 8005b68:	4b27      	ldr	r3, [pc, #156]	; (8005c08 <GPS_parse+0x1f0>)
 8005b6a:	edc3 7a01 	vstr	s15, [r3, #4]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8005b6e:	4b26      	ldr	r3, [pc, #152]	; (8005c08 <GPS_parse+0x1f0>)
 8005b70:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b74:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <GPS_parse+0x1f0>)
 8005b76:	7e5b      	ldrb	r3, [r3, #25]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b7e:	f000 f867 	bl	8005c50 <GPS_nmea_to_dec>
 8005b82:	eef0 7a40 	vmov.f32	s15, s0
 8005b86:	4b20      	ldr	r3, [pc, #128]	; (8005c08 <GPS_parse+0x1f0>)
 8005b88:	edc3 7a00 	vstr	s15, [r3]
        	return 1;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e01f      	b.n	8005bd0 <GPS_parse+0x1b8>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8005b90:	2206      	movs	r2, #6
 8005b92:	4926      	ldr	r1, [pc, #152]	; (8005c2c <GPS_parse+0x214>)
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f00c fcf8 	bl	801258a <strncmp>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d116      	bne.n	8005bce <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8005ba0:	4b23      	ldr	r3, [pc, #140]	; (8005c30 <GPS_parse+0x218>)
 8005ba2:	9305      	str	r3, [sp, #20]
 8005ba4:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <GPS_parse+0x21c>)
 8005ba6:	9304      	str	r3, [sp, #16]
 8005ba8:	4b23      	ldr	r3, [pc, #140]	; (8005c38 <GPS_parse+0x220>)
 8005baa:	9303      	str	r3, [sp, #12]
 8005bac:	4b1a      	ldr	r3, [pc, #104]	; (8005c18 <GPS_parse+0x200>)
 8005bae:	9302      	str	r3, [sp, #8]
 8005bb0:	4b22      	ldr	r3, [pc, #136]	; (8005c3c <GPS_parse+0x224>)
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	4b22      	ldr	r3, [pc, #136]	; (8005c40 <GPS_parse+0x228>)
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	4b22      	ldr	r3, [pc, #136]	; (8005c44 <GPS_parse+0x22c>)
 8005bba:	4a23      	ldr	r2, [pc, #140]	; (8005c48 <GPS_parse+0x230>)
 8005bbc:	4923      	ldr	r1, [pc, #140]	; (8005c4c <GPS_parse+0x234>)
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f00c fc72 	bl	80124a8 <siscanf>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	dd01      	ble.n	8005bce <GPS_parse+0x1b6>
            return 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e000      	b.n	8005bd0 <GPS_parse+0x1b8>
    }
    return 0;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	080172e4 	.word	0x080172e4
 8005bdc:	20006560 	.word	0x20006560
 8005be0:	2000655c 	.word	0x2000655c
 8005be4:	20006558 	.word	0x20006558
 8005be8:	20006554 	.word	0x20006554
 8005bec:	20006550 	.word	0x20006550
 8005bf0:	2000654d 	.word	0x2000654d
 8005bf4:	20006540 	.word	0x20006540
 8005bf8:	2000654c 	.word	0x2000654c
 8005bfc:	20006544 	.word	0x20006544
 8005c00:	20006548 	.word	0x20006548
 8005c04:	080172ec 	.word	0x080172ec
 8005c08:	20006534 	.word	0x20006534
 8005c0c:	08017314 	.word	0x08017314
 8005c10:	2000656c 	.word	0x2000656c
 8005c14:	20006568 	.word	0x20006568
 8005c18:	20006564 	.word	0x20006564
 8005c1c:	0801731c 	.word	0x0801731c
 8005c20:	0801733c 	.word	0x0801733c
 8005c24:	20006570 	.word	0x20006570
 8005c28:	08017344 	.word	0x08017344
 8005c2c:	08017360 	.word	0x08017360
 8005c30:	20006588 	.word	0x20006588
 8005c34:	20006584 	.word	0x20006584
 8005c38:	20006581 	.word	0x20006581
 8005c3c:	20006580 	.word	0x20006580
 8005c40:	2000657c 	.word	0x2000657c
 8005c44:	20006578 	.word	0x20006578
 8005c48:	20006574 	.word	0x20006574
 8005c4c:	08017368 	.word	0x08017368

08005c50 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8005c5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005c62:	eddf 6a20 	vldr	s13, [pc, #128]	; 8005ce4 <GPS_nmea_to_dec+0x94>
 8005c66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c6e:	ee17 3a90 	vmov	r3, s15
 8005c72:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	2264      	movs	r2, #100	; 0x64
 8005c78:	fb02 f303 	mul.w	r3, r2, r3
 8005c7c:	ee07 3a90 	vmov	s15, r3
 8005c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c84:	ed97 7a01 	vldr	s14, [r7, #4]
 8005c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c8c:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8005c90:	ed97 7a03 	vldr	s14, [r7, #12]
 8005c94:	eddf 6a14 	vldr	s13, [pc, #80]	; 8005ce8 <GPS_nmea_to_dec+0x98>
 8005c98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c9c:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005caa:	ed97 7a02 	vldr	s14, [r7, #8]
 8005cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	2b53      	cmp	r3, #83	; 0x53
 8005cba:	d002      	beq.n	8005cc2 <GPS_nmea_to_dec+0x72>
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	2b57      	cmp	r3, #87	; 0x57
 8005cc0:	d105      	bne.n	8005cce <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 8005cc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8005cc6:	eef1 7a67 	vneg.f32	s15, s15
 8005cca:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	ee07 3a90 	vmov	s15, r3
}
 8005cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	42c80000 	.word	0x42c80000
 8005ce8:	42700000 	.word	0x42700000

08005cec <GPS_Init>:
	}
}


void GPS_Init(UART_HandleTypeDef* data_uart, void (*gps_print)(char*),
		void (*gps_tone_freq)(uint32_t duration, uint32_t repeats, uint32_t freq)){
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
	GPS.print = gps_print;
 8005cf8:	4a0a      	ldr	r2, [pc, #40]	; (8005d24 <GPS_Init+0x38>)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	65d3      	str	r3, [r2, #92]	; 0x5c
	GPS.print((char*) "\r\nGPS Init...");
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <GPS_Init+0x38>)
 8005d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d02:	4809      	ldr	r0, [pc, #36]	; (8005d28 <GPS_Init+0x3c>)
 8005d04:	4798      	blx	r3
	GPS.uart = data_uart;
 8005d06:	4a07      	ldr	r2, [pc, #28]	; (8005d24 <GPS_Init+0x38>)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6593      	str	r3, [r2, #88]	; 0x58
	GPS.tone_freq = gps_tone_freq;
 8005d0c:	4a05      	ldr	r2, [pc, #20]	; (8005d24 <GPS_Init+0x38>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6613      	str	r3, [r2, #96]	; 0x60
	GPS.print((char*) "OK\r\n");
 8005d12:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <GPS_Init+0x38>)
 8005d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d16:	4805      	ldr	r0, [pc, #20]	; (8005d2c <GPS_Init+0x40>)
 8005d18:	4798      	blx	r3
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20006534 	.word	0x20006534
 8005d28:	08017388 	.word	0x08017388
 8005d2c:	08017398 	.word	0x08017398

08005d30 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005d30:	b590      	push	{r4, r7, lr}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	607a      	str	r2, [r7, #4]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	72fb      	strb	r3, [r7, #11]
 8005d40:	4613      	mov	r3, r2
 8005d42:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	685c      	ldr	r4, [r3, #4]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6898      	ldr	r0, [r3, #8]
 8005d4c:	893b      	ldrh	r3, [r7, #8]
 8005d4e:	7af9      	ldrb	r1, [r7, #11]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	47a0      	blx	r4
 8005d54:	6178      	str	r0, [r7, #20]

  return ret;
 8005d56:	697b      	ldr	r3, [r7, #20]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd90      	pop	{r4, r7, pc}

08005d60 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005d60:	b590      	push	{r4, r7, lr}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	72fb      	strb	r3, [r7, #11]
 8005d70:	4613      	mov	r3, r2
 8005d72:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681c      	ldr	r4, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6898      	ldr	r0, [r3, #8]
 8005d7c:	893b      	ldrh	r3, [r7, #8]
 8005d7e:	7af9      	ldrb	r1, [r7, #11]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	47a0      	blx	r4
 8005d84:	6178      	str	r0, [r7, #20]

  return ret;
 8005d86:	697b      	ldr	r3, [r7, #20]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd90      	pop	{r4, r7, pc}

08005d90 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005dbc <lps22hh_from_lsb_to_hpa+0x2c>
 8005da6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005daa:	eef0 7a66 	vmov.f32	s15, s13
}
 8005dae:	eeb0 0a67 	vmov.f32	s0, s15
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	49800000 	.word	0x49800000

08005dc0 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 8005dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dd6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005df0 <lps22hh_from_lsb_to_celsius+0x30>
 8005dda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005dde:	eef0 7a66 	vmov.f32	s15, s13
}
 8005de2:	eeb0 0a67 	vmov.f32	s0, s15
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	42c80000 	.word	0x42c80000

08005df4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005e00:	f107 0208 	add.w	r2, r7, #8
 8005e04:	2301      	movs	r3, #1
 8005e06:	2110      	movs	r1, #16
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff ff91 	bl	8005d30 <lps22hh_read_reg>
 8005e0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10f      	bne.n	8005e36 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	7a3b      	ldrb	r3, [r7, #8]
 8005e20:	f362 0341 	bfi	r3, r2, #1, #1
 8005e24:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005e26:	f107 0208 	add.w	r2, r7, #8
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	2110      	movs	r1, #16
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff ff96 	bl	8005d60 <lps22hh_write_reg>
 8005e34:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e36:	68fb      	ldr	r3, [r7, #12]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005e4c:	f107 0210 	add.w	r2, r7, #16
 8005e50:	2301      	movs	r3, #1
 8005e52:	2110      	movs	r1, #16
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ff6b 	bl	8005d30 <lps22hh_read_reg>
 8005e5a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d107      	bne.n	8005e72 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005e62:	f107 020c 	add.w	r2, r7, #12
 8005e66:	2301      	movs	r3, #1
 8005e68:	2111      	movs	r1, #17
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7ff ff60 	bl	8005d30 <lps22hh_read_reg>
 8005e70:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10f      	bne.n	8005e98 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	7c3b      	ldrb	r3, [r7, #16]
 8005e82:	f362 1306 	bfi	r3, r2, #4, #3
 8005e86:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005e88:	f107 0210 	add.w	r2, r7, #16
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	2110      	movs	r1, #16
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff ff65 	bl	8005d60 <lps22hh_write_reg>
 8005e96:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d119      	bne.n	8005ed2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	091b      	lsrs	r3, r3, #4
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	7b3b      	ldrb	r3, [r7, #12]
 8005eaa:	f362 0341 	bfi	r3, r2, #1, #1
 8005eae:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	08db      	lsrs	r3, r3, #3
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	7b3b      	ldrb	r3, [r7, #12]
 8005ebc:	f362 0300 	bfi	r3, r2, #0, #1
 8005ec0:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005ec2:	f107 020c 	add.w	r2, r7, #12
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	2111      	movs	r1, #17
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff ff48 	bl	8005d60 <lps22hh_write_reg>
 8005ed0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8005ed2:	697b      	ldr	r3, [r7, #20]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <lps22hh_press_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_press_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005ee6:	f107 0208 	add.w	r2, r7, #8
 8005eea:	2301      	movs	r3, #1
 8005eec:	2127      	movs	r1, #39	; 0x27
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff ff1e 	bl	8005d30 <lps22hh_read_reg>
 8005ef4:	60f8      	str	r0, [r7, #12]
  *val = reg.p_da;
 8005ef6:	7a3b      	ldrb	r3, [r7, #8]
 8005ef8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	461a      	mov	r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	701a      	strb	r2, [r3, #0]

  return ret;
 8005f04:	68fb      	ldr	r3, [r7, #12]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <lps22hh_temp_flag_data_ready_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	6039      	str	r1, [r7, #0]
  lps22hh_status_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_STATUS, (uint8_t *) &reg, 1);
 8005f18:	f107 0208 	add.w	r2, r7, #8
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	2127      	movs	r1, #39	; 0x27
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff ff05 	bl	8005d30 <lps22hh_read_reg>
 8005f26:	60f8      	str	r0, [r7, #12]
  *val = reg.t_da;
 8005f28:	7a3b      	ldrb	r3, [r7, #8]
 8005f2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	461a      	mov	r2, r3
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	701a      	strb	r2, [r3, #0]

  return ret;
 8005f36:	68fb      	ldr	r3, [r7, #12]
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005f4a:	f107 0208 	add.w	r2, r7, #8
 8005f4e:	2303      	movs	r3, #3
 8005f50:	2128      	movs	r1, #40	; 0x28
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff feec 	bl	8005d30 <lps22hh_read_reg>
 8005f58:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005f5a:	7abb      	ldrb	r3, [r7, #10]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	7a7a      	ldrb	r2, [r7, #9]
 8005f6a:	441a      	add	r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	7a3a      	ldrb	r2, [r7, #8]
 8005f78:	441a      	add	r2, r3
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	021a      	lsls	r2, r3, #8
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	601a      	str	r2, [r3, #0]

  return ret;
 8005f88:	68fb      	ldr	r3, [r7, #12]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005f9c:	f107 0208 	add.w	r2, r7, #8
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	212b      	movs	r1, #43	; 0x2b
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff fec3 	bl	8005d30 <lps22hh_read_reg>
 8005faa:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8005fac:	7a7b      	ldrb	r3, [r7, #9]
 8005fae:	b21a      	sxth	r2, r3
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	7a3b      	ldrb	r3, [r7, #8]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	b21a      	sxth	r2, r3
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	801a      	strh	r2, [r3, #0]

  return ret;
 8005fce:	68fb      	ldr	r3, [r7, #12]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	210f      	movs	r1, #15
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7ff fea1 	bl	8005d30 <lps22hh_read_reg>
 8005fee:	60f8      	str	r0, [r7, #12]

  return ret;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	460b      	mov	r3, r1
 8006004:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006006:	f107 0208 	add.w	r2, r7, #8
 800600a:	2301      	movs	r3, #1
 800600c:	2111      	movs	r1, #17
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff fe8e 	bl	8005d30 <lps22hh_read_reg>
 8006014:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10f      	bne.n	800603c <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	b2da      	uxtb	r2, r3
 8006024:	7a3b      	ldrb	r3, [r7, #8]
 8006026:	f362 0382 	bfi	r3, r2, #2, #1
 800602a:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800602c:	f107 0208 	add.w	r2, r7, #8
 8006030:	2301      	movs	r3, #1
 8006032:	2111      	movs	r1, #17
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff fe93 	bl	8005d60 <lps22hh_write_reg>
 800603a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800603c:	68fb      	ldr	r3, [r7, #12]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8006050:	f107 0208 	add.w	r2, r7, #8
 8006054:	2301      	movs	r3, #1
 8006056:	2111      	movs	r1, #17
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7ff fe69 	bl	8005d30 <lps22hh_read_reg>
 800605e:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8006060:	7a3b      	ldrb	r3, [r7, #8]
 8006062:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006066:	b2db      	uxtb	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	701a      	strb	r2, [r3, #0]

  return ret;
 800606e:	68fb      	ldr	r3, [r7, #12]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <lsm6dsr_read_reg>:
  *
  */
int32_t lsm6dsr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8006078:	b590      	push	{r4, r7, lr}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	607a      	str	r2, [r7, #4]
 8006082:	461a      	mov	r2, r3
 8006084:	460b      	mov	r3, r1
 8006086:	72fb      	strb	r3, [r7, #11]
 8006088:	4613      	mov	r3, r2
 800608a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	685c      	ldr	r4, [r3, #4]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6898      	ldr	r0, [r3, #8]
 8006094:	893b      	ldrh	r3, [r7, #8]
 8006096:	7af9      	ldrb	r1, [r7, #11]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	47a0      	blx	r4
 800609c:	6178      	str	r0, [r7, #20]

  return ret;
 800609e:	697b      	ldr	r3, [r7, #20]
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd90      	pop	{r4, r7, pc}

080060a8 <lsm6dsr_write_reg>:
  *
  */
int32_t lsm6dsr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80060a8:	b590      	push	{r4, r7, lr}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	607a      	str	r2, [r7, #4]
 80060b2:	461a      	mov	r2, r3
 80060b4:	460b      	mov	r3, r1
 80060b6:	72fb      	strb	r3, [r7, #11]
 80060b8:	4613      	mov	r3, r2
 80060ba:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681c      	ldr	r4, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6898      	ldr	r0, [r3, #8]
 80060c4:	893b      	ldrh	r3, [r7, #8]
 80060c6:	7af9      	ldrb	r1, [r7, #11]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	47a0      	blx	r4
 80060cc:	6178      	str	r0, [r7, #20]

  return ret;
 80060ce:	697b      	ldr	r3, [r7, #20]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd90      	pop	{r4, r7, pc}

080060d8 <lsm6dsr_from_fs2g_to_mg>:
  * @{
  *
  */

float_t lsm6dsr_from_fs2g_to_mg(int16_t lsb)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 80060e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060e6:	ee07 3a90 	vmov	s15, r3
 80060ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006104 <lsm6dsr_from_fs2g_to_mg+0x2c>
 80060f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80060f6:	eeb0 0a67 	vmov.f32	s0, s15
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	3d79db23 	.word	0x3d79db23

08006108 <lsm6dsr_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsr_from_fs2000dps_to_mdps(int16_t lsb)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8006112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006116:	ee07 3a90 	vmov	s15, r3
 800611a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800611e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8006134 <lsm6dsr_from_fs2000dps_to_mdps+0x2c>
 8006122:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006126:	eeb0 0a67 	vmov.f32	s0, s15
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	428c0000 	.word	0x428c0000

08006138 <lsm6dsr_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 140.0f);
}

float_t lsm6dsr_from_lsb_to_celsius(int16_t lsb)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8006142:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800614e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800616c <lsm6dsr_from_lsb_to_celsius+0x34>
 8006152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006156:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800615a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800615e:	eeb0 0a67 	vmov.f32	s0, s15
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	43800000 	.word	0x43800000

08006170 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800617c:	f107 0208 	add.w	r2, r7, #8
 8006180:	2301      	movs	r3, #1
 8006182:	2110      	movs	r1, #16
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff ff77 	bl	8006078 <lsm6dsr_read_reg>
 800618a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10f      	bne.n	80061b2 <lsm6dsr_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	f003 0303 	and.w	r3, r3, #3
 8006198:	b2da      	uxtb	r2, r3
 800619a:	7a3b      	ldrb	r3, [r7, #8]
 800619c:	f362 0383 	bfi	r3, r2, #2, #2
 80061a0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80061a2:	f107 0208 	add.w	r2, r7, #8
 80061a6:	2301      	movs	r3, #1
 80061a8:	2110      	movs	r1, #16
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff ff7c 	bl	80060a8 <lsm6dsr_write_reg>
 80061b0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80061b2:	68fb      	ldr	r3, [r7, #12]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_xl_t odr_xl =  val;
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80061cc:	f107 030c 	add.w	r3, r7, #12
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fc54 	bl	8006a80 <lsm6dsr_fsm_enable_get>
 80061d8:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f040 80c4 	bne.w	800636a <lsm6dsr_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80061e2:	7b3b      	ldrb	r3, [r7, #12]
 80061e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80061ea:	7b3b      	ldrb	r3, [r7, #12]
 80061ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80061f0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80061f2:	4313      	orrs	r3, r2
 80061f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80061f6:	7b3b      	ldrb	r3, [r7, #12]
 80061f8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80061fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80061fe:	4313      	orrs	r3, r2
 8006200:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006202:	7b3b      	ldrb	r3, [r7, #12]
 8006204:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006208:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800620a:	4313      	orrs	r3, r2
 800620c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800620e:	7b3b      	ldrb	r3, [r7, #12]
 8006210:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006214:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006216:	4313      	orrs	r3, r2
 8006218:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800621a:	7b3b      	ldrb	r3, [r7, #12]
 800621c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006220:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006222:	4313      	orrs	r3, r2
 8006224:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8006226:	7b3b      	ldrb	r3, [r7, #12]
 8006228:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800622c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800622e:	4313      	orrs	r3, r2
 8006230:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006232:	7b3b      	ldrb	r3, [r7, #12]
 8006234:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006238:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800623a:	4313      	orrs	r3, r2
 800623c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800623e:	7b7b      	ldrb	r3, [r7, #13]
 8006240:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006244:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006246:	4313      	orrs	r3, r2
 8006248:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800624a:	7b7b      	ldrb	r3, [r7, #13]
 800624c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006250:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006252:	4313      	orrs	r3, r2
 8006254:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8006256:	7b7b      	ldrb	r3, [r7, #13]
 8006258:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800625c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800625e:	4313      	orrs	r3, r2
 8006260:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006262:	7b7b      	ldrb	r3, [r7, #13]
 8006264:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006268:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800626a:	4313      	orrs	r3, r2
 800626c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800626e:	7b7b      	ldrb	r3, [r7, #13]
 8006270:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006274:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8006276:	4313      	orrs	r3, r2
 8006278:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800627a:	7b7b      	ldrb	r3, [r7, #13]
 800627c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006280:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8006282:	4313      	orrs	r3, r2
 8006284:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8006286:	7b7b      	ldrb	r3, [r7, #13]
 8006288:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800628c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800628e:	4313      	orrs	r3, r2
 8006290:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8006292:	7b7b      	ldrb	r3, [r7, #13]
 8006294:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006298:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800629a:	4313      	orrs	r3, r2
 800629c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d163      	bne.n	800636a <lsm6dsr_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80062a2:	f107 030b 	add.w	r3, r7, #11
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fc15 	bl	8006ad8 <lsm6dsr_fsm_data_rate_get>
 80062ae:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d159      	bne.n	800636a <lsm6dsr_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80062b6:	7afb      	ldrb	r3, [r7, #11]
 80062b8:	2b03      	cmp	r3, #3
 80062ba:	d853      	bhi.n	8006364 <lsm6dsr_xl_data_rate_set+0x1a8>
 80062bc:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <lsm6dsr_xl_data_rate_set+0x108>)
 80062be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c2:	bf00      	nop
 80062c4:	080062d5 	.word	0x080062d5
 80062c8:	080062e7 	.word	0x080062e7
 80062cc:	08006305 	.word	0x08006305
 80062d0:	0800632f 	.word	0x0800632f
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d102      	bne.n	80062e0 <lsm6dsr_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 80062da:	2301      	movs	r3, #1
 80062dc:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80062de:	e045      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	75fb      	strb	r3, [r7, #23]
            break;
 80062e4:	e042      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d102      	bne.n	80062f2 <lsm6dsr_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80062ec:	2302      	movs	r3, #2
 80062ee:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80062f0:	e03c      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80062f2:	78fb      	ldrb	r3, [r7, #3]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d102      	bne.n	80062fe <lsm6dsr_xl_data_rate_set+0x142>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80062f8:	2302      	movs	r3, #2
 80062fa:	75fb      	strb	r3, [r7, #23]
            break;
 80062fc:	e036      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80062fe:	78fb      	ldrb	r3, [r7, #3]
 8006300:	75fb      	strb	r3, [r7, #23]
            break;
 8006302:	e033      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d102      	bne.n	8006310 <lsm6dsr_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 800630a:	2303      	movs	r3, #3
 800630c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800630e:	e02d      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8006310:	78fb      	ldrb	r3, [r7, #3]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d102      	bne.n	800631c <lsm6dsr_xl_data_rate_set+0x160>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006316:	2303      	movs	r3, #3
 8006318:	75fb      	strb	r3, [r7, #23]
            break;
 800631a:	e027      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d102      	bne.n	8006328 <lsm6dsr_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 8006322:	2303      	movs	r3, #3
 8006324:	75fb      	strb	r3, [r7, #23]
            break;
 8006326:	e021      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	75fb      	strb	r3, [r7, #23]
            break;
 800632c:	e01e      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006334:	2304      	movs	r3, #4
 8006336:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8006338:	e018      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 800633a:	78fb      	ldrb	r3, [r7, #3]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d102      	bne.n	8006346 <lsm6dsr_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006340:	2304      	movs	r3, #4
 8006342:	75fb      	strb	r3, [r7, #23]
            break;
 8006344:	e012      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d102      	bne.n	8006352 <lsm6dsr_xl_data_rate_set+0x196>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800634c:	2304      	movs	r3, #4
 800634e:	75fb      	strb	r3, [r7, #23]
            break;
 8006350:	e00c      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	2b03      	cmp	r3, #3
 8006356:	d102      	bne.n	800635e <lsm6dsr_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8006358:	2304      	movs	r3, #4
 800635a:	75fb      	strb	r3, [r7, #23]
            break;
 800635c:	e006      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	75fb      	strb	r3, [r7, #23]
            break;
 8006362:	e003      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	75fb      	strb	r3, [r7, #23]
            break;
 8006368:	e000      	b.n	800636c <lsm6dsr_xl_data_rate_set+0x1b0>
        }
      }
 800636a:	bf00      	nop
    }
  }

  if (ret == 0)
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d107      	bne.n	8006382 <lsm6dsr_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006372:	f107 0208 	add.w	r2, r7, #8
 8006376:	2301      	movs	r3, #1
 8006378:	2110      	movs	r1, #16
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff fe7c 	bl	8006078 <lsm6dsr_read_reg>
 8006380:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10f      	bne.n	80063a8 <lsm6dsr_xl_data_rate_set+0x1ec>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8006388:	7dfb      	ldrb	r3, [r7, #23]
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	b2da      	uxtb	r2, r3
 8006390:	7a3b      	ldrb	r3, [r7, #8]
 8006392:	f362 1307 	bfi	r3, r2, #4, #4
 8006396:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 8006398:	f107 0208 	add.w	r2, r7, #8
 800639c:	2301      	movs	r3, #1
 800639e:	2110      	movs	r1, #16
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fe81 	bl	80060a8 <lsm6dsr_write_reg>
 80063a6:	6138      	str	r0, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80063a8:	693b      	ldr	r3, [r7, #16]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop

080063b4 <lsm6dsr_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_g_t val)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80063c0:	f107 0208 	add.w	r2, r7, #8
 80063c4:	2301      	movs	r3, #1
 80063c6:	2111      	movs	r1, #17
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff fe55 	bl	8006078 <lsm6dsr_read_reg>
 80063ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10f      	bne.n	80063f6 <lsm6dsr_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t)val;
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	f003 030f 	and.w	r3, r3, #15
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	7a3b      	ldrb	r3, [r7, #8]
 80063e0:	f362 0303 	bfi	r3, r2, #0, #4
 80063e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80063e6:	f107 0208 	add.w	r2, r7, #8
 80063ea:	2301      	movs	r3, #1
 80063ec:	2111      	movs	r1, #17
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fe5a 	bl	80060a8 <lsm6dsr_write_reg>
 80063f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80063f6:	68fb      	ldr	r3, [r7, #12]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_odr_g_t odr_gy =  val;
 800640c:	78fb      	ldrb	r3, [r7, #3]
 800640e:	75fb      	strb	r3, [r7, #23]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 8006410:	f107 030c 	add.w	r3, r7, #12
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 fb32 	bl	8006a80 <lsm6dsr_fsm_enable_get>
 800641c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 80c4 	bne.w	80065ae <lsm6dsr_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006426:	7b3b      	ldrb	r3, [r7, #12]
 8006428:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800642c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800642e:	7b3b      	ldrb	r3, [r7, #12]
 8006430:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006434:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006436:	4313      	orrs	r3, r2
 8006438:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800643a:	7b3b      	ldrb	r3, [r7, #12]
 800643c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006440:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8006442:	4313      	orrs	r3, r2
 8006444:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8006446:	7b3b      	ldrb	r3, [r7, #12]
 8006448:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800644c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800644e:	4313      	orrs	r3, r2
 8006450:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006452:	7b3b      	ldrb	r3, [r7, #12]
 8006454:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006458:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800645a:	4313      	orrs	r3, r2
 800645c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800645e:	7b3b      	ldrb	r3, [r7, #12]
 8006460:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006464:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8006466:	4313      	orrs	r3, r2
 8006468:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800646a:	7b3b      	ldrb	r3, [r7, #12]
 800646c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006470:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8006472:	4313      	orrs	r3, r2
 8006474:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8006476:	7b3b      	ldrb	r3, [r7, #12]
 8006478:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800647c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800647e:	4313      	orrs	r3, r2
 8006480:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006482:	7b7b      	ldrb	r3, [r7, #13]
 8006484:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006488:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800648a:	4313      	orrs	r3, r2
 800648c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800648e:	7b7b      	ldrb	r3, [r7, #13]
 8006490:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006494:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8006496:	4313      	orrs	r3, r2
 8006498:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800649a:	7b7b      	ldrb	r3, [r7, #13]
 800649c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80064a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80064a2:	4313      	orrs	r3, r2
 80064a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80064a6:	7b7b      	ldrb	r3, [r7, #13]
 80064a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80064ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80064ae:	4313      	orrs	r3, r2
 80064b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80064b2:	7b7b      	ldrb	r3, [r7, #13]
 80064b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80064b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80064ba:	4313      	orrs	r3, r2
 80064bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80064be:	7b7b      	ldrb	r3, [r7, #13]
 80064c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80064c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80064c6:	4313      	orrs	r3, r2
 80064c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80064ca:	7b7b      	ldrb	r3, [r7, #13]
 80064cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80064d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80064d2:	4313      	orrs	r3, r2
 80064d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80064d6:	7b7b      	ldrb	r3, [r7, #13]
 80064d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80064dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80064de:	4313      	orrs	r3, r2
 80064e0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d163      	bne.n	80065ae <lsm6dsr_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80064e6:	f107 030b 	add.w	r3, r7, #11
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 faf3 	bl	8006ad8 <lsm6dsr_fsm_data_rate_get>
 80064f2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d159      	bne.n	80065ae <lsm6dsr_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80064fa:	7afb      	ldrb	r3, [r7, #11]
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d853      	bhi.n	80065a8 <lsm6dsr_gy_data_rate_set+0x1a8>
 8006500:	a201      	add	r2, pc, #4	; (adr r2, 8006508 <lsm6dsr_gy_data_rate_set+0x108>)
 8006502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006506:	bf00      	nop
 8006508:	08006519 	.word	0x08006519
 800650c:	0800652b 	.word	0x0800652b
 8006510:	08006549 	.word	0x08006549
 8006514:	08006573 	.word	0x08006573
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d102      	bne.n	8006524 <lsm6dsr_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 800651e:	2301      	movs	r3, #1
 8006520:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006522:	e045      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	75fb      	strb	r3, [r7, #23]
            break;
 8006528:	e042      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 800652a:	78fb      	ldrb	r3, [r7, #3]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d102      	bne.n	8006536 <lsm6dsr_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8006530:	2302      	movs	r3, #2
 8006532:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006534:	e03c      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006536:	78fb      	ldrb	r3, [r7, #3]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d102      	bne.n	8006542 <lsm6dsr_gy_data_rate_set+0x142>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800653c:	2302      	movs	r3, #2
 800653e:	75fb      	strb	r3, [r7, #23]
            break;
 8006540:	e036      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8006542:	78fb      	ldrb	r3, [r7, #3]
 8006544:	75fb      	strb	r3, [r7, #23]
            break;
 8006546:	e033      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <lsm6dsr_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800654e:	2303      	movs	r3, #3
 8006550:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8006552:	e02d      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d102      	bne.n	8006560 <lsm6dsr_gy_data_rate_set+0x160>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800655a:	2303      	movs	r3, #3
 800655c:	75fb      	strb	r3, [r7, #23]
            break;
 800655e:	e027      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d102      	bne.n	800656c <lsm6dsr_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8006566:	2303      	movs	r3, #3
 8006568:	75fb      	strb	r3, [r7, #23]
            break;
 800656a:	e021      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	75fb      	strb	r3, [r7, #23]
            break;
 8006570:	e01e      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006578:	2304      	movs	r3, #4
 800657a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800657c:	e018      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d102      	bne.n	800658a <lsm6dsr_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006584:	2304      	movs	r3, #4
 8006586:	75fb      	strb	r3, [r7, #23]
            break;
 8006588:	e012      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d102      	bne.n	8006596 <lsm6dsr_gy_data_rate_set+0x196>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 8006590:	2304      	movs	r3, #4
 8006592:	75fb      	strb	r3, [r7, #23]
            break;
 8006594:	e00c      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 8006596:	78fb      	ldrb	r3, [r7, #3]
 8006598:	2b03      	cmp	r3, #3
 800659a:	d102      	bne.n	80065a2 <lsm6dsr_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 800659c:	2304      	movs	r3, #4
 800659e:	75fb      	strb	r3, [r7, #23]
            break;
 80065a0:	e006      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80065a2:	78fb      	ldrb	r3, [r7, #3]
 80065a4:	75fb      	strb	r3, [r7, #23]
            break;
 80065a6:	e003      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	75fb      	strb	r3, [r7, #23]
            break;
 80065ac:	e000      	b.n	80065b0 <lsm6dsr_gy_data_rate_set+0x1b0>
        }
      }
 80065ae:	bf00      	nop
    }
  }

  if (ret == 0)
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d107      	bne.n	80065c6 <lsm6dsr_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80065b6:	f107 0208 	add.w	r2, r7, #8
 80065ba:	2301      	movs	r3, #1
 80065bc:	2111      	movs	r1, #17
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff fd5a 	bl	8006078 <lsm6dsr_read_reg>
 80065c4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10f      	bne.n	80065ec <lsm6dsr_gy_data_rate_set+0x1ec>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	f003 030f 	and.w	r3, r3, #15
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	7a3b      	ldrb	r3, [r7, #8]
 80065d6:	f362 1307 	bfi	r3, r2, #4, #4
 80065da:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80065dc:	f107 0208 	add.w	r2, r7, #8
 80065e0:	2301      	movs	r3, #1
 80065e2:	2111      	movs	r1, #17
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff fd5f 	bl	80060a8 <lsm6dsr_write_reg>
 80065ea:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80065ec:	693b      	ldr	r3, [r7, #16]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop

080065f8 <lsm6dsr_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	460b      	mov	r3, r1
 8006602:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006604:	f107 0208 	add.w	r2, r7, #8
 8006608:	2301      	movs	r3, #1
 800660a:	2112      	movs	r1, #18
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7ff fd33 	bl	8006078 <lsm6dsr_read_reg>
 8006612:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10f      	bne.n	800663a <lsm6dsr_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	b2da      	uxtb	r2, r3
 8006622:	7a3b      	ldrb	r3, [r7, #8]
 8006624:	f362 1386 	bfi	r3, r2, #6, #1
 8006628:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800662a:	f107 0208 	add.w	r2, r7, #8
 800662e:	2301      	movs	r3, #1
 8006630:	2112      	movs	r1, #18
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff fd38 	bl	80060a8 <lsm6dsr_write_reg>
 8006638:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800663a:	68fb      	ldr	r3, [r7, #12]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <lsm6dsr_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 800664e:	f107 0208 	add.w	r2, r7, #8
 8006652:	2301      	movs	r3, #1
 8006654:	211e      	movs	r1, #30
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fd0e 	bl	8006078 <lsm6dsr_read_reg>
 800665c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800665e:	7a3b      	ldrb	r3, [r7, #8]
 8006660:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	701a      	strb	r2, [r3, #0]

  return ret;
 800666c:	68fb      	ldr	r3, [r7, #12]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <lsm6dsr_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 8006680:	f107 0208 	add.w	r2, r7, #8
 8006684:	2301      	movs	r3, #1
 8006686:	211e      	movs	r1, #30
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff fcf5 	bl	8006078 <lsm6dsr_read_reg>
 800668e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8006690:	7a3b      	ldrb	r3, [r7, #8]
 8006692:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	701a      	strb	r2, [r3, #0]

  return ret;
 800669e:	68fb      	ldr	r3, [r7, #12]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <lsm6dsr_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  lsm6dsr_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_STATUS_REG,
 80066b2:	f107 0208 	add.w	r2, r7, #8
 80066b6:	2301      	movs	r3, #1
 80066b8:	211e      	movs	r1, #30
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff fcdc 	bl	8006078 <lsm6dsr_read_reg>
 80066c0:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 80066c2:	7a3b      	ldrb	r3, [r7, #8]
 80066c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	461a      	mov	r2, r3
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	701a      	strb	r2, [r3, #0]

  return ret;
 80066d0:	68fb      	ldr	r3, [r7, #12]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <lsm6dsr_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUT_TEMP_L, buff, 2);
 80066e4:	f107 0208 	add.w	r2, r7, #8
 80066e8:	2302      	movs	r3, #2
 80066ea:	2120      	movs	r1, #32
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff fcc3 	bl	8006078 <lsm6dsr_read_reg>
 80066f2:	60f8      	str	r0, [r7, #12]
  val[0] = (int16_t)buff[1];
 80066f4:	7a7b      	ldrb	r3, [r7, #9]
 80066f6:	b21a      	sxth	r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006702:	b29b      	uxth	r3, r3
 8006704:	021b      	lsls	r3, r3, #8
 8006706:	b29a      	uxth	r2, r3
 8006708:	7a3b      	ldrb	r3, [r7, #8]
 800670a:	b29b      	uxth	r3, r3
 800670c:	4413      	add	r3, r2
 800670e:	b29b      	uxth	r3, r3
 8006710:	b21a      	sxth	r2, r3
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	801a      	strh	r2, [r3, #0]

  return ret;
 8006716:	68fb      	ldr	r3, [r7, #12]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <lsm6dsr_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_G, buff, 6);
 800672a:	f107 020c 	add.w	r2, r7, #12
 800672e:	2306      	movs	r3, #6
 8006730:	2122      	movs	r1, #34	; 0x22
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fca0 	bl	8006078 <lsm6dsr_read_reg>
 8006738:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800673a:	7b7b      	ldrb	r3, [r7, #13]
 800673c:	b21a      	sxth	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006748:	b29b      	uxth	r3, r3
 800674a:	021b      	lsls	r3, r3, #8
 800674c:	b29a      	uxth	r2, r3
 800674e:	7b3b      	ldrb	r3, [r7, #12]
 8006750:	b29b      	uxth	r3, r3
 8006752:	4413      	add	r3, r2
 8006754:	b29b      	uxth	r3, r3
 8006756:	b21a      	sxth	r2, r3
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800675c:	7bfa      	ldrb	r2, [r7, #15]
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	3302      	adds	r3, #2
 8006762:	b212      	sxth	r2, r2
 8006764:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	3302      	adds	r3, #2
 800676a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800676e:	b29b      	uxth	r3, r3
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	b29a      	uxth	r2, r3
 8006774:	7bbb      	ldrb	r3, [r7, #14]
 8006776:	b29b      	uxth	r3, r3
 8006778:	4413      	add	r3, r2
 800677a:	b29a      	uxth	r2, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	3302      	adds	r3, #2
 8006780:	b212      	sxth	r2, r2
 8006782:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006784:	7c7a      	ldrb	r2, [r7, #17]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	3304      	adds	r3, #4
 800678a:	b212      	sxth	r2, r2
 800678c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	3304      	adds	r3, #4
 8006792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006796:	b29b      	uxth	r3, r3
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	b29a      	uxth	r2, r3
 800679c:	7c3b      	ldrb	r3, [r7, #16]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	4413      	add	r3, r2
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	3304      	adds	r3, #4
 80067a8:	b212      	sxth	r2, r2
 80067aa:	801a      	strh	r2, [r3, #0]

  return ret;
 80067ac:	697b      	ldr	r3, [r7, #20]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <lsm6dsr_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b086      	sub	sp, #24
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_OUTX_L_A, buff, 6);
 80067c0:	f107 020c 	add.w	r2, r7, #12
 80067c4:	2306      	movs	r3, #6
 80067c6:	2128      	movs	r1, #40	; 0x28
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff fc55 	bl	8006078 <lsm6dsr_read_reg>
 80067ce:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80067d0:	7b7b      	ldrb	r3, [r7, #13]
 80067d2:	b21a      	sxth	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067de:	b29b      	uxth	r3, r3
 80067e0:	021b      	lsls	r3, r3, #8
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	7b3b      	ldrb	r3, [r7, #12]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	4413      	add	r3, r2
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	b21a      	sxth	r2, r3
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80067f2:	7bfa      	ldrb	r2, [r7, #15]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	3302      	adds	r3, #2
 80067f8:	b212      	sxth	r2, r2
 80067fa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	3302      	adds	r3, #2
 8006800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006804:	b29b      	uxth	r3, r3
 8006806:	021b      	lsls	r3, r3, #8
 8006808:	b29a      	uxth	r2, r3
 800680a:	7bbb      	ldrb	r3, [r7, #14]
 800680c:	b29b      	uxth	r3, r3
 800680e:	4413      	add	r3, r2
 8006810:	b29a      	uxth	r2, r3
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	3302      	adds	r3, #2
 8006816:	b212      	sxth	r2, r2
 8006818:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800681a:	7c7a      	ldrb	r2, [r7, #17]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	3304      	adds	r3, #4
 8006820:	b212      	sxth	r2, r2
 8006822:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	3304      	adds	r3, #4
 8006828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800682c:	b29b      	uxth	r3, r3
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	b29a      	uxth	r2, r3
 8006832:	7c3b      	ldrb	r3, [r7, #16]
 8006834:	b29b      	uxth	r3, r3
 8006836:	4413      	add	r3, r2
 8006838:	b29a      	uxth	r2, r3
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	3304      	adds	r3, #4
 800683e:	b212      	sxth	r2, r2
 8006840:	801a      	strh	r2, [r3, #0]

  return ret;
 8006842:	697b      	ldr	r3, [r7, #20]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3718      	adds	r7, #24
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 8006858:	f107 0208 	add.w	r2, r7, #8
 800685c:	2301      	movs	r3, #1
 800685e:	2101      	movs	r1, #1
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff fc09 	bl	8006078 <lsm6dsr_read_reg>
 8006866:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d10f      	bne.n	800688e <lsm6dsr_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	f003 0303 	and.w	r3, r3, #3
 8006874:	b2da      	uxtb	r2, r3
 8006876:	7a3b      	ldrb	r3, [r7, #8]
 8006878:	f362 1387 	bfi	r3, r2, #6, #2
 800687c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800687e:	f107 0208 	add.w	r2, r7, #8
 8006882:	2301      	movs	r3, #1
 8006884:	2101      	movs	r1, #1
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff fc0e 	bl	80060a8 <lsm6dsr_write_reg>
 800688c:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 800688e:	68fb      	ldr	r3, [r7, #12]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 80068a2:	2301      	movs	r3, #1
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	210f      	movs	r1, #15
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7ff fbe5 	bl	8006078 <lsm6dsr_read_reg>
 80068ae:	60f8      	str	r0, [r7, #12]

  return ret;
 80068b0:	68fb      	ldr	r3, [r7, #12]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	460b      	mov	r3, r1
 80068c4:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80068c6:	f107 0208 	add.w	r2, r7, #8
 80068ca:	2301      	movs	r3, #1
 80068cc:	2112      	movs	r1, #18
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7ff fbd2 	bl	8006078 <lsm6dsr_read_reg>
 80068d4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10f      	bne.n	80068fc <lsm6dsr_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80068dc:	78fb      	ldrb	r3, [r7, #3]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	7a3b      	ldrb	r3, [r7, #8]
 80068e6:	f362 0300 	bfi	r3, r2, #0, #1
 80068ea:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80068ec:	f107 0208 	add.w	r2, r7, #8
 80068f0:	2301      	movs	r3, #1
 80068f2:	2112      	movs	r1, #18
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7ff fbd7 	bl	80060a8 <lsm6dsr_write_reg>
 80068fa:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068fc:	68fb      	ldr	r3, [r7, #12]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8006910:	f107 0208 	add.w	r2, r7, #8
 8006914:	2301      	movs	r3, #1
 8006916:	2112      	movs	r1, #18
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff fbad 	bl	8006078 <lsm6dsr_read_reg>
 800691e:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8006920:	7a3b      	ldrb	r3, [r7, #8]
 8006922:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	701a      	strb	r2, [r3, #0]

  return ret;
 800692e:	68fb      	ldr	r3, [r7, #12]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <lsm6dsr_xl_filter_lp2_set>:
  * @param  val    Change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006944:	f107 0208 	add.w	r2, r7, #8
 8006948:	2301      	movs	r3, #1
 800694a:	2110      	movs	r1, #16
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff fb93 	bl	8006078 <lsm6dsr_read_reg>
 8006952:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10f      	bne.n	800697a <lsm6dsr_xl_filter_lp2_set+0x42>
  {
    ctrl1_xl.lpf2_xl_en = (uint8_t)val;
 800695a:	78fb      	ldrb	r3, [r7, #3]
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	b2da      	uxtb	r2, r3
 8006962:	7a3b      	ldrb	r3, [r7, #8]
 8006964:	f362 0341 	bfi	r3, r2, #1, #1
 8006968:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800696a:	f107 0208 	add.w	r2, r7, #8
 800696e:	2301      	movs	r3, #1
 8006970:	2110      	movs	r1, #16
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff fb98 	bl	80060a8 <lsm6dsr_write_reg>
 8006978:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800697a:	68fb      	ldr	r3, [r7, #12]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <lsm6dsr_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dsr_hp_slope_xl_en_t val)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	460b      	mov	r3, r1
 800698e:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8006990:	f107 0208 	add.w	r2, r7, #8
 8006994:	2301      	movs	r3, #1
 8006996:	2117      	movs	r1, #23
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff fb6d 	bl	8006078 <lsm6dsr_read_reg>
 800699e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d121      	bne.n	80069ea <lsm6dsr_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 80069a6:	78fb      	ldrb	r3, [r7, #3]
 80069a8:	091b      	lsrs	r3, r3, #4
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	7a3b      	ldrb	r3, [r7, #8]
 80069b2:	f362 0382 	bfi	r3, r2, #2, #1
 80069b6:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	7a3b      	ldrb	r3, [r7, #8]
 80069c4:	f362 1304 	bfi	r3, r2, #4, #1
 80069c8:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 80069ca:	78fb      	ldrb	r3, [r7, #3]
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	7a3b      	ldrb	r3, [r7, #8]
 80069d4:	f362 1347 	bfi	r3, r2, #5, #3
 80069d8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL8_XL,
 80069da:	f107 0208 	add.w	r2, r7, #8
 80069de:	2301      	movs	r3, #1
 80069e0:	2117      	movs	r1, #23
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7ff fb60 	bl	80060a8 <lsm6dsr_write_reg>
 80069e8:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 80069ea:	68fb      	ldr	r3, [r7, #12]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006a00:	f107 0210 	add.w	r2, r7, #16
 8006a04:	2301      	movs	r3, #1
 8006a06:	2118      	movs	r1, #24
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff fb35 	bl	8006078 <lsm6dsr_read_reg>
 8006a0e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d111      	bne.n	8006a3a <lsm6dsr_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006a16:	78fb      	ldrb	r3, [r7, #3]
 8006a18:	09db      	lsrs	r3, r3, #7
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	f003 0301 	and.w	r3, r3, #1
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	7c3b      	ldrb	r3, [r7, #16]
 8006a24:	f362 0341 	bfi	r3, r2, #1, #1
 8006a28:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8006a2a:	f107 0210 	add.w	r2, r7, #16
 8006a2e:	2301      	movs	r3, #1
 8006a30:	2118      	movs	r1, #24
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7ff fb38 	bl	80060a8 <lsm6dsr_write_reg>
 8006a38:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d107      	bne.n	8006a50 <lsm6dsr_i3c_disable_set+0x5c>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8006a40:	f107 020c 	add.w	r2, r7, #12
 8006a44:	2301      	movs	r3, #1
 8006a46:	2162      	movs	r1, #98	; 0x62
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff fb15 	bl	8006078 <lsm6dsr_read_reg>
 8006a4e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10f      	bne.n	8006a76 <lsm6dsr_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	f003 0303 	and.w	r3, r3, #3
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	7b3b      	ldrb	r3, [r7, #12]
 8006a60:	f362 03c4 	bfi	r3, r2, #3, #2
 8006a64:	733b      	strb	r3, [r7, #12]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8006a66:	f107 020c 	add.w	r2, r7, #12
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	2162      	movs	r1, #98	; 0x62
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff fb1a 	bl	80060a8 <lsm6dsr_write_reg>
 8006a74:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8006a76:	697b      	ldr	r3, [r7, #20]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8006a8a:	2102      	movs	r1, #2
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff fedd 	bl	800684c <lsm6dsr_mem_bank_set>
 8006a92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d106      	bne.n	8006aa8 <lsm6dsr_fsm_enable_get+0x28>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 8006a9a:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	2146      	movs	r1, #70	; 0x46
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff fae9 	bl	8006078 <lsm6dsr_read_reg>
 8006aa6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d107      	bne.n	8006abe <lsm6dsr_fsm_enable_get+0x3e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	2147      	movs	r1, #71	; 0x47
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fade 	bl	8006078 <lsm6dsr_read_reg>
 8006abc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d104      	bne.n	8006ace <lsm6dsr_fsm_enable_get+0x4e>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fec0 	bl	800684c <lsm6dsr_mem_bank_set>
 8006acc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006ace:	68fb      	ldr	r3, [r7, #12]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8006ae2:	2102      	movs	r1, #2
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff feb1 	bl	800684c <lsm6dsr_mem_bank_set>
 8006aea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d107      	bne.n	8006b02 <lsm6dsr_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 8006af2:	f107 0208 	add.w	r2, r7, #8
 8006af6:	2301      	movs	r3, #1
 8006af8:	215f      	movs	r1, #95	; 0x5f
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff fabc 	bl	8006078 <lsm6dsr_read_reg>
 8006b00:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d104      	bne.n	8006b12 <lsm6dsr_fsm_data_rate_get+0x3a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8006b08:	2100      	movs	r1, #0
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7ff fe9e 	bl	800684c <lsm6dsr_mem_bank_set>
 8006b10:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8006b12:	7a3b      	ldrb	r3, [r7, #8]
 8006b14:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d81a      	bhi.n	8006b54 <lsm6dsr_fsm_data_rate_get+0x7c>
 8006b1e:	a201      	add	r2, pc, #4	; (adr r2, 8006b24 <lsm6dsr_fsm_data_rate_get+0x4c>)
 8006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b24:	08006b35 	.word	0x08006b35
 8006b28:	08006b3d 	.word	0x08006b3d
 8006b2c:	08006b45 	.word	0x08006b45
 8006b30:	08006b4d 	.word	0x08006b4d
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2200      	movs	r2, #0
 8006b38:	701a      	strb	r2, [r3, #0]
      break;
 8006b3a:	e00f      	b.n	8006b5c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	701a      	strb	r2, [r3, #0]
      break;
 8006b42:	e00b      	b.n	8006b5c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	2202      	movs	r2, #2
 8006b48:	701a      	strb	r2, [r3, #0]
      break;
 8006b4a:	e007      	b.n	8006b5c <lsm6dsr_fsm_data_rate_get+0x84>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2203      	movs	r2, #3
 8006b50:	701a      	strb	r2, [r3, #0]
      break;
 8006b52:	e003      	b.n	8006b5c <lsm6dsr_fsm_data_rate_get+0x84>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	2200      	movs	r2, #0
 8006b58:	701a      	strb	r2, [r3, #0]
      break;
 8006b5a:	bf00      	nop
  }

  return ret;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop

08006b68 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]
  while (size--) {
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	1e5a      	subs	r2, r3, #1
 8006b7c:	607a      	str	r2, [r7, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	bf14      	ite	ne
 8006b82:	2301      	movne	r3, #1
 8006b84:	2300      	moveq	r3, #0
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00e      	beq.n	8006baa <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	1c59      	adds	r1, r3, #1
 8006b96:	60b9      	str	r1, [r7, #8]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	4790      	blx	r2
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]
  while (size--) {
 8006ba8:	e7e6      	b.n	8006b78 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8006baa:	697b      	ldr	r3, [r7, #20]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	4a06      	ldr	r2, [pc, #24]	; (8006bd8 <_ZN5PrintC1Ev+0x24>)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	605a      	str	r2, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	0801750c 	.word	0x0801750c

08006bdc <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff ffe4 	bl	8006bb4 <_ZN5PrintC1Ev>
 8006bec:	4a05      	ldr	r2, [pc, #20]	; (8006c04 <_ZN6StreamC1Ev+0x28>)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bf8:	609a      	str	r2, [r3, #8]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	0801753c 	.word	0x0801753c

08006c08 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff ffe1 	bl	8006bdc <_ZN6StreamC1Ev>
 8006c1a:	4a16      	ldr	r2, [pc, #88]	; (8006c74 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3390      	adds	r3, #144	; 0x90
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f00a fb9c 	bl	801136c <memset>
  rxBufferIndex = 0;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	0801751c 	.word	0x0801751c

08006c78 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01d      	beq.n	8006cca <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006c94:	2b1f      	cmp	r3, #31
 8006c96:	d901      	bls.n	8006c9c <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e028      	b.n	8006cee <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	78fa      	ldrb	r2, [r7, #3]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	440b      	add	r3, r1
 8006caa:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8006cc8:	e010      	b.n	8006cec <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f984 	bl	8006fd8 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8006cd0:	1cfb      	adds	r3, r7, #3
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f8b7 	bl	8006e4a <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f949 	bl	8006f74 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	333c      	adds	r3, #60	; 0x3c
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 fde8 	bl	80088bc <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8006cec:	2301      	movs	r3, #1
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b086      	sub	sp, #24
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d013      	beq.n	8006d34 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d21e      	bcs.n	8006d56 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	440a      	add	r2, r1
 8006d24:	7812      	ldrb	r2, [r2, #0]
 8006d26:	4611      	mov	r1, r2
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	e7ed      	b.n	8006d10 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f94f 	bl	8006fd8 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f882 	bl	8006e4a <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f914 	bl	8006f74 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	333c      	adds	r3, #60	; 0x3c
 8006d50:	4618      	mov	r0, r3
 8006d52:	f001 fdb3 	bl	80088bc <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8006d56:	687b      	ldr	r3, [r7, #4]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3718      	adds	r7, #24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	1ad3      	subs	r3, r2, r3
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006d90:	f04f 33ff 	mov.w	r3, #4294967295
 8006d94:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	429a      	cmp	r2, r3
 8006da8:	bf34      	ite	cc
 8006daa:	2301      	movcc	r3, #1
 8006dac:	2300      	movcs	r3, #0
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d012      	beq.n	8006dda <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006dc6:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8006dda:	68fb      	ldr	r3, [r7, #12]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  int value = -1;
 8006df0:	f04f 33ff 	mov.w	r3, #4294967295
 8006df4:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	429a      	cmp	r2, r3
 8006e08:	bf34      	ite	cc
 8006e0a:	2301      	movcc	r3, #1
 8006e0c:	2300      	movcs	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d009      	beq.n	8006e28 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4413      	add	r3, r2
 8006e22:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8006e26:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8006e28:	68fb      	ldr	r3, [r7, #12]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8006e3e:	bf00      	nop
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b089      	sub	sp, #36	; 0x24
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5e:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dd41      	ble.n	8006eea <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8006e66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e6a:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e76:	2b80      	cmp	r3, #128	; 0x80
 8006e78:	bf14      	ite	ne
 8006e7a:	2301      	movne	r3, #1
 8006e7c:	2300      	moveq	r3, #0
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d008      	beq.n	8006e96 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d1ed      	bne.n	8006e6c <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8006e90:	f04f 33ff 	mov.w	r3, #4294967295
 8006e94:	e068      	b.n	8006f68 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	60ba      	str	r2, [r7, #8]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	611a      	str	r2, [r3, #16]
        length--;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	607b      	str	r3, [r7, #4]
        size++;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	3301      	adds	r3, #1
 8006eae:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d104      	bne.n	8006ec8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e000      	b.n	8006eca <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0c8      	beq.n	8006e60 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	60ba      	str	r2, [r7, #8]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	611a      	str	r2, [r3, #16]
            length--;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	607b      	str	r3, [r7, #4]
            size++;
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8006ee8:	e7ba      	b.n	8006e60 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8006eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006eee:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efe:	bf14      	ite	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	2300      	moveq	r3, #0
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d008      	beq.n	8006f1c <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1ec      	bne.n	8006ef0 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8006f16:	f04f 33ff 	mov.w	r3, #4294967295
 8006f1a:	e025      	b.n	8006f68 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f20:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f24:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8006f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f2a:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	bf0c      	ite	eq
 8006f3a:	2301      	moveq	r3, #1
 8006f3c:	2300      	movne	r3, #0
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d008      	beq.n	8006f56 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1ed      	bne.n	8006f2c <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8006f50:	f04f 33ff 	mov.w	r3, #4294967295
 8006f54:	e008      	b.n	8006f68 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8006f66:	69bb      	ldr	r3, [r7, #24]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3724      	adds	r7, #36	; 0x24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f80:	4a12      	ldr	r2, [pc, #72]	; (8006fcc <_ZN7TwoWire15enableInterruptEv+0x58>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d106      	bne.n	8006f94 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8006f86:	2049      	movs	r0, #73	; 0x49
 8006f88:	f000 fe22 	bl	8007bd0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8006f8c:	2048      	movs	r0, #72	; 0x48
 8006f8e:	f000 fe1f 	bl	8007bd0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8006f92:	e016      	b.n	8006fc2 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f98:	4a0d      	ldr	r2, [pc, #52]	; (8006fd0 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d106      	bne.n	8006fac <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8006f9e:	2022      	movs	r0, #34	; 0x22
 8006fa0:	f000 fe16 	bl	8007bd0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006fa4:	2021      	movs	r0, #33	; 0x21
 8006fa6:	f000 fe13 	bl	8007bd0 <HAL_NVIC_EnableIRQ>
}
 8006faa:	e00a      	b.n	8006fc2 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb0:	4a08      	ldr	r2, [pc, #32]	; (8006fd4 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d105      	bne.n	8006fc2 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006fb6:	2020      	movs	r0, #32
 8006fb8:	f000 fe0a 	bl	8007bd0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006fbc:	201f      	movs	r0, #31
 8006fbe:	f000 fe07 	bl	8007bd0 <HAL_NVIC_EnableIRQ>
}
 8006fc2:	bf00      	nop
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40005c00 	.word	0x40005c00
 8006fd0:	40005800 	.word	0x40005800
 8006fd4:	40005400 	.word	0x40005400

08006fd8 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe4:	4a12      	ldr	r2, [pc, #72]	; (8007030 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d106      	bne.n	8006ff8 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8006fea:	2049      	movs	r0, #73	; 0x49
 8006fec:	f000 fdfe 	bl	8007bec <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8006ff0:	2048      	movs	r0, #72	; 0x48
 8006ff2:	f000 fdfb 	bl	8007bec <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8006ff6:	e016      	b.n	8007026 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffc:	4a0d      	ldr	r2, [pc, #52]	; (8007034 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d106      	bne.n	8007010 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8007002:	2022      	movs	r0, #34	; 0x22
 8007004:	f000 fdf2 	bl	8007bec <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8007008:	2021      	movs	r0, #33	; 0x21
 800700a:	f000 fdef 	bl	8007bec <HAL_NVIC_DisableIRQ>
}
 800700e:	e00a      	b.n	8007026 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007014:	4a08      	ldr	r2, [pc, #32]	; (8007038 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d105      	bne.n	8007026 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800701a:	2020      	movs	r0, #32
 800701c:	f000 fde6 	bl	8007bec <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8007020:	201f      	movs	r0, #31
 8007022:	f000 fde3 	bl	8007bec <HAL_NVIC_DisableIRQ>
}
 8007026:	bf00      	nop
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40005c00 	.word	0x40005c00
 8007034:	40005800 	.word	0x40005800
 8007038:	40005400 	.word	0x40005400

0800703c <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d110      	bne.n	800706e <_Z41__static_initialization_and_destruction_0ii+0x32>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007052:	4293      	cmp	r3, r2
 8007054:	d10b      	bne.n	800706e <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8007056:	4908      	ldr	r1, [pc, #32]	; (8007078 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8007058:	4808      	ldr	r0, [pc, #32]	; (800707c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800705a:	f7ff fdd5 	bl	8006c08 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 800705e:	4908      	ldr	r1, [pc, #32]	; (8007080 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8007060:	4808      	ldr	r0, [pc, #32]	; (8007084 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8007062:	f7ff fdd1 	bl	8006c08 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8007066:	4908      	ldr	r1, [pc, #32]	; (8007088 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007068:	4808      	ldr	r0, [pc, #32]	; (800708c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800706a:	f7ff fdcd 	bl	8006c08 <_ZN7TwoWireC1EP11I2C_TypeDef>
 800706e:	bf00      	nop
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	40005400 	.word	0x40005400
 800707c:	200003e0 	.word	0x200003e0
 8007080:	40005800 	.word	0x40005800
 8007084:	20000498 	.word	0x20000498
 8007088:	40005c00 	.word	0x40005c00
 800708c:	20000550 	.word	0x20000550

08007090 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
 8007094:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007098:	2001      	movs	r0, #1
 800709a:	f7ff ffcf 	bl	800703c <_Z41__static_initialization_and_destruction_0ii>
 800709e:	bd80      	pop	{r7, pc}

080070a0 <MRT_radio_tx>:
#include <iwdg.h>
#include <string.h>
#include <sx126x.h>


void MRT_radio_tx(char* buffer){
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
			sx126x_set_tx(&SRADIO_SPI, 1000, SRADIO_BUFFER_SIZE);
			TxProtocol((uint8_t*) buffer, strlen(buffer));
		}
	#endif

	print((char*) "Radio sending:\t");
 80070a8:	4804      	ldr	r0, [pc, #16]	; (80070bc <MRT_radio_tx+0x1c>)
 80070aa:	f7f9 ffcd 	bl	8001048 <print>
	println(buffer);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7f9 ffac 	bl	800100c <println>
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	080173a0 	.word	0x080173a0

080070c0 <MRT_radio_Init>:
	println(buffer);
}



void MRT_radio_Init(void){
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
	println("\r\nRadio Init");
 80070c4:	4803      	ldr	r0, [pc, #12]	; (80070d4 <MRT_radio_Init+0x14>)
 80070c6:	f7f9 ffa1 	bl	800100c <println>
	set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
	//Tx_setup();
	Rx_setup();
	println("OK");
	#else
	println("\tNo radio currently in use");
 80070ca:	4803      	ldr	r0, [pc, #12]	; (80070d8 <MRT_radio_Init+0x18>)
 80070cc:	f7f9 ff9e 	bl	800100c <println>
	#endif
}
 80070d0:	bf00      	nop
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	080173c4 	.word	0x080173c4
 80070d8:	080173d4 	.word	0x080173d4

080070dc <MRT_TELEMETRY_Init>:


void MRT_TELEMETRY_Init(void){
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0

	MRT_radio_Init();
 80070e0:	f7ff ffee 	bl	80070c0 <MRT_radio_Init>

	HAL_IWDG_Refresh(&hiwdg);
 80070e4:	4802      	ldr	r0, [pc, #8]	; (80070f0 <MRT_TELEMETRY_Init+0x14>)
 80070e6:	f002 f837 	bl	8009158 <HAL_IWDG_Refresh>
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, print);
		#else
		hiridium = MRT_Iridium_Init(IRIDIUM_TIMEOUT, IRIDIUM_I2C, no_print); //Doesn't print the internal commands
		#endif
	#endif
}
 80070ea:	bf00      	nop
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20006160 	.word	0x20006160

080070f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80070f8:	4b0e      	ldr	r3, [pc, #56]	; (8007134 <HAL_Init+0x40>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a0d      	ldr	r2, [pc, #52]	; (8007134 <HAL_Init+0x40>)
 80070fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007104:	4b0b      	ldr	r3, [pc, #44]	; (8007134 <HAL_Init+0x40>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a0a      	ldr	r2, [pc, #40]	; (8007134 <HAL_Init+0x40>)
 800710a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800710e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007110:	4b08      	ldr	r3, [pc, #32]	; (8007134 <HAL_Init+0x40>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a07      	ldr	r2, [pc, #28]	; (8007134 <HAL_Init+0x40>)
 8007116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800711a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800711c:	2003      	movs	r0, #3
 800711e:	f000 fd30 	bl	8007b82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007122:	200f      	movs	r0, #15
 8007124:	f7fc f8b6 	bl	8003294 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007128:	f7fc f888 	bl	800323c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	40023c00 	.word	0x40023c00

08007138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800713c:	4b06      	ldr	r3, [pc, #24]	; (8007158 <HAL_IncTick+0x20>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	461a      	mov	r2, r3
 8007142:	4b06      	ldr	r3, [pc, #24]	; (800715c <HAL_IncTick+0x24>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4413      	add	r3, r2
 8007148:	4a04      	ldr	r2, [pc, #16]	; (800715c <HAL_IncTick+0x24>)
 800714a:	6013      	str	r3, [r2, #0]
}
 800714c:	bf00      	nop
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	200000b4 	.word	0x200000b4
 800715c:	200065fc 	.word	0x200065fc

08007160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007160:	b480      	push	{r7}
 8007162:	af00      	add	r7, sp, #0
  return uwTick;
 8007164:	4b03      	ldr	r3, [pc, #12]	; (8007174 <HAL_GetTick+0x14>)
 8007166:	681b      	ldr	r3, [r3, #0]
}
 8007168:	4618      	mov	r0, r3
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	200065fc 	.word	0x200065fc

08007178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007180:	f7ff ffee 	bl	8007160 <HAL_GetTick>
 8007184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007190:	d005      	beq.n	800719e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <HAL_Delay+0x44>)
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	461a      	mov	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800719e:	bf00      	nop
 80071a0:	f7ff ffde 	bl	8007160 <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d8f7      	bhi.n	80071a0 <HAL_Delay+0x28>
  {
  }
}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	200000b4 	.word	0x200000b4

080071c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e033      	b.n	800723e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d109      	bne.n	80071f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7fa f976 	bl	80014d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	f003 0310 	and.w	r3, r3, #16
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d118      	bne.n	8007230 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007206:	f023 0302 	bic.w	r3, r3, #2
 800720a:	f043 0202 	orr.w	r2, r3, #2
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fae8 	bl	80077e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	f043 0201 	orr.w	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	641a      	str	r2, [r3, #64]	; 0x40
 800722e:	e001      	b.n	8007234 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800725a:	2b01      	cmp	r3, #1
 800725c:	d101      	bne.n	8007262 <HAL_ADC_Start+0x1a>
 800725e:	2302      	movs	r3, #2
 8007260:	e0b2      	b.n	80073c8 <HAL_ADC_Start+0x180>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b01      	cmp	r3, #1
 8007276:	d018      	beq.n	80072aa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0201 	orr.w	r2, r2, #1
 8007286:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007288:	4b52      	ldr	r3, [pc, #328]	; (80073d4 <HAL_ADC_Start+0x18c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a52      	ldr	r2, [pc, #328]	; (80073d8 <HAL_ADC_Start+0x190>)
 800728e:	fba2 2303 	umull	r2, r3, r2, r3
 8007292:	0c9a      	lsrs	r2, r3, #18
 8007294:	4613      	mov	r3, r2
 8007296:	005b      	lsls	r3, r3, #1
 8007298:	4413      	add	r3, r2
 800729a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800729c:	e002      	b.n	80072a4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1f9      	bne.n	800729e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d17a      	bne.n	80073ae <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072bc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80072c0:	f023 0301 	bic.w	r3, r3, #1
 80072c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d007      	beq.n	80072ea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80072e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f6:	d106      	bne.n	8007306 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fc:	f023 0206 	bic.w	r2, r3, #6
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	645a      	str	r2, [r3, #68]	; 0x44
 8007304:	e002      	b.n	800730c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007314:	4b31      	ldr	r3, [pc, #196]	; (80073dc <HAL_ADC_Start+0x194>)
 8007316:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007320:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f003 031f 	and.w	r3, r3, #31
 800732a:	2b00      	cmp	r3, #0
 800732c:	d12a      	bne.n	8007384 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a2b      	ldr	r2, [pc, #172]	; (80073e0 <HAL_ADC_Start+0x198>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d015      	beq.n	8007364 <HAL_ADC_Start+0x11c>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a29      	ldr	r2, [pc, #164]	; (80073e4 <HAL_ADC_Start+0x19c>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d105      	bne.n	800734e <HAL_ADC_Start+0x106>
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <HAL_ADC_Start+0x194>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a25      	ldr	r2, [pc, #148]	; (80073e8 <HAL_ADC_Start+0x1a0>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d136      	bne.n	80073c6 <HAL_ADC_Start+0x17e>
 8007358:	4b20      	ldr	r3, [pc, #128]	; (80073dc <HAL_ADC_Start+0x194>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f003 0310 	and.w	r3, r3, #16
 8007360:	2b00      	cmp	r3, #0
 8007362:	d130      	bne.n	80073c6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d129      	bne.n	80073c6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007380:	609a      	str	r2, [r3, #8]
 8007382:	e020      	b.n	80073c6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a15      	ldr	r2, [pc, #84]	; (80073e0 <HAL_ADC_Start+0x198>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d11b      	bne.n	80073c6 <HAL_ADC_Start+0x17e>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d114      	bne.n	80073c6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689a      	ldr	r2, [r3, #8]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80073aa:	609a      	str	r2, [r3, #8]
 80073ac:	e00b      	b.n	80073c6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f043 0210 	orr.w	r2, r3, #16
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073be:	f043 0201 	orr.w	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	20000088 	.word	0x20000088
 80073d8:	431bde83 	.word	0x431bde83
 80073dc:	40012300 	.word	0x40012300
 80073e0:	40012000 	.word	0x40012000
 80073e4:	40012100 	.word	0x40012100
 80073e8:	40012200 	.word	0x40012200

080073ec <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d101      	bne.n	8007402 <HAL_ADC_Stop+0x16>
 80073fe:	2302      	movs	r3, #2
 8007400:	e021      	b.n	8007446 <HAL_ADC_Stop+0x5a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d109      	bne.n	800743c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	f043 0201 	orr.w	r2, r3, #1
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	370c      	adds	r7, #12
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800746a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800746e:	d113      	bne.n	8007498 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800747a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747e:	d10b      	bne.n	8007498 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	f043 0220 	orr.w	r2, r3, #32
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e063      	b.n	8007560 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007498:	f7ff fe62 	bl	8007160 <HAL_GetTick>
 800749c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800749e:	e021      	b.n	80074e4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a6:	d01d      	beq.n	80074e4 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <HAL_ADC_PollForConversion+0x6c>
 80074ae:	f7ff fe57 	bl	8007160 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d212      	bcs.n	80074e4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0302 	and.w	r3, r3, #2
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d00b      	beq.n	80074e4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d0:	f043 0204 	orr.w	r2, r3, #4
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e03d      	b.n	8007560 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d1d6      	bne.n	80074a0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f06f 0212 	mvn.w	r2, #18
 80074fa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007500:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d123      	bne.n	800755e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800751a:	2b00      	cmp	r3, #0
 800751c:	d11f      	bne.n	800755e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007528:	2b00      	cmp	r3, #0
 800752a:	d006      	beq.n	800753a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007536:	2b00      	cmp	r3, #0
 8007538:	d111      	bne.n	800755e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d105      	bne.n	800755e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f043 0201 	orr.w	r2, r3, #1
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
	...

08007584 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007598:	2b01      	cmp	r3, #1
 800759a:	d101      	bne.n	80075a0 <HAL_ADC_ConfigChannel+0x1c>
 800759c:	2302      	movs	r3, #2
 800759e:	e113      	b.n	80077c8 <HAL_ADC_ConfigChannel+0x244>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b09      	cmp	r3, #9
 80075ae:	d925      	bls.n	80075fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68d9      	ldr	r1, [r3, #12]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	4613      	mov	r3, r2
 80075c0:	005b      	lsls	r3, r3, #1
 80075c2:	4413      	add	r3, r2
 80075c4:	3b1e      	subs	r3, #30
 80075c6:	2207      	movs	r2, #7
 80075c8:	fa02 f303 	lsl.w	r3, r2, r3
 80075cc:	43da      	mvns	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	400a      	ands	r2, r1
 80075d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68d9      	ldr	r1, [r3, #12]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	4618      	mov	r0, r3
 80075e8:	4603      	mov	r3, r0
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	4403      	add	r3, r0
 80075ee:	3b1e      	subs	r3, #30
 80075f0:	409a      	lsls	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	60da      	str	r2, [r3, #12]
 80075fa:	e022      	b.n	8007642 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6919      	ldr	r1, [r3, #16]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	461a      	mov	r2, r3
 800760a:	4613      	mov	r3, r2
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	4413      	add	r3, r2
 8007610:	2207      	movs	r2, #7
 8007612:	fa02 f303 	lsl.w	r3, r2, r3
 8007616:	43da      	mvns	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	400a      	ands	r2, r1
 800761e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6919      	ldr	r1, [r3, #16]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	689a      	ldr	r2, [r3, #8]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	4618      	mov	r0, r3
 8007632:	4603      	mov	r3, r0
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	4403      	add	r3, r0
 8007638:	409a      	lsls	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2b06      	cmp	r3, #6
 8007648:	d824      	bhi.n	8007694 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	4613      	mov	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	4413      	add	r3, r2
 800765a:	3b05      	subs	r3, #5
 800765c:	221f      	movs	r2, #31
 800765e:	fa02 f303 	lsl.w	r3, r2, r3
 8007662:	43da      	mvns	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	400a      	ands	r2, r1
 800766a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	b29b      	uxth	r3, r3
 8007678:	4618      	mov	r0, r3
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	3b05      	subs	r3, #5
 8007686:	fa00 f203 	lsl.w	r2, r0, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	635a      	str	r2, [r3, #52]	; 0x34
 8007692:	e04c      	b.n	800772e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b0c      	cmp	r3, #12
 800769a:	d824      	bhi.n	80076e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685a      	ldr	r2, [r3, #4]
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	3b23      	subs	r3, #35	; 0x23
 80076ae:	221f      	movs	r2, #31
 80076b0:	fa02 f303 	lsl.w	r3, r2, r3
 80076b4:	43da      	mvns	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	400a      	ands	r2, r1
 80076bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	4618      	mov	r0, r3
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685a      	ldr	r2, [r3, #4]
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	3b23      	subs	r3, #35	; 0x23
 80076d8:	fa00 f203 	lsl.w	r2, r0, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	430a      	orrs	r2, r1
 80076e2:	631a      	str	r2, [r3, #48]	; 0x30
 80076e4:	e023      	b.n	800772e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	4613      	mov	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	3b41      	subs	r3, #65	; 0x41
 80076f8:	221f      	movs	r2, #31
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	43da      	mvns	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	400a      	ands	r2, r1
 8007706:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	b29b      	uxth	r3, r3
 8007714:	4618      	mov	r0, r3
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	4613      	mov	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	3b41      	subs	r3, #65	; 0x41
 8007722:	fa00 f203 	lsl.w	r2, r0, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800772e:	4b29      	ldr	r3, [pc, #164]	; (80077d4 <HAL_ADC_ConfigChannel+0x250>)
 8007730:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a28      	ldr	r2, [pc, #160]	; (80077d8 <HAL_ADC_ConfigChannel+0x254>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d10f      	bne.n	800775c <HAL_ADC_ConfigChannel+0x1d8>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b12      	cmp	r3, #18
 8007742:	d10b      	bne.n	800775c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a1d      	ldr	r2, [pc, #116]	; (80077d8 <HAL_ADC_ConfigChannel+0x254>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d12b      	bne.n	80077be <HAL_ADC_ConfigChannel+0x23a>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a1c      	ldr	r2, [pc, #112]	; (80077dc <HAL_ADC_ConfigChannel+0x258>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d003      	beq.n	8007778 <HAL_ADC_ConfigChannel+0x1f4>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b11      	cmp	r3, #17
 8007776:	d122      	bne.n	80077be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a11      	ldr	r2, [pc, #68]	; (80077dc <HAL_ADC_ConfigChannel+0x258>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d111      	bne.n	80077be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800779a:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <HAL_ADC_ConfigChannel+0x25c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a11      	ldr	r2, [pc, #68]	; (80077e4 <HAL_ADC_ConfigChannel+0x260>)
 80077a0:	fba2 2303 	umull	r2, r3, r2, r3
 80077a4:	0c9a      	lsrs	r2, r3, #18
 80077a6:	4613      	mov	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	4413      	add	r3, r2
 80077ac:	005b      	lsls	r3, r3, #1
 80077ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80077b0:	e002      	b.n	80077b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1f9      	bne.n	80077b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	40012300 	.word	0x40012300
 80077d8:	40012000 	.word	0x40012000
 80077dc:	10000012 	.word	0x10000012
 80077e0:	20000088 	.word	0x20000088
 80077e4:	431bde83 	.word	0x431bde83

080077e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80077f0:	4b79      	ldr	r3, [pc, #484]	; (80079d8 <ADC_Init+0x1f0>)
 80077f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	431a      	orrs	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800781c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	6859      	ldr	r1, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	021a      	lsls	r2, r3, #8
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6859      	ldr	r1, [r3, #4]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007862:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6899      	ldr	r1, [r3, #8]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68da      	ldr	r2, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	4a58      	ldr	r2, [pc, #352]	; (80079dc <ADC_Init+0x1f4>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d022      	beq.n	80078c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689a      	ldr	r2, [r3, #8]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800788e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6899      	ldr	r1, [r3, #8]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	430a      	orrs	r2, r1
 80078a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689a      	ldr	r2, [r3, #8]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80078b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	6899      	ldr	r1, [r3, #8]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	430a      	orrs	r2, r1
 80078c2:	609a      	str	r2, [r3, #8]
 80078c4:	e00f      	b.n	80078e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80078d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80078e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689a      	ldr	r2, [r3, #8]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0202 	bic.w	r2, r2, #2
 80078f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6899      	ldr	r1, [r3, #8]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	7e1b      	ldrb	r3, [r3, #24]
 8007900:	005a      	lsls	r2, r3, #1
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d01b      	beq.n	800794c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685a      	ldr	r2, [r3, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007922:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685a      	ldr	r2, [r3, #4]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007932:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6859      	ldr	r1, [r3, #4]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	3b01      	subs	r3, #1
 8007940:	035a      	lsls	r2, r3, #13
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	e007      	b.n	800795c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800795a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	3b01      	subs	r3, #1
 8007978:	051a      	lsls	r2, r3, #20
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6899      	ldr	r1, [r3, #8]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800799e:	025a      	lsls	r2, r3, #9
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6899      	ldr	r1, [r3, #8]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	029a      	lsls	r2, r3, #10
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	609a      	str	r2, [r3, #8]
}
 80079cc:	bf00      	nop
 80079ce:	3714      	adds	r7, #20
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	40012300 	.word	0x40012300
 80079dc:	0f000001 	.word	0x0f000001

080079e0 <__NVIC_SetPriorityGrouping>:
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079f0:	4b0c      	ldr	r3, [pc, #48]	; (8007a24 <__NVIC_SetPriorityGrouping+0x44>)
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079fc:	4013      	ands	r3, r2
 80079fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a12:	4a04      	ldr	r2, [pc, #16]	; (8007a24 <__NVIC_SetPriorityGrouping+0x44>)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	60d3      	str	r3, [r2, #12]
}
 8007a18:	bf00      	nop
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	e000ed00 	.word	0xe000ed00

08007a28 <__NVIC_GetPriorityGrouping>:
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a2c:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <__NVIC_GetPriorityGrouping+0x18>)
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	0a1b      	lsrs	r3, r3, #8
 8007a32:	f003 0307 	and.w	r3, r3, #7
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	e000ed00 	.word	0xe000ed00

08007a44 <__NVIC_EnableIRQ>:
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	db0b      	blt.n	8007a6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	f003 021f 	and.w	r2, r3, #31
 8007a5c:	4907      	ldr	r1, [pc, #28]	; (8007a7c <__NVIC_EnableIRQ+0x38>)
 8007a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a62:	095b      	lsrs	r3, r3, #5
 8007a64:	2001      	movs	r0, #1
 8007a66:	fa00 f202 	lsl.w	r2, r0, r2
 8007a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007a6e:	bf00      	nop
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	e000e100 	.word	0xe000e100

08007a80 <__NVIC_DisableIRQ>:
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	4603      	mov	r3, r0
 8007a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	db12      	blt.n	8007ab8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	f003 021f 	and.w	r2, r3, #31
 8007a98:	490a      	ldr	r1, [pc, #40]	; (8007ac4 <__NVIC_DisableIRQ+0x44>)
 8007a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a9e:	095b      	lsrs	r3, r3, #5
 8007aa0:	2001      	movs	r0, #1
 8007aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8007aa6:	3320      	adds	r3, #32
 8007aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007aac:	f3bf 8f4f 	dsb	sy
}
 8007ab0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007ab2:	f3bf 8f6f 	isb	sy
}
 8007ab6:	bf00      	nop
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	e000e100 	.word	0xe000e100

08007ac8 <__NVIC_SetPriority>:
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	6039      	str	r1, [r7, #0]
 8007ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	db0a      	blt.n	8007af2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	b2da      	uxtb	r2, r3
 8007ae0:	490c      	ldr	r1, [pc, #48]	; (8007b14 <__NVIC_SetPriority+0x4c>)
 8007ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ae6:	0112      	lsls	r2, r2, #4
 8007ae8:	b2d2      	uxtb	r2, r2
 8007aea:	440b      	add	r3, r1
 8007aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007af0:	e00a      	b.n	8007b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	4908      	ldr	r1, [pc, #32]	; (8007b18 <__NVIC_SetPriority+0x50>)
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	f003 030f 	and.w	r3, r3, #15
 8007afe:	3b04      	subs	r3, #4
 8007b00:	0112      	lsls	r2, r2, #4
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	440b      	add	r3, r1
 8007b06:	761a      	strb	r2, [r3, #24]
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr
 8007b14:	e000e100 	.word	0xe000e100
 8007b18:	e000ed00 	.word	0xe000ed00

08007b1c <NVIC_EncodePriority>:
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b089      	sub	sp, #36	; 0x24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	f1c3 0307 	rsb	r3, r3, #7
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	bf28      	it	cs
 8007b3a:	2304      	movcs	r3, #4
 8007b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	3304      	adds	r3, #4
 8007b42:	2b06      	cmp	r3, #6
 8007b44:	d902      	bls.n	8007b4c <NVIC_EncodePriority+0x30>
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	3b03      	subs	r3, #3
 8007b4a:	e000      	b.n	8007b4e <NVIC_EncodePriority+0x32>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b50:	f04f 32ff 	mov.w	r2, #4294967295
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5a:	43da      	mvns	r2, r3
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	401a      	ands	r2, r3
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b64:	f04f 31ff 	mov.w	r1, #4294967295
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b6e:	43d9      	mvns	r1, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b74:	4313      	orrs	r3, r2
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3724      	adds	r7, #36	; 0x24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b082      	sub	sp, #8
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7ff ff28 	bl	80079e0 <__NVIC_SetPriorityGrouping>
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007baa:	f7ff ff3d 	bl	8007a28 <__NVIC_GetPriorityGrouping>
 8007bae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	68b9      	ldr	r1, [r7, #8]
 8007bb4:	6978      	ldr	r0, [r7, #20]
 8007bb6:	f7ff ffb1 	bl	8007b1c <NVIC_EncodePriority>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7ff ff80 	bl	8007ac8 <__NVIC_SetPriority>
}
 8007bc8:	bf00      	nop
 8007bca:	3718      	adds	r7, #24
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7ff ff30 	bl	8007a44 <__NVIC_EnableIRQ>
}
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff ff40 	bl	8007a80 <__NVIC_DisableIRQ>
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b089      	sub	sp, #36	; 0x24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c1e:	2300      	movs	r3, #0
 8007c20:	61fb      	str	r3, [r7, #28]
 8007c22:	e177      	b.n	8007f14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c24:	2201      	movs	r2, #1
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	4013      	ands	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	f040 8166 	bne.w	8007f0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d005      	beq.n	8007c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d130      	bne.n	8007cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	005b      	lsls	r3, r3, #1
 8007c64:	2203      	movs	r2, #3
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	69ba      	ldr	r2, [r7, #24]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c90:	2201      	movs	r2, #1
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	fa02 f303 	lsl.w	r3, r2, r3
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	091b      	lsrs	r3, r3, #4
 8007ca6:	f003 0201 	and.w	r2, r3, #1
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f003 0303 	and.w	r3, r3, #3
 8007cc4:	2b03      	cmp	r3, #3
 8007cc6:	d017      	beq.n	8007cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	2203      	movs	r2, #3
 8007cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd8:	43db      	mvns	r3, r3
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	4013      	ands	r3, r2
 8007cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	689a      	ldr	r2, [r3, #8]
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	005b      	lsls	r3, r3, #1
 8007ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f003 0303 	and.w	r3, r3, #3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d123      	bne.n	8007d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	08da      	lsrs	r2, r3, #3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	3208      	adds	r2, #8
 8007d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	f003 0307 	and.w	r3, r3, #7
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	220f      	movs	r2, #15
 8007d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d20:	43db      	mvns	r3, r3
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	4013      	ands	r3, r2
 8007d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	691a      	ldr	r2, [r3, #16]
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	fa02 f303 	lsl.w	r3, r2, r3
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	08da      	lsrs	r2, r3, #3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3208      	adds	r2, #8
 8007d46:	69b9      	ldr	r1, [r7, #24]
 8007d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	2203      	movs	r2, #3
 8007d58:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	4013      	ands	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f003 0203 	and.w	r2, r3, #3
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	fa02 f303 	lsl.w	r3, r2, r3
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 80c0 	beq.w	8007f0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60fb      	str	r3, [r7, #12]
 8007d92:	4b66      	ldr	r3, [pc, #408]	; (8007f2c <HAL_GPIO_Init+0x324>)
 8007d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d96:	4a65      	ldr	r2, [pc, #404]	; (8007f2c <HAL_GPIO_Init+0x324>)
 8007d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8007d9e:	4b63      	ldr	r3, [pc, #396]	; (8007f2c <HAL_GPIO_Init+0x324>)
 8007da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007daa:	4a61      	ldr	r2, [pc, #388]	; (8007f30 <HAL_GPIO_Init+0x328>)
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	089b      	lsrs	r3, r3, #2
 8007db0:	3302      	adds	r3, #2
 8007db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	220f      	movs	r2, #15
 8007dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc6:	43db      	mvns	r3, r3
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a58      	ldr	r2, [pc, #352]	; (8007f34 <HAL_GPIO_Init+0x32c>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d037      	beq.n	8007e46 <HAL_GPIO_Init+0x23e>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a57      	ldr	r2, [pc, #348]	; (8007f38 <HAL_GPIO_Init+0x330>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d031      	beq.n	8007e42 <HAL_GPIO_Init+0x23a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a56      	ldr	r2, [pc, #344]	; (8007f3c <HAL_GPIO_Init+0x334>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d02b      	beq.n	8007e3e <HAL_GPIO_Init+0x236>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a55      	ldr	r2, [pc, #340]	; (8007f40 <HAL_GPIO_Init+0x338>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d025      	beq.n	8007e3a <HAL_GPIO_Init+0x232>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a54      	ldr	r2, [pc, #336]	; (8007f44 <HAL_GPIO_Init+0x33c>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d01f      	beq.n	8007e36 <HAL_GPIO_Init+0x22e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a53      	ldr	r2, [pc, #332]	; (8007f48 <HAL_GPIO_Init+0x340>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d019      	beq.n	8007e32 <HAL_GPIO_Init+0x22a>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a52      	ldr	r2, [pc, #328]	; (8007f4c <HAL_GPIO_Init+0x344>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d013      	beq.n	8007e2e <HAL_GPIO_Init+0x226>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a51      	ldr	r2, [pc, #324]	; (8007f50 <HAL_GPIO_Init+0x348>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00d      	beq.n	8007e2a <HAL_GPIO_Init+0x222>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a50      	ldr	r2, [pc, #320]	; (8007f54 <HAL_GPIO_Init+0x34c>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d007      	beq.n	8007e26 <HAL_GPIO_Init+0x21e>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a4f      	ldr	r2, [pc, #316]	; (8007f58 <HAL_GPIO_Init+0x350>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d101      	bne.n	8007e22 <HAL_GPIO_Init+0x21a>
 8007e1e:	2309      	movs	r3, #9
 8007e20:	e012      	b.n	8007e48 <HAL_GPIO_Init+0x240>
 8007e22:	230a      	movs	r3, #10
 8007e24:	e010      	b.n	8007e48 <HAL_GPIO_Init+0x240>
 8007e26:	2308      	movs	r3, #8
 8007e28:	e00e      	b.n	8007e48 <HAL_GPIO_Init+0x240>
 8007e2a:	2307      	movs	r3, #7
 8007e2c:	e00c      	b.n	8007e48 <HAL_GPIO_Init+0x240>
 8007e2e:	2306      	movs	r3, #6
 8007e30:	e00a      	b.n	8007e48 <HAL_GPIO_Init+0x240>
 8007e32:	2305      	movs	r3, #5
 8007e34:	e008      	b.n	8007e48 <HAL_GPIO_Init+0x240>
 8007e36:	2304      	movs	r3, #4
 8007e38:	e006      	b.n	8007e48 <HAL_GPIO_Init+0x240>
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e004      	b.n	8007e48 <HAL_GPIO_Init+0x240>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e002      	b.n	8007e48 <HAL_GPIO_Init+0x240>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <HAL_GPIO_Init+0x240>
 8007e46:	2300      	movs	r3, #0
 8007e48:	69fa      	ldr	r2, [r7, #28]
 8007e4a:	f002 0203 	and.w	r2, r2, #3
 8007e4e:	0092      	lsls	r2, r2, #2
 8007e50:	4093      	lsls	r3, r2
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e58:	4935      	ldr	r1, [pc, #212]	; (8007f30 <HAL_GPIO_Init+0x328>)
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	089b      	lsrs	r3, r3, #2
 8007e5e:	3302      	adds	r3, #2
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e66:	4b3d      	ldr	r3, [pc, #244]	; (8007f5c <HAL_GPIO_Init+0x354>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	43db      	mvns	r3, r3
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	4013      	ands	r3, r2
 8007e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d003      	beq.n	8007e8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e8a:	4a34      	ldr	r2, [pc, #208]	; (8007f5c <HAL_GPIO_Init+0x354>)
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007e90:	4b32      	ldr	r3, [pc, #200]	; (8007f5c <HAL_GPIO_Init+0x354>)
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	43db      	mvns	r3, r3
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007eb4:	4a29      	ldr	r2, [pc, #164]	; (8007f5c <HAL_GPIO_Init+0x354>)
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007eba:	4b28      	ldr	r3, [pc, #160]	; (8007f5c <HAL_GPIO_Init+0x354>)
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007ede:	4a1f      	ldr	r2, [pc, #124]	; (8007f5c <HAL_GPIO_Init+0x354>)
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ee4:	4b1d      	ldr	r3, [pc, #116]	; (8007f5c <HAL_GPIO_Init+0x354>)
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	43db      	mvns	r3, r3
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d003      	beq.n	8007f08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007f08:	4a14      	ldr	r2, [pc, #80]	; (8007f5c <HAL_GPIO_Init+0x354>)
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	3301      	adds	r3, #1
 8007f12:	61fb      	str	r3, [r7, #28]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	2b0f      	cmp	r3, #15
 8007f18:	f67f ae84 	bls.w	8007c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007f1c:	bf00      	nop
 8007f1e:	bf00      	nop
 8007f20:	3724      	adds	r7, #36	; 0x24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	40023800 	.word	0x40023800
 8007f30:	40013800 	.word	0x40013800
 8007f34:	40020000 	.word	0x40020000
 8007f38:	40020400 	.word	0x40020400
 8007f3c:	40020800 	.word	0x40020800
 8007f40:	40020c00 	.word	0x40020c00
 8007f44:	40021000 	.word	0x40021000
 8007f48:	40021400 	.word	0x40021400
 8007f4c:	40021800 	.word	0x40021800
 8007f50:	40021c00 	.word	0x40021c00
 8007f54:	40022000 	.word	0x40022000
 8007f58:	40022400 	.word	0x40022400
 8007f5c:	40013c00 	.word	0x40013c00

08007f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	691a      	ldr	r2, [r3, #16]
 8007f70:	887b      	ldrh	r3, [r7, #2]
 8007f72:	4013      	ands	r3, r2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	73fb      	strb	r3, [r7, #15]
 8007f7c:	e001      	b.n	8007f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	460b      	mov	r3, r1
 8007f9a:	807b      	strh	r3, [r7, #2]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007fa0:	787b      	ldrb	r3, [r7, #1]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d003      	beq.n	8007fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fa6:	887a      	ldrh	r2, [r7, #2]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007fac:	e003      	b.n	8007fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007fae:	887b      	ldrh	r3, [r7, #2]
 8007fb0:	041a      	lsls	r2, r3, #16
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	619a      	str	r2, [r3, #24]
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	4603      	mov	r3, r0
 8007fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007fce:	4b08      	ldr	r3, [pc, #32]	; (8007ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007fd0:	695a      	ldr	r2, [r3, #20]
 8007fd2:	88fb      	ldrh	r3, [r7, #6]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d006      	beq.n	8007fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007fda:	4a05      	ldr	r2, [pc, #20]	; (8007ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007fdc:	88fb      	ldrh	r3, [r7, #6]
 8007fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007fe0:	88fb      	ldrh	r3, [r7, #6]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fb fa16 	bl	8003414 <HAL_GPIO_EXTI_Callback>
  }
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	40013c00 	.word	0x40013c00

08007ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e12b      	b.n	800825e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b00      	cmp	r3, #0
 8008010:	d106      	bne.n	8008020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7fa fa36 	bl	800248c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2224      	movs	r2, #36	; 0x24
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f022 0201 	bic.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008046:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008056:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008058:	f001 fd66 	bl	8009b28 <HAL_RCC_GetPCLK1Freq>
 800805c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	4a81      	ldr	r2, [pc, #516]	; (8008268 <HAL_I2C_Init+0x274>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d807      	bhi.n	8008078 <HAL_I2C_Init+0x84>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4a80      	ldr	r2, [pc, #512]	; (800826c <HAL_I2C_Init+0x278>)
 800806c:	4293      	cmp	r3, r2
 800806e:	bf94      	ite	ls
 8008070:	2301      	movls	r3, #1
 8008072:	2300      	movhi	r3, #0
 8008074:	b2db      	uxtb	r3, r3
 8008076:	e006      	b.n	8008086 <HAL_I2C_Init+0x92>
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4a7d      	ldr	r2, [pc, #500]	; (8008270 <HAL_I2C_Init+0x27c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	bf94      	ite	ls
 8008080:	2301      	movls	r3, #1
 8008082:	2300      	movhi	r3, #0
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e0e7      	b.n	800825e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	4a78      	ldr	r2, [pc, #480]	; (8008274 <HAL_I2C_Init+0x280>)
 8008092:	fba2 2303 	umull	r2, r3, r2, r3
 8008096:	0c9b      	lsrs	r3, r3, #18
 8008098:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	4a6a      	ldr	r2, [pc, #424]	; (8008268 <HAL_I2C_Init+0x274>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d802      	bhi.n	80080c8 <HAL_I2C_Init+0xd4>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	3301      	adds	r3, #1
 80080c6:	e009      	b.n	80080dc <HAL_I2C_Init+0xe8>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80080ce:	fb02 f303 	mul.w	r3, r2, r3
 80080d2:	4a69      	ldr	r2, [pc, #420]	; (8008278 <HAL_I2C_Init+0x284>)
 80080d4:	fba2 2303 	umull	r2, r3, r2, r3
 80080d8:	099b      	lsrs	r3, r3, #6
 80080da:	3301      	adds	r3, #1
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	6812      	ldr	r2, [r2, #0]
 80080e0:	430b      	orrs	r3, r1
 80080e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80080ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	495c      	ldr	r1, [pc, #368]	; (8008268 <HAL_I2C_Init+0x274>)
 80080f8:	428b      	cmp	r3, r1
 80080fa:	d819      	bhi.n	8008130 <HAL_I2C_Init+0x13c>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	1e59      	subs	r1, r3, #1
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	fbb1 f3f3 	udiv	r3, r1, r3
 800810a:	1c59      	adds	r1, r3, #1
 800810c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008110:	400b      	ands	r3, r1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <HAL_I2C_Init+0x138>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	1e59      	subs	r1, r3, #1
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	fbb1 f3f3 	udiv	r3, r1, r3
 8008124:	3301      	adds	r3, #1
 8008126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800812a:	e051      	b.n	80081d0 <HAL_I2C_Init+0x1dc>
 800812c:	2304      	movs	r3, #4
 800812e:	e04f      	b.n	80081d0 <HAL_I2C_Init+0x1dc>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d111      	bne.n	800815c <HAL_I2C_Init+0x168>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	1e58      	subs	r0, r3, #1
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6859      	ldr	r1, [r3, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	440b      	add	r3, r1
 8008146:	fbb0 f3f3 	udiv	r3, r0, r3
 800814a:	3301      	adds	r3, #1
 800814c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008150:	2b00      	cmp	r3, #0
 8008152:	bf0c      	ite	eq
 8008154:	2301      	moveq	r3, #1
 8008156:	2300      	movne	r3, #0
 8008158:	b2db      	uxtb	r3, r3
 800815a:	e012      	b.n	8008182 <HAL_I2C_Init+0x18e>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	1e58      	subs	r0, r3, #1
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6859      	ldr	r1, [r3, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	440b      	add	r3, r1
 800816a:	0099      	lsls	r1, r3, #2
 800816c:	440b      	add	r3, r1
 800816e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008172:	3301      	adds	r3, #1
 8008174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008178:	2b00      	cmp	r3, #0
 800817a:	bf0c      	ite	eq
 800817c:	2301      	moveq	r3, #1
 800817e:	2300      	movne	r3, #0
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <HAL_I2C_Init+0x196>
 8008186:	2301      	movs	r3, #1
 8008188:	e022      	b.n	80081d0 <HAL_I2C_Init+0x1dc>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10e      	bne.n	80081b0 <HAL_I2C_Init+0x1bc>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	1e58      	subs	r0, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6859      	ldr	r1, [r3, #4]
 800819a:	460b      	mov	r3, r1
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	440b      	add	r3, r1
 80081a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80081a4:	3301      	adds	r3, #1
 80081a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ae:	e00f      	b.n	80081d0 <HAL_I2C_Init+0x1dc>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	1e58      	subs	r0, r3, #1
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6859      	ldr	r1, [r3, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	0099      	lsls	r1, r3, #2
 80081c0:	440b      	add	r3, r1
 80081c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80081c6:	3301      	adds	r3, #1
 80081c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081d0:	6879      	ldr	r1, [r7, #4]
 80081d2:	6809      	ldr	r1, [r1, #0]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	69da      	ldr	r2, [r3, #28]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	430a      	orrs	r2, r1
 80081f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80081fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6911      	ldr	r1, [r2, #16]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	68d2      	ldr	r2, [r2, #12]
 800820a:	4311      	orrs	r1, r2
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	430b      	orrs	r3, r1
 8008212:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	695a      	ldr	r2, [r3, #20]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	431a      	orrs	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	000186a0 	.word	0x000186a0
 800826c:	001e847f 	.word	0x001e847f
 8008270:	003d08ff 	.word	0x003d08ff
 8008274:	431bde83 	.word	0x431bde83
 8008278:	10624dd3 	.word	0x10624dd3

0800827c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b088      	sub	sp, #32
 8008280:	af02      	add	r7, sp, #8
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	4608      	mov	r0, r1
 8008286:	4611      	mov	r1, r2
 8008288:	461a      	mov	r2, r3
 800828a:	4603      	mov	r3, r0
 800828c:	817b      	strh	r3, [r7, #10]
 800828e:	460b      	mov	r3, r1
 8008290:	813b      	strh	r3, [r7, #8]
 8008292:	4613      	mov	r3, r2
 8008294:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008296:	f7fe ff63 	bl	8007160 <HAL_GetTick>
 800829a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	f040 80d9 	bne.w	800845c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	2319      	movs	r3, #25
 80082b0:	2201      	movs	r2, #1
 80082b2:	496d      	ldr	r1, [pc, #436]	; (8008468 <HAL_I2C_Mem_Write+0x1ec>)
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fcb5 	bl	8008c24 <I2C_WaitOnFlagUntilTimeout>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80082c0:	2302      	movs	r3, #2
 80082c2:	e0cc      	b.n	800845e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_I2C_Mem_Write+0x56>
 80082ce:	2302      	movs	r3, #2
 80082d0:	e0c5      	b.n	800845e <HAL_I2C_Mem_Write+0x1e2>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d007      	beq.n	80082f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0201 	orr.w	r2, r2, #1
 80082f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2221      	movs	r2, #33	; 0x21
 800830c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2240      	movs	r2, #64	; 0x40
 8008314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6a3a      	ldr	r2, [r7, #32]
 8008322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008328:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4a4d      	ldr	r2, [pc, #308]	; (800846c <HAL_I2C_Mem_Write+0x1f0>)
 8008338:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800833a:	88f8      	ldrh	r0, [r7, #6]
 800833c:	893a      	ldrh	r2, [r7, #8]
 800833e:	8979      	ldrh	r1, [r7, #10]
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	9301      	str	r3, [sp, #4]
 8008344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	4603      	mov	r3, r0
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 faec 	bl	8008928 <I2C_RequestMemoryWrite>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d052      	beq.n	80083fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e081      	b.n	800845e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 fd36 	bl	8008dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00d      	beq.n	8008386 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	2b04      	cmp	r3, #4
 8008370:	d107      	bne.n	8008382 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008380:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e06b      	b.n	800845e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	781a      	ldrb	r2, [r3, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008396:	1c5a      	adds	r2, r3, #1
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083a0:	3b01      	subs	r3, #1
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d11b      	bne.n	80083fc <HAL_I2C_Mem_Write+0x180>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d017      	beq.n	80083fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	781a      	ldrb	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	1c5a      	adds	r2, r3, #1
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	3b01      	subs	r3, #1
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1aa      	bne.n	800835a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 fd22 	bl	8008e52 <I2C_WaitOnBTFFlagUntilTimeout>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00d      	beq.n	8008430 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	2b04      	cmp	r3, #4
 800841a:	d107      	bne.n	800842c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800842a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e016      	b.n	800845e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800843e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2220      	movs	r2, #32
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	e000      	b.n	800845e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800845c:	2302      	movs	r3, #2
  }
}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	00100002 	.word	0x00100002
 800846c:	ffff0000 	.word	0xffff0000

08008470 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b08c      	sub	sp, #48	; 0x30
 8008474:	af02      	add	r7, sp, #8
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	4608      	mov	r0, r1
 800847a:	4611      	mov	r1, r2
 800847c:	461a      	mov	r2, r3
 800847e:	4603      	mov	r3, r0
 8008480:	817b      	strh	r3, [r7, #10]
 8008482:	460b      	mov	r3, r1
 8008484:	813b      	strh	r3, [r7, #8]
 8008486:	4613      	mov	r3, r2
 8008488:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800848a:	f7fe fe69 	bl	8007160 <HAL_GetTick>
 800848e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b20      	cmp	r3, #32
 800849a:	f040 8208 	bne.w	80088ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	2319      	movs	r3, #25
 80084a4:	2201      	movs	r2, #1
 80084a6:	497b      	ldr	r1, [pc, #492]	; (8008694 <HAL_I2C_Mem_Read+0x224>)
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fbbb 	bl	8008c24 <I2C_WaitOnFlagUntilTimeout>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80084b4:	2302      	movs	r3, #2
 80084b6:	e1fb      	b.n	80088b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d101      	bne.n	80084c6 <HAL_I2C_Mem_Read+0x56>
 80084c2:	2302      	movs	r3, #2
 80084c4:	e1f4      	b.n	80088b0 <HAL_I2C_Mem_Read+0x440>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d007      	beq.n	80084ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f042 0201 	orr.w	r2, r2, #1
 80084ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2222      	movs	r2, #34	; 0x22
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2240      	movs	r2, #64	; 0x40
 8008508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008516:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800851c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008522:	b29a      	uxth	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4a5b      	ldr	r2, [pc, #364]	; (8008698 <HAL_I2C_Mem_Read+0x228>)
 800852c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800852e:	88f8      	ldrh	r0, [r7, #6]
 8008530:	893a      	ldrh	r2, [r7, #8]
 8008532:	8979      	ldrh	r1, [r7, #10]
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	4603      	mov	r3, r0
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fa88 	bl	8008a54 <I2C_RequestMemoryRead>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e1b0      	b.n	80088b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	d113      	bne.n	800857e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008556:	2300      	movs	r3, #0
 8008558:	623b      	str	r3, [r7, #32]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	623b      	str	r3, [r7, #32]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	699b      	ldr	r3, [r3, #24]
 8008568:	623b      	str	r3, [r7, #32]
 800856a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	e184      	b.n	8008888 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008582:	2b01      	cmp	r3, #1
 8008584:	d11b      	bne.n	80085be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008594:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008596:	2300      	movs	r3, #0
 8008598:	61fb      	str	r3, [r7, #28]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	61fb      	str	r3, [r7, #28]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	61fb      	str	r3, [r7, #28]
 80085aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	e164      	b.n	8008888 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d11b      	bne.n	80085fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085e6:	2300      	movs	r3, #0
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	61bb      	str	r3, [r7, #24]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	61bb      	str	r3, [r7, #24]
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	e144      	b.n	8008888 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085fe:	2300      	movs	r3, #0
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	617b      	str	r3, [r7, #20]
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	617b      	str	r3, [r7, #20]
 8008612:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008614:	e138      	b.n	8008888 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800861a:	2b03      	cmp	r3, #3
 800861c:	f200 80f1 	bhi.w	8008802 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008624:	2b01      	cmp	r3, #1
 8008626:	d123      	bne.n	8008670 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f000 fc51 	bl	8008ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e139      	b.n	80088b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	691a      	ldr	r2, [r3, #16]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008646:	b2d2      	uxtb	r2, r2
 8008648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008658:	3b01      	subs	r3, #1
 800865a:	b29a      	uxth	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b01      	subs	r3, #1
 8008668:	b29a      	uxth	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800866e:	e10b      	b.n	8008888 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008674:	2b02      	cmp	r3, #2
 8008676:	d14e      	bne.n	8008716 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867e:	2200      	movs	r2, #0
 8008680:	4906      	ldr	r1, [pc, #24]	; (800869c <HAL_I2C_Mem_Read+0x22c>)
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f000 face 	bl	8008c24 <I2C_WaitOnFlagUntilTimeout>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d008      	beq.n	80086a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e10e      	b.n	80088b0 <HAL_I2C_Mem_Read+0x440>
 8008692:	bf00      	nop
 8008694:	00100002 	.word	0x00100002
 8008698:	ffff0000 	.word	0xffff0000
 800869c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	691a      	ldr	r2, [r3, #16]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c2:	1c5a      	adds	r2, r3, #1
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d8:	b29b      	uxth	r3, r3
 80086da:	3b01      	subs	r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	691a      	ldr	r2, [r3, #16]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	b2d2      	uxtb	r2, r2
 80086ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086fe:	3b01      	subs	r3, #1
 8008700:	b29a      	uxth	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870a:	b29b      	uxth	r3, r3
 800870c:	3b01      	subs	r3, #1
 800870e:	b29a      	uxth	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008714:	e0b8      	b.n	8008888 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871c:	2200      	movs	r2, #0
 800871e:	4966      	ldr	r1, [pc, #408]	; (80088b8 <HAL_I2C_Mem_Read+0x448>)
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 fa7f 	bl	8008c24 <I2C_WaitOnFlagUntilTimeout>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e0bf      	b.n	80088b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800873e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691a      	ldr	r2, [r3, #16]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800875c:	3b01      	subs	r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008768:	b29b      	uxth	r3, r3
 800876a:	3b01      	subs	r3, #1
 800876c:	b29a      	uxth	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	2200      	movs	r2, #0
 800877a:	494f      	ldr	r1, [pc, #316]	; (80088b8 <HAL_I2C_Mem_Read+0x448>)
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 fa51 	bl	8008c24 <I2C_WaitOnFlagUntilTimeout>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e091      	b.n	80088b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800879a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691a      	ldr	r2, [r3, #16]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	b2d2      	uxtb	r2, r2
 80087a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087b8:	3b01      	subs	r3, #1
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	3b01      	subs	r3, #1
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	691a      	ldr	r2, [r3, #16]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	b2d2      	uxtb	r2, r2
 80087da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e0:	1c5a      	adds	r2, r3, #1
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	3b01      	subs	r3, #1
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008800:	e042      	b.n	8008888 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008804:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 fb64 	bl	8008ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e04c      	b.n	80088b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691a      	ldr	r2, [r3, #16]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008820:	b2d2      	uxtb	r2, r2
 8008822:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008828:	1c5a      	adds	r2, r3, #1
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008832:	3b01      	subs	r3, #1
 8008834:	b29a      	uxth	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800883e:	b29b      	uxth	r3, r3
 8008840:	3b01      	subs	r3, #1
 8008842:	b29a      	uxth	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	f003 0304 	and.w	r3, r3, #4
 8008852:	2b04      	cmp	r3, #4
 8008854:	d118      	bne.n	8008888 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	691a      	ldr	r2, [r3, #16]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	b2d2      	uxtb	r2, r2
 8008862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008872:	3b01      	subs	r3, #1
 8008874:	b29a      	uxth	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887e:	b29b      	uxth	r3, r3
 8008880:	3b01      	subs	r3, #1
 8008882:	b29a      	uxth	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800888c:	2b00      	cmp	r3, #0
 800888e:	f47f aec2 	bne.w	8008616 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2220      	movs	r2, #32
 8008896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	e000      	b.n	80088b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80088ae:	2302      	movs	r3, #2
  }
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3728      	adds	r7, #40	; 0x28
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	00010004 	.word	0x00010004

080088bc <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	d124      	bne.n	800891a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2228      	movs	r2, #40	; 0x28
 80088d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d007      	beq.n	80088f6 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f042 0201 	orr.w	r2, r2, #1
 80088f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008904:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008914:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	e000      	b.n	800891c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800891a:	2302      	movs	r3, #2
  }
}
 800891c:	4618      	mov	r0, r3
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b088      	sub	sp, #32
 800892c:	af02      	add	r7, sp, #8
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	4608      	mov	r0, r1
 8008932:	4611      	mov	r1, r2
 8008934:	461a      	mov	r2, r3
 8008936:	4603      	mov	r3, r0
 8008938:	817b      	strh	r3, [r7, #10]
 800893a:	460b      	mov	r3, r1
 800893c:	813b      	strh	r3, [r7, #8]
 800893e:	4613      	mov	r3, r2
 8008940:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	2200      	movs	r2, #0
 800895a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 f960 	bl	8008c24 <I2C_WaitOnFlagUntilTimeout>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d00d      	beq.n	8008986 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008978:	d103      	bne.n	8008982 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008980:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e05f      	b.n	8008a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008986:	897b      	ldrh	r3, [r7, #10]
 8008988:	b2db      	uxtb	r3, r3
 800898a:	461a      	mov	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008994:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008998:	6a3a      	ldr	r2, [r7, #32]
 800899a:	492d      	ldr	r1, [pc, #180]	; (8008a50 <I2C_RequestMemoryWrite+0x128>)
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f998 	bl	8008cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e04c      	b.n	8008a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80089ac:	2300      	movs	r3, #0
 80089ae:	617b      	str	r3, [r7, #20]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	617b      	str	r3, [r7, #20]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c4:	6a39      	ldr	r1, [r7, #32]
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 fa02 	bl	8008dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00d      	beq.n	80089ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d107      	bne.n	80089ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e02b      	b.n	8008a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80089ee:	88fb      	ldrh	r3, [r7, #6]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d105      	bne.n	8008a00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089f4:	893b      	ldrh	r3, [r7, #8]
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	611a      	str	r2, [r3, #16]
 80089fe:	e021      	b.n	8008a44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a00:	893b      	ldrh	r3, [r7, #8]
 8008a02:	0a1b      	lsrs	r3, r3, #8
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a10:	6a39      	ldr	r1, [r7, #32]
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 f9dc 	bl	8008dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00d      	beq.n	8008a3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	2b04      	cmp	r3, #4
 8008a24:	d107      	bne.n	8008a36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e005      	b.n	8008a46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a3a:	893b      	ldrh	r3, [r7, #8]
 8008a3c:	b2da      	uxtb	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	00010002 	.word	0x00010002

08008a54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b088      	sub	sp, #32
 8008a58:	af02      	add	r7, sp, #8
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	4608      	mov	r0, r1
 8008a5e:	4611      	mov	r1, r2
 8008a60:	461a      	mov	r2, r3
 8008a62:	4603      	mov	r3, r0
 8008a64:	817b      	strh	r3, [r7, #10]
 8008a66:	460b      	mov	r3, r1
 8008a68:	813b      	strh	r3, [r7, #8]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 f8c2 	bl	8008c24 <I2C_WaitOnFlagUntilTimeout>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00d      	beq.n	8008ac2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ab4:	d103      	bne.n	8008abe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008abc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e0aa      	b.n	8008c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008ac2:	897b      	ldrh	r3, [r7, #10]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ad0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	6a3a      	ldr	r2, [r7, #32]
 8008ad6:	4952      	ldr	r1, [pc, #328]	; (8008c20 <I2C_RequestMemoryRead+0x1cc>)
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f000 f8fa 	bl	8008cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e097      	b.n	8008c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ae8:	2300      	movs	r3, #0
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	617b      	str	r3, [r7, #20]
 8008afc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b00:	6a39      	ldr	r1, [r7, #32]
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 f964 	bl	8008dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00d      	beq.n	8008b2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	d107      	bne.n	8008b26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	e076      	b.n	8008c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d105      	bne.n	8008b3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b30:	893b      	ldrh	r3, [r7, #8]
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	611a      	str	r2, [r3, #16]
 8008b3a:	e021      	b.n	8008b80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b3c:	893b      	ldrh	r3, [r7, #8]
 8008b3e:	0a1b      	lsrs	r3, r3, #8
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b4c:	6a39      	ldr	r1, [r7, #32]
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 f93e 	bl	8008dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b54:	4603      	mov	r3, r0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00d      	beq.n	8008b76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5e:	2b04      	cmp	r3, #4
 8008b60:	d107      	bne.n	8008b72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e050      	b.n	8008c18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b76:	893b      	ldrh	r3, [r7, #8]
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b82:	6a39      	ldr	r1, [r7, #32]
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 f923 	bl	8008dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00d      	beq.n	8008bac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d107      	bne.n	8008ba8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ba6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e035      	b.n	8008c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 f82b 	bl	8008c24 <I2C_WaitOnFlagUntilTimeout>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00d      	beq.n	8008bf0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be2:	d103      	bne.n	8008bec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e013      	b.n	8008c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008bf0:	897b      	ldrh	r3, [r7, #10]
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	f043 0301 	orr.w	r3, r3, #1
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	6a3a      	ldr	r2, [r7, #32]
 8008c04:	4906      	ldr	r1, [pc, #24]	; (8008c20 <I2C_RequestMemoryRead+0x1cc>)
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 f863 	bl	8008cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e000      	b.n	8008c18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	00010002 	.word	0x00010002

08008c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	4613      	mov	r3, r2
 8008c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c34:	e025      	b.n	8008c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3c:	d021      	beq.n	8008c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c3e:	f7fe fa8f 	bl	8007160 <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d302      	bcc.n	8008c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d116      	bne.n	8008c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2220      	movs	r2, #32
 8008c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6e:	f043 0220 	orr.w	r2, r3, #32
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e023      	b.n	8008cca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	0c1b      	lsrs	r3, r3, #16
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d10d      	bne.n	8008ca8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	43da      	mvns	r2, r3
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	4013      	ands	r3, r2
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bf0c      	ite	eq
 8008c9e:	2301      	moveq	r3, #1
 8008ca0:	2300      	movne	r3, #0
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	e00c      	b.n	8008cc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699b      	ldr	r3, [r3, #24]
 8008cae:	43da      	mvns	r2, r3
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	bf0c      	ite	eq
 8008cba:	2301      	moveq	r3, #1
 8008cbc:	2300      	movne	r3, #0
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	79fb      	ldrb	r3, [r7, #7]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d0b6      	beq.n	8008c36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	60f8      	str	r0, [r7, #12]
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	607a      	str	r2, [r7, #4]
 8008cde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008ce0:	e051      	b.n	8008d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cf0:	d123      	bne.n	8008d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2220      	movs	r2, #32
 8008d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	f043 0204 	orr.w	r2, r3, #4
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e046      	b.n	8008dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d40:	d021      	beq.n	8008d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d42:	f7fe fa0d 	bl	8007160 <HAL_GetTick>
 8008d46:	4602      	mov	r2, r0
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d302      	bcc.n	8008d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d116      	bne.n	8008d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2220      	movs	r2, #32
 8008d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d72:	f043 0220 	orr.w	r2, r3, #32
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e020      	b.n	8008dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	0c1b      	lsrs	r3, r3, #16
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d10c      	bne.n	8008daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	43da      	mvns	r2, r3
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	4013      	ands	r3, r2
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	bf14      	ite	ne
 8008da2:	2301      	movne	r3, #1
 8008da4:	2300      	moveq	r3, #0
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	e00b      	b.n	8008dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	43da      	mvns	r2, r3
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	4013      	ands	r3, r2
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	bf14      	ite	ne
 8008dbc:	2301      	movne	r3, #1
 8008dbe:	2300      	moveq	r3, #0
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d18d      	bne.n	8008ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ddc:	e02d      	b.n	8008e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 f8ce 	bl	8008f80 <I2C_IsAcknowledgeFailed>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e02d      	b.n	8008e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df4:	d021      	beq.n	8008e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008df6:	f7fe f9b3 	bl	8007160 <HAL_GetTick>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	1ad3      	subs	r3, r2, r3
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d302      	bcc.n	8008e0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d116      	bne.n	8008e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e26:	f043 0220 	orr.w	r2, r3, #32
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	e007      	b.n	8008e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e44:	2b80      	cmp	r3, #128	; 0x80
 8008e46:	d1ca      	bne.n	8008dde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e5e:	e02d      	b.n	8008ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f000 f88d 	bl	8008f80 <I2C_IsAcknowledgeFailed>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e02d      	b.n	8008ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e76:	d021      	beq.n	8008ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e78:	f7fe f972 	bl	8007160 <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d302      	bcc.n	8008e8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d116      	bne.n	8008ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2220      	movs	r2, #32
 8008e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea8:	f043 0220 	orr.w	r2, r3, #32
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e007      	b.n	8008ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	f003 0304 	and.w	r3, r3, #4
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	d1ca      	bne.n	8008e60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ee0:	e042      	b.n	8008f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	f003 0310 	and.w	r3, r3, #16
 8008eec:	2b10      	cmp	r3, #16
 8008eee:	d119      	bne.n	8008f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f06f 0210 	mvn.w	r2, #16
 8008ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e029      	b.n	8008f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f24:	f7fe f91c 	bl	8007160 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d302      	bcc.n	8008f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d116      	bne.n	8008f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2220      	movs	r2, #32
 8008f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f54:	f043 0220 	orr.w	r2, r3, #32
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e007      	b.n	8008f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f72:	2b40      	cmp	r3, #64	; 0x40
 8008f74:	d1b5      	bne.n	8008ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f96:	d11b      	bne.n	8008fd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008fa0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbc:	f043 0204 	orr.w	r2, r3, #4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e000      	b.n	8008fd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b083      	sub	sp, #12
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b20      	cmp	r3, #32
 8008ff2:	d129      	bne.n	8009048 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2224      	movs	r2, #36	; 0x24
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 0201 	bic.w	r2, r2, #1
 800900a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0210 	bic.w	r2, r2, #16
 800901a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	430a      	orrs	r2, r1
 800902a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 0201 	orr.w	r2, r2, #1
 800903a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2220      	movs	r2, #32
 8009040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	e000      	b.n	800904a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8009048:	2302      	movs	r3, #2
  }
}
 800904a:	4618      	mov	r0, r3
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009056:	b480      	push	{r7}
 8009058:	b085      	sub	sp, #20
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800906a:	b2db      	uxtb	r3, r3
 800906c:	2b20      	cmp	r3, #32
 800906e:	d12a      	bne.n	80090c6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2224      	movs	r2, #36	; 0x24
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f022 0201 	bic.w	r2, r2, #1
 8009086:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8009090:	89fb      	ldrh	r3, [r7, #14]
 8009092:	f023 030f 	bic.w	r3, r3, #15
 8009096:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	b29a      	uxth	r2, r3
 800909c:	89fb      	ldrh	r3, [r7, #14]
 800909e:	4313      	orrs	r3, r2
 80090a0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	89fa      	ldrh	r2, [r7, #14]
 80090a8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f042 0201 	orr.w	r2, r2, #1
 80090b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2220      	movs	r2, #32
 80090be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	e000      	b.n	80090c8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80090c6:	2302      	movs	r3, #2
  }
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e034      	b.n	8009150 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80090ee:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f245 5255 	movw	r2, #21845	; 0x5555
 80090f8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	6852      	ldr	r2, [r2, #4]
 8009102:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	6892      	ldr	r2, [r2, #8]
 800910c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800910e:	f7fe f827 	bl	8007160 <HAL_GetTick>
 8009112:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009114:	e00f      	b.n	8009136 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009116:	f7fe f823 	bl	8007160 <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	2b31      	cmp	r3, #49	; 0x31
 8009122:	d908      	bls.n	8009136 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	f003 0303 	and.w	r3, r3, #3
 800912e:	2b00      	cmp	r3, #0
 8009130:	d001      	beq.n	8009136 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	e00c      	b.n	8009150 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f003 0303 	and.w	r3, r3, #3
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1e8      	bne.n	8009116 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800914c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009168:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8009180:	4b05      	ldr	r3, [pc, #20]	; (8009198 <HAL_PWR_EnableWakeUpPin+0x20>)
 8009182:	685a      	ldr	r2, [r3, #4]
 8009184:	4904      	ldr	r1, [pc, #16]	; (8009198 <HAL_PWR_EnableWakeUpPin+0x20>)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4313      	orrs	r3, r2
 800918a:	604b      	str	r3, [r1, #4]
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	40007000 	.word	0x40007000

0800919c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 80091a4:	4b06      	ldr	r3, [pc, #24]	; (80091c0 <HAL_PWR_DisableWakeUpPin+0x24>)
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	43db      	mvns	r3, r3
 80091ac:	4904      	ldr	r1, [pc, #16]	; (80091c0 <HAL_PWR_DisableWakeUpPin+0x24>)
 80091ae:	4013      	ands	r3, r2
 80091b0:	604b      	str	r3, [r1, #4]
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	40007000 	.word	0x40007000

080091c4 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80091c4:	b480      	push	{r7}
 80091c6:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80091c8:	4b08      	ldr	r3, [pc, #32]	; (80091ec <HAL_PWR_EnterSTANDBYMode+0x28>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a07      	ldr	r2, [pc, #28]	; (80091ec <HAL_PWR_EnterSTANDBYMode+0x28>)
 80091ce:	f043 0302 	orr.w	r3, r3, #2
 80091d2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80091d4:	4b06      	ldr	r3, [pc, #24]	; (80091f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	4a05      	ldr	r2, [pc, #20]	; (80091f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80091da:	f043 0304 	orr.w	r3, r3, #4
 80091de:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80091e0:	bf30      	wfi
}
 80091e2:	bf00      	nop
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	40007000 	.word	0x40007000
 80091f0:	e000ed00 	.word	0xe000ed00

080091f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80091fe:	2300      	movs	r3, #0
 8009200:	603b      	str	r3, [r7, #0]
 8009202:	4b20      	ldr	r3, [pc, #128]	; (8009284 <HAL_PWREx_EnableOverDrive+0x90>)
 8009204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009206:	4a1f      	ldr	r2, [pc, #124]	; (8009284 <HAL_PWREx_EnableOverDrive+0x90>)
 8009208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800920c:	6413      	str	r3, [r2, #64]	; 0x40
 800920e:	4b1d      	ldr	r3, [pc, #116]	; (8009284 <HAL_PWREx_EnableOverDrive+0x90>)
 8009210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800921a:	4b1b      	ldr	r3, [pc, #108]	; (8009288 <HAL_PWREx_EnableOverDrive+0x94>)
 800921c:	2201      	movs	r2, #1
 800921e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009220:	f7fd ff9e 	bl	8007160 <HAL_GetTick>
 8009224:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009226:	e009      	b.n	800923c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009228:	f7fd ff9a 	bl	8007160 <HAL_GetTick>
 800922c:	4602      	mov	r2, r0
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	1ad3      	subs	r3, r2, r3
 8009232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009236:	d901      	bls.n	800923c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009238:	2303      	movs	r3, #3
 800923a:	e01f      	b.n	800927c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800923c:	4b13      	ldr	r3, [pc, #76]	; (800928c <HAL_PWREx_EnableOverDrive+0x98>)
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009248:	d1ee      	bne.n	8009228 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800924a:	4b11      	ldr	r3, [pc, #68]	; (8009290 <HAL_PWREx_EnableOverDrive+0x9c>)
 800924c:	2201      	movs	r2, #1
 800924e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009250:	f7fd ff86 	bl	8007160 <HAL_GetTick>
 8009254:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009256:	e009      	b.n	800926c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009258:	f7fd ff82 	bl	8007160 <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009266:	d901      	bls.n	800926c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	e007      	b.n	800927c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800926c:	4b07      	ldr	r3, [pc, #28]	; (800928c <HAL_PWREx_EnableOverDrive+0x98>)
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009278:	d1ee      	bne.n	8009258 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	40023800 	.word	0x40023800
 8009288:	420e0040 	.word	0x420e0040
 800928c:	40007000 	.word	0x40007000
 8009290:	420e0044 	.word	0x420e0044

08009294 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e264      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0301 	and.w	r3, r3, #1
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d075      	beq.n	800939e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80092b2:	4ba3      	ldr	r3, [pc, #652]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	f003 030c 	and.w	r3, r3, #12
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d00c      	beq.n	80092d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092be:	4ba0      	ldr	r3, [pc, #640]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80092c6:	2b08      	cmp	r3, #8
 80092c8:	d112      	bne.n	80092f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092ca:	4b9d      	ldr	r3, [pc, #628]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092d6:	d10b      	bne.n	80092f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092d8:	4b99      	ldr	r3, [pc, #612]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d05b      	beq.n	800939c <HAL_RCC_OscConfig+0x108>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d157      	bne.n	800939c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e23f      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092f8:	d106      	bne.n	8009308 <HAL_RCC_OscConfig+0x74>
 80092fa:	4b91      	ldr	r3, [pc, #580]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a90      	ldr	r2, [pc, #576]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009304:	6013      	str	r3, [r2, #0]
 8009306:	e01d      	b.n	8009344 <HAL_RCC_OscConfig+0xb0>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009310:	d10c      	bne.n	800932c <HAL_RCC_OscConfig+0x98>
 8009312:	4b8b      	ldr	r3, [pc, #556]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a8a      	ldr	r2, [pc, #552]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	4b88      	ldr	r3, [pc, #544]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a87      	ldr	r2, [pc, #540]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009328:	6013      	str	r3, [r2, #0]
 800932a:	e00b      	b.n	8009344 <HAL_RCC_OscConfig+0xb0>
 800932c:	4b84      	ldr	r3, [pc, #528]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a83      	ldr	r2, [pc, #524]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	4b81      	ldr	r3, [pc, #516]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a80      	ldr	r2, [pc, #512]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 800933e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d013      	beq.n	8009374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800934c:	f7fd ff08 	bl	8007160 <HAL_GetTick>
 8009350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009352:	e008      	b.n	8009366 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009354:	f7fd ff04 	bl	8007160 <HAL_GetTick>
 8009358:	4602      	mov	r2, r0
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	2b64      	cmp	r3, #100	; 0x64
 8009360:	d901      	bls.n	8009366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009362:	2303      	movs	r3, #3
 8009364:	e204      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009366:	4b76      	ldr	r3, [pc, #472]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0f0      	beq.n	8009354 <HAL_RCC_OscConfig+0xc0>
 8009372:	e014      	b.n	800939e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009374:	f7fd fef4 	bl	8007160 <HAL_GetTick>
 8009378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800937a:	e008      	b.n	800938e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800937c:	f7fd fef0 	bl	8007160 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b64      	cmp	r3, #100	; 0x64
 8009388:	d901      	bls.n	800938e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e1f0      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800938e:	4b6c      	ldr	r3, [pc, #432]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1f0      	bne.n	800937c <HAL_RCC_OscConfig+0xe8>
 800939a:	e000      	b.n	800939e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800939c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d063      	beq.n	8009472 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80093aa:	4b65      	ldr	r3, [pc, #404]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f003 030c 	and.w	r3, r3, #12
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00b      	beq.n	80093ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80093b6:	4b62      	ldr	r3, [pc, #392]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80093be:	2b08      	cmp	r3, #8
 80093c0:	d11c      	bne.n	80093fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80093c2:	4b5f      	ldr	r3, [pc, #380]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d116      	bne.n	80093fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093ce:	4b5c      	ldr	r3, [pc, #368]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0302 	and.w	r3, r3, #2
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d005      	beq.n	80093e6 <HAL_RCC_OscConfig+0x152>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d001      	beq.n	80093e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e1c4      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093e6:	4b56      	ldr	r3, [pc, #344]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	00db      	lsls	r3, r3, #3
 80093f4:	4952      	ldr	r1, [pc, #328]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093fa:	e03a      	b.n	8009472 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d020      	beq.n	8009446 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009404:	4b4f      	ldr	r3, [pc, #316]	; (8009544 <HAL_RCC_OscConfig+0x2b0>)
 8009406:	2201      	movs	r2, #1
 8009408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800940a:	f7fd fea9 	bl	8007160 <HAL_GetTick>
 800940e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009410:	e008      	b.n	8009424 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009412:	f7fd fea5 	bl	8007160 <HAL_GetTick>
 8009416:	4602      	mov	r2, r0
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	2b02      	cmp	r3, #2
 800941e:	d901      	bls.n	8009424 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e1a5      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009424:	4b46      	ldr	r3, [pc, #280]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0f0      	beq.n	8009412 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009430:	4b43      	ldr	r3, [pc, #268]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	00db      	lsls	r3, r3, #3
 800943e:	4940      	ldr	r1, [pc, #256]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009440:	4313      	orrs	r3, r2
 8009442:	600b      	str	r3, [r1, #0]
 8009444:	e015      	b.n	8009472 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009446:	4b3f      	ldr	r3, [pc, #252]	; (8009544 <HAL_RCC_OscConfig+0x2b0>)
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800944c:	f7fd fe88 	bl	8007160 <HAL_GetTick>
 8009450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009452:	e008      	b.n	8009466 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009454:	f7fd fe84 	bl	8007160 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b02      	cmp	r3, #2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e184      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009466:	4b36      	ldr	r3, [pc, #216]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f0      	bne.n	8009454 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0308 	and.w	r3, r3, #8
 800947a:	2b00      	cmp	r3, #0
 800947c:	d030      	beq.n	80094e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	695b      	ldr	r3, [r3, #20]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d016      	beq.n	80094b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009486:	4b30      	ldr	r3, [pc, #192]	; (8009548 <HAL_RCC_OscConfig+0x2b4>)
 8009488:	2201      	movs	r2, #1
 800948a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800948c:	f7fd fe68 	bl	8007160 <HAL_GetTick>
 8009490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009492:	e008      	b.n	80094a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009494:	f7fd fe64 	bl	8007160 <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d901      	bls.n	80094a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e164      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094a6:	4b26      	ldr	r3, [pc, #152]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80094a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094aa:	f003 0302 	and.w	r3, r3, #2
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0f0      	beq.n	8009494 <HAL_RCC_OscConfig+0x200>
 80094b2:	e015      	b.n	80094e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094b4:	4b24      	ldr	r3, [pc, #144]	; (8009548 <HAL_RCC_OscConfig+0x2b4>)
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094ba:	f7fd fe51 	bl	8007160 <HAL_GetTick>
 80094be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094c0:	e008      	b.n	80094d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094c2:	f7fd fe4d 	bl	8007160 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d901      	bls.n	80094d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e14d      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094d4:	4b1a      	ldr	r3, [pc, #104]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80094d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094d8:	f003 0302 	and.w	r3, r3, #2
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1f0      	bne.n	80094c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 80a0 	beq.w	800962e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094ee:	2300      	movs	r3, #0
 80094f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094f2:	4b13      	ldr	r3, [pc, #76]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 80094f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d10f      	bne.n	800951e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094fe:	2300      	movs	r3, #0
 8009500:	60bb      	str	r3, [r7, #8]
 8009502:	4b0f      	ldr	r3, [pc, #60]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009506:	4a0e      	ldr	r2, [pc, #56]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800950c:	6413      	str	r3, [r2, #64]	; 0x40
 800950e:	4b0c      	ldr	r3, [pc, #48]	; (8009540 <HAL_RCC_OscConfig+0x2ac>)
 8009510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009516:	60bb      	str	r3, [r7, #8]
 8009518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800951a:	2301      	movs	r3, #1
 800951c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800951e:	4b0b      	ldr	r3, [pc, #44]	; (800954c <HAL_RCC_OscConfig+0x2b8>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009526:	2b00      	cmp	r3, #0
 8009528:	d121      	bne.n	800956e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800952a:	4b08      	ldr	r3, [pc, #32]	; (800954c <HAL_RCC_OscConfig+0x2b8>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a07      	ldr	r2, [pc, #28]	; (800954c <HAL_RCC_OscConfig+0x2b8>)
 8009530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009536:	f7fd fe13 	bl	8007160 <HAL_GetTick>
 800953a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800953c:	e011      	b.n	8009562 <HAL_RCC_OscConfig+0x2ce>
 800953e:	bf00      	nop
 8009540:	40023800 	.word	0x40023800
 8009544:	42470000 	.word	0x42470000
 8009548:	42470e80 	.word	0x42470e80
 800954c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009550:	f7fd fe06 	bl	8007160 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2b02      	cmp	r3, #2
 800955c:	d901      	bls.n	8009562 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e106      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009562:	4b85      	ldr	r3, [pc, #532]	; (8009778 <HAL_RCC_OscConfig+0x4e4>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0f0      	beq.n	8009550 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d106      	bne.n	8009584 <HAL_RCC_OscConfig+0x2f0>
 8009576:	4b81      	ldr	r3, [pc, #516]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 8009578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957a:	4a80      	ldr	r2, [pc, #512]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 800957c:	f043 0301 	orr.w	r3, r3, #1
 8009580:	6713      	str	r3, [r2, #112]	; 0x70
 8009582:	e01c      	b.n	80095be <HAL_RCC_OscConfig+0x32a>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	2b05      	cmp	r3, #5
 800958a:	d10c      	bne.n	80095a6 <HAL_RCC_OscConfig+0x312>
 800958c:	4b7b      	ldr	r3, [pc, #492]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 800958e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009590:	4a7a      	ldr	r2, [pc, #488]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 8009592:	f043 0304 	orr.w	r3, r3, #4
 8009596:	6713      	str	r3, [r2, #112]	; 0x70
 8009598:	4b78      	ldr	r3, [pc, #480]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 800959a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959c:	4a77      	ldr	r2, [pc, #476]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 800959e:	f043 0301 	orr.w	r3, r3, #1
 80095a2:	6713      	str	r3, [r2, #112]	; 0x70
 80095a4:	e00b      	b.n	80095be <HAL_RCC_OscConfig+0x32a>
 80095a6:	4b75      	ldr	r3, [pc, #468]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 80095a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095aa:	4a74      	ldr	r2, [pc, #464]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 80095ac:	f023 0301 	bic.w	r3, r3, #1
 80095b0:	6713      	str	r3, [r2, #112]	; 0x70
 80095b2:	4b72      	ldr	r3, [pc, #456]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 80095b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b6:	4a71      	ldr	r2, [pc, #452]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 80095b8:	f023 0304 	bic.w	r3, r3, #4
 80095bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d015      	beq.n	80095f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095c6:	f7fd fdcb 	bl	8007160 <HAL_GetTick>
 80095ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095cc:	e00a      	b.n	80095e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095ce:	f7fd fdc7 	bl	8007160 <HAL_GetTick>
 80095d2:	4602      	mov	r2, r0
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095dc:	4293      	cmp	r3, r2
 80095de:	d901      	bls.n	80095e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	e0c5      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095e4:	4b65      	ldr	r3, [pc, #404]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 80095e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d0ee      	beq.n	80095ce <HAL_RCC_OscConfig+0x33a>
 80095f0:	e014      	b.n	800961c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095f2:	f7fd fdb5 	bl	8007160 <HAL_GetTick>
 80095f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095f8:	e00a      	b.n	8009610 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095fa:	f7fd fdb1 	bl	8007160 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	f241 3288 	movw	r2, #5000	; 0x1388
 8009608:	4293      	cmp	r3, r2
 800960a:	d901      	bls.n	8009610 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800960c:	2303      	movs	r3, #3
 800960e:	e0af      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009610:	4b5a      	ldr	r3, [pc, #360]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 8009612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009614:	f003 0302 	and.w	r3, r3, #2
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1ee      	bne.n	80095fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d105      	bne.n	800962e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009622:	4b56      	ldr	r3, [pc, #344]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 8009624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009626:	4a55      	ldr	r2, [pc, #340]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 8009628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800962c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	699b      	ldr	r3, [r3, #24]
 8009632:	2b00      	cmp	r3, #0
 8009634:	f000 809b 	beq.w	800976e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009638:	4b50      	ldr	r3, [pc, #320]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f003 030c 	and.w	r3, r3, #12
 8009640:	2b08      	cmp	r3, #8
 8009642:	d05c      	beq.n	80096fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	2b02      	cmp	r3, #2
 800964a:	d141      	bne.n	80096d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800964c:	4b4c      	ldr	r3, [pc, #304]	; (8009780 <HAL_RCC_OscConfig+0x4ec>)
 800964e:	2200      	movs	r2, #0
 8009650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009652:	f7fd fd85 	bl	8007160 <HAL_GetTick>
 8009656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009658:	e008      	b.n	800966c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800965a:	f7fd fd81 	bl	8007160 <HAL_GetTick>
 800965e:	4602      	mov	r2, r0
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	2b02      	cmp	r3, #2
 8009666:	d901      	bls.n	800966c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e081      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800966c:	4b43      	ldr	r3, [pc, #268]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1f0      	bne.n	800965a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	69da      	ldr	r2, [r3, #28]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	431a      	orrs	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	019b      	lsls	r3, r3, #6
 8009688:	431a      	orrs	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968e:	085b      	lsrs	r3, r3, #1
 8009690:	3b01      	subs	r3, #1
 8009692:	041b      	lsls	r3, r3, #16
 8009694:	431a      	orrs	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969a:	061b      	lsls	r3, r3, #24
 800969c:	4937      	ldr	r1, [pc, #220]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096a2:	4b37      	ldr	r3, [pc, #220]	; (8009780 <HAL_RCC_OscConfig+0x4ec>)
 80096a4:	2201      	movs	r2, #1
 80096a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096a8:	f7fd fd5a 	bl	8007160 <HAL_GetTick>
 80096ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096ae:	e008      	b.n	80096c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096b0:	f7fd fd56 	bl	8007160 <HAL_GetTick>
 80096b4:	4602      	mov	r2, r0
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d901      	bls.n	80096c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e056      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096c2:	4b2e      	ldr	r3, [pc, #184]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d0f0      	beq.n	80096b0 <HAL_RCC_OscConfig+0x41c>
 80096ce:	e04e      	b.n	800976e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096d0:	4b2b      	ldr	r3, [pc, #172]	; (8009780 <HAL_RCC_OscConfig+0x4ec>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096d6:	f7fd fd43 	bl	8007160 <HAL_GetTick>
 80096da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096dc:	e008      	b.n	80096f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096de:	f7fd fd3f 	bl	8007160 <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d901      	bls.n	80096f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e03f      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096f0:	4b22      	ldr	r3, [pc, #136]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d1f0      	bne.n	80096de <HAL_RCC_OscConfig+0x44a>
 80096fc:	e037      	b.n	800976e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d101      	bne.n	800970a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e032      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800970a:	4b1c      	ldr	r3, [pc, #112]	; (800977c <HAL_RCC_OscConfig+0x4e8>)
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d028      	beq.n	800976a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009722:	429a      	cmp	r2, r3
 8009724:	d121      	bne.n	800976a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009730:	429a      	cmp	r2, r3
 8009732:	d11a      	bne.n	800976a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800973a:	4013      	ands	r3, r2
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009740:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009742:	4293      	cmp	r3, r2
 8009744:	d111      	bne.n	800976a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009750:	085b      	lsrs	r3, r3, #1
 8009752:	3b01      	subs	r3, #1
 8009754:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009756:	429a      	cmp	r2, r3
 8009758:	d107      	bne.n	800976a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009764:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009766:	429a      	cmp	r2, r3
 8009768:	d001      	beq.n	800976e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e000      	b.n	8009770 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	40007000 	.word	0x40007000
 800977c:	40023800 	.word	0x40023800
 8009780:	42470060 	.word	0x42470060

08009784 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d101      	bne.n	8009798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e0cc      	b.n	8009932 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009798:	4b68      	ldr	r3, [pc, #416]	; (800993c <HAL_RCC_ClockConfig+0x1b8>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 030f 	and.w	r3, r3, #15
 80097a0:	683a      	ldr	r2, [r7, #0]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d90c      	bls.n	80097c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097a6:	4b65      	ldr	r3, [pc, #404]	; (800993c <HAL_RCC_ClockConfig+0x1b8>)
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	b2d2      	uxtb	r2, r2
 80097ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097ae:	4b63      	ldr	r3, [pc, #396]	; (800993c <HAL_RCC_ClockConfig+0x1b8>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d001      	beq.n	80097c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e0b8      	b.n	8009932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d020      	beq.n	800980e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80097d8:	4b59      	ldr	r3, [pc, #356]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	4a58      	ldr	r2, [pc, #352]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 80097de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80097e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0308 	and.w	r3, r3, #8
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d005      	beq.n	80097fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80097f0:	4b53      	ldr	r3, [pc, #332]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	4a52      	ldr	r2, [pc, #328]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 80097f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80097fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097fc:	4b50      	ldr	r3, [pc, #320]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	494d      	ldr	r1, [pc, #308]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 800980a:	4313      	orrs	r3, r2
 800980c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	2b00      	cmp	r3, #0
 8009818:	d044      	beq.n	80098a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d107      	bne.n	8009832 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009822:	4b47      	ldr	r3, [pc, #284]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800982a:	2b00      	cmp	r3, #0
 800982c:	d119      	bne.n	8009862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e07f      	b.n	8009932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	2b02      	cmp	r3, #2
 8009838:	d003      	beq.n	8009842 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800983e:	2b03      	cmp	r3, #3
 8009840:	d107      	bne.n	8009852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009842:	4b3f      	ldr	r3, [pc, #252]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d109      	bne.n	8009862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e06f      	b.n	8009932 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009852:	4b3b      	ldr	r3, [pc, #236]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	2b00      	cmp	r3, #0
 800985c:	d101      	bne.n	8009862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e067      	b.n	8009932 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009862:	4b37      	ldr	r3, [pc, #220]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f023 0203 	bic.w	r2, r3, #3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	4934      	ldr	r1, [pc, #208]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 8009870:	4313      	orrs	r3, r2
 8009872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009874:	f7fd fc74 	bl	8007160 <HAL_GetTick>
 8009878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800987a:	e00a      	b.n	8009892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800987c:	f7fd fc70 	bl	8007160 <HAL_GetTick>
 8009880:	4602      	mov	r2, r0
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	f241 3288 	movw	r2, #5000	; 0x1388
 800988a:	4293      	cmp	r3, r2
 800988c:	d901      	bls.n	8009892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e04f      	b.n	8009932 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009892:	4b2b      	ldr	r3, [pc, #172]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	f003 020c 	and.w	r2, r3, #12
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d1eb      	bne.n	800987c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80098a4:	4b25      	ldr	r3, [pc, #148]	; (800993c <HAL_RCC_ClockConfig+0x1b8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f003 030f 	and.w	r3, r3, #15
 80098ac:	683a      	ldr	r2, [r7, #0]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d20c      	bcs.n	80098cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098b2:	4b22      	ldr	r3, [pc, #136]	; (800993c <HAL_RCC_ClockConfig+0x1b8>)
 80098b4:	683a      	ldr	r2, [r7, #0]
 80098b6:	b2d2      	uxtb	r2, r2
 80098b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098ba:	4b20      	ldr	r3, [pc, #128]	; (800993c <HAL_RCC_ClockConfig+0x1b8>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 030f 	and.w	r3, r3, #15
 80098c2:	683a      	ldr	r2, [r7, #0]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d001      	beq.n	80098cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e032      	b.n	8009932 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0304 	and.w	r3, r3, #4
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d008      	beq.n	80098ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80098d8:	4b19      	ldr	r3, [pc, #100]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	4916      	ldr	r1, [pc, #88]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0308 	and.w	r3, r3, #8
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d009      	beq.n	800990a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098f6:	4b12      	ldr	r3, [pc, #72]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	490e      	ldr	r1, [pc, #56]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 8009906:	4313      	orrs	r3, r2
 8009908:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800990a:	f000 f821 	bl	8009950 <HAL_RCC_GetSysClockFreq>
 800990e:	4602      	mov	r2, r0
 8009910:	4b0b      	ldr	r3, [pc, #44]	; (8009940 <HAL_RCC_ClockConfig+0x1bc>)
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	091b      	lsrs	r3, r3, #4
 8009916:	f003 030f 	and.w	r3, r3, #15
 800991a:	490a      	ldr	r1, [pc, #40]	; (8009944 <HAL_RCC_ClockConfig+0x1c0>)
 800991c:	5ccb      	ldrb	r3, [r1, r3]
 800991e:	fa22 f303 	lsr.w	r3, r2, r3
 8009922:	4a09      	ldr	r2, [pc, #36]	; (8009948 <HAL_RCC_ClockConfig+0x1c4>)
 8009924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009926:	4b09      	ldr	r3, [pc, #36]	; (800994c <HAL_RCC_ClockConfig+0x1c8>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4618      	mov	r0, r3
 800992c:	f7f9 fcb2 	bl	8003294 <HAL_InitTick>

  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	40023c00 	.word	0x40023c00
 8009940:	40023800 	.word	0x40023800
 8009944:	080174ec 	.word	0x080174ec
 8009948:	20000088 	.word	0x20000088
 800994c:	200000b0 	.word	0x200000b0

08009950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009950:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009954:	b084      	sub	sp, #16
 8009956:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009958:	2300      	movs	r3, #0
 800995a:	607b      	str	r3, [r7, #4]
 800995c:	2300      	movs	r3, #0
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	2300      	movs	r3, #0
 8009962:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009964:	2300      	movs	r3, #0
 8009966:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009968:	4b67      	ldr	r3, [pc, #412]	; (8009b08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f003 030c 	and.w	r3, r3, #12
 8009970:	2b08      	cmp	r3, #8
 8009972:	d00d      	beq.n	8009990 <HAL_RCC_GetSysClockFreq+0x40>
 8009974:	2b08      	cmp	r3, #8
 8009976:	f200 80bd 	bhi.w	8009af4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <HAL_RCC_GetSysClockFreq+0x34>
 800997e:	2b04      	cmp	r3, #4
 8009980:	d003      	beq.n	800998a <HAL_RCC_GetSysClockFreq+0x3a>
 8009982:	e0b7      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009984:	4b61      	ldr	r3, [pc, #388]	; (8009b0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009986:	60bb      	str	r3, [r7, #8]
       break;
 8009988:	e0b7      	b.n	8009afa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800998a:	4b60      	ldr	r3, [pc, #384]	; (8009b0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800998c:	60bb      	str	r3, [r7, #8]
      break;
 800998e:	e0b4      	b.n	8009afa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009990:	4b5d      	ldr	r3, [pc, #372]	; (8009b08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009998:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800999a:	4b5b      	ldr	r3, [pc, #364]	; (8009b08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d04d      	beq.n	8009a42 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099a6:	4b58      	ldr	r3, [pc, #352]	; (8009b08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	099b      	lsrs	r3, r3, #6
 80099ac:	461a      	mov	r2, r3
 80099ae:	f04f 0300 	mov.w	r3, #0
 80099b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80099b6:	f04f 0100 	mov.w	r1, #0
 80099ba:	ea02 0800 	and.w	r8, r2, r0
 80099be:	ea03 0901 	and.w	r9, r3, r1
 80099c2:	4640      	mov	r0, r8
 80099c4:	4649      	mov	r1, r9
 80099c6:	f04f 0200 	mov.w	r2, #0
 80099ca:	f04f 0300 	mov.w	r3, #0
 80099ce:	014b      	lsls	r3, r1, #5
 80099d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80099d4:	0142      	lsls	r2, r0, #5
 80099d6:	4610      	mov	r0, r2
 80099d8:	4619      	mov	r1, r3
 80099da:	ebb0 0008 	subs.w	r0, r0, r8
 80099de:	eb61 0109 	sbc.w	r1, r1, r9
 80099e2:	f04f 0200 	mov.w	r2, #0
 80099e6:	f04f 0300 	mov.w	r3, #0
 80099ea:	018b      	lsls	r3, r1, #6
 80099ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80099f0:	0182      	lsls	r2, r0, #6
 80099f2:	1a12      	subs	r2, r2, r0
 80099f4:	eb63 0301 	sbc.w	r3, r3, r1
 80099f8:	f04f 0000 	mov.w	r0, #0
 80099fc:	f04f 0100 	mov.w	r1, #0
 8009a00:	00d9      	lsls	r1, r3, #3
 8009a02:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009a06:	00d0      	lsls	r0, r2, #3
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	eb12 0208 	adds.w	r2, r2, r8
 8009a10:	eb43 0309 	adc.w	r3, r3, r9
 8009a14:	f04f 0000 	mov.w	r0, #0
 8009a18:	f04f 0100 	mov.w	r1, #0
 8009a1c:	0299      	lsls	r1, r3, #10
 8009a1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009a22:	0290      	lsls	r0, r2, #10
 8009a24:	4602      	mov	r2, r0
 8009a26:	460b      	mov	r3, r1
 8009a28:	4610      	mov	r0, r2
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f04f 0300 	mov.w	r3, #0
 8009a34:	f7f7 f938 	bl	8000ca8 <__aeabi_uldivmod>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	e04a      	b.n	8009ad8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a42:	4b31      	ldr	r3, [pc, #196]	; (8009b08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	099b      	lsrs	r3, r3, #6
 8009a48:	461a      	mov	r2, r3
 8009a4a:	f04f 0300 	mov.w	r3, #0
 8009a4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009a52:	f04f 0100 	mov.w	r1, #0
 8009a56:	ea02 0400 	and.w	r4, r2, r0
 8009a5a:	ea03 0501 	and.w	r5, r3, r1
 8009a5e:	4620      	mov	r0, r4
 8009a60:	4629      	mov	r1, r5
 8009a62:	f04f 0200 	mov.w	r2, #0
 8009a66:	f04f 0300 	mov.w	r3, #0
 8009a6a:	014b      	lsls	r3, r1, #5
 8009a6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009a70:	0142      	lsls	r2, r0, #5
 8009a72:	4610      	mov	r0, r2
 8009a74:	4619      	mov	r1, r3
 8009a76:	1b00      	subs	r0, r0, r4
 8009a78:	eb61 0105 	sbc.w	r1, r1, r5
 8009a7c:	f04f 0200 	mov.w	r2, #0
 8009a80:	f04f 0300 	mov.w	r3, #0
 8009a84:	018b      	lsls	r3, r1, #6
 8009a86:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009a8a:	0182      	lsls	r2, r0, #6
 8009a8c:	1a12      	subs	r2, r2, r0
 8009a8e:	eb63 0301 	sbc.w	r3, r3, r1
 8009a92:	f04f 0000 	mov.w	r0, #0
 8009a96:	f04f 0100 	mov.w	r1, #0
 8009a9a:	00d9      	lsls	r1, r3, #3
 8009a9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009aa0:	00d0      	lsls	r0, r2, #3
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	1912      	adds	r2, r2, r4
 8009aa8:	eb45 0303 	adc.w	r3, r5, r3
 8009aac:	f04f 0000 	mov.w	r0, #0
 8009ab0:	f04f 0100 	mov.w	r1, #0
 8009ab4:	0299      	lsls	r1, r3, #10
 8009ab6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009aba:	0290      	lsls	r0, r2, #10
 8009abc:	4602      	mov	r2, r0
 8009abe:	460b      	mov	r3, r1
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f04f 0300 	mov.w	r3, #0
 8009acc:	f7f7 f8ec 	bl	8000ca8 <__aeabi_uldivmod>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009ad8:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	0c1b      	lsrs	r3, r3, #16
 8009ade:	f003 0303 	and.w	r3, r3, #3
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af0:	60bb      	str	r3, [r7, #8]
      break;
 8009af2:	e002      	b.n	8009afa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009af4:	4b05      	ldr	r3, [pc, #20]	; (8009b0c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009af6:	60bb      	str	r3, [r7, #8]
      break;
 8009af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009afa:	68bb      	ldr	r3, [r7, #8]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009b06:	bf00      	nop
 8009b08:	40023800 	.word	0x40023800
 8009b0c:	00f42400 	.word	0x00f42400

08009b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b10:	b480      	push	{r7}
 8009b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b14:	4b03      	ldr	r3, [pc, #12]	; (8009b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8009b16:	681b      	ldr	r3, [r3, #0]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	20000088 	.word	0x20000088

08009b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009b2c:	f7ff fff0 	bl	8009b10 <HAL_RCC_GetHCLKFreq>
 8009b30:	4602      	mov	r2, r0
 8009b32:	4b05      	ldr	r3, [pc, #20]	; (8009b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	0a9b      	lsrs	r3, r3, #10
 8009b38:	f003 0307 	and.w	r3, r3, #7
 8009b3c:	4903      	ldr	r1, [pc, #12]	; (8009b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b3e:	5ccb      	ldrb	r3, [r1, r3]
 8009b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	40023800 	.word	0x40023800
 8009b4c:	080174fc 	.word	0x080174fc

08009b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009b54:	f7ff ffdc 	bl	8009b10 <HAL_RCC_GetHCLKFreq>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	4b05      	ldr	r3, [pc, #20]	; (8009b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009b5c:	689b      	ldr	r3, [r3, #8]
 8009b5e:	0b5b      	lsrs	r3, r3, #13
 8009b60:	f003 0307 	and.w	r3, r3, #7
 8009b64:	4903      	ldr	r1, [pc, #12]	; (8009b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b66:	5ccb      	ldrb	r3, [r1, r3]
 8009b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	40023800 	.word	0x40023800
 8009b74:	080174fc 	.word	0x080174fc

08009b78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	220f      	movs	r2, #15
 8009b86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009b88:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	f003 0203 	and.w	r2, r3, #3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009b94:	4b0f      	ldr	r3, [pc, #60]	; (8009bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009ba0:	4b0c      	ldr	r3, [pc, #48]	; (8009bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009bac:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	08db      	lsrs	r3, r3, #3
 8009bb2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009bba:	4b07      	ldr	r3, [pc, #28]	; (8009bd8 <HAL_RCC_GetClockConfig+0x60>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 020f 	and.w	r2, r3, #15
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	601a      	str	r2, [r3, #0]
}
 8009bc6:	bf00      	nop
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	40023800 	.word	0x40023800
 8009bd8:	40023c00 	.word	0x40023c00

08009bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f003 0301 	and.w	r3, r3, #1
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10b      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d105      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d075      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009c10:	4bad      	ldr	r3, [pc, #692]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009c16:	f7fd faa3 	bl	8007160 <HAL_GetTick>
 8009c1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c1c:	e008      	b.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009c1e:	f7fd fa9f 	bl	8007160 <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d901      	bls.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	e18b      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c30:	4ba6      	ldr	r3, [pc, #664]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1f0      	bne.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d009      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	019a      	lsls	r2, r3, #6
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	071b      	lsls	r3, r3, #28
 8009c54:	499d      	ldr	r1, [pc, #628]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009c56:	4313      	orrs	r3, r2
 8009c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0302 	and.w	r3, r3, #2
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d01f      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009c68:	4b98      	ldr	r3, [pc, #608]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c6e:	0f1b      	lsrs	r3, r3, #28
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	019a      	lsls	r2, r3, #6
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	061b      	lsls	r3, r3, #24
 8009c82:	431a      	orrs	r2, r3
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	071b      	lsls	r3, r3, #28
 8009c88:	4990      	ldr	r1, [pc, #576]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009c90:	4b8e      	ldr	r3, [pc, #568]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c96:	f023 021f 	bic.w	r2, r3, #31
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	498a      	ldr	r1, [pc, #552]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00d      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	019a      	lsls	r2, r3, #6
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	061b      	lsls	r3, r3, #24
 8009cc0:	431a      	orrs	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	071b      	lsls	r3, r3, #28
 8009cc8:	4980      	ldr	r1, [pc, #512]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009cd0:	4b7d      	ldr	r3, [pc, #500]	; (8009ec8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009cd6:	f7fd fa43 	bl	8007160 <HAL_GetTick>
 8009cda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009cdc:	e008      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009cde:	f7fd fa3f 	bl	8007160 <HAL_GetTick>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d901      	bls.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e12b      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009cf0:	4b76      	ldr	r3, [pc, #472]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d0f0      	beq.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 0304 	and.w	r3, r3, #4
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d105      	bne.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d079      	beq.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009d14:	4b6e      	ldr	r3, [pc, #440]	; (8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009d1a:	f7fd fa21 	bl	8007160 <HAL_GetTick>
 8009d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009d20:	e008      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009d22:	f7fd fa1d 	bl	8007160 <HAL_GetTick>
 8009d26:	4602      	mov	r2, r0
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d901      	bls.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e109      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009d34:	4b65      	ldr	r3, [pc, #404]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d40:	d0ef      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0304 	and.w	r3, r3, #4
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d020      	beq.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009d4e:	4b5f      	ldr	r3, [pc, #380]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d54:	0f1b      	lsrs	r3, r3, #28
 8009d56:	f003 0307 	and.w	r3, r3, #7
 8009d5a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	019a      	lsls	r2, r3, #6
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	061b      	lsls	r3, r3, #24
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	071b      	lsls	r3, r3, #28
 8009d6e:	4957      	ldr	r1, [pc, #348]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d70:	4313      	orrs	r3, r2
 8009d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009d76:	4b55      	ldr	r3, [pc, #340]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a1b      	ldr	r3, [r3, #32]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	021b      	lsls	r3, r3, #8
 8009d88:	4950      	ldr	r1, [pc, #320]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0308 	and.w	r3, r3, #8
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01e      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009d9c:	4b4b      	ldr	r3, [pc, #300]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da2:	0e1b      	lsrs	r3, r3, #24
 8009da4:	f003 030f 	and.w	r3, r3, #15
 8009da8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	019a      	lsls	r2, r3, #6
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	061b      	lsls	r3, r3, #24
 8009db4:	431a      	orrs	r2, r3
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	071b      	lsls	r3, r3, #28
 8009dbc:	4943      	ldr	r1, [pc, #268]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009dc4:	4b41      	ldr	r3, [pc, #260]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd2:	493e      	ldr	r1, [pc, #248]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009dda:	4b3d      	ldr	r3, [pc, #244]	; (8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ddc:	2201      	movs	r2, #1
 8009dde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009de0:	f7fd f9be 	bl	8007160 <HAL_GetTick>
 8009de4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009de6:	e008      	b.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009de8:	f7fd f9ba 	bl	8007160 <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d901      	bls.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009df6:	2303      	movs	r3, #3
 8009df8:	e0a6      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009dfa:	4b34      	ldr	r3, [pc, #208]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e06:	d1ef      	bne.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 0320 	and.w	r3, r3, #32
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 808d 	beq.w	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009e16:	2300      	movs	r3, #0
 8009e18:	60fb      	str	r3, [r7, #12]
 8009e1a:	4b2c      	ldr	r3, [pc, #176]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	4a2b      	ldr	r2, [pc, #172]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e24:	6413      	str	r3, [r2, #64]	; 0x40
 8009e26:	4b29      	ldr	r3, [pc, #164]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009e32:	4b28      	ldr	r3, [pc, #160]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a27      	ldr	r2, [pc, #156]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e3e:	f7fd f98f 	bl	8007160 <HAL_GetTick>
 8009e42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009e44:	e008      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009e46:	f7fd f98b 	bl	8007160 <HAL_GetTick>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d901      	bls.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8009e54:	2303      	movs	r3, #3
 8009e56:	e077      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009e58:	4b1e      	ldr	r3, [pc, #120]	; (8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d0f0      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009e64:	4b19      	ldr	r3, [pc, #100]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d039      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d032      	beq.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e82:	4b12      	ldr	r3, [pc, #72]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009e8c:	4b12      	ldr	r3, [pc, #72]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009e8e:	2201      	movs	r2, #1
 8009e90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009e92:	4b11      	ldr	r3, [pc, #68]	; (8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009e98:	4a0c      	ldr	r2, [pc, #48]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009e9e:	4b0b      	ldr	r3, [pc, #44]	; (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d11e      	bne.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009eaa:	f7fd f959 	bl	8007160 <HAL_GetTick>
 8009eae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009eb0:	e014      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009eb2:	f7fd f955 	bl	8007160 <HAL_GetTick>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d90b      	bls.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e03f      	b.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8009ec8:	42470068 	.word	0x42470068
 8009ecc:	40023800 	.word	0x40023800
 8009ed0:	42470070 	.word	0x42470070
 8009ed4:	40007000 	.word	0x40007000
 8009ed8:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009edc:	4b1c      	ldr	r3, [pc, #112]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee0:	f003 0302 	and.w	r3, r3, #2
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d0e4      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ef4:	d10d      	bne.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8009ef6:	4b16      	ldr	r3, [pc, #88]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f0a:	4911      	ldr	r1, [pc, #68]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	608b      	str	r3, [r1, #8]
 8009f10:	e005      	b.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009f12:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	4a0e      	ldr	r2, [pc, #56]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f18:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009f1c:	6093      	str	r3, [r2, #8]
 8009f1e:	4b0c      	ldr	r3, [pc, #48]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f2a:	4909      	ldr	r1, [pc, #36]	; (8009f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f2c:	4313      	orrs	r3, r2
 8009f2e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f003 0310 	and.w	r3, r3, #16
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d004      	beq.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009f42:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009f44:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	40023800 	.word	0x40023800
 8009f54:	424711e0 	.word	0x424711e0

08009f58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d101      	bne.n	8009f6a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e083      	b.n	800a072 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	7f5b      	ldrb	r3, [r3, #29]
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d105      	bne.n	8009f80 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f7f8 fd3e 	bl	80029fc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2202      	movs	r2, #2
 8009f84:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	22ca      	movs	r2, #202	; 0xca
 8009f8c:	625a      	str	r2, [r3, #36]	; 0x24
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2253      	movs	r2, #83	; 0x53
 8009f94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fc26 	bl	800a7e8 <RTC_EnterInitMode>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d008      	beq.n	8009fb4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	22ff      	movs	r2, #255	; 0xff
 8009fa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2204      	movs	r2, #4
 8009fae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e05e      	b.n	800a072 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	6812      	ldr	r2, [r2, #0]
 8009fbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fc6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	6899      	ldr	r1, [r3, #8]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	431a      	orrs	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	431a      	orrs	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	68d2      	ldr	r2, [r2, #12]
 8009fee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6919      	ldr	r1, [r3, #16]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	041a      	lsls	r2, r3, #16
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	430a      	orrs	r2, r1
 800a002:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	68da      	ldr	r2, [r3, #12]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a012:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	689b      	ldr	r3, [r3, #8]
 800a01a:	f003 0320 	and.w	r3, r3, #32
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10e      	bne.n	800a040 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fbb8 	bl	800a798 <HAL_RTC_WaitForSynchro>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d008      	beq.n	800a040 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	22ff      	movs	r2, #255	; 0xff
 800a034:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2204      	movs	r2, #4
 800a03a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e018      	b.n	800a072 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a04e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	22ff      	movs	r2, #255	; 0xff
 800a068:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a070:	2300      	movs	r3, #0
  }
}
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a07a:	b590      	push	{r4, r7, lr}
 800a07c:	b087      	sub	sp, #28
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a086:	2300      	movs	r3, #0
 800a088:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	7f1b      	ldrb	r3, [r3, #28]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d101      	bne.n	800a096 <HAL_RTC_SetTime+0x1c>
 800a092:	2302      	movs	r3, #2
 800a094:	e0aa      	b.n	800a1ec <HAL_RTC_SetTime+0x172>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d126      	bne.n	800a0f6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d102      	bne.n	800a0bc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fbbd 	bl	800a840 <RTC_ByteToBcd2>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	785b      	ldrb	r3, [r3, #1]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 fbb6 	bl	800a840 <RTC_ByteToBcd2>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a0d8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	789b      	ldrb	r3, [r3, #2]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 fbae 	bl	800a840 <RTC_ByteToBcd2>
 800a0e4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a0e6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	78db      	ldrb	r3, [r3, #3]
 800a0ee:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	617b      	str	r3, [r7, #20]
 800a0f4:	e018      	b.n	800a128 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a100:	2b00      	cmp	r3, #0
 800a102:	d102      	bne.n	800a10a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2200      	movs	r2, #0
 800a108:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	785b      	ldrb	r3, [r3, #1]
 800a114:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a116:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a11c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	78db      	ldrb	r3, [r3, #3]
 800a122:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a124:	4313      	orrs	r3, r2
 800a126:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	22ca      	movs	r2, #202	; 0xca
 800a12e:	625a      	str	r2, [r3, #36]	; 0x24
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2253      	movs	r2, #83	; 0x53
 800a136:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 fb55 	bl	800a7e8 <RTC_EnterInitMode>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00b      	beq.n	800a15c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	22ff      	movs	r2, #255	; 0xff
 800a14a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2204      	movs	r2, #4
 800a150:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2200      	movs	r2, #0
 800a156:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e047      	b.n	800a1ec <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a166:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a16a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	689a      	ldr	r2, [r3, #8]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a17a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6899      	ldr	r1, [r3, #8]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	68da      	ldr	r2, [r3, #12]
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	691b      	ldr	r3, [r3, #16]
 800a18a:	431a      	orrs	r2, r3
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	430a      	orrs	r2, r1
 800a192:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68da      	ldr	r2, [r3, #12]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1a2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f003 0320 	and.w	r3, r3, #32
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d111      	bne.n	800a1d6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 faf0 	bl	800a798 <HAL_RTC_WaitForSynchro>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00b      	beq.n	800a1d6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	22ff      	movs	r2, #255	; 0xff
 800a1c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2204      	movs	r2, #4
 800a1ca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e00a      	b.n	800a1ec <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	22ff      	movs	r2, #255	; 0xff
 800a1dc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
  }
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	371c      	adds	r7, #28
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd90      	pop	{r4, r7, pc}

0800a1f4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a200:	2300      	movs	r3, #0
 800a202:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	691b      	ldr	r3, [r3, #16]
 800a214:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a226:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a22a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	0c1b      	lsrs	r3, r3, #16
 800a230:	b2db      	uxtb	r3, r3
 800a232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a236:	b2da      	uxtb	r2, r3
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	0a1b      	lsrs	r3, r3, #8
 800a240:	b2db      	uxtb	r3, r3
 800a242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a246:	b2da      	uxtb	r2, r3
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	b2db      	uxtb	r3, r3
 800a250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a254:	b2da      	uxtb	r2, r3
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	0c1b      	lsrs	r3, r3, #16
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a264:	b2da      	uxtb	r2, r3
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d11a      	bne.n	800a2a6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	4618      	mov	r0, r3
 800a276:	f000 fb01 	bl	800a87c <RTC_Bcd2ToByte>
 800a27a:	4603      	mov	r3, r0
 800a27c:	461a      	mov	r2, r3
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	785b      	ldrb	r3, [r3, #1]
 800a286:	4618      	mov	r0, r3
 800a288:	f000 faf8 	bl	800a87c <RTC_Bcd2ToByte>
 800a28c:	4603      	mov	r3, r0
 800a28e:	461a      	mov	r2, r3
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	789b      	ldrb	r3, [r3, #2]
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 faef 	bl	800a87c <RTC_Bcd2ToByte>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a2b0:	b590      	push	{r4, r7, lr}
 800a2b2:	b087      	sub	sp, #28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	7f1b      	ldrb	r3, [r3, #28]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d101      	bne.n	800a2cc <HAL_RTC_SetDate+0x1c>
 800a2c8:	2302      	movs	r3, #2
 800a2ca:	e094      	b.n	800a3f6 <HAL_RTC_SetDate+0x146>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2202      	movs	r2, #2
 800a2d6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10e      	bne.n	800a2fc <HAL_RTC_SetDate+0x4c>
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	f003 0310 	and.w	r3, r3, #16
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d008      	beq.n	800a2fc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	785b      	ldrb	r3, [r3, #1]
 800a2ee:	f023 0310 	bic.w	r3, r3, #16
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	330a      	adds	r3, #10
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d11c      	bne.n	800a33c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	78db      	ldrb	r3, [r3, #3]
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fa9a 	bl	800a840 <RTC_ByteToBcd2>
 800a30c:	4603      	mov	r3, r0
 800a30e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	785b      	ldrb	r3, [r3, #1]
 800a314:	4618      	mov	r0, r3
 800a316:	f000 fa93 	bl	800a840 <RTC_ByteToBcd2>
 800a31a:	4603      	mov	r3, r0
 800a31c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a31e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	789b      	ldrb	r3, [r3, #2]
 800a324:	4618      	mov	r0, r3
 800a326:	f000 fa8b 	bl	800a840 <RTC_ByteToBcd2>
 800a32a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a32c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a336:	4313      	orrs	r3, r2
 800a338:	617b      	str	r3, [r7, #20]
 800a33a:	e00e      	b.n	800a35a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	78db      	ldrb	r3, [r3, #3]
 800a340:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	785b      	ldrb	r3, [r3, #1]
 800a346:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a348:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a34e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a356:	4313      	orrs	r3, r2
 800a358:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	22ca      	movs	r2, #202	; 0xca
 800a360:	625a      	str	r2, [r3, #36]	; 0x24
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2253      	movs	r2, #83	; 0x53
 800a368:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 fa3c 	bl	800a7e8 <RTC_EnterInitMode>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00b      	beq.n	800a38e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	22ff      	movs	r2, #255	; 0xff
 800a37c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2204      	movs	r2, #4
 800a382:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e033      	b.n	800a3f6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a398:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a39c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68da      	ldr	r2, [r3, #12]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	f003 0320 	and.w	r3, r3, #32
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d111      	bne.n	800a3e0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 f9eb 	bl	800a798 <HAL_RTC_WaitForSynchro>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00b      	beq.n	800a3e0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	22ff      	movs	r2, #255	; 0xff
 800a3ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2204      	movs	r2, #4
 800a3d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e00a      	b.n	800a3f6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	22ff      	movs	r2, #255	; 0xff
 800a3e6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
  }
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	371c      	adds	r7, #28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd90      	pop	{r4, r7, pc}

0800a3fe <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b086      	sub	sp, #24
 800a402:	af00      	add	r7, sp, #0
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	60b9      	str	r1, [r7, #8]
 800a408:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a40a:	2300      	movs	r3, #0
 800a40c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a418:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a41c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	0c1b      	lsrs	r3, r3, #16
 800a422:	b2da      	uxtb	r2, r3
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	0a1b      	lsrs	r3, r3, #8
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	f003 031f 	and.w	r3, r3, #31
 800a432:	b2da      	uxtb	r2, r3
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a440:	b2da      	uxtb	r2, r3
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	0b5b      	lsrs	r3, r3, #13
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	f003 0307 	and.w	r3, r3, #7
 800a450:	b2da      	uxtb	r2, r3
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d11a      	bne.n	800a492 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	78db      	ldrb	r3, [r3, #3]
 800a460:	4618      	mov	r0, r3
 800a462:	f000 fa0b 	bl	800a87c <RTC_Bcd2ToByte>
 800a466:	4603      	mov	r3, r0
 800a468:	461a      	mov	r2, r3
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	785b      	ldrb	r3, [r3, #1]
 800a472:	4618      	mov	r0, r3
 800a474:	f000 fa02 	bl	800a87c <RTC_Bcd2ToByte>
 800a478:	4603      	mov	r3, r0
 800a47a:	461a      	mov	r2, r3
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	789b      	ldrb	r3, [r3, #2]
 800a484:	4618      	mov	r0, r3
 800a486:	f000 f9f9 	bl	800a87c <RTC_Bcd2ToByte>
 800a48a:	4603      	mov	r3, r0
 800a48c:	461a      	mov	r2, r3
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a49c:	b590      	push	{r4, r7, lr}
 800a49e:	b089      	sub	sp, #36	; 0x24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	61fb      	str	r3, [r7, #28]
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800a4b0:	4b93      	ldr	r3, [pc, #588]	; (800a700 <HAL_RTC_SetAlarm_IT+0x264>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a93      	ldr	r2, [pc, #588]	; (800a704 <HAL_RTC_SetAlarm_IT+0x268>)
 800a4b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ba:	0adb      	lsrs	r3, r3, #11
 800a4bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a4c0:	fb02 f303 	mul.w	r3, r2, r3
 800a4c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	7f1b      	ldrb	r3, [r3, #28]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d101      	bne.n	800a4d2 <HAL_RTC_SetAlarm_IT+0x36>
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	e111      	b.n	800a6f6 <HAL_RTC_SetAlarm_IT+0x25a>
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d137      	bne.n	800a554 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d102      	bne.n	800a4f8 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f000 f99f 	bl	800a840 <RTC_ByteToBcd2>
 800a502:	4603      	mov	r3, r0
 800a504:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	785b      	ldrb	r3, [r3, #1]
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 f998 	bl	800a840 <RTC_ByteToBcd2>
 800a510:	4603      	mov	r3, r0
 800a512:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a514:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	789b      	ldrb	r3, [r3, #2]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 f990 	bl	800a840 <RTC_ByteToBcd2>
 800a520:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a522:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	78db      	ldrb	r3, [r3, #3]
 800a52a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a52c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a536:	4618      	mov	r0, r3
 800a538:	f000 f982 	bl	800a840 <RTC_ByteToBcd2>
 800a53c:	4603      	mov	r3, r0
 800a53e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a540:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a548:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a54e:	4313      	orrs	r3, r2
 800a550:	61fb      	str	r3, [r7, #28]
 800a552:	e023      	b.n	800a59c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d102      	bne.n	800a568 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2200      	movs	r2, #0
 800a566:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	785b      	ldrb	r3, [r3, #1]
 800a572:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a574:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a57a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	78db      	ldrb	r3, [r3, #3]
 800a580:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a582:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a58a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a58c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a592:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a598:	4313      	orrs	r3, r2
 800a59a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	685a      	ldr	r2, [r3, #4]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	22ca      	movs	r2, #202	; 0xca
 800a5ae:	625a      	str	r2, [r3, #36]	; 0x24
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2253      	movs	r2, #83	; 0x53
 800a5b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5c0:	d141      	bne.n	800a646 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	689a      	ldr	r2, [r3, #8]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a5d0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800a5e2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	1e5a      	subs	r2, r3, #1
 800a5e8:	617a      	str	r2, [r7, #20]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d10b      	bne.n	800a606 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	22ff      	movs	r2, #255	; 0xff
 800a5f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2203      	movs	r2, #3
 800a5fa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a602:	2303      	movs	r3, #3
 800a604:	e077      	b.n	800a6f6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0e7      	beq.n	800a5e4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	69fa      	ldr	r2, [r7, #28]
 800a61a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	69ba      	ldr	r2, [r7, #24]
 800a622:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	689a      	ldr	r2, [r3, #8]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a632:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	689a      	ldr	r2, [r3, #8]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a642:	609a      	str	r2, [r3, #8]
 800a644:	e040      	b.n	800a6c8 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	689a      	ldr	r2, [r3, #8]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a654:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	b2da      	uxtb	r2, r3
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f462 7220 	orn	r2, r2, #640	; 0x280
 800a666:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	1e5a      	subs	r2, r3, #1
 800a66c:	617a      	str	r2, [r7, #20]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10b      	bne.n	800a68a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	22ff      	movs	r2, #255	; 0xff
 800a678:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2203      	movs	r2, #3
 800a67e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a686:	2303      	movs	r3, #3
 800a688:	e035      	b.n	800a6f6 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	f003 0302 	and.w	r3, r3, #2
 800a694:	2b00      	cmp	r3, #0
 800a696:	d0e7      	beq.n	800a668 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	69fa      	ldr	r2, [r7, #28]
 800a69e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	69ba      	ldr	r2, [r7, #24]
 800a6a6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689a      	ldr	r2, [r3, #8]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6b6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	689a      	ldr	r2, [r3, #8]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6c6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a6c8:	4b0f      	ldr	r3, [pc, #60]	; (800a708 <HAL_RTC_SetAlarm_IT+0x26c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a0e      	ldr	r2, [pc, #56]	; (800a708 <HAL_RTC_SetAlarm_IT+0x26c>)
 800a6ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6d2:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800a6d4:	4b0c      	ldr	r3, [pc, #48]	; (800a708 <HAL_RTC_SetAlarm_IT+0x26c>)
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	4a0b      	ldr	r2, [pc, #44]	; (800a708 <HAL_RTC_SetAlarm_IT+0x26c>)
 800a6da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6de:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	22ff      	movs	r2, #255	; 0xff
 800a6e6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3724      	adds	r7, #36	; 0x24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd90      	pop	{r4, r7, pc}
 800a6fe:	bf00      	nop
 800a700:	20000088 	.word	0x20000088
 800a704:	10624dd3 	.word	0x10624dd3
 800a708:	40013c00 	.word	0x40013c00

0800a70c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d012      	beq.n	800a748 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00b      	beq.n	800a748 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f7f8 fe8d 	bl	8003450 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800a746:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a752:	2b00      	cmp	r3, #0
 800a754:	d012      	beq.n	800a77c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00b      	beq.n	800a77c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7f8 fe85 	bl	8003474 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	b2da      	uxtb	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f462 7220 	orn	r2, r2, #640	; 0x280
 800a77a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a77c:	4b05      	ldr	r3, [pc, #20]	; (800a794 <HAL_RTC_AlarmIRQHandler+0x88>)
 800a77e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a782:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	775a      	strb	r2, [r3, #29]
}
 800a78a:	bf00      	nop
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	40013c00 	.word	0x40013c00

0800a798 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68da      	ldr	r2, [r3, #12]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a7b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a7b4:	f7fc fcd4 	bl	8007160 <HAL_GetTick>
 800a7b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a7ba:	e009      	b.n	800a7d0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a7bc:	f7fc fcd0 	bl	8007160 <HAL_GetTick>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7ca:	d901      	bls.n	800a7d0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e007      	b.n	800a7e0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	f003 0320 	and.w	r3, r3, #32
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d0ee      	beq.n	800a7bc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a7de:	2300      	movs	r3, #0
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d119      	bne.n	800a836 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f04f 32ff 	mov.w	r2, #4294967295
 800a80a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a80c:	f7fc fca8 	bl	8007160 <HAL_GetTick>
 800a810:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a812:	e009      	b.n	800a828 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a814:	f7fc fca4 	bl	8007160 <HAL_GetTick>
 800a818:	4602      	mov	r2, r0
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a822:	d901      	bls.n	800a828 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a824:	2303      	movs	r3, #3
 800a826:	e007      	b.n	800a838 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a832:	2b00      	cmp	r3, #0
 800a834:	d0ee      	beq.n	800a814 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	4603      	mov	r3, r0
 800a848:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a84a:	2300      	movs	r3, #0
 800a84c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800a84e:	e005      	b.n	800a85c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3301      	adds	r3, #1
 800a854:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	3b0a      	subs	r3, #10
 800a85a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800a85c:	79fb      	ldrb	r3, [r7, #7]
 800a85e:	2b09      	cmp	r3, #9
 800a860:	d8f6      	bhi.n	800a850 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	011b      	lsls	r3, r3, #4
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	79fb      	ldrb	r3, [r7, #7]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	b2db      	uxtb	r3, r3
}
 800a870:	4618      	mov	r0, r3
 800a872:	3714      	adds	r7, #20
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a87c:	b480      	push	{r7}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a886:	2300      	movs	r3, #0
 800a888:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	091b      	lsrs	r3, r3, #4
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	461a      	mov	r2, r3
 800a892:	4613      	mov	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a89c:	79fb      	ldrb	r3, [r7, #7]
 800a89e:	f003 030f 	and.w	r3, r3, #15
 800a8a2:	b2da      	uxtb	r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	b2db      	uxtb	r3, r3
 800a8a8:	4413      	add	r3, r2
 800a8aa:	b2db      	uxtb	r3, r3
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3714      	adds	r7, #20
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b087      	sub	sp, #28
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	7f1b      	ldrb	r3, [r3, #28]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d101      	bne.n	800a8d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	e0a6      	b.n	800aa1e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2202      	movs	r2, #2
 800a8da:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	22ca      	movs	r2, #202	; 0xca
 800a8e2:	625a      	str	r2, [r3, #36]	; 0x24
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2253      	movs	r2, #83	; 0x53
 800a8ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d022      	beq.n	800a940 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800a8fa:	4b4c      	ldr	r3, [pc, #304]	; (800aa2c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a4c      	ldr	r2, [pc, #304]	; (800aa30 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800a900:	fba2 2303 	umull	r2, r3, r2, r3
 800a904:	0adb      	lsrs	r3, r3, #11
 800a906:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a90a:	fb02 f303 	mul.w	r3, r2, r3
 800a90e:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	1e5a      	subs	r2, r3, #1
 800a914:	617a      	str	r2, [r7, #20]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10b      	bne.n	800a932 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	22ff      	movs	r2, #255	; 0xff
 800a920:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2203      	movs	r2, #3
 800a926:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e075      	b.n	800aa1e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	f003 0304 	and.w	r3, r3, #4
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1e7      	bne.n	800a910 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	689a      	ldr	r2, [r3, #8]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a94e:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800a950:	4b36      	ldr	r3, [pc, #216]	; (800aa2c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a36      	ldr	r2, [pc, #216]	; (800aa30 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800a956:	fba2 2303 	umull	r2, r3, r2, r3
 800a95a:	0adb      	lsrs	r3, r3, #11
 800a95c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a960:	fb02 f303 	mul.w	r3, r2, r3
 800a964:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	1e5a      	subs	r2, r3, #1
 800a96a:	617a      	str	r2, [r7, #20]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10b      	bne.n	800a988 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	22ff      	movs	r2, #255	; 0xff
 800a976:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2203      	movs	r2, #3
 800a97c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800a984:	2303      	movs	r3, #3
 800a986:	e04a      	b.n	800aa1e <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68db      	ldr	r3, [r3, #12]
 800a98e:	f003 0304 	and.w	r3, r3, #4
 800a992:	2b00      	cmp	r3, #0
 800a994:	d0e7      	beq.n	800a966 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68ba      	ldr	r2, [r7, #8]
 800a99c:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	689a      	ldr	r2, [r3, #8]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f022 0207 	bic.w	r2, r2, #7
 800a9ac:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	6899      	ldr	r1, [r3, #8]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	430a      	orrs	r2, r1
 800a9bc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800a9be:	4b1d      	ldr	r3, [pc, #116]	; (800aa34 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a1c      	ldr	r2, [pc, #112]	; (800aa34 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800a9c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a9c8:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800a9ca:	4b1a      	ldr	r3, [pc, #104]	; (800aa34 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	4a19      	ldr	r2, [pc, #100]	; (800aa34 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800a9d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a9d4:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800a9e6:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	689a      	ldr	r2, [r3, #8]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9f6:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	689a      	ldr	r2, [r3, #8]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aa06:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	22ff      	movs	r2, #255	; 0xff
 800aa0e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2201      	movs	r2, #1
 800aa14:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	20000088 	.word	0x20000088
 800aa30:	10624dd3 	.word	0x10624dd3
 800aa34:	40013c00 	.word	0x40013c00

0800aa38 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	7f1b      	ldrb	r3, [r3, #28]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d101      	bne.n	800aa50 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e047      	b.n	800aae0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2202      	movs	r2, #2
 800aa5a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	22ca      	movs	r2, #202	; 0xca
 800aa62:	625a      	str	r2, [r3, #36]	; 0x24
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2253      	movs	r2, #83	; 0x53
 800aa6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	689a      	ldr	r2, [r3, #8]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa7a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	689a      	ldr	r2, [r3, #8]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aa8a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa8c:	f7fc fb68 	bl	8007160 <HAL_GetTick>
 800aa90:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800aa92:	e013      	b.n	800aabc <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800aa94:	f7fc fb64 	bl	8007160 <HAL_GetTick>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aaa2:	d90b      	bls.n	800aabc <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	22ff      	movs	r2, #255	; 0xff
 800aaaa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2203      	movs	r2, #3
 800aab0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e011      	b.n	800aae0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f003 0304 	and.w	r3, r3, #4
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0e4      	beq.n	800aa94 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	22ff      	movs	r2, #255	; 0xff
 800aad0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00b      	beq.n	800ab16 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 f816 	bl	800ab30 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800ab14:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800ab16:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800ab18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800ab1c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	775a      	strb	r2, [r3, #29]
}
 800ab24:	bf00      	nop
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	40013c00 	.word	0x40013c00

0800ab30 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b087      	sub	sp, #28
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800ab50:	2300      	movs	r3, #0
 800ab52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	3350      	adds	r3, #80	; 0x50
 800ab5a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	4413      	add	r3, r2
 800ab64:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	601a      	str	r2, [r3, #0]
}
 800ab6c:	bf00      	nop
 800ab6e:	371c      	adds	r7, #28
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800ab82:	2300      	movs	r3, #0
 800ab84:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3350      	adds	r3, #80	; 0x50
 800ab8c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	4413      	add	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e07b      	b.n	800acb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d108      	bne.n	800abd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abca:	d009      	beq.n	800abe0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	61da      	str	r2, [r3, #28]
 800abd2:	e005      	b.n	800abe0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d106      	bne.n	800ac00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f7f8 fa68 	bl	80030d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac32:	431a      	orrs	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	431a      	orrs	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	f003 0301 	and.w	r3, r3, #1
 800ac46:	431a      	orrs	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac50:	431a      	orrs	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac5a:	431a      	orrs	r2, r3
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac64:	ea42 0103 	orr.w	r1, r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	430a      	orrs	r2, r1
 800ac76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	0c1b      	lsrs	r3, r3, #16
 800ac7e:	f003 0104 	and.w	r1, r3, #4
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac86:	f003 0210 	and.w	r2, r3, #16
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	69da      	ldr	r2, [r3, #28]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aca0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3708      	adds	r7, #8
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b088      	sub	sp, #32
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	60f8      	str	r0, [r7, #12]
 800acc2:	60b9      	str	r1, [r7, #8]
 800acc4:	603b      	str	r3, [r7, #0]
 800acc6:	4613      	mov	r3, r2
 800acc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d101      	bne.n	800acdc <HAL_SPI_Transmit+0x22>
 800acd8:	2302      	movs	r3, #2
 800acda:	e126      	b.n	800af2a <HAL_SPI_Transmit+0x270>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ace4:	f7fc fa3c 	bl	8007160 <HAL_GetTick>
 800ace8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800acea:	88fb      	ldrh	r3, [r7, #6]
 800acec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d002      	beq.n	800ad00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800acfa:	2302      	movs	r3, #2
 800acfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800acfe:	e10b      	b.n	800af18 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d002      	beq.n	800ad0c <HAL_SPI_Transmit+0x52>
 800ad06:	88fb      	ldrh	r3, [r7, #6]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d102      	bne.n	800ad12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad10:	e102      	b.n	800af18 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2203      	movs	r2, #3
 800ad16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	88fa      	ldrh	r2, [r7, #6]
 800ad2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	88fa      	ldrh	r2, [r7, #6]
 800ad30:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2200      	movs	r2, #0
 800ad48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad58:	d10f      	bne.n	800ad7a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad84:	2b40      	cmp	r3, #64	; 0x40
 800ad86:	d007      	beq.n	800ad98 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ada0:	d14b      	bne.n	800ae3a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d002      	beq.n	800adb0 <HAL_SPI_Transmit+0xf6>
 800adaa:	8afb      	ldrh	r3, [r7, #22]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d13e      	bne.n	800ae2e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb4:	881a      	ldrh	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc0:	1c9a      	adds	r2, r3, #2
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adca:	b29b      	uxth	r3, r3
 800adcc:	3b01      	subs	r3, #1
 800adce:	b29a      	uxth	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800add4:	e02b      	b.n	800ae2e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	f003 0302 	and.w	r3, r3, #2
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	d112      	bne.n	800ae0a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ade8:	881a      	ldrh	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf4:	1c9a      	adds	r2, r3, #2
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	3b01      	subs	r3, #1
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	86da      	strh	r2, [r3, #54]	; 0x36
 800ae08:	e011      	b.n	800ae2e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae0a:	f7fc f9a9 	bl	8007160 <HAL_GetTick>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d803      	bhi.n	800ae22 <HAL_SPI_Transmit+0x168>
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae20:	d102      	bne.n	800ae28 <HAL_SPI_Transmit+0x16e>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d102      	bne.n	800ae2e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800ae28:	2303      	movs	r3, #3
 800ae2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ae2c:	e074      	b.n	800af18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1ce      	bne.n	800add6 <HAL_SPI_Transmit+0x11c>
 800ae38:	e04c      	b.n	800aed4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d002      	beq.n	800ae48 <HAL_SPI_Transmit+0x18e>
 800ae42:	8afb      	ldrh	r3, [r7, #22]
 800ae44:	2b01      	cmp	r3, #1
 800ae46:	d140      	bne.n	800aeca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	330c      	adds	r3, #12
 800ae52:	7812      	ldrb	r2, [r2, #0]
 800ae54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	3b01      	subs	r3, #1
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ae6e:	e02c      	b.n	800aeca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	f003 0302 	and.w	r3, r3, #2
 800ae7a:	2b02      	cmp	r3, #2
 800ae7c:	d113      	bne.n	800aea6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	330c      	adds	r3, #12
 800ae88:	7812      	ldrb	r2, [r2, #0]
 800ae8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	b29a      	uxth	r2, r3
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	86da      	strh	r2, [r3, #54]	; 0x36
 800aea4:	e011      	b.n	800aeca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aea6:	f7fc f95b 	bl	8007160 <HAL_GetTick>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	1ad3      	subs	r3, r2, r3
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d803      	bhi.n	800aebe <HAL_SPI_Transmit+0x204>
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aebc:	d102      	bne.n	800aec4 <HAL_SPI_Transmit+0x20a>
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d102      	bne.n	800aeca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800aec4:	2303      	movs	r3, #3
 800aec6:	77fb      	strb	r3, [r7, #31]
          goto error;
 800aec8:	e026      	b.n	800af18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aece:	b29b      	uxth	r3, r3
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1cd      	bne.n	800ae70 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	6839      	ldr	r1, [r7, #0]
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 fbcb 	bl	800b674 <SPI_EndRxTxTransaction>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2220      	movs	r2, #32
 800aee8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10a      	bne.n	800af08 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aef2:	2300      	movs	r3, #0
 800aef4:	613b      	str	r3, [r7, #16]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	613b      	str	r3, [r7, #16]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	613b      	str	r3, [r7, #16]
 800af06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	77fb      	strb	r3, [r7, #31]
 800af14:	e000      	b.n	800af18 <HAL_SPI_Transmit+0x25e>
  }

error:
 800af16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800af28:	7ffb      	ldrb	r3, [r7, #31]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3720      	adds	r7, #32
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b088      	sub	sp, #32
 800af36:	af02      	add	r7, sp, #8
 800af38:	60f8      	str	r0, [r7, #12]
 800af3a:	60b9      	str	r1, [r7, #8]
 800af3c:	603b      	str	r3, [r7, #0]
 800af3e:	4613      	mov	r3, r2
 800af40:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af4e:	d112      	bne.n	800af76 <HAL_SPI_Receive+0x44>
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10e      	bne.n	800af76 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2204      	movs	r2, #4
 800af5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800af60:	88fa      	ldrh	r2, [r7, #6]
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	4613      	mov	r3, r2
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	68b9      	ldr	r1, [r7, #8]
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f000 f8f1 	bl	800b154 <HAL_SPI_TransmitReceive>
 800af72:	4603      	mov	r3, r0
 800af74:	e0ea      	b.n	800b14c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d101      	bne.n	800af84 <HAL_SPI_Receive+0x52>
 800af80:	2302      	movs	r3, #2
 800af82:	e0e3      	b.n	800b14c <HAL_SPI_Receive+0x21a>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2201      	movs	r2, #1
 800af88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af8c:	f7fc f8e8 	bl	8007160 <HAL_GetTick>
 800af90:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d002      	beq.n	800afa4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800af9e:	2302      	movs	r3, #2
 800afa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800afa2:	e0ca      	b.n	800b13a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d002      	beq.n	800afb0 <HAL_SPI_Receive+0x7e>
 800afaa:	88fb      	ldrh	r3, [r7, #6]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d102      	bne.n	800afb6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800afb4:	e0c1      	b.n	800b13a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2204      	movs	r2, #4
 800afba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	88fa      	ldrh	r2, [r7, #6]
 800afce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	88fa      	ldrh	r2, [r7, #6]
 800afd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2200      	movs	r2, #0
 800afda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2200      	movs	r2, #0
 800afe0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2200      	movs	r2, #0
 800aff2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800affc:	d10f      	bne.n	800b01e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681a      	ldr	r2, [r3, #0]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b00c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b01c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b028:	2b40      	cmp	r3, #64	; 0x40
 800b02a:	d007      	beq.n	800b03c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b03a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d162      	bne.n	800b10a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b044:	e02e      	b.n	800b0a4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	689b      	ldr	r3, [r3, #8]
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	2b01      	cmp	r3, #1
 800b052:	d115      	bne.n	800b080 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f103 020c 	add.w	r2, r3, #12
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b060:	7812      	ldrb	r2, [r2, #0]
 800b062:	b2d2      	uxtb	r2, r2
 800b064:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b06a:	1c5a      	adds	r2, r3, #1
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b074:	b29b      	uxth	r3, r3
 800b076:	3b01      	subs	r3, #1
 800b078:	b29a      	uxth	r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b07e:	e011      	b.n	800b0a4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b080:	f7fc f86e 	bl	8007160 <HAL_GetTick>
 800b084:	4602      	mov	r2, r0
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d803      	bhi.n	800b098 <HAL_SPI_Receive+0x166>
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b096:	d102      	bne.n	800b09e <HAL_SPI_Receive+0x16c>
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d102      	bne.n	800b0a4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b0a2:	e04a      	b.n	800b13a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1cb      	bne.n	800b046 <HAL_SPI_Receive+0x114>
 800b0ae:	e031      	b.n	800b114 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d113      	bne.n	800b0e6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68da      	ldr	r2, [r3, #12]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0c8:	b292      	uxth	r2, r2
 800b0ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d0:	1c9a      	adds	r2, r3, #2
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b0e4:	e011      	b.n	800b10a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0e6:	f7fc f83b 	bl	8007160 <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	683a      	ldr	r2, [r7, #0]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d803      	bhi.n	800b0fe <HAL_SPI_Receive+0x1cc>
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fc:	d102      	bne.n	800b104 <HAL_SPI_Receive+0x1d2>
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d102      	bne.n	800b10a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b108:	e017      	b.n	800b13a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b10e:	b29b      	uxth	r3, r3
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1cd      	bne.n	800b0b0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f000 fa45 	bl	800b5a8 <SPI_EndRxTransaction>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d002      	beq.n	800b12a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2220      	movs	r2, #32
 800b128:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d002      	beq.n	800b138 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	75fb      	strb	r3, [r7, #23]
 800b136:	e000      	b.n	800b13a <HAL_SPI_Receive+0x208>
  }

error :
 800b138:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2201      	movs	r2, #1
 800b13e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b14a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3718      	adds	r7, #24
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b08c      	sub	sp, #48	; 0x30
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
 800b160:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b162:	2301      	movs	r3, #1
 800b164:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b172:	2b01      	cmp	r3, #1
 800b174:	d101      	bne.n	800b17a <HAL_SPI_TransmitReceive+0x26>
 800b176:	2302      	movs	r3, #2
 800b178:	e18a      	b.n	800b490 <HAL_SPI_TransmitReceive+0x33c>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2201      	movs	r2, #1
 800b17e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b182:	f7fb ffed 	bl	8007160 <HAL_GetTick>
 800b186:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b18e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b198:	887b      	ldrh	r3, [r7, #2]
 800b19a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b19c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d00f      	beq.n	800b1c4 <HAL_SPI_TransmitReceive+0x70>
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1aa:	d107      	bne.n	800b1bc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d103      	bne.n	800b1bc <HAL_SPI_TransmitReceive+0x68>
 800b1b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1b8:	2b04      	cmp	r3, #4
 800b1ba:	d003      	beq.n	800b1c4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b1bc:	2302      	movs	r3, #2
 800b1be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b1c2:	e15b      	b.n	800b47c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d005      	beq.n	800b1d6 <HAL_SPI_TransmitReceive+0x82>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <HAL_SPI_TransmitReceive+0x82>
 800b1d0:	887b      	ldrh	r3, [r7, #2]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d103      	bne.n	800b1de <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b1dc:	e14e      	b.n	800b47c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b04      	cmp	r3, #4
 800b1e8:	d003      	beq.n	800b1f2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2205      	movs	r2, #5
 800b1ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	887a      	ldrh	r2, [r7, #2]
 800b202:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	887a      	ldrh	r2, [r7, #2]
 800b208:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	887a      	ldrh	r2, [r7, #2]
 800b214:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	887a      	ldrh	r2, [r7, #2]
 800b21a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b232:	2b40      	cmp	r3, #64	; 0x40
 800b234:	d007      	beq.n	800b246 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b244:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b24e:	d178      	bne.n	800b342 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <HAL_SPI_TransmitReceive+0x10a>
 800b258:	8b7b      	ldrh	r3, [r7, #26]
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d166      	bne.n	800b32c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b262:	881a      	ldrh	r2, [r3, #0]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26e:	1c9a      	adds	r2, r3, #2
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b278:	b29b      	uxth	r3, r3
 800b27a:	3b01      	subs	r3, #1
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b282:	e053      	b.n	800b32c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	689b      	ldr	r3, [r3, #8]
 800b28a:	f003 0302 	and.w	r3, r3, #2
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d11b      	bne.n	800b2ca <HAL_SPI_TransmitReceive+0x176>
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b296:	b29b      	uxth	r3, r3
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d016      	beq.n	800b2ca <HAL_SPI_TransmitReceive+0x176>
 800b29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d113      	bne.n	800b2ca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a6:	881a      	ldrh	r2, [r3, #0]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b2:	1c9a      	adds	r2, r3, #2
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	f003 0301 	and.w	r3, r3, #1
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d119      	bne.n	800b30c <HAL_SPI_TransmitReceive+0x1b8>
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d014      	beq.n	800b30c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	68da      	ldr	r2, [r3, #12]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ec:	b292      	uxth	r2, r2
 800b2ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f4:	1c9a      	adds	r2, r3, #2
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	3b01      	subs	r3, #1
 800b302:	b29a      	uxth	r2, r3
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b308:	2301      	movs	r3, #1
 800b30a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b30c:	f7fb ff28 	bl	8007160 <HAL_GetTick>
 800b310:	4602      	mov	r2, r0
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	1ad3      	subs	r3, r2, r3
 800b316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b318:	429a      	cmp	r2, r3
 800b31a:	d807      	bhi.n	800b32c <HAL_SPI_TransmitReceive+0x1d8>
 800b31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b322:	d003      	beq.n	800b32c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b32a:	e0a7      	b.n	800b47c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b330:	b29b      	uxth	r3, r3
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1a6      	bne.n	800b284 <HAL_SPI_TransmitReceive+0x130>
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1a1      	bne.n	800b284 <HAL_SPI_TransmitReceive+0x130>
 800b340:	e07c      	b.n	800b43c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d002      	beq.n	800b350 <HAL_SPI_TransmitReceive+0x1fc>
 800b34a:	8b7b      	ldrh	r3, [r7, #26]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d16b      	bne.n	800b428 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	330c      	adds	r3, #12
 800b35a:	7812      	ldrb	r2, [r2, #0]
 800b35c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	3b01      	subs	r3, #1
 800b370:	b29a      	uxth	r2, r3
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b376:	e057      	b.n	800b428 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	f003 0302 	and.w	r3, r3, #2
 800b382:	2b02      	cmp	r3, #2
 800b384:	d11c      	bne.n	800b3c0 <HAL_SPI_TransmitReceive+0x26c>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b38a:	b29b      	uxth	r3, r3
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d017      	beq.n	800b3c0 <HAL_SPI_TransmitReceive+0x26c>
 800b390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b392:	2b01      	cmp	r3, #1
 800b394:	d114      	bne.n	800b3c0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	330c      	adds	r3, #12
 800b3a0:	7812      	ldrb	r2, [r2, #0]
 800b3a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a8:	1c5a      	adds	r2, r3, #1
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	f003 0301 	and.w	r3, r3, #1
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d119      	bne.n	800b402 <HAL_SPI_TransmitReceive+0x2ae>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d014      	beq.n	800b402 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68da      	ldr	r2, [r3, #12]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e2:	b2d2      	uxtb	r2, r2
 800b3e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ea:	1c5a      	adds	r2, r3, #1
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b3fe:	2301      	movs	r3, #1
 800b400:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b402:	f7fb fead 	bl	8007160 <HAL_GetTick>
 800b406:	4602      	mov	r2, r0
 800b408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b40e:	429a      	cmp	r2, r3
 800b410:	d803      	bhi.n	800b41a <HAL_SPI_TransmitReceive+0x2c6>
 800b412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b418:	d102      	bne.n	800b420 <HAL_SPI_TransmitReceive+0x2cc>
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d103      	bne.n	800b428 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b420:	2303      	movs	r3, #3
 800b422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b426:	e029      	b.n	800b47c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1a2      	bne.n	800b378 <HAL_SPI_TransmitReceive+0x224>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b436:	b29b      	uxth	r3, r3
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d19d      	bne.n	800b378 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b43c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b43e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f000 f917 	bl	800b674 <SPI_EndRxTxTransaction>
 800b446:	4603      	mov	r3, r0
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d006      	beq.n	800b45a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2220      	movs	r2, #32
 800b456:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b458:	e010      	b.n	800b47c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10b      	bne.n	800b47a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b462:	2300      	movs	r3, #0
 800b464:	617b      	str	r3, [r7, #20]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68db      	ldr	r3, [r3, #12]
 800b46c:	617b      	str	r3, [r7, #20]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	689b      	ldr	r3, [r3, #8]
 800b474:	617b      	str	r3, [r7, #20]
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	e000      	b.n	800b47c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b47a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b48c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b490:	4618      	mov	r0, r3
 800b492:	3730      	adds	r7, #48	; 0x30
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	603b      	str	r3, [r7, #0]
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b4a8:	f7fb fe5a 	bl	8007160 <HAL_GetTick>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b0:	1a9b      	subs	r3, r3, r2
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b4b8:	f7fb fe52 	bl	8007160 <HAL_GetTick>
 800b4bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b4be:	4b39      	ldr	r3, [pc, #228]	; (800b5a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	015b      	lsls	r3, r3, #5
 800b4c4:	0d1b      	lsrs	r3, r3, #20
 800b4c6:	69fa      	ldr	r2, [r7, #28]
 800b4c8:	fb02 f303 	mul.w	r3, r2, r3
 800b4cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b4ce:	e054      	b.n	800b57a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d6:	d050      	beq.n	800b57a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b4d8:	f7fb fe42 	bl	8007160 <HAL_GetTick>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	69fa      	ldr	r2, [r7, #28]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d902      	bls.n	800b4ee <SPI_WaitFlagStateUntilTimeout+0x56>
 800b4e8:	69fb      	ldr	r3, [r7, #28]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d13d      	bne.n	800b56a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b4fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b506:	d111      	bne.n	800b52c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b510:	d004      	beq.n	800b51c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b51a:	d107      	bne.n	800b52c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b52a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b534:	d10f      	bne.n	800b556 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b544:	601a      	str	r2, [r3, #0]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b554:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b566:	2303      	movs	r3, #3
 800b568:	e017      	b.n	800b59a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	3b01      	subs	r3, #1
 800b578:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	689a      	ldr	r2, [r3, #8]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	4013      	ands	r3, r2
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	429a      	cmp	r2, r3
 800b588:	bf0c      	ite	eq
 800b58a:	2301      	moveq	r3, #1
 800b58c:	2300      	movne	r3, #0
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	461a      	mov	r2, r3
 800b592:	79fb      	ldrb	r3, [r7, #7]
 800b594:	429a      	cmp	r2, r3
 800b596:	d19b      	bne.n	800b4d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3720      	adds	r7, #32
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	20000088 	.word	0x20000088

0800b5a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af02      	add	r7, sp, #8
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5bc:	d111      	bne.n	800b5e2 <SPI_EndRxTransaction+0x3a>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5c6:	d004      	beq.n	800b5d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5d0:	d107      	bne.n	800b5e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5ea:	d12a      	bne.n	800b642 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5f4:	d012      	beq.n	800b61c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2180      	movs	r1, #128	; 0x80
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f7ff ff49 	bl	800b498 <SPI_WaitFlagStateUntilTimeout>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d02d      	beq.n	800b668 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b610:	f043 0220 	orr.w	r2, r3, #32
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b618:	2303      	movs	r3, #3
 800b61a:	e026      	b.n	800b66a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	2200      	movs	r2, #0
 800b624:	2101      	movs	r1, #1
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f7ff ff36 	bl	800b498 <SPI_WaitFlagStateUntilTimeout>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d01a      	beq.n	800b668 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b636:	f043 0220 	orr.w	r2, r3, #32
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b63e:	2303      	movs	r3, #3
 800b640:	e013      	b.n	800b66a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2200      	movs	r2, #0
 800b64a:	2101      	movs	r1, #1
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f7ff ff23 	bl	800b498 <SPI_WaitFlagStateUntilTimeout>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d007      	beq.n	800b668 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b65c:	f043 0220 	orr.w	r2, r3, #32
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b664:	2303      	movs	r3, #3
 800b666:	e000      	b.n	800b66a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}
	...

0800b674 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b088      	sub	sp, #32
 800b678:	af02      	add	r7, sp, #8
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b680:	4b1b      	ldr	r3, [pc, #108]	; (800b6f0 <SPI_EndRxTxTransaction+0x7c>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a1b      	ldr	r2, [pc, #108]	; (800b6f4 <SPI_EndRxTxTransaction+0x80>)
 800b686:	fba2 2303 	umull	r2, r3, r2, r3
 800b68a:	0d5b      	lsrs	r3, r3, #21
 800b68c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b690:	fb02 f303 	mul.w	r3, r2, r3
 800b694:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b69e:	d112      	bne.n	800b6c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	2180      	movs	r1, #128	; 0x80
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f7ff fef4 	bl	800b498 <SPI_WaitFlagStateUntilTimeout>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d016      	beq.n	800b6e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ba:	f043 0220 	orr.w	r2, r3, #32
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b6c2:	2303      	movs	r3, #3
 800b6c4:	e00f      	b.n	800b6e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00a      	beq.n	800b6e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6dc:	2b80      	cmp	r3, #128	; 0x80
 800b6de:	d0f2      	beq.n	800b6c6 <SPI_EndRxTxTransaction+0x52>
 800b6e0:	e000      	b.n	800b6e4 <SPI_EndRxTxTransaction+0x70>
        break;
 800b6e2:	bf00      	nop
  }

  return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3718      	adds	r7, #24
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	20000088 	.word	0x20000088
 800b6f4:	165e9f81 	.word	0x165e9f81

0800b6f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d101      	bne.n	800b70a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e041      	b.n	800b78e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b710:	b2db      	uxtb	r3, r3
 800b712:	2b00      	cmp	r3, #0
 800b714:	d106      	bne.n	800b724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7f7 ff4a 	bl	80035b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2202      	movs	r2, #2
 800b728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	3304      	adds	r3, #4
 800b734:	4619      	mov	r1, r3
 800b736:	4610      	mov	r0, r2
 800b738:	f000 fcea 	bl	800c110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2201      	movs	r2, #1
 800b760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
	...

0800b798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d001      	beq.n	800b7b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e04e      	b.n	800b84e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2202      	movs	r2, #2
 800b7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68da      	ldr	r2, [r3, #12]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f042 0201 	orr.w	r2, r2, #1
 800b7c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	4a23      	ldr	r2, [pc, #140]	; (800b85c <HAL_TIM_Base_Start_IT+0xc4>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d022      	beq.n	800b818 <HAL_TIM_Base_Start_IT+0x80>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7da:	d01d      	beq.n	800b818 <HAL_TIM_Base_Start_IT+0x80>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4a1f      	ldr	r2, [pc, #124]	; (800b860 <HAL_TIM_Base_Start_IT+0xc8>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d018      	beq.n	800b818 <HAL_TIM_Base_Start_IT+0x80>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a1e      	ldr	r2, [pc, #120]	; (800b864 <HAL_TIM_Base_Start_IT+0xcc>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d013      	beq.n	800b818 <HAL_TIM_Base_Start_IT+0x80>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4a1c      	ldr	r2, [pc, #112]	; (800b868 <HAL_TIM_Base_Start_IT+0xd0>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d00e      	beq.n	800b818 <HAL_TIM_Base_Start_IT+0x80>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a1b      	ldr	r2, [pc, #108]	; (800b86c <HAL_TIM_Base_Start_IT+0xd4>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d009      	beq.n	800b818 <HAL_TIM_Base_Start_IT+0x80>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4a19      	ldr	r2, [pc, #100]	; (800b870 <HAL_TIM_Base_Start_IT+0xd8>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d004      	beq.n	800b818 <HAL_TIM_Base_Start_IT+0x80>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	4a18      	ldr	r2, [pc, #96]	; (800b874 <HAL_TIM_Base_Start_IT+0xdc>)
 800b814:	4293      	cmp	r3, r2
 800b816:	d111      	bne.n	800b83c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	f003 0307 	and.w	r3, r3, #7
 800b822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b06      	cmp	r3, #6
 800b828:	d010      	beq.n	800b84c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f042 0201 	orr.w	r2, r2, #1
 800b838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b83a:	e007      	b.n	800b84c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f042 0201 	orr.w	r2, r2, #1
 800b84a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3714      	adds	r7, #20
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	40010000 	.word	0x40010000
 800b860:	40000400 	.word	0x40000400
 800b864:	40000800 	.word	0x40000800
 800b868:	40000c00 	.word	0x40000c00
 800b86c:	40010400 	.word	0x40010400
 800b870:	40014000 	.word	0x40014000
 800b874:	40001800 	.word	0x40001800

0800b878 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d101      	bne.n	800b88a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	e041      	b.n	800b90e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	d106      	bne.n	800b8a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f000 f839 	bl	800b916 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	f000 fc2a 	bl	800c110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2201      	movs	r2, #1
 800b8c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}

0800b916 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b916:	b480      	push	{r7}
 800b918:	b083      	sub	sp, #12
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b91e:	bf00      	nop
 800b920:	370c      	adds	r7, #12
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
	...

0800b92c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d109      	bne.n	800b950 <HAL_TIM_PWM_Start+0x24>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b942:	b2db      	uxtb	r3, r3
 800b944:	2b01      	cmp	r3, #1
 800b946:	bf14      	ite	ne
 800b948:	2301      	movne	r3, #1
 800b94a:	2300      	moveq	r3, #0
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	e022      	b.n	800b996 <HAL_TIM_PWM_Start+0x6a>
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	2b04      	cmp	r3, #4
 800b954:	d109      	bne.n	800b96a <HAL_TIM_PWM_Start+0x3e>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b01      	cmp	r3, #1
 800b960:	bf14      	ite	ne
 800b962:	2301      	movne	r3, #1
 800b964:	2300      	moveq	r3, #0
 800b966:	b2db      	uxtb	r3, r3
 800b968:	e015      	b.n	800b996 <HAL_TIM_PWM_Start+0x6a>
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	d109      	bne.n	800b984 <HAL_TIM_PWM_Start+0x58>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b976:	b2db      	uxtb	r3, r3
 800b978:	2b01      	cmp	r3, #1
 800b97a:	bf14      	ite	ne
 800b97c:	2301      	movne	r3, #1
 800b97e:	2300      	moveq	r3, #0
 800b980:	b2db      	uxtb	r3, r3
 800b982:	e008      	b.n	800b996 <HAL_TIM_PWM_Start+0x6a>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	bf14      	ite	ne
 800b990:	2301      	movne	r3, #1
 800b992:	2300      	moveq	r3, #0
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	e07c      	b.n	800ba98 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d104      	bne.n	800b9ae <HAL_TIM_PWM_Start+0x82>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2202      	movs	r2, #2
 800b9a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9ac:	e013      	b.n	800b9d6 <HAL_TIM_PWM_Start+0xaa>
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2b04      	cmp	r3, #4
 800b9b2:	d104      	bne.n	800b9be <HAL_TIM_PWM_Start+0x92>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9bc:	e00b      	b.n	800b9d6 <HAL_TIM_PWM_Start+0xaa>
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	2b08      	cmp	r3, #8
 800b9c2:	d104      	bne.n	800b9ce <HAL_TIM_PWM_Start+0xa2>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9cc:	e003      	b.n	800b9d6 <HAL_TIM_PWM_Start+0xaa>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2202      	movs	r2, #2
 800b9d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	6839      	ldr	r1, [r7, #0]
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f000 fe80 	bl	800c6e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a2d      	ldr	r2, [pc, #180]	; (800baa0 <HAL_TIM_PWM_Start+0x174>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d004      	beq.n	800b9f8 <HAL_TIM_PWM_Start+0xcc>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a2c      	ldr	r2, [pc, #176]	; (800baa4 <HAL_TIM_PWM_Start+0x178>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d101      	bne.n	800b9fc <HAL_TIM_PWM_Start+0xd0>
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e000      	b.n	800b9fe <HAL_TIM_PWM_Start+0xd2>
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d007      	beq.n	800ba12 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a22      	ldr	r2, [pc, #136]	; (800baa0 <HAL_TIM_PWM_Start+0x174>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d022      	beq.n	800ba62 <HAL_TIM_PWM_Start+0x136>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba24:	d01d      	beq.n	800ba62 <HAL_TIM_PWM_Start+0x136>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a1f      	ldr	r2, [pc, #124]	; (800baa8 <HAL_TIM_PWM_Start+0x17c>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d018      	beq.n	800ba62 <HAL_TIM_PWM_Start+0x136>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a1d      	ldr	r2, [pc, #116]	; (800baac <HAL_TIM_PWM_Start+0x180>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d013      	beq.n	800ba62 <HAL_TIM_PWM_Start+0x136>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a1c      	ldr	r2, [pc, #112]	; (800bab0 <HAL_TIM_PWM_Start+0x184>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d00e      	beq.n	800ba62 <HAL_TIM_PWM_Start+0x136>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a16      	ldr	r2, [pc, #88]	; (800baa4 <HAL_TIM_PWM_Start+0x178>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d009      	beq.n	800ba62 <HAL_TIM_PWM_Start+0x136>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a18      	ldr	r2, [pc, #96]	; (800bab4 <HAL_TIM_PWM_Start+0x188>)
 800ba54:	4293      	cmp	r3, r2
 800ba56:	d004      	beq.n	800ba62 <HAL_TIM_PWM_Start+0x136>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4a16      	ldr	r2, [pc, #88]	; (800bab8 <HAL_TIM_PWM_Start+0x18c>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d111      	bne.n	800ba86 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	f003 0307 	and.w	r3, r3, #7
 800ba6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2b06      	cmp	r3, #6
 800ba72:	d010      	beq.n	800ba96 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f042 0201 	orr.w	r2, r2, #1
 800ba82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba84:	e007      	b.n	800ba96 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f042 0201 	orr.w	r2, r2, #1
 800ba94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	40010000 	.word	0x40010000
 800baa4:	40010400 	.word	0x40010400
 800baa8:	40000400 	.word	0x40000400
 800baac:	40000800 	.word	0x40000800
 800bab0:	40000c00 	.word	0x40000c00
 800bab4:	40014000 	.word	0x40014000
 800bab8:	40001800 	.word	0x40001800

0800babc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2200      	movs	r2, #0
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 fe08 	bl	800c6e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a2e      	ldr	r2, [pc, #184]	; (800bb94 <HAL_TIM_PWM_Stop+0xd8>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d004      	beq.n	800bae8 <HAL_TIM_PWM_Stop+0x2c>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a2d      	ldr	r2, [pc, #180]	; (800bb98 <HAL_TIM_PWM_Stop+0xdc>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d101      	bne.n	800baec <HAL_TIM_PWM_Stop+0x30>
 800bae8:	2301      	movs	r3, #1
 800baea:	e000      	b.n	800baee <HAL_TIM_PWM_Stop+0x32>
 800baec:	2300      	movs	r3, #0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d017      	beq.n	800bb22 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	6a1a      	ldr	r2, [r3, #32]
 800baf8:	f241 1311 	movw	r3, #4369	; 0x1111
 800bafc:	4013      	ands	r3, r2
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10f      	bne.n	800bb22 <HAL_TIM_PWM_Stop+0x66>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	6a1a      	ldr	r2, [r3, #32]
 800bb08:	f240 4344 	movw	r3, #1092	; 0x444
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d107      	bne.n	800bb22 <HAL_TIM_PWM_Stop+0x66>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bb20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6a1a      	ldr	r2, [r3, #32]
 800bb28:	f241 1311 	movw	r3, #4369	; 0x1111
 800bb2c:	4013      	ands	r3, r2
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10f      	bne.n	800bb52 <HAL_TIM_PWM_Stop+0x96>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6a1a      	ldr	r2, [r3, #32]
 800bb38:	f240 4344 	movw	r3, #1092	; 0x444
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d107      	bne.n	800bb52 <HAL_TIM_PWM_Stop+0x96>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f022 0201 	bic.w	r2, r2, #1
 800bb50:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d104      	bne.n	800bb62 <HAL_TIM_PWM_Stop+0xa6>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb60:	e013      	b.n	800bb8a <HAL_TIM_PWM_Stop+0xce>
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	2b04      	cmp	r3, #4
 800bb66:	d104      	bne.n	800bb72 <HAL_TIM_PWM_Stop+0xb6>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb70:	e00b      	b.n	800bb8a <HAL_TIM_PWM_Stop+0xce>
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	2b08      	cmp	r3, #8
 800bb76:	d104      	bne.n	800bb82 <HAL_TIM_PWM_Stop+0xc6>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb80:	e003      	b.n	800bb8a <HAL_TIM_PWM_Stop+0xce>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3708      	adds	r7, #8
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	40010000 	.word	0x40010000
 800bb98:	40010400 	.word	0x40010400

0800bb9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	f003 0302 	and.w	r3, r3, #2
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	d122      	bne.n	800bbf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	f003 0302 	and.w	r3, r3, #2
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d11b      	bne.n	800bbf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f06f 0202 	mvn.w	r2, #2
 800bbc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	f003 0303 	and.w	r3, r3, #3
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d003      	beq.n	800bbe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fa77 	bl	800c0d2 <HAL_TIM_IC_CaptureCallback>
 800bbe4:	e005      	b.n	800bbf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fa69 	bl	800c0be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fa7a 	bl	800c0e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	f003 0304 	and.w	r3, r3, #4
 800bc02:	2b04      	cmp	r3, #4
 800bc04:	d122      	bne.n	800bc4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b04      	cmp	r3, #4
 800bc12:	d11b      	bne.n	800bc4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f06f 0204 	mvn.w	r2, #4
 800bc1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2202      	movs	r2, #2
 800bc22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fa4d 	bl	800c0d2 <HAL_TIM_IC_CaptureCallback>
 800bc38:	e005      	b.n	800bc46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fa3f 	bl	800c0be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fa50 	bl	800c0e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	f003 0308 	and.w	r3, r3, #8
 800bc56:	2b08      	cmp	r3, #8
 800bc58:	d122      	bne.n	800bca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	f003 0308 	and.w	r3, r3, #8
 800bc64:	2b08      	cmp	r3, #8
 800bc66:	d11b      	bne.n	800bca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f06f 0208 	mvn.w	r2, #8
 800bc70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2204      	movs	r2, #4
 800bc76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	69db      	ldr	r3, [r3, #28]
 800bc7e:	f003 0303 	and.w	r3, r3, #3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d003      	beq.n	800bc8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 fa23 	bl	800c0d2 <HAL_TIM_IC_CaptureCallback>
 800bc8c:	e005      	b.n	800bc9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fa15 	bl	800c0be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fa26 	bl	800c0e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	f003 0310 	and.w	r3, r3, #16
 800bcaa:	2b10      	cmp	r3, #16
 800bcac:	d122      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	f003 0310 	and.w	r3, r3, #16
 800bcb8:	2b10      	cmp	r3, #16
 800bcba:	d11b      	bne.n	800bcf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f06f 0210 	mvn.w	r2, #16
 800bcc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2208      	movs	r2, #8
 800bcca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d003      	beq.n	800bce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 f9f9 	bl	800c0d2 <HAL_TIM_IC_CaptureCallback>
 800bce0:	e005      	b.n	800bcee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f9eb 	bl	800c0be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f9fc 	bl	800c0e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	f003 0301 	and.w	r3, r3, #1
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d10e      	bne.n	800bd20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f003 0301 	and.w	r3, r3, #1
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d107      	bne.n	800bd20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f06f 0201 	mvn.w	r2, #1
 800bd18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f7f6 fda8 	bl	8002870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	691b      	ldr	r3, [r3, #16]
 800bd26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd2a:	2b80      	cmp	r3, #128	; 0x80
 800bd2c:	d10e      	bne.n	800bd4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd38:	2b80      	cmp	r3, #128	; 0x80
 800bd3a:	d107      	bne.n	800bd4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bd44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd46:	6878      	ldr	r0, [r7, #4]
 800bd48:	f000 fd78 	bl	800c83c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd56:	2b40      	cmp	r3, #64	; 0x40
 800bd58:	d10e      	bne.n	800bd78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd64:	2b40      	cmp	r3, #64	; 0x40
 800bd66:	d107      	bne.n	800bd78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 f9c1 	bl	800c0fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	f003 0320 	and.w	r3, r3, #32
 800bd82:	2b20      	cmp	r3, #32
 800bd84:	d10e      	bne.n	800bda4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	f003 0320 	and.w	r3, r3, #32
 800bd90:	2b20      	cmp	r3, #32
 800bd92:	d107      	bne.n	800bda4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f06f 0220 	mvn.w	r2, #32
 800bd9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fd42 	bl	800c828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bda4:	bf00      	nop
 800bda6:	3708      	adds	r7, #8
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d101      	bne.n	800bdca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bdc6:	2302      	movs	r3, #2
 800bdc8:	e0ae      	b.n	800bf28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2201      	movs	r2, #1
 800bdce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2b0c      	cmp	r3, #12
 800bdd6:	f200 809f 	bhi.w	800bf18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bdda:	a201      	add	r2, pc, #4	; (adr r2, 800bde0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde0:	0800be15 	.word	0x0800be15
 800bde4:	0800bf19 	.word	0x0800bf19
 800bde8:	0800bf19 	.word	0x0800bf19
 800bdec:	0800bf19 	.word	0x0800bf19
 800bdf0:	0800be55 	.word	0x0800be55
 800bdf4:	0800bf19 	.word	0x0800bf19
 800bdf8:	0800bf19 	.word	0x0800bf19
 800bdfc:	0800bf19 	.word	0x0800bf19
 800be00:	0800be97 	.word	0x0800be97
 800be04:	0800bf19 	.word	0x0800bf19
 800be08:	0800bf19 	.word	0x0800bf19
 800be0c:	0800bf19 	.word	0x0800bf19
 800be10:	0800bed7 	.word	0x0800bed7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	68b9      	ldr	r1, [r7, #8]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f000 fa18 	bl	800c250 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	699a      	ldr	r2, [r3, #24]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f042 0208 	orr.w	r2, r2, #8
 800be2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	699a      	ldr	r2, [r3, #24]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f022 0204 	bic.w	r2, r2, #4
 800be3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	6999      	ldr	r1, [r3, #24]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	691a      	ldr	r2, [r3, #16]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	430a      	orrs	r2, r1
 800be50:	619a      	str	r2, [r3, #24]
      break;
 800be52:	e064      	b.n	800bf1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68b9      	ldr	r1, [r7, #8]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 fa68 	bl	800c330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	699a      	ldr	r2, [r3, #24]
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	699a      	ldr	r2, [r3, #24]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6999      	ldr	r1, [r3, #24]
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	021a      	lsls	r2, r3, #8
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	430a      	orrs	r2, r1
 800be92:	619a      	str	r2, [r3, #24]
      break;
 800be94:	e043      	b.n	800bf1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68b9      	ldr	r1, [r7, #8]
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 fabd 	bl	800c41c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	69da      	ldr	r2, [r3, #28]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f042 0208 	orr.w	r2, r2, #8
 800beb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	69da      	ldr	r2, [r3, #28]
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f022 0204 	bic.w	r2, r2, #4
 800bec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	69d9      	ldr	r1, [r3, #28]
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	691a      	ldr	r2, [r3, #16]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	430a      	orrs	r2, r1
 800bed2:	61da      	str	r2, [r3, #28]
      break;
 800bed4:	e023      	b.n	800bf1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68b9      	ldr	r1, [r7, #8]
 800bedc:	4618      	mov	r0, r3
 800bede:	f000 fb11 	bl	800c504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	69da      	ldr	r2, [r3, #28]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bef0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	69da      	ldr	r2, [r3, #28]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	69d9      	ldr	r1, [r3, #28]
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	691b      	ldr	r3, [r3, #16]
 800bf0c:	021a      	lsls	r2, r3, #8
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	430a      	orrs	r2, r1
 800bf14:	61da      	str	r2, [r3, #28]
      break;
 800bf16:	e002      	b.n	800bf1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3718      	adds	r7, #24
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d101      	bne.n	800bf4c <HAL_TIM_ConfigClockSource+0x1c>
 800bf48:	2302      	movs	r3, #2
 800bf4a:	e0b4      	b.n	800c0b6 <HAL_TIM_ConfigClockSource+0x186>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2202      	movs	r2, #2
 800bf58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bf6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf84:	d03e      	beq.n	800c004 <HAL_TIM_ConfigClockSource+0xd4>
 800bf86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf8a:	f200 8087 	bhi.w	800c09c <HAL_TIM_ConfigClockSource+0x16c>
 800bf8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf92:	f000 8086 	beq.w	800c0a2 <HAL_TIM_ConfigClockSource+0x172>
 800bf96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf9a:	d87f      	bhi.n	800c09c <HAL_TIM_ConfigClockSource+0x16c>
 800bf9c:	2b70      	cmp	r3, #112	; 0x70
 800bf9e:	d01a      	beq.n	800bfd6 <HAL_TIM_ConfigClockSource+0xa6>
 800bfa0:	2b70      	cmp	r3, #112	; 0x70
 800bfa2:	d87b      	bhi.n	800c09c <HAL_TIM_ConfigClockSource+0x16c>
 800bfa4:	2b60      	cmp	r3, #96	; 0x60
 800bfa6:	d050      	beq.n	800c04a <HAL_TIM_ConfigClockSource+0x11a>
 800bfa8:	2b60      	cmp	r3, #96	; 0x60
 800bfaa:	d877      	bhi.n	800c09c <HAL_TIM_ConfigClockSource+0x16c>
 800bfac:	2b50      	cmp	r3, #80	; 0x50
 800bfae:	d03c      	beq.n	800c02a <HAL_TIM_ConfigClockSource+0xfa>
 800bfb0:	2b50      	cmp	r3, #80	; 0x50
 800bfb2:	d873      	bhi.n	800c09c <HAL_TIM_ConfigClockSource+0x16c>
 800bfb4:	2b40      	cmp	r3, #64	; 0x40
 800bfb6:	d058      	beq.n	800c06a <HAL_TIM_ConfigClockSource+0x13a>
 800bfb8:	2b40      	cmp	r3, #64	; 0x40
 800bfba:	d86f      	bhi.n	800c09c <HAL_TIM_ConfigClockSource+0x16c>
 800bfbc:	2b30      	cmp	r3, #48	; 0x30
 800bfbe:	d064      	beq.n	800c08a <HAL_TIM_ConfigClockSource+0x15a>
 800bfc0:	2b30      	cmp	r3, #48	; 0x30
 800bfc2:	d86b      	bhi.n	800c09c <HAL_TIM_ConfigClockSource+0x16c>
 800bfc4:	2b20      	cmp	r3, #32
 800bfc6:	d060      	beq.n	800c08a <HAL_TIM_ConfigClockSource+0x15a>
 800bfc8:	2b20      	cmp	r3, #32
 800bfca:	d867      	bhi.n	800c09c <HAL_TIM_ConfigClockSource+0x16c>
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d05c      	beq.n	800c08a <HAL_TIM_ConfigClockSource+0x15a>
 800bfd0:	2b10      	cmp	r3, #16
 800bfd2:	d05a      	beq.n	800c08a <HAL_TIM_ConfigClockSource+0x15a>
 800bfd4:	e062      	b.n	800c09c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	6899      	ldr	r1, [r3, #8]
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	685a      	ldr	r2, [r3, #4]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	f000 fb5d 	bl	800c6a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	68ba      	ldr	r2, [r7, #8]
 800c000:	609a      	str	r2, [r3, #8]
      break;
 800c002:	e04f      	b.n	800c0a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6818      	ldr	r0, [r3, #0]
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	6899      	ldr	r1, [r3, #8]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	f000 fb46 	bl	800c6a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	689a      	ldr	r2, [r3, #8]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c026:	609a      	str	r2, [r3, #8]
      break;
 800c028:	e03c      	b.n	800c0a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6818      	ldr	r0, [r3, #0]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	6859      	ldr	r1, [r3, #4]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	461a      	mov	r2, r3
 800c038:	f000 faba 	bl	800c5b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2150      	movs	r1, #80	; 0x50
 800c042:	4618      	mov	r0, r3
 800c044:	f000 fb13 	bl	800c66e <TIM_ITRx_SetConfig>
      break;
 800c048:	e02c      	b.n	800c0a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6818      	ldr	r0, [r3, #0]
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	6859      	ldr	r1, [r3, #4]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	461a      	mov	r2, r3
 800c058:	f000 fad9 	bl	800c60e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	2160      	movs	r1, #96	; 0x60
 800c062:	4618      	mov	r0, r3
 800c064:	f000 fb03 	bl	800c66e <TIM_ITRx_SetConfig>
      break;
 800c068:	e01c      	b.n	800c0a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6818      	ldr	r0, [r3, #0]
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	6859      	ldr	r1, [r3, #4]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	461a      	mov	r2, r3
 800c078:	f000 fa9a 	bl	800c5b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2140      	movs	r1, #64	; 0x40
 800c082:	4618      	mov	r0, r3
 800c084:	f000 faf3 	bl	800c66e <TIM_ITRx_SetConfig>
      break;
 800c088:	e00c      	b.n	800c0a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4619      	mov	r1, r3
 800c094:	4610      	mov	r0, r2
 800c096:	f000 faea 	bl	800c66e <TIM_ITRx_SetConfig>
      break;
 800c09a:	e003      	b.n	800c0a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c09c:	2301      	movs	r3, #1
 800c09e:	73fb      	strb	r3, [r7, #15]
      break;
 800c0a0:	e000      	b.n	800c0a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c0a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2201      	movs	r2, #1
 800c0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0be:	b480      	push	{r7}
 800c0c0:	b083      	sub	sp, #12
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0c6:	bf00      	nop
 800c0c8:	370c      	adds	r7, #12
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	b083      	sub	sp, #12
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0da:	bf00      	nop
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0e6:	b480      	push	{r7}
 800c0e8:	b083      	sub	sp, #12
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0ee:	bf00      	nop
 800c0f0:	370c      	adds	r7, #12
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr

0800c0fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0fa:	b480      	push	{r7}
 800c0fc:	b083      	sub	sp, #12
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c102:	bf00      	nop
 800c104:	370c      	adds	r7, #12
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
	...

0800c110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a40      	ldr	r2, [pc, #256]	; (800c224 <TIM_Base_SetConfig+0x114>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d013      	beq.n	800c150 <TIM_Base_SetConfig+0x40>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c12e:	d00f      	beq.n	800c150 <TIM_Base_SetConfig+0x40>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	4a3d      	ldr	r2, [pc, #244]	; (800c228 <TIM_Base_SetConfig+0x118>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d00b      	beq.n	800c150 <TIM_Base_SetConfig+0x40>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a3c      	ldr	r2, [pc, #240]	; (800c22c <TIM_Base_SetConfig+0x11c>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d007      	beq.n	800c150 <TIM_Base_SetConfig+0x40>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4a3b      	ldr	r2, [pc, #236]	; (800c230 <TIM_Base_SetConfig+0x120>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d003      	beq.n	800c150 <TIM_Base_SetConfig+0x40>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a3a      	ldr	r2, [pc, #232]	; (800c234 <TIM_Base_SetConfig+0x124>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d108      	bne.n	800c162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	4313      	orrs	r3, r2
 800c160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a2f      	ldr	r2, [pc, #188]	; (800c224 <TIM_Base_SetConfig+0x114>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d02b      	beq.n	800c1c2 <TIM_Base_SetConfig+0xb2>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c170:	d027      	beq.n	800c1c2 <TIM_Base_SetConfig+0xb2>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a2c      	ldr	r2, [pc, #176]	; (800c228 <TIM_Base_SetConfig+0x118>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d023      	beq.n	800c1c2 <TIM_Base_SetConfig+0xb2>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a2b      	ldr	r2, [pc, #172]	; (800c22c <TIM_Base_SetConfig+0x11c>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d01f      	beq.n	800c1c2 <TIM_Base_SetConfig+0xb2>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a2a      	ldr	r2, [pc, #168]	; (800c230 <TIM_Base_SetConfig+0x120>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d01b      	beq.n	800c1c2 <TIM_Base_SetConfig+0xb2>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a29      	ldr	r2, [pc, #164]	; (800c234 <TIM_Base_SetConfig+0x124>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d017      	beq.n	800c1c2 <TIM_Base_SetConfig+0xb2>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a28      	ldr	r2, [pc, #160]	; (800c238 <TIM_Base_SetConfig+0x128>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d013      	beq.n	800c1c2 <TIM_Base_SetConfig+0xb2>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a27      	ldr	r2, [pc, #156]	; (800c23c <TIM_Base_SetConfig+0x12c>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d00f      	beq.n	800c1c2 <TIM_Base_SetConfig+0xb2>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a26      	ldr	r2, [pc, #152]	; (800c240 <TIM_Base_SetConfig+0x130>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d00b      	beq.n	800c1c2 <TIM_Base_SetConfig+0xb2>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a25      	ldr	r2, [pc, #148]	; (800c244 <TIM_Base_SetConfig+0x134>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d007      	beq.n	800c1c2 <TIM_Base_SetConfig+0xb2>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a24      	ldr	r2, [pc, #144]	; (800c248 <TIM_Base_SetConfig+0x138>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d003      	beq.n	800c1c2 <TIM_Base_SetConfig+0xb2>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a23      	ldr	r2, [pc, #140]	; (800c24c <TIM_Base_SetConfig+0x13c>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d108      	bne.n	800c1d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	695b      	ldr	r3, [r3, #20]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	689a      	ldr	r2, [r3, #8]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a0a      	ldr	r2, [pc, #40]	; (800c224 <TIM_Base_SetConfig+0x114>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d003      	beq.n	800c208 <TIM_Base_SetConfig+0xf8>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a0c      	ldr	r2, [pc, #48]	; (800c234 <TIM_Base_SetConfig+0x124>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d103      	bne.n	800c210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	691a      	ldr	r2, [r3, #16]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2201      	movs	r2, #1
 800c214:	615a      	str	r2, [r3, #20]
}
 800c216:	bf00      	nop
 800c218:	3714      	adds	r7, #20
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	40010000 	.word	0x40010000
 800c228:	40000400 	.word	0x40000400
 800c22c:	40000800 	.word	0x40000800
 800c230:	40000c00 	.word	0x40000c00
 800c234:	40010400 	.word	0x40010400
 800c238:	40014000 	.word	0x40014000
 800c23c:	40014400 	.word	0x40014400
 800c240:	40014800 	.word	0x40014800
 800c244:	40001800 	.word	0x40001800
 800c248:	40001c00 	.word	0x40001c00
 800c24c:	40002000 	.word	0x40002000

0800c250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c250:	b480      	push	{r7}
 800c252:	b087      	sub	sp, #28
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a1b      	ldr	r3, [r3, #32]
 800c25e:	f023 0201 	bic.w	r2, r3, #1
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a1b      	ldr	r3, [r3, #32]
 800c26a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f023 0303 	bic.w	r3, r3, #3
 800c286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	68fa      	ldr	r2, [r7, #12]
 800c28e:	4313      	orrs	r3, r2
 800c290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	f023 0302 	bic.w	r3, r3, #2
 800c298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	697a      	ldr	r2, [r7, #20]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4a20      	ldr	r2, [pc, #128]	; (800c328 <TIM_OC1_SetConfig+0xd8>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d003      	beq.n	800c2b4 <TIM_OC1_SetConfig+0x64>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4a1f      	ldr	r2, [pc, #124]	; (800c32c <TIM_OC1_SetConfig+0xdc>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d10c      	bne.n	800c2ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	f023 0308 	bic.w	r3, r3, #8
 800c2ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	697a      	ldr	r2, [r7, #20]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f023 0304 	bic.w	r3, r3, #4
 800c2cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a15      	ldr	r2, [pc, #84]	; (800c328 <TIM_OC1_SetConfig+0xd8>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d003      	beq.n	800c2de <TIM_OC1_SetConfig+0x8e>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a14      	ldr	r2, [pc, #80]	; (800c32c <TIM_OC1_SetConfig+0xdc>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d111      	bne.n	800c302 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2de:	693b      	ldr	r3, [r7, #16]
 800c2e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c2ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	695b      	ldr	r3, [r3, #20]
 800c2f2:	693a      	ldr	r2, [r7, #16]
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	699b      	ldr	r3, [r3, #24]
 800c2fc:	693a      	ldr	r2, [r7, #16]
 800c2fe:	4313      	orrs	r3, r2
 800c300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	685a      	ldr	r2, [r3, #4]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	697a      	ldr	r2, [r7, #20]
 800c31a:	621a      	str	r2, [r3, #32]
}
 800c31c:	bf00      	nop
 800c31e:	371c      	adds	r7, #28
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr
 800c328:	40010000 	.word	0x40010000
 800c32c:	40010400 	.word	0x40010400

0800c330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c330:	b480      	push	{r7}
 800c332:	b087      	sub	sp, #28
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	6a1b      	ldr	r3, [r3, #32]
 800c33e:	f023 0210 	bic.w	r2, r3, #16
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a1b      	ldr	r3, [r3, #32]
 800c34a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	699b      	ldr	r3, [r3, #24]
 800c356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c35e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	021b      	lsls	r3, r3, #8
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	4313      	orrs	r3, r2
 800c372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	f023 0320 	bic.w	r3, r3, #32
 800c37a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	011b      	lsls	r3, r3, #4
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	4313      	orrs	r3, r2
 800c386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a22      	ldr	r2, [pc, #136]	; (800c414 <TIM_OC2_SetConfig+0xe4>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d003      	beq.n	800c398 <TIM_OC2_SetConfig+0x68>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a21      	ldr	r2, [pc, #132]	; (800c418 <TIM_OC2_SetConfig+0xe8>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d10d      	bne.n	800c3b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c39e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	011b      	lsls	r3, r3, #4
 800c3a6:	697a      	ldr	r2, [r7, #20]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4a17      	ldr	r2, [pc, #92]	; (800c414 <TIM_OC2_SetConfig+0xe4>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d003      	beq.n	800c3c4 <TIM_OC2_SetConfig+0x94>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a16      	ldr	r2, [pc, #88]	; (800c418 <TIM_OC2_SetConfig+0xe8>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d113      	bne.n	800c3ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	695b      	ldr	r3, [r3, #20]
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	699b      	ldr	r3, [r3, #24]
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	693a      	ldr	r2, [r7, #16]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	693a      	ldr	r2, [r7, #16]
 800c3f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	685a      	ldr	r2, [r3, #4]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	621a      	str	r2, [r3, #32]
}
 800c406:	bf00      	nop
 800c408:	371c      	adds	r7, #28
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	40010000 	.word	0x40010000
 800c418:	40010400 	.word	0x40010400

0800c41c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b087      	sub	sp, #28
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a1b      	ldr	r3, [r3, #32]
 800c42a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6a1b      	ldr	r3, [r3, #32]
 800c436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	69db      	ldr	r3, [r3, #28]
 800c442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c44a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f023 0303 	bic.w	r3, r3, #3
 800c452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	021b      	lsls	r3, r3, #8
 800c46c:	697a      	ldr	r2, [r7, #20]
 800c46e:	4313      	orrs	r3, r2
 800c470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a21      	ldr	r2, [pc, #132]	; (800c4fc <TIM_OC3_SetConfig+0xe0>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d003      	beq.n	800c482 <TIM_OC3_SetConfig+0x66>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a20      	ldr	r2, [pc, #128]	; (800c500 <TIM_OC3_SetConfig+0xe4>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d10d      	bne.n	800c49e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	021b      	lsls	r3, r3, #8
 800c490:	697a      	ldr	r2, [r7, #20]
 800c492:	4313      	orrs	r3, r2
 800c494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c49c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a16      	ldr	r2, [pc, #88]	; (800c4fc <TIM_OC3_SetConfig+0xe0>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d003      	beq.n	800c4ae <TIM_OC3_SetConfig+0x92>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a15      	ldr	r2, [pc, #84]	; (800c500 <TIM_OC3_SetConfig+0xe4>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d113      	bne.n	800c4d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c4bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	011b      	lsls	r3, r3, #4
 800c4c4:	693a      	ldr	r2, [r7, #16]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	699b      	ldr	r3, [r3, #24]
 800c4ce:	011b      	lsls	r3, r3, #4
 800c4d0:	693a      	ldr	r2, [r7, #16]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	693a      	ldr	r2, [r7, #16]
 800c4da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	685a      	ldr	r2, [r3, #4]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	697a      	ldr	r2, [r7, #20]
 800c4ee:	621a      	str	r2, [r3, #32]
}
 800c4f0:	bf00      	nop
 800c4f2:	371c      	adds	r7, #28
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr
 800c4fc:	40010000 	.word	0x40010000
 800c500:	40010400 	.word	0x40010400

0800c504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c504:	b480      	push	{r7}
 800c506:	b087      	sub	sp, #28
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6a1b      	ldr	r3, [r3, #32]
 800c512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6a1b      	ldr	r3, [r3, #32]
 800c51e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	69db      	ldr	r3, [r3, #28]
 800c52a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c53a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	021b      	lsls	r3, r3, #8
 800c542:	68fa      	ldr	r2, [r7, #12]
 800c544:	4313      	orrs	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c54e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	031b      	lsls	r3, r3, #12
 800c556:	693a      	ldr	r2, [r7, #16]
 800c558:	4313      	orrs	r3, r2
 800c55a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4a12      	ldr	r2, [pc, #72]	; (800c5a8 <TIM_OC4_SetConfig+0xa4>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d003      	beq.n	800c56c <TIM_OC4_SetConfig+0x68>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a11      	ldr	r2, [pc, #68]	; (800c5ac <TIM_OC4_SetConfig+0xa8>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d109      	bne.n	800c580 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	695b      	ldr	r3, [r3, #20]
 800c578:	019b      	lsls	r3, r3, #6
 800c57a:	697a      	ldr	r2, [r7, #20]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	697a      	ldr	r2, [r7, #20]
 800c584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	68fa      	ldr	r2, [r7, #12]
 800c58a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	685a      	ldr	r2, [r3, #4]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	621a      	str	r2, [r3, #32]
}
 800c59a:	bf00      	nop
 800c59c:	371c      	adds	r7, #28
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr
 800c5a6:	bf00      	nop
 800c5a8:	40010000 	.word	0x40010000
 800c5ac:	40010400 	.word	0x40010400

0800c5b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b087      	sub	sp, #28
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6a1b      	ldr	r3, [r3, #32]
 800c5c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6a1b      	ldr	r3, [r3, #32]
 800c5c6:	f023 0201 	bic.w	r2, r3, #1
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	699b      	ldr	r3, [r3, #24]
 800c5d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	011b      	lsls	r3, r3, #4
 800c5e0:	693a      	ldr	r2, [r7, #16]
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	f023 030a 	bic.w	r3, r3, #10
 800c5ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	621a      	str	r2, [r3, #32]
}
 800c602:	bf00      	nop
 800c604:	371c      	adds	r7, #28
 800c606:	46bd      	mov	sp, r7
 800c608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60c:	4770      	bx	lr

0800c60e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c60e:	b480      	push	{r7}
 800c610:	b087      	sub	sp, #28
 800c612:	af00      	add	r7, sp, #0
 800c614:	60f8      	str	r0, [r7, #12]
 800c616:	60b9      	str	r1, [r7, #8]
 800c618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	f023 0210 	bic.w	r2, r3, #16
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6a1b      	ldr	r3, [r3, #32]
 800c630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	031b      	lsls	r3, r3, #12
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	4313      	orrs	r3, r2
 800c642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c64a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	011b      	lsls	r3, r3, #4
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	4313      	orrs	r3, r2
 800c654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	697a      	ldr	r2, [r7, #20]
 800c65a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	693a      	ldr	r2, [r7, #16]
 800c660:	621a      	str	r2, [r3, #32]
}
 800c662:	bf00      	nop
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c66e:	b480      	push	{r7}
 800c670:	b085      	sub	sp, #20
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c686:	683a      	ldr	r2, [r7, #0]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	f043 0307 	orr.w	r3, r3, #7
 800c690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	609a      	str	r2, [r3, #8]
}
 800c698:	bf00      	nop
 800c69a:	3714      	adds	r7, #20
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b087      	sub	sp, #28
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	60f8      	str	r0, [r7, #12]
 800c6ac:	60b9      	str	r1, [r7, #8]
 800c6ae:	607a      	str	r2, [r7, #4]
 800c6b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	021a      	lsls	r2, r3, #8
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	431a      	orrs	r2, r3
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	697a      	ldr	r2, [r7, #20]
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	609a      	str	r2, [r3, #8]
}
 800c6d8:	bf00      	nop
 800c6da:	371c      	adds	r7, #28
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	f003 031f 	and.w	r3, r3, #31
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	6a1a      	ldr	r2, [r3, #32]
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	43db      	mvns	r3, r3
 800c706:	401a      	ands	r2, r3
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6a1a      	ldr	r2, [r3, #32]
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	f003 031f 	and.w	r3, r3, #31
 800c716:	6879      	ldr	r1, [r7, #4]
 800c718:	fa01 f303 	lsl.w	r3, r1, r3
 800c71c:	431a      	orrs	r2, r3
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	621a      	str	r2, [r3, #32]
}
 800c722:	bf00      	nop
 800c724:	371c      	adds	r7, #28
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
	...

0800c730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c740:	2b01      	cmp	r3, #1
 800c742:	d101      	bne.n	800c748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c744:	2302      	movs	r3, #2
 800c746:	e05a      	b.n	800c7fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2202      	movs	r2, #2
 800c754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	689b      	ldr	r3, [r3, #8]
 800c766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c76e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	4313      	orrs	r3, r2
 800c778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a21      	ldr	r2, [pc, #132]	; (800c80c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d022      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c794:	d01d      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a1d      	ldr	r2, [pc, #116]	; (800c810 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d018      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a1b      	ldr	r2, [pc, #108]	; (800c814 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d013      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	4a1a      	ldr	r2, [pc, #104]	; (800c818 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	d00e      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a18      	ldr	r2, [pc, #96]	; (800c81c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d009      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	4a17      	ldr	r2, [pc, #92]	; (800c820 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d004      	beq.n	800c7d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a15      	ldr	r2, [pc, #84]	; (800c824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d10c      	bne.n	800c7ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7fc:	2300      	movs	r3, #0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	40010000 	.word	0x40010000
 800c810:	40000400 	.word	0x40000400
 800c814:	40000800 	.word	0x40000800
 800c818:	40000c00 	.word	0x40000c00
 800c81c:	40010400 	.word	0x40010400
 800c820:	40014000 	.word	0x40014000
 800c824:	40001800 	.word	0x40001800

0800c828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c828:	b480      	push	{r7}
 800c82a:	b083      	sub	sp, #12
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c830:	bf00      	nop
 800c832:	370c      	adds	r7, #12
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c844:	bf00      	nop
 800c846:	370c      	adds	r7, #12
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr

0800c850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d101      	bne.n	800c862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c85e:	2301      	movs	r3, #1
 800c860:	e03f      	b.n	800c8e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d106      	bne.n	800c87c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f7f6 ff74 	bl	8003764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2224      	movs	r2, #36	; 0x24
 800c880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	68da      	ldr	r2, [r3, #12]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 f9cb 	bl	800cc30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	691a      	ldr	r2, [r3, #16]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	695a      	ldr	r2, [r3, #20]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68da      	ldr	r2, [r3, #12]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2220      	movs	r2, #32
 800c8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2220      	movs	r2, #32
 800c8dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c8e0:	2300      	movs	r3, #0
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b08a      	sub	sp, #40	; 0x28
 800c8ee:	af02      	add	r7, sp, #8
 800c8f0:	60f8      	str	r0, [r7, #12]
 800c8f2:	60b9      	str	r1, [r7, #8]
 800c8f4:	603b      	str	r3, [r7, #0]
 800c8f6:	4613      	mov	r3, r2
 800c8f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c904:	b2db      	uxtb	r3, r3
 800c906:	2b20      	cmp	r3, #32
 800c908:	d17c      	bne.n	800ca04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <HAL_UART_Transmit+0x2c>
 800c910:	88fb      	ldrh	r3, [r7, #6]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d101      	bne.n	800c91a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c916:	2301      	movs	r3, #1
 800c918:	e075      	b.n	800ca06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c920:	2b01      	cmp	r3, #1
 800c922:	d101      	bne.n	800c928 <HAL_UART_Transmit+0x3e>
 800c924:	2302      	movs	r3, #2
 800c926:	e06e      	b.n	800ca06 <HAL_UART_Transmit+0x11c>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2221      	movs	r2, #33	; 0x21
 800c93a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c93e:	f7fa fc0f 	bl	8007160 <HAL_GetTick>
 800c942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	88fa      	ldrh	r2, [r7, #6]
 800c948:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	88fa      	ldrh	r2, [r7, #6]
 800c94e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c958:	d108      	bne.n	800c96c <HAL_UART_Transmit+0x82>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d104      	bne.n	800c96c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c962:	2300      	movs	r3, #0
 800c964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	61bb      	str	r3, [r7, #24]
 800c96a:	e003      	b.n	800c974 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c970:	2300      	movs	r3, #0
 800c972:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2200      	movs	r2, #0
 800c978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c97c:	e02a      	b.n	800c9d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	9300      	str	r3, [sp, #0]
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	2200      	movs	r2, #0
 800c986:	2180      	movs	r1, #128	; 0x80
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f000 f8e2 	bl	800cb52 <UART_WaitOnFlagUntilTimeout>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d001      	beq.n	800c998 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c994:	2303      	movs	r3, #3
 800c996:	e036      	b.n	800ca06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c998:	69fb      	ldr	r3, [r7, #28]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d10b      	bne.n	800c9b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	881b      	ldrh	r3, [r3, #0]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c9ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	3302      	adds	r3, #2
 800c9b2:	61bb      	str	r3, [r7, #24]
 800c9b4:	e007      	b.n	800c9c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	781a      	ldrb	r2, [r3, #0]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1cf      	bne.n	800c97e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	2140      	movs	r1, #64	; 0x40
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f000 f8b2 	bl	800cb52 <UART_WaitOnFlagUntilTimeout>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d001      	beq.n	800c9f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	e006      	b.n	800ca06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ca00:	2300      	movs	r3, #0
 800ca02:	e000      	b.n	800ca06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ca04:	2302      	movs	r3, #2
  }
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3720      	adds	r7, #32
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b08a      	sub	sp, #40	; 0x28
 800ca12:	af02      	add	r7, sp, #8
 800ca14:	60f8      	str	r0, [r7, #12]
 800ca16:	60b9      	str	r1, [r7, #8]
 800ca18:	603b      	str	r3, [r7, #0]
 800ca1a:	4613      	mov	r3, r2
 800ca1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b20      	cmp	r3, #32
 800ca2c:	f040 808c 	bne.w	800cb48 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d002      	beq.n	800ca3c <HAL_UART_Receive+0x2e>
 800ca36:	88fb      	ldrh	r3, [r7, #6]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	e084      	b.n	800cb4a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d101      	bne.n	800ca4e <HAL_UART_Receive+0x40>
 800ca4a:	2302      	movs	r3, #2
 800ca4c:	e07d      	b.n	800cb4a <HAL_UART_Receive+0x13c>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2201      	movs	r2, #1
 800ca52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2222      	movs	r2, #34	; 0x22
 800ca60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2200      	movs	r2, #0
 800ca68:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca6a:	f7fa fb79 	bl	8007160 <HAL_GetTick>
 800ca6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	88fa      	ldrh	r2, [r7, #6]
 800ca74:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	88fa      	ldrh	r2, [r7, #6]
 800ca7a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca84:	d108      	bne.n	800ca98 <HAL_UART_Receive+0x8a>
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	691b      	ldr	r3, [r3, #16]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d104      	bne.n	800ca98 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	61bb      	str	r3, [r7, #24]
 800ca96:	e003      	b.n	800caa0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2200      	movs	r2, #0
 800caa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800caa8:	e043      	b.n	800cb32 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	2200      	movs	r2, #0
 800cab2:	2120      	movs	r1, #32
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f000 f84c 	bl	800cb52 <UART_WaitOnFlagUntilTimeout>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800cac0:	2303      	movs	r3, #3
 800cac2:	e042      	b.n	800cb4a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d10c      	bne.n	800cae4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	3302      	adds	r3, #2
 800cae0:	61bb      	str	r3, [r7, #24]
 800cae2:	e01f      	b.n	800cb24 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caec:	d007      	beq.n	800cafe <HAL_UART_Receive+0xf0>
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	689b      	ldr	r3, [r3, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10a      	bne.n	800cb0c <HAL_UART_Receive+0xfe>
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	691b      	ldr	r3, [r3, #16]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d106      	bne.n	800cb0c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	701a      	strb	r2, [r3, #0]
 800cb0a:	e008      	b.n	800cb1e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	3301      	adds	r3, #1
 800cb22:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d1b6      	bne.n	800caaa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2220      	movs	r2, #32
 800cb40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800cb44:	2300      	movs	r3, #0
 800cb46:	e000      	b.n	800cb4a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800cb48:	2302      	movs	r3, #2
  }
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3720      	adds	r7, #32
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b090      	sub	sp, #64	; 0x40
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	60f8      	str	r0, [r7, #12]
 800cb5a:	60b9      	str	r1, [r7, #8]
 800cb5c:	603b      	str	r3, [r7, #0]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cb62:	e050      	b.n	800cc06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cb64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6a:	d04c      	beq.n	800cc06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800cb6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d007      	beq.n	800cb82 <UART_WaitOnFlagUntilTimeout+0x30>
 800cb72:	f7fa faf5 	bl	8007160 <HAL_GetTick>
 800cb76:	4602      	mov	r2, r0
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d241      	bcs.n	800cc06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	330c      	adds	r3, #12
 800cb88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8c:	e853 3f00 	ldrex	r3, [r3]
 800cb90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	330c      	adds	r3, #12
 800cba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cba2:	637a      	str	r2, [r7, #52]	; 0x34
 800cba4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbaa:	e841 2300 	strex	r3, r2, [r1]
 800cbae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1e5      	bne.n	800cb82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3314      	adds	r3, #20
 800cbbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	e853 3f00 	ldrex	r3, [r3]
 800cbc4:	613b      	str	r3, [r7, #16]
   return(result);
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	f023 0301 	bic.w	r3, r3, #1
 800cbcc:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	3314      	adds	r3, #20
 800cbd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbd6:	623a      	str	r2, [r7, #32]
 800cbd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbda:	69f9      	ldr	r1, [r7, #28]
 800cbdc:	6a3a      	ldr	r2, [r7, #32]
 800cbde:	e841 2300 	strex	r3, r2, [r1]
 800cbe2:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1e5      	bne.n	800cbb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	2220      	movs	r2, #32
 800cbee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2220      	movs	r2, #32
 800cbf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800cc02:	2303      	movs	r3, #3
 800cc04:	e00f      	b.n	800cc26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	4013      	ands	r3, r2
 800cc10:	68ba      	ldr	r2, [r7, #8]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	bf0c      	ite	eq
 800cc16:	2301      	moveq	r3, #1
 800cc18:	2300      	movne	r3, #0
 800cc1a:	b2db      	uxtb	r3, r3
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	79fb      	ldrb	r3, [r7, #7]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d09f      	beq.n	800cb64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3740      	adds	r7, #64	; 0x40
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
	...

0800cc30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc34:	b09f      	sub	sp, #124	; 0x7c
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cc44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc46:	68d9      	ldr	r1, [r3, #12]
 800cc48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc4a:	681a      	ldr	r2, [r3, #0]
 800cc4c:	ea40 0301 	orr.w	r3, r0, r1
 800cc50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cc52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc54:	689a      	ldr	r2, [r3, #8]
 800cc56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc58:	691b      	ldr	r3, [r3, #16]
 800cc5a:	431a      	orrs	r2, r3
 800cc5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc5e:	695b      	ldr	r3, [r3, #20]
 800cc60:	431a      	orrs	r2, r3
 800cc62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc64:	69db      	ldr	r3, [r3, #28]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800cc6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cc74:	f021 010c 	bic.w	r1, r1, #12
 800cc78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc7e:	430b      	orrs	r3, r1
 800cc80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cc82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	695b      	ldr	r3, [r3, #20]
 800cc88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cc8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc8e:	6999      	ldr	r1, [r3, #24]
 800cc90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	ea40 0301 	orr.w	r3, r0, r1
 800cc98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cc9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	4bc5      	ldr	r3, [pc, #788]	; (800cfb4 <UART_SetConfig+0x384>)
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d004      	beq.n	800ccae <UART_SetConfig+0x7e>
 800cca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	4bc3      	ldr	r3, [pc, #780]	; (800cfb8 <UART_SetConfig+0x388>)
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d103      	bne.n	800ccb6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ccae:	f7fc ff4f 	bl	8009b50 <HAL_RCC_GetPCLK2Freq>
 800ccb2:	6778      	str	r0, [r7, #116]	; 0x74
 800ccb4:	e002      	b.n	800ccbc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ccb6:	f7fc ff37 	bl	8009b28 <HAL_RCC_GetPCLK1Freq>
 800ccba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ccbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccbe:	69db      	ldr	r3, [r3, #28]
 800ccc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccc4:	f040 80b6 	bne.w	800ce34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ccc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccca:	461c      	mov	r4, r3
 800cccc:	f04f 0500 	mov.w	r5, #0
 800ccd0:	4622      	mov	r2, r4
 800ccd2:	462b      	mov	r3, r5
 800ccd4:	1891      	adds	r1, r2, r2
 800ccd6:	6439      	str	r1, [r7, #64]	; 0x40
 800ccd8:	415b      	adcs	r3, r3
 800ccda:	647b      	str	r3, [r7, #68]	; 0x44
 800ccdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cce0:	1912      	adds	r2, r2, r4
 800cce2:	eb45 0303 	adc.w	r3, r5, r3
 800cce6:	f04f 0000 	mov.w	r0, #0
 800ccea:	f04f 0100 	mov.w	r1, #0
 800ccee:	00d9      	lsls	r1, r3, #3
 800ccf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ccf4:	00d0      	lsls	r0, r2, #3
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	1911      	adds	r1, r2, r4
 800ccfc:	6639      	str	r1, [r7, #96]	; 0x60
 800ccfe:	416b      	adcs	r3, r5
 800cd00:	667b      	str	r3, [r7, #100]	; 0x64
 800cd02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	461a      	mov	r2, r3
 800cd08:	f04f 0300 	mov.w	r3, #0
 800cd0c:	1891      	adds	r1, r2, r2
 800cd0e:	63b9      	str	r1, [r7, #56]	; 0x38
 800cd10:	415b      	adcs	r3, r3
 800cd12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cd18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800cd1c:	f7f3 ffc4 	bl	8000ca8 <__aeabi_uldivmod>
 800cd20:	4602      	mov	r2, r0
 800cd22:	460b      	mov	r3, r1
 800cd24:	4ba5      	ldr	r3, [pc, #660]	; (800cfbc <UART_SetConfig+0x38c>)
 800cd26:	fba3 2302 	umull	r2, r3, r3, r2
 800cd2a:	095b      	lsrs	r3, r3, #5
 800cd2c:	011e      	lsls	r6, r3, #4
 800cd2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd30:	461c      	mov	r4, r3
 800cd32:	f04f 0500 	mov.w	r5, #0
 800cd36:	4622      	mov	r2, r4
 800cd38:	462b      	mov	r3, r5
 800cd3a:	1891      	adds	r1, r2, r2
 800cd3c:	6339      	str	r1, [r7, #48]	; 0x30
 800cd3e:	415b      	adcs	r3, r3
 800cd40:	637b      	str	r3, [r7, #52]	; 0x34
 800cd42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cd46:	1912      	adds	r2, r2, r4
 800cd48:	eb45 0303 	adc.w	r3, r5, r3
 800cd4c:	f04f 0000 	mov.w	r0, #0
 800cd50:	f04f 0100 	mov.w	r1, #0
 800cd54:	00d9      	lsls	r1, r3, #3
 800cd56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cd5a:	00d0      	lsls	r0, r2, #3
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	460b      	mov	r3, r1
 800cd60:	1911      	adds	r1, r2, r4
 800cd62:	65b9      	str	r1, [r7, #88]	; 0x58
 800cd64:	416b      	adcs	r3, r5
 800cd66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	f04f 0300 	mov.w	r3, #0
 800cd72:	1891      	adds	r1, r2, r2
 800cd74:	62b9      	str	r1, [r7, #40]	; 0x28
 800cd76:	415b      	adcs	r3, r3
 800cd78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cd7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cd82:	f7f3 ff91 	bl	8000ca8 <__aeabi_uldivmod>
 800cd86:	4602      	mov	r2, r0
 800cd88:	460b      	mov	r3, r1
 800cd8a:	4b8c      	ldr	r3, [pc, #560]	; (800cfbc <UART_SetConfig+0x38c>)
 800cd8c:	fba3 1302 	umull	r1, r3, r3, r2
 800cd90:	095b      	lsrs	r3, r3, #5
 800cd92:	2164      	movs	r1, #100	; 0x64
 800cd94:	fb01 f303 	mul.w	r3, r1, r3
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	00db      	lsls	r3, r3, #3
 800cd9c:	3332      	adds	r3, #50	; 0x32
 800cd9e:	4a87      	ldr	r2, [pc, #540]	; (800cfbc <UART_SetConfig+0x38c>)
 800cda0:	fba2 2303 	umull	r2, r3, r2, r3
 800cda4:	095b      	lsrs	r3, r3, #5
 800cda6:	005b      	lsls	r3, r3, #1
 800cda8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cdac:	441e      	add	r6, r3
 800cdae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f04f 0100 	mov.w	r1, #0
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	460b      	mov	r3, r1
 800cdba:	1894      	adds	r4, r2, r2
 800cdbc:	623c      	str	r4, [r7, #32]
 800cdbe:	415b      	adcs	r3, r3
 800cdc0:	627b      	str	r3, [r7, #36]	; 0x24
 800cdc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cdc6:	1812      	adds	r2, r2, r0
 800cdc8:	eb41 0303 	adc.w	r3, r1, r3
 800cdcc:	f04f 0400 	mov.w	r4, #0
 800cdd0:	f04f 0500 	mov.w	r5, #0
 800cdd4:	00dd      	lsls	r5, r3, #3
 800cdd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cdda:	00d4      	lsls	r4, r2, #3
 800cddc:	4622      	mov	r2, r4
 800cdde:	462b      	mov	r3, r5
 800cde0:	1814      	adds	r4, r2, r0
 800cde2:	653c      	str	r4, [r7, #80]	; 0x50
 800cde4:	414b      	adcs	r3, r1
 800cde6:	657b      	str	r3, [r7, #84]	; 0x54
 800cde8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	461a      	mov	r2, r3
 800cdee:	f04f 0300 	mov.w	r3, #0
 800cdf2:	1891      	adds	r1, r2, r2
 800cdf4:	61b9      	str	r1, [r7, #24]
 800cdf6:	415b      	adcs	r3, r3
 800cdf8:	61fb      	str	r3, [r7, #28]
 800cdfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cdfe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ce02:	f7f3 ff51 	bl	8000ca8 <__aeabi_uldivmod>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	4b6c      	ldr	r3, [pc, #432]	; (800cfbc <UART_SetConfig+0x38c>)
 800ce0c:	fba3 1302 	umull	r1, r3, r3, r2
 800ce10:	095b      	lsrs	r3, r3, #5
 800ce12:	2164      	movs	r1, #100	; 0x64
 800ce14:	fb01 f303 	mul.w	r3, r1, r3
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	00db      	lsls	r3, r3, #3
 800ce1c:	3332      	adds	r3, #50	; 0x32
 800ce1e:	4a67      	ldr	r2, [pc, #412]	; (800cfbc <UART_SetConfig+0x38c>)
 800ce20:	fba2 2303 	umull	r2, r3, r2, r3
 800ce24:	095b      	lsrs	r3, r3, #5
 800ce26:	f003 0207 	and.w	r2, r3, #7
 800ce2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4432      	add	r2, r6
 800ce30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ce32:	e0b9      	b.n	800cfa8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ce34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce36:	461c      	mov	r4, r3
 800ce38:	f04f 0500 	mov.w	r5, #0
 800ce3c:	4622      	mov	r2, r4
 800ce3e:	462b      	mov	r3, r5
 800ce40:	1891      	adds	r1, r2, r2
 800ce42:	6139      	str	r1, [r7, #16]
 800ce44:	415b      	adcs	r3, r3
 800ce46:	617b      	str	r3, [r7, #20]
 800ce48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ce4c:	1912      	adds	r2, r2, r4
 800ce4e:	eb45 0303 	adc.w	r3, r5, r3
 800ce52:	f04f 0000 	mov.w	r0, #0
 800ce56:	f04f 0100 	mov.w	r1, #0
 800ce5a:	00d9      	lsls	r1, r3, #3
 800ce5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ce60:	00d0      	lsls	r0, r2, #3
 800ce62:	4602      	mov	r2, r0
 800ce64:	460b      	mov	r3, r1
 800ce66:	eb12 0804 	adds.w	r8, r2, r4
 800ce6a:	eb43 0905 	adc.w	r9, r3, r5
 800ce6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	4618      	mov	r0, r3
 800ce74:	f04f 0100 	mov.w	r1, #0
 800ce78:	f04f 0200 	mov.w	r2, #0
 800ce7c:	f04f 0300 	mov.w	r3, #0
 800ce80:	008b      	lsls	r3, r1, #2
 800ce82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ce86:	0082      	lsls	r2, r0, #2
 800ce88:	4640      	mov	r0, r8
 800ce8a:	4649      	mov	r1, r9
 800ce8c:	f7f3 ff0c 	bl	8000ca8 <__aeabi_uldivmod>
 800ce90:	4602      	mov	r2, r0
 800ce92:	460b      	mov	r3, r1
 800ce94:	4b49      	ldr	r3, [pc, #292]	; (800cfbc <UART_SetConfig+0x38c>)
 800ce96:	fba3 2302 	umull	r2, r3, r3, r2
 800ce9a:	095b      	lsrs	r3, r3, #5
 800ce9c:	011e      	lsls	r6, r3, #4
 800ce9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cea0:	4618      	mov	r0, r3
 800cea2:	f04f 0100 	mov.w	r1, #0
 800cea6:	4602      	mov	r2, r0
 800cea8:	460b      	mov	r3, r1
 800ceaa:	1894      	adds	r4, r2, r2
 800ceac:	60bc      	str	r4, [r7, #8]
 800ceae:	415b      	adcs	r3, r3
 800ceb0:	60fb      	str	r3, [r7, #12]
 800ceb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ceb6:	1812      	adds	r2, r2, r0
 800ceb8:	eb41 0303 	adc.w	r3, r1, r3
 800cebc:	f04f 0400 	mov.w	r4, #0
 800cec0:	f04f 0500 	mov.w	r5, #0
 800cec4:	00dd      	lsls	r5, r3, #3
 800cec6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ceca:	00d4      	lsls	r4, r2, #3
 800cecc:	4622      	mov	r2, r4
 800cece:	462b      	mov	r3, r5
 800ced0:	1814      	adds	r4, r2, r0
 800ced2:	64bc      	str	r4, [r7, #72]	; 0x48
 800ced4:	414b      	adcs	r3, r1
 800ced6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ced8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	4618      	mov	r0, r3
 800cede:	f04f 0100 	mov.w	r1, #0
 800cee2:	f04f 0200 	mov.w	r2, #0
 800cee6:	f04f 0300 	mov.w	r3, #0
 800ceea:	008b      	lsls	r3, r1, #2
 800ceec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cef0:	0082      	lsls	r2, r0, #2
 800cef2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cef6:	f7f3 fed7 	bl	8000ca8 <__aeabi_uldivmod>
 800cefa:	4602      	mov	r2, r0
 800cefc:	460b      	mov	r3, r1
 800cefe:	4b2f      	ldr	r3, [pc, #188]	; (800cfbc <UART_SetConfig+0x38c>)
 800cf00:	fba3 1302 	umull	r1, r3, r3, r2
 800cf04:	095b      	lsrs	r3, r3, #5
 800cf06:	2164      	movs	r1, #100	; 0x64
 800cf08:	fb01 f303 	mul.w	r3, r1, r3
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	011b      	lsls	r3, r3, #4
 800cf10:	3332      	adds	r3, #50	; 0x32
 800cf12:	4a2a      	ldr	r2, [pc, #168]	; (800cfbc <UART_SetConfig+0x38c>)
 800cf14:	fba2 2303 	umull	r2, r3, r2, r3
 800cf18:	095b      	lsrs	r3, r3, #5
 800cf1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf1e:	441e      	add	r6, r3
 800cf20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf22:	4618      	mov	r0, r3
 800cf24:	f04f 0100 	mov.w	r1, #0
 800cf28:	4602      	mov	r2, r0
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	1894      	adds	r4, r2, r2
 800cf2e:	603c      	str	r4, [r7, #0]
 800cf30:	415b      	adcs	r3, r3
 800cf32:	607b      	str	r3, [r7, #4]
 800cf34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf38:	1812      	adds	r2, r2, r0
 800cf3a:	eb41 0303 	adc.w	r3, r1, r3
 800cf3e:	f04f 0400 	mov.w	r4, #0
 800cf42:	f04f 0500 	mov.w	r5, #0
 800cf46:	00dd      	lsls	r5, r3, #3
 800cf48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cf4c:	00d4      	lsls	r4, r2, #3
 800cf4e:	4622      	mov	r2, r4
 800cf50:	462b      	mov	r3, r5
 800cf52:	eb12 0a00 	adds.w	sl, r2, r0
 800cf56:	eb43 0b01 	adc.w	fp, r3, r1
 800cf5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f04f 0100 	mov.w	r1, #0
 800cf64:	f04f 0200 	mov.w	r2, #0
 800cf68:	f04f 0300 	mov.w	r3, #0
 800cf6c:	008b      	lsls	r3, r1, #2
 800cf6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cf72:	0082      	lsls	r2, r0, #2
 800cf74:	4650      	mov	r0, sl
 800cf76:	4659      	mov	r1, fp
 800cf78:	f7f3 fe96 	bl	8000ca8 <__aeabi_uldivmod>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	460b      	mov	r3, r1
 800cf80:	4b0e      	ldr	r3, [pc, #56]	; (800cfbc <UART_SetConfig+0x38c>)
 800cf82:	fba3 1302 	umull	r1, r3, r3, r2
 800cf86:	095b      	lsrs	r3, r3, #5
 800cf88:	2164      	movs	r1, #100	; 0x64
 800cf8a:	fb01 f303 	mul.w	r3, r1, r3
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	011b      	lsls	r3, r3, #4
 800cf92:	3332      	adds	r3, #50	; 0x32
 800cf94:	4a09      	ldr	r2, [pc, #36]	; (800cfbc <UART_SetConfig+0x38c>)
 800cf96:	fba2 2303 	umull	r2, r3, r2, r3
 800cf9a:	095b      	lsrs	r3, r3, #5
 800cf9c:	f003 020f 	and.w	r2, r3, #15
 800cfa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4432      	add	r2, r6
 800cfa6:	609a      	str	r2, [r3, #8]
}
 800cfa8:	bf00      	nop
 800cfaa:	377c      	adds	r7, #124	; 0x7c
 800cfac:	46bd      	mov	sp, r7
 800cfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb2:	bf00      	nop
 800cfb4:	40011000 	.word	0x40011000
 800cfb8:	40011400 	.word	0x40011400
 800cfbc:	51eb851f 	.word	0x51eb851f

0800cfc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800cfc4:	4904      	ldr	r1, [pc, #16]	; (800cfd8 <MX_FATFS_Init+0x18>)
 800cfc6:	4805      	ldr	r0, [pc, #20]	; (800cfdc <MX_FATFS_Init+0x1c>)
 800cfc8:	f000 f8b0 	bl	800d12c <FATFS_LinkDriver>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	461a      	mov	r2, r3
 800cfd0:	4b03      	ldr	r3, [pc, #12]	; (800cfe0 <MX_FATFS_Init+0x20>)
 800cfd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cfd4:	bf00      	nop
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	20006600 	.word	0x20006600
 800cfdc:	200000b8 	.word	0x200000b8
 800cfe0:	20006604 	.word	0x20006604

0800cfe4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	4603      	mov	r3, r0
 800cfec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800cfee:	4b06      	ldr	r3, [pc, #24]	; (800d008 <USER_initialize+0x24>)
 800cff0:	2201      	movs	r2, #1
 800cff2:	701a      	strb	r2, [r3, #0]
    return Stat;
 800cff4:	4b04      	ldr	r3, [pc, #16]	; (800d008 <USER_initialize+0x24>)
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	370c      	adds	r7, #12
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	200000b5 	.word	0x200000b5

0800d00c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	4603      	mov	r3, r0
 800d014:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800d016:	4b06      	ldr	r3, [pc, #24]	; (800d030 <USER_status+0x24>)
 800d018:	2201      	movs	r2, #1
 800d01a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800d01c:	4b04      	ldr	r3, [pc, #16]	; (800d030 <USER_status+0x24>)
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800d022:	4618      	mov	r0, r3
 800d024:	370c      	adds	r7, #12
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	200000b5 	.word	0x200000b5

0800d034 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60b9      	str	r1, [r7, #8]
 800d03c:	607a      	str	r2, [r7, #4]
 800d03e:	603b      	str	r3, [r7, #0]
 800d040:	4603      	mov	r3, r0
 800d042:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800d044:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800d046:	4618      	mov	r0, r3
 800d048:	3714      	adds	r7, #20
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr

0800d052 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d052:	b480      	push	{r7}
 800d054:	b085      	sub	sp, #20
 800d056:	af00      	add	r7, sp, #0
 800d058:	60b9      	str	r1, [r7, #8]
 800d05a:	607a      	str	r2, [r7, #4]
 800d05c:	603b      	str	r3, [r7, #0]
 800d05e:	4603      	mov	r3, r0
 800d060:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800d062:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800d064:	4618      	mov	r0, r3
 800d066:	3714      	adds	r7, #20
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr

0800d070 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d070:	b480      	push	{r7}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
 800d076:	4603      	mov	r3, r0
 800d078:	603a      	str	r2, [r7, #0]
 800d07a:	71fb      	strb	r3, [r7, #7]
 800d07c:	460b      	mov	r3, r1
 800d07e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	73fb      	strb	r3, [r7, #15]
    return res;
 800d084:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800d086:	4618      	mov	r0, r3
 800d088:	3714      	adds	r7, #20
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
	...

0800d094 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d094:	b480      	push	{r7}
 800d096:	b087      	sub	sp, #28
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d0aa:	4b1f      	ldr	r3, [pc, #124]	; (800d128 <FATFS_LinkDriverEx+0x94>)
 800d0ac:	7a5b      	ldrb	r3, [r3, #9]
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d131      	bne.n	800d118 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d0b4:	4b1c      	ldr	r3, [pc, #112]	; (800d128 <FATFS_LinkDriverEx+0x94>)
 800d0b6:	7a5b      	ldrb	r3, [r3, #9]
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	4b1a      	ldr	r3, [pc, #104]	; (800d128 <FATFS_LinkDriverEx+0x94>)
 800d0be:	2100      	movs	r1, #0
 800d0c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d0c2:	4b19      	ldr	r3, [pc, #100]	; (800d128 <FATFS_LinkDriverEx+0x94>)
 800d0c4:	7a5b      	ldrb	r3, [r3, #9]
 800d0c6:	b2db      	uxtb	r3, r3
 800d0c8:	4a17      	ldr	r2, [pc, #92]	; (800d128 <FATFS_LinkDriverEx+0x94>)
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	4413      	add	r3, r2
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d0d2:	4b15      	ldr	r3, [pc, #84]	; (800d128 <FATFS_LinkDriverEx+0x94>)
 800d0d4:	7a5b      	ldrb	r3, [r3, #9]
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4b13      	ldr	r3, [pc, #76]	; (800d128 <FATFS_LinkDriverEx+0x94>)
 800d0dc:	4413      	add	r3, r2
 800d0de:	79fa      	ldrb	r2, [r7, #7]
 800d0e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d0e2:	4b11      	ldr	r3, [pc, #68]	; (800d128 <FATFS_LinkDriverEx+0x94>)
 800d0e4:	7a5b      	ldrb	r3, [r3, #9]
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	1c5a      	adds	r2, r3, #1
 800d0ea:	b2d1      	uxtb	r1, r2
 800d0ec:	4a0e      	ldr	r2, [pc, #56]	; (800d128 <FATFS_LinkDriverEx+0x94>)
 800d0ee:	7251      	strb	r1, [r2, #9]
 800d0f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d0f2:	7dbb      	ldrb	r3, [r7, #22]
 800d0f4:	3330      	adds	r3, #48	; 0x30
 800d0f6:	b2da      	uxtb	r2, r3
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	3301      	adds	r3, #1
 800d100:	223a      	movs	r2, #58	; 0x3a
 800d102:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	3302      	adds	r3, #2
 800d108:	222f      	movs	r2, #47	; 0x2f
 800d10a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	3303      	adds	r3, #3
 800d110:	2200      	movs	r2, #0
 800d112:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d118:	7dfb      	ldrb	r3, [r7, #23]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	371c      	adds	r7, #28
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop
 800d128:	20000608 	.word	0x20000608

0800d12c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d136:	2200      	movs	r2, #0
 800d138:	6839      	ldr	r1, [r7, #0]
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff ffaa 	bl	800d094 <FATFS_LinkDriverEx>
 800d140:	4603      	mov	r3, r0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
	...

0800d14c <__NVIC_SetPriority>:
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	4603      	mov	r3, r0
 800d154:	6039      	str	r1, [r7, #0]
 800d156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	db0a      	blt.n	800d176 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	b2da      	uxtb	r2, r3
 800d164:	490c      	ldr	r1, [pc, #48]	; (800d198 <__NVIC_SetPriority+0x4c>)
 800d166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d16a:	0112      	lsls	r2, r2, #4
 800d16c:	b2d2      	uxtb	r2, r2
 800d16e:	440b      	add	r3, r1
 800d170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d174:	e00a      	b.n	800d18c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	4908      	ldr	r1, [pc, #32]	; (800d19c <__NVIC_SetPriority+0x50>)
 800d17c:	79fb      	ldrb	r3, [r7, #7]
 800d17e:	f003 030f 	and.w	r3, r3, #15
 800d182:	3b04      	subs	r3, #4
 800d184:	0112      	lsls	r2, r2, #4
 800d186:	b2d2      	uxtb	r2, r2
 800d188:	440b      	add	r3, r1
 800d18a:	761a      	strb	r2, [r3, #24]
}
 800d18c:	bf00      	nop
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr
 800d198:	e000e100 	.word	0xe000e100
 800d19c:	e000ed00 	.word	0xe000ed00

0800d1a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d1a4:	4b05      	ldr	r3, [pc, #20]	; (800d1bc <SysTick_Handler+0x1c>)
 800d1a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d1a8:	f001 ff3c 	bl	800f024 <xTaskGetSchedulerState>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d001      	beq.n	800d1b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d1b2:	f002 fd21 	bl	800fbf8 <xPortSysTickHandler>
  }
}
 800d1b6:	bf00      	nop
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	e000e010 	.word	0xe000e010

0800d1c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	f06f 0004 	mvn.w	r0, #4
 800d1ca:	f7ff ffbf 	bl	800d14c <__NVIC_SetPriority>
#endif
}
 800d1ce:	bf00      	nop
 800d1d0:	bd80      	pop	{r7, pc}
	...

0800d1d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1da:	f3ef 8305 	mrs	r3, IPSR
 800d1de:	603b      	str	r3, [r7, #0]
  return(result);
 800d1e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d003      	beq.n	800d1ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d1e6:	f06f 0305 	mvn.w	r3, #5
 800d1ea:	607b      	str	r3, [r7, #4]
 800d1ec:	e00c      	b.n	800d208 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d1ee:	4b0a      	ldr	r3, [pc, #40]	; (800d218 <osKernelInitialize+0x44>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d105      	bne.n	800d202 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d1f6:	4b08      	ldr	r3, [pc, #32]	; (800d218 <osKernelInitialize+0x44>)
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	607b      	str	r3, [r7, #4]
 800d200:	e002      	b.n	800d208 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d202:	f04f 33ff 	mov.w	r3, #4294967295
 800d206:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d208:	687b      	ldr	r3, [r7, #4]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	370c      	adds	r7, #12
 800d20e:	46bd      	mov	sp, r7
 800d210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d214:	4770      	bx	lr
 800d216:	bf00      	nop
 800d218:	20000614 	.word	0x20000614

0800d21c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d222:	f3ef 8305 	mrs	r3, IPSR
 800d226:	603b      	str	r3, [r7, #0]
  return(result);
 800d228:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d22e:	f06f 0305 	mvn.w	r3, #5
 800d232:	607b      	str	r3, [r7, #4]
 800d234:	e010      	b.n	800d258 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d236:	4b0b      	ldr	r3, [pc, #44]	; (800d264 <osKernelStart+0x48>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d109      	bne.n	800d252 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d23e:	f7ff ffbf 	bl	800d1c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d242:	4b08      	ldr	r3, [pc, #32]	; (800d264 <osKernelStart+0x48>)
 800d244:	2202      	movs	r2, #2
 800d246:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d248:	f001 fa80 	bl	800e74c <vTaskStartScheduler>
      stat = osOK;
 800d24c:	2300      	movs	r3, #0
 800d24e:	607b      	str	r3, [r7, #4]
 800d250:	e002      	b.n	800d258 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d252:	f04f 33ff 	mov.w	r3, #4294967295
 800d256:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d258:	687b      	ldr	r3, [r7, #4]
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	20000614 	.word	0x20000614

0800d268 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d268:	b580      	push	{r7, lr}
 800d26a:	b08e      	sub	sp, #56	; 0x38
 800d26c:	af04      	add	r7, sp, #16
 800d26e:	60f8      	str	r0, [r7, #12]
 800d270:	60b9      	str	r1, [r7, #8]
 800d272:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d274:	2300      	movs	r3, #0
 800d276:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d278:	f3ef 8305 	mrs	r3, IPSR
 800d27c:	617b      	str	r3, [r7, #20]
  return(result);
 800d27e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d280:	2b00      	cmp	r3, #0
 800d282:	d17f      	bne.n	800d384 <osThreadNew+0x11c>
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d07c      	beq.n	800d384 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800d28a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d28e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d290:	2318      	movs	r3, #24
 800d292:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d294:	2300      	movs	r3, #0
 800d296:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d298:	f04f 33ff 	mov.w	r3, #4294967295
 800d29c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d045      	beq.n	800d330 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <osThreadNew+0x4a>
        name = attr->name;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	699b      	ldr	r3, [r3, #24]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	699b      	ldr	r3, [r3, #24]
 800d2be:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d008      	beq.n	800d2d8 <osThreadNew+0x70>
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	2b38      	cmp	r3, #56	; 0x38
 800d2ca:	d805      	bhi.n	800d2d8 <osThreadNew+0x70>
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	f003 0301 	and.w	r3, r3, #1
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d001      	beq.n	800d2dc <osThreadNew+0x74>
        return (NULL);
 800d2d8:	2300      	movs	r3, #0
 800d2da:	e054      	b.n	800d386 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	695b      	ldr	r3, [r3, #20]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d003      	beq.n	800d2ec <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	695b      	ldr	r3, [r3, #20]
 800d2e8:	089b      	lsrs	r3, r3, #2
 800d2ea:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00e      	beq.n	800d312 <osThreadNew+0xaa>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	2bbb      	cmp	r3, #187	; 0xbb
 800d2fa:	d90a      	bls.n	800d312 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d300:	2b00      	cmp	r3, #0
 800d302:	d006      	beq.n	800d312 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	695b      	ldr	r3, [r3, #20]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d002      	beq.n	800d312 <osThreadNew+0xaa>
        mem = 1;
 800d30c:	2301      	movs	r3, #1
 800d30e:	61bb      	str	r3, [r7, #24]
 800d310:	e010      	b.n	800d334 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	689b      	ldr	r3, [r3, #8]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d10c      	bne.n	800d334 <osThreadNew+0xcc>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d108      	bne.n	800d334 <osThreadNew+0xcc>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d104      	bne.n	800d334 <osThreadNew+0xcc>
          mem = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	61bb      	str	r3, [r7, #24]
 800d32e:	e001      	b.n	800d334 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800d330:	2300      	movs	r3, #0
 800d332:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	2b01      	cmp	r3, #1
 800d338:	d110      	bne.n	800d35c <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d342:	9202      	str	r2, [sp, #8]
 800d344:	9301      	str	r3, [sp, #4]
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	9300      	str	r3, [sp, #0]
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	6a3a      	ldr	r2, [r7, #32]
 800d34e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f000 fea7 	bl	800e0a4 <xTaskCreateStatic>
 800d356:	4603      	mov	r3, r0
 800d358:	613b      	str	r3, [r7, #16]
 800d35a:	e013      	b.n	800d384 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d110      	bne.n	800d384 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d362:	6a3b      	ldr	r3, [r7, #32]
 800d364:	b29a      	uxth	r2, r3
 800d366:	f107 0310 	add.w	r3, r7, #16
 800d36a:	9301      	str	r3, [sp, #4]
 800d36c:	69fb      	ldr	r3, [r7, #28]
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	68bb      	ldr	r3, [r7, #8]
 800d372:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f000 fef2 	bl	800e15e <xTaskCreate>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d001      	beq.n	800d384 <osThreadNew+0x11c>
            hTask = NULL;
 800d380:	2300      	movs	r3, #0
 800d382:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d384:	693b      	ldr	r3, [r7, #16]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3728      	adds	r7, #40	; 0x28
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800d38e:	b580      	push	{r7, lr}
 800d390:	b082      	sub	sp, #8
 800d392:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800d394:	f001 fe36 	bl	800f004 <xTaskGetCurrentTaskHandle>
 800d398:	6078      	str	r0, [r7, #4]

  return (id);
 800d39a:	687b      	ldr	r3, [r7, #4]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <osThreadGetState>:

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b086      	sub	sp, #24
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3b0:	f3ef 8305 	mrs	r3, IPSR
 800d3b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d102      	bne.n	800d3c2 <osThreadGetState+0x1e>
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d103      	bne.n	800d3ca <osThreadGetState+0x26>
    state = osThreadError;
 800d3c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d3c6:	617b      	str	r3, [r7, #20]
 800d3c8:	e022      	b.n	800d410 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 800d3ca:	6938      	ldr	r0, [r7, #16]
 800d3cc:	f001 f8c8 	bl	800e560 <eTaskGetState>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b04      	cmp	r3, #4
 800d3d4:	d818      	bhi.n	800d408 <osThreadGetState+0x64>
 800d3d6:	a201      	add	r2, pc, #4	; (adr r2, 800d3dc <osThreadGetState+0x38>)
 800d3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3dc:	0800d3f1 	.word	0x0800d3f1
 800d3e0:	0800d3f7 	.word	0x0800d3f7
 800d3e4:	0800d3fd 	.word	0x0800d3fd
 800d3e8:	0800d3fd 	.word	0x0800d3fd
 800d3ec:	0800d403 	.word	0x0800d403
      case eRunning:   state = osThreadRunning;    break;
 800d3f0:	2302      	movs	r3, #2
 800d3f2:	617b      	str	r3, [r7, #20]
 800d3f4:	e00c      	b.n	800d410 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	617b      	str	r3, [r7, #20]
 800d3fa:	e009      	b.n	800d410 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 800d3fc:	2303      	movs	r3, #3
 800d3fe:	617b      	str	r3, [r7, #20]
 800d400:	e006      	b.n	800d410 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 800d402:	2304      	movs	r3, #4
 800d404:	617b      	str	r3, [r7, #20]
 800d406:	e003      	b.n	800d410 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 800d408:	f04f 33ff 	mov.w	r3, #4294967295
 800d40c:	617b      	str	r3, [r7, #20]
 800d40e:	bf00      	nop
    }
  }

  return (state);
 800d410:	697b      	ldr	r3, [r7, #20]
}
 800d412:	4618      	mov	r0, r3
 800d414:	3718      	adds	r7, #24
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop

0800d41c <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b086      	sub	sp, #24
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d428:	f3ef 8305 	mrs	r3, IPSR
 800d42c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d42e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d430:	2b00      	cmp	r3, #0
 800d432:	d003      	beq.n	800d43c <osThreadResume+0x20>
    stat = osErrorISR;
 800d434:	f06f 0305 	mvn.w	r3, #5
 800d438:	617b      	str	r3, [r7, #20]
 800d43a:	e00b      	b.n	800d454 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d103      	bne.n	800d44a <osThreadResume+0x2e>
    stat = osErrorParameter;
 800d442:	f06f 0303 	mvn.w	r3, #3
 800d446:	617b      	str	r3, [r7, #20]
 800d448:	e004      	b.n	800d454 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800d44a:	2300      	movs	r3, #0
 800d44c:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 800d44e:	6938      	ldr	r0, [r7, #16]
 800d450:	f001 f91e 	bl	800e690 <vTaskResume>
  }

  return (stat);
 800d454:	697b      	ldr	r3, [r7, #20]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <osThreadExit>:
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800d45e:	b580      	push	{r7, lr}
 800d460:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800d462:	2000      	movs	r0, #0
 800d464:	f000 ffd6 	bl	800e414 <vTaskDelete>
#endif
  for (;;);
 800d468:	e7fe      	b.n	800d468 <osThreadExit+0xa>

0800d46a <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b086      	sub	sp, #24
 800d46e:	af00      	add	r7, sp, #0
 800d470:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d476:	f3ef 8305 	mrs	r3, IPSR
 800d47a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d47c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d003      	beq.n	800d48a <osThreadTerminate+0x20>
    stat = osErrorISR;
 800d482:	f06f 0305 	mvn.w	r3, #5
 800d486:	617b      	str	r3, [r7, #20]
 800d488:	e017      	b.n	800d4ba <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d103      	bne.n	800d498 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800d490:	f06f 0303 	mvn.w	r3, #3
 800d494:	617b      	str	r3, [r7, #20]
 800d496:	e010      	b.n	800d4ba <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800d498:	6938      	ldr	r0, [r7, #16]
 800d49a:	f001 f861 	bl	800e560 <eTaskGetState>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800d4a2:	7bfb      	ldrb	r3, [r7, #15]
 800d4a4:	2b04      	cmp	r3, #4
 800d4a6:	d005      	beq.n	800d4b4 <osThreadTerminate+0x4a>
      stat = osOK;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800d4ac:	6938      	ldr	r0, [r7, #16]
 800d4ae:	f000 ffb1 	bl	800e414 <vTaskDelete>
 800d4b2:	e002      	b.n	800d4ba <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800d4b4:	f06f 0302 	mvn.w	r3, #2
 800d4b8:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800d4ba:	697b      	ldr	r3, [r7, #20]
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3718      	adds	r7, #24
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4cc:	f3ef 8305 	mrs	r3, IPSR
 800d4d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800d4d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d003      	beq.n	800d4e0 <osDelay+0x1c>
    stat = osErrorISR;
 800d4d8:	f06f 0305 	mvn.w	r3, #5
 800d4dc:	60fb      	str	r3, [r7, #12]
 800d4de:	e007      	b.n	800d4f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d002      	beq.n	800d4f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f001 f804 	bl	800e4f8 <vTaskDelay>
    }
  }

  return (stat);
 800d4f0:	68fb      	ldr	r3, [r7, #12]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
	...

0800d4fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d4fc:	b480      	push	{r7}
 800d4fe:	b085      	sub	sp, #20
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	4a07      	ldr	r2, [pc, #28]	; (800d528 <vApplicationGetIdleTaskMemory+0x2c>)
 800d50c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	4a06      	ldr	r2, [pc, #24]	; (800d52c <vApplicationGetIdleTaskMemory+0x30>)
 800d512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d51a:	601a      	str	r2, [r3, #0]
}
 800d51c:	bf00      	nop
 800d51e:	3714      	adds	r7, #20
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr
 800d528:	20000618 	.word	0x20000618
 800d52c:	200006d4 	.word	0x200006d4

0800d530 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d530:	b480      	push	{r7}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	4a07      	ldr	r2, [pc, #28]	; (800d55c <vApplicationGetTimerTaskMemory+0x2c>)
 800d540:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	4a06      	ldr	r2, [pc, #24]	; (800d560 <vApplicationGetTimerTaskMemory+0x30>)
 800d546:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d54e:	601a      	str	r2, [r3, #0]
}
 800d550:	bf00      	nop
 800d552:	3714      	adds	r7, #20
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	20000ad4 	.word	0x20000ad4
 800d560:	20000b90 	.word	0x20000b90

0800d564 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d564:	b480      	push	{r7}
 800d566:	b083      	sub	sp, #12
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f103 0208 	add.w	r2, r3, #8
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f04f 32ff 	mov.w	r2, #4294967295
 800d57c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f103 0208 	add.w	r2, r3, #8
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f103 0208 	add.w	r2, r3, #8
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2200      	movs	r2, #0
 800d596:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d598:	bf00      	nop
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d5b2:	bf00      	nop
 800d5b4:	370c      	adds	r7, #12
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr

0800d5be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5be:	b480      	push	{r7}
 800d5c0:	b085      	sub	sp, #20
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	689a      	ldr	r2, [r3, #8]
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	683a      	ldr	r2, [r7, #0]
 800d5e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	683a      	ldr	r2, [r7, #0]
 800d5e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	1c5a      	adds	r2, r3, #1
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	601a      	str	r2, [r3, #0]
}
 800d5fa:	bf00      	nop
 800d5fc:	3714      	adds	r7, #20
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d606:	b480      	push	{r7}
 800d608:	b085      	sub	sp, #20
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
 800d60e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d61c:	d103      	bne.n	800d626 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	691b      	ldr	r3, [r3, #16]
 800d622:	60fb      	str	r3, [r7, #12]
 800d624:	e00c      	b.n	800d640 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	3308      	adds	r3, #8
 800d62a:	60fb      	str	r3, [r7, #12]
 800d62c:	e002      	b.n	800d634 <vListInsert+0x2e>
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	60fb      	str	r3, [r7, #12]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d2f6      	bcs.n	800d62e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	685a      	ldr	r2, [r3, #4]
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	683a      	ldr	r2, [r7, #0]
 800d64e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	683a      	ldr	r2, [r7, #0]
 800d65a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	1c5a      	adds	r2, r3, #1
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	601a      	str	r2, [r3, #0]
}
 800d66c:	bf00      	nop
 800d66e:	3714      	adds	r7, #20
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	691b      	ldr	r3, [r3, #16]
 800d684:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	6892      	ldr	r2, [r2, #8]
 800d68e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	6852      	ldr	r2, [r2, #4]
 800d698:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	687a      	ldr	r2, [r7, #4]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d103      	bne.n	800d6ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	689a      	ldr	r2, [r3, #8]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	1e5a      	subs	r2, r3, #1
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3714      	adds	r7, #20
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ca:	4770      	bx	lr

0800d6cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d10a      	bne.n	800d6f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e4:	f383 8811 	msr	BASEPRI, r3
 800d6e8:	f3bf 8f6f 	isb	sy
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d6f2:	bf00      	nop
 800d6f4:	e7fe      	b.n	800d6f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d6f6:	f002 f9ed 	bl	800fad4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681a      	ldr	r2, [r3, #0]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d702:	68f9      	ldr	r1, [r7, #12]
 800d704:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d706:	fb01 f303 	mul.w	r3, r1, r3
 800d70a:	441a      	add	r2, r3
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2200      	movs	r2, #0
 800d714:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d726:	3b01      	subs	r3, #1
 800d728:	68f9      	ldr	r1, [r7, #12]
 800d72a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d72c:	fb01 f303 	mul.w	r3, r1, r3
 800d730:	441a      	add	r2, r3
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	22ff      	movs	r2, #255	; 0xff
 800d73a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	22ff      	movs	r2, #255	; 0xff
 800d742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d114      	bne.n	800d776 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	691b      	ldr	r3, [r3, #16]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d01a      	beq.n	800d78a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	3310      	adds	r3, #16
 800d758:	4618      	mov	r0, r3
 800d75a:	f001 fa91 	bl	800ec80 <xTaskRemoveFromEventList>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d012      	beq.n	800d78a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d764:	4b0c      	ldr	r3, [pc, #48]	; (800d798 <xQueueGenericReset+0xcc>)
 800d766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d76a:	601a      	str	r2, [r3, #0]
 800d76c:	f3bf 8f4f 	dsb	sy
 800d770:	f3bf 8f6f 	isb	sy
 800d774:	e009      	b.n	800d78a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	3310      	adds	r3, #16
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7ff fef2 	bl	800d564 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	3324      	adds	r3, #36	; 0x24
 800d784:	4618      	mov	r0, r3
 800d786:	f7ff feed 	bl	800d564 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d78a:	f002 f9d3 	bl	800fb34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d78e:	2301      	movs	r3, #1
}
 800d790:	4618      	mov	r0, r3
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	e000ed04 	.word	0xe000ed04

0800d79c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b08e      	sub	sp, #56	; 0x38
 800d7a0:	af02      	add	r7, sp, #8
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	607a      	str	r2, [r7, #4]
 800d7a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10a      	bne.n	800d7c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b4:	f383 8811 	msr	BASEPRI, r3
 800d7b8:	f3bf 8f6f 	isb	sy
 800d7bc:	f3bf 8f4f 	dsb	sy
 800d7c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d7c2:	bf00      	nop
 800d7c4:	e7fe      	b.n	800d7c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d10a      	bne.n	800d7e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d0:	f383 8811 	msr	BASEPRI, r3
 800d7d4:	f3bf 8f6f 	isb	sy
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d7de:	bf00      	nop
 800d7e0:	e7fe      	b.n	800d7e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d002      	beq.n	800d7ee <xQueueGenericCreateStatic+0x52>
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d001      	beq.n	800d7f2 <xQueueGenericCreateStatic+0x56>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e000      	b.n	800d7f4 <xQueueGenericCreateStatic+0x58>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10a      	bne.n	800d80e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fc:	f383 8811 	msr	BASEPRI, r3
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	623b      	str	r3, [r7, #32]
}
 800d80a:	bf00      	nop
 800d80c:	e7fe      	b.n	800d80c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d102      	bne.n	800d81a <xQueueGenericCreateStatic+0x7e>
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <xQueueGenericCreateStatic+0x82>
 800d81a:	2301      	movs	r3, #1
 800d81c:	e000      	b.n	800d820 <xQueueGenericCreateStatic+0x84>
 800d81e:	2300      	movs	r3, #0
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10a      	bne.n	800d83a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d828:	f383 8811 	msr	BASEPRI, r3
 800d82c:	f3bf 8f6f 	isb	sy
 800d830:	f3bf 8f4f 	dsb	sy
 800d834:	61fb      	str	r3, [r7, #28]
}
 800d836:	bf00      	nop
 800d838:	e7fe      	b.n	800d838 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d83a:	2350      	movs	r3, #80	; 0x50
 800d83c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	2b50      	cmp	r3, #80	; 0x50
 800d842:	d00a      	beq.n	800d85a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d848:	f383 8811 	msr	BASEPRI, r3
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	61bb      	str	r3, [r7, #24]
}
 800d856:	bf00      	nop
 800d858:	e7fe      	b.n	800d858 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d85a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00d      	beq.n	800d882 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d868:	2201      	movs	r2, #1
 800d86a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d86e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	4613      	mov	r3, r2
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	68b9      	ldr	r1, [r7, #8]
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f000 f805 	bl	800d88c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d884:	4618      	mov	r0, r3
 800d886:	3730      	adds	r7, #48	; 0x30
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
 800d898:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d103      	bne.n	800d8a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	69ba      	ldr	r2, [r7, #24]
 800d8a4:	601a      	str	r2, [r3, #0]
 800d8a6:	e002      	b.n	800d8ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	68ba      	ldr	r2, [r7, #8]
 800d8b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d8ba:	2101      	movs	r1, #1
 800d8bc:	69b8      	ldr	r0, [r7, #24]
 800d8be:	f7ff ff05 	bl	800d6cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	78fa      	ldrb	r2, [r7, #3]
 800d8c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d8ca:	bf00      	nop
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
	...

0800d8d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b08e      	sub	sp, #56	; 0x38
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
 800d8e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10a      	bne.n	800d906 <xQueueGenericSend+0x32>
	__asm volatile
 800d8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f4:	f383 8811 	msr	BASEPRI, r3
 800d8f8:	f3bf 8f6f 	isb	sy
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d902:	bf00      	nop
 800d904:	e7fe      	b.n	800d904 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d103      	bne.n	800d914 <xQueueGenericSend+0x40>
 800d90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d910:	2b00      	cmp	r3, #0
 800d912:	d101      	bne.n	800d918 <xQueueGenericSend+0x44>
 800d914:	2301      	movs	r3, #1
 800d916:	e000      	b.n	800d91a <xQueueGenericSend+0x46>
 800d918:	2300      	movs	r3, #0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d10a      	bne.n	800d934 <xQueueGenericSend+0x60>
	__asm volatile
 800d91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d930:	bf00      	nop
 800d932:	e7fe      	b.n	800d932 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	2b02      	cmp	r3, #2
 800d938:	d103      	bne.n	800d942 <xQueueGenericSend+0x6e>
 800d93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d101      	bne.n	800d946 <xQueueGenericSend+0x72>
 800d942:	2301      	movs	r3, #1
 800d944:	e000      	b.n	800d948 <xQueueGenericSend+0x74>
 800d946:	2300      	movs	r3, #0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d10a      	bne.n	800d962 <xQueueGenericSend+0x8e>
	__asm volatile
 800d94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d950:	f383 8811 	msr	BASEPRI, r3
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	f3bf 8f4f 	dsb	sy
 800d95c:	623b      	str	r3, [r7, #32]
}
 800d95e:	bf00      	nop
 800d960:	e7fe      	b.n	800d960 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d962:	f001 fb5f 	bl	800f024 <xTaskGetSchedulerState>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d102      	bne.n	800d972 <xQueueGenericSend+0x9e>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d101      	bne.n	800d976 <xQueueGenericSend+0xa2>
 800d972:	2301      	movs	r3, #1
 800d974:	e000      	b.n	800d978 <xQueueGenericSend+0xa4>
 800d976:	2300      	movs	r3, #0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d10a      	bne.n	800d992 <xQueueGenericSend+0xbe>
	__asm volatile
 800d97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d980:	f383 8811 	msr	BASEPRI, r3
 800d984:	f3bf 8f6f 	isb	sy
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	61fb      	str	r3, [r7, #28]
}
 800d98e:	bf00      	nop
 800d990:	e7fe      	b.n	800d990 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d992:	f002 f89f 	bl	800fad4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99e:	429a      	cmp	r2, r3
 800d9a0:	d302      	bcc.n	800d9a8 <xQueueGenericSend+0xd4>
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	2b02      	cmp	r3, #2
 800d9a6:	d129      	bne.n	800d9fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9a8:	683a      	ldr	r2, [r7, #0]
 800d9aa:	68b9      	ldr	r1, [r7, #8]
 800d9ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9ae:	f000 fa0b 	bl	800ddc8 <prvCopyDataToQueue>
 800d9b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d010      	beq.n	800d9de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9be:	3324      	adds	r3, #36	; 0x24
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	f001 f95d 	bl	800ec80 <xTaskRemoveFromEventList>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d013      	beq.n	800d9f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d9cc:	4b3f      	ldr	r3, [pc, #252]	; (800dacc <xQueueGenericSend+0x1f8>)
 800d9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9d2:	601a      	str	r2, [r3, #0]
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	f3bf 8f6f 	isb	sy
 800d9dc:	e00a      	b.n	800d9f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d007      	beq.n	800d9f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d9e4:	4b39      	ldr	r3, [pc, #228]	; (800dacc <xQueueGenericSend+0x1f8>)
 800d9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9ea:	601a      	str	r2, [r3, #0]
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d9f4:	f002 f89e 	bl	800fb34 <vPortExitCritical>
				return pdPASS;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e063      	b.n	800dac4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d103      	bne.n	800da0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da02:	f002 f897 	bl	800fb34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da06:	2300      	movs	r3, #0
 800da08:	e05c      	b.n	800dac4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d106      	bne.n	800da1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da10:	f107 0314 	add.w	r3, r7, #20
 800da14:	4618      	mov	r0, r3
 800da16:	f001 f997 	bl	800ed48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da1a:	2301      	movs	r3, #1
 800da1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da1e:	f002 f889 	bl	800fb34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da22:	f000 ff03 	bl	800e82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da26:	f002 f855 	bl	800fad4 <vPortEnterCritical>
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da30:	b25b      	sxtb	r3, r3
 800da32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da36:	d103      	bne.n	800da40 <xQueueGenericSend+0x16c>
 800da38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da46:	b25b      	sxtb	r3, r3
 800da48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4c:	d103      	bne.n	800da56 <xQueueGenericSend+0x182>
 800da4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da50:	2200      	movs	r2, #0
 800da52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da56:	f002 f86d 	bl	800fb34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da5a:	1d3a      	adds	r2, r7, #4
 800da5c:	f107 0314 	add.w	r3, r7, #20
 800da60:	4611      	mov	r1, r2
 800da62:	4618      	mov	r0, r3
 800da64:	f001 f986 	bl	800ed74 <xTaskCheckForTimeOut>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d124      	bne.n	800dab8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da70:	f000 faa2 	bl	800dfb8 <prvIsQueueFull>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d018      	beq.n	800daac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7c:	3310      	adds	r3, #16
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	4611      	mov	r1, r2
 800da82:	4618      	mov	r0, r3
 800da84:	f001 f8ac 	bl	800ebe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800da88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da8a:	f000 fa2d 	bl	800dee8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800da8e:	f000 fedb 	bl	800e848 <xTaskResumeAll>
 800da92:	4603      	mov	r3, r0
 800da94:	2b00      	cmp	r3, #0
 800da96:	f47f af7c 	bne.w	800d992 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800da9a:	4b0c      	ldr	r3, [pc, #48]	; (800dacc <xQueueGenericSend+0x1f8>)
 800da9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daa0:	601a      	str	r2, [r3, #0]
 800daa2:	f3bf 8f4f 	dsb	sy
 800daa6:	f3bf 8f6f 	isb	sy
 800daaa:	e772      	b.n	800d992 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800daac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800daae:	f000 fa1b 	bl	800dee8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dab2:	f000 fec9 	bl	800e848 <xTaskResumeAll>
 800dab6:	e76c      	b.n	800d992 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800daba:	f000 fa15 	bl	800dee8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dabe:	f000 fec3 	bl	800e848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dac2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3738      	adds	r7, #56	; 0x38
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	e000ed04 	.word	0xe000ed04

0800dad0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b090      	sub	sp, #64	; 0x40
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
 800dadc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800dae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d10a      	bne.n	800dafe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800dae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daec:	f383 8811 	msr	BASEPRI, r3
 800daf0:	f3bf 8f6f 	isb	sy
 800daf4:	f3bf 8f4f 	dsb	sy
 800daf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800dafa:	bf00      	nop
 800dafc:	e7fe      	b.n	800dafc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d103      	bne.n	800db0c <xQueueGenericSendFromISR+0x3c>
 800db04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d101      	bne.n	800db10 <xQueueGenericSendFromISR+0x40>
 800db0c:	2301      	movs	r3, #1
 800db0e:	e000      	b.n	800db12 <xQueueGenericSendFromISR+0x42>
 800db10:	2300      	movs	r3, #0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d10a      	bne.n	800db2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800db16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1a:	f383 8811 	msr	BASEPRI, r3
 800db1e:	f3bf 8f6f 	isb	sy
 800db22:	f3bf 8f4f 	dsb	sy
 800db26:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db28:	bf00      	nop
 800db2a:	e7fe      	b.n	800db2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	2b02      	cmp	r3, #2
 800db30:	d103      	bne.n	800db3a <xQueueGenericSendFromISR+0x6a>
 800db32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db36:	2b01      	cmp	r3, #1
 800db38:	d101      	bne.n	800db3e <xQueueGenericSendFromISR+0x6e>
 800db3a:	2301      	movs	r3, #1
 800db3c:	e000      	b.n	800db40 <xQueueGenericSendFromISR+0x70>
 800db3e:	2300      	movs	r3, #0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d10a      	bne.n	800db5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800db44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db48:	f383 8811 	msr	BASEPRI, r3
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	623b      	str	r3, [r7, #32]
}
 800db56:	bf00      	nop
 800db58:	e7fe      	b.n	800db58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db5a:	f002 f89d 	bl	800fc98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800db5e:	f3ef 8211 	mrs	r2, BASEPRI
 800db62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db66:	f383 8811 	msr	BASEPRI, r3
 800db6a:	f3bf 8f6f 	isb	sy
 800db6e:	f3bf 8f4f 	dsb	sy
 800db72:	61fa      	str	r2, [r7, #28]
 800db74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800db76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db82:	429a      	cmp	r2, r3
 800db84:	d302      	bcc.n	800db8c <xQueueGenericSendFromISR+0xbc>
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	2b02      	cmp	r3, #2
 800db8a:	d12f      	bne.n	800dbec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800db8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800db9c:	683a      	ldr	r2, [r7, #0]
 800db9e:	68b9      	ldr	r1, [r7, #8]
 800dba0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dba2:	f000 f911 	bl	800ddc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dba6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800dbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbae:	d112      	bne.n	800dbd6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d016      	beq.n	800dbe6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbba:	3324      	adds	r3, #36	; 0x24
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f001 f85f 	bl	800ec80 <xTaskRemoveFromEventList>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d00e      	beq.n	800dbe6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00b      	beq.n	800dbe6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2201      	movs	r2, #1
 800dbd2:	601a      	str	r2, [r3, #0]
 800dbd4:	e007      	b.n	800dbe6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dbd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dbda:	3301      	adds	r3, #1
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	b25a      	sxtb	r2, r3
 800dbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dbea:	e001      	b.n	800dbf0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dbec:	2300      	movs	r3, #0
 800dbee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbf2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dbfa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3740      	adds	r7, #64	; 0x40
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
	...

0800dc08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b08c      	sub	sp, #48	; 0x30
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc14:	2300      	movs	r3, #0
 800dc16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10a      	bne.n	800dc38 <xQueueReceive+0x30>
	__asm volatile
 800dc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc26:	f383 8811 	msr	BASEPRI, r3
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	623b      	str	r3, [r7, #32]
}
 800dc34:	bf00      	nop
 800dc36:	e7fe      	b.n	800dc36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d103      	bne.n	800dc46 <xQueueReceive+0x3e>
 800dc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d101      	bne.n	800dc4a <xQueueReceive+0x42>
 800dc46:	2301      	movs	r3, #1
 800dc48:	e000      	b.n	800dc4c <xQueueReceive+0x44>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10a      	bne.n	800dc66 <xQueueReceive+0x5e>
	__asm volatile
 800dc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	61fb      	str	r3, [r7, #28]
}
 800dc62:	bf00      	nop
 800dc64:	e7fe      	b.n	800dc64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc66:	f001 f9dd 	bl	800f024 <xTaskGetSchedulerState>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d102      	bne.n	800dc76 <xQueueReceive+0x6e>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d101      	bne.n	800dc7a <xQueueReceive+0x72>
 800dc76:	2301      	movs	r3, #1
 800dc78:	e000      	b.n	800dc7c <xQueueReceive+0x74>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d10a      	bne.n	800dc96 <xQueueReceive+0x8e>
	__asm volatile
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	61bb      	str	r3, [r7, #24]
}
 800dc92:	bf00      	nop
 800dc94:	e7fe      	b.n	800dc94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dc96:	f001 ff1d 	bl	800fad4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d01f      	beq.n	800dce6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dca6:	68b9      	ldr	r1, [r7, #8]
 800dca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcaa:	f000 f8f7 	bl	800de9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb0:	1e5a      	subs	r2, r3, #1
 800dcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb8:	691b      	ldr	r3, [r3, #16]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00f      	beq.n	800dcde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc0:	3310      	adds	r3, #16
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f000 ffdc 	bl	800ec80 <xTaskRemoveFromEventList>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d007      	beq.n	800dcde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dcce:	4b3d      	ldr	r3, [pc, #244]	; (800ddc4 <xQueueReceive+0x1bc>)
 800dcd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcd4:	601a      	str	r2, [r3, #0]
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dcde:	f001 ff29 	bl	800fb34 <vPortExitCritical>
				return pdPASS;
 800dce2:	2301      	movs	r3, #1
 800dce4:	e069      	b.n	800ddba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d103      	bne.n	800dcf4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dcec:	f001 ff22 	bl	800fb34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	e062      	b.n	800ddba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d106      	bne.n	800dd08 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dcfa:	f107 0310 	add.w	r3, r7, #16
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f001 f822 	bl	800ed48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd04:	2301      	movs	r3, #1
 800dd06:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd08:	f001 ff14 	bl	800fb34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd0c:	f000 fd8e 	bl	800e82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd10:	f001 fee0 	bl	800fad4 <vPortEnterCritical>
 800dd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd1a:	b25b      	sxtb	r3, r3
 800dd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd20:	d103      	bne.n	800dd2a <xQueueReceive+0x122>
 800dd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd24:	2200      	movs	r2, #0
 800dd26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd30:	b25b      	sxtb	r3, r3
 800dd32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd36:	d103      	bne.n	800dd40 <xQueueReceive+0x138>
 800dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd40:	f001 fef8 	bl	800fb34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd44:	1d3a      	adds	r2, r7, #4
 800dd46:	f107 0310 	add.w	r3, r7, #16
 800dd4a:	4611      	mov	r1, r2
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f001 f811 	bl	800ed74 <xTaskCheckForTimeOut>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d123      	bne.n	800dda0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd5a:	f000 f917 	bl	800df8c <prvIsQueueEmpty>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d017      	beq.n	800dd94 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd66:	3324      	adds	r3, #36	; 0x24
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f000 ff37 	bl	800ebe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd74:	f000 f8b8 	bl	800dee8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd78:	f000 fd66 	bl	800e848 <xTaskResumeAll>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d189      	bne.n	800dc96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dd82:	4b10      	ldr	r3, [pc, #64]	; (800ddc4 <xQueueReceive+0x1bc>)
 800dd84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd88:	601a      	str	r2, [r3, #0]
 800dd8a:	f3bf 8f4f 	dsb	sy
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	e780      	b.n	800dc96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dd94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd96:	f000 f8a7 	bl	800dee8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dd9a:	f000 fd55 	bl	800e848 <xTaskResumeAll>
 800dd9e:	e77a      	b.n	800dc96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dda0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dda2:	f000 f8a1 	bl	800dee8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dda6:	f000 fd4f 	bl	800e848 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddac:	f000 f8ee 	bl	800df8c <prvIsQueueEmpty>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	f43f af6f 	beq.w	800dc96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ddb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3730      	adds	r7, #48	; 0x30
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	e000ed04 	.word	0xe000ed04

0800ddc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b086      	sub	sp, #24
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dddc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d10d      	bne.n	800de02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d14d      	bne.n	800de8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f001 f934 	bl	800f060 <xTaskPriorityDisinherit>
 800ddf8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	609a      	str	r2, [r3, #8]
 800de00:	e043      	b.n	800de8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d119      	bne.n	800de3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	6858      	ldr	r0, [r3, #4]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de10:	461a      	mov	r2, r3
 800de12:	68b9      	ldr	r1, [r7, #8]
 800de14:	f003 fa82 	bl	801131c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de20:	441a      	add	r2, r3
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	685a      	ldr	r2, [r3, #4]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d32b      	bcc.n	800de8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	605a      	str	r2, [r3, #4]
 800de3a:	e026      	b.n	800de8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	68d8      	ldr	r0, [r3, #12]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de44:	461a      	mov	r2, r3
 800de46:	68b9      	ldr	r1, [r7, #8]
 800de48:	f003 fa68 	bl	801131c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	68da      	ldr	r2, [r3, #12]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de54:	425b      	negs	r3, r3
 800de56:	441a      	add	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	68da      	ldr	r2, [r3, #12]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	429a      	cmp	r2, r3
 800de66:	d207      	bcs.n	800de78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	689a      	ldr	r2, [r3, #8]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de70:	425b      	negs	r3, r3
 800de72:	441a      	add	r2, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2b02      	cmp	r3, #2
 800de7c:	d105      	bne.n	800de8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d002      	beq.n	800de8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	3b01      	subs	r3, #1
 800de88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	1c5a      	adds	r2, r3, #1
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800de92:	697b      	ldr	r3, [r7, #20]
}
 800de94:	4618      	mov	r0, r3
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
 800dea4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d018      	beq.n	800dee0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	68da      	ldr	r2, [r3, #12]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deb6:	441a      	add	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	68da      	ldr	r2, [r3, #12]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d303      	bcc.n	800ded0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	68d9      	ldr	r1, [r3, #12]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ded8:	461a      	mov	r2, r3
 800deda:	6838      	ldr	r0, [r7, #0]
 800dedc:	f003 fa1e 	bl	801131c <memcpy>
	}
}
 800dee0:	bf00      	nop
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800def0:	f001 fdf0 	bl	800fad4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800defa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800defc:	e011      	b.n	800df22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df02:	2b00      	cmp	r3, #0
 800df04:	d012      	beq.n	800df2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	3324      	adds	r3, #36	; 0x24
 800df0a:	4618      	mov	r0, r3
 800df0c:	f000 feb8 	bl	800ec80 <xTaskRemoveFromEventList>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d001      	beq.n	800df1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800df16:	f000 ff8f 	bl	800ee38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800df1a:	7bfb      	ldrb	r3, [r7, #15]
 800df1c:	3b01      	subs	r3, #1
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800df22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df26:	2b00      	cmp	r3, #0
 800df28:	dce9      	bgt.n	800defe <prvUnlockQueue+0x16>
 800df2a:	e000      	b.n	800df2e <prvUnlockQueue+0x46>
					break;
 800df2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	22ff      	movs	r2, #255	; 0xff
 800df32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800df36:	f001 fdfd 	bl	800fb34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800df3a:	f001 fdcb 	bl	800fad4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df46:	e011      	b.n	800df6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d012      	beq.n	800df76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	3310      	adds	r3, #16
 800df54:	4618      	mov	r0, r3
 800df56:	f000 fe93 	bl	800ec80 <xTaskRemoveFromEventList>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d001      	beq.n	800df64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800df60:	f000 ff6a 	bl	800ee38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800df64:	7bbb      	ldrb	r3, [r7, #14]
 800df66:	3b01      	subs	r3, #1
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800df6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df70:	2b00      	cmp	r3, #0
 800df72:	dce9      	bgt.n	800df48 <prvUnlockQueue+0x60>
 800df74:	e000      	b.n	800df78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800df76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	22ff      	movs	r2, #255	; 0xff
 800df7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800df80:	f001 fdd8 	bl	800fb34 <vPortExitCritical>
}
 800df84:	bf00      	nop
 800df86:	3710      	adds	r7, #16
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800df94:	f001 fd9e 	bl	800fad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d102      	bne.n	800dfa6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	60fb      	str	r3, [r7, #12]
 800dfa4:	e001      	b.n	800dfaa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dfaa:	f001 fdc3 	bl	800fb34 <vPortExitCritical>

	return xReturn;
 800dfae:	68fb      	ldr	r3, [r7, #12]
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}

0800dfb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b084      	sub	sp, #16
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dfc0:	f001 fd88 	bl	800fad4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d102      	bne.n	800dfd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	60fb      	str	r3, [r7, #12]
 800dfd4:	e001      	b.n	800dfda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dfda:	f001 fdab 	bl	800fb34 <vPortExitCritical>

	return xReturn;
 800dfde:	68fb      	ldr	r3, [r7, #12]
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3710      	adds	r7, #16
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dfe8:	b480      	push	{r7}
 800dfea:	b085      	sub	sp, #20
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dff2:	2300      	movs	r3, #0
 800dff4:	60fb      	str	r3, [r7, #12]
 800dff6:	e014      	b.n	800e022 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dff8:	4a0f      	ldr	r2, [pc, #60]	; (800e038 <vQueueAddToRegistry+0x50>)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d10b      	bne.n	800e01c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e004:	490c      	ldr	r1, [pc, #48]	; (800e038 <vQueueAddToRegistry+0x50>)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	683a      	ldr	r2, [r7, #0]
 800e00a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e00e:	4a0a      	ldr	r2, [pc, #40]	; (800e038 <vQueueAddToRegistry+0x50>)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	00db      	lsls	r3, r3, #3
 800e014:	4413      	add	r3, r2
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e01a:	e006      	b.n	800e02a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	3301      	adds	r3, #1
 800e020:	60fb      	str	r3, [r7, #12]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b07      	cmp	r3, #7
 800e026:	d9e7      	bls.n	800dff8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e028:	bf00      	nop
 800e02a:	bf00      	nop
 800e02c:	3714      	adds	r7, #20
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop
 800e038:	20006a6c 	.word	0x20006a6c

0800e03c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b086      	sub	sp, #24
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e04c:	f001 fd42 	bl	800fad4 <vPortEnterCritical>
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e056:	b25b      	sxtb	r3, r3
 800e058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e05c:	d103      	bne.n	800e066 <vQueueWaitForMessageRestricted+0x2a>
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	2200      	movs	r2, #0
 800e062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e06c:	b25b      	sxtb	r3, r3
 800e06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e072:	d103      	bne.n	800e07c <vQueueWaitForMessageRestricted+0x40>
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	2200      	movs	r2, #0
 800e078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e07c:	f001 fd5a 	bl	800fb34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e084:	2b00      	cmp	r3, #0
 800e086:	d106      	bne.n	800e096 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	3324      	adds	r3, #36	; 0x24
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	68b9      	ldr	r1, [r7, #8]
 800e090:	4618      	mov	r0, r3
 800e092:	f000 fdc9 	bl	800ec28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e096:	6978      	ldr	r0, [r7, #20]
 800e098:	f7ff ff26 	bl	800dee8 <prvUnlockQueue>
	}
 800e09c:	bf00      	nop
 800e09e:	3718      	adds	r7, #24
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b08e      	sub	sp, #56	; 0x38
 800e0a8:	af04      	add	r7, sp, #16
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	60b9      	str	r1, [r7, #8]
 800e0ae:	607a      	str	r2, [r7, #4]
 800e0b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10a      	bne.n	800e0ce <xTaskCreateStatic+0x2a>
	__asm volatile
 800e0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0bc:	f383 8811 	msr	BASEPRI, r3
 800e0c0:	f3bf 8f6f 	isb	sy
 800e0c4:	f3bf 8f4f 	dsb	sy
 800e0c8:	623b      	str	r3, [r7, #32]
}
 800e0ca:	bf00      	nop
 800e0cc:	e7fe      	b.n	800e0cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d10a      	bne.n	800e0ea <xTaskCreateStatic+0x46>
	__asm volatile
 800e0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d8:	f383 8811 	msr	BASEPRI, r3
 800e0dc:	f3bf 8f6f 	isb	sy
 800e0e0:	f3bf 8f4f 	dsb	sy
 800e0e4:	61fb      	str	r3, [r7, #28]
}
 800e0e6:	bf00      	nop
 800e0e8:	e7fe      	b.n	800e0e8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e0ea:	23bc      	movs	r3, #188	; 0xbc
 800e0ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	2bbc      	cmp	r3, #188	; 0xbc
 800e0f2:	d00a      	beq.n	800e10a <xTaskCreateStatic+0x66>
	__asm volatile
 800e0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f8:	f383 8811 	msr	BASEPRI, r3
 800e0fc:	f3bf 8f6f 	isb	sy
 800e100:	f3bf 8f4f 	dsb	sy
 800e104:	61bb      	str	r3, [r7, #24]
}
 800e106:	bf00      	nop
 800e108:	e7fe      	b.n	800e108 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e10a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d01e      	beq.n	800e150 <xTaskCreateStatic+0xac>
 800e112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e114:	2b00      	cmp	r3, #0
 800e116:	d01b      	beq.n	800e150 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e120:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e124:	2202      	movs	r2, #2
 800e126:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e12a:	2300      	movs	r3, #0
 800e12c:	9303      	str	r3, [sp, #12]
 800e12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e130:	9302      	str	r3, [sp, #8]
 800e132:	f107 0314 	add.w	r3, r7, #20
 800e136:	9301      	str	r3, [sp, #4]
 800e138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	68b9      	ldr	r1, [r7, #8]
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f000 f850 	bl	800e1e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e14a:	f000 f8f3 	bl	800e334 <prvAddNewTaskToReadyList>
 800e14e:	e001      	b.n	800e154 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e150:	2300      	movs	r3, #0
 800e152:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e154:	697b      	ldr	r3, [r7, #20]
	}
 800e156:	4618      	mov	r0, r3
 800e158:	3728      	adds	r7, #40	; 0x28
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b08c      	sub	sp, #48	; 0x30
 800e162:	af04      	add	r7, sp, #16
 800e164:	60f8      	str	r0, [r7, #12]
 800e166:	60b9      	str	r1, [r7, #8]
 800e168:	603b      	str	r3, [r7, #0]
 800e16a:	4613      	mov	r3, r2
 800e16c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e16e:	88fb      	ldrh	r3, [r7, #6]
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4618      	mov	r0, r3
 800e174:	f001 fdd0 	bl	800fd18 <pvPortMalloc>
 800e178:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00e      	beq.n	800e19e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e180:	20bc      	movs	r0, #188	; 0xbc
 800e182:	f001 fdc9 	bl	800fd18 <pvPortMalloc>
 800e186:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d003      	beq.n	800e196 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	697a      	ldr	r2, [r7, #20]
 800e192:	631a      	str	r2, [r3, #48]	; 0x30
 800e194:	e005      	b.n	800e1a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e196:	6978      	ldr	r0, [r7, #20]
 800e198:	f001 fe8a 	bl	800feb0 <vPortFree>
 800e19c:	e001      	b.n	800e1a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d017      	beq.n	800e1d8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e1b0:	88fa      	ldrh	r2, [r7, #6]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	9303      	str	r3, [sp, #12]
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	9302      	str	r3, [sp, #8]
 800e1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	68b9      	ldr	r1, [r7, #8]
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f000 f80e 	bl	800e1e8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1cc:	69f8      	ldr	r0, [r7, #28]
 800e1ce:	f000 f8b1 	bl	800e334 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	61bb      	str	r3, [r7, #24]
 800e1d6:	e002      	b.n	800e1de <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e1d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e1dc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e1de:	69bb      	ldr	r3, [r7, #24]
	}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3720      	adds	r7, #32
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b088      	sub	sp, #32
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	607a      	str	r2, [r7, #4]
 800e1f4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	009b      	lsls	r3, r3, #2
 800e1fe:	461a      	mov	r2, r3
 800e200:	21a5      	movs	r1, #165	; 0xa5
 800e202:	f003 f8b3 	bl	801136c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e210:	3b01      	subs	r3, #1
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	4413      	add	r3, r2
 800e216:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	f023 0307 	bic.w	r3, r3, #7
 800e21e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	f003 0307 	and.w	r3, r3, #7
 800e226:	2b00      	cmp	r3, #0
 800e228:	d00a      	beq.n	800e240 <prvInitialiseNewTask+0x58>
	__asm volatile
 800e22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22e:	f383 8811 	msr	BASEPRI, r3
 800e232:	f3bf 8f6f 	isb	sy
 800e236:	f3bf 8f4f 	dsb	sy
 800e23a:	617b      	str	r3, [r7, #20]
}
 800e23c:	bf00      	nop
 800e23e:	e7fe      	b.n	800e23e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d01f      	beq.n	800e286 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e246:	2300      	movs	r3, #0
 800e248:	61fb      	str	r3, [r7, #28]
 800e24a:	e012      	b.n	800e272 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e24c:	68ba      	ldr	r2, [r7, #8]
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	4413      	add	r3, r2
 800e252:	7819      	ldrb	r1, [r3, #0]
 800e254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	4413      	add	r3, r2
 800e25a:	3334      	adds	r3, #52	; 0x34
 800e25c:	460a      	mov	r2, r1
 800e25e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e260:	68ba      	ldr	r2, [r7, #8]
 800e262:	69fb      	ldr	r3, [r7, #28]
 800e264:	4413      	add	r3, r2
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d006      	beq.n	800e27a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	3301      	adds	r3, #1
 800e270:	61fb      	str	r3, [r7, #28]
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	2b0f      	cmp	r3, #15
 800e276:	d9e9      	bls.n	800e24c <prvInitialiseNewTask+0x64>
 800e278:	e000      	b.n	800e27c <prvInitialiseNewTask+0x94>
			{
				break;
 800e27a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27e:	2200      	movs	r2, #0
 800e280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e284:	e003      	b.n	800e28e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e288:	2200      	movs	r2, #0
 800e28a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e290:	2b37      	cmp	r3, #55	; 0x37
 800e292:	d901      	bls.n	800e298 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e294:	2337      	movs	r3, #55	; 0x37
 800e296:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e29a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e29c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2a2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ac:	3304      	adds	r3, #4
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7ff f978 	bl	800d5a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2b6:	3318      	adds	r3, #24
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7ff f973 	bl	800d5a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e6:	3354      	adds	r3, #84	; 0x54
 800e2e8:	2260      	movs	r2, #96	; 0x60
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f003 f83d 	bl	801136c <memset>
 800e2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f4:	4a0c      	ldr	r2, [pc, #48]	; (800e328 <prvInitialiseNewTask+0x140>)
 800e2f6:	659a      	str	r2, [r3, #88]	; 0x58
 800e2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fa:	4a0c      	ldr	r2, [pc, #48]	; (800e32c <prvInitialiseNewTask+0x144>)
 800e2fc:	65da      	str	r2, [r3, #92]	; 0x5c
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e300:	4a0b      	ldr	r2, [pc, #44]	; (800e330 <prvInitialiseNewTask+0x148>)
 800e302:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e304:	683a      	ldr	r2, [r7, #0]
 800e306:	68f9      	ldr	r1, [r7, #12]
 800e308:	69b8      	ldr	r0, [r7, #24]
 800e30a:	f001 fab9 	bl	800f880 <pxPortInitialiseStack>
 800e30e:	4602      	mov	r2, r0
 800e310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e312:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e316:	2b00      	cmp	r3, #0
 800e318:	d002      	beq.n	800e320 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e31e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e320:	bf00      	nop
 800e322:	3720      	adds	r7, #32
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	080176bc 	.word	0x080176bc
 800e32c:	080176dc 	.word	0x080176dc
 800e330:	0801769c 	.word	0x0801769c

0800e334 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e33c:	f001 fbca 	bl	800fad4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e340:	4b2d      	ldr	r3, [pc, #180]	; (800e3f8 <prvAddNewTaskToReadyList+0xc4>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	3301      	adds	r3, #1
 800e346:	4a2c      	ldr	r2, [pc, #176]	; (800e3f8 <prvAddNewTaskToReadyList+0xc4>)
 800e348:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e34a:	4b2c      	ldr	r3, [pc, #176]	; (800e3fc <prvAddNewTaskToReadyList+0xc8>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d109      	bne.n	800e366 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e352:	4a2a      	ldr	r2, [pc, #168]	; (800e3fc <prvAddNewTaskToReadyList+0xc8>)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e358:	4b27      	ldr	r3, [pc, #156]	; (800e3f8 <prvAddNewTaskToReadyList+0xc4>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d110      	bne.n	800e382 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e360:	f000 fd8e 	bl	800ee80 <prvInitialiseTaskLists>
 800e364:	e00d      	b.n	800e382 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e366:	4b26      	ldr	r3, [pc, #152]	; (800e400 <prvAddNewTaskToReadyList+0xcc>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d109      	bne.n	800e382 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e36e:	4b23      	ldr	r3, [pc, #140]	; (800e3fc <prvAddNewTaskToReadyList+0xc8>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e378:	429a      	cmp	r2, r3
 800e37a:	d802      	bhi.n	800e382 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e37c:	4a1f      	ldr	r2, [pc, #124]	; (800e3fc <prvAddNewTaskToReadyList+0xc8>)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e382:	4b20      	ldr	r3, [pc, #128]	; (800e404 <prvAddNewTaskToReadyList+0xd0>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	3301      	adds	r3, #1
 800e388:	4a1e      	ldr	r2, [pc, #120]	; (800e404 <prvAddNewTaskToReadyList+0xd0>)
 800e38a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e38c:	4b1d      	ldr	r3, [pc, #116]	; (800e404 <prvAddNewTaskToReadyList+0xd0>)
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e398:	4b1b      	ldr	r3, [pc, #108]	; (800e408 <prvAddNewTaskToReadyList+0xd4>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d903      	bls.n	800e3a8 <prvAddNewTaskToReadyList+0x74>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a4:	4a18      	ldr	r2, [pc, #96]	; (800e408 <prvAddNewTaskToReadyList+0xd4>)
 800e3a6:	6013      	str	r3, [r2, #0]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	4a15      	ldr	r2, [pc, #84]	; (800e40c <prvAddNewTaskToReadyList+0xd8>)
 800e3b6:	441a      	add	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	3304      	adds	r3, #4
 800e3bc:	4619      	mov	r1, r3
 800e3be:	4610      	mov	r0, r2
 800e3c0:	f7ff f8fd 	bl	800d5be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e3c4:	f001 fbb6 	bl	800fb34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e3c8:	4b0d      	ldr	r3, [pc, #52]	; (800e400 <prvAddNewTaskToReadyList+0xcc>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00e      	beq.n	800e3ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e3d0:	4b0a      	ldr	r3, [pc, #40]	; (800e3fc <prvAddNewTaskToReadyList+0xc8>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3da:	429a      	cmp	r2, r3
 800e3dc:	d207      	bcs.n	800e3ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e3de:	4b0c      	ldr	r3, [pc, #48]	; (800e410 <prvAddNewTaskToReadyList+0xdc>)
 800e3e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3e4:	601a      	str	r2, [r3, #0]
 800e3e6:	f3bf 8f4f 	dsb	sy
 800e3ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e3ee:	bf00      	nop
 800e3f0:	3708      	adds	r7, #8
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	20001864 	.word	0x20001864
 800e3fc:	20001390 	.word	0x20001390
 800e400:	20001870 	.word	0x20001870
 800e404:	20001880 	.word	0x20001880
 800e408:	2000186c 	.word	0x2000186c
 800e40c:	20001394 	.word	0x20001394
 800e410:	e000ed04 	.word	0xe000ed04

0800e414 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800e41c:	f001 fb5a 	bl	800fad4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d102      	bne.n	800e42c <vTaskDelete+0x18>
 800e426:	4b2c      	ldr	r3, [pc, #176]	; (800e4d8 <vTaskDelete+0xc4>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	e000      	b.n	800e42e <vTaskDelete+0x1a>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	3304      	adds	r3, #4
 800e434:	4618      	mov	r0, r3
 800e436:	f7ff f91f 	bl	800d678 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d004      	beq.n	800e44c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	3318      	adds	r3, #24
 800e446:	4618      	mov	r0, r3
 800e448:	f7ff f916 	bl	800d678 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800e44c:	4b23      	ldr	r3, [pc, #140]	; (800e4dc <vTaskDelete+0xc8>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3301      	adds	r3, #1
 800e452:	4a22      	ldr	r2, [pc, #136]	; (800e4dc <vTaskDelete+0xc8>)
 800e454:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800e456:	4b20      	ldr	r3, [pc, #128]	; (800e4d8 <vTaskDelete+0xc4>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68fa      	ldr	r2, [r7, #12]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d10b      	bne.n	800e478 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	3304      	adds	r3, #4
 800e464:	4619      	mov	r1, r3
 800e466:	481e      	ldr	r0, [pc, #120]	; (800e4e0 <vTaskDelete+0xcc>)
 800e468:	f7ff f8a9 	bl	800d5be <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800e46c:	4b1d      	ldr	r3, [pc, #116]	; (800e4e4 <vTaskDelete+0xd0>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	3301      	adds	r3, #1
 800e472:	4a1c      	ldr	r2, [pc, #112]	; (800e4e4 <vTaskDelete+0xd0>)
 800e474:	6013      	str	r3, [r2, #0]
 800e476:	e009      	b.n	800e48c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800e478:	4b1b      	ldr	r3, [pc, #108]	; (800e4e8 <vTaskDelete+0xd4>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	3b01      	subs	r3, #1
 800e47e:	4a1a      	ldr	r2, [pc, #104]	; (800e4e8 <vTaskDelete+0xd4>)
 800e480:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800e482:	68f8      	ldr	r0, [r7, #12]
 800e484:	f000 fd6a 	bl	800ef5c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800e488:	f000 fd9c 	bl	800efc4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800e48c:	f001 fb52 	bl	800fb34 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800e490:	4b16      	ldr	r3, [pc, #88]	; (800e4ec <vTaskDelete+0xd8>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d01b      	beq.n	800e4d0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800e498:	4b0f      	ldr	r3, [pc, #60]	; (800e4d8 <vTaskDelete+0xc4>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68fa      	ldr	r2, [r7, #12]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d116      	bne.n	800e4d0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800e4a2:	4b13      	ldr	r3, [pc, #76]	; (800e4f0 <vTaskDelete+0xdc>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d00a      	beq.n	800e4c0 <vTaskDelete+0xac>
	__asm volatile
 800e4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ae:	f383 8811 	msr	BASEPRI, r3
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	60bb      	str	r3, [r7, #8]
}
 800e4bc:	bf00      	nop
 800e4be:	e7fe      	b.n	800e4be <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800e4c0:	4b0c      	ldr	r3, [pc, #48]	; (800e4f4 <vTaskDelete+0xe0>)
 800e4c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4c6:	601a      	str	r2, [r3, #0]
 800e4c8:	f3bf 8f4f 	dsb	sy
 800e4cc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e4d0:	bf00      	nop
 800e4d2:	3710      	adds	r7, #16
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	20001390 	.word	0x20001390
 800e4dc:	20001880 	.word	0x20001880
 800e4e0:	20001838 	.word	0x20001838
 800e4e4:	2000184c 	.word	0x2000184c
 800e4e8:	20001864 	.word	0x20001864
 800e4ec:	20001870 	.word	0x20001870
 800e4f0:	2000188c 	.word	0x2000188c
 800e4f4:	e000ed04 	.word	0xe000ed04

0800e4f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b084      	sub	sp, #16
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e500:	2300      	movs	r3, #0
 800e502:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d017      	beq.n	800e53a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e50a:	4b13      	ldr	r3, [pc, #76]	; (800e558 <vTaskDelay+0x60>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00a      	beq.n	800e528 <vTaskDelay+0x30>
	__asm volatile
 800e512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	60bb      	str	r3, [r7, #8]
}
 800e524:	bf00      	nop
 800e526:	e7fe      	b.n	800e526 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e528:	f000 f980 	bl	800e82c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e52c:	2100      	movs	r1, #0
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 fe04 	bl	800f13c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e534:	f000 f988 	bl	800e848 <xTaskResumeAll>
 800e538:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d107      	bne.n	800e550 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e540:	4b06      	ldr	r3, [pc, #24]	; (800e55c <vTaskDelay+0x64>)
 800e542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e546:	601a      	str	r2, [r3, #0]
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e550:	bf00      	nop
 800e552:	3710      	adds	r7, #16
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	2000188c 	.word	0x2000188c
 800e55c:	e000ed04 	.word	0xe000ed04

0800e560 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800e560:	b580      	push	{r7, lr}
 800e562:	b088      	sub	sp, #32
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800e56c:	69bb      	ldr	r3, [r7, #24]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d10a      	bne.n	800e588 <eTaskGetState+0x28>
	__asm volatile
 800e572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e576:	f383 8811 	msr	BASEPRI, r3
 800e57a:	f3bf 8f6f 	isb	sy
 800e57e:	f3bf 8f4f 	dsb	sy
 800e582:	60bb      	str	r3, [r7, #8]
}
 800e584:	bf00      	nop
 800e586:	e7fe      	b.n	800e586 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800e588:	4b23      	ldr	r3, [pc, #140]	; (800e618 <eTaskGetState+0xb8>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	69ba      	ldr	r2, [r7, #24]
 800e58e:	429a      	cmp	r2, r3
 800e590:	d102      	bne.n	800e598 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800e592:	2300      	movs	r3, #0
 800e594:	77fb      	strb	r3, [r7, #31]
 800e596:	e03a      	b.n	800e60e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800e598:	f001 fa9c 	bl	800fad4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	695b      	ldr	r3, [r3, #20]
 800e5a0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800e5a2:	4b1e      	ldr	r3, [pc, #120]	; (800e61c <eTaskGetState+0xbc>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800e5a8:	4b1d      	ldr	r3, [pc, #116]	; (800e620 <eTaskGetState+0xc0>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800e5ae:	f001 fac1 	bl	800fb34 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800e5b2:	697a      	ldr	r2, [r7, #20]
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d003      	beq.n	800e5c2 <eTaskGetState+0x62>
 800e5ba:	697a      	ldr	r2, [r7, #20]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d102      	bne.n	800e5c8 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800e5c2:	2302      	movs	r3, #2
 800e5c4:	77fb      	strb	r3, [r7, #31]
 800e5c6:	e022      	b.n	800e60e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	4a16      	ldr	r2, [pc, #88]	; (800e624 <eTaskGetState+0xc4>)
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d112      	bne.n	800e5f6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d10b      	bne.n	800e5f0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800e5de:	b2db      	uxtb	r3, r3
 800e5e0:	2b01      	cmp	r3, #1
 800e5e2:	d102      	bne.n	800e5ea <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800e5e4:	2302      	movs	r3, #2
 800e5e6:	77fb      	strb	r3, [r7, #31]
 800e5e8:	e011      	b.n	800e60e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800e5ea:	2303      	movs	r3, #3
 800e5ec:	77fb      	strb	r3, [r7, #31]
 800e5ee:	e00e      	b.n	800e60e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800e5f0:	2302      	movs	r3, #2
 800e5f2:	77fb      	strb	r3, [r7, #31]
 800e5f4:	e00b      	b.n	800e60e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	4a0b      	ldr	r2, [pc, #44]	; (800e628 <eTaskGetState+0xc8>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d002      	beq.n	800e604 <eTaskGetState+0xa4>
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d102      	bne.n	800e60a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800e604:	2304      	movs	r3, #4
 800e606:	77fb      	strb	r3, [r7, #31]
 800e608:	e001      	b.n	800e60e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800e60a:	2301      	movs	r3, #1
 800e60c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800e60e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e610:	4618      	mov	r0, r3
 800e612:	3720      	adds	r7, #32
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	20001390 	.word	0x20001390
 800e61c:	2000181c 	.word	0x2000181c
 800e620:	20001820 	.word	0x20001820
 800e624:	20001850 	.word	0x20001850
 800e628:	20001838 	.word	0x20001838

0800e62c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800e62c:	b480      	push	{r7}
 800e62e:	b087      	sub	sp, #28
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800e634:	2300      	movs	r3, #0
 800e636:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d10a      	bne.n	800e658 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800e642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e646:	f383 8811 	msr	BASEPRI, r3
 800e64a:	f3bf 8f6f 	isb	sy
 800e64e:	f3bf 8f4f 	dsb	sy
 800e652:	60fb      	str	r3, [r7, #12]
}
 800e654:	bf00      	nop
 800e656:	e7fe      	b.n	800e656 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	695b      	ldr	r3, [r3, #20]
 800e65c:	4a0a      	ldr	r2, [pc, #40]	; (800e688 <prvTaskIsTaskSuspended+0x5c>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d10a      	bne.n	800e678 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e666:	4a09      	ldr	r2, [pc, #36]	; (800e68c <prvTaskIsTaskSuspended+0x60>)
 800e668:	4293      	cmp	r3, r2
 800e66a:	d005      	beq.n	800e678 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e670:	2b00      	cmp	r3, #0
 800e672:	d101      	bne.n	800e678 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800e674:	2301      	movs	r3, #1
 800e676:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e678:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800e67a:	4618      	mov	r0, r3
 800e67c:	371c      	adds	r7, #28
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr
 800e686:	bf00      	nop
 800e688:	20001850 	.word	0x20001850
 800e68c:	20001824 	.word	0x20001824

0800e690 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d10a      	bne.n	800e6b8 <vTaskResume+0x28>
	__asm volatile
 800e6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a6:	f383 8811 	msr	BASEPRI, r3
 800e6aa:	f3bf 8f6f 	isb	sy
 800e6ae:	f3bf 8f4f 	dsb	sy
 800e6b2:	60bb      	str	r3, [r7, #8]
}
 800e6b4:	bf00      	nop
 800e6b6:	e7fe      	b.n	800e6b6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800e6b8:	4b20      	ldr	r3, [pc, #128]	; (800e73c <vTaskResume+0xac>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d038      	beq.n	800e734 <vTaskResume+0xa4>
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d035      	beq.n	800e734 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800e6c8:	f001 fa04 	bl	800fad4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	f7ff ffad 	bl	800e62c <prvTaskIsTaskSuspended>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d02b      	beq.n	800e730 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	3304      	adds	r3, #4
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7fe ffcb 	bl	800d678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6e6:	4b16      	ldr	r3, [pc, #88]	; (800e740 <vTaskResume+0xb0>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d903      	bls.n	800e6f6 <vTaskResume+0x66>
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f2:	4a13      	ldr	r2, [pc, #76]	; (800e740 <vTaskResume+0xb0>)
 800e6f4:	6013      	str	r3, [r2, #0]
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4413      	add	r3, r2
 800e700:	009b      	lsls	r3, r3, #2
 800e702:	4a10      	ldr	r2, [pc, #64]	; (800e744 <vTaskResume+0xb4>)
 800e704:	441a      	add	r2, r3
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	3304      	adds	r3, #4
 800e70a:	4619      	mov	r1, r3
 800e70c:	4610      	mov	r0, r2
 800e70e:	f7fe ff56 	bl	800d5be <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e716:	4b09      	ldr	r3, [pc, #36]	; (800e73c <vTaskResume+0xac>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d307      	bcc.n	800e730 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800e720:	4b09      	ldr	r3, [pc, #36]	; (800e748 <vTaskResume+0xb8>)
 800e722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e726:	601a      	str	r2, [r3, #0]
 800e728:	f3bf 8f4f 	dsb	sy
 800e72c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800e730:	f001 fa00 	bl	800fb34 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e734:	bf00      	nop
 800e736:	3710      	adds	r7, #16
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}
 800e73c:	20001390 	.word	0x20001390
 800e740:	2000186c 	.word	0x2000186c
 800e744:	20001394 	.word	0x20001394
 800e748:	e000ed04 	.word	0xe000ed04

0800e74c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b08a      	sub	sp, #40	; 0x28
 800e750:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e752:	2300      	movs	r3, #0
 800e754:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e756:	2300      	movs	r3, #0
 800e758:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e75a:	463a      	mov	r2, r7
 800e75c:	1d39      	adds	r1, r7, #4
 800e75e:	f107 0308 	add.w	r3, r7, #8
 800e762:	4618      	mov	r0, r3
 800e764:	f7fe feca 	bl	800d4fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e768:	6839      	ldr	r1, [r7, #0]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	68ba      	ldr	r2, [r7, #8]
 800e76e:	9202      	str	r2, [sp, #8]
 800e770:	9301      	str	r3, [sp, #4]
 800e772:	2300      	movs	r3, #0
 800e774:	9300      	str	r3, [sp, #0]
 800e776:	2300      	movs	r3, #0
 800e778:	460a      	mov	r2, r1
 800e77a:	4924      	ldr	r1, [pc, #144]	; (800e80c <vTaskStartScheduler+0xc0>)
 800e77c:	4824      	ldr	r0, [pc, #144]	; (800e810 <vTaskStartScheduler+0xc4>)
 800e77e:	f7ff fc91 	bl	800e0a4 <xTaskCreateStatic>
 800e782:	4603      	mov	r3, r0
 800e784:	4a23      	ldr	r2, [pc, #140]	; (800e814 <vTaskStartScheduler+0xc8>)
 800e786:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e788:	4b22      	ldr	r3, [pc, #136]	; (800e814 <vTaskStartScheduler+0xc8>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d002      	beq.n	800e796 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e790:	2301      	movs	r3, #1
 800e792:	617b      	str	r3, [r7, #20]
 800e794:	e001      	b.n	800e79a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e796:	2300      	movs	r3, #0
 800e798:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d102      	bne.n	800e7a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e7a0:	f000 fd20 	bl	800f1e4 <xTimerCreateTimerTask>
 800e7a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d11b      	bne.n	800e7e4 <vTaskStartScheduler+0x98>
	__asm volatile
 800e7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	613b      	str	r3, [r7, #16]
}
 800e7be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e7c0:	4b15      	ldr	r3, [pc, #84]	; (800e818 <vTaskStartScheduler+0xcc>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	3354      	adds	r3, #84	; 0x54
 800e7c6:	4a15      	ldr	r2, [pc, #84]	; (800e81c <vTaskStartScheduler+0xd0>)
 800e7c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e7ca:	4b15      	ldr	r3, [pc, #84]	; (800e820 <vTaskStartScheduler+0xd4>)
 800e7cc:	f04f 32ff 	mov.w	r2, #4294967295
 800e7d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e7d2:	4b14      	ldr	r3, [pc, #80]	; (800e824 <vTaskStartScheduler+0xd8>)
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e7d8:	4b13      	ldr	r3, [pc, #76]	; (800e828 <vTaskStartScheduler+0xdc>)
 800e7da:	2200      	movs	r2, #0
 800e7dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e7de:	f001 f8d7 	bl	800f990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e7e2:	e00e      	b.n	800e802 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ea:	d10a      	bne.n	800e802 <vTaskStartScheduler+0xb6>
	__asm volatile
 800e7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f0:	f383 8811 	msr	BASEPRI, r3
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	f3bf 8f4f 	dsb	sy
 800e7fc:	60fb      	str	r3, [r7, #12]
}
 800e7fe:	bf00      	nop
 800e800:	e7fe      	b.n	800e800 <vTaskStartScheduler+0xb4>
}
 800e802:	bf00      	nop
 800e804:	3718      	adds	r7, #24
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	080173f0 	.word	0x080173f0
 800e810:	0800ee51 	.word	0x0800ee51
 800e814:	20001888 	.word	0x20001888
 800e818:	20001390 	.word	0x20001390
 800e81c:	200000d8 	.word	0x200000d8
 800e820:	20001884 	.word	0x20001884
 800e824:	20001870 	.word	0x20001870
 800e828:	20001868 	.word	0x20001868

0800e82c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e82c:	b480      	push	{r7}
 800e82e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e830:	4b04      	ldr	r3, [pc, #16]	; (800e844 <vTaskSuspendAll+0x18>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	3301      	adds	r3, #1
 800e836:	4a03      	ldr	r2, [pc, #12]	; (800e844 <vTaskSuspendAll+0x18>)
 800e838:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e83a:	bf00      	nop
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr
 800e844:	2000188c 	.word	0x2000188c

0800e848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e84e:	2300      	movs	r3, #0
 800e850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e852:	2300      	movs	r3, #0
 800e854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e856:	4b42      	ldr	r3, [pc, #264]	; (800e960 <xTaskResumeAll+0x118>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d10a      	bne.n	800e874 <xTaskResumeAll+0x2c>
	__asm volatile
 800e85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e862:	f383 8811 	msr	BASEPRI, r3
 800e866:	f3bf 8f6f 	isb	sy
 800e86a:	f3bf 8f4f 	dsb	sy
 800e86e:	603b      	str	r3, [r7, #0]
}
 800e870:	bf00      	nop
 800e872:	e7fe      	b.n	800e872 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e874:	f001 f92e 	bl	800fad4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e878:	4b39      	ldr	r3, [pc, #228]	; (800e960 <xTaskResumeAll+0x118>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	3b01      	subs	r3, #1
 800e87e:	4a38      	ldr	r2, [pc, #224]	; (800e960 <xTaskResumeAll+0x118>)
 800e880:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e882:	4b37      	ldr	r3, [pc, #220]	; (800e960 <xTaskResumeAll+0x118>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d162      	bne.n	800e950 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e88a:	4b36      	ldr	r3, [pc, #216]	; (800e964 <xTaskResumeAll+0x11c>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d05e      	beq.n	800e950 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e892:	e02f      	b.n	800e8f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e894:	4b34      	ldr	r3, [pc, #208]	; (800e968 <xTaskResumeAll+0x120>)
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	3318      	adds	r3, #24
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fe fee9 	bl	800d678 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	3304      	adds	r3, #4
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fe fee4 	bl	800d678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b4:	4b2d      	ldr	r3, [pc, #180]	; (800e96c <xTaskResumeAll+0x124>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d903      	bls.n	800e8c4 <xTaskResumeAll+0x7c>
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c0:	4a2a      	ldr	r2, [pc, #168]	; (800e96c <xTaskResumeAll+0x124>)
 800e8c2:	6013      	str	r3, [r2, #0]
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	4413      	add	r3, r2
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	4a27      	ldr	r2, [pc, #156]	; (800e970 <xTaskResumeAll+0x128>)
 800e8d2:	441a      	add	r2, r3
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	3304      	adds	r3, #4
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4610      	mov	r0, r2
 800e8dc:	f7fe fe6f 	bl	800d5be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8e4:	4b23      	ldr	r3, [pc, #140]	; (800e974 <xTaskResumeAll+0x12c>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d302      	bcc.n	800e8f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e8ee:	4b22      	ldr	r3, [pc, #136]	; (800e978 <xTaskResumeAll+0x130>)
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8f4:	4b1c      	ldr	r3, [pc, #112]	; (800e968 <xTaskResumeAll+0x120>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d1cb      	bne.n	800e894 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d001      	beq.n	800e906 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e902:	f000 fb5f 	bl	800efc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e906:	4b1d      	ldr	r3, [pc, #116]	; (800e97c <xTaskResumeAll+0x134>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d010      	beq.n	800e934 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e912:	f000 f847 	bl	800e9a4 <xTaskIncrementTick>
 800e916:	4603      	mov	r3, r0
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d002      	beq.n	800e922 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e91c:	4b16      	ldr	r3, [pc, #88]	; (800e978 <xTaskResumeAll+0x130>)
 800e91e:	2201      	movs	r2, #1
 800e920:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	3b01      	subs	r3, #1
 800e926:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d1f1      	bne.n	800e912 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e92e:	4b13      	ldr	r3, [pc, #76]	; (800e97c <xTaskResumeAll+0x134>)
 800e930:	2200      	movs	r2, #0
 800e932:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e934:	4b10      	ldr	r3, [pc, #64]	; (800e978 <xTaskResumeAll+0x130>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d009      	beq.n	800e950 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e93c:	2301      	movs	r3, #1
 800e93e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e940:	4b0f      	ldr	r3, [pc, #60]	; (800e980 <xTaskResumeAll+0x138>)
 800e942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e946:	601a      	str	r2, [r3, #0]
 800e948:	f3bf 8f4f 	dsb	sy
 800e94c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e950:	f001 f8f0 	bl	800fb34 <vPortExitCritical>

	return xAlreadyYielded;
 800e954:	68bb      	ldr	r3, [r7, #8]
}
 800e956:	4618      	mov	r0, r3
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	2000188c 	.word	0x2000188c
 800e964:	20001864 	.word	0x20001864
 800e968:	20001824 	.word	0x20001824
 800e96c:	2000186c 	.word	0x2000186c
 800e970:	20001394 	.word	0x20001394
 800e974:	20001390 	.word	0x20001390
 800e978:	20001878 	.word	0x20001878
 800e97c:	20001874 	.word	0x20001874
 800e980:	e000ed04 	.word	0xe000ed04

0800e984 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e984:	b480      	push	{r7}
 800e986:	b083      	sub	sp, #12
 800e988:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e98a:	4b05      	ldr	r3, [pc, #20]	; (800e9a0 <xTaskGetTickCount+0x1c>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e990:	687b      	ldr	r3, [r7, #4]
}
 800e992:	4618      	mov	r0, r3
 800e994:	370c      	adds	r7, #12
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	20001868 	.word	0x20001868

0800e9a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9ae:	4b4f      	ldr	r3, [pc, #316]	; (800eaec <xTaskIncrementTick+0x148>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f040 808f 	bne.w	800ead6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e9b8:	4b4d      	ldr	r3, [pc, #308]	; (800eaf0 <xTaskIncrementTick+0x14c>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e9c0:	4a4b      	ldr	r2, [pc, #300]	; (800eaf0 <xTaskIncrementTick+0x14c>)
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d120      	bne.n	800ea0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e9cc:	4b49      	ldr	r3, [pc, #292]	; (800eaf4 <xTaskIncrementTick+0x150>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00a      	beq.n	800e9ec <xTaskIncrementTick+0x48>
	__asm volatile
 800e9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9da:	f383 8811 	msr	BASEPRI, r3
 800e9de:	f3bf 8f6f 	isb	sy
 800e9e2:	f3bf 8f4f 	dsb	sy
 800e9e6:	603b      	str	r3, [r7, #0]
}
 800e9e8:	bf00      	nop
 800e9ea:	e7fe      	b.n	800e9ea <xTaskIncrementTick+0x46>
 800e9ec:	4b41      	ldr	r3, [pc, #260]	; (800eaf4 <xTaskIncrementTick+0x150>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	60fb      	str	r3, [r7, #12]
 800e9f2:	4b41      	ldr	r3, [pc, #260]	; (800eaf8 <xTaskIncrementTick+0x154>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a3f      	ldr	r2, [pc, #252]	; (800eaf4 <xTaskIncrementTick+0x150>)
 800e9f8:	6013      	str	r3, [r2, #0]
 800e9fa:	4a3f      	ldr	r2, [pc, #252]	; (800eaf8 <xTaskIncrementTick+0x154>)
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	6013      	str	r3, [r2, #0]
 800ea00:	4b3e      	ldr	r3, [pc, #248]	; (800eafc <xTaskIncrementTick+0x158>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	3301      	adds	r3, #1
 800ea06:	4a3d      	ldr	r2, [pc, #244]	; (800eafc <xTaskIncrementTick+0x158>)
 800ea08:	6013      	str	r3, [r2, #0]
 800ea0a:	f000 fadb 	bl	800efc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ea0e:	4b3c      	ldr	r3, [pc, #240]	; (800eb00 <xTaskIncrementTick+0x15c>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	693a      	ldr	r2, [r7, #16]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d349      	bcc.n	800eaac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea18:	4b36      	ldr	r3, [pc, #216]	; (800eaf4 <xTaskIncrementTick+0x150>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d104      	bne.n	800ea2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ea22:	4b37      	ldr	r3, [pc, #220]	; (800eb00 <xTaskIncrementTick+0x15c>)
 800ea24:	f04f 32ff 	mov.w	r2, #4294967295
 800ea28:	601a      	str	r2, [r3, #0]
					break;
 800ea2a:	e03f      	b.n	800eaac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea2c:	4b31      	ldr	r3, [pc, #196]	; (800eaf4 <xTaskIncrementTick+0x150>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	68db      	ldr	r3, [r3, #12]
 800ea34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ea3c:	693a      	ldr	r2, [r7, #16]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d203      	bcs.n	800ea4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ea44:	4a2e      	ldr	r2, [pc, #184]	; (800eb00 <xTaskIncrementTick+0x15c>)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ea4a:	e02f      	b.n	800eaac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	3304      	adds	r3, #4
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fe fe11 	bl	800d678 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d004      	beq.n	800ea68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	3318      	adds	r3, #24
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7fe fe08 	bl	800d678 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea6c:	4b25      	ldr	r3, [pc, #148]	; (800eb04 <xTaskIncrementTick+0x160>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d903      	bls.n	800ea7c <xTaskIncrementTick+0xd8>
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea78:	4a22      	ldr	r2, [pc, #136]	; (800eb04 <xTaskIncrementTick+0x160>)
 800ea7a:	6013      	str	r3, [r2, #0]
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea80:	4613      	mov	r3, r2
 800ea82:	009b      	lsls	r3, r3, #2
 800ea84:	4413      	add	r3, r2
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	4a1f      	ldr	r2, [pc, #124]	; (800eb08 <xTaskIncrementTick+0x164>)
 800ea8a:	441a      	add	r2, r3
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	3304      	adds	r3, #4
 800ea90:	4619      	mov	r1, r3
 800ea92:	4610      	mov	r0, r2
 800ea94:	f7fe fd93 	bl	800d5be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea9c:	4b1b      	ldr	r3, [pc, #108]	; (800eb0c <xTaskIncrementTick+0x168>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d3b8      	bcc.n	800ea18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eaaa:	e7b5      	b.n	800ea18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eaac:	4b17      	ldr	r3, [pc, #92]	; (800eb0c <xTaskIncrementTick+0x168>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eab2:	4915      	ldr	r1, [pc, #84]	; (800eb08 <xTaskIncrementTick+0x164>)
 800eab4:	4613      	mov	r3, r2
 800eab6:	009b      	lsls	r3, r3, #2
 800eab8:	4413      	add	r3, r2
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	440b      	add	r3, r1
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	d901      	bls.n	800eac8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800eac4:	2301      	movs	r3, #1
 800eac6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eac8:	4b11      	ldr	r3, [pc, #68]	; (800eb10 <xTaskIncrementTick+0x16c>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d007      	beq.n	800eae0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ead0:	2301      	movs	r3, #1
 800ead2:	617b      	str	r3, [r7, #20]
 800ead4:	e004      	b.n	800eae0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ead6:	4b0f      	ldr	r3, [pc, #60]	; (800eb14 <xTaskIncrementTick+0x170>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	3301      	adds	r3, #1
 800eadc:	4a0d      	ldr	r2, [pc, #52]	; (800eb14 <xTaskIncrementTick+0x170>)
 800eade:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eae0:	697b      	ldr	r3, [r7, #20]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3718      	adds	r7, #24
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	2000188c 	.word	0x2000188c
 800eaf0:	20001868 	.word	0x20001868
 800eaf4:	2000181c 	.word	0x2000181c
 800eaf8:	20001820 	.word	0x20001820
 800eafc:	2000187c 	.word	0x2000187c
 800eb00:	20001884 	.word	0x20001884
 800eb04:	2000186c 	.word	0x2000186c
 800eb08:	20001394 	.word	0x20001394
 800eb0c:	20001390 	.word	0x20001390
 800eb10:	20001878 	.word	0x20001878
 800eb14:	20001874 	.word	0x20001874

0800eb18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b085      	sub	sp, #20
 800eb1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eb1e:	4b2a      	ldr	r3, [pc, #168]	; (800ebc8 <vTaskSwitchContext+0xb0>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d003      	beq.n	800eb2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eb26:	4b29      	ldr	r3, [pc, #164]	; (800ebcc <vTaskSwitchContext+0xb4>)
 800eb28:	2201      	movs	r2, #1
 800eb2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eb2c:	e046      	b.n	800ebbc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800eb2e:	4b27      	ldr	r3, [pc, #156]	; (800ebcc <vTaskSwitchContext+0xb4>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb34:	4b26      	ldr	r3, [pc, #152]	; (800ebd0 <vTaskSwitchContext+0xb8>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	60fb      	str	r3, [r7, #12]
 800eb3a:	e010      	b.n	800eb5e <vTaskSwitchContext+0x46>
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d10a      	bne.n	800eb58 <vTaskSwitchContext+0x40>
	__asm volatile
 800eb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb46:	f383 8811 	msr	BASEPRI, r3
 800eb4a:	f3bf 8f6f 	isb	sy
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	607b      	str	r3, [r7, #4]
}
 800eb54:	bf00      	nop
 800eb56:	e7fe      	b.n	800eb56 <vTaskSwitchContext+0x3e>
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	60fb      	str	r3, [r7, #12]
 800eb5e:	491d      	ldr	r1, [pc, #116]	; (800ebd4 <vTaskSwitchContext+0xbc>)
 800eb60:	68fa      	ldr	r2, [r7, #12]
 800eb62:	4613      	mov	r3, r2
 800eb64:	009b      	lsls	r3, r3, #2
 800eb66:	4413      	add	r3, r2
 800eb68:	009b      	lsls	r3, r3, #2
 800eb6a:	440b      	add	r3, r1
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d0e4      	beq.n	800eb3c <vTaskSwitchContext+0x24>
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	4613      	mov	r3, r2
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	4413      	add	r3, r2
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	4a15      	ldr	r2, [pc, #84]	; (800ebd4 <vTaskSwitchContext+0xbc>)
 800eb7e:	4413      	add	r3, r2
 800eb80:	60bb      	str	r3, [r7, #8]
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	605a      	str	r2, [r3, #4]
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	685a      	ldr	r2, [r3, #4]
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	3308      	adds	r3, #8
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d104      	bne.n	800eba2 <vTaskSwitchContext+0x8a>
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	685b      	ldr	r3, [r3, #4]
 800eb9c:	685a      	ldr	r2, [r3, #4]
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	605a      	str	r2, [r3, #4]
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	685b      	ldr	r3, [r3, #4]
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	4a0b      	ldr	r2, [pc, #44]	; (800ebd8 <vTaskSwitchContext+0xc0>)
 800ebaa:	6013      	str	r3, [r2, #0]
 800ebac:	4a08      	ldr	r2, [pc, #32]	; (800ebd0 <vTaskSwitchContext+0xb8>)
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ebb2:	4b09      	ldr	r3, [pc, #36]	; (800ebd8 <vTaskSwitchContext+0xc0>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	3354      	adds	r3, #84	; 0x54
 800ebb8:	4a08      	ldr	r2, [pc, #32]	; (800ebdc <vTaskSwitchContext+0xc4>)
 800ebba:	6013      	str	r3, [r2, #0]
}
 800ebbc:	bf00      	nop
 800ebbe:	3714      	adds	r7, #20
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr
 800ebc8:	2000188c 	.word	0x2000188c
 800ebcc:	20001878 	.word	0x20001878
 800ebd0:	2000186c 	.word	0x2000186c
 800ebd4:	20001394 	.word	0x20001394
 800ebd8:	20001390 	.word	0x20001390
 800ebdc:	200000d8 	.word	0x200000d8

0800ebe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d10a      	bne.n	800ec06 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ebf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebf4:	f383 8811 	msr	BASEPRI, r3
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	60fb      	str	r3, [r7, #12]
}
 800ec02:	bf00      	nop
 800ec04:	e7fe      	b.n	800ec04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec06:	4b07      	ldr	r3, [pc, #28]	; (800ec24 <vTaskPlaceOnEventList+0x44>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	3318      	adds	r3, #24
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	6878      	ldr	r0, [r7, #4]
 800ec10:	f7fe fcf9 	bl	800d606 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec14:	2101      	movs	r1, #1
 800ec16:	6838      	ldr	r0, [r7, #0]
 800ec18:	f000 fa90 	bl	800f13c <prvAddCurrentTaskToDelayedList>
}
 800ec1c:	bf00      	nop
 800ec1e:	3710      	adds	r7, #16
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	20001390 	.word	0x20001390

0800ec28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d10a      	bne.n	800ec50 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ec3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3e:	f383 8811 	msr	BASEPRI, r3
 800ec42:	f3bf 8f6f 	isb	sy
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	617b      	str	r3, [r7, #20]
}
 800ec4c:	bf00      	nop
 800ec4e:	e7fe      	b.n	800ec4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec50:	4b0a      	ldr	r3, [pc, #40]	; (800ec7c <vTaskPlaceOnEventListRestricted+0x54>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	3318      	adds	r3, #24
 800ec56:	4619      	mov	r1, r3
 800ec58:	68f8      	ldr	r0, [r7, #12]
 800ec5a:	f7fe fcb0 	bl	800d5be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d002      	beq.n	800ec6a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ec64:	f04f 33ff 	mov.w	r3, #4294967295
 800ec68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ec6a:	6879      	ldr	r1, [r7, #4]
 800ec6c:	68b8      	ldr	r0, [r7, #8]
 800ec6e:	f000 fa65 	bl	800f13c <prvAddCurrentTaskToDelayedList>
	}
 800ec72:	bf00      	nop
 800ec74:	3718      	adds	r7, #24
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	20001390 	.word	0x20001390

0800ec80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b086      	sub	sp, #24
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d10a      	bne.n	800ecac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ec96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9a:	f383 8811 	msr	BASEPRI, r3
 800ec9e:	f3bf 8f6f 	isb	sy
 800eca2:	f3bf 8f4f 	dsb	sy
 800eca6:	60fb      	str	r3, [r7, #12]
}
 800eca8:	bf00      	nop
 800ecaa:	e7fe      	b.n	800ecaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	3318      	adds	r3, #24
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7fe fce1 	bl	800d678 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecb6:	4b1e      	ldr	r3, [pc, #120]	; (800ed30 <xTaskRemoveFromEventList+0xb0>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d11d      	bne.n	800ecfa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	3304      	adds	r3, #4
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f7fe fcd8 	bl	800d678 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eccc:	4b19      	ldr	r3, [pc, #100]	; (800ed34 <xTaskRemoveFromEventList+0xb4>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d903      	bls.n	800ecdc <xTaskRemoveFromEventList+0x5c>
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd8:	4a16      	ldr	r2, [pc, #88]	; (800ed34 <xTaskRemoveFromEventList+0xb4>)
 800ecda:	6013      	str	r3, [r2, #0]
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece0:	4613      	mov	r3, r2
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	4413      	add	r3, r2
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	4a13      	ldr	r2, [pc, #76]	; (800ed38 <xTaskRemoveFromEventList+0xb8>)
 800ecea:	441a      	add	r2, r3
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	3304      	adds	r3, #4
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	4610      	mov	r0, r2
 800ecf4:	f7fe fc63 	bl	800d5be <vListInsertEnd>
 800ecf8:	e005      	b.n	800ed06 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	3318      	adds	r3, #24
 800ecfe:	4619      	mov	r1, r3
 800ed00:	480e      	ldr	r0, [pc, #56]	; (800ed3c <xTaskRemoveFromEventList+0xbc>)
 800ed02:	f7fe fc5c 	bl	800d5be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed0a:	4b0d      	ldr	r3, [pc, #52]	; (800ed40 <xTaskRemoveFromEventList+0xc0>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d905      	bls.n	800ed20 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ed14:	2301      	movs	r3, #1
 800ed16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ed18:	4b0a      	ldr	r3, [pc, #40]	; (800ed44 <xTaskRemoveFromEventList+0xc4>)
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	601a      	str	r2, [r3, #0]
 800ed1e:	e001      	b.n	800ed24 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ed20:	2300      	movs	r3, #0
 800ed22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ed24:	697b      	ldr	r3, [r7, #20]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3718      	adds	r7, #24
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	2000188c 	.word	0x2000188c
 800ed34:	2000186c 	.word	0x2000186c
 800ed38:	20001394 	.word	0x20001394
 800ed3c:	20001824 	.word	0x20001824
 800ed40:	20001390 	.word	0x20001390
 800ed44:	20001878 	.word	0x20001878

0800ed48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ed50:	4b06      	ldr	r3, [pc, #24]	; (800ed6c <vTaskInternalSetTimeOutState+0x24>)
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ed58:	4b05      	ldr	r3, [pc, #20]	; (800ed70 <vTaskInternalSetTimeOutState+0x28>)
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	605a      	str	r2, [r3, #4]
}
 800ed60:	bf00      	nop
 800ed62:	370c      	adds	r7, #12
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr
 800ed6c:	2000187c 	.word	0x2000187c
 800ed70:	20001868 	.word	0x20001868

0800ed74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b088      	sub	sp, #32
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d10a      	bne.n	800ed9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ed84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed88:	f383 8811 	msr	BASEPRI, r3
 800ed8c:	f3bf 8f6f 	isb	sy
 800ed90:	f3bf 8f4f 	dsb	sy
 800ed94:	613b      	str	r3, [r7, #16]
}
 800ed96:	bf00      	nop
 800ed98:	e7fe      	b.n	800ed98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d10a      	bne.n	800edb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eda0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda4:	f383 8811 	msr	BASEPRI, r3
 800eda8:	f3bf 8f6f 	isb	sy
 800edac:	f3bf 8f4f 	dsb	sy
 800edb0:	60fb      	str	r3, [r7, #12]
}
 800edb2:	bf00      	nop
 800edb4:	e7fe      	b.n	800edb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800edb6:	f000 fe8d 	bl	800fad4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800edba:	4b1d      	ldr	r3, [pc, #116]	; (800ee30 <xTaskCheckForTimeOut+0xbc>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	69ba      	ldr	r2, [r7, #24]
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edd2:	d102      	bne.n	800edda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800edd4:	2300      	movs	r3, #0
 800edd6:	61fb      	str	r3, [r7, #28]
 800edd8:	e023      	b.n	800ee22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	4b15      	ldr	r3, [pc, #84]	; (800ee34 <xTaskCheckForTimeOut+0xc0>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d007      	beq.n	800edf6 <xTaskCheckForTimeOut+0x82>
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	69ba      	ldr	r2, [r7, #24]
 800edec:	429a      	cmp	r2, r3
 800edee:	d302      	bcc.n	800edf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800edf0:	2301      	movs	r3, #1
 800edf2:	61fb      	str	r3, [r7, #28]
 800edf4:	e015      	b.n	800ee22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	697a      	ldr	r2, [r7, #20]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d20b      	bcs.n	800ee18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	1ad2      	subs	r2, r2, r3
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f7ff ff9b 	bl	800ed48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ee12:	2300      	movs	r3, #0
 800ee14:	61fb      	str	r3, [r7, #28]
 800ee16:	e004      	b.n	800ee22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ee22:	f000 fe87 	bl	800fb34 <vPortExitCritical>

	return xReturn;
 800ee26:	69fb      	ldr	r3, [r7, #28]
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3720      	adds	r7, #32
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	20001868 	.word	0x20001868
 800ee34:	2000187c 	.word	0x2000187c

0800ee38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ee38:	b480      	push	{r7}
 800ee3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ee3c:	4b03      	ldr	r3, [pc, #12]	; (800ee4c <vTaskMissedYield+0x14>)
 800ee3e:	2201      	movs	r2, #1
 800ee40:	601a      	str	r2, [r3, #0]
}
 800ee42:	bf00      	nop
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr
 800ee4c:	20001878 	.word	0x20001878

0800ee50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ee58:	f000 f852 	bl	800ef00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ee5c:	4b06      	ldr	r3, [pc, #24]	; (800ee78 <prvIdleTask+0x28>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d9f9      	bls.n	800ee58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ee64:	4b05      	ldr	r3, [pc, #20]	; (800ee7c <prvIdleTask+0x2c>)
 800ee66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee6a:	601a      	str	r2, [r3, #0]
 800ee6c:	f3bf 8f4f 	dsb	sy
 800ee70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ee74:	e7f0      	b.n	800ee58 <prvIdleTask+0x8>
 800ee76:	bf00      	nop
 800ee78:	20001394 	.word	0x20001394
 800ee7c:	e000ed04 	.word	0xe000ed04

0800ee80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee86:	2300      	movs	r3, #0
 800ee88:	607b      	str	r3, [r7, #4]
 800ee8a:	e00c      	b.n	800eea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ee8c:	687a      	ldr	r2, [r7, #4]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	4413      	add	r3, r2
 800ee94:	009b      	lsls	r3, r3, #2
 800ee96:	4a12      	ldr	r2, [pc, #72]	; (800eee0 <prvInitialiseTaskLists+0x60>)
 800ee98:	4413      	add	r3, r2
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7fe fb62 	bl	800d564 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	3301      	adds	r3, #1
 800eea4:	607b      	str	r3, [r7, #4]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2b37      	cmp	r3, #55	; 0x37
 800eeaa:	d9ef      	bls.n	800ee8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eeac:	480d      	ldr	r0, [pc, #52]	; (800eee4 <prvInitialiseTaskLists+0x64>)
 800eeae:	f7fe fb59 	bl	800d564 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eeb2:	480d      	ldr	r0, [pc, #52]	; (800eee8 <prvInitialiseTaskLists+0x68>)
 800eeb4:	f7fe fb56 	bl	800d564 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eeb8:	480c      	ldr	r0, [pc, #48]	; (800eeec <prvInitialiseTaskLists+0x6c>)
 800eeba:	f7fe fb53 	bl	800d564 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eebe:	480c      	ldr	r0, [pc, #48]	; (800eef0 <prvInitialiseTaskLists+0x70>)
 800eec0:	f7fe fb50 	bl	800d564 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eec4:	480b      	ldr	r0, [pc, #44]	; (800eef4 <prvInitialiseTaskLists+0x74>)
 800eec6:	f7fe fb4d 	bl	800d564 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eeca:	4b0b      	ldr	r3, [pc, #44]	; (800eef8 <prvInitialiseTaskLists+0x78>)
 800eecc:	4a05      	ldr	r2, [pc, #20]	; (800eee4 <prvInitialiseTaskLists+0x64>)
 800eece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eed0:	4b0a      	ldr	r3, [pc, #40]	; (800eefc <prvInitialiseTaskLists+0x7c>)
 800eed2:	4a05      	ldr	r2, [pc, #20]	; (800eee8 <prvInitialiseTaskLists+0x68>)
 800eed4:	601a      	str	r2, [r3, #0]
}
 800eed6:	bf00      	nop
 800eed8:	3708      	adds	r7, #8
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	20001394 	.word	0x20001394
 800eee4:	200017f4 	.word	0x200017f4
 800eee8:	20001808 	.word	0x20001808
 800eeec:	20001824 	.word	0x20001824
 800eef0:	20001838 	.word	0x20001838
 800eef4:	20001850 	.word	0x20001850
 800eef8:	2000181c 	.word	0x2000181c
 800eefc:	20001820 	.word	0x20001820

0800ef00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef06:	e019      	b.n	800ef3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ef08:	f000 fde4 	bl	800fad4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef0c:	4b10      	ldr	r3, [pc, #64]	; (800ef50 <prvCheckTasksWaitingTermination+0x50>)
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	3304      	adds	r3, #4
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fe fbad 	bl	800d678 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ef1e:	4b0d      	ldr	r3, [pc, #52]	; (800ef54 <prvCheckTasksWaitingTermination+0x54>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	3b01      	subs	r3, #1
 800ef24:	4a0b      	ldr	r2, [pc, #44]	; (800ef54 <prvCheckTasksWaitingTermination+0x54>)
 800ef26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ef28:	4b0b      	ldr	r3, [pc, #44]	; (800ef58 <prvCheckTasksWaitingTermination+0x58>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	3b01      	subs	r3, #1
 800ef2e:	4a0a      	ldr	r2, [pc, #40]	; (800ef58 <prvCheckTasksWaitingTermination+0x58>)
 800ef30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ef32:	f000 fdff 	bl	800fb34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 f810 	bl	800ef5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef3c:	4b06      	ldr	r3, [pc, #24]	; (800ef58 <prvCheckTasksWaitingTermination+0x58>)
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d1e1      	bne.n	800ef08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ef44:	bf00      	nop
 800ef46:	bf00      	nop
 800ef48:	3708      	adds	r7, #8
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
 800ef4e:	bf00      	nop
 800ef50:	20001838 	.word	0x20001838
 800ef54:	20001864 	.word	0x20001864
 800ef58:	2000184c 	.word	0x2000184c

0800ef5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	3354      	adds	r3, #84	; 0x54
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f003 f9c7 	bl	80122fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d108      	bne.n	800ef8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f000 ff97 	bl	800feb0 <vPortFree>
				vPortFree( pxTCB );
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 ff94 	bl	800feb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ef88:	e018      	b.n	800efbc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ef90:	2b01      	cmp	r3, #1
 800ef92:	d103      	bne.n	800ef9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f000 ff8b 	bl	800feb0 <vPortFree>
	}
 800ef9a:	e00f      	b.n	800efbc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	d00a      	beq.n	800efbc <prvDeleteTCB+0x60>
	__asm volatile
 800efa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efaa:	f383 8811 	msr	BASEPRI, r3
 800efae:	f3bf 8f6f 	isb	sy
 800efb2:	f3bf 8f4f 	dsb	sy
 800efb6:	60fb      	str	r3, [r7, #12]
}
 800efb8:	bf00      	nop
 800efba:	e7fe      	b.n	800efba <prvDeleteTCB+0x5e>
	}
 800efbc:	bf00      	nop
 800efbe:	3710      	adds	r7, #16
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800efc4:	b480      	push	{r7}
 800efc6:	b083      	sub	sp, #12
 800efc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efca:	4b0c      	ldr	r3, [pc, #48]	; (800effc <prvResetNextTaskUnblockTime+0x38>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d104      	bne.n	800efde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800efd4:	4b0a      	ldr	r3, [pc, #40]	; (800f000 <prvResetNextTaskUnblockTime+0x3c>)
 800efd6:	f04f 32ff 	mov.w	r2, #4294967295
 800efda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800efdc:	e008      	b.n	800eff0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800efde:	4b07      	ldr	r3, [pc, #28]	; (800effc <prvResetNextTaskUnblockTime+0x38>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	68db      	ldr	r3, [r3, #12]
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	4a04      	ldr	r2, [pc, #16]	; (800f000 <prvResetNextTaskUnblockTime+0x3c>)
 800efee:	6013      	str	r3, [r2, #0]
}
 800eff0:	bf00      	nop
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr
 800effc:	2000181c 	.word	0x2000181c
 800f000:	20001884 	.word	0x20001884

0800f004 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f004:	b480      	push	{r7}
 800f006:	b083      	sub	sp, #12
 800f008:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f00a:	4b05      	ldr	r3, [pc, #20]	; (800f020 <xTaskGetCurrentTaskHandle+0x1c>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f010:	687b      	ldr	r3, [r7, #4]
	}
 800f012:	4618      	mov	r0, r3
 800f014:	370c      	adds	r7, #12
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	20001390 	.word	0x20001390

0800f024 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f02a:	4b0b      	ldr	r3, [pc, #44]	; (800f058 <xTaskGetSchedulerState+0x34>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d102      	bne.n	800f038 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f032:	2301      	movs	r3, #1
 800f034:	607b      	str	r3, [r7, #4]
 800f036:	e008      	b.n	800f04a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f038:	4b08      	ldr	r3, [pc, #32]	; (800f05c <xTaskGetSchedulerState+0x38>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d102      	bne.n	800f046 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f040:	2302      	movs	r3, #2
 800f042:	607b      	str	r3, [r7, #4]
 800f044:	e001      	b.n	800f04a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f046:	2300      	movs	r3, #0
 800f048:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f04a:	687b      	ldr	r3, [r7, #4]
	}
 800f04c:	4618      	mov	r0, r3
 800f04e:	370c      	adds	r7, #12
 800f050:	46bd      	mov	sp, r7
 800f052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f056:	4770      	bx	lr
 800f058:	20001870 	.word	0x20001870
 800f05c:	2000188c 	.word	0x2000188c

0800f060 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f06c:	2300      	movs	r3, #0
 800f06e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d056      	beq.n	800f124 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f076:	4b2e      	ldr	r3, [pc, #184]	; (800f130 <xTaskPriorityDisinherit+0xd0>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	693a      	ldr	r2, [r7, #16]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d00a      	beq.n	800f096 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f084:	f383 8811 	msr	BASEPRI, r3
 800f088:	f3bf 8f6f 	isb	sy
 800f08c:	f3bf 8f4f 	dsb	sy
 800f090:	60fb      	str	r3, [r7, #12]
}
 800f092:	bf00      	nop
 800f094:	e7fe      	b.n	800f094 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d10a      	bne.n	800f0b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a2:	f383 8811 	msr	BASEPRI, r3
 800f0a6:	f3bf 8f6f 	isb	sy
 800f0aa:	f3bf 8f4f 	dsb	sy
 800f0ae:	60bb      	str	r3, [r7, #8]
}
 800f0b0:	bf00      	nop
 800f0b2:	e7fe      	b.n	800f0b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0b8:	1e5a      	subs	r2, r3, #1
 800f0ba:	693b      	ldr	r3, [r7, #16]
 800f0bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d02c      	beq.n	800f124 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d128      	bne.n	800f124 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0d2:	693b      	ldr	r3, [r7, #16]
 800f0d4:	3304      	adds	r3, #4
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fe face 	bl	800d678 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f4:	4b0f      	ldr	r3, [pc, #60]	; (800f134 <xTaskPriorityDisinherit+0xd4>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d903      	bls.n	800f104 <xTaskPriorityDisinherit+0xa4>
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f100:	4a0c      	ldr	r2, [pc, #48]	; (800f134 <xTaskPriorityDisinherit+0xd4>)
 800f102:	6013      	str	r3, [r2, #0]
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f108:	4613      	mov	r3, r2
 800f10a:	009b      	lsls	r3, r3, #2
 800f10c:	4413      	add	r3, r2
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	4a09      	ldr	r2, [pc, #36]	; (800f138 <xTaskPriorityDisinherit+0xd8>)
 800f112:	441a      	add	r2, r3
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	3304      	adds	r3, #4
 800f118:	4619      	mov	r1, r3
 800f11a:	4610      	mov	r0, r2
 800f11c:	f7fe fa4f 	bl	800d5be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f120:	2301      	movs	r3, #1
 800f122:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f124:	697b      	ldr	r3, [r7, #20]
	}
 800f126:	4618      	mov	r0, r3
 800f128:	3718      	adds	r7, #24
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	20001390 	.word	0x20001390
 800f134:	2000186c 	.word	0x2000186c
 800f138:	20001394 	.word	0x20001394

0800f13c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f146:	4b21      	ldr	r3, [pc, #132]	; (800f1cc <prvAddCurrentTaskToDelayedList+0x90>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f14c:	4b20      	ldr	r3, [pc, #128]	; (800f1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	3304      	adds	r3, #4
 800f152:	4618      	mov	r0, r3
 800f154:	f7fe fa90 	bl	800d678 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f15e:	d10a      	bne.n	800f176 <prvAddCurrentTaskToDelayedList+0x3a>
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d007      	beq.n	800f176 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f166:	4b1a      	ldr	r3, [pc, #104]	; (800f1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	3304      	adds	r3, #4
 800f16c:	4619      	mov	r1, r3
 800f16e:	4819      	ldr	r0, [pc, #100]	; (800f1d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800f170:	f7fe fa25 	bl	800d5be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f174:	e026      	b.n	800f1c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f176:	68fa      	ldr	r2, [r7, #12]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	4413      	add	r3, r2
 800f17c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f17e:	4b14      	ldr	r3, [pc, #80]	; (800f1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	68ba      	ldr	r2, [r7, #8]
 800f184:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f186:	68ba      	ldr	r2, [r7, #8]
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d209      	bcs.n	800f1a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f18e:	4b12      	ldr	r3, [pc, #72]	; (800f1d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	4b0f      	ldr	r3, [pc, #60]	; (800f1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	3304      	adds	r3, #4
 800f198:	4619      	mov	r1, r3
 800f19a:	4610      	mov	r0, r2
 800f19c:	f7fe fa33 	bl	800d606 <vListInsert>
}
 800f1a0:	e010      	b.n	800f1c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f1a2:	4b0e      	ldr	r3, [pc, #56]	; (800f1dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	4b0a      	ldr	r3, [pc, #40]	; (800f1d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	3304      	adds	r3, #4
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	4610      	mov	r0, r2
 800f1b0:	f7fe fa29 	bl	800d606 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f1b4:	4b0a      	ldr	r3, [pc, #40]	; (800f1e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	68ba      	ldr	r2, [r7, #8]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d202      	bcs.n	800f1c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f1be:	4a08      	ldr	r2, [pc, #32]	; (800f1e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	6013      	str	r3, [r2, #0]
}
 800f1c4:	bf00      	nop
 800f1c6:	3710      	adds	r7, #16
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	20001868 	.word	0x20001868
 800f1d0:	20001390 	.word	0x20001390
 800f1d4:	20001850 	.word	0x20001850
 800f1d8:	20001820 	.word	0x20001820
 800f1dc:	2000181c 	.word	0x2000181c
 800f1e0:	20001884 	.word	0x20001884

0800f1e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b08a      	sub	sp, #40	; 0x28
 800f1e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f1ee:	f000 fb07 	bl	800f800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f1f2:	4b1c      	ldr	r3, [pc, #112]	; (800f264 <xTimerCreateTimerTask+0x80>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d021      	beq.n	800f23e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f1fe:	2300      	movs	r3, #0
 800f200:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f202:	1d3a      	adds	r2, r7, #4
 800f204:	f107 0108 	add.w	r1, r7, #8
 800f208:	f107 030c 	add.w	r3, r7, #12
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7fe f98f 	bl	800d530 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f212:	6879      	ldr	r1, [r7, #4]
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	68fa      	ldr	r2, [r7, #12]
 800f218:	9202      	str	r2, [sp, #8]
 800f21a:	9301      	str	r3, [sp, #4]
 800f21c:	2302      	movs	r3, #2
 800f21e:	9300      	str	r3, [sp, #0]
 800f220:	2300      	movs	r3, #0
 800f222:	460a      	mov	r2, r1
 800f224:	4910      	ldr	r1, [pc, #64]	; (800f268 <xTimerCreateTimerTask+0x84>)
 800f226:	4811      	ldr	r0, [pc, #68]	; (800f26c <xTimerCreateTimerTask+0x88>)
 800f228:	f7fe ff3c 	bl	800e0a4 <xTaskCreateStatic>
 800f22c:	4603      	mov	r3, r0
 800f22e:	4a10      	ldr	r2, [pc, #64]	; (800f270 <xTimerCreateTimerTask+0x8c>)
 800f230:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f232:	4b0f      	ldr	r3, [pc, #60]	; (800f270 <xTimerCreateTimerTask+0x8c>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d001      	beq.n	800f23e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f23a:	2301      	movs	r3, #1
 800f23c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d10a      	bne.n	800f25a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	613b      	str	r3, [r7, #16]
}
 800f256:	bf00      	nop
 800f258:	e7fe      	b.n	800f258 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f25a:	697b      	ldr	r3, [r7, #20]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3718      	adds	r7, #24
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	200018c0 	.word	0x200018c0
 800f268:	080173f8 	.word	0x080173f8
 800f26c:	0800f3a9 	.word	0x0800f3a9
 800f270:	200018c4 	.word	0x200018c4

0800f274 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b08a      	sub	sp, #40	; 0x28
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f282:	2300      	movs	r3, #0
 800f284:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d10a      	bne.n	800f2a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f290:	f383 8811 	msr	BASEPRI, r3
 800f294:	f3bf 8f6f 	isb	sy
 800f298:	f3bf 8f4f 	dsb	sy
 800f29c:	623b      	str	r3, [r7, #32]
}
 800f29e:	bf00      	nop
 800f2a0:	e7fe      	b.n	800f2a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f2a2:	4b1a      	ldr	r3, [pc, #104]	; (800f30c <xTimerGenericCommand+0x98>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d02a      	beq.n	800f300 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	2b05      	cmp	r3, #5
 800f2ba:	dc18      	bgt.n	800f2ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f2bc:	f7ff feb2 	bl	800f024 <xTaskGetSchedulerState>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	2b02      	cmp	r3, #2
 800f2c4:	d109      	bne.n	800f2da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f2c6:	4b11      	ldr	r3, [pc, #68]	; (800f30c <xTimerGenericCommand+0x98>)
 800f2c8:	6818      	ldr	r0, [r3, #0]
 800f2ca:	f107 0110 	add.w	r1, r7, #16
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2d2:	f7fe faff 	bl	800d8d4 <xQueueGenericSend>
 800f2d6:	6278      	str	r0, [r7, #36]	; 0x24
 800f2d8:	e012      	b.n	800f300 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f2da:	4b0c      	ldr	r3, [pc, #48]	; (800f30c <xTimerGenericCommand+0x98>)
 800f2dc:	6818      	ldr	r0, [r3, #0]
 800f2de:	f107 0110 	add.w	r1, r7, #16
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	f7fe faf5 	bl	800d8d4 <xQueueGenericSend>
 800f2ea:	6278      	str	r0, [r7, #36]	; 0x24
 800f2ec:	e008      	b.n	800f300 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f2ee:	4b07      	ldr	r3, [pc, #28]	; (800f30c <xTimerGenericCommand+0x98>)
 800f2f0:	6818      	ldr	r0, [r3, #0]
 800f2f2:	f107 0110 	add.w	r1, r7, #16
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	683a      	ldr	r2, [r7, #0]
 800f2fa:	f7fe fbe9 	bl	800dad0 <xQueueGenericSendFromISR>
 800f2fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f302:	4618      	mov	r0, r3
 800f304:	3728      	adds	r7, #40	; 0x28
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	200018c0 	.word	0x200018c0

0800f310 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b088      	sub	sp, #32
 800f314:	af02      	add	r7, sp, #8
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f31a:	4b22      	ldr	r3, [pc, #136]	; (800f3a4 <prvProcessExpiredTimer+0x94>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	68db      	ldr	r3, [r3, #12]
 800f320:	68db      	ldr	r3, [r3, #12]
 800f322:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	3304      	adds	r3, #4
 800f328:	4618      	mov	r0, r3
 800f32a:	f7fe f9a5 	bl	800d678 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f334:	f003 0304 	and.w	r3, r3, #4
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d022      	beq.n	800f382 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	699a      	ldr	r2, [r3, #24]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	18d1      	adds	r1, r2, r3
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	683a      	ldr	r2, [r7, #0]
 800f348:	6978      	ldr	r0, [r7, #20]
 800f34a:	f000 f8d1 	bl	800f4f0 <prvInsertTimerInActiveList>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d01f      	beq.n	800f394 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f354:	2300      	movs	r3, #0
 800f356:	9300      	str	r3, [sp, #0]
 800f358:	2300      	movs	r3, #0
 800f35a:	687a      	ldr	r2, [r7, #4]
 800f35c:	2100      	movs	r1, #0
 800f35e:	6978      	ldr	r0, [r7, #20]
 800f360:	f7ff ff88 	bl	800f274 <xTimerGenericCommand>
 800f364:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d113      	bne.n	800f394 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f370:	f383 8811 	msr	BASEPRI, r3
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	f3bf 8f4f 	dsb	sy
 800f37c:	60fb      	str	r3, [r7, #12]
}
 800f37e:	bf00      	nop
 800f380:	e7fe      	b.n	800f380 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f388:	f023 0301 	bic.w	r3, r3, #1
 800f38c:	b2da      	uxtb	r2, r3
 800f38e:	697b      	ldr	r3, [r7, #20]
 800f390:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f394:	697b      	ldr	r3, [r7, #20]
 800f396:	6a1b      	ldr	r3, [r3, #32]
 800f398:	6978      	ldr	r0, [r7, #20]
 800f39a:	4798      	blx	r3
}
 800f39c:	bf00      	nop
 800f39e:	3718      	adds	r7, #24
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	200018b8 	.word	0x200018b8

0800f3a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f3b0:	f107 0308 	add.w	r3, r7, #8
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f000 f857 	bl	800f468 <prvGetNextExpireTime>
 800f3ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	4619      	mov	r1, r3
 800f3c0:	68f8      	ldr	r0, [r7, #12]
 800f3c2:	f000 f803 	bl	800f3cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f3c6:	f000 f8d5 	bl	800f574 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f3ca:	e7f1      	b.n	800f3b0 <prvTimerTask+0x8>

0800f3cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f3d6:	f7ff fa29 	bl	800e82c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f3da:	f107 0308 	add.w	r3, r7, #8
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f000 f866 	bl	800f4b0 <prvSampleTimeNow>
 800f3e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d130      	bne.n	800f44e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d10a      	bne.n	800f408 <prvProcessTimerOrBlockTask+0x3c>
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d806      	bhi.n	800f408 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f3fa:	f7ff fa25 	bl	800e848 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f3fe:	68f9      	ldr	r1, [r7, #12]
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7ff ff85 	bl	800f310 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f406:	e024      	b.n	800f452 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d008      	beq.n	800f420 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f40e:	4b13      	ldr	r3, [pc, #76]	; (800f45c <prvProcessTimerOrBlockTask+0x90>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d101      	bne.n	800f41c <prvProcessTimerOrBlockTask+0x50>
 800f418:	2301      	movs	r3, #1
 800f41a:	e000      	b.n	800f41e <prvProcessTimerOrBlockTask+0x52>
 800f41c:	2300      	movs	r3, #0
 800f41e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f420:	4b0f      	ldr	r3, [pc, #60]	; (800f460 <prvProcessTimerOrBlockTask+0x94>)
 800f422:	6818      	ldr	r0, [r3, #0]
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	1ad3      	subs	r3, r2, r3
 800f42a:	683a      	ldr	r2, [r7, #0]
 800f42c:	4619      	mov	r1, r3
 800f42e:	f7fe fe05 	bl	800e03c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f432:	f7ff fa09 	bl	800e848 <xTaskResumeAll>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d10a      	bne.n	800f452 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f43c:	4b09      	ldr	r3, [pc, #36]	; (800f464 <prvProcessTimerOrBlockTask+0x98>)
 800f43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f442:	601a      	str	r2, [r3, #0]
 800f444:	f3bf 8f4f 	dsb	sy
 800f448:	f3bf 8f6f 	isb	sy
}
 800f44c:	e001      	b.n	800f452 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f44e:	f7ff f9fb 	bl	800e848 <xTaskResumeAll>
}
 800f452:	bf00      	nop
 800f454:	3710      	adds	r7, #16
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	200018bc 	.word	0x200018bc
 800f460:	200018c0 	.word	0x200018c0
 800f464:	e000ed04 	.word	0xe000ed04

0800f468 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f470:	4b0e      	ldr	r3, [pc, #56]	; (800f4ac <prvGetNextExpireTime+0x44>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <prvGetNextExpireTime+0x16>
 800f47a:	2201      	movs	r2, #1
 800f47c:	e000      	b.n	800f480 <prvGetNextExpireTime+0x18>
 800f47e:	2200      	movs	r2, #0
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d105      	bne.n	800f498 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f48c:	4b07      	ldr	r3, [pc, #28]	; (800f4ac <prvGetNextExpireTime+0x44>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	60fb      	str	r3, [r7, #12]
 800f496:	e001      	b.n	800f49c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f498:	2300      	movs	r3, #0
 800f49a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f49c:	68fb      	ldr	r3, [r7, #12]
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3714      	adds	r7, #20
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	200018b8 	.word	0x200018b8

0800f4b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f4b8:	f7ff fa64 	bl	800e984 <xTaskGetTickCount>
 800f4bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f4be:	4b0b      	ldr	r3, [pc, #44]	; (800f4ec <prvSampleTimeNow+0x3c>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	68fa      	ldr	r2, [r7, #12]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d205      	bcs.n	800f4d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f4c8:	f000 f936 	bl	800f738 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	601a      	str	r2, [r3, #0]
 800f4d2:	e002      	b.n	800f4da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f4da:	4a04      	ldr	r2, [pc, #16]	; (800f4ec <prvSampleTimeNow+0x3c>)
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	200018c8 	.word	0x200018c8

0800f4f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	60f8      	str	r0, [r7, #12]
 800f4f8:	60b9      	str	r1, [r7, #8]
 800f4fa:	607a      	str	r2, [r7, #4]
 800f4fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f4fe:	2300      	movs	r3, #0
 800f500:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	68ba      	ldr	r2, [r7, #8]
 800f506:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	68fa      	ldr	r2, [r7, #12]
 800f50c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f50e:	68ba      	ldr	r2, [r7, #8]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	429a      	cmp	r2, r3
 800f514:	d812      	bhi.n	800f53c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	1ad2      	subs	r2, r2, r3
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	699b      	ldr	r3, [r3, #24]
 800f520:	429a      	cmp	r2, r3
 800f522:	d302      	bcc.n	800f52a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f524:	2301      	movs	r3, #1
 800f526:	617b      	str	r3, [r7, #20]
 800f528:	e01b      	b.n	800f562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f52a:	4b10      	ldr	r3, [pc, #64]	; (800f56c <prvInsertTimerInActiveList+0x7c>)
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	3304      	adds	r3, #4
 800f532:	4619      	mov	r1, r3
 800f534:	4610      	mov	r0, r2
 800f536:	f7fe f866 	bl	800d606 <vListInsert>
 800f53a:	e012      	b.n	800f562 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f53c:	687a      	ldr	r2, [r7, #4]
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	429a      	cmp	r2, r3
 800f542:	d206      	bcs.n	800f552 <prvInsertTimerInActiveList+0x62>
 800f544:	68ba      	ldr	r2, [r7, #8]
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d302      	bcc.n	800f552 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f54c:	2301      	movs	r3, #1
 800f54e:	617b      	str	r3, [r7, #20]
 800f550:	e007      	b.n	800f562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f552:	4b07      	ldr	r3, [pc, #28]	; (800f570 <prvInsertTimerInActiveList+0x80>)
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	3304      	adds	r3, #4
 800f55a:	4619      	mov	r1, r3
 800f55c:	4610      	mov	r0, r2
 800f55e:	f7fe f852 	bl	800d606 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f562:	697b      	ldr	r3, [r7, #20]
}
 800f564:	4618      	mov	r0, r3
 800f566:	3718      	adds	r7, #24
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	200018bc 	.word	0x200018bc
 800f570:	200018b8 	.word	0x200018b8

0800f574 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b08e      	sub	sp, #56	; 0x38
 800f578:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f57a:	e0ca      	b.n	800f712 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	da18      	bge.n	800f5b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f582:	1d3b      	adds	r3, r7, #4
 800f584:	3304      	adds	r3, #4
 800f586:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d10a      	bne.n	800f5a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f592:	f383 8811 	msr	BASEPRI, r3
 800f596:	f3bf 8f6f 	isb	sy
 800f59a:	f3bf 8f4f 	dsb	sy
 800f59e:	61fb      	str	r3, [r7, #28]
}
 800f5a0:	bf00      	nop
 800f5a2:	e7fe      	b.n	800f5a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5aa:	6850      	ldr	r0, [r2, #4]
 800f5ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5ae:	6892      	ldr	r2, [r2, #8]
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	f2c0 80aa 	blt.w	800f710 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c2:	695b      	ldr	r3, [r3, #20]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d004      	beq.n	800f5d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ca:	3304      	adds	r3, #4
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fe f853 	bl	800d678 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f5d2:	463b      	mov	r3, r7
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7ff ff6b 	bl	800f4b0 <prvSampleTimeNow>
 800f5da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2b09      	cmp	r3, #9
 800f5e0:	f200 8097 	bhi.w	800f712 <prvProcessReceivedCommands+0x19e>
 800f5e4:	a201      	add	r2, pc, #4	; (adr r2, 800f5ec <prvProcessReceivedCommands+0x78>)
 800f5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ea:	bf00      	nop
 800f5ec:	0800f615 	.word	0x0800f615
 800f5f0:	0800f615 	.word	0x0800f615
 800f5f4:	0800f615 	.word	0x0800f615
 800f5f8:	0800f689 	.word	0x0800f689
 800f5fc:	0800f69d 	.word	0x0800f69d
 800f600:	0800f6e7 	.word	0x0800f6e7
 800f604:	0800f615 	.word	0x0800f615
 800f608:	0800f615 	.word	0x0800f615
 800f60c:	0800f689 	.word	0x0800f689
 800f610:	0800f69d 	.word	0x0800f69d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f61a:	f043 0301 	orr.w	r3, r3, #1
 800f61e:	b2da      	uxtb	r2, r3
 800f620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f626:	68ba      	ldr	r2, [r7, #8]
 800f628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62a:	699b      	ldr	r3, [r3, #24]
 800f62c:	18d1      	adds	r1, r2, r3
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f634:	f7ff ff5c 	bl	800f4f0 <prvInsertTimerInActiveList>
 800f638:	4603      	mov	r3, r0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d069      	beq.n	800f712 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f640:	6a1b      	ldr	r3, [r3, #32]
 800f642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f644:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f64c:	f003 0304 	and.w	r3, r3, #4
 800f650:	2b00      	cmp	r3, #0
 800f652:	d05e      	beq.n	800f712 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f654:	68ba      	ldr	r2, [r7, #8]
 800f656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f658:	699b      	ldr	r3, [r3, #24]
 800f65a:	441a      	add	r2, r3
 800f65c:	2300      	movs	r3, #0
 800f65e:	9300      	str	r3, [sp, #0]
 800f660:	2300      	movs	r3, #0
 800f662:	2100      	movs	r1, #0
 800f664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f666:	f7ff fe05 	bl	800f274 <xTimerGenericCommand>
 800f66a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f66c:	6a3b      	ldr	r3, [r7, #32]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d14f      	bne.n	800f712 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f676:	f383 8811 	msr	BASEPRI, r3
 800f67a:	f3bf 8f6f 	isb	sy
 800f67e:	f3bf 8f4f 	dsb	sy
 800f682:	61bb      	str	r3, [r7, #24]
}
 800f684:	bf00      	nop
 800f686:	e7fe      	b.n	800f686 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f68a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f68e:	f023 0301 	bic.w	r3, r3, #1
 800f692:	b2da      	uxtb	r2, r3
 800f694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f69a:	e03a      	b.n	800f712 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6a2:	f043 0301 	orr.w	r3, r3, #1
 800f6a6:	b2da      	uxtb	r2, r3
 800f6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f6ae:	68ba      	ldr	r2, [r7, #8]
 800f6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b6:	699b      	ldr	r3, [r3, #24]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d10a      	bne.n	800f6d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c0:	f383 8811 	msr	BASEPRI, r3
 800f6c4:	f3bf 8f6f 	isb	sy
 800f6c8:	f3bf 8f4f 	dsb	sy
 800f6cc:	617b      	str	r3, [r7, #20]
}
 800f6ce:	bf00      	nop
 800f6d0:	e7fe      	b.n	800f6d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d4:	699a      	ldr	r2, [r3, #24]
 800f6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d8:	18d1      	adds	r1, r2, r3
 800f6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6e0:	f7ff ff06 	bl	800f4f0 <prvInsertTimerInActiveList>
					break;
 800f6e4:	e015      	b.n	800f712 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f6ec:	f003 0302 	and.w	r3, r3, #2
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d103      	bne.n	800f6fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f6f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6f6:	f000 fbdb 	bl	800feb0 <vPortFree>
 800f6fa:	e00a      	b.n	800f712 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f702:	f023 0301 	bic.w	r3, r3, #1
 800f706:	b2da      	uxtb	r2, r3
 800f708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f70e:	e000      	b.n	800f712 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f710:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f712:	4b08      	ldr	r3, [pc, #32]	; (800f734 <prvProcessReceivedCommands+0x1c0>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	1d39      	adds	r1, r7, #4
 800f718:	2200      	movs	r2, #0
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7fe fa74 	bl	800dc08 <xQueueReceive>
 800f720:	4603      	mov	r3, r0
 800f722:	2b00      	cmp	r3, #0
 800f724:	f47f af2a 	bne.w	800f57c <prvProcessReceivedCommands+0x8>
	}
}
 800f728:	bf00      	nop
 800f72a:	bf00      	nop
 800f72c:	3730      	adds	r7, #48	; 0x30
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	200018c0 	.word	0x200018c0

0800f738 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b088      	sub	sp, #32
 800f73c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f73e:	e048      	b.n	800f7d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f740:	4b2d      	ldr	r3, [pc, #180]	; (800f7f8 <prvSwitchTimerLists+0xc0>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f74a:	4b2b      	ldr	r3, [pc, #172]	; (800f7f8 <prvSwitchTimerLists+0xc0>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	68db      	ldr	r3, [r3, #12]
 800f750:	68db      	ldr	r3, [r3, #12]
 800f752:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	3304      	adds	r3, #4
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fd ff8d 	bl	800d678 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	6a1b      	ldr	r3, [r3, #32]
 800f762:	68f8      	ldr	r0, [r7, #12]
 800f764:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f76c:	f003 0304 	and.w	r3, r3, #4
 800f770:	2b00      	cmp	r3, #0
 800f772:	d02e      	beq.n	800f7d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	699b      	ldr	r3, [r3, #24]
 800f778:	693a      	ldr	r2, [r7, #16]
 800f77a:	4413      	add	r3, r2
 800f77c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f77e:	68ba      	ldr	r2, [r7, #8]
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	429a      	cmp	r2, r3
 800f784:	d90e      	bls.n	800f7a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	68fa      	ldr	r2, [r7, #12]
 800f790:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f792:	4b19      	ldr	r3, [pc, #100]	; (800f7f8 <prvSwitchTimerLists+0xc0>)
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	3304      	adds	r3, #4
 800f79a:	4619      	mov	r1, r3
 800f79c:	4610      	mov	r0, r2
 800f79e:	f7fd ff32 	bl	800d606 <vListInsert>
 800f7a2:	e016      	b.n	800f7d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	693a      	ldr	r2, [r7, #16]
 800f7ac:	2100      	movs	r1, #0
 800f7ae:	68f8      	ldr	r0, [r7, #12]
 800f7b0:	f7ff fd60 	bl	800f274 <xTimerGenericCommand>
 800f7b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d10a      	bne.n	800f7d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c0:	f383 8811 	msr	BASEPRI, r3
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	603b      	str	r3, [r7, #0]
}
 800f7ce:	bf00      	nop
 800f7d0:	e7fe      	b.n	800f7d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f7d2:	4b09      	ldr	r3, [pc, #36]	; (800f7f8 <prvSwitchTimerLists+0xc0>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d1b1      	bne.n	800f740 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f7dc:	4b06      	ldr	r3, [pc, #24]	; (800f7f8 <prvSwitchTimerLists+0xc0>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f7e2:	4b06      	ldr	r3, [pc, #24]	; (800f7fc <prvSwitchTimerLists+0xc4>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	4a04      	ldr	r2, [pc, #16]	; (800f7f8 <prvSwitchTimerLists+0xc0>)
 800f7e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f7ea:	4a04      	ldr	r2, [pc, #16]	; (800f7fc <prvSwitchTimerLists+0xc4>)
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	6013      	str	r3, [r2, #0]
}
 800f7f0:	bf00      	nop
 800f7f2:	3718      	adds	r7, #24
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	200018b8 	.word	0x200018b8
 800f7fc:	200018bc 	.word	0x200018bc

0800f800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f806:	f000 f965 	bl	800fad4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f80a:	4b15      	ldr	r3, [pc, #84]	; (800f860 <prvCheckForValidListAndQueue+0x60>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d120      	bne.n	800f854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f812:	4814      	ldr	r0, [pc, #80]	; (800f864 <prvCheckForValidListAndQueue+0x64>)
 800f814:	f7fd fea6 	bl	800d564 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f818:	4813      	ldr	r0, [pc, #76]	; (800f868 <prvCheckForValidListAndQueue+0x68>)
 800f81a:	f7fd fea3 	bl	800d564 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f81e:	4b13      	ldr	r3, [pc, #76]	; (800f86c <prvCheckForValidListAndQueue+0x6c>)
 800f820:	4a10      	ldr	r2, [pc, #64]	; (800f864 <prvCheckForValidListAndQueue+0x64>)
 800f822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f824:	4b12      	ldr	r3, [pc, #72]	; (800f870 <prvCheckForValidListAndQueue+0x70>)
 800f826:	4a10      	ldr	r2, [pc, #64]	; (800f868 <prvCheckForValidListAndQueue+0x68>)
 800f828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f82a:	2300      	movs	r3, #0
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	4b11      	ldr	r3, [pc, #68]	; (800f874 <prvCheckForValidListAndQueue+0x74>)
 800f830:	4a11      	ldr	r2, [pc, #68]	; (800f878 <prvCheckForValidListAndQueue+0x78>)
 800f832:	2110      	movs	r1, #16
 800f834:	200a      	movs	r0, #10
 800f836:	f7fd ffb1 	bl	800d79c <xQueueGenericCreateStatic>
 800f83a:	4603      	mov	r3, r0
 800f83c:	4a08      	ldr	r2, [pc, #32]	; (800f860 <prvCheckForValidListAndQueue+0x60>)
 800f83e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f840:	4b07      	ldr	r3, [pc, #28]	; (800f860 <prvCheckForValidListAndQueue+0x60>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d005      	beq.n	800f854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f848:	4b05      	ldr	r3, [pc, #20]	; (800f860 <prvCheckForValidListAndQueue+0x60>)
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	490b      	ldr	r1, [pc, #44]	; (800f87c <prvCheckForValidListAndQueue+0x7c>)
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fe fbca 	bl	800dfe8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f854:	f000 f96e 	bl	800fb34 <vPortExitCritical>
}
 800f858:	bf00      	nop
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	200018c0 	.word	0x200018c0
 800f864:	20001890 	.word	0x20001890
 800f868:	200018a4 	.word	0x200018a4
 800f86c:	200018b8 	.word	0x200018b8
 800f870:	200018bc 	.word	0x200018bc
 800f874:	2000196c 	.word	0x2000196c
 800f878:	200018cc 	.word	0x200018cc
 800f87c:	08017400 	.word	0x08017400

0800f880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	60b9      	str	r1, [r7, #8]
 800f88a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	3b04      	subs	r3, #4
 800f890:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	3b04      	subs	r3, #4
 800f89e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	f023 0201 	bic.w	r2, r3, #1
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	3b04      	subs	r3, #4
 800f8ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f8b0:	4a0c      	ldr	r2, [pc, #48]	; (800f8e4 <pxPortInitialiseStack+0x64>)
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	3b14      	subs	r3, #20
 800f8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f8bc:	687a      	ldr	r2, [r7, #4]
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	3b04      	subs	r3, #4
 800f8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f06f 0202 	mvn.w	r2, #2
 800f8ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	3b20      	subs	r3, #32
 800f8d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3714      	adds	r7, #20
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e2:	4770      	bx	lr
 800f8e4:	0800f8e9 	.word	0x0800f8e9

0800f8e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f8f2:	4b12      	ldr	r3, [pc, #72]	; (800f93c <prvTaskExitError+0x54>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8fa:	d00a      	beq.n	800f912 <prvTaskExitError+0x2a>
	__asm volatile
 800f8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f900:	f383 8811 	msr	BASEPRI, r3
 800f904:	f3bf 8f6f 	isb	sy
 800f908:	f3bf 8f4f 	dsb	sy
 800f90c:	60fb      	str	r3, [r7, #12]
}
 800f90e:	bf00      	nop
 800f910:	e7fe      	b.n	800f910 <prvTaskExitError+0x28>
	__asm volatile
 800f912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f916:	f383 8811 	msr	BASEPRI, r3
 800f91a:	f3bf 8f6f 	isb	sy
 800f91e:	f3bf 8f4f 	dsb	sy
 800f922:	60bb      	str	r3, [r7, #8]
}
 800f924:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f926:	bf00      	nop
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d0fc      	beq.n	800f928 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f92e:	bf00      	nop
 800f930:	bf00      	nop
 800f932:	3714      	adds	r7, #20
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr
 800f93c:	200000cc 	.word	0x200000cc

0800f940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f940:	4b07      	ldr	r3, [pc, #28]	; (800f960 <pxCurrentTCBConst2>)
 800f942:	6819      	ldr	r1, [r3, #0]
 800f944:	6808      	ldr	r0, [r1, #0]
 800f946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94a:	f380 8809 	msr	PSP, r0
 800f94e:	f3bf 8f6f 	isb	sy
 800f952:	f04f 0000 	mov.w	r0, #0
 800f956:	f380 8811 	msr	BASEPRI, r0
 800f95a:	4770      	bx	lr
 800f95c:	f3af 8000 	nop.w

0800f960 <pxCurrentTCBConst2>:
 800f960:	20001390 	.word	0x20001390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f964:	bf00      	nop
 800f966:	bf00      	nop

0800f968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f968:	4808      	ldr	r0, [pc, #32]	; (800f98c <prvPortStartFirstTask+0x24>)
 800f96a:	6800      	ldr	r0, [r0, #0]
 800f96c:	6800      	ldr	r0, [r0, #0]
 800f96e:	f380 8808 	msr	MSP, r0
 800f972:	f04f 0000 	mov.w	r0, #0
 800f976:	f380 8814 	msr	CONTROL, r0
 800f97a:	b662      	cpsie	i
 800f97c:	b661      	cpsie	f
 800f97e:	f3bf 8f4f 	dsb	sy
 800f982:	f3bf 8f6f 	isb	sy
 800f986:	df00      	svc	0
 800f988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f98a:	bf00      	nop
 800f98c:	e000ed08 	.word	0xe000ed08

0800f990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b086      	sub	sp, #24
 800f994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f996:	4b46      	ldr	r3, [pc, #280]	; (800fab0 <xPortStartScheduler+0x120>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4a46      	ldr	r2, [pc, #280]	; (800fab4 <xPortStartScheduler+0x124>)
 800f99c:	4293      	cmp	r3, r2
 800f99e:	d10a      	bne.n	800f9b6 <xPortStartScheduler+0x26>
	__asm volatile
 800f9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a4:	f383 8811 	msr	BASEPRI, r3
 800f9a8:	f3bf 8f6f 	isb	sy
 800f9ac:	f3bf 8f4f 	dsb	sy
 800f9b0:	613b      	str	r3, [r7, #16]
}
 800f9b2:	bf00      	nop
 800f9b4:	e7fe      	b.n	800f9b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f9b6:	4b3e      	ldr	r3, [pc, #248]	; (800fab0 <xPortStartScheduler+0x120>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	4a3f      	ldr	r2, [pc, #252]	; (800fab8 <xPortStartScheduler+0x128>)
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d10a      	bne.n	800f9d6 <xPortStartScheduler+0x46>
	__asm volatile
 800f9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c4:	f383 8811 	msr	BASEPRI, r3
 800f9c8:	f3bf 8f6f 	isb	sy
 800f9cc:	f3bf 8f4f 	dsb	sy
 800f9d0:	60fb      	str	r3, [r7, #12]
}
 800f9d2:	bf00      	nop
 800f9d4:	e7fe      	b.n	800f9d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f9d6:	4b39      	ldr	r3, [pc, #228]	; (800fabc <xPortStartScheduler+0x12c>)
 800f9d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	781b      	ldrb	r3, [r3, #0]
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	22ff      	movs	r2, #255	; 0xff
 800f9e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f9f0:	78fb      	ldrb	r3, [r7, #3]
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f9f8:	b2da      	uxtb	r2, r3
 800f9fa:	4b31      	ldr	r3, [pc, #196]	; (800fac0 <xPortStartScheduler+0x130>)
 800f9fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f9fe:	4b31      	ldr	r3, [pc, #196]	; (800fac4 <xPortStartScheduler+0x134>)
 800fa00:	2207      	movs	r2, #7
 800fa02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa04:	e009      	b.n	800fa1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fa06:	4b2f      	ldr	r3, [pc, #188]	; (800fac4 <xPortStartScheduler+0x134>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	3b01      	subs	r3, #1
 800fa0c:	4a2d      	ldr	r2, [pc, #180]	; (800fac4 <xPortStartScheduler+0x134>)
 800fa0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fa10:	78fb      	ldrb	r3, [r7, #3]
 800fa12:	b2db      	uxtb	r3, r3
 800fa14:	005b      	lsls	r3, r3, #1
 800fa16:	b2db      	uxtb	r3, r3
 800fa18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa1a:	78fb      	ldrb	r3, [r7, #3]
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa22:	2b80      	cmp	r3, #128	; 0x80
 800fa24:	d0ef      	beq.n	800fa06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fa26:	4b27      	ldr	r3, [pc, #156]	; (800fac4 <xPortStartScheduler+0x134>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	f1c3 0307 	rsb	r3, r3, #7
 800fa2e:	2b04      	cmp	r3, #4
 800fa30:	d00a      	beq.n	800fa48 <xPortStartScheduler+0xb8>
	__asm volatile
 800fa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa36:	f383 8811 	msr	BASEPRI, r3
 800fa3a:	f3bf 8f6f 	isb	sy
 800fa3e:	f3bf 8f4f 	dsb	sy
 800fa42:	60bb      	str	r3, [r7, #8]
}
 800fa44:	bf00      	nop
 800fa46:	e7fe      	b.n	800fa46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fa48:	4b1e      	ldr	r3, [pc, #120]	; (800fac4 <xPortStartScheduler+0x134>)
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	021b      	lsls	r3, r3, #8
 800fa4e:	4a1d      	ldr	r2, [pc, #116]	; (800fac4 <xPortStartScheduler+0x134>)
 800fa50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fa52:	4b1c      	ldr	r3, [pc, #112]	; (800fac4 <xPortStartScheduler+0x134>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fa5a:	4a1a      	ldr	r2, [pc, #104]	; (800fac4 <xPortStartScheduler+0x134>)
 800fa5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	b2da      	uxtb	r2, r3
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fa66:	4b18      	ldr	r3, [pc, #96]	; (800fac8 <xPortStartScheduler+0x138>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4a17      	ldr	r2, [pc, #92]	; (800fac8 <xPortStartScheduler+0x138>)
 800fa6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fa70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fa72:	4b15      	ldr	r3, [pc, #84]	; (800fac8 <xPortStartScheduler+0x138>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	4a14      	ldr	r2, [pc, #80]	; (800fac8 <xPortStartScheduler+0x138>)
 800fa78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fa7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fa7e:	f000 f8dd 	bl	800fc3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fa82:	4b12      	ldr	r3, [pc, #72]	; (800facc <xPortStartScheduler+0x13c>)
 800fa84:	2200      	movs	r2, #0
 800fa86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fa88:	f000 f8fc 	bl	800fc84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fa8c:	4b10      	ldr	r3, [pc, #64]	; (800fad0 <xPortStartScheduler+0x140>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4a0f      	ldr	r2, [pc, #60]	; (800fad0 <xPortStartScheduler+0x140>)
 800fa92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fa96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fa98:	f7ff ff66 	bl	800f968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fa9c:	f7ff f83c 	bl	800eb18 <vTaskSwitchContext>
	prvTaskExitError();
 800faa0:	f7ff ff22 	bl	800f8e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800faa4:	2300      	movs	r3, #0
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3718      	adds	r7, #24
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	e000ed00 	.word	0xe000ed00
 800fab4:	410fc271 	.word	0x410fc271
 800fab8:	410fc270 	.word	0x410fc270
 800fabc:	e000e400 	.word	0xe000e400
 800fac0:	200019bc 	.word	0x200019bc
 800fac4:	200019c0 	.word	0x200019c0
 800fac8:	e000ed20 	.word	0xe000ed20
 800facc:	200000cc 	.word	0x200000cc
 800fad0:	e000ef34 	.word	0xe000ef34

0800fad4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
	__asm volatile
 800fada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fade:	f383 8811 	msr	BASEPRI, r3
 800fae2:	f3bf 8f6f 	isb	sy
 800fae6:	f3bf 8f4f 	dsb	sy
 800faea:	607b      	str	r3, [r7, #4]
}
 800faec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800faee:	4b0f      	ldr	r3, [pc, #60]	; (800fb2c <vPortEnterCritical+0x58>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	3301      	adds	r3, #1
 800faf4:	4a0d      	ldr	r2, [pc, #52]	; (800fb2c <vPortEnterCritical+0x58>)
 800faf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800faf8:	4b0c      	ldr	r3, [pc, #48]	; (800fb2c <vPortEnterCritical+0x58>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d10f      	bne.n	800fb20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fb00:	4b0b      	ldr	r3, [pc, #44]	; (800fb30 <vPortEnterCritical+0x5c>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	b2db      	uxtb	r3, r3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00a      	beq.n	800fb20 <vPortEnterCritical+0x4c>
	__asm volatile
 800fb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb0e:	f383 8811 	msr	BASEPRI, r3
 800fb12:	f3bf 8f6f 	isb	sy
 800fb16:	f3bf 8f4f 	dsb	sy
 800fb1a:	603b      	str	r3, [r7, #0]
}
 800fb1c:	bf00      	nop
 800fb1e:	e7fe      	b.n	800fb1e <vPortEnterCritical+0x4a>
	}
}
 800fb20:	bf00      	nop
 800fb22:	370c      	adds	r7, #12
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr
 800fb2c:	200000cc 	.word	0x200000cc
 800fb30:	e000ed04 	.word	0xe000ed04

0800fb34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fb3a:	4b12      	ldr	r3, [pc, #72]	; (800fb84 <vPortExitCritical+0x50>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d10a      	bne.n	800fb58 <vPortExitCritical+0x24>
	__asm volatile
 800fb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb46:	f383 8811 	msr	BASEPRI, r3
 800fb4a:	f3bf 8f6f 	isb	sy
 800fb4e:	f3bf 8f4f 	dsb	sy
 800fb52:	607b      	str	r3, [r7, #4]
}
 800fb54:	bf00      	nop
 800fb56:	e7fe      	b.n	800fb56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fb58:	4b0a      	ldr	r3, [pc, #40]	; (800fb84 <vPortExitCritical+0x50>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	3b01      	subs	r3, #1
 800fb5e:	4a09      	ldr	r2, [pc, #36]	; (800fb84 <vPortExitCritical+0x50>)
 800fb60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fb62:	4b08      	ldr	r3, [pc, #32]	; (800fb84 <vPortExitCritical+0x50>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d105      	bne.n	800fb76 <vPortExitCritical+0x42>
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	f383 8811 	msr	BASEPRI, r3
}
 800fb74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fb76:	bf00      	nop
 800fb78:	370c      	adds	r7, #12
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop
 800fb84:	200000cc 	.word	0x200000cc
	...

0800fb90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fb90:	f3ef 8009 	mrs	r0, PSP
 800fb94:	f3bf 8f6f 	isb	sy
 800fb98:	4b15      	ldr	r3, [pc, #84]	; (800fbf0 <pxCurrentTCBConst>)
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	f01e 0f10 	tst.w	lr, #16
 800fba0:	bf08      	it	eq
 800fba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbaa:	6010      	str	r0, [r2, #0]
 800fbac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fbb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fbb4:	f380 8811 	msr	BASEPRI, r0
 800fbb8:	f3bf 8f4f 	dsb	sy
 800fbbc:	f3bf 8f6f 	isb	sy
 800fbc0:	f7fe ffaa 	bl	800eb18 <vTaskSwitchContext>
 800fbc4:	f04f 0000 	mov.w	r0, #0
 800fbc8:	f380 8811 	msr	BASEPRI, r0
 800fbcc:	bc09      	pop	{r0, r3}
 800fbce:	6819      	ldr	r1, [r3, #0]
 800fbd0:	6808      	ldr	r0, [r1, #0]
 800fbd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd6:	f01e 0f10 	tst.w	lr, #16
 800fbda:	bf08      	it	eq
 800fbdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fbe0:	f380 8809 	msr	PSP, r0
 800fbe4:	f3bf 8f6f 	isb	sy
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop
 800fbec:	f3af 8000 	nop.w

0800fbf0 <pxCurrentTCBConst>:
 800fbf0:	20001390 	.word	0x20001390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fbf4:	bf00      	nop
 800fbf6:	bf00      	nop

0800fbf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b082      	sub	sp, #8
 800fbfc:	af00      	add	r7, sp, #0
	__asm volatile
 800fbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc02:	f383 8811 	msr	BASEPRI, r3
 800fc06:	f3bf 8f6f 	isb	sy
 800fc0a:	f3bf 8f4f 	dsb	sy
 800fc0e:	607b      	str	r3, [r7, #4]
}
 800fc10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fc12:	f7fe fec7 	bl	800e9a4 <xTaskIncrementTick>
 800fc16:	4603      	mov	r3, r0
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d003      	beq.n	800fc24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc1c:	4b06      	ldr	r3, [pc, #24]	; (800fc38 <xPortSysTickHandler+0x40>)
 800fc1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc22:	601a      	str	r2, [r3, #0]
 800fc24:	2300      	movs	r3, #0
 800fc26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	f383 8811 	msr	BASEPRI, r3
}
 800fc2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fc30:	bf00      	nop
 800fc32:	3708      	adds	r7, #8
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}
 800fc38:	e000ed04 	.word	0xe000ed04

0800fc3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fc40:	4b0b      	ldr	r3, [pc, #44]	; (800fc70 <vPortSetupTimerInterrupt+0x34>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc46:	4b0b      	ldr	r3, [pc, #44]	; (800fc74 <vPortSetupTimerInterrupt+0x38>)
 800fc48:	2200      	movs	r2, #0
 800fc4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fc4c:	4b0a      	ldr	r3, [pc, #40]	; (800fc78 <vPortSetupTimerInterrupt+0x3c>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	4a0a      	ldr	r2, [pc, #40]	; (800fc7c <vPortSetupTimerInterrupt+0x40>)
 800fc52:	fba2 2303 	umull	r2, r3, r2, r3
 800fc56:	099b      	lsrs	r3, r3, #6
 800fc58:	4a09      	ldr	r2, [pc, #36]	; (800fc80 <vPortSetupTimerInterrupt+0x44>)
 800fc5a:	3b01      	subs	r3, #1
 800fc5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fc5e:	4b04      	ldr	r3, [pc, #16]	; (800fc70 <vPortSetupTimerInterrupt+0x34>)
 800fc60:	2207      	movs	r2, #7
 800fc62:	601a      	str	r2, [r3, #0]
}
 800fc64:	bf00      	nop
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop
 800fc70:	e000e010 	.word	0xe000e010
 800fc74:	e000e018 	.word	0xe000e018
 800fc78:	20000088 	.word	0x20000088
 800fc7c:	10624dd3 	.word	0x10624dd3
 800fc80:	e000e014 	.word	0xe000e014

0800fc84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fc84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fc94 <vPortEnableVFP+0x10>
 800fc88:	6801      	ldr	r1, [r0, #0]
 800fc8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fc8e:	6001      	str	r1, [r0, #0]
 800fc90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fc92:	bf00      	nop
 800fc94:	e000ed88 	.word	0xe000ed88

0800fc98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fc98:	b480      	push	{r7}
 800fc9a:	b085      	sub	sp, #20
 800fc9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fc9e:	f3ef 8305 	mrs	r3, IPSR
 800fca2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	2b0f      	cmp	r3, #15
 800fca8:	d914      	bls.n	800fcd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fcaa:	4a17      	ldr	r2, [pc, #92]	; (800fd08 <vPortValidateInterruptPriority+0x70>)
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	4413      	add	r3, r2
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fcb4:	4b15      	ldr	r3, [pc, #84]	; (800fd0c <vPortValidateInterruptPriority+0x74>)
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	7afa      	ldrb	r2, [r7, #11]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d20a      	bcs.n	800fcd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc2:	f383 8811 	msr	BASEPRI, r3
 800fcc6:	f3bf 8f6f 	isb	sy
 800fcca:	f3bf 8f4f 	dsb	sy
 800fcce:	607b      	str	r3, [r7, #4]
}
 800fcd0:	bf00      	nop
 800fcd2:	e7fe      	b.n	800fcd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fcd4:	4b0e      	ldr	r3, [pc, #56]	; (800fd10 <vPortValidateInterruptPriority+0x78>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fcdc:	4b0d      	ldr	r3, [pc, #52]	; (800fd14 <vPortValidateInterruptPriority+0x7c>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d90a      	bls.n	800fcfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce8:	f383 8811 	msr	BASEPRI, r3
 800fcec:	f3bf 8f6f 	isb	sy
 800fcf0:	f3bf 8f4f 	dsb	sy
 800fcf4:	603b      	str	r3, [r7, #0]
}
 800fcf6:	bf00      	nop
 800fcf8:	e7fe      	b.n	800fcf8 <vPortValidateInterruptPriority+0x60>
	}
 800fcfa:	bf00      	nop
 800fcfc:	3714      	adds	r7, #20
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr
 800fd06:	bf00      	nop
 800fd08:	e000e3f0 	.word	0xe000e3f0
 800fd0c:	200019bc 	.word	0x200019bc
 800fd10:	e000ed0c 	.word	0xe000ed0c
 800fd14:	200019c0 	.word	0x200019c0

0800fd18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b08a      	sub	sp, #40	; 0x28
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fd20:	2300      	movs	r3, #0
 800fd22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fd24:	f7fe fd82 	bl	800e82c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fd28:	4b5b      	ldr	r3, [pc, #364]	; (800fe98 <pvPortMalloc+0x180>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d101      	bne.n	800fd34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fd30:	f000 f920 	bl	800ff74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fd34:	4b59      	ldr	r3, [pc, #356]	; (800fe9c <pvPortMalloc+0x184>)
 800fd36:	681a      	ldr	r2, [r3, #0]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	4013      	ands	r3, r2
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	f040 8093 	bne.w	800fe68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d01d      	beq.n	800fd84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fd48:	2208      	movs	r2, #8
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f003 0307 	and.w	r3, r3, #7
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d014      	beq.n	800fd84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f023 0307 	bic.w	r3, r3, #7
 800fd60:	3308      	adds	r3, #8
 800fd62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f003 0307 	and.w	r3, r3, #7
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00a      	beq.n	800fd84 <pvPortMalloc+0x6c>
	__asm volatile
 800fd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd72:	f383 8811 	msr	BASEPRI, r3
 800fd76:	f3bf 8f6f 	isb	sy
 800fd7a:	f3bf 8f4f 	dsb	sy
 800fd7e:	617b      	str	r3, [r7, #20]
}
 800fd80:	bf00      	nop
 800fd82:	e7fe      	b.n	800fd82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d06e      	beq.n	800fe68 <pvPortMalloc+0x150>
 800fd8a:	4b45      	ldr	r3, [pc, #276]	; (800fea0 <pvPortMalloc+0x188>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d869      	bhi.n	800fe68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fd94:	4b43      	ldr	r3, [pc, #268]	; (800fea4 <pvPortMalloc+0x18c>)
 800fd96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fd98:	4b42      	ldr	r3, [pc, #264]	; (800fea4 <pvPortMalloc+0x18c>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd9e:	e004      	b.n	800fdaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdac:	685b      	ldr	r3, [r3, #4]
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d903      	bls.n	800fdbc <pvPortMalloc+0xa4>
 800fdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1f1      	bne.n	800fda0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fdbc:	4b36      	ldr	r3, [pc, #216]	; (800fe98 <pvPortMalloc+0x180>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d050      	beq.n	800fe68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fdc6:	6a3b      	ldr	r3, [r7, #32]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	2208      	movs	r2, #8
 800fdcc:	4413      	add	r3, r2
 800fdce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	6a3b      	ldr	r3, [r7, #32]
 800fdd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdda:	685a      	ldr	r2, [r3, #4]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	1ad2      	subs	r2, r2, r3
 800fde0:	2308      	movs	r3, #8
 800fde2:	005b      	lsls	r3, r3, #1
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d91f      	bls.n	800fe28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fde8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	4413      	add	r3, r2
 800fdee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fdf0:	69bb      	ldr	r3, [r7, #24]
 800fdf2:	f003 0307 	and.w	r3, r3, #7
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d00a      	beq.n	800fe10 <pvPortMalloc+0xf8>
	__asm volatile
 800fdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfe:	f383 8811 	msr	BASEPRI, r3
 800fe02:	f3bf 8f6f 	isb	sy
 800fe06:	f3bf 8f4f 	dsb	sy
 800fe0a:	613b      	str	r3, [r7, #16]
}
 800fe0c:	bf00      	nop
 800fe0e:	e7fe      	b.n	800fe0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fe10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe12:	685a      	ldr	r2, [r3, #4]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	1ad2      	subs	r2, r2, r3
 800fe18:	69bb      	ldr	r3, [r7, #24]
 800fe1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fe1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1e:	687a      	ldr	r2, [r7, #4]
 800fe20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fe22:	69b8      	ldr	r0, [r7, #24]
 800fe24:	f000 f908 	bl	8010038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fe28:	4b1d      	ldr	r3, [pc, #116]	; (800fea0 <pvPortMalloc+0x188>)
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	1ad3      	subs	r3, r2, r3
 800fe32:	4a1b      	ldr	r2, [pc, #108]	; (800fea0 <pvPortMalloc+0x188>)
 800fe34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fe36:	4b1a      	ldr	r3, [pc, #104]	; (800fea0 <pvPortMalloc+0x188>)
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	4b1b      	ldr	r3, [pc, #108]	; (800fea8 <pvPortMalloc+0x190>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d203      	bcs.n	800fe4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fe42:	4b17      	ldr	r3, [pc, #92]	; (800fea0 <pvPortMalloc+0x188>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a18      	ldr	r2, [pc, #96]	; (800fea8 <pvPortMalloc+0x190>)
 800fe48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fe4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4c:	685a      	ldr	r2, [r3, #4]
 800fe4e:	4b13      	ldr	r3, [pc, #76]	; (800fe9c <pvPortMalloc+0x184>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	431a      	orrs	r2, r3
 800fe54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fe58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fe5e:	4b13      	ldr	r3, [pc, #76]	; (800feac <pvPortMalloc+0x194>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	3301      	adds	r3, #1
 800fe64:	4a11      	ldr	r2, [pc, #68]	; (800feac <pvPortMalloc+0x194>)
 800fe66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fe68:	f7fe fcee 	bl	800e848 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	f003 0307 	and.w	r3, r3, #7
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00a      	beq.n	800fe8c <pvPortMalloc+0x174>
	__asm volatile
 800fe76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe7a:	f383 8811 	msr	BASEPRI, r3
 800fe7e:	f3bf 8f6f 	isb	sy
 800fe82:	f3bf 8f4f 	dsb	sy
 800fe86:	60fb      	str	r3, [r7, #12]
}
 800fe88:	bf00      	nop
 800fe8a:	e7fe      	b.n	800fe8a <pvPortMalloc+0x172>
	return pvReturn;
 800fe8c:	69fb      	ldr	r3, [r7, #28]
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3728      	adds	r7, #40	; 0x28
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	2000601c 	.word	0x2000601c
 800fe9c:	20006030 	.word	0x20006030
 800fea0:	20006020 	.word	0x20006020
 800fea4:	20006014 	.word	0x20006014
 800fea8:	20006024 	.word	0x20006024
 800feac:	20006028 	.word	0x20006028

0800feb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b086      	sub	sp, #24
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d04d      	beq.n	800ff5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fec2:	2308      	movs	r3, #8
 800fec4:	425b      	negs	r3, r3
 800fec6:	697a      	ldr	r2, [r7, #20]
 800fec8:	4413      	add	r3, r2
 800feca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	685a      	ldr	r2, [r3, #4]
 800fed4:	4b24      	ldr	r3, [pc, #144]	; (800ff68 <vPortFree+0xb8>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4013      	ands	r3, r2
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d10a      	bne.n	800fef4 <vPortFree+0x44>
	__asm volatile
 800fede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee2:	f383 8811 	msr	BASEPRI, r3
 800fee6:	f3bf 8f6f 	isb	sy
 800feea:	f3bf 8f4f 	dsb	sy
 800feee:	60fb      	str	r3, [r7, #12]
}
 800fef0:	bf00      	nop
 800fef2:	e7fe      	b.n	800fef2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d00a      	beq.n	800ff12 <vPortFree+0x62>
	__asm volatile
 800fefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff00:	f383 8811 	msr	BASEPRI, r3
 800ff04:	f3bf 8f6f 	isb	sy
 800ff08:	f3bf 8f4f 	dsb	sy
 800ff0c:	60bb      	str	r3, [r7, #8]
}
 800ff0e:	bf00      	nop
 800ff10:	e7fe      	b.n	800ff10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	685a      	ldr	r2, [r3, #4]
 800ff16:	4b14      	ldr	r3, [pc, #80]	; (800ff68 <vPortFree+0xb8>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	4013      	ands	r3, r2
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d01e      	beq.n	800ff5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d11a      	bne.n	800ff5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	685a      	ldr	r2, [r3, #4]
 800ff2c:	4b0e      	ldr	r3, [pc, #56]	; (800ff68 <vPortFree+0xb8>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	43db      	mvns	r3, r3
 800ff32:	401a      	ands	r2, r3
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ff38:	f7fe fc78 	bl	800e82c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	685a      	ldr	r2, [r3, #4]
 800ff40:	4b0a      	ldr	r3, [pc, #40]	; (800ff6c <vPortFree+0xbc>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	4413      	add	r3, r2
 800ff46:	4a09      	ldr	r2, [pc, #36]	; (800ff6c <vPortFree+0xbc>)
 800ff48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ff4a:	6938      	ldr	r0, [r7, #16]
 800ff4c:	f000 f874 	bl	8010038 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ff50:	4b07      	ldr	r3, [pc, #28]	; (800ff70 <vPortFree+0xc0>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	3301      	adds	r3, #1
 800ff56:	4a06      	ldr	r2, [pc, #24]	; (800ff70 <vPortFree+0xc0>)
 800ff58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ff5a:	f7fe fc75 	bl	800e848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ff5e:	bf00      	nop
 800ff60:	3718      	adds	r7, #24
 800ff62:	46bd      	mov	sp, r7
 800ff64:	bd80      	pop	{r7, pc}
 800ff66:	bf00      	nop
 800ff68:	20006030 	.word	0x20006030
 800ff6c:	20006020 	.word	0x20006020
 800ff70:	2000602c 	.word	0x2000602c

0800ff74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ff74:	b480      	push	{r7}
 800ff76:	b085      	sub	sp, #20
 800ff78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ff7a:	f244 6350 	movw	r3, #18000	; 0x4650
 800ff7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ff80:	4b27      	ldr	r3, [pc, #156]	; (8010020 <prvHeapInit+0xac>)
 800ff82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f003 0307 	and.w	r3, r3, #7
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d00c      	beq.n	800ffa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	3307      	adds	r3, #7
 800ff92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f023 0307 	bic.w	r3, r3, #7
 800ff9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff9c:	68ba      	ldr	r2, [r7, #8]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	1ad3      	subs	r3, r2, r3
 800ffa2:	4a1f      	ldr	r2, [pc, #124]	; (8010020 <prvHeapInit+0xac>)
 800ffa4:	4413      	add	r3, r2
 800ffa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ffac:	4a1d      	ldr	r2, [pc, #116]	; (8010024 <prvHeapInit+0xb0>)
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ffb2:	4b1c      	ldr	r3, [pc, #112]	; (8010024 <prvHeapInit+0xb0>)
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	68ba      	ldr	r2, [r7, #8]
 800ffbc:	4413      	add	r3, r2
 800ffbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ffc0:	2208      	movs	r2, #8
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	1a9b      	subs	r3, r3, r2
 800ffc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f023 0307 	bic.w	r3, r3, #7
 800ffce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	4a15      	ldr	r2, [pc, #84]	; (8010028 <prvHeapInit+0xb4>)
 800ffd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ffd6:	4b14      	ldr	r3, [pc, #80]	; (8010028 <prvHeapInit+0xb4>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ffde:	4b12      	ldr	r3, [pc, #72]	; (8010028 <prvHeapInit+0xb4>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	68fa      	ldr	r2, [r7, #12]
 800ffee:	1ad2      	subs	r2, r2, r3
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fff4:	4b0c      	ldr	r3, [pc, #48]	; (8010028 <prvHeapInit+0xb4>)
 800fff6:	681a      	ldr	r2, [r3, #0]
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	4a0a      	ldr	r2, [pc, #40]	; (801002c <prvHeapInit+0xb8>)
 8010002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	685b      	ldr	r3, [r3, #4]
 8010008:	4a09      	ldr	r2, [pc, #36]	; (8010030 <prvHeapInit+0xbc>)
 801000a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801000c:	4b09      	ldr	r3, [pc, #36]	; (8010034 <prvHeapInit+0xc0>)
 801000e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010012:	601a      	str	r2, [r3, #0]
}
 8010014:	bf00      	nop
 8010016:	3714      	adds	r7, #20
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr
 8010020:	200019c4 	.word	0x200019c4
 8010024:	20006014 	.word	0x20006014
 8010028:	2000601c 	.word	0x2000601c
 801002c:	20006024 	.word	0x20006024
 8010030:	20006020 	.word	0x20006020
 8010034:	20006030 	.word	0x20006030

08010038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010038:	b480      	push	{r7}
 801003a:	b085      	sub	sp, #20
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010040:	4b28      	ldr	r3, [pc, #160]	; (80100e4 <prvInsertBlockIntoFreeList+0xac>)
 8010042:	60fb      	str	r3, [r7, #12]
 8010044:	e002      	b.n	801004c <prvInsertBlockIntoFreeList+0x14>
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	60fb      	str	r3, [r7, #12]
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	429a      	cmp	r2, r3
 8010054:	d8f7      	bhi.n	8010046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	68ba      	ldr	r2, [r7, #8]
 8010060:	4413      	add	r3, r2
 8010062:	687a      	ldr	r2, [r7, #4]
 8010064:	429a      	cmp	r2, r3
 8010066:	d108      	bne.n	801007a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	685a      	ldr	r2, [r3, #4]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	441a      	add	r2, r3
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	68ba      	ldr	r2, [r7, #8]
 8010084:	441a      	add	r2, r3
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d118      	bne.n	80100c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681a      	ldr	r2, [r3, #0]
 8010092:	4b15      	ldr	r3, [pc, #84]	; (80100e8 <prvInsertBlockIntoFreeList+0xb0>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	429a      	cmp	r2, r3
 8010098:	d00d      	beq.n	80100b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	685a      	ldr	r2, [r3, #4]
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	441a      	add	r2, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	601a      	str	r2, [r3, #0]
 80100b4:	e008      	b.n	80100c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80100b6:	4b0c      	ldr	r3, [pc, #48]	; (80100e8 <prvInsertBlockIntoFreeList+0xb0>)
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	601a      	str	r2, [r3, #0]
 80100be:	e003      	b.n	80100c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	681a      	ldr	r2, [r3, #0]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80100c8:	68fa      	ldr	r2, [r7, #12]
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d002      	beq.n	80100d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	687a      	ldr	r2, [r7, #4]
 80100d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80100d6:	bf00      	nop
 80100d8:	3714      	adds	r7, #20
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr
 80100e2:	bf00      	nop
 80100e4:	20006014 	.word	0x20006014
 80100e8:	2000601c 	.word	0x2000601c

080100ec <_Znwj>:
 80100ec:	2801      	cmp	r0, #1
 80100ee:	bf38      	it	cc
 80100f0:	2001      	movcc	r0, #1
 80100f2:	b510      	push	{r4, lr}
 80100f4:	4604      	mov	r4, r0
 80100f6:	4620      	mov	r0, r4
 80100f8:	f001 f908 	bl	801130c <malloc>
 80100fc:	b930      	cbnz	r0, 801010c <_Znwj+0x20>
 80100fe:	f000 f81b 	bl	8010138 <_ZSt15get_new_handlerv>
 8010102:	b908      	cbnz	r0, 8010108 <_Znwj+0x1c>
 8010104:	f000 ffd6 	bl	80110b4 <abort>
 8010108:	4780      	blx	r0
 801010a:	e7f4      	b.n	80100f6 <_Znwj+0xa>
 801010c:	bd10      	pop	{r4, pc}

0801010e <__cxa_pure_virtual>:
 801010e:	b508      	push	{r3, lr}
 8010110:	f000 f80c 	bl	801012c <_ZSt9terminatev>

08010114 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010114:	b508      	push	{r3, lr}
 8010116:	4780      	blx	r0
 8010118:	f000 ffcc 	bl	80110b4 <abort>

0801011c <_ZSt13get_terminatev>:
 801011c:	4b02      	ldr	r3, [pc, #8]	; (8010128 <_ZSt13get_terminatev+0xc>)
 801011e:	6818      	ldr	r0, [r3, #0]
 8010120:	f3bf 8f5b 	dmb	ish
 8010124:	4770      	bx	lr
 8010126:	bf00      	nop
 8010128:	200000d0 	.word	0x200000d0

0801012c <_ZSt9terminatev>:
 801012c:	b508      	push	{r3, lr}
 801012e:	f7ff fff5 	bl	801011c <_ZSt13get_terminatev>
 8010132:	f7ff ffef 	bl	8010114 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08010138 <_ZSt15get_new_handlerv>:
 8010138:	4b02      	ldr	r3, [pc, #8]	; (8010144 <_ZSt15get_new_handlerv+0xc>)
 801013a:	6818      	ldr	r0, [r3, #0]
 801013c:	f3bf 8f5b 	dmb	ish
 8010140:	4770      	bx	lr
 8010142:	bf00      	nop
 8010144:	20006034 	.word	0x20006034

08010148 <pow>:
 8010148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801014c:	ec59 8b10 	vmov	r8, r9, d0
 8010150:	ec57 6b11 	vmov	r6, r7, d1
 8010154:	f000 f8a8 	bl	80102a8 <__ieee754_pow>
 8010158:	4b4e      	ldr	r3, [pc, #312]	; (8010294 <pow+0x14c>)
 801015a:	f993 3000 	ldrsb.w	r3, [r3]
 801015e:	3301      	adds	r3, #1
 8010160:	ec55 4b10 	vmov	r4, r5, d0
 8010164:	d015      	beq.n	8010192 <pow+0x4a>
 8010166:	4632      	mov	r2, r6
 8010168:	463b      	mov	r3, r7
 801016a:	4630      	mov	r0, r6
 801016c:	4639      	mov	r1, r7
 801016e:	f7f0 fced 	bl	8000b4c <__aeabi_dcmpun>
 8010172:	b970      	cbnz	r0, 8010192 <pow+0x4a>
 8010174:	4642      	mov	r2, r8
 8010176:	464b      	mov	r3, r9
 8010178:	4640      	mov	r0, r8
 801017a:	4649      	mov	r1, r9
 801017c:	f7f0 fce6 	bl	8000b4c <__aeabi_dcmpun>
 8010180:	2200      	movs	r2, #0
 8010182:	2300      	movs	r3, #0
 8010184:	b148      	cbz	r0, 801019a <pow+0x52>
 8010186:	4630      	mov	r0, r6
 8010188:	4639      	mov	r1, r7
 801018a:	f7f0 fcad 	bl	8000ae8 <__aeabi_dcmpeq>
 801018e:	2800      	cmp	r0, #0
 8010190:	d17d      	bne.n	801028e <pow+0x146>
 8010192:	ec45 4b10 	vmov	d0, r4, r5
 8010196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801019a:	4640      	mov	r0, r8
 801019c:	4649      	mov	r1, r9
 801019e:	f7f0 fca3 	bl	8000ae8 <__aeabi_dcmpeq>
 80101a2:	b1e0      	cbz	r0, 80101de <pow+0x96>
 80101a4:	2200      	movs	r2, #0
 80101a6:	2300      	movs	r3, #0
 80101a8:	4630      	mov	r0, r6
 80101aa:	4639      	mov	r1, r7
 80101ac:	f7f0 fc9c 	bl	8000ae8 <__aeabi_dcmpeq>
 80101b0:	2800      	cmp	r0, #0
 80101b2:	d16c      	bne.n	801028e <pow+0x146>
 80101b4:	ec47 6b10 	vmov	d0, r6, r7
 80101b8:	f000 fe55 	bl	8010e66 <finite>
 80101bc:	2800      	cmp	r0, #0
 80101be:	d0e8      	beq.n	8010192 <pow+0x4a>
 80101c0:	2200      	movs	r2, #0
 80101c2:	2300      	movs	r3, #0
 80101c4:	4630      	mov	r0, r6
 80101c6:	4639      	mov	r1, r7
 80101c8:	f7f0 fc98 	bl	8000afc <__aeabi_dcmplt>
 80101cc:	2800      	cmp	r0, #0
 80101ce:	d0e0      	beq.n	8010192 <pow+0x4a>
 80101d0:	f000 ff78 	bl	80110c4 <__errno>
 80101d4:	2321      	movs	r3, #33	; 0x21
 80101d6:	6003      	str	r3, [r0, #0]
 80101d8:	2400      	movs	r4, #0
 80101da:	4d2f      	ldr	r5, [pc, #188]	; (8010298 <pow+0x150>)
 80101dc:	e7d9      	b.n	8010192 <pow+0x4a>
 80101de:	ec45 4b10 	vmov	d0, r4, r5
 80101e2:	f000 fe40 	bl	8010e66 <finite>
 80101e6:	bbb8      	cbnz	r0, 8010258 <pow+0x110>
 80101e8:	ec49 8b10 	vmov	d0, r8, r9
 80101ec:	f000 fe3b 	bl	8010e66 <finite>
 80101f0:	b390      	cbz	r0, 8010258 <pow+0x110>
 80101f2:	ec47 6b10 	vmov	d0, r6, r7
 80101f6:	f000 fe36 	bl	8010e66 <finite>
 80101fa:	b368      	cbz	r0, 8010258 <pow+0x110>
 80101fc:	4622      	mov	r2, r4
 80101fe:	462b      	mov	r3, r5
 8010200:	4620      	mov	r0, r4
 8010202:	4629      	mov	r1, r5
 8010204:	f7f0 fca2 	bl	8000b4c <__aeabi_dcmpun>
 8010208:	b160      	cbz	r0, 8010224 <pow+0xdc>
 801020a:	f000 ff5b 	bl	80110c4 <__errno>
 801020e:	2321      	movs	r3, #33	; 0x21
 8010210:	6003      	str	r3, [r0, #0]
 8010212:	2200      	movs	r2, #0
 8010214:	2300      	movs	r3, #0
 8010216:	4610      	mov	r0, r2
 8010218:	4619      	mov	r1, r3
 801021a:	f7f0 fb27 	bl	800086c <__aeabi_ddiv>
 801021e:	4604      	mov	r4, r0
 8010220:	460d      	mov	r5, r1
 8010222:	e7b6      	b.n	8010192 <pow+0x4a>
 8010224:	f000 ff4e 	bl	80110c4 <__errno>
 8010228:	2322      	movs	r3, #34	; 0x22
 801022a:	6003      	str	r3, [r0, #0]
 801022c:	2200      	movs	r2, #0
 801022e:	2300      	movs	r3, #0
 8010230:	4640      	mov	r0, r8
 8010232:	4649      	mov	r1, r9
 8010234:	f7f0 fc62 	bl	8000afc <__aeabi_dcmplt>
 8010238:	2400      	movs	r4, #0
 801023a:	b158      	cbz	r0, 8010254 <pow+0x10c>
 801023c:	ec47 6b10 	vmov	d0, r6, r7
 8010240:	f000 fe26 	bl	8010e90 <rint>
 8010244:	4632      	mov	r2, r6
 8010246:	ec51 0b10 	vmov	r0, r1, d0
 801024a:	463b      	mov	r3, r7
 801024c:	f7f0 fc4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8010250:	2800      	cmp	r0, #0
 8010252:	d0c2      	beq.n	80101da <pow+0x92>
 8010254:	4d11      	ldr	r5, [pc, #68]	; (801029c <pow+0x154>)
 8010256:	e79c      	b.n	8010192 <pow+0x4a>
 8010258:	2200      	movs	r2, #0
 801025a:	2300      	movs	r3, #0
 801025c:	4620      	mov	r0, r4
 801025e:	4629      	mov	r1, r5
 8010260:	f7f0 fc42 	bl	8000ae8 <__aeabi_dcmpeq>
 8010264:	2800      	cmp	r0, #0
 8010266:	d094      	beq.n	8010192 <pow+0x4a>
 8010268:	ec49 8b10 	vmov	d0, r8, r9
 801026c:	f000 fdfb 	bl	8010e66 <finite>
 8010270:	2800      	cmp	r0, #0
 8010272:	d08e      	beq.n	8010192 <pow+0x4a>
 8010274:	ec47 6b10 	vmov	d0, r6, r7
 8010278:	f000 fdf5 	bl	8010e66 <finite>
 801027c:	2800      	cmp	r0, #0
 801027e:	d088      	beq.n	8010192 <pow+0x4a>
 8010280:	f000 ff20 	bl	80110c4 <__errno>
 8010284:	2322      	movs	r3, #34	; 0x22
 8010286:	6003      	str	r3, [r0, #0]
 8010288:	2400      	movs	r4, #0
 801028a:	2500      	movs	r5, #0
 801028c:	e781      	b.n	8010192 <pow+0x4a>
 801028e:	4d04      	ldr	r5, [pc, #16]	; (80102a0 <pow+0x158>)
 8010290:	2400      	movs	r4, #0
 8010292:	e77e      	b.n	8010192 <pow+0x4a>
 8010294:	200000d4 	.word	0x200000d4
 8010298:	fff00000 	.word	0xfff00000
 801029c:	7ff00000 	.word	0x7ff00000
 80102a0:	3ff00000 	.word	0x3ff00000
 80102a4:	00000000 	.word	0x00000000

080102a8 <__ieee754_pow>:
 80102a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102ac:	ed2d 8b06 	vpush	{d8-d10}
 80102b0:	b08d      	sub	sp, #52	; 0x34
 80102b2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80102b6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80102ba:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80102be:	ea56 0100 	orrs.w	r1, r6, r0
 80102c2:	ec53 2b10 	vmov	r2, r3, d0
 80102c6:	f000 84d1 	beq.w	8010c6c <__ieee754_pow+0x9c4>
 80102ca:	497f      	ldr	r1, [pc, #508]	; (80104c8 <__ieee754_pow+0x220>)
 80102cc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80102d0:	428c      	cmp	r4, r1
 80102d2:	ee10 8a10 	vmov	r8, s0
 80102d6:	4699      	mov	r9, r3
 80102d8:	dc09      	bgt.n	80102ee <__ieee754_pow+0x46>
 80102da:	d103      	bne.n	80102e4 <__ieee754_pow+0x3c>
 80102dc:	b97a      	cbnz	r2, 80102fe <__ieee754_pow+0x56>
 80102de:	42a6      	cmp	r6, r4
 80102e0:	dd02      	ble.n	80102e8 <__ieee754_pow+0x40>
 80102e2:	e00c      	b.n	80102fe <__ieee754_pow+0x56>
 80102e4:	428e      	cmp	r6, r1
 80102e6:	dc02      	bgt.n	80102ee <__ieee754_pow+0x46>
 80102e8:	428e      	cmp	r6, r1
 80102ea:	d110      	bne.n	801030e <__ieee754_pow+0x66>
 80102ec:	b178      	cbz	r0, 801030e <__ieee754_pow+0x66>
 80102ee:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80102f2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80102f6:	ea54 0308 	orrs.w	r3, r4, r8
 80102fa:	f000 84b7 	beq.w	8010c6c <__ieee754_pow+0x9c4>
 80102fe:	4873      	ldr	r0, [pc, #460]	; (80104cc <__ieee754_pow+0x224>)
 8010300:	b00d      	add	sp, #52	; 0x34
 8010302:	ecbd 8b06 	vpop	{d8-d10}
 8010306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801030a:	f000 bdb9 	b.w	8010e80 <nan>
 801030e:	f1b9 0f00 	cmp.w	r9, #0
 8010312:	da36      	bge.n	8010382 <__ieee754_pow+0xda>
 8010314:	496e      	ldr	r1, [pc, #440]	; (80104d0 <__ieee754_pow+0x228>)
 8010316:	428e      	cmp	r6, r1
 8010318:	dc51      	bgt.n	80103be <__ieee754_pow+0x116>
 801031a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801031e:	428e      	cmp	r6, r1
 8010320:	f340 84af 	ble.w	8010c82 <__ieee754_pow+0x9da>
 8010324:	1531      	asrs	r1, r6, #20
 8010326:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801032a:	2914      	cmp	r1, #20
 801032c:	dd0f      	ble.n	801034e <__ieee754_pow+0xa6>
 801032e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8010332:	fa20 fc01 	lsr.w	ip, r0, r1
 8010336:	fa0c f101 	lsl.w	r1, ip, r1
 801033a:	4281      	cmp	r1, r0
 801033c:	f040 84a1 	bne.w	8010c82 <__ieee754_pow+0x9da>
 8010340:	f00c 0c01 	and.w	ip, ip, #1
 8010344:	f1cc 0102 	rsb	r1, ip, #2
 8010348:	9100      	str	r1, [sp, #0]
 801034a:	b180      	cbz	r0, 801036e <__ieee754_pow+0xc6>
 801034c:	e059      	b.n	8010402 <__ieee754_pow+0x15a>
 801034e:	2800      	cmp	r0, #0
 8010350:	d155      	bne.n	80103fe <__ieee754_pow+0x156>
 8010352:	f1c1 0114 	rsb	r1, r1, #20
 8010356:	fa46 fc01 	asr.w	ip, r6, r1
 801035a:	fa0c f101 	lsl.w	r1, ip, r1
 801035e:	42b1      	cmp	r1, r6
 8010360:	f040 848c 	bne.w	8010c7c <__ieee754_pow+0x9d4>
 8010364:	f00c 0c01 	and.w	ip, ip, #1
 8010368:	f1cc 0102 	rsb	r1, ip, #2
 801036c:	9100      	str	r1, [sp, #0]
 801036e:	4959      	ldr	r1, [pc, #356]	; (80104d4 <__ieee754_pow+0x22c>)
 8010370:	428e      	cmp	r6, r1
 8010372:	d12d      	bne.n	80103d0 <__ieee754_pow+0x128>
 8010374:	2f00      	cmp	r7, #0
 8010376:	da79      	bge.n	801046c <__ieee754_pow+0x1c4>
 8010378:	4956      	ldr	r1, [pc, #344]	; (80104d4 <__ieee754_pow+0x22c>)
 801037a:	2000      	movs	r0, #0
 801037c:	f7f0 fa76 	bl	800086c <__aeabi_ddiv>
 8010380:	e016      	b.n	80103b0 <__ieee754_pow+0x108>
 8010382:	2100      	movs	r1, #0
 8010384:	9100      	str	r1, [sp, #0]
 8010386:	2800      	cmp	r0, #0
 8010388:	d13b      	bne.n	8010402 <__ieee754_pow+0x15a>
 801038a:	494f      	ldr	r1, [pc, #316]	; (80104c8 <__ieee754_pow+0x220>)
 801038c:	428e      	cmp	r6, r1
 801038e:	d1ee      	bne.n	801036e <__ieee754_pow+0xc6>
 8010390:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010394:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010398:	ea53 0308 	orrs.w	r3, r3, r8
 801039c:	f000 8466 	beq.w	8010c6c <__ieee754_pow+0x9c4>
 80103a0:	4b4d      	ldr	r3, [pc, #308]	; (80104d8 <__ieee754_pow+0x230>)
 80103a2:	429c      	cmp	r4, r3
 80103a4:	dd0d      	ble.n	80103c2 <__ieee754_pow+0x11a>
 80103a6:	2f00      	cmp	r7, #0
 80103a8:	f280 8464 	bge.w	8010c74 <__ieee754_pow+0x9cc>
 80103ac:	2000      	movs	r0, #0
 80103ae:	2100      	movs	r1, #0
 80103b0:	ec41 0b10 	vmov	d0, r0, r1
 80103b4:	b00d      	add	sp, #52	; 0x34
 80103b6:	ecbd 8b06 	vpop	{d8-d10}
 80103ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103be:	2102      	movs	r1, #2
 80103c0:	e7e0      	b.n	8010384 <__ieee754_pow+0xdc>
 80103c2:	2f00      	cmp	r7, #0
 80103c4:	daf2      	bge.n	80103ac <__ieee754_pow+0x104>
 80103c6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80103ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80103ce:	e7ef      	b.n	80103b0 <__ieee754_pow+0x108>
 80103d0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80103d4:	d104      	bne.n	80103e0 <__ieee754_pow+0x138>
 80103d6:	4610      	mov	r0, r2
 80103d8:	4619      	mov	r1, r3
 80103da:	f7f0 f91d 	bl	8000618 <__aeabi_dmul>
 80103de:	e7e7      	b.n	80103b0 <__ieee754_pow+0x108>
 80103e0:	493e      	ldr	r1, [pc, #248]	; (80104dc <__ieee754_pow+0x234>)
 80103e2:	428f      	cmp	r7, r1
 80103e4:	d10d      	bne.n	8010402 <__ieee754_pow+0x15a>
 80103e6:	f1b9 0f00 	cmp.w	r9, #0
 80103ea:	db0a      	blt.n	8010402 <__ieee754_pow+0x15a>
 80103ec:	ec43 2b10 	vmov	d0, r2, r3
 80103f0:	b00d      	add	sp, #52	; 0x34
 80103f2:	ecbd 8b06 	vpop	{d8-d10}
 80103f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103fa:	f000 bc77 	b.w	8010cec <__ieee754_sqrt>
 80103fe:	2100      	movs	r1, #0
 8010400:	9100      	str	r1, [sp, #0]
 8010402:	ec43 2b10 	vmov	d0, r2, r3
 8010406:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801040a:	f000 fd23 	bl	8010e54 <fabs>
 801040e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010412:	ec51 0b10 	vmov	r0, r1, d0
 8010416:	f1b8 0f00 	cmp.w	r8, #0
 801041a:	d12a      	bne.n	8010472 <__ieee754_pow+0x1ca>
 801041c:	b12c      	cbz	r4, 801042a <__ieee754_pow+0x182>
 801041e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80104d4 <__ieee754_pow+0x22c>
 8010422:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8010426:	45e6      	cmp	lr, ip
 8010428:	d123      	bne.n	8010472 <__ieee754_pow+0x1ca>
 801042a:	2f00      	cmp	r7, #0
 801042c:	da05      	bge.n	801043a <__ieee754_pow+0x192>
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	2000      	movs	r0, #0
 8010434:	4927      	ldr	r1, [pc, #156]	; (80104d4 <__ieee754_pow+0x22c>)
 8010436:	f7f0 fa19 	bl	800086c <__aeabi_ddiv>
 801043a:	f1b9 0f00 	cmp.w	r9, #0
 801043e:	dab7      	bge.n	80103b0 <__ieee754_pow+0x108>
 8010440:	9b00      	ldr	r3, [sp, #0]
 8010442:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010446:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801044a:	4323      	orrs	r3, r4
 801044c:	d108      	bne.n	8010460 <__ieee754_pow+0x1b8>
 801044e:	4602      	mov	r2, r0
 8010450:	460b      	mov	r3, r1
 8010452:	4610      	mov	r0, r2
 8010454:	4619      	mov	r1, r3
 8010456:	f7ef ff27 	bl	80002a8 <__aeabi_dsub>
 801045a:	4602      	mov	r2, r0
 801045c:	460b      	mov	r3, r1
 801045e:	e78d      	b.n	801037c <__ieee754_pow+0xd4>
 8010460:	9b00      	ldr	r3, [sp, #0]
 8010462:	2b01      	cmp	r3, #1
 8010464:	d1a4      	bne.n	80103b0 <__ieee754_pow+0x108>
 8010466:	4602      	mov	r2, r0
 8010468:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801046c:	4610      	mov	r0, r2
 801046e:	4619      	mov	r1, r3
 8010470:	e79e      	b.n	80103b0 <__ieee754_pow+0x108>
 8010472:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8010476:	f10c 35ff 	add.w	r5, ip, #4294967295
 801047a:	950a      	str	r5, [sp, #40]	; 0x28
 801047c:	9d00      	ldr	r5, [sp, #0]
 801047e:	46ac      	mov	ip, r5
 8010480:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8010482:	ea5c 0505 	orrs.w	r5, ip, r5
 8010486:	d0e4      	beq.n	8010452 <__ieee754_pow+0x1aa>
 8010488:	4b15      	ldr	r3, [pc, #84]	; (80104e0 <__ieee754_pow+0x238>)
 801048a:	429e      	cmp	r6, r3
 801048c:	f340 80fc 	ble.w	8010688 <__ieee754_pow+0x3e0>
 8010490:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010494:	429e      	cmp	r6, r3
 8010496:	4b10      	ldr	r3, [pc, #64]	; (80104d8 <__ieee754_pow+0x230>)
 8010498:	dd07      	ble.n	80104aa <__ieee754_pow+0x202>
 801049a:	429c      	cmp	r4, r3
 801049c:	dc0a      	bgt.n	80104b4 <__ieee754_pow+0x20c>
 801049e:	2f00      	cmp	r7, #0
 80104a0:	da84      	bge.n	80103ac <__ieee754_pow+0x104>
 80104a2:	a307      	add	r3, pc, #28	; (adr r3, 80104c0 <__ieee754_pow+0x218>)
 80104a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a8:	e795      	b.n	80103d6 <__ieee754_pow+0x12e>
 80104aa:	429c      	cmp	r4, r3
 80104ac:	dbf7      	blt.n	801049e <__ieee754_pow+0x1f6>
 80104ae:	4b09      	ldr	r3, [pc, #36]	; (80104d4 <__ieee754_pow+0x22c>)
 80104b0:	429c      	cmp	r4, r3
 80104b2:	dd17      	ble.n	80104e4 <__ieee754_pow+0x23c>
 80104b4:	2f00      	cmp	r7, #0
 80104b6:	dcf4      	bgt.n	80104a2 <__ieee754_pow+0x1fa>
 80104b8:	e778      	b.n	80103ac <__ieee754_pow+0x104>
 80104ba:	bf00      	nop
 80104bc:	f3af 8000 	nop.w
 80104c0:	8800759c 	.word	0x8800759c
 80104c4:	7e37e43c 	.word	0x7e37e43c
 80104c8:	7ff00000 	.word	0x7ff00000
 80104cc:	080177c3 	.word	0x080177c3
 80104d0:	433fffff 	.word	0x433fffff
 80104d4:	3ff00000 	.word	0x3ff00000
 80104d8:	3fefffff 	.word	0x3fefffff
 80104dc:	3fe00000 	.word	0x3fe00000
 80104e0:	41e00000 	.word	0x41e00000
 80104e4:	4b64      	ldr	r3, [pc, #400]	; (8010678 <__ieee754_pow+0x3d0>)
 80104e6:	2200      	movs	r2, #0
 80104e8:	f7ef fede 	bl	80002a8 <__aeabi_dsub>
 80104ec:	a356      	add	r3, pc, #344	; (adr r3, 8010648 <__ieee754_pow+0x3a0>)
 80104ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f2:	4604      	mov	r4, r0
 80104f4:	460d      	mov	r5, r1
 80104f6:	f7f0 f88f 	bl	8000618 <__aeabi_dmul>
 80104fa:	a355      	add	r3, pc, #340	; (adr r3, 8010650 <__ieee754_pow+0x3a8>)
 80104fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010500:	4606      	mov	r6, r0
 8010502:	460f      	mov	r7, r1
 8010504:	4620      	mov	r0, r4
 8010506:	4629      	mov	r1, r5
 8010508:	f7f0 f886 	bl	8000618 <__aeabi_dmul>
 801050c:	4b5b      	ldr	r3, [pc, #364]	; (801067c <__ieee754_pow+0x3d4>)
 801050e:	4682      	mov	sl, r0
 8010510:	468b      	mov	fp, r1
 8010512:	2200      	movs	r2, #0
 8010514:	4620      	mov	r0, r4
 8010516:	4629      	mov	r1, r5
 8010518:	f7f0 f87e 	bl	8000618 <__aeabi_dmul>
 801051c:	4602      	mov	r2, r0
 801051e:	460b      	mov	r3, r1
 8010520:	a14d      	add	r1, pc, #308	; (adr r1, 8010658 <__ieee754_pow+0x3b0>)
 8010522:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010526:	f7ef febf 	bl	80002a8 <__aeabi_dsub>
 801052a:	4622      	mov	r2, r4
 801052c:	462b      	mov	r3, r5
 801052e:	f7f0 f873 	bl	8000618 <__aeabi_dmul>
 8010532:	4602      	mov	r2, r0
 8010534:	460b      	mov	r3, r1
 8010536:	2000      	movs	r0, #0
 8010538:	4951      	ldr	r1, [pc, #324]	; (8010680 <__ieee754_pow+0x3d8>)
 801053a:	f7ef feb5 	bl	80002a8 <__aeabi_dsub>
 801053e:	4622      	mov	r2, r4
 8010540:	4680      	mov	r8, r0
 8010542:	4689      	mov	r9, r1
 8010544:	462b      	mov	r3, r5
 8010546:	4620      	mov	r0, r4
 8010548:	4629      	mov	r1, r5
 801054a:	f7f0 f865 	bl	8000618 <__aeabi_dmul>
 801054e:	4602      	mov	r2, r0
 8010550:	460b      	mov	r3, r1
 8010552:	4640      	mov	r0, r8
 8010554:	4649      	mov	r1, r9
 8010556:	f7f0 f85f 	bl	8000618 <__aeabi_dmul>
 801055a:	a341      	add	r3, pc, #260	; (adr r3, 8010660 <__ieee754_pow+0x3b8>)
 801055c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010560:	f7f0 f85a 	bl	8000618 <__aeabi_dmul>
 8010564:	4602      	mov	r2, r0
 8010566:	460b      	mov	r3, r1
 8010568:	4650      	mov	r0, sl
 801056a:	4659      	mov	r1, fp
 801056c:	f7ef fe9c 	bl	80002a8 <__aeabi_dsub>
 8010570:	4602      	mov	r2, r0
 8010572:	460b      	mov	r3, r1
 8010574:	4680      	mov	r8, r0
 8010576:	4689      	mov	r9, r1
 8010578:	4630      	mov	r0, r6
 801057a:	4639      	mov	r1, r7
 801057c:	f7ef fe96 	bl	80002ac <__adddf3>
 8010580:	2400      	movs	r4, #0
 8010582:	4632      	mov	r2, r6
 8010584:	463b      	mov	r3, r7
 8010586:	4620      	mov	r0, r4
 8010588:	460d      	mov	r5, r1
 801058a:	f7ef fe8d 	bl	80002a8 <__aeabi_dsub>
 801058e:	4602      	mov	r2, r0
 8010590:	460b      	mov	r3, r1
 8010592:	4640      	mov	r0, r8
 8010594:	4649      	mov	r1, r9
 8010596:	f7ef fe87 	bl	80002a8 <__aeabi_dsub>
 801059a:	9b00      	ldr	r3, [sp, #0]
 801059c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801059e:	3b01      	subs	r3, #1
 80105a0:	4313      	orrs	r3, r2
 80105a2:	4682      	mov	sl, r0
 80105a4:	468b      	mov	fp, r1
 80105a6:	f040 81f1 	bne.w	801098c <__ieee754_pow+0x6e4>
 80105aa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8010668 <__ieee754_pow+0x3c0>
 80105ae:	eeb0 8a47 	vmov.f32	s16, s14
 80105b2:	eef0 8a67 	vmov.f32	s17, s15
 80105b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80105ba:	2600      	movs	r6, #0
 80105bc:	4632      	mov	r2, r6
 80105be:	463b      	mov	r3, r7
 80105c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105c4:	f7ef fe70 	bl	80002a8 <__aeabi_dsub>
 80105c8:	4622      	mov	r2, r4
 80105ca:	462b      	mov	r3, r5
 80105cc:	f7f0 f824 	bl	8000618 <__aeabi_dmul>
 80105d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80105d4:	4680      	mov	r8, r0
 80105d6:	4689      	mov	r9, r1
 80105d8:	4650      	mov	r0, sl
 80105da:	4659      	mov	r1, fp
 80105dc:	f7f0 f81c 	bl	8000618 <__aeabi_dmul>
 80105e0:	4602      	mov	r2, r0
 80105e2:	460b      	mov	r3, r1
 80105e4:	4640      	mov	r0, r8
 80105e6:	4649      	mov	r1, r9
 80105e8:	f7ef fe60 	bl	80002ac <__adddf3>
 80105ec:	4632      	mov	r2, r6
 80105ee:	463b      	mov	r3, r7
 80105f0:	4680      	mov	r8, r0
 80105f2:	4689      	mov	r9, r1
 80105f4:	4620      	mov	r0, r4
 80105f6:	4629      	mov	r1, r5
 80105f8:	f7f0 f80e 	bl	8000618 <__aeabi_dmul>
 80105fc:	460b      	mov	r3, r1
 80105fe:	4604      	mov	r4, r0
 8010600:	460d      	mov	r5, r1
 8010602:	4602      	mov	r2, r0
 8010604:	4649      	mov	r1, r9
 8010606:	4640      	mov	r0, r8
 8010608:	f7ef fe50 	bl	80002ac <__adddf3>
 801060c:	4b1d      	ldr	r3, [pc, #116]	; (8010684 <__ieee754_pow+0x3dc>)
 801060e:	4299      	cmp	r1, r3
 8010610:	ec45 4b19 	vmov	d9, r4, r5
 8010614:	4606      	mov	r6, r0
 8010616:	460f      	mov	r7, r1
 8010618:	468b      	mov	fp, r1
 801061a:	f340 82fe 	ble.w	8010c1a <__ieee754_pow+0x972>
 801061e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010622:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010626:	4303      	orrs	r3, r0
 8010628:	f000 81f0 	beq.w	8010a0c <__ieee754_pow+0x764>
 801062c:	a310      	add	r3, pc, #64	; (adr r3, 8010670 <__ieee754_pow+0x3c8>)
 801062e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010632:	ec51 0b18 	vmov	r0, r1, d8
 8010636:	f7ef ffef 	bl	8000618 <__aeabi_dmul>
 801063a:	a30d      	add	r3, pc, #52	; (adr r3, 8010670 <__ieee754_pow+0x3c8>)
 801063c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010640:	e6cb      	b.n	80103da <__ieee754_pow+0x132>
 8010642:	bf00      	nop
 8010644:	f3af 8000 	nop.w
 8010648:	60000000 	.word	0x60000000
 801064c:	3ff71547 	.word	0x3ff71547
 8010650:	f85ddf44 	.word	0xf85ddf44
 8010654:	3e54ae0b 	.word	0x3e54ae0b
 8010658:	55555555 	.word	0x55555555
 801065c:	3fd55555 	.word	0x3fd55555
 8010660:	652b82fe 	.word	0x652b82fe
 8010664:	3ff71547 	.word	0x3ff71547
 8010668:	00000000 	.word	0x00000000
 801066c:	bff00000 	.word	0xbff00000
 8010670:	8800759c 	.word	0x8800759c
 8010674:	7e37e43c 	.word	0x7e37e43c
 8010678:	3ff00000 	.word	0x3ff00000
 801067c:	3fd00000 	.word	0x3fd00000
 8010680:	3fe00000 	.word	0x3fe00000
 8010684:	408fffff 	.word	0x408fffff
 8010688:	4bd7      	ldr	r3, [pc, #860]	; (80109e8 <__ieee754_pow+0x740>)
 801068a:	ea03 0309 	and.w	r3, r3, r9
 801068e:	2200      	movs	r2, #0
 8010690:	b92b      	cbnz	r3, 801069e <__ieee754_pow+0x3f6>
 8010692:	4bd6      	ldr	r3, [pc, #856]	; (80109ec <__ieee754_pow+0x744>)
 8010694:	f7ef ffc0 	bl	8000618 <__aeabi_dmul>
 8010698:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801069c:	460c      	mov	r4, r1
 801069e:	1523      	asrs	r3, r4, #20
 80106a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80106a4:	4413      	add	r3, r2
 80106a6:	9309      	str	r3, [sp, #36]	; 0x24
 80106a8:	4bd1      	ldr	r3, [pc, #836]	; (80109f0 <__ieee754_pow+0x748>)
 80106aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80106ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80106b2:	429c      	cmp	r4, r3
 80106b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80106b8:	dd08      	ble.n	80106cc <__ieee754_pow+0x424>
 80106ba:	4bce      	ldr	r3, [pc, #824]	; (80109f4 <__ieee754_pow+0x74c>)
 80106bc:	429c      	cmp	r4, r3
 80106be:	f340 8163 	ble.w	8010988 <__ieee754_pow+0x6e0>
 80106c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106c4:	3301      	adds	r3, #1
 80106c6:	9309      	str	r3, [sp, #36]	; 0x24
 80106c8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80106cc:	2400      	movs	r4, #0
 80106ce:	00e3      	lsls	r3, r4, #3
 80106d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80106d2:	4bc9      	ldr	r3, [pc, #804]	; (80109f8 <__ieee754_pow+0x750>)
 80106d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106d8:	ed93 7b00 	vldr	d7, [r3]
 80106dc:	4629      	mov	r1, r5
 80106de:	ec53 2b17 	vmov	r2, r3, d7
 80106e2:	eeb0 8a47 	vmov.f32	s16, s14
 80106e6:	eef0 8a67 	vmov.f32	s17, s15
 80106ea:	4682      	mov	sl, r0
 80106ec:	f7ef fddc 	bl	80002a8 <__aeabi_dsub>
 80106f0:	4652      	mov	r2, sl
 80106f2:	4606      	mov	r6, r0
 80106f4:	460f      	mov	r7, r1
 80106f6:	462b      	mov	r3, r5
 80106f8:	ec51 0b18 	vmov	r0, r1, d8
 80106fc:	f7ef fdd6 	bl	80002ac <__adddf3>
 8010700:	4602      	mov	r2, r0
 8010702:	460b      	mov	r3, r1
 8010704:	2000      	movs	r0, #0
 8010706:	49bd      	ldr	r1, [pc, #756]	; (80109fc <__ieee754_pow+0x754>)
 8010708:	f7f0 f8b0 	bl	800086c <__aeabi_ddiv>
 801070c:	ec41 0b19 	vmov	d9, r0, r1
 8010710:	4602      	mov	r2, r0
 8010712:	460b      	mov	r3, r1
 8010714:	4630      	mov	r0, r6
 8010716:	4639      	mov	r1, r7
 8010718:	f7ef ff7e 	bl	8000618 <__aeabi_dmul>
 801071c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010720:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010724:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010728:	2300      	movs	r3, #0
 801072a:	9304      	str	r3, [sp, #16]
 801072c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8010730:	46ab      	mov	fp, r5
 8010732:	106d      	asrs	r5, r5, #1
 8010734:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8010738:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801073c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8010740:	2200      	movs	r2, #0
 8010742:	4640      	mov	r0, r8
 8010744:	4649      	mov	r1, r9
 8010746:	4614      	mov	r4, r2
 8010748:	461d      	mov	r5, r3
 801074a:	f7ef ff65 	bl	8000618 <__aeabi_dmul>
 801074e:	4602      	mov	r2, r0
 8010750:	460b      	mov	r3, r1
 8010752:	4630      	mov	r0, r6
 8010754:	4639      	mov	r1, r7
 8010756:	f7ef fda7 	bl	80002a8 <__aeabi_dsub>
 801075a:	ec53 2b18 	vmov	r2, r3, d8
 801075e:	4606      	mov	r6, r0
 8010760:	460f      	mov	r7, r1
 8010762:	4620      	mov	r0, r4
 8010764:	4629      	mov	r1, r5
 8010766:	f7ef fd9f 	bl	80002a8 <__aeabi_dsub>
 801076a:	4602      	mov	r2, r0
 801076c:	460b      	mov	r3, r1
 801076e:	4650      	mov	r0, sl
 8010770:	4659      	mov	r1, fp
 8010772:	f7ef fd99 	bl	80002a8 <__aeabi_dsub>
 8010776:	4642      	mov	r2, r8
 8010778:	464b      	mov	r3, r9
 801077a:	f7ef ff4d 	bl	8000618 <__aeabi_dmul>
 801077e:	4602      	mov	r2, r0
 8010780:	460b      	mov	r3, r1
 8010782:	4630      	mov	r0, r6
 8010784:	4639      	mov	r1, r7
 8010786:	f7ef fd8f 	bl	80002a8 <__aeabi_dsub>
 801078a:	ec53 2b19 	vmov	r2, r3, d9
 801078e:	f7ef ff43 	bl	8000618 <__aeabi_dmul>
 8010792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010796:	ec41 0b18 	vmov	d8, r0, r1
 801079a:	4610      	mov	r0, r2
 801079c:	4619      	mov	r1, r3
 801079e:	f7ef ff3b 	bl	8000618 <__aeabi_dmul>
 80107a2:	a37d      	add	r3, pc, #500	; (adr r3, 8010998 <__ieee754_pow+0x6f0>)
 80107a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a8:	4604      	mov	r4, r0
 80107aa:	460d      	mov	r5, r1
 80107ac:	f7ef ff34 	bl	8000618 <__aeabi_dmul>
 80107b0:	a37b      	add	r3, pc, #492	; (adr r3, 80109a0 <__ieee754_pow+0x6f8>)
 80107b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b6:	f7ef fd79 	bl	80002ac <__adddf3>
 80107ba:	4622      	mov	r2, r4
 80107bc:	462b      	mov	r3, r5
 80107be:	f7ef ff2b 	bl	8000618 <__aeabi_dmul>
 80107c2:	a379      	add	r3, pc, #484	; (adr r3, 80109a8 <__ieee754_pow+0x700>)
 80107c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c8:	f7ef fd70 	bl	80002ac <__adddf3>
 80107cc:	4622      	mov	r2, r4
 80107ce:	462b      	mov	r3, r5
 80107d0:	f7ef ff22 	bl	8000618 <__aeabi_dmul>
 80107d4:	a376      	add	r3, pc, #472	; (adr r3, 80109b0 <__ieee754_pow+0x708>)
 80107d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107da:	f7ef fd67 	bl	80002ac <__adddf3>
 80107de:	4622      	mov	r2, r4
 80107e0:	462b      	mov	r3, r5
 80107e2:	f7ef ff19 	bl	8000618 <__aeabi_dmul>
 80107e6:	a374      	add	r3, pc, #464	; (adr r3, 80109b8 <__ieee754_pow+0x710>)
 80107e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ec:	f7ef fd5e 	bl	80002ac <__adddf3>
 80107f0:	4622      	mov	r2, r4
 80107f2:	462b      	mov	r3, r5
 80107f4:	f7ef ff10 	bl	8000618 <__aeabi_dmul>
 80107f8:	a371      	add	r3, pc, #452	; (adr r3, 80109c0 <__ieee754_pow+0x718>)
 80107fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fe:	f7ef fd55 	bl	80002ac <__adddf3>
 8010802:	4622      	mov	r2, r4
 8010804:	4606      	mov	r6, r0
 8010806:	460f      	mov	r7, r1
 8010808:	462b      	mov	r3, r5
 801080a:	4620      	mov	r0, r4
 801080c:	4629      	mov	r1, r5
 801080e:	f7ef ff03 	bl	8000618 <__aeabi_dmul>
 8010812:	4602      	mov	r2, r0
 8010814:	460b      	mov	r3, r1
 8010816:	4630      	mov	r0, r6
 8010818:	4639      	mov	r1, r7
 801081a:	f7ef fefd 	bl	8000618 <__aeabi_dmul>
 801081e:	4642      	mov	r2, r8
 8010820:	4604      	mov	r4, r0
 8010822:	460d      	mov	r5, r1
 8010824:	464b      	mov	r3, r9
 8010826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801082a:	f7ef fd3f 	bl	80002ac <__adddf3>
 801082e:	ec53 2b18 	vmov	r2, r3, d8
 8010832:	f7ef fef1 	bl	8000618 <__aeabi_dmul>
 8010836:	4622      	mov	r2, r4
 8010838:	462b      	mov	r3, r5
 801083a:	f7ef fd37 	bl	80002ac <__adddf3>
 801083e:	4642      	mov	r2, r8
 8010840:	4682      	mov	sl, r0
 8010842:	468b      	mov	fp, r1
 8010844:	464b      	mov	r3, r9
 8010846:	4640      	mov	r0, r8
 8010848:	4649      	mov	r1, r9
 801084a:	f7ef fee5 	bl	8000618 <__aeabi_dmul>
 801084e:	4b6c      	ldr	r3, [pc, #432]	; (8010a00 <__ieee754_pow+0x758>)
 8010850:	2200      	movs	r2, #0
 8010852:	4606      	mov	r6, r0
 8010854:	460f      	mov	r7, r1
 8010856:	f7ef fd29 	bl	80002ac <__adddf3>
 801085a:	4652      	mov	r2, sl
 801085c:	465b      	mov	r3, fp
 801085e:	f7ef fd25 	bl	80002ac <__adddf3>
 8010862:	9c04      	ldr	r4, [sp, #16]
 8010864:	460d      	mov	r5, r1
 8010866:	4622      	mov	r2, r4
 8010868:	460b      	mov	r3, r1
 801086a:	4640      	mov	r0, r8
 801086c:	4649      	mov	r1, r9
 801086e:	f7ef fed3 	bl	8000618 <__aeabi_dmul>
 8010872:	4b63      	ldr	r3, [pc, #396]	; (8010a00 <__ieee754_pow+0x758>)
 8010874:	4680      	mov	r8, r0
 8010876:	4689      	mov	r9, r1
 8010878:	2200      	movs	r2, #0
 801087a:	4620      	mov	r0, r4
 801087c:	4629      	mov	r1, r5
 801087e:	f7ef fd13 	bl	80002a8 <__aeabi_dsub>
 8010882:	4632      	mov	r2, r6
 8010884:	463b      	mov	r3, r7
 8010886:	f7ef fd0f 	bl	80002a8 <__aeabi_dsub>
 801088a:	4602      	mov	r2, r0
 801088c:	460b      	mov	r3, r1
 801088e:	4650      	mov	r0, sl
 8010890:	4659      	mov	r1, fp
 8010892:	f7ef fd09 	bl	80002a8 <__aeabi_dsub>
 8010896:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801089a:	f7ef febd 	bl	8000618 <__aeabi_dmul>
 801089e:	4622      	mov	r2, r4
 80108a0:	4606      	mov	r6, r0
 80108a2:	460f      	mov	r7, r1
 80108a4:	462b      	mov	r3, r5
 80108a6:	ec51 0b18 	vmov	r0, r1, d8
 80108aa:	f7ef feb5 	bl	8000618 <__aeabi_dmul>
 80108ae:	4602      	mov	r2, r0
 80108b0:	460b      	mov	r3, r1
 80108b2:	4630      	mov	r0, r6
 80108b4:	4639      	mov	r1, r7
 80108b6:	f7ef fcf9 	bl	80002ac <__adddf3>
 80108ba:	4606      	mov	r6, r0
 80108bc:	460f      	mov	r7, r1
 80108be:	4602      	mov	r2, r0
 80108c0:	460b      	mov	r3, r1
 80108c2:	4640      	mov	r0, r8
 80108c4:	4649      	mov	r1, r9
 80108c6:	f7ef fcf1 	bl	80002ac <__adddf3>
 80108ca:	9c04      	ldr	r4, [sp, #16]
 80108cc:	a33e      	add	r3, pc, #248	; (adr r3, 80109c8 <__ieee754_pow+0x720>)
 80108ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d2:	4620      	mov	r0, r4
 80108d4:	460d      	mov	r5, r1
 80108d6:	f7ef fe9f 	bl	8000618 <__aeabi_dmul>
 80108da:	4642      	mov	r2, r8
 80108dc:	ec41 0b18 	vmov	d8, r0, r1
 80108e0:	464b      	mov	r3, r9
 80108e2:	4620      	mov	r0, r4
 80108e4:	4629      	mov	r1, r5
 80108e6:	f7ef fcdf 	bl	80002a8 <__aeabi_dsub>
 80108ea:	4602      	mov	r2, r0
 80108ec:	460b      	mov	r3, r1
 80108ee:	4630      	mov	r0, r6
 80108f0:	4639      	mov	r1, r7
 80108f2:	f7ef fcd9 	bl	80002a8 <__aeabi_dsub>
 80108f6:	a336      	add	r3, pc, #216	; (adr r3, 80109d0 <__ieee754_pow+0x728>)
 80108f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fc:	f7ef fe8c 	bl	8000618 <__aeabi_dmul>
 8010900:	a335      	add	r3, pc, #212	; (adr r3, 80109d8 <__ieee754_pow+0x730>)
 8010902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010906:	4606      	mov	r6, r0
 8010908:	460f      	mov	r7, r1
 801090a:	4620      	mov	r0, r4
 801090c:	4629      	mov	r1, r5
 801090e:	f7ef fe83 	bl	8000618 <__aeabi_dmul>
 8010912:	4602      	mov	r2, r0
 8010914:	460b      	mov	r3, r1
 8010916:	4630      	mov	r0, r6
 8010918:	4639      	mov	r1, r7
 801091a:	f7ef fcc7 	bl	80002ac <__adddf3>
 801091e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010920:	4b38      	ldr	r3, [pc, #224]	; (8010a04 <__ieee754_pow+0x75c>)
 8010922:	4413      	add	r3, r2
 8010924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010928:	f7ef fcc0 	bl	80002ac <__adddf3>
 801092c:	4682      	mov	sl, r0
 801092e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010930:	468b      	mov	fp, r1
 8010932:	f7ef fe07 	bl	8000544 <__aeabi_i2d>
 8010936:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010938:	4b33      	ldr	r3, [pc, #204]	; (8010a08 <__ieee754_pow+0x760>)
 801093a:	4413      	add	r3, r2
 801093c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010940:	4606      	mov	r6, r0
 8010942:	460f      	mov	r7, r1
 8010944:	4652      	mov	r2, sl
 8010946:	465b      	mov	r3, fp
 8010948:	ec51 0b18 	vmov	r0, r1, d8
 801094c:	f7ef fcae 	bl	80002ac <__adddf3>
 8010950:	4642      	mov	r2, r8
 8010952:	464b      	mov	r3, r9
 8010954:	f7ef fcaa 	bl	80002ac <__adddf3>
 8010958:	4632      	mov	r2, r6
 801095a:	463b      	mov	r3, r7
 801095c:	f7ef fca6 	bl	80002ac <__adddf3>
 8010960:	9c04      	ldr	r4, [sp, #16]
 8010962:	4632      	mov	r2, r6
 8010964:	463b      	mov	r3, r7
 8010966:	4620      	mov	r0, r4
 8010968:	460d      	mov	r5, r1
 801096a:	f7ef fc9d 	bl	80002a8 <__aeabi_dsub>
 801096e:	4642      	mov	r2, r8
 8010970:	464b      	mov	r3, r9
 8010972:	f7ef fc99 	bl	80002a8 <__aeabi_dsub>
 8010976:	ec53 2b18 	vmov	r2, r3, d8
 801097a:	f7ef fc95 	bl	80002a8 <__aeabi_dsub>
 801097e:	4602      	mov	r2, r0
 8010980:	460b      	mov	r3, r1
 8010982:	4650      	mov	r0, sl
 8010984:	4659      	mov	r1, fp
 8010986:	e606      	b.n	8010596 <__ieee754_pow+0x2ee>
 8010988:	2401      	movs	r4, #1
 801098a:	e6a0      	b.n	80106ce <__ieee754_pow+0x426>
 801098c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80109e0 <__ieee754_pow+0x738>
 8010990:	e60d      	b.n	80105ae <__ieee754_pow+0x306>
 8010992:	bf00      	nop
 8010994:	f3af 8000 	nop.w
 8010998:	4a454eef 	.word	0x4a454eef
 801099c:	3fca7e28 	.word	0x3fca7e28
 80109a0:	93c9db65 	.word	0x93c9db65
 80109a4:	3fcd864a 	.word	0x3fcd864a
 80109a8:	a91d4101 	.word	0xa91d4101
 80109ac:	3fd17460 	.word	0x3fd17460
 80109b0:	518f264d 	.word	0x518f264d
 80109b4:	3fd55555 	.word	0x3fd55555
 80109b8:	db6fabff 	.word	0xdb6fabff
 80109bc:	3fdb6db6 	.word	0x3fdb6db6
 80109c0:	33333303 	.word	0x33333303
 80109c4:	3fe33333 	.word	0x3fe33333
 80109c8:	e0000000 	.word	0xe0000000
 80109cc:	3feec709 	.word	0x3feec709
 80109d0:	dc3a03fd 	.word	0xdc3a03fd
 80109d4:	3feec709 	.word	0x3feec709
 80109d8:	145b01f5 	.word	0x145b01f5
 80109dc:	be3e2fe0 	.word	0xbe3e2fe0
 80109e0:	00000000 	.word	0x00000000
 80109e4:	3ff00000 	.word	0x3ff00000
 80109e8:	7ff00000 	.word	0x7ff00000
 80109ec:	43400000 	.word	0x43400000
 80109f0:	0003988e 	.word	0x0003988e
 80109f4:	000bb679 	.word	0x000bb679
 80109f8:	08017558 	.word	0x08017558
 80109fc:	3ff00000 	.word	0x3ff00000
 8010a00:	40080000 	.word	0x40080000
 8010a04:	08017578 	.word	0x08017578
 8010a08:	08017568 	.word	0x08017568
 8010a0c:	a3b5      	add	r3, pc, #724	; (adr r3, 8010ce4 <__ieee754_pow+0xa3c>)
 8010a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a12:	4640      	mov	r0, r8
 8010a14:	4649      	mov	r1, r9
 8010a16:	f7ef fc49 	bl	80002ac <__adddf3>
 8010a1a:	4622      	mov	r2, r4
 8010a1c:	ec41 0b1a 	vmov	d10, r0, r1
 8010a20:	462b      	mov	r3, r5
 8010a22:	4630      	mov	r0, r6
 8010a24:	4639      	mov	r1, r7
 8010a26:	f7ef fc3f 	bl	80002a8 <__aeabi_dsub>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	460b      	mov	r3, r1
 8010a2e:	ec51 0b1a 	vmov	r0, r1, d10
 8010a32:	f7f0 f881 	bl	8000b38 <__aeabi_dcmpgt>
 8010a36:	2800      	cmp	r0, #0
 8010a38:	f47f adf8 	bne.w	801062c <__ieee754_pow+0x384>
 8010a3c:	4aa4      	ldr	r2, [pc, #656]	; (8010cd0 <__ieee754_pow+0xa28>)
 8010a3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010a42:	4293      	cmp	r3, r2
 8010a44:	f340 810b 	ble.w	8010c5e <__ieee754_pow+0x9b6>
 8010a48:	151b      	asrs	r3, r3, #20
 8010a4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010a4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010a52:	fa4a f303 	asr.w	r3, sl, r3
 8010a56:	445b      	add	r3, fp
 8010a58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010a5c:	4e9d      	ldr	r6, [pc, #628]	; (8010cd4 <__ieee754_pow+0xa2c>)
 8010a5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010a62:	4116      	asrs	r6, r2
 8010a64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010a68:	2000      	movs	r0, #0
 8010a6a:	ea23 0106 	bic.w	r1, r3, r6
 8010a6e:	f1c2 0214 	rsb	r2, r2, #20
 8010a72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010a76:	fa4a fa02 	asr.w	sl, sl, r2
 8010a7a:	f1bb 0f00 	cmp.w	fp, #0
 8010a7e:	4602      	mov	r2, r0
 8010a80:	460b      	mov	r3, r1
 8010a82:	4620      	mov	r0, r4
 8010a84:	4629      	mov	r1, r5
 8010a86:	bfb8      	it	lt
 8010a88:	f1ca 0a00 	rsblt	sl, sl, #0
 8010a8c:	f7ef fc0c 	bl	80002a8 <__aeabi_dsub>
 8010a90:	ec41 0b19 	vmov	d9, r0, r1
 8010a94:	4642      	mov	r2, r8
 8010a96:	464b      	mov	r3, r9
 8010a98:	ec51 0b19 	vmov	r0, r1, d9
 8010a9c:	f7ef fc06 	bl	80002ac <__adddf3>
 8010aa0:	2400      	movs	r4, #0
 8010aa2:	a379      	add	r3, pc, #484	; (adr r3, 8010c88 <__ieee754_pow+0x9e0>)
 8010aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	460d      	mov	r5, r1
 8010aac:	f7ef fdb4 	bl	8000618 <__aeabi_dmul>
 8010ab0:	ec53 2b19 	vmov	r2, r3, d9
 8010ab4:	4606      	mov	r6, r0
 8010ab6:	460f      	mov	r7, r1
 8010ab8:	4620      	mov	r0, r4
 8010aba:	4629      	mov	r1, r5
 8010abc:	f7ef fbf4 	bl	80002a8 <__aeabi_dsub>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	4640      	mov	r0, r8
 8010ac6:	4649      	mov	r1, r9
 8010ac8:	f7ef fbee 	bl	80002a8 <__aeabi_dsub>
 8010acc:	a370      	add	r3, pc, #448	; (adr r3, 8010c90 <__ieee754_pow+0x9e8>)
 8010ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad2:	f7ef fda1 	bl	8000618 <__aeabi_dmul>
 8010ad6:	a370      	add	r3, pc, #448	; (adr r3, 8010c98 <__ieee754_pow+0x9f0>)
 8010ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010adc:	4680      	mov	r8, r0
 8010ade:	4689      	mov	r9, r1
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	4629      	mov	r1, r5
 8010ae4:	f7ef fd98 	bl	8000618 <__aeabi_dmul>
 8010ae8:	4602      	mov	r2, r0
 8010aea:	460b      	mov	r3, r1
 8010aec:	4640      	mov	r0, r8
 8010aee:	4649      	mov	r1, r9
 8010af0:	f7ef fbdc 	bl	80002ac <__adddf3>
 8010af4:	4604      	mov	r4, r0
 8010af6:	460d      	mov	r5, r1
 8010af8:	4602      	mov	r2, r0
 8010afa:	460b      	mov	r3, r1
 8010afc:	4630      	mov	r0, r6
 8010afe:	4639      	mov	r1, r7
 8010b00:	f7ef fbd4 	bl	80002ac <__adddf3>
 8010b04:	4632      	mov	r2, r6
 8010b06:	463b      	mov	r3, r7
 8010b08:	4680      	mov	r8, r0
 8010b0a:	4689      	mov	r9, r1
 8010b0c:	f7ef fbcc 	bl	80002a8 <__aeabi_dsub>
 8010b10:	4602      	mov	r2, r0
 8010b12:	460b      	mov	r3, r1
 8010b14:	4620      	mov	r0, r4
 8010b16:	4629      	mov	r1, r5
 8010b18:	f7ef fbc6 	bl	80002a8 <__aeabi_dsub>
 8010b1c:	4642      	mov	r2, r8
 8010b1e:	4606      	mov	r6, r0
 8010b20:	460f      	mov	r7, r1
 8010b22:	464b      	mov	r3, r9
 8010b24:	4640      	mov	r0, r8
 8010b26:	4649      	mov	r1, r9
 8010b28:	f7ef fd76 	bl	8000618 <__aeabi_dmul>
 8010b2c:	a35c      	add	r3, pc, #368	; (adr r3, 8010ca0 <__ieee754_pow+0x9f8>)
 8010b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b32:	4604      	mov	r4, r0
 8010b34:	460d      	mov	r5, r1
 8010b36:	f7ef fd6f 	bl	8000618 <__aeabi_dmul>
 8010b3a:	a35b      	add	r3, pc, #364	; (adr r3, 8010ca8 <__ieee754_pow+0xa00>)
 8010b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b40:	f7ef fbb2 	bl	80002a8 <__aeabi_dsub>
 8010b44:	4622      	mov	r2, r4
 8010b46:	462b      	mov	r3, r5
 8010b48:	f7ef fd66 	bl	8000618 <__aeabi_dmul>
 8010b4c:	a358      	add	r3, pc, #352	; (adr r3, 8010cb0 <__ieee754_pow+0xa08>)
 8010b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b52:	f7ef fbab 	bl	80002ac <__adddf3>
 8010b56:	4622      	mov	r2, r4
 8010b58:	462b      	mov	r3, r5
 8010b5a:	f7ef fd5d 	bl	8000618 <__aeabi_dmul>
 8010b5e:	a356      	add	r3, pc, #344	; (adr r3, 8010cb8 <__ieee754_pow+0xa10>)
 8010b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b64:	f7ef fba0 	bl	80002a8 <__aeabi_dsub>
 8010b68:	4622      	mov	r2, r4
 8010b6a:	462b      	mov	r3, r5
 8010b6c:	f7ef fd54 	bl	8000618 <__aeabi_dmul>
 8010b70:	a353      	add	r3, pc, #332	; (adr r3, 8010cc0 <__ieee754_pow+0xa18>)
 8010b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b76:	f7ef fb99 	bl	80002ac <__adddf3>
 8010b7a:	4622      	mov	r2, r4
 8010b7c:	462b      	mov	r3, r5
 8010b7e:	f7ef fd4b 	bl	8000618 <__aeabi_dmul>
 8010b82:	4602      	mov	r2, r0
 8010b84:	460b      	mov	r3, r1
 8010b86:	4640      	mov	r0, r8
 8010b88:	4649      	mov	r1, r9
 8010b8a:	f7ef fb8d 	bl	80002a8 <__aeabi_dsub>
 8010b8e:	4604      	mov	r4, r0
 8010b90:	460d      	mov	r5, r1
 8010b92:	4602      	mov	r2, r0
 8010b94:	460b      	mov	r3, r1
 8010b96:	4640      	mov	r0, r8
 8010b98:	4649      	mov	r1, r9
 8010b9a:	f7ef fd3d 	bl	8000618 <__aeabi_dmul>
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	ec41 0b19 	vmov	d9, r0, r1
 8010ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010ba8:	4620      	mov	r0, r4
 8010baa:	4629      	mov	r1, r5
 8010bac:	f7ef fb7c 	bl	80002a8 <__aeabi_dsub>
 8010bb0:	4602      	mov	r2, r0
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	ec51 0b19 	vmov	r0, r1, d9
 8010bb8:	f7ef fe58 	bl	800086c <__aeabi_ddiv>
 8010bbc:	4632      	mov	r2, r6
 8010bbe:	4604      	mov	r4, r0
 8010bc0:	460d      	mov	r5, r1
 8010bc2:	463b      	mov	r3, r7
 8010bc4:	4640      	mov	r0, r8
 8010bc6:	4649      	mov	r1, r9
 8010bc8:	f7ef fd26 	bl	8000618 <__aeabi_dmul>
 8010bcc:	4632      	mov	r2, r6
 8010bce:	463b      	mov	r3, r7
 8010bd0:	f7ef fb6c 	bl	80002ac <__adddf3>
 8010bd4:	4602      	mov	r2, r0
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	4620      	mov	r0, r4
 8010bda:	4629      	mov	r1, r5
 8010bdc:	f7ef fb64 	bl	80002a8 <__aeabi_dsub>
 8010be0:	4642      	mov	r2, r8
 8010be2:	464b      	mov	r3, r9
 8010be4:	f7ef fb60 	bl	80002a8 <__aeabi_dsub>
 8010be8:	460b      	mov	r3, r1
 8010bea:	4602      	mov	r2, r0
 8010bec:	493a      	ldr	r1, [pc, #232]	; (8010cd8 <__ieee754_pow+0xa30>)
 8010bee:	2000      	movs	r0, #0
 8010bf0:	f7ef fb5a 	bl	80002a8 <__aeabi_dsub>
 8010bf4:	e9cd 0100 	strd	r0, r1, [sp]
 8010bf8:	9b01      	ldr	r3, [sp, #4]
 8010bfa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c02:	da2f      	bge.n	8010c64 <__ieee754_pow+0x9bc>
 8010c04:	4650      	mov	r0, sl
 8010c06:	ed9d 0b00 	vldr	d0, [sp]
 8010c0a:	f000 f9cd 	bl	8010fa8 <scalbn>
 8010c0e:	ec51 0b10 	vmov	r0, r1, d0
 8010c12:	ec53 2b18 	vmov	r2, r3, d8
 8010c16:	f7ff bbe0 	b.w	80103da <__ieee754_pow+0x132>
 8010c1a:	4b30      	ldr	r3, [pc, #192]	; (8010cdc <__ieee754_pow+0xa34>)
 8010c1c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010c20:	429e      	cmp	r6, r3
 8010c22:	f77f af0b 	ble.w	8010a3c <__ieee754_pow+0x794>
 8010c26:	4b2e      	ldr	r3, [pc, #184]	; (8010ce0 <__ieee754_pow+0xa38>)
 8010c28:	440b      	add	r3, r1
 8010c2a:	4303      	orrs	r3, r0
 8010c2c:	d00b      	beq.n	8010c46 <__ieee754_pow+0x99e>
 8010c2e:	a326      	add	r3, pc, #152	; (adr r3, 8010cc8 <__ieee754_pow+0xa20>)
 8010c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c34:	ec51 0b18 	vmov	r0, r1, d8
 8010c38:	f7ef fcee 	bl	8000618 <__aeabi_dmul>
 8010c3c:	a322      	add	r3, pc, #136	; (adr r3, 8010cc8 <__ieee754_pow+0xa20>)
 8010c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c42:	f7ff bbca 	b.w	80103da <__ieee754_pow+0x132>
 8010c46:	4622      	mov	r2, r4
 8010c48:	462b      	mov	r3, r5
 8010c4a:	f7ef fb2d 	bl	80002a8 <__aeabi_dsub>
 8010c4e:	4642      	mov	r2, r8
 8010c50:	464b      	mov	r3, r9
 8010c52:	f7ef ff67 	bl	8000b24 <__aeabi_dcmpge>
 8010c56:	2800      	cmp	r0, #0
 8010c58:	f43f aef0 	beq.w	8010a3c <__ieee754_pow+0x794>
 8010c5c:	e7e7      	b.n	8010c2e <__ieee754_pow+0x986>
 8010c5e:	f04f 0a00 	mov.w	sl, #0
 8010c62:	e717      	b.n	8010a94 <__ieee754_pow+0x7ec>
 8010c64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c68:	4619      	mov	r1, r3
 8010c6a:	e7d2      	b.n	8010c12 <__ieee754_pow+0x96a>
 8010c6c:	491a      	ldr	r1, [pc, #104]	; (8010cd8 <__ieee754_pow+0xa30>)
 8010c6e:	2000      	movs	r0, #0
 8010c70:	f7ff bb9e 	b.w	80103b0 <__ieee754_pow+0x108>
 8010c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c78:	f7ff bb9a 	b.w	80103b0 <__ieee754_pow+0x108>
 8010c7c:	9000      	str	r0, [sp, #0]
 8010c7e:	f7ff bb76 	b.w	801036e <__ieee754_pow+0xc6>
 8010c82:	2100      	movs	r1, #0
 8010c84:	f7ff bb60 	b.w	8010348 <__ieee754_pow+0xa0>
 8010c88:	00000000 	.word	0x00000000
 8010c8c:	3fe62e43 	.word	0x3fe62e43
 8010c90:	fefa39ef 	.word	0xfefa39ef
 8010c94:	3fe62e42 	.word	0x3fe62e42
 8010c98:	0ca86c39 	.word	0x0ca86c39
 8010c9c:	be205c61 	.word	0xbe205c61
 8010ca0:	72bea4d0 	.word	0x72bea4d0
 8010ca4:	3e663769 	.word	0x3e663769
 8010ca8:	c5d26bf1 	.word	0xc5d26bf1
 8010cac:	3ebbbd41 	.word	0x3ebbbd41
 8010cb0:	af25de2c 	.word	0xaf25de2c
 8010cb4:	3f11566a 	.word	0x3f11566a
 8010cb8:	16bebd93 	.word	0x16bebd93
 8010cbc:	3f66c16c 	.word	0x3f66c16c
 8010cc0:	5555553e 	.word	0x5555553e
 8010cc4:	3fc55555 	.word	0x3fc55555
 8010cc8:	c2f8f359 	.word	0xc2f8f359
 8010ccc:	01a56e1f 	.word	0x01a56e1f
 8010cd0:	3fe00000 	.word	0x3fe00000
 8010cd4:	000fffff 	.word	0x000fffff
 8010cd8:	3ff00000 	.word	0x3ff00000
 8010cdc:	4090cbff 	.word	0x4090cbff
 8010ce0:	3f6f3400 	.word	0x3f6f3400
 8010ce4:	652b82fe 	.word	0x652b82fe
 8010ce8:	3c971547 	.word	0x3c971547

08010cec <__ieee754_sqrt>:
 8010cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cf0:	ec55 4b10 	vmov	r4, r5, d0
 8010cf4:	4e56      	ldr	r6, [pc, #344]	; (8010e50 <__ieee754_sqrt+0x164>)
 8010cf6:	43ae      	bics	r6, r5
 8010cf8:	ee10 0a10 	vmov	r0, s0
 8010cfc:	ee10 3a10 	vmov	r3, s0
 8010d00:	4629      	mov	r1, r5
 8010d02:	462a      	mov	r2, r5
 8010d04:	d110      	bne.n	8010d28 <__ieee754_sqrt+0x3c>
 8010d06:	ee10 2a10 	vmov	r2, s0
 8010d0a:	462b      	mov	r3, r5
 8010d0c:	f7ef fc84 	bl	8000618 <__aeabi_dmul>
 8010d10:	4602      	mov	r2, r0
 8010d12:	460b      	mov	r3, r1
 8010d14:	4620      	mov	r0, r4
 8010d16:	4629      	mov	r1, r5
 8010d18:	f7ef fac8 	bl	80002ac <__adddf3>
 8010d1c:	4604      	mov	r4, r0
 8010d1e:	460d      	mov	r5, r1
 8010d20:	ec45 4b10 	vmov	d0, r4, r5
 8010d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d28:	2d00      	cmp	r5, #0
 8010d2a:	dc10      	bgt.n	8010d4e <__ieee754_sqrt+0x62>
 8010d2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010d30:	4330      	orrs	r0, r6
 8010d32:	d0f5      	beq.n	8010d20 <__ieee754_sqrt+0x34>
 8010d34:	b15d      	cbz	r5, 8010d4e <__ieee754_sqrt+0x62>
 8010d36:	ee10 2a10 	vmov	r2, s0
 8010d3a:	462b      	mov	r3, r5
 8010d3c:	ee10 0a10 	vmov	r0, s0
 8010d40:	f7ef fab2 	bl	80002a8 <__aeabi_dsub>
 8010d44:	4602      	mov	r2, r0
 8010d46:	460b      	mov	r3, r1
 8010d48:	f7ef fd90 	bl	800086c <__aeabi_ddiv>
 8010d4c:	e7e6      	b.n	8010d1c <__ieee754_sqrt+0x30>
 8010d4e:	1509      	asrs	r1, r1, #20
 8010d50:	d076      	beq.n	8010e40 <__ieee754_sqrt+0x154>
 8010d52:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010d56:	07ce      	lsls	r6, r1, #31
 8010d58:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8010d5c:	bf5e      	ittt	pl
 8010d5e:	0fda      	lsrpl	r2, r3, #31
 8010d60:	005b      	lslpl	r3, r3, #1
 8010d62:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8010d66:	0fda      	lsrs	r2, r3, #31
 8010d68:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8010d6c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8010d70:	2000      	movs	r0, #0
 8010d72:	106d      	asrs	r5, r5, #1
 8010d74:	005b      	lsls	r3, r3, #1
 8010d76:	f04f 0e16 	mov.w	lr, #22
 8010d7a:	4684      	mov	ip, r0
 8010d7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010d80:	eb0c 0401 	add.w	r4, ip, r1
 8010d84:	4294      	cmp	r4, r2
 8010d86:	bfde      	ittt	le
 8010d88:	1b12      	suble	r2, r2, r4
 8010d8a:	eb04 0c01 	addle.w	ip, r4, r1
 8010d8e:	1840      	addle	r0, r0, r1
 8010d90:	0052      	lsls	r2, r2, #1
 8010d92:	f1be 0e01 	subs.w	lr, lr, #1
 8010d96:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010d9a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010d9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010da2:	d1ed      	bne.n	8010d80 <__ieee754_sqrt+0x94>
 8010da4:	4671      	mov	r1, lr
 8010da6:	2720      	movs	r7, #32
 8010da8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010dac:	4562      	cmp	r2, ip
 8010dae:	eb04 060e 	add.w	r6, r4, lr
 8010db2:	dc02      	bgt.n	8010dba <__ieee754_sqrt+0xce>
 8010db4:	d113      	bne.n	8010dde <__ieee754_sqrt+0xf2>
 8010db6:	429e      	cmp	r6, r3
 8010db8:	d811      	bhi.n	8010dde <__ieee754_sqrt+0xf2>
 8010dba:	2e00      	cmp	r6, #0
 8010dbc:	eb06 0e04 	add.w	lr, r6, r4
 8010dc0:	da43      	bge.n	8010e4a <__ieee754_sqrt+0x15e>
 8010dc2:	f1be 0f00 	cmp.w	lr, #0
 8010dc6:	db40      	blt.n	8010e4a <__ieee754_sqrt+0x15e>
 8010dc8:	f10c 0801 	add.w	r8, ip, #1
 8010dcc:	eba2 020c 	sub.w	r2, r2, ip
 8010dd0:	429e      	cmp	r6, r3
 8010dd2:	bf88      	it	hi
 8010dd4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010dd8:	1b9b      	subs	r3, r3, r6
 8010dda:	4421      	add	r1, r4
 8010ddc:	46c4      	mov	ip, r8
 8010dde:	0052      	lsls	r2, r2, #1
 8010de0:	3f01      	subs	r7, #1
 8010de2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8010de6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010dea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010dee:	d1dd      	bne.n	8010dac <__ieee754_sqrt+0xc0>
 8010df0:	4313      	orrs	r3, r2
 8010df2:	d006      	beq.n	8010e02 <__ieee754_sqrt+0x116>
 8010df4:	1c4c      	adds	r4, r1, #1
 8010df6:	bf13      	iteet	ne
 8010df8:	3101      	addne	r1, #1
 8010dfa:	3001      	addeq	r0, #1
 8010dfc:	4639      	moveq	r1, r7
 8010dfe:	f021 0101 	bicne.w	r1, r1, #1
 8010e02:	1043      	asrs	r3, r0, #1
 8010e04:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010e08:	0849      	lsrs	r1, r1, #1
 8010e0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010e0e:	07c2      	lsls	r2, r0, #31
 8010e10:	bf48      	it	mi
 8010e12:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8010e16:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	463d      	mov	r5, r7
 8010e1e:	e77f      	b.n	8010d20 <__ieee754_sqrt+0x34>
 8010e20:	0ada      	lsrs	r2, r3, #11
 8010e22:	3815      	subs	r0, #21
 8010e24:	055b      	lsls	r3, r3, #21
 8010e26:	2a00      	cmp	r2, #0
 8010e28:	d0fa      	beq.n	8010e20 <__ieee754_sqrt+0x134>
 8010e2a:	02d7      	lsls	r7, r2, #11
 8010e2c:	d50a      	bpl.n	8010e44 <__ieee754_sqrt+0x158>
 8010e2e:	f1c1 0420 	rsb	r4, r1, #32
 8010e32:	fa23 f404 	lsr.w	r4, r3, r4
 8010e36:	1e4d      	subs	r5, r1, #1
 8010e38:	408b      	lsls	r3, r1
 8010e3a:	4322      	orrs	r2, r4
 8010e3c:	1b41      	subs	r1, r0, r5
 8010e3e:	e788      	b.n	8010d52 <__ieee754_sqrt+0x66>
 8010e40:	4608      	mov	r0, r1
 8010e42:	e7f0      	b.n	8010e26 <__ieee754_sqrt+0x13a>
 8010e44:	0052      	lsls	r2, r2, #1
 8010e46:	3101      	adds	r1, #1
 8010e48:	e7ef      	b.n	8010e2a <__ieee754_sqrt+0x13e>
 8010e4a:	46e0      	mov	r8, ip
 8010e4c:	e7be      	b.n	8010dcc <__ieee754_sqrt+0xe0>
 8010e4e:	bf00      	nop
 8010e50:	7ff00000 	.word	0x7ff00000

08010e54 <fabs>:
 8010e54:	ec51 0b10 	vmov	r0, r1, d0
 8010e58:	ee10 2a10 	vmov	r2, s0
 8010e5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010e60:	ec43 2b10 	vmov	d0, r2, r3
 8010e64:	4770      	bx	lr

08010e66 <finite>:
 8010e66:	b082      	sub	sp, #8
 8010e68:	ed8d 0b00 	vstr	d0, [sp]
 8010e6c:	9801      	ldr	r0, [sp, #4]
 8010e6e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010e72:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010e76:	0fc0      	lsrs	r0, r0, #31
 8010e78:	b002      	add	sp, #8
 8010e7a:	4770      	bx	lr
 8010e7c:	0000      	movs	r0, r0
	...

08010e80 <nan>:
 8010e80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010e88 <nan+0x8>
 8010e84:	4770      	bx	lr
 8010e86:	bf00      	nop
 8010e88:	00000000 	.word	0x00000000
 8010e8c:	7ff80000 	.word	0x7ff80000

08010e90 <rint>:
 8010e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e92:	ec51 0b10 	vmov	r0, r1, d0
 8010e96:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010e9a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8010e9e:	2e13      	cmp	r6, #19
 8010ea0:	ee10 4a10 	vmov	r4, s0
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8010eaa:	dc58      	bgt.n	8010f5e <rint+0xce>
 8010eac:	2e00      	cmp	r6, #0
 8010eae:	da2b      	bge.n	8010f08 <rint+0x78>
 8010eb0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8010eb4:	4302      	orrs	r2, r0
 8010eb6:	d023      	beq.n	8010f00 <rint+0x70>
 8010eb8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8010ebc:	4302      	orrs	r2, r0
 8010ebe:	4254      	negs	r4, r2
 8010ec0:	4314      	orrs	r4, r2
 8010ec2:	0c4b      	lsrs	r3, r1, #17
 8010ec4:	0b24      	lsrs	r4, r4, #12
 8010ec6:	045b      	lsls	r3, r3, #17
 8010ec8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8010ecc:	ea44 0103 	orr.w	r1, r4, r3
 8010ed0:	4b32      	ldr	r3, [pc, #200]	; (8010f9c <rint+0x10c>)
 8010ed2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010ed6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8010eda:	4602      	mov	r2, r0
 8010edc:	460b      	mov	r3, r1
 8010ede:	4630      	mov	r0, r6
 8010ee0:	4639      	mov	r1, r7
 8010ee2:	f7ef f9e3 	bl	80002ac <__adddf3>
 8010ee6:	e9cd 0100 	strd	r0, r1, [sp]
 8010eea:	463b      	mov	r3, r7
 8010eec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ef0:	4632      	mov	r2, r6
 8010ef2:	f7ef f9d9 	bl	80002a8 <__aeabi_dsub>
 8010ef6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010efa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8010efe:	4639      	mov	r1, r7
 8010f00:	ec41 0b10 	vmov	d0, r0, r1
 8010f04:	b003      	add	sp, #12
 8010f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f08:	4a25      	ldr	r2, [pc, #148]	; (8010fa0 <rint+0x110>)
 8010f0a:	4132      	asrs	r2, r6
 8010f0c:	ea01 0702 	and.w	r7, r1, r2
 8010f10:	4307      	orrs	r7, r0
 8010f12:	d0f5      	beq.n	8010f00 <rint+0x70>
 8010f14:	0851      	lsrs	r1, r2, #1
 8010f16:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8010f1a:	4314      	orrs	r4, r2
 8010f1c:	d00c      	beq.n	8010f38 <rint+0xa8>
 8010f1e:	ea23 0201 	bic.w	r2, r3, r1
 8010f22:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010f26:	2e13      	cmp	r6, #19
 8010f28:	fa43 f606 	asr.w	r6, r3, r6
 8010f2c:	bf0c      	ite	eq
 8010f2e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8010f32:	2400      	movne	r4, #0
 8010f34:	ea42 0306 	orr.w	r3, r2, r6
 8010f38:	4918      	ldr	r1, [pc, #96]	; (8010f9c <rint+0x10c>)
 8010f3a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8010f3e:	4622      	mov	r2, r4
 8010f40:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010f44:	4620      	mov	r0, r4
 8010f46:	4629      	mov	r1, r5
 8010f48:	f7ef f9b0 	bl	80002ac <__adddf3>
 8010f4c:	e9cd 0100 	strd	r0, r1, [sp]
 8010f50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f54:	4622      	mov	r2, r4
 8010f56:	462b      	mov	r3, r5
 8010f58:	f7ef f9a6 	bl	80002a8 <__aeabi_dsub>
 8010f5c:	e7d0      	b.n	8010f00 <rint+0x70>
 8010f5e:	2e33      	cmp	r6, #51	; 0x33
 8010f60:	dd07      	ble.n	8010f72 <rint+0xe2>
 8010f62:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010f66:	d1cb      	bne.n	8010f00 <rint+0x70>
 8010f68:	ee10 2a10 	vmov	r2, s0
 8010f6c:	f7ef f99e 	bl	80002ac <__adddf3>
 8010f70:	e7c6      	b.n	8010f00 <rint+0x70>
 8010f72:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8010f76:	f04f 36ff 	mov.w	r6, #4294967295
 8010f7a:	40d6      	lsrs	r6, r2
 8010f7c:	4230      	tst	r0, r6
 8010f7e:	d0bf      	beq.n	8010f00 <rint+0x70>
 8010f80:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8010f84:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8010f88:	bf1f      	itttt	ne
 8010f8a:	ea24 0101 	bicne.w	r1, r4, r1
 8010f8e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8010f92:	fa44 f202 	asrne.w	r2, r4, r2
 8010f96:	ea41 0402 	orrne.w	r4, r1, r2
 8010f9a:	e7cd      	b.n	8010f38 <rint+0xa8>
 8010f9c:	08017588 	.word	0x08017588
 8010fa0:	000fffff 	.word	0x000fffff
 8010fa4:	00000000 	.word	0x00000000

08010fa8 <scalbn>:
 8010fa8:	b570      	push	{r4, r5, r6, lr}
 8010faa:	ec55 4b10 	vmov	r4, r5, d0
 8010fae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010fb2:	4606      	mov	r6, r0
 8010fb4:	462b      	mov	r3, r5
 8010fb6:	b99a      	cbnz	r2, 8010fe0 <scalbn+0x38>
 8010fb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010fbc:	4323      	orrs	r3, r4
 8010fbe:	d036      	beq.n	801102e <scalbn+0x86>
 8010fc0:	4b39      	ldr	r3, [pc, #228]	; (80110a8 <scalbn+0x100>)
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	ee10 0a10 	vmov	r0, s0
 8010fc8:	2200      	movs	r2, #0
 8010fca:	f7ef fb25 	bl	8000618 <__aeabi_dmul>
 8010fce:	4b37      	ldr	r3, [pc, #220]	; (80110ac <scalbn+0x104>)
 8010fd0:	429e      	cmp	r6, r3
 8010fd2:	4604      	mov	r4, r0
 8010fd4:	460d      	mov	r5, r1
 8010fd6:	da10      	bge.n	8010ffa <scalbn+0x52>
 8010fd8:	a32b      	add	r3, pc, #172	; (adr r3, 8011088 <scalbn+0xe0>)
 8010fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fde:	e03a      	b.n	8011056 <scalbn+0xae>
 8010fe0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010fe4:	428a      	cmp	r2, r1
 8010fe6:	d10c      	bne.n	8011002 <scalbn+0x5a>
 8010fe8:	ee10 2a10 	vmov	r2, s0
 8010fec:	4620      	mov	r0, r4
 8010fee:	4629      	mov	r1, r5
 8010ff0:	f7ef f95c 	bl	80002ac <__adddf3>
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	460d      	mov	r5, r1
 8010ff8:	e019      	b.n	801102e <scalbn+0x86>
 8010ffa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010ffe:	460b      	mov	r3, r1
 8011000:	3a36      	subs	r2, #54	; 0x36
 8011002:	4432      	add	r2, r6
 8011004:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011008:	428a      	cmp	r2, r1
 801100a:	dd08      	ble.n	801101e <scalbn+0x76>
 801100c:	2d00      	cmp	r5, #0
 801100e:	a120      	add	r1, pc, #128	; (adr r1, 8011090 <scalbn+0xe8>)
 8011010:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011014:	da1c      	bge.n	8011050 <scalbn+0xa8>
 8011016:	a120      	add	r1, pc, #128	; (adr r1, 8011098 <scalbn+0xf0>)
 8011018:	e9d1 0100 	ldrd	r0, r1, [r1]
 801101c:	e018      	b.n	8011050 <scalbn+0xa8>
 801101e:	2a00      	cmp	r2, #0
 8011020:	dd08      	ble.n	8011034 <scalbn+0x8c>
 8011022:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011026:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801102a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801102e:	ec45 4b10 	vmov	d0, r4, r5
 8011032:	bd70      	pop	{r4, r5, r6, pc}
 8011034:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011038:	da19      	bge.n	801106e <scalbn+0xc6>
 801103a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801103e:	429e      	cmp	r6, r3
 8011040:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011044:	dd0a      	ble.n	801105c <scalbn+0xb4>
 8011046:	a112      	add	r1, pc, #72	; (adr r1, 8011090 <scalbn+0xe8>)
 8011048:	e9d1 0100 	ldrd	r0, r1, [r1]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d1e2      	bne.n	8011016 <scalbn+0x6e>
 8011050:	a30f      	add	r3, pc, #60	; (adr r3, 8011090 <scalbn+0xe8>)
 8011052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011056:	f7ef fadf 	bl	8000618 <__aeabi_dmul>
 801105a:	e7cb      	b.n	8010ff4 <scalbn+0x4c>
 801105c:	a10a      	add	r1, pc, #40	; (adr r1, 8011088 <scalbn+0xe0>)
 801105e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d0b8      	beq.n	8010fd8 <scalbn+0x30>
 8011066:	a10e      	add	r1, pc, #56	; (adr r1, 80110a0 <scalbn+0xf8>)
 8011068:	e9d1 0100 	ldrd	r0, r1, [r1]
 801106c:	e7b4      	b.n	8010fd8 <scalbn+0x30>
 801106e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011072:	3236      	adds	r2, #54	; 0x36
 8011074:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011078:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801107c:	4620      	mov	r0, r4
 801107e:	4b0c      	ldr	r3, [pc, #48]	; (80110b0 <scalbn+0x108>)
 8011080:	2200      	movs	r2, #0
 8011082:	e7e8      	b.n	8011056 <scalbn+0xae>
 8011084:	f3af 8000 	nop.w
 8011088:	c2f8f359 	.word	0xc2f8f359
 801108c:	01a56e1f 	.word	0x01a56e1f
 8011090:	8800759c 	.word	0x8800759c
 8011094:	7e37e43c 	.word	0x7e37e43c
 8011098:	8800759c 	.word	0x8800759c
 801109c:	fe37e43c 	.word	0xfe37e43c
 80110a0:	c2f8f359 	.word	0xc2f8f359
 80110a4:	81a56e1f 	.word	0x81a56e1f
 80110a8:	43500000 	.word	0x43500000
 80110ac:	ffff3cb0 	.word	0xffff3cb0
 80110b0:	3c900000 	.word	0x3c900000

080110b4 <abort>:
 80110b4:	b508      	push	{r3, lr}
 80110b6:	2006      	movs	r0, #6
 80110b8:	f001 f9ba 	bl	8012430 <raise>
 80110bc:	2001      	movs	r0, #1
 80110be:	f005 f9cb 	bl	8016458 <_exit>
	...

080110c4 <__errno>:
 80110c4:	4b01      	ldr	r3, [pc, #4]	; (80110cc <__errno+0x8>)
 80110c6:	6818      	ldr	r0, [r3, #0]
 80110c8:	4770      	bx	lr
 80110ca:	bf00      	nop
 80110cc:	200000d8 	.word	0x200000d8

080110d0 <std>:
 80110d0:	2300      	movs	r3, #0
 80110d2:	b510      	push	{r4, lr}
 80110d4:	4604      	mov	r4, r0
 80110d6:	e9c0 3300 	strd	r3, r3, [r0]
 80110da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80110de:	6083      	str	r3, [r0, #8]
 80110e0:	8181      	strh	r1, [r0, #12]
 80110e2:	6643      	str	r3, [r0, #100]	; 0x64
 80110e4:	81c2      	strh	r2, [r0, #14]
 80110e6:	6183      	str	r3, [r0, #24]
 80110e8:	4619      	mov	r1, r3
 80110ea:	2208      	movs	r2, #8
 80110ec:	305c      	adds	r0, #92	; 0x5c
 80110ee:	f000 f93d 	bl	801136c <memset>
 80110f2:	4b05      	ldr	r3, [pc, #20]	; (8011108 <std+0x38>)
 80110f4:	6263      	str	r3, [r4, #36]	; 0x24
 80110f6:	4b05      	ldr	r3, [pc, #20]	; (801110c <std+0x3c>)
 80110f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80110fa:	4b05      	ldr	r3, [pc, #20]	; (8011110 <std+0x40>)
 80110fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80110fe:	4b05      	ldr	r3, [pc, #20]	; (8011114 <std+0x44>)
 8011100:	6224      	str	r4, [r4, #32]
 8011102:	6323      	str	r3, [r4, #48]	; 0x30
 8011104:	bd10      	pop	{r4, pc}
 8011106:	bf00      	nop
 8011108:	08012501 	.word	0x08012501
 801110c:	08012527 	.word	0x08012527
 8011110:	0801255f 	.word	0x0801255f
 8011114:	08012583 	.word	0x08012583

08011118 <_cleanup_r>:
 8011118:	4901      	ldr	r1, [pc, #4]	; (8011120 <_cleanup_r+0x8>)
 801111a:	f000 b8af 	b.w	801127c <_fwalk_reent>
 801111e:	bf00      	nop
 8011120:	0801440d 	.word	0x0801440d

08011124 <__sfmoreglue>:
 8011124:	b570      	push	{r4, r5, r6, lr}
 8011126:	1e4a      	subs	r2, r1, #1
 8011128:	2568      	movs	r5, #104	; 0x68
 801112a:	4355      	muls	r5, r2
 801112c:	460e      	mov	r6, r1
 801112e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011132:	f000 f973 	bl	801141c <_malloc_r>
 8011136:	4604      	mov	r4, r0
 8011138:	b140      	cbz	r0, 801114c <__sfmoreglue+0x28>
 801113a:	2100      	movs	r1, #0
 801113c:	e9c0 1600 	strd	r1, r6, [r0]
 8011140:	300c      	adds	r0, #12
 8011142:	60a0      	str	r0, [r4, #8]
 8011144:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011148:	f000 f910 	bl	801136c <memset>
 801114c:	4620      	mov	r0, r4
 801114e:	bd70      	pop	{r4, r5, r6, pc}

08011150 <__sfp_lock_acquire>:
 8011150:	4801      	ldr	r0, [pc, #4]	; (8011158 <__sfp_lock_acquire+0x8>)
 8011152:	f000 b8d8 	b.w	8011306 <__retarget_lock_acquire_recursive>
 8011156:	bf00      	nop
 8011158:	20006ab4 	.word	0x20006ab4

0801115c <__sfp_lock_release>:
 801115c:	4801      	ldr	r0, [pc, #4]	; (8011164 <__sfp_lock_release+0x8>)
 801115e:	f000 b8d3 	b.w	8011308 <__retarget_lock_release_recursive>
 8011162:	bf00      	nop
 8011164:	20006ab4 	.word	0x20006ab4

08011168 <__sinit_lock_acquire>:
 8011168:	4801      	ldr	r0, [pc, #4]	; (8011170 <__sinit_lock_acquire+0x8>)
 801116a:	f000 b8cc 	b.w	8011306 <__retarget_lock_acquire_recursive>
 801116e:	bf00      	nop
 8011170:	20006aaf 	.word	0x20006aaf

08011174 <__sinit_lock_release>:
 8011174:	4801      	ldr	r0, [pc, #4]	; (801117c <__sinit_lock_release+0x8>)
 8011176:	f000 b8c7 	b.w	8011308 <__retarget_lock_release_recursive>
 801117a:	bf00      	nop
 801117c:	20006aaf 	.word	0x20006aaf

08011180 <__sinit>:
 8011180:	b510      	push	{r4, lr}
 8011182:	4604      	mov	r4, r0
 8011184:	f7ff fff0 	bl	8011168 <__sinit_lock_acquire>
 8011188:	69a3      	ldr	r3, [r4, #24]
 801118a:	b11b      	cbz	r3, 8011194 <__sinit+0x14>
 801118c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011190:	f7ff bff0 	b.w	8011174 <__sinit_lock_release>
 8011194:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011198:	6523      	str	r3, [r4, #80]	; 0x50
 801119a:	4b13      	ldr	r3, [pc, #76]	; (80111e8 <__sinit+0x68>)
 801119c:	4a13      	ldr	r2, [pc, #76]	; (80111ec <__sinit+0x6c>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80111a2:	42a3      	cmp	r3, r4
 80111a4:	bf04      	itt	eq
 80111a6:	2301      	moveq	r3, #1
 80111a8:	61a3      	streq	r3, [r4, #24]
 80111aa:	4620      	mov	r0, r4
 80111ac:	f000 f820 	bl	80111f0 <__sfp>
 80111b0:	6060      	str	r0, [r4, #4]
 80111b2:	4620      	mov	r0, r4
 80111b4:	f000 f81c 	bl	80111f0 <__sfp>
 80111b8:	60a0      	str	r0, [r4, #8]
 80111ba:	4620      	mov	r0, r4
 80111bc:	f000 f818 	bl	80111f0 <__sfp>
 80111c0:	2200      	movs	r2, #0
 80111c2:	60e0      	str	r0, [r4, #12]
 80111c4:	2104      	movs	r1, #4
 80111c6:	6860      	ldr	r0, [r4, #4]
 80111c8:	f7ff ff82 	bl	80110d0 <std>
 80111cc:	68a0      	ldr	r0, [r4, #8]
 80111ce:	2201      	movs	r2, #1
 80111d0:	2109      	movs	r1, #9
 80111d2:	f7ff ff7d 	bl	80110d0 <std>
 80111d6:	68e0      	ldr	r0, [r4, #12]
 80111d8:	2202      	movs	r2, #2
 80111da:	2112      	movs	r1, #18
 80111dc:	f7ff ff78 	bl	80110d0 <std>
 80111e0:	2301      	movs	r3, #1
 80111e2:	61a3      	str	r3, [r4, #24]
 80111e4:	e7d2      	b.n	801118c <__sinit+0xc>
 80111e6:	bf00      	nop
 80111e8:	080176fc 	.word	0x080176fc
 80111ec:	08011119 	.word	0x08011119

080111f0 <__sfp>:
 80111f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111f2:	4607      	mov	r7, r0
 80111f4:	f7ff ffac 	bl	8011150 <__sfp_lock_acquire>
 80111f8:	4b1e      	ldr	r3, [pc, #120]	; (8011274 <__sfp+0x84>)
 80111fa:	681e      	ldr	r6, [r3, #0]
 80111fc:	69b3      	ldr	r3, [r6, #24]
 80111fe:	b913      	cbnz	r3, 8011206 <__sfp+0x16>
 8011200:	4630      	mov	r0, r6
 8011202:	f7ff ffbd 	bl	8011180 <__sinit>
 8011206:	3648      	adds	r6, #72	; 0x48
 8011208:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801120c:	3b01      	subs	r3, #1
 801120e:	d503      	bpl.n	8011218 <__sfp+0x28>
 8011210:	6833      	ldr	r3, [r6, #0]
 8011212:	b30b      	cbz	r3, 8011258 <__sfp+0x68>
 8011214:	6836      	ldr	r6, [r6, #0]
 8011216:	e7f7      	b.n	8011208 <__sfp+0x18>
 8011218:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801121c:	b9d5      	cbnz	r5, 8011254 <__sfp+0x64>
 801121e:	4b16      	ldr	r3, [pc, #88]	; (8011278 <__sfp+0x88>)
 8011220:	60e3      	str	r3, [r4, #12]
 8011222:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011226:	6665      	str	r5, [r4, #100]	; 0x64
 8011228:	f000 f86c 	bl	8011304 <__retarget_lock_init_recursive>
 801122c:	f7ff ff96 	bl	801115c <__sfp_lock_release>
 8011230:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011234:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011238:	6025      	str	r5, [r4, #0]
 801123a:	61a5      	str	r5, [r4, #24]
 801123c:	2208      	movs	r2, #8
 801123e:	4629      	mov	r1, r5
 8011240:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011244:	f000 f892 	bl	801136c <memset>
 8011248:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801124c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011250:	4620      	mov	r0, r4
 8011252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011254:	3468      	adds	r4, #104	; 0x68
 8011256:	e7d9      	b.n	801120c <__sfp+0x1c>
 8011258:	2104      	movs	r1, #4
 801125a:	4638      	mov	r0, r7
 801125c:	f7ff ff62 	bl	8011124 <__sfmoreglue>
 8011260:	4604      	mov	r4, r0
 8011262:	6030      	str	r0, [r6, #0]
 8011264:	2800      	cmp	r0, #0
 8011266:	d1d5      	bne.n	8011214 <__sfp+0x24>
 8011268:	f7ff ff78 	bl	801115c <__sfp_lock_release>
 801126c:	230c      	movs	r3, #12
 801126e:	603b      	str	r3, [r7, #0]
 8011270:	e7ee      	b.n	8011250 <__sfp+0x60>
 8011272:	bf00      	nop
 8011274:	080176fc 	.word	0x080176fc
 8011278:	ffff0001 	.word	0xffff0001

0801127c <_fwalk_reent>:
 801127c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011280:	4606      	mov	r6, r0
 8011282:	4688      	mov	r8, r1
 8011284:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011288:	2700      	movs	r7, #0
 801128a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801128e:	f1b9 0901 	subs.w	r9, r9, #1
 8011292:	d505      	bpl.n	80112a0 <_fwalk_reent+0x24>
 8011294:	6824      	ldr	r4, [r4, #0]
 8011296:	2c00      	cmp	r4, #0
 8011298:	d1f7      	bne.n	801128a <_fwalk_reent+0xe>
 801129a:	4638      	mov	r0, r7
 801129c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112a0:	89ab      	ldrh	r3, [r5, #12]
 80112a2:	2b01      	cmp	r3, #1
 80112a4:	d907      	bls.n	80112b6 <_fwalk_reent+0x3a>
 80112a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80112aa:	3301      	adds	r3, #1
 80112ac:	d003      	beq.n	80112b6 <_fwalk_reent+0x3a>
 80112ae:	4629      	mov	r1, r5
 80112b0:	4630      	mov	r0, r6
 80112b2:	47c0      	blx	r8
 80112b4:	4307      	orrs	r7, r0
 80112b6:	3568      	adds	r5, #104	; 0x68
 80112b8:	e7e9      	b.n	801128e <_fwalk_reent+0x12>
	...

080112bc <__libc_init_array>:
 80112bc:	b570      	push	{r4, r5, r6, lr}
 80112be:	4d0d      	ldr	r5, [pc, #52]	; (80112f4 <__libc_init_array+0x38>)
 80112c0:	4c0d      	ldr	r4, [pc, #52]	; (80112f8 <__libc_init_array+0x3c>)
 80112c2:	1b64      	subs	r4, r4, r5
 80112c4:	10a4      	asrs	r4, r4, #2
 80112c6:	2600      	movs	r6, #0
 80112c8:	42a6      	cmp	r6, r4
 80112ca:	d109      	bne.n	80112e0 <__libc_init_array+0x24>
 80112cc:	4d0b      	ldr	r5, [pc, #44]	; (80112fc <__libc_init_array+0x40>)
 80112ce:	4c0c      	ldr	r4, [pc, #48]	; (8011300 <__libc_init_array+0x44>)
 80112d0:	f005 f8c4 	bl	801645c <_init>
 80112d4:	1b64      	subs	r4, r4, r5
 80112d6:	10a4      	asrs	r4, r4, #2
 80112d8:	2600      	movs	r6, #0
 80112da:	42a6      	cmp	r6, r4
 80112dc:	d105      	bne.n	80112ea <__libc_init_array+0x2e>
 80112de:	bd70      	pop	{r4, r5, r6, pc}
 80112e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80112e4:	4798      	blx	r3
 80112e6:	3601      	adds	r6, #1
 80112e8:	e7ee      	b.n	80112c8 <__libc_init_array+0xc>
 80112ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80112ee:	4798      	blx	r3
 80112f0:	3601      	adds	r6, #1
 80112f2:	e7f2      	b.n	80112da <__libc_init_array+0x1e>
 80112f4:	08017a68 	.word	0x08017a68
 80112f8:	08017a68 	.word	0x08017a68
 80112fc:	08017a68 	.word	0x08017a68
 8011300:	08017a70 	.word	0x08017a70

08011304 <__retarget_lock_init_recursive>:
 8011304:	4770      	bx	lr

08011306 <__retarget_lock_acquire_recursive>:
 8011306:	4770      	bx	lr

08011308 <__retarget_lock_release_recursive>:
 8011308:	4770      	bx	lr
	...

0801130c <malloc>:
 801130c:	4b02      	ldr	r3, [pc, #8]	; (8011318 <malloc+0xc>)
 801130e:	4601      	mov	r1, r0
 8011310:	6818      	ldr	r0, [r3, #0]
 8011312:	f000 b883 	b.w	801141c <_malloc_r>
 8011316:	bf00      	nop
 8011318:	200000d8 	.word	0x200000d8

0801131c <memcpy>:
 801131c:	440a      	add	r2, r1
 801131e:	4291      	cmp	r1, r2
 8011320:	f100 33ff 	add.w	r3, r0, #4294967295
 8011324:	d100      	bne.n	8011328 <memcpy+0xc>
 8011326:	4770      	bx	lr
 8011328:	b510      	push	{r4, lr}
 801132a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801132e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011332:	4291      	cmp	r1, r2
 8011334:	d1f9      	bne.n	801132a <memcpy+0xe>
 8011336:	bd10      	pop	{r4, pc}

08011338 <memmove>:
 8011338:	4288      	cmp	r0, r1
 801133a:	b510      	push	{r4, lr}
 801133c:	eb01 0402 	add.w	r4, r1, r2
 8011340:	d902      	bls.n	8011348 <memmove+0x10>
 8011342:	4284      	cmp	r4, r0
 8011344:	4623      	mov	r3, r4
 8011346:	d807      	bhi.n	8011358 <memmove+0x20>
 8011348:	1e43      	subs	r3, r0, #1
 801134a:	42a1      	cmp	r1, r4
 801134c:	d008      	beq.n	8011360 <memmove+0x28>
 801134e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011356:	e7f8      	b.n	801134a <memmove+0x12>
 8011358:	4402      	add	r2, r0
 801135a:	4601      	mov	r1, r0
 801135c:	428a      	cmp	r2, r1
 801135e:	d100      	bne.n	8011362 <memmove+0x2a>
 8011360:	bd10      	pop	{r4, pc}
 8011362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801136a:	e7f7      	b.n	801135c <memmove+0x24>

0801136c <memset>:
 801136c:	4402      	add	r2, r0
 801136e:	4603      	mov	r3, r0
 8011370:	4293      	cmp	r3, r2
 8011372:	d100      	bne.n	8011376 <memset+0xa>
 8011374:	4770      	bx	lr
 8011376:	f803 1b01 	strb.w	r1, [r3], #1
 801137a:	e7f9      	b.n	8011370 <memset+0x4>

0801137c <_free_r>:
 801137c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801137e:	2900      	cmp	r1, #0
 8011380:	d048      	beq.n	8011414 <_free_r+0x98>
 8011382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011386:	9001      	str	r0, [sp, #4]
 8011388:	2b00      	cmp	r3, #0
 801138a:	f1a1 0404 	sub.w	r4, r1, #4
 801138e:	bfb8      	it	lt
 8011390:	18e4      	addlt	r4, r4, r3
 8011392:	f003 fc85 	bl	8014ca0 <__malloc_lock>
 8011396:	4a20      	ldr	r2, [pc, #128]	; (8011418 <_free_r+0x9c>)
 8011398:	9801      	ldr	r0, [sp, #4]
 801139a:	6813      	ldr	r3, [r2, #0]
 801139c:	4615      	mov	r5, r2
 801139e:	b933      	cbnz	r3, 80113ae <_free_r+0x32>
 80113a0:	6063      	str	r3, [r4, #4]
 80113a2:	6014      	str	r4, [r2, #0]
 80113a4:	b003      	add	sp, #12
 80113a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80113aa:	f003 bc7f 	b.w	8014cac <__malloc_unlock>
 80113ae:	42a3      	cmp	r3, r4
 80113b0:	d90b      	bls.n	80113ca <_free_r+0x4e>
 80113b2:	6821      	ldr	r1, [r4, #0]
 80113b4:	1862      	adds	r2, r4, r1
 80113b6:	4293      	cmp	r3, r2
 80113b8:	bf04      	itt	eq
 80113ba:	681a      	ldreq	r2, [r3, #0]
 80113bc:	685b      	ldreq	r3, [r3, #4]
 80113be:	6063      	str	r3, [r4, #4]
 80113c0:	bf04      	itt	eq
 80113c2:	1852      	addeq	r2, r2, r1
 80113c4:	6022      	streq	r2, [r4, #0]
 80113c6:	602c      	str	r4, [r5, #0]
 80113c8:	e7ec      	b.n	80113a4 <_free_r+0x28>
 80113ca:	461a      	mov	r2, r3
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	b10b      	cbz	r3, 80113d4 <_free_r+0x58>
 80113d0:	42a3      	cmp	r3, r4
 80113d2:	d9fa      	bls.n	80113ca <_free_r+0x4e>
 80113d4:	6811      	ldr	r1, [r2, #0]
 80113d6:	1855      	adds	r5, r2, r1
 80113d8:	42a5      	cmp	r5, r4
 80113da:	d10b      	bne.n	80113f4 <_free_r+0x78>
 80113dc:	6824      	ldr	r4, [r4, #0]
 80113de:	4421      	add	r1, r4
 80113e0:	1854      	adds	r4, r2, r1
 80113e2:	42a3      	cmp	r3, r4
 80113e4:	6011      	str	r1, [r2, #0]
 80113e6:	d1dd      	bne.n	80113a4 <_free_r+0x28>
 80113e8:	681c      	ldr	r4, [r3, #0]
 80113ea:	685b      	ldr	r3, [r3, #4]
 80113ec:	6053      	str	r3, [r2, #4]
 80113ee:	4421      	add	r1, r4
 80113f0:	6011      	str	r1, [r2, #0]
 80113f2:	e7d7      	b.n	80113a4 <_free_r+0x28>
 80113f4:	d902      	bls.n	80113fc <_free_r+0x80>
 80113f6:	230c      	movs	r3, #12
 80113f8:	6003      	str	r3, [r0, #0]
 80113fa:	e7d3      	b.n	80113a4 <_free_r+0x28>
 80113fc:	6825      	ldr	r5, [r4, #0]
 80113fe:	1961      	adds	r1, r4, r5
 8011400:	428b      	cmp	r3, r1
 8011402:	bf04      	itt	eq
 8011404:	6819      	ldreq	r1, [r3, #0]
 8011406:	685b      	ldreq	r3, [r3, #4]
 8011408:	6063      	str	r3, [r4, #4]
 801140a:	bf04      	itt	eq
 801140c:	1949      	addeq	r1, r1, r5
 801140e:	6021      	streq	r1, [r4, #0]
 8011410:	6054      	str	r4, [r2, #4]
 8011412:	e7c7      	b.n	80113a4 <_free_r+0x28>
 8011414:	b003      	add	sp, #12
 8011416:	bd30      	pop	{r4, r5, pc}
 8011418:	20006038 	.word	0x20006038

0801141c <_malloc_r>:
 801141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801141e:	1ccd      	adds	r5, r1, #3
 8011420:	f025 0503 	bic.w	r5, r5, #3
 8011424:	3508      	adds	r5, #8
 8011426:	2d0c      	cmp	r5, #12
 8011428:	bf38      	it	cc
 801142a:	250c      	movcc	r5, #12
 801142c:	2d00      	cmp	r5, #0
 801142e:	4606      	mov	r6, r0
 8011430:	db01      	blt.n	8011436 <_malloc_r+0x1a>
 8011432:	42a9      	cmp	r1, r5
 8011434:	d903      	bls.n	801143e <_malloc_r+0x22>
 8011436:	230c      	movs	r3, #12
 8011438:	6033      	str	r3, [r6, #0]
 801143a:	2000      	movs	r0, #0
 801143c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801143e:	f003 fc2f 	bl	8014ca0 <__malloc_lock>
 8011442:	4921      	ldr	r1, [pc, #132]	; (80114c8 <_malloc_r+0xac>)
 8011444:	680a      	ldr	r2, [r1, #0]
 8011446:	4614      	mov	r4, r2
 8011448:	b99c      	cbnz	r4, 8011472 <_malloc_r+0x56>
 801144a:	4f20      	ldr	r7, [pc, #128]	; (80114cc <_malloc_r+0xb0>)
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	b923      	cbnz	r3, 801145a <_malloc_r+0x3e>
 8011450:	4621      	mov	r1, r4
 8011452:	4630      	mov	r0, r6
 8011454:	f000 ffae 	bl	80123b4 <_sbrk_r>
 8011458:	6038      	str	r0, [r7, #0]
 801145a:	4629      	mov	r1, r5
 801145c:	4630      	mov	r0, r6
 801145e:	f000 ffa9 	bl	80123b4 <_sbrk_r>
 8011462:	1c43      	adds	r3, r0, #1
 8011464:	d123      	bne.n	80114ae <_malloc_r+0x92>
 8011466:	230c      	movs	r3, #12
 8011468:	6033      	str	r3, [r6, #0]
 801146a:	4630      	mov	r0, r6
 801146c:	f003 fc1e 	bl	8014cac <__malloc_unlock>
 8011470:	e7e3      	b.n	801143a <_malloc_r+0x1e>
 8011472:	6823      	ldr	r3, [r4, #0]
 8011474:	1b5b      	subs	r3, r3, r5
 8011476:	d417      	bmi.n	80114a8 <_malloc_r+0x8c>
 8011478:	2b0b      	cmp	r3, #11
 801147a:	d903      	bls.n	8011484 <_malloc_r+0x68>
 801147c:	6023      	str	r3, [r4, #0]
 801147e:	441c      	add	r4, r3
 8011480:	6025      	str	r5, [r4, #0]
 8011482:	e004      	b.n	801148e <_malloc_r+0x72>
 8011484:	6863      	ldr	r3, [r4, #4]
 8011486:	42a2      	cmp	r2, r4
 8011488:	bf0c      	ite	eq
 801148a:	600b      	streq	r3, [r1, #0]
 801148c:	6053      	strne	r3, [r2, #4]
 801148e:	4630      	mov	r0, r6
 8011490:	f003 fc0c 	bl	8014cac <__malloc_unlock>
 8011494:	f104 000b 	add.w	r0, r4, #11
 8011498:	1d23      	adds	r3, r4, #4
 801149a:	f020 0007 	bic.w	r0, r0, #7
 801149e:	1ac2      	subs	r2, r0, r3
 80114a0:	d0cc      	beq.n	801143c <_malloc_r+0x20>
 80114a2:	1a1b      	subs	r3, r3, r0
 80114a4:	50a3      	str	r3, [r4, r2]
 80114a6:	e7c9      	b.n	801143c <_malloc_r+0x20>
 80114a8:	4622      	mov	r2, r4
 80114aa:	6864      	ldr	r4, [r4, #4]
 80114ac:	e7cc      	b.n	8011448 <_malloc_r+0x2c>
 80114ae:	1cc4      	adds	r4, r0, #3
 80114b0:	f024 0403 	bic.w	r4, r4, #3
 80114b4:	42a0      	cmp	r0, r4
 80114b6:	d0e3      	beq.n	8011480 <_malloc_r+0x64>
 80114b8:	1a21      	subs	r1, r4, r0
 80114ba:	4630      	mov	r0, r6
 80114bc:	f000 ff7a 	bl	80123b4 <_sbrk_r>
 80114c0:	3001      	adds	r0, #1
 80114c2:	d1dd      	bne.n	8011480 <_malloc_r+0x64>
 80114c4:	e7cf      	b.n	8011466 <_malloc_r+0x4a>
 80114c6:	bf00      	nop
 80114c8:	20006038 	.word	0x20006038
 80114cc:	2000603c 	.word	0x2000603c

080114d0 <__cvt>:
 80114d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80114d4:	ec55 4b10 	vmov	r4, r5, d0
 80114d8:	2d00      	cmp	r5, #0
 80114da:	460e      	mov	r6, r1
 80114dc:	4619      	mov	r1, r3
 80114de:	462b      	mov	r3, r5
 80114e0:	bfbb      	ittet	lt
 80114e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80114e6:	461d      	movlt	r5, r3
 80114e8:	2300      	movge	r3, #0
 80114ea:	232d      	movlt	r3, #45	; 0x2d
 80114ec:	700b      	strb	r3, [r1, #0]
 80114ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80114f4:	4691      	mov	r9, r2
 80114f6:	f023 0820 	bic.w	r8, r3, #32
 80114fa:	bfbc      	itt	lt
 80114fc:	4622      	movlt	r2, r4
 80114fe:	4614      	movlt	r4, r2
 8011500:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011504:	d005      	beq.n	8011512 <__cvt+0x42>
 8011506:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801150a:	d100      	bne.n	801150e <__cvt+0x3e>
 801150c:	3601      	adds	r6, #1
 801150e:	2102      	movs	r1, #2
 8011510:	e000      	b.n	8011514 <__cvt+0x44>
 8011512:	2103      	movs	r1, #3
 8011514:	ab03      	add	r3, sp, #12
 8011516:	9301      	str	r3, [sp, #4]
 8011518:	ab02      	add	r3, sp, #8
 801151a:	9300      	str	r3, [sp, #0]
 801151c:	ec45 4b10 	vmov	d0, r4, r5
 8011520:	4653      	mov	r3, sl
 8011522:	4632      	mov	r2, r6
 8011524:	f002 f900 	bl	8013728 <_dtoa_r>
 8011528:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801152c:	4607      	mov	r7, r0
 801152e:	d102      	bne.n	8011536 <__cvt+0x66>
 8011530:	f019 0f01 	tst.w	r9, #1
 8011534:	d022      	beq.n	801157c <__cvt+0xac>
 8011536:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801153a:	eb07 0906 	add.w	r9, r7, r6
 801153e:	d110      	bne.n	8011562 <__cvt+0x92>
 8011540:	783b      	ldrb	r3, [r7, #0]
 8011542:	2b30      	cmp	r3, #48	; 0x30
 8011544:	d10a      	bne.n	801155c <__cvt+0x8c>
 8011546:	2200      	movs	r2, #0
 8011548:	2300      	movs	r3, #0
 801154a:	4620      	mov	r0, r4
 801154c:	4629      	mov	r1, r5
 801154e:	f7ef facb 	bl	8000ae8 <__aeabi_dcmpeq>
 8011552:	b918      	cbnz	r0, 801155c <__cvt+0x8c>
 8011554:	f1c6 0601 	rsb	r6, r6, #1
 8011558:	f8ca 6000 	str.w	r6, [sl]
 801155c:	f8da 3000 	ldr.w	r3, [sl]
 8011560:	4499      	add	r9, r3
 8011562:	2200      	movs	r2, #0
 8011564:	2300      	movs	r3, #0
 8011566:	4620      	mov	r0, r4
 8011568:	4629      	mov	r1, r5
 801156a:	f7ef fabd 	bl	8000ae8 <__aeabi_dcmpeq>
 801156e:	b108      	cbz	r0, 8011574 <__cvt+0xa4>
 8011570:	f8cd 900c 	str.w	r9, [sp, #12]
 8011574:	2230      	movs	r2, #48	; 0x30
 8011576:	9b03      	ldr	r3, [sp, #12]
 8011578:	454b      	cmp	r3, r9
 801157a:	d307      	bcc.n	801158c <__cvt+0xbc>
 801157c:	9b03      	ldr	r3, [sp, #12]
 801157e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011580:	1bdb      	subs	r3, r3, r7
 8011582:	4638      	mov	r0, r7
 8011584:	6013      	str	r3, [r2, #0]
 8011586:	b004      	add	sp, #16
 8011588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801158c:	1c59      	adds	r1, r3, #1
 801158e:	9103      	str	r1, [sp, #12]
 8011590:	701a      	strb	r2, [r3, #0]
 8011592:	e7f0      	b.n	8011576 <__cvt+0xa6>

08011594 <__exponent>:
 8011594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011596:	4603      	mov	r3, r0
 8011598:	2900      	cmp	r1, #0
 801159a:	bfb8      	it	lt
 801159c:	4249      	neglt	r1, r1
 801159e:	f803 2b02 	strb.w	r2, [r3], #2
 80115a2:	bfb4      	ite	lt
 80115a4:	222d      	movlt	r2, #45	; 0x2d
 80115a6:	222b      	movge	r2, #43	; 0x2b
 80115a8:	2909      	cmp	r1, #9
 80115aa:	7042      	strb	r2, [r0, #1]
 80115ac:	dd2a      	ble.n	8011604 <__exponent+0x70>
 80115ae:	f10d 0407 	add.w	r4, sp, #7
 80115b2:	46a4      	mov	ip, r4
 80115b4:	270a      	movs	r7, #10
 80115b6:	46a6      	mov	lr, r4
 80115b8:	460a      	mov	r2, r1
 80115ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80115be:	fb07 1516 	mls	r5, r7, r6, r1
 80115c2:	3530      	adds	r5, #48	; 0x30
 80115c4:	2a63      	cmp	r2, #99	; 0x63
 80115c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80115ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80115ce:	4631      	mov	r1, r6
 80115d0:	dcf1      	bgt.n	80115b6 <__exponent+0x22>
 80115d2:	3130      	adds	r1, #48	; 0x30
 80115d4:	f1ae 0502 	sub.w	r5, lr, #2
 80115d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80115dc:	1c44      	adds	r4, r0, #1
 80115de:	4629      	mov	r1, r5
 80115e0:	4561      	cmp	r1, ip
 80115e2:	d30a      	bcc.n	80115fa <__exponent+0x66>
 80115e4:	f10d 0209 	add.w	r2, sp, #9
 80115e8:	eba2 020e 	sub.w	r2, r2, lr
 80115ec:	4565      	cmp	r5, ip
 80115ee:	bf88      	it	hi
 80115f0:	2200      	movhi	r2, #0
 80115f2:	4413      	add	r3, r2
 80115f4:	1a18      	subs	r0, r3, r0
 80115f6:	b003      	add	sp, #12
 80115f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011602:	e7ed      	b.n	80115e0 <__exponent+0x4c>
 8011604:	2330      	movs	r3, #48	; 0x30
 8011606:	3130      	adds	r1, #48	; 0x30
 8011608:	7083      	strb	r3, [r0, #2]
 801160a:	70c1      	strb	r1, [r0, #3]
 801160c:	1d03      	adds	r3, r0, #4
 801160e:	e7f1      	b.n	80115f4 <__exponent+0x60>

08011610 <_printf_float>:
 8011610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011614:	ed2d 8b02 	vpush	{d8}
 8011618:	b08d      	sub	sp, #52	; 0x34
 801161a:	460c      	mov	r4, r1
 801161c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011620:	4616      	mov	r6, r2
 8011622:	461f      	mov	r7, r3
 8011624:	4605      	mov	r5, r0
 8011626:	f003 faaf 	bl	8014b88 <_localeconv_r>
 801162a:	f8d0 a000 	ldr.w	sl, [r0]
 801162e:	4650      	mov	r0, sl
 8011630:	f7ee fdde 	bl	80001f0 <strlen>
 8011634:	2300      	movs	r3, #0
 8011636:	930a      	str	r3, [sp, #40]	; 0x28
 8011638:	6823      	ldr	r3, [r4, #0]
 801163a:	9305      	str	r3, [sp, #20]
 801163c:	f8d8 3000 	ldr.w	r3, [r8]
 8011640:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011644:	3307      	adds	r3, #7
 8011646:	f023 0307 	bic.w	r3, r3, #7
 801164a:	f103 0208 	add.w	r2, r3, #8
 801164e:	f8c8 2000 	str.w	r2, [r8]
 8011652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011656:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801165a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801165e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011662:	9307      	str	r3, [sp, #28]
 8011664:	f8cd 8018 	str.w	r8, [sp, #24]
 8011668:	ee08 0a10 	vmov	s16, r0
 801166c:	4b9f      	ldr	r3, [pc, #636]	; (80118ec <_printf_float+0x2dc>)
 801166e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011672:	f04f 32ff 	mov.w	r2, #4294967295
 8011676:	f7ef fa69 	bl	8000b4c <__aeabi_dcmpun>
 801167a:	bb88      	cbnz	r0, 80116e0 <_printf_float+0xd0>
 801167c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011680:	4b9a      	ldr	r3, [pc, #616]	; (80118ec <_printf_float+0x2dc>)
 8011682:	f04f 32ff 	mov.w	r2, #4294967295
 8011686:	f7ef fa43 	bl	8000b10 <__aeabi_dcmple>
 801168a:	bb48      	cbnz	r0, 80116e0 <_printf_float+0xd0>
 801168c:	2200      	movs	r2, #0
 801168e:	2300      	movs	r3, #0
 8011690:	4640      	mov	r0, r8
 8011692:	4649      	mov	r1, r9
 8011694:	f7ef fa32 	bl	8000afc <__aeabi_dcmplt>
 8011698:	b110      	cbz	r0, 80116a0 <_printf_float+0x90>
 801169a:	232d      	movs	r3, #45	; 0x2d
 801169c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116a0:	4b93      	ldr	r3, [pc, #588]	; (80118f0 <_printf_float+0x2e0>)
 80116a2:	4894      	ldr	r0, [pc, #592]	; (80118f4 <_printf_float+0x2e4>)
 80116a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80116a8:	bf94      	ite	ls
 80116aa:	4698      	movls	r8, r3
 80116ac:	4680      	movhi	r8, r0
 80116ae:	2303      	movs	r3, #3
 80116b0:	6123      	str	r3, [r4, #16]
 80116b2:	9b05      	ldr	r3, [sp, #20]
 80116b4:	f023 0204 	bic.w	r2, r3, #4
 80116b8:	6022      	str	r2, [r4, #0]
 80116ba:	f04f 0900 	mov.w	r9, #0
 80116be:	9700      	str	r7, [sp, #0]
 80116c0:	4633      	mov	r3, r6
 80116c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80116c4:	4621      	mov	r1, r4
 80116c6:	4628      	mov	r0, r5
 80116c8:	f000 f9d8 	bl	8011a7c <_printf_common>
 80116cc:	3001      	adds	r0, #1
 80116ce:	f040 8090 	bne.w	80117f2 <_printf_float+0x1e2>
 80116d2:	f04f 30ff 	mov.w	r0, #4294967295
 80116d6:	b00d      	add	sp, #52	; 0x34
 80116d8:	ecbd 8b02 	vpop	{d8}
 80116dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e0:	4642      	mov	r2, r8
 80116e2:	464b      	mov	r3, r9
 80116e4:	4640      	mov	r0, r8
 80116e6:	4649      	mov	r1, r9
 80116e8:	f7ef fa30 	bl	8000b4c <__aeabi_dcmpun>
 80116ec:	b140      	cbz	r0, 8011700 <_printf_float+0xf0>
 80116ee:	464b      	mov	r3, r9
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	bfbc      	itt	lt
 80116f4:	232d      	movlt	r3, #45	; 0x2d
 80116f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80116fa:	487f      	ldr	r0, [pc, #508]	; (80118f8 <_printf_float+0x2e8>)
 80116fc:	4b7f      	ldr	r3, [pc, #508]	; (80118fc <_printf_float+0x2ec>)
 80116fe:	e7d1      	b.n	80116a4 <_printf_float+0x94>
 8011700:	6863      	ldr	r3, [r4, #4]
 8011702:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011706:	9206      	str	r2, [sp, #24]
 8011708:	1c5a      	adds	r2, r3, #1
 801170a:	d13f      	bne.n	801178c <_printf_float+0x17c>
 801170c:	2306      	movs	r3, #6
 801170e:	6063      	str	r3, [r4, #4]
 8011710:	9b05      	ldr	r3, [sp, #20]
 8011712:	6861      	ldr	r1, [r4, #4]
 8011714:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011718:	2300      	movs	r3, #0
 801171a:	9303      	str	r3, [sp, #12]
 801171c:	ab0a      	add	r3, sp, #40	; 0x28
 801171e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011722:	ab09      	add	r3, sp, #36	; 0x24
 8011724:	ec49 8b10 	vmov	d0, r8, r9
 8011728:	9300      	str	r3, [sp, #0]
 801172a:	6022      	str	r2, [r4, #0]
 801172c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011730:	4628      	mov	r0, r5
 8011732:	f7ff fecd 	bl	80114d0 <__cvt>
 8011736:	9b06      	ldr	r3, [sp, #24]
 8011738:	9909      	ldr	r1, [sp, #36]	; 0x24
 801173a:	2b47      	cmp	r3, #71	; 0x47
 801173c:	4680      	mov	r8, r0
 801173e:	d108      	bne.n	8011752 <_printf_float+0x142>
 8011740:	1cc8      	adds	r0, r1, #3
 8011742:	db02      	blt.n	801174a <_printf_float+0x13a>
 8011744:	6863      	ldr	r3, [r4, #4]
 8011746:	4299      	cmp	r1, r3
 8011748:	dd41      	ble.n	80117ce <_printf_float+0x1be>
 801174a:	f1ab 0b02 	sub.w	fp, fp, #2
 801174e:	fa5f fb8b 	uxtb.w	fp, fp
 8011752:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011756:	d820      	bhi.n	801179a <_printf_float+0x18a>
 8011758:	3901      	subs	r1, #1
 801175a:	465a      	mov	r2, fp
 801175c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011760:	9109      	str	r1, [sp, #36]	; 0x24
 8011762:	f7ff ff17 	bl	8011594 <__exponent>
 8011766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011768:	1813      	adds	r3, r2, r0
 801176a:	2a01      	cmp	r2, #1
 801176c:	4681      	mov	r9, r0
 801176e:	6123      	str	r3, [r4, #16]
 8011770:	dc02      	bgt.n	8011778 <_printf_float+0x168>
 8011772:	6822      	ldr	r2, [r4, #0]
 8011774:	07d2      	lsls	r2, r2, #31
 8011776:	d501      	bpl.n	801177c <_printf_float+0x16c>
 8011778:	3301      	adds	r3, #1
 801177a:	6123      	str	r3, [r4, #16]
 801177c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011780:	2b00      	cmp	r3, #0
 8011782:	d09c      	beq.n	80116be <_printf_float+0xae>
 8011784:	232d      	movs	r3, #45	; 0x2d
 8011786:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801178a:	e798      	b.n	80116be <_printf_float+0xae>
 801178c:	9a06      	ldr	r2, [sp, #24]
 801178e:	2a47      	cmp	r2, #71	; 0x47
 8011790:	d1be      	bne.n	8011710 <_printf_float+0x100>
 8011792:	2b00      	cmp	r3, #0
 8011794:	d1bc      	bne.n	8011710 <_printf_float+0x100>
 8011796:	2301      	movs	r3, #1
 8011798:	e7b9      	b.n	801170e <_printf_float+0xfe>
 801179a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801179e:	d118      	bne.n	80117d2 <_printf_float+0x1c2>
 80117a0:	2900      	cmp	r1, #0
 80117a2:	6863      	ldr	r3, [r4, #4]
 80117a4:	dd0b      	ble.n	80117be <_printf_float+0x1ae>
 80117a6:	6121      	str	r1, [r4, #16]
 80117a8:	b913      	cbnz	r3, 80117b0 <_printf_float+0x1a0>
 80117aa:	6822      	ldr	r2, [r4, #0]
 80117ac:	07d0      	lsls	r0, r2, #31
 80117ae:	d502      	bpl.n	80117b6 <_printf_float+0x1a6>
 80117b0:	3301      	adds	r3, #1
 80117b2:	440b      	add	r3, r1
 80117b4:	6123      	str	r3, [r4, #16]
 80117b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80117b8:	f04f 0900 	mov.w	r9, #0
 80117bc:	e7de      	b.n	801177c <_printf_float+0x16c>
 80117be:	b913      	cbnz	r3, 80117c6 <_printf_float+0x1b6>
 80117c0:	6822      	ldr	r2, [r4, #0]
 80117c2:	07d2      	lsls	r2, r2, #31
 80117c4:	d501      	bpl.n	80117ca <_printf_float+0x1ba>
 80117c6:	3302      	adds	r3, #2
 80117c8:	e7f4      	b.n	80117b4 <_printf_float+0x1a4>
 80117ca:	2301      	movs	r3, #1
 80117cc:	e7f2      	b.n	80117b4 <_printf_float+0x1a4>
 80117ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80117d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117d4:	4299      	cmp	r1, r3
 80117d6:	db05      	blt.n	80117e4 <_printf_float+0x1d4>
 80117d8:	6823      	ldr	r3, [r4, #0]
 80117da:	6121      	str	r1, [r4, #16]
 80117dc:	07d8      	lsls	r0, r3, #31
 80117de:	d5ea      	bpl.n	80117b6 <_printf_float+0x1a6>
 80117e0:	1c4b      	adds	r3, r1, #1
 80117e2:	e7e7      	b.n	80117b4 <_printf_float+0x1a4>
 80117e4:	2900      	cmp	r1, #0
 80117e6:	bfd4      	ite	le
 80117e8:	f1c1 0202 	rsble	r2, r1, #2
 80117ec:	2201      	movgt	r2, #1
 80117ee:	4413      	add	r3, r2
 80117f0:	e7e0      	b.n	80117b4 <_printf_float+0x1a4>
 80117f2:	6823      	ldr	r3, [r4, #0]
 80117f4:	055a      	lsls	r2, r3, #21
 80117f6:	d407      	bmi.n	8011808 <_printf_float+0x1f8>
 80117f8:	6923      	ldr	r3, [r4, #16]
 80117fa:	4642      	mov	r2, r8
 80117fc:	4631      	mov	r1, r6
 80117fe:	4628      	mov	r0, r5
 8011800:	47b8      	blx	r7
 8011802:	3001      	adds	r0, #1
 8011804:	d12c      	bne.n	8011860 <_printf_float+0x250>
 8011806:	e764      	b.n	80116d2 <_printf_float+0xc2>
 8011808:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801180c:	f240 80e0 	bls.w	80119d0 <_printf_float+0x3c0>
 8011810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011814:	2200      	movs	r2, #0
 8011816:	2300      	movs	r3, #0
 8011818:	f7ef f966 	bl	8000ae8 <__aeabi_dcmpeq>
 801181c:	2800      	cmp	r0, #0
 801181e:	d034      	beq.n	801188a <_printf_float+0x27a>
 8011820:	4a37      	ldr	r2, [pc, #220]	; (8011900 <_printf_float+0x2f0>)
 8011822:	2301      	movs	r3, #1
 8011824:	4631      	mov	r1, r6
 8011826:	4628      	mov	r0, r5
 8011828:	47b8      	blx	r7
 801182a:	3001      	adds	r0, #1
 801182c:	f43f af51 	beq.w	80116d2 <_printf_float+0xc2>
 8011830:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011834:	429a      	cmp	r2, r3
 8011836:	db02      	blt.n	801183e <_printf_float+0x22e>
 8011838:	6823      	ldr	r3, [r4, #0]
 801183a:	07d8      	lsls	r0, r3, #31
 801183c:	d510      	bpl.n	8011860 <_printf_float+0x250>
 801183e:	ee18 3a10 	vmov	r3, s16
 8011842:	4652      	mov	r2, sl
 8011844:	4631      	mov	r1, r6
 8011846:	4628      	mov	r0, r5
 8011848:	47b8      	blx	r7
 801184a:	3001      	adds	r0, #1
 801184c:	f43f af41 	beq.w	80116d2 <_printf_float+0xc2>
 8011850:	f04f 0800 	mov.w	r8, #0
 8011854:	f104 091a 	add.w	r9, r4, #26
 8011858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801185a:	3b01      	subs	r3, #1
 801185c:	4543      	cmp	r3, r8
 801185e:	dc09      	bgt.n	8011874 <_printf_float+0x264>
 8011860:	6823      	ldr	r3, [r4, #0]
 8011862:	079b      	lsls	r3, r3, #30
 8011864:	f100 8105 	bmi.w	8011a72 <_printf_float+0x462>
 8011868:	68e0      	ldr	r0, [r4, #12]
 801186a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801186c:	4298      	cmp	r0, r3
 801186e:	bfb8      	it	lt
 8011870:	4618      	movlt	r0, r3
 8011872:	e730      	b.n	80116d6 <_printf_float+0xc6>
 8011874:	2301      	movs	r3, #1
 8011876:	464a      	mov	r2, r9
 8011878:	4631      	mov	r1, r6
 801187a:	4628      	mov	r0, r5
 801187c:	47b8      	blx	r7
 801187e:	3001      	adds	r0, #1
 8011880:	f43f af27 	beq.w	80116d2 <_printf_float+0xc2>
 8011884:	f108 0801 	add.w	r8, r8, #1
 8011888:	e7e6      	b.n	8011858 <_printf_float+0x248>
 801188a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801188c:	2b00      	cmp	r3, #0
 801188e:	dc39      	bgt.n	8011904 <_printf_float+0x2f4>
 8011890:	4a1b      	ldr	r2, [pc, #108]	; (8011900 <_printf_float+0x2f0>)
 8011892:	2301      	movs	r3, #1
 8011894:	4631      	mov	r1, r6
 8011896:	4628      	mov	r0, r5
 8011898:	47b8      	blx	r7
 801189a:	3001      	adds	r0, #1
 801189c:	f43f af19 	beq.w	80116d2 <_printf_float+0xc2>
 80118a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80118a4:	4313      	orrs	r3, r2
 80118a6:	d102      	bne.n	80118ae <_printf_float+0x29e>
 80118a8:	6823      	ldr	r3, [r4, #0]
 80118aa:	07d9      	lsls	r1, r3, #31
 80118ac:	d5d8      	bpl.n	8011860 <_printf_float+0x250>
 80118ae:	ee18 3a10 	vmov	r3, s16
 80118b2:	4652      	mov	r2, sl
 80118b4:	4631      	mov	r1, r6
 80118b6:	4628      	mov	r0, r5
 80118b8:	47b8      	blx	r7
 80118ba:	3001      	adds	r0, #1
 80118bc:	f43f af09 	beq.w	80116d2 <_printf_float+0xc2>
 80118c0:	f04f 0900 	mov.w	r9, #0
 80118c4:	f104 0a1a 	add.w	sl, r4, #26
 80118c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118ca:	425b      	negs	r3, r3
 80118cc:	454b      	cmp	r3, r9
 80118ce:	dc01      	bgt.n	80118d4 <_printf_float+0x2c4>
 80118d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118d2:	e792      	b.n	80117fa <_printf_float+0x1ea>
 80118d4:	2301      	movs	r3, #1
 80118d6:	4652      	mov	r2, sl
 80118d8:	4631      	mov	r1, r6
 80118da:	4628      	mov	r0, r5
 80118dc:	47b8      	blx	r7
 80118de:	3001      	adds	r0, #1
 80118e0:	f43f aef7 	beq.w	80116d2 <_printf_float+0xc2>
 80118e4:	f109 0901 	add.w	r9, r9, #1
 80118e8:	e7ee      	b.n	80118c8 <_printf_float+0x2b8>
 80118ea:	bf00      	nop
 80118ec:	7fefffff 	.word	0x7fefffff
 80118f0:	08017700 	.word	0x08017700
 80118f4:	08017704 	.word	0x08017704
 80118f8:	0801770c 	.word	0x0801770c
 80118fc:	08017708 	.word	0x08017708
 8011900:	08017a49 	.word	0x08017a49
 8011904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011906:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011908:	429a      	cmp	r2, r3
 801190a:	bfa8      	it	ge
 801190c:	461a      	movge	r2, r3
 801190e:	2a00      	cmp	r2, #0
 8011910:	4691      	mov	r9, r2
 8011912:	dc37      	bgt.n	8011984 <_printf_float+0x374>
 8011914:	f04f 0b00 	mov.w	fp, #0
 8011918:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801191c:	f104 021a 	add.w	r2, r4, #26
 8011920:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011922:	9305      	str	r3, [sp, #20]
 8011924:	eba3 0309 	sub.w	r3, r3, r9
 8011928:	455b      	cmp	r3, fp
 801192a:	dc33      	bgt.n	8011994 <_printf_float+0x384>
 801192c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011930:	429a      	cmp	r2, r3
 8011932:	db3b      	blt.n	80119ac <_printf_float+0x39c>
 8011934:	6823      	ldr	r3, [r4, #0]
 8011936:	07da      	lsls	r2, r3, #31
 8011938:	d438      	bmi.n	80119ac <_printf_float+0x39c>
 801193a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801193c:	9b05      	ldr	r3, [sp, #20]
 801193e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011940:	1ad3      	subs	r3, r2, r3
 8011942:	eba2 0901 	sub.w	r9, r2, r1
 8011946:	4599      	cmp	r9, r3
 8011948:	bfa8      	it	ge
 801194a:	4699      	movge	r9, r3
 801194c:	f1b9 0f00 	cmp.w	r9, #0
 8011950:	dc35      	bgt.n	80119be <_printf_float+0x3ae>
 8011952:	f04f 0800 	mov.w	r8, #0
 8011956:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801195a:	f104 0a1a 	add.w	sl, r4, #26
 801195e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011962:	1a9b      	subs	r3, r3, r2
 8011964:	eba3 0309 	sub.w	r3, r3, r9
 8011968:	4543      	cmp	r3, r8
 801196a:	f77f af79 	ble.w	8011860 <_printf_float+0x250>
 801196e:	2301      	movs	r3, #1
 8011970:	4652      	mov	r2, sl
 8011972:	4631      	mov	r1, r6
 8011974:	4628      	mov	r0, r5
 8011976:	47b8      	blx	r7
 8011978:	3001      	adds	r0, #1
 801197a:	f43f aeaa 	beq.w	80116d2 <_printf_float+0xc2>
 801197e:	f108 0801 	add.w	r8, r8, #1
 8011982:	e7ec      	b.n	801195e <_printf_float+0x34e>
 8011984:	4613      	mov	r3, r2
 8011986:	4631      	mov	r1, r6
 8011988:	4642      	mov	r2, r8
 801198a:	4628      	mov	r0, r5
 801198c:	47b8      	blx	r7
 801198e:	3001      	adds	r0, #1
 8011990:	d1c0      	bne.n	8011914 <_printf_float+0x304>
 8011992:	e69e      	b.n	80116d2 <_printf_float+0xc2>
 8011994:	2301      	movs	r3, #1
 8011996:	4631      	mov	r1, r6
 8011998:	4628      	mov	r0, r5
 801199a:	9205      	str	r2, [sp, #20]
 801199c:	47b8      	blx	r7
 801199e:	3001      	adds	r0, #1
 80119a0:	f43f ae97 	beq.w	80116d2 <_printf_float+0xc2>
 80119a4:	9a05      	ldr	r2, [sp, #20]
 80119a6:	f10b 0b01 	add.w	fp, fp, #1
 80119aa:	e7b9      	b.n	8011920 <_printf_float+0x310>
 80119ac:	ee18 3a10 	vmov	r3, s16
 80119b0:	4652      	mov	r2, sl
 80119b2:	4631      	mov	r1, r6
 80119b4:	4628      	mov	r0, r5
 80119b6:	47b8      	blx	r7
 80119b8:	3001      	adds	r0, #1
 80119ba:	d1be      	bne.n	801193a <_printf_float+0x32a>
 80119bc:	e689      	b.n	80116d2 <_printf_float+0xc2>
 80119be:	9a05      	ldr	r2, [sp, #20]
 80119c0:	464b      	mov	r3, r9
 80119c2:	4442      	add	r2, r8
 80119c4:	4631      	mov	r1, r6
 80119c6:	4628      	mov	r0, r5
 80119c8:	47b8      	blx	r7
 80119ca:	3001      	adds	r0, #1
 80119cc:	d1c1      	bne.n	8011952 <_printf_float+0x342>
 80119ce:	e680      	b.n	80116d2 <_printf_float+0xc2>
 80119d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119d2:	2a01      	cmp	r2, #1
 80119d4:	dc01      	bgt.n	80119da <_printf_float+0x3ca>
 80119d6:	07db      	lsls	r3, r3, #31
 80119d8:	d538      	bpl.n	8011a4c <_printf_float+0x43c>
 80119da:	2301      	movs	r3, #1
 80119dc:	4642      	mov	r2, r8
 80119de:	4631      	mov	r1, r6
 80119e0:	4628      	mov	r0, r5
 80119e2:	47b8      	blx	r7
 80119e4:	3001      	adds	r0, #1
 80119e6:	f43f ae74 	beq.w	80116d2 <_printf_float+0xc2>
 80119ea:	ee18 3a10 	vmov	r3, s16
 80119ee:	4652      	mov	r2, sl
 80119f0:	4631      	mov	r1, r6
 80119f2:	4628      	mov	r0, r5
 80119f4:	47b8      	blx	r7
 80119f6:	3001      	adds	r0, #1
 80119f8:	f43f ae6b 	beq.w	80116d2 <_printf_float+0xc2>
 80119fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011a00:	2200      	movs	r2, #0
 8011a02:	2300      	movs	r3, #0
 8011a04:	f7ef f870 	bl	8000ae8 <__aeabi_dcmpeq>
 8011a08:	b9d8      	cbnz	r0, 8011a42 <_printf_float+0x432>
 8011a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a0c:	f108 0201 	add.w	r2, r8, #1
 8011a10:	3b01      	subs	r3, #1
 8011a12:	4631      	mov	r1, r6
 8011a14:	4628      	mov	r0, r5
 8011a16:	47b8      	blx	r7
 8011a18:	3001      	adds	r0, #1
 8011a1a:	d10e      	bne.n	8011a3a <_printf_float+0x42a>
 8011a1c:	e659      	b.n	80116d2 <_printf_float+0xc2>
 8011a1e:	2301      	movs	r3, #1
 8011a20:	4652      	mov	r2, sl
 8011a22:	4631      	mov	r1, r6
 8011a24:	4628      	mov	r0, r5
 8011a26:	47b8      	blx	r7
 8011a28:	3001      	adds	r0, #1
 8011a2a:	f43f ae52 	beq.w	80116d2 <_printf_float+0xc2>
 8011a2e:	f108 0801 	add.w	r8, r8, #1
 8011a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a34:	3b01      	subs	r3, #1
 8011a36:	4543      	cmp	r3, r8
 8011a38:	dcf1      	bgt.n	8011a1e <_printf_float+0x40e>
 8011a3a:	464b      	mov	r3, r9
 8011a3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011a40:	e6dc      	b.n	80117fc <_printf_float+0x1ec>
 8011a42:	f04f 0800 	mov.w	r8, #0
 8011a46:	f104 0a1a 	add.w	sl, r4, #26
 8011a4a:	e7f2      	b.n	8011a32 <_printf_float+0x422>
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	4642      	mov	r2, r8
 8011a50:	e7df      	b.n	8011a12 <_printf_float+0x402>
 8011a52:	2301      	movs	r3, #1
 8011a54:	464a      	mov	r2, r9
 8011a56:	4631      	mov	r1, r6
 8011a58:	4628      	mov	r0, r5
 8011a5a:	47b8      	blx	r7
 8011a5c:	3001      	adds	r0, #1
 8011a5e:	f43f ae38 	beq.w	80116d2 <_printf_float+0xc2>
 8011a62:	f108 0801 	add.w	r8, r8, #1
 8011a66:	68e3      	ldr	r3, [r4, #12]
 8011a68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011a6a:	1a5b      	subs	r3, r3, r1
 8011a6c:	4543      	cmp	r3, r8
 8011a6e:	dcf0      	bgt.n	8011a52 <_printf_float+0x442>
 8011a70:	e6fa      	b.n	8011868 <_printf_float+0x258>
 8011a72:	f04f 0800 	mov.w	r8, #0
 8011a76:	f104 0919 	add.w	r9, r4, #25
 8011a7a:	e7f4      	b.n	8011a66 <_printf_float+0x456>

08011a7c <_printf_common>:
 8011a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a80:	4616      	mov	r6, r2
 8011a82:	4699      	mov	r9, r3
 8011a84:	688a      	ldr	r2, [r1, #8]
 8011a86:	690b      	ldr	r3, [r1, #16]
 8011a88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	bfb8      	it	lt
 8011a90:	4613      	movlt	r3, r2
 8011a92:	6033      	str	r3, [r6, #0]
 8011a94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011a98:	4607      	mov	r7, r0
 8011a9a:	460c      	mov	r4, r1
 8011a9c:	b10a      	cbz	r2, 8011aa2 <_printf_common+0x26>
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	6033      	str	r3, [r6, #0]
 8011aa2:	6823      	ldr	r3, [r4, #0]
 8011aa4:	0699      	lsls	r1, r3, #26
 8011aa6:	bf42      	ittt	mi
 8011aa8:	6833      	ldrmi	r3, [r6, #0]
 8011aaa:	3302      	addmi	r3, #2
 8011aac:	6033      	strmi	r3, [r6, #0]
 8011aae:	6825      	ldr	r5, [r4, #0]
 8011ab0:	f015 0506 	ands.w	r5, r5, #6
 8011ab4:	d106      	bne.n	8011ac4 <_printf_common+0x48>
 8011ab6:	f104 0a19 	add.w	sl, r4, #25
 8011aba:	68e3      	ldr	r3, [r4, #12]
 8011abc:	6832      	ldr	r2, [r6, #0]
 8011abe:	1a9b      	subs	r3, r3, r2
 8011ac0:	42ab      	cmp	r3, r5
 8011ac2:	dc26      	bgt.n	8011b12 <_printf_common+0x96>
 8011ac4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011ac8:	1e13      	subs	r3, r2, #0
 8011aca:	6822      	ldr	r2, [r4, #0]
 8011acc:	bf18      	it	ne
 8011ace:	2301      	movne	r3, #1
 8011ad0:	0692      	lsls	r2, r2, #26
 8011ad2:	d42b      	bmi.n	8011b2c <_printf_common+0xb0>
 8011ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011ad8:	4649      	mov	r1, r9
 8011ada:	4638      	mov	r0, r7
 8011adc:	47c0      	blx	r8
 8011ade:	3001      	adds	r0, #1
 8011ae0:	d01e      	beq.n	8011b20 <_printf_common+0xa4>
 8011ae2:	6823      	ldr	r3, [r4, #0]
 8011ae4:	68e5      	ldr	r5, [r4, #12]
 8011ae6:	6832      	ldr	r2, [r6, #0]
 8011ae8:	f003 0306 	and.w	r3, r3, #6
 8011aec:	2b04      	cmp	r3, #4
 8011aee:	bf08      	it	eq
 8011af0:	1aad      	subeq	r5, r5, r2
 8011af2:	68a3      	ldr	r3, [r4, #8]
 8011af4:	6922      	ldr	r2, [r4, #16]
 8011af6:	bf0c      	ite	eq
 8011af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011afc:	2500      	movne	r5, #0
 8011afe:	4293      	cmp	r3, r2
 8011b00:	bfc4      	itt	gt
 8011b02:	1a9b      	subgt	r3, r3, r2
 8011b04:	18ed      	addgt	r5, r5, r3
 8011b06:	2600      	movs	r6, #0
 8011b08:	341a      	adds	r4, #26
 8011b0a:	42b5      	cmp	r5, r6
 8011b0c:	d11a      	bne.n	8011b44 <_printf_common+0xc8>
 8011b0e:	2000      	movs	r0, #0
 8011b10:	e008      	b.n	8011b24 <_printf_common+0xa8>
 8011b12:	2301      	movs	r3, #1
 8011b14:	4652      	mov	r2, sl
 8011b16:	4649      	mov	r1, r9
 8011b18:	4638      	mov	r0, r7
 8011b1a:	47c0      	blx	r8
 8011b1c:	3001      	adds	r0, #1
 8011b1e:	d103      	bne.n	8011b28 <_printf_common+0xac>
 8011b20:	f04f 30ff 	mov.w	r0, #4294967295
 8011b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b28:	3501      	adds	r5, #1
 8011b2a:	e7c6      	b.n	8011aba <_printf_common+0x3e>
 8011b2c:	18e1      	adds	r1, r4, r3
 8011b2e:	1c5a      	adds	r2, r3, #1
 8011b30:	2030      	movs	r0, #48	; 0x30
 8011b32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b36:	4422      	add	r2, r4
 8011b38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b40:	3302      	adds	r3, #2
 8011b42:	e7c7      	b.n	8011ad4 <_printf_common+0x58>
 8011b44:	2301      	movs	r3, #1
 8011b46:	4622      	mov	r2, r4
 8011b48:	4649      	mov	r1, r9
 8011b4a:	4638      	mov	r0, r7
 8011b4c:	47c0      	blx	r8
 8011b4e:	3001      	adds	r0, #1
 8011b50:	d0e6      	beq.n	8011b20 <_printf_common+0xa4>
 8011b52:	3601      	adds	r6, #1
 8011b54:	e7d9      	b.n	8011b0a <_printf_common+0x8e>
	...

08011b58 <_printf_i>:
 8011b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b5c:	460c      	mov	r4, r1
 8011b5e:	4691      	mov	r9, r2
 8011b60:	7e27      	ldrb	r7, [r4, #24]
 8011b62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011b64:	2f78      	cmp	r7, #120	; 0x78
 8011b66:	4680      	mov	r8, r0
 8011b68:	469a      	mov	sl, r3
 8011b6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b6e:	d807      	bhi.n	8011b80 <_printf_i+0x28>
 8011b70:	2f62      	cmp	r7, #98	; 0x62
 8011b72:	d80a      	bhi.n	8011b8a <_printf_i+0x32>
 8011b74:	2f00      	cmp	r7, #0
 8011b76:	f000 80d8 	beq.w	8011d2a <_printf_i+0x1d2>
 8011b7a:	2f58      	cmp	r7, #88	; 0x58
 8011b7c:	f000 80a3 	beq.w	8011cc6 <_printf_i+0x16e>
 8011b80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011b88:	e03a      	b.n	8011c00 <_printf_i+0xa8>
 8011b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011b8e:	2b15      	cmp	r3, #21
 8011b90:	d8f6      	bhi.n	8011b80 <_printf_i+0x28>
 8011b92:	a001      	add	r0, pc, #4	; (adr r0, 8011b98 <_printf_i+0x40>)
 8011b94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011b98:	08011bf1 	.word	0x08011bf1
 8011b9c:	08011c05 	.word	0x08011c05
 8011ba0:	08011b81 	.word	0x08011b81
 8011ba4:	08011b81 	.word	0x08011b81
 8011ba8:	08011b81 	.word	0x08011b81
 8011bac:	08011b81 	.word	0x08011b81
 8011bb0:	08011c05 	.word	0x08011c05
 8011bb4:	08011b81 	.word	0x08011b81
 8011bb8:	08011b81 	.word	0x08011b81
 8011bbc:	08011b81 	.word	0x08011b81
 8011bc0:	08011b81 	.word	0x08011b81
 8011bc4:	08011d11 	.word	0x08011d11
 8011bc8:	08011c35 	.word	0x08011c35
 8011bcc:	08011cf3 	.word	0x08011cf3
 8011bd0:	08011b81 	.word	0x08011b81
 8011bd4:	08011b81 	.word	0x08011b81
 8011bd8:	08011d33 	.word	0x08011d33
 8011bdc:	08011b81 	.word	0x08011b81
 8011be0:	08011c35 	.word	0x08011c35
 8011be4:	08011b81 	.word	0x08011b81
 8011be8:	08011b81 	.word	0x08011b81
 8011bec:	08011cfb 	.word	0x08011cfb
 8011bf0:	680b      	ldr	r3, [r1, #0]
 8011bf2:	1d1a      	adds	r2, r3, #4
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	600a      	str	r2, [r1, #0]
 8011bf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c00:	2301      	movs	r3, #1
 8011c02:	e0a3      	b.n	8011d4c <_printf_i+0x1f4>
 8011c04:	6825      	ldr	r5, [r4, #0]
 8011c06:	6808      	ldr	r0, [r1, #0]
 8011c08:	062e      	lsls	r6, r5, #24
 8011c0a:	f100 0304 	add.w	r3, r0, #4
 8011c0e:	d50a      	bpl.n	8011c26 <_printf_i+0xce>
 8011c10:	6805      	ldr	r5, [r0, #0]
 8011c12:	600b      	str	r3, [r1, #0]
 8011c14:	2d00      	cmp	r5, #0
 8011c16:	da03      	bge.n	8011c20 <_printf_i+0xc8>
 8011c18:	232d      	movs	r3, #45	; 0x2d
 8011c1a:	426d      	negs	r5, r5
 8011c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c20:	485e      	ldr	r0, [pc, #376]	; (8011d9c <_printf_i+0x244>)
 8011c22:	230a      	movs	r3, #10
 8011c24:	e019      	b.n	8011c5a <_printf_i+0x102>
 8011c26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011c2a:	6805      	ldr	r5, [r0, #0]
 8011c2c:	600b      	str	r3, [r1, #0]
 8011c2e:	bf18      	it	ne
 8011c30:	b22d      	sxthne	r5, r5
 8011c32:	e7ef      	b.n	8011c14 <_printf_i+0xbc>
 8011c34:	680b      	ldr	r3, [r1, #0]
 8011c36:	6825      	ldr	r5, [r4, #0]
 8011c38:	1d18      	adds	r0, r3, #4
 8011c3a:	6008      	str	r0, [r1, #0]
 8011c3c:	0628      	lsls	r0, r5, #24
 8011c3e:	d501      	bpl.n	8011c44 <_printf_i+0xec>
 8011c40:	681d      	ldr	r5, [r3, #0]
 8011c42:	e002      	b.n	8011c4a <_printf_i+0xf2>
 8011c44:	0669      	lsls	r1, r5, #25
 8011c46:	d5fb      	bpl.n	8011c40 <_printf_i+0xe8>
 8011c48:	881d      	ldrh	r5, [r3, #0]
 8011c4a:	4854      	ldr	r0, [pc, #336]	; (8011d9c <_printf_i+0x244>)
 8011c4c:	2f6f      	cmp	r7, #111	; 0x6f
 8011c4e:	bf0c      	ite	eq
 8011c50:	2308      	moveq	r3, #8
 8011c52:	230a      	movne	r3, #10
 8011c54:	2100      	movs	r1, #0
 8011c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c5a:	6866      	ldr	r6, [r4, #4]
 8011c5c:	60a6      	str	r6, [r4, #8]
 8011c5e:	2e00      	cmp	r6, #0
 8011c60:	bfa2      	ittt	ge
 8011c62:	6821      	ldrge	r1, [r4, #0]
 8011c64:	f021 0104 	bicge.w	r1, r1, #4
 8011c68:	6021      	strge	r1, [r4, #0]
 8011c6a:	b90d      	cbnz	r5, 8011c70 <_printf_i+0x118>
 8011c6c:	2e00      	cmp	r6, #0
 8011c6e:	d04d      	beq.n	8011d0c <_printf_i+0x1b4>
 8011c70:	4616      	mov	r6, r2
 8011c72:	fbb5 f1f3 	udiv	r1, r5, r3
 8011c76:	fb03 5711 	mls	r7, r3, r1, r5
 8011c7a:	5dc7      	ldrb	r7, [r0, r7]
 8011c7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011c80:	462f      	mov	r7, r5
 8011c82:	42bb      	cmp	r3, r7
 8011c84:	460d      	mov	r5, r1
 8011c86:	d9f4      	bls.n	8011c72 <_printf_i+0x11a>
 8011c88:	2b08      	cmp	r3, #8
 8011c8a:	d10b      	bne.n	8011ca4 <_printf_i+0x14c>
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	07df      	lsls	r7, r3, #31
 8011c90:	d508      	bpl.n	8011ca4 <_printf_i+0x14c>
 8011c92:	6923      	ldr	r3, [r4, #16]
 8011c94:	6861      	ldr	r1, [r4, #4]
 8011c96:	4299      	cmp	r1, r3
 8011c98:	bfde      	ittt	le
 8011c9a:	2330      	movle	r3, #48	; 0x30
 8011c9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011ca0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011ca4:	1b92      	subs	r2, r2, r6
 8011ca6:	6122      	str	r2, [r4, #16]
 8011ca8:	f8cd a000 	str.w	sl, [sp]
 8011cac:	464b      	mov	r3, r9
 8011cae:	aa03      	add	r2, sp, #12
 8011cb0:	4621      	mov	r1, r4
 8011cb2:	4640      	mov	r0, r8
 8011cb4:	f7ff fee2 	bl	8011a7c <_printf_common>
 8011cb8:	3001      	adds	r0, #1
 8011cba:	d14c      	bne.n	8011d56 <_printf_i+0x1fe>
 8011cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8011cc0:	b004      	add	sp, #16
 8011cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cc6:	4835      	ldr	r0, [pc, #212]	; (8011d9c <_printf_i+0x244>)
 8011cc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011ccc:	6823      	ldr	r3, [r4, #0]
 8011cce:	680e      	ldr	r6, [r1, #0]
 8011cd0:	061f      	lsls	r7, r3, #24
 8011cd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8011cd6:	600e      	str	r6, [r1, #0]
 8011cd8:	d514      	bpl.n	8011d04 <_printf_i+0x1ac>
 8011cda:	07d9      	lsls	r1, r3, #31
 8011cdc:	bf44      	itt	mi
 8011cde:	f043 0320 	orrmi.w	r3, r3, #32
 8011ce2:	6023      	strmi	r3, [r4, #0]
 8011ce4:	b91d      	cbnz	r5, 8011cee <_printf_i+0x196>
 8011ce6:	6823      	ldr	r3, [r4, #0]
 8011ce8:	f023 0320 	bic.w	r3, r3, #32
 8011cec:	6023      	str	r3, [r4, #0]
 8011cee:	2310      	movs	r3, #16
 8011cf0:	e7b0      	b.n	8011c54 <_printf_i+0xfc>
 8011cf2:	6823      	ldr	r3, [r4, #0]
 8011cf4:	f043 0320 	orr.w	r3, r3, #32
 8011cf8:	6023      	str	r3, [r4, #0]
 8011cfa:	2378      	movs	r3, #120	; 0x78
 8011cfc:	4828      	ldr	r0, [pc, #160]	; (8011da0 <_printf_i+0x248>)
 8011cfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011d02:	e7e3      	b.n	8011ccc <_printf_i+0x174>
 8011d04:	065e      	lsls	r6, r3, #25
 8011d06:	bf48      	it	mi
 8011d08:	b2ad      	uxthmi	r5, r5
 8011d0a:	e7e6      	b.n	8011cda <_printf_i+0x182>
 8011d0c:	4616      	mov	r6, r2
 8011d0e:	e7bb      	b.n	8011c88 <_printf_i+0x130>
 8011d10:	680b      	ldr	r3, [r1, #0]
 8011d12:	6826      	ldr	r6, [r4, #0]
 8011d14:	6960      	ldr	r0, [r4, #20]
 8011d16:	1d1d      	adds	r5, r3, #4
 8011d18:	600d      	str	r5, [r1, #0]
 8011d1a:	0635      	lsls	r5, r6, #24
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	d501      	bpl.n	8011d24 <_printf_i+0x1cc>
 8011d20:	6018      	str	r0, [r3, #0]
 8011d22:	e002      	b.n	8011d2a <_printf_i+0x1d2>
 8011d24:	0671      	lsls	r1, r6, #25
 8011d26:	d5fb      	bpl.n	8011d20 <_printf_i+0x1c8>
 8011d28:	8018      	strh	r0, [r3, #0]
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	6123      	str	r3, [r4, #16]
 8011d2e:	4616      	mov	r6, r2
 8011d30:	e7ba      	b.n	8011ca8 <_printf_i+0x150>
 8011d32:	680b      	ldr	r3, [r1, #0]
 8011d34:	1d1a      	adds	r2, r3, #4
 8011d36:	600a      	str	r2, [r1, #0]
 8011d38:	681e      	ldr	r6, [r3, #0]
 8011d3a:	6862      	ldr	r2, [r4, #4]
 8011d3c:	2100      	movs	r1, #0
 8011d3e:	4630      	mov	r0, r6
 8011d40:	f7ee fa5e 	bl	8000200 <memchr>
 8011d44:	b108      	cbz	r0, 8011d4a <_printf_i+0x1f2>
 8011d46:	1b80      	subs	r0, r0, r6
 8011d48:	6060      	str	r0, [r4, #4]
 8011d4a:	6863      	ldr	r3, [r4, #4]
 8011d4c:	6123      	str	r3, [r4, #16]
 8011d4e:	2300      	movs	r3, #0
 8011d50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d54:	e7a8      	b.n	8011ca8 <_printf_i+0x150>
 8011d56:	6923      	ldr	r3, [r4, #16]
 8011d58:	4632      	mov	r2, r6
 8011d5a:	4649      	mov	r1, r9
 8011d5c:	4640      	mov	r0, r8
 8011d5e:	47d0      	blx	sl
 8011d60:	3001      	adds	r0, #1
 8011d62:	d0ab      	beq.n	8011cbc <_printf_i+0x164>
 8011d64:	6823      	ldr	r3, [r4, #0]
 8011d66:	079b      	lsls	r3, r3, #30
 8011d68:	d413      	bmi.n	8011d92 <_printf_i+0x23a>
 8011d6a:	68e0      	ldr	r0, [r4, #12]
 8011d6c:	9b03      	ldr	r3, [sp, #12]
 8011d6e:	4298      	cmp	r0, r3
 8011d70:	bfb8      	it	lt
 8011d72:	4618      	movlt	r0, r3
 8011d74:	e7a4      	b.n	8011cc0 <_printf_i+0x168>
 8011d76:	2301      	movs	r3, #1
 8011d78:	4632      	mov	r2, r6
 8011d7a:	4649      	mov	r1, r9
 8011d7c:	4640      	mov	r0, r8
 8011d7e:	47d0      	blx	sl
 8011d80:	3001      	adds	r0, #1
 8011d82:	d09b      	beq.n	8011cbc <_printf_i+0x164>
 8011d84:	3501      	adds	r5, #1
 8011d86:	68e3      	ldr	r3, [r4, #12]
 8011d88:	9903      	ldr	r1, [sp, #12]
 8011d8a:	1a5b      	subs	r3, r3, r1
 8011d8c:	42ab      	cmp	r3, r5
 8011d8e:	dcf2      	bgt.n	8011d76 <_printf_i+0x21e>
 8011d90:	e7eb      	b.n	8011d6a <_printf_i+0x212>
 8011d92:	2500      	movs	r5, #0
 8011d94:	f104 0619 	add.w	r6, r4, #25
 8011d98:	e7f5      	b.n	8011d86 <_printf_i+0x22e>
 8011d9a:	bf00      	nop
 8011d9c:	08017710 	.word	0x08017710
 8011da0:	08017721 	.word	0x08017721

08011da4 <_scanf_float>:
 8011da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011da8:	b087      	sub	sp, #28
 8011daa:	4617      	mov	r7, r2
 8011dac:	9303      	str	r3, [sp, #12]
 8011dae:	688b      	ldr	r3, [r1, #8]
 8011db0:	1e5a      	subs	r2, r3, #1
 8011db2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011db6:	bf83      	ittte	hi
 8011db8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8011dbc:	195b      	addhi	r3, r3, r5
 8011dbe:	9302      	strhi	r3, [sp, #8]
 8011dc0:	2300      	movls	r3, #0
 8011dc2:	bf86      	itte	hi
 8011dc4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011dc8:	608b      	strhi	r3, [r1, #8]
 8011dca:	9302      	strls	r3, [sp, #8]
 8011dcc:	680b      	ldr	r3, [r1, #0]
 8011dce:	468b      	mov	fp, r1
 8011dd0:	2500      	movs	r5, #0
 8011dd2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011dd6:	f84b 3b1c 	str.w	r3, [fp], #28
 8011dda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011dde:	4680      	mov	r8, r0
 8011de0:	460c      	mov	r4, r1
 8011de2:	465e      	mov	r6, fp
 8011de4:	46aa      	mov	sl, r5
 8011de6:	46a9      	mov	r9, r5
 8011de8:	9501      	str	r5, [sp, #4]
 8011dea:	68a2      	ldr	r2, [r4, #8]
 8011dec:	b152      	cbz	r2, 8011e04 <_scanf_float+0x60>
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	2b4e      	cmp	r3, #78	; 0x4e
 8011df4:	d864      	bhi.n	8011ec0 <_scanf_float+0x11c>
 8011df6:	2b40      	cmp	r3, #64	; 0x40
 8011df8:	d83c      	bhi.n	8011e74 <_scanf_float+0xd0>
 8011dfa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011dfe:	b2c8      	uxtb	r0, r1
 8011e00:	280e      	cmp	r0, #14
 8011e02:	d93a      	bls.n	8011e7a <_scanf_float+0xd6>
 8011e04:	f1b9 0f00 	cmp.w	r9, #0
 8011e08:	d003      	beq.n	8011e12 <_scanf_float+0x6e>
 8011e0a:	6823      	ldr	r3, [r4, #0]
 8011e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011e10:	6023      	str	r3, [r4, #0]
 8011e12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011e16:	f1ba 0f01 	cmp.w	sl, #1
 8011e1a:	f200 8113 	bhi.w	8012044 <_scanf_float+0x2a0>
 8011e1e:	455e      	cmp	r6, fp
 8011e20:	f200 8105 	bhi.w	801202e <_scanf_float+0x28a>
 8011e24:	2501      	movs	r5, #1
 8011e26:	4628      	mov	r0, r5
 8011e28:	b007      	add	sp, #28
 8011e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e2e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011e32:	2a0d      	cmp	r2, #13
 8011e34:	d8e6      	bhi.n	8011e04 <_scanf_float+0x60>
 8011e36:	a101      	add	r1, pc, #4	; (adr r1, 8011e3c <_scanf_float+0x98>)
 8011e38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011e3c:	08011f7b 	.word	0x08011f7b
 8011e40:	08011e05 	.word	0x08011e05
 8011e44:	08011e05 	.word	0x08011e05
 8011e48:	08011e05 	.word	0x08011e05
 8011e4c:	08011fdb 	.word	0x08011fdb
 8011e50:	08011fb3 	.word	0x08011fb3
 8011e54:	08011e05 	.word	0x08011e05
 8011e58:	08011e05 	.word	0x08011e05
 8011e5c:	08011f89 	.word	0x08011f89
 8011e60:	08011e05 	.word	0x08011e05
 8011e64:	08011e05 	.word	0x08011e05
 8011e68:	08011e05 	.word	0x08011e05
 8011e6c:	08011e05 	.word	0x08011e05
 8011e70:	08011f41 	.word	0x08011f41
 8011e74:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8011e78:	e7db      	b.n	8011e32 <_scanf_float+0x8e>
 8011e7a:	290e      	cmp	r1, #14
 8011e7c:	d8c2      	bhi.n	8011e04 <_scanf_float+0x60>
 8011e7e:	a001      	add	r0, pc, #4	; (adr r0, 8011e84 <_scanf_float+0xe0>)
 8011e80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011e84:	08011f33 	.word	0x08011f33
 8011e88:	08011e05 	.word	0x08011e05
 8011e8c:	08011f33 	.word	0x08011f33
 8011e90:	08011fc7 	.word	0x08011fc7
 8011e94:	08011e05 	.word	0x08011e05
 8011e98:	08011ee1 	.word	0x08011ee1
 8011e9c:	08011f1d 	.word	0x08011f1d
 8011ea0:	08011f1d 	.word	0x08011f1d
 8011ea4:	08011f1d 	.word	0x08011f1d
 8011ea8:	08011f1d 	.word	0x08011f1d
 8011eac:	08011f1d 	.word	0x08011f1d
 8011eb0:	08011f1d 	.word	0x08011f1d
 8011eb4:	08011f1d 	.word	0x08011f1d
 8011eb8:	08011f1d 	.word	0x08011f1d
 8011ebc:	08011f1d 	.word	0x08011f1d
 8011ec0:	2b6e      	cmp	r3, #110	; 0x6e
 8011ec2:	d809      	bhi.n	8011ed8 <_scanf_float+0x134>
 8011ec4:	2b60      	cmp	r3, #96	; 0x60
 8011ec6:	d8b2      	bhi.n	8011e2e <_scanf_float+0x8a>
 8011ec8:	2b54      	cmp	r3, #84	; 0x54
 8011eca:	d077      	beq.n	8011fbc <_scanf_float+0x218>
 8011ecc:	2b59      	cmp	r3, #89	; 0x59
 8011ece:	d199      	bne.n	8011e04 <_scanf_float+0x60>
 8011ed0:	2d07      	cmp	r5, #7
 8011ed2:	d197      	bne.n	8011e04 <_scanf_float+0x60>
 8011ed4:	2508      	movs	r5, #8
 8011ed6:	e029      	b.n	8011f2c <_scanf_float+0x188>
 8011ed8:	2b74      	cmp	r3, #116	; 0x74
 8011eda:	d06f      	beq.n	8011fbc <_scanf_float+0x218>
 8011edc:	2b79      	cmp	r3, #121	; 0x79
 8011ede:	e7f6      	b.n	8011ece <_scanf_float+0x12a>
 8011ee0:	6821      	ldr	r1, [r4, #0]
 8011ee2:	05c8      	lsls	r0, r1, #23
 8011ee4:	d51a      	bpl.n	8011f1c <_scanf_float+0x178>
 8011ee6:	9b02      	ldr	r3, [sp, #8]
 8011ee8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011eec:	6021      	str	r1, [r4, #0]
 8011eee:	f109 0901 	add.w	r9, r9, #1
 8011ef2:	b11b      	cbz	r3, 8011efc <_scanf_float+0x158>
 8011ef4:	3b01      	subs	r3, #1
 8011ef6:	3201      	adds	r2, #1
 8011ef8:	9302      	str	r3, [sp, #8]
 8011efa:	60a2      	str	r2, [r4, #8]
 8011efc:	68a3      	ldr	r3, [r4, #8]
 8011efe:	3b01      	subs	r3, #1
 8011f00:	60a3      	str	r3, [r4, #8]
 8011f02:	6923      	ldr	r3, [r4, #16]
 8011f04:	3301      	adds	r3, #1
 8011f06:	6123      	str	r3, [r4, #16]
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	3b01      	subs	r3, #1
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	607b      	str	r3, [r7, #4]
 8011f10:	f340 8084 	ble.w	801201c <_scanf_float+0x278>
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	3301      	adds	r3, #1
 8011f18:	603b      	str	r3, [r7, #0]
 8011f1a:	e766      	b.n	8011dea <_scanf_float+0x46>
 8011f1c:	eb1a 0f05 	cmn.w	sl, r5
 8011f20:	f47f af70 	bne.w	8011e04 <_scanf_float+0x60>
 8011f24:	6822      	ldr	r2, [r4, #0]
 8011f26:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8011f2a:	6022      	str	r2, [r4, #0]
 8011f2c:	f806 3b01 	strb.w	r3, [r6], #1
 8011f30:	e7e4      	b.n	8011efc <_scanf_float+0x158>
 8011f32:	6822      	ldr	r2, [r4, #0]
 8011f34:	0610      	lsls	r0, r2, #24
 8011f36:	f57f af65 	bpl.w	8011e04 <_scanf_float+0x60>
 8011f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011f3e:	e7f4      	b.n	8011f2a <_scanf_float+0x186>
 8011f40:	f1ba 0f00 	cmp.w	sl, #0
 8011f44:	d10e      	bne.n	8011f64 <_scanf_float+0x1c0>
 8011f46:	f1b9 0f00 	cmp.w	r9, #0
 8011f4a:	d10e      	bne.n	8011f6a <_scanf_float+0x1c6>
 8011f4c:	6822      	ldr	r2, [r4, #0]
 8011f4e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011f52:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011f56:	d108      	bne.n	8011f6a <_scanf_float+0x1c6>
 8011f58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011f5c:	6022      	str	r2, [r4, #0]
 8011f5e:	f04f 0a01 	mov.w	sl, #1
 8011f62:	e7e3      	b.n	8011f2c <_scanf_float+0x188>
 8011f64:	f1ba 0f02 	cmp.w	sl, #2
 8011f68:	d055      	beq.n	8012016 <_scanf_float+0x272>
 8011f6a:	2d01      	cmp	r5, #1
 8011f6c:	d002      	beq.n	8011f74 <_scanf_float+0x1d0>
 8011f6e:	2d04      	cmp	r5, #4
 8011f70:	f47f af48 	bne.w	8011e04 <_scanf_float+0x60>
 8011f74:	3501      	adds	r5, #1
 8011f76:	b2ed      	uxtb	r5, r5
 8011f78:	e7d8      	b.n	8011f2c <_scanf_float+0x188>
 8011f7a:	f1ba 0f01 	cmp.w	sl, #1
 8011f7e:	f47f af41 	bne.w	8011e04 <_scanf_float+0x60>
 8011f82:	f04f 0a02 	mov.w	sl, #2
 8011f86:	e7d1      	b.n	8011f2c <_scanf_float+0x188>
 8011f88:	b97d      	cbnz	r5, 8011faa <_scanf_float+0x206>
 8011f8a:	f1b9 0f00 	cmp.w	r9, #0
 8011f8e:	f47f af3c 	bne.w	8011e0a <_scanf_float+0x66>
 8011f92:	6822      	ldr	r2, [r4, #0]
 8011f94:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011f98:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8011f9c:	f47f af39 	bne.w	8011e12 <_scanf_float+0x6e>
 8011fa0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011fa4:	6022      	str	r2, [r4, #0]
 8011fa6:	2501      	movs	r5, #1
 8011fa8:	e7c0      	b.n	8011f2c <_scanf_float+0x188>
 8011faa:	2d03      	cmp	r5, #3
 8011fac:	d0e2      	beq.n	8011f74 <_scanf_float+0x1d0>
 8011fae:	2d05      	cmp	r5, #5
 8011fb0:	e7de      	b.n	8011f70 <_scanf_float+0x1cc>
 8011fb2:	2d02      	cmp	r5, #2
 8011fb4:	f47f af26 	bne.w	8011e04 <_scanf_float+0x60>
 8011fb8:	2503      	movs	r5, #3
 8011fba:	e7b7      	b.n	8011f2c <_scanf_float+0x188>
 8011fbc:	2d06      	cmp	r5, #6
 8011fbe:	f47f af21 	bne.w	8011e04 <_scanf_float+0x60>
 8011fc2:	2507      	movs	r5, #7
 8011fc4:	e7b2      	b.n	8011f2c <_scanf_float+0x188>
 8011fc6:	6822      	ldr	r2, [r4, #0]
 8011fc8:	0591      	lsls	r1, r2, #22
 8011fca:	f57f af1b 	bpl.w	8011e04 <_scanf_float+0x60>
 8011fce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8011fd2:	6022      	str	r2, [r4, #0]
 8011fd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8011fd8:	e7a8      	b.n	8011f2c <_scanf_float+0x188>
 8011fda:	6822      	ldr	r2, [r4, #0]
 8011fdc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8011fe0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8011fe4:	d006      	beq.n	8011ff4 <_scanf_float+0x250>
 8011fe6:	0550      	lsls	r0, r2, #21
 8011fe8:	f57f af0c 	bpl.w	8011e04 <_scanf_float+0x60>
 8011fec:	f1b9 0f00 	cmp.w	r9, #0
 8011ff0:	f43f af0f 	beq.w	8011e12 <_scanf_float+0x6e>
 8011ff4:	0591      	lsls	r1, r2, #22
 8011ff6:	bf58      	it	pl
 8011ff8:	9901      	ldrpl	r1, [sp, #4]
 8011ffa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011ffe:	bf58      	it	pl
 8012000:	eba9 0101 	subpl.w	r1, r9, r1
 8012004:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012008:	bf58      	it	pl
 801200a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801200e:	6022      	str	r2, [r4, #0]
 8012010:	f04f 0900 	mov.w	r9, #0
 8012014:	e78a      	b.n	8011f2c <_scanf_float+0x188>
 8012016:	f04f 0a03 	mov.w	sl, #3
 801201a:	e787      	b.n	8011f2c <_scanf_float+0x188>
 801201c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012020:	4639      	mov	r1, r7
 8012022:	4640      	mov	r0, r8
 8012024:	4798      	blx	r3
 8012026:	2800      	cmp	r0, #0
 8012028:	f43f aedf 	beq.w	8011dea <_scanf_float+0x46>
 801202c:	e6ea      	b.n	8011e04 <_scanf_float+0x60>
 801202e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012032:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012036:	463a      	mov	r2, r7
 8012038:	4640      	mov	r0, r8
 801203a:	4798      	blx	r3
 801203c:	6923      	ldr	r3, [r4, #16]
 801203e:	3b01      	subs	r3, #1
 8012040:	6123      	str	r3, [r4, #16]
 8012042:	e6ec      	b.n	8011e1e <_scanf_float+0x7a>
 8012044:	1e6b      	subs	r3, r5, #1
 8012046:	2b06      	cmp	r3, #6
 8012048:	d825      	bhi.n	8012096 <_scanf_float+0x2f2>
 801204a:	2d02      	cmp	r5, #2
 801204c:	d836      	bhi.n	80120bc <_scanf_float+0x318>
 801204e:	455e      	cmp	r6, fp
 8012050:	f67f aee8 	bls.w	8011e24 <_scanf_float+0x80>
 8012054:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012058:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801205c:	463a      	mov	r2, r7
 801205e:	4640      	mov	r0, r8
 8012060:	4798      	blx	r3
 8012062:	6923      	ldr	r3, [r4, #16]
 8012064:	3b01      	subs	r3, #1
 8012066:	6123      	str	r3, [r4, #16]
 8012068:	e7f1      	b.n	801204e <_scanf_float+0x2aa>
 801206a:	9802      	ldr	r0, [sp, #8]
 801206c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012070:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012074:	9002      	str	r0, [sp, #8]
 8012076:	463a      	mov	r2, r7
 8012078:	4640      	mov	r0, r8
 801207a:	4798      	blx	r3
 801207c:	6923      	ldr	r3, [r4, #16]
 801207e:	3b01      	subs	r3, #1
 8012080:	6123      	str	r3, [r4, #16]
 8012082:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012086:	fa5f fa8a 	uxtb.w	sl, sl
 801208a:	f1ba 0f02 	cmp.w	sl, #2
 801208e:	d1ec      	bne.n	801206a <_scanf_float+0x2c6>
 8012090:	3d03      	subs	r5, #3
 8012092:	b2ed      	uxtb	r5, r5
 8012094:	1b76      	subs	r6, r6, r5
 8012096:	6823      	ldr	r3, [r4, #0]
 8012098:	05da      	lsls	r2, r3, #23
 801209a:	d52f      	bpl.n	80120fc <_scanf_float+0x358>
 801209c:	055b      	lsls	r3, r3, #21
 801209e:	d510      	bpl.n	80120c2 <_scanf_float+0x31e>
 80120a0:	455e      	cmp	r6, fp
 80120a2:	f67f aebf 	bls.w	8011e24 <_scanf_float+0x80>
 80120a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80120aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80120ae:	463a      	mov	r2, r7
 80120b0:	4640      	mov	r0, r8
 80120b2:	4798      	blx	r3
 80120b4:	6923      	ldr	r3, [r4, #16]
 80120b6:	3b01      	subs	r3, #1
 80120b8:	6123      	str	r3, [r4, #16]
 80120ba:	e7f1      	b.n	80120a0 <_scanf_float+0x2fc>
 80120bc:	46aa      	mov	sl, r5
 80120be:	9602      	str	r6, [sp, #8]
 80120c0:	e7df      	b.n	8012082 <_scanf_float+0x2de>
 80120c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80120c6:	6923      	ldr	r3, [r4, #16]
 80120c8:	2965      	cmp	r1, #101	; 0x65
 80120ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80120ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80120d2:	6123      	str	r3, [r4, #16]
 80120d4:	d00c      	beq.n	80120f0 <_scanf_float+0x34c>
 80120d6:	2945      	cmp	r1, #69	; 0x45
 80120d8:	d00a      	beq.n	80120f0 <_scanf_float+0x34c>
 80120da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80120de:	463a      	mov	r2, r7
 80120e0:	4640      	mov	r0, r8
 80120e2:	4798      	blx	r3
 80120e4:	6923      	ldr	r3, [r4, #16]
 80120e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80120ea:	3b01      	subs	r3, #1
 80120ec:	1eb5      	subs	r5, r6, #2
 80120ee:	6123      	str	r3, [r4, #16]
 80120f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80120f4:	463a      	mov	r2, r7
 80120f6:	4640      	mov	r0, r8
 80120f8:	4798      	blx	r3
 80120fa:	462e      	mov	r6, r5
 80120fc:	6825      	ldr	r5, [r4, #0]
 80120fe:	f015 0510 	ands.w	r5, r5, #16
 8012102:	d158      	bne.n	80121b6 <_scanf_float+0x412>
 8012104:	7035      	strb	r5, [r6, #0]
 8012106:	6823      	ldr	r3, [r4, #0]
 8012108:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801210c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012110:	d11c      	bne.n	801214c <_scanf_float+0x3a8>
 8012112:	9b01      	ldr	r3, [sp, #4]
 8012114:	454b      	cmp	r3, r9
 8012116:	eba3 0209 	sub.w	r2, r3, r9
 801211a:	d124      	bne.n	8012166 <_scanf_float+0x3c2>
 801211c:	2200      	movs	r2, #0
 801211e:	4659      	mov	r1, fp
 8012120:	4640      	mov	r0, r8
 8012122:	f001 f86b 	bl	80131fc <_strtod_r>
 8012126:	9b03      	ldr	r3, [sp, #12]
 8012128:	6821      	ldr	r1, [r4, #0]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	f011 0f02 	tst.w	r1, #2
 8012130:	ec57 6b10 	vmov	r6, r7, d0
 8012134:	f103 0204 	add.w	r2, r3, #4
 8012138:	d020      	beq.n	801217c <_scanf_float+0x3d8>
 801213a:	9903      	ldr	r1, [sp, #12]
 801213c:	600a      	str	r2, [r1, #0]
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	e9c3 6700 	strd	r6, r7, [r3]
 8012144:	68e3      	ldr	r3, [r4, #12]
 8012146:	3301      	adds	r3, #1
 8012148:	60e3      	str	r3, [r4, #12]
 801214a:	e66c      	b.n	8011e26 <_scanf_float+0x82>
 801214c:	9b04      	ldr	r3, [sp, #16]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d0e4      	beq.n	801211c <_scanf_float+0x378>
 8012152:	9905      	ldr	r1, [sp, #20]
 8012154:	230a      	movs	r3, #10
 8012156:	462a      	mov	r2, r5
 8012158:	3101      	adds	r1, #1
 801215a:	4640      	mov	r0, r8
 801215c:	f001 f8d8 	bl	8013310 <_strtol_r>
 8012160:	9b04      	ldr	r3, [sp, #16]
 8012162:	9e05      	ldr	r6, [sp, #20]
 8012164:	1ac2      	subs	r2, r0, r3
 8012166:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801216a:	429e      	cmp	r6, r3
 801216c:	bf28      	it	cs
 801216e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8012172:	4912      	ldr	r1, [pc, #72]	; (80121bc <_scanf_float+0x418>)
 8012174:	4630      	mov	r0, r6
 8012176:	f000 f977 	bl	8012468 <siprintf>
 801217a:	e7cf      	b.n	801211c <_scanf_float+0x378>
 801217c:	f011 0f04 	tst.w	r1, #4
 8012180:	9903      	ldr	r1, [sp, #12]
 8012182:	600a      	str	r2, [r1, #0]
 8012184:	d1db      	bne.n	801213e <_scanf_float+0x39a>
 8012186:	f8d3 8000 	ldr.w	r8, [r3]
 801218a:	ee10 2a10 	vmov	r2, s0
 801218e:	ee10 0a10 	vmov	r0, s0
 8012192:	463b      	mov	r3, r7
 8012194:	4639      	mov	r1, r7
 8012196:	f7ee fcd9 	bl	8000b4c <__aeabi_dcmpun>
 801219a:	b128      	cbz	r0, 80121a8 <_scanf_float+0x404>
 801219c:	4808      	ldr	r0, [pc, #32]	; (80121c0 <_scanf_float+0x41c>)
 801219e:	f000 f919 	bl	80123d4 <nanf>
 80121a2:	ed88 0a00 	vstr	s0, [r8]
 80121a6:	e7cd      	b.n	8012144 <_scanf_float+0x3a0>
 80121a8:	4630      	mov	r0, r6
 80121aa:	4639      	mov	r1, r7
 80121ac:	f7ee fd2c 	bl	8000c08 <__aeabi_d2f>
 80121b0:	f8c8 0000 	str.w	r0, [r8]
 80121b4:	e7c6      	b.n	8012144 <_scanf_float+0x3a0>
 80121b6:	2500      	movs	r5, #0
 80121b8:	e635      	b.n	8011e26 <_scanf_float+0x82>
 80121ba:	bf00      	nop
 80121bc:	08017732 	.word	0x08017732
 80121c0:	080177c3 	.word	0x080177c3

080121c4 <iprintf>:
 80121c4:	b40f      	push	{r0, r1, r2, r3}
 80121c6:	4b0a      	ldr	r3, [pc, #40]	; (80121f0 <iprintf+0x2c>)
 80121c8:	b513      	push	{r0, r1, r4, lr}
 80121ca:	681c      	ldr	r4, [r3, #0]
 80121cc:	b124      	cbz	r4, 80121d8 <iprintf+0x14>
 80121ce:	69a3      	ldr	r3, [r4, #24]
 80121d0:	b913      	cbnz	r3, 80121d8 <iprintf+0x14>
 80121d2:	4620      	mov	r0, r4
 80121d4:	f7fe ffd4 	bl	8011180 <__sinit>
 80121d8:	ab05      	add	r3, sp, #20
 80121da:	9a04      	ldr	r2, [sp, #16]
 80121dc:	68a1      	ldr	r1, [r4, #8]
 80121de:	9301      	str	r3, [sp, #4]
 80121e0:	4620      	mov	r0, r4
 80121e2:	f003 fdb1 	bl	8015d48 <_vfiprintf_r>
 80121e6:	b002      	add	sp, #8
 80121e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121ec:	b004      	add	sp, #16
 80121ee:	4770      	bx	lr
 80121f0:	200000d8 	.word	0x200000d8

080121f4 <_puts_r>:
 80121f4:	b570      	push	{r4, r5, r6, lr}
 80121f6:	460e      	mov	r6, r1
 80121f8:	4605      	mov	r5, r0
 80121fa:	b118      	cbz	r0, 8012204 <_puts_r+0x10>
 80121fc:	6983      	ldr	r3, [r0, #24]
 80121fe:	b90b      	cbnz	r3, 8012204 <_puts_r+0x10>
 8012200:	f7fe ffbe 	bl	8011180 <__sinit>
 8012204:	69ab      	ldr	r3, [r5, #24]
 8012206:	68ac      	ldr	r4, [r5, #8]
 8012208:	b913      	cbnz	r3, 8012210 <_puts_r+0x1c>
 801220a:	4628      	mov	r0, r5
 801220c:	f7fe ffb8 	bl	8011180 <__sinit>
 8012210:	4b2c      	ldr	r3, [pc, #176]	; (80122c4 <_puts_r+0xd0>)
 8012212:	429c      	cmp	r4, r3
 8012214:	d120      	bne.n	8012258 <_puts_r+0x64>
 8012216:	686c      	ldr	r4, [r5, #4]
 8012218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801221a:	07db      	lsls	r3, r3, #31
 801221c:	d405      	bmi.n	801222a <_puts_r+0x36>
 801221e:	89a3      	ldrh	r3, [r4, #12]
 8012220:	0598      	lsls	r0, r3, #22
 8012222:	d402      	bmi.n	801222a <_puts_r+0x36>
 8012224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012226:	f7ff f86e 	bl	8011306 <__retarget_lock_acquire_recursive>
 801222a:	89a3      	ldrh	r3, [r4, #12]
 801222c:	0719      	lsls	r1, r3, #28
 801222e:	d51d      	bpl.n	801226c <_puts_r+0x78>
 8012230:	6923      	ldr	r3, [r4, #16]
 8012232:	b1db      	cbz	r3, 801226c <_puts_r+0x78>
 8012234:	3e01      	subs	r6, #1
 8012236:	68a3      	ldr	r3, [r4, #8]
 8012238:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801223c:	3b01      	subs	r3, #1
 801223e:	60a3      	str	r3, [r4, #8]
 8012240:	bb39      	cbnz	r1, 8012292 <_puts_r+0x9e>
 8012242:	2b00      	cmp	r3, #0
 8012244:	da38      	bge.n	80122b8 <_puts_r+0xc4>
 8012246:	4622      	mov	r2, r4
 8012248:	210a      	movs	r1, #10
 801224a:	4628      	mov	r0, r5
 801224c:	f001 f8e0 	bl	8013410 <__swbuf_r>
 8012250:	3001      	adds	r0, #1
 8012252:	d011      	beq.n	8012278 <_puts_r+0x84>
 8012254:	250a      	movs	r5, #10
 8012256:	e011      	b.n	801227c <_puts_r+0x88>
 8012258:	4b1b      	ldr	r3, [pc, #108]	; (80122c8 <_puts_r+0xd4>)
 801225a:	429c      	cmp	r4, r3
 801225c:	d101      	bne.n	8012262 <_puts_r+0x6e>
 801225e:	68ac      	ldr	r4, [r5, #8]
 8012260:	e7da      	b.n	8012218 <_puts_r+0x24>
 8012262:	4b1a      	ldr	r3, [pc, #104]	; (80122cc <_puts_r+0xd8>)
 8012264:	429c      	cmp	r4, r3
 8012266:	bf08      	it	eq
 8012268:	68ec      	ldreq	r4, [r5, #12]
 801226a:	e7d5      	b.n	8012218 <_puts_r+0x24>
 801226c:	4621      	mov	r1, r4
 801226e:	4628      	mov	r0, r5
 8012270:	f001 f932 	bl	80134d8 <__swsetup_r>
 8012274:	2800      	cmp	r0, #0
 8012276:	d0dd      	beq.n	8012234 <_puts_r+0x40>
 8012278:	f04f 35ff 	mov.w	r5, #4294967295
 801227c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801227e:	07da      	lsls	r2, r3, #31
 8012280:	d405      	bmi.n	801228e <_puts_r+0x9a>
 8012282:	89a3      	ldrh	r3, [r4, #12]
 8012284:	059b      	lsls	r3, r3, #22
 8012286:	d402      	bmi.n	801228e <_puts_r+0x9a>
 8012288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801228a:	f7ff f83d 	bl	8011308 <__retarget_lock_release_recursive>
 801228e:	4628      	mov	r0, r5
 8012290:	bd70      	pop	{r4, r5, r6, pc}
 8012292:	2b00      	cmp	r3, #0
 8012294:	da04      	bge.n	80122a0 <_puts_r+0xac>
 8012296:	69a2      	ldr	r2, [r4, #24]
 8012298:	429a      	cmp	r2, r3
 801229a:	dc06      	bgt.n	80122aa <_puts_r+0xb6>
 801229c:	290a      	cmp	r1, #10
 801229e:	d004      	beq.n	80122aa <_puts_r+0xb6>
 80122a0:	6823      	ldr	r3, [r4, #0]
 80122a2:	1c5a      	adds	r2, r3, #1
 80122a4:	6022      	str	r2, [r4, #0]
 80122a6:	7019      	strb	r1, [r3, #0]
 80122a8:	e7c5      	b.n	8012236 <_puts_r+0x42>
 80122aa:	4622      	mov	r2, r4
 80122ac:	4628      	mov	r0, r5
 80122ae:	f001 f8af 	bl	8013410 <__swbuf_r>
 80122b2:	3001      	adds	r0, #1
 80122b4:	d1bf      	bne.n	8012236 <_puts_r+0x42>
 80122b6:	e7df      	b.n	8012278 <_puts_r+0x84>
 80122b8:	6823      	ldr	r3, [r4, #0]
 80122ba:	250a      	movs	r5, #10
 80122bc:	1c5a      	adds	r2, r3, #1
 80122be:	6022      	str	r2, [r4, #0]
 80122c0:	701d      	strb	r5, [r3, #0]
 80122c2:	e7db      	b.n	801227c <_puts_r+0x88>
 80122c4:	080176bc 	.word	0x080176bc
 80122c8:	080176dc 	.word	0x080176dc
 80122cc:	0801769c 	.word	0x0801769c

080122d0 <puts>:
 80122d0:	4b02      	ldr	r3, [pc, #8]	; (80122dc <puts+0xc>)
 80122d2:	4601      	mov	r1, r0
 80122d4:	6818      	ldr	r0, [r3, #0]
 80122d6:	f7ff bf8d 	b.w	80121f4 <_puts_r>
 80122da:	bf00      	nop
 80122dc:	200000d8 	.word	0x200000d8

080122e0 <cleanup_glue>:
 80122e0:	b538      	push	{r3, r4, r5, lr}
 80122e2:	460c      	mov	r4, r1
 80122e4:	6809      	ldr	r1, [r1, #0]
 80122e6:	4605      	mov	r5, r0
 80122e8:	b109      	cbz	r1, 80122ee <cleanup_glue+0xe>
 80122ea:	f7ff fff9 	bl	80122e0 <cleanup_glue>
 80122ee:	4621      	mov	r1, r4
 80122f0:	4628      	mov	r0, r5
 80122f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122f6:	f7ff b841 	b.w	801137c <_free_r>
	...

080122fc <_reclaim_reent>:
 80122fc:	4b2c      	ldr	r3, [pc, #176]	; (80123b0 <_reclaim_reent+0xb4>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4283      	cmp	r3, r0
 8012302:	b570      	push	{r4, r5, r6, lr}
 8012304:	4604      	mov	r4, r0
 8012306:	d051      	beq.n	80123ac <_reclaim_reent+0xb0>
 8012308:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801230a:	b143      	cbz	r3, 801231e <_reclaim_reent+0x22>
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d14a      	bne.n	80123a8 <_reclaim_reent+0xac>
 8012312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012314:	6819      	ldr	r1, [r3, #0]
 8012316:	b111      	cbz	r1, 801231e <_reclaim_reent+0x22>
 8012318:	4620      	mov	r0, r4
 801231a:	f7ff f82f 	bl	801137c <_free_r>
 801231e:	6961      	ldr	r1, [r4, #20]
 8012320:	b111      	cbz	r1, 8012328 <_reclaim_reent+0x2c>
 8012322:	4620      	mov	r0, r4
 8012324:	f7ff f82a 	bl	801137c <_free_r>
 8012328:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801232a:	b111      	cbz	r1, 8012332 <_reclaim_reent+0x36>
 801232c:	4620      	mov	r0, r4
 801232e:	f7ff f825 	bl	801137c <_free_r>
 8012332:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012334:	b111      	cbz	r1, 801233c <_reclaim_reent+0x40>
 8012336:	4620      	mov	r0, r4
 8012338:	f7ff f820 	bl	801137c <_free_r>
 801233c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801233e:	b111      	cbz	r1, 8012346 <_reclaim_reent+0x4a>
 8012340:	4620      	mov	r0, r4
 8012342:	f7ff f81b 	bl	801137c <_free_r>
 8012346:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012348:	b111      	cbz	r1, 8012350 <_reclaim_reent+0x54>
 801234a:	4620      	mov	r0, r4
 801234c:	f7ff f816 	bl	801137c <_free_r>
 8012350:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012352:	b111      	cbz	r1, 801235a <_reclaim_reent+0x5e>
 8012354:	4620      	mov	r0, r4
 8012356:	f7ff f811 	bl	801137c <_free_r>
 801235a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801235c:	b111      	cbz	r1, 8012364 <_reclaim_reent+0x68>
 801235e:	4620      	mov	r0, r4
 8012360:	f7ff f80c 	bl	801137c <_free_r>
 8012364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012366:	b111      	cbz	r1, 801236e <_reclaim_reent+0x72>
 8012368:	4620      	mov	r0, r4
 801236a:	f7ff f807 	bl	801137c <_free_r>
 801236e:	69a3      	ldr	r3, [r4, #24]
 8012370:	b1e3      	cbz	r3, 80123ac <_reclaim_reent+0xb0>
 8012372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012374:	4620      	mov	r0, r4
 8012376:	4798      	blx	r3
 8012378:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801237a:	b1b9      	cbz	r1, 80123ac <_reclaim_reent+0xb0>
 801237c:	4620      	mov	r0, r4
 801237e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012382:	f7ff bfad 	b.w	80122e0 <cleanup_glue>
 8012386:	5949      	ldr	r1, [r1, r5]
 8012388:	b941      	cbnz	r1, 801239c <_reclaim_reent+0xa0>
 801238a:	3504      	adds	r5, #4
 801238c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801238e:	2d80      	cmp	r5, #128	; 0x80
 8012390:	68d9      	ldr	r1, [r3, #12]
 8012392:	d1f8      	bne.n	8012386 <_reclaim_reent+0x8a>
 8012394:	4620      	mov	r0, r4
 8012396:	f7fe fff1 	bl	801137c <_free_r>
 801239a:	e7ba      	b.n	8012312 <_reclaim_reent+0x16>
 801239c:	680e      	ldr	r6, [r1, #0]
 801239e:	4620      	mov	r0, r4
 80123a0:	f7fe ffec 	bl	801137c <_free_r>
 80123a4:	4631      	mov	r1, r6
 80123a6:	e7ef      	b.n	8012388 <_reclaim_reent+0x8c>
 80123a8:	2500      	movs	r5, #0
 80123aa:	e7ef      	b.n	801238c <_reclaim_reent+0x90>
 80123ac:	bd70      	pop	{r4, r5, r6, pc}
 80123ae:	bf00      	nop
 80123b0:	200000d8 	.word	0x200000d8

080123b4 <_sbrk_r>:
 80123b4:	b538      	push	{r3, r4, r5, lr}
 80123b6:	4d06      	ldr	r5, [pc, #24]	; (80123d0 <_sbrk_r+0x1c>)
 80123b8:	2300      	movs	r3, #0
 80123ba:	4604      	mov	r4, r0
 80123bc:	4608      	mov	r0, r1
 80123be:	602b      	str	r3, [r5, #0]
 80123c0:	f004 f834 	bl	801642c <_sbrk>
 80123c4:	1c43      	adds	r3, r0, #1
 80123c6:	d102      	bne.n	80123ce <_sbrk_r+0x1a>
 80123c8:	682b      	ldr	r3, [r5, #0]
 80123ca:	b103      	cbz	r3, 80123ce <_sbrk_r+0x1a>
 80123cc:	6023      	str	r3, [r4, #0]
 80123ce:	bd38      	pop	{r3, r4, r5, pc}
 80123d0:	20006ab8 	.word	0x20006ab8

080123d4 <nanf>:
 80123d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80123dc <nanf+0x8>
 80123d8:	4770      	bx	lr
 80123da:	bf00      	nop
 80123dc:	7fc00000 	.word	0x7fc00000

080123e0 <_raise_r>:
 80123e0:	291f      	cmp	r1, #31
 80123e2:	b538      	push	{r3, r4, r5, lr}
 80123e4:	4604      	mov	r4, r0
 80123e6:	460d      	mov	r5, r1
 80123e8:	d904      	bls.n	80123f4 <_raise_r+0x14>
 80123ea:	2316      	movs	r3, #22
 80123ec:	6003      	str	r3, [r0, #0]
 80123ee:	f04f 30ff 	mov.w	r0, #4294967295
 80123f2:	bd38      	pop	{r3, r4, r5, pc}
 80123f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80123f6:	b112      	cbz	r2, 80123fe <_raise_r+0x1e>
 80123f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80123fc:	b94b      	cbnz	r3, 8012412 <_raise_r+0x32>
 80123fe:	4620      	mov	r0, r4
 8012400:	f000 f830 	bl	8012464 <_getpid_r>
 8012404:	462a      	mov	r2, r5
 8012406:	4601      	mov	r1, r0
 8012408:	4620      	mov	r0, r4
 801240a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801240e:	f000 b817 	b.w	8012440 <_kill_r>
 8012412:	2b01      	cmp	r3, #1
 8012414:	d00a      	beq.n	801242c <_raise_r+0x4c>
 8012416:	1c59      	adds	r1, r3, #1
 8012418:	d103      	bne.n	8012422 <_raise_r+0x42>
 801241a:	2316      	movs	r3, #22
 801241c:	6003      	str	r3, [r0, #0]
 801241e:	2001      	movs	r0, #1
 8012420:	e7e7      	b.n	80123f2 <_raise_r+0x12>
 8012422:	2400      	movs	r4, #0
 8012424:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012428:	4628      	mov	r0, r5
 801242a:	4798      	blx	r3
 801242c:	2000      	movs	r0, #0
 801242e:	e7e0      	b.n	80123f2 <_raise_r+0x12>

08012430 <raise>:
 8012430:	4b02      	ldr	r3, [pc, #8]	; (801243c <raise+0xc>)
 8012432:	4601      	mov	r1, r0
 8012434:	6818      	ldr	r0, [r3, #0]
 8012436:	f7ff bfd3 	b.w	80123e0 <_raise_r>
 801243a:	bf00      	nop
 801243c:	200000d8 	.word	0x200000d8

08012440 <_kill_r>:
 8012440:	b538      	push	{r3, r4, r5, lr}
 8012442:	4d07      	ldr	r5, [pc, #28]	; (8012460 <_kill_r+0x20>)
 8012444:	2300      	movs	r3, #0
 8012446:	4604      	mov	r4, r0
 8012448:	4608      	mov	r0, r1
 801244a:	4611      	mov	r1, r2
 801244c:	602b      	str	r3, [r5, #0]
 801244e:	f003 ffd5 	bl	80163fc <_kill>
 8012452:	1c43      	adds	r3, r0, #1
 8012454:	d102      	bne.n	801245c <_kill_r+0x1c>
 8012456:	682b      	ldr	r3, [r5, #0]
 8012458:	b103      	cbz	r3, 801245c <_kill_r+0x1c>
 801245a:	6023      	str	r3, [r4, #0]
 801245c:	bd38      	pop	{r3, r4, r5, pc}
 801245e:	bf00      	nop
 8012460:	20006ab8 	.word	0x20006ab8

08012464 <_getpid_r>:
 8012464:	f003 bfba 	b.w	80163dc <_getpid>

08012468 <siprintf>:
 8012468:	b40e      	push	{r1, r2, r3}
 801246a:	b500      	push	{lr}
 801246c:	b09c      	sub	sp, #112	; 0x70
 801246e:	ab1d      	add	r3, sp, #116	; 0x74
 8012470:	9002      	str	r0, [sp, #8]
 8012472:	9006      	str	r0, [sp, #24]
 8012474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012478:	4809      	ldr	r0, [pc, #36]	; (80124a0 <siprintf+0x38>)
 801247a:	9107      	str	r1, [sp, #28]
 801247c:	9104      	str	r1, [sp, #16]
 801247e:	4909      	ldr	r1, [pc, #36]	; (80124a4 <siprintf+0x3c>)
 8012480:	f853 2b04 	ldr.w	r2, [r3], #4
 8012484:	9105      	str	r1, [sp, #20]
 8012486:	6800      	ldr	r0, [r0, #0]
 8012488:	9301      	str	r3, [sp, #4]
 801248a:	a902      	add	r1, sp, #8
 801248c:	f003 f960 	bl	8015750 <_svfiprintf_r>
 8012490:	9b02      	ldr	r3, [sp, #8]
 8012492:	2200      	movs	r2, #0
 8012494:	701a      	strb	r2, [r3, #0]
 8012496:	b01c      	add	sp, #112	; 0x70
 8012498:	f85d eb04 	ldr.w	lr, [sp], #4
 801249c:	b003      	add	sp, #12
 801249e:	4770      	bx	lr
 80124a0:	200000d8 	.word	0x200000d8
 80124a4:	ffff0208 	.word	0xffff0208

080124a8 <siscanf>:
 80124a8:	b40e      	push	{r1, r2, r3}
 80124aa:	b510      	push	{r4, lr}
 80124ac:	b09f      	sub	sp, #124	; 0x7c
 80124ae:	ac21      	add	r4, sp, #132	; 0x84
 80124b0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80124b4:	f854 2b04 	ldr.w	r2, [r4], #4
 80124b8:	9201      	str	r2, [sp, #4]
 80124ba:	f8ad 101c 	strh.w	r1, [sp, #28]
 80124be:	9004      	str	r0, [sp, #16]
 80124c0:	9008      	str	r0, [sp, #32]
 80124c2:	f7ed fe95 	bl	80001f0 <strlen>
 80124c6:	4b0c      	ldr	r3, [pc, #48]	; (80124f8 <siscanf+0x50>)
 80124c8:	9005      	str	r0, [sp, #20]
 80124ca:	9009      	str	r0, [sp, #36]	; 0x24
 80124cc:	930d      	str	r3, [sp, #52]	; 0x34
 80124ce:	480b      	ldr	r0, [pc, #44]	; (80124fc <siscanf+0x54>)
 80124d0:	9a01      	ldr	r2, [sp, #4]
 80124d2:	6800      	ldr	r0, [r0, #0]
 80124d4:	9403      	str	r4, [sp, #12]
 80124d6:	2300      	movs	r3, #0
 80124d8:	9311      	str	r3, [sp, #68]	; 0x44
 80124da:	9316      	str	r3, [sp, #88]	; 0x58
 80124dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80124e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80124e4:	a904      	add	r1, sp, #16
 80124e6:	4623      	mov	r3, r4
 80124e8:	f003 fa8c 	bl	8015a04 <__ssvfiscanf_r>
 80124ec:	b01f      	add	sp, #124	; 0x7c
 80124ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124f2:	b003      	add	sp, #12
 80124f4:	4770      	bx	lr
 80124f6:	bf00      	nop
 80124f8:	08012523 	.word	0x08012523
 80124fc:	200000d8 	.word	0x200000d8

08012500 <__sread>:
 8012500:	b510      	push	{r4, lr}
 8012502:	460c      	mov	r4, r1
 8012504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012508:	f003 fe9a 	bl	8016240 <_read_r>
 801250c:	2800      	cmp	r0, #0
 801250e:	bfab      	itete	ge
 8012510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012512:	89a3      	ldrhlt	r3, [r4, #12]
 8012514:	181b      	addge	r3, r3, r0
 8012516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801251a:	bfac      	ite	ge
 801251c:	6563      	strge	r3, [r4, #84]	; 0x54
 801251e:	81a3      	strhlt	r3, [r4, #12]
 8012520:	bd10      	pop	{r4, pc}

08012522 <__seofread>:
 8012522:	2000      	movs	r0, #0
 8012524:	4770      	bx	lr

08012526 <__swrite>:
 8012526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801252a:	461f      	mov	r7, r3
 801252c:	898b      	ldrh	r3, [r1, #12]
 801252e:	05db      	lsls	r3, r3, #23
 8012530:	4605      	mov	r5, r0
 8012532:	460c      	mov	r4, r1
 8012534:	4616      	mov	r6, r2
 8012536:	d505      	bpl.n	8012544 <__swrite+0x1e>
 8012538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801253c:	2302      	movs	r3, #2
 801253e:	2200      	movs	r2, #0
 8012540:	f002 fb26 	bl	8014b90 <_lseek_r>
 8012544:	89a3      	ldrh	r3, [r4, #12]
 8012546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801254a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801254e:	81a3      	strh	r3, [r4, #12]
 8012550:	4632      	mov	r2, r6
 8012552:	463b      	mov	r3, r7
 8012554:	4628      	mov	r0, r5
 8012556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801255a:	f000 bfab 	b.w	80134b4 <_write_r>

0801255e <__sseek>:
 801255e:	b510      	push	{r4, lr}
 8012560:	460c      	mov	r4, r1
 8012562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012566:	f002 fb13 	bl	8014b90 <_lseek_r>
 801256a:	1c43      	adds	r3, r0, #1
 801256c:	89a3      	ldrh	r3, [r4, #12]
 801256e:	bf15      	itete	ne
 8012570:	6560      	strne	r0, [r4, #84]	; 0x54
 8012572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801257a:	81a3      	strheq	r3, [r4, #12]
 801257c:	bf18      	it	ne
 801257e:	81a3      	strhne	r3, [r4, #12]
 8012580:	bd10      	pop	{r4, pc}

08012582 <__sclose>:
 8012582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012586:	f001 b833 	b.w	80135f0 <_close_r>

0801258a <strncmp>:
 801258a:	b510      	push	{r4, lr}
 801258c:	b16a      	cbz	r2, 80125aa <strncmp+0x20>
 801258e:	3901      	subs	r1, #1
 8012590:	1884      	adds	r4, r0, r2
 8012592:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012596:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801259a:	4293      	cmp	r3, r2
 801259c:	d103      	bne.n	80125a6 <strncmp+0x1c>
 801259e:	42a0      	cmp	r0, r4
 80125a0:	d001      	beq.n	80125a6 <strncmp+0x1c>
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d1f5      	bne.n	8012592 <strncmp+0x8>
 80125a6:	1a98      	subs	r0, r3, r2
 80125a8:	bd10      	pop	{r4, pc}
 80125aa:	4610      	mov	r0, r2
 80125ac:	e7fc      	b.n	80125a8 <strncmp+0x1e>

080125ae <sulp>:
 80125ae:	b570      	push	{r4, r5, r6, lr}
 80125b0:	4604      	mov	r4, r0
 80125b2:	460d      	mov	r5, r1
 80125b4:	ec45 4b10 	vmov	d0, r4, r5
 80125b8:	4616      	mov	r6, r2
 80125ba:	f002 fee9 	bl	8015390 <__ulp>
 80125be:	ec51 0b10 	vmov	r0, r1, d0
 80125c2:	b17e      	cbz	r6, 80125e4 <sulp+0x36>
 80125c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80125c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	dd09      	ble.n	80125e4 <sulp+0x36>
 80125d0:	051b      	lsls	r3, r3, #20
 80125d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80125d6:	2400      	movs	r4, #0
 80125d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80125dc:	4622      	mov	r2, r4
 80125de:	462b      	mov	r3, r5
 80125e0:	f7ee f81a 	bl	8000618 <__aeabi_dmul>
 80125e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080125e8 <_strtod_l>:
 80125e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ec:	b0a3      	sub	sp, #140	; 0x8c
 80125ee:	461f      	mov	r7, r3
 80125f0:	2300      	movs	r3, #0
 80125f2:	931e      	str	r3, [sp, #120]	; 0x78
 80125f4:	4ba4      	ldr	r3, [pc, #656]	; (8012888 <_strtod_l+0x2a0>)
 80125f6:	9219      	str	r2, [sp, #100]	; 0x64
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	9307      	str	r3, [sp, #28]
 80125fc:	4604      	mov	r4, r0
 80125fe:	4618      	mov	r0, r3
 8012600:	4688      	mov	r8, r1
 8012602:	f7ed fdf5 	bl	80001f0 <strlen>
 8012606:	f04f 0a00 	mov.w	sl, #0
 801260a:	4605      	mov	r5, r0
 801260c:	f04f 0b00 	mov.w	fp, #0
 8012610:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8012614:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012616:	781a      	ldrb	r2, [r3, #0]
 8012618:	2a2b      	cmp	r2, #43	; 0x2b
 801261a:	d04c      	beq.n	80126b6 <_strtod_l+0xce>
 801261c:	d839      	bhi.n	8012692 <_strtod_l+0xaa>
 801261e:	2a0d      	cmp	r2, #13
 8012620:	d832      	bhi.n	8012688 <_strtod_l+0xa0>
 8012622:	2a08      	cmp	r2, #8
 8012624:	d832      	bhi.n	801268c <_strtod_l+0xa4>
 8012626:	2a00      	cmp	r2, #0
 8012628:	d03c      	beq.n	80126a4 <_strtod_l+0xbc>
 801262a:	2300      	movs	r3, #0
 801262c:	930e      	str	r3, [sp, #56]	; 0x38
 801262e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012630:	7833      	ldrb	r3, [r6, #0]
 8012632:	2b30      	cmp	r3, #48	; 0x30
 8012634:	f040 80b4 	bne.w	80127a0 <_strtod_l+0x1b8>
 8012638:	7873      	ldrb	r3, [r6, #1]
 801263a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801263e:	2b58      	cmp	r3, #88	; 0x58
 8012640:	d16c      	bne.n	801271c <_strtod_l+0x134>
 8012642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012644:	9301      	str	r3, [sp, #4]
 8012646:	ab1e      	add	r3, sp, #120	; 0x78
 8012648:	9702      	str	r7, [sp, #8]
 801264a:	9300      	str	r3, [sp, #0]
 801264c:	4a8f      	ldr	r2, [pc, #572]	; (801288c <_strtod_l+0x2a4>)
 801264e:	ab1f      	add	r3, sp, #124	; 0x7c
 8012650:	a91d      	add	r1, sp, #116	; 0x74
 8012652:	4620      	mov	r0, r4
 8012654:	f001 ff90 	bl	8014578 <__gethex>
 8012658:	f010 0707 	ands.w	r7, r0, #7
 801265c:	4605      	mov	r5, r0
 801265e:	d005      	beq.n	801266c <_strtod_l+0x84>
 8012660:	2f06      	cmp	r7, #6
 8012662:	d12a      	bne.n	80126ba <_strtod_l+0xd2>
 8012664:	3601      	adds	r6, #1
 8012666:	2300      	movs	r3, #0
 8012668:	961d      	str	r6, [sp, #116]	; 0x74
 801266a:	930e      	str	r3, [sp, #56]	; 0x38
 801266c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801266e:	2b00      	cmp	r3, #0
 8012670:	f040 8596 	bne.w	80131a0 <_strtod_l+0xbb8>
 8012674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012676:	b1db      	cbz	r3, 80126b0 <_strtod_l+0xc8>
 8012678:	4652      	mov	r2, sl
 801267a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801267e:	ec43 2b10 	vmov	d0, r2, r3
 8012682:	b023      	add	sp, #140	; 0x8c
 8012684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012688:	2a20      	cmp	r2, #32
 801268a:	d1ce      	bne.n	801262a <_strtod_l+0x42>
 801268c:	3301      	adds	r3, #1
 801268e:	931d      	str	r3, [sp, #116]	; 0x74
 8012690:	e7c0      	b.n	8012614 <_strtod_l+0x2c>
 8012692:	2a2d      	cmp	r2, #45	; 0x2d
 8012694:	d1c9      	bne.n	801262a <_strtod_l+0x42>
 8012696:	2201      	movs	r2, #1
 8012698:	920e      	str	r2, [sp, #56]	; 0x38
 801269a:	1c5a      	adds	r2, r3, #1
 801269c:	921d      	str	r2, [sp, #116]	; 0x74
 801269e:	785b      	ldrb	r3, [r3, #1]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d1c4      	bne.n	801262e <_strtod_l+0x46>
 80126a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80126a6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f040 8576 	bne.w	801319c <_strtod_l+0xbb4>
 80126b0:	4652      	mov	r2, sl
 80126b2:	465b      	mov	r3, fp
 80126b4:	e7e3      	b.n	801267e <_strtod_l+0x96>
 80126b6:	2200      	movs	r2, #0
 80126b8:	e7ee      	b.n	8012698 <_strtod_l+0xb0>
 80126ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80126bc:	b13a      	cbz	r2, 80126ce <_strtod_l+0xe6>
 80126be:	2135      	movs	r1, #53	; 0x35
 80126c0:	a820      	add	r0, sp, #128	; 0x80
 80126c2:	f002 ff70 	bl	80155a6 <__copybits>
 80126c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80126c8:	4620      	mov	r0, r4
 80126ca:	f002 fb35 	bl	8014d38 <_Bfree>
 80126ce:	3f01      	subs	r7, #1
 80126d0:	2f05      	cmp	r7, #5
 80126d2:	d807      	bhi.n	80126e4 <_strtod_l+0xfc>
 80126d4:	e8df f007 	tbb	[pc, r7]
 80126d8:	1d180b0e 	.word	0x1d180b0e
 80126dc:	030e      	.short	0x030e
 80126de:	f04f 0b00 	mov.w	fp, #0
 80126e2:	46da      	mov	sl, fp
 80126e4:	0728      	lsls	r0, r5, #28
 80126e6:	d5c1      	bpl.n	801266c <_strtod_l+0x84>
 80126e8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80126ec:	e7be      	b.n	801266c <_strtod_l+0x84>
 80126ee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80126f2:	e7f7      	b.n	80126e4 <_strtod_l+0xfc>
 80126f4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80126f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80126fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80126fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012702:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012706:	e7ed      	b.n	80126e4 <_strtod_l+0xfc>
 8012708:	f8df b184 	ldr.w	fp, [pc, #388]	; 8012890 <_strtod_l+0x2a8>
 801270c:	f04f 0a00 	mov.w	sl, #0
 8012710:	e7e8      	b.n	80126e4 <_strtod_l+0xfc>
 8012712:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012716:	f04f 3aff 	mov.w	sl, #4294967295
 801271a:	e7e3      	b.n	80126e4 <_strtod_l+0xfc>
 801271c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801271e:	1c5a      	adds	r2, r3, #1
 8012720:	921d      	str	r2, [sp, #116]	; 0x74
 8012722:	785b      	ldrb	r3, [r3, #1]
 8012724:	2b30      	cmp	r3, #48	; 0x30
 8012726:	d0f9      	beq.n	801271c <_strtod_l+0x134>
 8012728:	2b00      	cmp	r3, #0
 801272a:	d09f      	beq.n	801266c <_strtod_l+0x84>
 801272c:	2301      	movs	r3, #1
 801272e:	f04f 0900 	mov.w	r9, #0
 8012732:	9304      	str	r3, [sp, #16]
 8012734:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012736:	930a      	str	r3, [sp, #40]	; 0x28
 8012738:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801273c:	464f      	mov	r7, r9
 801273e:	220a      	movs	r2, #10
 8012740:	981d      	ldr	r0, [sp, #116]	; 0x74
 8012742:	7806      	ldrb	r6, [r0, #0]
 8012744:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012748:	b2d9      	uxtb	r1, r3
 801274a:	2909      	cmp	r1, #9
 801274c:	d92a      	bls.n	80127a4 <_strtod_l+0x1bc>
 801274e:	9907      	ldr	r1, [sp, #28]
 8012750:	462a      	mov	r2, r5
 8012752:	f7ff ff1a 	bl	801258a <strncmp>
 8012756:	b398      	cbz	r0, 80127c0 <_strtod_l+0x1d8>
 8012758:	2000      	movs	r0, #0
 801275a:	4633      	mov	r3, r6
 801275c:	463d      	mov	r5, r7
 801275e:	9007      	str	r0, [sp, #28]
 8012760:	4602      	mov	r2, r0
 8012762:	2b65      	cmp	r3, #101	; 0x65
 8012764:	d001      	beq.n	801276a <_strtod_l+0x182>
 8012766:	2b45      	cmp	r3, #69	; 0x45
 8012768:	d118      	bne.n	801279c <_strtod_l+0x1b4>
 801276a:	b91d      	cbnz	r5, 8012774 <_strtod_l+0x18c>
 801276c:	9b04      	ldr	r3, [sp, #16]
 801276e:	4303      	orrs	r3, r0
 8012770:	d098      	beq.n	80126a4 <_strtod_l+0xbc>
 8012772:	2500      	movs	r5, #0
 8012774:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8012778:	f108 0301 	add.w	r3, r8, #1
 801277c:	931d      	str	r3, [sp, #116]	; 0x74
 801277e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012782:	2b2b      	cmp	r3, #43	; 0x2b
 8012784:	d075      	beq.n	8012872 <_strtod_l+0x28a>
 8012786:	2b2d      	cmp	r3, #45	; 0x2d
 8012788:	d07b      	beq.n	8012882 <_strtod_l+0x29a>
 801278a:	f04f 0c00 	mov.w	ip, #0
 801278e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012792:	2909      	cmp	r1, #9
 8012794:	f240 8082 	bls.w	801289c <_strtod_l+0x2b4>
 8012798:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801279c:	2600      	movs	r6, #0
 801279e:	e09d      	b.n	80128dc <_strtod_l+0x2f4>
 80127a0:	2300      	movs	r3, #0
 80127a2:	e7c4      	b.n	801272e <_strtod_l+0x146>
 80127a4:	2f08      	cmp	r7, #8
 80127a6:	bfd8      	it	le
 80127a8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80127aa:	f100 0001 	add.w	r0, r0, #1
 80127ae:	bfda      	itte	le
 80127b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80127b4:	9309      	strle	r3, [sp, #36]	; 0x24
 80127b6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80127ba:	3701      	adds	r7, #1
 80127bc:	901d      	str	r0, [sp, #116]	; 0x74
 80127be:	e7bf      	b.n	8012740 <_strtod_l+0x158>
 80127c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80127c2:	195a      	adds	r2, r3, r5
 80127c4:	921d      	str	r2, [sp, #116]	; 0x74
 80127c6:	5d5b      	ldrb	r3, [r3, r5]
 80127c8:	2f00      	cmp	r7, #0
 80127ca:	d037      	beq.n	801283c <_strtod_l+0x254>
 80127cc:	9007      	str	r0, [sp, #28]
 80127ce:	463d      	mov	r5, r7
 80127d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80127d4:	2a09      	cmp	r2, #9
 80127d6:	d912      	bls.n	80127fe <_strtod_l+0x216>
 80127d8:	2201      	movs	r2, #1
 80127da:	e7c2      	b.n	8012762 <_strtod_l+0x17a>
 80127dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80127de:	1c5a      	adds	r2, r3, #1
 80127e0:	921d      	str	r2, [sp, #116]	; 0x74
 80127e2:	785b      	ldrb	r3, [r3, #1]
 80127e4:	3001      	adds	r0, #1
 80127e6:	2b30      	cmp	r3, #48	; 0x30
 80127e8:	d0f8      	beq.n	80127dc <_strtod_l+0x1f4>
 80127ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80127ee:	2a08      	cmp	r2, #8
 80127f0:	f200 84db 	bhi.w	80131aa <_strtod_l+0xbc2>
 80127f4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80127f6:	9007      	str	r0, [sp, #28]
 80127f8:	2000      	movs	r0, #0
 80127fa:	920a      	str	r2, [sp, #40]	; 0x28
 80127fc:	4605      	mov	r5, r0
 80127fe:	3b30      	subs	r3, #48	; 0x30
 8012800:	f100 0201 	add.w	r2, r0, #1
 8012804:	d014      	beq.n	8012830 <_strtod_l+0x248>
 8012806:	9907      	ldr	r1, [sp, #28]
 8012808:	4411      	add	r1, r2
 801280a:	9107      	str	r1, [sp, #28]
 801280c:	462a      	mov	r2, r5
 801280e:	eb00 0e05 	add.w	lr, r0, r5
 8012812:	210a      	movs	r1, #10
 8012814:	4572      	cmp	r2, lr
 8012816:	d113      	bne.n	8012840 <_strtod_l+0x258>
 8012818:	182a      	adds	r2, r5, r0
 801281a:	2a08      	cmp	r2, #8
 801281c:	f105 0501 	add.w	r5, r5, #1
 8012820:	4405      	add	r5, r0
 8012822:	dc1c      	bgt.n	801285e <_strtod_l+0x276>
 8012824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012826:	220a      	movs	r2, #10
 8012828:	fb02 3301 	mla	r3, r2, r1, r3
 801282c:	9309      	str	r3, [sp, #36]	; 0x24
 801282e:	2200      	movs	r2, #0
 8012830:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012832:	1c59      	adds	r1, r3, #1
 8012834:	911d      	str	r1, [sp, #116]	; 0x74
 8012836:	785b      	ldrb	r3, [r3, #1]
 8012838:	4610      	mov	r0, r2
 801283a:	e7c9      	b.n	80127d0 <_strtod_l+0x1e8>
 801283c:	4638      	mov	r0, r7
 801283e:	e7d2      	b.n	80127e6 <_strtod_l+0x1fe>
 8012840:	2a08      	cmp	r2, #8
 8012842:	dc04      	bgt.n	801284e <_strtod_l+0x266>
 8012844:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8012846:	434e      	muls	r6, r1
 8012848:	9609      	str	r6, [sp, #36]	; 0x24
 801284a:	3201      	adds	r2, #1
 801284c:	e7e2      	b.n	8012814 <_strtod_l+0x22c>
 801284e:	f102 0c01 	add.w	ip, r2, #1
 8012852:	f1bc 0f10 	cmp.w	ip, #16
 8012856:	bfd8      	it	le
 8012858:	fb01 f909 	mulle.w	r9, r1, r9
 801285c:	e7f5      	b.n	801284a <_strtod_l+0x262>
 801285e:	2d10      	cmp	r5, #16
 8012860:	bfdc      	itt	le
 8012862:	220a      	movle	r2, #10
 8012864:	fb02 3909 	mlale	r9, r2, r9, r3
 8012868:	e7e1      	b.n	801282e <_strtod_l+0x246>
 801286a:	2300      	movs	r3, #0
 801286c:	9307      	str	r3, [sp, #28]
 801286e:	2201      	movs	r2, #1
 8012870:	e77c      	b.n	801276c <_strtod_l+0x184>
 8012872:	f04f 0c00 	mov.w	ip, #0
 8012876:	f108 0302 	add.w	r3, r8, #2
 801287a:	931d      	str	r3, [sp, #116]	; 0x74
 801287c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012880:	e785      	b.n	801278e <_strtod_l+0x1a6>
 8012882:	f04f 0c01 	mov.w	ip, #1
 8012886:	e7f6      	b.n	8012876 <_strtod_l+0x28e>
 8012888:	080178c4 	.word	0x080178c4
 801288c:	08017738 	.word	0x08017738
 8012890:	7ff00000 	.word	0x7ff00000
 8012894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012896:	1c59      	adds	r1, r3, #1
 8012898:	911d      	str	r1, [sp, #116]	; 0x74
 801289a:	785b      	ldrb	r3, [r3, #1]
 801289c:	2b30      	cmp	r3, #48	; 0x30
 801289e:	d0f9      	beq.n	8012894 <_strtod_l+0x2ac>
 80128a0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80128a4:	2908      	cmp	r1, #8
 80128a6:	f63f af79 	bhi.w	801279c <_strtod_l+0x1b4>
 80128aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80128ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128b0:	9308      	str	r3, [sp, #32]
 80128b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80128b4:	1c59      	adds	r1, r3, #1
 80128b6:	911d      	str	r1, [sp, #116]	; 0x74
 80128b8:	785b      	ldrb	r3, [r3, #1]
 80128ba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80128be:	2e09      	cmp	r6, #9
 80128c0:	d937      	bls.n	8012932 <_strtod_l+0x34a>
 80128c2:	9e08      	ldr	r6, [sp, #32]
 80128c4:	1b89      	subs	r1, r1, r6
 80128c6:	2908      	cmp	r1, #8
 80128c8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80128cc:	dc02      	bgt.n	80128d4 <_strtod_l+0x2ec>
 80128ce:	4576      	cmp	r6, lr
 80128d0:	bfa8      	it	ge
 80128d2:	4676      	movge	r6, lr
 80128d4:	f1bc 0f00 	cmp.w	ip, #0
 80128d8:	d000      	beq.n	80128dc <_strtod_l+0x2f4>
 80128da:	4276      	negs	r6, r6
 80128dc:	2d00      	cmp	r5, #0
 80128de:	d14f      	bne.n	8012980 <_strtod_l+0x398>
 80128e0:	9904      	ldr	r1, [sp, #16]
 80128e2:	4301      	orrs	r1, r0
 80128e4:	f47f aec2 	bne.w	801266c <_strtod_l+0x84>
 80128e8:	2a00      	cmp	r2, #0
 80128ea:	f47f aedb 	bne.w	80126a4 <_strtod_l+0xbc>
 80128ee:	2b69      	cmp	r3, #105	; 0x69
 80128f0:	d027      	beq.n	8012942 <_strtod_l+0x35a>
 80128f2:	dc24      	bgt.n	801293e <_strtod_l+0x356>
 80128f4:	2b49      	cmp	r3, #73	; 0x49
 80128f6:	d024      	beq.n	8012942 <_strtod_l+0x35a>
 80128f8:	2b4e      	cmp	r3, #78	; 0x4e
 80128fa:	f47f aed3 	bne.w	80126a4 <_strtod_l+0xbc>
 80128fe:	499e      	ldr	r1, [pc, #632]	; (8012b78 <_strtod_l+0x590>)
 8012900:	a81d      	add	r0, sp, #116	; 0x74
 8012902:	f002 f891 	bl	8014a28 <__match>
 8012906:	2800      	cmp	r0, #0
 8012908:	f43f aecc 	beq.w	80126a4 <_strtod_l+0xbc>
 801290c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	2b28      	cmp	r3, #40	; 0x28
 8012912:	d12d      	bne.n	8012970 <_strtod_l+0x388>
 8012914:	4999      	ldr	r1, [pc, #612]	; (8012b7c <_strtod_l+0x594>)
 8012916:	aa20      	add	r2, sp, #128	; 0x80
 8012918:	a81d      	add	r0, sp, #116	; 0x74
 801291a:	f002 f899 	bl	8014a50 <__hexnan>
 801291e:	2805      	cmp	r0, #5
 8012920:	d126      	bne.n	8012970 <_strtod_l+0x388>
 8012922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012924:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8012928:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801292c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8012930:	e69c      	b.n	801266c <_strtod_l+0x84>
 8012932:	210a      	movs	r1, #10
 8012934:	fb01 3e0e 	mla	lr, r1, lr, r3
 8012938:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801293c:	e7b9      	b.n	80128b2 <_strtod_l+0x2ca>
 801293e:	2b6e      	cmp	r3, #110	; 0x6e
 8012940:	e7db      	b.n	80128fa <_strtod_l+0x312>
 8012942:	498f      	ldr	r1, [pc, #572]	; (8012b80 <_strtod_l+0x598>)
 8012944:	a81d      	add	r0, sp, #116	; 0x74
 8012946:	f002 f86f 	bl	8014a28 <__match>
 801294a:	2800      	cmp	r0, #0
 801294c:	f43f aeaa 	beq.w	80126a4 <_strtod_l+0xbc>
 8012950:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012952:	498c      	ldr	r1, [pc, #560]	; (8012b84 <_strtod_l+0x59c>)
 8012954:	3b01      	subs	r3, #1
 8012956:	a81d      	add	r0, sp, #116	; 0x74
 8012958:	931d      	str	r3, [sp, #116]	; 0x74
 801295a:	f002 f865 	bl	8014a28 <__match>
 801295e:	b910      	cbnz	r0, 8012966 <_strtod_l+0x37e>
 8012960:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012962:	3301      	adds	r3, #1
 8012964:	931d      	str	r3, [sp, #116]	; 0x74
 8012966:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8012b94 <_strtod_l+0x5ac>
 801296a:	f04f 0a00 	mov.w	sl, #0
 801296e:	e67d      	b.n	801266c <_strtod_l+0x84>
 8012970:	4885      	ldr	r0, [pc, #532]	; (8012b88 <_strtod_l+0x5a0>)
 8012972:	f7fe fa85 	bl	8010e80 <nan>
 8012976:	ed8d 0b04 	vstr	d0, [sp, #16]
 801297a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801297e:	e675      	b.n	801266c <_strtod_l+0x84>
 8012980:	9b07      	ldr	r3, [sp, #28]
 8012982:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012984:	1af3      	subs	r3, r6, r3
 8012986:	2f00      	cmp	r7, #0
 8012988:	bf08      	it	eq
 801298a:	462f      	moveq	r7, r5
 801298c:	2d10      	cmp	r5, #16
 801298e:	9308      	str	r3, [sp, #32]
 8012990:	46a8      	mov	r8, r5
 8012992:	bfa8      	it	ge
 8012994:	f04f 0810 	movge.w	r8, #16
 8012998:	f7ed fdc4 	bl	8000524 <__aeabi_ui2d>
 801299c:	2d09      	cmp	r5, #9
 801299e:	4682      	mov	sl, r0
 80129a0:	468b      	mov	fp, r1
 80129a2:	dd13      	ble.n	80129cc <_strtod_l+0x3e4>
 80129a4:	4b79      	ldr	r3, [pc, #484]	; (8012b8c <_strtod_l+0x5a4>)
 80129a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80129aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80129ae:	f7ed fe33 	bl	8000618 <__aeabi_dmul>
 80129b2:	4682      	mov	sl, r0
 80129b4:	4648      	mov	r0, r9
 80129b6:	468b      	mov	fp, r1
 80129b8:	f7ed fdb4 	bl	8000524 <__aeabi_ui2d>
 80129bc:	4602      	mov	r2, r0
 80129be:	460b      	mov	r3, r1
 80129c0:	4650      	mov	r0, sl
 80129c2:	4659      	mov	r1, fp
 80129c4:	f7ed fc72 	bl	80002ac <__adddf3>
 80129c8:	4682      	mov	sl, r0
 80129ca:	468b      	mov	fp, r1
 80129cc:	2d0f      	cmp	r5, #15
 80129ce:	dc38      	bgt.n	8012a42 <_strtod_l+0x45a>
 80129d0:	9b08      	ldr	r3, [sp, #32]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	f43f ae4a 	beq.w	801266c <_strtod_l+0x84>
 80129d8:	dd24      	ble.n	8012a24 <_strtod_l+0x43c>
 80129da:	2b16      	cmp	r3, #22
 80129dc:	dc0b      	bgt.n	80129f6 <_strtod_l+0x40e>
 80129de:	4d6b      	ldr	r5, [pc, #428]	; (8012b8c <_strtod_l+0x5a4>)
 80129e0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80129e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80129e8:	4652      	mov	r2, sl
 80129ea:	465b      	mov	r3, fp
 80129ec:	f7ed fe14 	bl	8000618 <__aeabi_dmul>
 80129f0:	4682      	mov	sl, r0
 80129f2:	468b      	mov	fp, r1
 80129f4:	e63a      	b.n	801266c <_strtod_l+0x84>
 80129f6:	9a08      	ldr	r2, [sp, #32]
 80129f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80129fc:	4293      	cmp	r3, r2
 80129fe:	db20      	blt.n	8012a42 <_strtod_l+0x45a>
 8012a00:	4c62      	ldr	r4, [pc, #392]	; (8012b8c <_strtod_l+0x5a4>)
 8012a02:	f1c5 050f 	rsb	r5, r5, #15
 8012a06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8012a0a:	4652      	mov	r2, sl
 8012a0c:	465b      	mov	r3, fp
 8012a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a12:	f7ed fe01 	bl	8000618 <__aeabi_dmul>
 8012a16:	9b08      	ldr	r3, [sp, #32]
 8012a18:	1b5d      	subs	r5, r3, r5
 8012a1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8012a1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012a22:	e7e3      	b.n	80129ec <_strtod_l+0x404>
 8012a24:	9b08      	ldr	r3, [sp, #32]
 8012a26:	3316      	adds	r3, #22
 8012a28:	db0b      	blt.n	8012a42 <_strtod_l+0x45a>
 8012a2a:	9b07      	ldr	r3, [sp, #28]
 8012a2c:	4a57      	ldr	r2, [pc, #348]	; (8012b8c <_strtod_l+0x5a4>)
 8012a2e:	1b9e      	subs	r6, r3, r6
 8012a30:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8012a34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012a38:	4650      	mov	r0, sl
 8012a3a:	4659      	mov	r1, fp
 8012a3c:	f7ed ff16 	bl	800086c <__aeabi_ddiv>
 8012a40:	e7d6      	b.n	80129f0 <_strtod_l+0x408>
 8012a42:	9b08      	ldr	r3, [sp, #32]
 8012a44:	eba5 0808 	sub.w	r8, r5, r8
 8012a48:	4498      	add	r8, r3
 8012a4a:	f1b8 0f00 	cmp.w	r8, #0
 8012a4e:	dd71      	ble.n	8012b34 <_strtod_l+0x54c>
 8012a50:	f018 030f 	ands.w	r3, r8, #15
 8012a54:	d00a      	beq.n	8012a6c <_strtod_l+0x484>
 8012a56:	494d      	ldr	r1, [pc, #308]	; (8012b8c <_strtod_l+0x5a4>)
 8012a58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012a5c:	4652      	mov	r2, sl
 8012a5e:	465b      	mov	r3, fp
 8012a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a64:	f7ed fdd8 	bl	8000618 <__aeabi_dmul>
 8012a68:	4682      	mov	sl, r0
 8012a6a:	468b      	mov	fp, r1
 8012a6c:	f038 080f 	bics.w	r8, r8, #15
 8012a70:	d04d      	beq.n	8012b0e <_strtod_l+0x526>
 8012a72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8012a76:	dd22      	ble.n	8012abe <_strtod_l+0x4d6>
 8012a78:	2500      	movs	r5, #0
 8012a7a:	462e      	mov	r6, r5
 8012a7c:	9509      	str	r5, [sp, #36]	; 0x24
 8012a7e:	9507      	str	r5, [sp, #28]
 8012a80:	2322      	movs	r3, #34	; 0x22
 8012a82:	f8df b110 	ldr.w	fp, [pc, #272]	; 8012b94 <_strtod_l+0x5ac>
 8012a86:	6023      	str	r3, [r4, #0]
 8012a88:	f04f 0a00 	mov.w	sl, #0
 8012a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	f43f adec 	beq.w	801266c <_strtod_l+0x84>
 8012a94:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012a96:	4620      	mov	r0, r4
 8012a98:	f002 f94e 	bl	8014d38 <_Bfree>
 8012a9c:	9907      	ldr	r1, [sp, #28]
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f002 f94a 	bl	8014d38 <_Bfree>
 8012aa4:	4631      	mov	r1, r6
 8012aa6:	4620      	mov	r0, r4
 8012aa8:	f002 f946 	bl	8014d38 <_Bfree>
 8012aac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012aae:	4620      	mov	r0, r4
 8012ab0:	f002 f942 	bl	8014d38 <_Bfree>
 8012ab4:	4629      	mov	r1, r5
 8012ab6:	4620      	mov	r0, r4
 8012ab8:	f002 f93e 	bl	8014d38 <_Bfree>
 8012abc:	e5d6      	b.n	801266c <_strtod_l+0x84>
 8012abe:	2300      	movs	r3, #0
 8012ac0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8012ac4:	4650      	mov	r0, sl
 8012ac6:	4659      	mov	r1, fp
 8012ac8:	4699      	mov	r9, r3
 8012aca:	f1b8 0f01 	cmp.w	r8, #1
 8012ace:	dc21      	bgt.n	8012b14 <_strtod_l+0x52c>
 8012ad0:	b10b      	cbz	r3, 8012ad6 <_strtod_l+0x4ee>
 8012ad2:	4682      	mov	sl, r0
 8012ad4:	468b      	mov	fp, r1
 8012ad6:	4b2e      	ldr	r3, [pc, #184]	; (8012b90 <_strtod_l+0x5a8>)
 8012ad8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012adc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8012ae0:	4652      	mov	r2, sl
 8012ae2:	465b      	mov	r3, fp
 8012ae4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8012ae8:	f7ed fd96 	bl	8000618 <__aeabi_dmul>
 8012aec:	4b29      	ldr	r3, [pc, #164]	; (8012b94 <_strtod_l+0x5ac>)
 8012aee:	460a      	mov	r2, r1
 8012af0:	400b      	ands	r3, r1
 8012af2:	4929      	ldr	r1, [pc, #164]	; (8012b98 <_strtod_l+0x5b0>)
 8012af4:	428b      	cmp	r3, r1
 8012af6:	4682      	mov	sl, r0
 8012af8:	d8be      	bhi.n	8012a78 <_strtod_l+0x490>
 8012afa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012afe:	428b      	cmp	r3, r1
 8012b00:	bf86      	itte	hi
 8012b02:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8012b9c <_strtod_l+0x5b4>
 8012b06:	f04f 3aff 	movhi.w	sl, #4294967295
 8012b0a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8012b0e:	2300      	movs	r3, #0
 8012b10:	9304      	str	r3, [sp, #16]
 8012b12:	e081      	b.n	8012c18 <_strtod_l+0x630>
 8012b14:	f018 0f01 	tst.w	r8, #1
 8012b18:	d007      	beq.n	8012b2a <_strtod_l+0x542>
 8012b1a:	4b1d      	ldr	r3, [pc, #116]	; (8012b90 <_strtod_l+0x5a8>)
 8012b1c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b24:	f7ed fd78 	bl	8000618 <__aeabi_dmul>
 8012b28:	2301      	movs	r3, #1
 8012b2a:	f109 0901 	add.w	r9, r9, #1
 8012b2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012b32:	e7ca      	b.n	8012aca <_strtod_l+0x4e2>
 8012b34:	d0eb      	beq.n	8012b0e <_strtod_l+0x526>
 8012b36:	f1c8 0800 	rsb	r8, r8, #0
 8012b3a:	f018 020f 	ands.w	r2, r8, #15
 8012b3e:	d00a      	beq.n	8012b56 <_strtod_l+0x56e>
 8012b40:	4b12      	ldr	r3, [pc, #72]	; (8012b8c <_strtod_l+0x5a4>)
 8012b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b46:	4650      	mov	r0, sl
 8012b48:	4659      	mov	r1, fp
 8012b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b4e:	f7ed fe8d 	bl	800086c <__aeabi_ddiv>
 8012b52:	4682      	mov	sl, r0
 8012b54:	468b      	mov	fp, r1
 8012b56:	ea5f 1828 	movs.w	r8, r8, asr #4
 8012b5a:	d0d8      	beq.n	8012b0e <_strtod_l+0x526>
 8012b5c:	f1b8 0f1f 	cmp.w	r8, #31
 8012b60:	dd1e      	ble.n	8012ba0 <_strtod_l+0x5b8>
 8012b62:	2500      	movs	r5, #0
 8012b64:	462e      	mov	r6, r5
 8012b66:	9509      	str	r5, [sp, #36]	; 0x24
 8012b68:	9507      	str	r5, [sp, #28]
 8012b6a:	2322      	movs	r3, #34	; 0x22
 8012b6c:	f04f 0a00 	mov.w	sl, #0
 8012b70:	f04f 0b00 	mov.w	fp, #0
 8012b74:	6023      	str	r3, [r4, #0]
 8012b76:	e789      	b.n	8012a8c <_strtod_l+0x4a4>
 8012b78:	0801770d 	.word	0x0801770d
 8012b7c:	0801774c 	.word	0x0801774c
 8012b80:	08017705 	.word	0x08017705
 8012b84:	080177c7 	.word	0x080177c7
 8012b88:	080177c3 	.word	0x080177c3
 8012b8c:	08017960 	.word	0x08017960
 8012b90:	08017938 	.word	0x08017938
 8012b94:	7ff00000 	.word	0x7ff00000
 8012b98:	7ca00000 	.word	0x7ca00000
 8012b9c:	7fefffff 	.word	0x7fefffff
 8012ba0:	f018 0310 	ands.w	r3, r8, #16
 8012ba4:	bf18      	it	ne
 8012ba6:	236a      	movne	r3, #106	; 0x6a
 8012ba8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8012f60 <_strtod_l+0x978>
 8012bac:	9304      	str	r3, [sp, #16]
 8012bae:	4650      	mov	r0, sl
 8012bb0:	4659      	mov	r1, fp
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	f018 0f01 	tst.w	r8, #1
 8012bb8:	d004      	beq.n	8012bc4 <_strtod_l+0x5dc>
 8012bba:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012bbe:	f7ed fd2b 	bl	8000618 <__aeabi_dmul>
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8012bc8:	f109 0908 	add.w	r9, r9, #8
 8012bcc:	d1f2      	bne.n	8012bb4 <_strtod_l+0x5cc>
 8012bce:	b10b      	cbz	r3, 8012bd4 <_strtod_l+0x5ec>
 8012bd0:	4682      	mov	sl, r0
 8012bd2:	468b      	mov	fp, r1
 8012bd4:	9b04      	ldr	r3, [sp, #16]
 8012bd6:	b1bb      	cbz	r3, 8012c08 <_strtod_l+0x620>
 8012bd8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012bdc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	4659      	mov	r1, fp
 8012be4:	dd10      	ble.n	8012c08 <_strtod_l+0x620>
 8012be6:	2b1f      	cmp	r3, #31
 8012be8:	f340 8128 	ble.w	8012e3c <_strtod_l+0x854>
 8012bec:	2b34      	cmp	r3, #52	; 0x34
 8012bee:	bfde      	ittt	le
 8012bf0:	3b20      	suble	r3, #32
 8012bf2:	f04f 32ff 	movle.w	r2, #4294967295
 8012bf6:	fa02 f303 	lslle.w	r3, r2, r3
 8012bfa:	f04f 0a00 	mov.w	sl, #0
 8012bfe:	bfcc      	ite	gt
 8012c00:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012c04:	ea03 0b01 	andle.w	fp, r3, r1
 8012c08:	2200      	movs	r2, #0
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	4650      	mov	r0, sl
 8012c0e:	4659      	mov	r1, fp
 8012c10:	f7ed ff6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8012c14:	2800      	cmp	r0, #0
 8012c16:	d1a4      	bne.n	8012b62 <_strtod_l+0x57a>
 8012c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c1a:	9300      	str	r3, [sp, #0]
 8012c1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8012c1e:	462b      	mov	r3, r5
 8012c20:	463a      	mov	r2, r7
 8012c22:	4620      	mov	r0, r4
 8012c24:	f002 f8f4 	bl	8014e10 <__s2b>
 8012c28:	9009      	str	r0, [sp, #36]	; 0x24
 8012c2a:	2800      	cmp	r0, #0
 8012c2c:	f43f af24 	beq.w	8012a78 <_strtod_l+0x490>
 8012c30:	9b07      	ldr	r3, [sp, #28]
 8012c32:	1b9e      	subs	r6, r3, r6
 8012c34:	9b08      	ldr	r3, [sp, #32]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	bfb4      	ite	lt
 8012c3a:	4633      	movlt	r3, r6
 8012c3c:	2300      	movge	r3, #0
 8012c3e:	9310      	str	r3, [sp, #64]	; 0x40
 8012c40:	9b08      	ldr	r3, [sp, #32]
 8012c42:	2500      	movs	r5, #0
 8012c44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012c48:	9318      	str	r3, [sp, #96]	; 0x60
 8012c4a:	462e      	mov	r6, r5
 8012c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c4e:	4620      	mov	r0, r4
 8012c50:	6859      	ldr	r1, [r3, #4]
 8012c52:	f002 f831 	bl	8014cb8 <_Balloc>
 8012c56:	9007      	str	r0, [sp, #28]
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	f43f af11 	beq.w	8012a80 <_strtod_l+0x498>
 8012c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c60:	691a      	ldr	r2, [r3, #16]
 8012c62:	3202      	adds	r2, #2
 8012c64:	f103 010c 	add.w	r1, r3, #12
 8012c68:	0092      	lsls	r2, r2, #2
 8012c6a:	300c      	adds	r0, #12
 8012c6c:	f7fe fb56 	bl	801131c <memcpy>
 8012c70:	ec4b ab10 	vmov	d0, sl, fp
 8012c74:	aa20      	add	r2, sp, #128	; 0x80
 8012c76:	a91f      	add	r1, sp, #124	; 0x7c
 8012c78:	4620      	mov	r0, r4
 8012c7a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8012c7e:	f002 fc03 	bl	8015488 <__d2b>
 8012c82:	901e      	str	r0, [sp, #120]	; 0x78
 8012c84:	2800      	cmp	r0, #0
 8012c86:	f43f aefb 	beq.w	8012a80 <_strtod_l+0x498>
 8012c8a:	2101      	movs	r1, #1
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	f002 f959 	bl	8014f44 <__i2b>
 8012c92:	4606      	mov	r6, r0
 8012c94:	2800      	cmp	r0, #0
 8012c96:	f43f aef3 	beq.w	8012a80 <_strtod_l+0x498>
 8012c9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012c9c:	9904      	ldr	r1, [sp, #16]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	bfab      	itete	ge
 8012ca2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8012ca4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8012ca6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8012ca8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8012cac:	bfac      	ite	ge
 8012cae:	eb03 0902 	addge.w	r9, r3, r2
 8012cb2:	1ad7      	sublt	r7, r2, r3
 8012cb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012cb6:	eba3 0801 	sub.w	r8, r3, r1
 8012cba:	4490      	add	r8, r2
 8012cbc:	4ba3      	ldr	r3, [pc, #652]	; (8012f4c <_strtod_l+0x964>)
 8012cbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8012cc2:	4598      	cmp	r8, r3
 8012cc4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012cc8:	f280 80cc 	bge.w	8012e64 <_strtod_l+0x87c>
 8012ccc:	eba3 0308 	sub.w	r3, r3, r8
 8012cd0:	2b1f      	cmp	r3, #31
 8012cd2:	eba2 0203 	sub.w	r2, r2, r3
 8012cd6:	f04f 0101 	mov.w	r1, #1
 8012cda:	f300 80b6 	bgt.w	8012e4a <_strtod_l+0x862>
 8012cde:	fa01 f303 	lsl.w	r3, r1, r3
 8012ce2:	9311      	str	r3, [sp, #68]	; 0x44
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8012ce8:	eb09 0802 	add.w	r8, r9, r2
 8012cec:	9b04      	ldr	r3, [sp, #16]
 8012cee:	45c1      	cmp	r9, r8
 8012cf0:	4417      	add	r7, r2
 8012cf2:	441f      	add	r7, r3
 8012cf4:	464b      	mov	r3, r9
 8012cf6:	bfa8      	it	ge
 8012cf8:	4643      	movge	r3, r8
 8012cfa:	42bb      	cmp	r3, r7
 8012cfc:	bfa8      	it	ge
 8012cfe:	463b      	movge	r3, r7
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	bfc2      	ittt	gt
 8012d04:	eba8 0803 	subgt.w	r8, r8, r3
 8012d08:	1aff      	subgt	r7, r7, r3
 8012d0a:	eba9 0903 	subgt.w	r9, r9, r3
 8012d0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	dd17      	ble.n	8012d44 <_strtod_l+0x75c>
 8012d14:	4631      	mov	r1, r6
 8012d16:	461a      	mov	r2, r3
 8012d18:	4620      	mov	r0, r4
 8012d1a:	f002 f9cf 	bl	80150bc <__pow5mult>
 8012d1e:	4606      	mov	r6, r0
 8012d20:	2800      	cmp	r0, #0
 8012d22:	f43f aead 	beq.w	8012a80 <_strtod_l+0x498>
 8012d26:	4601      	mov	r1, r0
 8012d28:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	f002 f920 	bl	8014f70 <__multiply>
 8012d30:	900f      	str	r0, [sp, #60]	; 0x3c
 8012d32:	2800      	cmp	r0, #0
 8012d34:	f43f aea4 	beq.w	8012a80 <_strtod_l+0x498>
 8012d38:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f001 fffc 	bl	8014d38 <_Bfree>
 8012d40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012d42:	931e      	str	r3, [sp, #120]	; 0x78
 8012d44:	f1b8 0f00 	cmp.w	r8, #0
 8012d48:	f300 8091 	bgt.w	8012e6e <_strtod_l+0x886>
 8012d4c:	9b08      	ldr	r3, [sp, #32]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	dd08      	ble.n	8012d64 <_strtod_l+0x77c>
 8012d52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012d54:	9907      	ldr	r1, [sp, #28]
 8012d56:	4620      	mov	r0, r4
 8012d58:	f002 f9b0 	bl	80150bc <__pow5mult>
 8012d5c:	9007      	str	r0, [sp, #28]
 8012d5e:	2800      	cmp	r0, #0
 8012d60:	f43f ae8e 	beq.w	8012a80 <_strtod_l+0x498>
 8012d64:	2f00      	cmp	r7, #0
 8012d66:	dd08      	ble.n	8012d7a <_strtod_l+0x792>
 8012d68:	9907      	ldr	r1, [sp, #28]
 8012d6a:	463a      	mov	r2, r7
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	f002 f9ff 	bl	8015170 <__lshift>
 8012d72:	9007      	str	r0, [sp, #28]
 8012d74:	2800      	cmp	r0, #0
 8012d76:	f43f ae83 	beq.w	8012a80 <_strtod_l+0x498>
 8012d7a:	f1b9 0f00 	cmp.w	r9, #0
 8012d7e:	dd08      	ble.n	8012d92 <_strtod_l+0x7aa>
 8012d80:	4631      	mov	r1, r6
 8012d82:	464a      	mov	r2, r9
 8012d84:	4620      	mov	r0, r4
 8012d86:	f002 f9f3 	bl	8015170 <__lshift>
 8012d8a:	4606      	mov	r6, r0
 8012d8c:	2800      	cmp	r0, #0
 8012d8e:	f43f ae77 	beq.w	8012a80 <_strtod_l+0x498>
 8012d92:	9a07      	ldr	r2, [sp, #28]
 8012d94:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012d96:	4620      	mov	r0, r4
 8012d98:	f002 fa72 	bl	8015280 <__mdiff>
 8012d9c:	4605      	mov	r5, r0
 8012d9e:	2800      	cmp	r0, #0
 8012da0:	f43f ae6e 	beq.w	8012a80 <_strtod_l+0x498>
 8012da4:	68c3      	ldr	r3, [r0, #12]
 8012da6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012da8:	2300      	movs	r3, #0
 8012daa:	60c3      	str	r3, [r0, #12]
 8012dac:	4631      	mov	r1, r6
 8012dae:	f002 fa4b 	bl	8015248 <__mcmp>
 8012db2:	2800      	cmp	r0, #0
 8012db4:	da65      	bge.n	8012e82 <_strtod_l+0x89a>
 8012db6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012db8:	ea53 030a 	orrs.w	r3, r3, sl
 8012dbc:	f040 8087 	bne.w	8012ece <_strtod_l+0x8e6>
 8012dc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	f040 8082 	bne.w	8012ece <_strtod_l+0x8e6>
 8012dca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012dce:	0d1b      	lsrs	r3, r3, #20
 8012dd0:	051b      	lsls	r3, r3, #20
 8012dd2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012dd6:	d97a      	bls.n	8012ece <_strtod_l+0x8e6>
 8012dd8:	696b      	ldr	r3, [r5, #20]
 8012dda:	b913      	cbnz	r3, 8012de2 <_strtod_l+0x7fa>
 8012ddc:	692b      	ldr	r3, [r5, #16]
 8012dde:	2b01      	cmp	r3, #1
 8012de0:	dd75      	ble.n	8012ece <_strtod_l+0x8e6>
 8012de2:	4629      	mov	r1, r5
 8012de4:	2201      	movs	r2, #1
 8012de6:	4620      	mov	r0, r4
 8012de8:	f002 f9c2 	bl	8015170 <__lshift>
 8012dec:	4631      	mov	r1, r6
 8012dee:	4605      	mov	r5, r0
 8012df0:	f002 fa2a 	bl	8015248 <__mcmp>
 8012df4:	2800      	cmp	r0, #0
 8012df6:	dd6a      	ble.n	8012ece <_strtod_l+0x8e6>
 8012df8:	9904      	ldr	r1, [sp, #16]
 8012dfa:	4a55      	ldr	r2, [pc, #340]	; (8012f50 <_strtod_l+0x968>)
 8012dfc:	465b      	mov	r3, fp
 8012dfe:	2900      	cmp	r1, #0
 8012e00:	f000 8085 	beq.w	8012f0e <_strtod_l+0x926>
 8012e04:	ea02 010b 	and.w	r1, r2, fp
 8012e08:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012e0c:	dc7f      	bgt.n	8012f0e <_strtod_l+0x926>
 8012e0e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012e12:	f77f aeaa 	ble.w	8012b6a <_strtod_l+0x582>
 8012e16:	4a4f      	ldr	r2, [pc, #316]	; (8012f54 <_strtod_l+0x96c>)
 8012e18:	2300      	movs	r3, #0
 8012e1a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8012e1e:	4650      	mov	r0, sl
 8012e20:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8012e24:	4659      	mov	r1, fp
 8012e26:	f7ed fbf7 	bl	8000618 <__aeabi_dmul>
 8012e2a:	460b      	mov	r3, r1
 8012e2c:	4303      	orrs	r3, r0
 8012e2e:	bf08      	it	eq
 8012e30:	2322      	moveq	r3, #34	; 0x22
 8012e32:	4682      	mov	sl, r0
 8012e34:	468b      	mov	fp, r1
 8012e36:	bf08      	it	eq
 8012e38:	6023      	streq	r3, [r4, #0]
 8012e3a:	e62b      	b.n	8012a94 <_strtod_l+0x4ac>
 8012e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8012e40:	fa02 f303 	lsl.w	r3, r2, r3
 8012e44:	ea03 0a0a 	and.w	sl, r3, sl
 8012e48:	e6de      	b.n	8012c08 <_strtod_l+0x620>
 8012e4a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8012e4e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8012e52:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8012e56:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8012e5a:	fa01 f308 	lsl.w	r3, r1, r8
 8012e5e:	930c      	str	r3, [sp, #48]	; 0x30
 8012e60:	9111      	str	r1, [sp, #68]	; 0x44
 8012e62:	e741      	b.n	8012ce8 <_strtod_l+0x700>
 8012e64:	2300      	movs	r3, #0
 8012e66:	930c      	str	r3, [sp, #48]	; 0x30
 8012e68:	2301      	movs	r3, #1
 8012e6a:	9311      	str	r3, [sp, #68]	; 0x44
 8012e6c:	e73c      	b.n	8012ce8 <_strtod_l+0x700>
 8012e6e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012e70:	4642      	mov	r2, r8
 8012e72:	4620      	mov	r0, r4
 8012e74:	f002 f97c 	bl	8015170 <__lshift>
 8012e78:	901e      	str	r0, [sp, #120]	; 0x78
 8012e7a:	2800      	cmp	r0, #0
 8012e7c:	f47f af66 	bne.w	8012d4c <_strtod_l+0x764>
 8012e80:	e5fe      	b.n	8012a80 <_strtod_l+0x498>
 8012e82:	465f      	mov	r7, fp
 8012e84:	d16e      	bne.n	8012f64 <_strtod_l+0x97c>
 8012e86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012e88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012e8c:	b342      	cbz	r2, 8012ee0 <_strtod_l+0x8f8>
 8012e8e:	4a32      	ldr	r2, [pc, #200]	; (8012f58 <_strtod_l+0x970>)
 8012e90:	4293      	cmp	r3, r2
 8012e92:	d128      	bne.n	8012ee6 <_strtod_l+0x8fe>
 8012e94:	9b04      	ldr	r3, [sp, #16]
 8012e96:	4650      	mov	r0, sl
 8012e98:	b1eb      	cbz	r3, 8012ed6 <_strtod_l+0x8ee>
 8012e9a:	4a2d      	ldr	r2, [pc, #180]	; (8012f50 <_strtod_l+0x968>)
 8012e9c:	403a      	ands	r2, r7
 8012e9e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8012ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8012ea6:	d819      	bhi.n	8012edc <_strtod_l+0x8f4>
 8012ea8:	0d12      	lsrs	r2, r2, #20
 8012eaa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012eae:	fa01 f303 	lsl.w	r3, r1, r3
 8012eb2:	4298      	cmp	r0, r3
 8012eb4:	d117      	bne.n	8012ee6 <_strtod_l+0x8fe>
 8012eb6:	4b29      	ldr	r3, [pc, #164]	; (8012f5c <_strtod_l+0x974>)
 8012eb8:	429f      	cmp	r7, r3
 8012eba:	d102      	bne.n	8012ec2 <_strtod_l+0x8da>
 8012ebc:	3001      	adds	r0, #1
 8012ebe:	f43f addf 	beq.w	8012a80 <_strtod_l+0x498>
 8012ec2:	4b23      	ldr	r3, [pc, #140]	; (8012f50 <_strtod_l+0x968>)
 8012ec4:	403b      	ands	r3, r7
 8012ec6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8012eca:	f04f 0a00 	mov.w	sl, #0
 8012ece:	9b04      	ldr	r3, [sp, #16]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d1a0      	bne.n	8012e16 <_strtod_l+0x82e>
 8012ed4:	e5de      	b.n	8012a94 <_strtod_l+0x4ac>
 8012ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8012eda:	e7ea      	b.n	8012eb2 <_strtod_l+0x8ca>
 8012edc:	460b      	mov	r3, r1
 8012ede:	e7e8      	b.n	8012eb2 <_strtod_l+0x8ca>
 8012ee0:	ea53 030a 	orrs.w	r3, r3, sl
 8012ee4:	d088      	beq.n	8012df8 <_strtod_l+0x810>
 8012ee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ee8:	b1db      	cbz	r3, 8012f22 <_strtod_l+0x93a>
 8012eea:	423b      	tst	r3, r7
 8012eec:	d0ef      	beq.n	8012ece <_strtod_l+0x8e6>
 8012eee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012ef0:	9a04      	ldr	r2, [sp, #16]
 8012ef2:	4650      	mov	r0, sl
 8012ef4:	4659      	mov	r1, fp
 8012ef6:	b1c3      	cbz	r3, 8012f2a <_strtod_l+0x942>
 8012ef8:	f7ff fb59 	bl	80125ae <sulp>
 8012efc:	4602      	mov	r2, r0
 8012efe:	460b      	mov	r3, r1
 8012f00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012f04:	f7ed f9d2 	bl	80002ac <__adddf3>
 8012f08:	4682      	mov	sl, r0
 8012f0a:	468b      	mov	fp, r1
 8012f0c:	e7df      	b.n	8012ece <_strtod_l+0x8e6>
 8012f0e:	4013      	ands	r3, r2
 8012f10:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012f14:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012f18:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012f1c:	f04f 3aff 	mov.w	sl, #4294967295
 8012f20:	e7d5      	b.n	8012ece <_strtod_l+0x8e6>
 8012f22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012f24:	ea13 0f0a 	tst.w	r3, sl
 8012f28:	e7e0      	b.n	8012eec <_strtod_l+0x904>
 8012f2a:	f7ff fb40 	bl	80125ae <sulp>
 8012f2e:	4602      	mov	r2, r0
 8012f30:	460b      	mov	r3, r1
 8012f32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012f36:	f7ed f9b7 	bl	80002a8 <__aeabi_dsub>
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	4682      	mov	sl, r0
 8012f40:	468b      	mov	fp, r1
 8012f42:	f7ed fdd1 	bl	8000ae8 <__aeabi_dcmpeq>
 8012f46:	2800      	cmp	r0, #0
 8012f48:	d0c1      	beq.n	8012ece <_strtod_l+0x8e6>
 8012f4a:	e60e      	b.n	8012b6a <_strtod_l+0x582>
 8012f4c:	fffffc02 	.word	0xfffffc02
 8012f50:	7ff00000 	.word	0x7ff00000
 8012f54:	39500000 	.word	0x39500000
 8012f58:	000fffff 	.word	0x000fffff
 8012f5c:	7fefffff 	.word	0x7fefffff
 8012f60:	08017760 	.word	0x08017760
 8012f64:	4631      	mov	r1, r6
 8012f66:	4628      	mov	r0, r5
 8012f68:	f002 faea 	bl	8015540 <__ratio>
 8012f6c:	ec59 8b10 	vmov	r8, r9, d0
 8012f70:	ee10 0a10 	vmov	r0, s0
 8012f74:	2200      	movs	r2, #0
 8012f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012f7a:	4649      	mov	r1, r9
 8012f7c:	f7ed fdc8 	bl	8000b10 <__aeabi_dcmple>
 8012f80:	2800      	cmp	r0, #0
 8012f82:	d07c      	beq.n	801307e <_strtod_l+0xa96>
 8012f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d04c      	beq.n	8013024 <_strtod_l+0xa3c>
 8012f8a:	4b95      	ldr	r3, [pc, #596]	; (80131e0 <_strtod_l+0xbf8>)
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8012f92:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80131e0 <_strtod_l+0xbf8>
 8012f96:	f04f 0800 	mov.w	r8, #0
 8012f9a:	4b92      	ldr	r3, [pc, #584]	; (80131e4 <_strtod_l+0xbfc>)
 8012f9c:	403b      	ands	r3, r7
 8012f9e:	9311      	str	r3, [sp, #68]	; 0x44
 8012fa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012fa2:	4b91      	ldr	r3, [pc, #580]	; (80131e8 <_strtod_l+0xc00>)
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	f040 80b2 	bne.w	801310e <_strtod_l+0xb26>
 8012faa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012fae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012fb2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8012fb6:	ec4b ab10 	vmov	d0, sl, fp
 8012fba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8012fbe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012fc2:	f002 f9e5 	bl	8015390 <__ulp>
 8012fc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012fca:	ec53 2b10 	vmov	r2, r3, d0
 8012fce:	f7ed fb23 	bl	8000618 <__aeabi_dmul>
 8012fd2:	4652      	mov	r2, sl
 8012fd4:	465b      	mov	r3, fp
 8012fd6:	f7ed f969 	bl	80002ac <__adddf3>
 8012fda:	460b      	mov	r3, r1
 8012fdc:	4981      	ldr	r1, [pc, #516]	; (80131e4 <_strtod_l+0xbfc>)
 8012fde:	4a83      	ldr	r2, [pc, #524]	; (80131ec <_strtod_l+0xc04>)
 8012fe0:	4019      	ands	r1, r3
 8012fe2:	4291      	cmp	r1, r2
 8012fe4:	4682      	mov	sl, r0
 8012fe6:	d95e      	bls.n	80130a6 <_strtod_l+0xabe>
 8012fe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d103      	bne.n	8012ffa <_strtod_l+0xa12>
 8012ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	f43f ad43 	beq.w	8012a80 <_strtod_l+0x498>
 8012ffa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80131f8 <_strtod_l+0xc10>
 8012ffe:	f04f 3aff 	mov.w	sl, #4294967295
 8013002:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013004:	4620      	mov	r0, r4
 8013006:	f001 fe97 	bl	8014d38 <_Bfree>
 801300a:	9907      	ldr	r1, [sp, #28]
 801300c:	4620      	mov	r0, r4
 801300e:	f001 fe93 	bl	8014d38 <_Bfree>
 8013012:	4631      	mov	r1, r6
 8013014:	4620      	mov	r0, r4
 8013016:	f001 fe8f 	bl	8014d38 <_Bfree>
 801301a:	4629      	mov	r1, r5
 801301c:	4620      	mov	r0, r4
 801301e:	f001 fe8b 	bl	8014d38 <_Bfree>
 8013022:	e613      	b.n	8012c4c <_strtod_l+0x664>
 8013024:	f1ba 0f00 	cmp.w	sl, #0
 8013028:	d11b      	bne.n	8013062 <_strtod_l+0xa7a>
 801302a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801302e:	b9f3      	cbnz	r3, 801306e <_strtod_l+0xa86>
 8013030:	4b6b      	ldr	r3, [pc, #428]	; (80131e0 <_strtod_l+0xbf8>)
 8013032:	2200      	movs	r2, #0
 8013034:	4640      	mov	r0, r8
 8013036:	4649      	mov	r1, r9
 8013038:	f7ed fd60 	bl	8000afc <__aeabi_dcmplt>
 801303c:	b9d0      	cbnz	r0, 8013074 <_strtod_l+0xa8c>
 801303e:	4640      	mov	r0, r8
 8013040:	4649      	mov	r1, r9
 8013042:	4b6b      	ldr	r3, [pc, #428]	; (80131f0 <_strtod_l+0xc08>)
 8013044:	2200      	movs	r2, #0
 8013046:	f7ed fae7 	bl	8000618 <__aeabi_dmul>
 801304a:	4680      	mov	r8, r0
 801304c:	4689      	mov	r9, r1
 801304e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013052:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8013056:	931b      	str	r3, [sp, #108]	; 0x6c
 8013058:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801305c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013060:	e79b      	b.n	8012f9a <_strtod_l+0x9b2>
 8013062:	f1ba 0f01 	cmp.w	sl, #1
 8013066:	d102      	bne.n	801306e <_strtod_l+0xa86>
 8013068:	2f00      	cmp	r7, #0
 801306a:	f43f ad7e 	beq.w	8012b6a <_strtod_l+0x582>
 801306e:	4b61      	ldr	r3, [pc, #388]	; (80131f4 <_strtod_l+0xc0c>)
 8013070:	2200      	movs	r2, #0
 8013072:	e78c      	b.n	8012f8e <_strtod_l+0x9a6>
 8013074:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80131f0 <_strtod_l+0xc08>
 8013078:	f04f 0800 	mov.w	r8, #0
 801307c:	e7e7      	b.n	801304e <_strtod_l+0xa66>
 801307e:	4b5c      	ldr	r3, [pc, #368]	; (80131f0 <_strtod_l+0xc08>)
 8013080:	4640      	mov	r0, r8
 8013082:	4649      	mov	r1, r9
 8013084:	2200      	movs	r2, #0
 8013086:	f7ed fac7 	bl	8000618 <__aeabi_dmul>
 801308a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801308c:	4680      	mov	r8, r0
 801308e:	4689      	mov	r9, r1
 8013090:	b933      	cbnz	r3, 80130a0 <_strtod_l+0xab8>
 8013092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013096:	9012      	str	r0, [sp, #72]	; 0x48
 8013098:	9313      	str	r3, [sp, #76]	; 0x4c
 801309a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801309e:	e7dd      	b.n	801305c <_strtod_l+0xa74>
 80130a0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80130a4:	e7f9      	b.n	801309a <_strtod_l+0xab2>
 80130a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80130aa:	9b04      	ldr	r3, [sp, #16]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d1a8      	bne.n	8013002 <_strtod_l+0xa1a>
 80130b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80130b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80130b6:	0d1b      	lsrs	r3, r3, #20
 80130b8:	051b      	lsls	r3, r3, #20
 80130ba:	429a      	cmp	r2, r3
 80130bc:	d1a1      	bne.n	8013002 <_strtod_l+0xa1a>
 80130be:	4640      	mov	r0, r8
 80130c0:	4649      	mov	r1, r9
 80130c2:	f7ed fe09 	bl	8000cd8 <__aeabi_d2lz>
 80130c6:	f7ed fa79 	bl	80005bc <__aeabi_l2d>
 80130ca:	4602      	mov	r2, r0
 80130cc:	460b      	mov	r3, r1
 80130ce:	4640      	mov	r0, r8
 80130d0:	4649      	mov	r1, r9
 80130d2:	f7ed f8e9 	bl	80002a8 <__aeabi_dsub>
 80130d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80130d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80130dc:	ea43 030a 	orr.w	r3, r3, sl
 80130e0:	4313      	orrs	r3, r2
 80130e2:	4680      	mov	r8, r0
 80130e4:	4689      	mov	r9, r1
 80130e6:	d053      	beq.n	8013190 <_strtod_l+0xba8>
 80130e8:	a335      	add	r3, pc, #212	; (adr r3, 80131c0 <_strtod_l+0xbd8>)
 80130ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ee:	f7ed fd05 	bl	8000afc <__aeabi_dcmplt>
 80130f2:	2800      	cmp	r0, #0
 80130f4:	f47f acce 	bne.w	8012a94 <_strtod_l+0x4ac>
 80130f8:	a333      	add	r3, pc, #204	; (adr r3, 80131c8 <_strtod_l+0xbe0>)
 80130fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130fe:	4640      	mov	r0, r8
 8013100:	4649      	mov	r1, r9
 8013102:	f7ed fd19 	bl	8000b38 <__aeabi_dcmpgt>
 8013106:	2800      	cmp	r0, #0
 8013108:	f43f af7b 	beq.w	8013002 <_strtod_l+0xa1a>
 801310c:	e4c2      	b.n	8012a94 <_strtod_l+0x4ac>
 801310e:	9b04      	ldr	r3, [sp, #16]
 8013110:	b333      	cbz	r3, 8013160 <_strtod_l+0xb78>
 8013112:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013114:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013118:	d822      	bhi.n	8013160 <_strtod_l+0xb78>
 801311a:	a32d      	add	r3, pc, #180	; (adr r3, 80131d0 <_strtod_l+0xbe8>)
 801311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013120:	4640      	mov	r0, r8
 8013122:	4649      	mov	r1, r9
 8013124:	f7ed fcf4 	bl	8000b10 <__aeabi_dcmple>
 8013128:	b1a0      	cbz	r0, 8013154 <_strtod_l+0xb6c>
 801312a:	4649      	mov	r1, r9
 801312c:	4640      	mov	r0, r8
 801312e:	f7ed fd4b 	bl	8000bc8 <__aeabi_d2uiz>
 8013132:	2801      	cmp	r0, #1
 8013134:	bf38      	it	cc
 8013136:	2001      	movcc	r0, #1
 8013138:	f7ed f9f4 	bl	8000524 <__aeabi_ui2d>
 801313c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801313e:	4680      	mov	r8, r0
 8013140:	4689      	mov	r9, r1
 8013142:	bb13      	cbnz	r3, 801318a <_strtod_l+0xba2>
 8013144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013148:	9014      	str	r0, [sp, #80]	; 0x50
 801314a:	9315      	str	r3, [sp, #84]	; 0x54
 801314c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013150:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8013154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013156:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013158:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801315c:	1a9b      	subs	r3, r3, r2
 801315e:	930d      	str	r3, [sp, #52]	; 0x34
 8013160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013164:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013168:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801316c:	f002 f910 	bl	8015390 <__ulp>
 8013170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013174:	ec53 2b10 	vmov	r2, r3, d0
 8013178:	f7ed fa4e 	bl	8000618 <__aeabi_dmul>
 801317c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013180:	f7ed f894 	bl	80002ac <__adddf3>
 8013184:	4682      	mov	sl, r0
 8013186:	468b      	mov	fp, r1
 8013188:	e78f      	b.n	80130aa <_strtod_l+0xac2>
 801318a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801318e:	e7dd      	b.n	801314c <_strtod_l+0xb64>
 8013190:	a311      	add	r3, pc, #68	; (adr r3, 80131d8 <_strtod_l+0xbf0>)
 8013192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013196:	f7ed fcb1 	bl	8000afc <__aeabi_dcmplt>
 801319a:	e7b4      	b.n	8013106 <_strtod_l+0xb1e>
 801319c:	2300      	movs	r3, #0
 801319e:	930e      	str	r3, [sp, #56]	; 0x38
 80131a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80131a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80131a4:	6013      	str	r3, [r2, #0]
 80131a6:	f7ff ba65 	b.w	8012674 <_strtod_l+0x8c>
 80131aa:	2b65      	cmp	r3, #101	; 0x65
 80131ac:	f43f ab5d 	beq.w	801286a <_strtod_l+0x282>
 80131b0:	2b45      	cmp	r3, #69	; 0x45
 80131b2:	f43f ab5a 	beq.w	801286a <_strtod_l+0x282>
 80131b6:	2201      	movs	r2, #1
 80131b8:	f7ff bb92 	b.w	80128e0 <_strtod_l+0x2f8>
 80131bc:	f3af 8000 	nop.w
 80131c0:	94a03595 	.word	0x94a03595
 80131c4:	3fdfffff 	.word	0x3fdfffff
 80131c8:	35afe535 	.word	0x35afe535
 80131cc:	3fe00000 	.word	0x3fe00000
 80131d0:	ffc00000 	.word	0xffc00000
 80131d4:	41dfffff 	.word	0x41dfffff
 80131d8:	94a03595 	.word	0x94a03595
 80131dc:	3fcfffff 	.word	0x3fcfffff
 80131e0:	3ff00000 	.word	0x3ff00000
 80131e4:	7ff00000 	.word	0x7ff00000
 80131e8:	7fe00000 	.word	0x7fe00000
 80131ec:	7c9fffff 	.word	0x7c9fffff
 80131f0:	3fe00000 	.word	0x3fe00000
 80131f4:	bff00000 	.word	0xbff00000
 80131f8:	7fefffff 	.word	0x7fefffff

080131fc <_strtod_r>:
 80131fc:	4b01      	ldr	r3, [pc, #4]	; (8013204 <_strtod_r+0x8>)
 80131fe:	f7ff b9f3 	b.w	80125e8 <_strtod_l>
 8013202:	bf00      	nop
 8013204:	20000140 	.word	0x20000140

08013208 <_strtol_l.isra.0>:
 8013208:	2b01      	cmp	r3, #1
 801320a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801320e:	d001      	beq.n	8013214 <_strtol_l.isra.0+0xc>
 8013210:	2b24      	cmp	r3, #36	; 0x24
 8013212:	d906      	bls.n	8013222 <_strtol_l.isra.0+0x1a>
 8013214:	f7fd ff56 	bl	80110c4 <__errno>
 8013218:	2316      	movs	r3, #22
 801321a:	6003      	str	r3, [r0, #0]
 801321c:	2000      	movs	r0, #0
 801321e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013222:	4f3a      	ldr	r7, [pc, #232]	; (801330c <_strtol_l.isra.0+0x104>)
 8013224:	468e      	mov	lr, r1
 8013226:	4676      	mov	r6, lr
 8013228:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801322c:	5de5      	ldrb	r5, [r4, r7]
 801322e:	f015 0508 	ands.w	r5, r5, #8
 8013232:	d1f8      	bne.n	8013226 <_strtol_l.isra.0+0x1e>
 8013234:	2c2d      	cmp	r4, #45	; 0x2d
 8013236:	d134      	bne.n	80132a2 <_strtol_l.isra.0+0x9a>
 8013238:	f89e 4000 	ldrb.w	r4, [lr]
 801323c:	f04f 0801 	mov.w	r8, #1
 8013240:	f106 0e02 	add.w	lr, r6, #2
 8013244:	2b00      	cmp	r3, #0
 8013246:	d05c      	beq.n	8013302 <_strtol_l.isra.0+0xfa>
 8013248:	2b10      	cmp	r3, #16
 801324a:	d10c      	bne.n	8013266 <_strtol_l.isra.0+0x5e>
 801324c:	2c30      	cmp	r4, #48	; 0x30
 801324e:	d10a      	bne.n	8013266 <_strtol_l.isra.0+0x5e>
 8013250:	f89e 4000 	ldrb.w	r4, [lr]
 8013254:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013258:	2c58      	cmp	r4, #88	; 0x58
 801325a:	d14d      	bne.n	80132f8 <_strtol_l.isra.0+0xf0>
 801325c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013260:	2310      	movs	r3, #16
 8013262:	f10e 0e02 	add.w	lr, lr, #2
 8013266:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801326a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801326e:	2600      	movs	r6, #0
 8013270:	fbbc f9f3 	udiv	r9, ip, r3
 8013274:	4635      	mov	r5, r6
 8013276:	fb03 ca19 	mls	sl, r3, r9, ip
 801327a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801327e:	2f09      	cmp	r7, #9
 8013280:	d818      	bhi.n	80132b4 <_strtol_l.isra.0+0xac>
 8013282:	463c      	mov	r4, r7
 8013284:	42a3      	cmp	r3, r4
 8013286:	dd24      	ble.n	80132d2 <_strtol_l.isra.0+0xca>
 8013288:	2e00      	cmp	r6, #0
 801328a:	db1f      	blt.n	80132cc <_strtol_l.isra.0+0xc4>
 801328c:	45a9      	cmp	r9, r5
 801328e:	d31d      	bcc.n	80132cc <_strtol_l.isra.0+0xc4>
 8013290:	d101      	bne.n	8013296 <_strtol_l.isra.0+0x8e>
 8013292:	45a2      	cmp	sl, r4
 8013294:	db1a      	blt.n	80132cc <_strtol_l.isra.0+0xc4>
 8013296:	fb05 4503 	mla	r5, r5, r3, r4
 801329a:	2601      	movs	r6, #1
 801329c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80132a0:	e7eb      	b.n	801327a <_strtol_l.isra.0+0x72>
 80132a2:	2c2b      	cmp	r4, #43	; 0x2b
 80132a4:	bf08      	it	eq
 80132a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80132aa:	46a8      	mov	r8, r5
 80132ac:	bf08      	it	eq
 80132ae:	f106 0e02 	addeq.w	lr, r6, #2
 80132b2:	e7c7      	b.n	8013244 <_strtol_l.isra.0+0x3c>
 80132b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80132b8:	2f19      	cmp	r7, #25
 80132ba:	d801      	bhi.n	80132c0 <_strtol_l.isra.0+0xb8>
 80132bc:	3c37      	subs	r4, #55	; 0x37
 80132be:	e7e1      	b.n	8013284 <_strtol_l.isra.0+0x7c>
 80132c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80132c4:	2f19      	cmp	r7, #25
 80132c6:	d804      	bhi.n	80132d2 <_strtol_l.isra.0+0xca>
 80132c8:	3c57      	subs	r4, #87	; 0x57
 80132ca:	e7db      	b.n	8013284 <_strtol_l.isra.0+0x7c>
 80132cc:	f04f 36ff 	mov.w	r6, #4294967295
 80132d0:	e7e4      	b.n	801329c <_strtol_l.isra.0+0x94>
 80132d2:	2e00      	cmp	r6, #0
 80132d4:	da05      	bge.n	80132e2 <_strtol_l.isra.0+0xda>
 80132d6:	2322      	movs	r3, #34	; 0x22
 80132d8:	6003      	str	r3, [r0, #0]
 80132da:	4665      	mov	r5, ip
 80132dc:	b942      	cbnz	r2, 80132f0 <_strtol_l.isra.0+0xe8>
 80132de:	4628      	mov	r0, r5
 80132e0:	e79d      	b.n	801321e <_strtol_l.isra.0+0x16>
 80132e2:	f1b8 0f00 	cmp.w	r8, #0
 80132e6:	d000      	beq.n	80132ea <_strtol_l.isra.0+0xe2>
 80132e8:	426d      	negs	r5, r5
 80132ea:	2a00      	cmp	r2, #0
 80132ec:	d0f7      	beq.n	80132de <_strtol_l.isra.0+0xd6>
 80132ee:	b10e      	cbz	r6, 80132f4 <_strtol_l.isra.0+0xec>
 80132f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80132f4:	6011      	str	r1, [r2, #0]
 80132f6:	e7f2      	b.n	80132de <_strtol_l.isra.0+0xd6>
 80132f8:	2430      	movs	r4, #48	; 0x30
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d1b3      	bne.n	8013266 <_strtol_l.isra.0+0x5e>
 80132fe:	2308      	movs	r3, #8
 8013300:	e7b1      	b.n	8013266 <_strtol_l.isra.0+0x5e>
 8013302:	2c30      	cmp	r4, #48	; 0x30
 8013304:	d0a4      	beq.n	8013250 <_strtol_l.isra.0+0x48>
 8013306:	230a      	movs	r3, #10
 8013308:	e7ad      	b.n	8013266 <_strtol_l.isra.0+0x5e>
 801330a:	bf00      	nop
 801330c:	08017599 	.word	0x08017599

08013310 <_strtol_r>:
 8013310:	f7ff bf7a 	b.w	8013208 <_strtol_l.isra.0>

08013314 <_strtoul_l.isra.0>:
 8013314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013318:	4e3b      	ldr	r6, [pc, #236]	; (8013408 <_strtoul_l.isra.0+0xf4>)
 801331a:	4686      	mov	lr, r0
 801331c:	468c      	mov	ip, r1
 801331e:	4660      	mov	r0, ip
 8013320:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013324:	5da5      	ldrb	r5, [r4, r6]
 8013326:	f015 0508 	ands.w	r5, r5, #8
 801332a:	d1f8      	bne.n	801331e <_strtoul_l.isra.0+0xa>
 801332c:	2c2d      	cmp	r4, #45	; 0x2d
 801332e:	d134      	bne.n	801339a <_strtoul_l.isra.0+0x86>
 8013330:	f89c 4000 	ldrb.w	r4, [ip]
 8013334:	f04f 0801 	mov.w	r8, #1
 8013338:	f100 0c02 	add.w	ip, r0, #2
 801333c:	2b00      	cmp	r3, #0
 801333e:	d05e      	beq.n	80133fe <_strtoul_l.isra.0+0xea>
 8013340:	2b10      	cmp	r3, #16
 8013342:	d10c      	bne.n	801335e <_strtoul_l.isra.0+0x4a>
 8013344:	2c30      	cmp	r4, #48	; 0x30
 8013346:	d10a      	bne.n	801335e <_strtoul_l.isra.0+0x4a>
 8013348:	f89c 0000 	ldrb.w	r0, [ip]
 801334c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013350:	2858      	cmp	r0, #88	; 0x58
 8013352:	d14f      	bne.n	80133f4 <_strtoul_l.isra.0+0xe0>
 8013354:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8013358:	2310      	movs	r3, #16
 801335a:	f10c 0c02 	add.w	ip, ip, #2
 801335e:	f04f 37ff 	mov.w	r7, #4294967295
 8013362:	2500      	movs	r5, #0
 8013364:	fbb7 f7f3 	udiv	r7, r7, r3
 8013368:	fb03 f907 	mul.w	r9, r3, r7
 801336c:	ea6f 0909 	mvn.w	r9, r9
 8013370:	4628      	mov	r0, r5
 8013372:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8013376:	2e09      	cmp	r6, #9
 8013378:	d818      	bhi.n	80133ac <_strtoul_l.isra.0+0x98>
 801337a:	4634      	mov	r4, r6
 801337c:	42a3      	cmp	r3, r4
 801337e:	dd24      	ble.n	80133ca <_strtoul_l.isra.0+0xb6>
 8013380:	2d00      	cmp	r5, #0
 8013382:	db1f      	blt.n	80133c4 <_strtoul_l.isra.0+0xb0>
 8013384:	4287      	cmp	r7, r0
 8013386:	d31d      	bcc.n	80133c4 <_strtoul_l.isra.0+0xb0>
 8013388:	d101      	bne.n	801338e <_strtoul_l.isra.0+0x7a>
 801338a:	45a1      	cmp	r9, r4
 801338c:	db1a      	blt.n	80133c4 <_strtoul_l.isra.0+0xb0>
 801338e:	fb00 4003 	mla	r0, r0, r3, r4
 8013392:	2501      	movs	r5, #1
 8013394:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8013398:	e7eb      	b.n	8013372 <_strtoul_l.isra.0+0x5e>
 801339a:	2c2b      	cmp	r4, #43	; 0x2b
 801339c:	bf08      	it	eq
 801339e:	f89c 4000 	ldrbeq.w	r4, [ip]
 80133a2:	46a8      	mov	r8, r5
 80133a4:	bf08      	it	eq
 80133a6:	f100 0c02 	addeq.w	ip, r0, #2
 80133aa:	e7c7      	b.n	801333c <_strtoul_l.isra.0+0x28>
 80133ac:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80133b0:	2e19      	cmp	r6, #25
 80133b2:	d801      	bhi.n	80133b8 <_strtoul_l.isra.0+0xa4>
 80133b4:	3c37      	subs	r4, #55	; 0x37
 80133b6:	e7e1      	b.n	801337c <_strtoul_l.isra.0+0x68>
 80133b8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80133bc:	2e19      	cmp	r6, #25
 80133be:	d804      	bhi.n	80133ca <_strtoul_l.isra.0+0xb6>
 80133c0:	3c57      	subs	r4, #87	; 0x57
 80133c2:	e7db      	b.n	801337c <_strtoul_l.isra.0+0x68>
 80133c4:	f04f 35ff 	mov.w	r5, #4294967295
 80133c8:	e7e4      	b.n	8013394 <_strtoul_l.isra.0+0x80>
 80133ca:	2d00      	cmp	r5, #0
 80133cc:	da07      	bge.n	80133de <_strtoul_l.isra.0+0xca>
 80133ce:	2322      	movs	r3, #34	; 0x22
 80133d0:	f8ce 3000 	str.w	r3, [lr]
 80133d4:	f04f 30ff 	mov.w	r0, #4294967295
 80133d8:	b942      	cbnz	r2, 80133ec <_strtoul_l.isra.0+0xd8>
 80133da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133de:	f1b8 0f00 	cmp.w	r8, #0
 80133e2:	d000      	beq.n	80133e6 <_strtoul_l.isra.0+0xd2>
 80133e4:	4240      	negs	r0, r0
 80133e6:	2a00      	cmp	r2, #0
 80133e8:	d0f7      	beq.n	80133da <_strtoul_l.isra.0+0xc6>
 80133ea:	b10d      	cbz	r5, 80133f0 <_strtoul_l.isra.0+0xdc>
 80133ec:	f10c 31ff 	add.w	r1, ip, #4294967295
 80133f0:	6011      	str	r1, [r2, #0]
 80133f2:	e7f2      	b.n	80133da <_strtoul_l.isra.0+0xc6>
 80133f4:	2430      	movs	r4, #48	; 0x30
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d1b1      	bne.n	801335e <_strtoul_l.isra.0+0x4a>
 80133fa:	2308      	movs	r3, #8
 80133fc:	e7af      	b.n	801335e <_strtoul_l.isra.0+0x4a>
 80133fe:	2c30      	cmp	r4, #48	; 0x30
 8013400:	d0a2      	beq.n	8013348 <_strtoul_l.isra.0+0x34>
 8013402:	230a      	movs	r3, #10
 8013404:	e7ab      	b.n	801335e <_strtoul_l.isra.0+0x4a>
 8013406:	bf00      	nop
 8013408:	08017599 	.word	0x08017599

0801340c <_strtoul_r>:
 801340c:	f7ff bf82 	b.w	8013314 <_strtoul_l.isra.0>

08013410 <__swbuf_r>:
 8013410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013412:	460e      	mov	r6, r1
 8013414:	4614      	mov	r4, r2
 8013416:	4605      	mov	r5, r0
 8013418:	b118      	cbz	r0, 8013422 <__swbuf_r+0x12>
 801341a:	6983      	ldr	r3, [r0, #24]
 801341c:	b90b      	cbnz	r3, 8013422 <__swbuf_r+0x12>
 801341e:	f7fd feaf 	bl	8011180 <__sinit>
 8013422:	4b21      	ldr	r3, [pc, #132]	; (80134a8 <__swbuf_r+0x98>)
 8013424:	429c      	cmp	r4, r3
 8013426:	d12b      	bne.n	8013480 <__swbuf_r+0x70>
 8013428:	686c      	ldr	r4, [r5, #4]
 801342a:	69a3      	ldr	r3, [r4, #24]
 801342c:	60a3      	str	r3, [r4, #8]
 801342e:	89a3      	ldrh	r3, [r4, #12]
 8013430:	071a      	lsls	r2, r3, #28
 8013432:	d52f      	bpl.n	8013494 <__swbuf_r+0x84>
 8013434:	6923      	ldr	r3, [r4, #16]
 8013436:	b36b      	cbz	r3, 8013494 <__swbuf_r+0x84>
 8013438:	6923      	ldr	r3, [r4, #16]
 801343a:	6820      	ldr	r0, [r4, #0]
 801343c:	1ac0      	subs	r0, r0, r3
 801343e:	6963      	ldr	r3, [r4, #20]
 8013440:	b2f6      	uxtb	r6, r6
 8013442:	4283      	cmp	r3, r0
 8013444:	4637      	mov	r7, r6
 8013446:	dc04      	bgt.n	8013452 <__swbuf_r+0x42>
 8013448:	4621      	mov	r1, r4
 801344a:	4628      	mov	r0, r5
 801344c:	f000 ffde 	bl	801440c <_fflush_r>
 8013450:	bb30      	cbnz	r0, 80134a0 <__swbuf_r+0x90>
 8013452:	68a3      	ldr	r3, [r4, #8]
 8013454:	3b01      	subs	r3, #1
 8013456:	60a3      	str	r3, [r4, #8]
 8013458:	6823      	ldr	r3, [r4, #0]
 801345a:	1c5a      	adds	r2, r3, #1
 801345c:	6022      	str	r2, [r4, #0]
 801345e:	701e      	strb	r6, [r3, #0]
 8013460:	6963      	ldr	r3, [r4, #20]
 8013462:	3001      	adds	r0, #1
 8013464:	4283      	cmp	r3, r0
 8013466:	d004      	beq.n	8013472 <__swbuf_r+0x62>
 8013468:	89a3      	ldrh	r3, [r4, #12]
 801346a:	07db      	lsls	r3, r3, #31
 801346c:	d506      	bpl.n	801347c <__swbuf_r+0x6c>
 801346e:	2e0a      	cmp	r6, #10
 8013470:	d104      	bne.n	801347c <__swbuf_r+0x6c>
 8013472:	4621      	mov	r1, r4
 8013474:	4628      	mov	r0, r5
 8013476:	f000 ffc9 	bl	801440c <_fflush_r>
 801347a:	b988      	cbnz	r0, 80134a0 <__swbuf_r+0x90>
 801347c:	4638      	mov	r0, r7
 801347e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013480:	4b0a      	ldr	r3, [pc, #40]	; (80134ac <__swbuf_r+0x9c>)
 8013482:	429c      	cmp	r4, r3
 8013484:	d101      	bne.n	801348a <__swbuf_r+0x7a>
 8013486:	68ac      	ldr	r4, [r5, #8]
 8013488:	e7cf      	b.n	801342a <__swbuf_r+0x1a>
 801348a:	4b09      	ldr	r3, [pc, #36]	; (80134b0 <__swbuf_r+0xa0>)
 801348c:	429c      	cmp	r4, r3
 801348e:	bf08      	it	eq
 8013490:	68ec      	ldreq	r4, [r5, #12]
 8013492:	e7ca      	b.n	801342a <__swbuf_r+0x1a>
 8013494:	4621      	mov	r1, r4
 8013496:	4628      	mov	r0, r5
 8013498:	f000 f81e 	bl	80134d8 <__swsetup_r>
 801349c:	2800      	cmp	r0, #0
 801349e:	d0cb      	beq.n	8013438 <__swbuf_r+0x28>
 80134a0:	f04f 37ff 	mov.w	r7, #4294967295
 80134a4:	e7ea      	b.n	801347c <__swbuf_r+0x6c>
 80134a6:	bf00      	nop
 80134a8:	080176bc 	.word	0x080176bc
 80134ac:	080176dc 	.word	0x080176dc
 80134b0:	0801769c 	.word	0x0801769c

080134b4 <_write_r>:
 80134b4:	b538      	push	{r3, r4, r5, lr}
 80134b6:	4d07      	ldr	r5, [pc, #28]	; (80134d4 <_write_r+0x20>)
 80134b8:	4604      	mov	r4, r0
 80134ba:	4608      	mov	r0, r1
 80134bc:	4611      	mov	r1, r2
 80134be:	2200      	movs	r2, #0
 80134c0:	602a      	str	r2, [r5, #0]
 80134c2:	461a      	mov	r2, r3
 80134c4:	f002 ffc0 	bl	8016448 <_write>
 80134c8:	1c43      	adds	r3, r0, #1
 80134ca:	d102      	bne.n	80134d2 <_write_r+0x1e>
 80134cc:	682b      	ldr	r3, [r5, #0]
 80134ce:	b103      	cbz	r3, 80134d2 <_write_r+0x1e>
 80134d0:	6023      	str	r3, [r4, #0]
 80134d2:	bd38      	pop	{r3, r4, r5, pc}
 80134d4:	20006ab8 	.word	0x20006ab8

080134d8 <__swsetup_r>:
 80134d8:	4b32      	ldr	r3, [pc, #200]	; (80135a4 <__swsetup_r+0xcc>)
 80134da:	b570      	push	{r4, r5, r6, lr}
 80134dc:	681d      	ldr	r5, [r3, #0]
 80134de:	4606      	mov	r6, r0
 80134e0:	460c      	mov	r4, r1
 80134e2:	b125      	cbz	r5, 80134ee <__swsetup_r+0x16>
 80134e4:	69ab      	ldr	r3, [r5, #24]
 80134e6:	b913      	cbnz	r3, 80134ee <__swsetup_r+0x16>
 80134e8:	4628      	mov	r0, r5
 80134ea:	f7fd fe49 	bl	8011180 <__sinit>
 80134ee:	4b2e      	ldr	r3, [pc, #184]	; (80135a8 <__swsetup_r+0xd0>)
 80134f0:	429c      	cmp	r4, r3
 80134f2:	d10f      	bne.n	8013514 <__swsetup_r+0x3c>
 80134f4:	686c      	ldr	r4, [r5, #4]
 80134f6:	89a3      	ldrh	r3, [r4, #12]
 80134f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80134fc:	0719      	lsls	r1, r3, #28
 80134fe:	d42c      	bmi.n	801355a <__swsetup_r+0x82>
 8013500:	06dd      	lsls	r5, r3, #27
 8013502:	d411      	bmi.n	8013528 <__swsetup_r+0x50>
 8013504:	2309      	movs	r3, #9
 8013506:	6033      	str	r3, [r6, #0]
 8013508:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801350c:	81a3      	strh	r3, [r4, #12]
 801350e:	f04f 30ff 	mov.w	r0, #4294967295
 8013512:	e03e      	b.n	8013592 <__swsetup_r+0xba>
 8013514:	4b25      	ldr	r3, [pc, #148]	; (80135ac <__swsetup_r+0xd4>)
 8013516:	429c      	cmp	r4, r3
 8013518:	d101      	bne.n	801351e <__swsetup_r+0x46>
 801351a:	68ac      	ldr	r4, [r5, #8]
 801351c:	e7eb      	b.n	80134f6 <__swsetup_r+0x1e>
 801351e:	4b24      	ldr	r3, [pc, #144]	; (80135b0 <__swsetup_r+0xd8>)
 8013520:	429c      	cmp	r4, r3
 8013522:	bf08      	it	eq
 8013524:	68ec      	ldreq	r4, [r5, #12]
 8013526:	e7e6      	b.n	80134f6 <__swsetup_r+0x1e>
 8013528:	0758      	lsls	r0, r3, #29
 801352a:	d512      	bpl.n	8013552 <__swsetup_r+0x7a>
 801352c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801352e:	b141      	cbz	r1, 8013542 <__swsetup_r+0x6a>
 8013530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013534:	4299      	cmp	r1, r3
 8013536:	d002      	beq.n	801353e <__swsetup_r+0x66>
 8013538:	4630      	mov	r0, r6
 801353a:	f7fd ff1f 	bl	801137c <_free_r>
 801353e:	2300      	movs	r3, #0
 8013540:	6363      	str	r3, [r4, #52]	; 0x34
 8013542:	89a3      	ldrh	r3, [r4, #12]
 8013544:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013548:	81a3      	strh	r3, [r4, #12]
 801354a:	2300      	movs	r3, #0
 801354c:	6063      	str	r3, [r4, #4]
 801354e:	6923      	ldr	r3, [r4, #16]
 8013550:	6023      	str	r3, [r4, #0]
 8013552:	89a3      	ldrh	r3, [r4, #12]
 8013554:	f043 0308 	orr.w	r3, r3, #8
 8013558:	81a3      	strh	r3, [r4, #12]
 801355a:	6923      	ldr	r3, [r4, #16]
 801355c:	b94b      	cbnz	r3, 8013572 <__swsetup_r+0x9a>
 801355e:	89a3      	ldrh	r3, [r4, #12]
 8013560:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013568:	d003      	beq.n	8013572 <__swsetup_r+0x9a>
 801356a:	4621      	mov	r1, r4
 801356c:	4630      	mov	r0, r6
 801356e:	f001 fb45 	bl	8014bfc <__smakebuf_r>
 8013572:	89a0      	ldrh	r0, [r4, #12]
 8013574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013578:	f010 0301 	ands.w	r3, r0, #1
 801357c:	d00a      	beq.n	8013594 <__swsetup_r+0xbc>
 801357e:	2300      	movs	r3, #0
 8013580:	60a3      	str	r3, [r4, #8]
 8013582:	6963      	ldr	r3, [r4, #20]
 8013584:	425b      	negs	r3, r3
 8013586:	61a3      	str	r3, [r4, #24]
 8013588:	6923      	ldr	r3, [r4, #16]
 801358a:	b943      	cbnz	r3, 801359e <__swsetup_r+0xc6>
 801358c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013590:	d1ba      	bne.n	8013508 <__swsetup_r+0x30>
 8013592:	bd70      	pop	{r4, r5, r6, pc}
 8013594:	0781      	lsls	r1, r0, #30
 8013596:	bf58      	it	pl
 8013598:	6963      	ldrpl	r3, [r4, #20]
 801359a:	60a3      	str	r3, [r4, #8]
 801359c:	e7f4      	b.n	8013588 <__swsetup_r+0xb0>
 801359e:	2000      	movs	r0, #0
 80135a0:	e7f7      	b.n	8013592 <__swsetup_r+0xba>
 80135a2:	bf00      	nop
 80135a4:	200000d8 	.word	0x200000d8
 80135a8:	080176bc 	.word	0x080176bc
 80135ac:	080176dc 	.word	0x080176dc
 80135b0:	0801769c 	.word	0x0801769c

080135b4 <__assert_func>:
 80135b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80135b6:	4614      	mov	r4, r2
 80135b8:	461a      	mov	r2, r3
 80135ba:	4b09      	ldr	r3, [pc, #36]	; (80135e0 <__assert_func+0x2c>)
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	4605      	mov	r5, r0
 80135c0:	68d8      	ldr	r0, [r3, #12]
 80135c2:	b14c      	cbz	r4, 80135d8 <__assert_func+0x24>
 80135c4:	4b07      	ldr	r3, [pc, #28]	; (80135e4 <__assert_func+0x30>)
 80135c6:	9100      	str	r1, [sp, #0]
 80135c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80135cc:	4906      	ldr	r1, [pc, #24]	; (80135e8 <__assert_func+0x34>)
 80135ce:	462b      	mov	r3, r5
 80135d0:	f000 ff58 	bl	8014484 <fiprintf>
 80135d4:	f7fd fd6e 	bl	80110b4 <abort>
 80135d8:	4b04      	ldr	r3, [pc, #16]	; (80135ec <__assert_func+0x38>)
 80135da:	461c      	mov	r4, r3
 80135dc:	e7f3      	b.n	80135c6 <__assert_func+0x12>
 80135de:	bf00      	nop
 80135e0:	200000d8 	.word	0x200000d8
 80135e4:	08017788 	.word	0x08017788
 80135e8:	08017795 	.word	0x08017795
 80135ec:	080177c3 	.word	0x080177c3

080135f0 <_close_r>:
 80135f0:	b538      	push	{r3, r4, r5, lr}
 80135f2:	4d06      	ldr	r5, [pc, #24]	; (801360c <_close_r+0x1c>)
 80135f4:	2300      	movs	r3, #0
 80135f6:	4604      	mov	r4, r0
 80135f8:	4608      	mov	r0, r1
 80135fa:	602b      	str	r3, [r5, #0]
 80135fc:	f002 fede 	bl	80163bc <_close>
 8013600:	1c43      	adds	r3, r0, #1
 8013602:	d102      	bne.n	801360a <_close_r+0x1a>
 8013604:	682b      	ldr	r3, [r5, #0]
 8013606:	b103      	cbz	r3, 801360a <_close_r+0x1a>
 8013608:	6023      	str	r3, [r4, #0]
 801360a:	bd38      	pop	{r3, r4, r5, pc}
 801360c:	20006ab8 	.word	0x20006ab8

08013610 <quorem>:
 8013610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013614:	6903      	ldr	r3, [r0, #16]
 8013616:	690c      	ldr	r4, [r1, #16]
 8013618:	42a3      	cmp	r3, r4
 801361a:	4607      	mov	r7, r0
 801361c:	f2c0 8081 	blt.w	8013722 <quorem+0x112>
 8013620:	3c01      	subs	r4, #1
 8013622:	f101 0814 	add.w	r8, r1, #20
 8013626:	f100 0514 	add.w	r5, r0, #20
 801362a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801362e:	9301      	str	r3, [sp, #4]
 8013630:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013634:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013638:	3301      	adds	r3, #1
 801363a:	429a      	cmp	r2, r3
 801363c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013640:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013644:	fbb2 f6f3 	udiv	r6, r2, r3
 8013648:	d331      	bcc.n	80136ae <quorem+0x9e>
 801364a:	f04f 0e00 	mov.w	lr, #0
 801364e:	4640      	mov	r0, r8
 8013650:	46ac      	mov	ip, r5
 8013652:	46f2      	mov	sl, lr
 8013654:	f850 2b04 	ldr.w	r2, [r0], #4
 8013658:	b293      	uxth	r3, r2
 801365a:	fb06 e303 	mla	r3, r6, r3, lr
 801365e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8013662:	b29b      	uxth	r3, r3
 8013664:	ebaa 0303 	sub.w	r3, sl, r3
 8013668:	0c12      	lsrs	r2, r2, #16
 801366a:	f8dc a000 	ldr.w	sl, [ip]
 801366e:	fb06 e202 	mla	r2, r6, r2, lr
 8013672:	fa13 f38a 	uxtah	r3, r3, sl
 8013676:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801367a:	fa1f fa82 	uxth.w	sl, r2
 801367e:	f8dc 2000 	ldr.w	r2, [ip]
 8013682:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8013686:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801368a:	b29b      	uxth	r3, r3
 801368c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013690:	4581      	cmp	r9, r0
 8013692:	f84c 3b04 	str.w	r3, [ip], #4
 8013696:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801369a:	d2db      	bcs.n	8013654 <quorem+0x44>
 801369c:	f855 300b 	ldr.w	r3, [r5, fp]
 80136a0:	b92b      	cbnz	r3, 80136ae <quorem+0x9e>
 80136a2:	9b01      	ldr	r3, [sp, #4]
 80136a4:	3b04      	subs	r3, #4
 80136a6:	429d      	cmp	r5, r3
 80136a8:	461a      	mov	r2, r3
 80136aa:	d32e      	bcc.n	801370a <quorem+0xfa>
 80136ac:	613c      	str	r4, [r7, #16]
 80136ae:	4638      	mov	r0, r7
 80136b0:	f001 fdca 	bl	8015248 <__mcmp>
 80136b4:	2800      	cmp	r0, #0
 80136b6:	db24      	blt.n	8013702 <quorem+0xf2>
 80136b8:	3601      	adds	r6, #1
 80136ba:	4628      	mov	r0, r5
 80136bc:	f04f 0c00 	mov.w	ip, #0
 80136c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80136c4:	f8d0 e000 	ldr.w	lr, [r0]
 80136c8:	b293      	uxth	r3, r2
 80136ca:	ebac 0303 	sub.w	r3, ip, r3
 80136ce:	0c12      	lsrs	r2, r2, #16
 80136d0:	fa13 f38e 	uxtah	r3, r3, lr
 80136d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80136d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80136dc:	b29b      	uxth	r3, r3
 80136de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80136e2:	45c1      	cmp	r9, r8
 80136e4:	f840 3b04 	str.w	r3, [r0], #4
 80136e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80136ec:	d2e8      	bcs.n	80136c0 <quorem+0xb0>
 80136ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80136f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80136f6:	b922      	cbnz	r2, 8013702 <quorem+0xf2>
 80136f8:	3b04      	subs	r3, #4
 80136fa:	429d      	cmp	r5, r3
 80136fc:	461a      	mov	r2, r3
 80136fe:	d30a      	bcc.n	8013716 <quorem+0x106>
 8013700:	613c      	str	r4, [r7, #16]
 8013702:	4630      	mov	r0, r6
 8013704:	b003      	add	sp, #12
 8013706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801370a:	6812      	ldr	r2, [r2, #0]
 801370c:	3b04      	subs	r3, #4
 801370e:	2a00      	cmp	r2, #0
 8013710:	d1cc      	bne.n	80136ac <quorem+0x9c>
 8013712:	3c01      	subs	r4, #1
 8013714:	e7c7      	b.n	80136a6 <quorem+0x96>
 8013716:	6812      	ldr	r2, [r2, #0]
 8013718:	3b04      	subs	r3, #4
 801371a:	2a00      	cmp	r2, #0
 801371c:	d1f0      	bne.n	8013700 <quorem+0xf0>
 801371e:	3c01      	subs	r4, #1
 8013720:	e7eb      	b.n	80136fa <quorem+0xea>
 8013722:	2000      	movs	r0, #0
 8013724:	e7ee      	b.n	8013704 <quorem+0xf4>
	...

08013728 <_dtoa_r>:
 8013728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801372c:	ed2d 8b02 	vpush	{d8}
 8013730:	ec57 6b10 	vmov	r6, r7, d0
 8013734:	b095      	sub	sp, #84	; 0x54
 8013736:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013738:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801373c:	9105      	str	r1, [sp, #20]
 801373e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013742:	4604      	mov	r4, r0
 8013744:	9209      	str	r2, [sp, #36]	; 0x24
 8013746:	930f      	str	r3, [sp, #60]	; 0x3c
 8013748:	b975      	cbnz	r5, 8013768 <_dtoa_r+0x40>
 801374a:	2010      	movs	r0, #16
 801374c:	f7fd fdde 	bl	801130c <malloc>
 8013750:	4602      	mov	r2, r0
 8013752:	6260      	str	r0, [r4, #36]	; 0x24
 8013754:	b920      	cbnz	r0, 8013760 <_dtoa_r+0x38>
 8013756:	4bb2      	ldr	r3, [pc, #712]	; (8013a20 <_dtoa_r+0x2f8>)
 8013758:	21ea      	movs	r1, #234	; 0xea
 801375a:	48b2      	ldr	r0, [pc, #712]	; (8013a24 <_dtoa_r+0x2fc>)
 801375c:	f7ff ff2a 	bl	80135b4 <__assert_func>
 8013760:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013764:	6005      	str	r5, [r0, #0]
 8013766:	60c5      	str	r5, [r0, #12]
 8013768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801376a:	6819      	ldr	r1, [r3, #0]
 801376c:	b151      	cbz	r1, 8013784 <_dtoa_r+0x5c>
 801376e:	685a      	ldr	r2, [r3, #4]
 8013770:	604a      	str	r2, [r1, #4]
 8013772:	2301      	movs	r3, #1
 8013774:	4093      	lsls	r3, r2
 8013776:	608b      	str	r3, [r1, #8]
 8013778:	4620      	mov	r0, r4
 801377a:	f001 fadd 	bl	8014d38 <_Bfree>
 801377e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013780:	2200      	movs	r2, #0
 8013782:	601a      	str	r2, [r3, #0]
 8013784:	1e3b      	subs	r3, r7, #0
 8013786:	bfb9      	ittee	lt
 8013788:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801378c:	9303      	strlt	r3, [sp, #12]
 801378e:	2300      	movge	r3, #0
 8013790:	f8c8 3000 	strge.w	r3, [r8]
 8013794:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013798:	4ba3      	ldr	r3, [pc, #652]	; (8013a28 <_dtoa_r+0x300>)
 801379a:	bfbc      	itt	lt
 801379c:	2201      	movlt	r2, #1
 801379e:	f8c8 2000 	strlt.w	r2, [r8]
 80137a2:	ea33 0309 	bics.w	r3, r3, r9
 80137a6:	d11b      	bne.n	80137e0 <_dtoa_r+0xb8>
 80137a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80137aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80137ae:	6013      	str	r3, [r2, #0]
 80137b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80137b4:	4333      	orrs	r3, r6
 80137b6:	f000 857a 	beq.w	80142ae <_dtoa_r+0xb86>
 80137ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80137bc:	b963      	cbnz	r3, 80137d8 <_dtoa_r+0xb0>
 80137be:	4b9b      	ldr	r3, [pc, #620]	; (8013a2c <_dtoa_r+0x304>)
 80137c0:	e024      	b.n	801380c <_dtoa_r+0xe4>
 80137c2:	4b9b      	ldr	r3, [pc, #620]	; (8013a30 <_dtoa_r+0x308>)
 80137c4:	9300      	str	r3, [sp, #0]
 80137c6:	3308      	adds	r3, #8
 80137c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80137ca:	6013      	str	r3, [r2, #0]
 80137cc:	9800      	ldr	r0, [sp, #0]
 80137ce:	b015      	add	sp, #84	; 0x54
 80137d0:	ecbd 8b02 	vpop	{d8}
 80137d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137d8:	4b94      	ldr	r3, [pc, #592]	; (8013a2c <_dtoa_r+0x304>)
 80137da:	9300      	str	r3, [sp, #0]
 80137dc:	3303      	adds	r3, #3
 80137de:	e7f3      	b.n	80137c8 <_dtoa_r+0xa0>
 80137e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80137e4:	2200      	movs	r2, #0
 80137e6:	ec51 0b17 	vmov	r0, r1, d7
 80137ea:	2300      	movs	r3, #0
 80137ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80137f0:	f7ed f97a 	bl	8000ae8 <__aeabi_dcmpeq>
 80137f4:	4680      	mov	r8, r0
 80137f6:	b158      	cbz	r0, 8013810 <_dtoa_r+0xe8>
 80137f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80137fa:	2301      	movs	r3, #1
 80137fc:	6013      	str	r3, [r2, #0]
 80137fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013800:	2b00      	cmp	r3, #0
 8013802:	f000 8551 	beq.w	80142a8 <_dtoa_r+0xb80>
 8013806:	488b      	ldr	r0, [pc, #556]	; (8013a34 <_dtoa_r+0x30c>)
 8013808:	6018      	str	r0, [r3, #0]
 801380a:	1e43      	subs	r3, r0, #1
 801380c:	9300      	str	r3, [sp, #0]
 801380e:	e7dd      	b.n	80137cc <_dtoa_r+0xa4>
 8013810:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8013814:	aa12      	add	r2, sp, #72	; 0x48
 8013816:	a913      	add	r1, sp, #76	; 0x4c
 8013818:	4620      	mov	r0, r4
 801381a:	f001 fe35 	bl	8015488 <__d2b>
 801381e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013822:	4683      	mov	fp, r0
 8013824:	2d00      	cmp	r5, #0
 8013826:	d07c      	beq.n	8013922 <_dtoa_r+0x1fa>
 8013828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801382a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801382e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013832:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8013836:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801383a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801383e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013842:	4b7d      	ldr	r3, [pc, #500]	; (8013a38 <_dtoa_r+0x310>)
 8013844:	2200      	movs	r2, #0
 8013846:	4630      	mov	r0, r6
 8013848:	4639      	mov	r1, r7
 801384a:	f7ec fd2d 	bl	80002a8 <__aeabi_dsub>
 801384e:	a36e      	add	r3, pc, #440	; (adr r3, 8013a08 <_dtoa_r+0x2e0>)
 8013850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013854:	f7ec fee0 	bl	8000618 <__aeabi_dmul>
 8013858:	a36d      	add	r3, pc, #436	; (adr r3, 8013a10 <_dtoa_r+0x2e8>)
 801385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385e:	f7ec fd25 	bl	80002ac <__adddf3>
 8013862:	4606      	mov	r6, r0
 8013864:	4628      	mov	r0, r5
 8013866:	460f      	mov	r7, r1
 8013868:	f7ec fe6c 	bl	8000544 <__aeabi_i2d>
 801386c:	a36a      	add	r3, pc, #424	; (adr r3, 8013a18 <_dtoa_r+0x2f0>)
 801386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013872:	f7ec fed1 	bl	8000618 <__aeabi_dmul>
 8013876:	4602      	mov	r2, r0
 8013878:	460b      	mov	r3, r1
 801387a:	4630      	mov	r0, r6
 801387c:	4639      	mov	r1, r7
 801387e:	f7ec fd15 	bl	80002ac <__adddf3>
 8013882:	4606      	mov	r6, r0
 8013884:	460f      	mov	r7, r1
 8013886:	f7ed f977 	bl	8000b78 <__aeabi_d2iz>
 801388a:	2200      	movs	r2, #0
 801388c:	4682      	mov	sl, r0
 801388e:	2300      	movs	r3, #0
 8013890:	4630      	mov	r0, r6
 8013892:	4639      	mov	r1, r7
 8013894:	f7ed f932 	bl	8000afc <__aeabi_dcmplt>
 8013898:	b148      	cbz	r0, 80138ae <_dtoa_r+0x186>
 801389a:	4650      	mov	r0, sl
 801389c:	f7ec fe52 	bl	8000544 <__aeabi_i2d>
 80138a0:	4632      	mov	r2, r6
 80138a2:	463b      	mov	r3, r7
 80138a4:	f7ed f920 	bl	8000ae8 <__aeabi_dcmpeq>
 80138a8:	b908      	cbnz	r0, 80138ae <_dtoa_r+0x186>
 80138aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80138ae:	f1ba 0f16 	cmp.w	sl, #22
 80138b2:	d854      	bhi.n	801395e <_dtoa_r+0x236>
 80138b4:	4b61      	ldr	r3, [pc, #388]	; (8013a3c <_dtoa_r+0x314>)
 80138b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80138ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80138c2:	f7ed f91b 	bl	8000afc <__aeabi_dcmplt>
 80138c6:	2800      	cmp	r0, #0
 80138c8:	d04b      	beq.n	8013962 <_dtoa_r+0x23a>
 80138ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80138ce:	2300      	movs	r3, #0
 80138d0:	930e      	str	r3, [sp, #56]	; 0x38
 80138d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80138d4:	1b5d      	subs	r5, r3, r5
 80138d6:	1e6b      	subs	r3, r5, #1
 80138d8:	9304      	str	r3, [sp, #16]
 80138da:	bf43      	ittte	mi
 80138dc:	2300      	movmi	r3, #0
 80138de:	f1c5 0801 	rsbmi	r8, r5, #1
 80138e2:	9304      	strmi	r3, [sp, #16]
 80138e4:	f04f 0800 	movpl.w	r8, #0
 80138e8:	f1ba 0f00 	cmp.w	sl, #0
 80138ec:	db3b      	blt.n	8013966 <_dtoa_r+0x23e>
 80138ee:	9b04      	ldr	r3, [sp, #16]
 80138f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80138f4:	4453      	add	r3, sl
 80138f6:	9304      	str	r3, [sp, #16]
 80138f8:	2300      	movs	r3, #0
 80138fa:	9306      	str	r3, [sp, #24]
 80138fc:	9b05      	ldr	r3, [sp, #20]
 80138fe:	2b09      	cmp	r3, #9
 8013900:	d869      	bhi.n	80139d6 <_dtoa_r+0x2ae>
 8013902:	2b05      	cmp	r3, #5
 8013904:	bfc4      	itt	gt
 8013906:	3b04      	subgt	r3, #4
 8013908:	9305      	strgt	r3, [sp, #20]
 801390a:	9b05      	ldr	r3, [sp, #20]
 801390c:	f1a3 0302 	sub.w	r3, r3, #2
 8013910:	bfcc      	ite	gt
 8013912:	2500      	movgt	r5, #0
 8013914:	2501      	movle	r5, #1
 8013916:	2b03      	cmp	r3, #3
 8013918:	d869      	bhi.n	80139ee <_dtoa_r+0x2c6>
 801391a:	e8df f003 	tbb	[pc, r3]
 801391e:	4e2c      	.short	0x4e2c
 8013920:	5a4c      	.short	0x5a4c
 8013922:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013926:	441d      	add	r5, r3
 8013928:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801392c:	2b20      	cmp	r3, #32
 801392e:	bfc1      	itttt	gt
 8013930:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013934:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013938:	fa09 f303 	lslgt.w	r3, r9, r3
 801393c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013940:	bfda      	itte	le
 8013942:	f1c3 0320 	rsble	r3, r3, #32
 8013946:	fa06 f003 	lslle.w	r0, r6, r3
 801394a:	4318      	orrgt	r0, r3
 801394c:	f7ec fdea 	bl	8000524 <__aeabi_ui2d>
 8013950:	2301      	movs	r3, #1
 8013952:	4606      	mov	r6, r0
 8013954:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013958:	3d01      	subs	r5, #1
 801395a:	9310      	str	r3, [sp, #64]	; 0x40
 801395c:	e771      	b.n	8013842 <_dtoa_r+0x11a>
 801395e:	2301      	movs	r3, #1
 8013960:	e7b6      	b.n	80138d0 <_dtoa_r+0x1a8>
 8013962:	900e      	str	r0, [sp, #56]	; 0x38
 8013964:	e7b5      	b.n	80138d2 <_dtoa_r+0x1aa>
 8013966:	f1ca 0300 	rsb	r3, sl, #0
 801396a:	9306      	str	r3, [sp, #24]
 801396c:	2300      	movs	r3, #0
 801396e:	eba8 080a 	sub.w	r8, r8, sl
 8013972:	930d      	str	r3, [sp, #52]	; 0x34
 8013974:	e7c2      	b.n	80138fc <_dtoa_r+0x1d4>
 8013976:	2300      	movs	r3, #0
 8013978:	9308      	str	r3, [sp, #32]
 801397a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801397c:	2b00      	cmp	r3, #0
 801397e:	dc39      	bgt.n	80139f4 <_dtoa_r+0x2cc>
 8013980:	f04f 0901 	mov.w	r9, #1
 8013984:	f8cd 9004 	str.w	r9, [sp, #4]
 8013988:	464b      	mov	r3, r9
 801398a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801398e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013990:	2200      	movs	r2, #0
 8013992:	6042      	str	r2, [r0, #4]
 8013994:	2204      	movs	r2, #4
 8013996:	f102 0614 	add.w	r6, r2, #20
 801399a:	429e      	cmp	r6, r3
 801399c:	6841      	ldr	r1, [r0, #4]
 801399e:	d92f      	bls.n	8013a00 <_dtoa_r+0x2d8>
 80139a0:	4620      	mov	r0, r4
 80139a2:	f001 f989 	bl	8014cb8 <_Balloc>
 80139a6:	9000      	str	r0, [sp, #0]
 80139a8:	2800      	cmp	r0, #0
 80139aa:	d14b      	bne.n	8013a44 <_dtoa_r+0x31c>
 80139ac:	4b24      	ldr	r3, [pc, #144]	; (8013a40 <_dtoa_r+0x318>)
 80139ae:	4602      	mov	r2, r0
 80139b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80139b4:	e6d1      	b.n	801375a <_dtoa_r+0x32>
 80139b6:	2301      	movs	r3, #1
 80139b8:	e7de      	b.n	8013978 <_dtoa_r+0x250>
 80139ba:	2300      	movs	r3, #0
 80139bc:	9308      	str	r3, [sp, #32]
 80139be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139c0:	eb0a 0903 	add.w	r9, sl, r3
 80139c4:	f109 0301 	add.w	r3, r9, #1
 80139c8:	2b01      	cmp	r3, #1
 80139ca:	9301      	str	r3, [sp, #4]
 80139cc:	bfb8      	it	lt
 80139ce:	2301      	movlt	r3, #1
 80139d0:	e7dd      	b.n	801398e <_dtoa_r+0x266>
 80139d2:	2301      	movs	r3, #1
 80139d4:	e7f2      	b.n	80139bc <_dtoa_r+0x294>
 80139d6:	2501      	movs	r5, #1
 80139d8:	2300      	movs	r3, #0
 80139da:	9305      	str	r3, [sp, #20]
 80139dc:	9508      	str	r5, [sp, #32]
 80139de:	f04f 39ff 	mov.w	r9, #4294967295
 80139e2:	2200      	movs	r2, #0
 80139e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80139e8:	2312      	movs	r3, #18
 80139ea:	9209      	str	r2, [sp, #36]	; 0x24
 80139ec:	e7cf      	b.n	801398e <_dtoa_r+0x266>
 80139ee:	2301      	movs	r3, #1
 80139f0:	9308      	str	r3, [sp, #32]
 80139f2:	e7f4      	b.n	80139de <_dtoa_r+0x2b6>
 80139f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80139f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80139fc:	464b      	mov	r3, r9
 80139fe:	e7c6      	b.n	801398e <_dtoa_r+0x266>
 8013a00:	3101      	adds	r1, #1
 8013a02:	6041      	str	r1, [r0, #4]
 8013a04:	0052      	lsls	r2, r2, #1
 8013a06:	e7c6      	b.n	8013996 <_dtoa_r+0x26e>
 8013a08:	636f4361 	.word	0x636f4361
 8013a0c:	3fd287a7 	.word	0x3fd287a7
 8013a10:	8b60c8b3 	.word	0x8b60c8b3
 8013a14:	3fc68a28 	.word	0x3fc68a28
 8013a18:	509f79fb 	.word	0x509f79fb
 8013a1c:	3fd34413 	.word	0x3fd34413
 8013a20:	080177d1 	.word	0x080177d1
 8013a24:	080177e8 	.word	0x080177e8
 8013a28:	7ff00000 	.word	0x7ff00000
 8013a2c:	080177cd 	.word	0x080177cd
 8013a30:	080177c4 	.word	0x080177c4
 8013a34:	08017a4a 	.word	0x08017a4a
 8013a38:	3ff80000 	.word	0x3ff80000
 8013a3c:	08017960 	.word	0x08017960
 8013a40:	08017847 	.word	0x08017847
 8013a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a46:	9a00      	ldr	r2, [sp, #0]
 8013a48:	601a      	str	r2, [r3, #0]
 8013a4a:	9b01      	ldr	r3, [sp, #4]
 8013a4c:	2b0e      	cmp	r3, #14
 8013a4e:	f200 80ad 	bhi.w	8013bac <_dtoa_r+0x484>
 8013a52:	2d00      	cmp	r5, #0
 8013a54:	f000 80aa 	beq.w	8013bac <_dtoa_r+0x484>
 8013a58:	f1ba 0f00 	cmp.w	sl, #0
 8013a5c:	dd36      	ble.n	8013acc <_dtoa_r+0x3a4>
 8013a5e:	4ac3      	ldr	r2, [pc, #780]	; (8013d6c <_dtoa_r+0x644>)
 8013a60:	f00a 030f 	and.w	r3, sl, #15
 8013a64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013a68:	ed93 7b00 	vldr	d7, [r3]
 8013a6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013a70:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013a74:	eeb0 8a47 	vmov.f32	s16, s14
 8013a78:	eef0 8a67 	vmov.f32	s17, s15
 8013a7c:	d016      	beq.n	8013aac <_dtoa_r+0x384>
 8013a7e:	4bbc      	ldr	r3, [pc, #752]	; (8013d70 <_dtoa_r+0x648>)
 8013a80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013a84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013a88:	f7ec fef0 	bl	800086c <__aeabi_ddiv>
 8013a8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013a90:	f007 070f 	and.w	r7, r7, #15
 8013a94:	2503      	movs	r5, #3
 8013a96:	4eb6      	ldr	r6, [pc, #728]	; (8013d70 <_dtoa_r+0x648>)
 8013a98:	b957      	cbnz	r7, 8013ab0 <_dtoa_r+0x388>
 8013a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a9e:	ec53 2b18 	vmov	r2, r3, d8
 8013aa2:	f7ec fee3 	bl	800086c <__aeabi_ddiv>
 8013aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013aaa:	e029      	b.n	8013b00 <_dtoa_r+0x3d8>
 8013aac:	2502      	movs	r5, #2
 8013aae:	e7f2      	b.n	8013a96 <_dtoa_r+0x36e>
 8013ab0:	07f9      	lsls	r1, r7, #31
 8013ab2:	d508      	bpl.n	8013ac6 <_dtoa_r+0x39e>
 8013ab4:	ec51 0b18 	vmov	r0, r1, d8
 8013ab8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013abc:	f7ec fdac 	bl	8000618 <__aeabi_dmul>
 8013ac0:	ec41 0b18 	vmov	d8, r0, r1
 8013ac4:	3501      	adds	r5, #1
 8013ac6:	107f      	asrs	r7, r7, #1
 8013ac8:	3608      	adds	r6, #8
 8013aca:	e7e5      	b.n	8013a98 <_dtoa_r+0x370>
 8013acc:	f000 80a6 	beq.w	8013c1c <_dtoa_r+0x4f4>
 8013ad0:	f1ca 0600 	rsb	r6, sl, #0
 8013ad4:	4ba5      	ldr	r3, [pc, #660]	; (8013d6c <_dtoa_r+0x644>)
 8013ad6:	4fa6      	ldr	r7, [pc, #664]	; (8013d70 <_dtoa_r+0x648>)
 8013ad8:	f006 020f 	and.w	r2, r6, #15
 8013adc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ae4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013ae8:	f7ec fd96 	bl	8000618 <__aeabi_dmul>
 8013aec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013af0:	1136      	asrs	r6, r6, #4
 8013af2:	2300      	movs	r3, #0
 8013af4:	2502      	movs	r5, #2
 8013af6:	2e00      	cmp	r6, #0
 8013af8:	f040 8085 	bne.w	8013c06 <_dtoa_r+0x4de>
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d1d2      	bne.n	8013aa6 <_dtoa_r+0x37e>
 8013b00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	f000 808c 	beq.w	8013c20 <_dtoa_r+0x4f8>
 8013b08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013b0c:	4b99      	ldr	r3, [pc, #612]	; (8013d74 <_dtoa_r+0x64c>)
 8013b0e:	2200      	movs	r2, #0
 8013b10:	4630      	mov	r0, r6
 8013b12:	4639      	mov	r1, r7
 8013b14:	f7ec fff2 	bl	8000afc <__aeabi_dcmplt>
 8013b18:	2800      	cmp	r0, #0
 8013b1a:	f000 8081 	beq.w	8013c20 <_dtoa_r+0x4f8>
 8013b1e:	9b01      	ldr	r3, [sp, #4]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d07d      	beq.n	8013c20 <_dtoa_r+0x4f8>
 8013b24:	f1b9 0f00 	cmp.w	r9, #0
 8013b28:	dd3c      	ble.n	8013ba4 <_dtoa_r+0x47c>
 8013b2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013b2e:	9307      	str	r3, [sp, #28]
 8013b30:	2200      	movs	r2, #0
 8013b32:	4b91      	ldr	r3, [pc, #580]	; (8013d78 <_dtoa_r+0x650>)
 8013b34:	4630      	mov	r0, r6
 8013b36:	4639      	mov	r1, r7
 8013b38:	f7ec fd6e 	bl	8000618 <__aeabi_dmul>
 8013b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b40:	3501      	adds	r5, #1
 8013b42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013b46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013b4a:	4628      	mov	r0, r5
 8013b4c:	f7ec fcfa 	bl	8000544 <__aeabi_i2d>
 8013b50:	4632      	mov	r2, r6
 8013b52:	463b      	mov	r3, r7
 8013b54:	f7ec fd60 	bl	8000618 <__aeabi_dmul>
 8013b58:	4b88      	ldr	r3, [pc, #544]	; (8013d7c <_dtoa_r+0x654>)
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	f7ec fba6 	bl	80002ac <__adddf3>
 8013b60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b68:	9303      	str	r3, [sp, #12]
 8013b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d15c      	bne.n	8013c2a <_dtoa_r+0x502>
 8013b70:	4b83      	ldr	r3, [pc, #524]	; (8013d80 <_dtoa_r+0x658>)
 8013b72:	2200      	movs	r2, #0
 8013b74:	4630      	mov	r0, r6
 8013b76:	4639      	mov	r1, r7
 8013b78:	f7ec fb96 	bl	80002a8 <__aeabi_dsub>
 8013b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013b80:	4606      	mov	r6, r0
 8013b82:	460f      	mov	r7, r1
 8013b84:	f7ec ffd8 	bl	8000b38 <__aeabi_dcmpgt>
 8013b88:	2800      	cmp	r0, #0
 8013b8a:	f040 8296 	bne.w	80140ba <_dtoa_r+0x992>
 8013b8e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013b92:	4630      	mov	r0, r6
 8013b94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013b98:	4639      	mov	r1, r7
 8013b9a:	f7ec ffaf 	bl	8000afc <__aeabi_dcmplt>
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	f040 8288 	bne.w	80140b4 <_dtoa_r+0x98c>
 8013ba4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013ba8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013bac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	f2c0 8158 	blt.w	8013e64 <_dtoa_r+0x73c>
 8013bb4:	f1ba 0f0e 	cmp.w	sl, #14
 8013bb8:	f300 8154 	bgt.w	8013e64 <_dtoa_r+0x73c>
 8013bbc:	4b6b      	ldr	r3, [pc, #428]	; (8013d6c <_dtoa_r+0x644>)
 8013bbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013bc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	f280 80e3 	bge.w	8013d94 <_dtoa_r+0x66c>
 8013bce:	9b01      	ldr	r3, [sp, #4]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	f300 80df 	bgt.w	8013d94 <_dtoa_r+0x66c>
 8013bd6:	f040 826d 	bne.w	80140b4 <_dtoa_r+0x98c>
 8013bda:	4b69      	ldr	r3, [pc, #420]	; (8013d80 <_dtoa_r+0x658>)
 8013bdc:	2200      	movs	r2, #0
 8013bde:	4640      	mov	r0, r8
 8013be0:	4649      	mov	r1, r9
 8013be2:	f7ec fd19 	bl	8000618 <__aeabi_dmul>
 8013be6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013bea:	f7ec ff9b 	bl	8000b24 <__aeabi_dcmpge>
 8013bee:	9e01      	ldr	r6, [sp, #4]
 8013bf0:	4637      	mov	r7, r6
 8013bf2:	2800      	cmp	r0, #0
 8013bf4:	f040 8243 	bne.w	801407e <_dtoa_r+0x956>
 8013bf8:	9d00      	ldr	r5, [sp, #0]
 8013bfa:	2331      	movs	r3, #49	; 0x31
 8013bfc:	f805 3b01 	strb.w	r3, [r5], #1
 8013c00:	f10a 0a01 	add.w	sl, sl, #1
 8013c04:	e23f      	b.n	8014086 <_dtoa_r+0x95e>
 8013c06:	07f2      	lsls	r2, r6, #31
 8013c08:	d505      	bpl.n	8013c16 <_dtoa_r+0x4ee>
 8013c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c0e:	f7ec fd03 	bl	8000618 <__aeabi_dmul>
 8013c12:	3501      	adds	r5, #1
 8013c14:	2301      	movs	r3, #1
 8013c16:	1076      	asrs	r6, r6, #1
 8013c18:	3708      	adds	r7, #8
 8013c1a:	e76c      	b.n	8013af6 <_dtoa_r+0x3ce>
 8013c1c:	2502      	movs	r5, #2
 8013c1e:	e76f      	b.n	8013b00 <_dtoa_r+0x3d8>
 8013c20:	9b01      	ldr	r3, [sp, #4]
 8013c22:	f8cd a01c 	str.w	sl, [sp, #28]
 8013c26:	930c      	str	r3, [sp, #48]	; 0x30
 8013c28:	e78d      	b.n	8013b46 <_dtoa_r+0x41e>
 8013c2a:	9900      	ldr	r1, [sp, #0]
 8013c2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013c2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c30:	4b4e      	ldr	r3, [pc, #312]	; (8013d6c <_dtoa_r+0x644>)
 8013c32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013c36:	4401      	add	r1, r0
 8013c38:	9102      	str	r1, [sp, #8]
 8013c3a:	9908      	ldr	r1, [sp, #32]
 8013c3c:	eeb0 8a47 	vmov.f32	s16, s14
 8013c40:	eef0 8a67 	vmov.f32	s17, s15
 8013c44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013c4c:	2900      	cmp	r1, #0
 8013c4e:	d045      	beq.n	8013cdc <_dtoa_r+0x5b4>
 8013c50:	494c      	ldr	r1, [pc, #304]	; (8013d84 <_dtoa_r+0x65c>)
 8013c52:	2000      	movs	r0, #0
 8013c54:	f7ec fe0a 	bl	800086c <__aeabi_ddiv>
 8013c58:	ec53 2b18 	vmov	r2, r3, d8
 8013c5c:	f7ec fb24 	bl	80002a8 <__aeabi_dsub>
 8013c60:	9d00      	ldr	r5, [sp, #0]
 8013c62:	ec41 0b18 	vmov	d8, r0, r1
 8013c66:	4639      	mov	r1, r7
 8013c68:	4630      	mov	r0, r6
 8013c6a:	f7ec ff85 	bl	8000b78 <__aeabi_d2iz>
 8013c6e:	900c      	str	r0, [sp, #48]	; 0x30
 8013c70:	f7ec fc68 	bl	8000544 <__aeabi_i2d>
 8013c74:	4602      	mov	r2, r0
 8013c76:	460b      	mov	r3, r1
 8013c78:	4630      	mov	r0, r6
 8013c7a:	4639      	mov	r1, r7
 8013c7c:	f7ec fb14 	bl	80002a8 <__aeabi_dsub>
 8013c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c82:	3330      	adds	r3, #48	; 0x30
 8013c84:	f805 3b01 	strb.w	r3, [r5], #1
 8013c88:	ec53 2b18 	vmov	r2, r3, d8
 8013c8c:	4606      	mov	r6, r0
 8013c8e:	460f      	mov	r7, r1
 8013c90:	f7ec ff34 	bl	8000afc <__aeabi_dcmplt>
 8013c94:	2800      	cmp	r0, #0
 8013c96:	d165      	bne.n	8013d64 <_dtoa_r+0x63c>
 8013c98:	4632      	mov	r2, r6
 8013c9a:	463b      	mov	r3, r7
 8013c9c:	4935      	ldr	r1, [pc, #212]	; (8013d74 <_dtoa_r+0x64c>)
 8013c9e:	2000      	movs	r0, #0
 8013ca0:	f7ec fb02 	bl	80002a8 <__aeabi_dsub>
 8013ca4:	ec53 2b18 	vmov	r2, r3, d8
 8013ca8:	f7ec ff28 	bl	8000afc <__aeabi_dcmplt>
 8013cac:	2800      	cmp	r0, #0
 8013cae:	f040 80b9 	bne.w	8013e24 <_dtoa_r+0x6fc>
 8013cb2:	9b02      	ldr	r3, [sp, #8]
 8013cb4:	429d      	cmp	r5, r3
 8013cb6:	f43f af75 	beq.w	8013ba4 <_dtoa_r+0x47c>
 8013cba:	4b2f      	ldr	r3, [pc, #188]	; (8013d78 <_dtoa_r+0x650>)
 8013cbc:	ec51 0b18 	vmov	r0, r1, d8
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	f7ec fca9 	bl	8000618 <__aeabi_dmul>
 8013cc6:	4b2c      	ldr	r3, [pc, #176]	; (8013d78 <_dtoa_r+0x650>)
 8013cc8:	ec41 0b18 	vmov	d8, r0, r1
 8013ccc:	2200      	movs	r2, #0
 8013cce:	4630      	mov	r0, r6
 8013cd0:	4639      	mov	r1, r7
 8013cd2:	f7ec fca1 	bl	8000618 <__aeabi_dmul>
 8013cd6:	4606      	mov	r6, r0
 8013cd8:	460f      	mov	r7, r1
 8013cda:	e7c4      	b.n	8013c66 <_dtoa_r+0x53e>
 8013cdc:	ec51 0b17 	vmov	r0, r1, d7
 8013ce0:	f7ec fc9a 	bl	8000618 <__aeabi_dmul>
 8013ce4:	9b02      	ldr	r3, [sp, #8]
 8013ce6:	9d00      	ldr	r5, [sp, #0]
 8013ce8:	930c      	str	r3, [sp, #48]	; 0x30
 8013cea:	ec41 0b18 	vmov	d8, r0, r1
 8013cee:	4639      	mov	r1, r7
 8013cf0:	4630      	mov	r0, r6
 8013cf2:	f7ec ff41 	bl	8000b78 <__aeabi_d2iz>
 8013cf6:	9011      	str	r0, [sp, #68]	; 0x44
 8013cf8:	f7ec fc24 	bl	8000544 <__aeabi_i2d>
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	460b      	mov	r3, r1
 8013d00:	4630      	mov	r0, r6
 8013d02:	4639      	mov	r1, r7
 8013d04:	f7ec fad0 	bl	80002a8 <__aeabi_dsub>
 8013d08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013d0a:	3330      	adds	r3, #48	; 0x30
 8013d0c:	f805 3b01 	strb.w	r3, [r5], #1
 8013d10:	9b02      	ldr	r3, [sp, #8]
 8013d12:	429d      	cmp	r5, r3
 8013d14:	4606      	mov	r6, r0
 8013d16:	460f      	mov	r7, r1
 8013d18:	f04f 0200 	mov.w	r2, #0
 8013d1c:	d134      	bne.n	8013d88 <_dtoa_r+0x660>
 8013d1e:	4b19      	ldr	r3, [pc, #100]	; (8013d84 <_dtoa_r+0x65c>)
 8013d20:	ec51 0b18 	vmov	r0, r1, d8
 8013d24:	f7ec fac2 	bl	80002ac <__adddf3>
 8013d28:	4602      	mov	r2, r0
 8013d2a:	460b      	mov	r3, r1
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	4639      	mov	r1, r7
 8013d30:	f7ec ff02 	bl	8000b38 <__aeabi_dcmpgt>
 8013d34:	2800      	cmp	r0, #0
 8013d36:	d175      	bne.n	8013e24 <_dtoa_r+0x6fc>
 8013d38:	ec53 2b18 	vmov	r2, r3, d8
 8013d3c:	4911      	ldr	r1, [pc, #68]	; (8013d84 <_dtoa_r+0x65c>)
 8013d3e:	2000      	movs	r0, #0
 8013d40:	f7ec fab2 	bl	80002a8 <__aeabi_dsub>
 8013d44:	4602      	mov	r2, r0
 8013d46:	460b      	mov	r3, r1
 8013d48:	4630      	mov	r0, r6
 8013d4a:	4639      	mov	r1, r7
 8013d4c:	f7ec fed6 	bl	8000afc <__aeabi_dcmplt>
 8013d50:	2800      	cmp	r0, #0
 8013d52:	f43f af27 	beq.w	8013ba4 <_dtoa_r+0x47c>
 8013d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013d58:	1e6b      	subs	r3, r5, #1
 8013d5a:	930c      	str	r3, [sp, #48]	; 0x30
 8013d5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013d60:	2b30      	cmp	r3, #48	; 0x30
 8013d62:	d0f8      	beq.n	8013d56 <_dtoa_r+0x62e>
 8013d64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013d68:	e04a      	b.n	8013e00 <_dtoa_r+0x6d8>
 8013d6a:	bf00      	nop
 8013d6c:	08017960 	.word	0x08017960
 8013d70:	08017938 	.word	0x08017938
 8013d74:	3ff00000 	.word	0x3ff00000
 8013d78:	40240000 	.word	0x40240000
 8013d7c:	401c0000 	.word	0x401c0000
 8013d80:	40140000 	.word	0x40140000
 8013d84:	3fe00000 	.word	0x3fe00000
 8013d88:	4baf      	ldr	r3, [pc, #700]	; (8014048 <_dtoa_r+0x920>)
 8013d8a:	f7ec fc45 	bl	8000618 <__aeabi_dmul>
 8013d8e:	4606      	mov	r6, r0
 8013d90:	460f      	mov	r7, r1
 8013d92:	e7ac      	b.n	8013cee <_dtoa_r+0x5c6>
 8013d94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013d98:	9d00      	ldr	r5, [sp, #0]
 8013d9a:	4642      	mov	r2, r8
 8013d9c:	464b      	mov	r3, r9
 8013d9e:	4630      	mov	r0, r6
 8013da0:	4639      	mov	r1, r7
 8013da2:	f7ec fd63 	bl	800086c <__aeabi_ddiv>
 8013da6:	f7ec fee7 	bl	8000b78 <__aeabi_d2iz>
 8013daa:	9002      	str	r0, [sp, #8]
 8013dac:	f7ec fbca 	bl	8000544 <__aeabi_i2d>
 8013db0:	4642      	mov	r2, r8
 8013db2:	464b      	mov	r3, r9
 8013db4:	f7ec fc30 	bl	8000618 <__aeabi_dmul>
 8013db8:	4602      	mov	r2, r0
 8013dba:	460b      	mov	r3, r1
 8013dbc:	4630      	mov	r0, r6
 8013dbe:	4639      	mov	r1, r7
 8013dc0:	f7ec fa72 	bl	80002a8 <__aeabi_dsub>
 8013dc4:	9e02      	ldr	r6, [sp, #8]
 8013dc6:	9f01      	ldr	r7, [sp, #4]
 8013dc8:	3630      	adds	r6, #48	; 0x30
 8013dca:	f805 6b01 	strb.w	r6, [r5], #1
 8013dce:	9e00      	ldr	r6, [sp, #0]
 8013dd0:	1bae      	subs	r6, r5, r6
 8013dd2:	42b7      	cmp	r7, r6
 8013dd4:	4602      	mov	r2, r0
 8013dd6:	460b      	mov	r3, r1
 8013dd8:	d137      	bne.n	8013e4a <_dtoa_r+0x722>
 8013dda:	f7ec fa67 	bl	80002ac <__adddf3>
 8013dde:	4642      	mov	r2, r8
 8013de0:	464b      	mov	r3, r9
 8013de2:	4606      	mov	r6, r0
 8013de4:	460f      	mov	r7, r1
 8013de6:	f7ec fea7 	bl	8000b38 <__aeabi_dcmpgt>
 8013dea:	b9c8      	cbnz	r0, 8013e20 <_dtoa_r+0x6f8>
 8013dec:	4642      	mov	r2, r8
 8013dee:	464b      	mov	r3, r9
 8013df0:	4630      	mov	r0, r6
 8013df2:	4639      	mov	r1, r7
 8013df4:	f7ec fe78 	bl	8000ae8 <__aeabi_dcmpeq>
 8013df8:	b110      	cbz	r0, 8013e00 <_dtoa_r+0x6d8>
 8013dfa:	9b02      	ldr	r3, [sp, #8]
 8013dfc:	07d9      	lsls	r1, r3, #31
 8013dfe:	d40f      	bmi.n	8013e20 <_dtoa_r+0x6f8>
 8013e00:	4620      	mov	r0, r4
 8013e02:	4659      	mov	r1, fp
 8013e04:	f000 ff98 	bl	8014d38 <_Bfree>
 8013e08:	2300      	movs	r3, #0
 8013e0a:	702b      	strb	r3, [r5, #0]
 8013e0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013e0e:	f10a 0001 	add.w	r0, sl, #1
 8013e12:	6018      	str	r0, [r3, #0]
 8013e14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	f43f acd8 	beq.w	80137cc <_dtoa_r+0xa4>
 8013e1c:	601d      	str	r5, [r3, #0]
 8013e1e:	e4d5      	b.n	80137cc <_dtoa_r+0xa4>
 8013e20:	f8cd a01c 	str.w	sl, [sp, #28]
 8013e24:	462b      	mov	r3, r5
 8013e26:	461d      	mov	r5, r3
 8013e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e2c:	2a39      	cmp	r2, #57	; 0x39
 8013e2e:	d108      	bne.n	8013e42 <_dtoa_r+0x71a>
 8013e30:	9a00      	ldr	r2, [sp, #0]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d1f7      	bne.n	8013e26 <_dtoa_r+0x6fe>
 8013e36:	9a07      	ldr	r2, [sp, #28]
 8013e38:	9900      	ldr	r1, [sp, #0]
 8013e3a:	3201      	adds	r2, #1
 8013e3c:	9207      	str	r2, [sp, #28]
 8013e3e:	2230      	movs	r2, #48	; 0x30
 8013e40:	700a      	strb	r2, [r1, #0]
 8013e42:	781a      	ldrb	r2, [r3, #0]
 8013e44:	3201      	adds	r2, #1
 8013e46:	701a      	strb	r2, [r3, #0]
 8013e48:	e78c      	b.n	8013d64 <_dtoa_r+0x63c>
 8013e4a:	4b7f      	ldr	r3, [pc, #508]	; (8014048 <_dtoa_r+0x920>)
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	f7ec fbe3 	bl	8000618 <__aeabi_dmul>
 8013e52:	2200      	movs	r2, #0
 8013e54:	2300      	movs	r3, #0
 8013e56:	4606      	mov	r6, r0
 8013e58:	460f      	mov	r7, r1
 8013e5a:	f7ec fe45 	bl	8000ae8 <__aeabi_dcmpeq>
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	d09b      	beq.n	8013d9a <_dtoa_r+0x672>
 8013e62:	e7cd      	b.n	8013e00 <_dtoa_r+0x6d8>
 8013e64:	9a08      	ldr	r2, [sp, #32]
 8013e66:	2a00      	cmp	r2, #0
 8013e68:	f000 80c4 	beq.w	8013ff4 <_dtoa_r+0x8cc>
 8013e6c:	9a05      	ldr	r2, [sp, #20]
 8013e6e:	2a01      	cmp	r2, #1
 8013e70:	f300 80a8 	bgt.w	8013fc4 <_dtoa_r+0x89c>
 8013e74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e76:	2a00      	cmp	r2, #0
 8013e78:	f000 80a0 	beq.w	8013fbc <_dtoa_r+0x894>
 8013e7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013e80:	9e06      	ldr	r6, [sp, #24]
 8013e82:	4645      	mov	r5, r8
 8013e84:	9a04      	ldr	r2, [sp, #16]
 8013e86:	2101      	movs	r1, #1
 8013e88:	441a      	add	r2, r3
 8013e8a:	4620      	mov	r0, r4
 8013e8c:	4498      	add	r8, r3
 8013e8e:	9204      	str	r2, [sp, #16]
 8013e90:	f001 f858 	bl	8014f44 <__i2b>
 8013e94:	4607      	mov	r7, r0
 8013e96:	2d00      	cmp	r5, #0
 8013e98:	dd0b      	ble.n	8013eb2 <_dtoa_r+0x78a>
 8013e9a:	9b04      	ldr	r3, [sp, #16]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	dd08      	ble.n	8013eb2 <_dtoa_r+0x78a>
 8013ea0:	42ab      	cmp	r3, r5
 8013ea2:	9a04      	ldr	r2, [sp, #16]
 8013ea4:	bfa8      	it	ge
 8013ea6:	462b      	movge	r3, r5
 8013ea8:	eba8 0803 	sub.w	r8, r8, r3
 8013eac:	1aed      	subs	r5, r5, r3
 8013eae:	1ad3      	subs	r3, r2, r3
 8013eb0:	9304      	str	r3, [sp, #16]
 8013eb2:	9b06      	ldr	r3, [sp, #24]
 8013eb4:	b1fb      	cbz	r3, 8013ef6 <_dtoa_r+0x7ce>
 8013eb6:	9b08      	ldr	r3, [sp, #32]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	f000 809f 	beq.w	8013ffc <_dtoa_r+0x8d4>
 8013ebe:	2e00      	cmp	r6, #0
 8013ec0:	dd11      	ble.n	8013ee6 <_dtoa_r+0x7be>
 8013ec2:	4639      	mov	r1, r7
 8013ec4:	4632      	mov	r2, r6
 8013ec6:	4620      	mov	r0, r4
 8013ec8:	f001 f8f8 	bl	80150bc <__pow5mult>
 8013ecc:	465a      	mov	r2, fp
 8013ece:	4601      	mov	r1, r0
 8013ed0:	4607      	mov	r7, r0
 8013ed2:	4620      	mov	r0, r4
 8013ed4:	f001 f84c 	bl	8014f70 <__multiply>
 8013ed8:	4659      	mov	r1, fp
 8013eda:	9007      	str	r0, [sp, #28]
 8013edc:	4620      	mov	r0, r4
 8013ede:	f000 ff2b 	bl	8014d38 <_Bfree>
 8013ee2:	9b07      	ldr	r3, [sp, #28]
 8013ee4:	469b      	mov	fp, r3
 8013ee6:	9b06      	ldr	r3, [sp, #24]
 8013ee8:	1b9a      	subs	r2, r3, r6
 8013eea:	d004      	beq.n	8013ef6 <_dtoa_r+0x7ce>
 8013eec:	4659      	mov	r1, fp
 8013eee:	4620      	mov	r0, r4
 8013ef0:	f001 f8e4 	bl	80150bc <__pow5mult>
 8013ef4:	4683      	mov	fp, r0
 8013ef6:	2101      	movs	r1, #1
 8013ef8:	4620      	mov	r0, r4
 8013efa:	f001 f823 	bl	8014f44 <__i2b>
 8013efe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	4606      	mov	r6, r0
 8013f04:	dd7c      	ble.n	8014000 <_dtoa_r+0x8d8>
 8013f06:	461a      	mov	r2, r3
 8013f08:	4601      	mov	r1, r0
 8013f0a:	4620      	mov	r0, r4
 8013f0c:	f001 f8d6 	bl	80150bc <__pow5mult>
 8013f10:	9b05      	ldr	r3, [sp, #20]
 8013f12:	2b01      	cmp	r3, #1
 8013f14:	4606      	mov	r6, r0
 8013f16:	dd76      	ble.n	8014006 <_dtoa_r+0x8de>
 8013f18:	2300      	movs	r3, #0
 8013f1a:	9306      	str	r3, [sp, #24]
 8013f1c:	6933      	ldr	r3, [r6, #16]
 8013f1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013f22:	6918      	ldr	r0, [r3, #16]
 8013f24:	f000 ffbe 	bl	8014ea4 <__hi0bits>
 8013f28:	f1c0 0020 	rsb	r0, r0, #32
 8013f2c:	9b04      	ldr	r3, [sp, #16]
 8013f2e:	4418      	add	r0, r3
 8013f30:	f010 001f 	ands.w	r0, r0, #31
 8013f34:	f000 8086 	beq.w	8014044 <_dtoa_r+0x91c>
 8013f38:	f1c0 0320 	rsb	r3, r0, #32
 8013f3c:	2b04      	cmp	r3, #4
 8013f3e:	dd7f      	ble.n	8014040 <_dtoa_r+0x918>
 8013f40:	f1c0 001c 	rsb	r0, r0, #28
 8013f44:	9b04      	ldr	r3, [sp, #16]
 8013f46:	4403      	add	r3, r0
 8013f48:	4480      	add	r8, r0
 8013f4a:	4405      	add	r5, r0
 8013f4c:	9304      	str	r3, [sp, #16]
 8013f4e:	f1b8 0f00 	cmp.w	r8, #0
 8013f52:	dd05      	ble.n	8013f60 <_dtoa_r+0x838>
 8013f54:	4659      	mov	r1, fp
 8013f56:	4642      	mov	r2, r8
 8013f58:	4620      	mov	r0, r4
 8013f5a:	f001 f909 	bl	8015170 <__lshift>
 8013f5e:	4683      	mov	fp, r0
 8013f60:	9b04      	ldr	r3, [sp, #16]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	dd05      	ble.n	8013f72 <_dtoa_r+0x84a>
 8013f66:	4631      	mov	r1, r6
 8013f68:	461a      	mov	r2, r3
 8013f6a:	4620      	mov	r0, r4
 8013f6c:	f001 f900 	bl	8015170 <__lshift>
 8013f70:	4606      	mov	r6, r0
 8013f72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d069      	beq.n	801404c <_dtoa_r+0x924>
 8013f78:	4631      	mov	r1, r6
 8013f7a:	4658      	mov	r0, fp
 8013f7c:	f001 f964 	bl	8015248 <__mcmp>
 8013f80:	2800      	cmp	r0, #0
 8013f82:	da63      	bge.n	801404c <_dtoa_r+0x924>
 8013f84:	2300      	movs	r3, #0
 8013f86:	4659      	mov	r1, fp
 8013f88:	220a      	movs	r2, #10
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f000 fef6 	bl	8014d7c <__multadd>
 8013f90:	9b08      	ldr	r3, [sp, #32]
 8013f92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f96:	4683      	mov	fp, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	f000 818f 	beq.w	80142bc <_dtoa_r+0xb94>
 8013f9e:	4639      	mov	r1, r7
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	220a      	movs	r2, #10
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	f000 fee9 	bl	8014d7c <__multadd>
 8013faa:	f1b9 0f00 	cmp.w	r9, #0
 8013fae:	4607      	mov	r7, r0
 8013fb0:	f300 808e 	bgt.w	80140d0 <_dtoa_r+0x9a8>
 8013fb4:	9b05      	ldr	r3, [sp, #20]
 8013fb6:	2b02      	cmp	r3, #2
 8013fb8:	dc50      	bgt.n	801405c <_dtoa_r+0x934>
 8013fba:	e089      	b.n	80140d0 <_dtoa_r+0x9a8>
 8013fbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013fbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013fc2:	e75d      	b.n	8013e80 <_dtoa_r+0x758>
 8013fc4:	9b01      	ldr	r3, [sp, #4]
 8013fc6:	1e5e      	subs	r6, r3, #1
 8013fc8:	9b06      	ldr	r3, [sp, #24]
 8013fca:	42b3      	cmp	r3, r6
 8013fcc:	bfbf      	itttt	lt
 8013fce:	9b06      	ldrlt	r3, [sp, #24]
 8013fd0:	9606      	strlt	r6, [sp, #24]
 8013fd2:	1af2      	sublt	r2, r6, r3
 8013fd4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8013fd6:	bfb6      	itet	lt
 8013fd8:	189b      	addlt	r3, r3, r2
 8013fda:	1b9e      	subge	r6, r3, r6
 8013fdc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8013fde:	9b01      	ldr	r3, [sp, #4]
 8013fe0:	bfb8      	it	lt
 8013fe2:	2600      	movlt	r6, #0
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	bfb5      	itete	lt
 8013fe8:	eba8 0503 	sublt.w	r5, r8, r3
 8013fec:	9b01      	ldrge	r3, [sp, #4]
 8013fee:	2300      	movlt	r3, #0
 8013ff0:	4645      	movge	r5, r8
 8013ff2:	e747      	b.n	8013e84 <_dtoa_r+0x75c>
 8013ff4:	9e06      	ldr	r6, [sp, #24]
 8013ff6:	9f08      	ldr	r7, [sp, #32]
 8013ff8:	4645      	mov	r5, r8
 8013ffa:	e74c      	b.n	8013e96 <_dtoa_r+0x76e>
 8013ffc:	9a06      	ldr	r2, [sp, #24]
 8013ffe:	e775      	b.n	8013eec <_dtoa_r+0x7c4>
 8014000:	9b05      	ldr	r3, [sp, #20]
 8014002:	2b01      	cmp	r3, #1
 8014004:	dc18      	bgt.n	8014038 <_dtoa_r+0x910>
 8014006:	9b02      	ldr	r3, [sp, #8]
 8014008:	b9b3      	cbnz	r3, 8014038 <_dtoa_r+0x910>
 801400a:	9b03      	ldr	r3, [sp, #12]
 801400c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014010:	b9a3      	cbnz	r3, 801403c <_dtoa_r+0x914>
 8014012:	9b03      	ldr	r3, [sp, #12]
 8014014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014018:	0d1b      	lsrs	r3, r3, #20
 801401a:	051b      	lsls	r3, r3, #20
 801401c:	b12b      	cbz	r3, 801402a <_dtoa_r+0x902>
 801401e:	9b04      	ldr	r3, [sp, #16]
 8014020:	3301      	adds	r3, #1
 8014022:	9304      	str	r3, [sp, #16]
 8014024:	f108 0801 	add.w	r8, r8, #1
 8014028:	2301      	movs	r3, #1
 801402a:	9306      	str	r3, [sp, #24]
 801402c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801402e:	2b00      	cmp	r3, #0
 8014030:	f47f af74 	bne.w	8013f1c <_dtoa_r+0x7f4>
 8014034:	2001      	movs	r0, #1
 8014036:	e779      	b.n	8013f2c <_dtoa_r+0x804>
 8014038:	2300      	movs	r3, #0
 801403a:	e7f6      	b.n	801402a <_dtoa_r+0x902>
 801403c:	9b02      	ldr	r3, [sp, #8]
 801403e:	e7f4      	b.n	801402a <_dtoa_r+0x902>
 8014040:	d085      	beq.n	8013f4e <_dtoa_r+0x826>
 8014042:	4618      	mov	r0, r3
 8014044:	301c      	adds	r0, #28
 8014046:	e77d      	b.n	8013f44 <_dtoa_r+0x81c>
 8014048:	40240000 	.word	0x40240000
 801404c:	9b01      	ldr	r3, [sp, #4]
 801404e:	2b00      	cmp	r3, #0
 8014050:	dc38      	bgt.n	80140c4 <_dtoa_r+0x99c>
 8014052:	9b05      	ldr	r3, [sp, #20]
 8014054:	2b02      	cmp	r3, #2
 8014056:	dd35      	ble.n	80140c4 <_dtoa_r+0x99c>
 8014058:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801405c:	f1b9 0f00 	cmp.w	r9, #0
 8014060:	d10d      	bne.n	801407e <_dtoa_r+0x956>
 8014062:	4631      	mov	r1, r6
 8014064:	464b      	mov	r3, r9
 8014066:	2205      	movs	r2, #5
 8014068:	4620      	mov	r0, r4
 801406a:	f000 fe87 	bl	8014d7c <__multadd>
 801406e:	4601      	mov	r1, r0
 8014070:	4606      	mov	r6, r0
 8014072:	4658      	mov	r0, fp
 8014074:	f001 f8e8 	bl	8015248 <__mcmp>
 8014078:	2800      	cmp	r0, #0
 801407a:	f73f adbd 	bgt.w	8013bf8 <_dtoa_r+0x4d0>
 801407e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014080:	9d00      	ldr	r5, [sp, #0]
 8014082:	ea6f 0a03 	mvn.w	sl, r3
 8014086:	f04f 0800 	mov.w	r8, #0
 801408a:	4631      	mov	r1, r6
 801408c:	4620      	mov	r0, r4
 801408e:	f000 fe53 	bl	8014d38 <_Bfree>
 8014092:	2f00      	cmp	r7, #0
 8014094:	f43f aeb4 	beq.w	8013e00 <_dtoa_r+0x6d8>
 8014098:	f1b8 0f00 	cmp.w	r8, #0
 801409c:	d005      	beq.n	80140aa <_dtoa_r+0x982>
 801409e:	45b8      	cmp	r8, r7
 80140a0:	d003      	beq.n	80140aa <_dtoa_r+0x982>
 80140a2:	4641      	mov	r1, r8
 80140a4:	4620      	mov	r0, r4
 80140a6:	f000 fe47 	bl	8014d38 <_Bfree>
 80140aa:	4639      	mov	r1, r7
 80140ac:	4620      	mov	r0, r4
 80140ae:	f000 fe43 	bl	8014d38 <_Bfree>
 80140b2:	e6a5      	b.n	8013e00 <_dtoa_r+0x6d8>
 80140b4:	2600      	movs	r6, #0
 80140b6:	4637      	mov	r7, r6
 80140b8:	e7e1      	b.n	801407e <_dtoa_r+0x956>
 80140ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80140bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80140c0:	4637      	mov	r7, r6
 80140c2:	e599      	b.n	8013bf8 <_dtoa_r+0x4d0>
 80140c4:	9b08      	ldr	r3, [sp, #32]
 80140c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	f000 80fd 	beq.w	80142ca <_dtoa_r+0xba2>
 80140d0:	2d00      	cmp	r5, #0
 80140d2:	dd05      	ble.n	80140e0 <_dtoa_r+0x9b8>
 80140d4:	4639      	mov	r1, r7
 80140d6:	462a      	mov	r2, r5
 80140d8:	4620      	mov	r0, r4
 80140da:	f001 f849 	bl	8015170 <__lshift>
 80140de:	4607      	mov	r7, r0
 80140e0:	9b06      	ldr	r3, [sp, #24]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d05c      	beq.n	80141a0 <_dtoa_r+0xa78>
 80140e6:	6879      	ldr	r1, [r7, #4]
 80140e8:	4620      	mov	r0, r4
 80140ea:	f000 fde5 	bl	8014cb8 <_Balloc>
 80140ee:	4605      	mov	r5, r0
 80140f0:	b928      	cbnz	r0, 80140fe <_dtoa_r+0x9d6>
 80140f2:	4b80      	ldr	r3, [pc, #512]	; (80142f4 <_dtoa_r+0xbcc>)
 80140f4:	4602      	mov	r2, r0
 80140f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80140fa:	f7ff bb2e 	b.w	801375a <_dtoa_r+0x32>
 80140fe:	693a      	ldr	r2, [r7, #16]
 8014100:	3202      	adds	r2, #2
 8014102:	0092      	lsls	r2, r2, #2
 8014104:	f107 010c 	add.w	r1, r7, #12
 8014108:	300c      	adds	r0, #12
 801410a:	f7fd f907 	bl	801131c <memcpy>
 801410e:	2201      	movs	r2, #1
 8014110:	4629      	mov	r1, r5
 8014112:	4620      	mov	r0, r4
 8014114:	f001 f82c 	bl	8015170 <__lshift>
 8014118:	9b00      	ldr	r3, [sp, #0]
 801411a:	3301      	adds	r3, #1
 801411c:	9301      	str	r3, [sp, #4]
 801411e:	9b00      	ldr	r3, [sp, #0]
 8014120:	444b      	add	r3, r9
 8014122:	9307      	str	r3, [sp, #28]
 8014124:	9b02      	ldr	r3, [sp, #8]
 8014126:	f003 0301 	and.w	r3, r3, #1
 801412a:	46b8      	mov	r8, r7
 801412c:	9306      	str	r3, [sp, #24]
 801412e:	4607      	mov	r7, r0
 8014130:	9b01      	ldr	r3, [sp, #4]
 8014132:	4631      	mov	r1, r6
 8014134:	3b01      	subs	r3, #1
 8014136:	4658      	mov	r0, fp
 8014138:	9302      	str	r3, [sp, #8]
 801413a:	f7ff fa69 	bl	8013610 <quorem>
 801413e:	4603      	mov	r3, r0
 8014140:	3330      	adds	r3, #48	; 0x30
 8014142:	9004      	str	r0, [sp, #16]
 8014144:	4641      	mov	r1, r8
 8014146:	4658      	mov	r0, fp
 8014148:	9308      	str	r3, [sp, #32]
 801414a:	f001 f87d 	bl	8015248 <__mcmp>
 801414e:	463a      	mov	r2, r7
 8014150:	4681      	mov	r9, r0
 8014152:	4631      	mov	r1, r6
 8014154:	4620      	mov	r0, r4
 8014156:	f001 f893 	bl	8015280 <__mdiff>
 801415a:	68c2      	ldr	r2, [r0, #12]
 801415c:	9b08      	ldr	r3, [sp, #32]
 801415e:	4605      	mov	r5, r0
 8014160:	bb02      	cbnz	r2, 80141a4 <_dtoa_r+0xa7c>
 8014162:	4601      	mov	r1, r0
 8014164:	4658      	mov	r0, fp
 8014166:	f001 f86f 	bl	8015248 <__mcmp>
 801416a:	9b08      	ldr	r3, [sp, #32]
 801416c:	4602      	mov	r2, r0
 801416e:	4629      	mov	r1, r5
 8014170:	4620      	mov	r0, r4
 8014172:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8014176:	f000 fddf 	bl	8014d38 <_Bfree>
 801417a:	9b05      	ldr	r3, [sp, #20]
 801417c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801417e:	9d01      	ldr	r5, [sp, #4]
 8014180:	ea43 0102 	orr.w	r1, r3, r2
 8014184:	9b06      	ldr	r3, [sp, #24]
 8014186:	430b      	orrs	r3, r1
 8014188:	9b08      	ldr	r3, [sp, #32]
 801418a:	d10d      	bne.n	80141a8 <_dtoa_r+0xa80>
 801418c:	2b39      	cmp	r3, #57	; 0x39
 801418e:	d029      	beq.n	80141e4 <_dtoa_r+0xabc>
 8014190:	f1b9 0f00 	cmp.w	r9, #0
 8014194:	dd01      	ble.n	801419a <_dtoa_r+0xa72>
 8014196:	9b04      	ldr	r3, [sp, #16]
 8014198:	3331      	adds	r3, #49	; 0x31
 801419a:	9a02      	ldr	r2, [sp, #8]
 801419c:	7013      	strb	r3, [r2, #0]
 801419e:	e774      	b.n	801408a <_dtoa_r+0x962>
 80141a0:	4638      	mov	r0, r7
 80141a2:	e7b9      	b.n	8014118 <_dtoa_r+0x9f0>
 80141a4:	2201      	movs	r2, #1
 80141a6:	e7e2      	b.n	801416e <_dtoa_r+0xa46>
 80141a8:	f1b9 0f00 	cmp.w	r9, #0
 80141ac:	db06      	blt.n	80141bc <_dtoa_r+0xa94>
 80141ae:	9905      	ldr	r1, [sp, #20]
 80141b0:	ea41 0909 	orr.w	r9, r1, r9
 80141b4:	9906      	ldr	r1, [sp, #24]
 80141b6:	ea59 0101 	orrs.w	r1, r9, r1
 80141ba:	d120      	bne.n	80141fe <_dtoa_r+0xad6>
 80141bc:	2a00      	cmp	r2, #0
 80141be:	ddec      	ble.n	801419a <_dtoa_r+0xa72>
 80141c0:	4659      	mov	r1, fp
 80141c2:	2201      	movs	r2, #1
 80141c4:	4620      	mov	r0, r4
 80141c6:	9301      	str	r3, [sp, #4]
 80141c8:	f000 ffd2 	bl	8015170 <__lshift>
 80141cc:	4631      	mov	r1, r6
 80141ce:	4683      	mov	fp, r0
 80141d0:	f001 f83a 	bl	8015248 <__mcmp>
 80141d4:	2800      	cmp	r0, #0
 80141d6:	9b01      	ldr	r3, [sp, #4]
 80141d8:	dc02      	bgt.n	80141e0 <_dtoa_r+0xab8>
 80141da:	d1de      	bne.n	801419a <_dtoa_r+0xa72>
 80141dc:	07da      	lsls	r2, r3, #31
 80141de:	d5dc      	bpl.n	801419a <_dtoa_r+0xa72>
 80141e0:	2b39      	cmp	r3, #57	; 0x39
 80141e2:	d1d8      	bne.n	8014196 <_dtoa_r+0xa6e>
 80141e4:	9a02      	ldr	r2, [sp, #8]
 80141e6:	2339      	movs	r3, #57	; 0x39
 80141e8:	7013      	strb	r3, [r2, #0]
 80141ea:	462b      	mov	r3, r5
 80141ec:	461d      	mov	r5, r3
 80141ee:	3b01      	subs	r3, #1
 80141f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80141f4:	2a39      	cmp	r2, #57	; 0x39
 80141f6:	d050      	beq.n	801429a <_dtoa_r+0xb72>
 80141f8:	3201      	adds	r2, #1
 80141fa:	701a      	strb	r2, [r3, #0]
 80141fc:	e745      	b.n	801408a <_dtoa_r+0x962>
 80141fe:	2a00      	cmp	r2, #0
 8014200:	dd03      	ble.n	801420a <_dtoa_r+0xae2>
 8014202:	2b39      	cmp	r3, #57	; 0x39
 8014204:	d0ee      	beq.n	80141e4 <_dtoa_r+0xabc>
 8014206:	3301      	adds	r3, #1
 8014208:	e7c7      	b.n	801419a <_dtoa_r+0xa72>
 801420a:	9a01      	ldr	r2, [sp, #4]
 801420c:	9907      	ldr	r1, [sp, #28]
 801420e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014212:	428a      	cmp	r2, r1
 8014214:	d02a      	beq.n	801426c <_dtoa_r+0xb44>
 8014216:	4659      	mov	r1, fp
 8014218:	2300      	movs	r3, #0
 801421a:	220a      	movs	r2, #10
 801421c:	4620      	mov	r0, r4
 801421e:	f000 fdad 	bl	8014d7c <__multadd>
 8014222:	45b8      	cmp	r8, r7
 8014224:	4683      	mov	fp, r0
 8014226:	f04f 0300 	mov.w	r3, #0
 801422a:	f04f 020a 	mov.w	r2, #10
 801422e:	4641      	mov	r1, r8
 8014230:	4620      	mov	r0, r4
 8014232:	d107      	bne.n	8014244 <_dtoa_r+0xb1c>
 8014234:	f000 fda2 	bl	8014d7c <__multadd>
 8014238:	4680      	mov	r8, r0
 801423a:	4607      	mov	r7, r0
 801423c:	9b01      	ldr	r3, [sp, #4]
 801423e:	3301      	adds	r3, #1
 8014240:	9301      	str	r3, [sp, #4]
 8014242:	e775      	b.n	8014130 <_dtoa_r+0xa08>
 8014244:	f000 fd9a 	bl	8014d7c <__multadd>
 8014248:	4639      	mov	r1, r7
 801424a:	4680      	mov	r8, r0
 801424c:	2300      	movs	r3, #0
 801424e:	220a      	movs	r2, #10
 8014250:	4620      	mov	r0, r4
 8014252:	f000 fd93 	bl	8014d7c <__multadd>
 8014256:	4607      	mov	r7, r0
 8014258:	e7f0      	b.n	801423c <_dtoa_r+0xb14>
 801425a:	f1b9 0f00 	cmp.w	r9, #0
 801425e:	9a00      	ldr	r2, [sp, #0]
 8014260:	bfcc      	ite	gt
 8014262:	464d      	movgt	r5, r9
 8014264:	2501      	movle	r5, #1
 8014266:	4415      	add	r5, r2
 8014268:	f04f 0800 	mov.w	r8, #0
 801426c:	4659      	mov	r1, fp
 801426e:	2201      	movs	r2, #1
 8014270:	4620      	mov	r0, r4
 8014272:	9301      	str	r3, [sp, #4]
 8014274:	f000 ff7c 	bl	8015170 <__lshift>
 8014278:	4631      	mov	r1, r6
 801427a:	4683      	mov	fp, r0
 801427c:	f000 ffe4 	bl	8015248 <__mcmp>
 8014280:	2800      	cmp	r0, #0
 8014282:	dcb2      	bgt.n	80141ea <_dtoa_r+0xac2>
 8014284:	d102      	bne.n	801428c <_dtoa_r+0xb64>
 8014286:	9b01      	ldr	r3, [sp, #4]
 8014288:	07db      	lsls	r3, r3, #31
 801428a:	d4ae      	bmi.n	80141ea <_dtoa_r+0xac2>
 801428c:	462b      	mov	r3, r5
 801428e:	461d      	mov	r5, r3
 8014290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014294:	2a30      	cmp	r2, #48	; 0x30
 8014296:	d0fa      	beq.n	801428e <_dtoa_r+0xb66>
 8014298:	e6f7      	b.n	801408a <_dtoa_r+0x962>
 801429a:	9a00      	ldr	r2, [sp, #0]
 801429c:	429a      	cmp	r2, r3
 801429e:	d1a5      	bne.n	80141ec <_dtoa_r+0xac4>
 80142a0:	f10a 0a01 	add.w	sl, sl, #1
 80142a4:	2331      	movs	r3, #49	; 0x31
 80142a6:	e779      	b.n	801419c <_dtoa_r+0xa74>
 80142a8:	4b13      	ldr	r3, [pc, #76]	; (80142f8 <_dtoa_r+0xbd0>)
 80142aa:	f7ff baaf 	b.w	801380c <_dtoa_r+0xe4>
 80142ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	f47f aa86 	bne.w	80137c2 <_dtoa_r+0x9a>
 80142b6:	4b11      	ldr	r3, [pc, #68]	; (80142fc <_dtoa_r+0xbd4>)
 80142b8:	f7ff baa8 	b.w	801380c <_dtoa_r+0xe4>
 80142bc:	f1b9 0f00 	cmp.w	r9, #0
 80142c0:	dc03      	bgt.n	80142ca <_dtoa_r+0xba2>
 80142c2:	9b05      	ldr	r3, [sp, #20]
 80142c4:	2b02      	cmp	r3, #2
 80142c6:	f73f aec9 	bgt.w	801405c <_dtoa_r+0x934>
 80142ca:	9d00      	ldr	r5, [sp, #0]
 80142cc:	4631      	mov	r1, r6
 80142ce:	4658      	mov	r0, fp
 80142d0:	f7ff f99e 	bl	8013610 <quorem>
 80142d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80142d8:	f805 3b01 	strb.w	r3, [r5], #1
 80142dc:	9a00      	ldr	r2, [sp, #0]
 80142de:	1aaa      	subs	r2, r5, r2
 80142e0:	4591      	cmp	r9, r2
 80142e2:	ddba      	ble.n	801425a <_dtoa_r+0xb32>
 80142e4:	4659      	mov	r1, fp
 80142e6:	2300      	movs	r3, #0
 80142e8:	220a      	movs	r2, #10
 80142ea:	4620      	mov	r0, r4
 80142ec:	f000 fd46 	bl	8014d7c <__multadd>
 80142f0:	4683      	mov	fp, r0
 80142f2:	e7eb      	b.n	80142cc <_dtoa_r+0xba4>
 80142f4:	08017847 	.word	0x08017847
 80142f8:	08017a49 	.word	0x08017a49
 80142fc:	080177c4 	.word	0x080177c4

08014300 <__sflush_r>:
 8014300:	898a      	ldrh	r2, [r1, #12]
 8014302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014306:	4605      	mov	r5, r0
 8014308:	0710      	lsls	r0, r2, #28
 801430a:	460c      	mov	r4, r1
 801430c:	d458      	bmi.n	80143c0 <__sflush_r+0xc0>
 801430e:	684b      	ldr	r3, [r1, #4]
 8014310:	2b00      	cmp	r3, #0
 8014312:	dc05      	bgt.n	8014320 <__sflush_r+0x20>
 8014314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014316:	2b00      	cmp	r3, #0
 8014318:	dc02      	bgt.n	8014320 <__sflush_r+0x20>
 801431a:	2000      	movs	r0, #0
 801431c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014322:	2e00      	cmp	r6, #0
 8014324:	d0f9      	beq.n	801431a <__sflush_r+0x1a>
 8014326:	2300      	movs	r3, #0
 8014328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801432c:	682f      	ldr	r7, [r5, #0]
 801432e:	602b      	str	r3, [r5, #0]
 8014330:	d032      	beq.n	8014398 <__sflush_r+0x98>
 8014332:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014334:	89a3      	ldrh	r3, [r4, #12]
 8014336:	075a      	lsls	r2, r3, #29
 8014338:	d505      	bpl.n	8014346 <__sflush_r+0x46>
 801433a:	6863      	ldr	r3, [r4, #4]
 801433c:	1ac0      	subs	r0, r0, r3
 801433e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014340:	b10b      	cbz	r3, 8014346 <__sflush_r+0x46>
 8014342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014344:	1ac0      	subs	r0, r0, r3
 8014346:	2300      	movs	r3, #0
 8014348:	4602      	mov	r2, r0
 801434a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801434c:	6a21      	ldr	r1, [r4, #32]
 801434e:	4628      	mov	r0, r5
 8014350:	47b0      	blx	r6
 8014352:	1c43      	adds	r3, r0, #1
 8014354:	89a3      	ldrh	r3, [r4, #12]
 8014356:	d106      	bne.n	8014366 <__sflush_r+0x66>
 8014358:	6829      	ldr	r1, [r5, #0]
 801435a:	291d      	cmp	r1, #29
 801435c:	d82c      	bhi.n	80143b8 <__sflush_r+0xb8>
 801435e:	4a2a      	ldr	r2, [pc, #168]	; (8014408 <__sflush_r+0x108>)
 8014360:	40ca      	lsrs	r2, r1
 8014362:	07d6      	lsls	r6, r2, #31
 8014364:	d528      	bpl.n	80143b8 <__sflush_r+0xb8>
 8014366:	2200      	movs	r2, #0
 8014368:	6062      	str	r2, [r4, #4]
 801436a:	04d9      	lsls	r1, r3, #19
 801436c:	6922      	ldr	r2, [r4, #16]
 801436e:	6022      	str	r2, [r4, #0]
 8014370:	d504      	bpl.n	801437c <__sflush_r+0x7c>
 8014372:	1c42      	adds	r2, r0, #1
 8014374:	d101      	bne.n	801437a <__sflush_r+0x7a>
 8014376:	682b      	ldr	r3, [r5, #0]
 8014378:	b903      	cbnz	r3, 801437c <__sflush_r+0x7c>
 801437a:	6560      	str	r0, [r4, #84]	; 0x54
 801437c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801437e:	602f      	str	r7, [r5, #0]
 8014380:	2900      	cmp	r1, #0
 8014382:	d0ca      	beq.n	801431a <__sflush_r+0x1a>
 8014384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014388:	4299      	cmp	r1, r3
 801438a:	d002      	beq.n	8014392 <__sflush_r+0x92>
 801438c:	4628      	mov	r0, r5
 801438e:	f7fc fff5 	bl	801137c <_free_r>
 8014392:	2000      	movs	r0, #0
 8014394:	6360      	str	r0, [r4, #52]	; 0x34
 8014396:	e7c1      	b.n	801431c <__sflush_r+0x1c>
 8014398:	6a21      	ldr	r1, [r4, #32]
 801439a:	2301      	movs	r3, #1
 801439c:	4628      	mov	r0, r5
 801439e:	47b0      	blx	r6
 80143a0:	1c41      	adds	r1, r0, #1
 80143a2:	d1c7      	bne.n	8014334 <__sflush_r+0x34>
 80143a4:	682b      	ldr	r3, [r5, #0]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d0c4      	beq.n	8014334 <__sflush_r+0x34>
 80143aa:	2b1d      	cmp	r3, #29
 80143ac:	d001      	beq.n	80143b2 <__sflush_r+0xb2>
 80143ae:	2b16      	cmp	r3, #22
 80143b0:	d101      	bne.n	80143b6 <__sflush_r+0xb6>
 80143b2:	602f      	str	r7, [r5, #0]
 80143b4:	e7b1      	b.n	801431a <__sflush_r+0x1a>
 80143b6:	89a3      	ldrh	r3, [r4, #12]
 80143b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143bc:	81a3      	strh	r3, [r4, #12]
 80143be:	e7ad      	b.n	801431c <__sflush_r+0x1c>
 80143c0:	690f      	ldr	r7, [r1, #16]
 80143c2:	2f00      	cmp	r7, #0
 80143c4:	d0a9      	beq.n	801431a <__sflush_r+0x1a>
 80143c6:	0793      	lsls	r3, r2, #30
 80143c8:	680e      	ldr	r6, [r1, #0]
 80143ca:	bf08      	it	eq
 80143cc:	694b      	ldreq	r3, [r1, #20]
 80143ce:	600f      	str	r7, [r1, #0]
 80143d0:	bf18      	it	ne
 80143d2:	2300      	movne	r3, #0
 80143d4:	eba6 0807 	sub.w	r8, r6, r7
 80143d8:	608b      	str	r3, [r1, #8]
 80143da:	f1b8 0f00 	cmp.w	r8, #0
 80143de:	dd9c      	ble.n	801431a <__sflush_r+0x1a>
 80143e0:	6a21      	ldr	r1, [r4, #32]
 80143e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80143e4:	4643      	mov	r3, r8
 80143e6:	463a      	mov	r2, r7
 80143e8:	4628      	mov	r0, r5
 80143ea:	47b0      	blx	r6
 80143ec:	2800      	cmp	r0, #0
 80143ee:	dc06      	bgt.n	80143fe <__sflush_r+0xfe>
 80143f0:	89a3      	ldrh	r3, [r4, #12]
 80143f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143f6:	81a3      	strh	r3, [r4, #12]
 80143f8:	f04f 30ff 	mov.w	r0, #4294967295
 80143fc:	e78e      	b.n	801431c <__sflush_r+0x1c>
 80143fe:	4407      	add	r7, r0
 8014400:	eba8 0800 	sub.w	r8, r8, r0
 8014404:	e7e9      	b.n	80143da <__sflush_r+0xda>
 8014406:	bf00      	nop
 8014408:	20400001 	.word	0x20400001

0801440c <_fflush_r>:
 801440c:	b538      	push	{r3, r4, r5, lr}
 801440e:	690b      	ldr	r3, [r1, #16]
 8014410:	4605      	mov	r5, r0
 8014412:	460c      	mov	r4, r1
 8014414:	b913      	cbnz	r3, 801441c <_fflush_r+0x10>
 8014416:	2500      	movs	r5, #0
 8014418:	4628      	mov	r0, r5
 801441a:	bd38      	pop	{r3, r4, r5, pc}
 801441c:	b118      	cbz	r0, 8014426 <_fflush_r+0x1a>
 801441e:	6983      	ldr	r3, [r0, #24]
 8014420:	b90b      	cbnz	r3, 8014426 <_fflush_r+0x1a>
 8014422:	f7fc fead 	bl	8011180 <__sinit>
 8014426:	4b14      	ldr	r3, [pc, #80]	; (8014478 <_fflush_r+0x6c>)
 8014428:	429c      	cmp	r4, r3
 801442a:	d11b      	bne.n	8014464 <_fflush_r+0x58>
 801442c:	686c      	ldr	r4, [r5, #4]
 801442e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d0ef      	beq.n	8014416 <_fflush_r+0xa>
 8014436:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014438:	07d0      	lsls	r0, r2, #31
 801443a:	d404      	bmi.n	8014446 <_fflush_r+0x3a>
 801443c:	0599      	lsls	r1, r3, #22
 801443e:	d402      	bmi.n	8014446 <_fflush_r+0x3a>
 8014440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014442:	f7fc ff60 	bl	8011306 <__retarget_lock_acquire_recursive>
 8014446:	4628      	mov	r0, r5
 8014448:	4621      	mov	r1, r4
 801444a:	f7ff ff59 	bl	8014300 <__sflush_r>
 801444e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014450:	07da      	lsls	r2, r3, #31
 8014452:	4605      	mov	r5, r0
 8014454:	d4e0      	bmi.n	8014418 <_fflush_r+0xc>
 8014456:	89a3      	ldrh	r3, [r4, #12]
 8014458:	059b      	lsls	r3, r3, #22
 801445a:	d4dd      	bmi.n	8014418 <_fflush_r+0xc>
 801445c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801445e:	f7fc ff53 	bl	8011308 <__retarget_lock_release_recursive>
 8014462:	e7d9      	b.n	8014418 <_fflush_r+0xc>
 8014464:	4b05      	ldr	r3, [pc, #20]	; (801447c <_fflush_r+0x70>)
 8014466:	429c      	cmp	r4, r3
 8014468:	d101      	bne.n	801446e <_fflush_r+0x62>
 801446a:	68ac      	ldr	r4, [r5, #8]
 801446c:	e7df      	b.n	801442e <_fflush_r+0x22>
 801446e:	4b04      	ldr	r3, [pc, #16]	; (8014480 <_fflush_r+0x74>)
 8014470:	429c      	cmp	r4, r3
 8014472:	bf08      	it	eq
 8014474:	68ec      	ldreq	r4, [r5, #12]
 8014476:	e7da      	b.n	801442e <_fflush_r+0x22>
 8014478:	080176bc 	.word	0x080176bc
 801447c:	080176dc 	.word	0x080176dc
 8014480:	0801769c 	.word	0x0801769c

08014484 <fiprintf>:
 8014484:	b40e      	push	{r1, r2, r3}
 8014486:	b503      	push	{r0, r1, lr}
 8014488:	4601      	mov	r1, r0
 801448a:	ab03      	add	r3, sp, #12
 801448c:	4805      	ldr	r0, [pc, #20]	; (80144a4 <fiprintf+0x20>)
 801448e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014492:	6800      	ldr	r0, [r0, #0]
 8014494:	9301      	str	r3, [sp, #4]
 8014496:	f001 fc57 	bl	8015d48 <_vfiprintf_r>
 801449a:	b002      	add	sp, #8
 801449c:	f85d eb04 	ldr.w	lr, [sp], #4
 80144a0:	b003      	add	sp, #12
 80144a2:	4770      	bx	lr
 80144a4:	200000d8 	.word	0x200000d8

080144a8 <rshift>:
 80144a8:	6903      	ldr	r3, [r0, #16]
 80144aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80144ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80144b6:	f100 0414 	add.w	r4, r0, #20
 80144ba:	dd45      	ble.n	8014548 <rshift+0xa0>
 80144bc:	f011 011f 	ands.w	r1, r1, #31
 80144c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80144c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80144c8:	d10c      	bne.n	80144e4 <rshift+0x3c>
 80144ca:	f100 0710 	add.w	r7, r0, #16
 80144ce:	4629      	mov	r1, r5
 80144d0:	42b1      	cmp	r1, r6
 80144d2:	d334      	bcc.n	801453e <rshift+0x96>
 80144d4:	1a9b      	subs	r3, r3, r2
 80144d6:	009b      	lsls	r3, r3, #2
 80144d8:	1eea      	subs	r2, r5, #3
 80144da:	4296      	cmp	r6, r2
 80144dc:	bf38      	it	cc
 80144de:	2300      	movcc	r3, #0
 80144e0:	4423      	add	r3, r4
 80144e2:	e015      	b.n	8014510 <rshift+0x68>
 80144e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80144e8:	f1c1 0820 	rsb	r8, r1, #32
 80144ec:	40cf      	lsrs	r7, r1
 80144ee:	f105 0e04 	add.w	lr, r5, #4
 80144f2:	46a1      	mov	r9, r4
 80144f4:	4576      	cmp	r6, lr
 80144f6:	46f4      	mov	ip, lr
 80144f8:	d815      	bhi.n	8014526 <rshift+0x7e>
 80144fa:	1a9b      	subs	r3, r3, r2
 80144fc:	009a      	lsls	r2, r3, #2
 80144fe:	3a04      	subs	r2, #4
 8014500:	3501      	adds	r5, #1
 8014502:	42ae      	cmp	r6, r5
 8014504:	bf38      	it	cc
 8014506:	2200      	movcc	r2, #0
 8014508:	18a3      	adds	r3, r4, r2
 801450a:	50a7      	str	r7, [r4, r2]
 801450c:	b107      	cbz	r7, 8014510 <rshift+0x68>
 801450e:	3304      	adds	r3, #4
 8014510:	1b1a      	subs	r2, r3, r4
 8014512:	42a3      	cmp	r3, r4
 8014514:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014518:	bf08      	it	eq
 801451a:	2300      	moveq	r3, #0
 801451c:	6102      	str	r2, [r0, #16]
 801451e:	bf08      	it	eq
 8014520:	6143      	streq	r3, [r0, #20]
 8014522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014526:	f8dc c000 	ldr.w	ip, [ip]
 801452a:	fa0c fc08 	lsl.w	ip, ip, r8
 801452e:	ea4c 0707 	orr.w	r7, ip, r7
 8014532:	f849 7b04 	str.w	r7, [r9], #4
 8014536:	f85e 7b04 	ldr.w	r7, [lr], #4
 801453a:	40cf      	lsrs	r7, r1
 801453c:	e7da      	b.n	80144f4 <rshift+0x4c>
 801453e:	f851 cb04 	ldr.w	ip, [r1], #4
 8014542:	f847 cf04 	str.w	ip, [r7, #4]!
 8014546:	e7c3      	b.n	80144d0 <rshift+0x28>
 8014548:	4623      	mov	r3, r4
 801454a:	e7e1      	b.n	8014510 <rshift+0x68>

0801454c <__hexdig_fun>:
 801454c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014550:	2b09      	cmp	r3, #9
 8014552:	d802      	bhi.n	801455a <__hexdig_fun+0xe>
 8014554:	3820      	subs	r0, #32
 8014556:	b2c0      	uxtb	r0, r0
 8014558:	4770      	bx	lr
 801455a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801455e:	2b05      	cmp	r3, #5
 8014560:	d801      	bhi.n	8014566 <__hexdig_fun+0x1a>
 8014562:	3847      	subs	r0, #71	; 0x47
 8014564:	e7f7      	b.n	8014556 <__hexdig_fun+0xa>
 8014566:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801456a:	2b05      	cmp	r3, #5
 801456c:	d801      	bhi.n	8014572 <__hexdig_fun+0x26>
 801456e:	3827      	subs	r0, #39	; 0x27
 8014570:	e7f1      	b.n	8014556 <__hexdig_fun+0xa>
 8014572:	2000      	movs	r0, #0
 8014574:	4770      	bx	lr
	...

08014578 <__gethex>:
 8014578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801457c:	ed2d 8b02 	vpush	{d8}
 8014580:	b089      	sub	sp, #36	; 0x24
 8014582:	ee08 0a10 	vmov	s16, r0
 8014586:	9304      	str	r3, [sp, #16]
 8014588:	4bbc      	ldr	r3, [pc, #752]	; (801487c <__gethex+0x304>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	9301      	str	r3, [sp, #4]
 801458e:	4618      	mov	r0, r3
 8014590:	468b      	mov	fp, r1
 8014592:	4690      	mov	r8, r2
 8014594:	f7eb fe2c 	bl	80001f0 <strlen>
 8014598:	9b01      	ldr	r3, [sp, #4]
 801459a:	f8db 2000 	ldr.w	r2, [fp]
 801459e:	4403      	add	r3, r0
 80145a0:	4682      	mov	sl, r0
 80145a2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80145a6:	9305      	str	r3, [sp, #20]
 80145a8:	1c93      	adds	r3, r2, #2
 80145aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80145ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80145b2:	32fe      	adds	r2, #254	; 0xfe
 80145b4:	18d1      	adds	r1, r2, r3
 80145b6:	461f      	mov	r7, r3
 80145b8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80145bc:	9100      	str	r1, [sp, #0]
 80145be:	2830      	cmp	r0, #48	; 0x30
 80145c0:	d0f8      	beq.n	80145b4 <__gethex+0x3c>
 80145c2:	f7ff ffc3 	bl	801454c <__hexdig_fun>
 80145c6:	4604      	mov	r4, r0
 80145c8:	2800      	cmp	r0, #0
 80145ca:	d13a      	bne.n	8014642 <__gethex+0xca>
 80145cc:	9901      	ldr	r1, [sp, #4]
 80145ce:	4652      	mov	r2, sl
 80145d0:	4638      	mov	r0, r7
 80145d2:	f7fd ffda 	bl	801258a <strncmp>
 80145d6:	4605      	mov	r5, r0
 80145d8:	2800      	cmp	r0, #0
 80145da:	d168      	bne.n	80146ae <__gethex+0x136>
 80145dc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80145e0:	eb07 060a 	add.w	r6, r7, sl
 80145e4:	f7ff ffb2 	bl	801454c <__hexdig_fun>
 80145e8:	2800      	cmp	r0, #0
 80145ea:	d062      	beq.n	80146b2 <__gethex+0x13a>
 80145ec:	4633      	mov	r3, r6
 80145ee:	7818      	ldrb	r0, [r3, #0]
 80145f0:	2830      	cmp	r0, #48	; 0x30
 80145f2:	461f      	mov	r7, r3
 80145f4:	f103 0301 	add.w	r3, r3, #1
 80145f8:	d0f9      	beq.n	80145ee <__gethex+0x76>
 80145fa:	f7ff ffa7 	bl	801454c <__hexdig_fun>
 80145fe:	2301      	movs	r3, #1
 8014600:	fab0 f480 	clz	r4, r0
 8014604:	0964      	lsrs	r4, r4, #5
 8014606:	4635      	mov	r5, r6
 8014608:	9300      	str	r3, [sp, #0]
 801460a:	463a      	mov	r2, r7
 801460c:	4616      	mov	r6, r2
 801460e:	3201      	adds	r2, #1
 8014610:	7830      	ldrb	r0, [r6, #0]
 8014612:	f7ff ff9b 	bl	801454c <__hexdig_fun>
 8014616:	2800      	cmp	r0, #0
 8014618:	d1f8      	bne.n	801460c <__gethex+0x94>
 801461a:	9901      	ldr	r1, [sp, #4]
 801461c:	4652      	mov	r2, sl
 801461e:	4630      	mov	r0, r6
 8014620:	f7fd ffb3 	bl	801258a <strncmp>
 8014624:	b980      	cbnz	r0, 8014648 <__gethex+0xd0>
 8014626:	b94d      	cbnz	r5, 801463c <__gethex+0xc4>
 8014628:	eb06 050a 	add.w	r5, r6, sl
 801462c:	462a      	mov	r2, r5
 801462e:	4616      	mov	r6, r2
 8014630:	3201      	adds	r2, #1
 8014632:	7830      	ldrb	r0, [r6, #0]
 8014634:	f7ff ff8a 	bl	801454c <__hexdig_fun>
 8014638:	2800      	cmp	r0, #0
 801463a:	d1f8      	bne.n	801462e <__gethex+0xb6>
 801463c:	1bad      	subs	r5, r5, r6
 801463e:	00ad      	lsls	r5, r5, #2
 8014640:	e004      	b.n	801464c <__gethex+0xd4>
 8014642:	2400      	movs	r4, #0
 8014644:	4625      	mov	r5, r4
 8014646:	e7e0      	b.n	801460a <__gethex+0x92>
 8014648:	2d00      	cmp	r5, #0
 801464a:	d1f7      	bne.n	801463c <__gethex+0xc4>
 801464c:	7833      	ldrb	r3, [r6, #0]
 801464e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014652:	2b50      	cmp	r3, #80	; 0x50
 8014654:	d13b      	bne.n	80146ce <__gethex+0x156>
 8014656:	7873      	ldrb	r3, [r6, #1]
 8014658:	2b2b      	cmp	r3, #43	; 0x2b
 801465a:	d02c      	beq.n	80146b6 <__gethex+0x13e>
 801465c:	2b2d      	cmp	r3, #45	; 0x2d
 801465e:	d02e      	beq.n	80146be <__gethex+0x146>
 8014660:	1c71      	adds	r1, r6, #1
 8014662:	f04f 0900 	mov.w	r9, #0
 8014666:	7808      	ldrb	r0, [r1, #0]
 8014668:	f7ff ff70 	bl	801454c <__hexdig_fun>
 801466c:	1e43      	subs	r3, r0, #1
 801466e:	b2db      	uxtb	r3, r3
 8014670:	2b18      	cmp	r3, #24
 8014672:	d82c      	bhi.n	80146ce <__gethex+0x156>
 8014674:	f1a0 0210 	sub.w	r2, r0, #16
 8014678:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801467c:	f7ff ff66 	bl	801454c <__hexdig_fun>
 8014680:	1e43      	subs	r3, r0, #1
 8014682:	b2db      	uxtb	r3, r3
 8014684:	2b18      	cmp	r3, #24
 8014686:	d91d      	bls.n	80146c4 <__gethex+0x14c>
 8014688:	f1b9 0f00 	cmp.w	r9, #0
 801468c:	d000      	beq.n	8014690 <__gethex+0x118>
 801468e:	4252      	negs	r2, r2
 8014690:	4415      	add	r5, r2
 8014692:	f8cb 1000 	str.w	r1, [fp]
 8014696:	b1e4      	cbz	r4, 80146d2 <__gethex+0x15a>
 8014698:	9b00      	ldr	r3, [sp, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	bf14      	ite	ne
 801469e:	2700      	movne	r7, #0
 80146a0:	2706      	moveq	r7, #6
 80146a2:	4638      	mov	r0, r7
 80146a4:	b009      	add	sp, #36	; 0x24
 80146a6:	ecbd 8b02 	vpop	{d8}
 80146aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146ae:	463e      	mov	r6, r7
 80146b0:	4625      	mov	r5, r4
 80146b2:	2401      	movs	r4, #1
 80146b4:	e7ca      	b.n	801464c <__gethex+0xd4>
 80146b6:	f04f 0900 	mov.w	r9, #0
 80146ba:	1cb1      	adds	r1, r6, #2
 80146bc:	e7d3      	b.n	8014666 <__gethex+0xee>
 80146be:	f04f 0901 	mov.w	r9, #1
 80146c2:	e7fa      	b.n	80146ba <__gethex+0x142>
 80146c4:	230a      	movs	r3, #10
 80146c6:	fb03 0202 	mla	r2, r3, r2, r0
 80146ca:	3a10      	subs	r2, #16
 80146cc:	e7d4      	b.n	8014678 <__gethex+0x100>
 80146ce:	4631      	mov	r1, r6
 80146d0:	e7df      	b.n	8014692 <__gethex+0x11a>
 80146d2:	1bf3      	subs	r3, r6, r7
 80146d4:	3b01      	subs	r3, #1
 80146d6:	4621      	mov	r1, r4
 80146d8:	2b07      	cmp	r3, #7
 80146da:	dc0b      	bgt.n	80146f4 <__gethex+0x17c>
 80146dc:	ee18 0a10 	vmov	r0, s16
 80146e0:	f000 faea 	bl	8014cb8 <_Balloc>
 80146e4:	4604      	mov	r4, r0
 80146e6:	b940      	cbnz	r0, 80146fa <__gethex+0x182>
 80146e8:	4b65      	ldr	r3, [pc, #404]	; (8014880 <__gethex+0x308>)
 80146ea:	4602      	mov	r2, r0
 80146ec:	21de      	movs	r1, #222	; 0xde
 80146ee:	4865      	ldr	r0, [pc, #404]	; (8014884 <__gethex+0x30c>)
 80146f0:	f7fe ff60 	bl	80135b4 <__assert_func>
 80146f4:	3101      	adds	r1, #1
 80146f6:	105b      	asrs	r3, r3, #1
 80146f8:	e7ee      	b.n	80146d8 <__gethex+0x160>
 80146fa:	f100 0914 	add.w	r9, r0, #20
 80146fe:	f04f 0b00 	mov.w	fp, #0
 8014702:	f1ca 0301 	rsb	r3, sl, #1
 8014706:	f8cd 9008 	str.w	r9, [sp, #8]
 801470a:	f8cd b000 	str.w	fp, [sp]
 801470e:	9306      	str	r3, [sp, #24]
 8014710:	42b7      	cmp	r7, r6
 8014712:	d340      	bcc.n	8014796 <__gethex+0x21e>
 8014714:	9802      	ldr	r0, [sp, #8]
 8014716:	9b00      	ldr	r3, [sp, #0]
 8014718:	f840 3b04 	str.w	r3, [r0], #4
 801471c:	eba0 0009 	sub.w	r0, r0, r9
 8014720:	1080      	asrs	r0, r0, #2
 8014722:	0146      	lsls	r6, r0, #5
 8014724:	6120      	str	r0, [r4, #16]
 8014726:	4618      	mov	r0, r3
 8014728:	f000 fbbc 	bl	8014ea4 <__hi0bits>
 801472c:	1a30      	subs	r0, r6, r0
 801472e:	f8d8 6000 	ldr.w	r6, [r8]
 8014732:	42b0      	cmp	r0, r6
 8014734:	dd63      	ble.n	80147fe <__gethex+0x286>
 8014736:	1b87      	subs	r7, r0, r6
 8014738:	4639      	mov	r1, r7
 801473a:	4620      	mov	r0, r4
 801473c:	f000 ff56 	bl	80155ec <__any_on>
 8014740:	4682      	mov	sl, r0
 8014742:	b1a8      	cbz	r0, 8014770 <__gethex+0x1f8>
 8014744:	1e7b      	subs	r3, r7, #1
 8014746:	1159      	asrs	r1, r3, #5
 8014748:	f003 021f 	and.w	r2, r3, #31
 801474c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014750:	f04f 0a01 	mov.w	sl, #1
 8014754:	fa0a f202 	lsl.w	r2, sl, r2
 8014758:	420a      	tst	r2, r1
 801475a:	d009      	beq.n	8014770 <__gethex+0x1f8>
 801475c:	4553      	cmp	r3, sl
 801475e:	dd05      	ble.n	801476c <__gethex+0x1f4>
 8014760:	1eb9      	subs	r1, r7, #2
 8014762:	4620      	mov	r0, r4
 8014764:	f000 ff42 	bl	80155ec <__any_on>
 8014768:	2800      	cmp	r0, #0
 801476a:	d145      	bne.n	80147f8 <__gethex+0x280>
 801476c:	f04f 0a02 	mov.w	sl, #2
 8014770:	4639      	mov	r1, r7
 8014772:	4620      	mov	r0, r4
 8014774:	f7ff fe98 	bl	80144a8 <rshift>
 8014778:	443d      	add	r5, r7
 801477a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801477e:	42ab      	cmp	r3, r5
 8014780:	da4c      	bge.n	801481c <__gethex+0x2a4>
 8014782:	ee18 0a10 	vmov	r0, s16
 8014786:	4621      	mov	r1, r4
 8014788:	f000 fad6 	bl	8014d38 <_Bfree>
 801478c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801478e:	2300      	movs	r3, #0
 8014790:	6013      	str	r3, [r2, #0]
 8014792:	27a3      	movs	r7, #163	; 0xa3
 8014794:	e785      	b.n	80146a2 <__gethex+0x12a>
 8014796:	1e73      	subs	r3, r6, #1
 8014798:	9a05      	ldr	r2, [sp, #20]
 801479a:	9303      	str	r3, [sp, #12]
 801479c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80147a0:	4293      	cmp	r3, r2
 80147a2:	d019      	beq.n	80147d8 <__gethex+0x260>
 80147a4:	f1bb 0f20 	cmp.w	fp, #32
 80147a8:	d107      	bne.n	80147ba <__gethex+0x242>
 80147aa:	9b02      	ldr	r3, [sp, #8]
 80147ac:	9a00      	ldr	r2, [sp, #0]
 80147ae:	f843 2b04 	str.w	r2, [r3], #4
 80147b2:	9302      	str	r3, [sp, #8]
 80147b4:	2300      	movs	r3, #0
 80147b6:	9300      	str	r3, [sp, #0]
 80147b8:	469b      	mov	fp, r3
 80147ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80147be:	f7ff fec5 	bl	801454c <__hexdig_fun>
 80147c2:	9b00      	ldr	r3, [sp, #0]
 80147c4:	f000 000f 	and.w	r0, r0, #15
 80147c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80147cc:	4303      	orrs	r3, r0
 80147ce:	9300      	str	r3, [sp, #0]
 80147d0:	f10b 0b04 	add.w	fp, fp, #4
 80147d4:	9b03      	ldr	r3, [sp, #12]
 80147d6:	e00d      	b.n	80147f4 <__gethex+0x27c>
 80147d8:	9b03      	ldr	r3, [sp, #12]
 80147da:	9a06      	ldr	r2, [sp, #24]
 80147dc:	4413      	add	r3, r2
 80147de:	42bb      	cmp	r3, r7
 80147e0:	d3e0      	bcc.n	80147a4 <__gethex+0x22c>
 80147e2:	4618      	mov	r0, r3
 80147e4:	9901      	ldr	r1, [sp, #4]
 80147e6:	9307      	str	r3, [sp, #28]
 80147e8:	4652      	mov	r2, sl
 80147ea:	f7fd fece 	bl	801258a <strncmp>
 80147ee:	9b07      	ldr	r3, [sp, #28]
 80147f0:	2800      	cmp	r0, #0
 80147f2:	d1d7      	bne.n	80147a4 <__gethex+0x22c>
 80147f4:	461e      	mov	r6, r3
 80147f6:	e78b      	b.n	8014710 <__gethex+0x198>
 80147f8:	f04f 0a03 	mov.w	sl, #3
 80147fc:	e7b8      	b.n	8014770 <__gethex+0x1f8>
 80147fe:	da0a      	bge.n	8014816 <__gethex+0x29e>
 8014800:	1a37      	subs	r7, r6, r0
 8014802:	4621      	mov	r1, r4
 8014804:	ee18 0a10 	vmov	r0, s16
 8014808:	463a      	mov	r2, r7
 801480a:	f000 fcb1 	bl	8015170 <__lshift>
 801480e:	1bed      	subs	r5, r5, r7
 8014810:	4604      	mov	r4, r0
 8014812:	f100 0914 	add.w	r9, r0, #20
 8014816:	f04f 0a00 	mov.w	sl, #0
 801481a:	e7ae      	b.n	801477a <__gethex+0x202>
 801481c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014820:	42a8      	cmp	r0, r5
 8014822:	dd72      	ble.n	801490a <__gethex+0x392>
 8014824:	1b45      	subs	r5, r0, r5
 8014826:	42ae      	cmp	r6, r5
 8014828:	dc36      	bgt.n	8014898 <__gethex+0x320>
 801482a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801482e:	2b02      	cmp	r3, #2
 8014830:	d02a      	beq.n	8014888 <__gethex+0x310>
 8014832:	2b03      	cmp	r3, #3
 8014834:	d02c      	beq.n	8014890 <__gethex+0x318>
 8014836:	2b01      	cmp	r3, #1
 8014838:	d115      	bne.n	8014866 <__gethex+0x2ee>
 801483a:	42ae      	cmp	r6, r5
 801483c:	d113      	bne.n	8014866 <__gethex+0x2ee>
 801483e:	2e01      	cmp	r6, #1
 8014840:	d10b      	bne.n	801485a <__gethex+0x2e2>
 8014842:	9a04      	ldr	r2, [sp, #16]
 8014844:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014848:	6013      	str	r3, [r2, #0]
 801484a:	2301      	movs	r3, #1
 801484c:	6123      	str	r3, [r4, #16]
 801484e:	f8c9 3000 	str.w	r3, [r9]
 8014852:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014854:	2762      	movs	r7, #98	; 0x62
 8014856:	601c      	str	r4, [r3, #0]
 8014858:	e723      	b.n	80146a2 <__gethex+0x12a>
 801485a:	1e71      	subs	r1, r6, #1
 801485c:	4620      	mov	r0, r4
 801485e:	f000 fec5 	bl	80155ec <__any_on>
 8014862:	2800      	cmp	r0, #0
 8014864:	d1ed      	bne.n	8014842 <__gethex+0x2ca>
 8014866:	ee18 0a10 	vmov	r0, s16
 801486a:	4621      	mov	r1, r4
 801486c:	f000 fa64 	bl	8014d38 <_Bfree>
 8014870:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014872:	2300      	movs	r3, #0
 8014874:	6013      	str	r3, [r2, #0]
 8014876:	2750      	movs	r7, #80	; 0x50
 8014878:	e713      	b.n	80146a2 <__gethex+0x12a>
 801487a:	bf00      	nop
 801487c:	080178c4 	.word	0x080178c4
 8014880:	08017847 	.word	0x08017847
 8014884:	08017858 	.word	0x08017858
 8014888:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801488a:	2b00      	cmp	r3, #0
 801488c:	d1eb      	bne.n	8014866 <__gethex+0x2ee>
 801488e:	e7d8      	b.n	8014842 <__gethex+0x2ca>
 8014890:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014892:	2b00      	cmp	r3, #0
 8014894:	d1d5      	bne.n	8014842 <__gethex+0x2ca>
 8014896:	e7e6      	b.n	8014866 <__gethex+0x2ee>
 8014898:	1e6f      	subs	r7, r5, #1
 801489a:	f1ba 0f00 	cmp.w	sl, #0
 801489e:	d131      	bne.n	8014904 <__gethex+0x38c>
 80148a0:	b127      	cbz	r7, 80148ac <__gethex+0x334>
 80148a2:	4639      	mov	r1, r7
 80148a4:	4620      	mov	r0, r4
 80148a6:	f000 fea1 	bl	80155ec <__any_on>
 80148aa:	4682      	mov	sl, r0
 80148ac:	117b      	asrs	r3, r7, #5
 80148ae:	2101      	movs	r1, #1
 80148b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80148b4:	f007 071f 	and.w	r7, r7, #31
 80148b8:	fa01 f707 	lsl.w	r7, r1, r7
 80148bc:	421f      	tst	r7, r3
 80148be:	4629      	mov	r1, r5
 80148c0:	4620      	mov	r0, r4
 80148c2:	bf18      	it	ne
 80148c4:	f04a 0a02 	orrne.w	sl, sl, #2
 80148c8:	1b76      	subs	r6, r6, r5
 80148ca:	f7ff fded 	bl	80144a8 <rshift>
 80148ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80148d2:	2702      	movs	r7, #2
 80148d4:	f1ba 0f00 	cmp.w	sl, #0
 80148d8:	d048      	beq.n	801496c <__gethex+0x3f4>
 80148da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80148de:	2b02      	cmp	r3, #2
 80148e0:	d015      	beq.n	801490e <__gethex+0x396>
 80148e2:	2b03      	cmp	r3, #3
 80148e4:	d017      	beq.n	8014916 <__gethex+0x39e>
 80148e6:	2b01      	cmp	r3, #1
 80148e8:	d109      	bne.n	80148fe <__gethex+0x386>
 80148ea:	f01a 0f02 	tst.w	sl, #2
 80148ee:	d006      	beq.n	80148fe <__gethex+0x386>
 80148f0:	f8d9 0000 	ldr.w	r0, [r9]
 80148f4:	ea4a 0a00 	orr.w	sl, sl, r0
 80148f8:	f01a 0f01 	tst.w	sl, #1
 80148fc:	d10e      	bne.n	801491c <__gethex+0x3a4>
 80148fe:	f047 0710 	orr.w	r7, r7, #16
 8014902:	e033      	b.n	801496c <__gethex+0x3f4>
 8014904:	f04f 0a01 	mov.w	sl, #1
 8014908:	e7d0      	b.n	80148ac <__gethex+0x334>
 801490a:	2701      	movs	r7, #1
 801490c:	e7e2      	b.n	80148d4 <__gethex+0x35c>
 801490e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014910:	f1c3 0301 	rsb	r3, r3, #1
 8014914:	9315      	str	r3, [sp, #84]	; 0x54
 8014916:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014918:	2b00      	cmp	r3, #0
 801491a:	d0f0      	beq.n	80148fe <__gethex+0x386>
 801491c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014920:	f104 0314 	add.w	r3, r4, #20
 8014924:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014928:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801492c:	f04f 0c00 	mov.w	ip, #0
 8014930:	4618      	mov	r0, r3
 8014932:	f853 2b04 	ldr.w	r2, [r3], #4
 8014936:	f1b2 3fff 	cmp.w	r2, #4294967295
 801493a:	d01c      	beq.n	8014976 <__gethex+0x3fe>
 801493c:	3201      	adds	r2, #1
 801493e:	6002      	str	r2, [r0, #0]
 8014940:	2f02      	cmp	r7, #2
 8014942:	f104 0314 	add.w	r3, r4, #20
 8014946:	d13f      	bne.n	80149c8 <__gethex+0x450>
 8014948:	f8d8 2000 	ldr.w	r2, [r8]
 801494c:	3a01      	subs	r2, #1
 801494e:	42b2      	cmp	r2, r6
 8014950:	d10a      	bne.n	8014968 <__gethex+0x3f0>
 8014952:	1171      	asrs	r1, r6, #5
 8014954:	2201      	movs	r2, #1
 8014956:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801495a:	f006 061f 	and.w	r6, r6, #31
 801495e:	fa02 f606 	lsl.w	r6, r2, r6
 8014962:	421e      	tst	r6, r3
 8014964:	bf18      	it	ne
 8014966:	4617      	movne	r7, r2
 8014968:	f047 0720 	orr.w	r7, r7, #32
 801496c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801496e:	601c      	str	r4, [r3, #0]
 8014970:	9b04      	ldr	r3, [sp, #16]
 8014972:	601d      	str	r5, [r3, #0]
 8014974:	e695      	b.n	80146a2 <__gethex+0x12a>
 8014976:	4299      	cmp	r1, r3
 8014978:	f843 cc04 	str.w	ip, [r3, #-4]
 801497c:	d8d8      	bhi.n	8014930 <__gethex+0x3b8>
 801497e:	68a3      	ldr	r3, [r4, #8]
 8014980:	459b      	cmp	fp, r3
 8014982:	db19      	blt.n	80149b8 <__gethex+0x440>
 8014984:	6861      	ldr	r1, [r4, #4]
 8014986:	ee18 0a10 	vmov	r0, s16
 801498a:	3101      	adds	r1, #1
 801498c:	f000 f994 	bl	8014cb8 <_Balloc>
 8014990:	4681      	mov	r9, r0
 8014992:	b918      	cbnz	r0, 801499c <__gethex+0x424>
 8014994:	4b1a      	ldr	r3, [pc, #104]	; (8014a00 <__gethex+0x488>)
 8014996:	4602      	mov	r2, r0
 8014998:	2184      	movs	r1, #132	; 0x84
 801499a:	e6a8      	b.n	80146ee <__gethex+0x176>
 801499c:	6922      	ldr	r2, [r4, #16]
 801499e:	3202      	adds	r2, #2
 80149a0:	f104 010c 	add.w	r1, r4, #12
 80149a4:	0092      	lsls	r2, r2, #2
 80149a6:	300c      	adds	r0, #12
 80149a8:	f7fc fcb8 	bl	801131c <memcpy>
 80149ac:	4621      	mov	r1, r4
 80149ae:	ee18 0a10 	vmov	r0, s16
 80149b2:	f000 f9c1 	bl	8014d38 <_Bfree>
 80149b6:	464c      	mov	r4, r9
 80149b8:	6923      	ldr	r3, [r4, #16]
 80149ba:	1c5a      	adds	r2, r3, #1
 80149bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80149c0:	6122      	str	r2, [r4, #16]
 80149c2:	2201      	movs	r2, #1
 80149c4:	615a      	str	r2, [r3, #20]
 80149c6:	e7bb      	b.n	8014940 <__gethex+0x3c8>
 80149c8:	6922      	ldr	r2, [r4, #16]
 80149ca:	455a      	cmp	r2, fp
 80149cc:	dd0b      	ble.n	80149e6 <__gethex+0x46e>
 80149ce:	2101      	movs	r1, #1
 80149d0:	4620      	mov	r0, r4
 80149d2:	f7ff fd69 	bl	80144a8 <rshift>
 80149d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80149da:	3501      	adds	r5, #1
 80149dc:	42ab      	cmp	r3, r5
 80149de:	f6ff aed0 	blt.w	8014782 <__gethex+0x20a>
 80149e2:	2701      	movs	r7, #1
 80149e4:	e7c0      	b.n	8014968 <__gethex+0x3f0>
 80149e6:	f016 061f 	ands.w	r6, r6, #31
 80149ea:	d0fa      	beq.n	80149e2 <__gethex+0x46a>
 80149ec:	449a      	add	sl, r3
 80149ee:	f1c6 0620 	rsb	r6, r6, #32
 80149f2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80149f6:	f000 fa55 	bl	8014ea4 <__hi0bits>
 80149fa:	42b0      	cmp	r0, r6
 80149fc:	dbe7      	blt.n	80149ce <__gethex+0x456>
 80149fe:	e7f0      	b.n	80149e2 <__gethex+0x46a>
 8014a00:	08017847 	.word	0x08017847

08014a04 <L_shift>:
 8014a04:	f1c2 0208 	rsb	r2, r2, #8
 8014a08:	0092      	lsls	r2, r2, #2
 8014a0a:	b570      	push	{r4, r5, r6, lr}
 8014a0c:	f1c2 0620 	rsb	r6, r2, #32
 8014a10:	6843      	ldr	r3, [r0, #4]
 8014a12:	6804      	ldr	r4, [r0, #0]
 8014a14:	fa03 f506 	lsl.w	r5, r3, r6
 8014a18:	432c      	orrs	r4, r5
 8014a1a:	40d3      	lsrs	r3, r2
 8014a1c:	6004      	str	r4, [r0, #0]
 8014a1e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014a22:	4288      	cmp	r0, r1
 8014a24:	d3f4      	bcc.n	8014a10 <L_shift+0xc>
 8014a26:	bd70      	pop	{r4, r5, r6, pc}

08014a28 <__match>:
 8014a28:	b530      	push	{r4, r5, lr}
 8014a2a:	6803      	ldr	r3, [r0, #0]
 8014a2c:	3301      	adds	r3, #1
 8014a2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a32:	b914      	cbnz	r4, 8014a3a <__match+0x12>
 8014a34:	6003      	str	r3, [r0, #0]
 8014a36:	2001      	movs	r0, #1
 8014a38:	bd30      	pop	{r4, r5, pc}
 8014a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a3e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014a42:	2d19      	cmp	r5, #25
 8014a44:	bf98      	it	ls
 8014a46:	3220      	addls	r2, #32
 8014a48:	42a2      	cmp	r2, r4
 8014a4a:	d0f0      	beq.n	8014a2e <__match+0x6>
 8014a4c:	2000      	movs	r0, #0
 8014a4e:	e7f3      	b.n	8014a38 <__match+0x10>

08014a50 <__hexnan>:
 8014a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a54:	680b      	ldr	r3, [r1, #0]
 8014a56:	6801      	ldr	r1, [r0, #0]
 8014a58:	115e      	asrs	r6, r3, #5
 8014a5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014a5e:	f013 031f 	ands.w	r3, r3, #31
 8014a62:	b087      	sub	sp, #28
 8014a64:	bf18      	it	ne
 8014a66:	3604      	addne	r6, #4
 8014a68:	2500      	movs	r5, #0
 8014a6a:	1f37      	subs	r7, r6, #4
 8014a6c:	4682      	mov	sl, r0
 8014a6e:	4690      	mov	r8, r2
 8014a70:	9301      	str	r3, [sp, #4]
 8014a72:	f846 5c04 	str.w	r5, [r6, #-4]
 8014a76:	46b9      	mov	r9, r7
 8014a78:	463c      	mov	r4, r7
 8014a7a:	9502      	str	r5, [sp, #8]
 8014a7c:	46ab      	mov	fp, r5
 8014a7e:	784a      	ldrb	r2, [r1, #1]
 8014a80:	1c4b      	adds	r3, r1, #1
 8014a82:	9303      	str	r3, [sp, #12]
 8014a84:	b342      	cbz	r2, 8014ad8 <__hexnan+0x88>
 8014a86:	4610      	mov	r0, r2
 8014a88:	9105      	str	r1, [sp, #20]
 8014a8a:	9204      	str	r2, [sp, #16]
 8014a8c:	f7ff fd5e 	bl	801454c <__hexdig_fun>
 8014a90:	2800      	cmp	r0, #0
 8014a92:	d14f      	bne.n	8014b34 <__hexnan+0xe4>
 8014a94:	9a04      	ldr	r2, [sp, #16]
 8014a96:	9905      	ldr	r1, [sp, #20]
 8014a98:	2a20      	cmp	r2, #32
 8014a9a:	d818      	bhi.n	8014ace <__hexnan+0x7e>
 8014a9c:	9b02      	ldr	r3, [sp, #8]
 8014a9e:	459b      	cmp	fp, r3
 8014aa0:	dd13      	ble.n	8014aca <__hexnan+0x7a>
 8014aa2:	454c      	cmp	r4, r9
 8014aa4:	d206      	bcs.n	8014ab4 <__hexnan+0x64>
 8014aa6:	2d07      	cmp	r5, #7
 8014aa8:	dc04      	bgt.n	8014ab4 <__hexnan+0x64>
 8014aaa:	462a      	mov	r2, r5
 8014aac:	4649      	mov	r1, r9
 8014aae:	4620      	mov	r0, r4
 8014ab0:	f7ff ffa8 	bl	8014a04 <L_shift>
 8014ab4:	4544      	cmp	r4, r8
 8014ab6:	d950      	bls.n	8014b5a <__hexnan+0x10a>
 8014ab8:	2300      	movs	r3, #0
 8014aba:	f1a4 0904 	sub.w	r9, r4, #4
 8014abe:	f844 3c04 	str.w	r3, [r4, #-4]
 8014ac2:	f8cd b008 	str.w	fp, [sp, #8]
 8014ac6:	464c      	mov	r4, r9
 8014ac8:	461d      	mov	r5, r3
 8014aca:	9903      	ldr	r1, [sp, #12]
 8014acc:	e7d7      	b.n	8014a7e <__hexnan+0x2e>
 8014ace:	2a29      	cmp	r2, #41	; 0x29
 8014ad0:	d156      	bne.n	8014b80 <__hexnan+0x130>
 8014ad2:	3102      	adds	r1, #2
 8014ad4:	f8ca 1000 	str.w	r1, [sl]
 8014ad8:	f1bb 0f00 	cmp.w	fp, #0
 8014adc:	d050      	beq.n	8014b80 <__hexnan+0x130>
 8014ade:	454c      	cmp	r4, r9
 8014ae0:	d206      	bcs.n	8014af0 <__hexnan+0xa0>
 8014ae2:	2d07      	cmp	r5, #7
 8014ae4:	dc04      	bgt.n	8014af0 <__hexnan+0xa0>
 8014ae6:	462a      	mov	r2, r5
 8014ae8:	4649      	mov	r1, r9
 8014aea:	4620      	mov	r0, r4
 8014aec:	f7ff ff8a 	bl	8014a04 <L_shift>
 8014af0:	4544      	cmp	r4, r8
 8014af2:	d934      	bls.n	8014b5e <__hexnan+0x10e>
 8014af4:	f1a8 0204 	sub.w	r2, r8, #4
 8014af8:	4623      	mov	r3, r4
 8014afa:	f853 1b04 	ldr.w	r1, [r3], #4
 8014afe:	f842 1f04 	str.w	r1, [r2, #4]!
 8014b02:	429f      	cmp	r7, r3
 8014b04:	d2f9      	bcs.n	8014afa <__hexnan+0xaa>
 8014b06:	1b3b      	subs	r3, r7, r4
 8014b08:	f023 0303 	bic.w	r3, r3, #3
 8014b0c:	3304      	adds	r3, #4
 8014b0e:	3401      	adds	r4, #1
 8014b10:	3e03      	subs	r6, #3
 8014b12:	42b4      	cmp	r4, r6
 8014b14:	bf88      	it	hi
 8014b16:	2304      	movhi	r3, #4
 8014b18:	4443      	add	r3, r8
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	f843 2b04 	str.w	r2, [r3], #4
 8014b20:	429f      	cmp	r7, r3
 8014b22:	d2fb      	bcs.n	8014b1c <__hexnan+0xcc>
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	b91b      	cbnz	r3, 8014b30 <__hexnan+0xe0>
 8014b28:	4547      	cmp	r7, r8
 8014b2a:	d127      	bne.n	8014b7c <__hexnan+0x12c>
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	603b      	str	r3, [r7, #0]
 8014b30:	2005      	movs	r0, #5
 8014b32:	e026      	b.n	8014b82 <__hexnan+0x132>
 8014b34:	3501      	adds	r5, #1
 8014b36:	2d08      	cmp	r5, #8
 8014b38:	f10b 0b01 	add.w	fp, fp, #1
 8014b3c:	dd06      	ble.n	8014b4c <__hexnan+0xfc>
 8014b3e:	4544      	cmp	r4, r8
 8014b40:	d9c3      	bls.n	8014aca <__hexnan+0x7a>
 8014b42:	2300      	movs	r3, #0
 8014b44:	f844 3c04 	str.w	r3, [r4, #-4]
 8014b48:	2501      	movs	r5, #1
 8014b4a:	3c04      	subs	r4, #4
 8014b4c:	6822      	ldr	r2, [r4, #0]
 8014b4e:	f000 000f 	and.w	r0, r0, #15
 8014b52:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8014b56:	6022      	str	r2, [r4, #0]
 8014b58:	e7b7      	b.n	8014aca <__hexnan+0x7a>
 8014b5a:	2508      	movs	r5, #8
 8014b5c:	e7b5      	b.n	8014aca <__hexnan+0x7a>
 8014b5e:	9b01      	ldr	r3, [sp, #4]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d0df      	beq.n	8014b24 <__hexnan+0xd4>
 8014b64:	f04f 32ff 	mov.w	r2, #4294967295
 8014b68:	f1c3 0320 	rsb	r3, r3, #32
 8014b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8014b70:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014b74:	401a      	ands	r2, r3
 8014b76:	f846 2c04 	str.w	r2, [r6, #-4]
 8014b7a:	e7d3      	b.n	8014b24 <__hexnan+0xd4>
 8014b7c:	3f04      	subs	r7, #4
 8014b7e:	e7d1      	b.n	8014b24 <__hexnan+0xd4>
 8014b80:	2004      	movs	r0, #4
 8014b82:	b007      	add	sp, #28
 8014b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b88 <_localeconv_r>:
 8014b88:	4800      	ldr	r0, [pc, #0]	; (8014b8c <_localeconv_r+0x4>)
 8014b8a:	4770      	bx	lr
 8014b8c:	20000230 	.word	0x20000230

08014b90 <_lseek_r>:
 8014b90:	b538      	push	{r3, r4, r5, lr}
 8014b92:	4d07      	ldr	r5, [pc, #28]	; (8014bb0 <_lseek_r+0x20>)
 8014b94:	4604      	mov	r4, r0
 8014b96:	4608      	mov	r0, r1
 8014b98:	4611      	mov	r1, r2
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	602a      	str	r2, [r5, #0]
 8014b9e:	461a      	mov	r2, r3
 8014ba0:	f001 fc34 	bl	801640c <_lseek>
 8014ba4:	1c43      	adds	r3, r0, #1
 8014ba6:	d102      	bne.n	8014bae <_lseek_r+0x1e>
 8014ba8:	682b      	ldr	r3, [r5, #0]
 8014baa:	b103      	cbz	r3, 8014bae <_lseek_r+0x1e>
 8014bac:	6023      	str	r3, [r4, #0]
 8014bae:	bd38      	pop	{r3, r4, r5, pc}
 8014bb0:	20006ab8 	.word	0x20006ab8

08014bb4 <__swhatbuf_r>:
 8014bb4:	b570      	push	{r4, r5, r6, lr}
 8014bb6:	460e      	mov	r6, r1
 8014bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bbc:	2900      	cmp	r1, #0
 8014bbe:	b096      	sub	sp, #88	; 0x58
 8014bc0:	4614      	mov	r4, r2
 8014bc2:	461d      	mov	r5, r3
 8014bc4:	da07      	bge.n	8014bd6 <__swhatbuf_r+0x22>
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	602b      	str	r3, [r5, #0]
 8014bca:	89b3      	ldrh	r3, [r6, #12]
 8014bcc:	061a      	lsls	r2, r3, #24
 8014bce:	d410      	bmi.n	8014bf2 <__swhatbuf_r+0x3e>
 8014bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014bd4:	e00e      	b.n	8014bf4 <__swhatbuf_r+0x40>
 8014bd6:	466a      	mov	r2, sp
 8014bd8:	f001 fbc6 	bl	8016368 <_fstat_r>
 8014bdc:	2800      	cmp	r0, #0
 8014bde:	dbf2      	blt.n	8014bc6 <__swhatbuf_r+0x12>
 8014be0:	9a01      	ldr	r2, [sp, #4]
 8014be2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014be6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014bea:	425a      	negs	r2, r3
 8014bec:	415a      	adcs	r2, r3
 8014bee:	602a      	str	r2, [r5, #0]
 8014bf0:	e7ee      	b.n	8014bd0 <__swhatbuf_r+0x1c>
 8014bf2:	2340      	movs	r3, #64	; 0x40
 8014bf4:	2000      	movs	r0, #0
 8014bf6:	6023      	str	r3, [r4, #0]
 8014bf8:	b016      	add	sp, #88	; 0x58
 8014bfa:	bd70      	pop	{r4, r5, r6, pc}

08014bfc <__smakebuf_r>:
 8014bfc:	898b      	ldrh	r3, [r1, #12]
 8014bfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014c00:	079d      	lsls	r5, r3, #30
 8014c02:	4606      	mov	r6, r0
 8014c04:	460c      	mov	r4, r1
 8014c06:	d507      	bpl.n	8014c18 <__smakebuf_r+0x1c>
 8014c08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014c0c:	6023      	str	r3, [r4, #0]
 8014c0e:	6123      	str	r3, [r4, #16]
 8014c10:	2301      	movs	r3, #1
 8014c12:	6163      	str	r3, [r4, #20]
 8014c14:	b002      	add	sp, #8
 8014c16:	bd70      	pop	{r4, r5, r6, pc}
 8014c18:	ab01      	add	r3, sp, #4
 8014c1a:	466a      	mov	r2, sp
 8014c1c:	f7ff ffca 	bl	8014bb4 <__swhatbuf_r>
 8014c20:	9900      	ldr	r1, [sp, #0]
 8014c22:	4605      	mov	r5, r0
 8014c24:	4630      	mov	r0, r6
 8014c26:	f7fc fbf9 	bl	801141c <_malloc_r>
 8014c2a:	b948      	cbnz	r0, 8014c40 <__smakebuf_r+0x44>
 8014c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c30:	059a      	lsls	r2, r3, #22
 8014c32:	d4ef      	bmi.n	8014c14 <__smakebuf_r+0x18>
 8014c34:	f023 0303 	bic.w	r3, r3, #3
 8014c38:	f043 0302 	orr.w	r3, r3, #2
 8014c3c:	81a3      	strh	r3, [r4, #12]
 8014c3e:	e7e3      	b.n	8014c08 <__smakebuf_r+0xc>
 8014c40:	4b0d      	ldr	r3, [pc, #52]	; (8014c78 <__smakebuf_r+0x7c>)
 8014c42:	62b3      	str	r3, [r6, #40]	; 0x28
 8014c44:	89a3      	ldrh	r3, [r4, #12]
 8014c46:	6020      	str	r0, [r4, #0]
 8014c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c4c:	81a3      	strh	r3, [r4, #12]
 8014c4e:	9b00      	ldr	r3, [sp, #0]
 8014c50:	6163      	str	r3, [r4, #20]
 8014c52:	9b01      	ldr	r3, [sp, #4]
 8014c54:	6120      	str	r0, [r4, #16]
 8014c56:	b15b      	cbz	r3, 8014c70 <__smakebuf_r+0x74>
 8014c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c5c:	4630      	mov	r0, r6
 8014c5e:	f001 fb95 	bl	801638c <_isatty_r>
 8014c62:	b128      	cbz	r0, 8014c70 <__smakebuf_r+0x74>
 8014c64:	89a3      	ldrh	r3, [r4, #12]
 8014c66:	f023 0303 	bic.w	r3, r3, #3
 8014c6a:	f043 0301 	orr.w	r3, r3, #1
 8014c6e:	81a3      	strh	r3, [r4, #12]
 8014c70:	89a0      	ldrh	r0, [r4, #12]
 8014c72:	4305      	orrs	r5, r0
 8014c74:	81a5      	strh	r5, [r4, #12]
 8014c76:	e7cd      	b.n	8014c14 <__smakebuf_r+0x18>
 8014c78:	08011119 	.word	0x08011119

08014c7c <__ascii_mbtowc>:
 8014c7c:	b082      	sub	sp, #8
 8014c7e:	b901      	cbnz	r1, 8014c82 <__ascii_mbtowc+0x6>
 8014c80:	a901      	add	r1, sp, #4
 8014c82:	b142      	cbz	r2, 8014c96 <__ascii_mbtowc+0x1a>
 8014c84:	b14b      	cbz	r3, 8014c9a <__ascii_mbtowc+0x1e>
 8014c86:	7813      	ldrb	r3, [r2, #0]
 8014c88:	600b      	str	r3, [r1, #0]
 8014c8a:	7812      	ldrb	r2, [r2, #0]
 8014c8c:	1e10      	subs	r0, r2, #0
 8014c8e:	bf18      	it	ne
 8014c90:	2001      	movne	r0, #1
 8014c92:	b002      	add	sp, #8
 8014c94:	4770      	bx	lr
 8014c96:	4610      	mov	r0, r2
 8014c98:	e7fb      	b.n	8014c92 <__ascii_mbtowc+0x16>
 8014c9a:	f06f 0001 	mvn.w	r0, #1
 8014c9e:	e7f8      	b.n	8014c92 <__ascii_mbtowc+0x16>

08014ca0 <__malloc_lock>:
 8014ca0:	4801      	ldr	r0, [pc, #4]	; (8014ca8 <__malloc_lock+0x8>)
 8014ca2:	f7fc bb30 	b.w	8011306 <__retarget_lock_acquire_recursive>
 8014ca6:	bf00      	nop
 8014ca8:	20006ab0 	.word	0x20006ab0

08014cac <__malloc_unlock>:
 8014cac:	4801      	ldr	r0, [pc, #4]	; (8014cb4 <__malloc_unlock+0x8>)
 8014cae:	f7fc bb2b 	b.w	8011308 <__retarget_lock_release_recursive>
 8014cb2:	bf00      	nop
 8014cb4:	20006ab0 	.word	0x20006ab0

08014cb8 <_Balloc>:
 8014cb8:	b570      	push	{r4, r5, r6, lr}
 8014cba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014cbc:	4604      	mov	r4, r0
 8014cbe:	460d      	mov	r5, r1
 8014cc0:	b976      	cbnz	r6, 8014ce0 <_Balloc+0x28>
 8014cc2:	2010      	movs	r0, #16
 8014cc4:	f7fc fb22 	bl	801130c <malloc>
 8014cc8:	4602      	mov	r2, r0
 8014cca:	6260      	str	r0, [r4, #36]	; 0x24
 8014ccc:	b920      	cbnz	r0, 8014cd8 <_Balloc+0x20>
 8014cce:	4b18      	ldr	r3, [pc, #96]	; (8014d30 <_Balloc+0x78>)
 8014cd0:	4818      	ldr	r0, [pc, #96]	; (8014d34 <_Balloc+0x7c>)
 8014cd2:	2166      	movs	r1, #102	; 0x66
 8014cd4:	f7fe fc6e 	bl	80135b4 <__assert_func>
 8014cd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014cdc:	6006      	str	r6, [r0, #0]
 8014cde:	60c6      	str	r6, [r0, #12]
 8014ce0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014ce2:	68f3      	ldr	r3, [r6, #12]
 8014ce4:	b183      	cbz	r3, 8014d08 <_Balloc+0x50>
 8014ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ce8:	68db      	ldr	r3, [r3, #12]
 8014cea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014cee:	b9b8      	cbnz	r0, 8014d20 <_Balloc+0x68>
 8014cf0:	2101      	movs	r1, #1
 8014cf2:	fa01 f605 	lsl.w	r6, r1, r5
 8014cf6:	1d72      	adds	r2, r6, #5
 8014cf8:	0092      	lsls	r2, r2, #2
 8014cfa:	4620      	mov	r0, r4
 8014cfc:	f000 fc97 	bl	801562e <_calloc_r>
 8014d00:	b160      	cbz	r0, 8014d1c <_Balloc+0x64>
 8014d02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014d06:	e00e      	b.n	8014d26 <_Balloc+0x6e>
 8014d08:	2221      	movs	r2, #33	; 0x21
 8014d0a:	2104      	movs	r1, #4
 8014d0c:	4620      	mov	r0, r4
 8014d0e:	f000 fc8e 	bl	801562e <_calloc_r>
 8014d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d14:	60f0      	str	r0, [r6, #12]
 8014d16:	68db      	ldr	r3, [r3, #12]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d1e4      	bne.n	8014ce6 <_Balloc+0x2e>
 8014d1c:	2000      	movs	r0, #0
 8014d1e:	bd70      	pop	{r4, r5, r6, pc}
 8014d20:	6802      	ldr	r2, [r0, #0]
 8014d22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014d26:	2300      	movs	r3, #0
 8014d28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014d2c:	e7f7      	b.n	8014d1e <_Balloc+0x66>
 8014d2e:	bf00      	nop
 8014d30:	080177d1 	.word	0x080177d1
 8014d34:	080178d8 	.word	0x080178d8

08014d38 <_Bfree>:
 8014d38:	b570      	push	{r4, r5, r6, lr}
 8014d3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014d3c:	4605      	mov	r5, r0
 8014d3e:	460c      	mov	r4, r1
 8014d40:	b976      	cbnz	r6, 8014d60 <_Bfree+0x28>
 8014d42:	2010      	movs	r0, #16
 8014d44:	f7fc fae2 	bl	801130c <malloc>
 8014d48:	4602      	mov	r2, r0
 8014d4a:	6268      	str	r0, [r5, #36]	; 0x24
 8014d4c:	b920      	cbnz	r0, 8014d58 <_Bfree+0x20>
 8014d4e:	4b09      	ldr	r3, [pc, #36]	; (8014d74 <_Bfree+0x3c>)
 8014d50:	4809      	ldr	r0, [pc, #36]	; (8014d78 <_Bfree+0x40>)
 8014d52:	218a      	movs	r1, #138	; 0x8a
 8014d54:	f7fe fc2e 	bl	80135b4 <__assert_func>
 8014d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014d5c:	6006      	str	r6, [r0, #0]
 8014d5e:	60c6      	str	r6, [r0, #12]
 8014d60:	b13c      	cbz	r4, 8014d72 <_Bfree+0x3a>
 8014d62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014d64:	6862      	ldr	r2, [r4, #4]
 8014d66:	68db      	ldr	r3, [r3, #12]
 8014d68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014d6c:	6021      	str	r1, [r4, #0]
 8014d6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014d72:	bd70      	pop	{r4, r5, r6, pc}
 8014d74:	080177d1 	.word	0x080177d1
 8014d78:	080178d8 	.word	0x080178d8

08014d7c <__multadd>:
 8014d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d80:	690e      	ldr	r6, [r1, #16]
 8014d82:	4607      	mov	r7, r0
 8014d84:	4698      	mov	r8, r3
 8014d86:	460c      	mov	r4, r1
 8014d88:	f101 0014 	add.w	r0, r1, #20
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	6805      	ldr	r5, [r0, #0]
 8014d90:	b2a9      	uxth	r1, r5
 8014d92:	fb02 8101 	mla	r1, r2, r1, r8
 8014d96:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8014d9a:	0c2d      	lsrs	r5, r5, #16
 8014d9c:	fb02 c505 	mla	r5, r2, r5, ip
 8014da0:	b289      	uxth	r1, r1
 8014da2:	3301      	adds	r3, #1
 8014da4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8014da8:	429e      	cmp	r6, r3
 8014daa:	f840 1b04 	str.w	r1, [r0], #4
 8014dae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8014db2:	dcec      	bgt.n	8014d8e <__multadd+0x12>
 8014db4:	f1b8 0f00 	cmp.w	r8, #0
 8014db8:	d022      	beq.n	8014e00 <__multadd+0x84>
 8014dba:	68a3      	ldr	r3, [r4, #8]
 8014dbc:	42b3      	cmp	r3, r6
 8014dbe:	dc19      	bgt.n	8014df4 <__multadd+0x78>
 8014dc0:	6861      	ldr	r1, [r4, #4]
 8014dc2:	4638      	mov	r0, r7
 8014dc4:	3101      	adds	r1, #1
 8014dc6:	f7ff ff77 	bl	8014cb8 <_Balloc>
 8014dca:	4605      	mov	r5, r0
 8014dcc:	b928      	cbnz	r0, 8014dda <__multadd+0x5e>
 8014dce:	4602      	mov	r2, r0
 8014dd0:	4b0d      	ldr	r3, [pc, #52]	; (8014e08 <__multadd+0x8c>)
 8014dd2:	480e      	ldr	r0, [pc, #56]	; (8014e0c <__multadd+0x90>)
 8014dd4:	21b5      	movs	r1, #181	; 0xb5
 8014dd6:	f7fe fbed 	bl	80135b4 <__assert_func>
 8014dda:	6922      	ldr	r2, [r4, #16]
 8014ddc:	3202      	adds	r2, #2
 8014dde:	f104 010c 	add.w	r1, r4, #12
 8014de2:	0092      	lsls	r2, r2, #2
 8014de4:	300c      	adds	r0, #12
 8014de6:	f7fc fa99 	bl	801131c <memcpy>
 8014dea:	4621      	mov	r1, r4
 8014dec:	4638      	mov	r0, r7
 8014dee:	f7ff ffa3 	bl	8014d38 <_Bfree>
 8014df2:	462c      	mov	r4, r5
 8014df4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014df8:	3601      	adds	r6, #1
 8014dfa:	f8c3 8014 	str.w	r8, [r3, #20]
 8014dfe:	6126      	str	r6, [r4, #16]
 8014e00:	4620      	mov	r0, r4
 8014e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e06:	bf00      	nop
 8014e08:	08017847 	.word	0x08017847
 8014e0c:	080178d8 	.word	0x080178d8

08014e10 <__s2b>:
 8014e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e14:	460c      	mov	r4, r1
 8014e16:	4615      	mov	r5, r2
 8014e18:	461f      	mov	r7, r3
 8014e1a:	2209      	movs	r2, #9
 8014e1c:	3308      	adds	r3, #8
 8014e1e:	4606      	mov	r6, r0
 8014e20:	fb93 f3f2 	sdiv	r3, r3, r2
 8014e24:	2100      	movs	r1, #0
 8014e26:	2201      	movs	r2, #1
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	db09      	blt.n	8014e40 <__s2b+0x30>
 8014e2c:	4630      	mov	r0, r6
 8014e2e:	f7ff ff43 	bl	8014cb8 <_Balloc>
 8014e32:	b940      	cbnz	r0, 8014e46 <__s2b+0x36>
 8014e34:	4602      	mov	r2, r0
 8014e36:	4b19      	ldr	r3, [pc, #100]	; (8014e9c <__s2b+0x8c>)
 8014e38:	4819      	ldr	r0, [pc, #100]	; (8014ea0 <__s2b+0x90>)
 8014e3a:	21ce      	movs	r1, #206	; 0xce
 8014e3c:	f7fe fbba 	bl	80135b4 <__assert_func>
 8014e40:	0052      	lsls	r2, r2, #1
 8014e42:	3101      	adds	r1, #1
 8014e44:	e7f0      	b.n	8014e28 <__s2b+0x18>
 8014e46:	9b08      	ldr	r3, [sp, #32]
 8014e48:	6143      	str	r3, [r0, #20]
 8014e4a:	2d09      	cmp	r5, #9
 8014e4c:	f04f 0301 	mov.w	r3, #1
 8014e50:	6103      	str	r3, [r0, #16]
 8014e52:	dd16      	ble.n	8014e82 <__s2b+0x72>
 8014e54:	f104 0909 	add.w	r9, r4, #9
 8014e58:	46c8      	mov	r8, r9
 8014e5a:	442c      	add	r4, r5
 8014e5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014e60:	4601      	mov	r1, r0
 8014e62:	3b30      	subs	r3, #48	; 0x30
 8014e64:	220a      	movs	r2, #10
 8014e66:	4630      	mov	r0, r6
 8014e68:	f7ff ff88 	bl	8014d7c <__multadd>
 8014e6c:	45a0      	cmp	r8, r4
 8014e6e:	d1f5      	bne.n	8014e5c <__s2b+0x4c>
 8014e70:	f1a5 0408 	sub.w	r4, r5, #8
 8014e74:	444c      	add	r4, r9
 8014e76:	1b2d      	subs	r5, r5, r4
 8014e78:	1963      	adds	r3, r4, r5
 8014e7a:	42bb      	cmp	r3, r7
 8014e7c:	db04      	blt.n	8014e88 <__s2b+0x78>
 8014e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e82:	340a      	adds	r4, #10
 8014e84:	2509      	movs	r5, #9
 8014e86:	e7f6      	b.n	8014e76 <__s2b+0x66>
 8014e88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014e8c:	4601      	mov	r1, r0
 8014e8e:	3b30      	subs	r3, #48	; 0x30
 8014e90:	220a      	movs	r2, #10
 8014e92:	4630      	mov	r0, r6
 8014e94:	f7ff ff72 	bl	8014d7c <__multadd>
 8014e98:	e7ee      	b.n	8014e78 <__s2b+0x68>
 8014e9a:	bf00      	nop
 8014e9c:	08017847 	.word	0x08017847
 8014ea0:	080178d8 	.word	0x080178d8

08014ea4 <__hi0bits>:
 8014ea4:	0c03      	lsrs	r3, r0, #16
 8014ea6:	041b      	lsls	r3, r3, #16
 8014ea8:	b9d3      	cbnz	r3, 8014ee0 <__hi0bits+0x3c>
 8014eaa:	0400      	lsls	r0, r0, #16
 8014eac:	2310      	movs	r3, #16
 8014eae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014eb2:	bf04      	itt	eq
 8014eb4:	0200      	lsleq	r0, r0, #8
 8014eb6:	3308      	addeq	r3, #8
 8014eb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014ebc:	bf04      	itt	eq
 8014ebe:	0100      	lsleq	r0, r0, #4
 8014ec0:	3304      	addeq	r3, #4
 8014ec2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014ec6:	bf04      	itt	eq
 8014ec8:	0080      	lsleq	r0, r0, #2
 8014eca:	3302      	addeq	r3, #2
 8014ecc:	2800      	cmp	r0, #0
 8014ece:	db05      	blt.n	8014edc <__hi0bits+0x38>
 8014ed0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014ed4:	f103 0301 	add.w	r3, r3, #1
 8014ed8:	bf08      	it	eq
 8014eda:	2320      	moveq	r3, #32
 8014edc:	4618      	mov	r0, r3
 8014ede:	4770      	bx	lr
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	e7e4      	b.n	8014eae <__hi0bits+0xa>

08014ee4 <__lo0bits>:
 8014ee4:	6803      	ldr	r3, [r0, #0]
 8014ee6:	f013 0207 	ands.w	r2, r3, #7
 8014eea:	4601      	mov	r1, r0
 8014eec:	d00b      	beq.n	8014f06 <__lo0bits+0x22>
 8014eee:	07da      	lsls	r2, r3, #31
 8014ef0:	d424      	bmi.n	8014f3c <__lo0bits+0x58>
 8014ef2:	0798      	lsls	r0, r3, #30
 8014ef4:	bf49      	itett	mi
 8014ef6:	085b      	lsrmi	r3, r3, #1
 8014ef8:	089b      	lsrpl	r3, r3, #2
 8014efa:	2001      	movmi	r0, #1
 8014efc:	600b      	strmi	r3, [r1, #0]
 8014efe:	bf5c      	itt	pl
 8014f00:	600b      	strpl	r3, [r1, #0]
 8014f02:	2002      	movpl	r0, #2
 8014f04:	4770      	bx	lr
 8014f06:	b298      	uxth	r0, r3
 8014f08:	b9b0      	cbnz	r0, 8014f38 <__lo0bits+0x54>
 8014f0a:	0c1b      	lsrs	r3, r3, #16
 8014f0c:	2010      	movs	r0, #16
 8014f0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014f12:	bf04      	itt	eq
 8014f14:	0a1b      	lsreq	r3, r3, #8
 8014f16:	3008      	addeq	r0, #8
 8014f18:	071a      	lsls	r2, r3, #28
 8014f1a:	bf04      	itt	eq
 8014f1c:	091b      	lsreq	r3, r3, #4
 8014f1e:	3004      	addeq	r0, #4
 8014f20:	079a      	lsls	r2, r3, #30
 8014f22:	bf04      	itt	eq
 8014f24:	089b      	lsreq	r3, r3, #2
 8014f26:	3002      	addeq	r0, #2
 8014f28:	07da      	lsls	r2, r3, #31
 8014f2a:	d403      	bmi.n	8014f34 <__lo0bits+0x50>
 8014f2c:	085b      	lsrs	r3, r3, #1
 8014f2e:	f100 0001 	add.w	r0, r0, #1
 8014f32:	d005      	beq.n	8014f40 <__lo0bits+0x5c>
 8014f34:	600b      	str	r3, [r1, #0]
 8014f36:	4770      	bx	lr
 8014f38:	4610      	mov	r0, r2
 8014f3a:	e7e8      	b.n	8014f0e <__lo0bits+0x2a>
 8014f3c:	2000      	movs	r0, #0
 8014f3e:	4770      	bx	lr
 8014f40:	2020      	movs	r0, #32
 8014f42:	4770      	bx	lr

08014f44 <__i2b>:
 8014f44:	b510      	push	{r4, lr}
 8014f46:	460c      	mov	r4, r1
 8014f48:	2101      	movs	r1, #1
 8014f4a:	f7ff feb5 	bl	8014cb8 <_Balloc>
 8014f4e:	4602      	mov	r2, r0
 8014f50:	b928      	cbnz	r0, 8014f5e <__i2b+0x1a>
 8014f52:	4b05      	ldr	r3, [pc, #20]	; (8014f68 <__i2b+0x24>)
 8014f54:	4805      	ldr	r0, [pc, #20]	; (8014f6c <__i2b+0x28>)
 8014f56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014f5a:	f7fe fb2b 	bl	80135b4 <__assert_func>
 8014f5e:	2301      	movs	r3, #1
 8014f60:	6144      	str	r4, [r0, #20]
 8014f62:	6103      	str	r3, [r0, #16]
 8014f64:	bd10      	pop	{r4, pc}
 8014f66:	bf00      	nop
 8014f68:	08017847 	.word	0x08017847
 8014f6c:	080178d8 	.word	0x080178d8

08014f70 <__multiply>:
 8014f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f74:	4614      	mov	r4, r2
 8014f76:	690a      	ldr	r2, [r1, #16]
 8014f78:	6923      	ldr	r3, [r4, #16]
 8014f7a:	429a      	cmp	r2, r3
 8014f7c:	bfb8      	it	lt
 8014f7e:	460b      	movlt	r3, r1
 8014f80:	460d      	mov	r5, r1
 8014f82:	bfbc      	itt	lt
 8014f84:	4625      	movlt	r5, r4
 8014f86:	461c      	movlt	r4, r3
 8014f88:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014f8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014f90:	68ab      	ldr	r3, [r5, #8]
 8014f92:	6869      	ldr	r1, [r5, #4]
 8014f94:	eb0a 0709 	add.w	r7, sl, r9
 8014f98:	42bb      	cmp	r3, r7
 8014f9a:	b085      	sub	sp, #20
 8014f9c:	bfb8      	it	lt
 8014f9e:	3101      	addlt	r1, #1
 8014fa0:	f7ff fe8a 	bl	8014cb8 <_Balloc>
 8014fa4:	b930      	cbnz	r0, 8014fb4 <__multiply+0x44>
 8014fa6:	4602      	mov	r2, r0
 8014fa8:	4b42      	ldr	r3, [pc, #264]	; (80150b4 <__multiply+0x144>)
 8014faa:	4843      	ldr	r0, [pc, #268]	; (80150b8 <__multiply+0x148>)
 8014fac:	f240 115d 	movw	r1, #349	; 0x15d
 8014fb0:	f7fe fb00 	bl	80135b4 <__assert_func>
 8014fb4:	f100 0614 	add.w	r6, r0, #20
 8014fb8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014fbc:	4633      	mov	r3, r6
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	4543      	cmp	r3, r8
 8014fc2:	d31e      	bcc.n	8015002 <__multiply+0x92>
 8014fc4:	f105 0c14 	add.w	ip, r5, #20
 8014fc8:	f104 0314 	add.w	r3, r4, #20
 8014fcc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014fd0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014fd4:	9202      	str	r2, [sp, #8]
 8014fd6:	ebac 0205 	sub.w	r2, ip, r5
 8014fda:	3a15      	subs	r2, #21
 8014fdc:	f022 0203 	bic.w	r2, r2, #3
 8014fe0:	3204      	adds	r2, #4
 8014fe2:	f105 0115 	add.w	r1, r5, #21
 8014fe6:	458c      	cmp	ip, r1
 8014fe8:	bf38      	it	cc
 8014fea:	2204      	movcc	r2, #4
 8014fec:	9201      	str	r2, [sp, #4]
 8014fee:	9a02      	ldr	r2, [sp, #8]
 8014ff0:	9303      	str	r3, [sp, #12]
 8014ff2:	429a      	cmp	r2, r3
 8014ff4:	d808      	bhi.n	8015008 <__multiply+0x98>
 8014ff6:	2f00      	cmp	r7, #0
 8014ff8:	dc55      	bgt.n	80150a6 <__multiply+0x136>
 8014ffa:	6107      	str	r7, [r0, #16]
 8014ffc:	b005      	add	sp, #20
 8014ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015002:	f843 2b04 	str.w	r2, [r3], #4
 8015006:	e7db      	b.n	8014fc0 <__multiply+0x50>
 8015008:	f8b3 a000 	ldrh.w	sl, [r3]
 801500c:	f1ba 0f00 	cmp.w	sl, #0
 8015010:	d020      	beq.n	8015054 <__multiply+0xe4>
 8015012:	f105 0e14 	add.w	lr, r5, #20
 8015016:	46b1      	mov	r9, r6
 8015018:	2200      	movs	r2, #0
 801501a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801501e:	f8d9 b000 	ldr.w	fp, [r9]
 8015022:	b2a1      	uxth	r1, r4
 8015024:	fa1f fb8b 	uxth.w	fp, fp
 8015028:	fb0a b101 	mla	r1, sl, r1, fp
 801502c:	4411      	add	r1, r2
 801502e:	f8d9 2000 	ldr.w	r2, [r9]
 8015032:	0c24      	lsrs	r4, r4, #16
 8015034:	0c12      	lsrs	r2, r2, #16
 8015036:	fb0a 2404 	mla	r4, sl, r4, r2
 801503a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801503e:	b289      	uxth	r1, r1
 8015040:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015044:	45f4      	cmp	ip, lr
 8015046:	f849 1b04 	str.w	r1, [r9], #4
 801504a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801504e:	d8e4      	bhi.n	801501a <__multiply+0xaa>
 8015050:	9901      	ldr	r1, [sp, #4]
 8015052:	5072      	str	r2, [r6, r1]
 8015054:	9a03      	ldr	r2, [sp, #12]
 8015056:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801505a:	3304      	adds	r3, #4
 801505c:	f1b9 0f00 	cmp.w	r9, #0
 8015060:	d01f      	beq.n	80150a2 <__multiply+0x132>
 8015062:	6834      	ldr	r4, [r6, #0]
 8015064:	f105 0114 	add.w	r1, r5, #20
 8015068:	46b6      	mov	lr, r6
 801506a:	f04f 0a00 	mov.w	sl, #0
 801506e:	880a      	ldrh	r2, [r1, #0]
 8015070:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015074:	fb09 b202 	mla	r2, r9, r2, fp
 8015078:	4492      	add	sl, r2
 801507a:	b2a4      	uxth	r4, r4
 801507c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015080:	f84e 4b04 	str.w	r4, [lr], #4
 8015084:	f851 4b04 	ldr.w	r4, [r1], #4
 8015088:	f8be 2000 	ldrh.w	r2, [lr]
 801508c:	0c24      	lsrs	r4, r4, #16
 801508e:	fb09 2404 	mla	r4, r9, r4, r2
 8015092:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015096:	458c      	cmp	ip, r1
 8015098:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801509c:	d8e7      	bhi.n	801506e <__multiply+0xfe>
 801509e:	9a01      	ldr	r2, [sp, #4]
 80150a0:	50b4      	str	r4, [r6, r2]
 80150a2:	3604      	adds	r6, #4
 80150a4:	e7a3      	b.n	8014fee <__multiply+0x7e>
 80150a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d1a5      	bne.n	8014ffa <__multiply+0x8a>
 80150ae:	3f01      	subs	r7, #1
 80150b0:	e7a1      	b.n	8014ff6 <__multiply+0x86>
 80150b2:	bf00      	nop
 80150b4:	08017847 	.word	0x08017847
 80150b8:	080178d8 	.word	0x080178d8

080150bc <__pow5mult>:
 80150bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150c0:	4615      	mov	r5, r2
 80150c2:	f012 0203 	ands.w	r2, r2, #3
 80150c6:	4606      	mov	r6, r0
 80150c8:	460f      	mov	r7, r1
 80150ca:	d007      	beq.n	80150dc <__pow5mult+0x20>
 80150cc:	4c25      	ldr	r4, [pc, #148]	; (8015164 <__pow5mult+0xa8>)
 80150ce:	3a01      	subs	r2, #1
 80150d0:	2300      	movs	r3, #0
 80150d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80150d6:	f7ff fe51 	bl	8014d7c <__multadd>
 80150da:	4607      	mov	r7, r0
 80150dc:	10ad      	asrs	r5, r5, #2
 80150de:	d03d      	beq.n	801515c <__pow5mult+0xa0>
 80150e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80150e2:	b97c      	cbnz	r4, 8015104 <__pow5mult+0x48>
 80150e4:	2010      	movs	r0, #16
 80150e6:	f7fc f911 	bl	801130c <malloc>
 80150ea:	4602      	mov	r2, r0
 80150ec:	6270      	str	r0, [r6, #36]	; 0x24
 80150ee:	b928      	cbnz	r0, 80150fc <__pow5mult+0x40>
 80150f0:	4b1d      	ldr	r3, [pc, #116]	; (8015168 <__pow5mult+0xac>)
 80150f2:	481e      	ldr	r0, [pc, #120]	; (801516c <__pow5mult+0xb0>)
 80150f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80150f8:	f7fe fa5c 	bl	80135b4 <__assert_func>
 80150fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015100:	6004      	str	r4, [r0, #0]
 8015102:	60c4      	str	r4, [r0, #12]
 8015104:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801510c:	b94c      	cbnz	r4, 8015122 <__pow5mult+0x66>
 801510e:	f240 2171 	movw	r1, #625	; 0x271
 8015112:	4630      	mov	r0, r6
 8015114:	f7ff ff16 	bl	8014f44 <__i2b>
 8015118:	2300      	movs	r3, #0
 801511a:	f8c8 0008 	str.w	r0, [r8, #8]
 801511e:	4604      	mov	r4, r0
 8015120:	6003      	str	r3, [r0, #0]
 8015122:	f04f 0900 	mov.w	r9, #0
 8015126:	07eb      	lsls	r3, r5, #31
 8015128:	d50a      	bpl.n	8015140 <__pow5mult+0x84>
 801512a:	4639      	mov	r1, r7
 801512c:	4622      	mov	r2, r4
 801512e:	4630      	mov	r0, r6
 8015130:	f7ff ff1e 	bl	8014f70 <__multiply>
 8015134:	4639      	mov	r1, r7
 8015136:	4680      	mov	r8, r0
 8015138:	4630      	mov	r0, r6
 801513a:	f7ff fdfd 	bl	8014d38 <_Bfree>
 801513e:	4647      	mov	r7, r8
 8015140:	106d      	asrs	r5, r5, #1
 8015142:	d00b      	beq.n	801515c <__pow5mult+0xa0>
 8015144:	6820      	ldr	r0, [r4, #0]
 8015146:	b938      	cbnz	r0, 8015158 <__pow5mult+0x9c>
 8015148:	4622      	mov	r2, r4
 801514a:	4621      	mov	r1, r4
 801514c:	4630      	mov	r0, r6
 801514e:	f7ff ff0f 	bl	8014f70 <__multiply>
 8015152:	6020      	str	r0, [r4, #0]
 8015154:	f8c0 9000 	str.w	r9, [r0]
 8015158:	4604      	mov	r4, r0
 801515a:	e7e4      	b.n	8015126 <__pow5mult+0x6a>
 801515c:	4638      	mov	r0, r7
 801515e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015162:	bf00      	nop
 8015164:	08017a28 	.word	0x08017a28
 8015168:	080177d1 	.word	0x080177d1
 801516c:	080178d8 	.word	0x080178d8

08015170 <__lshift>:
 8015170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015174:	460c      	mov	r4, r1
 8015176:	6849      	ldr	r1, [r1, #4]
 8015178:	6923      	ldr	r3, [r4, #16]
 801517a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801517e:	68a3      	ldr	r3, [r4, #8]
 8015180:	4607      	mov	r7, r0
 8015182:	4691      	mov	r9, r2
 8015184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015188:	f108 0601 	add.w	r6, r8, #1
 801518c:	42b3      	cmp	r3, r6
 801518e:	db0b      	blt.n	80151a8 <__lshift+0x38>
 8015190:	4638      	mov	r0, r7
 8015192:	f7ff fd91 	bl	8014cb8 <_Balloc>
 8015196:	4605      	mov	r5, r0
 8015198:	b948      	cbnz	r0, 80151ae <__lshift+0x3e>
 801519a:	4602      	mov	r2, r0
 801519c:	4b28      	ldr	r3, [pc, #160]	; (8015240 <__lshift+0xd0>)
 801519e:	4829      	ldr	r0, [pc, #164]	; (8015244 <__lshift+0xd4>)
 80151a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80151a4:	f7fe fa06 	bl	80135b4 <__assert_func>
 80151a8:	3101      	adds	r1, #1
 80151aa:	005b      	lsls	r3, r3, #1
 80151ac:	e7ee      	b.n	801518c <__lshift+0x1c>
 80151ae:	2300      	movs	r3, #0
 80151b0:	f100 0114 	add.w	r1, r0, #20
 80151b4:	f100 0210 	add.w	r2, r0, #16
 80151b8:	4618      	mov	r0, r3
 80151ba:	4553      	cmp	r3, sl
 80151bc:	db33      	blt.n	8015226 <__lshift+0xb6>
 80151be:	6920      	ldr	r0, [r4, #16]
 80151c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80151c4:	f104 0314 	add.w	r3, r4, #20
 80151c8:	f019 091f 	ands.w	r9, r9, #31
 80151cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80151d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80151d4:	d02b      	beq.n	801522e <__lshift+0xbe>
 80151d6:	f1c9 0e20 	rsb	lr, r9, #32
 80151da:	468a      	mov	sl, r1
 80151dc:	2200      	movs	r2, #0
 80151de:	6818      	ldr	r0, [r3, #0]
 80151e0:	fa00 f009 	lsl.w	r0, r0, r9
 80151e4:	4302      	orrs	r2, r0
 80151e6:	f84a 2b04 	str.w	r2, [sl], #4
 80151ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80151ee:	459c      	cmp	ip, r3
 80151f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80151f4:	d8f3      	bhi.n	80151de <__lshift+0x6e>
 80151f6:	ebac 0304 	sub.w	r3, ip, r4
 80151fa:	3b15      	subs	r3, #21
 80151fc:	f023 0303 	bic.w	r3, r3, #3
 8015200:	3304      	adds	r3, #4
 8015202:	f104 0015 	add.w	r0, r4, #21
 8015206:	4584      	cmp	ip, r0
 8015208:	bf38      	it	cc
 801520a:	2304      	movcc	r3, #4
 801520c:	50ca      	str	r2, [r1, r3]
 801520e:	b10a      	cbz	r2, 8015214 <__lshift+0xa4>
 8015210:	f108 0602 	add.w	r6, r8, #2
 8015214:	3e01      	subs	r6, #1
 8015216:	4638      	mov	r0, r7
 8015218:	612e      	str	r6, [r5, #16]
 801521a:	4621      	mov	r1, r4
 801521c:	f7ff fd8c 	bl	8014d38 <_Bfree>
 8015220:	4628      	mov	r0, r5
 8015222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015226:	f842 0f04 	str.w	r0, [r2, #4]!
 801522a:	3301      	adds	r3, #1
 801522c:	e7c5      	b.n	80151ba <__lshift+0x4a>
 801522e:	3904      	subs	r1, #4
 8015230:	f853 2b04 	ldr.w	r2, [r3], #4
 8015234:	f841 2f04 	str.w	r2, [r1, #4]!
 8015238:	459c      	cmp	ip, r3
 801523a:	d8f9      	bhi.n	8015230 <__lshift+0xc0>
 801523c:	e7ea      	b.n	8015214 <__lshift+0xa4>
 801523e:	bf00      	nop
 8015240:	08017847 	.word	0x08017847
 8015244:	080178d8 	.word	0x080178d8

08015248 <__mcmp>:
 8015248:	b530      	push	{r4, r5, lr}
 801524a:	6902      	ldr	r2, [r0, #16]
 801524c:	690c      	ldr	r4, [r1, #16]
 801524e:	1b12      	subs	r2, r2, r4
 8015250:	d10e      	bne.n	8015270 <__mcmp+0x28>
 8015252:	f100 0314 	add.w	r3, r0, #20
 8015256:	3114      	adds	r1, #20
 8015258:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801525c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015260:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015264:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015268:	42a5      	cmp	r5, r4
 801526a:	d003      	beq.n	8015274 <__mcmp+0x2c>
 801526c:	d305      	bcc.n	801527a <__mcmp+0x32>
 801526e:	2201      	movs	r2, #1
 8015270:	4610      	mov	r0, r2
 8015272:	bd30      	pop	{r4, r5, pc}
 8015274:	4283      	cmp	r3, r0
 8015276:	d3f3      	bcc.n	8015260 <__mcmp+0x18>
 8015278:	e7fa      	b.n	8015270 <__mcmp+0x28>
 801527a:	f04f 32ff 	mov.w	r2, #4294967295
 801527e:	e7f7      	b.n	8015270 <__mcmp+0x28>

08015280 <__mdiff>:
 8015280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015284:	460c      	mov	r4, r1
 8015286:	4606      	mov	r6, r0
 8015288:	4611      	mov	r1, r2
 801528a:	4620      	mov	r0, r4
 801528c:	4617      	mov	r7, r2
 801528e:	f7ff ffdb 	bl	8015248 <__mcmp>
 8015292:	1e05      	subs	r5, r0, #0
 8015294:	d110      	bne.n	80152b8 <__mdiff+0x38>
 8015296:	4629      	mov	r1, r5
 8015298:	4630      	mov	r0, r6
 801529a:	f7ff fd0d 	bl	8014cb8 <_Balloc>
 801529e:	b930      	cbnz	r0, 80152ae <__mdiff+0x2e>
 80152a0:	4b39      	ldr	r3, [pc, #228]	; (8015388 <__mdiff+0x108>)
 80152a2:	4602      	mov	r2, r0
 80152a4:	f240 2132 	movw	r1, #562	; 0x232
 80152a8:	4838      	ldr	r0, [pc, #224]	; (801538c <__mdiff+0x10c>)
 80152aa:	f7fe f983 	bl	80135b4 <__assert_func>
 80152ae:	2301      	movs	r3, #1
 80152b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80152b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152b8:	bfa4      	itt	ge
 80152ba:	463b      	movge	r3, r7
 80152bc:	4627      	movge	r7, r4
 80152be:	4630      	mov	r0, r6
 80152c0:	6879      	ldr	r1, [r7, #4]
 80152c2:	bfa6      	itte	ge
 80152c4:	461c      	movge	r4, r3
 80152c6:	2500      	movge	r5, #0
 80152c8:	2501      	movlt	r5, #1
 80152ca:	f7ff fcf5 	bl	8014cb8 <_Balloc>
 80152ce:	b920      	cbnz	r0, 80152da <__mdiff+0x5a>
 80152d0:	4b2d      	ldr	r3, [pc, #180]	; (8015388 <__mdiff+0x108>)
 80152d2:	4602      	mov	r2, r0
 80152d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80152d8:	e7e6      	b.n	80152a8 <__mdiff+0x28>
 80152da:	693e      	ldr	r6, [r7, #16]
 80152dc:	60c5      	str	r5, [r0, #12]
 80152de:	6925      	ldr	r5, [r4, #16]
 80152e0:	f107 0114 	add.w	r1, r7, #20
 80152e4:	f104 0914 	add.w	r9, r4, #20
 80152e8:	f100 0e14 	add.w	lr, r0, #20
 80152ec:	f107 0210 	add.w	r2, r7, #16
 80152f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80152f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80152f8:	46f2      	mov	sl, lr
 80152fa:	2700      	movs	r7, #0
 80152fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8015300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015304:	fa1f f883 	uxth.w	r8, r3
 8015308:	fa17 f78b 	uxtah	r7, r7, fp
 801530c:	0c1b      	lsrs	r3, r3, #16
 801530e:	eba7 0808 	sub.w	r8, r7, r8
 8015312:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015316:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801531a:	fa1f f888 	uxth.w	r8, r8
 801531e:	141f      	asrs	r7, r3, #16
 8015320:	454d      	cmp	r5, r9
 8015322:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015326:	f84a 3b04 	str.w	r3, [sl], #4
 801532a:	d8e7      	bhi.n	80152fc <__mdiff+0x7c>
 801532c:	1b2b      	subs	r3, r5, r4
 801532e:	3b15      	subs	r3, #21
 8015330:	f023 0303 	bic.w	r3, r3, #3
 8015334:	3304      	adds	r3, #4
 8015336:	3415      	adds	r4, #21
 8015338:	42a5      	cmp	r5, r4
 801533a:	bf38      	it	cc
 801533c:	2304      	movcc	r3, #4
 801533e:	4419      	add	r1, r3
 8015340:	4473      	add	r3, lr
 8015342:	469e      	mov	lr, r3
 8015344:	460d      	mov	r5, r1
 8015346:	4565      	cmp	r5, ip
 8015348:	d30e      	bcc.n	8015368 <__mdiff+0xe8>
 801534a:	f10c 0203 	add.w	r2, ip, #3
 801534e:	1a52      	subs	r2, r2, r1
 8015350:	f022 0203 	bic.w	r2, r2, #3
 8015354:	3903      	subs	r1, #3
 8015356:	458c      	cmp	ip, r1
 8015358:	bf38      	it	cc
 801535a:	2200      	movcc	r2, #0
 801535c:	441a      	add	r2, r3
 801535e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015362:	b17b      	cbz	r3, 8015384 <__mdiff+0x104>
 8015364:	6106      	str	r6, [r0, #16]
 8015366:	e7a5      	b.n	80152b4 <__mdiff+0x34>
 8015368:	f855 8b04 	ldr.w	r8, [r5], #4
 801536c:	fa17 f488 	uxtah	r4, r7, r8
 8015370:	1422      	asrs	r2, r4, #16
 8015372:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015376:	b2a4      	uxth	r4, r4
 8015378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801537c:	f84e 4b04 	str.w	r4, [lr], #4
 8015380:	1417      	asrs	r7, r2, #16
 8015382:	e7e0      	b.n	8015346 <__mdiff+0xc6>
 8015384:	3e01      	subs	r6, #1
 8015386:	e7ea      	b.n	801535e <__mdiff+0xde>
 8015388:	08017847 	.word	0x08017847
 801538c:	080178d8 	.word	0x080178d8

08015390 <__ulp>:
 8015390:	b082      	sub	sp, #8
 8015392:	ed8d 0b00 	vstr	d0, [sp]
 8015396:	9b01      	ldr	r3, [sp, #4]
 8015398:	4912      	ldr	r1, [pc, #72]	; (80153e4 <__ulp+0x54>)
 801539a:	4019      	ands	r1, r3
 801539c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80153a0:	2900      	cmp	r1, #0
 80153a2:	dd05      	ble.n	80153b0 <__ulp+0x20>
 80153a4:	2200      	movs	r2, #0
 80153a6:	460b      	mov	r3, r1
 80153a8:	ec43 2b10 	vmov	d0, r2, r3
 80153ac:	b002      	add	sp, #8
 80153ae:	4770      	bx	lr
 80153b0:	4249      	negs	r1, r1
 80153b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80153b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80153ba:	f04f 0200 	mov.w	r2, #0
 80153be:	f04f 0300 	mov.w	r3, #0
 80153c2:	da04      	bge.n	80153ce <__ulp+0x3e>
 80153c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80153c8:	fa41 f300 	asr.w	r3, r1, r0
 80153cc:	e7ec      	b.n	80153a8 <__ulp+0x18>
 80153ce:	f1a0 0114 	sub.w	r1, r0, #20
 80153d2:	291e      	cmp	r1, #30
 80153d4:	bfda      	itte	le
 80153d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80153da:	fa20 f101 	lsrle.w	r1, r0, r1
 80153de:	2101      	movgt	r1, #1
 80153e0:	460a      	mov	r2, r1
 80153e2:	e7e1      	b.n	80153a8 <__ulp+0x18>
 80153e4:	7ff00000 	.word	0x7ff00000

080153e8 <__b2d>:
 80153e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153ea:	6905      	ldr	r5, [r0, #16]
 80153ec:	f100 0714 	add.w	r7, r0, #20
 80153f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80153f4:	1f2e      	subs	r6, r5, #4
 80153f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80153fa:	4620      	mov	r0, r4
 80153fc:	f7ff fd52 	bl	8014ea4 <__hi0bits>
 8015400:	f1c0 0320 	rsb	r3, r0, #32
 8015404:	280a      	cmp	r0, #10
 8015406:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8015484 <__b2d+0x9c>
 801540a:	600b      	str	r3, [r1, #0]
 801540c:	dc14      	bgt.n	8015438 <__b2d+0x50>
 801540e:	f1c0 0e0b 	rsb	lr, r0, #11
 8015412:	fa24 f10e 	lsr.w	r1, r4, lr
 8015416:	42b7      	cmp	r7, r6
 8015418:	ea41 030c 	orr.w	r3, r1, ip
 801541c:	bf34      	ite	cc
 801541e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015422:	2100      	movcs	r1, #0
 8015424:	3015      	adds	r0, #21
 8015426:	fa04 f000 	lsl.w	r0, r4, r0
 801542a:	fa21 f10e 	lsr.w	r1, r1, lr
 801542e:	ea40 0201 	orr.w	r2, r0, r1
 8015432:	ec43 2b10 	vmov	d0, r2, r3
 8015436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015438:	42b7      	cmp	r7, r6
 801543a:	bf3a      	itte	cc
 801543c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015440:	f1a5 0608 	subcc.w	r6, r5, #8
 8015444:	2100      	movcs	r1, #0
 8015446:	380b      	subs	r0, #11
 8015448:	d017      	beq.n	801547a <__b2d+0x92>
 801544a:	f1c0 0c20 	rsb	ip, r0, #32
 801544e:	fa04 f500 	lsl.w	r5, r4, r0
 8015452:	42be      	cmp	r6, r7
 8015454:	fa21 f40c 	lsr.w	r4, r1, ip
 8015458:	ea45 0504 	orr.w	r5, r5, r4
 801545c:	bf8c      	ite	hi
 801545e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015462:	2400      	movls	r4, #0
 8015464:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8015468:	fa01 f000 	lsl.w	r0, r1, r0
 801546c:	fa24 f40c 	lsr.w	r4, r4, ip
 8015470:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015474:	ea40 0204 	orr.w	r2, r0, r4
 8015478:	e7db      	b.n	8015432 <__b2d+0x4a>
 801547a:	ea44 030c 	orr.w	r3, r4, ip
 801547e:	460a      	mov	r2, r1
 8015480:	e7d7      	b.n	8015432 <__b2d+0x4a>
 8015482:	bf00      	nop
 8015484:	3ff00000 	.word	0x3ff00000

08015488 <__d2b>:
 8015488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801548c:	4689      	mov	r9, r1
 801548e:	2101      	movs	r1, #1
 8015490:	ec57 6b10 	vmov	r6, r7, d0
 8015494:	4690      	mov	r8, r2
 8015496:	f7ff fc0f 	bl	8014cb8 <_Balloc>
 801549a:	4604      	mov	r4, r0
 801549c:	b930      	cbnz	r0, 80154ac <__d2b+0x24>
 801549e:	4602      	mov	r2, r0
 80154a0:	4b25      	ldr	r3, [pc, #148]	; (8015538 <__d2b+0xb0>)
 80154a2:	4826      	ldr	r0, [pc, #152]	; (801553c <__d2b+0xb4>)
 80154a4:	f240 310a 	movw	r1, #778	; 0x30a
 80154a8:	f7fe f884 	bl	80135b4 <__assert_func>
 80154ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80154b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80154b4:	bb35      	cbnz	r5, 8015504 <__d2b+0x7c>
 80154b6:	2e00      	cmp	r6, #0
 80154b8:	9301      	str	r3, [sp, #4]
 80154ba:	d028      	beq.n	801550e <__d2b+0x86>
 80154bc:	4668      	mov	r0, sp
 80154be:	9600      	str	r6, [sp, #0]
 80154c0:	f7ff fd10 	bl	8014ee4 <__lo0bits>
 80154c4:	9900      	ldr	r1, [sp, #0]
 80154c6:	b300      	cbz	r0, 801550a <__d2b+0x82>
 80154c8:	9a01      	ldr	r2, [sp, #4]
 80154ca:	f1c0 0320 	rsb	r3, r0, #32
 80154ce:	fa02 f303 	lsl.w	r3, r2, r3
 80154d2:	430b      	orrs	r3, r1
 80154d4:	40c2      	lsrs	r2, r0
 80154d6:	6163      	str	r3, [r4, #20]
 80154d8:	9201      	str	r2, [sp, #4]
 80154da:	9b01      	ldr	r3, [sp, #4]
 80154dc:	61a3      	str	r3, [r4, #24]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	bf14      	ite	ne
 80154e2:	2202      	movne	r2, #2
 80154e4:	2201      	moveq	r2, #1
 80154e6:	6122      	str	r2, [r4, #16]
 80154e8:	b1d5      	cbz	r5, 8015520 <__d2b+0x98>
 80154ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80154ee:	4405      	add	r5, r0
 80154f0:	f8c9 5000 	str.w	r5, [r9]
 80154f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80154f8:	f8c8 0000 	str.w	r0, [r8]
 80154fc:	4620      	mov	r0, r4
 80154fe:	b003      	add	sp, #12
 8015500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015508:	e7d5      	b.n	80154b6 <__d2b+0x2e>
 801550a:	6161      	str	r1, [r4, #20]
 801550c:	e7e5      	b.n	80154da <__d2b+0x52>
 801550e:	a801      	add	r0, sp, #4
 8015510:	f7ff fce8 	bl	8014ee4 <__lo0bits>
 8015514:	9b01      	ldr	r3, [sp, #4]
 8015516:	6163      	str	r3, [r4, #20]
 8015518:	2201      	movs	r2, #1
 801551a:	6122      	str	r2, [r4, #16]
 801551c:	3020      	adds	r0, #32
 801551e:	e7e3      	b.n	80154e8 <__d2b+0x60>
 8015520:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015524:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015528:	f8c9 0000 	str.w	r0, [r9]
 801552c:	6918      	ldr	r0, [r3, #16]
 801552e:	f7ff fcb9 	bl	8014ea4 <__hi0bits>
 8015532:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015536:	e7df      	b.n	80154f8 <__d2b+0x70>
 8015538:	08017847 	.word	0x08017847
 801553c:	080178d8 	.word	0x080178d8

08015540 <__ratio>:
 8015540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015544:	4688      	mov	r8, r1
 8015546:	4669      	mov	r1, sp
 8015548:	4681      	mov	r9, r0
 801554a:	f7ff ff4d 	bl	80153e8 <__b2d>
 801554e:	a901      	add	r1, sp, #4
 8015550:	4640      	mov	r0, r8
 8015552:	ec55 4b10 	vmov	r4, r5, d0
 8015556:	f7ff ff47 	bl	80153e8 <__b2d>
 801555a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801555e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015562:	eba3 0c02 	sub.w	ip, r3, r2
 8015566:	e9dd 3200 	ldrd	r3, r2, [sp]
 801556a:	1a9b      	subs	r3, r3, r2
 801556c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015570:	ec51 0b10 	vmov	r0, r1, d0
 8015574:	2b00      	cmp	r3, #0
 8015576:	bfd6      	itet	le
 8015578:	460a      	movle	r2, r1
 801557a:	462a      	movgt	r2, r5
 801557c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015580:	468b      	mov	fp, r1
 8015582:	462f      	mov	r7, r5
 8015584:	bfd4      	ite	le
 8015586:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801558a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801558e:	4620      	mov	r0, r4
 8015590:	ee10 2a10 	vmov	r2, s0
 8015594:	465b      	mov	r3, fp
 8015596:	4639      	mov	r1, r7
 8015598:	f7eb f968 	bl	800086c <__aeabi_ddiv>
 801559c:	ec41 0b10 	vmov	d0, r0, r1
 80155a0:	b003      	add	sp, #12
 80155a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080155a6 <__copybits>:
 80155a6:	3901      	subs	r1, #1
 80155a8:	b570      	push	{r4, r5, r6, lr}
 80155aa:	1149      	asrs	r1, r1, #5
 80155ac:	6914      	ldr	r4, [r2, #16]
 80155ae:	3101      	adds	r1, #1
 80155b0:	f102 0314 	add.w	r3, r2, #20
 80155b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80155b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80155bc:	1f05      	subs	r5, r0, #4
 80155be:	42a3      	cmp	r3, r4
 80155c0:	d30c      	bcc.n	80155dc <__copybits+0x36>
 80155c2:	1aa3      	subs	r3, r4, r2
 80155c4:	3b11      	subs	r3, #17
 80155c6:	f023 0303 	bic.w	r3, r3, #3
 80155ca:	3211      	adds	r2, #17
 80155cc:	42a2      	cmp	r2, r4
 80155ce:	bf88      	it	hi
 80155d0:	2300      	movhi	r3, #0
 80155d2:	4418      	add	r0, r3
 80155d4:	2300      	movs	r3, #0
 80155d6:	4288      	cmp	r0, r1
 80155d8:	d305      	bcc.n	80155e6 <__copybits+0x40>
 80155da:	bd70      	pop	{r4, r5, r6, pc}
 80155dc:	f853 6b04 	ldr.w	r6, [r3], #4
 80155e0:	f845 6f04 	str.w	r6, [r5, #4]!
 80155e4:	e7eb      	b.n	80155be <__copybits+0x18>
 80155e6:	f840 3b04 	str.w	r3, [r0], #4
 80155ea:	e7f4      	b.n	80155d6 <__copybits+0x30>

080155ec <__any_on>:
 80155ec:	f100 0214 	add.w	r2, r0, #20
 80155f0:	6900      	ldr	r0, [r0, #16]
 80155f2:	114b      	asrs	r3, r1, #5
 80155f4:	4298      	cmp	r0, r3
 80155f6:	b510      	push	{r4, lr}
 80155f8:	db11      	blt.n	801561e <__any_on+0x32>
 80155fa:	dd0a      	ble.n	8015612 <__any_on+0x26>
 80155fc:	f011 011f 	ands.w	r1, r1, #31
 8015600:	d007      	beq.n	8015612 <__any_on+0x26>
 8015602:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015606:	fa24 f001 	lsr.w	r0, r4, r1
 801560a:	fa00 f101 	lsl.w	r1, r0, r1
 801560e:	428c      	cmp	r4, r1
 8015610:	d10b      	bne.n	801562a <__any_on+0x3e>
 8015612:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015616:	4293      	cmp	r3, r2
 8015618:	d803      	bhi.n	8015622 <__any_on+0x36>
 801561a:	2000      	movs	r0, #0
 801561c:	bd10      	pop	{r4, pc}
 801561e:	4603      	mov	r3, r0
 8015620:	e7f7      	b.n	8015612 <__any_on+0x26>
 8015622:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015626:	2900      	cmp	r1, #0
 8015628:	d0f5      	beq.n	8015616 <__any_on+0x2a>
 801562a:	2001      	movs	r0, #1
 801562c:	e7f6      	b.n	801561c <__any_on+0x30>

0801562e <_calloc_r>:
 801562e:	b513      	push	{r0, r1, r4, lr}
 8015630:	434a      	muls	r2, r1
 8015632:	4611      	mov	r1, r2
 8015634:	9201      	str	r2, [sp, #4]
 8015636:	f7fb fef1 	bl	801141c <_malloc_r>
 801563a:	4604      	mov	r4, r0
 801563c:	b118      	cbz	r0, 8015646 <_calloc_r+0x18>
 801563e:	9a01      	ldr	r2, [sp, #4]
 8015640:	2100      	movs	r1, #0
 8015642:	f7fb fe93 	bl	801136c <memset>
 8015646:	4620      	mov	r0, r4
 8015648:	b002      	add	sp, #8
 801564a:	bd10      	pop	{r4, pc}

0801564c <_realloc_r>:
 801564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801564e:	4607      	mov	r7, r0
 8015650:	4614      	mov	r4, r2
 8015652:	460e      	mov	r6, r1
 8015654:	b921      	cbnz	r1, 8015660 <_realloc_r+0x14>
 8015656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801565a:	4611      	mov	r1, r2
 801565c:	f7fb bede 	b.w	801141c <_malloc_r>
 8015660:	b922      	cbnz	r2, 801566c <_realloc_r+0x20>
 8015662:	f7fb fe8b 	bl	801137c <_free_r>
 8015666:	4625      	mov	r5, r4
 8015668:	4628      	mov	r0, r5
 801566a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801566c:	f000 fe9e 	bl	80163ac <_malloc_usable_size_r>
 8015670:	42a0      	cmp	r0, r4
 8015672:	d20f      	bcs.n	8015694 <_realloc_r+0x48>
 8015674:	4621      	mov	r1, r4
 8015676:	4638      	mov	r0, r7
 8015678:	f7fb fed0 	bl	801141c <_malloc_r>
 801567c:	4605      	mov	r5, r0
 801567e:	2800      	cmp	r0, #0
 8015680:	d0f2      	beq.n	8015668 <_realloc_r+0x1c>
 8015682:	4631      	mov	r1, r6
 8015684:	4622      	mov	r2, r4
 8015686:	f7fb fe49 	bl	801131c <memcpy>
 801568a:	4631      	mov	r1, r6
 801568c:	4638      	mov	r0, r7
 801568e:	f7fb fe75 	bl	801137c <_free_r>
 8015692:	e7e9      	b.n	8015668 <_realloc_r+0x1c>
 8015694:	4635      	mov	r5, r6
 8015696:	e7e7      	b.n	8015668 <_realloc_r+0x1c>

08015698 <__ssputs_r>:
 8015698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801569c:	688e      	ldr	r6, [r1, #8]
 801569e:	429e      	cmp	r6, r3
 80156a0:	4682      	mov	sl, r0
 80156a2:	460c      	mov	r4, r1
 80156a4:	4690      	mov	r8, r2
 80156a6:	461f      	mov	r7, r3
 80156a8:	d838      	bhi.n	801571c <__ssputs_r+0x84>
 80156aa:	898a      	ldrh	r2, [r1, #12]
 80156ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80156b0:	d032      	beq.n	8015718 <__ssputs_r+0x80>
 80156b2:	6825      	ldr	r5, [r4, #0]
 80156b4:	6909      	ldr	r1, [r1, #16]
 80156b6:	eba5 0901 	sub.w	r9, r5, r1
 80156ba:	6965      	ldr	r5, [r4, #20]
 80156bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80156c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80156c4:	3301      	adds	r3, #1
 80156c6:	444b      	add	r3, r9
 80156c8:	106d      	asrs	r5, r5, #1
 80156ca:	429d      	cmp	r5, r3
 80156cc:	bf38      	it	cc
 80156ce:	461d      	movcc	r5, r3
 80156d0:	0553      	lsls	r3, r2, #21
 80156d2:	d531      	bpl.n	8015738 <__ssputs_r+0xa0>
 80156d4:	4629      	mov	r1, r5
 80156d6:	f7fb fea1 	bl	801141c <_malloc_r>
 80156da:	4606      	mov	r6, r0
 80156dc:	b950      	cbnz	r0, 80156f4 <__ssputs_r+0x5c>
 80156de:	230c      	movs	r3, #12
 80156e0:	f8ca 3000 	str.w	r3, [sl]
 80156e4:	89a3      	ldrh	r3, [r4, #12]
 80156e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156ea:	81a3      	strh	r3, [r4, #12]
 80156ec:	f04f 30ff 	mov.w	r0, #4294967295
 80156f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156f4:	6921      	ldr	r1, [r4, #16]
 80156f6:	464a      	mov	r2, r9
 80156f8:	f7fb fe10 	bl	801131c <memcpy>
 80156fc:	89a3      	ldrh	r3, [r4, #12]
 80156fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015706:	81a3      	strh	r3, [r4, #12]
 8015708:	6126      	str	r6, [r4, #16]
 801570a:	6165      	str	r5, [r4, #20]
 801570c:	444e      	add	r6, r9
 801570e:	eba5 0509 	sub.w	r5, r5, r9
 8015712:	6026      	str	r6, [r4, #0]
 8015714:	60a5      	str	r5, [r4, #8]
 8015716:	463e      	mov	r6, r7
 8015718:	42be      	cmp	r6, r7
 801571a:	d900      	bls.n	801571e <__ssputs_r+0x86>
 801571c:	463e      	mov	r6, r7
 801571e:	4632      	mov	r2, r6
 8015720:	6820      	ldr	r0, [r4, #0]
 8015722:	4641      	mov	r1, r8
 8015724:	f7fb fe08 	bl	8011338 <memmove>
 8015728:	68a3      	ldr	r3, [r4, #8]
 801572a:	6822      	ldr	r2, [r4, #0]
 801572c:	1b9b      	subs	r3, r3, r6
 801572e:	4432      	add	r2, r6
 8015730:	60a3      	str	r3, [r4, #8]
 8015732:	6022      	str	r2, [r4, #0]
 8015734:	2000      	movs	r0, #0
 8015736:	e7db      	b.n	80156f0 <__ssputs_r+0x58>
 8015738:	462a      	mov	r2, r5
 801573a:	f7ff ff87 	bl	801564c <_realloc_r>
 801573e:	4606      	mov	r6, r0
 8015740:	2800      	cmp	r0, #0
 8015742:	d1e1      	bne.n	8015708 <__ssputs_r+0x70>
 8015744:	6921      	ldr	r1, [r4, #16]
 8015746:	4650      	mov	r0, sl
 8015748:	f7fb fe18 	bl	801137c <_free_r>
 801574c:	e7c7      	b.n	80156de <__ssputs_r+0x46>
	...

08015750 <_svfiprintf_r>:
 8015750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015754:	4698      	mov	r8, r3
 8015756:	898b      	ldrh	r3, [r1, #12]
 8015758:	061b      	lsls	r3, r3, #24
 801575a:	b09d      	sub	sp, #116	; 0x74
 801575c:	4607      	mov	r7, r0
 801575e:	460d      	mov	r5, r1
 8015760:	4614      	mov	r4, r2
 8015762:	d50e      	bpl.n	8015782 <_svfiprintf_r+0x32>
 8015764:	690b      	ldr	r3, [r1, #16]
 8015766:	b963      	cbnz	r3, 8015782 <_svfiprintf_r+0x32>
 8015768:	2140      	movs	r1, #64	; 0x40
 801576a:	f7fb fe57 	bl	801141c <_malloc_r>
 801576e:	6028      	str	r0, [r5, #0]
 8015770:	6128      	str	r0, [r5, #16]
 8015772:	b920      	cbnz	r0, 801577e <_svfiprintf_r+0x2e>
 8015774:	230c      	movs	r3, #12
 8015776:	603b      	str	r3, [r7, #0]
 8015778:	f04f 30ff 	mov.w	r0, #4294967295
 801577c:	e0d1      	b.n	8015922 <_svfiprintf_r+0x1d2>
 801577e:	2340      	movs	r3, #64	; 0x40
 8015780:	616b      	str	r3, [r5, #20]
 8015782:	2300      	movs	r3, #0
 8015784:	9309      	str	r3, [sp, #36]	; 0x24
 8015786:	2320      	movs	r3, #32
 8015788:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801578c:	f8cd 800c 	str.w	r8, [sp, #12]
 8015790:	2330      	movs	r3, #48	; 0x30
 8015792:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801593c <_svfiprintf_r+0x1ec>
 8015796:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801579a:	f04f 0901 	mov.w	r9, #1
 801579e:	4623      	mov	r3, r4
 80157a0:	469a      	mov	sl, r3
 80157a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80157a6:	b10a      	cbz	r2, 80157ac <_svfiprintf_r+0x5c>
 80157a8:	2a25      	cmp	r2, #37	; 0x25
 80157aa:	d1f9      	bne.n	80157a0 <_svfiprintf_r+0x50>
 80157ac:	ebba 0b04 	subs.w	fp, sl, r4
 80157b0:	d00b      	beq.n	80157ca <_svfiprintf_r+0x7a>
 80157b2:	465b      	mov	r3, fp
 80157b4:	4622      	mov	r2, r4
 80157b6:	4629      	mov	r1, r5
 80157b8:	4638      	mov	r0, r7
 80157ba:	f7ff ff6d 	bl	8015698 <__ssputs_r>
 80157be:	3001      	adds	r0, #1
 80157c0:	f000 80aa 	beq.w	8015918 <_svfiprintf_r+0x1c8>
 80157c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80157c6:	445a      	add	r2, fp
 80157c8:	9209      	str	r2, [sp, #36]	; 0x24
 80157ca:	f89a 3000 	ldrb.w	r3, [sl]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	f000 80a2 	beq.w	8015918 <_svfiprintf_r+0x1c8>
 80157d4:	2300      	movs	r3, #0
 80157d6:	f04f 32ff 	mov.w	r2, #4294967295
 80157da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80157de:	f10a 0a01 	add.w	sl, sl, #1
 80157e2:	9304      	str	r3, [sp, #16]
 80157e4:	9307      	str	r3, [sp, #28]
 80157e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80157ea:	931a      	str	r3, [sp, #104]	; 0x68
 80157ec:	4654      	mov	r4, sl
 80157ee:	2205      	movs	r2, #5
 80157f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157f4:	4851      	ldr	r0, [pc, #324]	; (801593c <_svfiprintf_r+0x1ec>)
 80157f6:	f7ea fd03 	bl	8000200 <memchr>
 80157fa:	9a04      	ldr	r2, [sp, #16]
 80157fc:	b9d8      	cbnz	r0, 8015836 <_svfiprintf_r+0xe6>
 80157fe:	06d0      	lsls	r0, r2, #27
 8015800:	bf44      	itt	mi
 8015802:	2320      	movmi	r3, #32
 8015804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015808:	0711      	lsls	r1, r2, #28
 801580a:	bf44      	itt	mi
 801580c:	232b      	movmi	r3, #43	; 0x2b
 801580e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015812:	f89a 3000 	ldrb.w	r3, [sl]
 8015816:	2b2a      	cmp	r3, #42	; 0x2a
 8015818:	d015      	beq.n	8015846 <_svfiprintf_r+0xf6>
 801581a:	9a07      	ldr	r2, [sp, #28]
 801581c:	4654      	mov	r4, sl
 801581e:	2000      	movs	r0, #0
 8015820:	f04f 0c0a 	mov.w	ip, #10
 8015824:	4621      	mov	r1, r4
 8015826:	f811 3b01 	ldrb.w	r3, [r1], #1
 801582a:	3b30      	subs	r3, #48	; 0x30
 801582c:	2b09      	cmp	r3, #9
 801582e:	d94e      	bls.n	80158ce <_svfiprintf_r+0x17e>
 8015830:	b1b0      	cbz	r0, 8015860 <_svfiprintf_r+0x110>
 8015832:	9207      	str	r2, [sp, #28]
 8015834:	e014      	b.n	8015860 <_svfiprintf_r+0x110>
 8015836:	eba0 0308 	sub.w	r3, r0, r8
 801583a:	fa09 f303 	lsl.w	r3, r9, r3
 801583e:	4313      	orrs	r3, r2
 8015840:	9304      	str	r3, [sp, #16]
 8015842:	46a2      	mov	sl, r4
 8015844:	e7d2      	b.n	80157ec <_svfiprintf_r+0x9c>
 8015846:	9b03      	ldr	r3, [sp, #12]
 8015848:	1d19      	adds	r1, r3, #4
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	9103      	str	r1, [sp, #12]
 801584e:	2b00      	cmp	r3, #0
 8015850:	bfbb      	ittet	lt
 8015852:	425b      	neglt	r3, r3
 8015854:	f042 0202 	orrlt.w	r2, r2, #2
 8015858:	9307      	strge	r3, [sp, #28]
 801585a:	9307      	strlt	r3, [sp, #28]
 801585c:	bfb8      	it	lt
 801585e:	9204      	strlt	r2, [sp, #16]
 8015860:	7823      	ldrb	r3, [r4, #0]
 8015862:	2b2e      	cmp	r3, #46	; 0x2e
 8015864:	d10c      	bne.n	8015880 <_svfiprintf_r+0x130>
 8015866:	7863      	ldrb	r3, [r4, #1]
 8015868:	2b2a      	cmp	r3, #42	; 0x2a
 801586a:	d135      	bne.n	80158d8 <_svfiprintf_r+0x188>
 801586c:	9b03      	ldr	r3, [sp, #12]
 801586e:	1d1a      	adds	r2, r3, #4
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	9203      	str	r2, [sp, #12]
 8015874:	2b00      	cmp	r3, #0
 8015876:	bfb8      	it	lt
 8015878:	f04f 33ff 	movlt.w	r3, #4294967295
 801587c:	3402      	adds	r4, #2
 801587e:	9305      	str	r3, [sp, #20]
 8015880:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801594c <_svfiprintf_r+0x1fc>
 8015884:	7821      	ldrb	r1, [r4, #0]
 8015886:	2203      	movs	r2, #3
 8015888:	4650      	mov	r0, sl
 801588a:	f7ea fcb9 	bl	8000200 <memchr>
 801588e:	b140      	cbz	r0, 80158a2 <_svfiprintf_r+0x152>
 8015890:	2340      	movs	r3, #64	; 0x40
 8015892:	eba0 000a 	sub.w	r0, r0, sl
 8015896:	fa03 f000 	lsl.w	r0, r3, r0
 801589a:	9b04      	ldr	r3, [sp, #16]
 801589c:	4303      	orrs	r3, r0
 801589e:	3401      	adds	r4, #1
 80158a0:	9304      	str	r3, [sp, #16]
 80158a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80158a6:	4826      	ldr	r0, [pc, #152]	; (8015940 <_svfiprintf_r+0x1f0>)
 80158a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80158ac:	2206      	movs	r2, #6
 80158ae:	f7ea fca7 	bl	8000200 <memchr>
 80158b2:	2800      	cmp	r0, #0
 80158b4:	d038      	beq.n	8015928 <_svfiprintf_r+0x1d8>
 80158b6:	4b23      	ldr	r3, [pc, #140]	; (8015944 <_svfiprintf_r+0x1f4>)
 80158b8:	bb1b      	cbnz	r3, 8015902 <_svfiprintf_r+0x1b2>
 80158ba:	9b03      	ldr	r3, [sp, #12]
 80158bc:	3307      	adds	r3, #7
 80158be:	f023 0307 	bic.w	r3, r3, #7
 80158c2:	3308      	adds	r3, #8
 80158c4:	9303      	str	r3, [sp, #12]
 80158c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158c8:	4433      	add	r3, r6
 80158ca:	9309      	str	r3, [sp, #36]	; 0x24
 80158cc:	e767      	b.n	801579e <_svfiprintf_r+0x4e>
 80158ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80158d2:	460c      	mov	r4, r1
 80158d4:	2001      	movs	r0, #1
 80158d6:	e7a5      	b.n	8015824 <_svfiprintf_r+0xd4>
 80158d8:	2300      	movs	r3, #0
 80158da:	3401      	adds	r4, #1
 80158dc:	9305      	str	r3, [sp, #20]
 80158de:	4619      	mov	r1, r3
 80158e0:	f04f 0c0a 	mov.w	ip, #10
 80158e4:	4620      	mov	r0, r4
 80158e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158ea:	3a30      	subs	r2, #48	; 0x30
 80158ec:	2a09      	cmp	r2, #9
 80158ee:	d903      	bls.n	80158f8 <_svfiprintf_r+0x1a8>
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d0c5      	beq.n	8015880 <_svfiprintf_r+0x130>
 80158f4:	9105      	str	r1, [sp, #20]
 80158f6:	e7c3      	b.n	8015880 <_svfiprintf_r+0x130>
 80158f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80158fc:	4604      	mov	r4, r0
 80158fe:	2301      	movs	r3, #1
 8015900:	e7f0      	b.n	80158e4 <_svfiprintf_r+0x194>
 8015902:	ab03      	add	r3, sp, #12
 8015904:	9300      	str	r3, [sp, #0]
 8015906:	462a      	mov	r2, r5
 8015908:	4b0f      	ldr	r3, [pc, #60]	; (8015948 <_svfiprintf_r+0x1f8>)
 801590a:	a904      	add	r1, sp, #16
 801590c:	4638      	mov	r0, r7
 801590e:	f7fb fe7f 	bl	8011610 <_printf_float>
 8015912:	1c42      	adds	r2, r0, #1
 8015914:	4606      	mov	r6, r0
 8015916:	d1d6      	bne.n	80158c6 <_svfiprintf_r+0x176>
 8015918:	89ab      	ldrh	r3, [r5, #12]
 801591a:	065b      	lsls	r3, r3, #25
 801591c:	f53f af2c 	bmi.w	8015778 <_svfiprintf_r+0x28>
 8015920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015922:	b01d      	add	sp, #116	; 0x74
 8015924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015928:	ab03      	add	r3, sp, #12
 801592a:	9300      	str	r3, [sp, #0]
 801592c:	462a      	mov	r2, r5
 801592e:	4b06      	ldr	r3, [pc, #24]	; (8015948 <_svfiprintf_r+0x1f8>)
 8015930:	a904      	add	r1, sp, #16
 8015932:	4638      	mov	r0, r7
 8015934:	f7fc f910 	bl	8011b58 <_printf_i>
 8015938:	e7eb      	b.n	8015912 <_svfiprintf_r+0x1c2>
 801593a:	bf00      	nop
 801593c:	08017a34 	.word	0x08017a34
 8015940:	08017a3e 	.word	0x08017a3e
 8015944:	08011611 	.word	0x08011611
 8015948:	08015699 	.word	0x08015699
 801594c:	08017a3a 	.word	0x08017a3a

08015950 <_sungetc_r>:
 8015950:	b538      	push	{r3, r4, r5, lr}
 8015952:	1c4b      	adds	r3, r1, #1
 8015954:	4614      	mov	r4, r2
 8015956:	d103      	bne.n	8015960 <_sungetc_r+0x10>
 8015958:	f04f 35ff 	mov.w	r5, #4294967295
 801595c:	4628      	mov	r0, r5
 801595e:	bd38      	pop	{r3, r4, r5, pc}
 8015960:	8993      	ldrh	r3, [r2, #12]
 8015962:	f023 0320 	bic.w	r3, r3, #32
 8015966:	8193      	strh	r3, [r2, #12]
 8015968:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801596a:	6852      	ldr	r2, [r2, #4]
 801596c:	b2cd      	uxtb	r5, r1
 801596e:	b18b      	cbz	r3, 8015994 <_sungetc_r+0x44>
 8015970:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015972:	4293      	cmp	r3, r2
 8015974:	dd08      	ble.n	8015988 <_sungetc_r+0x38>
 8015976:	6823      	ldr	r3, [r4, #0]
 8015978:	1e5a      	subs	r2, r3, #1
 801597a:	6022      	str	r2, [r4, #0]
 801597c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015980:	6863      	ldr	r3, [r4, #4]
 8015982:	3301      	adds	r3, #1
 8015984:	6063      	str	r3, [r4, #4]
 8015986:	e7e9      	b.n	801595c <_sungetc_r+0xc>
 8015988:	4621      	mov	r1, r4
 801598a:	f000 fca5 	bl	80162d8 <__submore>
 801598e:	2800      	cmp	r0, #0
 8015990:	d0f1      	beq.n	8015976 <_sungetc_r+0x26>
 8015992:	e7e1      	b.n	8015958 <_sungetc_r+0x8>
 8015994:	6921      	ldr	r1, [r4, #16]
 8015996:	6823      	ldr	r3, [r4, #0]
 8015998:	b151      	cbz	r1, 80159b0 <_sungetc_r+0x60>
 801599a:	4299      	cmp	r1, r3
 801599c:	d208      	bcs.n	80159b0 <_sungetc_r+0x60>
 801599e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80159a2:	42a9      	cmp	r1, r5
 80159a4:	d104      	bne.n	80159b0 <_sungetc_r+0x60>
 80159a6:	3b01      	subs	r3, #1
 80159a8:	3201      	adds	r2, #1
 80159aa:	6023      	str	r3, [r4, #0]
 80159ac:	6062      	str	r2, [r4, #4]
 80159ae:	e7d5      	b.n	801595c <_sungetc_r+0xc>
 80159b0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80159b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159b8:	6363      	str	r3, [r4, #52]	; 0x34
 80159ba:	2303      	movs	r3, #3
 80159bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80159be:	4623      	mov	r3, r4
 80159c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80159c4:	6023      	str	r3, [r4, #0]
 80159c6:	2301      	movs	r3, #1
 80159c8:	e7dc      	b.n	8015984 <_sungetc_r+0x34>

080159ca <__ssrefill_r>:
 80159ca:	b510      	push	{r4, lr}
 80159cc:	460c      	mov	r4, r1
 80159ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80159d0:	b169      	cbz	r1, 80159ee <__ssrefill_r+0x24>
 80159d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159d6:	4299      	cmp	r1, r3
 80159d8:	d001      	beq.n	80159de <__ssrefill_r+0x14>
 80159da:	f7fb fccf 	bl	801137c <_free_r>
 80159de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80159e0:	6063      	str	r3, [r4, #4]
 80159e2:	2000      	movs	r0, #0
 80159e4:	6360      	str	r0, [r4, #52]	; 0x34
 80159e6:	b113      	cbz	r3, 80159ee <__ssrefill_r+0x24>
 80159e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80159ea:	6023      	str	r3, [r4, #0]
 80159ec:	bd10      	pop	{r4, pc}
 80159ee:	6923      	ldr	r3, [r4, #16]
 80159f0:	6023      	str	r3, [r4, #0]
 80159f2:	2300      	movs	r3, #0
 80159f4:	6063      	str	r3, [r4, #4]
 80159f6:	89a3      	ldrh	r3, [r4, #12]
 80159f8:	f043 0320 	orr.w	r3, r3, #32
 80159fc:	81a3      	strh	r3, [r4, #12]
 80159fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015a02:	e7f3      	b.n	80159ec <__ssrefill_r+0x22>

08015a04 <__ssvfiscanf_r>:
 8015a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a08:	460c      	mov	r4, r1
 8015a0a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8015a0e:	2100      	movs	r1, #0
 8015a10:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015a14:	49b2      	ldr	r1, [pc, #712]	; (8015ce0 <__ssvfiscanf_r+0x2dc>)
 8015a16:	91a0      	str	r1, [sp, #640]	; 0x280
 8015a18:	f10d 0804 	add.w	r8, sp, #4
 8015a1c:	49b1      	ldr	r1, [pc, #708]	; (8015ce4 <__ssvfiscanf_r+0x2e0>)
 8015a1e:	4fb2      	ldr	r7, [pc, #712]	; (8015ce8 <__ssvfiscanf_r+0x2e4>)
 8015a20:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8015cec <__ssvfiscanf_r+0x2e8>
 8015a24:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015a28:	4606      	mov	r6, r0
 8015a2a:	91a1      	str	r1, [sp, #644]	; 0x284
 8015a2c:	9300      	str	r3, [sp, #0]
 8015a2e:	f892 a000 	ldrb.w	sl, [r2]
 8015a32:	f1ba 0f00 	cmp.w	sl, #0
 8015a36:	f000 8151 	beq.w	8015cdc <__ssvfiscanf_r+0x2d8>
 8015a3a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8015a3e:	f013 0308 	ands.w	r3, r3, #8
 8015a42:	f102 0501 	add.w	r5, r2, #1
 8015a46:	d019      	beq.n	8015a7c <__ssvfiscanf_r+0x78>
 8015a48:	6863      	ldr	r3, [r4, #4]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	dd0f      	ble.n	8015a6e <__ssvfiscanf_r+0x6a>
 8015a4e:	6823      	ldr	r3, [r4, #0]
 8015a50:	781a      	ldrb	r2, [r3, #0]
 8015a52:	5cba      	ldrb	r2, [r7, r2]
 8015a54:	0712      	lsls	r2, r2, #28
 8015a56:	d401      	bmi.n	8015a5c <__ssvfiscanf_r+0x58>
 8015a58:	462a      	mov	r2, r5
 8015a5a:	e7e8      	b.n	8015a2e <__ssvfiscanf_r+0x2a>
 8015a5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015a5e:	3201      	adds	r2, #1
 8015a60:	9245      	str	r2, [sp, #276]	; 0x114
 8015a62:	6862      	ldr	r2, [r4, #4]
 8015a64:	3301      	adds	r3, #1
 8015a66:	3a01      	subs	r2, #1
 8015a68:	6062      	str	r2, [r4, #4]
 8015a6a:	6023      	str	r3, [r4, #0]
 8015a6c:	e7ec      	b.n	8015a48 <__ssvfiscanf_r+0x44>
 8015a6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015a70:	4621      	mov	r1, r4
 8015a72:	4630      	mov	r0, r6
 8015a74:	4798      	blx	r3
 8015a76:	2800      	cmp	r0, #0
 8015a78:	d0e9      	beq.n	8015a4e <__ssvfiscanf_r+0x4a>
 8015a7a:	e7ed      	b.n	8015a58 <__ssvfiscanf_r+0x54>
 8015a7c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8015a80:	f040 8083 	bne.w	8015b8a <__ssvfiscanf_r+0x186>
 8015a84:	9341      	str	r3, [sp, #260]	; 0x104
 8015a86:	9343      	str	r3, [sp, #268]	; 0x10c
 8015a88:	7853      	ldrb	r3, [r2, #1]
 8015a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8015a8c:	bf02      	ittt	eq
 8015a8e:	2310      	moveq	r3, #16
 8015a90:	1c95      	addeq	r5, r2, #2
 8015a92:	9341      	streq	r3, [sp, #260]	; 0x104
 8015a94:	220a      	movs	r2, #10
 8015a96:	46ab      	mov	fp, r5
 8015a98:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8015a9c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015aa0:	2b09      	cmp	r3, #9
 8015aa2:	d91d      	bls.n	8015ae0 <__ssvfiscanf_r+0xdc>
 8015aa4:	4891      	ldr	r0, [pc, #580]	; (8015cec <__ssvfiscanf_r+0x2e8>)
 8015aa6:	2203      	movs	r2, #3
 8015aa8:	f7ea fbaa 	bl	8000200 <memchr>
 8015aac:	b140      	cbz	r0, 8015ac0 <__ssvfiscanf_r+0xbc>
 8015aae:	2301      	movs	r3, #1
 8015ab0:	eba0 0009 	sub.w	r0, r0, r9
 8015ab4:	fa03 f000 	lsl.w	r0, r3, r0
 8015ab8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015aba:	4318      	orrs	r0, r3
 8015abc:	9041      	str	r0, [sp, #260]	; 0x104
 8015abe:	465d      	mov	r5, fp
 8015ac0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015ac4:	2b78      	cmp	r3, #120	; 0x78
 8015ac6:	d806      	bhi.n	8015ad6 <__ssvfiscanf_r+0xd2>
 8015ac8:	2b57      	cmp	r3, #87	; 0x57
 8015aca:	d810      	bhi.n	8015aee <__ssvfiscanf_r+0xea>
 8015acc:	2b25      	cmp	r3, #37	; 0x25
 8015ace:	d05c      	beq.n	8015b8a <__ssvfiscanf_r+0x186>
 8015ad0:	d856      	bhi.n	8015b80 <__ssvfiscanf_r+0x17c>
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d074      	beq.n	8015bc0 <__ssvfiscanf_r+0x1bc>
 8015ad6:	2303      	movs	r3, #3
 8015ad8:	9347      	str	r3, [sp, #284]	; 0x11c
 8015ada:	230a      	movs	r3, #10
 8015adc:	9342      	str	r3, [sp, #264]	; 0x108
 8015ade:	e081      	b.n	8015be4 <__ssvfiscanf_r+0x1e0>
 8015ae0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015ae2:	fb02 1303 	mla	r3, r2, r3, r1
 8015ae6:	3b30      	subs	r3, #48	; 0x30
 8015ae8:	9343      	str	r3, [sp, #268]	; 0x10c
 8015aea:	465d      	mov	r5, fp
 8015aec:	e7d3      	b.n	8015a96 <__ssvfiscanf_r+0x92>
 8015aee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8015af2:	2a20      	cmp	r2, #32
 8015af4:	d8ef      	bhi.n	8015ad6 <__ssvfiscanf_r+0xd2>
 8015af6:	a101      	add	r1, pc, #4	; (adr r1, 8015afc <__ssvfiscanf_r+0xf8>)
 8015af8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015afc:	08015bcf 	.word	0x08015bcf
 8015b00:	08015ad7 	.word	0x08015ad7
 8015b04:	08015ad7 	.word	0x08015ad7
 8015b08:	08015c2d 	.word	0x08015c2d
 8015b0c:	08015ad7 	.word	0x08015ad7
 8015b10:	08015ad7 	.word	0x08015ad7
 8015b14:	08015ad7 	.word	0x08015ad7
 8015b18:	08015ad7 	.word	0x08015ad7
 8015b1c:	08015ad7 	.word	0x08015ad7
 8015b20:	08015ad7 	.word	0x08015ad7
 8015b24:	08015ad7 	.word	0x08015ad7
 8015b28:	08015c43 	.word	0x08015c43
 8015b2c:	08015c19 	.word	0x08015c19
 8015b30:	08015b87 	.word	0x08015b87
 8015b34:	08015b87 	.word	0x08015b87
 8015b38:	08015b87 	.word	0x08015b87
 8015b3c:	08015ad7 	.word	0x08015ad7
 8015b40:	08015c1d 	.word	0x08015c1d
 8015b44:	08015ad7 	.word	0x08015ad7
 8015b48:	08015ad7 	.word	0x08015ad7
 8015b4c:	08015ad7 	.word	0x08015ad7
 8015b50:	08015ad7 	.word	0x08015ad7
 8015b54:	08015c53 	.word	0x08015c53
 8015b58:	08015c25 	.word	0x08015c25
 8015b5c:	08015bc7 	.word	0x08015bc7
 8015b60:	08015ad7 	.word	0x08015ad7
 8015b64:	08015ad7 	.word	0x08015ad7
 8015b68:	08015c4f 	.word	0x08015c4f
 8015b6c:	08015ad7 	.word	0x08015ad7
 8015b70:	08015c19 	.word	0x08015c19
 8015b74:	08015ad7 	.word	0x08015ad7
 8015b78:	08015ad7 	.word	0x08015ad7
 8015b7c:	08015bcf 	.word	0x08015bcf
 8015b80:	3b45      	subs	r3, #69	; 0x45
 8015b82:	2b02      	cmp	r3, #2
 8015b84:	d8a7      	bhi.n	8015ad6 <__ssvfiscanf_r+0xd2>
 8015b86:	2305      	movs	r3, #5
 8015b88:	e02b      	b.n	8015be2 <__ssvfiscanf_r+0x1de>
 8015b8a:	6863      	ldr	r3, [r4, #4]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	dd0d      	ble.n	8015bac <__ssvfiscanf_r+0x1a8>
 8015b90:	6823      	ldr	r3, [r4, #0]
 8015b92:	781a      	ldrb	r2, [r3, #0]
 8015b94:	4552      	cmp	r2, sl
 8015b96:	f040 80a1 	bne.w	8015cdc <__ssvfiscanf_r+0x2d8>
 8015b9a:	3301      	adds	r3, #1
 8015b9c:	6862      	ldr	r2, [r4, #4]
 8015b9e:	6023      	str	r3, [r4, #0]
 8015ba0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015ba2:	3a01      	subs	r2, #1
 8015ba4:	3301      	adds	r3, #1
 8015ba6:	6062      	str	r2, [r4, #4]
 8015ba8:	9345      	str	r3, [sp, #276]	; 0x114
 8015baa:	e755      	b.n	8015a58 <__ssvfiscanf_r+0x54>
 8015bac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015bae:	4621      	mov	r1, r4
 8015bb0:	4630      	mov	r0, r6
 8015bb2:	4798      	blx	r3
 8015bb4:	2800      	cmp	r0, #0
 8015bb6:	d0eb      	beq.n	8015b90 <__ssvfiscanf_r+0x18c>
 8015bb8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015bba:	2800      	cmp	r0, #0
 8015bbc:	f040 8084 	bne.w	8015cc8 <__ssvfiscanf_r+0x2c4>
 8015bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8015bc4:	e086      	b.n	8015cd4 <__ssvfiscanf_r+0x2d0>
 8015bc6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015bc8:	f042 0220 	orr.w	r2, r2, #32
 8015bcc:	9241      	str	r2, [sp, #260]	; 0x104
 8015bce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015bd4:	9241      	str	r2, [sp, #260]	; 0x104
 8015bd6:	2210      	movs	r2, #16
 8015bd8:	2b6f      	cmp	r3, #111	; 0x6f
 8015bda:	9242      	str	r2, [sp, #264]	; 0x108
 8015bdc:	bf34      	ite	cc
 8015bde:	2303      	movcc	r3, #3
 8015be0:	2304      	movcs	r3, #4
 8015be2:	9347      	str	r3, [sp, #284]	; 0x11c
 8015be4:	6863      	ldr	r3, [r4, #4]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	dd41      	ble.n	8015c6e <__ssvfiscanf_r+0x26a>
 8015bea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015bec:	0659      	lsls	r1, r3, #25
 8015bee:	d404      	bmi.n	8015bfa <__ssvfiscanf_r+0x1f6>
 8015bf0:	6823      	ldr	r3, [r4, #0]
 8015bf2:	781a      	ldrb	r2, [r3, #0]
 8015bf4:	5cba      	ldrb	r2, [r7, r2]
 8015bf6:	0712      	lsls	r2, r2, #28
 8015bf8:	d440      	bmi.n	8015c7c <__ssvfiscanf_r+0x278>
 8015bfa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015bfc:	2b02      	cmp	r3, #2
 8015bfe:	dc4f      	bgt.n	8015ca0 <__ssvfiscanf_r+0x29c>
 8015c00:	466b      	mov	r3, sp
 8015c02:	4622      	mov	r2, r4
 8015c04:	a941      	add	r1, sp, #260	; 0x104
 8015c06:	4630      	mov	r0, r6
 8015c08:	f000 f9ce 	bl	8015fa8 <_scanf_chars>
 8015c0c:	2801      	cmp	r0, #1
 8015c0e:	d065      	beq.n	8015cdc <__ssvfiscanf_r+0x2d8>
 8015c10:	2802      	cmp	r0, #2
 8015c12:	f47f af21 	bne.w	8015a58 <__ssvfiscanf_r+0x54>
 8015c16:	e7cf      	b.n	8015bb8 <__ssvfiscanf_r+0x1b4>
 8015c18:	220a      	movs	r2, #10
 8015c1a:	e7dd      	b.n	8015bd8 <__ssvfiscanf_r+0x1d4>
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	9342      	str	r3, [sp, #264]	; 0x108
 8015c20:	2303      	movs	r3, #3
 8015c22:	e7de      	b.n	8015be2 <__ssvfiscanf_r+0x1de>
 8015c24:	2308      	movs	r3, #8
 8015c26:	9342      	str	r3, [sp, #264]	; 0x108
 8015c28:	2304      	movs	r3, #4
 8015c2a:	e7da      	b.n	8015be2 <__ssvfiscanf_r+0x1de>
 8015c2c:	4629      	mov	r1, r5
 8015c2e:	4640      	mov	r0, r8
 8015c30:	f000 fb18 	bl	8016264 <__sccl>
 8015c34:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c3a:	9341      	str	r3, [sp, #260]	; 0x104
 8015c3c:	4605      	mov	r5, r0
 8015c3e:	2301      	movs	r3, #1
 8015c40:	e7cf      	b.n	8015be2 <__ssvfiscanf_r+0x1de>
 8015c42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c48:	9341      	str	r3, [sp, #260]	; 0x104
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	e7c9      	b.n	8015be2 <__ssvfiscanf_r+0x1de>
 8015c4e:	2302      	movs	r3, #2
 8015c50:	e7c7      	b.n	8015be2 <__ssvfiscanf_r+0x1de>
 8015c52:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015c54:	06c3      	lsls	r3, r0, #27
 8015c56:	f53f aeff 	bmi.w	8015a58 <__ssvfiscanf_r+0x54>
 8015c5a:	9b00      	ldr	r3, [sp, #0]
 8015c5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015c5e:	1d19      	adds	r1, r3, #4
 8015c60:	9100      	str	r1, [sp, #0]
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	07c0      	lsls	r0, r0, #31
 8015c66:	bf4c      	ite	mi
 8015c68:	801a      	strhmi	r2, [r3, #0]
 8015c6a:	601a      	strpl	r2, [r3, #0]
 8015c6c:	e6f4      	b.n	8015a58 <__ssvfiscanf_r+0x54>
 8015c6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015c70:	4621      	mov	r1, r4
 8015c72:	4630      	mov	r0, r6
 8015c74:	4798      	blx	r3
 8015c76:	2800      	cmp	r0, #0
 8015c78:	d0b7      	beq.n	8015bea <__ssvfiscanf_r+0x1e6>
 8015c7a:	e79d      	b.n	8015bb8 <__ssvfiscanf_r+0x1b4>
 8015c7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015c7e:	3201      	adds	r2, #1
 8015c80:	9245      	str	r2, [sp, #276]	; 0x114
 8015c82:	6862      	ldr	r2, [r4, #4]
 8015c84:	3a01      	subs	r2, #1
 8015c86:	2a00      	cmp	r2, #0
 8015c88:	6062      	str	r2, [r4, #4]
 8015c8a:	dd02      	ble.n	8015c92 <__ssvfiscanf_r+0x28e>
 8015c8c:	3301      	adds	r3, #1
 8015c8e:	6023      	str	r3, [r4, #0]
 8015c90:	e7ae      	b.n	8015bf0 <__ssvfiscanf_r+0x1ec>
 8015c92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015c94:	4621      	mov	r1, r4
 8015c96:	4630      	mov	r0, r6
 8015c98:	4798      	blx	r3
 8015c9a:	2800      	cmp	r0, #0
 8015c9c:	d0a8      	beq.n	8015bf0 <__ssvfiscanf_r+0x1ec>
 8015c9e:	e78b      	b.n	8015bb8 <__ssvfiscanf_r+0x1b4>
 8015ca0:	2b04      	cmp	r3, #4
 8015ca2:	dc06      	bgt.n	8015cb2 <__ssvfiscanf_r+0x2ae>
 8015ca4:	466b      	mov	r3, sp
 8015ca6:	4622      	mov	r2, r4
 8015ca8:	a941      	add	r1, sp, #260	; 0x104
 8015caa:	4630      	mov	r0, r6
 8015cac:	f000 f9d4 	bl	8016058 <_scanf_i>
 8015cb0:	e7ac      	b.n	8015c0c <__ssvfiscanf_r+0x208>
 8015cb2:	4b0f      	ldr	r3, [pc, #60]	; (8015cf0 <__ssvfiscanf_r+0x2ec>)
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	f43f aecf 	beq.w	8015a58 <__ssvfiscanf_r+0x54>
 8015cba:	466b      	mov	r3, sp
 8015cbc:	4622      	mov	r2, r4
 8015cbe:	a941      	add	r1, sp, #260	; 0x104
 8015cc0:	4630      	mov	r0, r6
 8015cc2:	f7fc f86f 	bl	8011da4 <_scanf_float>
 8015cc6:	e7a1      	b.n	8015c0c <__ssvfiscanf_r+0x208>
 8015cc8:	89a3      	ldrh	r3, [r4, #12]
 8015cca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015cce:	bf18      	it	ne
 8015cd0:	f04f 30ff 	movne.w	r0, #4294967295
 8015cd4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8015cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cdc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015cde:	e7f9      	b.n	8015cd4 <__ssvfiscanf_r+0x2d0>
 8015ce0:	08015951 	.word	0x08015951
 8015ce4:	080159cb 	.word	0x080159cb
 8015ce8:	08017599 	.word	0x08017599
 8015cec:	08017a3a 	.word	0x08017a3a
 8015cf0:	08011da5 	.word	0x08011da5

08015cf4 <__sfputc_r>:
 8015cf4:	6893      	ldr	r3, [r2, #8]
 8015cf6:	3b01      	subs	r3, #1
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	b410      	push	{r4}
 8015cfc:	6093      	str	r3, [r2, #8]
 8015cfe:	da08      	bge.n	8015d12 <__sfputc_r+0x1e>
 8015d00:	6994      	ldr	r4, [r2, #24]
 8015d02:	42a3      	cmp	r3, r4
 8015d04:	db01      	blt.n	8015d0a <__sfputc_r+0x16>
 8015d06:	290a      	cmp	r1, #10
 8015d08:	d103      	bne.n	8015d12 <__sfputc_r+0x1e>
 8015d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d0e:	f7fd bb7f 	b.w	8013410 <__swbuf_r>
 8015d12:	6813      	ldr	r3, [r2, #0]
 8015d14:	1c58      	adds	r0, r3, #1
 8015d16:	6010      	str	r0, [r2, #0]
 8015d18:	7019      	strb	r1, [r3, #0]
 8015d1a:	4608      	mov	r0, r1
 8015d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d20:	4770      	bx	lr

08015d22 <__sfputs_r>:
 8015d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d24:	4606      	mov	r6, r0
 8015d26:	460f      	mov	r7, r1
 8015d28:	4614      	mov	r4, r2
 8015d2a:	18d5      	adds	r5, r2, r3
 8015d2c:	42ac      	cmp	r4, r5
 8015d2e:	d101      	bne.n	8015d34 <__sfputs_r+0x12>
 8015d30:	2000      	movs	r0, #0
 8015d32:	e007      	b.n	8015d44 <__sfputs_r+0x22>
 8015d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d38:	463a      	mov	r2, r7
 8015d3a:	4630      	mov	r0, r6
 8015d3c:	f7ff ffda 	bl	8015cf4 <__sfputc_r>
 8015d40:	1c43      	adds	r3, r0, #1
 8015d42:	d1f3      	bne.n	8015d2c <__sfputs_r+0xa>
 8015d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015d48 <_vfiprintf_r>:
 8015d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d4c:	460d      	mov	r5, r1
 8015d4e:	b09d      	sub	sp, #116	; 0x74
 8015d50:	4614      	mov	r4, r2
 8015d52:	4698      	mov	r8, r3
 8015d54:	4606      	mov	r6, r0
 8015d56:	b118      	cbz	r0, 8015d60 <_vfiprintf_r+0x18>
 8015d58:	6983      	ldr	r3, [r0, #24]
 8015d5a:	b90b      	cbnz	r3, 8015d60 <_vfiprintf_r+0x18>
 8015d5c:	f7fb fa10 	bl	8011180 <__sinit>
 8015d60:	4b89      	ldr	r3, [pc, #548]	; (8015f88 <_vfiprintf_r+0x240>)
 8015d62:	429d      	cmp	r5, r3
 8015d64:	d11b      	bne.n	8015d9e <_vfiprintf_r+0x56>
 8015d66:	6875      	ldr	r5, [r6, #4]
 8015d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d6a:	07d9      	lsls	r1, r3, #31
 8015d6c:	d405      	bmi.n	8015d7a <_vfiprintf_r+0x32>
 8015d6e:	89ab      	ldrh	r3, [r5, #12]
 8015d70:	059a      	lsls	r2, r3, #22
 8015d72:	d402      	bmi.n	8015d7a <_vfiprintf_r+0x32>
 8015d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d76:	f7fb fac6 	bl	8011306 <__retarget_lock_acquire_recursive>
 8015d7a:	89ab      	ldrh	r3, [r5, #12]
 8015d7c:	071b      	lsls	r3, r3, #28
 8015d7e:	d501      	bpl.n	8015d84 <_vfiprintf_r+0x3c>
 8015d80:	692b      	ldr	r3, [r5, #16]
 8015d82:	b9eb      	cbnz	r3, 8015dc0 <_vfiprintf_r+0x78>
 8015d84:	4629      	mov	r1, r5
 8015d86:	4630      	mov	r0, r6
 8015d88:	f7fd fba6 	bl	80134d8 <__swsetup_r>
 8015d8c:	b1c0      	cbz	r0, 8015dc0 <_vfiprintf_r+0x78>
 8015d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d90:	07dc      	lsls	r4, r3, #31
 8015d92:	d50e      	bpl.n	8015db2 <_vfiprintf_r+0x6a>
 8015d94:	f04f 30ff 	mov.w	r0, #4294967295
 8015d98:	b01d      	add	sp, #116	; 0x74
 8015d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d9e:	4b7b      	ldr	r3, [pc, #492]	; (8015f8c <_vfiprintf_r+0x244>)
 8015da0:	429d      	cmp	r5, r3
 8015da2:	d101      	bne.n	8015da8 <_vfiprintf_r+0x60>
 8015da4:	68b5      	ldr	r5, [r6, #8]
 8015da6:	e7df      	b.n	8015d68 <_vfiprintf_r+0x20>
 8015da8:	4b79      	ldr	r3, [pc, #484]	; (8015f90 <_vfiprintf_r+0x248>)
 8015daa:	429d      	cmp	r5, r3
 8015dac:	bf08      	it	eq
 8015dae:	68f5      	ldreq	r5, [r6, #12]
 8015db0:	e7da      	b.n	8015d68 <_vfiprintf_r+0x20>
 8015db2:	89ab      	ldrh	r3, [r5, #12]
 8015db4:	0598      	lsls	r0, r3, #22
 8015db6:	d4ed      	bmi.n	8015d94 <_vfiprintf_r+0x4c>
 8015db8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015dba:	f7fb faa5 	bl	8011308 <__retarget_lock_release_recursive>
 8015dbe:	e7e9      	b.n	8015d94 <_vfiprintf_r+0x4c>
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8015dc4:	2320      	movs	r3, #32
 8015dc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8015dce:	2330      	movs	r3, #48	; 0x30
 8015dd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015f94 <_vfiprintf_r+0x24c>
 8015dd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015dd8:	f04f 0901 	mov.w	r9, #1
 8015ddc:	4623      	mov	r3, r4
 8015dde:	469a      	mov	sl, r3
 8015de0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015de4:	b10a      	cbz	r2, 8015dea <_vfiprintf_r+0xa2>
 8015de6:	2a25      	cmp	r2, #37	; 0x25
 8015de8:	d1f9      	bne.n	8015dde <_vfiprintf_r+0x96>
 8015dea:	ebba 0b04 	subs.w	fp, sl, r4
 8015dee:	d00b      	beq.n	8015e08 <_vfiprintf_r+0xc0>
 8015df0:	465b      	mov	r3, fp
 8015df2:	4622      	mov	r2, r4
 8015df4:	4629      	mov	r1, r5
 8015df6:	4630      	mov	r0, r6
 8015df8:	f7ff ff93 	bl	8015d22 <__sfputs_r>
 8015dfc:	3001      	adds	r0, #1
 8015dfe:	f000 80aa 	beq.w	8015f56 <_vfiprintf_r+0x20e>
 8015e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015e04:	445a      	add	r2, fp
 8015e06:	9209      	str	r2, [sp, #36]	; 0x24
 8015e08:	f89a 3000 	ldrb.w	r3, [sl]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	f000 80a2 	beq.w	8015f56 <_vfiprintf_r+0x20e>
 8015e12:	2300      	movs	r3, #0
 8015e14:	f04f 32ff 	mov.w	r2, #4294967295
 8015e18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015e1c:	f10a 0a01 	add.w	sl, sl, #1
 8015e20:	9304      	str	r3, [sp, #16]
 8015e22:	9307      	str	r3, [sp, #28]
 8015e24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015e28:	931a      	str	r3, [sp, #104]	; 0x68
 8015e2a:	4654      	mov	r4, sl
 8015e2c:	2205      	movs	r2, #5
 8015e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e32:	4858      	ldr	r0, [pc, #352]	; (8015f94 <_vfiprintf_r+0x24c>)
 8015e34:	f7ea f9e4 	bl	8000200 <memchr>
 8015e38:	9a04      	ldr	r2, [sp, #16]
 8015e3a:	b9d8      	cbnz	r0, 8015e74 <_vfiprintf_r+0x12c>
 8015e3c:	06d1      	lsls	r1, r2, #27
 8015e3e:	bf44      	itt	mi
 8015e40:	2320      	movmi	r3, #32
 8015e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e46:	0713      	lsls	r3, r2, #28
 8015e48:	bf44      	itt	mi
 8015e4a:	232b      	movmi	r3, #43	; 0x2b
 8015e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015e50:	f89a 3000 	ldrb.w	r3, [sl]
 8015e54:	2b2a      	cmp	r3, #42	; 0x2a
 8015e56:	d015      	beq.n	8015e84 <_vfiprintf_r+0x13c>
 8015e58:	9a07      	ldr	r2, [sp, #28]
 8015e5a:	4654      	mov	r4, sl
 8015e5c:	2000      	movs	r0, #0
 8015e5e:	f04f 0c0a 	mov.w	ip, #10
 8015e62:	4621      	mov	r1, r4
 8015e64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e68:	3b30      	subs	r3, #48	; 0x30
 8015e6a:	2b09      	cmp	r3, #9
 8015e6c:	d94e      	bls.n	8015f0c <_vfiprintf_r+0x1c4>
 8015e6e:	b1b0      	cbz	r0, 8015e9e <_vfiprintf_r+0x156>
 8015e70:	9207      	str	r2, [sp, #28]
 8015e72:	e014      	b.n	8015e9e <_vfiprintf_r+0x156>
 8015e74:	eba0 0308 	sub.w	r3, r0, r8
 8015e78:	fa09 f303 	lsl.w	r3, r9, r3
 8015e7c:	4313      	orrs	r3, r2
 8015e7e:	9304      	str	r3, [sp, #16]
 8015e80:	46a2      	mov	sl, r4
 8015e82:	e7d2      	b.n	8015e2a <_vfiprintf_r+0xe2>
 8015e84:	9b03      	ldr	r3, [sp, #12]
 8015e86:	1d19      	adds	r1, r3, #4
 8015e88:	681b      	ldr	r3, [r3, #0]
 8015e8a:	9103      	str	r1, [sp, #12]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	bfbb      	ittet	lt
 8015e90:	425b      	neglt	r3, r3
 8015e92:	f042 0202 	orrlt.w	r2, r2, #2
 8015e96:	9307      	strge	r3, [sp, #28]
 8015e98:	9307      	strlt	r3, [sp, #28]
 8015e9a:	bfb8      	it	lt
 8015e9c:	9204      	strlt	r2, [sp, #16]
 8015e9e:	7823      	ldrb	r3, [r4, #0]
 8015ea0:	2b2e      	cmp	r3, #46	; 0x2e
 8015ea2:	d10c      	bne.n	8015ebe <_vfiprintf_r+0x176>
 8015ea4:	7863      	ldrb	r3, [r4, #1]
 8015ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8015ea8:	d135      	bne.n	8015f16 <_vfiprintf_r+0x1ce>
 8015eaa:	9b03      	ldr	r3, [sp, #12]
 8015eac:	1d1a      	adds	r2, r3, #4
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	9203      	str	r2, [sp, #12]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	bfb8      	it	lt
 8015eb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8015eba:	3402      	adds	r4, #2
 8015ebc:	9305      	str	r3, [sp, #20]
 8015ebe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015fa4 <_vfiprintf_r+0x25c>
 8015ec2:	7821      	ldrb	r1, [r4, #0]
 8015ec4:	2203      	movs	r2, #3
 8015ec6:	4650      	mov	r0, sl
 8015ec8:	f7ea f99a 	bl	8000200 <memchr>
 8015ecc:	b140      	cbz	r0, 8015ee0 <_vfiprintf_r+0x198>
 8015ece:	2340      	movs	r3, #64	; 0x40
 8015ed0:	eba0 000a 	sub.w	r0, r0, sl
 8015ed4:	fa03 f000 	lsl.w	r0, r3, r0
 8015ed8:	9b04      	ldr	r3, [sp, #16]
 8015eda:	4303      	orrs	r3, r0
 8015edc:	3401      	adds	r4, #1
 8015ede:	9304      	str	r3, [sp, #16]
 8015ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ee4:	482c      	ldr	r0, [pc, #176]	; (8015f98 <_vfiprintf_r+0x250>)
 8015ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015eea:	2206      	movs	r2, #6
 8015eec:	f7ea f988 	bl	8000200 <memchr>
 8015ef0:	2800      	cmp	r0, #0
 8015ef2:	d03f      	beq.n	8015f74 <_vfiprintf_r+0x22c>
 8015ef4:	4b29      	ldr	r3, [pc, #164]	; (8015f9c <_vfiprintf_r+0x254>)
 8015ef6:	bb1b      	cbnz	r3, 8015f40 <_vfiprintf_r+0x1f8>
 8015ef8:	9b03      	ldr	r3, [sp, #12]
 8015efa:	3307      	adds	r3, #7
 8015efc:	f023 0307 	bic.w	r3, r3, #7
 8015f00:	3308      	adds	r3, #8
 8015f02:	9303      	str	r3, [sp, #12]
 8015f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f06:	443b      	add	r3, r7
 8015f08:	9309      	str	r3, [sp, #36]	; 0x24
 8015f0a:	e767      	b.n	8015ddc <_vfiprintf_r+0x94>
 8015f0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015f10:	460c      	mov	r4, r1
 8015f12:	2001      	movs	r0, #1
 8015f14:	e7a5      	b.n	8015e62 <_vfiprintf_r+0x11a>
 8015f16:	2300      	movs	r3, #0
 8015f18:	3401      	adds	r4, #1
 8015f1a:	9305      	str	r3, [sp, #20]
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	f04f 0c0a 	mov.w	ip, #10
 8015f22:	4620      	mov	r0, r4
 8015f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f28:	3a30      	subs	r2, #48	; 0x30
 8015f2a:	2a09      	cmp	r2, #9
 8015f2c:	d903      	bls.n	8015f36 <_vfiprintf_r+0x1ee>
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d0c5      	beq.n	8015ebe <_vfiprintf_r+0x176>
 8015f32:	9105      	str	r1, [sp, #20]
 8015f34:	e7c3      	b.n	8015ebe <_vfiprintf_r+0x176>
 8015f36:	fb0c 2101 	mla	r1, ip, r1, r2
 8015f3a:	4604      	mov	r4, r0
 8015f3c:	2301      	movs	r3, #1
 8015f3e:	e7f0      	b.n	8015f22 <_vfiprintf_r+0x1da>
 8015f40:	ab03      	add	r3, sp, #12
 8015f42:	9300      	str	r3, [sp, #0]
 8015f44:	462a      	mov	r2, r5
 8015f46:	4b16      	ldr	r3, [pc, #88]	; (8015fa0 <_vfiprintf_r+0x258>)
 8015f48:	a904      	add	r1, sp, #16
 8015f4a:	4630      	mov	r0, r6
 8015f4c:	f7fb fb60 	bl	8011610 <_printf_float>
 8015f50:	4607      	mov	r7, r0
 8015f52:	1c78      	adds	r0, r7, #1
 8015f54:	d1d6      	bne.n	8015f04 <_vfiprintf_r+0x1bc>
 8015f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015f58:	07d9      	lsls	r1, r3, #31
 8015f5a:	d405      	bmi.n	8015f68 <_vfiprintf_r+0x220>
 8015f5c:	89ab      	ldrh	r3, [r5, #12]
 8015f5e:	059a      	lsls	r2, r3, #22
 8015f60:	d402      	bmi.n	8015f68 <_vfiprintf_r+0x220>
 8015f62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f64:	f7fb f9d0 	bl	8011308 <__retarget_lock_release_recursive>
 8015f68:	89ab      	ldrh	r3, [r5, #12]
 8015f6a:	065b      	lsls	r3, r3, #25
 8015f6c:	f53f af12 	bmi.w	8015d94 <_vfiprintf_r+0x4c>
 8015f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f72:	e711      	b.n	8015d98 <_vfiprintf_r+0x50>
 8015f74:	ab03      	add	r3, sp, #12
 8015f76:	9300      	str	r3, [sp, #0]
 8015f78:	462a      	mov	r2, r5
 8015f7a:	4b09      	ldr	r3, [pc, #36]	; (8015fa0 <_vfiprintf_r+0x258>)
 8015f7c:	a904      	add	r1, sp, #16
 8015f7e:	4630      	mov	r0, r6
 8015f80:	f7fb fdea 	bl	8011b58 <_printf_i>
 8015f84:	e7e4      	b.n	8015f50 <_vfiprintf_r+0x208>
 8015f86:	bf00      	nop
 8015f88:	080176bc 	.word	0x080176bc
 8015f8c:	080176dc 	.word	0x080176dc
 8015f90:	0801769c 	.word	0x0801769c
 8015f94:	08017a34 	.word	0x08017a34
 8015f98:	08017a3e 	.word	0x08017a3e
 8015f9c:	08011611 	.word	0x08011611
 8015fa0:	08015d23 	.word	0x08015d23
 8015fa4:	08017a3a 	.word	0x08017a3a

08015fa8 <_scanf_chars>:
 8015fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fac:	4615      	mov	r5, r2
 8015fae:	688a      	ldr	r2, [r1, #8]
 8015fb0:	4680      	mov	r8, r0
 8015fb2:	460c      	mov	r4, r1
 8015fb4:	b932      	cbnz	r2, 8015fc4 <_scanf_chars+0x1c>
 8015fb6:	698a      	ldr	r2, [r1, #24]
 8015fb8:	2a00      	cmp	r2, #0
 8015fba:	bf0c      	ite	eq
 8015fbc:	2201      	moveq	r2, #1
 8015fbe:	f04f 32ff 	movne.w	r2, #4294967295
 8015fc2:	608a      	str	r2, [r1, #8]
 8015fc4:	6822      	ldr	r2, [r4, #0]
 8015fc6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8016054 <_scanf_chars+0xac>
 8015fca:	06d1      	lsls	r1, r2, #27
 8015fcc:	bf5f      	itttt	pl
 8015fce:	681a      	ldrpl	r2, [r3, #0]
 8015fd0:	1d11      	addpl	r1, r2, #4
 8015fd2:	6019      	strpl	r1, [r3, #0]
 8015fd4:	6816      	ldrpl	r6, [r2, #0]
 8015fd6:	2700      	movs	r7, #0
 8015fd8:	69a0      	ldr	r0, [r4, #24]
 8015fda:	b188      	cbz	r0, 8016000 <_scanf_chars+0x58>
 8015fdc:	2801      	cmp	r0, #1
 8015fde:	d107      	bne.n	8015ff0 <_scanf_chars+0x48>
 8015fe0:	682b      	ldr	r3, [r5, #0]
 8015fe2:	781a      	ldrb	r2, [r3, #0]
 8015fe4:	6963      	ldr	r3, [r4, #20]
 8015fe6:	5c9b      	ldrb	r3, [r3, r2]
 8015fe8:	b953      	cbnz	r3, 8016000 <_scanf_chars+0x58>
 8015fea:	bb27      	cbnz	r7, 8016036 <_scanf_chars+0x8e>
 8015fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ff0:	2802      	cmp	r0, #2
 8015ff2:	d120      	bne.n	8016036 <_scanf_chars+0x8e>
 8015ff4:	682b      	ldr	r3, [r5, #0]
 8015ff6:	781b      	ldrb	r3, [r3, #0]
 8015ff8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8015ffc:	071b      	lsls	r3, r3, #28
 8015ffe:	d41a      	bmi.n	8016036 <_scanf_chars+0x8e>
 8016000:	6823      	ldr	r3, [r4, #0]
 8016002:	06da      	lsls	r2, r3, #27
 8016004:	bf5e      	ittt	pl
 8016006:	682b      	ldrpl	r3, [r5, #0]
 8016008:	781b      	ldrbpl	r3, [r3, #0]
 801600a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801600e:	682a      	ldr	r2, [r5, #0]
 8016010:	686b      	ldr	r3, [r5, #4]
 8016012:	3201      	adds	r2, #1
 8016014:	602a      	str	r2, [r5, #0]
 8016016:	68a2      	ldr	r2, [r4, #8]
 8016018:	3b01      	subs	r3, #1
 801601a:	3a01      	subs	r2, #1
 801601c:	606b      	str	r3, [r5, #4]
 801601e:	3701      	adds	r7, #1
 8016020:	60a2      	str	r2, [r4, #8]
 8016022:	b142      	cbz	r2, 8016036 <_scanf_chars+0x8e>
 8016024:	2b00      	cmp	r3, #0
 8016026:	dcd7      	bgt.n	8015fd8 <_scanf_chars+0x30>
 8016028:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801602c:	4629      	mov	r1, r5
 801602e:	4640      	mov	r0, r8
 8016030:	4798      	blx	r3
 8016032:	2800      	cmp	r0, #0
 8016034:	d0d0      	beq.n	8015fd8 <_scanf_chars+0x30>
 8016036:	6823      	ldr	r3, [r4, #0]
 8016038:	f013 0310 	ands.w	r3, r3, #16
 801603c:	d105      	bne.n	801604a <_scanf_chars+0xa2>
 801603e:	68e2      	ldr	r2, [r4, #12]
 8016040:	3201      	adds	r2, #1
 8016042:	60e2      	str	r2, [r4, #12]
 8016044:	69a2      	ldr	r2, [r4, #24]
 8016046:	b102      	cbz	r2, 801604a <_scanf_chars+0xa2>
 8016048:	7033      	strb	r3, [r6, #0]
 801604a:	6923      	ldr	r3, [r4, #16]
 801604c:	441f      	add	r7, r3
 801604e:	6127      	str	r7, [r4, #16]
 8016050:	2000      	movs	r0, #0
 8016052:	e7cb      	b.n	8015fec <_scanf_chars+0x44>
 8016054:	08017599 	.word	0x08017599

08016058 <_scanf_i>:
 8016058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605c:	4698      	mov	r8, r3
 801605e:	4b74      	ldr	r3, [pc, #464]	; (8016230 <_scanf_i+0x1d8>)
 8016060:	460c      	mov	r4, r1
 8016062:	4682      	mov	sl, r0
 8016064:	4616      	mov	r6, r2
 8016066:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801606a:	b087      	sub	sp, #28
 801606c:	ab03      	add	r3, sp, #12
 801606e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016072:	4b70      	ldr	r3, [pc, #448]	; (8016234 <_scanf_i+0x1dc>)
 8016074:	69a1      	ldr	r1, [r4, #24]
 8016076:	4a70      	ldr	r2, [pc, #448]	; (8016238 <_scanf_i+0x1e0>)
 8016078:	2903      	cmp	r1, #3
 801607a:	bf18      	it	ne
 801607c:	461a      	movne	r2, r3
 801607e:	68a3      	ldr	r3, [r4, #8]
 8016080:	9201      	str	r2, [sp, #4]
 8016082:	1e5a      	subs	r2, r3, #1
 8016084:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016088:	bf88      	it	hi
 801608a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801608e:	4627      	mov	r7, r4
 8016090:	bf82      	ittt	hi
 8016092:	eb03 0905 	addhi.w	r9, r3, r5
 8016096:	f240 135d 	movwhi	r3, #349	; 0x15d
 801609a:	60a3      	strhi	r3, [r4, #8]
 801609c:	f857 3b1c 	ldr.w	r3, [r7], #28
 80160a0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80160a4:	bf98      	it	ls
 80160a6:	f04f 0900 	movls.w	r9, #0
 80160aa:	6023      	str	r3, [r4, #0]
 80160ac:	463d      	mov	r5, r7
 80160ae:	f04f 0b00 	mov.w	fp, #0
 80160b2:	6831      	ldr	r1, [r6, #0]
 80160b4:	ab03      	add	r3, sp, #12
 80160b6:	7809      	ldrb	r1, [r1, #0]
 80160b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80160bc:	2202      	movs	r2, #2
 80160be:	f7ea f89f 	bl	8000200 <memchr>
 80160c2:	b328      	cbz	r0, 8016110 <_scanf_i+0xb8>
 80160c4:	f1bb 0f01 	cmp.w	fp, #1
 80160c8:	d159      	bne.n	801617e <_scanf_i+0x126>
 80160ca:	6862      	ldr	r2, [r4, #4]
 80160cc:	b92a      	cbnz	r2, 80160da <_scanf_i+0x82>
 80160ce:	6822      	ldr	r2, [r4, #0]
 80160d0:	2308      	movs	r3, #8
 80160d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80160d6:	6063      	str	r3, [r4, #4]
 80160d8:	6022      	str	r2, [r4, #0]
 80160da:	6822      	ldr	r2, [r4, #0]
 80160dc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80160e0:	6022      	str	r2, [r4, #0]
 80160e2:	68a2      	ldr	r2, [r4, #8]
 80160e4:	1e51      	subs	r1, r2, #1
 80160e6:	60a1      	str	r1, [r4, #8]
 80160e8:	b192      	cbz	r2, 8016110 <_scanf_i+0xb8>
 80160ea:	6832      	ldr	r2, [r6, #0]
 80160ec:	1c51      	adds	r1, r2, #1
 80160ee:	6031      	str	r1, [r6, #0]
 80160f0:	7812      	ldrb	r2, [r2, #0]
 80160f2:	f805 2b01 	strb.w	r2, [r5], #1
 80160f6:	6872      	ldr	r2, [r6, #4]
 80160f8:	3a01      	subs	r2, #1
 80160fa:	2a00      	cmp	r2, #0
 80160fc:	6072      	str	r2, [r6, #4]
 80160fe:	dc07      	bgt.n	8016110 <_scanf_i+0xb8>
 8016100:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016104:	4631      	mov	r1, r6
 8016106:	4650      	mov	r0, sl
 8016108:	4790      	blx	r2
 801610a:	2800      	cmp	r0, #0
 801610c:	f040 8085 	bne.w	801621a <_scanf_i+0x1c2>
 8016110:	f10b 0b01 	add.w	fp, fp, #1
 8016114:	f1bb 0f03 	cmp.w	fp, #3
 8016118:	d1cb      	bne.n	80160b2 <_scanf_i+0x5a>
 801611a:	6863      	ldr	r3, [r4, #4]
 801611c:	b90b      	cbnz	r3, 8016122 <_scanf_i+0xca>
 801611e:	230a      	movs	r3, #10
 8016120:	6063      	str	r3, [r4, #4]
 8016122:	6863      	ldr	r3, [r4, #4]
 8016124:	4945      	ldr	r1, [pc, #276]	; (801623c <_scanf_i+0x1e4>)
 8016126:	6960      	ldr	r0, [r4, #20]
 8016128:	1ac9      	subs	r1, r1, r3
 801612a:	f000 f89b 	bl	8016264 <__sccl>
 801612e:	f04f 0b00 	mov.w	fp, #0
 8016132:	68a3      	ldr	r3, [r4, #8]
 8016134:	6822      	ldr	r2, [r4, #0]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d03d      	beq.n	80161b6 <_scanf_i+0x15e>
 801613a:	6831      	ldr	r1, [r6, #0]
 801613c:	6960      	ldr	r0, [r4, #20]
 801613e:	f891 c000 	ldrb.w	ip, [r1]
 8016142:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016146:	2800      	cmp	r0, #0
 8016148:	d035      	beq.n	80161b6 <_scanf_i+0x15e>
 801614a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801614e:	d124      	bne.n	801619a <_scanf_i+0x142>
 8016150:	0510      	lsls	r0, r2, #20
 8016152:	d522      	bpl.n	801619a <_scanf_i+0x142>
 8016154:	f10b 0b01 	add.w	fp, fp, #1
 8016158:	f1b9 0f00 	cmp.w	r9, #0
 801615c:	d003      	beq.n	8016166 <_scanf_i+0x10e>
 801615e:	3301      	adds	r3, #1
 8016160:	f109 39ff 	add.w	r9, r9, #4294967295
 8016164:	60a3      	str	r3, [r4, #8]
 8016166:	6873      	ldr	r3, [r6, #4]
 8016168:	3b01      	subs	r3, #1
 801616a:	2b00      	cmp	r3, #0
 801616c:	6073      	str	r3, [r6, #4]
 801616e:	dd1b      	ble.n	80161a8 <_scanf_i+0x150>
 8016170:	6833      	ldr	r3, [r6, #0]
 8016172:	3301      	adds	r3, #1
 8016174:	6033      	str	r3, [r6, #0]
 8016176:	68a3      	ldr	r3, [r4, #8]
 8016178:	3b01      	subs	r3, #1
 801617a:	60a3      	str	r3, [r4, #8]
 801617c:	e7d9      	b.n	8016132 <_scanf_i+0xda>
 801617e:	f1bb 0f02 	cmp.w	fp, #2
 8016182:	d1ae      	bne.n	80160e2 <_scanf_i+0x8a>
 8016184:	6822      	ldr	r2, [r4, #0]
 8016186:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801618a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801618e:	d1bf      	bne.n	8016110 <_scanf_i+0xb8>
 8016190:	2310      	movs	r3, #16
 8016192:	6063      	str	r3, [r4, #4]
 8016194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016198:	e7a2      	b.n	80160e0 <_scanf_i+0x88>
 801619a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801619e:	6022      	str	r2, [r4, #0]
 80161a0:	780b      	ldrb	r3, [r1, #0]
 80161a2:	f805 3b01 	strb.w	r3, [r5], #1
 80161a6:	e7de      	b.n	8016166 <_scanf_i+0x10e>
 80161a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80161ac:	4631      	mov	r1, r6
 80161ae:	4650      	mov	r0, sl
 80161b0:	4798      	blx	r3
 80161b2:	2800      	cmp	r0, #0
 80161b4:	d0df      	beq.n	8016176 <_scanf_i+0x11e>
 80161b6:	6823      	ldr	r3, [r4, #0]
 80161b8:	05d9      	lsls	r1, r3, #23
 80161ba:	d50d      	bpl.n	80161d8 <_scanf_i+0x180>
 80161bc:	42bd      	cmp	r5, r7
 80161be:	d909      	bls.n	80161d4 <_scanf_i+0x17c>
 80161c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80161c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161c8:	4632      	mov	r2, r6
 80161ca:	4650      	mov	r0, sl
 80161cc:	4798      	blx	r3
 80161ce:	f105 39ff 	add.w	r9, r5, #4294967295
 80161d2:	464d      	mov	r5, r9
 80161d4:	42bd      	cmp	r5, r7
 80161d6:	d028      	beq.n	801622a <_scanf_i+0x1d2>
 80161d8:	6822      	ldr	r2, [r4, #0]
 80161da:	f012 0210 	ands.w	r2, r2, #16
 80161de:	d113      	bne.n	8016208 <_scanf_i+0x1b0>
 80161e0:	702a      	strb	r2, [r5, #0]
 80161e2:	6863      	ldr	r3, [r4, #4]
 80161e4:	9e01      	ldr	r6, [sp, #4]
 80161e6:	4639      	mov	r1, r7
 80161e8:	4650      	mov	r0, sl
 80161ea:	47b0      	blx	r6
 80161ec:	f8d8 3000 	ldr.w	r3, [r8]
 80161f0:	6821      	ldr	r1, [r4, #0]
 80161f2:	1d1a      	adds	r2, r3, #4
 80161f4:	f8c8 2000 	str.w	r2, [r8]
 80161f8:	f011 0f20 	tst.w	r1, #32
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	d00f      	beq.n	8016220 <_scanf_i+0x1c8>
 8016200:	6018      	str	r0, [r3, #0]
 8016202:	68e3      	ldr	r3, [r4, #12]
 8016204:	3301      	adds	r3, #1
 8016206:	60e3      	str	r3, [r4, #12]
 8016208:	1bed      	subs	r5, r5, r7
 801620a:	44ab      	add	fp, r5
 801620c:	6925      	ldr	r5, [r4, #16]
 801620e:	445d      	add	r5, fp
 8016210:	6125      	str	r5, [r4, #16]
 8016212:	2000      	movs	r0, #0
 8016214:	b007      	add	sp, #28
 8016216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801621a:	f04f 0b00 	mov.w	fp, #0
 801621e:	e7ca      	b.n	80161b6 <_scanf_i+0x15e>
 8016220:	07ca      	lsls	r2, r1, #31
 8016222:	bf4c      	ite	mi
 8016224:	8018      	strhmi	r0, [r3, #0]
 8016226:	6018      	strpl	r0, [r3, #0]
 8016228:	e7eb      	b.n	8016202 <_scanf_i+0x1aa>
 801622a:	2001      	movs	r0, #1
 801622c:	e7f2      	b.n	8016214 <_scanf_i+0x1bc>
 801622e:	bf00      	nop
 8016230:	08017408 	.word	0x08017408
 8016234:	0801340d 	.word	0x0801340d
 8016238:	08013311 	.word	0x08013311
 801623c:	08017a5e 	.word	0x08017a5e

08016240 <_read_r>:
 8016240:	b538      	push	{r3, r4, r5, lr}
 8016242:	4d07      	ldr	r5, [pc, #28]	; (8016260 <_read_r+0x20>)
 8016244:	4604      	mov	r4, r0
 8016246:	4608      	mov	r0, r1
 8016248:	4611      	mov	r1, r2
 801624a:	2200      	movs	r2, #0
 801624c:	602a      	str	r2, [r5, #0]
 801624e:	461a      	mov	r2, r3
 8016250:	f000 f8e4 	bl	801641c <_read>
 8016254:	1c43      	adds	r3, r0, #1
 8016256:	d102      	bne.n	801625e <_read_r+0x1e>
 8016258:	682b      	ldr	r3, [r5, #0]
 801625a:	b103      	cbz	r3, 801625e <_read_r+0x1e>
 801625c:	6023      	str	r3, [r4, #0]
 801625e:	bd38      	pop	{r3, r4, r5, pc}
 8016260:	20006ab8 	.word	0x20006ab8

08016264 <__sccl>:
 8016264:	b570      	push	{r4, r5, r6, lr}
 8016266:	780b      	ldrb	r3, [r1, #0]
 8016268:	4604      	mov	r4, r0
 801626a:	2b5e      	cmp	r3, #94	; 0x5e
 801626c:	bf0b      	itete	eq
 801626e:	784b      	ldrbeq	r3, [r1, #1]
 8016270:	1c48      	addne	r0, r1, #1
 8016272:	1c88      	addeq	r0, r1, #2
 8016274:	2200      	movne	r2, #0
 8016276:	bf08      	it	eq
 8016278:	2201      	moveq	r2, #1
 801627a:	1e61      	subs	r1, r4, #1
 801627c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016280:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016284:	42a9      	cmp	r1, r5
 8016286:	d1fb      	bne.n	8016280 <__sccl+0x1c>
 8016288:	b90b      	cbnz	r3, 801628e <__sccl+0x2a>
 801628a:	3801      	subs	r0, #1
 801628c:	bd70      	pop	{r4, r5, r6, pc}
 801628e:	f082 0101 	eor.w	r1, r2, #1
 8016292:	54e1      	strb	r1, [r4, r3]
 8016294:	1c42      	adds	r2, r0, #1
 8016296:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801629a:	2d2d      	cmp	r5, #45	; 0x2d
 801629c:	f102 36ff 	add.w	r6, r2, #4294967295
 80162a0:	4610      	mov	r0, r2
 80162a2:	d006      	beq.n	80162b2 <__sccl+0x4e>
 80162a4:	2d5d      	cmp	r5, #93	; 0x5d
 80162a6:	d0f1      	beq.n	801628c <__sccl+0x28>
 80162a8:	b90d      	cbnz	r5, 80162ae <__sccl+0x4a>
 80162aa:	4630      	mov	r0, r6
 80162ac:	e7ee      	b.n	801628c <__sccl+0x28>
 80162ae:	462b      	mov	r3, r5
 80162b0:	e7ef      	b.n	8016292 <__sccl+0x2e>
 80162b2:	7816      	ldrb	r6, [r2, #0]
 80162b4:	2e5d      	cmp	r6, #93	; 0x5d
 80162b6:	d0fa      	beq.n	80162ae <__sccl+0x4a>
 80162b8:	42b3      	cmp	r3, r6
 80162ba:	dcf8      	bgt.n	80162ae <__sccl+0x4a>
 80162bc:	4618      	mov	r0, r3
 80162be:	3001      	adds	r0, #1
 80162c0:	4286      	cmp	r6, r0
 80162c2:	5421      	strb	r1, [r4, r0]
 80162c4:	dcfb      	bgt.n	80162be <__sccl+0x5a>
 80162c6:	43d8      	mvns	r0, r3
 80162c8:	4430      	add	r0, r6
 80162ca:	1c5d      	adds	r5, r3, #1
 80162cc:	42b3      	cmp	r3, r6
 80162ce:	bfa8      	it	ge
 80162d0:	2000      	movge	r0, #0
 80162d2:	182b      	adds	r3, r5, r0
 80162d4:	3202      	adds	r2, #2
 80162d6:	e7de      	b.n	8016296 <__sccl+0x32>

080162d8 <__submore>:
 80162d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162dc:	460c      	mov	r4, r1
 80162de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80162e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80162e4:	4299      	cmp	r1, r3
 80162e6:	d11d      	bne.n	8016324 <__submore+0x4c>
 80162e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80162ec:	f7fb f896 	bl	801141c <_malloc_r>
 80162f0:	b918      	cbnz	r0, 80162fa <__submore+0x22>
 80162f2:	f04f 30ff 	mov.w	r0, #4294967295
 80162f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80162fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8016300:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016304:	6360      	str	r0, [r4, #52]	; 0x34
 8016306:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801630a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801630e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016312:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016316:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801631a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801631e:	6020      	str	r0, [r4, #0]
 8016320:	2000      	movs	r0, #0
 8016322:	e7e8      	b.n	80162f6 <__submore+0x1e>
 8016324:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016326:	0077      	lsls	r7, r6, #1
 8016328:	463a      	mov	r2, r7
 801632a:	f7ff f98f 	bl	801564c <_realloc_r>
 801632e:	4605      	mov	r5, r0
 8016330:	2800      	cmp	r0, #0
 8016332:	d0de      	beq.n	80162f2 <__submore+0x1a>
 8016334:	eb00 0806 	add.w	r8, r0, r6
 8016338:	4601      	mov	r1, r0
 801633a:	4632      	mov	r2, r6
 801633c:	4640      	mov	r0, r8
 801633e:	f7fa ffed 	bl	801131c <memcpy>
 8016342:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016346:	f8c4 8000 	str.w	r8, [r4]
 801634a:	e7e9      	b.n	8016320 <__submore+0x48>

0801634c <__ascii_wctomb>:
 801634c:	b149      	cbz	r1, 8016362 <__ascii_wctomb+0x16>
 801634e:	2aff      	cmp	r2, #255	; 0xff
 8016350:	bf85      	ittet	hi
 8016352:	238a      	movhi	r3, #138	; 0x8a
 8016354:	6003      	strhi	r3, [r0, #0]
 8016356:	700a      	strbls	r2, [r1, #0]
 8016358:	f04f 30ff 	movhi.w	r0, #4294967295
 801635c:	bf98      	it	ls
 801635e:	2001      	movls	r0, #1
 8016360:	4770      	bx	lr
 8016362:	4608      	mov	r0, r1
 8016364:	4770      	bx	lr
	...

08016368 <_fstat_r>:
 8016368:	b538      	push	{r3, r4, r5, lr}
 801636a:	4d07      	ldr	r5, [pc, #28]	; (8016388 <_fstat_r+0x20>)
 801636c:	2300      	movs	r3, #0
 801636e:	4604      	mov	r4, r0
 8016370:	4608      	mov	r0, r1
 8016372:	4611      	mov	r1, r2
 8016374:	602b      	str	r3, [r5, #0]
 8016376:	f000 f829 	bl	80163cc <_fstat>
 801637a:	1c43      	adds	r3, r0, #1
 801637c:	d102      	bne.n	8016384 <_fstat_r+0x1c>
 801637e:	682b      	ldr	r3, [r5, #0]
 8016380:	b103      	cbz	r3, 8016384 <_fstat_r+0x1c>
 8016382:	6023      	str	r3, [r4, #0]
 8016384:	bd38      	pop	{r3, r4, r5, pc}
 8016386:	bf00      	nop
 8016388:	20006ab8 	.word	0x20006ab8

0801638c <_isatty_r>:
 801638c:	b538      	push	{r3, r4, r5, lr}
 801638e:	4d06      	ldr	r5, [pc, #24]	; (80163a8 <_isatty_r+0x1c>)
 8016390:	2300      	movs	r3, #0
 8016392:	4604      	mov	r4, r0
 8016394:	4608      	mov	r0, r1
 8016396:	602b      	str	r3, [r5, #0]
 8016398:	f000 f828 	bl	80163ec <_isatty>
 801639c:	1c43      	adds	r3, r0, #1
 801639e:	d102      	bne.n	80163a6 <_isatty_r+0x1a>
 80163a0:	682b      	ldr	r3, [r5, #0]
 80163a2:	b103      	cbz	r3, 80163a6 <_isatty_r+0x1a>
 80163a4:	6023      	str	r3, [r4, #0]
 80163a6:	bd38      	pop	{r3, r4, r5, pc}
 80163a8:	20006ab8 	.word	0x20006ab8

080163ac <_malloc_usable_size_r>:
 80163ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163b0:	1f18      	subs	r0, r3, #4
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	bfbc      	itt	lt
 80163b6:	580b      	ldrlt	r3, [r1, r0]
 80163b8:	18c0      	addlt	r0, r0, r3
 80163ba:	4770      	bx	lr

080163bc <_close>:
 80163bc:	4b02      	ldr	r3, [pc, #8]	; (80163c8 <_close+0xc>)
 80163be:	2258      	movs	r2, #88	; 0x58
 80163c0:	601a      	str	r2, [r3, #0]
 80163c2:	f04f 30ff 	mov.w	r0, #4294967295
 80163c6:	4770      	bx	lr
 80163c8:	20006ab8 	.word	0x20006ab8

080163cc <_fstat>:
 80163cc:	4b02      	ldr	r3, [pc, #8]	; (80163d8 <_fstat+0xc>)
 80163ce:	2258      	movs	r2, #88	; 0x58
 80163d0:	601a      	str	r2, [r3, #0]
 80163d2:	f04f 30ff 	mov.w	r0, #4294967295
 80163d6:	4770      	bx	lr
 80163d8:	20006ab8 	.word	0x20006ab8

080163dc <_getpid>:
 80163dc:	4b02      	ldr	r3, [pc, #8]	; (80163e8 <_getpid+0xc>)
 80163de:	2258      	movs	r2, #88	; 0x58
 80163e0:	601a      	str	r2, [r3, #0]
 80163e2:	f04f 30ff 	mov.w	r0, #4294967295
 80163e6:	4770      	bx	lr
 80163e8:	20006ab8 	.word	0x20006ab8

080163ec <_isatty>:
 80163ec:	4b02      	ldr	r3, [pc, #8]	; (80163f8 <_isatty+0xc>)
 80163ee:	2258      	movs	r2, #88	; 0x58
 80163f0:	601a      	str	r2, [r3, #0]
 80163f2:	2000      	movs	r0, #0
 80163f4:	4770      	bx	lr
 80163f6:	bf00      	nop
 80163f8:	20006ab8 	.word	0x20006ab8

080163fc <_kill>:
 80163fc:	4b02      	ldr	r3, [pc, #8]	; (8016408 <_kill+0xc>)
 80163fe:	2258      	movs	r2, #88	; 0x58
 8016400:	601a      	str	r2, [r3, #0]
 8016402:	f04f 30ff 	mov.w	r0, #4294967295
 8016406:	4770      	bx	lr
 8016408:	20006ab8 	.word	0x20006ab8

0801640c <_lseek>:
 801640c:	4b02      	ldr	r3, [pc, #8]	; (8016418 <_lseek+0xc>)
 801640e:	2258      	movs	r2, #88	; 0x58
 8016410:	601a      	str	r2, [r3, #0]
 8016412:	f04f 30ff 	mov.w	r0, #4294967295
 8016416:	4770      	bx	lr
 8016418:	20006ab8 	.word	0x20006ab8

0801641c <_read>:
 801641c:	4b02      	ldr	r3, [pc, #8]	; (8016428 <_read+0xc>)
 801641e:	2258      	movs	r2, #88	; 0x58
 8016420:	601a      	str	r2, [r3, #0]
 8016422:	f04f 30ff 	mov.w	r0, #4294967295
 8016426:	4770      	bx	lr
 8016428:	20006ab8 	.word	0x20006ab8

0801642c <_sbrk>:
 801642c:	4b04      	ldr	r3, [pc, #16]	; (8016440 <_sbrk+0x14>)
 801642e:	6819      	ldr	r1, [r3, #0]
 8016430:	4602      	mov	r2, r0
 8016432:	b909      	cbnz	r1, 8016438 <_sbrk+0xc>
 8016434:	4903      	ldr	r1, [pc, #12]	; (8016444 <_sbrk+0x18>)
 8016436:	6019      	str	r1, [r3, #0]
 8016438:	6818      	ldr	r0, [r3, #0]
 801643a:	4402      	add	r2, r0
 801643c:	601a      	str	r2, [r3, #0]
 801643e:	4770      	bx	lr
 8016440:	20006040 	.word	0x20006040
 8016444:	20006ac0 	.word	0x20006ac0

08016448 <_write>:
 8016448:	4b02      	ldr	r3, [pc, #8]	; (8016454 <_write+0xc>)
 801644a:	2258      	movs	r2, #88	; 0x58
 801644c:	601a      	str	r2, [r3, #0]
 801644e:	f04f 30ff 	mov.w	r0, #4294967295
 8016452:	4770      	bx	lr
 8016454:	20006ab8 	.word	0x20006ab8

08016458 <_exit>:
 8016458:	e7fe      	b.n	8016458 <_exit>
	...

0801645c <_init>:
 801645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801645e:	bf00      	nop
 8016460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016462:	bc08      	pop	{r3}
 8016464:	469e      	mov	lr, r3
 8016466:	4770      	bx	lr

08016468 <_fini>:
 8016468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801646a:	bf00      	nop
 801646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801646e:	bc08      	pop	{r3}
 8016470:	469e      	mov	lr, r3
 8016472:	4770      	bx	lr
