
FC_v2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010364  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f4c  08010518  08010518  00020518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011464  08011464  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  08011464  08011464  00021464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801146c  0801146c  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801146c  0801146c  0002146c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011470  08011470  00021470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08011474  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030254  2**0
                  CONTENTS
 10 .bss          0000116c  20000254  20000254  00030254  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  200013c0  200013c0  00030254  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003337b  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000066e4  00000000  00000000  000635ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002338  00000000  00000000  00069ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000020e0  00000000  00000000  0006c020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002daaf  00000000  00000000  0006e100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fd6c  00000000  00000000  0009bbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010079b  00000000  00000000  000cb91b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001cc0b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a958  00000000  00000000  001cc10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  001d6a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001d6b30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000254 	.word	0x20000254
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080104fc 	.word	0x080104fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000258 	.word	0x20000258
 80001ec:	080104fc 	.word	0x080104fc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MRT_Init>:


//**************************************************//
//PUBLIC FUNCTIONS

void MRT_Init(void){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	print("\r\n\r\n/********MRT Init********/\r\n");
 8001010:	f04f 33ff 	mov.w	r3, #4294967295
 8001014:	2220      	movs	r2, #32
 8001016:	490a      	ldr	r1, [pc, #40]	; (8001040 <MRT_Init+0x34>)
 8001018:	480a      	ldr	r0, [pc, #40]	; (8001044 <MRT_Init+0x38>)
 800101a:	f007 fb4c 	bl	80086b6 <HAL_UART_Transmit>

	MRT_Reinitialize_Peripherals();
 800101e:	f000 f815 	bl	800104c <MRT_Reinitialize_Peripherals>
	MRT_external_flash_Init();
 8001022:	f001 faed 	bl	8002600 <MRT_external_flash_Init>
	MRT_reset_info();
 8001026:	f000 f88b 	bl	8001140 <MRT_reset_info>
	print("IWDG Init...");
	MX_IWDG_Init();
	print("OK\r\n");
	#endif

	MRT_rtc_Init();
 800102a:	f002 f991 	bl	8003350 <MRT_rtc_Init>


	while(1){
		HAL_IWDG_Refresh(&hiwdg);
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MRT_Init+0x3c>)
 8001030:	f003 fac3 	bl	80045ba <HAL_IWDG_Refresh>
		HAL_Delay(1000);
 8001034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001038:	f002 fb9e 	bl	8003778 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 800103c:	e7f7      	b.n	800102e <MRT_Init+0x22>
 800103e:	bf00      	nop
 8001040:	08010518 	.word	0x08010518
 8001044:	20000a74 	.word	0x20000a74
 8001048:	2000086c 	.word	0x2000086c

0800104c <MRT_Reinitialize_Peripherals>:


//**************************************************//
//PRIVATE FUNCTIONS

void MRT_Reinitialize_Peripherals(void){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	  /*
	   * Reinitialize all peripherals
	   */

	  print("Reinitializing Peripherals...");
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	221d      	movs	r2, #29
 8001056:	4932      	ldr	r1, [pc, #200]	; (8001120 <MRT_Reinitialize_Peripherals+0xd4>)
 8001058:	4832      	ldr	r0, [pc, #200]	; (8001124 <MRT_Reinitialize_Peripherals+0xd8>)
 800105a:	f007 fb2c 	bl	80086b6 <HAL_UART_Transmit>

	  // reset LEDs
	  HAL_GPIO_WritePin(OUT_LED1_GPIO_Port, OUT_LED1_Pin, RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2102      	movs	r1, #2
 8001062:	4831      	ldr	r0, [pc, #196]	; (8001128 <MRT_Reinitialize_Peripherals+0xdc>)
 8001064:	f003 f8ac 	bl	80041c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	2104      	movs	r1, #4
 800106c:	482e      	ldr	r0, [pc, #184]	; (8001128 <MRT_Reinitialize_Peripherals+0xdc>)
 800106e:	f003 f8a7 	bl	80041c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2108      	movs	r1, #8
 8001076:	482c      	ldr	r0, [pc, #176]	; (8001128 <MRT_Reinitialize_Peripherals+0xdc>)
 8001078:	f003 f8a2 	bl	80041c0 <HAL_GPIO_WritePin>

	  // reset recovery pyro pins
	  HAL_GPIO_WritePin(OUT_EJ_Arming_GPIO_Port, OUT_EJ_Arming_Pin, SET); //PG14 ARMING RCOV
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001082:	482a      	ldr	r0, [pc, #168]	; (800112c <MRT_Reinitialize_Peripherals+0xe0>)
 8001084:	f003 f89c 	bl	80041c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Drogue_Gate_GPIO_Port, OUT_EJ_Drogue_Gate_Pin, RESET); //PG12 DROGUE GATE
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108e:	4827      	ldr	r0, [pc, #156]	; (800112c <MRT_Reinitialize_Peripherals+0xe0>)
 8001090:	f003 f896 	bl	80041c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_EJ_Main_Gate_GPIO_Port, OUT_EJ_Main_Gate_Pin, RESET); //PG11 MAIN GATE
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800109a:	4824      	ldr	r0, [pc, #144]	; (800112c <MRT_Reinitialize_Peripherals+0xe0>)
 800109c:	f003 f890 	bl	80041c0 <HAL_GPIO_WritePin>

	  // reset prop pyro pins
	  HAL_GPIO_WritePin(OUT_PyroValve_Arming_GPIO_Port, OUT_PyroValve_Arming_Pin, SET); //PG1 ARMING_PROP
 80010a0:	2201      	movs	r2, #1
 80010a2:	2102      	movs	r1, #2
 80010a4:	4821      	ldr	r0, [pc, #132]	; (800112c <MRT_Reinitialize_Peripherals+0xe0>)
 80010a6:	f003 f88b 	bl	80041c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_1_GPIO_Port, OUT_PyroValve_Gate_1_Pin, RESET); //PF15 PROP GATE 1
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b0:	481f      	ldr	r0, [pc, #124]	; (8001130 <MRT_Reinitialize_Peripherals+0xe4>)
 80010b2:	f003 f885 	bl	80041c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_PyroValve_Gate_2_GPIO_Port,OUT_PyroValve_Gate_2_Pin, RESET); //PF14 PROP GATE 2
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010bc:	481c      	ldr	r0, [pc, #112]	; (8001130 <MRT_Reinitialize_Peripherals+0xe4>)
 80010be:	f003 f87f 	bl	80041c0 <HAL_GPIO_WritePin>

	  // reset 12 V buck converter enable pin (disable converter)
	  HAL_GPIO_WritePin(EN_12V_Buck_GPIO_Port, EN_12V_Buck_Pin, RESET); //PE2 Buck converter enable
 80010c2:	2200      	movs	r2, #0
 80010c4:	2104      	movs	r1, #4
 80010c6:	481b      	ldr	r0, [pc, #108]	; (8001134 <MRT_Reinitialize_Peripherals+0xe8>)
 80010c8:	f003 f87a 	bl	80041c0 <HAL_GPIO_WritePin>
	  //HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET); //This was in the previous code
	  //HAL_GPIO_WritePin(OUT_Prop_ActuatedVent_Gate_GPIO_Port, OUT_Prop_ActuatedVent_Gate_Pin, RESET); //PE7 (MAY NOT BE THE RIGHT ONE)


	  // reset payload EN signal
	  HAL_GPIO_WritePin(PAYLOAD_I2C_EN_GPIO_Port, PAYLOAD_I2C_EN_Pin, RESET); //PE9 Payload I2C enable
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <MRT_Reinitialize_Peripherals+0xe8>)
 80010d4:	f003 f874 	bl	80041c0 <HAL_GPIO_WritePin>

	  // set CS pin for thermocouple chip high
	  //	HAL_GPIO_WritePin(TH_CS_1_GPIO_Port, TH_CS_1_Pin, SET);

	  // set power off for VR
	  HAL_GPIO_WritePin(OUT_VR_PWR_GPIO_Port, OUT_VR_PWR_Pin, RESET); //PG9
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010de:	4813      	ldr	r0, [pc, #76]	; (800112c <MRT_Reinitialize_Peripherals+0xe0>)
 80010e0:	f003 f86e 	bl	80041c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_VR_REC_GPIO_Port, OUT_VR_REC_Pin, RESET); //PD7
 80010e4:	2200      	movs	r2, #0
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	4813      	ldr	r0, [pc, #76]	; (8001138 <MRT_Reinitialize_Peripherals+0xec>)
 80010ea:	f003 f869 	bl	80041c0 <HAL_GPIO_WritePin>

	  // FLASH set CS, WP and IO3 pins high
	  HAL_GPIO_WritePin(OUT_FLASH_CS_GPIO_Port, OUT_FLASH_CS_Pin, SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4811      	ldr	r0, [pc, #68]	; (8001138 <MRT_Reinitialize_Peripherals+0xec>)
 80010f4:	f003 f864 	bl	80041c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_WP_GPIO_Port, OUT_FLASH_WP_Pin, SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2120      	movs	r1, #32
 80010fc:	480e      	ldr	r0, [pc, #56]	; (8001138 <MRT_Reinitialize_Peripherals+0xec>)
 80010fe:	f003 f85f 	bl	80041c0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUT_FLASH_IO3_GPIO_Port, OUT_FLASH_IO3_Pin, SET);
 8001102:	2201      	movs	r2, #1
 8001104:	2110      	movs	r1, #16
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <MRT_Reinitialize_Peripherals+0xec>)
 8001108:	f003 f85a 	bl	80041c0 <HAL_GPIO_WritePin>

	  print("OK\r\n");
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	2204      	movs	r2, #4
 8001112:	490a      	ldr	r1, [pc, #40]	; (800113c <MRT_Reinitialize_Peripherals+0xf0>)
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <MRT_Reinitialize_Peripherals+0xd8>)
 8001116:	f007 face 	bl	80086b6 <HAL_UART_Transmit>
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	0801053c 	.word	0x0801053c
 8001124:	20000a74 	.word	0x20000a74
 8001128:	40020800 	.word	0x40020800
 800112c:	40021800 	.word	0x40021800
 8001130:	40021400 	.word	0x40021400
 8001134:	40021000 	.word	0x40021000
 8001138:	40020c00 	.word	0x40020c00
 800113c:	0801055c 	.word	0x0801055c

08001140 <MRT_reset_info>:




void MRT_reset_info(void){
 8001140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001142:	b0a7      	sub	sp, #156	; 0x9c
 8001144:	af04      	add	r7, sp, #16

	  char buffer[100];
	  sprintf(buffer,"Reset: %i,  WU: %i,  IWDG: %i\r\nPrevious RTC time: %i:%i:%i\r\n",reset_flag, wu_flag, iwdg_flag, prev_hours, prev_min, prev_sec);
 8001146:	4b80      	ldr	r3, [pc, #512]	; (8001348 <MRT_reset_info+0x208>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	461d      	mov	r5, r3
 800114c:	4b7f      	ldr	r3, [pc, #508]	; (800134c <MRT_reset_info+0x20c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461e      	mov	r6, r3
 8001152:	4b7f      	ldr	r3, [pc, #508]	; (8001350 <MRT_reset_info+0x210>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	461a      	mov	r2, r3
 8001158:	4b7e      	ldr	r3, [pc, #504]	; (8001354 <MRT_reset_info+0x214>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4619      	mov	r1, r3
 800115e:	4b7e      	ldr	r3, [pc, #504]	; (8001358 <MRT_reset_info+0x218>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461c      	mov	r4, r3
 8001164:	4b7d      	ldr	r3, [pc, #500]	; (800135c <MRT_reset_info+0x21c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	f107 0020 	add.w	r0, r7, #32
 800116c:	9303      	str	r3, [sp, #12]
 800116e:	9402      	str	r4, [sp, #8]
 8001170:	9101      	str	r1, [sp, #4]
 8001172:	9200      	str	r2, [sp, #0]
 8001174:	4633      	mov	r3, r6
 8001176:	462a      	mov	r2, r5
 8001178:	4979      	ldr	r1, [pc, #484]	; (8001360 <MRT_reset_info+0x220>)
 800117a:	f00b fd33 	bl	800cbe4 <siprintf>
	  print(buffer);
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f834 	bl	80001f0 <strlen>
 8001188:	4603      	mov	r3, r0
 800118a:	b29a      	uxth	r2, r3
 800118c:	f107 0120 	add.w	r1, r7, #32
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	4873      	ldr	r0, [pc, #460]	; (8001364 <MRT_reset_info+0x224>)
 8001196:	f007 fa8e 	bl	80086b6 <HAL_UART_Transmit>

	  //Check if IWDG is being deactivated
	  if (iwdg_flag==1){
 800119a:	4b6d      	ldr	r3, [pc, #436]	; (8001350 <MRT_reset_info+0x210>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d11e      	bne.n	80011e0 <MRT_reset_info+0xa0>
		  print("Deactivating IWDG\r\n");
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	2213      	movs	r2, #19
 80011a8:	496f      	ldr	r1, [pc, #444]	; (8001368 <MRT_reset_info+0x228>)
 80011aa:	486e      	ldr	r0, [pc, #440]	; (8001364 <MRT_reset_info+0x224>)
 80011ac:	f007 fa83 	bl	80086b6 <HAL_UART_Transmit>

		  iwdg_flag = 0; //Flip flag
 80011b0:	4b67      	ldr	r3, [pc, #412]	; (8001350 <MRT_reset_info+0x210>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
		  flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 80011b6:	4b66      	ldr	r3, [pc, #408]	; (8001350 <MRT_reset_info+0x210>)
 80011b8:	781a      	ldrb	r2, [r3, #0]
 80011ba:	4b6c      	ldr	r3, [pc, #432]	; (800136c <MRT_reset_info+0x22c>)
 80011bc:	709a      	strb	r2, [r3, #2]
		  W25qxx_EraseSector(1);
 80011be:	2001      	movs	r0, #1
 80011c0:	f001 fdc2 	bl	8002d48 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80011c4:	2305      	movs	r3, #5
 80011c6:	2200      	movs	r2, #0
 80011c8:	2101      	movs	r1, #1
 80011ca:	4868      	ldr	r0, [pc, #416]	; (800136c <MRT_reset_info+0x22c>)
 80011cc:	f001 ff06 	bl	8002fdc <W25qxx_WriteSector>

		  HAL_Delay(1000);
 80011d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d4:	f002 fad0 	bl	8003778 <HAL_Delay>

		  //Go to sleep
		  MRT_StandByMode(SLEEP_TIME);
 80011d8:	f648 40a0 	movw	r0, #36000	; 0x8ca0
 80011dc:	f002 f99a 	bl	8003514 <MRT_StandByMode>
	  }


	  //Check if we are after waking up (and at which wake up we are at)
	  if (wu_flag>0){
 80011e0:	4b5a      	ldr	r3, [pc, #360]	; (800134c <MRT_reset_info+0x20c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d037      	beq.n	8001258 <MRT_reset_info+0x118>
		  char buf[30];
		  sprintf(buf, "FC wake up %i\r\n", wu_flag);
 80011e8:	4b58      	ldr	r3, [pc, #352]	; (800134c <MRT_reset_info+0x20c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	463b      	mov	r3, r7
 80011f0:	495f      	ldr	r1, [pc, #380]	; (8001370 <MRT_reset_info+0x230>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00b fcf6 	bl	800cbe4 <siprintf>
		  print(buf);
 80011f8:	463b      	mov	r3, r7
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7fe fff8 	bl	80001f0 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	b29a      	uxth	r2, r3
 8001204:	4639      	mov	r1, r7
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	4856      	ldr	r0, [pc, #344]	; (8001364 <MRT_reset_info+0x224>)
 800120c:	f007 fa53 	bl	80086b6 <HAL_UART_Transmit>

		  print("Resetting RTC time\r\n");
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	2214      	movs	r2, #20
 8001216:	4957      	ldr	r1, [pc, #348]	; (8001374 <MRT_reset_info+0x234>)
 8001218:	4852      	ldr	r0, [pc, #328]	; (8001364 <MRT_reset_info+0x224>)
 800121a:	f007 fa4c 	bl	80086b6 <HAL_UART_Transmit>

		  //Clear RTC time (last recorded)
		  W25qxx_EraseSector(2);
 800121e:	2002      	movs	r0, #2
 8001220:	f001 fd92 	bl	8002d48 <W25qxx_EraseSector>
		  W25qxx_WriteSector(RTC_TIME_NULL_BUFFER, 2, RTC_TIME_OFFSET, 3);
 8001224:	2303      	movs	r3, #3
 8001226:	2200      	movs	r2, #0
 8001228:	2102      	movs	r1, #2
 800122a:	4853      	ldr	r0, [pc, #332]	; (8001378 <MRT_reset_info+0x238>)
 800122c:	f001 fed6 	bl	8002fdc <W25qxx_WriteSector>

		  //Update variables (to 0)
		  for (int i = 0; i < 3; i++){
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001236:	e00b      	b.n	8001250 <MRT_reset_info+0x110>
			  *flash_time[i] = 0x0;
 8001238:	4a50      	ldr	r2, [pc, #320]	; (800137c <MRT_reset_info+0x23c>)
 800123a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 3; i++){
 8001246:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800124a:	3301      	adds	r3, #1
 800124c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001254:	2b02      	cmp	r3, #2
 8001256:	ddef      	ble.n	8001238 <MRT_reset_info+0xf8>

	  }


	  //Check if we start from the beginning
	  if (reset_flag==0){
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <MRT_reset_info+0x208>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d116      	bne.n	800128e <MRT_reset_info+0x14e>
		  print("FC restarted\r\n");
 8001260:	f04f 33ff 	mov.w	r3, #4294967295
 8001264:	220e      	movs	r2, #14
 8001266:	4946      	ldr	r1, [pc, #280]	; (8001380 <MRT_reset_info+0x240>)
 8001268:	483e      	ldr	r0, [pc, #248]	; (8001364 <MRT_reset_info+0x224>)
 800126a:	f007 fa24 	bl	80086b6 <HAL_UART_Transmit>

		  reset_flag = 1; //Flip flag
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <MRT_reset_info+0x208>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]

		  //Write new flag to flash memory
	      flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 8001274:	4b34      	ldr	r3, [pc, #208]	; (8001348 <MRT_reset_info+0x208>)
 8001276:	781a      	ldrb	r2, [r3, #0]
 8001278:	4b3c      	ldr	r3, [pc, #240]	; (800136c <MRT_reset_info+0x22c>)
 800127a:	701a      	strb	r2, [r3, #0]
		  W25qxx_EraseSector(1);
 800127c:	2001      	movs	r0, #1
 800127e:	f001 fd63 	bl	8002d48 <W25qxx_EraseSector>
		  W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8001282:	2305      	movs	r3, #5
 8001284:	2200      	movs	r2, #0
 8001286:	2101      	movs	r1, #1
 8001288:	4838      	ldr	r0, [pc, #224]	; (800136c <MRT_reset_info+0x22c>)
 800128a:	f001 fea7 	bl	8002fdc <W25qxx_WriteSector>
	  }


	  //Check if before or after apogee
	  if (apogee_flag == 0){
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <MRT_reset_info+0x244>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d107      	bne.n	80012a6 <MRT_reset_info+0x166>
		  print("Pre-apogee\r\n");
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	220c      	movs	r2, #12
 800129c:	493a      	ldr	r1, [pc, #232]	; (8001388 <MRT_reset_info+0x248>)
 800129e:	4831      	ldr	r0, [pc, #196]	; (8001364 <MRT_reset_info+0x224>)
 80012a0:	f007 fa09 	bl	80086b6 <HAL_UART_Transmit>
 80012a4:	e00a      	b.n	80012bc <MRT_reset_info+0x17c>
	  }
	  else if(apogee_flag==1){
 80012a6:	4b37      	ldr	r3, [pc, #220]	; (8001384 <MRT_reset_info+0x244>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d106      	bne.n	80012bc <MRT_reset_info+0x17c>
		  print("Post-apogee\r\n");
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	220d      	movs	r2, #13
 80012b4:	4935      	ldr	r1, [pc, #212]	; (800138c <MRT_reset_info+0x24c>)
 80012b6:	482b      	ldr	r0, [pc, #172]	; (8001364 <MRT_reset_info+0x224>)
 80012b8:	f007 f9fd 	bl	80086b6 <HAL_UART_Transmit>
	  }


	  //Check ejection stage
	  print("Ejection Stage: ");
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	2210      	movs	r2, #16
 80012c2:	4933      	ldr	r1, [pc, #204]	; (8001390 <MRT_reset_info+0x250>)
 80012c4:	4827      	ldr	r0, [pc, #156]	; (8001364 <MRT_reset_info+0x224>)
 80012c6:	f007 f9f6 	bl	80086b6 <HAL_UART_Transmit>
	  if (ejection_state_flag==0){
 80012ca:	4b32      	ldr	r3, [pc, #200]	; (8001394 <MRT_reset_info+0x254>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d107      	bne.n	80012e2 <MRT_reset_info+0x1a2>
		  print("Pad\r\n");
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	2205      	movs	r2, #5
 80012d8:	492f      	ldr	r1, [pc, #188]	; (8001398 <MRT_reset_info+0x258>)
 80012da:	4822      	ldr	r0, [pc, #136]	; (8001364 <MRT_reset_info+0x224>)
 80012dc:	f007 f9eb 	bl	80086b6 <HAL_UART_Transmit>
		  print("Main descent\r\n");
	  }
	  else if(ejection_state_flag==4){
		  print("Landed\r\n");
	  }
}
 80012e0:	e02e      	b.n	8001340 <MRT_reset_info+0x200>
	  else if(ejection_state_flag==1){
 80012e2:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <MRT_reset_info+0x254>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d107      	bne.n	80012fa <MRT_reset_info+0x1ba>
		  print("Boost\r\n");
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	2207      	movs	r2, #7
 80012f0:	492a      	ldr	r1, [pc, #168]	; (800139c <MRT_reset_info+0x25c>)
 80012f2:	481c      	ldr	r0, [pc, #112]	; (8001364 <MRT_reset_info+0x224>)
 80012f4:	f007 f9df 	bl	80086b6 <HAL_UART_Transmit>
}
 80012f8:	e022      	b.n	8001340 <MRT_reset_info+0x200>
	  else if(ejection_state_flag==2){
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <MRT_reset_info+0x254>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d107      	bne.n	8001312 <MRT_reset_info+0x1d2>
		  print("Drogue descent\r\n");
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	2210      	movs	r2, #16
 8001308:	4925      	ldr	r1, [pc, #148]	; (80013a0 <MRT_reset_info+0x260>)
 800130a:	4816      	ldr	r0, [pc, #88]	; (8001364 <MRT_reset_info+0x224>)
 800130c:	f007 f9d3 	bl	80086b6 <HAL_UART_Transmit>
}
 8001310:	e016      	b.n	8001340 <MRT_reset_info+0x200>
	  else if(ejection_state_flag==3){
 8001312:	4b20      	ldr	r3, [pc, #128]	; (8001394 <MRT_reset_info+0x254>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b03      	cmp	r3, #3
 8001318:	d107      	bne.n	800132a <MRT_reset_info+0x1ea>
		  print("Main descent\r\n");
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	220e      	movs	r2, #14
 8001320:	4920      	ldr	r1, [pc, #128]	; (80013a4 <MRT_reset_info+0x264>)
 8001322:	4810      	ldr	r0, [pc, #64]	; (8001364 <MRT_reset_info+0x224>)
 8001324:	f007 f9c7 	bl	80086b6 <HAL_UART_Transmit>
}
 8001328:	e00a      	b.n	8001340 <MRT_reset_info+0x200>
	  else if(ejection_state_flag==4){
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MRT_reset_info+0x254>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b04      	cmp	r3, #4
 8001330:	d106      	bne.n	8001340 <MRT_reset_info+0x200>
		  print("Landed\r\n");
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	2208      	movs	r2, #8
 8001338:	491b      	ldr	r1, [pc, #108]	; (80013a8 <MRT_reset_info+0x268>)
 800133a:	480a      	ldr	r0, [pc, #40]	; (8001364 <MRT_reset_info+0x224>)
 800133c:	f007 f9bb 	bl	80086b6 <HAL_UART_Transmit>
}
 8001340:	bf00      	nop
 8001342:	378c      	adds	r7, #140	; 0x8c
 8001344:	46bd      	mov	sp, r7
 8001346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001348:	20000270 	.word	0x20000270
 800134c:	20000271 	.word	0x20000271
 8001350:	20000272 	.word	0x20000272
 8001354:	20000275 	.word	0x20000275
 8001358:	20000276 	.word	0x20000276
 800135c:	20000277 	.word	0x20000277
 8001360:	08010564 	.word	0x08010564
 8001364:	20000a74 	.word	0x20000a74
 8001368:	080105a4 	.word	0x080105a4
 800136c:	20000b04 	.word	0x20000b04
 8001370:	080105b8 	.word	0x080105b8
 8001374:	080105c8 	.word	0x080105c8
 8001378:	20000278 	.word	0x20000278
 800137c:	20000018 	.word	0x20000018
 8001380:	080105e0 	.word	0x080105e0
 8001384:	20000273 	.word	0x20000273
 8001388:	080105f0 	.word	0x080105f0
 800138c:	08010600 	.word	0x08010600
 8001390:	08010610 	.word	0x08010610
 8001394:	20000274 	.word	0x20000274
 8001398:	08010624 	.word	0x08010624
 800139c:	0801062c 	.word	0x0801062c
 80013a0:	08010634 	.word	0x08010634
 80013a4:	08010648 	.word	0x08010648
 80013a8:	08010658 	.word	0x08010658

080013ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_ADC1_Init+0x98>)
 80013c0:	4a21      	ldr	r2, [pc, #132]	; (8001448 <MX_ADC1_Init+0x9c>)
 80013c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_ADC1_Init+0x98>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_ADC1_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_ADC1_Init+0x98>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_ADC1_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_ADC1_Init+0x98>)
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_ADC1_Init+0x98>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_ADC1_Init+0x98>)
 80013ec:	4a17      	ldr	r2, [pc, #92]	; (800144c <MX_ADC1_Init+0xa0>)
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_ADC1_Init+0x98>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_ADC1_Init+0x98>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_ADC1_Init+0x98>)
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_ADC1_Init+0x98>)
 8001406:	2201      	movs	r2, #1
 8001408:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800140a:	480e      	ldr	r0, [pc, #56]	; (8001444 <MX_ADC1_Init+0x98>)
 800140c:	f002 f9d8 	bl	80037c0 <HAL_ADC_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001416:	f000 fbd9 	bl	8001bcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800141a:	2306      	movs	r3, #6
 800141c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800141e:	2301      	movs	r3, #1
 8001420:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	4619      	mov	r1, r3
 800142a:	4806      	ldr	r0, [pc, #24]	; (8001444 <MX_ADC1_Init+0x98>)
 800142c:	f002 fa0c 	bl	8003848 <HAL_ADC_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001436:	f000 fbc9 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000077c 	.word	0x2000077c
 8001448:	40012000 	.word	0x40012000
 800144c:	0f000001 	.word	0x0f000001

08001450 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a17      	ldr	r2, [pc, #92]	; (80014cc <HAL_ADC_MspInit+0x7c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d127      	bne.n	80014c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <HAL_ADC_MspInit+0x80>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <HAL_ADC_MspInit+0x80>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_ADC_MspInit+0x80>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_ADC_MspInit+0x80>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <HAL_ADC_MspInit+0x80>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_ADC_MspInit+0x80>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80014aa:	2340      	movs	r3, #64	; 0x40
 80014ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ae:	2303      	movs	r3, #3
 80014b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <HAL_ADC_MspInit+0x84>)
 80014be:	f002 fcd3 	bl	8003e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	; 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40012000 	.word	0x40012000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	; 0x38
 80014dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
 80014f2:	4bb5      	ldr	r3, [pc, #724]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4ab4      	ldr	r2, [pc, #720]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 80014f8:	f043 0310 	orr.w	r3, r3, #16
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4bb2      	ldr	r3, [pc, #712]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	623b      	str	r3, [r7, #32]
 8001508:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	4bae      	ldr	r3, [pc, #696]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4aad      	ldr	r2, [pc, #692]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4bab      	ldr	r3, [pc, #684]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	4ba7      	ldr	r3, [pc, #668]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4aa6      	ldr	r2, [pc, #664]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4ba4      	ldr	r3, [pc, #656]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0320 	and.w	r3, r3, #32
 800153e:	61bb      	str	r3, [r7, #24]
 8001540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	4ba0      	ldr	r3, [pc, #640]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a9f      	ldr	r2, [pc, #636]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 800154c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b9d      	ldr	r3, [pc, #628]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	4b99      	ldr	r3, [pc, #612]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a98      	ldr	r2, [pc, #608]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b96      	ldr	r3, [pc, #600]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a91      	ldr	r2, [pc, #580]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b8f      	ldr	r3, [pc, #572]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	4b8b      	ldr	r3, [pc, #556]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a8a      	ldr	r2, [pc, #552]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 80015a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	4b84      	ldr	r3, [pc, #528]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a83      	ldr	r2, [pc, #524]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <MX_GPIO_Init+0x2f0>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	f248 4184 	movw	r1, #33924	; 0x8484
 80015d4:	487d      	ldr	r0, [pc, #500]	; (80017cc <MX_GPIO_Init+0x2f4>)
 80015d6:	f002 fdf3 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80015e0:	487b      	ldr	r0, [pc, #492]	; (80017d0 <MX_GPIO_Init+0x2f8>)
 80015e2:	f002 fded 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80015ec:	4879      	ldr	r0, [pc, #484]	; (80017d4 <MX_GPIO_Init+0x2fc>)
 80015ee:	f002 fde7 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2108      	movs	r1, #8
 80015f6:	4878      	ldr	r0, [pc, #480]	; (80017d8 <MX_GPIO_Init+0x300>)
 80015f8:	f002 fde2 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 80015fc:	2200      	movs	r2, #0
 80015fe:	f645 2126 	movw	r1, #23078	; 0x5a26
 8001602:	4876      	ldr	r0, [pc, #472]	; (80017dc <MX_GPIO_Init+0x304>)
 8001604:	f002 fddc 	bl	80041c0 <HAL_GPIO_WritePin>
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin, GPIO_PIN_RESET);
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 800160e:	4874      	ldr	r0, [pc, #464]	; (80017e0 <MX_GPIO_Init+0x308>)
 8001610:	f002 fdd6 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8001614:	2200      	movs	r2, #0
 8001616:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 800161a:	4872      	ldr	r0, [pc, #456]	; (80017e4 <MX_GPIO_Init+0x30c>)
 800161c:	f002 fdd0 	bl	80041c0 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8001620:	f248 4384 	movw	r3, #33924	; 0x8484
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	4864      	ldr	r0, [pc, #400]	; (80017cc <MX_GPIO_Init+0x2f4>)
 800163a:	f002 fc15 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 800163e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	485e      	ldr	r0, [pc, #376]	; (80017d0 <MX_GPIO_Init+0x2f8>)
 8001658:	f002 fc06 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 800165c:	2301      	movs	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001660:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	4858      	ldr	r0, [pc, #352]	; (80017d4 <MX_GPIO_Init+0x2fc>)
 8001672:	f002 fbf9 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8001676:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168c:	4619      	mov	r1, r3
 800168e:	4851      	ldr	r0, [pc, #324]	; (80017d4 <MX_GPIO_Init+0x2fc>)
 8001690:	f002 fbea 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8001694:	2308      	movs	r3, #8
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	484b      	ldr	r0, [pc, #300]	; (80017d8 <MX_GPIO_Init+0x300>)
 80016ac:	f002 fbdc 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80016b0:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4843      	ldr	r0, [pc, #268]	; (80017d4 <MX_GPIO_Init+0x2fc>)
 80016c6:	f002 fbcf 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80016ca:	2302      	movs	r3, #2
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	4840      	ldr	r0, [pc, #256]	; (80017e0 <MX_GPIO_Init+0x308>)
 80016de:	f002 fbc3 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 80016e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	4836      	ldr	r0, [pc, #216]	; (80017d0 <MX_GPIO_Init+0x2f8>)
 80016f8:	f002 fbb6 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|IN_EJ_Main_Cont_Pin
 80016fc:	f242 4319 	movw	r3, #9241	; 0x2419
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN_EJ_Drogue_Cont_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800170a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170e:	4619      	mov	r1, r3
 8001710:	4832      	ldr	r0, [pc, #200]	; (80017dc <MX_GPIO_Init+0x304>)
 8001712:	f002 fba9 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|OUT_VR_PWR_Pin
 8001716:	f645 2326 	movw	r3, #23078	; 0x5a26
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
                          |OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin|OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171c:	2301      	movs	r3, #1
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	4619      	mov	r1, r3
 800172e:	482b      	ldr	r0, [pc, #172]	; (80017dc <MX_GPIO_Init+0x304>)
 8001730:	f002 fb9a 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8001734:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173a:	2300      	movs	r3, #0
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	4619      	mov	r1, r3
 8001748:	4820      	ldr	r0, [pc, #128]	; (80017cc <MX_GPIO_Init+0x2f4>)
 800174a:	f002 fb8d 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PB8 PBPin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin|GPIO_PIN_8|POWER_ON_EXT_LED_Pin;
 800174e:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001754:	2301      	movs	r3, #1
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	481e      	ldr	r0, [pc, #120]	; (80017e0 <MX_GPIO_Init+0x308>)
 8001768:	f002 fb7e 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 800176c:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	4619      	mov	r1, r3
 8001784:	4817      	ldr	r0, [pc, #92]	; (80017e4 <MX_GPIO_Init+0x30c>)
 8001786:	f002 fb6f 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 800178a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179c:	4619      	mov	r1, r3
 800179e:	4811      	ldr	r0, [pc, #68]	; (80017e4 <MX_GPIO_Init+0x30c>)
 80017a0:	f002 fb62 	bl	8003e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 80017a4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b8:	4619      	mov	r1, r3
 80017ba:	4808      	ldr	r0, [pc, #32]	; (80017dc <MX_GPIO_Init+0x304>)
 80017bc:	f002 fb54 	bl	8003e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2105      	movs	r1, #5
 80017c4:	2006      	movs	r0, #6
 80017c6:	e00f      	b.n	80017e8 <MX_GPIO_Init+0x310>
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40021400 	.word	0x40021400
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40020400 	.word	0x40020400
 80017e4:	40020c00 	.word	0x40020c00
 80017e8:	f002 fb14 	bl	8003e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017ec:	2006      	movs	r0, #6
 80017ee:	f002 fb2d 	bl	8003e4c <HAL_NVIC_EnableIRQ>

}
 80017f2:	bf00      	nop
 80017f4:	3738      	adds	r7, #56	; 0x38
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop

080017fc <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <MX_I2C2_Init+0x74>)
 8001802:	4a1c      	ldr	r2, [pc, #112]	; (8001874 <MX_I2C2_Init+0x78>)
 8001804:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <MX_I2C2_Init+0x74>)
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <MX_I2C2_Init+0x7c>)
 800180a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <MX_I2C2_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <MX_I2C2_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_I2C2_Init+0x74>)
 800181a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <MX_I2C2_Init+0x74>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <MX_I2C2_Init+0x74>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <MX_I2C2_Init+0x74>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_I2C2_Init+0x74>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_I2C2_Init+0x74>)
 800183a:	f002 fcff 	bl	800423c <HAL_I2C_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001844:	f000 f9c2 	bl	8001bcc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001848:	2100      	movs	r1, #0
 800184a:	4809      	ldr	r0, [pc, #36]	; (8001870 <MX_I2C2_Init+0x74>)
 800184c:	f002 fe3a 	bl	80044c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001856:	f000 f9b9 	bl	8001bcc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800185a:	2100      	movs	r1, #0
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_I2C2_Init+0x74>)
 800185e:	f002 fe6d 	bl	800453c <HAL_I2CEx_ConfigDigitalFilter>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001868:	f000 f9b0 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000818 	.word	0x20000818
 8001874:	40005800 	.word	0x40005800
 8001878:	000186a0 	.word	0x000186a0

0800187c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_I2C3_Init+0x74>)
 8001882:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <MX_I2C3_Init+0x78>)
 8001884:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_I2C3_Init+0x74>)
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <MX_I2C3_Init+0x7c>)
 800188a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <MX_I2C3_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001892:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_I2C3_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001898:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_I2C3_Init+0x74>)
 800189a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800189e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_I2C3_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_I2C3_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <MX_I2C3_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_I2C3_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <MX_I2C3_Init+0x74>)
 80018ba:	f002 fcbf 	bl	800423c <HAL_I2C_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80018c4:	f000 f982 	bl	8001bcc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018c8:	2100      	movs	r1, #0
 80018ca:	4809      	ldr	r0, [pc, #36]	; (80018f0 <MX_I2C3_Init+0x74>)
 80018cc:	f002 fdfa 	bl	80044c4 <HAL_I2CEx_ConfigAnalogFilter>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80018d6:	f000 f979 	bl	8001bcc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018da:	2100      	movs	r1, #0
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <MX_I2C3_Init+0x74>)
 80018de:	f002 fe2d 	bl	800453c <HAL_I2CEx_ConfigDigitalFilter>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80018e8:	f000 f970 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200007c4 	.word	0x200007c4
 80018f4:	40005c00 	.word	0x40005c00
 80018f8:	000186a0 	.word	0x000186a0

080018fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	; 0x30
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a42      	ldr	r2, [pc, #264]	; (8001a24 <HAL_I2C_MspInit+0x128>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d12d      	bne.n	800197a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a40      	ldr	r2, [pc, #256]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b3e      	ldr	r3, [pc, #248]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	61bb      	str	r3, [r7, #24]
 8001938:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800193a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001940:	2312      	movs	r3, #18
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001944:	2301      	movs	r3, #1
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001948:	2303      	movs	r3, #3
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800194c:	2304      	movs	r3, #4
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4835      	ldr	r0, [pc, #212]	; (8001a2c <HAL_I2C_MspInit+0x130>)
 8001958:	f002 fa86 	bl	8003e68 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	4a30      	ldr	r2, [pc, #192]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 8001966:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800196a:	6413      	str	r3, [r2, #64]	; 0x40
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001978:	e050      	b.n	8001a1c <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a2c      	ldr	r2, [pc, #176]	; (8001a30 <HAL_I2C_MspInit+0x134>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d14b      	bne.n	8001a1c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6313      	str	r3, [r2, #48]	; 0x30
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4a1f      	ldr	r2, [pc, #124]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6313      	str	r3, [r2, #48]	; 0x30
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c2:	2312      	movs	r3, #18
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ca:	2303      	movs	r3, #3
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019ce:	2304      	movs	r3, #4
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	4816      	ldr	r0, [pc, #88]	; (8001a34 <HAL_I2C_MspInit+0x138>)
 80019da:	f002 fa45 	bl	8003e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e4:	2312      	movs	r3, #18
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e8:	2301      	movs	r3, #1
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019f0:	2304      	movs	r3, #4
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4619      	mov	r1, r3
 80019fa:	480f      	ldr	r0, [pc, #60]	; (8001a38 <HAL_I2C_MspInit+0x13c>)
 80019fc:	f002 fa34 	bl	8003e68 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 8001a0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_I2C_MspInit+0x12c>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
}
 8001a1c:	bf00      	nop
 8001a1e:	3730      	adds	r7, #48	; 0x30
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40005800 	.word	0x40005800
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40005c00 	.word	0x40005c00
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020000 	.word	0x40020000

08001a3c <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	MRT_STM_Init();
 8001a40:	f000 f890 	bl	8001b64 <MRT_STM_Init>
	println("\r\n\r\nSTM Init...OK");
 8001a44:	2211      	movs	r2, #17
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <main+0x40>)
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a0d      	ldr	r2, [pc, #52]	; (8001a80 <main+0x44>)
 8001a4c:	8811      	ldrh	r1, [r2, #0]
 8001a4e:	7892      	ldrb	r2, [r2, #2]
 8001a50:	8019      	strh	r1, [r3, #0]
 8001a52:	709a      	strb	r2, [r3, #2]
 8001a54:	4909      	ldr	r1, [pc, #36]	; (8001a7c <main+0x40>)
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	2213      	movs	r2, #19
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <main+0x48>)
 8001a5e:	f006 fe2a 	bl	80086b6 <HAL_UART_Transmit>

	MRT_Init();
 8001a62:	f7ff fad3 	bl	800100c <MRT_Init>

	print("Starting FC");
 8001a66:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6a:	220b      	movs	r2, #11
 8001a6c:	4906      	ldr	r1, [pc, #24]	; (8001a88 <main+0x4c>)
 8001a6e:	4805      	ldr	r0, [pc, #20]	; (8001a84 <main+0x48>)
 8001a70:	f006 fe21 	bl	80086b6 <HAL_UART_Transmit>

	return 1;
 8001a74:	2301      	movs	r3, #1
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	08010664 	.word	0x08010664
 8001a80:	08010678 	.word	0x08010678
 8001a84:	20000a74 	.word	0x20000a74
 8001a88:	0801067c 	.word	0x0801067c

08001a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b094      	sub	sp, #80	; 0x50
 8001a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a92:	f107 0320 	add.w	r3, r7, #32
 8001a96:	2230      	movs	r2, #48	; 0x30
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00a f921 	bl	800bce2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <SystemClock_Config+0xd0>)
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	4a28      	ldr	r2, [pc, #160]	; (8001b5c <SystemClock_Config+0xd0>)
 8001aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abe:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <SystemClock_Config+0xd0>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001acc:	2300      	movs	r3, #0
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <SystemClock_Config+0xd4>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ad8:	4a21      	ldr	r2, [pc, #132]	; (8001b60 <SystemClock_Config+0xd4>)
 8001ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b1f      	ldr	r3, [pc, #124]	; (8001b60 <SystemClock_Config+0xd4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001aec:	2309      	movs	r3, #9
 8001aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001af6:	2301      	movs	r3, #1
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afa:	2302      	movs	r3, #2
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001afe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b04:	2308      	movs	r3, #8
 8001b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001b08:	2348      	movs	r3, #72	; 0x48
 8001b0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001b10:	2303      	movs	r3, #3
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 fd15 	bl	8005548 <HAL_RCC_OscConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001b24:	f000 f852 	bl	8001bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b28:	230f      	movs	r3, #15
 8001b2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 ff77 	bl	8005a38 <HAL_RCC_ClockConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001b50:	f000 f83c 	bl	8001bcc <Error_Handler>
  }
}
 8001b54:	bf00      	nop
 8001b56:	3750      	adds	r7, #80	; 0x50
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40007000 	.word	0x40007000

08001b64 <MRT_STM_Init>:

/* USER CODE BEGIN 4 */

void MRT_STM_Init(void){
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
	HAL_Init();
 8001b68:	f001 fdc4 	bl	80036f4 <HAL_Init>
	SystemClock_Config();
 8001b6c:	f7ff ff8e 	bl	8001a8c <SystemClock_Config>

	MX_GPIO_Init();
 8001b70:	f7ff fcb2 	bl	80014d8 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001b74:	f7ff fc1a 	bl	80013ac <MX_ADC1_Init>
	MX_I2C2_Init();
 8001b78:	f7ff fe40 	bl	80017fc <MX_I2C2_Init>
	MX_I2C3_Init();
 8001b7c:	f7ff fe7e 	bl	800187c <MX_I2C3_Init>
	MX_SPI2_Init();
 8001b80:	f000 f8e8 	bl	8001d54 <MX_SPI2_Init>
	MX_SPI4_Init();
 8001b84:	f000 f91c 	bl	8001dc0 <MX_SPI4_Init>
	MX_SPI5_Init();
 8001b88:	f000 f950 	bl	8001e2c <MX_SPI5_Init>
	MX_TIM2_Init();
 8001b8c:	f000 fb0e 	bl	80021ac <MX_TIM2_Init>
	MX_UART8_Init();
 8001b90:	f000 fbda 	bl	8002348 <MX_UART8_Init>
	MX_USART3_UART_Init();
 8001b94:	f000 fc02 	bl	800239c <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8001b98:	f000 fc2a 	bl	80023f0 <MX_USART6_UART_Init>
	MX_RTC_Init();
 8001b9c:	f000 f81c 	bl	8001bd8 <MX_RTC_Init>
	//MX_IWDG_Init(); TODO ADD LATER
	MX_FATFS_Init();
 8001ba0:	f008 f80e 	bl	8009bc0 <MX_FATFS_Init>
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bba:	f001 fdbd 	bl	8003738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40001000 	.word	0x40001000

08001bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <Error_Handler+0x8>
	...

08001bd8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b090      	sub	sp, #64	; 0x40
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	2228      	movs	r2, #40	; 0x28
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00a f872 	bl	800bce2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bfe:	4b3a      	ldr	r3, [pc, #232]	; (8001ce8 <MX_RTC_Init+0x110>)
 8001c00:	4a3a      	ldr	r2, [pc, #232]	; (8001cec <MX_RTC_Init+0x114>)
 8001c02:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <MX_RTC_Init+0x110>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c0a:	4b37      	ldr	r3, [pc, #220]	; (8001ce8 <MX_RTC_Init+0x110>)
 8001c0c:	227f      	movs	r2, #127	; 0x7f
 8001c0e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c10:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <MX_RTC_Init+0x110>)
 8001c12:	22ff      	movs	r2, #255	; 0xff
 8001c14:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c16:	4b34      	ldr	r3, [pc, #208]	; (8001ce8 <MX_RTC_Init+0x110>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c1c:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <MX_RTC_Init+0x110>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c22:	4b31      	ldr	r3, [pc, #196]	; (8001ce8 <MX_RTC_Init+0x110>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c28:	482f      	ldr	r0, [pc, #188]	; (8001ce8 <MX_RTC_Init+0x110>)
 8001c2a:	f004 faef 	bl	800620c <HAL_RTC_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001c34:	f7ff ffca 	bl	8001bcc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c56:	2201      	movs	r2, #1
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4823      	ldr	r0, [pc, #140]	; (8001ce8 <MX_RTC_Init+0x110>)
 8001c5c:	f004 fb67 	bl	800632e <HAL_RTC_SetTime>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001c66:	f7ff ffb1 	bl	8001bcc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c86:	2201      	movs	r2, #1
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4817      	ldr	r0, [pc, #92]	; (8001ce8 <MX_RTC_Init+0x110>)
 8001c8c:	f004 fc0c 	bl	80064a8 <HAL_RTC_SetDate>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001c96:	f7ff ff99 	bl	8001bcc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cca:	463b      	mov	r3, r7
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_RTC_Init+0x110>)
 8001cd2:	f004 fc91 	bl	80065f8 <HAL_RTC_SetAlarm_IT>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001cdc:	f7ff ff76 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	3740      	adds	r7, #64	; 0x40
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000878 	.word	0x20000878
 8001cec:	40002800 	.word	0x40002800

08001cf0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08e      	sub	sp, #56	; 0x38
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	2230      	movs	r2, #48	; 0x30
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f009 ffee 	bl	800bce2 <memset>
  if(rtcHandle->Instance==RTC)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a10      	ldr	r2, [pc, #64]	; (8001d4c <HAL_RTC_MspInit+0x5c>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d119      	bne.n	8001d44 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d10:	2320      	movs	r3, #32
 8001d12:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 f8b6 	bl	8005e90 <HAL_RCCEx_PeriphCLKConfig>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001d2a:	f7ff ff4f 	bl	8001bcc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <HAL_RTC_MspInit+0x60>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2105      	movs	r1, #5
 8001d38:	2029      	movs	r0, #41	; 0x29
 8001d3a:	f002 f86b 	bl	8003e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001d3e:	2029      	movs	r0, #41	; 0x29
 8001d40:	f002 f884 	bl	8003e4c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001d44:	bf00      	nop
 8001d46:	3738      	adds	r7, #56	; 0x38
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40002800 	.word	0x40002800
 8001d50:	42470e3c 	.word	0x42470e3c

08001d54 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d58:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001d5a:	4a18      	ldr	r2, [pc, #96]	; (8001dbc <MX_SPI2_Init+0x68>)
 8001d5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001da0:	220a      	movs	r2, #10
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	; (8001db8 <MX_SPI2_Init+0x64>)
 8001da6:	f004 ff43 	bl	8006c30 <HAL_SPI_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001db0:	f7ff ff0c 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000898 	.word	0x20000898
 8001dbc:	40003800 	.word	0x40003800

08001dc0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <MX_SPI4_Init+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001dcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001e0c:	220a      	movs	r2, #10
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <MX_SPI4_Init+0x64>)
 8001e12:	f004 ff0d 	bl	8006c30 <HAL_SPI_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001e1c:	f7ff fed6 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000948 	.word	0x20000948
 8001e28:	40013400 	.word	0x40013400

08001e2c <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <MX_SPI5_Init+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e78:	220a      	movs	r2, #10
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <MX_SPI5_Init+0x64>)
 8001e7e:	f004 fed7 	bl	8006c30 <HAL_SPI_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001e88:	f7ff fea0 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200008f0 	.word	0x200008f0
 8001e94:	40015000 	.word	0x40015000

08001e98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08e      	sub	sp, #56	; 0x38
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a4c      	ldr	r2, [pc, #304]	; (8001fe8 <HAL_SPI_MspInit+0x150>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d12d      	bne.n	8001f16 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
 8001ebe:	4b4b      	ldr	r3, [pc, #300]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a4a      	ldr	r2, [pc, #296]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b48      	ldr	r3, [pc, #288]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed2:	623b      	str	r3, [r7, #32]
 8001ed4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	4b44      	ldr	r3, [pc, #272]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a43      	ldr	r2, [pc, #268]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b41      	ldr	r3, [pc, #260]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ef2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f04:	2305      	movs	r3, #5
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4838      	ldr	r0, [pc, #224]	; (8001ff0 <HAL_SPI_MspInit+0x158>)
 8001f10:	f001 ffaa 	bl	8003e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001f14:	e064      	b.n	8001fe0 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a36      	ldr	r2, [pc, #216]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d12d      	bne.n	8001f7c <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f20:	2300      	movs	r3, #0
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	4a30      	ldr	r2, [pc, #192]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f2e:	6453      	str	r3, [r2, #68]	; 0x44
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f38:	61bb      	str	r3, [r7, #24]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	4a29      	ldr	r2, [pc, #164]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f46:	f043 0310 	orr.w	r3, r3, #16
 8001f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001f58:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f72:	4619      	mov	r1, r3
 8001f74:	4820      	ldr	r0, [pc, #128]	; (8001ff8 <HAL_SPI_MspInit+0x160>)
 8001f76:	f001 ff77 	bl	8003e68 <HAL_GPIO_Init>
}
 8001f7a:	e031      	b.n	8001fe0 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <HAL_SPI_MspInit+0x164>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d12c      	bne.n	8001fe0 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	4a17      	ldr	r2, [pc, #92]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f94:	6453      	str	r3, [r2, #68]	; 0x44
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001fac:	f043 0320 	orr.w	r3, r3, #32
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001fbe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001fd0:	2305      	movs	r3, #5
 8001fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4809      	ldr	r0, [pc, #36]	; (8002000 <HAL_SPI_MspInit+0x168>)
 8001fdc:	f001 ff44 	bl	8003e68 <HAL_GPIO_Init>
}
 8001fe0:	bf00      	nop
 8001fe2:	3738      	adds	r7, #56	; 0x38
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40003800 	.word	0x40003800
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40013400 	.word	0x40013400
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40015000 	.word	0x40015000
 8002000:	40021400 	.word	0x40021400

08002004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_MspInit+0x54>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a11      	ldr	r2, [pc, #68]	; (8002058 <HAL_MspInit+0x54>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <HAL_MspInit+0x54>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_MspInit+0x54>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_MspInit+0x54>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <HAL_MspInit+0x54>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002042:	2200      	movs	r2, #0
 8002044:	210f      	movs	r1, #15
 8002046:	f06f 0001 	mvn.w	r0, #1
 800204a:	f001 fee3 	bl	8003e14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	; 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002064:	2300      	movs	r3, #0
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800206c:	2200      	movs	r2, #0
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	2036      	movs	r0, #54	; 0x36
 8002072:	f001 fecf 	bl	8003e14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002076:	2036      	movs	r0, #54	; 0x36
 8002078:	f001 fee8 	bl	8003e4c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <HAL_InitTick+0xa4>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <HAL_InitTick+0xa4>)
 8002086:	f043 0310 	orr.w	r3, r3, #16
 800208a:	6413      	str	r3, [r2, #64]	; 0x40
 800208c:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <HAL_InitTick+0xa4>)
 800208e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002098:	f107 0210 	add.w	r2, r7, #16
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 fec2 	bl	8005e2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020a8:	f003 fe98 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 80020ac:	4603      	mov	r3, r0
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b4:	4a13      	ldr	r2, [pc, #76]	; (8002104 <HAL_InitTick+0xa8>)
 80020b6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ba:	0c9b      	lsrs	r3, r3, #18
 80020bc:	3b01      	subs	r3, #1
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_InitTick+0xac>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <HAL_InitTick+0xb0>)
 80020c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <HAL_InitTick+0xac>)
 80020c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020ce:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <HAL_InitTick+0xac>)
 80020d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_InitTick+0xac>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_InitTick+0xac>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80020e0:	4809      	ldr	r0, [pc, #36]	; (8002108 <HAL_InitTick+0xac>)
 80020e2:	f005 fb4d 	bl	8007780 <HAL_TIM_Base_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d104      	bne.n	80020f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80020ec:	4806      	ldr	r0, [pc, #24]	; (8002108 <HAL_InitTick+0xac>)
 80020ee:	f005 fb97 	bl	8007820 <HAL_TIM_Base_Start_IT>
 80020f2:	4603      	mov	r3, r0
 80020f4:	e000      	b.n	80020f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3730      	adds	r7, #48	; 0x30
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40023800 	.word	0x40023800
 8002104:	431bde83 	.word	0x431bde83
 8002108:	200009a0 	.word	0x200009a0
 800210c:	40001000 	.word	0x40001000

08002110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <NMI_Handler+0x4>

08002116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211a:	e7fe      	b.n	800211a <HardFault_Handler+0x4>

0800211c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <MemManage_Handler+0x4>

08002122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <BusFault_Handler+0x4>

08002128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <UsageFault_Handler+0x4>

0800212e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002140:	2001      	movs	r0, #1
 8002142:	f002 f857 	bl	80041f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <RTC_Alarm_IRQHandler+0x10>)
 8002152:	f004 fb89 	bl	8006868 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000878 	.word	0x20000878

08002160 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002164:	4802      	ldr	r0, [pc, #8]	; (8002170 <TIM6_DAC_IRQHandler+0x10>)
 8002166:	f005 fc24 	bl	80079b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200009a0 	.word	0x200009a0

08002174 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <OTG_FS_IRQHandler+0x10>)
 800217a:	f002 fa2e 	bl	80045da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000fa8 	.word	0x20000fa8

08002188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <SystemInit+0x20>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	4a05      	ldr	r2, [pc, #20]	; (80021a8 <SystemInit+0x20>)
 8002194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000ed00 	.word	0xe000ed00

080021ac <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08e      	sub	sp, #56	; 0x38
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c0:	f107 0320 	add.w	r3, r7, #32
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
 80021d8:	615a      	str	r2, [r3, #20]
 80021da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <MX_TIM2_Init+0xe8>)
 80021de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80021e4:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <MX_TIM2_Init+0xe8>)
 80021e6:	2259      	movs	r2, #89	; 0x59
 80021e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ea:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <MX_TIM2_Init+0xe8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80021f0:	4b28      	ldr	r3, [pc, #160]	; (8002294 <MX_TIM2_Init+0xe8>)
 80021f2:	f240 128f 	movw	r2, #399	; 0x18f
 80021f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f8:	4b26      	ldr	r3, [pc, #152]	; (8002294 <MX_TIM2_Init+0xe8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fe:	4b25      	ldr	r3, [pc, #148]	; (8002294 <MX_TIM2_Init+0xe8>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002204:	4823      	ldr	r0, [pc, #140]	; (8002294 <MX_TIM2_Init+0xe8>)
 8002206:	f005 fabb 	bl	8007780 <HAL_TIM_Base_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002210:	f7ff fcdc 	bl	8001bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800221a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221e:	4619      	mov	r1, r3
 8002220:	481c      	ldr	r0, [pc, #112]	; (8002294 <MX_TIM2_Init+0xe8>)
 8002222:	f005 fd91 	bl	8007d48 <HAL_TIM_ConfigClockSource>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800222c:	f7ff fcce 	bl	8001bcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002230:	4818      	ldr	r0, [pc, #96]	; (8002294 <MX_TIM2_Init+0xe8>)
 8002232:	f005 fb65 	bl	8007900 <HAL_TIM_PWM_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800223c:	f7ff fcc6 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002240:	2320      	movs	r3, #32
 8002242:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002248:	f107 0320 	add.w	r3, r7, #32
 800224c:	4619      	mov	r1, r3
 800224e:	4811      	ldr	r0, [pc, #68]	; (8002294 <MX_TIM2_Init+0xe8>)
 8002250:	f006 f954 	bl	80084fc <HAL_TIMEx_MasterConfigSynchronization>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800225a:	f7ff fcb7 	bl	8001bcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225e:	2360      	movs	r3, #96	; 0x60
 8002260:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002262:	2364      	movs	r3, #100	; 0x64
 8002264:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	2208      	movs	r2, #8
 8002272:	4619      	mov	r1, r3
 8002274:	4807      	ldr	r0, [pc, #28]	; (8002294 <MX_TIM2_Init+0xe8>)
 8002276:	f005 fca5 	bl	8007bc4 <HAL_TIM_PWM_ConfigChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002280:	f7ff fca4 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002284:	4803      	ldr	r0, [pc, #12]	; (8002294 <MX_TIM2_Init+0xe8>)
 8002286:	f000 f827 	bl	80022d8 <HAL_TIM_MspPostInit>

}
 800228a:	bf00      	nop
 800228c:	3738      	adds	r7, #56	; 0x38
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200009e8 	.word	0x200009e8

08002298 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d10d      	bne.n	80022c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_TIM_Base_MspInit+0x3c>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a08      	ldr	r2, [pc, #32]	; (80022d4 <HAL_TIM_Base_MspInit+0x3c>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_TIM_Base_MspInit+0x3c>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800

080022d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f8:	d11d      	bne.n	8002336 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <HAL_TIM_MspPostInit+0x68>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a0f      	ldr	r2, [pc, #60]	; (8002340 <HAL_TIM_MspPostInit+0x68>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <HAL_TIM_MspPostInit+0x68>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8002316:	2304      	movs	r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002326:	2301      	movs	r3, #1
 8002328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	4619      	mov	r1, r3
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <HAL_TIM_MspPostInit+0x6c>)
 8002332:	f001 fd99 	bl	8003e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002336:	bf00      	nop
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000

08002348 <MX_UART8_Init>:
UART_HandleTypeDef huart3;
UART_HandleTypeDef huart6;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <MX_UART8_Init+0x4c>)
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <MX_UART8_Init+0x50>)
 8002350:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002352:	4b10      	ldr	r3, [pc, #64]	; (8002394 <MX_UART8_Init+0x4c>)
 8002354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002358:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <MX_UART8_Init+0x4c>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <MX_UART8_Init+0x4c>)
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <MX_UART8_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <MX_UART8_Init+0x4c>)
 800236e:	220c      	movs	r2, #12
 8002370:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <MX_UART8_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <MX_UART8_Init+0x4c>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800237e:	4805      	ldr	r0, [pc, #20]	; (8002394 <MX_UART8_Init+0x4c>)
 8002380:	f006 f94c 	bl	800861c <HAL_UART_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800238a:	f7ff fc1f 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000a74 	.word	0x20000a74
 8002398:	40007c00 	.word	0x40007c00

0800239c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_USART3_UART_Init+0x4c>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <MX_USART3_UART_Init+0x50>)
 80023a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <MX_USART3_UART_Init+0x4c>)
 80023a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_USART3_UART_Init+0x4c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <MX_USART3_UART_Init+0x4c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_USART3_UART_Init+0x4c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <MX_USART3_UART_Init+0x4c>)
 80023c2:	220c      	movs	r2, #12
 80023c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MX_USART3_UART_Init+0x4c>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <MX_USART3_UART_Init+0x4c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023d2:	4805      	ldr	r0, [pc, #20]	; (80023e8 <MX_USART3_UART_Init+0x4c>)
 80023d4:	f006 f922 	bl	800861c <HAL_UART_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023de:	f7ff fbf5 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000a30 	.word	0x20000a30
 80023ec:	40004800 	.word	0x40004800

080023f0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_USART6_UART_Init+0x4c>)
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <MX_USART6_UART_Init+0x50>)
 80023f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80023fa:	4b10      	ldr	r3, [pc, #64]	; (800243c <MX_USART6_UART_Init+0x4c>)
 80023fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002400:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_USART6_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MX_USART6_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MX_USART6_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_USART6_UART_Init+0x4c>)
 8002416:	220c      	movs	r2, #12
 8002418:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <MX_USART6_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_USART6_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_USART6_UART_Init+0x4c>)
 8002428:	f006 f8f8 	bl	800861c <HAL_UART_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002432:	f7ff fbcb 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000ab8 	.word	0x20000ab8
 8002440:	40011400 	.word	0x40011400

08002444 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08e      	sub	sp, #56	; 0x38
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a4b      	ldr	r2, [pc, #300]	; (8002590 <HAL_UART_MspInit+0x14c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d12c      	bne.n	80024c0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_UART_MspInit+0x150>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a49      	ldr	r2, [pc, #292]	; (8002594 <HAL_UART_MspInit+0x150>)
 8002470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_UART_MspInit+0x150>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800247e:	623b      	str	r3, [r7, #32]
 8002480:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
 8002486:	4b43      	ldr	r3, [pc, #268]	; (8002594 <HAL_UART_MspInit+0x150>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a42      	ldr	r2, [pc, #264]	; (8002594 <HAL_UART_MspInit+0x150>)
 800248c:	f043 0310 	orr.w	r3, r3, #16
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b40      	ldr	r3, [pc, #256]	; (8002594 <HAL_UART_MspInit+0x150>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	61fb      	str	r3, [r7, #28]
 800249c:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 800249e:	2303      	movs	r3, #3
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024aa:	2303      	movs	r3, #3
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80024ae:	2308      	movs	r3, #8
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b6:	4619      	mov	r1, r3
 80024b8:	4837      	ldr	r0, [pc, #220]	; (8002598 <HAL_UART_MspInit+0x154>)
 80024ba:	f001 fcd5 	bl	8003e68 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80024be:	e063      	b.n	8002588 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART3)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a35      	ldr	r2, [pc, #212]	; (800259c <HAL_UART_MspInit+0x158>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d12d      	bne.n	8002526 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	4b31      	ldr	r3, [pc, #196]	; (8002594 <HAL_UART_MspInit+0x150>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a30      	ldr	r2, [pc, #192]	; (8002594 <HAL_UART_MspInit+0x150>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
 80024da:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <HAL_UART_MspInit+0x150>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <HAL_UART_MspInit+0x150>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a29      	ldr	r2, [pc, #164]	; (8002594 <HAL_UART_MspInit+0x150>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b27      	ldr	r3, [pc, #156]	; (8002594 <HAL_UART_MspInit+0x150>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8002502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002510:	2303      	movs	r3, #3
 8002512:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002514:	2307      	movs	r3, #7
 8002516:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800251c:	4619      	mov	r1, r3
 800251e:	4820      	ldr	r0, [pc, #128]	; (80025a0 <HAL_UART_MspInit+0x15c>)
 8002520:	f001 fca2 	bl	8003e68 <HAL_GPIO_Init>
}
 8002524:	e030      	b.n	8002588 <HAL_UART_MspInit+0x144>
  else if(uartHandle->Instance==USART6)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <HAL_UART_MspInit+0x160>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d12b      	bne.n	8002588 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <HAL_UART_MspInit+0x150>)
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	4a16      	ldr	r2, [pc, #88]	; (8002594 <HAL_UART_MspInit+0x150>)
 800253a:	f043 0320 	orr.w	r3, r3, #32
 800253e:	6453      	str	r3, [r2, #68]	; 0x44
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <HAL_UART_MspInit+0x150>)
 8002542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	4b10      	ldr	r3, [pc, #64]	; (8002594 <HAL_UART_MspInit+0x150>)
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <HAL_UART_MspInit+0x150>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	6313      	str	r3, [r2, #48]	; 0x30
 800255c:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <HAL_UART_MspInit+0x150>)
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8002568:	23c0      	movs	r3, #192	; 0xc0
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002578:	2308      	movs	r3, #8
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800257c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002580:	4619      	mov	r1, r3
 8002582:	4809      	ldr	r0, [pc, #36]	; (80025a8 <HAL_UART_MspInit+0x164>)
 8002584:	f001 fc70 	bl	8003e68 <HAL_GPIO_Init>
}
 8002588:	bf00      	nop
 800258a:	3738      	adds	r7, #56	; 0x38
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40007c00 	.word	0x40007c00
 8002594:	40023800 	.word	0x40023800
 8002598:	40021000 	.word	0x40021000
 800259c:	40004800 	.word	0x40004800
 80025a0:	40020c00 	.word	0x40020c00
 80025a4:	40011400 	.word	0x40011400
 80025a8:	40020800 	.word	0x40020800

080025ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80025ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025b2:	e003      	b.n	80025bc <LoopCopyDataInit>

080025b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025ba:	3104      	adds	r1, #4

080025bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025bc:	480b      	ldr	r0, [pc, #44]	; (80025ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025c4:	d3f6      	bcc.n	80025b4 <CopyDataInit>
  ldr  r2, =_sbss
 80025c6:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025c8:	e002      	b.n	80025d0 <LoopFillZerobss>

080025ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025cc:	f842 3b04 	str.w	r3, [r2], #4

080025d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025d4:	d3f9      	bcc.n	80025ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025d6:	f7ff fdd7 	bl	8002188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025da:	f009 fb4d 	bl	800bc78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025de:	f7ff fa2d 	bl	8001a3c <main>
  bx  lr    
 80025e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025e4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80025e8:	08011474 	.word	0x08011474
  ldr  r0, =_sdata
 80025ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025f0:	20000254 	.word	0x20000254
  ldr  r2, =_sbss
 80025f4:	20000254 	.word	0x20000254
  ldr  r3, = _ebss
 80025f8:	200013c0 	.word	0x200013c0

080025fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC_IRQHandler>
	...

08002600 <MRT_external_flash_Init>:


//**************************************************//
//FUNCTIONS

void MRT_external_flash_Init(void){
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0

	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	e007      	b.n	800261c <MRT_external_flash_Init+0x1c>
		FLAGS_NULL_BUFFER[i] = 0; //Setup the flags null buffer for the correct number of values
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <MRT_external_flash_Init+0x48>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3301      	adds	r3, #1
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b04      	cmp	r3, #4
 8002620:	ddf4      	ble.n	800260c <MRT_external_flash_Init+0xc>
	}

	if (!W25qxx_Init()) {
 8002622:	f000 fa3f 	bl	8002aa4 <W25qxx_Init>
 8002626:	4603      	mov	r3, r0
 8002628:	f083 0301 	eor.w	r3, r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MRT_external_flash_Init+0x36>
		Error_Handler(); // hangs and blinks LEDF
 8002632:	f7ff facb 	bl	8001bcc <Error_Handler>
	}
	MRT_check_for_wake_up(); //Needs to be called before getFlags() and after the W25xx_Init()
 8002636:	f000 fed9 	bl	80033ec <MRT_check_for_wake_up>
	MRT_get_flags();
 800263a:	f000 f807 	bl	800264c <MRT_get_flags>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000afc 	.word	0x20000afc

0800264c <MRT_get_flags>:




void MRT_get_flags(void){
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0

	//Retrieve flags
	W25qxx_ReadSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002650:	2305      	movs	r3, #5
 8002652:	2200      	movs	r2, #0
 8002654:	2101      	movs	r1, #1
 8002656:	486a      	ldr	r0, [pc, #424]	; (8002800 <MRT_get_flags+0x1b4>)
 8002658:	f000 fdfe 	bl	8003258 <W25qxx_ReadSector>

	//Retrieve RTC time (last recorded)
	W25qxx_ReadSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 800265c:	2303      	movs	r3, #3
 800265e:	2200      	movs	r2, #0
 8002660:	2102      	movs	r1, #2
 8002662:	4868      	ldr	r0, [pc, #416]	; (8002804 <MRT_get_flags+0x1b8>)
 8002664:	f000 fdf8 	bl	8003258 <W25qxx_ReadSector>

	//If RTC detected a wake up, update the flash memory
	if (wu_flag == 1){
 8002668:	4b67      	ldr	r3, [pc, #412]	; (8002808 <MRT_get_flags+0x1bc>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d10e      	bne.n	800268e <MRT_get_flags+0x42>
		//Write the new number of wake up to external flash
		flash_flags_buffer[WU_FLAG_OFFSET] = flash_flags_buffer[WU_FLAG_OFFSET] + 1; //Update number of wake up
 8002670:	4b63      	ldr	r3, [pc, #396]	; (8002800 <MRT_get_flags+0x1b4>)
 8002672:	785b      	ldrb	r3, [r3, #1]
 8002674:	3301      	adds	r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b61      	ldr	r3, [pc, #388]	; (8002800 <MRT_get_flags+0x1b4>)
 800267a:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 800267c:	2001      	movs	r0, #1
 800267e:	f000 fb63 	bl	8002d48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002682:	2305      	movs	r3, #5
 8002684:	2200      	movs	r2, #0
 8002686:	2101      	movs	r1, #1
 8002688:	485d      	ldr	r0, [pc, #372]	; (8002800 <MRT_get_flags+0x1b4>)
 800268a:	f000 fca7 	bl	8002fdc <W25qxx_WriteSector>
	}

	//Assign each value read to their variable
	 MRT_update_flags_values();
 800268e:	f000 f8cb 	bl	8002828 <MRT_update_flags_values>


	//Check flags values
	//Reset flag
	if (reset_flag != 0 && reset_flag !=1){ //If random value (none was written)
 8002692:	4b5e      	ldr	r3, [pc, #376]	; (800280c <MRT_get_flags+0x1c0>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d013      	beq.n	80026c2 <MRT_get_flags+0x76>
 800269a:	4b5c      	ldr	r3, [pc, #368]	; (800280c <MRT_get_flags+0x1c0>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d00f      	beq.n	80026c2 <MRT_get_flags+0x76>
		reset_flag = 0;
 80026a2:	4b5a      	ldr	r3, [pc, #360]	; (800280c <MRT_get_flags+0x1c0>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[RESET_FLAG_OFFSET] = reset_flag;
 80026a8:	4b58      	ldr	r3, [pc, #352]	; (800280c <MRT_get_flags+0x1c0>)
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	4b54      	ldr	r3, [pc, #336]	; (8002800 <MRT_get_flags+0x1b4>)
 80026ae:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(1);
 80026b0:	2001      	movs	r0, #1
 80026b2:	f000 fb49 	bl	8002d48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80026b6:	2305      	movs	r3, #5
 80026b8:	2200      	movs	r2, #0
 80026ba:	2101      	movs	r1, #1
 80026bc:	4850      	ldr	r0, [pc, #320]	; (8002800 <MRT_get_flags+0x1b4>)
 80026be:	f000 fc8d 	bl	8002fdc <W25qxx_WriteSector>
	}

	//Wake up flag
	if (wu_flag != 0 && wu_flag !=1 && wu_flag !=2){ //If random value (none was written)
 80026c2:	4b51      	ldr	r3, [pc, #324]	; (8002808 <MRT_get_flags+0x1bc>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d017      	beq.n	80026fa <MRT_get_flags+0xae>
 80026ca:	4b4f      	ldr	r3, [pc, #316]	; (8002808 <MRT_get_flags+0x1bc>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d013      	beq.n	80026fa <MRT_get_flags+0xae>
 80026d2:	4b4d      	ldr	r3, [pc, #308]	; (8002808 <MRT_get_flags+0x1bc>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d00f      	beq.n	80026fa <MRT_get_flags+0xae>
		wu_flag = 0;
 80026da:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <MRT_get_flags+0x1bc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[WU_FLAG_OFFSET] = wu_flag;
 80026e0:	4b49      	ldr	r3, [pc, #292]	; (8002808 <MRT_get_flags+0x1bc>)
 80026e2:	781a      	ldrb	r2, [r3, #0]
 80026e4:	4b46      	ldr	r3, [pc, #280]	; (8002800 <MRT_get_flags+0x1b4>)
 80026e6:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(1);
 80026e8:	2001      	movs	r0, #1
 80026ea:	f000 fb2d 	bl	8002d48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 80026ee:	2305      	movs	r3, #5
 80026f0:	2200      	movs	r2, #0
 80026f2:	2101      	movs	r1, #1
 80026f4:	4842      	ldr	r0, [pc, #264]	; (8002800 <MRT_get_flags+0x1b4>)
 80026f6:	f000 fc71 	bl	8002fdc <W25qxx_WriteSector>
	}

	//IWDG flag
	if (iwdg_flag != 0 && iwdg_flag !=1){ //If random value (none was written)
 80026fa:	4b45      	ldr	r3, [pc, #276]	; (8002810 <MRT_get_flags+0x1c4>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d013      	beq.n	800272a <MRT_get_flags+0xde>
 8002702:	4b43      	ldr	r3, [pc, #268]	; (8002810 <MRT_get_flags+0x1c4>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d00f      	beq.n	800272a <MRT_get_flags+0xde>
		iwdg_flag = 0;
 800270a:	4b41      	ldr	r3, [pc, #260]	; (8002810 <MRT_get_flags+0x1c4>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[IWDG_FLAG_OFFSET] = iwdg_flag;
 8002710:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <MRT_get_flags+0x1c4>)
 8002712:	781a      	ldrb	r2, [r3, #0]
 8002714:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <MRT_get_flags+0x1b4>)
 8002716:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(1);
 8002718:	2001      	movs	r0, #1
 800271a:	f000 fb15 	bl	8002d48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800271e:	2305      	movs	r3, #5
 8002720:	2200      	movs	r2, #0
 8002722:	2101      	movs	r1, #1
 8002724:	4836      	ldr	r0, [pc, #216]	; (8002800 <MRT_get_flags+0x1b4>)
 8002726:	f000 fc59 	bl	8002fdc <W25qxx_WriteSector>
	}

	//Apogee flag
	if (apogee_flag != 0 && apogee_flag !=1){ //If random value (none was written)
 800272a:	4b3a      	ldr	r3, [pc, #232]	; (8002814 <MRT_get_flags+0x1c8>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d013      	beq.n	800275a <MRT_get_flags+0x10e>
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <MRT_get_flags+0x1c8>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d00f      	beq.n	800275a <MRT_get_flags+0x10e>
		apogee_flag = 0;
 800273a:	4b36      	ldr	r3, [pc, #216]	; (8002814 <MRT_get_flags+0x1c8>)
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[APOGEE_FLAG_OFFSET] = apogee_flag;
 8002740:	4b34      	ldr	r3, [pc, #208]	; (8002814 <MRT_get_flags+0x1c8>)
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <MRT_get_flags+0x1b4>)
 8002746:	70da      	strb	r2, [r3, #3]
		W25qxx_EraseSector(1);
 8002748:	2001      	movs	r0, #1
 800274a:	f000 fafd 	bl	8002d48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 800274e:	2305      	movs	r3, #5
 8002750:	2200      	movs	r2, #0
 8002752:	2101      	movs	r1, #1
 8002754:	482a      	ldr	r0, [pc, #168]	; (8002800 <MRT_get_flags+0x1b4>)
 8002756:	f000 fc41 	bl	8002fdc <W25qxx_WriteSector>
	}

	//Ejection state flag
	if (!(ejection_state_flag >= 0 && ejection_state_flag <=4)){ //If random value (none was written)
 800275a:	4b2f      	ldr	r3, [pc, #188]	; (8002818 <MRT_get_flags+0x1cc>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b04      	cmp	r3, #4
 8002760:	d90f      	bls.n	8002782 <MRT_get_flags+0x136>
		ejection_state_flag = 0;
 8002762:	4b2d      	ldr	r3, [pc, #180]	; (8002818 <MRT_get_flags+0x1cc>)
 8002764:	2200      	movs	r2, #0
 8002766:	701a      	strb	r2, [r3, #0]
		flash_flags_buffer[EJECTION_STATE_FLAG_OFFSET] = ejection_state_flag;
 8002768:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <MRT_get_flags+0x1cc>)
 800276a:	781a      	ldrb	r2, [r3, #0]
 800276c:	4b24      	ldr	r3, [pc, #144]	; (8002800 <MRT_get_flags+0x1b4>)
 800276e:	711a      	strb	r2, [r3, #4]
		W25qxx_EraseSector(1);
 8002770:	2001      	movs	r0, #1
 8002772:	f000 fae9 	bl	8002d48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_flags_buffer, 1, FLAGS_OFFSET, NB_OF_FLAGS);
 8002776:	2305      	movs	r3, #5
 8002778:	2200      	movs	r2, #0
 800277a:	2101      	movs	r1, #1
 800277c:	4820      	ldr	r0, [pc, #128]	; (8002800 <MRT_get_flags+0x1b4>)
 800277e:	f000 fc2d 	bl	8002fdc <W25qxx_WriteSector>
	}


	//Check RTC time values
	//Hours
	if (!(prev_hours >= 0 && prev_hours < 24)){ //If random value (none was written)
 8002782:	4b26      	ldr	r3, [pc, #152]	; (800281c <MRT_get_flags+0x1d0>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b17      	cmp	r3, #23
 8002788:	d90f      	bls.n	80027aa <MRT_get_flags+0x15e>
		prev_hours = 0;
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <MRT_get_flags+0x1d0>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_HOURS_OFFSET] = prev_hours;
 8002790:	4b22      	ldr	r3, [pc, #136]	; (800281c <MRT_get_flags+0x1d0>)
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <MRT_get_flags+0x1b8>)
 8002796:	701a      	strb	r2, [r3, #0]
		W25qxx_EraseSector(2);
 8002798:	2002      	movs	r0, #2
 800279a:	f000 fad5 	bl	8002d48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 800279e:	2303      	movs	r3, #3
 80027a0:	2200      	movs	r2, #0
 80027a2:	2102      	movs	r1, #2
 80027a4:	4817      	ldr	r0, [pc, #92]	; (8002804 <MRT_get_flags+0x1b8>)
 80027a6:	f000 fc19 	bl	8002fdc <W25qxx_WriteSector>
	}

	//Minutes
	if (!(prev_min >= 0 && prev_min < 60)){ //If random value (none was written)
 80027aa:	4b1d      	ldr	r3, [pc, #116]	; (8002820 <MRT_get_flags+0x1d4>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b3b      	cmp	r3, #59	; 0x3b
 80027b0:	d90f      	bls.n	80027d2 <MRT_get_flags+0x186>
		prev_min = 0;
 80027b2:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <MRT_get_flags+0x1d4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_MIN_OFFSET] = prev_min;
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <MRT_get_flags+0x1d4>)
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MRT_get_flags+0x1b8>)
 80027be:	705a      	strb	r2, [r3, #1]
		W25qxx_EraseSector(2);
 80027c0:	2002      	movs	r0, #2
 80027c2:	f000 fac1 	bl	8002d48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80027c6:	2303      	movs	r3, #3
 80027c8:	2200      	movs	r2, #0
 80027ca:	2102      	movs	r1, #2
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <MRT_get_flags+0x1b8>)
 80027ce:	f000 fc05 	bl	8002fdc <W25qxx_WriteSector>
	}

	//Seconds
	if (!(prev_sec >= 0 && prev_sec < 60)){ //If random value (none was written)
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <MRT_get_flags+0x1d8>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b3b      	cmp	r3, #59	; 0x3b
 80027d8:	d90f      	bls.n	80027fa <MRT_get_flags+0x1ae>
		prev_sec = 0;
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <MRT_get_flags+0x1d8>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
		flash_time_buffer[RTC_SEC_OFFSET] = prev_sec;
 80027e0:	4b10      	ldr	r3, [pc, #64]	; (8002824 <MRT_get_flags+0x1d8>)
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	4b07      	ldr	r3, [pc, #28]	; (8002804 <MRT_get_flags+0x1b8>)
 80027e6:	709a      	strb	r2, [r3, #2]
		W25qxx_EraseSector(2);
 80027e8:	2002      	movs	r0, #2
 80027ea:	f000 faad 	bl	8002d48 <W25qxx_EraseSector>
		W25qxx_WriteSector(flash_time_buffer, 2, RTC_TIME_OFFSET, 3);
 80027ee:	2303      	movs	r3, #3
 80027f0:	2200      	movs	r2, #0
 80027f2:	2102      	movs	r1, #2
 80027f4:	4803      	ldr	r0, [pc, #12]	; (8002804 <MRT_get_flags+0x1b8>)
 80027f6:	f000 fbf1 	bl	8002fdc <W25qxx_WriteSector>
	}
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000b04 	.word	0x20000b04
 8002804:	20000b0c 	.word	0x20000b0c
 8002808:	20000271 	.word	0x20000271
 800280c:	20000270 	.word	0x20000270
 8002810:	20000272 	.word	0x20000272
 8002814:	20000273 	.word	0x20000273
 8002818:	20000274 	.word	0x20000274
 800281c:	20000275 	.word	0x20000275
 8002820:	20000276 	.word	0x20000276
 8002824:	20000277 	.word	0x20000277

08002828 <MRT_update_flags_values>:
		flash_time_buffer[i] = *flash_time[i];
	}
}


void MRT_update_flags_values(void){
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NB_OF_FLAGS; i++){
 800282e:	2300      	movs	r3, #0
 8002830:	607b      	str	r3, [r7, #4]
 8002832:	e00b      	b.n	800284c <MRT_update_flags_values+0x24>
		*flash_flags[i] = flash_flags_buffer[i];
 8002834:	4a13      	ldr	r2, [pc, #76]	; (8002884 <MRT_update_flags_values+0x5c>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283c:	4912      	ldr	r1, [pc, #72]	; (8002888 <MRT_update_flags_values+0x60>)
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	440a      	add	r2, r1
 8002842:	7812      	ldrb	r2, [r2, #0]
 8002844:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NB_OF_FLAGS; i++){
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3301      	adds	r3, #1
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b04      	cmp	r3, #4
 8002850:	ddf0      	ble.n	8002834 <MRT_update_flags_values+0xc>
	}
	for (int i = 0; i < 3; i++){
 8002852:	2300      	movs	r3, #0
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	e00b      	b.n	8002870 <MRT_update_flags_values+0x48>
		*flash_time[i] = flash_time_buffer[i];
 8002858:	4a0c      	ldr	r2, [pc, #48]	; (800288c <MRT_update_flags_values+0x64>)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002860:	490b      	ldr	r1, [pc, #44]	; (8002890 <MRT_update_flags_values+0x68>)
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	440a      	add	r2, r1
 8002866:	7812      	ldrb	r2, [r2, #0]
 8002868:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; i++){
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	3301      	adds	r3, #1
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b02      	cmp	r3, #2
 8002874:	ddf0      	ble.n	8002858 <MRT_update_flags_values+0x30>
	}
}
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	20000004 	.word	0x20000004
 8002888:	20000b04 	.word	0x20000b04
 800288c:	20000018 	.word	0x20000018
 8002890:	20000b0c 	.word	0x20000b0c

08002894 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af02      	add	r7, sp, #8
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800289e:	f107 020f 	add.w	r2, r7, #15
 80028a2:	1df9      	adds	r1, r7, #7
 80028a4:	2364      	movs	r3, #100	; 0x64
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2301      	movs	r3, #1
 80028aa:	4804      	ldr	r0, [pc, #16]	; (80028bc <W25qxx_Spi+0x28>)
 80028ac:	f004 fc96 	bl	80071dc <HAL_SPI_TransmitReceive>
	return ret;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200008f0 	.word	0x200008f0

080028c0 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	2300      	movs	r3, #0
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	2300      	movs	r3, #0
 80028d4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2140      	movs	r1, #64	; 0x40
 80028da:	4813      	ldr	r0, [pc, #76]	; (8002928 <W25qxx_ReadID+0x68>)
 80028dc:	f001 fc70 	bl	80041c0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80028e0:	209f      	movs	r0, #159	; 0x9f
 80028e2:	f7ff ffd7 	bl	8002894 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80028e6:	20a5      	movs	r0, #165	; 0xa5
 80028e8:	f7ff ffd4 	bl	8002894 <W25qxx_Spi>
 80028ec:	4603      	mov	r3, r0
 80028ee:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80028f0:	20a5      	movs	r0, #165	; 0xa5
 80028f2:	f7ff ffcf 	bl	8002894 <W25qxx_Spi>
 80028f6:	4603      	mov	r3, r0
 80028f8:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80028fa:	20a5      	movs	r0, #165	; 0xa5
 80028fc:	f7ff ffca 	bl	8002894 <W25qxx_Spi>
 8002900:	4603      	mov	r3, r0
 8002902:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002904:	2201      	movs	r2, #1
 8002906:	2140      	movs	r1, #64	; 0x40
 8002908:	4807      	ldr	r0, [pc, #28]	; (8002928 <W25qxx_ReadID+0x68>)
 800290a:	f001 fc59 	bl	80041c0 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	041a      	lsls	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	4313      	orrs	r3, r2
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
	return Temp;
 800291e:	68fb      	ldr	r3, [r7, #12]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40020c00 	.word	0x40020c00

0800292c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002932:	2200      	movs	r2, #0
 8002934:	2140      	movs	r1, #64	; 0x40
 8002936:	4816      	ldr	r0, [pc, #88]	; (8002990 <W25qxx_ReadUniqID+0x64>)
 8002938:	f001 fc42 	bl	80041c0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 800293c:	204b      	movs	r0, #75	; 0x4b
 800293e:	f7ff ffa9 	bl	8002894 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8002942:	2300      	movs	r3, #0
 8002944:	71fb      	strb	r3, [r7, #7]
 8002946:	e005      	b.n	8002954 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002948:	20a5      	movs	r0, #165	; 0xa5
 800294a:	f7ff ffa3 	bl	8002894 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	3301      	adds	r3, #1
 8002952:	71fb      	strb	r3, [r7, #7]
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d9f6      	bls.n	8002948 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 800295a:	2300      	movs	r3, #0
 800295c:	71bb      	strb	r3, [r7, #6]
 800295e:	e00b      	b.n	8002978 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002960:	79bc      	ldrb	r4, [r7, #6]
 8002962:	20a5      	movs	r0, #165	; 0xa5
 8002964:	f7ff ff96 	bl	8002894 <W25qxx_Spi>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <W25qxx_ReadUniqID+0x68>)
 800296e:	4423      	add	r3, r4
 8002970:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8002972:	79bb      	ldrb	r3, [r7, #6]
 8002974:	3301      	adds	r3, #1
 8002976:	71bb      	strb	r3, [r7, #6]
 8002978:	79bb      	ldrb	r3, [r7, #6]
 800297a:	2b07      	cmp	r3, #7
 800297c:	d9f0      	bls.n	8002960 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800297e:	2201      	movs	r2, #1
 8002980:	2140      	movs	r1, #64	; 0x40
 8002982:	4803      	ldr	r0, [pc, #12]	; (8002990 <W25qxx_ReadUniqID+0x64>)
 8002984:	f001 fc1c 	bl	80041c0 <HAL_GPIO_WritePin>
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	bd90      	pop	{r4, r7, pc}
 8002990:	40020c00 	.word	0x40020c00
 8002994:	20000b10 	.word	0x20000b10

08002998 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800299c:	2200      	movs	r2, #0
 800299e:	2140      	movs	r1, #64	; 0x40
 80029a0:	4807      	ldr	r0, [pc, #28]	; (80029c0 <W25qxx_WriteEnable+0x28>)
 80029a2:	f001 fc0d 	bl	80041c0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80029a6:	2006      	movs	r0, #6
 80029a8:	f7ff ff74 	bl	8002894 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80029ac:	2201      	movs	r2, #1
 80029ae:	2140      	movs	r1, #64	; 0x40
 80029b0:	4803      	ldr	r0, [pc, #12]	; (80029c0 <W25qxx_WriteEnable+0x28>)
 80029b2:	f001 fc05 	bl	80041c0 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80029b6:	2001      	movs	r0, #1
 80029b8:	f008 fa60 	bl	800ae7c <osDelay>
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40020c00 	.word	0x40020c00

080029c4 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2140      	movs	r1, #64	; 0x40
 80029d6:	481c      	ldr	r0, [pc, #112]	; (8002a48 <W25qxx_ReadStatusRegister+0x84>)
 80029d8:	f001 fbf2 	bl	80041c0 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10c      	bne.n	80029fc <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80029e2:	2005      	movs	r0, #5
 80029e4:	f7ff ff56 	bl	8002894 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80029e8:	20a5      	movs	r0, #165	; 0xa5
 80029ea:	f7ff ff53 	bl	8002894 <W25qxx_Spi>
 80029ee:	4603      	mov	r3, r0
 80029f0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80029f2:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <W25qxx_ReadStatusRegister+0x88>)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80029fa:	e01b      	b.n	8002a34 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d10c      	bne.n	8002a1c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8002a02:	2035      	movs	r0, #53	; 0x35
 8002a04:	f7ff ff46 	bl	8002894 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002a08:	20a5      	movs	r0, #165	; 0xa5
 8002a0a:	f7ff ff43 	bl	8002894 <W25qxx_Spi>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <W25qxx_ReadStatusRegister+0x88>)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8002a1a:	e00b      	b.n	8002a34 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8002a1c:	2015      	movs	r0, #21
 8002a1e:	f7ff ff39 	bl	8002894 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002a22:	20a5      	movs	r0, #165	; 0xa5
 8002a24:	f7ff ff36 	bl	8002894 <W25qxx_Spi>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8002a2c:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <W25qxx_ReadStatusRegister+0x88>)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002a34:	2201      	movs	r2, #1
 8002a36:	2140      	movs	r1, #64	; 0x40
 8002a38:	4803      	ldr	r0, [pc, #12]	; (8002a48 <W25qxx_ReadStatusRegister+0x84>)
 8002a3a:	f001 fbc1 	bl	80041c0 <HAL_GPIO_WritePin>
	return status;
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40020c00 	.word	0x40020c00
 8002a4c:	20000b10 	.word	0x20000b10

08002a50 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f008 fa11 	bl	800ae7c <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2140      	movs	r1, #64	; 0x40
 8002a5e:	480f      	ldr	r0, [pc, #60]	; (8002a9c <W25qxx_WaitForWriteEnd+0x4c>)
 8002a60:	f001 fbae 	bl	80041c0 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8002a64:	2005      	movs	r0, #5
 8002a66:	f7ff ff15 	bl	8002894 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002a6a:	20a5      	movs	r0, #165	; 0xa5
 8002a6c:	f7ff ff12 	bl	8002894 <W25qxx_Spi>
 8002a70:	4603      	mov	r3, r0
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <W25qxx_WaitForWriteEnd+0x50>)
 8002a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	f008 f9fe 	bl	800ae7c <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <W25qxx_WaitForWriteEnd+0x50>)
 8002a82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ed      	bne.n	8002a6a <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	4802      	ldr	r0, [pc, #8]	; (8002a9c <W25qxx_WaitForWriteEnd+0x4c>)
 8002a94:	f001 fb94 	bl	80041c0 <HAL_GPIO_WritePin>
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	20000b10 	.word	0x20000b10

08002aa4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8002aaa:	4b90      	ldr	r3, [pc, #576]	; (8002cec <W25qxx_Init+0x248>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8002ab2:	e002      	b.n	8002aba <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f008 f9e1 	bl	800ae7c <osDelay>
	while (HAL_GetTick() < 100)
 8002aba:	f000 fe51 	bl	8003760 <HAL_GetTick>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b63      	cmp	r3, #99	; 0x63
 8002ac2:	d9f7      	bls.n	8002ab4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	2140      	movs	r1, #64	; 0x40
 8002ac8:	4889      	ldr	r0, [pc, #548]	; (8002cf0 <W25qxx_Init+0x24c>)
 8002aca:	f001 fb79 	bl	80041c0 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8002ace:	2064      	movs	r0, #100	; 0x64
 8002ad0:	f008 f9d4 	bl	800ae7c <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8002ad4:	4887      	ldr	r0, [pc, #540]	; (8002cf4 <W25qxx_Init+0x250>)
 8002ad6:	f00a f867 	bl	800cba8 <puts>
#endif
	id = W25qxx_ReadID();
 8002ada:	f7ff fef1 	bl	80028c0 <W25qxx_ReadID>
 8002ade:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4885      	ldr	r0, [pc, #532]	; (8002cf8 <W25qxx_Init+0x254>)
 8002ae4:	f009 ffda 	bl	800ca9c <iprintf>
#endif
	switch (id & 0x000000FF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	3b11      	subs	r3, #17
 8002aee:	2b0f      	cmp	r3, #15
 8002af0:	f200 808b 	bhi.w	8002c0a <W25qxx_Init+0x166>
 8002af4:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <W25qxx_Init+0x58>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002bf7 	.word	0x08002bf7
 8002b00:	08002be3 	.word	0x08002be3
 8002b04:	08002bcf 	.word	0x08002bcf
 8002b08:	08002bbb 	.word	0x08002bbb
 8002b0c:	08002ba7 	.word	0x08002ba7
 8002b10:	08002b93 	.word	0x08002b93
 8002b14:	08002b7f 	.word	0x08002b7f
 8002b18:	08002b69 	.word	0x08002b69
 8002b1c:	08002b53 	.word	0x08002b53
 8002b20:	08002c0b 	.word	0x08002c0b
 8002b24:	08002c0b 	.word	0x08002c0b
 8002b28:	08002c0b 	.word	0x08002c0b
 8002b2c:	08002c0b 	.word	0x08002c0b
 8002b30:	08002c0b 	.word	0x08002c0b
 8002b34:	08002c0b 	.word	0x08002c0b
 8002b38:	08002b3d 	.word	0x08002b3d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8002b3c:	4b6b      	ldr	r3, [pc, #428]	; (8002cec <W25qxx_Init+0x248>)
 8002b3e:	220a      	movs	r2, #10
 8002b40:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8002b42:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <W25qxx_Init+0x248>)
 8002b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b48:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8002b4a:	486c      	ldr	r0, [pc, #432]	; (8002cfc <W25qxx_Init+0x258>)
 8002b4c:	f00a f82c 	bl	800cba8 <puts>
#endif
		break;
 8002b50:	e064      	b.n	8002c1c <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8002b52:	4b66      	ldr	r3, [pc, #408]	; (8002cec <W25qxx_Init+0x248>)
 8002b54:	2209      	movs	r2, #9
 8002b56:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8002b58:	4b64      	ldr	r3, [pc, #400]	; (8002cec <W25qxx_Init+0x248>)
 8002b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8002b60:	4867      	ldr	r0, [pc, #412]	; (8002d00 <W25qxx_Init+0x25c>)
 8002b62:	f00a f821 	bl	800cba8 <puts>
#endif
		break;
 8002b66:	e059      	b.n	8002c1c <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8002b68:	4b60      	ldr	r3, [pc, #384]	; (8002cec <W25qxx_Init+0x248>)
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8002b6e:	4b5f      	ldr	r3, [pc, #380]	; (8002cec <W25qxx_Init+0x248>)
 8002b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b74:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8002b76:	4863      	ldr	r0, [pc, #396]	; (8002d04 <W25qxx_Init+0x260>)
 8002b78:	f00a f816 	bl	800cba8 <puts>
#endif
		break;
 8002b7c:	e04e      	b.n	8002c1c <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8002b7e:	4b5b      	ldr	r3, [pc, #364]	; (8002cec <W25qxx_Init+0x248>)
 8002b80:	2207      	movs	r2, #7
 8002b82:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8002b84:	4b59      	ldr	r3, [pc, #356]	; (8002cec <W25qxx_Init+0x248>)
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8002b8a:	485f      	ldr	r0, [pc, #380]	; (8002d08 <W25qxx_Init+0x264>)
 8002b8c:	f00a f80c 	bl	800cba8 <puts>
#endif
		break;
 8002b90:	e044      	b.n	8002c1c <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8002b92:	4b56      	ldr	r3, [pc, #344]	; (8002cec <W25qxx_Init+0x248>)
 8002b94:	2206      	movs	r2, #6
 8002b96:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8002b98:	4b54      	ldr	r3, [pc, #336]	; (8002cec <W25qxx_Init+0x248>)
 8002b9a:	2240      	movs	r2, #64	; 0x40
 8002b9c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8002b9e:	485b      	ldr	r0, [pc, #364]	; (8002d0c <W25qxx_Init+0x268>)
 8002ba0:	f00a f802 	bl	800cba8 <puts>
#endif
		break;
 8002ba4:	e03a      	b.n	8002c1c <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8002ba6:	4b51      	ldr	r3, [pc, #324]	; (8002cec <W25qxx_Init+0x248>)
 8002ba8:	2205      	movs	r2, #5
 8002baa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8002bac:	4b4f      	ldr	r3, [pc, #316]	; (8002cec <W25qxx_Init+0x248>)
 8002bae:	2220      	movs	r2, #32
 8002bb0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8002bb2:	4857      	ldr	r0, [pc, #348]	; (8002d10 <W25qxx_Init+0x26c>)
 8002bb4:	f009 fff8 	bl	800cba8 <puts>
#endif
		break;
 8002bb8:	e030      	b.n	8002c1c <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002bba:	4b4c      	ldr	r3, [pc, #304]	; (8002cec <W25qxx_Init+0x248>)
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002bc0:	4b4a      	ldr	r3, [pc, #296]	; (8002cec <W25qxx_Init+0x248>)
 8002bc2:	2210      	movs	r2, #16
 8002bc4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8002bc6:	4853      	ldr	r0, [pc, #332]	; (8002d14 <W25qxx_Init+0x270>)
 8002bc8:	f009 ffee 	bl	800cba8 <puts>
#endif
		break;
 8002bcc:	e026      	b.n	8002c1c <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <W25qxx_Init+0x248>)
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8002bd4:	4b45      	ldr	r3, [pc, #276]	; (8002cec <W25qxx_Init+0x248>)
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8002bda:	484f      	ldr	r0, [pc, #316]	; (8002d18 <W25qxx_Init+0x274>)
 8002bdc:	f009 ffe4 	bl	800cba8 <puts>
#endif
		break;
 8002be0:	e01c      	b.n	8002c1c <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8002be2:	4b42      	ldr	r3, [pc, #264]	; (8002cec <W25qxx_Init+0x248>)
 8002be4:	2202      	movs	r2, #2
 8002be6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002be8:	4b40      	ldr	r3, [pc, #256]	; (8002cec <W25qxx_Init+0x248>)
 8002bea:	2204      	movs	r2, #4
 8002bec:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8002bee:	484b      	ldr	r0, [pc, #300]	; (8002d1c <W25qxx_Init+0x278>)
 8002bf0:	f009 ffda 	bl	800cba8 <puts>
#endif
		break;
 8002bf4:	e012      	b.n	8002c1c <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8002bf6:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <W25qxx_Init+0x248>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8002bfc:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <W25qxx_Init+0x248>)
 8002bfe:	2202      	movs	r2, #2
 8002c00:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8002c02:	4847      	ldr	r0, [pc, #284]	; (8002d20 <W25qxx_Init+0x27c>)
 8002c04:	f009 ffd0 	bl	800cba8 <puts>
#endif
		break;
 8002c08:	e008      	b.n	8002c1c <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8002c0a:	4846      	ldr	r0, [pc, #280]	; (8002d24 <W25qxx_Init+0x280>)
 8002c0c:	f009 ffcc 	bl	800cba8 <puts>
#endif
		w25qxx.Lock = 0;
 8002c10:	4b36      	ldr	r3, [pc, #216]	; (8002cec <W25qxx_Init+0x248>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e063      	b.n	8002ce4 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8002c1c:	4b33      	ldr	r3, [pc, #204]	; (8002cec <W25qxx_Init+0x248>)
 8002c1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c22:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8002c24:	4b31      	ldr	r3, [pc, #196]	; (8002cec <W25qxx_Init+0x248>)
 8002c26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c2a:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8002c2c:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <W25qxx_Init+0x248>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4a2e      	ldr	r2, [pc, #184]	; (8002cec <W25qxx_Init+0x248>)
 8002c34:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8002c36:	4b2d      	ldr	r3, [pc, #180]	; (8002cec <W25qxx_Init+0x248>)
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	4a2c      	ldr	r2, [pc, #176]	; (8002cec <W25qxx_Init+0x248>)
 8002c3c:	6912      	ldr	r2, [r2, #16]
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	4a2a      	ldr	r2, [pc, #168]	; (8002cec <W25qxx_Init+0x248>)
 8002c44:	8952      	ldrh	r2, [r2, #10]
 8002c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c4a:	4a28      	ldr	r2, [pc, #160]	; (8002cec <W25qxx_Init+0x248>)
 8002c4c:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8002c4e:	4b27      	ldr	r3, [pc, #156]	; (8002cec <W25qxx_Init+0x248>)
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	4a25      	ldr	r2, [pc, #148]	; (8002cec <W25qxx_Init+0x248>)
 8002c56:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <W25qxx_Init+0x248>)
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	4a23      	ldr	r2, [pc, #140]	; (8002cec <W25qxx_Init+0x248>)
 8002c5e:	6912      	ldr	r2, [r2, #16]
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	0a9b      	lsrs	r3, r3, #10
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <W25qxx_Init+0x248>)
 8002c68:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8002c6a:	f7ff fe5f 	bl	800292c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f7ff fea8 	bl	80029c4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8002c74:	2002      	movs	r0, #2
 8002c76:	f7ff fea5 	bl	80029c4 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8002c7a:	2003      	movs	r0, #3
 8002c7c:	f7ff fea2 	bl	80029c4 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8002c80:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <W25qxx_Init+0x248>)
 8002c82:	895b      	ldrh	r3, [r3, #10]
 8002c84:	4619      	mov	r1, r3
 8002c86:	4828      	ldr	r0, [pc, #160]	; (8002d28 <W25qxx_Init+0x284>)
 8002c88:	f009 ff08 	bl	800ca9c <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8002c8c:	4b17      	ldr	r3, [pc, #92]	; (8002cec <W25qxx_Init+0x248>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4619      	mov	r1, r3
 8002c92:	4826      	ldr	r0, [pc, #152]	; (8002d2c <W25qxx_Init+0x288>)
 8002c94:	f009 ff02 	bl	800ca9c <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8002c98:	4b14      	ldr	r3, [pc, #80]	; (8002cec <W25qxx_Init+0x248>)
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4824      	ldr	r0, [pc, #144]	; (8002d30 <W25qxx_Init+0x28c>)
 8002ca0:	f009 fefc 	bl	800ca9c <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <W25qxx_Init+0x248>)
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4822      	ldr	r0, [pc, #136]	; (8002d34 <W25qxx_Init+0x290>)
 8002cac:	f009 fef6 	bl	800ca9c <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <W25qxx_Init+0x248>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4820      	ldr	r0, [pc, #128]	; (8002d38 <W25qxx_Init+0x294>)
 8002cb8:	f009 fef0 	bl	800ca9c <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <W25qxx_Init+0x248>)
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	481e      	ldr	r0, [pc, #120]	; (8002d3c <W25qxx_Init+0x298>)
 8002cc4:	f009 feea 	bl	800ca9c <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <W25qxx_Init+0x248>)
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	481c      	ldr	r0, [pc, #112]	; (8002d40 <W25qxx_Init+0x29c>)
 8002cd0:	f009 fee4 	bl	800ca9c <iprintf>
	printf("w25qxx Init Done\r\n");
 8002cd4:	481b      	ldr	r0, [pc, #108]	; (8002d44 <W25qxx_Init+0x2a0>)
 8002cd6:	f009 ff67 	bl	800cba8 <puts>
#endif
	w25qxx.Lock = 0;
 8002cda:	4b04      	ldr	r3, [pc, #16]	; (8002cec <W25qxx_Init+0x248>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8002ce2:	2301      	movs	r3, #1
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000b10 	.word	0x20000b10
 8002cf0:	40020c00 	.word	0x40020c00
 8002cf4:	08010688 	.word	0x08010688
 8002cf8:	080106a0 	.word	0x080106a0
 8002cfc:	080106b4 	.word	0x080106b4
 8002d00:	080106cc 	.word	0x080106cc
 8002d04:	080106e4 	.word	0x080106e4
 8002d08:	080106fc 	.word	0x080106fc
 8002d0c:	08010714 	.word	0x08010714
 8002d10:	0801072c 	.word	0x0801072c
 8002d14:	08010744 	.word	0x08010744
 8002d18:	0801075c 	.word	0x0801075c
 8002d1c:	08010774 	.word	0x08010774
 8002d20:	0801078c 	.word	0x0801078c
 8002d24:	080107a4 	.word	0x080107a4
 8002d28:	080107b8 	.word	0x080107b8
 8002d2c:	080107d8 	.word	0x080107d8
 8002d30:	080107f0 	.word	0x080107f0
 8002d34:	08010810 	.word	0x08010810
 8002d38:	0801082c 	.word	0x0801082c
 8002d3c:	0801084c 	.word	0x0801084c
 8002d40:	08010868 	.word	0x08010868
 8002d44:	08010888 	.word	0x08010888

08002d48 <W25qxx_EraseSector>:
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseSector(uint32_t SectorAddr)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8002d50:	e002      	b.n	8002d58 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8002d52:	2001      	movs	r0, #1
 8002d54:	f008 f892 	bl	800ae7c <osDelay>
	while (w25qxx.Lock == 1)
 8002d58:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <W25qxx_EraseSector+0xc8>)
 8002d5a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d0f7      	beq.n	8002d52 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <W25qxx_EraseSector+0xc8>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
 8002d6a:	f000 fcf9 	bl	8003760 <HAL_GetTick>
 8002d6e:	60f8      	str	r0, [r7, #12]
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4828      	ldr	r0, [pc, #160]	; (8002e14 <W25qxx_EraseSector+0xcc>)
 8002d74:	f009 fe92 	bl	800ca9c <iprintf>
#endif
	W25qxx_WaitForWriteEnd();
 8002d78:	f7ff fe6a 	bl	8002a50 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8002d7c:	4b24      	ldr	r3, [pc, #144]	; (8002e10 <W25qxx_EraseSector+0xc8>)
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8002d88:	f7ff fe06 	bl	8002998 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2140      	movs	r1, #64	; 0x40
 8002d90:	4821      	ldr	r0, [pc, #132]	; (8002e18 <W25qxx_EraseSector+0xd0>)
 8002d92:	f001 fa15 	bl	80041c0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <W25qxx_EraseSector+0xc8>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d909      	bls.n	8002db2 <W25qxx_EraseSector+0x6a>
	{
		W25qxx_Spi(0x21);
 8002d9e:	2021      	movs	r0, #33	; 0x21
 8002da0:	f7ff fd78 	bl	8002894 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	0e1b      	lsrs	r3, r3, #24
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fd72 	bl	8002894 <W25qxx_Spi>
 8002db0:	e002      	b.n	8002db8 <W25qxx_EraseSector+0x70>
	}
	else
	{
		W25qxx_Spi(0x20);
 8002db2:	2020      	movs	r0, #32
 8002db4:	f7ff fd6e 	bl	8002894 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	0c1b      	lsrs	r3, r3, #16
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fd68 	bl	8002894 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fd62 	bl	8002894 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fd5d 	bl	8002894 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002dda:	2201      	movs	r2, #1
 8002ddc:	2140      	movs	r1, #64	; 0x40
 8002dde:	480e      	ldr	r0, [pc, #56]	; (8002e18 <W25qxx_EraseSector+0xd0>)
 8002de0:	f001 f9ee 	bl	80041c0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002de4:	f7ff fe34 	bl	8002a50 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
 8002de8:	f000 fcba 	bl	8003760 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	4619      	mov	r1, r3
 8002df4:	4809      	ldr	r0, [pc, #36]	; (8002e1c <W25qxx_EraseSector+0xd4>)
 8002df6:	f009 fe51 	bl	800ca9c <iprintf>
#endif
	W25qxx_Delay(1);
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f008 f83e 	bl	800ae7c <osDelay>
	w25qxx.Lock = 0;
 8002e00:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <W25qxx_EraseSector+0xc8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000b10 	.word	0x20000b10
 8002e14:	080108e0 	.word	0x080108e0
 8002e18:	40020c00 	.word	0x40020c00
 8002e1c:	08010904 	.word	0x08010904

08002e20 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <W25qxx_SectorToPage+0x28>)
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	fb02 f303 	mul.w	r3, r2, r3
 8002e32:	4a05      	ldr	r2, [pc, #20]	; (8002e48 <W25qxx_SectorToPage+0x28>)
 8002e34:	8952      	ldrh	r2, [r2, #10]
 8002e36:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000b10 	.word	0x20000b10

08002e4c <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8002e5a:	e002      	b.n	8002e62 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	f008 f80d 	bl	800ae7c <osDelay>
	while (w25qxx.Lock == 1)
 8002e62:	4b57      	ldr	r3, [pc, #348]	; (8002fc0 <W25qxx_WritePage+0x174>)
 8002e64:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d0f7      	beq.n	8002e5c <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8002e6c:	4b54      	ldr	r3, [pc, #336]	; (8002fc0 <W25qxx_WritePage+0x174>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	4a51      	ldr	r2, [pc, #324]	; (8002fc0 <W25qxx_WritePage+0x174>)
 8002e7c:	8952      	ldrh	r2, [r2, #10]
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d802      	bhi.n	8002e88 <W25qxx_WritePage+0x3c>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002e88:	4b4d      	ldr	r3, [pc, #308]	; (8002fc0 <W25qxx_WritePage+0x174>)
 8002e8a:	895b      	ldrh	r3, [r3, #10]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	4413      	add	r3, r2
 8002e9a:	4a49      	ldr	r2, [pc, #292]	; (8002fc0 <W25qxx_WritePage+0x174>)
 8002e9c:	8952      	ldrh	r2, [r2, #10]
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d905      	bls.n	8002eae <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <W25qxx_WritePage+0x174>)
 8002ea4:	895b      	ldrh	r3, [r3, #10]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	4843      	ldr	r0, [pc, #268]	; (8002fc4 <W25qxx_WritePage+0x178>)
 8002eb6:	f009 fdf1 	bl	800ca9c <iprintf>
	W25qxx_Delay(100);
 8002eba:	2064      	movs	r0, #100	; 0x64
 8002ebc:	f007 ffde 	bl	800ae7c <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8002ec0:	f000 fc4e 	bl	8003760 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]
#endif
	W25qxx_WaitForWriteEnd();
 8002ec6:	f7ff fdc3 	bl	8002a50 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8002eca:	f7ff fd65 	bl	8002998 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2140      	movs	r1, #64	; 0x40
 8002ed2:	483d      	ldr	r0, [pc, #244]	; (8002fc8 <W25qxx_WritePage+0x17c>)
 8002ed4:	f001 f974 	bl	80041c0 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8002ed8:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <W25qxx_WritePage+0x174>)
 8002eda:	895b      	ldrh	r3, [r3, #10]
 8002edc:	461a      	mov	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	fb03 f302 	mul.w	r3, r3, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8002eea:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <W25qxx_WritePage+0x174>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d909      	bls.n	8002f06 <W25qxx_WritePage+0xba>
	{
		W25qxx_Spi(0x12);
 8002ef2:	2012      	movs	r0, #18
 8002ef4:	f7ff fcce 	bl	8002894 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	0e1b      	lsrs	r3, r3, #24
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fcc8 	bl	8002894 <W25qxx_Spi>
 8002f04:	e002      	b.n	8002f0c <W25qxx_WritePage+0xc0>
	}
	else
	{
		W25qxx_Spi(0x02);
 8002f06:	2002      	movs	r0, #2
 8002f08:	f7ff fcc4 	bl	8002894 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	0c1b      	lsrs	r3, r3, #16
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fcbe 	bl	8002894 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fcb8 	bl	8002894 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fcb3 	bl	8002894 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	2364      	movs	r3, #100	; 0x64
 8002f34:	68f9      	ldr	r1, [r7, #12]
 8002f36:	4825      	ldr	r0, [pc, #148]	; (8002fcc <W25qxx_WritePage+0x180>)
 8002f38:	f003 ff03 	bl	8006d42 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	2140      	movs	r1, #64	; 0x40
 8002f40:	4821      	ldr	r0, [pc, #132]	; (8002fc8 <W25qxx_WritePage+0x17c>)
 8002f42:	f001 f93d 	bl	80041c0 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8002f46:	f7ff fd83 	bl	8002a50 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8002f4a:	f000 fc09 	bl	8003760 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e018      	b.n	8002f8e <W25qxx_WritePage+0x142>
	{
		if ((i % 8 == 0) && (i > 2))
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <W25qxx_WritePage+0x12c>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d905      	bls.n	8002f78 <W25qxx_WritePage+0x12c>
		{
			printf("\r\n");
 8002f6c:	4818      	ldr	r0, [pc, #96]	; (8002fd0 <W25qxx_WritePage+0x184>)
 8002f6e:	f009 fe1b 	bl	800cba8 <puts>
			W25qxx_Delay(10);
 8002f72:	200a      	movs	r0, #10
 8002f74:	f007 ff82 	bl	800ae7c <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4619      	mov	r1, r3
 8002f82:	4814      	ldr	r0, [pc, #80]	; (8002fd4 <W25qxx_WritePage+0x188>)
 8002f84:	f009 fd8a 	bl	800ca9c <iprintf>
	for (uint32_t i = 0; i < NumByteToWrite_up_to_PageSize; i++)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d3e2      	bcc.n	8002f5c <W25qxx_WritePage+0x110>
	}
	printf("\r\n");
 8002f96:	480e      	ldr	r0, [pc, #56]	; (8002fd0 <W25qxx_WritePage+0x184>)
 8002f98:	f009 fe06 	bl	800cba8 <puts>
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
 8002f9c:	6939      	ldr	r1, [r7, #16]
 8002f9e:	480e      	ldr	r0, [pc, #56]	; (8002fd8 <W25qxx_WritePage+0x18c>)
 8002fa0:	f009 fd7c 	bl	800ca9c <iprintf>
	W25qxx_Delay(100);
 8002fa4:	2064      	movs	r0, #100	; 0x64
 8002fa6:	f007 ff69 	bl	800ae7c <osDelay>
#endif
	W25qxx_Delay(1);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f007 ff66 	bl	800ae7c <osDelay>
	w25qxx.Lock = 0;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <W25qxx_WritePage+0x174>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8002fb8:	bf00      	nop
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000b10 	.word	0x20000b10
 8002fc4:	08010b68 	.word	0x08010b68
 8002fc8:	40020c00 	.word	0x40020c00
 8002fcc:	200008f0 	.word	0x200008f0
 8002fd0:	08010ba4 	.word	0x08010ba4
 8002fd4:	08010ba8 	.word	0x08010ba8
 8002fd8:	08010bb0 	.word	0x08010bb0

08002fdc <W25qxx_WriteSector>:
//###################################################################################################################
void W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8002fea:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <W25qxx_WriteSector+0xe8>)
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d802      	bhi.n	8002ffa <W25qxx_WriteSector+0x1e>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8002ffa:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <W25qxx_WriteSector+0xe8>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	4830      	ldr	r0, [pc, #192]	; (80030c8 <W25qxx_WriteSector+0xec>)
 8003008:	f009 fd48 	bl	800ca9c <iprintf>
	W25qxx_Delay(100);
 800300c:	2064      	movs	r0, #100	; 0x64
 800300e:	f007 ff35 	bl	800ae7c <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8003012:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <W25qxx_WriteSector+0xe8>)
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	d306      	bcc.n	800302a <W25qxx_WriteSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
 800301c:	482b      	ldr	r0, [pc, #172]	; (80030cc <W25qxx_WriteSector+0xf0>)
 800301e:	f009 fdc3 	bl	800cba8 <puts>
		W25qxx_Delay(100);
 8003022:	2064      	movs	r0, #100	; 0x64
 8003024:	f007 ff2a 	bl	800ae7c <osDelay>
#endif
		return;
 8003028:	e048      	b.n	80030bc <W25qxx_WriteSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	441a      	add	r2, r3
 8003030:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <W25qxx_WriteSector+0xe8>)
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	429a      	cmp	r2, r3
 8003036:	d905      	bls.n	8003044 <W25qxx_WriteSector+0x68>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <W25qxx_WriteSector+0xe8>)
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	e001      	b.n	8003048 <W25qxx_WriteSector+0x6c>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8003048:	68b8      	ldr	r0, [r7, #8]
 800304a:	f7ff fee9 	bl	8002e20 <W25qxx_SectorToPage>
 800304e:	4602      	mov	r2, r0
 8003050:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <W25qxx_WriteSector+0xe8>)
 8003052:	895b      	ldrh	r3, [r3, #10]
 8003054:	4619      	mov	r1, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	fbb3 f3f1 	udiv	r3, r3, r1
 800305c:	4413      	add	r3, r2
 800305e:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8003060:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <W25qxx_WriteSector+0xe8>)
 8003062:	895b      	ldrh	r3, [r3, #10]
 8003064:	461a      	mov	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	fbb3 f1f2 	udiv	r1, r3, r2
 800306c:	fb02 f201 	mul.w	r2, r2, r1
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	69f9      	ldr	r1, [r7, #28]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f7ff fee6 	bl	8002e4c <W25qxx_WritePage>
		StartPage++;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	3301      	adds	r3, #1
 8003084:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8003086:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <W25qxx_WriteSector+0xe8>)
 8003088:	895b      	ldrh	r3, [r3, #10]
 800308a:	461a      	mov	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	1a9a      	subs	r2, r3, r2
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	4413      	add	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003096:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <W25qxx_WriteSector+0xe8>)
 8003098:	895b      	ldrh	r3, [r3, #10]
 800309a:	461a      	mov	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	dce1      	bgt.n	8003074 <W25qxx_WriteSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
 80030b0:	4807      	ldr	r0, [pc, #28]	; (80030d0 <W25qxx_WriteSector+0xf4>)
 80030b2:	f009 fd79 	bl	800cba8 <puts>
	W25qxx_Delay(100);
 80030b6:	2064      	movs	r0, #100	; 0x64
 80030b8:	f007 fee0 	bl	800ae7c <osDelay>
#endif
}
 80030bc:	3720      	adds	r7, #32
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000b10 	.word	0x20000b10
 80030c8:	08010bd4 	.word	0x08010bd4
 80030cc:	08010c14 	.word	0x08010c14
 80030d0:	08010c34 	.word	0x08010c34

080030d4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 80030e2:	e002      	b.n	80030ea <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 80030e4:	2001      	movs	r0, #1
 80030e6:	f007 fec9 	bl	800ae7c <osDelay>
	while (w25qxx.Lock == 1)
 80030ea:	4b54      	ldr	r3, [pc, #336]	; (800323c <W25qxx_ReadPage+0x168>)
 80030ec:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d0f7      	beq.n	80030e4 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80030f4:	4b51      	ldr	r3, [pc, #324]	; (800323c <W25qxx_ReadPage+0x168>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80030fc:	4b4f      	ldr	r3, [pc, #316]	; (800323c <W25qxx_ReadPage+0x168>)
 80030fe:	895b      	ldrh	r3, [r3, #10]
 8003100:	461a      	mov	r2, r3
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	4293      	cmp	r3, r2
 8003106:	d802      	bhi.n	800310e <W25qxx_ReadPage+0x3a>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 800310e:	4b4b      	ldr	r3, [pc, #300]	; (800323c <W25qxx_ReadPage+0x168>)
 8003110:	895b      	ldrh	r3, [r3, #10]
 8003112:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	4413      	add	r3, r2
 800311a:	4a48      	ldr	r2, [pc, #288]	; (800323c <W25qxx_ReadPage+0x168>)
 800311c:	8952      	ldrh	r2, [r2, #10]
 800311e:	4293      	cmp	r3, r2
 8003120:	d905      	bls.n	800312e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8003122:	4b46      	ldr	r3, [pc, #280]	; (800323c <W25qxx_ReadPage+0x168>)
 8003124:	895b      	ldrh	r3, [r3, #10]
 8003126:	461a      	mov	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	4842      	ldr	r0, [pc, #264]	; (8003240 <W25qxx_ReadPage+0x16c>)
 8003136:	f009 fcb1 	bl	800ca9c <iprintf>
	W25qxx_Delay(100);
 800313a:	2064      	movs	r0, #100	; 0x64
 800313c:	f007 fe9e 	bl	800ae7c <osDelay>
	uint32_t StartTime = HAL_GetTick();
 8003140:	f000 fb0e 	bl	8003760 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8003146:	4b3d      	ldr	r3, [pc, #244]	; (800323c <W25qxx_ReadPage+0x168>)
 8003148:	895b      	ldrh	r3, [r3, #10]
 800314a:	461a      	mov	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	fb03 f302 	mul.w	r3, r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003158:	2200      	movs	r2, #0
 800315a:	2140      	movs	r1, #64	; 0x40
 800315c:	4839      	ldr	r0, [pc, #228]	; (8003244 <W25qxx_ReadPage+0x170>)
 800315e:	f001 f82f 	bl	80041c0 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8003162:	4b36      	ldr	r3, [pc, #216]	; (800323c <W25qxx_ReadPage+0x168>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b08      	cmp	r3, #8
 8003168:	d909      	bls.n	800317e <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 800316a:	200c      	movs	r0, #12
 800316c:	f7ff fb92 	bl	8002894 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	0e1b      	lsrs	r3, r3, #24
 8003174:	b2db      	uxtb	r3, r3
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fb8c 	bl	8002894 <W25qxx_Spi>
 800317c:	e002      	b.n	8003184 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800317e:	200b      	movs	r0, #11
 8003180:	f7ff fb88 	bl	8002894 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	0c1b      	lsrs	r3, r3, #16
 8003188:	b2db      	uxtb	r3, r3
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fb82 	bl	8002894 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	b2db      	uxtb	r3, r3
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fb7c 	bl	8002894 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fb77 	bl	8002894 <W25qxx_Spi>
	W25qxx_Spi(0);
 80031a6:	2000      	movs	r0, #0
 80031a8:	f7ff fb74 	bl	8002894 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	2364      	movs	r3, #100	; 0x64
 80031b2:	68f9      	ldr	r1, [r7, #12]
 80031b4:	4824      	ldr	r0, [pc, #144]	; (8003248 <W25qxx_ReadPage+0x174>)
 80031b6:	f003 ff00 	bl	8006fba <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80031ba:	2201      	movs	r2, #1
 80031bc:	2140      	movs	r1, #64	; 0x40
 80031be:	4821      	ldr	r0, [pc, #132]	; (8003244 <W25qxx_ReadPage+0x170>)
 80031c0:	f000 fffe 	bl	80041c0 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 80031c4:	f000 facc 	bl	8003760 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	e018      	b.n	8003208 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d108      	bne.n	80031f2 <W25qxx_ReadPage+0x11e>
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d905      	bls.n	80031f2 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 80031e6:	4819      	ldr	r0, [pc, #100]	; (800324c <W25qxx_ReadPage+0x178>)
 80031e8:	f009 fcde 	bl	800cba8 <puts>
			W25qxx_Delay(10);
 80031ec:	200a      	movs	r0, #10
 80031ee:	f007 fe45 	bl	800ae7c <osDelay>
		}
		printf("0x%02X,", pBuffer[i]);
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	4413      	add	r3, r2
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	4619      	mov	r1, r3
 80031fc:	4814      	ldr	r0, [pc, #80]	; (8003250 <W25qxx_ReadPage+0x17c>)
 80031fe:	f009 fc4d 	bl	800ca9c <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3301      	adds	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d3e2      	bcc.n	80031d6 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8003210:	480e      	ldr	r0, [pc, #56]	; (800324c <W25qxx_ReadPage+0x178>)
 8003212:	f009 fcc9 	bl	800cba8 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8003216:	6939      	ldr	r1, [r7, #16]
 8003218:	480e      	ldr	r0, [pc, #56]	; (8003254 <W25qxx_ReadPage+0x180>)
 800321a:	f009 fc3f 	bl	800ca9c <iprintf>
	W25qxx_Delay(100);
 800321e:	2064      	movs	r0, #100	; 0x64
 8003220:	f007 fe2c 	bl	800ae7c <osDelay>
#endif
	W25qxx_Delay(1);
 8003224:	2001      	movs	r0, #1
 8003226:	f007 fe29 	bl	800ae7c <osDelay>
	w25qxx.Lock = 0;
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <W25qxx_ReadPage+0x168>)
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000b10 	.word	0x20000b10
 8003240:	08010d80 	.word	0x08010d80
 8003244:	40020c00 	.word	0x40020c00
 8003248:	200008f0 	.word	0x200008f0
 800324c:	08010ba4 	.word	0x08010ba4
 8003250:	08010ba8 	.word	0x08010ba8
 8003254:	08010dbc 	.word	0x08010dbc

08003258 <W25qxx_ReadSector>:
//###################################################################################################################
void W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8003266:	4b36      	ldr	r3, [pc, #216]	; (8003340 <W25qxx_ReadSector+0xe8>)
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d802      	bhi.n	8003276 <W25qxx_ReadSector+0x1e>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d102      	bne.n	800327c <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8003276:	4b32      	ldr	r3, [pc, #200]	; (8003340 <W25qxx_ReadSector+0xe8>)
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	4830      	ldr	r0, [pc, #192]	; (8003344 <W25qxx_ReadSector+0xec>)
 8003284:	f009 fc0a 	bl	800ca9c <iprintf>
	W25qxx_Delay(100);
 8003288:	2064      	movs	r0, #100	; 0x64
 800328a:	f007 fdf7 	bl	800ae7c <osDelay>
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 800328e:	4b2c      	ldr	r3, [pc, #176]	; (8003340 <W25qxx_ReadSector+0xe8>)
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d306      	bcc.n	80032a6 <W25qxx_ReadSector+0x4e>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
 8003298:	482b      	ldr	r0, [pc, #172]	; (8003348 <W25qxx_ReadSector+0xf0>)
 800329a:	f009 fc85 	bl	800cba8 <puts>
		W25qxx_Delay(100);
 800329e:	2064      	movs	r0, #100	; 0x64
 80032a0:	f007 fdec 	bl	800ae7c <osDelay>
#endif
		return;
 80032a4:	e048      	b.n	8003338 <W25qxx_ReadSector+0xe0>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	441a      	add	r2, r3
 80032ac:	4b24      	ldr	r3, [pc, #144]	; (8003340 <W25qxx_ReadSector+0xe8>)
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d905      	bls.n	80032c0 <W25qxx_ReadSector+0x68>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 80032b4:	4b22      	ldr	r3, [pc, #136]	; (8003340 <W25qxx_ReadSector+0xe8>)
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	e001      	b.n	80032c4 <W25qxx_ReadSector+0x6c>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 80032c4:	68b8      	ldr	r0, [r7, #8]
 80032c6:	f7ff fdab 	bl	8002e20 <W25qxx_SectorToPage>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <W25qxx_ReadSector+0xe8>)
 80032ce:	895b      	ldrh	r3, [r3, #10]
 80032d0:	4619      	mov	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80032d8:	4413      	add	r3, r2
 80032da:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <W25qxx_ReadSector+0xe8>)
 80032de:	895b      	ldrh	r3, [r3, #10]
 80032e0:	461a      	mov	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80032e8:	fb02 f201 	mul.w	r2, r2, r1
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	69f9      	ldr	r1, [r7, #28]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f7ff feec 	bl	80030d4 <W25qxx_ReadPage>
		StartPage++;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	3301      	adds	r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8003302:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <W25qxx_ReadSector+0xe8>)
 8003304:	895b      	ldrh	r3, [r3, #10]
 8003306:	461a      	mov	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	1a9a      	subs	r2, r3, r2
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	4413      	add	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <W25qxx_ReadSector+0xe8>)
 8003314:	895b      	ldrh	r3, [r3, #10]
 8003316:	461a      	mov	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	dce1      	bgt.n	80032f0 <W25qxx_ReadSector+0x98>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx ReadSector Done\r\n");
 800332c:	4807      	ldr	r0, [pc, #28]	; (800334c <W25qxx_ReadSector+0xf4>)
 800332e:	f009 fc3b 	bl	800cba8 <puts>
	W25qxx_Delay(100);
 8003332:	2064      	movs	r0, #100	; 0x64
 8003334:	f007 fda2 	bl	800ae7c <osDelay>
#endif
}
 8003338:	3720      	adds	r7, #32
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000b10 	.word	0x20000b10
 8003344:	08010de0 	.word	0x08010de0
 8003348:	08010e20 	.word	0x08010e20
 800334c:	08010e40 	.word	0x08010e40

08003350 <MRT_rtc_Init>:


//**************************************************//
//FUNCTIONS

void MRT_rtc_Init(void){
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0

	print("Setting RTC to previous time...");
 8003354:	f04f 33ff 	mov.w	r3, #4294967295
 8003358:	221f      	movs	r2, #31
 800335a:	491c      	ldr	r1, [pc, #112]	; (80033cc <MRT_rtc_Init+0x7c>)
 800335c:	481c      	ldr	r0, [pc, #112]	; (80033d0 <MRT_rtc_Init+0x80>)
 800335e:	f005 f9aa 	bl	80086b6 <HAL_UART_Transmit>
	MRT_set_rtc(prev_hours,prev_min,prev_sec);
 8003362:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <MRT_rtc_Init+0x84>)
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <MRT_rtc_Init+0x88>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	4619      	mov	r1, r3
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <MRT_rtc_Init+0x8c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	f000 f932 	bl	80035dc <MRT_set_rtc>
	print("OK\r\n");
 8003378:	f04f 33ff 	mov.w	r3, #4294967295
 800337c:	2204      	movs	r2, #4
 800337e:	4918      	ldr	r1, [pc, #96]	; (80033e0 <MRT_rtc_Init+0x90>)
 8003380:	4813      	ldr	r0, [pc, #76]	; (80033d0 <MRT_rtc_Init+0x80>)
 8003382:	f005 f998 	bl	80086b6 <HAL_UART_Transmit>

	#if ALARM_A_ACTIVE
		print("Setting alarmA...");
 8003386:	f04f 33ff 	mov.w	r3, #4294967295
 800338a:	2211      	movs	r2, #17
 800338c:	4915      	ldr	r1, [pc, #84]	; (80033e4 <MRT_rtc_Init+0x94>)
 800338e:	4810      	ldr	r0, [pc, #64]	; (80033d0 <MRT_rtc_Init+0x80>)
 8003390:	f005 f991 	bl	80086b6 <HAL_UART_Transmit>
		HAL_Delay(2000); //To make sure that when you set the Alarm it doesn't go off automatically
 8003394:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003398:	f000 f9ee 	bl	8003778 <HAL_Delay>
		if (wu_flag == 0){
 800339c:	4b12      	ldr	r3, [pc, #72]	; (80033e8 <MRT_rtc_Init+0x98>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <MRT_rtc_Init+0x60>
			MRT_set_alarmA(PRE_WHEN_SLEEP_TIME_HOURS, PRE_WHEN_SLEEP_TIME_MIN, PRE_WHEN_SLEEP_TIME_SEC);
 80033a4:	2200      	movs	r2, #0
 80033a6:	211e      	movs	r1, #30
 80033a8:	2004      	movs	r0, #4
 80033aa:	f000 f95d 	bl	8003668 <MRT_set_alarmA>
 80033ae:	e004      	b.n	80033ba <MRT_rtc_Init+0x6a>
		}
		else{
			MRT_set_alarmA(POST_WHEN_SLEEP_TIME_HOURS, POST_WHEN_SLEEP_TIME_MIN, POST_WHEN_SLEEP_TIME_SEC);
 80033b0:	2200      	movs	r2, #0
 80033b2:	2100      	movs	r1, #0
 80033b4:	200e      	movs	r0, #14
 80033b6:	f000 f957 	bl	8003668 <MRT_set_alarmA>
		}
		print("OK\r\n");
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
 80033be:	2204      	movs	r2, #4
 80033c0:	4907      	ldr	r1, [pc, #28]	; (80033e0 <MRT_rtc_Init+0x90>)
 80033c2:	4803      	ldr	r0, [pc, #12]	; (80033d0 <MRT_rtc_Init+0x80>)
 80033c4:	f005 f977 	bl	80086b6 <HAL_UART_Transmit>
	#endif
}
 80033c8:	bf00      	nop
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	08010ed4 	.word	0x08010ed4
 80033d0:	20000a74 	.word	0x20000a74
 80033d4:	20000275 	.word	0x20000275
 80033d8:	20000276 	.word	0x20000276
 80033dc:	20000277 	.word	0x20000277
 80033e0:	08010ef4 	.word	0x08010ef4
 80033e4:	08010efc 	.word	0x08010efc
 80033e8:	20000271 	.word	0x20000271

080033ec <MRT_check_for_wake_up>:


void MRT_check_for_wake_up(void){
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <MRT_check_for_wake_up+0x48>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d116      	bne.n	800342a <MRT_check_for_wake_up+0x3e>
	{

		wu_flag = 1;
 80033fc:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <MRT_check_for_wake_up+0x4c>)
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <MRT_check_for_wake_up+0x48>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <MRT_check_for_wake_up+0x48>)
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	6013      	str	r3, [r2, #0]

		print("Wakeup from the STANDBY MODE\r\n");
 800340e:	f04f 33ff 	mov.w	r3, #4294967295
 8003412:	221e      	movs	r2, #30
 8003414:	4909      	ldr	r1, [pc, #36]	; (800343c <MRT_check_for_wake_up+0x50>)
 8003416:	480a      	ldr	r0, [pc, #40]	; (8003440 <MRT_check_for_wake_up+0x54>)
 8003418:	f005 f94d 	bl	80086b6 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800341c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003420:	f002 f866 	bl	80054f0 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc); //TODO hrtc from rtc.h (should we pass it as an argument instead?)
 8003424:	4807      	ldr	r0, [pc, #28]	; (8003444 <MRT_check_for_wake_up+0x58>)
 8003426:	f003 fba1 	bl	8006b6c <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_clear_alarms_flags();
 800342a:	f000 f80d 	bl	8003448 <MRT_clear_alarms_flags>
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40007000 	.word	0x40007000
 8003438:	20000271 	.word	0x20000271
 800343c:	08010f10 	.word	0x08010f10
 8003440:	20000a74 	.word	0x20000a74
 8003444:	20000878 	.word	0x20000878

08003448 <MRT_clear_alarms_flags>:



void MRT_clear_alarms_flags(void){
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	print("Clearing the flags\r\n");
 800344c:	f04f 33ff 	mov.w	r3, #4294967295
 8003450:	2214      	movs	r2, #20
 8003452:	492b      	ldr	r1, [pc, #172]	; (8003500 <MRT_clear_alarms_flags+0xb8>)
 8003454:	482b      	ldr	r0, [pc, #172]	; (8003504 <MRT_clear_alarms_flags+0xbc>)
 8003456:	f005 f92e 	bl	80086b6 <HAL_UART_Transmit>

	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 800345a:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	22ca      	movs	r2, #202	; 0xca
 8003460:	625a      	str	r2, [r3, #36]	; 0x24
 8003462:	4b29      	ldr	r3, [pc, #164]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2253      	movs	r2, #83	; 0x53
 8003468:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 800346a:	e008      	b.n	800347e <MRT_clear_alarms_flags+0x36>
		//print("Clearing alarm A flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800346c:	4b26      	ldr	r3, [pc, #152]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	b2da      	uxtb	r2, r3
 8003474:	4b24      	ldr	r3, [pc, #144]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800347c:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1ef      	bne.n	800346c <MRT_clear_alarms_flags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 800348c:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	22ff      	movs	r2, #255	; 0xff
 8003492:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003494:	4b1d      	ldr	r3, [pc, #116]	; (800350c <MRT_clear_alarms_flags+0xc4>)
 8003496:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800349a:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 800349c:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	22ca      	movs	r2, #202	; 0xca
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24
 80034a4:	4b18      	ldr	r3, [pc, #96]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2253      	movs	r2, #83	; 0x53
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80034ac:	e008      	b.n	80034c0 <MRT_clear_alarms_flags+0x78>
		//print("Clearing alarm B flag\r\n");
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 80034ae:	4b16      	ldr	r3, [pc, #88]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f462 7220 	orn	r2, r2, #640	; 0x280
 80034be:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ef      	bne.n	80034ae <MRT_clear_alarms_flags+0x66>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	22ff      	movs	r2, #255	; 0xff
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80034d6:	4b0d      	ldr	r3, [pc, #52]	; (800350c <MRT_clear_alarms_flags+0xc4>)
 80034d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034dc:	615a      	str	r2, [r3, #20]

	/* Clear the WU FLAG */
	//print("Clearing wake up flag\r\n");
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <MRT_clear_alarms_flags+0xc8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a0b      	ldr	r2, [pc, #44]	; (8003510 <MRT_clear_alarms_flags+0xc8>)
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//print("Clearing RTC wake up flag\r\n");
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80034ea:	4b07      	ldr	r3, [pc, #28]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <MRT_clear_alarms_flags+0xc0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80034fa:	60da      	str	r2, [r3, #12]
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	08010f30 	.word	0x08010f30
 8003504:	20000a74 	.word	0x20000a74
 8003508:	20000878 	.word	0x20000878
 800350c:	40013c00 	.word	0x40013c00
 8003510:	40007000 	.word	0x40007000

08003514 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode(uint32_t seconds){
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b0a5      	sub	sp, #148	; 0x94
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	print("\r\n/*****StandByMode*****/\r\n");
 800351c:	f04f 33ff 	mov.w	r3, #4294967295
 8003520:	221b      	movs	r2, #27
 8003522:	4928      	ldr	r1, [pc, #160]	; (80035c4 <MRT_StandByMode+0xb0>)
 8003524:	4828      	ldr	r0, [pc, #160]	; (80035c8 <MRT_StandByMode+0xb4>)
 8003526:	f005 f8c6 	bl	80086b6 <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800352a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800352e:	f001 ffcd 	bl	80054cc <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_clear_alarms_flags();
 8003532:	f7ff ff89 	bl	8003448 <MRT_clear_alarms_flags>

	//Setup RTC wake up timer
	println("Setting up RTCW");
 8003536:	220f      	movs	r2, #15
 8003538:	4b24      	ldr	r3, [pc, #144]	; (80035cc <MRT_StandByMode+0xb8>)
 800353a:	4413      	add	r3, r2
 800353c:	4a24      	ldr	r2, [pc, #144]	; (80035d0 <MRT_StandByMode+0xbc>)
 800353e:	8811      	ldrh	r1, [r2, #0]
 8003540:	7892      	ldrb	r2, [r2, #2]
 8003542:	8019      	strh	r1, [r3, #0]
 8003544:	709a      	strb	r2, [r3, #2]
 8003546:	4921      	ldr	r1, [pc, #132]	; (80035cc <MRT_StandByMode+0xb8>)
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
 800354c:	2211      	movs	r2, #17
 800354e:	481e      	ldr	r0, [pc, #120]	; (80035c8 <MRT_StandByMode+0xb4>)
 8003550:	f005 f8b1 	bl	80086b6 <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds",seconds);
 8003554:	f107 0308 	add.w	r3, r7, #8
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	491e      	ldr	r1, [pc, #120]	; (80035d4 <MRT_StandByMode+0xc0>)
 800355c:	4618      	mov	r0, r3
 800355e:	f009 fb41 	bl	800cbe4 <siprintf>
	println(msg);
 8003562:	f107 0308 	add.w	r3, r7, #8
 8003566:	4618      	mov	r0, r3
 8003568:	f7fc fe42 	bl	80001f0 <strlen>
 800356c:	4603      	mov	r3, r0
 800356e:	461a      	mov	r2, r3
 8003570:	f107 0308 	add.w	r3, r7, #8
 8003574:	4413      	add	r3, r2
 8003576:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <MRT_StandByMode+0xbc>)
 8003578:	8811      	ldrh	r1, [r2, #0]
 800357a:	7892      	ldrb	r2, [r2, #2]
 800357c:	8019      	strh	r1, [r3, #0]
 800357e:	709a      	strb	r2, [r3, #2]
 8003580:	f107 0408 	add.w	r4, r7, #8
 8003584:	f107 0308 	add.w	r3, r7, #8
 8003588:	4618      	mov	r0, r3
 800358a:	f7fc fe31 	bl	80001f0 <strlen>
 800358e:	4603      	mov	r3, r0
 8003590:	b29b      	uxth	r3, r3
 8003592:	3302      	adds	r3, #2
 8003594:	b29a      	uxth	r2, r3
 8003596:	f04f 33ff 	mov.w	r3, #4294967295
 800359a:	4621      	mov	r1, r4
 800359c:	480a      	ldr	r0, [pc, #40]	; (80035c8 <MRT_StandByMode+0xb4>)
 800359e:	f005 f88a 	bl	80086b6 <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80035a2:	2204      	movs	r2, #4
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	480c      	ldr	r0, [pc, #48]	; (80035d8 <MRT_StandByMode+0xc4>)
 80035a8:	f003 fa20 	bl	80069ec <HAL_RTCEx_SetWakeUpTimer_IT>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MRT_StandByMode+0xa2>
	{
	  Error_Handler();
 80035b2:	f7fe fb0b 	bl	8001bcc <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 80035b6:	f001 ffaf 	bl	8005518 <HAL_PWR_EnterSTANDBYMode>
}
 80035ba:	bf00      	nop
 80035bc:	3794      	adds	r7, #148	; 0x94
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd90      	pop	{r4, r7, pc}
 80035c2:	bf00      	nop
 80035c4:	08010f48 	.word	0x08010f48
 80035c8:	20000a74 	.word	0x20000a74
 80035cc:	08010f64 	.word	0x08010f64
 80035d0:	08010f74 	.word	0x08010f74
 80035d4:	08010f78 	.word	0x08010f78
 80035d8:	20000878 	.word	0x20000878

080035dc <MRT_set_rtc>:




void MRT_set_rtc(uint8_t h, uint8_t m, uint8_t s){
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
 80035e6:	460b      	mov	r3, r1
 80035e8:	71bb      	strb	r3, [r7, #6]
 80035ea:	4613      	mov	r3, r2
 80035ec:	717b      	strb	r3, [r7, #5]
	  /** Initialize RTC and set the Time and Date
	  */
	  RTC_TimeTypeDef sTime;

	  sTime.Hours = int_to_hex_table[h];
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	4a1a      	ldr	r2, [pc, #104]	; (800365c <MRT_set_rtc+0x80>)
 80035f2:	5cd3      	ldrb	r3, [r2, r3]
 80035f4:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = int_to_hex_table[m];
 80035f6:	79bb      	ldrb	r3, [r7, #6]
 80035f8:	4a18      	ldr	r2, [pc, #96]	; (800365c <MRT_set_rtc+0x80>)
 80035fa:	5cd3      	ldrb	r3, [r2, r3]
 80035fc:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = int_to_hex_table[s];
 80035fe:	797b      	ldrb	r3, [r7, #5]
 8003600:	4a16      	ldr	r2, [pc, #88]	; (800365c <MRT_set_rtc+0x80>)
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800360e:	f107 030c 	add.w	r3, r7, #12
 8003612:	2201      	movs	r2, #1
 8003614:	4619      	mov	r1, r3
 8003616:	4812      	ldr	r0, [pc, #72]	; (8003660 <MRT_set_rtc+0x84>)
 8003618:	f002 fe89 	bl	800632e <HAL_RTC_SetTime>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MRT_set_rtc+0x4a>
	  {
	    Error_Handler();
 8003622:	f7fe fad3 	bl	8001bcc <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003626:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <MRT_set_rtc+0x88>)
 8003628:	2201      	movs	r2, #1
 800362a:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 800362c:	4b0d      	ldr	r3, [pc, #52]	; (8003664 <MRT_set_rtc+0x88>)
 800362e:	2201      	movs	r2, #1
 8003630:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8003632:	4b0c      	ldr	r3, [pc, #48]	; (8003664 <MRT_set_rtc+0x88>)
 8003634:	2201      	movs	r2, #1
 8003636:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8003638:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <MRT_set_rtc+0x88>)
 800363a:	2200      	movs	r2, #0
 800363c:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800363e:	2201      	movs	r2, #1
 8003640:	4908      	ldr	r1, [pc, #32]	; (8003664 <MRT_set_rtc+0x88>)
 8003642:	4807      	ldr	r0, [pc, #28]	; (8003660 <MRT_set_rtc+0x84>)
 8003644:	f002 ff30 	bl	80064a8 <HAL_RTC_SetDate>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MRT_set_rtc+0x76>
	  {
	    Error_Handler();
 800364e:	f7fe fabd 	bl	8001bcc <Error_Handler>
	  }
}
 8003652:	bf00      	nop
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000024 	.word	0x20000024
 8003660:	20000878 	.word	0x20000878
 8003664:	2000027c 	.word	0x2000027c

08003668 <MRT_set_alarmA>:



void MRT_set_alarmA(uint8_t h, uint8_t m, uint8_t s){
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	71fb      	strb	r3, [r7, #7]
 8003672:	460b      	mov	r3, r1
 8003674:	71bb      	strb	r3, [r7, #6]
 8003676:	4613      	mov	r3, r2
 8003678:	717b      	strb	r3, [r7, #5]
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = int_to_hex_table[h];
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <MRT_set_alarmA+0x80>)
 800367e:	5cd2      	ldrb	r2, [r2, r3]
 8003680:	4b1a      	ldr	r3, [pc, #104]	; (80036ec <MRT_set_alarmA+0x84>)
 8003682:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = int_to_hex_table[m];
 8003684:	79bb      	ldrb	r3, [r7, #6]
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <MRT_set_alarmA+0x80>)
 8003688:	5cd2      	ldrb	r2, [r2, r3]
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <MRT_set_alarmA+0x84>)
 800368c:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = int_to_hex_table[s];
 800368e:	797b      	ldrb	r3, [r7, #5]
 8003690:	4a15      	ldr	r2, [pc, #84]	; (80036e8 <MRT_set_alarmA+0x80>)
 8003692:	5cd2      	ldrb	r2, [r2, r3]
 8003694:	4b15      	ldr	r3, [pc, #84]	; (80036ec <MRT_set_alarmA+0x84>)
 8003696:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003698:	4b14      	ldr	r3, [pc, #80]	; (80036ec <MRT_set_alarmA+0x84>)
 800369a:	2200      	movs	r2, #0
 800369c:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <MRT_set_alarmA+0x84>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <MRT_set_alarmA+0x84>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <MRT_set_alarmA+0x84>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <MRT_set_alarmA+0x84>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <MRT_set_alarmA+0x84>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <MRT_set_alarmA+0x84>)
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 80036c4:	4b09      	ldr	r3, [pc, #36]	; (80036ec <MRT_set_alarmA+0x84>)
 80036c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036ca:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80036cc:	2201      	movs	r2, #1
 80036ce:	4907      	ldr	r1, [pc, #28]	; (80036ec <MRT_set_alarmA+0x84>)
 80036d0:	4807      	ldr	r0, [pc, #28]	; (80036f0 <MRT_set_alarmA+0x88>)
 80036d2:	f002 ff91 	bl	80065f8 <HAL_RTC_SetAlarm_IT>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MRT_set_alarmA+0x78>
	  {
	    Error_Handler();
 80036dc:	f7fe fa76 	bl	8001bcc <Error_Handler>
	  }
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000024 	.word	0x20000024
 80036ec:	20000280 	.word	0x20000280
 80036f0:	20000878 	.word	0x20000878

080036f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036f8:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <HAL_Init+0x40>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <HAL_Init+0x40>)
 80036fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003702:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_Init+0x40>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <HAL_Init+0x40>)
 800370a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800370e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_Init+0x40>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a07      	ldr	r2, [pc, #28]	; (8003734 <HAL_Init+0x40>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800371c:	2003      	movs	r0, #3
 800371e:	f000 fb6e 	bl	8003dfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003722:	2000      	movs	r0, #0
 8003724:	f7fe fc9a 	bl	800205c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003728:	f7fe fc6c 	bl	8002004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40023c00 	.word	0x40023c00

08003738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800373c:	4b06      	ldr	r3, [pc, #24]	; (8003758 <HAL_IncTick+0x20>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b06      	ldr	r3, [pc, #24]	; (800375c <HAL_IncTick+0x24>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a04      	ldr	r2, [pc, #16]	; (800375c <HAL_IncTick+0x24>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000064 	.word	0x20000064
 800375c:	20000b38 	.word	0x20000b38

08003760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return uwTick;
 8003764:	4b03      	ldr	r3, [pc, #12]	; (8003774 <HAL_GetTick+0x14>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000b38 	.word	0x20000b38

08003778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003780:	f7ff ffee 	bl	8003760 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d005      	beq.n	800379e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_Delay+0x44>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800379e:	bf00      	nop
 80037a0:	f7ff ffde 	bl	8003760 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d8f7      	bhi.n	80037a0 <HAL_Delay+0x28>
  {
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000064 	.word	0x20000064

080037c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e033      	b.n	800383e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd fe36 	bl	8001450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003806:	f023 0302 	bic.w	r3, r3, #2
 800380a:	f043 0202 	orr.w	r2, r3, #2
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f94a 	bl	8003aac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	f043 0201 	orr.w	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	641a      	str	r2, [r3, #64]	; 0x40
 800382e:	e001      	b.n	8003834 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800383c:	7bfb      	ldrb	r3, [r7, #15]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_ADC_ConfigChannel+0x1c>
 8003860:	2302      	movs	r3, #2
 8003862:	e113      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x244>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b09      	cmp	r3, #9
 8003872:	d925      	bls.n	80038c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68d9      	ldr	r1, [r3, #12]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	4613      	mov	r3, r2
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	4413      	add	r3, r2
 8003888:	3b1e      	subs	r3, #30
 800388a:	2207      	movs	r2, #7
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43da      	mvns	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	400a      	ands	r2, r1
 8003898:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68d9      	ldr	r1, [r3, #12]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4618      	mov	r0, r3
 80038ac:	4603      	mov	r3, r0
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4403      	add	r3, r0
 80038b2:	3b1e      	subs	r3, #30
 80038b4:	409a      	lsls	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	e022      	b.n	8003906 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6919      	ldr	r1, [r3, #16]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	2207      	movs	r2, #7
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	400a      	ands	r2, r1
 80038e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6919      	ldr	r1, [r3, #16]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	4618      	mov	r0, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	4403      	add	r3, r0
 80038fc:	409a      	lsls	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b06      	cmp	r3, #6
 800390c:	d824      	bhi.n	8003958 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	3b05      	subs	r3, #5
 8003920:	221f      	movs	r2, #31
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	400a      	ands	r2, r1
 800392e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	4618      	mov	r0, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	3b05      	subs	r3, #5
 800394a:	fa00 f203 	lsl.w	r2, r0, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	635a      	str	r2, [r3, #52]	; 0x34
 8003956:	e04c      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b0c      	cmp	r3, #12
 800395e:	d824      	bhi.n	80039aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	3b23      	subs	r3, #35	; 0x23
 8003972:	221f      	movs	r2, #31
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43da      	mvns	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	400a      	ands	r2, r1
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	4618      	mov	r0, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	3b23      	subs	r3, #35	; 0x23
 800399c:	fa00 f203 	lsl.w	r2, r0, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	631a      	str	r2, [r3, #48]	; 0x30
 80039a8:	e023      	b.n	80039f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	3b41      	subs	r3, #65	; 0x41
 80039bc:	221f      	movs	r2, #31
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43da      	mvns	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	400a      	ands	r2, r1
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	4618      	mov	r0, r3
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	3b41      	subs	r3, #65	; 0x41
 80039e6:	fa00 f203 	lsl.w	r2, r0, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039f2:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <HAL_ADC_ConfigChannel+0x250>)
 80039f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <HAL_ADC_ConfigChannel+0x254>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d10f      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x1d8>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b12      	cmp	r3, #18
 8003a06:	d10b      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	; (8003a9c <HAL_ADC_ConfigChannel+0x254>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d12b      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x23a>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <HAL_ADC_ConfigChannel+0x258>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <HAL_ADC_ConfigChannel+0x1f4>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2b11      	cmp	r3, #17
 8003a3a:	d122      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a11      	ldr	r2, [pc, #68]	; (8003aa0 <HAL_ADC_ConfigChannel+0x258>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d111      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <HAL_ADC_ConfigChannel+0x25c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a11      	ldr	r2, [pc, #68]	; (8003aa8 <HAL_ADC_ConfigChannel+0x260>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	0c9a      	lsrs	r2, r3, #18
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a74:	e002      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f9      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40012300 	.word	0x40012300
 8003a9c:	40012000 	.word	0x40012000
 8003aa0:	10000012 	.word	0x10000012
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	431bde83 	.word	0x431bde83

08003aac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ab4:	4b79      	ldr	r3, [pc, #484]	; (8003c9c <ADC_Init+0x1f0>)
 8003ab6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ae0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6859      	ldr	r1, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6899      	ldr	r1, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	4a58      	ldr	r2, [pc, #352]	; (8003ca0 <ADC_Init+0x1f4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d022      	beq.n	8003b8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6899      	ldr	r1, [r3, #8]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6899      	ldr	r1, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
 8003b88:	e00f      	b.n	8003baa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ba8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0202 	bic.w	r2, r2, #2
 8003bb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	7e1b      	ldrb	r3, [r3, #24]
 8003bc4:	005a      	lsls	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01b      	beq.n	8003c10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bf6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6859      	ldr	r1, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	3b01      	subs	r3, #1
 8003c04:	035a      	lsls	r2, r3, #13
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	e007      	b.n	8003c20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	051a      	lsls	r2, r3, #20
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6899      	ldr	r1, [r3, #8]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c62:	025a      	lsls	r2, r3, #9
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6899      	ldr	r1, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	029a      	lsls	r2, r3, #10
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40012300 	.word	0x40012300
 8003ca0:	0f000001 	.word	0x0f000001

08003ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd6:	4a04      	ldr	r2, [pc, #16]	; (8003ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	60d3      	str	r3, [r2, #12]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000ed00 	.word	0xe000ed00

08003cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <__NVIC_GetPriorityGrouping+0x18>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	f003 0307 	and.w	r3, r3, #7
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	db0b      	blt.n	8003d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	f003 021f 	and.w	r2, r3, #31
 8003d20:	4907      	ldr	r1, [pc, #28]	; (8003d40 <__NVIC_EnableIRQ+0x38>)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	2001      	movs	r0, #1
 8003d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	e000e100 	.word	0xe000e100

08003d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	db0a      	blt.n	8003d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	490c      	ldr	r1, [pc, #48]	; (8003d90 <__NVIC_SetPriority+0x4c>)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	0112      	lsls	r2, r2, #4
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	440b      	add	r3, r1
 8003d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d6c:	e00a      	b.n	8003d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	4908      	ldr	r1, [pc, #32]	; (8003d94 <__NVIC_SetPriority+0x50>)
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	3b04      	subs	r3, #4
 8003d7c:	0112      	lsls	r2, r2, #4
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	440b      	add	r3, r1
 8003d82:	761a      	strb	r2, [r3, #24]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	e000e100 	.word	0xe000e100
 8003d94:	e000ed00 	.word	0xe000ed00

08003d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b089      	sub	sp, #36	; 0x24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f1c3 0307 	rsb	r3, r3, #7
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	bf28      	it	cs
 8003db6:	2304      	movcs	r3, #4
 8003db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d902      	bls.n	8003dc8 <NVIC_EncodePriority+0x30>
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3b03      	subs	r3, #3
 8003dc6:	e000      	b.n	8003dca <NVIC_EncodePriority+0x32>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	401a      	ands	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de0:	f04f 31ff 	mov.w	r1, #4294967295
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dea:	43d9      	mvns	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df0:	4313      	orrs	r3, r2
         );
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3724      	adds	r7, #36	; 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff ff4c 	bl	8003ca4 <__NVIC_SetPriorityGrouping>
}
 8003e0c:	bf00      	nop
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e26:	f7ff ff61 	bl	8003cec <__NVIC_GetPriorityGrouping>
 8003e2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	6978      	ldr	r0, [r7, #20]
 8003e32:	f7ff ffb1 	bl	8003d98 <NVIC_EncodePriority>
 8003e36:	4602      	mov	r2, r0
 8003e38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff ff80 	bl	8003d44 <__NVIC_SetPriority>
}
 8003e44:	bf00      	nop
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ff54 	bl	8003d08 <__NVIC_EnableIRQ>
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b089      	sub	sp, #36	; 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e177      	b.n	8004174 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e84:	2201      	movs	r2, #1
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	f040 8166 	bne.w	800416e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d005      	beq.n	8003eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d130      	bne.n	8003f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 0201 	and.w	r2, r3, #1
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d017      	beq.n	8003f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	2203      	movs	r2, #3
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d123      	bne.n	8003fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	08da      	lsrs	r2, r3, #3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3208      	adds	r2, #8
 8003f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	220f      	movs	r2, #15
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	08da      	lsrs	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3208      	adds	r2, #8
 8003fa6:	69b9      	ldr	r1, [r7, #24]
 8003fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0203 	and.w	r2, r3, #3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80c0 	beq.w	800416e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	4b66      	ldr	r3, [pc, #408]	; (800418c <HAL_GPIO_Init+0x324>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	4a65      	ldr	r2, [pc, #404]	; (800418c <HAL_GPIO_Init+0x324>)
 8003ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ffe:	4b63      	ldr	r3, [pc, #396]	; (800418c <HAL_GPIO_Init+0x324>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800400a:	4a61      	ldr	r2, [pc, #388]	; (8004190 <HAL_GPIO_Init+0x328>)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	089b      	lsrs	r3, r3, #2
 8004010:	3302      	adds	r3, #2
 8004012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	220f      	movs	r2, #15
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a58      	ldr	r2, [pc, #352]	; (8004194 <HAL_GPIO_Init+0x32c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d037      	beq.n	80040a6 <HAL_GPIO_Init+0x23e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a57      	ldr	r2, [pc, #348]	; (8004198 <HAL_GPIO_Init+0x330>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d031      	beq.n	80040a2 <HAL_GPIO_Init+0x23a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a56      	ldr	r2, [pc, #344]	; (800419c <HAL_GPIO_Init+0x334>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d02b      	beq.n	800409e <HAL_GPIO_Init+0x236>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a55      	ldr	r2, [pc, #340]	; (80041a0 <HAL_GPIO_Init+0x338>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d025      	beq.n	800409a <HAL_GPIO_Init+0x232>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a54      	ldr	r2, [pc, #336]	; (80041a4 <HAL_GPIO_Init+0x33c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01f      	beq.n	8004096 <HAL_GPIO_Init+0x22e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a53      	ldr	r2, [pc, #332]	; (80041a8 <HAL_GPIO_Init+0x340>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d019      	beq.n	8004092 <HAL_GPIO_Init+0x22a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a52      	ldr	r2, [pc, #328]	; (80041ac <HAL_GPIO_Init+0x344>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_GPIO_Init+0x226>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a51      	ldr	r2, [pc, #324]	; (80041b0 <HAL_GPIO_Init+0x348>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00d      	beq.n	800408a <HAL_GPIO_Init+0x222>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a50      	ldr	r2, [pc, #320]	; (80041b4 <HAL_GPIO_Init+0x34c>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d007      	beq.n	8004086 <HAL_GPIO_Init+0x21e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4f      	ldr	r2, [pc, #316]	; (80041b8 <HAL_GPIO_Init+0x350>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d101      	bne.n	8004082 <HAL_GPIO_Init+0x21a>
 800407e:	2309      	movs	r3, #9
 8004080:	e012      	b.n	80040a8 <HAL_GPIO_Init+0x240>
 8004082:	230a      	movs	r3, #10
 8004084:	e010      	b.n	80040a8 <HAL_GPIO_Init+0x240>
 8004086:	2308      	movs	r3, #8
 8004088:	e00e      	b.n	80040a8 <HAL_GPIO_Init+0x240>
 800408a:	2307      	movs	r3, #7
 800408c:	e00c      	b.n	80040a8 <HAL_GPIO_Init+0x240>
 800408e:	2306      	movs	r3, #6
 8004090:	e00a      	b.n	80040a8 <HAL_GPIO_Init+0x240>
 8004092:	2305      	movs	r3, #5
 8004094:	e008      	b.n	80040a8 <HAL_GPIO_Init+0x240>
 8004096:	2304      	movs	r3, #4
 8004098:	e006      	b.n	80040a8 <HAL_GPIO_Init+0x240>
 800409a:	2303      	movs	r3, #3
 800409c:	e004      	b.n	80040a8 <HAL_GPIO_Init+0x240>
 800409e:	2302      	movs	r3, #2
 80040a0:	e002      	b.n	80040a8 <HAL_GPIO_Init+0x240>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_GPIO_Init+0x240>
 80040a6:	2300      	movs	r3, #0
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	f002 0203 	and.w	r2, r2, #3
 80040ae:	0092      	lsls	r2, r2, #2
 80040b0:	4093      	lsls	r3, r2
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b8:	4935      	ldr	r1, [pc, #212]	; (8004190 <HAL_GPIO_Init+0x328>)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	089b      	lsrs	r3, r3, #2
 80040be:	3302      	adds	r3, #2
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040c6:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_GPIO_Init+0x354>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040ea:	4a34      	ldr	r2, [pc, #208]	; (80041bc <HAL_GPIO_Init+0x354>)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040f0:	4b32      	ldr	r3, [pc, #200]	; (80041bc <HAL_GPIO_Init+0x354>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004114:	4a29      	ldr	r2, [pc, #164]	; (80041bc <HAL_GPIO_Init+0x354>)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800411a:	4b28      	ldr	r3, [pc, #160]	; (80041bc <HAL_GPIO_Init+0x354>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800413e:	4a1f      	ldr	r2, [pc, #124]	; (80041bc <HAL_GPIO_Init+0x354>)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004144:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <HAL_GPIO_Init+0x354>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004168:	4a14      	ldr	r2, [pc, #80]	; (80041bc <HAL_GPIO_Init+0x354>)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	f67f ae84 	bls.w	8003e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	3724      	adds	r7, #36	; 0x24
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
 8004190:	40013800 	.word	0x40013800
 8004194:	40020000 	.word	0x40020000
 8004198:	40020400 	.word	0x40020400
 800419c:	40020800 	.word	0x40020800
 80041a0:	40020c00 	.word	0x40020c00
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40021400 	.word	0x40021400
 80041ac:	40021800 	.word	0x40021800
 80041b0:	40021c00 	.word	0x40021c00
 80041b4:	40022000 	.word	0x40022000
 80041b8:	40022400 	.word	0x40022400
 80041bc:	40013c00 	.word	0x40013c00

080041c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]
 80041cc:	4613      	mov	r3, r2
 80041ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041d0:	787b      	ldrb	r3, [r7, #1]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041d6:	887a      	ldrh	r2, [r7, #2]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041dc:	e003      	b.n	80041e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	041a      	lsls	r2, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	619a      	str	r2, [r3, #24]
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80041fe:	4b08      	ldr	r3, [pc, #32]	; (8004220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d006      	beq.n	8004218 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800420a:	4a05      	ldr	r2, [pc, #20]	; (8004220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f806 	bl	8004224 <HAL_GPIO_EXTI_Callback>
  }
}
 8004218:	bf00      	nop
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40013c00 	.word	0x40013c00

08004224 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e12b      	b.n	80044a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7fd fb4a 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2224      	movs	r2, #36	; 0x24
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800428e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800429e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042a0:	f001 fd9c 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 80042a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4a81      	ldr	r2, [pc, #516]	; (80044b0 <HAL_I2C_Init+0x274>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d807      	bhi.n	80042c0 <HAL_I2C_Init+0x84>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a80      	ldr	r2, [pc, #512]	; (80044b4 <HAL_I2C_Init+0x278>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	bf94      	ite	ls
 80042b8:	2301      	movls	r3, #1
 80042ba:	2300      	movhi	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	e006      	b.n	80042ce <HAL_I2C_Init+0x92>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4a7d      	ldr	r2, [pc, #500]	; (80044b8 <HAL_I2C_Init+0x27c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	bf94      	ite	ls
 80042c8:	2301      	movls	r3, #1
 80042ca:	2300      	movhi	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0e7      	b.n	80044a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4a78      	ldr	r2, [pc, #480]	; (80044bc <HAL_I2C_Init+0x280>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	0c9b      	lsrs	r3, r3, #18
 80042e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	4a6a      	ldr	r2, [pc, #424]	; (80044b0 <HAL_I2C_Init+0x274>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d802      	bhi.n	8004310 <HAL_I2C_Init+0xd4>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	3301      	adds	r3, #1
 800430e:	e009      	b.n	8004324 <HAL_I2C_Init+0xe8>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	4a69      	ldr	r2, [pc, #420]	; (80044c0 <HAL_I2C_Init+0x284>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	099b      	lsrs	r3, r3, #6
 8004322:	3301      	adds	r3, #1
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6812      	ldr	r2, [r2, #0]
 8004328:	430b      	orrs	r3, r1
 800432a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004336:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	495c      	ldr	r1, [pc, #368]	; (80044b0 <HAL_I2C_Init+0x274>)
 8004340:	428b      	cmp	r3, r1
 8004342:	d819      	bhi.n	8004378 <HAL_I2C_Init+0x13c>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1e59      	subs	r1, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004352:	1c59      	adds	r1, r3, #1
 8004354:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004358:	400b      	ands	r3, r1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_I2C_Init+0x138>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1e59      	subs	r1, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	fbb1 f3f3 	udiv	r3, r1, r3
 800436c:	3301      	adds	r3, #1
 800436e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004372:	e051      	b.n	8004418 <HAL_I2C_Init+0x1dc>
 8004374:	2304      	movs	r3, #4
 8004376:	e04f      	b.n	8004418 <HAL_I2C_Init+0x1dc>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d111      	bne.n	80043a4 <HAL_I2C_Init+0x168>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1e58      	subs	r0, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6859      	ldr	r1, [r3, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	440b      	add	r3, r1
 800438e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004392:	3301      	adds	r3, #1
 8004394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004398:	2b00      	cmp	r3, #0
 800439a:	bf0c      	ite	eq
 800439c:	2301      	moveq	r3, #1
 800439e:	2300      	movne	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e012      	b.n	80043ca <HAL_I2C_Init+0x18e>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e58      	subs	r0, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	0099      	lsls	r1, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ba:	3301      	adds	r3, #1
 80043bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_I2C_Init+0x196>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e022      	b.n	8004418 <HAL_I2C_Init+0x1dc>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10e      	bne.n	80043f8 <HAL_I2C_Init+0x1bc>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1e58      	subs	r0, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6859      	ldr	r1, [r3, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	440b      	add	r3, r1
 80043e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ec:	3301      	adds	r3, #1
 80043ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f6:	e00f      	b.n	8004418 <HAL_I2C_Init+0x1dc>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1e58      	subs	r0, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	0099      	lsls	r1, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	fbb0 f3f3 	udiv	r3, r0, r3
 800440e:	3301      	adds	r3, #1
 8004410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004414:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	6809      	ldr	r1, [r1, #0]
 800441c:	4313      	orrs	r3, r2
 800441e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69da      	ldr	r2, [r3, #28]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004446:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6911      	ldr	r1, [r2, #16]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	68d2      	ldr	r2, [r2, #12]
 8004452:	4311      	orrs	r1, r2
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	430b      	orrs	r3, r1
 800445a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	000186a0 	.word	0x000186a0
 80044b4:	001e847f 	.word	0x001e847f
 80044b8:	003d08ff 	.word	0x003d08ff
 80044bc:	431bde83 	.word	0x431bde83
 80044c0:	10624dd3 	.word	0x10624dd3

080044c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d129      	bne.n	800452e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2224      	movs	r2, #36	; 0x24
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0210 	bic.w	r2, r2, #16
 8004500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	430a      	orrs	r2, r1
 8004510:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0201 	orr.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b20      	cmp	r3, #32
 8004554:	d12a      	bne.n	80045ac <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2224      	movs	r2, #36	; 0x24
 800455a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004576:	89fb      	ldrh	r3, [r7, #14]
 8004578:	f023 030f 	bic.w	r3, r3, #15
 800457c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	b29a      	uxth	r2, r3
 8004582:	89fb      	ldrh	r3, [r7, #14]
 8004584:	4313      	orrs	r3, r2
 8004586:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	89fa      	ldrh	r2, [r7, #14]
 800458e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80045ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045da:	b590      	push	{r4, r7, lr}
 80045dc:	b08d      	sub	sp, #52	; 0x34
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f005 fa55 	bl	8009aa0 <USB_GetMode>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f040 839d 	bne.w	8004d38 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f005 f9b9 	bl	800997a <USB_ReadInterrupts>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8393 	beq.w	8004d36 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f005 f9b0 	bl	800997a <USB_ReadInterrupts>
 800461a:	4603      	mov	r3, r0
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b02      	cmp	r3, #2
 8004622:	d107      	bne.n	8004634 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f002 0202 	and.w	r2, r2, #2
 8004632:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f005 f99e 	bl	800997a <USB_ReadInterrupts>
 800463e:	4603      	mov	r3, r0
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	2b10      	cmp	r3, #16
 8004646:	d161      	bne.n	800470c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699a      	ldr	r2, [r3, #24]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0210 	bic.w	r2, r2, #16
 8004656:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	f003 020f 	and.w	r2, r3, #15
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	3304      	adds	r3, #4
 8004676:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	0c5b      	lsrs	r3, r3, #17
 800467c:	f003 030f 	and.w	r3, r3, #15
 8004680:	2b02      	cmp	r3, #2
 8004682:	d124      	bne.n	80046ce <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800468a:	4013      	ands	r3, r2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d035      	beq.n	80046fc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	091b      	lsrs	r3, r3, #4
 8004698:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800469a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800469e:	b29b      	uxth	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	6a38      	ldr	r0, [r7, #32]
 80046a4:	f005 f817 	bl	80096d6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	68da      	ldr	r2, [r3, #12]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	091b      	lsrs	r3, r3, #4
 80046b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046b4:	441a      	add	r2, r3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046c6:	441a      	add	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	619a      	str	r2, [r3, #24]
 80046cc:	e016      	b.n	80046fc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	0c5b      	lsrs	r3, r3, #17
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	2b06      	cmp	r3, #6
 80046d8:	d110      	bne.n	80046fc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046e0:	2208      	movs	r2, #8
 80046e2:	4619      	mov	r1, r3
 80046e4:	6a38      	ldr	r0, [r7, #32]
 80046e6:	f004 fff6 	bl	80096d6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046f6:	441a      	add	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0210 	orr.w	r2, r2, #16
 800470a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f005 f932 	bl	800997a <USB_ReadInterrupts>
 8004716:	4603      	mov	r3, r0
 8004718:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800471c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004720:	d16e      	bne.n	8004800 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f005 f938 	bl	80099a0 <USB_ReadDevAllOutEpInterrupt>
 8004730:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004732:	e062      	b.n	80047fa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d057      	beq.n	80047ee <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f005 f95d 	bl	8009a08 <USB_ReadDevOutEPInterrupt>
 800474e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004766:	461a      	mov	r2, r3
 8004768:	2301      	movs	r3, #1
 800476a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800476c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fd4e 	bl	8005210 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00c      	beq.n	8004798 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	461a      	mov	r2, r3
 800478c:	2308      	movs	r3, #8
 800478e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fe48 	bl	8005428 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ae:	461a      	mov	r2, r3
 80047b0:	2310      	movs	r3, #16
 80047b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ca:	461a      	mov	r2, r3
 80047cc:	2320      	movs	r3, #32
 80047ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d009      	beq.n	80047ee <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e6:	461a      	mov	r2, r3
 80047e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	3301      	adds	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d199      	bne.n	8004734 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f005 f8b8 	bl	800997a <USB_ReadInterrupts>
 800480a:	4603      	mov	r3, r0
 800480c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004810:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004814:	f040 80c0 	bne.w	8004998 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f005 f8d9 	bl	80099d4 <USB_ReadDevAllInEpInterrupt>
 8004822:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004828:	e0b2      	b.n	8004990 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80a7 	beq.w	8004984 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f005 f8ff 	bl	8009a44 <USB_ReadDevInEPInterrupt>
 8004846:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d057      	beq.n	8004902 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	f003 030f 	and.w	r3, r3, #15
 8004858:	2201      	movs	r2, #1
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	43db      	mvns	r3, r3
 800486c:	69f9      	ldr	r1, [r7, #28]
 800486e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004872:	4013      	ands	r3, r2
 8004874:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004882:	461a      	mov	r2, r3
 8004884:	2301      	movs	r3, #1
 8004886:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d132      	bne.n	80048f6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004894:	4613      	mov	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	3348      	adds	r3, #72	; 0x48
 80048a0:	6819      	ldr	r1, [r3, #0]
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a6:	4613      	mov	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4403      	add	r3, r0
 80048b0:	3344      	adds	r3, #68	; 0x44
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4419      	add	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4403      	add	r3, r0
 80048c4:	3348      	adds	r3, #72	; 0x48
 80048c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d113      	bne.n	80048f6 <HAL_PCD_IRQHandler+0x31c>
 80048ce:	6879      	ldr	r1, [r7, #4]
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	4613      	mov	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	3350      	adds	r3, #80	; 0x50
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d108      	bne.n	80048f6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048ee:	461a      	mov	r2, r3
 80048f0:	2101      	movs	r1, #1
 80048f2:	f005 f907 	bl	8009b04 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	4619      	mov	r1, r3
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f006 fee2 	bl	800b6c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004918:	461a      	mov	r2, r3
 800491a:	2308      	movs	r3, #8
 800491c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	461a      	mov	r2, r3
 8004936:	2310      	movs	r3, #16
 8004938:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004950:	461a      	mov	r2, r3
 8004952:	2340      	movs	r3, #64	; 0x40
 8004954:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496c:	461a      	mov	r2, r3
 800496e:	2302      	movs	r3, #2
 8004970:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800497c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fbb9 	bl	80050f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	3301      	adds	r3, #1
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	2b00      	cmp	r3, #0
 8004994:	f47f af49 	bne.w	800482a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f004 ffec 	bl	800997a <USB_ReadInterrupts>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ac:	d122      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	69fa      	ldr	r2, [r7, #28]
 80049b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049bc:	f023 0301 	bic.w	r3, r3, #1
 80049c0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d108      	bne.n	80049de <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80049d4:	2100      	movs	r1, #0
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fd6c 	bl	80054b4 <HAL_PCDEx_LPM_Callback>
 80049dc:	e002      	b.n	80049e4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f006 fee8 	bl	800b7b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80049f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f004 ffbe 	bl	800997a <USB_ReadInterrupts>
 80049fe:	4603      	mov	r3, r0
 8004a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a08:	d112      	bne.n	8004a30 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f006 fea4 	bl	800b768 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004a2e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f004 ffa0 	bl	800997a <USB_ReadInterrupts>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a44:	f040 80c7 	bne.w	8004bd6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2110      	movs	r1, #16
 8004a62:	4618      	mov	r0, r3
 8004a64:	f004 f992 	bl	8008d8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a68:	2300      	movs	r3, #0
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a6c:	e056      	b.n	8004b1c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004aa0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ac0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ad4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004af0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004af4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b06:	0151      	lsls	r1, r2, #5
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	440a      	add	r2, r1
 8004b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	3301      	adds	r3, #1
 8004b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d3a3      	bcc.n	8004a6e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	69fa      	ldr	r2, [r7, #28]
 8004b30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b34:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004b38:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4c:	69fa      	ldr	r2, [r7, #28]
 8004b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b52:	f043 030b 	orr.w	r3, r3, #11
 8004b56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b62:	69fa      	ldr	r2, [r7, #28]
 8004b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b68:	f043 030b 	orr.w	r3, r3, #11
 8004b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b6e:	e015      	b.n	8004b9c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b7e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b82:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004b86:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b96:	f043 030b 	orr.w	r3, r3, #11
 8004b9a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004baa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f004 ff9f 	bl	8009b04 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695a      	ldr	r2, [r3, #20]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004bd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f004 fecd 	bl	800997a <USB_ReadInterrupts>
 8004be0:	4603      	mov	r3, r0
 8004be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bea:	d124      	bne.n	8004c36 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f004 ff63 	bl	8009abc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f004 f8ea 	bl	8008dd4 <USB_GetDevSpeed>
 8004c00:	4603      	mov	r3, r0
 8004c02:	461a      	mov	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681c      	ldr	r4, [r3, #0]
 8004c0c:	f001 f8da 	bl	8005dc4 <HAL_RCC_GetHCLKFreq>
 8004c10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f004 f814 	bl	8008c48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f006 fd78 	bl	800b716 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695a      	ldr	r2, [r3, #20]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f004 fe9d 	bl	800997a <USB_ReadInterrupts>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f003 0308 	and.w	r3, r3, #8
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d10a      	bne.n	8004c60 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f006 fd55 	bl	800b6fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695a      	ldr	r2, [r3, #20]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f002 0208 	and.w	r2, r2, #8
 8004c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f004 fe88 	bl	800997a <USB_ReadInterrupts>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c74:	d10f      	bne.n	8004c96 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f006 fdb7 	bl	800b7f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	695a      	ldr	r2, [r3, #20]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004c94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f004 fe6d 	bl	800997a <USB_ReadInterrupts>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ca6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004caa:	d10f      	bne.n	8004ccc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f006 fd8a 	bl	800b7d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f004 fe52 	bl	800997a <USB_ReadInterrupts>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce0:	d10a      	bne.n	8004cf8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f006 fd98 	bl	800b818 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f004 fe3c 	bl	800997a <USB_ReadInterrupts>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d115      	bne.n	8004d38 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f006 fd88 	bl	800b834 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]
 8004d34:	e000      	b.n	8004d38 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004d36:	bf00      	nop
    }
  }
}
 8004d38:	3734      	adds	r7, #52	; 0x34
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd90      	pop	{r4, r7, pc}

08004d3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_PCD_SetAddress+0x1a>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e013      	b.n	8004d80 <HAL_PCD_SetAddress+0x42>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f004 fddc 	bl	800992e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3708      	adds	r7, #8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	4608      	mov	r0, r1
 8004d92:	4611      	mov	r1, r2
 8004d94:	461a      	mov	r2, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	70fb      	strb	r3, [r7, #3]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	803b      	strh	r3, [r7, #0]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	da0f      	bge.n	8004dce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	f003 020f 	and.w	r2, r3, #15
 8004db4:	4613      	mov	r3, r2
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	1a9b      	subs	r3, r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	3338      	adds	r3, #56	; 0x38
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	705a      	strb	r2, [r3, #1]
 8004dcc:	e00f      	b.n	8004dee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	f003 020f 	and.w	r2, r3, #15
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	4413      	add	r3, r2
 8004de4:	3304      	adds	r3, #4
 8004de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004dfa:	883a      	ldrh	r2, [r7, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	78ba      	ldrb	r2, [r7, #2]
 8004e04:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d004      	beq.n	8004e18 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e18:	78bb      	ldrb	r3, [r7, #2]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d102      	bne.n	8004e24 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_PCD_EP_Open+0xaa>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e00e      	b.n	8004e50 <HAL_PCD_EP_Open+0xc8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68f9      	ldr	r1, [r7, #12]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f003 ffec 	bl	8008e1e <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004e4e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	607a      	str	r2, [r7, #4]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	460b      	mov	r3, r1
 8004e66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e68:	7afb      	ldrb	r3, [r7, #11]
 8004e6a:	f003 020f 	and.w	r2, r3, #15
 8004e6e:	4613      	mov	r3, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3304      	adds	r3, #4
 8004e80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2200      	movs	r2, #0
 8004e92:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2200      	movs	r2, #0
 8004e98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e9a:	7afb      	ldrb	r3, [r7, #11]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d102      	bne.n	8004eb4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004eb4:	7afb      	ldrb	r3, [r7, #11]
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6979      	ldr	r1, [r7, #20]
 8004ecc:	f004 fa72 	bl	80093b4 <USB_EP0StartXfer>
 8004ed0:	e008      	b.n	8004ee4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	6979      	ldr	r1, [r7, #20]
 8004ee0:	f004 f824 	bl	8008f2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b086      	sub	sp, #24
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
 8004efa:	460b      	mov	r3, r1
 8004efc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004efe:	7afb      	ldrb	r3, [r7, #11]
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	4613      	mov	r3, r2
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	3338      	adds	r3, #56	; 0x38
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4413      	add	r3, r2
 8004f12:	3304      	adds	r3, #4
 8004f14:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2200      	movs	r2, #0
 8004f26:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d102      	bne.n	8004f48 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f48:	7afb      	ldrb	r3, [r7, #11]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6979      	ldr	r1, [r7, #20]
 8004f60:	f004 fa28 	bl	80093b4 <USB_EP0StartXfer>
 8004f64:	e008      	b.n	8004f78 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	461a      	mov	r2, r3
 8004f72:	6979      	ldr	r1, [r7, #20]
 8004f74:	f003 ffda 	bl	8008f2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	f003 020f 	and.w	r2, r3, #15
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d901      	bls.n	8004fa0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e050      	b.n	8005042 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fa0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	da0f      	bge.n	8004fc8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	f003 020f 	and.w	r2, r3, #15
 8004fae:	4613      	mov	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	1a9b      	subs	r3, r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	3338      	adds	r3, #56	; 0x38
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4413      	add	r3, r2
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	705a      	strb	r2, [r3, #1]
 8004fc6:	e00d      	b.n	8004fe4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	4413      	add	r3, r2
 8004fda:	3304      	adds	r3, #4
 8004fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_PCD_EP_SetStall+0x82>
 8005000:	2302      	movs	r3, #2
 8005002:	e01e      	b.n	8005042 <HAL_PCD_EP_SetStall+0xc0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68f9      	ldr	r1, [r7, #12]
 8005012:	4618      	mov	r0, r3
 8005014:	f004 fbb7 	bl	8009786 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	b2d9      	uxtb	r1, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005032:	461a      	mov	r2, r3
 8005034:	f004 fd66 	bl	8009b04 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d901      	bls.n	8005068 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e042      	b.n	80050ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800506c:	2b00      	cmp	r3, #0
 800506e:	da0f      	bge.n	8005090 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	f003 020f 	and.w	r2, r3, #15
 8005076:	4613      	mov	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	3338      	adds	r3, #56	; 0x38
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	4413      	add	r3, r2
 8005084:	3304      	adds	r3, #4
 8005086:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	705a      	strb	r2, [r3, #1]
 800508e:	e00f      	b.n	80050b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005090:	78fb      	ldrb	r3, [r7, #3]
 8005092:	f003 020f 	and.w	r2, r3, #15
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	3304      	adds	r3, #4
 80050a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_PCD_EP_ClrStall+0x86>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e00e      	b.n	80050ee <HAL_PCD_EP_ClrStall+0xa4>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68f9      	ldr	r1, [r7, #12]
 80050de:	4618      	mov	r0, r3
 80050e0:	f004 fbbf 	bl	8009862 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b08a      	sub	sp, #40	; 0x28
 80050fa:	af02      	add	r7, sp, #8
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	4613      	mov	r3, r2
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	1a9b      	subs	r3, r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	3338      	adds	r3, #56	; 0x38
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4413      	add	r3, r2
 800511a:	3304      	adds	r3, #4
 800511c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	429a      	cmp	r2, r3
 8005128:	d901      	bls.n	800512e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e06c      	b.n	8005208 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	695a      	ldr	r2, [r3, #20]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	69fa      	ldr	r2, [r7, #28]
 8005140:	429a      	cmp	r2, r3
 8005142:	d902      	bls.n	800514a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	3303      	adds	r3, #3
 800514e:	089b      	lsrs	r3, r3, #2
 8005150:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005152:	e02b      	b.n	80051ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	695a      	ldr	r2, [r3, #20]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	429a      	cmp	r2, r3
 8005168:	d902      	bls.n	8005170 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	3303      	adds	r3, #3
 8005174:	089b      	lsrs	r3, r3, #2
 8005176:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	68d9      	ldr	r1, [r3, #12]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	b2da      	uxtb	r2, r3
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005188:	b2db      	uxtb	r3, r3
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	4603      	mov	r3, r0
 800518e:	6978      	ldr	r0, [r7, #20]
 8005190:	f004 fa63 	bl	800965a <USB_WritePacket>

    ep->xfer_buff  += len;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	441a      	add	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	699a      	ldr	r2, [r3, #24]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	441a      	add	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d809      	bhi.n	80051d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d203      	bcs.n	80051d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1be      	bne.n	8005154 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d811      	bhi.n	8005206 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	2201      	movs	r2, #1
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	43db      	mvns	r3, r3
 80051fc:	6939      	ldr	r1, [r7, #16]
 80051fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005202:	4013      	ands	r3, r2
 8005204:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3720      	adds	r7, #32
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	333c      	adds	r3, #60	; 0x3c
 8005228:	3304      	adds	r3, #4
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	2b01      	cmp	r3, #1
 8005244:	f040 80a0 	bne.w	8005388 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d015      	beq.n	800527e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4a72      	ldr	r2, [pc, #456]	; (8005420 <PCD_EP_OutXfrComplete_int+0x210>)
 8005256:	4293      	cmp	r3, r2
 8005258:	f240 80dd 	bls.w	8005416 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 80d7 	beq.w	8005416 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005274:	461a      	mov	r2, r3
 8005276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800527a:	6093      	str	r3, [r2, #8]
 800527c:	e0cb      	b.n	8005416 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005294:	461a      	mov	r2, r3
 8005296:	2320      	movs	r3, #32
 8005298:	6093      	str	r3, [r2, #8]
 800529a:	e0bc      	b.n	8005416 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f040 80b7 	bne.w	8005416 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a5d      	ldr	r2, [pc, #372]	; (8005420 <PCD_EP_OutXfrComplete_int+0x210>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d90f      	bls.n	80052d0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c6:	461a      	mov	r2, r3
 80052c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052cc:	6093      	str	r3, [r2, #8]
 80052ce:	e0a2      	b.n	8005416 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	1a9b      	subs	r3, r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80052e2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	0159      	lsls	r1, r3, #5
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	440b      	add	r3, r1
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80052f6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4403      	add	r3, r0
 8005306:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800530a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800531e:	6819      	ldr	r1, [r3, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4403      	add	r3, r0
 800532e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4419      	add	r1, r3
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	4613      	mov	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4403      	add	r3, r0
 8005344:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005348:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d114      	bne.n	800537a <PCD_EP_OutXfrComplete_int+0x16a>
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	1a9b      	subs	r3, r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d108      	bne.n	800537a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005372:	461a      	mov	r2, r3
 8005374:	2101      	movs	r1, #1
 8005376:	f004 fbc5 	bl	8009b04 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	4619      	mov	r1, r3
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f006 f985 	bl	800b690 <HAL_PCD_DataOutStageCallback>
 8005386:	e046      	b.n	8005416 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a26      	ldr	r2, [pc, #152]	; (8005424 <PCD_EP_OutXfrComplete_int+0x214>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d124      	bne.n	80053da <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	4413      	add	r3, r2
 80053a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a6:	461a      	mov	r2, r3
 80053a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ac:	6093      	str	r3, [r2, #8]
 80053ae:	e032      	b.n	8005416 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c6:	461a      	mov	r2, r3
 80053c8:	2320      	movs	r3, #32
 80053ca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	4619      	mov	r1, r3
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f006 f95c 	bl	800b690 <HAL_PCD_DataOutStageCallback>
 80053d8:	e01d      	b.n	8005416 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d114      	bne.n	800540a <PCD_EP_OutXfrComplete_int+0x1fa>
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	4613      	mov	r3, r2
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	440b      	add	r3, r1
 80053ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d108      	bne.n	800540a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005402:	461a      	mov	r2, r3
 8005404:	2100      	movs	r1, #0
 8005406:	f004 fb7d 	bl	8009b04 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	4619      	mov	r1, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f006 f93d 	bl	800b690 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	4f54300a 	.word	0x4f54300a
 8005424:	4f54310a 	.word	0x4f54310a

08005428 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	333c      	adds	r3, #60	; 0x3c
 8005440:	3304      	adds	r3, #4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4413      	add	r3, r2
 800544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d90e      	bls.n	800547c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005464:	2b00      	cmp	r3, #0
 8005466:	d009      	beq.n	800547c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005474:	461a      	mov	r2, r3
 8005476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800547a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f006 f8f5 	bl	800b66c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4a0a      	ldr	r2, [pc, #40]	; (80054b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d90c      	bls.n	80054a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d108      	bne.n	80054a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800549c:	461a      	mov	r2, r3
 800549e:	2101      	movs	r1, #1
 80054a0:	f004 fb30 	bl	8009b04 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	4f54300a 	.word	0x4f54300a

080054b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <HAL_PWR_EnableWakeUpPin+0x20>)
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	4904      	ldr	r1, [pc, #16]	; (80054ec <HAL_PWR_EnableWakeUpPin+0x20>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4313      	orrs	r3, r2
 80054de:	604b      	str	r3, [r1, #4]
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	40007000 	.word	0x40007000

080054f0 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 80054f8:	4b06      	ldr	r3, [pc, #24]	; (8005514 <HAL_PWR_DisableWakeUpPin+0x24>)
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	43db      	mvns	r3, r3
 8005500:	4904      	ldr	r1, [pc, #16]	; (8005514 <HAL_PWR_DisableWakeUpPin+0x24>)
 8005502:	4013      	ands	r3, r2
 8005504:	604b      	str	r3, [r1, #4]
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40007000 	.word	0x40007000

08005518 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800551c:	4b08      	ldr	r3, [pc, #32]	; (8005540 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a07      	ldr	r2, [pc, #28]	; (8005540 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8005522:	f043 0302 	orr.w	r3, r3, #2
 8005526:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	4a05      	ldr	r2, [pc, #20]	; (8005544 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800552e:	f043 0304 	orr.w	r3, r3, #4
 8005532:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005534:	bf30      	wfi
}
 8005536:	bf00      	nop
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	40007000 	.word	0x40007000
 8005544:	e000ed00 	.word	0xe000ed00

08005548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e264      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d075      	beq.n	8005652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005566:	4ba3      	ldr	r3, [pc, #652]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 030c 	and.w	r3, r3, #12
 800556e:	2b04      	cmp	r3, #4
 8005570:	d00c      	beq.n	800558c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005572:	4ba0      	ldr	r3, [pc, #640]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800557a:	2b08      	cmp	r3, #8
 800557c:	d112      	bne.n	80055a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800557e:	4b9d      	ldr	r3, [pc, #628]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800558a:	d10b      	bne.n	80055a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800558c:	4b99      	ldr	r3, [pc, #612]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d05b      	beq.n	8005650 <HAL_RCC_OscConfig+0x108>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d157      	bne.n	8005650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e23f      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ac:	d106      	bne.n	80055bc <HAL_RCC_OscConfig+0x74>
 80055ae:	4b91      	ldr	r3, [pc, #580]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a90      	ldr	r2, [pc, #576]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e01d      	b.n	80055f8 <HAL_RCC_OscConfig+0xb0>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055c4:	d10c      	bne.n	80055e0 <HAL_RCC_OscConfig+0x98>
 80055c6:	4b8b      	ldr	r3, [pc, #556]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a8a      	ldr	r2, [pc, #552]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80055cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	4b88      	ldr	r3, [pc, #544]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a87      	ldr	r2, [pc, #540]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80055d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055dc:	6013      	str	r3, [r2, #0]
 80055de:	e00b      	b.n	80055f8 <HAL_RCC_OscConfig+0xb0>
 80055e0:	4b84      	ldr	r3, [pc, #528]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a83      	ldr	r2, [pc, #524]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80055e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	4b81      	ldr	r3, [pc, #516]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a80      	ldr	r2, [pc, #512]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80055f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d013      	beq.n	8005628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005600:	f7fe f8ae 	bl	8003760 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005608:	f7fe f8aa 	bl	8003760 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b64      	cmp	r3, #100	; 0x64
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e204      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800561a:	4b76      	ldr	r3, [pc, #472]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0xc0>
 8005626:	e014      	b.n	8005652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005628:	f7fe f89a 	bl	8003760 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005630:	f7fe f896 	bl	8003760 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b64      	cmp	r3, #100	; 0x64
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e1f0      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005642:	4b6c      	ldr	r3, [pc, #432]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0xe8>
 800564e:	e000      	b.n	8005652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d063      	beq.n	8005726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800565e:	4b65      	ldr	r3, [pc, #404]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f003 030c 	and.w	r3, r3, #12
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800566a:	4b62      	ldr	r3, [pc, #392]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005672:	2b08      	cmp	r3, #8
 8005674:	d11c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005676:	4b5f      	ldr	r3, [pc, #380]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d116      	bne.n	80056b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005682:	4b5c      	ldr	r3, [pc, #368]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <HAL_RCC_OscConfig+0x152>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d001      	beq.n	800569a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e1c4      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569a:	4b56      	ldr	r3, [pc, #344]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	4952      	ldr	r1, [pc, #328]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ae:	e03a      	b.n	8005726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d020      	beq.n	80056fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b8:	4b4f      	ldr	r3, [pc, #316]	; (80057f8 <HAL_RCC_OscConfig+0x2b0>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fe f84f 	bl	8003760 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056c6:	f7fe f84b 	bl	8003760 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e1a5      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d8:	4b46      	ldr	r3, [pc, #280]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e4:	4b43      	ldr	r3, [pc, #268]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	4940      	ldr	r1, [pc, #256]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	600b      	str	r3, [r1, #0]
 80056f8:	e015      	b.n	8005726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056fa:	4b3f      	ldr	r3, [pc, #252]	; (80057f8 <HAL_RCC_OscConfig+0x2b0>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fe f82e 	bl	8003760 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005708:	f7fe f82a 	bl	8003760 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e184      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800571a:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f0      	bne.n	8005708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d030      	beq.n	8005794 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d016      	beq.n	8005768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800573a:	4b30      	ldr	r3, [pc, #192]	; (80057fc <HAL_RCC_OscConfig+0x2b4>)
 800573c:	2201      	movs	r2, #1
 800573e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005740:	f7fe f80e 	bl	8003760 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005748:	f7fe f80a 	bl	8003760 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e164      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800575a:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 800575c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0f0      	beq.n	8005748 <HAL_RCC_OscConfig+0x200>
 8005766:	e015      	b.n	8005794 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005768:	4b24      	ldr	r3, [pc, #144]	; (80057fc <HAL_RCC_OscConfig+0x2b4>)
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800576e:	f7fd fff7 	bl	8003760 <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005774:	e008      	b.n	8005788 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005776:	f7fd fff3 	bl	8003760 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e14d      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005788:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 800578a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f0      	bne.n	8005776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0304 	and.w	r3, r3, #4
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80a0 	beq.w	80058e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057a2:	2300      	movs	r3, #0
 80057a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057a6:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10f      	bne.n	80057d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	4a0e      	ldr	r2, [pc, #56]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80057bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c0:	6413      	str	r3, [r2, #64]	; 0x40
 80057c2:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <HAL_RCC_OscConfig+0x2ac>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ce:	2301      	movs	r3, #1
 80057d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d2:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <HAL_RCC_OscConfig+0x2b8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d121      	bne.n	8005822 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057de:	4b08      	ldr	r3, [pc, #32]	; (8005800 <HAL_RCC_OscConfig+0x2b8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a07      	ldr	r2, [pc, #28]	; (8005800 <HAL_RCC_OscConfig+0x2b8>)
 80057e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057ea:	f7fd ffb9 	bl	8003760 <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057f0:	e011      	b.n	8005816 <HAL_RCC_OscConfig+0x2ce>
 80057f2:	bf00      	nop
 80057f4:	40023800 	.word	0x40023800
 80057f8:	42470000 	.word	0x42470000
 80057fc:	42470e80 	.word	0x42470e80
 8005800:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005804:	f7fd ffac 	bl	8003760 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e106      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005816:	4b85      	ldr	r3, [pc, #532]	; (8005a2c <HAL_RCC_OscConfig+0x4e4>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581e:	2b00      	cmp	r3, #0
 8005820:	d0f0      	beq.n	8005804 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d106      	bne.n	8005838 <HAL_RCC_OscConfig+0x2f0>
 800582a:	4b81      	ldr	r3, [pc, #516]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 800582c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582e:	4a80      	ldr	r2, [pc, #512]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 8005830:	f043 0301 	orr.w	r3, r3, #1
 8005834:	6713      	str	r3, [r2, #112]	; 0x70
 8005836:	e01c      	b.n	8005872 <HAL_RCC_OscConfig+0x32a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b05      	cmp	r3, #5
 800583e:	d10c      	bne.n	800585a <HAL_RCC_OscConfig+0x312>
 8005840:	4b7b      	ldr	r3, [pc, #492]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005844:	4a7a      	ldr	r2, [pc, #488]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 8005846:	f043 0304 	orr.w	r3, r3, #4
 800584a:	6713      	str	r3, [r2, #112]	; 0x70
 800584c:	4b78      	ldr	r3, [pc, #480]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 800584e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005850:	4a77      	ldr	r2, [pc, #476]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 8005852:	f043 0301 	orr.w	r3, r3, #1
 8005856:	6713      	str	r3, [r2, #112]	; 0x70
 8005858:	e00b      	b.n	8005872 <HAL_RCC_OscConfig+0x32a>
 800585a:	4b75      	ldr	r3, [pc, #468]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585e:	4a74      	ldr	r2, [pc, #464]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	6713      	str	r3, [r2, #112]	; 0x70
 8005866:	4b72      	ldr	r3, [pc, #456]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	4a71      	ldr	r2, [pc, #452]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 800586c:	f023 0304 	bic.w	r3, r3, #4
 8005870:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d015      	beq.n	80058a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800587a:	f7fd ff71 	bl	8003760 <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005880:	e00a      	b.n	8005898 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005882:	f7fd ff6d 	bl	8003760 <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005890:	4293      	cmp	r3, r2
 8005892:	d901      	bls.n	8005898 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e0c5      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005898:	4b65      	ldr	r3, [pc, #404]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d0ee      	beq.n	8005882 <HAL_RCC_OscConfig+0x33a>
 80058a4:	e014      	b.n	80058d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a6:	f7fd ff5b 	bl	8003760 <HAL_GetTick>
 80058aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ac:	e00a      	b.n	80058c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ae:	f7fd ff57 	bl	8003760 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058bc:	4293      	cmp	r3, r2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e0af      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058c4:	4b5a      	ldr	r3, [pc, #360]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1ee      	bne.n	80058ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d105      	bne.n	80058e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d6:	4b56      	ldr	r3, [pc, #344]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	4a55      	ldr	r2, [pc, #340]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 80058dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 809b 	beq.w	8005a22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058ec:	4b50      	ldr	r3, [pc, #320]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 030c 	and.w	r3, r3, #12
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d05c      	beq.n	80059b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d141      	bne.n	8005984 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005900:	4b4c      	ldr	r3, [pc, #304]	; (8005a34 <HAL_RCC_OscConfig+0x4ec>)
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005906:	f7fd ff2b 	bl	8003760 <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800590e:	f7fd ff27 	bl	8003760 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e081      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005920:	4b43      	ldr	r3, [pc, #268]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f0      	bne.n	800590e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69da      	ldr	r2, [r3, #28]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	019b      	lsls	r3, r3, #6
 800593c:	431a      	orrs	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	085b      	lsrs	r3, r3, #1
 8005944:	3b01      	subs	r3, #1
 8005946:	041b      	lsls	r3, r3, #16
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	061b      	lsls	r3, r3, #24
 8005950:	4937      	ldr	r1, [pc, #220]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 8005952:	4313      	orrs	r3, r2
 8005954:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005956:	4b37      	ldr	r3, [pc, #220]	; (8005a34 <HAL_RCC_OscConfig+0x4ec>)
 8005958:	2201      	movs	r2, #1
 800595a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595c:	f7fd ff00 	bl	8003760 <HAL_GetTick>
 8005960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005964:	f7fd fefc 	bl	8003760 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e056      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005976:	4b2e      	ldr	r3, [pc, #184]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0f0      	beq.n	8005964 <HAL_RCC_OscConfig+0x41c>
 8005982:	e04e      	b.n	8005a22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005984:	4b2b      	ldr	r3, [pc, #172]	; (8005a34 <HAL_RCC_OscConfig+0x4ec>)
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800598a:	f7fd fee9 	bl	8003760 <HAL_GetTick>
 800598e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005992:	f7fd fee5 	bl	8003760 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e03f      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a4:	4b22      	ldr	r3, [pc, #136]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1f0      	bne.n	8005992 <HAL_RCC_OscConfig+0x44a>
 80059b0:	e037      	b.n	8005a22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e032      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059be:	4b1c      	ldr	r3, [pc, #112]	; (8005a30 <HAL_RCC_OscConfig+0x4e8>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d028      	beq.n	8005a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d121      	bne.n	8005a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d11a      	bne.n	8005a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059ee:	4013      	ands	r3, r2
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d111      	bne.n	8005a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a04:	085b      	lsrs	r3, r3, #1
 8005a06:	3b01      	subs	r3, #1
 8005a08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d107      	bne.n	8005a1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d001      	beq.n	8005a22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40007000 	.word	0x40007000
 8005a30:	40023800 	.word	0x40023800
 8005a34:	42470060 	.word	0x42470060

08005a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0cc      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b68      	ldr	r3, [pc, #416]	; (8005bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 030f 	and.w	r3, r3, #15
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d90c      	bls.n	8005a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4b65      	ldr	r3, [pc, #404]	; (8005bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a62:	4b63      	ldr	r3, [pc, #396]	; (8005bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	683a      	ldr	r2, [r7, #0]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d001      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0b8      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d020      	beq.n	8005ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a8c:	4b59      	ldr	r3, [pc, #356]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	4a58      	ldr	r2, [pc, #352]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d005      	beq.n	8005ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005aa4:	4b53      	ldr	r3, [pc, #332]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	4a52      	ldr	r2, [pc, #328]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ab0:	4b50      	ldr	r3, [pc, #320]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	494d      	ldr	r1, [pc, #308]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d044      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d107      	bne.n	8005ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ad6:	4b47      	ldr	r3, [pc, #284]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d119      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e07f      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d003      	beq.n	8005af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d107      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005af6:	4b3f      	ldr	r3, [pc, #252]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e06f      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b06:	4b3b      	ldr	r3, [pc, #236]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e067      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b16:	4b37      	ldr	r3, [pc, #220]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f023 0203 	bic.w	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4934      	ldr	r1, [pc, #208]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b28:	f7fd fe1a 	bl	8003760 <HAL_GetTick>
 8005b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2e:	e00a      	b.n	8005b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b30:	f7fd fe16 	bl	8003760 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e04f      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b46:	4b2b      	ldr	r3, [pc, #172]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 020c 	and.w	r2, r3, #12
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1eb      	bne.n	8005b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b58:	4b25      	ldr	r3, [pc, #148]	; (8005bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 030f 	and.w	r3, r3, #15
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d20c      	bcs.n	8005b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4b22      	ldr	r3, [pc, #136]	; (8005bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b6e:	4b20      	ldr	r3, [pc, #128]	; (8005bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d001      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e032      	b.n	8005be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d008      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b8c:	4b19      	ldr	r3, [pc, #100]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	4916      	ldr	r1, [pc, #88]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0308 	and.w	r3, r3, #8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d009      	beq.n	8005bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005baa:	4b12      	ldr	r3, [pc, #72]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	490e      	ldr	r1, [pc, #56]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bbe:	f000 f821 	bl	8005c04 <HAL_RCC_GetSysClockFreq>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	091b      	lsrs	r3, r3, #4
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	490a      	ldr	r1, [pc, #40]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8005bd0:	5ccb      	ldrb	r3, [r1, r3]
 8005bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd6:	4a09      	ldr	r2, [pc, #36]	; (8005bfc <HAL_RCC_ClockConfig+0x1c4>)
 8005bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bda:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <HAL_RCC_ClockConfig+0x1c8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fc fa3c 	bl	800205c <HAL_InitTick>

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	40023c00 	.word	0x40023c00
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	08010f98 	.word	0x08010f98
 8005bfc:	20000000 	.word	0x20000000
 8005c00:	20000060 	.word	0x20000060

08005c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	607b      	str	r3, [r7, #4]
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	2300      	movs	r3, #0
 8005c16:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c1c:	4b67      	ldr	r3, [pc, #412]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	f003 030c 	and.w	r3, r3, #12
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d00d      	beq.n	8005c44 <HAL_RCC_GetSysClockFreq+0x40>
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	f200 80bd 	bhi.w	8005da8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_RCC_GetSysClockFreq+0x34>
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d003      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c36:	e0b7      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c38:	4b61      	ldr	r3, [pc, #388]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c3a:	60bb      	str	r3, [r7, #8]
       break;
 8005c3c:	e0b7      	b.n	8005dae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c3e:	4b60      	ldr	r3, [pc, #384]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c40:	60bb      	str	r3, [r7, #8]
      break;
 8005c42:	e0b4      	b.n	8005dae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c44:	4b5d      	ldr	r3, [pc, #372]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c4e:	4b5b      	ldr	r3, [pc, #364]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d04d      	beq.n	8005cf6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c5a:	4b58      	ldr	r3, [pc, #352]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	099b      	lsrs	r3, r3, #6
 8005c60:	461a      	mov	r2, r3
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c6a:	f04f 0100 	mov.w	r1, #0
 8005c6e:	ea02 0800 	and.w	r8, r2, r0
 8005c72:	ea03 0901 	and.w	r9, r3, r1
 8005c76:	4640      	mov	r0, r8
 8005c78:	4649      	mov	r1, r9
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	014b      	lsls	r3, r1, #5
 8005c84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c88:	0142      	lsls	r2, r0, #5
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	ebb0 0008 	subs.w	r0, r0, r8
 8005c92:	eb61 0109 	sbc.w	r1, r1, r9
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	018b      	lsls	r3, r1, #6
 8005ca0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ca4:	0182      	lsls	r2, r0, #6
 8005ca6:	1a12      	subs	r2, r2, r0
 8005ca8:	eb63 0301 	sbc.w	r3, r3, r1
 8005cac:	f04f 0000 	mov.w	r0, #0
 8005cb0:	f04f 0100 	mov.w	r1, #0
 8005cb4:	00d9      	lsls	r1, r3, #3
 8005cb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cba:	00d0      	lsls	r0, r2, #3
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	eb12 0208 	adds.w	r2, r2, r8
 8005cc4:	eb43 0309 	adc.w	r3, r3, r9
 8005cc8:	f04f 0000 	mov.w	r0, #0
 8005ccc:	f04f 0100 	mov.w	r1, #0
 8005cd0:	0299      	lsls	r1, r3, #10
 8005cd2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005cd6:	0290      	lsls	r0, r2, #10
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4619      	mov	r1, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	f7fa ffde 	bl	8000ca8 <__aeabi_uldivmod>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e04a      	b.n	8005d8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cf6:	4b31      	ldr	r3, [pc, #196]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	099b      	lsrs	r3, r3, #6
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f04f 0300 	mov.w	r3, #0
 8005d02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d06:	f04f 0100 	mov.w	r1, #0
 8005d0a:	ea02 0400 	and.w	r4, r2, r0
 8005d0e:	ea03 0501 	and.w	r5, r3, r1
 8005d12:	4620      	mov	r0, r4
 8005d14:	4629      	mov	r1, r5
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	014b      	lsls	r3, r1, #5
 8005d20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d24:	0142      	lsls	r2, r0, #5
 8005d26:	4610      	mov	r0, r2
 8005d28:	4619      	mov	r1, r3
 8005d2a:	1b00      	subs	r0, r0, r4
 8005d2c:	eb61 0105 	sbc.w	r1, r1, r5
 8005d30:	f04f 0200 	mov.w	r2, #0
 8005d34:	f04f 0300 	mov.w	r3, #0
 8005d38:	018b      	lsls	r3, r1, #6
 8005d3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d3e:	0182      	lsls	r2, r0, #6
 8005d40:	1a12      	subs	r2, r2, r0
 8005d42:	eb63 0301 	sbc.w	r3, r3, r1
 8005d46:	f04f 0000 	mov.w	r0, #0
 8005d4a:	f04f 0100 	mov.w	r1, #0
 8005d4e:	00d9      	lsls	r1, r3, #3
 8005d50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d54:	00d0      	lsls	r0, r2, #3
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	1912      	adds	r2, r2, r4
 8005d5c:	eb45 0303 	adc.w	r3, r5, r3
 8005d60:	f04f 0000 	mov.w	r0, #0
 8005d64:	f04f 0100 	mov.w	r1, #0
 8005d68:	0299      	lsls	r1, r3, #10
 8005d6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d6e:	0290      	lsls	r0, r2, #10
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4610      	mov	r0, r2
 8005d76:	4619      	mov	r1, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	f7fa ff92 	bl	8000ca8 <__aeabi_uldivmod>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4613      	mov	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	0c1b      	lsrs	r3, r3, #16
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	3301      	adds	r3, #1
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da4:	60bb      	str	r3, [r7, #8]
      break;
 8005da6:	e002      	b.n	8005dae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005daa:	60bb      	str	r3, [r7, #8]
      break;
 8005dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dae:	68bb      	ldr	r3, [r7, #8]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005dba:	bf00      	nop
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	00f42400 	.word	0x00f42400

08005dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dc8:	4b03      	ldr	r3, [pc, #12]	; (8005dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005dca:	681b      	ldr	r3, [r3, #0]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	20000000 	.word	0x20000000

08005ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005de0:	f7ff fff0 	bl	8005dc4 <HAL_RCC_GetHCLKFreq>
 8005de4:	4602      	mov	r2, r0
 8005de6:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	0a9b      	lsrs	r3, r3, #10
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	4903      	ldr	r1, [pc, #12]	; (8005e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005df2:	5ccb      	ldrb	r3, [r1, r3]
 8005df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	08010fa8 	.word	0x08010fa8

08005e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e08:	f7ff ffdc 	bl	8005dc4 <HAL_RCC_GetHCLKFreq>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	0b5b      	lsrs	r3, r3, #13
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	4903      	ldr	r1, [pc, #12]	; (8005e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e1a:	5ccb      	ldrb	r3, [r1, r3]
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	40023800 	.word	0x40023800
 8005e28:	08010fa8 	.word	0x08010fa8

08005e2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	220f      	movs	r2, #15
 8005e3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e3c:	4b12      	ldr	r3, [pc, #72]	; (8005e88 <HAL_RCC_GetClockConfig+0x5c>)
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 0203 	and.w	r2, r3, #3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e48:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <HAL_RCC_GetClockConfig+0x5c>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <HAL_RCC_GetClockConfig+0x5c>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e60:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <HAL_RCC_GetClockConfig+0x5c>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	08db      	lsrs	r3, r3, #3
 8005e66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e6e:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <HAL_RCC_GetClockConfig+0x60>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 020f 	and.w	r2, r3, #15
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	601a      	str	r2, [r3, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	40023c00 	.word	0x40023c00

08005e90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10b      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d075      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ec4:	4bad      	ldr	r3, [pc, #692]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005eca:	f7fd fc49 	bl	8003760 <HAL_GetTick>
 8005ece:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ed0:	e008      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005ed2:	f7fd fc45 	bl	8003760 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d901      	bls.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e18b      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ee4:	4ba6      	ldr	r3, [pc, #664]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1f0      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d009      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	019a      	lsls	r2, r3, #6
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	071b      	lsls	r3, r3, #28
 8005f08:	499d      	ldr	r1, [pc, #628]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d01f      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f1c:	4b98      	ldr	r3, [pc, #608]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f22:	0f1b      	lsrs	r3, r3, #28
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	019a      	lsls	r2, r3, #6
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	061b      	lsls	r3, r3, #24
 8005f36:	431a      	orrs	r2, r3
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	071b      	lsls	r3, r3, #28
 8005f3c:	4990      	ldr	r1, [pc, #576]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f44:	4b8e      	ldr	r3, [pc, #568]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f4a:	f023 021f 	bic.w	r2, r3, #31
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	498a      	ldr	r1, [pc, #552]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00d      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	019a      	lsls	r2, r3, #6
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	061b      	lsls	r3, r3, #24
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	071b      	lsls	r3, r3, #28
 8005f7c:	4980      	ldr	r1, [pc, #512]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005f84:	4b7d      	ldr	r3, [pc, #500]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005f86:	2201      	movs	r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f8a:	f7fd fbe9 	bl	8003760 <HAL_GetTick>
 8005f8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005f90:	e008      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f92:	f7fd fbe5 	bl	8003760 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d901      	bls.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e12b      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fa4:	4b76      	ldr	r3, [pc, #472]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0f0      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d105      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d079      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005fc8:	4b6e      	ldr	r3, [pc, #440]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fce:	f7fd fbc7 	bl	8003760 <HAL_GetTick>
 8005fd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005fd6:	f7fd fbc3 	bl	8003760 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e109      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005fe8:	4b65      	ldr	r3, [pc, #404]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ff4:	d0ef      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d020      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006002:	4b5f      	ldr	r3, [pc, #380]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006008:	0f1b      	lsrs	r3, r3, #28
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	019a      	lsls	r2, r3, #6
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	061b      	lsls	r3, r3, #24
 800601c:	431a      	orrs	r2, r3
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	071b      	lsls	r3, r3, #28
 8006022:	4957      	ldr	r1, [pc, #348]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800602a:	4b55      	ldr	r3, [pc, #340]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800602c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006030:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	3b01      	subs	r3, #1
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	4950      	ldr	r1, [pc, #320]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800603e:	4313      	orrs	r3, r2
 8006040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b00      	cmp	r3, #0
 800604e:	d01e      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006050:	4b4b      	ldr	r3, [pc, #300]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006056:	0e1b      	lsrs	r3, r3, #24
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	019a      	lsls	r2, r3, #6
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	061b      	lsls	r3, r3, #24
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	071b      	lsls	r3, r3, #28
 8006070:	4943      	ldr	r1, [pc, #268]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006078:	4b41      	ldr	r3, [pc, #260]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800607a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800607e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	493e      	ldr	r1, [pc, #248]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800608e:	4b3d      	ldr	r3, [pc, #244]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006090:	2201      	movs	r2, #1
 8006092:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006094:	f7fd fb64 	bl	8003760 <HAL_GetTick>
 8006098:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800609a:	e008      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800609c:	f7fd fb60 	bl	8003760 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d901      	bls.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e0a6      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80060ae:	4b34      	ldr	r3, [pc, #208]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ba:	d1ef      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 808d 	beq.w	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	4b2c      	ldr	r3, [pc, #176]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	4a2b      	ldr	r2, [pc, #172]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d8:	6413      	str	r3, [r2, #64]	; 0x40
 80060da:	4b29      	ldr	r3, [pc, #164]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060e6:	4b28      	ldr	r3, [pc, #160]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a27      	ldr	r2, [pc, #156]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80060ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060f2:	f7fd fb35 	bl	8003760 <HAL_GetTick>
 80060f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060f8:	e008      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060fa:	f7fd fb31 	bl	8003760 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e077      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800610c:	4b1e      	ldr	r3, [pc, #120]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0f0      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006118:	4b19      	ldr	r3, [pc, #100]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800611a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006120:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d039      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	429a      	cmp	r2, r3
 8006134:	d032      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006136:	4b12      	ldr	r3, [pc, #72]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800613a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800613e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006140:	4b12      	ldr	r3, [pc, #72]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006142:	2201      	movs	r2, #1
 8006144:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006146:	4b11      	ldr	r3, [pc, #68]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800614c:	4a0c      	ldr	r2, [pc, #48]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b01      	cmp	r3, #1
 800615c:	d11e      	bne.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800615e:	f7fd faff 	bl	8003760 <HAL_GetTick>
 8006162:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006164:	e014      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006166:	f7fd fafb 	bl	8003760 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	f241 3288 	movw	r2, #5000	; 0x1388
 8006174:	4293      	cmp	r3, r2
 8006176:	d90b      	bls.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e03f      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800617c:	42470068 	.word	0x42470068
 8006180:	40023800 	.word	0x40023800
 8006184:	42470070 	.word	0x42470070
 8006188:	40007000 	.word	0x40007000
 800618c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006190:	4b1c      	ldr	r3, [pc, #112]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0e4      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a8:	d10d      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80061aa:	4b16      	ldr	r3, [pc, #88]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061be:	4911      	ldr	r1, [pc, #68]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061c0:	4313      	orrs	r3, r2
 80061c2:	608b      	str	r3, [r1, #8]
 80061c4:	e005      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80061c6:	4b0f      	ldr	r3, [pc, #60]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	4a0e      	ldr	r2, [pc, #56]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061cc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80061d0:	6093      	str	r3, [r2, #8]
 80061d2:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061de:	4909      	ldr	r1, [pc, #36]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d004      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80061f6:	4b04      	ldr	r3, [pc, #16]	; (8006208 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061f8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40023800 	.word	0x40023800
 8006208:	424711e0 	.word	0x424711e0

0800620c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e083      	b.n	8006326 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	7f5b      	ldrb	r3, [r3, #29]
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fb fd5e 	bl	8001cf0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	22ca      	movs	r2, #202	; 0xca
 8006240:	625a      	str	r2, [r3, #36]	; 0x24
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2253      	movs	r2, #83	; 0x53
 8006248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fb84 	bl	8006958 <RTC_EnterInitMode>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d008      	beq.n	8006268 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	22ff      	movs	r2, #255	; 0xff
 800625c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2204      	movs	r2, #4
 8006262:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e05e      	b.n	8006326 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6812      	ldr	r2, [r2, #0]
 8006272:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800627a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6899      	ldr	r1, [r3, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	431a      	orrs	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	68d2      	ldr	r2, [r2, #12]
 80062a2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6919      	ldr	r1, [r3, #16]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	041a      	lsls	r2, r3, #16
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062c6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10e      	bne.n	80062f4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fb16 	bl	8006908 <HAL_RTC_WaitForSynchro>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d008      	beq.n	80062f4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	22ff      	movs	r2, #255	; 0xff
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2204      	movs	r2, #4
 80062ee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e018      	b.n	8006326 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006302:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	22ff      	movs	r2, #255	; 0xff
 800631c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006324:	2300      	movs	r3, #0
  }
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800632e:	b590      	push	{r4, r7, lr}
 8006330:	b087      	sub	sp, #28
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	7f1b      	ldrb	r3, [r3, #28]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_RTC_SetTime+0x1c>
 8006346:	2302      	movs	r3, #2
 8006348:	e0aa      	b.n	80064a0 <HAL_RTC_SetTime+0x172>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2202      	movs	r2, #2
 8006354:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d126      	bne.n	80063aa <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	d102      	bne.n	8006370 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2200      	movs	r2, #0
 800636e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f000 fb1b 	bl	80069b0 <RTC_ByteToBcd2>
 800637a:	4603      	mov	r3, r0
 800637c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	785b      	ldrb	r3, [r3, #1]
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fb14 	bl	80069b0 <RTC_ByteToBcd2>
 8006388:	4603      	mov	r3, r0
 800638a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800638c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	789b      	ldrb	r3, [r3, #2]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fb0c 	bl	80069b0 <RTC_ByteToBcd2>
 8006398:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800639a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	78db      	ldrb	r3, [r3, #3]
 80063a2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80063a4:	4313      	orrs	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	e018      	b.n	80063dc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d102      	bne.n	80063be <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	2200      	movs	r2, #0
 80063bc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80063ca:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80063d0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	78db      	ldrb	r3, [r3, #3]
 80063d6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	22ca      	movs	r2, #202	; 0xca
 80063e2:	625a      	str	r2, [r3, #36]	; 0x24
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2253      	movs	r2, #83	; 0x53
 80063ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 fab3 	bl	8006958 <RTC_EnterInitMode>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00b      	beq.n	8006410 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	22ff      	movs	r2, #255	; 0xff
 80063fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2204      	movs	r2, #4
 8006404:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e047      	b.n	80064a0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800641a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800641e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800642e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6899      	ldr	r1, [r3, #8]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	431a      	orrs	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006456:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	d111      	bne.n	800648a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 fa4e 	bl	8006908 <HAL_RTC_WaitForSynchro>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00b      	beq.n	800648a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	22ff      	movs	r2, #255	; 0xff
 8006478:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2204      	movs	r2, #4
 800647e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e00a      	b.n	80064a0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	22ff      	movs	r2, #255	; 0xff
 8006490:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800649e:	2300      	movs	r3, #0
  }
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd90      	pop	{r4, r7, pc}

080064a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064a8:	b590      	push	{r4, r7, lr}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	7f1b      	ldrb	r3, [r3, #28]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_RTC_SetDate+0x1c>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e094      	b.n	80065ee <HAL_RTC_SetDate+0x146>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2201      	movs	r2, #1
 80064c8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2202      	movs	r2, #2
 80064ce:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10e      	bne.n	80064f4 <HAL_RTC_SetDate+0x4c>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	785b      	ldrb	r3, [r3, #1]
 80064da:	f003 0310 	and.w	r3, r3, #16
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d008      	beq.n	80064f4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	785b      	ldrb	r3, [r3, #1]
 80064e6:	f023 0310 	bic.w	r3, r3, #16
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	330a      	adds	r3, #10
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d11c      	bne.n	8006534 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	78db      	ldrb	r3, [r3, #3]
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fa56 	bl	80069b0 <RTC_ByteToBcd2>
 8006504:	4603      	mov	r3, r0
 8006506:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fa4f 	bl	80069b0 <RTC_ByteToBcd2>
 8006512:	4603      	mov	r3, r0
 8006514:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006516:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	789b      	ldrb	r3, [r3, #2]
 800651c:	4618      	mov	r0, r3
 800651e:	f000 fa47 	bl	80069b0 <RTC_ByteToBcd2>
 8006522:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006524:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800652e:	4313      	orrs	r3, r2
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	e00e      	b.n	8006552 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	78db      	ldrb	r3, [r3, #3]
 8006538:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006540:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006546:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	22ca      	movs	r2, #202	; 0xca
 8006558:	625a      	str	r2, [r3, #36]	; 0x24
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2253      	movs	r2, #83	; 0x53
 8006560:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	f000 f9f8 	bl	8006958 <RTC_EnterInitMode>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	22ff      	movs	r2, #255	; 0xff
 8006574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2204      	movs	r2, #4
 800657a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e033      	b.n	80065ee <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006590:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006594:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065a4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d111      	bne.n	80065d8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f9a7 	bl	8006908 <HAL_RTC_WaitForSynchro>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00b      	beq.n	80065d8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	22ff      	movs	r2, #255	; 0xff
 80065c6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2204      	movs	r2, #4
 80065cc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e00a      	b.n	80065ee <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	22ff      	movs	r2, #255	; 0xff
 80065de:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2201      	movs	r2, #1
 80065e4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80065ec:	2300      	movs	r3, #0
  }
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd90      	pop	{r4, r7, pc}
	...

080065f8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80065f8:	b590      	push	{r4, r7, lr}
 80065fa:	b089      	sub	sp, #36	; 0x24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	61fb      	str	r3, [r7, #28]
 8006608:	2300      	movs	r3, #0
 800660a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800660c:	4b93      	ldr	r3, [pc, #588]	; (800685c <HAL_RTC_SetAlarm_IT+0x264>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a93      	ldr	r2, [pc, #588]	; (8006860 <HAL_RTC_SetAlarm_IT+0x268>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	0adb      	lsrs	r3, r3, #11
 8006618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800661c:	fb02 f303 	mul.w	r3, r2, r3
 8006620:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	7f1b      	ldrb	r3, [r3, #28]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_RTC_SetAlarm_IT+0x36>
 800662a:	2302      	movs	r3, #2
 800662c:	e111      	b.n	8006852 <HAL_RTC_SetAlarm_IT+0x25a>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2202      	movs	r2, #2
 8006638:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d137      	bne.n	80066b0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d102      	bne.n	8006654 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2200      	movs	r2, #0
 8006652:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f000 f9a9 	bl	80069b0 <RTC_ByteToBcd2>
 800665e:	4603      	mov	r3, r0
 8006660:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	785b      	ldrb	r3, [r3, #1]
 8006666:	4618      	mov	r0, r3
 8006668:	f000 f9a2 	bl	80069b0 <RTC_ByteToBcd2>
 800666c:	4603      	mov	r3, r0
 800666e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006670:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	789b      	ldrb	r3, [r3, #2]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 f99a 	bl	80069b0 <RTC_ByteToBcd2>
 800667c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800667e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	78db      	ldrb	r3, [r3, #3]
 8006686:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006688:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006692:	4618      	mov	r0, r3
 8006694:	f000 f98c 	bl	80069b0 <RTC_ByteToBcd2>
 8006698:	4603      	mov	r3, r0
 800669a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800669c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80066a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80066aa:	4313      	orrs	r3, r2
 80066ac:	61fb      	str	r3, [r7, #28]
 80066ae:	e023      	b.n	80066f8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2200      	movs	r2, #0
 80066c2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80066d0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80066d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	78db      	ldrb	r3, [r3, #3]
 80066dc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80066de:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066e6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80066e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80066ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80066f4:	4313      	orrs	r3, r2
 80066f6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	4313      	orrs	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	22ca      	movs	r2, #202	; 0xca
 800670a:	625a      	str	r2, [r3, #36]	; 0x24
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2253      	movs	r2, #83	; 0x53
 8006712:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800671c:	d141      	bne.n	80067a2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800672c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	b2da      	uxtb	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800673e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	1e5a      	subs	r2, r3, #1
 8006744:	617a      	str	r2, [r7, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	22ff      	movs	r2, #255	; 0xff
 8006750:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2203      	movs	r2, #3
 8006756:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e077      	b.n	8006852 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0e7      	beq.n	8006740 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800678e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689a      	ldr	r2, [r3, #8]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800679e:	609a      	str	r2, [r3, #8]
 80067a0:	e040      	b.n	8006824 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80067b0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f462 7220 	orn	r2, r2, #640	; 0x280
 80067c2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	1e5a      	subs	r2, r3, #1
 80067c8:	617a      	str	r2, [r7, #20]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10b      	bne.n	80067e6 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	22ff      	movs	r2, #255	; 0xff
 80067d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2203      	movs	r2, #3
 80067da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80067e2:	2303      	movs	r3, #3
 80067e4:	e035      	b.n	8006852 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0e7      	beq.n	80067c4 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69fa      	ldr	r2, [r7, #28]
 80067fa:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006812:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006822:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006824:	4b0f      	ldr	r3, [pc, #60]	; (8006864 <HAL_RTC_SetAlarm_IT+0x26c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a0e      	ldr	r2, [pc, #56]	; (8006864 <HAL_RTC_SetAlarm_IT+0x26c>)
 800682a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800682e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8006830:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <HAL_RTC_SetAlarm_IT+0x26c>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	4a0b      	ldr	r2, [pc, #44]	; (8006864 <HAL_RTC_SetAlarm_IT+0x26c>)
 8006836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	22ff      	movs	r2, #255	; 0xff
 8006842:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2201      	movs	r2, #1
 8006848:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3724      	adds	r7, #36	; 0x24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd90      	pop	{r4, r7, pc}
 800685a:	bf00      	nop
 800685c:	20000000 	.word	0x20000000
 8006860:	10624dd3 	.word	0x10624dd3
 8006864:	40013c00 	.word	0x40013c00

08006868 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d012      	beq.n	80068a4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f831 	bl	80068f4 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	b2da      	uxtb	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80068a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d012      	beq.n	80068d8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00b      	beq.n	80068d8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 f9ab 	bl	8006c1c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80068d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80068d8:	4b05      	ldr	r3, [pc, #20]	; (80068f0 <HAL_RTC_AlarmIRQHandler+0x88>)
 80068da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80068de:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	775a      	strb	r2, [r3, #29]
}
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40013c00 	.word	0x40013c00

080068f4 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006922:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006924:	f7fc ff1c 	bl	8003760 <HAL_GetTick>
 8006928:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800692a:	e009      	b.n	8006940 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800692c:	f7fc ff18 	bl	8003760 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800693a:	d901      	bls.n	8006940 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e007      	b.n	8006950 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0ee      	beq.n	800692c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b00      	cmp	r3, #0
 8006970:	d119      	bne.n	80069a6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f04f 32ff 	mov.w	r2, #4294967295
 800697a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800697c:	f7fc fef0 	bl	8003760 <HAL_GetTick>
 8006980:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006982:	e009      	b.n	8006998 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006984:	f7fc feec 	bl	8003760 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006992:	d901      	bls.n	8006998 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e007      	b.n	80069a8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d0ee      	beq.n	8006984 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80069be:	e005      	b.n	80069cc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	3b0a      	subs	r3, #10
 80069ca:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	2b09      	cmp	r3, #9
 80069d0:	d8f6      	bhi.n	80069c0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	4313      	orrs	r3, r2
 80069de:	b2db      	uxtb	r3, r3
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	7f1b      	ldrb	r3, [r3, #28]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e0a6      	b.n	8006b52 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	22ca      	movs	r2, #202	; 0xca
 8006a16:	625a      	str	r2, [r3, #36]	; 0x24
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2253      	movs	r2, #83	; 0x53
 8006a1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d022      	beq.n	8006a74 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8006a2e:	4b4c      	ldr	r3, [pc, #304]	; (8006b60 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a4c      	ldr	r2, [pc, #304]	; (8006b64 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8006a34:	fba2 2303 	umull	r2, r3, r2, r3
 8006a38:	0adb      	lsrs	r3, r3, #11
 8006a3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	1e5a      	subs	r2, r3, #1
 8006a48:	617a      	str	r2, [r7, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10b      	bne.n	8006a66 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	22ff      	movs	r2, #255	; 0xff
 8006a54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2203      	movs	r2, #3
 8006a5a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e075      	b.n	8006b52 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e7      	bne.n	8006a44 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a82:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8006a84:	4b36      	ldr	r3, [pc, #216]	; (8006b60 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a36      	ldr	r2, [pc, #216]	; (8006b64 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8006a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8e:	0adb      	lsrs	r3, r3, #11
 8006a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a94:	fb02 f303 	mul.w	r3, r2, r3
 8006a98:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	1e5a      	subs	r2, r3, #1
 8006a9e:	617a      	str	r2, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10b      	bne.n	8006abc <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	22ff      	movs	r2, #255	; 0xff
 8006aaa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2203      	movs	r2, #3
 8006ab0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e04a      	b.n	8006b52 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d0e7      	beq.n	8006a9a <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0207 	bic.w	r2, r2, #7
 8006ae0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6899      	ldr	r1, [r3, #8]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	430a      	orrs	r2, r1
 8006af0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006af2:	4b1d      	ldr	r3, [pc, #116]	; (8006b68 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1c      	ldr	r2, [pc, #112]	; (8006b68 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006afc:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8006afe:	4b1a      	ldr	r3, [pc, #104]	; (8006b68 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	4a19      	ldr	r2, [pc, #100]	; (8006b68 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8006b04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b08:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006b1a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b2a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b3a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	22ff      	movs	r2, #255	; 0xff
 8006b42:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2201      	movs	r2, #1
 8006b48:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20000000 	.word	0x20000000
 8006b64:	10624dd3 	.word	0x10624dd3
 8006b68:	40013c00 	.word	0x40013c00

08006b6c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7f1b      	ldrb	r3, [r3, #28]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8006b80:	2302      	movs	r3, #2
 8006b82:	e047      	b.n	8006c14 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	22ca      	movs	r2, #202	; 0xca
 8006b96:	625a      	str	r2, [r3, #36]	; 0x24
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2253      	movs	r2, #83	; 0x53
 8006b9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bae:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bbe:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bc0:	f7fc fdce 	bl	8003760 <HAL_GetTick>
 8006bc4:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006bc6:	e013      	b.n	8006bf0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006bc8:	f7fc fdca 	bl	8003760 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bd6:	d90b      	bls.n	8006bf0 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	22ff      	movs	r2, #255	; 0xff
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2203      	movs	r2, #3
 8006be4:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e011      	b.n	8006c14 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0e4      	beq.n	8006bc8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	22ff      	movs	r2, #255	; 0xff
 8006c04:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e07b      	b.n	8006d3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d108      	bne.n	8006c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c52:	d009      	beq.n	8006c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	61da      	str	r2, [r3, #28]
 8006c5a:	e005      	b.n	8006c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fb f908 	bl	8001e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cba:	431a      	orrs	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cec:	ea42 0103 	orr.w	r1, r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	0c1b      	lsrs	r3, r3, #16
 8006d06:	f003 0104 	and.w	r1, r3, #4
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	f003 0210 	and.w	r2, r3, #16
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69da      	ldr	r2, [r3, #28]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b088      	sub	sp, #32
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	603b      	str	r3, [r7, #0]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d101      	bne.n	8006d64 <HAL_SPI_Transmit+0x22>
 8006d60:	2302      	movs	r3, #2
 8006d62:	e126      	b.n	8006fb2 <HAL_SPI_Transmit+0x270>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d6c:	f7fc fcf8 	bl	8003760 <HAL_GetTick>
 8006d70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d72:	88fb      	ldrh	r3, [r7, #6]
 8006d74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d002      	beq.n	8006d88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d82:	2302      	movs	r3, #2
 8006d84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d86:	e10b      	b.n	8006fa0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <HAL_SPI_Transmit+0x52>
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d102      	bne.n	8006d9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d98:	e102      	b.n	8006fa0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2203      	movs	r2, #3
 8006d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	88fa      	ldrh	r2, [r7, #6]
 8006db2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	88fa      	ldrh	r2, [r7, #6]
 8006db8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de0:	d10f      	bne.n	8006e02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006df0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0c:	2b40      	cmp	r3, #64	; 0x40
 8006e0e:	d007      	beq.n	8006e20 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e28:	d14b      	bne.n	8006ec2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_SPI_Transmit+0xf6>
 8006e32:	8afb      	ldrh	r3, [r7, #22]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d13e      	bne.n	8006eb6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3c:	881a      	ldrh	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	1c9a      	adds	r2, r3, #2
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e5c:	e02b      	b.n	8006eb6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d112      	bne.n	8006e92 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	881a      	ldrh	r2, [r3, #0]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	1c9a      	adds	r2, r3, #2
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e90:	e011      	b.n	8006eb6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e92:	f7fc fc65 	bl	8003760 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d803      	bhi.n	8006eaa <HAL_SPI_Transmit+0x168>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea8:	d102      	bne.n	8006eb0 <HAL_SPI_Transmit+0x16e>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d102      	bne.n	8006eb6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006eb4:	e074      	b.n	8006fa0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1ce      	bne.n	8006e5e <HAL_SPI_Transmit+0x11c>
 8006ec0:	e04c      	b.n	8006f5c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <HAL_SPI_Transmit+0x18e>
 8006eca:	8afb      	ldrh	r3, [r7, #22]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d140      	bne.n	8006f52 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	7812      	ldrb	r2, [r2, #0]
 8006edc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ef6:	e02c      	b.n	8006f52 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d113      	bne.n	8006f2e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	7812      	ldrb	r2, [r2, #0]
 8006f12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	3b01      	subs	r3, #1
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f2c:	e011      	b.n	8006f52 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f2e:	f7fc fc17 	bl	8003760 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d803      	bhi.n	8006f46 <HAL_SPI_Transmit+0x204>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f44:	d102      	bne.n	8006f4c <HAL_SPI_Transmit+0x20a>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d102      	bne.n	8006f52 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f50:	e026      	b.n	8006fa0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1cd      	bne.n	8006ef8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	6839      	ldr	r1, [r7, #0]
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 fbcb 	bl	80076fc <SPI_EndRxTxTransaction>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	613b      	str	r3, [r7, #16]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	613b      	str	r3, [r7, #16]
 8006f8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	77fb      	strb	r3, [r7, #31]
 8006f9c:	e000      	b.n	8006fa0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006f9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006fb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3720      	adds	r7, #32
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b088      	sub	sp, #32
 8006fbe:	af02      	add	r7, sp, #8
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	603b      	str	r3, [r7, #0]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fd6:	d112      	bne.n	8006ffe <HAL_SPI_Receive+0x44>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10e      	bne.n	8006ffe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 f8f1 	bl	80071dc <HAL_SPI_TransmitReceive>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	e0ea      	b.n	80071d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007004:	2b01      	cmp	r3, #1
 8007006:	d101      	bne.n	800700c <HAL_SPI_Receive+0x52>
 8007008:	2302      	movs	r3, #2
 800700a:	e0e3      	b.n	80071d4 <HAL_SPI_Receive+0x21a>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007014:	f7fc fba4 	bl	8003760 <HAL_GetTick>
 8007018:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b01      	cmp	r3, #1
 8007024:	d002      	beq.n	800702c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007026:	2302      	movs	r3, #2
 8007028:	75fb      	strb	r3, [r7, #23]
    goto error;
 800702a:	e0ca      	b.n	80071c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <HAL_SPI_Receive+0x7e>
 8007032:	88fb      	ldrh	r3, [r7, #6]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d102      	bne.n	800703e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800703c:	e0c1      	b.n	80071c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2204      	movs	r2, #4
 8007042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	88fa      	ldrh	r2, [r7, #6]
 8007056:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	88fa      	ldrh	r2, [r7, #6]
 800705c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007084:	d10f      	bne.n	80070a6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007094:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b40      	cmp	r3, #64	; 0x40
 80070b2:	d007      	beq.n	80070c4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d162      	bne.n	8007192 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070cc:	e02e      	b.n	800712c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d115      	bne.n	8007108 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f103 020c 	add.w	r2, r3, #12
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e8:	7812      	ldrb	r2, [r2, #0]
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	3b01      	subs	r3, #1
 8007100:	b29a      	uxth	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007106:	e011      	b.n	800712c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007108:	f7fc fb2a 	bl	8003760 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d803      	bhi.n	8007120 <HAL_SPI_Receive+0x166>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711e:	d102      	bne.n	8007126 <HAL_SPI_Receive+0x16c>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d102      	bne.n	800712c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	75fb      	strb	r3, [r7, #23]
          goto error;
 800712a:	e04a      	b.n	80071c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007130:	b29b      	uxth	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1cb      	bne.n	80070ce <HAL_SPI_Receive+0x114>
 8007136:	e031      	b.n	800719c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b01      	cmp	r3, #1
 8007144:	d113      	bne.n	800716e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68da      	ldr	r2, [r3, #12]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	b292      	uxth	r2, r2
 8007152:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007158:	1c9a      	adds	r2, r3, #2
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007162:	b29b      	uxth	r3, r3
 8007164:	3b01      	subs	r3, #1
 8007166:	b29a      	uxth	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800716c:	e011      	b.n	8007192 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800716e:	f7fc faf7 	bl	8003760 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d803      	bhi.n	8007186 <HAL_SPI_Receive+0x1cc>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007184:	d102      	bne.n	800718c <HAL_SPI_Receive+0x1d2>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d102      	bne.n	8007192 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007190:	e017      	b.n	80071c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007196:	b29b      	uxth	r3, r3
 8007198:	2b00      	cmp	r3, #0
 800719a:	d1cd      	bne.n	8007138 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 fa45 	bl	8007630 <SPI_EndRxTransaction>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2220      	movs	r2, #32
 80071b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	75fb      	strb	r3, [r7, #23]
 80071be:	e000      	b.n	80071c2 <HAL_SPI_Receive+0x208>
  }

error :
 80071c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b08c      	sub	sp, #48	; 0x30
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071ea:	2301      	movs	r3, #1
 80071ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <HAL_SPI_TransmitReceive+0x26>
 80071fe:	2302      	movs	r3, #2
 8007200:	e18a      	b.n	8007518 <HAL_SPI_TransmitReceive+0x33c>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800720a:	f7fc faa9 	bl	8003760 <HAL_GetTick>
 800720e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007220:	887b      	ldrh	r3, [r7, #2]
 8007222:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007228:	2b01      	cmp	r3, #1
 800722a:	d00f      	beq.n	800724c <HAL_SPI_TransmitReceive+0x70>
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007232:	d107      	bne.n	8007244 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d103      	bne.n	8007244 <HAL_SPI_TransmitReceive+0x68>
 800723c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007240:	2b04      	cmp	r3, #4
 8007242:	d003      	beq.n	800724c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007244:	2302      	movs	r3, #2
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800724a:	e15b      	b.n	8007504 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <HAL_SPI_TransmitReceive+0x82>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d002      	beq.n	800725e <HAL_SPI_TransmitReceive+0x82>
 8007258:	887b      	ldrh	r3, [r7, #2]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007264:	e14e      	b.n	8007504 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b04      	cmp	r3, #4
 8007270:	d003      	beq.n	800727a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2205      	movs	r2, #5
 8007276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	887a      	ldrh	r2, [r7, #2]
 800728a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	887a      	ldrh	r2, [r7, #2]
 8007290:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	887a      	ldrh	r2, [r7, #2]
 800729c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	887a      	ldrh	r2, [r7, #2]
 80072a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ba:	2b40      	cmp	r3, #64	; 0x40
 80072bc:	d007      	beq.n	80072ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072d6:	d178      	bne.n	80073ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <HAL_SPI_TransmitReceive+0x10a>
 80072e0:	8b7b      	ldrh	r3, [r7, #26]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d166      	bne.n	80073b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ea:	881a      	ldrh	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	1c9a      	adds	r2, r3, #2
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007300:	b29b      	uxth	r3, r3
 8007302:	3b01      	subs	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800730a:	e053      	b.n	80073b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b02      	cmp	r3, #2
 8007318:	d11b      	bne.n	8007352 <HAL_SPI_TransmitReceive+0x176>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800731e:	b29b      	uxth	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d016      	beq.n	8007352 <HAL_SPI_TransmitReceive+0x176>
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	2b01      	cmp	r3, #1
 8007328:	d113      	bne.n	8007352 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732e:	881a      	ldrh	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733a:	1c9a      	adds	r2, r3, #2
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007344:	b29b      	uxth	r3, r3
 8007346:	3b01      	subs	r3, #1
 8007348:	b29a      	uxth	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800734e:	2300      	movs	r3, #0
 8007350:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b01      	cmp	r3, #1
 800735e:	d119      	bne.n	8007394 <HAL_SPI_TransmitReceive+0x1b8>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d014      	beq.n	8007394 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	b292      	uxth	r2, r2
 8007376:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	1c9a      	adds	r2, r3, #2
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007386:	b29b      	uxth	r3, r3
 8007388:	3b01      	subs	r3, #1
 800738a:	b29a      	uxth	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007390:	2301      	movs	r3, #1
 8007392:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007394:	f7fc f9e4 	bl	8003760 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d807      	bhi.n	80073b4 <HAL_SPI_TransmitReceive+0x1d8>
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073aa:	d003      	beq.n	80073b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073b2:	e0a7      	b.n	8007504 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1a6      	bne.n	800730c <HAL_SPI_TransmitReceive+0x130>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1a1      	bne.n	800730c <HAL_SPI_TransmitReceive+0x130>
 80073c8:	e07c      	b.n	80074c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <HAL_SPI_TransmitReceive+0x1fc>
 80073d2:	8b7b      	ldrh	r3, [r7, #26]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d16b      	bne.n	80074b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	330c      	adds	r3, #12
 80073e2:	7812      	ldrb	r2, [r2, #0]
 80073e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	3b01      	subs	r3, #1
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073fe:	e057      	b.n	80074b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b02      	cmp	r3, #2
 800740c:	d11c      	bne.n	8007448 <HAL_SPI_TransmitReceive+0x26c>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007412:	b29b      	uxth	r3, r3
 8007414:	2b00      	cmp	r3, #0
 8007416:	d017      	beq.n	8007448 <HAL_SPI_TransmitReceive+0x26c>
 8007418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741a:	2b01      	cmp	r3, #1
 800741c:	d114      	bne.n	8007448 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	330c      	adds	r3, #12
 8007428:	7812      	ldrb	r2, [r2, #0]
 800742a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800743a:	b29b      	uxth	r3, r3
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b01      	cmp	r3, #1
 8007454:	d119      	bne.n	800748a <HAL_SPI_TransmitReceive+0x2ae>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d014      	beq.n	800748a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	b2d2      	uxtb	r2, r2
 800746c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800747c:	b29b      	uxth	r3, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007486:	2301      	movs	r3, #1
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800748a:	f7fc f969 	bl	8003760 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007496:	429a      	cmp	r2, r3
 8007498:	d803      	bhi.n	80074a2 <HAL_SPI_TransmitReceive+0x2c6>
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a0:	d102      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x2cc>
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074ae:	e029      	b.n	8007504 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1a2      	bne.n	8007400 <HAL_SPI_TransmitReceive+0x224>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074be:	b29b      	uxth	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d19d      	bne.n	8007400 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 f917 	bl	80076fc <SPI_EndRxTxTransaction>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d006      	beq.n	80074e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2220      	movs	r2, #32
 80074de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80074e0:	e010      	b.n	8007504 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10b      	bne.n	8007502 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074ea:	2300      	movs	r3, #0
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	617b      	str	r3, [r7, #20]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	e000      	b.n	8007504 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007502:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007514:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007518:	4618      	mov	r0, r3
 800751a:	3730      	adds	r7, #48	; 0x30
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b088      	sub	sp, #32
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007530:	f7fc f916 	bl	8003760 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007538:	1a9b      	subs	r3, r3, r2
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	4413      	add	r3, r2
 800753e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007540:	f7fc f90e 	bl	8003760 <HAL_GetTick>
 8007544:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007546:	4b39      	ldr	r3, [pc, #228]	; (800762c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	015b      	lsls	r3, r3, #5
 800754c:	0d1b      	lsrs	r3, r3, #20
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	fb02 f303 	mul.w	r3, r2, r3
 8007554:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007556:	e054      	b.n	8007602 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800755e:	d050      	beq.n	8007602 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007560:	f7fc f8fe 	bl	8003760 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	69fa      	ldr	r2, [r7, #28]
 800756c:	429a      	cmp	r2, r3
 800756e:	d902      	bls.n	8007576 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d13d      	bne.n	80075f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007584:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800758e:	d111      	bne.n	80075b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007598:	d004      	beq.n	80075a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075a2:	d107      	bne.n	80075b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075bc:	d10f      	bne.n	80075de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e017      	b.n	8007622 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	3b01      	subs	r3, #1
 8007600:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689a      	ldr	r2, [r3, #8]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4013      	ands	r3, r2
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	429a      	cmp	r2, r3
 8007610:	bf0c      	ite	eq
 8007612:	2301      	moveq	r3, #1
 8007614:	2300      	movne	r3, #0
 8007616:	b2db      	uxtb	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	79fb      	ldrb	r3, [r7, #7]
 800761c:	429a      	cmp	r2, r3
 800761e:	d19b      	bne.n	8007558 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3720      	adds	r7, #32
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000000 	.word	0x20000000

08007630 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af02      	add	r7, sp, #8
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007644:	d111      	bne.n	800766a <SPI_EndRxTransaction+0x3a>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800764e:	d004      	beq.n	800765a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007658:	d107      	bne.n	800766a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007668:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007672:	d12a      	bne.n	80076ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800767c:	d012      	beq.n	80076a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2200      	movs	r2, #0
 8007686:	2180      	movs	r1, #128	; 0x80
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f7ff ff49 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d02d      	beq.n	80076f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007698:	f043 0220 	orr.w	r2, r3, #32
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e026      	b.n	80076f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2200      	movs	r2, #0
 80076ac:	2101      	movs	r1, #1
 80076ae:	68f8      	ldr	r0, [r7, #12]
 80076b0:	f7ff ff36 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01a      	beq.n	80076f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076be:	f043 0220 	orr.w	r2, r3, #32
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e013      	b.n	80076f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2200      	movs	r2, #0
 80076d2:	2101      	movs	r1, #1
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff ff23 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e4:	f043 0220 	orr.w	r2, r3, #32
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e000      	b.n	80076f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af02      	add	r7, sp, #8
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007708:	4b1b      	ldr	r3, [pc, #108]	; (8007778 <SPI_EndRxTxTransaction+0x7c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1b      	ldr	r2, [pc, #108]	; (800777c <SPI_EndRxTxTransaction+0x80>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	0d5b      	lsrs	r3, r3, #21
 8007714:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007718:	fb02 f303 	mul.w	r3, r2, r3
 800771c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007726:	d112      	bne.n	800774e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2200      	movs	r2, #0
 8007730:	2180      	movs	r1, #128	; 0x80
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff fef4 	bl	8007520 <SPI_WaitFlagStateUntilTimeout>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d016      	beq.n	800776c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007742:	f043 0220 	orr.w	r2, r3, #32
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e00f      	b.n	800776e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00a      	beq.n	800776a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	3b01      	subs	r3, #1
 8007758:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007764:	2b80      	cmp	r3, #128	; 0x80
 8007766:	d0f2      	beq.n	800774e <SPI_EndRxTxTransaction+0x52>
 8007768:	e000      	b.n	800776c <SPI_EndRxTxTransaction+0x70>
        break;
 800776a:	bf00      	nop
  }

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3718      	adds	r7, #24
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000000 	.word	0x20000000
 800777c:	165e9f81 	.word	0x165e9f81

08007780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e041      	b.n	8007816 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7fa fd76 	bl	8002298 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2202      	movs	r2, #2
 80077b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f000 fbb2 	bl	8007f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800782e:	b2db      	uxtb	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d001      	beq.n	8007838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e04e      	b.n	80078d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0201 	orr.w	r2, r2, #1
 800784e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a23      	ldr	r2, [pc, #140]	; (80078e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d022      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007862:	d01d      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a1f      	ldr	r2, [pc, #124]	; (80078e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d018      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a1e      	ldr	r2, [pc, #120]	; (80078ec <HAL_TIM_Base_Start_IT+0xcc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d013      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a1c      	ldr	r2, [pc, #112]	; (80078f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00e      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a1b      	ldr	r2, [pc, #108]	; (80078f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d009      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a19      	ldr	r2, [pc, #100]	; (80078f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <HAL_TIM_Base_Start_IT+0x80>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a18      	ldr	r2, [pc, #96]	; (80078fc <HAL_TIM_Base_Start_IT+0xdc>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d111      	bne.n	80078c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2b06      	cmp	r3, #6
 80078b0:	d010      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0201 	orr.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c2:	e007      	b.n	80078d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3714      	adds	r7, #20
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40010000 	.word	0x40010000
 80078e8:	40000400 	.word	0x40000400
 80078ec:	40000800 	.word	0x40000800
 80078f0:	40000c00 	.word	0x40000c00
 80078f4:	40010400 	.word	0x40010400
 80078f8:	40014000 	.word	0x40014000
 80078fc:	40001800 	.word	0x40001800

08007900 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e041      	b.n	8007996 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d106      	bne.n	800792c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f839 	bl	800799e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3304      	adds	r3, #4
 800793c:	4619      	mov	r1, r3
 800793e:	4610      	mov	r0, r2
 8007940:	f000 faf2 	bl	8007f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d122      	bne.n	8007a0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d11b      	bne.n	8007a0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f06f 0202 	mvn.w	r2, #2
 80079de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	f003 0303 	and.w	r3, r3, #3
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fa78 	bl	8007eea <HAL_TIM_IC_CaptureCallback>
 80079fa:	e005      	b.n	8007a08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fa6a 	bl	8007ed6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fa7b 	bl	8007efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	d122      	bne.n	8007a62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d11b      	bne.n	8007a62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f06f 0204 	mvn.w	r2, #4
 8007a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fa4e 	bl	8007eea <HAL_TIM_IC_CaptureCallback>
 8007a4e:	e005      	b.n	8007a5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fa40 	bl	8007ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 fa51 	bl	8007efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	f003 0308 	and.w	r3, r3, #8
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d122      	bne.n	8007ab6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	d11b      	bne.n	8007ab6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f06f 0208 	mvn.w	r2, #8
 8007a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	f003 0303 	and.w	r3, r3, #3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fa24 	bl	8007eea <HAL_TIM_IC_CaptureCallback>
 8007aa2:	e005      	b.n	8007ab0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fa16 	bl	8007ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa27 	bl	8007efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	f003 0310 	and.w	r3, r3, #16
 8007ac0:	2b10      	cmp	r3, #16
 8007ac2:	d122      	bne.n	8007b0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68db      	ldr	r3, [r3, #12]
 8007aca:	f003 0310 	and.w	r3, r3, #16
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d11b      	bne.n	8007b0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f06f 0210 	mvn.w	r2, #16
 8007ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2208      	movs	r2, #8
 8007ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d003      	beq.n	8007af8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f9fa 	bl	8007eea <HAL_TIM_IC_CaptureCallback>
 8007af6:	e005      	b.n	8007b04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f9ec 	bl	8007ed6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f9fd 	bl	8007efe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d10e      	bne.n	8007b36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d107      	bne.n	8007b36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f06f 0201 	mvn.w	r2, #1
 8007b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f7fa f839 	bl	8001ba8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b40:	2b80      	cmp	r3, #128	; 0x80
 8007b42:	d10e      	bne.n	8007b62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4e:	2b80      	cmp	r3, #128	; 0x80
 8007b50:	d107      	bne.n	8007b62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fd53 	bl	8008608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6c:	2b40      	cmp	r3, #64	; 0x40
 8007b6e:	d10e      	bne.n	8007b8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b40      	cmp	r3, #64	; 0x40
 8007b7c:	d107      	bne.n	8007b8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f9c2 	bl	8007f12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d10e      	bne.n	8007bba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	d107      	bne.n	8007bba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f06f 0220 	mvn.w	r2, #32
 8007bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fd1d 	bl	80085f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e0ae      	b.n	8007d40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b0c      	cmp	r3, #12
 8007bee:	f200 809f 	bhi.w	8007d30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007bf2:	a201      	add	r2, pc, #4	; (adr r2, 8007bf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf8:	08007c2d 	.word	0x08007c2d
 8007bfc:	08007d31 	.word	0x08007d31
 8007c00:	08007d31 	.word	0x08007d31
 8007c04:	08007d31 	.word	0x08007d31
 8007c08:	08007c6d 	.word	0x08007c6d
 8007c0c:	08007d31 	.word	0x08007d31
 8007c10:	08007d31 	.word	0x08007d31
 8007c14:	08007d31 	.word	0x08007d31
 8007c18:	08007caf 	.word	0x08007caf
 8007c1c:	08007d31 	.word	0x08007d31
 8007c20:	08007d31 	.word	0x08007d31
 8007c24:	08007d31 	.word	0x08007d31
 8007c28:	08007cef 	.word	0x08007cef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68b9      	ldr	r1, [r7, #8]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fa18 	bl	8008068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	699a      	ldr	r2, [r3, #24]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0208 	orr.w	r2, r2, #8
 8007c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699a      	ldr	r2, [r3, #24]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f022 0204 	bic.w	r2, r2, #4
 8007c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6999      	ldr	r1, [r3, #24]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	691a      	ldr	r2, [r3, #16]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	619a      	str	r2, [r3, #24]
      break;
 8007c6a:	e064      	b.n	8007d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fa68 	bl	8008148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	699a      	ldr	r2, [r3, #24]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699a      	ldr	r2, [r3, #24]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6999      	ldr	r1, [r3, #24]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	021a      	lsls	r2, r3, #8
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	619a      	str	r2, [r3, #24]
      break;
 8007cac:	e043      	b.n	8007d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68b9      	ldr	r1, [r7, #8]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fabd 	bl	8008234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69da      	ldr	r2, [r3, #28]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0208 	orr.w	r2, r2, #8
 8007cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	69da      	ldr	r2, [r3, #28]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0204 	bic.w	r2, r2, #4
 8007cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69d9      	ldr	r1, [r3, #28]
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	61da      	str	r2, [r3, #28]
      break;
 8007cec:	e023      	b.n	8007d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68b9      	ldr	r1, [r7, #8]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fb11 	bl	800831c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69da      	ldr	r2, [r3, #28]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69da      	ldr	r2, [r3, #28]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	69d9      	ldr	r1, [r3, #28]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	021a      	lsls	r2, r3, #8
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	61da      	str	r2, [r3, #28]
      break;
 8007d2e:	e002      	b.n	8007d36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	75fb      	strb	r3, [r7, #23]
      break;
 8007d34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_TIM_ConfigClockSource+0x1c>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e0b4      	b.n	8007ece <HAL_TIM_ConfigClockSource+0x186>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d9c:	d03e      	beq.n	8007e1c <HAL_TIM_ConfigClockSource+0xd4>
 8007d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007da2:	f200 8087 	bhi.w	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007daa:	f000 8086 	beq.w	8007eba <HAL_TIM_ConfigClockSource+0x172>
 8007dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007db2:	d87f      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007db4:	2b70      	cmp	r3, #112	; 0x70
 8007db6:	d01a      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0xa6>
 8007db8:	2b70      	cmp	r3, #112	; 0x70
 8007dba:	d87b      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dbc:	2b60      	cmp	r3, #96	; 0x60
 8007dbe:	d050      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0x11a>
 8007dc0:	2b60      	cmp	r3, #96	; 0x60
 8007dc2:	d877      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc4:	2b50      	cmp	r3, #80	; 0x50
 8007dc6:	d03c      	beq.n	8007e42 <HAL_TIM_ConfigClockSource+0xfa>
 8007dc8:	2b50      	cmp	r3, #80	; 0x50
 8007dca:	d873      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dcc:	2b40      	cmp	r3, #64	; 0x40
 8007dce:	d058      	beq.n	8007e82 <HAL_TIM_ConfigClockSource+0x13a>
 8007dd0:	2b40      	cmp	r3, #64	; 0x40
 8007dd2:	d86f      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007dd4:	2b30      	cmp	r3, #48	; 0x30
 8007dd6:	d064      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8007dd8:	2b30      	cmp	r3, #48	; 0x30
 8007dda:	d86b      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d060      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8007de0:	2b20      	cmp	r3, #32
 8007de2:	d867      	bhi.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d05c      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8007de8:	2b10      	cmp	r3, #16
 8007dea:	d05a      	beq.n	8007ea2 <HAL_TIM_ConfigClockSource+0x15a>
 8007dec:	e062      	b.n	8007eb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	6899      	ldr	r1, [r3, #8]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	f000 fb5d 	bl	80084bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	609a      	str	r2, [r3, #8]
      break;
 8007e1a:	e04f      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6818      	ldr	r0, [r3, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	6899      	ldr	r1, [r3, #8]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f000 fb46 	bl	80084bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e3e:	609a      	str	r2, [r3, #8]
      break;
 8007e40:	e03c      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	6859      	ldr	r1, [r3, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f000 faba 	bl	80083c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2150      	movs	r1, #80	; 0x50
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 fb13 	bl	8008486 <TIM_ITRx_SetConfig>
      break;
 8007e60:	e02c      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	6859      	ldr	r1, [r3, #4]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f000 fad9 	bl	8008426 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	2160      	movs	r1, #96	; 0x60
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 fb03 	bl	8008486 <TIM_ITRx_SetConfig>
      break;
 8007e80:	e01c      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6818      	ldr	r0, [r3, #0]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	6859      	ldr	r1, [r3, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f000 fa9a 	bl	80083c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2140      	movs	r1, #64	; 0x40
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 faf3 	bl	8008486 <TIM_ITRx_SetConfig>
      break;
 8007ea0:	e00c      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4610      	mov	r0, r2
 8007eae:	f000 faea 	bl	8008486 <TIM_ITRx_SetConfig>
      break;
 8007eb2:	e003      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8007eb8:	e000      	b.n	8007ebc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007eba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ef2:	bf00      	nop
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b083      	sub	sp, #12
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f06:	bf00      	nop
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f1a:	bf00      	nop
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
	...

08007f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a40      	ldr	r2, [pc, #256]	; (800803c <TIM_Base_SetConfig+0x114>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d013      	beq.n	8007f68 <TIM_Base_SetConfig+0x40>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f46:	d00f      	beq.n	8007f68 <TIM_Base_SetConfig+0x40>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a3d      	ldr	r2, [pc, #244]	; (8008040 <TIM_Base_SetConfig+0x118>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d00b      	beq.n	8007f68 <TIM_Base_SetConfig+0x40>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a3c      	ldr	r2, [pc, #240]	; (8008044 <TIM_Base_SetConfig+0x11c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d007      	beq.n	8007f68 <TIM_Base_SetConfig+0x40>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a3b      	ldr	r2, [pc, #236]	; (8008048 <TIM_Base_SetConfig+0x120>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d003      	beq.n	8007f68 <TIM_Base_SetConfig+0x40>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a3a      	ldr	r2, [pc, #232]	; (800804c <TIM_Base_SetConfig+0x124>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d108      	bne.n	8007f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a2f      	ldr	r2, [pc, #188]	; (800803c <TIM_Base_SetConfig+0x114>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d02b      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f88:	d027      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a2c      	ldr	r2, [pc, #176]	; (8008040 <TIM_Base_SetConfig+0x118>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d023      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a2b      	ldr	r2, [pc, #172]	; (8008044 <TIM_Base_SetConfig+0x11c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d01f      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a2a      	ldr	r2, [pc, #168]	; (8008048 <TIM_Base_SetConfig+0x120>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d01b      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a29      	ldr	r2, [pc, #164]	; (800804c <TIM_Base_SetConfig+0x124>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d017      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a28      	ldr	r2, [pc, #160]	; (8008050 <TIM_Base_SetConfig+0x128>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d013      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a27      	ldr	r2, [pc, #156]	; (8008054 <TIM_Base_SetConfig+0x12c>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00f      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a26      	ldr	r2, [pc, #152]	; (8008058 <TIM_Base_SetConfig+0x130>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d00b      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a25      	ldr	r2, [pc, #148]	; (800805c <TIM_Base_SetConfig+0x134>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d007      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a24      	ldr	r2, [pc, #144]	; (8008060 <TIM_Base_SetConfig+0x138>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d003      	beq.n	8007fda <TIM_Base_SetConfig+0xb2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a23      	ldr	r2, [pc, #140]	; (8008064 <TIM_Base_SetConfig+0x13c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d108      	bne.n	8007fec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a0a      	ldr	r2, [pc, #40]	; (800803c <TIM_Base_SetConfig+0x114>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d003      	beq.n	8008020 <TIM_Base_SetConfig+0xf8>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a0c      	ldr	r2, [pc, #48]	; (800804c <TIM_Base_SetConfig+0x124>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d103      	bne.n	8008028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	691a      	ldr	r2, [r3, #16]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	615a      	str	r2, [r3, #20]
}
 800802e:	bf00      	nop
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	40010000 	.word	0x40010000
 8008040:	40000400 	.word	0x40000400
 8008044:	40000800 	.word	0x40000800
 8008048:	40000c00 	.word	0x40000c00
 800804c:	40010400 	.word	0x40010400
 8008050:	40014000 	.word	0x40014000
 8008054:	40014400 	.word	0x40014400
 8008058:	40014800 	.word	0x40014800
 800805c:	40001800 	.word	0x40001800
 8008060:	40001c00 	.word	0x40001c00
 8008064:	40002000 	.word	0x40002000

08008068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	f023 0201 	bic.w	r2, r3, #1
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f023 0303 	bic.w	r3, r3, #3
 800809e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f023 0302 	bic.w	r3, r3, #2
 80080b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a20      	ldr	r2, [pc, #128]	; (8008140 <TIM_OC1_SetConfig+0xd8>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d003      	beq.n	80080cc <TIM_OC1_SetConfig+0x64>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a1f      	ldr	r2, [pc, #124]	; (8008144 <TIM_OC1_SetConfig+0xdc>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d10c      	bne.n	80080e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 0308 	bic.w	r3, r3, #8
 80080d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f023 0304 	bic.w	r3, r3, #4
 80080e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a15      	ldr	r2, [pc, #84]	; (8008140 <TIM_OC1_SetConfig+0xd8>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d003      	beq.n	80080f6 <TIM_OC1_SetConfig+0x8e>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a14      	ldr	r2, [pc, #80]	; (8008144 <TIM_OC1_SetConfig+0xdc>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d111      	bne.n	800811a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	695b      	ldr	r3, [r3, #20]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	4313      	orrs	r3, r2
 800810e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	4313      	orrs	r3, r2
 8008118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	621a      	str	r2, [r3, #32]
}
 8008134:	bf00      	nop
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	40010000 	.word	0x40010000
 8008144:	40010400 	.word	0x40010400

08008148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	f023 0210 	bic.w	r2, r3, #16
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800817e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	021b      	lsls	r3, r3, #8
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f023 0320 	bic.w	r3, r3, #32
 8008192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	4313      	orrs	r3, r2
 800819e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a22      	ldr	r2, [pc, #136]	; (800822c <TIM_OC2_SetConfig+0xe4>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d003      	beq.n	80081b0 <TIM_OC2_SetConfig+0x68>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a21      	ldr	r2, [pc, #132]	; (8008230 <TIM_OC2_SetConfig+0xe8>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d10d      	bne.n	80081cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	011b      	lsls	r3, r3, #4
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a17      	ldr	r2, [pc, #92]	; (800822c <TIM_OC2_SetConfig+0xe4>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d003      	beq.n	80081dc <TIM_OC2_SetConfig+0x94>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a16      	ldr	r2, [pc, #88]	; (8008230 <TIM_OC2_SetConfig+0xe8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d113      	bne.n	8008204 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	621a      	str	r2, [r3, #32]
}
 800821e:	bf00      	nop
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	40010000 	.word	0x40010000
 8008230:	40010400 	.word	0x40010400

08008234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008234:	b480      	push	{r7}
 8008236:	b087      	sub	sp, #28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a1b      	ldr	r3, [r3, #32]
 800824e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0303 	bic.w	r3, r3, #3
 800826a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800827c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a21      	ldr	r2, [pc, #132]	; (8008314 <TIM_OC3_SetConfig+0xe0>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d003      	beq.n	800829a <TIM_OC3_SetConfig+0x66>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a20      	ldr	r2, [pc, #128]	; (8008318 <TIM_OC3_SetConfig+0xe4>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d10d      	bne.n	80082b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a16      	ldr	r2, [pc, #88]	; (8008314 <TIM_OC3_SetConfig+0xe0>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d003      	beq.n	80082c6 <TIM_OC3_SetConfig+0x92>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a15      	ldr	r2, [pc, #84]	; (8008318 <TIM_OC3_SetConfig+0xe4>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d113      	bne.n	80082ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	011b      	lsls	r3, r3, #4
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	4313      	orrs	r3, r2
 80082e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	011b      	lsls	r3, r3, #4
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	693a      	ldr	r2, [r7, #16]
 80082f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	621a      	str	r2, [r3, #32]
}
 8008308:	bf00      	nop
 800830a:	371c      	adds	r7, #28
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	40010000 	.word	0x40010000
 8008318:	40010400 	.word	0x40010400

0800831c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800834a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	021b      	lsls	r3, r3, #8
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	4313      	orrs	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	031b      	lsls	r3, r3, #12
 800836e:	693a      	ldr	r2, [r7, #16]
 8008370:	4313      	orrs	r3, r2
 8008372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a12      	ldr	r2, [pc, #72]	; (80083c0 <TIM_OC4_SetConfig+0xa4>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d003      	beq.n	8008384 <TIM_OC4_SetConfig+0x68>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a11      	ldr	r2, [pc, #68]	; (80083c4 <TIM_OC4_SetConfig+0xa8>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d109      	bne.n	8008398 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800838a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	019b      	lsls	r3, r3, #6
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	4313      	orrs	r3, r2
 8008396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	693a      	ldr	r2, [r7, #16]
 80083b0:	621a      	str	r2, [r3, #32]
}
 80083b2:	bf00      	nop
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	40010000 	.word	0x40010000
 80083c4:	40010400 	.word	0x40010400

080083c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	f023 0201 	bic.w	r2, r3, #1
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	011b      	lsls	r3, r3, #4
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f023 030a 	bic.w	r3, r3, #10
 8008404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	621a      	str	r2, [r3, #32]
}
 800841a:	bf00      	nop
 800841c:	371c      	adds	r7, #28
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008426:	b480      	push	{r7}
 8008428:	b087      	sub	sp, #28
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	f023 0210 	bic.w	r2, r3, #16
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	031b      	lsls	r3, r3, #12
 8008456:	697a      	ldr	r2, [r7, #20]
 8008458:	4313      	orrs	r3, r2
 800845a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	621a      	str	r2, [r3, #32]
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008486:	b480      	push	{r7}
 8008488:	b085      	sub	sp, #20
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800849c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	f043 0307 	orr.w	r3, r3, #7
 80084a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	609a      	str	r2, [r3, #8]
}
 80084b0:	bf00      	nop
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
 80084c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	021a      	lsls	r2, r3, #8
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	431a      	orrs	r2, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	609a      	str	r2, [r3, #8]
}
 80084f0:	bf00      	nop
 80084f2:	371c      	adds	r7, #28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008510:	2302      	movs	r3, #2
 8008512:	e05a      	b.n	80085ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2202      	movs	r2, #2
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800853a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4313      	orrs	r3, r2
 8008544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a21      	ldr	r2, [pc, #132]	; (80085d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d022      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008560:	d01d      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a1d      	ldr	r2, [pc, #116]	; (80085dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d018      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1b      	ldr	r2, [pc, #108]	; (80085e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d013      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1a      	ldr	r2, [pc, #104]	; (80085e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00e      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a18      	ldr	r2, [pc, #96]	; (80085e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d009      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a17      	ldr	r2, [pc, #92]	; (80085ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d004      	beq.n	800859e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a15      	ldr	r2, [pc, #84]	; (80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d10c      	bne.n	80085b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	40010000 	.word	0x40010000
 80085dc:	40000400 	.word	0x40000400
 80085e0:	40000800 	.word	0x40000800
 80085e4:	40000c00 	.word	0x40000c00
 80085e8:	40010400 	.word	0x40010400
 80085ec:	40014000 	.word	0x40014000
 80085f0:	40001800 	.word	0x40001800

080085f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b083      	sub	sp, #12
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085fc:	bf00      	nop
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e03f      	b.n	80086ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7f9 fefe 	bl	8002444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2224      	movs	r2, #36	; 0x24
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68da      	ldr	r2, [r3, #12]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800865e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f929 	bl	80088b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	691a      	ldr	r2, [r3, #16]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008674:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	695a      	ldr	r2, [r3, #20]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008684:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008694:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2220      	movs	r2, #32
 80086a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2220      	movs	r2, #32
 80086a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b08a      	sub	sp, #40	; 0x28
 80086ba:	af02      	add	r7, sp, #8
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	60b9      	str	r1, [r7, #8]
 80086c0:	603b      	str	r3, [r7, #0]
 80086c2:	4613      	mov	r3, r2
 80086c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	d17c      	bne.n	80087d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <HAL_UART_Transmit+0x2c>
 80086dc:	88fb      	ldrh	r3, [r7, #6]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e075      	b.n	80087d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d101      	bne.n	80086f4 <HAL_UART_Transmit+0x3e>
 80086f0:	2302      	movs	r3, #2
 80086f2:	e06e      	b.n	80087d2 <HAL_UART_Transmit+0x11c>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2221      	movs	r2, #33	; 0x21
 8008706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800870a:	f7fb f829 	bl	8003760 <HAL_GetTick>
 800870e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	88fa      	ldrh	r2, [r7, #6]
 8008714:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	88fa      	ldrh	r2, [r7, #6]
 800871a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008724:	d108      	bne.n	8008738 <HAL_UART_Transmit+0x82>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d104      	bne.n	8008738 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	61bb      	str	r3, [r7, #24]
 8008736:	e003      	b.n	8008740 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800873c:	2300      	movs	r3, #0
 800873e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008748:	e02a      	b.n	80087a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2200      	movs	r2, #0
 8008752:	2180      	movs	r1, #128	; 0x80
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 f840 	bl	80087da <UART_WaitOnFlagUntilTimeout>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d001      	beq.n	8008764 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008760:	2303      	movs	r3, #3
 8008762:	e036      	b.n	80087d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10b      	bne.n	8008782 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	461a      	mov	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008778:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	3302      	adds	r3, #2
 800877e:	61bb      	str	r3, [r7, #24]
 8008780:	e007      	b.n	8008792 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	781a      	ldrb	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	3301      	adds	r3, #1
 8008790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008796:	b29b      	uxth	r3, r3
 8008798:	3b01      	subs	r3, #1
 800879a:	b29a      	uxth	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1cf      	bne.n	800874a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2200      	movs	r2, #0
 80087b2:	2140      	movs	r1, #64	; 0x40
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 f810 	bl	80087da <UART_WaitOnFlagUntilTimeout>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d001      	beq.n	80087c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e006      	b.n	80087d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2220      	movs	r2, #32
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	e000      	b.n	80087d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80087d0:	2302      	movs	r3, #2
  }
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3720      	adds	r7, #32
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b090      	sub	sp, #64	; 0x40
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	603b      	str	r3, [r7, #0]
 80087e6:	4613      	mov	r3, r2
 80087e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ea:	e050      	b.n	800888e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f2:	d04c      	beq.n	800888e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80087f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d007      	beq.n	800880a <UART_WaitOnFlagUntilTimeout+0x30>
 80087fa:	f7fa ffb1 	bl	8003760 <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008806:	429a      	cmp	r2, r3
 8008808:	d241      	bcs.n	800888e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	330c      	adds	r3, #12
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	330c      	adds	r3, #12
 8008828:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800882a:	637a      	str	r2, [r7, #52]	; 0x34
 800882c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e5      	bne.n	800880a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3314      	adds	r3, #20
 8008844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	613b      	str	r3, [r7, #16]
   return(result);
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	f023 0301 	bic.w	r3, r3, #1
 8008854:	63bb      	str	r3, [r7, #56]	; 0x38
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	3314      	adds	r3, #20
 800885c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800885e:	623a      	str	r2, [r7, #32]
 8008860:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	69f9      	ldr	r1, [r7, #28]
 8008864:	6a3a      	ldr	r2, [r7, #32]
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	61bb      	str	r3, [r7, #24]
   return(result);
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e5      	bne.n	800883e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2220      	movs	r2, #32
 8008876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2220      	movs	r2, #32
 800887e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e00f      	b.n	80088ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	4013      	ands	r3, r2
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	429a      	cmp	r2, r3
 800889c:	bf0c      	ite	eq
 800889e:	2301      	moveq	r3, #1
 80088a0:	2300      	movne	r3, #0
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	461a      	mov	r2, r3
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d09f      	beq.n	80087ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3740      	adds	r7, #64	; 0x40
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
	...

080088b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088bc:	b09f      	sub	sp, #124	; 0x7c
 80088be:	af00      	add	r7, sp, #0
 80088c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80088cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ce:	68d9      	ldr	r1, [r3, #12]
 80088d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	ea40 0301 	orr.w	r3, r0, r1
 80088d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088dc:	689a      	ldr	r2, [r3, #8]
 80088de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	431a      	orrs	r2, r3
 80088e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	431a      	orrs	r2, r3
 80088ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80088f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80088fc:	f021 010c 	bic.w	r1, r1, #12
 8008900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008906:	430b      	orrs	r3, r1
 8008908:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800890a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008914:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008916:	6999      	ldr	r1, [r3, #24]
 8008918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	ea40 0301 	orr.w	r3, r0, r1
 8008920:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	4bc5      	ldr	r3, [pc, #788]	; (8008c3c <UART_SetConfig+0x384>)
 8008928:	429a      	cmp	r2, r3
 800892a:	d004      	beq.n	8008936 <UART_SetConfig+0x7e>
 800892c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	4bc3      	ldr	r3, [pc, #780]	; (8008c40 <UART_SetConfig+0x388>)
 8008932:	429a      	cmp	r2, r3
 8008934:	d103      	bne.n	800893e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008936:	f7fd fa65 	bl	8005e04 <HAL_RCC_GetPCLK2Freq>
 800893a:	6778      	str	r0, [r7, #116]	; 0x74
 800893c:	e002      	b.n	8008944 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800893e:	f7fd fa4d 	bl	8005ddc <HAL_RCC_GetPCLK1Freq>
 8008942:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008946:	69db      	ldr	r3, [r3, #28]
 8008948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800894c:	f040 80b6 	bne.w	8008abc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008952:	461c      	mov	r4, r3
 8008954:	f04f 0500 	mov.w	r5, #0
 8008958:	4622      	mov	r2, r4
 800895a:	462b      	mov	r3, r5
 800895c:	1891      	adds	r1, r2, r2
 800895e:	6439      	str	r1, [r7, #64]	; 0x40
 8008960:	415b      	adcs	r3, r3
 8008962:	647b      	str	r3, [r7, #68]	; 0x44
 8008964:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008968:	1912      	adds	r2, r2, r4
 800896a:	eb45 0303 	adc.w	r3, r5, r3
 800896e:	f04f 0000 	mov.w	r0, #0
 8008972:	f04f 0100 	mov.w	r1, #0
 8008976:	00d9      	lsls	r1, r3, #3
 8008978:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800897c:	00d0      	lsls	r0, r2, #3
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	1911      	adds	r1, r2, r4
 8008984:	6639      	str	r1, [r7, #96]	; 0x60
 8008986:	416b      	adcs	r3, r5
 8008988:	667b      	str	r3, [r7, #100]	; 0x64
 800898a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	461a      	mov	r2, r3
 8008990:	f04f 0300 	mov.w	r3, #0
 8008994:	1891      	adds	r1, r2, r2
 8008996:	63b9      	str	r1, [r7, #56]	; 0x38
 8008998:	415b      	adcs	r3, r3
 800899a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800899c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80089a4:	f7f8 f980 	bl	8000ca8 <__aeabi_uldivmod>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	4ba5      	ldr	r3, [pc, #660]	; (8008c44 <UART_SetConfig+0x38c>)
 80089ae:	fba3 2302 	umull	r2, r3, r3, r2
 80089b2:	095b      	lsrs	r3, r3, #5
 80089b4:	011e      	lsls	r6, r3, #4
 80089b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089b8:	461c      	mov	r4, r3
 80089ba:	f04f 0500 	mov.w	r5, #0
 80089be:	4622      	mov	r2, r4
 80089c0:	462b      	mov	r3, r5
 80089c2:	1891      	adds	r1, r2, r2
 80089c4:	6339      	str	r1, [r7, #48]	; 0x30
 80089c6:	415b      	adcs	r3, r3
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80089ce:	1912      	adds	r2, r2, r4
 80089d0:	eb45 0303 	adc.w	r3, r5, r3
 80089d4:	f04f 0000 	mov.w	r0, #0
 80089d8:	f04f 0100 	mov.w	r1, #0
 80089dc:	00d9      	lsls	r1, r3, #3
 80089de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089e2:	00d0      	lsls	r0, r2, #3
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	1911      	adds	r1, r2, r4
 80089ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80089ec:	416b      	adcs	r3, r5
 80089ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	461a      	mov	r2, r3
 80089f6:	f04f 0300 	mov.w	r3, #0
 80089fa:	1891      	adds	r1, r2, r2
 80089fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80089fe:	415b      	adcs	r3, r3
 8008a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a06:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008a0a:	f7f8 f94d 	bl	8000ca8 <__aeabi_uldivmod>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	4b8c      	ldr	r3, [pc, #560]	; (8008c44 <UART_SetConfig+0x38c>)
 8008a14:	fba3 1302 	umull	r1, r3, r3, r2
 8008a18:	095b      	lsrs	r3, r3, #5
 8008a1a:	2164      	movs	r1, #100	; 0x64
 8008a1c:	fb01 f303 	mul.w	r3, r1, r3
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	00db      	lsls	r3, r3, #3
 8008a24:	3332      	adds	r3, #50	; 0x32
 8008a26:	4a87      	ldr	r2, [pc, #540]	; (8008c44 <UART_SetConfig+0x38c>)
 8008a28:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2c:	095b      	lsrs	r3, r3, #5
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a34:	441e      	add	r6, r3
 8008a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f04f 0100 	mov.w	r1, #0
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	1894      	adds	r4, r2, r2
 8008a44:	623c      	str	r4, [r7, #32]
 8008a46:	415b      	adcs	r3, r3
 8008a48:	627b      	str	r3, [r7, #36]	; 0x24
 8008a4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a4e:	1812      	adds	r2, r2, r0
 8008a50:	eb41 0303 	adc.w	r3, r1, r3
 8008a54:	f04f 0400 	mov.w	r4, #0
 8008a58:	f04f 0500 	mov.w	r5, #0
 8008a5c:	00dd      	lsls	r5, r3, #3
 8008a5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a62:	00d4      	lsls	r4, r2, #3
 8008a64:	4622      	mov	r2, r4
 8008a66:	462b      	mov	r3, r5
 8008a68:	1814      	adds	r4, r2, r0
 8008a6a:	653c      	str	r4, [r7, #80]	; 0x50
 8008a6c:	414b      	adcs	r3, r1
 8008a6e:	657b      	str	r3, [r7, #84]	; 0x54
 8008a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	461a      	mov	r2, r3
 8008a76:	f04f 0300 	mov.w	r3, #0
 8008a7a:	1891      	adds	r1, r2, r2
 8008a7c:	61b9      	str	r1, [r7, #24]
 8008a7e:	415b      	adcs	r3, r3
 8008a80:	61fb      	str	r3, [r7, #28]
 8008a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008a8a:	f7f8 f90d 	bl	8000ca8 <__aeabi_uldivmod>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	4b6c      	ldr	r3, [pc, #432]	; (8008c44 <UART_SetConfig+0x38c>)
 8008a94:	fba3 1302 	umull	r1, r3, r3, r2
 8008a98:	095b      	lsrs	r3, r3, #5
 8008a9a:	2164      	movs	r1, #100	; 0x64
 8008a9c:	fb01 f303 	mul.w	r3, r1, r3
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	3332      	adds	r3, #50	; 0x32
 8008aa6:	4a67      	ldr	r2, [pc, #412]	; (8008c44 <UART_SetConfig+0x38c>)
 8008aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8008aac:	095b      	lsrs	r3, r3, #5
 8008aae:	f003 0207 	and.w	r2, r3, #7
 8008ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4432      	add	r2, r6
 8008ab8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008aba:	e0b9      	b.n	8008c30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008abe:	461c      	mov	r4, r3
 8008ac0:	f04f 0500 	mov.w	r5, #0
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	462b      	mov	r3, r5
 8008ac8:	1891      	adds	r1, r2, r2
 8008aca:	6139      	str	r1, [r7, #16]
 8008acc:	415b      	adcs	r3, r3
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ad4:	1912      	adds	r2, r2, r4
 8008ad6:	eb45 0303 	adc.w	r3, r5, r3
 8008ada:	f04f 0000 	mov.w	r0, #0
 8008ade:	f04f 0100 	mov.w	r1, #0
 8008ae2:	00d9      	lsls	r1, r3, #3
 8008ae4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ae8:	00d0      	lsls	r0, r2, #3
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	eb12 0804 	adds.w	r8, r2, r4
 8008af2:	eb43 0905 	adc.w	r9, r3, r5
 8008af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	4618      	mov	r0, r3
 8008afc:	f04f 0100 	mov.w	r1, #0
 8008b00:	f04f 0200 	mov.w	r2, #0
 8008b04:	f04f 0300 	mov.w	r3, #0
 8008b08:	008b      	lsls	r3, r1, #2
 8008b0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b0e:	0082      	lsls	r2, r0, #2
 8008b10:	4640      	mov	r0, r8
 8008b12:	4649      	mov	r1, r9
 8008b14:	f7f8 f8c8 	bl	8000ca8 <__aeabi_uldivmod>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4b49      	ldr	r3, [pc, #292]	; (8008c44 <UART_SetConfig+0x38c>)
 8008b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b22:	095b      	lsrs	r3, r3, #5
 8008b24:	011e      	lsls	r6, r3, #4
 8008b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f04f 0100 	mov.w	r1, #0
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	1894      	adds	r4, r2, r2
 8008b34:	60bc      	str	r4, [r7, #8]
 8008b36:	415b      	adcs	r3, r3
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b3e:	1812      	adds	r2, r2, r0
 8008b40:	eb41 0303 	adc.w	r3, r1, r3
 8008b44:	f04f 0400 	mov.w	r4, #0
 8008b48:	f04f 0500 	mov.w	r5, #0
 8008b4c:	00dd      	lsls	r5, r3, #3
 8008b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b52:	00d4      	lsls	r4, r2, #3
 8008b54:	4622      	mov	r2, r4
 8008b56:	462b      	mov	r3, r5
 8008b58:	1814      	adds	r4, r2, r0
 8008b5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8008b5c:	414b      	adcs	r3, r1
 8008b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f04f 0100 	mov.w	r1, #0
 8008b6a:	f04f 0200 	mov.w	r2, #0
 8008b6e:	f04f 0300 	mov.w	r3, #0
 8008b72:	008b      	lsls	r3, r1, #2
 8008b74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008b78:	0082      	lsls	r2, r0, #2
 8008b7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008b7e:	f7f8 f893 	bl	8000ca8 <__aeabi_uldivmod>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	4b2f      	ldr	r3, [pc, #188]	; (8008c44 <UART_SetConfig+0x38c>)
 8008b88:	fba3 1302 	umull	r1, r3, r3, r2
 8008b8c:	095b      	lsrs	r3, r3, #5
 8008b8e:	2164      	movs	r1, #100	; 0x64
 8008b90:	fb01 f303 	mul.w	r3, r1, r3
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	011b      	lsls	r3, r3, #4
 8008b98:	3332      	adds	r3, #50	; 0x32
 8008b9a:	4a2a      	ldr	r2, [pc, #168]	; (8008c44 <UART_SetConfig+0x38c>)
 8008b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba0:	095b      	lsrs	r3, r3, #5
 8008ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ba6:	441e      	add	r6, r3
 8008ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008baa:	4618      	mov	r0, r3
 8008bac:	f04f 0100 	mov.w	r1, #0
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	1894      	adds	r4, r2, r2
 8008bb6:	603c      	str	r4, [r7, #0]
 8008bb8:	415b      	adcs	r3, r3
 8008bba:	607b      	str	r3, [r7, #4]
 8008bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bc0:	1812      	adds	r2, r2, r0
 8008bc2:	eb41 0303 	adc.w	r3, r1, r3
 8008bc6:	f04f 0400 	mov.w	r4, #0
 8008bca:	f04f 0500 	mov.w	r5, #0
 8008bce:	00dd      	lsls	r5, r3, #3
 8008bd0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008bd4:	00d4      	lsls	r4, r2, #3
 8008bd6:	4622      	mov	r2, r4
 8008bd8:	462b      	mov	r3, r5
 8008bda:	eb12 0a00 	adds.w	sl, r2, r0
 8008bde:	eb43 0b01 	adc.w	fp, r3, r1
 8008be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f04f 0100 	mov.w	r1, #0
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	008b      	lsls	r3, r1, #2
 8008bf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008bfa:	0082      	lsls	r2, r0, #2
 8008bfc:	4650      	mov	r0, sl
 8008bfe:	4659      	mov	r1, fp
 8008c00:	f7f8 f852 	bl	8000ca8 <__aeabi_uldivmod>
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <UART_SetConfig+0x38c>)
 8008c0a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c0e:	095b      	lsrs	r3, r3, #5
 8008c10:	2164      	movs	r1, #100	; 0x64
 8008c12:	fb01 f303 	mul.w	r3, r1, r3
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	011b      	lsls	r3, r3, #4
 8008c1a:	3332      	adds	r3, #50	; 0x32
 8008c1c:	4a09      	ldr	r2, [pc, #36]	; (8008c44 <UART_SetConfig+0x38c>)
 8008c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c22:	095b      	lsrs	r3, r3, #5
 8008c24:	f003 020f 	and.w	r2, r3, #15
 8008c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4432      	add	r2, r6
 8008c2e:	609a      	str	r2, [r3, #8]
}
 8008c30:	bf00      	nop
 8008c32:	377c      	adds	r7, #124	; 0x7c
 8008c34:	46bd      	mov	sp, r7
 8008c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c3a:	bf00      	nop
 8008c3c:	40011000 	.word	0x40011000
 8008c40:	40011400 	.word	0x40011400
 8008c44:	51eb851f 	.word	0x51eb851f

08008c48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4613      	mov	r3, r2
 8008c54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008c56:	79fb      	ldrb	r3, [r7, #7]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d165      	bne.n	8008d28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	4a41      	ldr	r2, [pc, #260]	; (8008d64 <USB_SetTurnaroundTime+0x11c>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d906      	bls.n	8008c72 <USB_SetTurnaroundTime+0x2a>
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	4a40      	ldr	r2, [pc, #256]	; (8008d68 <USB_SetTurnaroundTime+0x120>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d202      	bcs.n	8008c72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008c6c:	230f      	movs	r3, #15
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	e062      	b.n	8008d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	4a3c      	ldr	r2, [pc, #240]	; (8008d68 <USB_SetTurnaroundTime+0x120>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d306      	bcc.n	8008c88 <USB_SetTurnaroundTime+0x40>
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	4a3b      	ldr	r2, [pc, #236]	; (8008d6c <USB_SetTurnaroundTime+0x124>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d202      	bcs.n	8008c88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008c82:	230e      	movs	r3, #14
 8008c84:	617b      	str	r3, [r7, #20]
 8008c86:	e057      	b.n	8008d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	4a38      	ldr	r2, [pc, #224]	; (8008d6c <USB_SetTurnaroundTime+0x124>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d306      	bcc.n	8008c9e <USB_SetTurnaroundTime+0x56>
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	4a37      	ldr	r2, [pc, #220]	; (8008d70 <USB_SetTurnaroundTime+0x128>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d202      	bcs.n	8008c9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008c98:	230d      	movs	r3, #13
 8008c9a:	617b      	str	r3, [r7, #20]
 8008c9c:	e04c      	b.n	8008d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	4a33      	ldr	r2, [pc, #204]	; (8008d70 <USB_SetTurnaroundTime+0x128>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d306      	bcc.n	8008cb4 <USB_SetTurnaroundTime+0x6c>
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	4a32      	ldr	r2, [pc, #200]	; (8008d74 <USB_SetTurnaroundTime+0x12c>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d802      	bhi.n	8008cb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008cae:	230c      	movs	r3, #12
 8008cb0:	617b      	str	r3, [r7, #20]
 8008cb2:	e041      	b.n	8008d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	4a2f      	ldr	r2, [pc, #188]	; (8008d74 <USB_SetTurnaroundTime+0x12c>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d906      	bls.n	8008cca <USB_SetTurnaroundTime+0x82>
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	4a2e      	ldr	r2, [pc, #184]	; (8008d78 <USB_SetTurnaroundTime+0x130>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d802      	bhi.n	8008cca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008cc4:	230b      	movs	r3, #11
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	e036      	b.n	8008d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	4a2a      	ldr	r2, [pc, #168]	; (8008d78 <USB_SetTurnaroundTime+0x130>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d906      	bls.n	8008ce0 <USB_SetTurnaroundTime+0x98>
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	4a29      	ldr	r2, [pc, #164]	; (8008d7c <USB_SetTurnaroundTime+0x134>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d802      	bhi.n	8008ce0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008cda:	230a      	movs	r3, #10
 8008cdc:	617b      	str	r3, [r7, #20]
 8008cde:	e02b      	b.n	8008d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	4a26      	ldr	r2, [pc, #152]	; (8008d7c <USB_SetTurnaroundTime+0x134>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d906      	bls.n	8008cf6 <USB_SetTurnaroundTime+0xae>
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	4a25      	ldr	r2, [pc, #148]	; (8008d80 <USB_SetTurnaroundTime+0x138>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d202      	bcs.n	8008cf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008cf0:	2309      	movs	r3, #9
 8008cf2:	617b      	str	r3, [r7, #20]
 8008cf4:	e020      	b.n	8008d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	4a21      	ldr	r2, [pc, #132]	; (8008d80 <USB_SetTurnaroundTime+0x138>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d306      	bcc.n	8008d0c <USB_SetTurnaroundTime+0xc4>
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	4a20      	ldr	r2, [pc, #128]	; (8008d84 <USB_SetTurnaroundTime+0x13c>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d802      	bhi.n	8008d0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008d06:	2308      	movs	r3, #8
 8008d08:	617b      	str	r3, [r7, #20]
 8008d0a:	e015      	b.n	8008d38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	4a1d      	ldr	r2, [pc, #116]	; (8008d84 <USB_SetTurnaroundTime+0x13c>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d906      	bls.n	8008d22 <USB_SetTurnaroundTime+0xda>
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	4a1c      	ldr	r2, [pc, #112]	; (8008d88 <USB_SetTurnaroundTime+0x140>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d202      	bcs.n	8008d22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008d1c:	2307      	movs	r3, #7
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	e00a      	b.n	8008d38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008d22:	2306      	movs	r3, #6
 8008d24:	617b      	str	r3, [r7, #20]
 8008d26:	e007      	b.n	8008d38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d102      	bne.n	8008d34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008d2e:	2309      	movs	r3, #9
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	e001      	b.n	8008d38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008d34:	2309      	movs	r3, #9
 8008d36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	029b      	lsls	r3, r3, #10
 8008d4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008d50:	431a      	orrs	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	371c      	adds	r7, #28
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	00d8acbf 	.word	0x00d8acbf
 8008d68:	00e4e1c0 	.word	0x00e4e1c0
 8008d6c:	00f42400 	.word	0x00f42400
 8008d70:	01067380 	.word	0x01067380
 8008d74:	011a499f 	.word	0x011a499f
 8008d78:	01312cff 	.word	0x01312cff
 8008d7c:	014ca43f 	.word	0x014ca43f
 8008d80:	016e3600 	.word	0x016e3600
 8008d84:	01a6ab1f 	.word	0x01a6ab1f
 8008d88:	01e84800 	.word	0x01e84800

08008d8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	019b      	lsls	r3, r3, #6
 8008d9e:	f043 0220 	orr.w	r2, r3, #32
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	60fb      	str	r3, [r7, #12]
 8008dac:	4a08      	ldr	r2, [pc, #32]	; (8008dd0 <USB_FlushTxFifo+0x44>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d901      	bls.n	8008db6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e006      	b.n	8008dc4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b20      	cmp	r3, #32
 8008dc0:	d0f1      	beq.n	8008da6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	00030d40 	.word	0x00030d40

08008dd4 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b087      	sub	sp, #28
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	f003 0306 	and.w	r3, r3, #6
 8008dec:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d102      	bne.n	8008dfa <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008df4:	2300      	movs	r3, #0
 8008df6:	75fb      	strb	r3, [r7, #23]
 8008df8:	e00a      	b.n	8008e10 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d002      	beq.n	8008e06 <USB_GetDevSpeed+0x32>
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b06      	cmp	r3, #6
 8008e04:	d102      	bne.n	8008e0c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008e06:	2302      	movs	r3, #2
 8008e08:	75fb      	strb	r3, [r7, #23]
 8008e0a:	e001      	b.n	8008e10 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008e0c:	230f      	movs	r3, #15
 8008e0e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	371c      	adds	r7, #28
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr

08008e1e <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b085      	sub	sp, #20
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	785b      	ldrb	r3, [r3, #1]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d13a      	bne.n	8008eb0 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e40:	69da      	ldr	r2, [r3, #28]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	f003 030f 	and.w	r3, r3, #15
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	68f9      	ldr	r1, [r7, #12]
 8008e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d155      	bne.n	8008f1e <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	78db      	ldrb	r3, [r3, #3]
 8008e8c:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e8e:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	059b      	lsls	r3, r3, #22
 8008e94:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008e96:	4313      	orrs	r3, r2
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	0151      	lsls	r1, r2, #5
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	440a      	add	r2, r1
 8008ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	e036      	b.n	8008f1e <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb6:	69da      	ldr	r2, [r3, #28]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	f003 030f 	and.w	r3, r3, #15
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ec6:	041b      	lsls	r3, r3, #16
 8008ec8:	68f9      	ldr	r1, [r7, #12]
 8008eca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	015a      	lsls	r2, r3, #5
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	4413      	add	r3, r2
 8008eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d11a      	bne.n	8008f1e <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	78db      	ldrb	r3, [r3, #3]
 8008f02:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008f04:	430b      	orrs	r3, r1
 8008f06:	4313      	orrs	r3, r2
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	0151      	lsls	r1, r2, #5
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	440a      	add	r2, r1
 8008f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f1c:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b08a      	sub	sp, #40	; 0x28
 8008f30:	af02      	add	r7, sp, #8
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	4613      	mov	r3, r2
 8008f38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	785b      	ldrb	r3, [r3, #1]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	f040 815c 	bne.w	8009206 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d132      	bne.n	8008fbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	0151      	lsls	r1, r2, #5
 8008f68:	69fa      	ldr	r2, [r7, #28]
 8008f6a:	440a      	add	r2, r1
 8008f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	015a      	lsls	r2, r3, #5
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	4413      	add	r3, r2
 8008f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	69ba      	ldr	r2, [r7, #24]
 8008f8a:	0151      	lsls	r1, r2, #5
 8008f8c:	69fa      	ldr	r2, [r7, #28]
 8008f8e:	440a      	add	r2, r1
 8008f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	69ba      	ldr	r2, [r7, #24]
 8008faa:	0151      	lsls	r1, r2, #5
 8008fac:	69fa      	ldr	r2, [r7, #28]
 8008fae:	440a      	add	r2, r1
 8008fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb4:	0cdb      	lsrs	r3, r3, #19
 8008fb6:	04db      	lsls	r3, r3, #19
 8008fb8:	6113      	str	r3, [r2, #16]
 8008fba:	e074      	b.n	80090a6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	015a      	lsls	r2, r3, #5
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	69ba      	ldr	r2, [r7, #24]
 8008fcc:	0151      	lsls	r1, r2, #5
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	440a      	add	r2, r1
 8008fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fd6:	0cdb      	lsrs	r3, r3, #19
 8008fd8:	04db      	lsls	r3, r3, #19
 8008fda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	0151      	lsls	r1, r2, #5
 8008fee:	69fa      	ldr	r2, [r7, #28]
 8008ff0:	440a      	add	r2, r1
 8008ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ff6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ffa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ffe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	015a      	lsls	r2, r3, #5
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	4413      	add	r3, r2
 8009008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	6959      	ldr	r1, [r3, #20]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	440b      	add	r3, r1
 8009018:	1e59      	subs	r1, r3, #1
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009022:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009024:	4b9d      	ldr	r3, [pc, #628]	; (800929c <USB_EPStartXfer+0x370>)
 8009026:	400b      	ands	r3, r1
 8009028:	69b9      	ldr	r1, [r7, #24]
 800902a:	0148      	lsls	r0, r1, #5
 800902c:	69f9      	ldr	r1, [r7, #28]
 800902e:	4401      	add	r1, r0
 8009030:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009034:	4313      	orrs	r3, r2
 8009036:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009044:	691a      	ldr	r2, [r3, #16]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800904e:	69b9      	ldr	r1, [r7, #24]
 8009050:	0148      	lsls	r0, r1, #5
 8009052:	69f9      	ldr	r1, [r7, #28]
 8009054:	4401      	add	r1, r0
 8009056:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800905a:	4313      	orrs	r3, r2
 800905c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	78db      	ldrb	r3, [r3, #3]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d11f      	bne.n	80090a6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009066:	69bb      	ldr	r3, [r7, #24]
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	0151      	lsls	r1, r2, #5
 8009078:	69fa      	ldr	r2, [r7, #28]
 800907a:	440a      	add	r2, r1
 800907c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009080:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009084:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	69fb      	ldr	r3, [r7, #28]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	0151      	lsls	r1, r2, #5
 8009098:	69fa      	ldr	r2, [r7, #28]
 800909a:	440a      	add	r2, r1
 800909c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090a4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80090a6:	79fb      	ldrb	r3, [r7, #7]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d14b      	bne.n	8009144 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d009      	beq.n	80090c8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c0:	461a      	mov	r2, r3
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	78db      	ldrb	r3, [r3, #3]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d128      	bne.n	8009122 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d110      	bne.n	8009102 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69ba      	ldr	r2, [r7, #24]
 80090f0:	0151      	lsls	r1, r2, #5
 80090f2:	69fa      	ldr	r2, [r7, #28]
 80090f4:	440a      	add	r2, r1
 80090f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	e00f      	b.n	8009122 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	015a      	lsls	r2, r3, #5
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	4413      	add	r3, r2
 800910a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	69ba      	ldr	r2, [r7, #24]
 8009112:	0151      	lsls	r1, r2, #5
 8009114:	69fa      	ldr	r2, [r7, #28]
 8009116:	440a      	add	r2, r1
 8009118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800911c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009120:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	4413      	add	r3, r2
 800912a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	0151      	lsls	r1, r2, #5
 8009134:	69fa      	ldr	r2, [r7, #28]
 8009136:	440a      	add	r2, r1
 8009138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800913c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	e12f      	b.n	80093a4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	015a      	lsls	r2, r3, #5
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	4413      	add	r3, r2
 800914c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	0151      	lsls	r1, r2, #5
 8009156:	69fa      	ldr	r2, [r7, #28]
 8009158:	440a      	add	r2, r1
 800915a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800915e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009162:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	78db      	ldrb	r3, [r3, #3]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d015      	beq.n	8009198 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 8117 	beq.w	80093a4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	2101      	movs	r1, #1
 8009188:	fa01 f303 	lsl.w	r3, r1, r3
 800918c:	69f9      	ldr	r1, [r7, #28]
 800918e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009192:	4313      	orrs	r3, r2
 8009194:	634b      	str	r3, [r1, #52]	; 0x34
 8009196:	e105      	b.n	80093a4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d110      	bne.n	80091ca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69ba      	ldr	r2, [r7, #24]
 80091b8:	0151      	lsls	r1, r2, #5
 80091ba:	69fa      	ldr	r2, [r7, #28]
 80091bc:	440a      	add	r2, r1
 80091be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	e00f      	b.n	80091ea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	0151      	lsls	r1, r2, #5
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	440a      	add	r2, r1
 80091e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091e8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	68d9      	ldr	r1, [r3, #12]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	781a      	ldrb	r2, [r3, #0]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	b298      	uxth	r0, r3
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	4603      	mov	r3, r0
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 fa2b 	bl	800965a <USB_WritePacket>
 8009204:	e0ce      	b.n	80093a4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	69fb      	ldr	r3, [r7, #28]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	0151      	lsls	r1, r2, #5
 8009218:	69fa      	ldr	r2, [r7, #28]
 800921a:	440a      	add	r2, r1
 800921c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009220:	0cdb      	lsrs	r3, r3, #19
 8009222:	04db      	lsls	r3, r3, #19
 8009224:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	4413      	add	r3, r2
 800922e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	69ba      	ldr	r2, [r7, #24]
 8009236:	0151      	lsls	r1, r2, #5
 8009238:	69fa      	ldr	r2, [r7, #28]
 800923a:	440a      	add	r2, r1
 800923c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009240:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009244:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009248:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d126      	bne.n	80092a0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	015a      	lsls	r2, r3, #5
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	4413      	add	r3, r2
 800925a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925e:	691a      	ldr	r2, [r3, #16]
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009268:	69b9      	ldr	r1, [r7, #24]
 800926a:	0148      	lsls	r0, r1, #5
 800926c:	69f9      	ldr	r1, [r7, #28]
 800926e:	4401      	add	r1, r0
 8009270:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009274:	4313      	orrs	r3, r2
 8009276:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	015a      	lsls	r2, r3, #5
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	4413      	add	r3, r2
 8009280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	69ba      	ldr	r2, [r7, #24]
 8009288:	0151      	lsls	r1, r2, #5
 800928a:	69fa      	ldr	r2, [r7, #28]
 800928c:	440a      	add	r2, r1
 800928e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009292:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009296:	6113      	str	r3, [r2, #16]
 8009298:	e036      	b.n	8009308 <USB_EPStartXfer+0x3dc>
 800929a:	bf00      	nop
 800929c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	695a      	ldr	r2, [r3, #20]
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	4413      	add	r3, r2
 80092aa:	1e5a      	subs	r2, r3, #1
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c2:	691a      	ldr	r2, [r3, #16]
 80092c4:	8afb      	ldrh	r3, [r7, #22]
 80092c6:	04d9      	lsls	r1, r3, #19
 80092c8:	4b39      	ldr	r3, [pc, #228]	; (80093b0 <USB_EPStartXfer+0x484>)
 80092ca:	400b      	ands	r3, r1
 80092cc:	69b9      	ldr	r1, [r7, #24]
 80092ce:	0148      	lsls	r0, r1, #5
 80092d0:	69f9      	ldr	r1, [r7, #28]
 80092d2:	4401      	add	r1, r0
 80092d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80092d8:	4313      	orrs	r3, r2
 80092da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	015a      	lsls	r2, r3, #5
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	4413      	add	r3, r2
 80092e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e8:	691a      	ldr	r2, [r3, #16]
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	8af9      	ldrh	r1, [r7, #22]
 80092f0:	fb01 f303 	mul.w	r3, r1, r3
 80092f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092f8:	69b9      	ldr	r1, [r7, #24]
 80092fa:	0148      	lsls	r0, r1, #5
 80092fc:	69f9      	ldr	r1, [r7, #28]
 80092fe:	4401      	add	r1, r0
 8009300:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009304:	4313      	orrs	r3, r2
 8009306:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009308:	79fb      	ldrb	r3, [r7, #7]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d10d      	bne.n	800932a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d009      	beq.n	800932a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	68d9      	ldr	r1, [r3, #12]
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009326:	460a      	mov	r2, r1
 8009328:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	78db      	ldrb	r3, [r3, #3]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d128      	bne.n	8009384 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800933e:	2b00      	cmp	r3, #0
 8009340:	d110      	bne.n	8009364 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	015a      	lsls	r2, r3, #5
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	4413      	add	r3, r2
 800934a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	69ba      	ldr	r2, [r7, #24]
 8009352:	0151      	lsls	r1, r2, #5
 8009354:	69fa      	ldr	r2, [r7, #28]
 8009356:	440a      	add	r2, r1
 8009358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800935c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009360:	6013      	str	r3, [r2, #0]
 8009362:	e00f      	b.n	8009384 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	015a      	lsls	r2, r3, #5
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	4413      	add	r3, r2
 800936c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	69ba      	ldr	r2, [r7, #24]
 8009374:	0151      	lsls	r1, r2, #5
 8009376:	69fa      	ldr	r2, [r7, #28]
 8009378:	440a      	add	r2, r1
 800937a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800937e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009382:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	015a      	lsls	r2, r3, #5
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	4413      	add	r3, r2
 800938c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	69ba      	ldr	r2, [r7, #24]
 8009394:	0151      	lsls	r1, r2, #5
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	440a      	add	r2, r1
 800939a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800939e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3720      	adds	r7, #32
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	1ff80000 	.word	0x1ff80000

080093b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b087      	sub	sp, #28
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	60f8      	str	r0, [r7, #12]
 80093bc:	60b9      	str	r1, [r7, #8]
 80093be:	4613      	mov	r3, r2
 80093c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	f040 80cd 	bne.w	8009570 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d132      	bne.n	8009444 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	0151      	lsls	r1, r2, #5
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	440a      	add	r2, r1
 80093f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009400:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	440a      	add	r2, r1
 8009418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800941c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009420:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	015a      	lsls	r2, r3, #5
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	4413      	add	r3, r2
 800942a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	0151      	lsls	r1, r2, #5
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	440a      	add	r2, r1
 8009438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800943c:	0cdb      	lsrs	r3, r3, #19
 800943e:	04db      	lsls	r3, r3, #19
 8009440:	6113      	str	r3, [r2, #16]
 8009442:	e04e      	b.n	80094e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	0151      	lsls	r1, r2, #5
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	440a      	add	r2, r1
 800945a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800945e:	0cdb      	lsrs	r3, r3, #19
 8009460:	04db      	lsls	r3, r3, #19
 8009462:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	4413      	add	r3, r2
 800946c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	0151      	lsls	r1, r2, #5
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	440a      	add	r2, r1
 800947a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800947e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009482:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009486:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	695a      	ldr	r2, [r3, #20]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	429a      	cmp	r2, r3
 8009492:	d903      	bls.n	800949c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	689a      	ldr	r2, [r3, #8]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	0151      	lsls	r1, r2, #5
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	440a      	add	r2, r1
 80094b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c8:	691a      	ldr	r2, [r3, #16]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094d2:	6939      	ldr	r1, [r7, #16]
 80094d4:	0148      	lsls	r0, r1, #5
 80094d6:	6979      	ldr	r1, [r7, #20]
 80094d8:	4401      	add	r1, r0
 80094da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094de:	4313      	orrs	r3, r2
 80094e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80094e2:	79fb      	ldrb	r3, [r7, #7]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d11e      	bne.n	8009526 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d009      	beq.n	8009504 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fc:	461a      	mov	r2, r3
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	440a      	add	r2, r1
 800951a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	e092      	b.n	800964c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	0151      	lsls	r1, r2, #5
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	440a      	add	r2, r1
 800953c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009540:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009544:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d07e      	beq.n	800964c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	f003 030f 	and.w	r3, r3, #15
 800955e:	2101      	movs	r1, #1
 8009560:	fa01 f303 	lsl.w	r3, r1, r3
 8009564:	6979      	ldr	r1, [r7, #20]
 8009566:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800956a:	4313      	orrs	r3, r2
 800956c:	634b      	str	r3, [r1, #52]	; 0x34
 800956e:	e06d      	b.n	800964c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	693a      	ldr	r2, [r7, #16]
 8009580:	0151      	lsls	r1, r2, #5
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	440a      	add	r2, r1
 8009586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800958a:	0cdb      	lsrs	r3, r3, #19
 800958c:	04db      	lsls	r3, r3, #19
 800958e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	015a      	lsls	r2, r3, #5
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	4413      	add	r3, r2
 8009598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	0151      	lsls	r1, r2, #5
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	440a      	add	r2, r1
 80095a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80095ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80095b2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	0151      	lsls	r1, r2, #5
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	440a      	add	r2, r1
 80095da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f0:	691a      	ldr	r2, [r3, #16]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095fa:	6939      	ldr	r1, [r7, #16]
 80095fc:	0148      	lsls	r0, r1, #5
 80095fe:	6979      	ldr	r1, [r7, #20]
 8009600:	4401      	add	r1, r0
 8009602:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009606:	4313      	orrs	r3, r2
 8009608:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d10d      	bne.n	800962c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d009      	beq.n	800962c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	68d9      	ldr	r1, [r3, #12]
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009628:	460a      	mov	r2, r1
 800962a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	0151      	lsls	r1, r2, #5
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	440a      	add	r2, r1
 8009642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009646:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800964a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	371c      	adds	r7, #28
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800965a:	b480      	push	{r7}
 800965c:	b089      	sub	sp, #36	; 0x24
 800965e:	af00      	add	r7, sp, #0
 8009660:	60f8      	str	r0, [r7, #12]
 8009662:	60b9      	str	r1, [r7, #8]
 8009664:	4611      	mov	r1, r2
 8009666:	461a      	mov	r2, r3
 8009668:	460b      	mov	r3, r1
 800966a:	71fb      	strb	r3, [r7, #7]
 800966c:	4613      	mov	r3, r2
 800966e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009678:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800967c:	2b00      	cmp	r3, #0
 800967e:	d123      	bne.n	80096c8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009680:	88bb      	ldrh	r3, [r7, #4]
 8009682:	3303      	adds	r3, #3
 8009684:	089b      	lsrs	r3, r3, #2
 8009686:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009688:	2300      	movs	r3, #0
 800968a:	61bb      	str	r3, [r7, #24]
 800968c:	e018      	b.n	80096c0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800968e:	79fb      	ldrb	r3, [r7, #7]
 8009690:	031a      	lsls	r2, r3, #12
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	4413      	add	r3, r2
 8009696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800969a:	461a      	mov	r2, r3
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	3301      	adds	r3, #1
 80096a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	3301      	adds	r3, #1
 80096ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	3301      	adds	r3, #1
 80096b2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	3301      	adds	r3, #1
 80096b8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	3301      	adds	r3, #1
 80096be:	61bb      	str	r3, [r7, #24]
 80096c0:	69ba      	ldr	r2, [r7, #24]
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d3e2      	bcc.n	800968e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3724      	adds	r7, #36	; 0x24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b08b      	sub	sp, #44	; 0x2c
 80096da:	af00      	add	r7, sp, #0
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	60b9      	str	r1, [r7, #8]
 80096e0:	4613      	mov	r3, r2
 80096e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80096ec:	88fb      	ldrh	r3, [r7, #6]
 80096ee:	089b      	lsrs	r3, r3, #2
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80096f4:	88fb      	ldrh	r3, [r7, #6]
 80096f6:	f003 0303 	and.w	r3, r3, #3
 80096fa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80096fc:	2300      	movs	r3, #0
 80096fe:	623b      	str	r3, [r7, #32]
 8009700:	e014      	b.n	800972c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970c:	601a      	str	r2, [r3, #0]
    pDest++;
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	3301      	adds	r3, #1
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	3301      	adds	r3, #1
 8009718:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	3301      	adds	r3, #1
 800971e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009722:	3301      	adds	r3, #1
 8009724:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	3301      	adds	r3, #1
 800972a:	623b      	str	r3, [r7, #32]
 800972c:	6a3a      	ldr	r2, [r7, #32]
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	429a      	cmp	r2, r3
 8009732:	d3e6      	bcc.n	8009702 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009734:	8bfb      	ldrh	r3, [r7, #30]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d01e      	beq.n	8009778 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009744:	461a      	mov	r2, r3
 8009746:	f107 0310 	add.w	r3, r7, #16
 800974a:	6812      	ldr	r2, [r2, #0]
 800974c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	b2db      	uxtb	r3, r3
 8009754:	00db      	lsls	r3, r3, #3
 8009756:	fa22 f303 	lsr.w	r3, r2, r3
 800975a:	b2da      	uxtb	r2, r3
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	701a      	strb	r2, [r3, #0]
      i++;
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	3301      	adds	r3, #1
 8009764:	623b      	str	r3, [r7, #32]
      pDest++;
 8009766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009768:	3301      	adds	r3, #1
 800976a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800976c:	8bfb      	ldrh	r3, [r7, #30]
 800976e:	3b01      	subs	r3, #1
 8009770:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009772:	8bfb      	ldrh	r3, [r7, #30]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1ea      	bne.n	800974e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800977a:	4618      	mov	r0, r3
 800977c:	372c      	adds	r7, #44	; 0x2c
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009786:	b480      	push	{r7}
 8009788:	b085      	sub	sp, #20
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	785b      	ldrb	r3, [r3, #1]
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d12c      	bne.n	80097fc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	db12      	blt.n	80097da <USB_EPSetStall+0x54>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00f      	beq.n	80097da <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	0151      	lsls	r1, r2, #5
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	440a      	add	r2, r1
 80097d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80097d8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	015a      	lsls	r2, r3, #5
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	0151      	lsls	r1, r2, #5
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	440a      	add	r2, r1
 80097f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80097f8:	6013      	str	r3, [r2, #0]
 80097fa:	e02b      	b.n	8009854 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	db12      	blt.n	8009834 <USB_EPSetStall+0xae>
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00f      	beq.n	8009834 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	0151      	lsls	r1, r2, #5
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	440a      	add	r2, r1
 800982a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800982e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009832:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	0151      	lsls	r1, r2, #5
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	440a      	add	r2, r1
 800984a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800984e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009852:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009862:	b480      	push	{r7}
 8009864:	b085      	sub	sp, #20
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	785b      	ldrb	r3, [r3, #1]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d128      	bne.n	80098d0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4413      	add	r3, r2
 8009886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	0151      	lsls	r1, r2, #5
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	440a      	add	r2, r1
 8009894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009898:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800989c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	78db      	ldrb	r3, [r3, #3]
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d003      	beq.n	80098ae <USB_EPClearStall+0x4c>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	78db      	ldrb	r3, [r3, #3]
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d138      	bne.n	8009920 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	0151      	lsls	r1, r2, #5
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	440a      	add	r2, r1
 80098c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098cc:	6013      	str	r3, [r2, #0]
 80098ce:	e027      	b.n	8009920 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68ba      	ldr	r2, [r7, #8]
 80098e0:	0151      	lsls	r1, r2, #5
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	440a      	add	r2, r1
 80098e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	78db      	ldrb	r3, [r3, #3]
 80098f4:	2b03      	cmp	r3, #3
 80098f6:	d003      	beq.n	8009900 <USB_EPClearStall+0x9e>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	78db      	ldrb	r3, [r3, #3]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d10f      	bne.n	8009920 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	0151      	lsls	r1, r2, #5
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	440a      	add	r2, r1
 8009916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800991a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800991e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009920:	2300      	movs	r3, #0
}
 8009922:	4618      	mov	r0, r3
 8009924:	3714      	adds	r7, #20
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800992e:	b480      	push	{r7}
 8009930:	b085      	sub	sp, #20
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	460b      	mov	r3, r1
 8009938:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800994c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009950:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	78fb      	ldrb	r3, [r7, #3]
 800995c:	011b      	lsls	r3, r3, #4
 800995e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009962:	68f9      	ldr	r1, [r7, #12]
 8009964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009968:	4313      	orrs	r3, r2
 800996a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800997a:	b480      	push	{r7}
 800997c:	b085      	sub	sp, #20
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	4013      	ands	r3, r2
 8009990:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009992:	68fb      	ldr	r3, [r7, #12]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	4013      	ands	r3, r2
 80099c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	0c1b      	lsrs	r3, r3, #16
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3714      	adds	r7, #20
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	4013      	ands	r3, r2
 80099f6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	b29b      	uxth	r3, r3
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009a18:	78fb      	ldrb	r3, [r7, #3]
 8009a1a:	015a      	lsls	r2, r3, #5
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	68ba      	ldr	r2, [r7, #8]
 8009a32:	4013      	ands	r3, r2
 8009a34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a36:	68bb      	ldr	r3, [r7, #8]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a66:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	f003 030f 	and.w	r3, r3, #15
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	fa22 f303 	lsr.w	r3, r2, r3
 8009a74:	01db      	lsls	r3, r3, #7
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009a7e:	78fb      	ldrb	r3, [r7, #3]
 8009a80:	015a      	lsls	r2, r3, #5
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	4413      	add	r3, r2
 8009a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	4013      	ands	r3, r2
 8009a90:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a92:	68bb      	ldr	r3, [r7, #8]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	371c      	adds	r7, #28
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	f003 0301 	and.w	r3, r3, #1
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ad6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009ada:	f023 0307 	bic.w	r3, r3, #7
 8009ade:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009af2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009af4:	2300      	movs	r3, #0
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
	...

08009b04 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009b04:	b480      	push	{r7}
 8009b06:	b087      	sub	sp, #28
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	333c      	adds	r3, #60	; 0x3c
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	4a26      	ldr	r2, [pc, #152]	; (8009bbc <USB_EP0_OutStart+0xb8>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d90a      	bls.n	8009b3e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b38:	d101      	bne.n	8009b3e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	e037      	b.n	8009bae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b44:	461a      	mov	r2, r3
 8009b46:	2300      	movs	r3, #0
 8009b48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b6c:	f043 0318 	orr.w	r3, r3, #24
 8009b70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b80:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009b84:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009b86:	7afb      	ldrb	r3, [r7, #11]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d10f      	bne.n	8009bac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b92:	461a      	mov	r2, r3
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ba6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009baa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	4f54300a 	.word	0x4f54300a

08009bc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009bc4:	4904      	ldr	r1, [pc, #16]	; (8009bd8 <MX_FATFS_Init+0x18>)
 8009bc6:	4805      	ldr	r0, [pc, #20]	; (8009bdc <MX_FATFS_Init+0x1c>)
 8009bc8:	f001 f938 	bl	800ae3c <FATFS_LinkDriver>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	461a      	mov	r2, r3
 8009bd0:	4b03      	ldr	r3, [pc, #12]	; (8009be0 <MX_FATFS_Init+0x20>)
 8009bd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009bd4:	bf00      	nop
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	20000b3c 	.word	0x20000b3c
 8009bdc:	20000068 	.word	0x20000068
 8009be0:	20000b40 	.word	0x20000b40

08009be4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	4603      	mov	r3, r0
 8009bec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8009bee:	4b06      	ldr	r3, [pc, #24]	; (8009c08 <USER_initialize+0x24>)
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009bf4:	4b04      	ldr	r3, [pc, #16]	; (8009c08 <USER_initialize+0x24>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	20000065 	.word	0x20000065

08009c0c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8009c16:	4b06      	ldr	r3, [pc, #24]	; (8009c30 <USER_status+0x24>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009c1c:	4b04      	ldr	r3, [pc, #16]	; (8009c30 <USER_status+0x24>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	20000065 	.word	0x20000065

08009c34 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	607a      	str	r2, [r7, #4]
 8009c3e:	603b      	str	r3, [r7, #0]
 8009c40:	4603      	mov	r3, r0
 8009c42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8009c44:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b085      	sub	sp, #20
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	603b      	str	r3, [r7, #0]
 8009c5e:	4603      	mov	r3, r0
 8009c60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8009c62:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	603a      	str	r2, [r7, #0]
 8009c7a:	71fb      	strb	r3, [r7, #7]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8009c80:	2301      	movs	r3, #1
 8009c82:	73fb      	strb	r3, [r7, #15]
    return res;
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d009      	beq.n	8009cd6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	78fa      	ldrb	r2, [r7, #3]
 8009ccc:	4611      	mov	r1, r2
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	4798      	blx	r3
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	460b      	mov	r3, r1
 8009cea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d007      	beq.n	8009d06 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	78fa      	ldrb	r2, [r7, #3]
 8009d00:	4611      	mov	r1, r2
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	4798      	blx	r3
  }

  return USBD_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 ff90 	bl	800ac48 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009d36:	461a      	mov	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d44:	f003 031f 	and.w	r3, r3, #31
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d01a      	beq.n	8009d82 <USBD_LL_SetupStage+0x72>
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d822      	bhi.n	8009d96 <USBD_LL_SetupStage+0x86>
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <USBD_LL_SetupStage+0x4a>
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d00a      	beq.n	8009d6e <USBD_LL_SetupStage+0x5e>
 8009d58:	e01d      	b.n	8009d96 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 fa62 	bl	800a22c <USBD_StdDevReq>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d6c:	e020      	b.n	8009db0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fac6 	bl	800a308 <USBD_StdItfReq>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009d80:	e016      	b.n	8009db0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009d88:	4619      	mov	r1, r3
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fb05 	bl	800a39a <USBD_StdEPReq>
 8009d90:	4603      	mov	r3, r0
 8009d92:	73fb      	strb	r3, [r7, #15]
      break;
 8009d94:	e00c      	b.n	8009db0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009d9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f001 fd79 	bl	800b89c <USBD_LL_StallEP>
 8009daa:	4603      	mov	r3, r0
 8009dac:	73fb      	strb	r3, [r7, #15]
      break;
 8009dae:	bf00      	nop
  }

  return ret;
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}

08009dba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009dba:	b580      	push	{r7, lr}
 8009dbc:	b086      	sub	sp, #24
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	60f8      	str	r0, [r7, #12]
 8009dc2:	460b      	mov	r3, r1
 8009dc4:	607a      	str	r2, [r7, #4]
 8009dc6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009dc8:	7afb      	ldrb	r3, [r7, #11]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d138      	bne.n	8009e40 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009dd4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d14a      	bne.n	8009e76 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	689a      	ldr	r2, [r3, #8]
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d913      	bls.n	8009e14 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	689a      	ldr	r2, [r3, #8]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	1ad2      	subs	r2, r2, r3
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	68da      	ldr	r2, [r3, #12]
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	4293      	cmp	r3, r2
 8009e04:	bf28      	it	cs
 8009e06:	4613      	movcs	r3, r2
 8009e08:	461a      	mov	r2, r3
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f000 ff92 	bl	800ad36 <USBD_CtlContinueRx>
 8009e12:	e030      	b.n	8009e76 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	2b03      	cmp	r3, #3
 8009e1e:	d10b      	bne.n	8009e38 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d005      	beq.n	8009e38 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009e38:	68f8      	ldr	r0, [r7, #12]
 8009e3a:	f000 ff8d 	bl	800ad58 <USBD_CtlSendStatus>
 8009e3e:	e01a      	b.n	8009e76 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b03      	cmp	r3, #3
 8009e4a:	d114      	bne.n	8009e76 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e52:	699b      	ldr	r3, [r3, #24]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00e      	beq.n	8009e76 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e5e:	699b      	ldr	r3, [r3, #24]
 8009e60:	7afa      	ldrb	r2, [r7, #11]
 8009e62:	4611      	mov	r1, r2
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	4798      	blx	r3
 8009e68:	4603      	mov	r3, r0
 8009e6a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
 8009e74:	e000      	b.n	8009e78 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3718      	adds	r7, #24
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009e8e:	7afb      	ldrb	r3, [r7, #11]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d16b      	bne.n	8009f6c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	3314      	adds	r3, #20
 8009e98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d156      	bne.n	8009f52 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d914      	bls.n	8009eda <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	689a      	ldr	r2, [r3, #8]
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	1ad2      	subs	r2, r2, r3
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 ff24 	bl	800ad14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ecc:	2300      	movs	r3, #0
 8009ece:	2200      	movs	r2, #0
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f001 fd8c 	bl	800b9f0 <USBD_LL_PrepareReceive>
 8009ed8:	e03b      	b.n	8009f52 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	68da      	ldr	r2, [r3, #12]
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d11c      	bne.n	8009f20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	685a      	ldr	r2, [r3, #4]
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d316      	bcc.n	8009f20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d20f      	bcs.n	8009f20 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009f00:	2200      	movs	r2, #0
 8009f02:	2100      	movs	r1, #0
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 ff05 	bl	800ad14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f12:	2300      	movs	r3, #0
 8009f14:	2200      	movs	r2, #0
 8009f16:	2100      	movs	r1, #0
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f001 fd69 	bl	800b9f0 <USBD_LL_PrepareReceive>
 8009f1e:	e018      	b.n	8009f52 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	d10b      	bne.n	8009f44 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d005      	beq.n	8009f44 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f44:	2180      	movs	r1, #128	; 0x80
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f001 fca8 	bl	800b89c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f000 ff16 	bl	800ad7e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009f58:	2b01      	cmp	r3, #1
 8009f5a:	d122      	bne.n	8009fa2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7ff fe98 	bl	8009c92 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009f6a:	e01a      	b.n	8009fa2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d114      	bne.n	8009fa2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7e:	695b      	ldr	r3, [r3, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00e      	beq.n	8009fa2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	7afa      	ldrb	r2, [r7, #11]
 8009f8e:	4611      	mov	r1, r2
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	4798      	blx	r3
 8009f94:	4603      	mov	r3, r0
 8009f96:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8009f98:	7dfb      	ldrb	r3, [r7, #23]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8009f9e:	7dfb      	ldrb	r3, [r7, #23]
 8009fa0:	e000      	b.n	8009fa4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	e02f      	b.n	800a040 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00f      	beq.n	800a00a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d009      	beq.n	800a00a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	687a      	ldr	r2, [r7, #4]
 800a000:	6852      	ldr	r2, [r2, #4]
 800a002:	b2d2      	uxtb	r2, r2
 800a004:	4611      	mov	r1, r2
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a00a:	2340      	movs	r3, #64	; 0x40
 800a00c:	2200      	movs	r2, #0
 800a00e:	2100      	movs	r1, #0
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f001 fc1d 	bl	800b850 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2240      	movs	r2, #64	; 0x40
 800a022:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a026:	2340      	movs	r3, #64	; 0x40
 800a028:	2200      	movs	r2, #0
 800a02a:	2180      	movs	r1, #128	; 0x80
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f001 fc0f 	bl	800b850 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2240      	movs	r2, #64	; 0x40
 800a03c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3708      	adds	r7, #8
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	78fa      	ldrb	r2, [r7, #3]
 800a058:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a076:	b2da      	uxtb	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2204      	movs	r2, #4
 800a082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b04      	cmp	r3, #4
 800a0a6:	d106      	bne.n	800a0b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e012      	b.n	800a100 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	d10b      	bne.n	800a0fe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0ec:	69db      	ldr	r3, [r3, #28]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d005      	beq.n	800a0fe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0f8:	69db      	ldr	r3, [r3, #28]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a11e:	2303      	movs	r3, #3
 800a120:	e014      	b.n	800a14c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	d10d      	bne.n	800a14a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d007      	beq.n	800a14a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a140:	6a1b      	ldr	r3, [r3, #32]
 800a142:	78fa      	ldrb	r2, [r7, #3]
 800a144:	4611      	mov	r1, r2
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a16a:	2303      	movs	r3, #3
 800a16c:	e014      	b.n	800a198 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b03      	cmp	r3, #3
 800a178:	d10d      	bne.n	800a196 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a182:	2b00      	cmp	r3, #0
 800a184:	d007      	beq.n	800a196 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	78fa      	ldrb	r2, [r7, #3]
 800a190:	4611      	mov	r1, r2
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3708      	adds	r7, #8
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b083      	sub	sp, #12
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b082      	sub	sp, #8
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d009      	beq.n	800a1e4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	6852      	ldr	r2, [r2, #4]
 800a1dc:	b2d2      	uxtb	r2, r2
 800a1de:	4611      	mov	r1, r2
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	4798      	blx	r3
  }

  return USBD_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b087      	sub	sp, #28
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	3301      	adds	r3, #1
 800a204:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a20c:	8a3b      	ldrh	r3, [r7, #16]
 800a20e:	021b      	lsls	r3, r3, #8
 800a210:	b21a      	sxth	r2, r3
 800a212:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a216:	4313      	orrs	r3, r2
 800a218:	b21b      	sxth	r3, r3
 800a21a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a21c:	89fb      	ldrh	r3, [r7, #14]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	371c      	adds	r7, #28
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
	...

0800a22c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a242:	2b40      	cmp	r3, #64	; 0x40
 800a244:	d005      	beq.n	800a252 <USBD_StdDevReq+0x26>
 800a246:	2b40      	cmp	r3, #64	; 0x40
 800a248:	d853      	bhi.n	800a2f2 <USBD_StdDevReq+0xc6>
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00b      	beq.n	800a266 <USBD_StdDevReq+0x3a>
 800a24e:	2b20      	cmp	r3, #32
 800a250:	d14f      	bne.n	800a2f2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	4798      	blx	r3
 800a260:	4603      	mov	r3, r0
 800a262:	73fb      	strb	r3, [r7, #15]
      break;
 800a264:	e04a      	b.n	800a2fc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	785b      	ldrb	r3, [r3, #1]
 800a26a:	2b09      	cmp	r3, #9
 800a26c:	d83b      	bhi.n	800a2e6 <USBD_StdDevReq+0xba>
 800a26e:	a201      	add	r2, pc, #4	; (adr r2, 800a274 <USBD_StdDevReq+0x48>)
 800a270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a274:	0800a2c9 	.word	0x0800a2c9
 800a278:	0800a2dd 	.word	0x0800a2dd
 800a27c:	0800a2e7 	.word	0x0800a2e7
 800a280:	0800a2d3 	.word	0x0800a2d3
 800a284:	0800a2e7 	.word	0x0800a2e7
 800a288:	0800a2a7 	.word	0x0800a2a7
 800a28c:	0800a29d 	.word	0x0800a29d
 800a290:	0800a2e7 	.word	0x0800a2e7
 800a294:	0800a2bf 	.word	0x0800a2bf
 800a298:	0800a2b1 	.word	0x0800a2b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f9de 	bl	800a660 <USBD_GetDescriptor>
          break;
 800a2a4:	e024      	b.n	800a2f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fb43 	bl	800a934 <USBD_SetAddress>
          break;
 800a2ae:	e01f      	b.n	800a2f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 fb82 	bl	800a9bc <USBD_SetConfig>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	73fb      	strb	r3, [r7, #15]
          break;
 800a2bc:	e018      	b.n	800a2f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fc21 	bl	800ab08 <USBD_GetConfig>
          break;
 800a2c6:	e013      	b.n	800a2f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fc52 	bl	800ab74 <USBD_GetStatus>
          break;
 800a2d0:	e00e      	b.n	800a2f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fc81 	bl	800abdc <USBD_SetFeature>
          break;
 800a2da:	e009      	b.n	800a2f0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fc90 	bl	800ac04 <USBD_ClrFeature>
          break;
 800a2e4:	e004      	b.n	800a2f0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a2e6:	6839      	ldr	r1, [r7, #0]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fce7 	bl	800acbc <USBD_CtlError>
          break;
 800a2ee:	bf00      	nop
      }
      break;
 800a2f0:	e004      	b.n	800a2fc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 fce1 	bl	800acbc <USBD_CtlError>
      break;
 800a2fa:	bf00      	nop
  }

  return ret;
 800a2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop

0800a308 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a31e:	2b40      	cmp	r3, #64	; 0x40
 800a320:	d005      	beq.n	800a32e <USBD_StdItfReq+0x26>
 800a322:	2b40      	cmp	r3, #64	; 0x40
 800a324:	d82f      	bhi.n	800a386 <USBD_StdItfReq+0x7e>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <USBD_StdItfReq+0x26>
 800a32a:	2b20      	cmp	r3, #32
 800a32c:	d12b      	bne.n	800a386 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a334:	b2db      	uxtb	r3, r3
 800a336:	3b01      	subs	r3, #1
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d81d      	bhi.n	800a378 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	889b      	ldrh	r3, [r3, #4]
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b01      	cmp	r3, #1
 800a344:	d813      	bhi.n	800a36e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	4798      	blx	r3
 800a354:	4603      	mov	r3, r0
 800a356:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	88db      	ldrh	r3, [r3, #6]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d110      	bne.n	800a382 <USBD_StdItfReq+0x7a>
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10d      	bne.n	800a382 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fcf6 	bl	800ad58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a36c:	e009      	b.n	800a382 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fca3 	bl	800acbc <USBD_CtlError>
          break;
 800a376:	e004      	b.n	800a382 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a378:	6839      	ldr	r1, [r7, #0]
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fc9e 	bl	800acbc <USBD_CtlError>
          break;
 800a380:	e000      	b.n	800a384 <USBD_StdItfReq+0x7c>
          break;
 800a382:	bf00      	nop
      }
      break;
 800a384:	e004      	b.n	800a390 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 fc97 	bl	800acbc <USBD_CtlError>
      break;
 800a38e:	bf00      	nop
  }

  return ret;
 800a390:	7bfb      	ldrb	r3, [r7, #15]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b084      	sub	sp, #16
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	889b      	ldrh	r3, [r3, #4]
 800a3ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3b6:	2b40      	cmp	r3, #64	; 0x40
 800a3b8:	d007      	beq.n	800a3ca <USBD_StdEPReq+0x30>
 800a3ba:	2b40      	cmp	r3, #64	; 0x40
 800a3bc:	f200 8145 	bhi.w	800a64a <USBD_StdEPReq+0x2b0>
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00c      	beq.n	800a3de <USBD_StdEPReq+0x44>
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	f040 8140 	bne.w	800a64a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3d0:	689b      	ldr	r3, [r3, #8]
 800a3d2:	6839      	ldr	r1, [r7, #0]
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	4798      	blx	r3
 800a3d8:	4603      	mov	r3, r0
 800a3da:	73fb      	strb	r3, [r7, #15]
      break;
 800a3dc:	e13a      	b.n	800a654 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	785b      	ldrb	r3, [r3, #1]
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	d007      	beq.n	800a3f6 <USBD_StdEPReq+0x5c>
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	f300 8129 	bgt.w	800a63e <USBD_StdEPReq+0x2a4>
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d07f      	beq.n	800a4f0 <USBD_StdEPReq+0x156>
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d03c      	beq.n	800a46e <USBD_StdEPReq+0xd4>
 800a3f4:	e123      	b.n	800a63e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d002      	beq.n	800a408 <USBD_StdEPReq+0x6e>
 800a402:	2b03      	cmp	r3, #3
 800a404:	d016      	beq.n	800a434 <USBD_StdEPReq+0x9a>
 800a406:	e02c      	b.n	800a462 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00d      	beq.n	800a42a <USBD_StdEPReq+0x90>
 800a40e:	7bbb      	ldrb	r3, [r7, #14]
 800a410:	2b80      	cmp	r3, #128	; 0x80
 800a412:	d00a      	beq.n	800a42a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a414:	7bbb      	ldrb	r3, [r7, #14]
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f001 fa3f 	bl	800b89c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a41e:	2180      	movs	r1, #128	; 0x80
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f001 fa3b 	bl	800b89c <USBD_LL_StallEP>
 800a426:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a428:	e020      	b.n	800a46c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fc45 	bl	800acbc <USBD_CtlError>
              break;
 800a432:	e01b      	b.n	800a46c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	885b      	ldrh	r3, [r3, #2]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10e      	bne.n	800a45a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00b      	beq.n	800a45a <USBD_StdEPReq+0xc0>
 800a442:	7bbb      	ldrb	r3, [r7, #14]
 800a444:	2b80      	cmp	r3, #128	; 0x80
 800a446:	d008      	beq.n	800a45a <USBD_StdEPReq+0xc0>
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	88db      	ldrh	r3, [r3, #6]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d104      	bne.n	800a45a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a450:	7bbb      	ldrb	r3, [r7, #14]
 800a452:	4619      	mov	r1, r3
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 fa21 	bl	800b89c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fc7c 	bl	800ad58 <USBD_CtlSendStatus>

              break;
 800a460:	e004      	b.n	800a46c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fc29 	bl	800acbc <USBD_CtlError>
              break;
 800a46a:	bf00      	nop
          }
          break;
 800a46c:	e0ec      	b.n	800a648 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a474:	b2db      	uxtb	r3, r3
 800a476:	2b02      	cmp	r3, #2
 800a478:	d002      	beq.n	800a480 <USBD_StdEPReq+0xe6>
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	d016      	beq.n	800a4ac <USBD_StdEPReq+0x112>
 800a47e:	e030      	b.n	800a4e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a480:	7bbb      	ldrb	r3, [r7, #14]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00d      	beq.n	800a4a2 <USBD_StdEPReq+0x108>
 800a486:	7bbb      	ldrb	r3, [r7, #14]
 800a488:	2b80      	cmp	r3, #128	; 0x80
 800a48a:	d00a      	beq.n	800a4a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a48c:	7bbb      	ldrb	r3, [r7, #14]
 800a48e:	4619      	mov	r1, r3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f001 fa03 	bl	800b89c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a496:	2180      	movs	r1, #128	; 0x80
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f001 f9ff 	bl	800b89c <USBD_LL_StallEP>
 800a49e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4a0:	e025      	b.n	800a4ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fc09 	bl	800acbc <USBD_CtlError>
              break;
 800a4aa:	e020      	b.n	800a4ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	885b      	ldrh	r3, [r3, #2]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d11b      	bne.n	800a4ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d004      	beq.n	800a4c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a4be:	7bbb      	ldrb	r3, [r7, #14]
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f001 fa09 	bl	800b8da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fc45 	bl	800ad58 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	4798      	blx	r3
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a4e0:	e004      	b.n	800a4ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 fbe9 	bl	800acbc <USBD_CtlError>
              break;
 800a4ea:	e000      	b.n	800a4ee <USBD_StdEPReq+0x154>
              break;
 800a4ec:	bf00      	nop
          }
          break;
 800a4ee:	e0ab      	b.n	800a648 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d002      	beq.n	800a502 <USBD_StdEPReq+0x168>
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d032      	beq.n	800a566 <USBD_StdEPReq+0x1cc>
 800a500:	e097      	b.n	800a632 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a502:	7bbb      	ldrb	r3, [r7, #14]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d007      	beq.n	800a518 <USBD_StdEPReq+0x17e>
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	2b80      	cmp	r3, #128	; 0x80
 800a50c:	d004      	beq.n	800a518 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a50e:	6839      	ldr	r1, [r7, #0]
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 fbd3 	bl	800acbc <USBD_CtlError>
                break;
 800a516:	e091      	b.n	800a63c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	da0b      	bge.n	800a538 <USBD_StdEPReq+0x19e>
 800a520:	7bbb      	ldrb	r3, [r7, #14]
 800a522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a526:	4613      	mov	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	4413      	add	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	3310      	adds	r3, #16
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	4413      	add	r3, r2
 800a534:	3304      	adds	r3, #4
 800a536:	e00b      	b.n	800a550 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a538:	7bbb      	ldrb	r3, [r7, #14]
 800a53a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a53e:	4613      	mov	r3, r2
 800a540:	009b      	lsls	r3, r3, #2
 800a542:	4413      	add	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	4413      	add	r3, r2
 800a54e:	3304      	adds	r3, #4
 800a550:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	2200      	movs	r2, #0
 800a556:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	2202      	movs	r2, #2
 800a55c:	4619      	mov	r1, r3
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fbbd 	bl	800acde <USBD_CtlSendData>
              break;
 800a564:	e06a      	b.n	800a63c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	da11      	bge.n	800a592 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
 800a570:	f003 020f 	and.w	r2, r3, #15
 800a574:	6879      	ldr	r1, [r7, #4]
 800a576:	4613      	mov	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	440b      	add	r3, r1
 800a580:	3324      	adds	r3, #36	; 0x24
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d117      	bne.n	800a5b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fb96 	bl	800acbc <USBD_CtlError>
                  break;
 800a590:	e054      	b.n	800a63c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a592:	7bbb      	ldrb	r3, [r7, #14]
 800a594:	f003 020f 	and.w	r2, r3, #15
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	4613      	mov	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	440b      	add	r3, r1
 800a5a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d104      	bne.n	800a5b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fb83 	bl	800acbc <USBD_CtlError>
                  break;
 800a5b6:	e041      	b.n	800a63c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	da0b      	bge.n	800a5d8 <USBD_StdEPReq+0x23e>
 800a5c0:	7bbb      	ldrb	r3, [r7, #14]
 800a5c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	4413      	add	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	3310      	adds	r3, #16
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	e00b      	b.n	800a5f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
 800a5da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5de:	4613      	mov	r3, r2
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4413      	add	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5f2:	7bbb      	ldrb	r3, [r7, #14]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d002      	beq.n	800a5fe <USBD_StdEPReq+0x264>
 800a5f8:	7bbb      	ldrb	r3, [r7, #14]
 800a5fa:	2b80      	cmp	r3, #128	; 0x80
 800a5fc:	d103      	bne.n	800a606 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	2200      	movs	r2, #0
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	e00e      	b.n	800a624 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a606:	7bbb      	ldrb	r3, [r7, #14]
 800a608:	4619      	mov	r1, r3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 f984 	bl	800b918 <USBD_LL_IsStallEP>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d003      	beq.n	800a61e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	2201      	movs	r2, #1
 800a61a:	601a      	str	r2, [r3, #0]
 800a61c:	e002      	b.n	800a624 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	2200      	movs	r2, #0
 800a622:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2202      	movs	r2, #2
 800a628:	4619      	mov	r1, r3
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fb57 	bl	800acde <USBD_CtlSendData>
              break;
 800a630:	e004      	b.n	800a63c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fb41 	bl	800acbc <USBD_CtlError>
              break;
 800a63a:	bf00      	nop
          }
          break;
 800a63c:	e004      	b.n	800a648 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fb3b 	bl	800acbc <USBD_CtlError>
          break;
 800a646:	bf00      	nop
      }
      break;
 800a648:	e004      	b.n	800a654 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 fb35 	bl	800acbc <USBD_CtlError>
      break;
 800a652:	bf00      	nop
  }

  return ret;
 800a654:	7bfb      	ldrb	r3, [r7, #15]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
	...

0800a660 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a66a:	2300      	movs	r3, #0
 800a66c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a66e:	2300      	movs	r3, #0
 800a670:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a672:	2300      	movs	r3, #0
 800a674:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	885b      	ldrh	r3, [r3, #2]
 800a67a:	0a1b      	lsrs	r3, r3, #8
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	3b01      	subs	r3, #1
 800a680:	2b06      	cmp	r3, #6
 800a682:	f200 8128 	bhi.w	800a8d6 <USBD_GetDescriptor+0x276>
 800a686:	a201      	add	r2, pc, #4	; (adr r2, 800a68c <USBD_GetDescriptor+0x2c>)
 800a688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68c:	0800a6a9 	.word	0x0800a6a9
 800a690:	0800a6c1 	.word	0x0800a6c1
 800a694:	0800a701 	.word	0x0800a701
 800a698:	0800a8d7 	.word	0x0800a8d7
 800a69c:	0800a8d7 	.word	0x0800a8d7
 800a6a0:	0800a877 	.word	0x0800a877
 800a6a4:	0800a8a3 	.word	0x0800a8a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	7c12      	ldrb	r2, [r2, #16]
 800a6b4:	f107 0108 	add.w	r1, r7, #8
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	4798      	blx	r3
 800a6bc:	60f8      	str	r0, [r7, #12]
      break;
 800a6be:	e112      	b.n	800a8e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	7c1b      	ldrb	r3, [r3, #16]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10d      	bne.n	800a6e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d0:	f107 0208 	add.w	r2, r7, #8
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	4798      	blx	r3
 800a6d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	2202      	movs	r2, #2
 800a6e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6e2:	e100      	b.n	800a8e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ec:	f107 0208 	add.w	r2, r7, #8
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	4798      	blx	r3
 800a6f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	701a      	strb	r2, [r3, #0]
      break;
 800a6fe:	e0f2      	b.n	800a8e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	885b      	ldrh	r3, [r3, #2]
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b05      	cmp	r3, #5
 800a708:	f200 80ac 	bhi.w	800a864 <USBD_GetDescriptor+0x204>
 800a70c:	a201      	add	r2, pc, #4	; (adr r2, 800a714 <USBD_GetDescriptor+0xb4>)
 800a70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a712:	bf00      	nop
 800a714:	0800a72d 	.word	0x0800a72d
 800a718:	0800a761 	.word	0x0800a761
 800a71c:	0800a795 	.word	0x0800a795
 800a720:	0800a7c9 	.word	0x0800a7c9
 800a724:	0800a7fd 	.word	0x0800a7fd
 800a728:	0800a831 	.word	0x0800a831
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00b      	beq.n	800a750 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	7c12      	ldrb	r2, [r2, #16]
 800a744:	f107 0108 	add.w	r1, r7, #8
 800a748:	4610      	mov	r0, r2
 800a74a:	4798      	blx	r3
 800a74c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a74e:	e091      	b.n	800a874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a750:	6839      	ldr	r1, [r7, #0]
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 fab2 	bl	800acbc <USBD_CtlError>
            err++;
 800a758:	7afb      	ldrb	r3, [r7, #11]
 800a75a:	3301      	adds	r3, #1
 800a75c:	72fb      	strb	r3, [r7, #11]
          break;
 800a75e:	e089      	b.n	800a874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00b      	beq.n	800a784 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a772:	689b      	ldr	r3, [r3, #8]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	7c12      	ldrb	r2, [r2, #16]
 800a778:	f107 0108 	add.w	r1, r7, #8
 800a77c:	4610      	mov	r0, r2
 800a77e:	4798      	blx	r3
 800a780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a782:	e077      	b.n	800a874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fa98 	bl	800acbc <USBD_CtlError>
            err++;
 800a78c:	7afb      	ldrb	r3, [r7, #11]
 800a78e:	3301      	adds	r3, #1
 800a790:	72fb      	strb	r3, [r7, #11]
          break;
 800a792:	e06f      	b.n	800a874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d00b      	beq.n	800a7b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	7c12      	ldrb	r2, [r2, #16]
 800a7ac:	f107 0108 	add.w	r1, r7, #8
 800a7b0:	4610      	mov	r0, r2
 800a7b2:	4798      	blx	r3
 800a7b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7b6:	e05d      	b.n	800a874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fa7e 	bl	800acbc <USBD_CtlError>
            err++;
 800a7c0:	7afb      	ldrb	r3, [r7, #11]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a7c6:	e055      	b.n	800a874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00b      	beq.n	800a7ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	7c12      	ldrb	r2, [r2, #16]
 800a7e0:	f107 0108 	add.w	r1, r7, #8
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	4798      	blx	r3
 800a7e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7ea:	e043      	b.n	800a874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7ec:	6839      	ldr	r1, [r7, #0]
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 fa64 	bl	800acbc <USBD_CtlError>
            err++;
 800a7f4:	7afb      	ldrb	r3, [r7, #11]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a7fa:	e03b      	b.n	800a874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a802:	695b      	ldr	r3, [r3, #20]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00b      	beq.n	800a820 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	7c12      	ldrb	r2, [r2, #16]
 800a814:	f107 0108 	add.w	r1, r7, #8
 800a818:	4610      	mov	r0, r2
 800a81a:	4798      	blx	r3
 800a81c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a81e:	e029      	b.n	800a874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 fa4a 	bl	800acbc <USBD_CtlError>
            err++;
 800a828:	7afb      	ldrb	r3, [r7, #11]
 800a82a:	3301      	adds	r3, #1
 800a82c:	72fb      	strb	r3, [r7, #11]
          break;
 800a82e:	e021      	b.n	800a874 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00b      	beq.n	800a854 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	7c12      	ldrb	r2, [r2, #16]
 800a848:	f107 0108 	add.w	r1, r7, #8
 800a84c:	4610      	mov	r0, r2
 800a84e:	4798      	blx	r3
 800a850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a852:	e00f      	b.n	800a874 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fa30 	bl	800acbc <USBD_CtlError>
            err++;
 800a85c:	7afb      	ldrb	r3, [r7, #11]
 800a85e:	3301      	adds	r3, #1
 800a860:	72fb      	strb	r3, [r7, #11]
          break;
 800a862:	e007      	b.n	800a874 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 fa28 	bl	800acbc <USBD_CtlError>
          err++;
 800a86c:	7afb      	ldrb	r3, [r7, #11]
 800a86e:	3301      	adds	r3, #1
 800a870:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800a872:	bf00      	nop
      }
      break;
 800a874:	e037      	b.n	800a8e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	7c1b      	ldrb	r3, [r3, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d109      	bne.n	800a892 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a886:	f107 0208 	add.w	r2, r7, #8
 800a88a:	4610      	mov	r0, r2
 800a88c:	4798      	blx	r3
 800a88e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a890:	e029      	b.n	800a8e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fa11 	bl	800acbc <USBD_CtlError>
        err++;
 800a89a:	7afb      	ldrb	r3, [r7, #11]
 800a89c:	3301      	adds	r3, #1
 800a89e:	72fb      	strb	r3, [r7, #11]
      break;
 800a8a0:	e021      	b.n	800a8e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	7c1b      	ldrb	r3, [r3, #16]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10d      	bne.n	800a8c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b2:	f107 0208 	add.w	r2, r7, #8
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	4798      	blx	r3
 800a8ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	2207      	movs	r2, #7
 800a8c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8c4:	e00f      	b.n	800a8e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f9f7 	bl	800acbc <USBD_CtlError>
        err++;
 800a8ce:	7afb      	ldrb	r3, [r7, #11]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	72fb      	strb	r3, [r7, #11]
      break;
 800a8d4:	e007      	b.n	800a8e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a8d6:	6839      	ldr	r1, [r7, #0]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f9ef 	bl	800acbc <USBD_CtlError>
      err++;
 800a8de:	7afb      	ldrb	r3, [r7, #11]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a8e4:	bf00      	nop
  }

  if (err != 0U)
 800a8e6:	7afb      	ldrb	r3, [r7, #11]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d11e      	bne.n	800a92a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	88db      	ldrh	r3, [r3, #6]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d016      	beq.n	800a922 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a8f4:	893b      	ldrh	r3, [r7, #8]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d00e      	beq.n	800a918 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	88da      	ldrh	r2, [r3, #6]
 800a8fe:	893b      	ldrh	r3, [r7, #8]
 800a900:	4293      	cmp	r3, r2
 800a902:	bf28      	it	cs
 800a904:	4613      	movcs	r3, r2
 800a906:	b29b      	uxth	r3, r3
 800a908:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a90a:	893b      	ldrh	r3, [r7, #8]
 800a90c:	461a      	mov	r2, r3
 800a90e:	68f9      	ldr	r1, [r7, #12]
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 f9e4 	bl	800acde <USBD_CtlSendData>
 800a916:	e009      	b.n	800a92c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f9ce 	bl	800acbc <USBD_CtlError>
 800a920:	e004      	b.n	800a92c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fa18 	bl	800ad58 <USBD_CtlSendStatus>
 800a928:	e000      	b.n	800a92c <USBD_GetDescriptor+0x2cc>
    return;
 800a92a:	bf00      	nop
  }
}
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop

0800a934 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	889b      	ldrh	r3, [r3, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d131      	bne.n	800a9aa <USBD_SetAddress+0x76>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	88db      	ldrh	r3, [r3, #6]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d12d      	bne.n	800a9aa <USBD_SetAddress+0x76>
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	885b      	ldrh	r3, [r3, #2]
 800a952:	2b7f      	cmp	r3, #127	; 0x7f
 800a954:	d829      	bhi.n	800a9aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	885b      	ldrh	r3, [r3, #2]
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a960:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b03      	cmp	r3, #3
 800a96c:	d104      	bne.n	800a978 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a96e:	6839      	ldr	r1, [r7, #0]
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f9a3 	bl	800acbc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a976:	e01d      	b.n	800a9b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	7bfa      	ldrb	r2, [r7, #15]
 800a97c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a980:	7bfb      	ldrb	r3, [r7, #15]
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fff3 	bl	800b970 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f9e4 	bl	800ad58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d004      	beq.n	800a9a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2202      	movs	r2, #2
 800a99a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a99e:	e009      	b.n	800a9b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9a8:	e004      	b.n	800a9b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f985 	bl	800acbc <USBD_CtlError>
  }
}
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	885b      	ldrh	r3, [r3, #2]
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	4b4c      	ldr	r3, [pc, #304]	; (800ab04 <USBD_SetConfig+0x148>)
 800a9d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9d4:	4b4b      	ldr	r3, [pc, #300]	; (800ab04 <USBD_SetConfig+0x148>)
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d905      	bls.n	800a9e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 f96c 	bl	800acbc <USBD_CtlError>
    return USBD_FAIL;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e088      	b.n	800aafa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	d002      	beq.n	800a9fa <USBD_SetConfig+0x3e>
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d025      	beq.n	800aa44 <USBD_SetConfig+0x88>
 800a9f8:	e071      	b.n	800aade <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a9fa:	4b42      	ldr	r3, [pc, #264]	; (800ab04 <USBD_SetConfig+0x148>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d01c      	beq.n	800aa3c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800aa02:	4b40      	ldr	r3, [pc, #256]	; (800ab04 <USBD_SetConfig+0x148>)
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa0c:	4b3d      	ldr	r3, [pc, #244]	; (800ab04 <USBD_SetConfig+0x148>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff f948 	bl	8009ca8 <USBD_SetClassConfig>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d004      	beq.n	800aa2c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f949 	bl	800acbc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa2a:	e065      	b.n	800aaf8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 f993 	bl	800ad58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2203      	movs	r2, #3
 800aa36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aa3a:	e05d      	b.n	800aaf8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f98b 	bl	800ad58 <USBD_CtlSendStatus>
      break;
 800aa42:	e059      	b.n	800aaf8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aa44:	4b2f      	ldr	r3, [pc, #188]	; (800ab04 <USBD_SetConfig+0x148>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d112      	bne.n	800aa72 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aa54:	4b2b      	ldr	r3, [pc, #172]	; (800ab04 <USBD_SetConfig+0x148>)
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	461a      	mov	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aa5e:	4b29      	ldr	r3, [pc, #164]	; (800ab04 <USBD_SetConfig+0x148>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7ff f93b 	bl	8009ce0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f974 	bl	800ad58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aa70:	e042      	b.n	800aaf8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800aa72:	4b24      	ldr	r3, [pc, #144]	; (800ab04 <USBD_SetConfig+0x148>)
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d02a      	beq.n	800aad6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff f929 	bl	8009ce0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aa8e:	4b1d      	ldr	r3, [pc, #116]	; (800ab04 <USBD_SetConfig+0x148>)
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa98:	4b1a      	ldr	r3, [pc, #104]	; (800ab04 <USBD_SetConfig+0x148>)
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f7ff f902 	bl	8009ca8 <USBD_SetClassConfig>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00f      	beq.n	800aace <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f903 	bl	800acbc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	4619      	mov	r1, r3
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7ff f90e 	bl	8009ce0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2202      	movs	r2, #2
 800aac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aacc:	e014      	b.n	800aaf8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f942 	bl	800ad58 <USBD_CtlSendStatus>
      break;
 800aad4:	e010      	b.n	800aaf8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 f93e 	bl	800ad58 <USBD_CtlSendStatus>
      break;
 800aadc:	e00c      	b.n	800aaf8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800aade:	6839      	ldr	r1, [r7, #0]
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 f8eb 	bl	800acbc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aae6:	4b07      	ldr	r3, [pc, #28]	; (800ab04 <USBD_SetConfig+0x148>)
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	4619      	mov	r1, r3
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f7ff f8f7 	bl	8009ce0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	73fb      	strb	r3, [r7, #15]
      break;
 800aaf6:	bf00      	nop
  }

  return ret;
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	200002a8 	.word	0x200002a8

0800ab08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	88db      	ldrh	r3, [r3, #6]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d004      	beq.n	800ab24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ab1a:	6839      	ldr	r1, [r7, #0]
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 f8cd 	bl	800acbc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab22:	e023      	b.n	800ab6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	dc02      	bgt.n	800ab36 <USBD_GetConfig+0x2e>
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	dc03      	bgt.n	800ab3c <USBD_GetConfig+0x34>
 800ab34:	e015      	b.n	800ab62 <USBD_GetConfig+0x5a>
 800ab36:	2b03      	cmp	r3, #3
 800ab38:	d00b      	beq.n	800ab52 <USBD_GetConfig+0x4a>
 800ab3a:	e012      	b.n	800ab62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	3308      	adds	r3, #8
 800ab46:	2201      	movs	r2, #1
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 f8c7 	bl	800acde <USBD_CtlSendData>
        break;
 800ab50:	e00c      	b.n	800ab6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	3304      	adds	r3, #4
 800ab56:	2201      	movs	r2, #1
 800ab58:	4619      	mov	r1, r3
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f8bf 	bl	800acde <USBD_CtlSendData>
        break;
 800ab60:	e004      	b.n	800ab6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ab62:	6839      	ldr	r1, [r7, #0]
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f000 f8a9 	bl	800acbc <USBD_CtlError>
        break;
 800ab6a:	bf00      	nop
}
 800ab6c:	bf00      	nop
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	3b01      	subs	r3, #1
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d81e      	bhi.n	800abca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	88db      	ldrh	r3, [r3, #6]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d004      	beq.n	800ab9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f890 	bl	800acbc <USBD_CtlError>
        break;
 800ab9c:	e01a      	b.n	800abd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d005      	beq.n	800abba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	f043 0202 	orr.w	r2, r3, #2
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	330c      	adds	r3, #12
 800abbe:	2202      	movs	r2, #2
 800abc0:	4619      	mov	r1, r3
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f88b 	bl	800acde <USBD_CtlSendData>
      break;
 800abc8:	e004      	b.n	800abd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800abca:	6839      	ldr	r1, [r7, #0]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f875 	bl	800acbc <USBD_CtlError>
      break;
 800abd2:	bf00      	nop
  }
}
 800abd4:	bf00      	nop
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	885b      	ldrh	r3, [r3, #2]
 800abea:	2b01      	cmp	r3, #1
 800abec:	d106      	bne.n	800abfc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f8ae 	bl	800ad58 <USBD_CtlSendStatus>
  }
}
 800abfc:	bf00      	nop
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	3b01      	subs	r3, #1
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d80b      	bhi.n	800ac34 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	885b      	ldrh	r3, [r3, #2]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d10c      	bne.n	800ac3e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f893 	bl	800ad58 <USBD_CtlSendStatus>
      }
      break;
 800ac32:	e004      	b.n	800ac3e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f840 	bl	800acbc <USBD_CtlError>
      break;
 800ac3c:	e000      	b.n	800ac40 <USBD_ClrFeature+0x3c>
      break;
 800ac3e:	bf00      	nop
  }
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	781a      	ldrb	r2, [r3, #0]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3301      	adds	r3, #1
 800ac62:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	781a      	ldrb	r2, [r3, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f7ff fabb 	bl	800a1ee <SWAPBYTE>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3301      	adds	r3, #1
 800ac84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f7ff faae 	bl	800a1ee <SWAPBYTE>
 800ac92:	4603      	mov	r3, r0
 800ac94:	461a      	mov	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3301      	adds	r3, #1
 800aca4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff faa1 	bl	800a1ee <SWAPBYTE>
 800acac:	4603      	mov	r3, r0
 800acae:	461a      	mov	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	80da      	strh	r2, [r3, #6]
}
 800acb4:	bf00      	nop
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800acc6:	2180      	movs	r1, #128	; 0x80
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fde7 	bl	800b89c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800acce:	2100      	movs	r1, #0
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 fde3 	bl	800b89c <USBD_LL_StallEP>
}
 800acd6:	bf00      	nop
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b084      	sub	sp, #16
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	60f8      	str	r0, [r7, #12]
 800ace6:	60b9      	str	r1, [r7, #8]
 800ace8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2202      	movs	r2, #2
 800acee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	687a      	ldr	r2, [r7, #4]
 800acf6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	2100      	movs	r1, #0
 800ad04:	68f8      	ldr	r0, [r7, #12]
 800ad06:	f000 fe52 	bl	800b9ae <USBD_LL_Transmit>

  return USBD_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	2100      	movs	r1, #0
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f000 fe41 	bl	800b9ae <USBD_LL_Transmit>

  return USBD_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3710      	adds	r7, #16
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b084      	sub	sp, #16
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	60f8      	str	r0, [r7, #12]
 800ad3e:	60b9      	str	r1, [r7, #8]
 800ad40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	2100      	movs	r1, #0
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f000 fe51 	bl	800b9f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3710      	adds	r7, #16
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2204      	movs	r2, #4
 800ad64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad68:	2300      	movs	r3, #0
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2100      	movs	r1, #0
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fe1d 	bl	800b9ae <USBD_LL_Transmit>

  return USBD_OK;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2205      	movs	r2, #5
 800ad8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad8e:	2300      	movs	r3, #0
 800ad90:	2200      	movs	r2, #0
 800ad92:	2100      	movs	r1, #0
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fe2b 	bl	800b9f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	4613      	mov	r3, r2
 800adb0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800adb2:	2301      	movs	r3, #1
 800adb4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800adba:	4b1f      	ldr	r3, [pc, #124]	; (800ae38 <FATFS_LinkDriverEx+0x94>)
 800adbc:	7a5b      	ldrb	r3, [r3, #9]
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d131      	bne.n	800ae28 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800adc4:	4b1c      	ldr	r3, [pc, #112]	; (800ae38 <FATFS_LinkDriverEx+0x94>)
 800adc6:	7a5b      	ldrb	r3, [r3, #9]
 800adc8:	b2db      	uxtb	r3, r3
 800adca:	461a      	mov	r2, r3
 800adcc:	4b1a      	ldr	r3, [pc, #104]	; (800ae38 <FATFS_LinkDriverEx+0x94>)
 800adce:	2100      	movs	r1, #0
 800add0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800add2:	4b19      	ldr	r3, [pc, #100]	; (800ae38 <FATFS_LinkDriverEx+0x94>)
 800add4:	7a5b      	ldrb	r3, [r3, #9]
 800add6:	b2db      	uxtb	r3, r3
 800add8:	4a17      	ldr	r2, [pc, #92]	; (800ae38 <FATFS_LinkDriverEx+0x94>)
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4413      	add	r3, r2
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ade2:	4b15      	ldr	r3, [pc, #84]	; (800ae38 <FATFS_LinkDriverEx+0x94>)
 800ade4:	7a5b      	ldrb	r3, [r3, #9]
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	461a      	mov	r2, r3
 800adea:	4b13      	ldr	r3, [pc, #76]	; (800ae38 <FATFS_LinkDriverEx+0x94>)
 800adec:	4413      	add	r3, r2
 800adee:	79fa      	ldrb	r2, [r7, #7]
 800adf0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800adf2:	4b11      	ldr	r3, [pc, #68]	; (800ae38 <FATFS_LinkDriverEx+0x94>)
 800adf4:	7a5b      	ldrb	r3, [r3, #9]
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	b2d1      	uxtb	r1, r2
 800adfc:	4a0e      	ldr	r2, [pc, #56]	; (800ae38 <FATFS_LinkDriverEx+0x94>)
 800adfe:	7251      	strb	r1, [r2, #9]
 800ae00:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ae02:	7dbb      	ldrb	r3, [r7, #22]
 800ae04:	3330      	adds	r3, #48	; 0x30
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	223a      	movs	r2, #58	; 0x3a
 800ae12:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	3302      	adds	r3, #2
 800ae18:	222f      	movs	r2, #47	; 0x2f
 800ae1a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	3303      	adds	r3, #3
 800ae20:	2200      	movs	r2, #0
 800ae22:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ae28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	371c      	adds	r7, #28
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	200002ac 	.word	0x200002ac

0800ae3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ae46:	2200      	movs	r2, #0
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7ff ffaa 	bl	800ada4 <FATFS_LinkDriverEx>
 800ae50:	4603      	mov	r3, r0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
	...

0800ae5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ae60:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <SysTick_Handler+0x1c>)
 800ae62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ae64:	f000 faca 	bl	800b3fc <xTaskGetSchedulerState>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d001      	beq.n	800ae72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ae6e:	f000 fbdb 	bl	800b628 <xPortSysTickHandler>
  }
}
 800ae72:	bf00      	nop
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	e000e010 	.word	0xe000e010

0800ae7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae84:	f3ef 8305 	mrs	r3, IPSR
 800ae88:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d003      	beq.n	800ae98 <osDelay+0x1c>
    stat = osErrorISR;
 800ae90:	f06f 0305 	mvn.w	r3, #5
 800ae94:	60fb      	str	r3, [r7, #12]
 800ae96:	e007      	b.n	800aea8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d002      	beq.n	800aea8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f88c 	bl	800afc0 <vTaskDelay>
    }
  }

  return (stat);
 800aea8:	68fb      	ldr	r3, [r7, #12]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b085      	sub	sp, #20
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	683a      	ldr	r2, [r7, #0]
 800aedc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	1c5a      	adds	r2, r3, #1
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	601a      	str	r2, [r3, #0]
}
 800aeee:	bf00      	nop
 800aef0:	3714      	adds	r7, #20
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aefa:	b480      	push	{r7}
 800aefc:	b085      	sub	sp, #20
 800aefe:	af00      	add	r7, sp, #0
 800af00:	6078      	str	r0, [r7, #4]
 800af02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af10:	d103      	bne.n	800af1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	60fb      	str	r3, [r7, #12]
 800af18:	e00c      	b.n	800af34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	3308      	adds	r3, #8
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	e002      	b.n	800af28 <vListInsert+0x2e>
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	60fb      	str	r3, [r7, #12]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	429a      	cmp	r2, r3
 800af32:	d2f6      	bcs.n	800af22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	683a      	ldr	r2, [r7, #0]
 800af42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	683a      	ldr	r2, [r7, #0]
 800af4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	1c5a      	adds	r2, r3, #1
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	601a      	str	r2, [r3, #0]
}
 800af60:	bf00      	nop
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	6892      	ldr	r2, [r2, #8]
 800af82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	6852      	ldr	r2, [r2, #4]
 800af8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	429a      	cmp	r2, r3
 800af96:	d103      	bne.n	800afa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	689a      	ldr	r2, [r3, #8]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	1e5a      	subs	r2, r3, #1
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800afc8:	2300      	movs	r3, #0
 800afca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d017      	beq.n	800b002 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800afd2:	4b13      	ldr	r3, [pc, #76]	; (800b020 <vTaskDelay+0x60>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <vTaskDelay+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800afda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800afec:	bf00      	nop
 800afee:	e7fe      	b.n	800afee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aff0:	f000 f81a 	bl	800b028 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aff4:	2100      	movs	r1, #0
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fa1e 	bl	800b438 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800affc:	f000 f822 	bl	800b044 <xTaskResumeAll>
 800b000:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d107      	bne.n	800b018 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b008:	4b06      	ldr	r3, [pc, #24]	; (800b024 <vTaskDelay+0x64>)
 800b00a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b00e:	601a      	str	r2, [r3, #0]
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b018:	bf00      	nop
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	2000076c 	.word	0x2000076c
 800b024:	e000ed04 	.word	0xe000ed04

0800b028 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b028:	b480      	push	{r7}
 800b02a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b02c:	4b04      	ldr	r3, [pc, #16]	; (800b040 <vTaskSuspendAll+0x18>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	3301      	adds	r3, #1
 800b032:	4a03      	ldr	r2, [pc, #12]	; (800b040 <vTaskSuspendAll+0x18>)
 800b034:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b036:	bf00      	nop
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr
 800b040:	2000076c 	.word	0x2000076c

0800b044 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b04a:	2300      	movs	r3, #0
 800b04c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b04e:	2300      	movs	r3, #0
 800b050:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b052:	4b42      	ldr	r3, [pc, #264]	; (800b15c <xTaskResumeAll+0x118>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10a      	bne.n	800b070 <xTaskResumeAll+0x2c>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	603b      	str	r3, [r7, #0]
}
 800b06c:	bf00      	nop
 800b06e:	e7fe      	b.n	800b06e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b070:	f000 fa4a 	bl	800b508 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b074:	4b39      	ldr	r3, [pc, #228]	; (800b15c <xTaskResumeAll+0x118>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3b01      	subs	r3, #1
 800b07a:	4a38      	ldr	r2, [pc, #224]	; (800b15c <xTaskResumeAll+0x118>)
 800b07c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b07e:	4b37      	ldr	r3, [pc, #220]	; (800b15c <xTaskResumeAll+0x118>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d162      	bne.n	800b14c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b086:	4b36      	ldr	r3, [pc, #216]	; (800b160 <xTaskResumeAll+0x11c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d05e      	beq.n	800b14c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b08e:	e02f      	b.n	800b0f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b090:	4b34      	ldr	r3, [pc, #208]	; (800b164 <xTaskResumeAll+0x120>)
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3318      	adds	r3, #24
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff ff65 	bl	800af6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7ff ff60 	bl	800af6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b0:	4b2d      	ldr	r3, [pc, #180]	; (800b168 <xTaskResumeAll+0x124>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d903      	bls.n	800b0c0 <xTaskResumeAll+0x7c>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0bc:	4a2a      	ldr	r2, [pc, #168]	; (800b168 <xTaskResumeAll+0x124>)
 800b0be:	6013      	str	r3, [r2, #0]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4a27      	ldr	r2, [pc, #156]	; (800b16c <xTaskResumeAll+0x128>)
 800b0ce:	441a      	add	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3304      	adds	r3, #4
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	f7ff feeb 	bl	800aeb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0e0:	4b23      	ldr	r3, [pc, #140]	; (800b170 <xTaskResumeAll+0x12c>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d302      	bcc.n	800b0f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b0ea:	4b22      	ldr	r3, [pc, #136]	; (800b174 <xTaskResumeAll+0x130>)
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0f0:	4b1c      	ldr	r3, [pc, #112]	; (800b164 <xTaskResumeAll+0x120>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d1cb      	bne.n	800b090 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0fe:	f000 f95d 	bl	800b3bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b102:	4b1d      	ldr	r3, [pc, #116]	; (800b178 <xTaskResumeAll+0x134>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d010      	beq.n	800b130 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b10e:	f000 f837 	bl	800b180 <xTaskIncrementTick>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b118:	4b16      	ldr	r3, [pc, #88]	; (800b174 <xTaskResumeAll+0x130>)
 800b11a:	2201      	movs	r2, #1
 800b11c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	3b01      	subs	r3, #1
 800b122:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1f1      	bne.n	800b10e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b12a:	4b13      	ldr	r3, [pc, #76]	; (800b178 <xTaskResumeAll+0x134>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b130:	4b10      	ldr	r3, [pc, #64]	; (800b174 <xTaskResumeAll+0x130>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d009      	beq.n	800b14c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b138:	2301      	movs	r3, #1
 800b13a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b13c:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <xTaskResumeAll+0x138>)
 800b13e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b142:	601a      	str	r2, [r3, #0]
 800b144:	f3bf 8f4f 	dsb	sy
 800b148:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b14c:	f000 fa0c 	bl	800b568 <vPortExitCritical>

	return xAlreadyYielded;
 800b150:	68bb      	ldr	r3, [r7, #8]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	2000076c 	.word	0x2000076c
 800b160:	2000074c 	.word	0x2000074c
 800b164:	20000724 	.word	0x20000724
 800b168:	20000754 	.word	0x20000754
 800b16c:	200002bc 	.word	0x200002bc
 800b170:	200002b8 	.word	0x200002b8
 800b174:	20000760 	.word	0x20000760
 800b178:	2000075c 	.word	0x2000075c
 800b17c:	e000ed04 	.word	0xe000ed04

0800b180 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b186:	2300      	movs	r3, #0
 800b188:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b18a:	4b4f      	ldr	r3, [pc, #316]	; (800b2c8 <xTaskIncrementTick+0x148>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f040 808f 	bne.w	800b2b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b194:	4b4d      	ldr	r3, [pc, #308]	; (800b2cc <xTaskIncrementTick+0x14c>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	3301      	adds	r3, #1
 800b19a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b19c:	4a4b      	ldr	r2, [pc, #300]	; (800b2cc <xTaskIncrementTick+0x14c>)
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d120      	bne.n	800b1ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1a8:	4b49      	ldr	r3, [pc, #292]	; (800b2d0 <xTaskIncrementTick+0x150>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00a      	beq.n	800b1c8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	603b      	str	r3, [r7, #0]
}
 800b1c4:	bf00      	nop
 800b1c6:	e7fe      	b.n	800b1c6 <xTaskIncrementTick+0x46>
 800b1c8:	4b41      	ldr	r3, [pc, #260]	; (800b2d0 <xTaskIncrementTick+0x150>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	4b41      	ldr	r3, [pc, #260]	; (800b2d4 <xTaskIncrementTick+0x154>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a3f      	ldr	r2, [pc, #252]	; (800b2d0 <xTaskIncrementTick+0x150>)
 800b1d4:	6013      	str	r3, [r2, #0]
 800b1d6:	4a3f      	ldr	r2, [pc, #252]	; (800b2d4 <xTaskIncrementTick+0x154>)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6013      	str	r3, [r2, #0]
 800b1dc:	4b3e      	ldr	r3, [pc, #248]	; (800b2d8 <xTaskIncrementTick+0x158>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	4a3d      	ldr	r2, [pc, #244]	; (800b2d8 <xTaskIncrementTick+0x158>)
 800b1e4:	6013      	str	r3, [r2, #0]
 800b1e6:	f000 f8e9 	bl	800b3bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b1ea:	4b3c      	ldr	r3, [pc, #240]	; (800b2dc <xTaskIncrementTick+0x15c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	693a      	ldr	r2, [r7, #16]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d349      	bcc.n	800b288 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1f4:	4b36      	ldr	r3, [pc, #216]	; (800b2d0 <xTaskIncrementTick+0x150>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d104      	bne.n	800b208 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1fe:	4b37      	ldr	r3, [pc, #220]	; (800b2dc <xTaskIncrementTick+0x15c>)
 800b200:	f04f 32ff 	mov.w	r2, #4294967295
 800b204:	601a      	str	r2, [r3, #0]
					break;
 800b206:	e03f      	b.n	800b288 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b208:	4b31      	ldr	r3, [pc, #196]	; (800b2d0 <xTaskIncrementTick+0x150>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b218:	693a      	ldr	r2, [r7, #16]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d203      	bcs.n	800b228 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b220:	4a2e      	ldr	r2, [pc, #184]	; (800b2dc <xTaskIncrementTick+0x15c>)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b226:	e02f      	b.n	800b288 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	3304      	adds	r3, #4
 800b22c:	4618      	mov	r0, r3
 800b22e:	f7ff fe9d 	bl	800af6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b236:	2b00      	cmp	r3, #0
 800b238:	d004      	beq.n	800b244 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	3318      	adds	r3, #24
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff fe94 	bl	800af6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b248:	4b25      	ldr	r3, [pc, #148]	; (800b2e0 <xTaskIncrementTick+0x160>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d903      	bls.n	800b258 <xTaskIncrementTick+0xd8>
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b254:	4a22      	ldr	r2, [pc, #136]	; (800b2e0 <xTaskIncrementTick+0x160>)
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b25c:	4613      	mov	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4a1f      	ldr	r2, [pc, #124]	; (800b2e4 <xTaskIncrementTick+0x164>)
 800b266:	441a      	add	r2, r3
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	3304      	adds	r3, #4
 800b26c:	4619      	mov	r1, r3
 800b26e:	4610      	mov	r0, r2
 800b270:	f7ff fe1f 	bl	800aeb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b278:	4b1b      	ldr	r3, [pc, #108]	; (800b2e8 <xTaskIncrementTick+0x168>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27e:	429a      	cmp	r2, r3
 800b280:	d3b8      	bcc.n	800b1f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b282:	2301      	movs	r3, #1
 800b284:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b286:	e7b5      	b.n	800b1f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b288:	4b17      	ldr	r3, [pc, #92]	; (800b2e8 <xTaskIncrementTick+0x168>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b28e:	4915      	ldr	r1, [pc, #84]	; (800b2e4 <xTaskIncrementTick+0x164>)
 800b290:	4613      	mov	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	440b      	add	r3, r1
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d901      	bls.n	800b2a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2a4:	4b11      	ldr	r3, [pc, #68]	; (800b2ec <xTaskIncrementTick+0x16c>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d007      	beq.n	800b2bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	617b      	str	r3, [r7, #20]
 800b2b0:	e004      	b.n	800b2bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2b2:	4b0f      	ldr	r3, [pc, #60]	; (800b2f0 <xTaskIncrementTick+0x170>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	4a0d      	ldr	r2, [pc, #52]	; (800b2f0 <xTaskIncrementTick+0x170>)
 800b2ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2bc:	697b      	ldr	r3, [r7, #20]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3718      	adds	r7, #24
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	2000076c 	.word	0x2000076c
 800b2cc:	20000750 	.word	0x20000750
 800b2d0:	2000071c 	.word	0x2000071c
 800b2d4:	20000720 	.word	0x20000720
 800b2d8:	20000764 	.word	0x20000764
 800b2dc:	20000768 	.word	0x20000768
 800b2e0:	20000754 	.word	0x20000754
 800b2e4:	200002bc 	.word	0x200002bc
 800b2e8:	200002b8 	.word	0x200002b8
 800b2ec:	20000760 	.word	0x20000760
 800b2f0:	2000075c 	.word	0x2000075c

0800b2f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2fa:	4b2a      	ldr	r3, [pc, #168]	; (800b3a4 <vTaskSwitchContext+0xb0>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d003      	beq.n	800b30a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b302:	4b29      	ldr	r3, [pc, #164]	; (800b3a8 <vTaskSwitchContext+0xb4>)
 800b304:	2201      	movs	r2, #1
 800b306:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b308:	e046      	b.n	800b398 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b30a:	4b27      	ldr	r3, [pc, #156]	; (800b3a8 <vTaskSwitchContext+0xb4>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b310:	4b26      	ldr	r3, [pc, #152]	; (800b3ac <vTaskSwitchContext+0xb8>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	60fb      	str	r3, [r7, #12]
 800b316:	e010      	b.n	800b33a <vTaskSwitchContext+0x46>
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10a      	bne.n	800b334 <vTaskSwitchContext+0x40>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	607b      	str	r3, [r7, #4]
}
 800b330:	bf00      	nop
 800b332:	e7fe      	b.n	800b332 <vTaskSwitchContext+0x3e>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	3b01      	subs	r3, #1
 800b338:	60fb      	str	r3, [r7, #12]
 800b33a:	491d      	ldr	r1, [pc, #116]	; (800b3b0 <vTaskSwitchContext+0xbc>)
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	4613      	mov	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	4413      	add	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	440b      	add	r3, r1
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d0e4      	beq.n	800b318 <vTaskSwitchContext+0x24>
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	4613      	mov	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4a15      	ldr	r2, [pc, #84]	; (800b3b0 <vTaskSwitchContext+0xbc>)
 800b35a:	4413      	add	r3, r2
 800b35c:	60bb      	str	r3, [r7, #8]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	685a      	ldr	r2, [r3, #4]
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	605a      	str	r2, [r3, #4]
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	685a      	ldr	r2, [r3, #4]
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	3308      	adds	r3, #8
 800b370:	429a      	cmp	r2, r3
 800b372:	d104      	bne.n	800b37e <vTaskSwitchContext+0x8a>
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	685a      	ldr	r2, [r3, #4]
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	605a      	str	r2, [r3, #4]
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	4a0b      	ldr	r2, [pc, #44]	; (800b3b4 <vTaskSwitchContext+0xc0>)
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	4a08      	ldr	r2, [pc, #32]	; (800b3ac <vTaskSwitchContext+0xb8>)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b38e:	4b09      	ldr	r3, [pc, #36]	; (800b3b4 <vTaskSwitchContext+0xc0>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3354      	adds	r3, #84	; 0x54
 800b394:	4a08      	ldr	r2, [pc, #32]	; (800b3b8 <vTaskSwitchContext+0xc4>)
 800b396:	6013      	str	r3, [r2, #0]
}
 800b398:	bf00      	nop
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr
 800b3a4:	2000076c 	.word	0x2000076c
 800b3a8:	20000760 	.word	0x20000760
 800b3ac:	20000754 	.word	0x20000754
 800b3b0:	200002bc 	.word	0x200002bc
 800b3b4:	200002b8 	.word	0x200002b8
 800b3b8:	20000080 	.word	0x20000080

0800b3bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3c2:	4b0c      	ldr	r3, [pc, #48]	; (800b3f4 <prvResetNextTaskUnblockTime+0x38>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d104      	bne.n	800b3d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3cc:	4b0a      	ldr	r3, [pc, #40]	; (800b3f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b3d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b3d4:	e008      	b.n	800b3e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3d6:	4b07      	ldr	r3, [pc, #28]	; (800b3f4 <prvResetNextTaskUnblockTime+0x38>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	4a04      	ldr	r2, [pc, #16]	; (800b3f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b3e6:	6013      	str	r3, [r2, #0]
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr
 800b3f4:	2000071c 	.word	0x2000071c
 800b3f8:	20000768 	.word	0x20000768

0800b3fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b402:	4b0b      	ldr	r3, [pc, #44]	; (800b430 <xTaskGetSchedulerState+0x34>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d102      	bne.n	800b410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b40a:	2301      	movs	r3, #1
 800b40c:	607b      	str	r3, [r7, #4]
 800b40e:	e008      	b.n	800b422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b410:	4b08      	ldr	r3, [pc, #32]	; (800b434 <xTaskGetSchedulerState+0x38>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d102      	bne.n	800b41e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b418:	2302      	movs	r3, #2
 800b41a:	607b      	str	r3, [r7, #4]
 800b41c:	e001      	b.n	800b422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b41e:	2300      	movs	r3, #0
 800b420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b422:	687b      	ldr	r3, [r7, #4]
	}
 800b424:	4618      	mov	r0, r3
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	20000758 	.word	0x20000758
 800b434:	2000076c 	.word	0x2000076c

0800b438 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b442:	4b21      	ldr	r3, [pc, #132]	; (800b4c8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b448:	4b20      	ldr	r3, [pc, #128]	; (800b4cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3304      	adds	r3, #4
 800b44e:	4618      	mov	r0, r3
 800b450:	f7ff fd8c 	bl	800af6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b45a:	d10a      	bne.n	800b472 <prvAddCurrentTaskToDelayedList+0x3a>
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d007      	beq.n	800b472 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b462:	4b1a      	ldr	r3, [pc, #104]	; (800b4cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	3304      	adds	r3, #4
 800b468:	4619      	mov	r1, r3
 800b46a:	4819      	ldr	r0, [pc, #100]	; (800b4d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b46c:	f7ff fd21 	bl	800aeb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b470:	e026      	b.n	800b4c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4413      	add	r3, r2
 800b478:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b47a:	4b14      	ldr	r3, [pc, #80]	; (800b4cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	429a      	cmp	r2, r3
 800b488:	d209      	bcs.n	800b49e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b48a:	4b12      	ldr	r3, [pc, #72]	; (800b4d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3304      	adds	r3, #4
 800b494:	4619      	mov	r1, r3
 800b496:	4610      	mov	r0, r2
 800b498:	f7ff fd2f 	bl	800aefa <vListInsert>
}
 800b49c:	e010      	b.n	800b4c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b49e:	4b0e      	ldr	r3, [pc, #56]	; (800b4d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <prvAddCurrentTaskToDelayedList+0x94>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4610      	mov	r0, r2
 800b4ac:	f7ff fd25 	bl	800aefa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4b0:	4b0a      	ldr	r3, [pc, #40]	; (800b4dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d202      	bcs.n	800b4c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b4ba:	4a08      	ldr	r2, [pc, #32]	; (800b4dc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	6013      	str	r3, [r2, #0]
}
 800b4c0:	bf00      	nop
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	20000750 	.word	0x20000750
 800b4cc:	200002b8 	.word	0x200002b8
 800b4d0:	20000738 	.word	0x20000738
 800b4d4:	20000720 	.word	0x20000720
 800b4d8:	2000071c 	.word	0x2000071c
 800b4dc:	20000768 	.word	0x20000768

0800b4e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b4e0:	4b07      	ldr	r3, [pc, #28]	; (800b500 <pxCurrentTCBConst2>)
 800b4e2:	6819      	ldr	r1, [r3, #0]
 800b4e4:	6808      	ldr	r0, [r1, #0]
 800b4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ea:	f380 8809 	msr	PSP, r0
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f04f 0000 	mov.w	r0, #0
 800b4f6:	f380 8811 	msr	BASEPRI, r0
 800b4fa:	4770      	bx	lr
 800b4fc:	f3af 8000 	nop.w

0800b500 <pxCurrentTCBConst2>:
 800b500:	200002b8 	.word	0x200002b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop

0800b508 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	607b      	str	r3, [r7, #4]
}
 800b520:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b522:	4b0f      	ldr	r3, [pc, #60]	; (800b560 <vPortEnterCritical+0x58>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	3301      	adds	r3, #1
 800b528:	4a0d      	ldr	r2, [pc, #52]	; (800b560 <vPortEnterCritical+0x58>)
 800b52a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b52c:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <vPortEnterCritical+0x58>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d10f      	bne.n	800b554 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b534:	4b0b      	ldr	r3, [pc, #44]	; (800b564 <vPortEnterCritical+0x5c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00a      	beq.n	800b554 <vPortEnterCritical+0x4c>
	__asm volatile
 800b53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b542:	f383 8811 	msr	BASEPRI, r3
 800b546:	f3bf 8f6f 	isb	sy
 800b54a:	f3bf 8f4f 	dsb	sy
 800b54e:	603b      	str	r3, [r7, #0]
}
 800b550:	bf00      	nop
 800b552:	e7fe      	b.n	800b552 <vPortEnterCritical+0x4a>
	}
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr
 800b560:	2000007c 	.word	0x2000007c
 800b564:	e000ed04 	.word	0xe000ed04

0800b568 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b568:	b480      	push	{r7}
 800b56a:	b083      	sub	sp, #12
 800b56c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b56e:	4b12      	ldr	r3, [pc, #72]	; (800b5b8 <vPortExitCritical+0x50>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d10a      	bne.n	800b58c <vPortExitCritical+0x24>
	__asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	607b      	str	r3, [r7, #4]
}
 800b588:	bf00      	nop
 800b58a:	e7fe      	b.n	800b58a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b58c:	4b0a      	ldr	r3, [pc, #40]	; (800b5b8 <vPortExitCritical+0x50>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3b01      	subs	r3, #1
 800b592:	4a09      	ldr	r2, [pc, #36]	; (800b5b8 <vPortExitCritical+0x50>)
 800b594:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b596:	4b08      	ldr	r3, [pc, #32]	; (800b5b8 <vPortExitCritical+0x50>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d105      	bne.n	800b5aa <vPortExitCritical+0x42>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b5a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b5aa:	bf00      	nop
 800b5ac:	370c      	adds	r7, #12
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	2000007c 	.word	0x2000007c
 800b5bc:	00000000 	.word	0x00000000

0800b5c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5c0:	f3ef 8009 	mrs	r0, PSP
 800b5c4:	f3bf 8f6f 	isb	sy
 800b5c8:	4b15      	ldr	r3, [pc, #84]	; (800b620 <pxCurrentTCBConst>)
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	f01e 0f10 	tst.w	lr, #16
 800b5d0:	bf08      	it	eq
 800b5d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5da:	6010      	str	r0, [r2, #0]
 800b5dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b5e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b5e4:	f380 8811 	msr	BASEPRI, r0
 800b5e8:	f3bf 8f4f 	dsb	sy
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f7ff fe80 	bl	800b2f4 <vTaskSwitchContext>
 800b5f4:	f04f 0000 	mov.w	r0, #0
 800b5f8:	f380 8811 	msr	BASEPRI, r0
 800b5fc:	bc09      	pop	{r0, r3}
 800b5fe:	6819      	ldr	r1, [r3, #0]
 800b600:	6808      	ldr	r0, [r1, #0]
 800b602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b606:	f01e 0f10 	tst.w	lr, #16
 800b60a:	bf08      	it	eq
 800b60c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b610:	f380 8809 	msr	PSP, r0
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	f3af 8000 	nop.w

0800b620 <pxCurrentTCBConst>:
 800b620:	200002b8 	.word	0x200002b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b624:	bf00      	nop
 800b626:	bf00      	nop

0800b628 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
	__asm volatile
 800b62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b632:	f383 8811 	msr	BASEPRI, r3
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	f3bf 8f4f 	dsb	sy
 800b63e:	607b      	str	r3, [r7, #4]
}
 800b640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b642:	f7ff fd9d 	bl	800b180 <xTaskIncrementTick>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d003      	beq.n	800b654 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b64c:	4b06      	ldr	r3, [pc, #24]	; (800b668 <xPortSysTickHandler+0x40>)
 800b64e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b652:	601a      	str	r2, [r3, #0]
 800b654:	2300      	movs	r3, #0
 800b656:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	f383 8811 	msr	BASEPRI, r3
}
 800b65e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b660:	bf00      	nop
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	e000ed04 	.word	0xe000ed04

0800b66c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b680:	4619      	mov	r1, r3
 800b682:	4610      	mov	r0, r2
 800b684:	f7fe fb44 	bl	8009d10 <USBD_LL_SetupStage>
}
 800b688:	bf00      	nop
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b6a2:	78fa      	ldrb	r2, [r7, #3]
 800b6a4:	6879      	ldr	r1, [r7, #4]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	00db      	lsls	r3, r3, #3
 800b6aa:	1a9b      	subs	r3, r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	440b      	add	r3, r1
 800b6b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b6b4:	681a      	ldr	r2, [r3, #0]
 800b6b6:	78fb      	ldrb	r3, [r7, #3]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	f7fe fb7e 	bl	8009dba <USBD_LL_DataOutStage>
}
 800b6be:	bf00      	nop
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b6d8:	78fa      	ldrb	r2, [r7, #3]
 800b6da:	6879      	ldr	r1, [r7, #4]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	00db      	lsls	r3, r3, #3
 800b6e0:	1a9b      	subs	r3, r3, r2
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	440b      	add	r3, r1
 800b6e6:	3348      	adds	r3, #72	; 0x48
 800b6e8:	681a      	ldr	r2, [r3, #0]
 800b6ea:	78fb      	ldrb	r3, [r7, #3]
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	f7fe fbc7 	bl	8009e80 <USBD_LL_DataInStage>
}
 800b6f2:	bf00      	nop
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b082      	sub	sp, #8
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b708:	4618      	mov	r0, r3
 800b70a:	f7fe fcdb 	bl	800a0c4 <USBD_LL_SOF>
}
 800b70e:	bf00      	nop
 800b710:	3708      	adds	r7, #8
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b084      	sub	sp, #16
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b71e:	2301      	movs	r3, #1
 800b720:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d102      	bne.n	800b730 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b72a:	2300      	movs	r3, #0
 800b72c:	73fb      	strb	r3, [r7, #15]
 800b72e:	e008      	b.n	800b742 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	2b02      	cmp	r3, #2
 800b736:	d102      	bne.n	800b73e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b738:	2301      	movs	r3, #1
 800b73a:	73fb      	strb	r3, [r7, #15]
 800b73c:	e001      	b.n	800b742 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b73e:	f7f6 fa45 	bl	8001bcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b748:	7bfa      	ldrb	r2, [r7, #15]
 800b74a:	4611      	mov	r1, r2
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7fe fc7b 	bl	800a048 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fe fc27 	bl	8009fac <USBD_LL_Reset>
}
 800b75e:	bf00      	nop
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
	...

0800b768 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b776:	4618      	mov	r0, r3
 800b778:	f7fe fc76 	bl	800a068 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	6812      	ldr	r2, [r2, #0]
 800b78a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b78e:	f043 0301 	orr.w	r3, r3, #1
 800b792:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a1b      	ldr	r3, [r3, #32]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d005      	beq.n	800b7a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b79c:	4b04      	ldr	r3, [pc, #16]	; (800b7b0 <HAL_PCD_SuspendCallback+0x48>)
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	4a03      	ldr	r2, [pc, #12]	; (800b7b0 <HAL_PCD_SuspendCallback+0x48>)
 800b7a2:	f043 0306 	orr.w	r3, r3, #6
 800b7a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	e000ed00 	.word	0xe000ed00

0800b7b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe fc66 	bl	800a094 <USBD_LL_Resume>
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7e2:	78fa      	ldrb	r2, [r7, #3]
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fe fcb4 	bl	800a154 <USBD_LL_IsoOUTIncomplete>
}
 800b7ec:	bf00      	nop
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b806:	78fa      	ldrb	r2, [r7, #3]
 800b808:	4611      	mov	r1, r2
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe fc7c 	bl	800a108 <USBD_LL_IsoINIncomplete>
}
 800b810:	bf00      	nop
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b826:	4618      	mov	r0, r3
 800b828:	f7fe fcba 	bl	800a1a0 <USBD_LL_DevConnected>
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b842:	4618      	mov	r0, r3
 800b844:	f7fe fcb7 	bl	800a1b6 <USBD_LL_DevDisconnected>
}
 800b848:	bf00      	nop
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	4608      	mov	r0, r1
 800b85a:	4611      	mov	r1, r2
 800b85c:	461a      	mov	r2, r3
 800b85e:	4603      	mov	r3, r0
 800b860:	70fb      	strb	r3, [r7, #3]
 800b862:	460b      	mov	r3, r1
 800b864:	70bb      	strb	r3, [r7, #2]
 800b866:	4613      	mov	r3, r2
 800b868:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b86e:	2300      	movs	r3, #0
 800b870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b878:	78bb      	ldrb	r3, [r7, #2]
 800b87a:	883a      	ldrh	r2, [r7, #0]
 800b87c:	78f9      	ldrb	r1, [r7, #3]
 800b87e:	f7f9 fa83 	bl	8004d88 <HAL_PCD_EP_Open>
 800b882:	4603      	mov	r3, r0
 800b884:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b886:	7bfb      	ldrb	r3, [r7, #15]
 800b888:	4618      	mov	r0, r3
 800b88a:	f000 f8d3 	bl	800ba34 <USBD_Get_USB_Status>
 800b88e:	4603      	mov	r3, r0
 800b890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b892:	7bbb      	ldrb	r3, [r7, #14]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3710      	adds	r7, #16
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8b6:	78fa      	ldrb	r2, [r7, #3]
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7f9 fb61 	bl	8004f82 <HAL_PCD_EP_SetStall>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f000 f8b4 	bl	800ba34 <USBD_Get_USB_Status>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8f4:	78fa      	ldrb	r2, [r7, #3]
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7f9 fba6 	bl	800504a <HAL_PCD_EP_ClrStall>
 800b8fe:	4603      	mov	r3, r0
 800b900:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b902:	7bfb      	ldrb	r3, [r7, #15]
 800b904:	4618      	mov	r0, r3
 800b906:	f000 f895 	bl	800ba34 <USBD_Get_USB_Status>
 800b90a:	4603      	mov	r3, r0
 800b90c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b90e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b910:	4618      	mov	r0, r3
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	460b      	mov	r3, r1
 800b922:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b92a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b92c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b930:	2b00      	cmp	r3, #0
 800b932:	da0b      	bge.n	800b94c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b934:	78fb      	ldrb	r3, [r7, #3]
 800b936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b93a:	68f9      	ldr	r1, [r7, #12]
 800b93c:	4613      	mov	r3, r2
 800b93e:	00db      	lsls	r3, r3, #3
 800b940:	1a9b      	subs	r3, r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	440b      	add	r3, r1
 800b946:	333e      	adds	r3, #62	; 0x3e
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	e00b      	b.n	800b964 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b94c:	78fb      	ldrb	r3, [r7, #3]
 800b94e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b952:	68f9      	ldr	r1, [r7, #12]
 800b954:	4613      	mov	r3, r2
 800b956:	00db      	lsls	r3, r3, #3
 800b958:	1a9b      	subs	r3, r3, r2
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	440b      	add	r3, r1
 800b95e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b962:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b964:	4618      	mov	r0, r3
 800b966:	3714      	adds	r7, #20
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr

0800b970 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b980:	2300      	movs	r3, #0
 800b982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b98a:	78fa      	ldrb	r2, [r7, #3]
 800b98c:	4611      	mov	r1, r2
 800b98e:	4618      	mov	r0, r3
 800b990:	f7f9 f9d5 	bl	8004d3e <HAL_PCD_SetAddress>
 800b994:	4603      	mov	r3, r0
 800b996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b998:	7bfb      	ldrb	r3, [r7, #15]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f000 f84a 	bl	800ba34 <USBD_Get_USB_Status>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b086      	sub	sp, #24
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	60f8      	str	r0, [r7, #12]
 800b9b6:	607a      	str	r2, [r7, #4]
 800b9b8:	603b      	str	r3, [r7, #0]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b9cc:	7af9      	ldrb	r1, [r7, #11]
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	f7f9 fa8c 	bl	8004eee <HAL_PCD_EP_Transmit>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9da:	7dfb      	ldrb	r3, [r7, #23]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 f829 	bl	800ba34 <USBD_Get_USB_Status>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3718      	adds	r7, #24
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	607a      	str	r2, [r7, #4]
 800b9fa:	603b      	str	r3, [r7, #0]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba00:	2300      	movs	r3, #0
 800ba02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba04:	2300      	movs	r3, #0
 800ba06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba0e:	7af9      	ldrb	r1, [r7, #11]
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	f7f9 fa20 	bl	8004e58 <HAL_PCD_EP_Receive>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba1c:	7dfb      	ldrb	r3, [r7, #23]
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f000 f808 	bl	800ba34 <USBD_Get_USB_Status>
 800ba24:	4603      	mov	r3, r0
 800ba26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba28:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba42:	79fb      	ldrb	r3, [r7, #7]
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d817      	bhi.n	800ba78 <USBD_Get_USB_Status+0x44>
 800ba48:	a201      	add	r2, pc, #4	; (adr r2, 800ba50 <USBD_Get_USB_Status+0x1c>)
 800ba4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4e:	bf00      	nop
 800ba50:	0800ba61 	.word	0x0800ba61
 800ba54:	0800ba67 	.word	0x0800ba67
 800ba58:	0800ba6d 	.word	0x0800ba6d
 800ba5c:	0800ba73 	.word	0x0800ba73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	73fb      	strb	r3, [r7, #15]
    break;
 800ba64:	e00b      	b.n	800ba7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba66:	2303      	movs	r3, #3
 800ba68:	73fb      	strb	r3, [r7, #15]
    break;
 800ba6a:	e008      	b.n	800ba7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba70:	e005      	b.n	800ba7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba72:	2303      	movs	r3, #3
 800ba74:	73fb      	strb	r3, [r7, #15]
    break;
 800ba76:	e002      	b.n	800ba7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba7c:	bf00      	nop
  }
  return usb_status;
 800ba7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3714      	adds	r7, #20
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <std>:
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	b510      	push	{r4, lr}
 800ba90:	4604      	mov	r4, r0
 800ba92:	e9c0 3300 	strd	r3, r3, [r0]
 800ba96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba9a:	6083      	str	r3, [r0, #8]
 800ba9c:	8181      	strh	r1, [r0, #12]
 800ba9e:	6643      	str	r3, [r0, #100]	; 0x64
 800baa0:	81c2      	strh	r2, [r0, #14]
 800baa2:	6183      	str	r3, [r0, #24]
 800baa4:	4619      	mov	r1, r3
 800baa6:	2208      	movs	r2, #8
 800baa8:	305c      	adds	r0, #92	; 0x5c
 800baaa:	f000 f91a 	bl	800bce2 <memset>
 800baae:	4b05      	ldr	r3, [pc, #20]	; (800bac4 <std+0x38>)
 800bab0:	6263      	str	r3, [r4, #36]	; 0x24
 800bab2:	4b05      	ldr	r3, [pc, #20]	; (800bac8 <std+0x3c>)
 800bab4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bab6:	4b05      	ldr	r3, [pc, #20]	; (800bacc <std+0x40>)
 800bab8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800baba:	4b05      	ldr	r3, [pc, #20]	; (800bad0 <std+0x44>)
 800babc:	6224      	str	r4, [r4, #32]
 800babe:	6323      	str	r3, [r4, #48]	; 0x30
 800bac0:	bd10      	pop	{r4, pc}
 800bac2:	bf00      	nop
 800bac4:	0800cc25 	.word	0x0800cc25
 800bac8:	0800cc47 	.word	0x0800cc47
 800bacc:	0800cc7f 	.word	0x0800cc7f
 800bad0:	0800cca3 	.word	0x0800cca3

0800bad4 <_cleanup_r>:
 800bad4:	4901      	ldr	r1, [pc, #4]	; (800badc <_cleanup_r+0x8>)
 800bad6:	f000 b8af 	b.w	800bc38 <_fwalk_reent>
 800bada:	bf00      	nop
 800badc:	0800e9e1 	.word	0x0800e9e1

0800bae0 <__sfmoreglue>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	1e4a      	subs	r2, r1, #1
 800bae4:	2568      	movs	r5, #104	; 0x68
 800bae6:	4355      	muls	r5, r2
 800bae8:	460e      	mov	r6, r1
 800baea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800baee:	f000 f901 	bl	800bcf4 <_malloc_r>
 800baf2:	4604      	mov	r4, r0
 800baf4:	b140      	cbz	r0, 800bb08 <__sfmoreglue+0x28>
 800baf6:	2100      	movs	r1, #0
 800baf8:	e9c0 1600 	strd	r1, r6, [r0]
 800bafc:	300c      	adds	r0, #12
 800bafe:	60a0      	str	r0, [r4, #8]
 800bb00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb04:	f000 f8ed 	bl	800bce2 <memset>
 800bb08:	4620      	mov	r0, r4
 800bb0a:	bd70      	pop	{r4, r5, r6, pc}

0800bb0c <__sfp_lock_acquire>:
 800bb0c:	4801      	ldr	r0, [pc, #4]	; (800bb14 <__sfp_lock_acquire+0x8>)
 800bb0e:	f000 b8d8 	b.w	800bcc2 <__retarget_lock_acquire_recursive>
 800bb12:	bf00      	nop
 800bb14:	200013b8 	.word	0x200013b8

0800bb18 <__sfp_lock_release>:
 800bb18:	4801      	ldr	r0, [pc, #4]	; (800bb20 <__sfp_lock_release+0x8>)
 800bb1a:	f000 b8d3 	b.w	800bcc4 <__retarget_lock_release_recursive>
 800bb1e:	bf00      	nop
 800bb20:	200013b8 	.word	0x200013b8

0800bb24 <__sinit_lock_acquire>:
 800bb24:	4801      	ldr	r0, [pc, #4]	; (800bb2c <__sinit_lock_acquire+0x8>)
 800bb26:	f000 b8cc 	b.w	800bcc2 <__retarget_lock_acquire_recursive>
 800bb2a:	bf00      	nop
 800bb2c:	200013b3 	.word	0x200013b3

0800bb30 <__sinit_lock_release>:
 800bb30:	4801      	ldr	r0, [pc, #4]	; (800bb38 <__sinit_lock_release+0x8>)
 800bb32:	f000 b8c7 	b.w	800bcc4 <__retarget_lock_release_recursive>
 800bb36:	bf00      	nop
 800bb38:	200013b3 	.word	0x200013b3

0800bb3c <__sinit>:
 800bb3c:	b510      	push	{r4, lr}
 800bb3e:	4604      	mov	r4, r0
 800bb40:	f7ff fff0 	bl	800bb24 <__sinit_lock_acquire>
 800bb44:	69a3      	ldr	r3, [r4, #24]
 800bb46:	b11b      	cbz	r3, 800bb50 <__sinit+0x14>
 800bb48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb4c:	f7ff bff0 	b.w	800bb30 <__sinit_lock_release>
 800bb50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb54:	6523      	str	r3, [r4, #80]	; 0x50
 800bb56:	4b13      	ldr	r3, [pc, #76]	; (800bba4 <__sinit+0x68>)
 800bb58:	4a13      	ldr	r2, [pc, #76]	; (800bba8 <__sinit+0x6c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb5e:	42a3      	cmp	r3, r4
 800bb60:	bf04      	itt	eq
 800bb62:	2301      	moveq	r3, #1
 800bb64:	61a3      	streq	r3, [r4, #24]
 800bb66:	4620      	mov	r0, r4
 800bb68:	f000 f820 	bl	800bbac <__sfp>
 800bb6c:	6060      	str	r0, [r4, #4]
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 f81c 	bl	800bbac <__sfp>
 800bb74:	60a0      	str	r0, [r4, #8]
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 f818 	bl	800bbac <__sfp>
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	60e0      	str	r0, [r4, #12]
 800bb80:	2104      	movs	r1, #4
 800bb82:	6860      	ldr	r0, [r4, #4]
 800bb84:	f7ff ff82 	bl	800ba8c <std>
 800bb88:	68a0      	ldr	r0, [r4, #8]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	2109      	movs	r1, #9
 800bb8e:	f7ff ff7d 	bl	800ba8c <std>
 800bb92:	68e0      	ldr	r0, [r4, #12]
 800bb94:	2202      	movs	r2, #2
 800bb96:	2112      	movs	r1, #18
 800bb98:	f7ff ff78 	bl	800ba8c <std>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	61a3      	str	r3, [r4, #24]
 800bba0:	e7d2      	b.n	800bb48 <__sinit+0xc>
 800bba2:	bf00      	nop
 800bba4:	08011010 	.word	0x08011010
 800bba8:	0800bad5 	.word	0x0800bad5

0800bbac <__sfp>:
 800bbac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbae:	4607      	mov	r7, r0
 800bbb0:	f7ff ffac 	bl	800bb0c <__sfp_lock_acquire>
 800bbb4:	4b1e      	ldr	r3, [pc, #120]	; (800bc30 <__sfp+0x84>)
 800bbb6:	681e      	ldr	r6, [r3, #0]
 800bbb8:	69b3      	ldr	r3, [r6, #24]
 800bbba:	b913      	cbnz	r3, 800bbc2 <__sfp+0x16>
 800bbbc:	4630      	mov	r0, r6
 800bbbe:	f7ff ffbd 	bl	800bb3c <__sinit>
 800bbc2:	3648      	adds	r6, #72	; 0x48
 800bbc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	d503      	bpl.n	800bbd4 <__sfp+0x28>
 800bbcc:	6833      	ldr	r3, [r6, #0]
 800bbce:	b30b      	cbz	r3, 800bc14 <__sfp+0x68>
 800bbd0:	6836      	ldr	r6, [r6, #0]
 800bbd2:	e7f7      	b.n	800bbc4 <__sfp+0x18>
 800bbd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bbd8:	b9d5      	cbnz	r5, 800bc10 <__sfp+0x64>
 800bbda:	4b16      	ldr	r3, [pc, #88]	; (800bc34 <__sfp+0x88>)
 800bbdc:	60e3      	str	r3, [r4, #12]
 800bbde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bbe2:	6665      	str	r5, [r4, #100]	; 0x64
 800bbe4:	f000 f86c 	bl	800bcc0 <__retarget_lock_init_recursive>
 800bbe8:	f7ff ff96 	bl	800bb18 <__sfp_lock_release>
 800bbec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbf4:	6025      	str	r5, [r4, #0]
 800bbf6:	61a5      	str	r5, [r4, #24]
 800bbf8:	2208      	movs	r2, #8
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc00:	f000 f86f 	bl	800bce2 <memset>
 800bc04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc10:	3468      	adds	r4, #104	; 0x68
 800bc12:	e7d9      	b.n	800bbc8 <__sfp+0x1c>
 800bc14:	2104      	movs	r1, #4
 800bc16:	4638      	mov	r0, r7
 800bc18:	f7ff ff62 	bl	800bae0 <__sfmoreglue>
 800bc1c:	4604      	mov	r4, r0
 800bc1e:	6030      	str	r0, [r6, #0]
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d1d5      	bne.n	800bbd0 <__sfp+0x24>
 800bc24:	f7ff ff78 	bl	800bb18 <__sfp_lock_release>
 800bc28:	230c      	movs	r3, #12
 800bc2a:	603b      	str	r3, [r7, #0]
 800bc2c:	e7ee      	b.n	800bc0c <__sfp+0x60>
 800bc2e:	bf00      	nop
 800bc30:	08011010 	.word	0x08011010
 800bc34:	ffff0001 	.word	0xffff0001

0800bc38 <_fwalk_reent>:
 800bc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc3c:	4606      	mov	r6, r0
 800bc3e:	4688      	mov	r8, r1
 800bc40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc44:	2700      	movs	r7, #0
 800bc46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc4a:	f1b9 0901 	subs.w	r9, r9, #1
 800bc4e:	d505      	bpl.n	800bc5c <_fwalk_reent+0x24>
 800bc50:	6824      	ldr	r4, [r4, #0]
 800bc52:	2c00      	cmp	r4, #0
 800bc54:	d1f7      	bne.n	800bc46 <_fwalk_reent+0xe>
 800bc56:	4638      	mov	r0, r7
 800bc58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc5c:	89ab      	ldrh	r3, [r5, #12]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d907      	bls.n	800bc72 <_fwalk_reent+0x3a>
 800bc62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc66:	3301      	adds	r3, #1
 800bc68:	d003      	beq.n	800bc72 <_fwalk_reent+0x3a>
 800bc6a:	4629      	mov	r1, r5
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	47c0      	blx	r8
 800bc70:	4307      	orrs	r7, r0
 800bc72:	3568      	adds	r5, #104	; 0x68
 800bc74:	e7e9      	b.n	800bc4a <_fwalk_reent+0x12>
	...

0800bc78 <__libc_init_array>:
 800bc78:	b570      	push	{r4, r5, r6, lr}
 800bc7a:	4d0d      	ldr	r5, [pc, #52]	; (800bcb0 <__libc_init_array+0x38>)
 800bc7c:	4c0d      	ldr	r4, [pc, #52]	; (800bcb4 <__libc_init_array+0x3c>)
 800bc7e:	1b64      	subs	r4, r4, r5
 800bc80:	10a4      	asrs	r4, r4, #2
 800bc82:	2600      	movs	r6, #0
 800bc84:	42a6      	cmp	r6, r4
 800bc86:	d109      	bne.n	800bc9c <__libc_init_array+0x24>
 800bc88:	4d0b      	ldr	r5, [pc, #44]	; (800bcb8 <__libc_init_array+0x40>)
 800bc8a:	4c0c      	ldr	r4, [pc, #48]	; (800bcbc <__libc_init_array+0x44>)
 800bc8c:	f004 fc36 	bl	80104fc <_init>
 800bc90:	1b64      	subs	r4, r4, r5
 800bc92:	10a4      	asrs	r4, r4, #2
 800bc94:	2600      	movs	r6, #0
 800bc96:	42a6      	cmp	r6, r4
 800bc98:	d105      	bne.n	800bca6 <__libc_init_array+0x2e>
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bca0:	4798      	blx	r3
 800bca2:	3601      	adds	r6, #1
 800bca4:	e7ee      	b.n	800bc84 <__libc_init_array+0xc>
 800bca6:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcaa:	4798      	blx	r3
 800bcac:	3601      	adds	r6, #1
 800bcae:	e7f2      	b.n	800bc96 <__libc_init_array+0x1e>
 800bcb0:	0801146c 	.word	0x0801146c
 800bcb4:	0801146c 	.word	0x0801146c
 800bcb8:	0801146c 	.word	0x0801146c
 800bcbc:	08011470 	.word	0x08011470

0800bcc0 <__retarget_lock_init_recursive>:
 800bcc0:	4770      	bx	lr

0800bcc2 <__retarget_lock_acquire_recursive>:
 800bcc2:	4770      	bx	lr

0800bcc4 <__retarget_lock_release_recursive>:
 800bcc4:	4770      	bx	lr

0800bcc6 <memcpy>:
 800bcc6:	440a      	add	r2, r1
 800bcc8:	4291      	cmp	r1, r2
 800bcca:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcce:	d100      	bne.n	800bcd2 <memcpy+0xc>
 800bcd0:	4770      	bx	lr
 800bcd2:	b510      	push	{r4, lr}
 800bcd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcdc:	4291      	cmp	r1, r2
 800bcde:	d1f9      	bne.n	800bcd4 <memcpy+0xe>
 800bce0:	bd10      	pop	{r4, pc}

0800bce2 <memset>:
 800bce2:	4402      	add	r2, r0
 800bce4:	4603      	mov	r3, r0
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d100      	bne.n	800bcec <memset+0xa>
 800bcea:	4770      	bx	lr
 800bcec:	f803 1b01 	strb.w	r1, [r3], #1
 800bcf0:	e7f9      	b.n	800bce6 <memset+0x4>
	...

0800bcf4 <_malloc_r>:
 800bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf6:	1ccd      	adds	r5, r1, #3
 800bcf8:	f025 0503 	bic.w	r5, r5, #3
 800bcfc:	3508      	adds	r5, #8
 800bcfe:	2d0c      	cmp	r5, #12
 800bd00:	bf38      	it	cc
 800bd02:	250c      	movcc	r5, #12
 800bd04:	2d00      	cmp	r5, #0
 800bd06:	4606      	mov	r6, r0
 800bd08:	db01      	blt.n	800bd0e <_malloc_r+0x1a>
 800bd0a:	42a9      	cmp	r1, r5
 800bd0c:	d903      	bls.n	800bd16 <_malloc_r+0x22>
 800bd0e:	230c      	movs	r3, #12
 800bd10:	6033      	str	r3, [r6, #0]
 800bd12:	2000      	movs	r0, #0
 800bd14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd16:	f003 faa3 	bl	800f260 <__malloc_lock>
 800bd1a:	4921      	ldr	r1, [pc, #132]	; (800bda0 <_malloc_r+0xac>)
 800bd1c:	680a      	ldr	r2, [r1, #0]
 800bd1e:	4614      	mov	r4, r2
 800bd20:	b99c      	cbnz	r4, 800bd4a <_malloc_r+0x56>
 800bd22:	4f20      	ldr	r7, [pc, #128]	; (800bda4 <_malloc_r+0xb0>)
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	b923      	cbnz	r3, 800bd32 <_malloc_r+0x3e>
 800bd28:	4621      	mov	r1, r4
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f000 ff44 	bl	800cbb8 <_sbrk_r>
 800bd30:	6038      	str	r0, [r7, #0]
 800bd32:	4629      	mov	r1, r5
 800bd34:	4630      	mov	r0, r6
 800bd36:	f000 ff3f 	bl	800cbb8 <_sbrk_r>
 800bd3a:	1c43      	adds	r3, r0, #1
 800bd3c:	d123      	bne.n	800bd86 <_malloc_r+0x92>
 800bd3e:	230c      	movs	r3, #12
 800bd40:	6033      	str	r3, [r6, #0]
 800bd42:	4630      	mov	r0, r6
 800bd44:	f003 fa92 	bl	800f26c <__malloc_unlock>
 800bd48:	e7e3      	b.n	800bd12 <_malloc_r+0x1e>
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	1b5b      	subs	r3, r3, r5
 800bd4e:	d417      	bmi.n	800bd80 <_malloc_r+0x8c>
 800bd50:	2b0b      	cmp	r3, #11
 800bd52:	d903      	bls.n	800bd5c <_malloc_r+0x68>
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	441c      	add	r4, r3
 800bd58:	6025      	str	r5, [r4, #0]
 800bd5a:	e004      	b.n	800bd66 <_malloc_r+0x72>
 800bd5c:	6863      	ldr	r3, [r4, #4]
 800bd5e:	42a2      	cmp	r2, r4
 800bd60:	bf0c      	ite	eq
 800bd62:	600b      	streq	r3, [r1, #0]
 800bd64:	6053      	strne	r3, [r2, #4]
 800bd66:	4630      	mov	r0, r6
 800bd68:	f003 fa80 	bl	800f26c <__malloc_unlock>
 800bd6c:	f104 000b 	add.w	r0, r4, #11
 800bd70:	1d23      	adds	r3, r4, #4
 800bd72:	f020 0007 	bic.w	r0, r0, #7
 800bd76:	1ac2      	subs	r2, r0, r3
 800bd78:	d0cc      	beq.n	800bd14 <_malloc_r+0x20>
 800bd7a:	1a1b      	subs	r3, r3, r0
 800bd7c:	50a3      	str	r3, [r4, r2]
 800bd7e:	e7c9      	b.n	800bd14 <_malloc_r+0x20>
 800bd80:	4622      	mov	r2, r4
 800bd82:	6864      	ldr	r4, [r4, #4]
 800bd84:	e7cc      	b.n	800bd20 <_malloc_r+0x2c>
 800bd86:	1cc4      	adds	r4, r0, #3
 800bd88:	f024 0403 	bic.w	r4, r4, #3
 800bd8c:	42a0      	cmp	r0, r4
 800bd8e:	d0e3      	beq.n	800bd58 <_malloc_r+0x64>
 800bd90:	1a21      	subs	r1, r4, r0
 800bd92:	4630      	mov	r0, r6
 800bd94:	f000 ff10 	bl	800cbb8 <_sbrk_r>
 800bd98:	3001      	adds	r0, #1
 800bd9a:	d1dd      	bne.n	800bd58 <_malloc_r+0x64>
 800bd9c:	e7cf      	b.n	800bd3e <_malloc_r+0x4a>
 800bd9e:	bf00      	nop
 800bda0:	20000770 	.word	0x20000770
 800bda4:	20000774 	.word	0x20000774

0800bda8 <__cvt>:
 800bda8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdac:	ec55 4b10 	vmov	r4, r5, d0
 800bdb0:	2d00      	cmp	r5, #0
 800bdb2:	460e      	mov	r6, r1
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	462b      	mov	r3, r5
 800bdb8:	bfbb      	ittet	lt
 800bdba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bdbe:	461d      	movlt	r5, r3
 800bdc0:	2300      	movge	r3, #0
 800bdc2:	232d      	movlt	r3, #45	; 0x2d
 800bdc4:	700b      	strb	r3, [r1, #0]
 800bdc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bdcc:	4691      	mov	r9, r2
 800bdce:	f023 0820 	bic.w	r8, r3, #32
 800bdd2:	bfbc      	itt	lt
 800bdd4:	4622      	movlt	r2, r4
 800bdd6:	4614      	movlt	r4, r2
 800bdd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bddc:	d005      	beq.n	800bdea <__cvt+0x42>
 800bdde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bde2:	d100      	bne.n	800bde6 <__cvt+0x3e>
 800bde4:	3601      	adds	r6, #1
 800bde6:	2102      	movs	r1, #2
 800bde8:	e000      	b.n	800bdec <__cvt+0x44>
 800bdea:	2103      	movs	r1, #3
 800bdec:	ab03      	add	r3, sp, #12
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	ab02      	add	r3, sp, #8
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	ec45 4b10 	vmov	d0, r4, r5
 800bdf8:	4653      	mov	r3, sl
 800bdfa:	4632      	mov	r2, r6
 800bdfc:	f001 ff78 	bl	800dcf0 <_dtoa_r>
 800be00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800be04:	4607      	mov	r7, r0
 800be06:	d102      	bne.n	800be0e <__cvt+0x66>
 800be08:	f019 0f01 	tst.w	r9, #1
 800be0c:	d022      	beq.n	800be54 <__cvt+0xac>
 800be0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be12:	eb07 0906 	add.w	r9, r7, r6
 800be16:	d110      	bne.n	800be3a <__cvt+0x92>
 800be18:	783b      	ldrb	r3, [r7, #0]
 800be1a:	2b30      	cmp	r3, #48	; 0x30
 800be1c:	d10a      	bne.n	800be34 <__cvt+0x8c>
 800be1e:	2200      	movs	r2, #0
 800be20:	2300      	movs	r3, #0
 800be22:	4620      	mov	r0, r4
 800be24:	4629      	mov	r1, r5
 800be26:	f7f4 fe5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800be2a:	b918      	cbnz	r0, 800be34 <__cvt+0x8c>
 800be2c:	f1c6 0601 	rsb	r6, r6, #1
 800be30:	f8ca 6000 	str.w	r6, [sl]
 800be34:	f8da 3000 	ldr.w	r3, [sl]
 800be38:	4499      	add	r9, r3
 800be3a:	2200      	movs	r2, #0
 800be3c:	2300      	movs	r3, #0
 800be3e:	4620      	mov	r0, r4
 800be40:	4629      	mov	r1, r5
 800be42:	f7f4 fe51 	bl	8000ae8 <__aeabi_dcmpeq>
 800be46:	b108      	cbz	r0, 800be4c <__cvt+0xa4>
 800be48:	f8cd 900c 	str.w	r9, [sp, #12]
 800be4c:	2230      	movs	r2, #48	; 0x30
 800be4e:	9b03      	ldr	r3, [sp, #12]
 800be50:	454b      	cmp	r3, r9
 800be52:	d307      	bcc.n	800be64 <__cvt+0xbc>
 800be54:	9b03      	ldr	r3, [sp, #12]
 800be56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be58:	1bdb      	subs	r3, r3, r7
 800be5a:	4638      	mov	r0, r7
 800be5c:	6013      	str	r3, [r2, #0]
 800be5e:	b004      	add	sp, #16
 800be60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be64:	1c59      	adds	r1, r3, #1
 800be66:	9103      	str	r1, [sp, #12]
 800be68:	701a      	strb	r2, [r3, #0]
 800be6a:	e7f0      	b.n	800be4e <__cvt+0xa6>

0800be6c <__exponent>:
 800be6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be6e:	4603      	mov	r3, r0
 800be70:	2900      	cmp	r1, #0
 800be72:	bfb8      	it	lt
 800be74:	4249      	neglt	r1, r1
 800be76:	f803 2b02 	strb.w	r2, [r3], #2
 800be7a:	bfb4      	ite	lt
 800be7c:	222d      	movlt	r2, #45	; 0x2d
 800be7e:	222b      	movge	r2, #43	; 0x2b
 800be80:	2909      	cmp	r1, #9
 800be82:	7042      	strb	r2, [r0, #1]
 800be84:	dd2a      	ble.n	800bedc <__exponent+0x70>
 800be86:	f10d 0407 	add.w	r4, sp, #7
 800be8a:	46a4      	mov	ip, r4
 800be8c:	270a      	movs	r7, #10
 800be8e:	46a6      	mov	lr, r4
 800be90:	460a      	mov	r2, r1
 800be92:	fb91 f6f7 	sdiv	r6, r1, r7
 800be96:	fb07 1516 	mls	r5, r7, r6, r1
 800be9a:	3530      	adds	r5, #48	; 0x30
 800be9c:	2a63      	cmp	r2, #99	; 0x63
 800be9e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bea2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bea6:	4631      	mov	r1, r6
 800bea8:	dcf1      	bgt.n	800be8e <__exponent+0x22>
 800beaa:	3130      	adds	r1, #48	; 0x30
 800beac:	f1ae 0502 	sub.w	r5, lr, #2
 800beb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800beb4:	1c44      	adds	r4, r0, #1
 800beb6:	4629      	mov	r1, r5
 800beb8:	4561      	cmp	r1, ip
 800beba:	d30a      	bcc.n	800bed2 <__exponent+0x66>
 800bebc:	f10d 0209 	add.w	r2, sp, #9
 800bec0:	eba2 020e 	sub.w	r2, r2, lr
 800bec4:	4565      	cmp	r5, ip
 800bec6:	bf88      	it	hi
 800bec8:	2200      	movhi	r2, #0
 800beca:	4413      	add	r3, r2
 800becc:	1a18      	subs	r0, r3, r0
 800bece:	b003      	add	sp, #12
 800bed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bed6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800beda:	e7ed      	b.n	800beb8 <__exponent+0x4c>
 800bedc:	2330      	movs	r3, #48	; 0x30
 800bede:	3130      	adds	r1, #48	; 0x30
 800bee0:	7083      	strb	r3, [r0, #2]
 800bee2:	70c1      	strb	r1, [r0, #3]
 800bee4:	1d03      	adds	r3, r0, #4
 800bee6:	e7f1      	b.n	800becc <__exponent+0x60>

0800bee8 <_printf_float>:
 800bee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beec:	ed2d 8b02 	vpush	{d8}
 800bef0:	b08d      	sub	sp, #52	; 0x34
 800bef2:	460c      	mov	r4, r1
 800bef4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bef8:	4616      	mov	r6, r2
 800befa:	461f      	mov	r7, r3
 800befc:	4605      	mov	r5, r0
 800befe:	f003 f91b 	bl	800f138 <_localeconv_r>
 800bf02:	f8d0 a000 	ldr.w	sl, [r0]
 800bf06:	4650      	mov	r0, sl
 800bf08:	f7f4 f972 	bl	80001f0 <strlen>
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf10:	6823      	ldr	r3, [r4, #0]
 800bf12:	9305      	str	r3, [sp, #20]
 800bf14:	f8d8 3000 	ldr.w	r3, [r8]
 800bf18:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bf1c:	3307      	adds	r3, #7
 800bf1e:	f023 0307 	bic.w	r3, r3, #7
 800bf22:	f103 0208 	add.w	r2, r3, #8
 800bf26:	f8c8 2000 	str.w	r2, [r8]
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bf32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bf36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf3a:	9307      	str	r3, [sp, #28]
 800bf3c:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf40:	ee08 0a10 	vmov	s16, r0
 800bf44:	4b9f      	ldr	r3, [pc, #636]	; (800c1c4 <_printf_float+0x2dc>)
 800bf46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf4a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf4e:	f7f4 fdfd 	bl	8000b4c <__aeabi_dcmpun>
 800bf52:	bb88      	cbnz	r0, 800bfb8 <_printf_float+0xd0>
 800bf54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf58:	4b9a      	ldr	r3, [pc, #616]	; (800c1c4 <_printf_float+0x2dc>)
 800bf5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf5e:	f7f4 fdd7 	bl	8000b10 <__aeabi_dcmple>
 800bf62:	bb48      	cbnz	r0, 800bfb8 <_printf_float+0xd0>
 800bf64:	2200      	movs	r2, #0
 800bf66:	2300      	movs	r3, #0
 800bf68:	4640      	mov	r0, r8
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	f7f4 fdc6 	bl	8000afc <__aeabi_dcmplt>
 800bf70:	b110      	cbz	r0, 800bf78 <_printf_float+0x90>
 800bf72:	232d      	movs	r3, #45	; 0x2d
 800bf74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf78:	4b93      	ldr	r3, [pc, #588]	; (800c1c8 <_printf_float+0x2e0>)
 800bf7a:	4894      	ldr	r0, [pc, #592]	; (800c1cc <_printf_float+0x2e4>)
 800bf7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf80:	bf94      	ite	ls
 800bf82:	4698      	movls	r8, r3
 800bf84:	4680      	movhi	r8, r0
 800bf86:	2303      	movs	r3, #3
 800bf88:	6123      	str	r3, [r4, #16]
 800bf8a:	9b05      	ldr	r3, [sp, #20]
 800bf8c:	f023 0204 	bic.w	r2, r3, #4
 800bf90:	6022      	str	r2, [r4, #0]
 800bf92:	f04f 0900 	mov.w	r9, #0
 800bf96:	9700      	str	r7, [sp, #0]
 800bf98:	4633      	mov	r3, r6
 800bf9a:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f000 f9d8 	bl	800c354 <_printf_common>
 800bfa4:	3001      	adds	r0, #1
 800bfa6:	f040 8090 	bne.w	800c0ca <_printf_float+0x1e2>
 800bfaa:	f04f 30ff 	mov.w	r0, #4294967295
 800bfae:	b00d      	add	sp, #52	; 0x34
 800bfb0:	ecbd 8b02 	vpop	{d8}
 800bfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb8:	4642      	mov	r2, r8
 800bfba:	464b      	mov	r3, r9
 800bfbc:	4640      	mov	r0, r8
 800bfbe:	4649      	mov	r1, r9
 800bfc0:	f7f4 fdc4 	bl	8000b4c <__aeabi_dcmpun>
 800bfc4:	b140      	cbz	r0, 800bfd8 <_printf_float+0xf0>
 800bfc6:	464b      	mov	r3, r9
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	bfbc      	itt	lt
 800bfcc:	232d      	movlt	r3, #45	; 0x2d
 800bfce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bfd2:	487f      	ldr	r0, [pc, #508]	; (800c1d0 <_printf_float+0x2e8>)
 800bfd4:	4b7f      	ldr	r3, [pc, #508]	; (800c1d4 <_printf_float+0x2ec>)
 800bfd6:	e7d1      	b.n	800bf7c <_printf_float+0x94>
 800bfd8:	6863      	ldr	r3, [r4, #4]
 800bfda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bfde:	9206      	str	r2, [sp, #24]
 800bfe0:	1c5a      	adds	r2, r3, #1
 800bfe2:	d13f      	bne.n	800c064 <_printf_float+0x17c>
 800bfe4:	2306      	movs	r3, #6
 800bfe6:	6063      	str	r3, [r4, #4]
 800bfe8:	9b05      	ldr	r3, [sp, #20]
 800bfea:	6861      	ldr	r1, [r4, #4]
 800bfec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bff0:	2300      	movs	r3, #0
 800bff2:	9303      	str	r3, [sp, #12]
 800bff4:	ab0a      	add	r3, sp, #40	; 0x28
 800bff6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bffa:	ab09      	add	r3, sp, #36	; 0x24
 800bffc:	ec49 8b10 	vmov	d0, r8, r9
 800c000:	9300      	str	r3, [sp, #0]
 800c002:	6022      	str	r2, [r4, #0]
 800c004:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c008:	4628      	mov	r0, r5
 800c00a:	f7ff fecd 	bl	800bda8 <__cvt>
 800c00e:	9b06      	ldr	r3, [sp, #24]
 800c010:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c012:	2b47      	cmp	r3, #71	; 0x47
 800c014:	4680      	mov	r8, r0
 800c016:	d108      	bne.n	800c02a <_printf_float+0x142>
 800c018:	1cc8      	adds	r0, r1, #3
 800c01a:	db02      	blt.n	800c022 <_printf_float+0x13a>
 800c01c:	6863      	ldr	r3, [r4, #4]
 800c01e:	4299      	cmp	r1, r3
 800c020:	dd41      	ble.n	800c0a6 <_printf_float+0x1be>
 800c022:	f1ab 0b02 	sub.w	fp, fp, #2
 800c026:	fa5f fb8b 	uxtb.w	fp, fp
 800c02a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c02e:	d820      	bhi.n	800c072 <_printf_float+0x18a>
 800c030:	3901      	subs	r1, #1
 800c032:	465a      	mov	r2, fp
 800c034:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c038:	9109      	str	r1, [sp, #36]	; 0x24
 800c03a:	f7ff ff17 	bl	800be6c <__exponent>
 800c03e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c040:	1813      	adds	r3, r2, r0
 800c042:	2a01      	cmp	r2, #1
 800c044:	4681      	mov	r9, r0
 800c046:	6123      	str	r3, [r4, #16]
 800c048:	dc02      	bgt.n	800c050 <_printf_float+0x168>
 800c04a:	6822      	ldr	r2, [r4, #0]
 800c04c:	07d2      	lsls	r2, r2, #31
 800c04e:	d501      	bpl.n	800c054 <_printf_float+0x16c>
 800c050:	3301      	adds	r3, #1
 800c052:	6123      	str	r3, [r4, #16]
 800c054:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d09c      	beq.n	800bf96 <_printf_float+0xae>
 800c05c:	232d      	movs	r3, #45	; 0x2d
 800c05e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c062:	e798      	b.n	800bf96 <_printf_float+0xae>
 800c064:	9a06      	ldr	r2, [sp, #24]
 800c066:	2a47      	cmp	r2, #71	; 0x47
 800c068:	d1be      	bne.n	800bfe8 <_printf_float+0x100>
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d1bc      	bne.n	800bfe8 <_printf_float+0x100>
 800c06e:	2301      	movs	r3, #1
 800c070:	e7b9      	b.n	800bfe6 <_printf_float+0xfe>
 800c072:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c076:	d118      	bne.n	800c0aa <_printf_float+0x1c2>
 800c078:	2900      	cmp	r1, #0
 800c07a:	6863      	ldr	r3, [r4, #4]
 800c07c:	dd0b      	ble.n	800c096 <_printf_float+0x1ae>
 800c07e:	6121      	str	r1, [r4, #16]
 800c080:	b913      	cbnz	r3, 800c088 <_printf_float+0x1a0>
 800c082:	6822      	ldr	r2, [r4, #0]
 800c084:	07d0      	lsls	r0, r2, #31
 800c086:	d502      	bpl.n	800c08e <_printf_float+0x1a6>
 800c088:	3301      	adds	r3, #1
 800c08a:	440b      	add	r3, r1
 800c08c:	6123      	str	r3, [r4, #16]
 800c08e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c090:	f04f 0900 	mov.w	r9, #0
 800c094:	e7de      	b.n	800c054 <_printf_float+0x16c>
 800c096:	b913      	cbnz	r3, 800c09e <_printf_float+0x1b6>
 800c098:	6822      	ldr	r2, [r4, #0]
 800c09a:	07d2      	lsls	r2, r2, #31
 800c09c:	d501      	bpl.n	800c0a2 <_printf_float+0x1ba>
 800c09e:	3302      	adds	r3, #2
 800c0a0:	e7f4      	b.n	800c08c <_printf_float+0x1a4>
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e7f2      	b.n	800c08c <_printf_float+0x1a4>
 800c0a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c0aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ac:	4299      	cmp	r1, r3
 800c0ae:	db05      	blt.n	800c0bc <_printf_float+0x1d4>
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	6121      	str	r1, [r4, #16]
 800c0b4:	07d8      	lsls	r0, r3, #31
 800c0b6:	d5ea      	bpl.n	800c08e <_printf_float+0x1a6>
 800c0b8:	1c4b      	adds	r3, r1, #1
 800c0ba:	e7e7      	b.n	800c08c <_printf_float+0x1a4>
 800c0bc:	2900      	cmp	r1, #0
 800c0be:	bfd4      	ite	le
 800c0c0:	f1c1 0202 	rsble	r2, r1, #2
 800c0c4:	2201      	movgt	r2, #1
 800c0c6:	4413      	add	r3, r2
 800c0c8:	e7e0      	b.n	800c08c <_printf_float+0x1a4>
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	055a      	lsls	r2, r3, #21
 800c0ce:	d407      	bmi.n	800c0e0 <_printf_float+0x1f8>
 800c0d0:	6923      	ldr	r3, [r4, #16]
 800c0d2:	4642      	mov	r2, r8
 800c0d4:	4631      	mov	r1, r6
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	47b8      	blx	r7
 800c0da:	3001      	adds	r0, #1
 800c0dc:	d12c      	bne.n	800c138 <_printf_float+0x250>
 800c0de:	e764      	b.n	800bfaa <_printf_float+0xc2>
 800c0e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c0e4:	f240 80e0 	bls.w	800c2a8 <_printf_float+0x3c0>
 800c0e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	f7f4 fcfa 	bl	8000ae8 <__aeabi_dcmpeq>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d034      	beq.n	800c162 <_printf_float+0x27a>
 800c0f8:	4a37      	ldr	r2, [pc, #220]	; (800c1d8 <_printf_float+0x2f0>)
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	4631      	mov	r1, r6
 800c0fe:	4628      	mov	r0, r5
 800c100:	47b8      	blx	r7
 800c102:	3001      	adds	r0, #1
 800c104:	f43f af51 	beq.w	800bfaa <_printf_float+0xc2>
 800c108:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c10c:	429a      	cmp	r2, r3
 800c10e:	db02      	blt.n	800c116 <_printf_float+0x22e>
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	07d8      	lsls	r0, r3, #31
 800c114:	d510      	bpl.n	800c138 <_printf_float+0x250>
 800c116:	ee18 3a10 	vmov	r3, s16
 800c11a:	4652      	mov	r2, sl
 800c11c:	4631      	mov	r1, r6
 800c11e:	4628      	mov	r0, r5
 800c120:	47b8      	blx	r7
 800c122:	3001      	adds	r0, #1
 800c124:	f43f af41 	beq.w	800bfaa <_printf_float+0xc2>
 800c128:	f04f 0800 	mov.w	r8, #0
 800c12c:	f104 091a 	add.w	r9, r4, #26
 800c130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c132:	3b01      	subs	r3, #1
 800c134:	4543      	cmp	r3, r8
 800c136:	dc09      	bgt.n	800c14c <_printf_float+0x264>
 800c138:	6823      	ldr	r3, [r4, #0]
 800c13a:	079b      	lsls	r3, r3, #30
 800c13c:	f100 8105 	bmi.w	800c34a <_printf_float+0x462>
 800c140:	68e0      	ldr	r0, [r4, #12]
 800c142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c144:	4298      	cmp	r0, r3
 800c146:	bfb8      	it	lt
 800c148:	4618      	movlt	r0, r3
 800c14a:	e730      	b.n	800bfae <_printf_float+0xc6>
 800c14c:	2301      	movs	r3, #1
 800c14e:	464a      	mov	r2, r9
 800c150:	4631      	mov	r1, r6
 800c152:	4628      	mov	r0, r5
 800c154:	47b8      	blx	r7
 800c156:	3001      	adds	r0, #1
 800c158:	f43f af27 	beq.w	800bfaa <_printf_float+0xc2>
 800c15c:	f108 0801 	add.w	r8, r8, #1
 800c160:	e7e6      	b.n	800c130 <_printf_float+0x248>
 800c162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c164:	2b00      	cmp	r3, #0
 800c166:	dc39      	bgt.n	800c1dc <_printf_float+0x2f4>
 800c168:	4a1b      	ldr	r2, [pc, #108]	; (800c1d8 <_printf_float+0x2f0>)
 800c16a:	2301      	movs	r3, #1
 800c16c:	4631      	mov	r1, r6
 800c16e:	4628      	mov	r0, r5
 800c170:	47b8      	blx	r7
 800c172:	3001      	adds	r0, #1
 800c174:	f43f af19 	beq.w	800bfaa <_printf_float+0xc2>
 800c178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c17c:	4313      	orrs	r3, r2
 800c17e:	d102      	bne.n	800c186 <_printf_float+0x29e>
 800c180:	6823      	ldr	r3, [r4, #0]
 800c182:	07d9      	lsls	r1, r3, #31
 800c184:	d5d8      	bpl.n	800c138 <_printf_float+0x250>
 800c186:	ee18 3a10 	vmov	r3, s16
 800c18a:	4652      	mov	r2, sl
 800c18c:	4631      	mov	r1, r6
 800c18e:	4628      	mov	r0, r5
 800c190:	47b8      	blx	r7
 800c192:	3001      	adds	r0, #1
 800c194:	f43f af09 	beq.w	800bfaa <_printf_float+0xc2>
 800c198:	f04f 0900 	mov.w	r9, #0
 800c19c:	f104 0a1a 	add.w	sl, r4, #26
 800c1a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a2:	425b      	negs	r3, r3
 800c1a4:	454b      	cmp	r3, r9
 800c1a6:	dc01      	bgt.n	800c1ac <_printf_float+0x2c4>
 800c1a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1aa:	e792      	b.n	800c0d2 <_printf_float+0x1ea>
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	4652      	mov	r2, sl
 800c1b0:	4631      	mov	r1, r6
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	47b8      	blx	r7
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	f43f aef7 	beq.w	800bfaa <_printf_float+0xc2>
 800c1bc:	f109 0901 	add.w	r9, r9, #1
 800c1c0:	e7ee      	b.n	800c1a0 <_printf_float+0x2b8>
 800c1c2:	bf00      	nop
 800c1c4:	7fefffff 	.word	0x7fefffff
 800c1c8:	08011014 	.word	0x08011014
 800c1cc:	08011018 	.word	0x08011018
 800c1d0:	08011020 	.word	0x08011020
 800c1d4:	0801101c 	.word	0x0801101c
 800c1d8:	08011024 	.word	0x08011024
 800c1dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	bfa8      	it	ge
 800c1e4:	461a      	movge	r2, r3
 800c1e6:	2a00      	cmp	r2, #0
 800c1e8:	4691      	mov	r9, r2
 800c1ea:	dc37      	bgt.n	800c25c <_printf_float+0x374>
 800c1ec:	f04f 0b00 	mov.w	fp, #0
 800c1f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1f4:	f104 021a 	add.w	r2, r4, #26
 800c1f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1fa:	9305      	str	r3, [sp, #20]
 800c1fc:	eba3 0309 	sub.w	r3, r3, r9
 800c200:	455b      	cmp	r3, fp
 800c202:	dc33      	bgt.n	800c26c <_printf_float+0x384>
 800c204:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c208:	429a      	cmp	r2, r3
 800c20a:	db3b      	blt.n	800c284 <_printf_float+0x39c>
 800c20c:	6823      	ldr	r3, [r4, #0]
 800c20e:	07da      	lsls	r2, r3, #31
 800c210:	d438      	bmi.n	800c284 <_printf_float+0x39c>
 800c212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c214:	9b05      	ldr	r3, [sp, #20]
 800c216:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c218:	1ad3      	subs	r3, r2, r3
 800c21a:	eba2 0901 	sub.w	r9, r2, r1
 800c21e:	4599      	cmp	r9, r3
 800c220:	bfa8      	it	ge
 800c222:	4699      	movge	r9, r3
 800c224:	f1b9 0f00 	cmp.w	r9, #0
 800c228:	dc35      	bgt.n	800c296 <_printf_float+0x3ae>
 800c22a:	f04f 0800 	mov.w	r8, #0
 800c22e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c232:	f104 0a1a 	add.w	sl, r4, #26
 800c236:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c23a:	1a9b      	subs	r3, r3, r2
 800c23c:	eba3 0309 	sub.w	r3, r3, r9
 800c240:	4543      	cmp	r3, r8
 800c242:	f77f af79 	ble.w	800c138 <_printf_float+0x250>
 800c246:	2301      	movs	r3, #1
 800c248:	4652      	mov	r2, sl
 800c24a:	4631      	mov	r1, r6
 800c24c:	4628      	mov	r0, r5
 800c24e:	47b8      	blx	r7
 800c250:	3001      	adds	r0, #1
 800c252:	f43f aeaa 	beq.w	800bfaa <_printf_float+0xc2>
 800c256:	f108 0801 	add.w	r8, r8, #1
 800c25a:	e7ec      	b.n	800c236 <_printf_float+0x34e>
 800c25c:	4613      	mov	r3, r2
 800c25e:	4631      	mov	r1, r6
 800c260:	4642      	mov	r2, r8
 800c262:	4628      	mov	r0, r5
 800c264:	47b8      	blx	r7
 800c266:	3001      	adds	r0, #1
 800c268:	d1c0      	bne.n	800c1ec <_printf_float+0x304>
 800c26a:	e69e      	b.n	800bfaa <_printf_float+0xc2>
 800c26c:	2301      	movs	r3, #1
 800c26e:	4631      	mov	r1, r6
 800c270:	4628      	mov	r0, r5
 800c272:	9205      	str	r2, [sp, #20]
 800c274:	47b8      	blx	r7
 800c276:	3001      	adds	r0, #1
 800c278:	f43f ae97 	beq.w	800bfaa <_printf_float+0xc2>
 800c27c:	9a05      	ldr	r2, [sp, #20]
 800c27e:	f10b 0b01 	add.w	fp, fp, #1
 800c282:	e7b9      	b.n	800c1f8 <_printf_float+0x310>
 800c284:	ee18 3a10 	vmov	r3, s16
 800c288:	4652      	mov	r2, sl
 800c28a:	4631      	mov	r1, r6
 800c28c:	4628      	mov	r0, r5
 800c28e:	47b8      	blx	r7
 800c290:	3001      	adds	r0, #1
 800c292:	d1be      	bne.n	800c212 <_printf_float+0x32a>
 800c294:	e689      	b.n	800bfaa <_printf_float+0xc2>
 800c296:	9a05      	ldr	r2, [sp, #20]
 800c298:	464b      	mov	r3, r9
 800c29a:	4442      	add	r2, r8
 800c29c:	4631      	mov	r1, r6
 800c29e:	4628      	mov	r0, r5
 800c2a0:	47b8      	blx	r7
 800c2a2:	3001      	adds	r0, #1
 800c2a4:	d1c1      	bne.n	800c22a <_printf_float+0x342>
 800c2a6:	e680      	b.n	800bfaa <_printf_float+0xc2>
 800c2a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2aa:	2a01      	cmp	r2, #1
 800c2ac:	dc01      	bgt.n	800c2b2 <_printf_float+0x3ca>
 800c2ae:	07db      	lsls	r3, r3, #31
 800c2b0:	d538      	bpl.n	800c324 <_printf_float+0x43c>
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	4642      	mov	r2, r8
 800c2b6:	4631      	mov	r1, r6
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	47b8      	blx	r7
 800c2bc:	3001      	adds	r0, #1
 800c2be:	f43f ae74 	beq.w	800bfaa <_printf_float+0xc2>
 800c2c2:	ee18 3a10 	vmov	r3, s16
 800c2c6:	4652      	mov	r2, sl
 800c2c8:	4631      	mov	r1, r6
 800c2ca:	4628      	mov	r0, r5
 800c2cc:	47b8      	blx	r7
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	f43f ae6b 	beq.w	800bfaa <_printf_float+0xc2>
 800c2d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c2d8:	2200      	movs	r2, #0
 800c2da:	2300      	movs	r3, #0
 800c2dc:	f7f4 fc04 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2e0:	b9d8      	cbnz	r0, 800c31a <_printf_float+0x432>
 800c2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2e4:	f108 0201 	add.w	r2, r8, #1
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	4631      	mov	r1, r6
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	47b8      	blx	r7
 800c2f0:	3001      	adds	r0, #1
 800c2f2:	d10e      	bne.n	800c312 <_printf_float+0x42a>
 800c2f4:	e659      	b.n	800bfaa <_printf_float+0xc2>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	4652      	mov	r2, sl
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	47b8      	blx	r7
 800c300:	3001      	adds	r0, #1
 800c302:	f43f ae52 	beq.w	800bfaa <_printf_float+0xc2>
 800c306:	f108 0801 	add.w	r8, r8, #1
 800c30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c30c:	3b01      	subs	r3, #1
 800c30e:	4543      	cmp	r3, r8
 800c310:	dcf1      	bgt.n	800c2f6 <_printf_float+0x40e>
 800c312:	464b      	mov	r3, r9
 800c314:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c318:	e6dc      	b.n	800c0d4 <_printf_float+0x1ec>
 800c31a:	f04f 0800 	mov.w	r8, #0
 800c31e:	f104 0a1a 	add.w	sl, r4, #26
 800c322:	e7f2      	b.n	800c30a <_printf_float+0x422>
 800c324:	2301      	movs	r3, #1
 800c326:	4642      	mov	r2, r8
 800c328:	e7df      	b.n	800c2ea <_printf_float+0x402>
 800c32a:	2301      	movs	r3, #1
 800c32c:	464a      	mov	r2, r9
 800c32e:	4631      	mov	r1, r6
 800c330:	4628      	mov	r0, r5
 800c332:	47b8      	blx	r7
 800c334:	3001      	adds	r0, #1
 800c336:	f43f ae38 	beq.w	800bfaa <_printf_float+0xc2>
 800c33a:	f108 0801 	add.w	r8, r8, #1
 800c33e:	68e3      	ldr	r3, [r4, #12]
 800c340:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c342:	1a5b      	subs	r3, r3, r1
 800c344:	4543      	cmp	r3, r8
 800c346:	dcf0      	bgt.n	800c32a <_printf_float+0x442>
 800c348:	e6fa      	b.n	800c140 <_printf_float+0x258>
 800c34a:	f04f 0800 	mov.w	r8, #0
 800c34e:	f104 0919 	add.w	r9, r4, #25
 800c352:	e7f4      	b.n	800c33e <_printf_float+0x456>

0800c354 <_printf_common>:
 800c354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c358:	4616      	mov	r6, r2
 800c35a:	4699      	mov	r9, r3
 800c35c:	688a      	ldr	r2, [r1, #8]
 800c35e:	690b      	ldr	r3, [r1, #16]
 800c360:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c364:	4293      	cmp	r3, r2
 800c366:	bfb8      	it	lt
 800c368:	4613      	movlt	r3, r2
 800c36a:	6033      	str	r3, [r6, #0]
 800c36c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c370:	4607      	mov	r7, r0
 800c372:	460c      	mov	r4, r1
 800c374:	b10a      	cbz	r2, 800c37a <_printf_common+0x26>
 800c376:	3301      	adds	r3, #1
 800c378:	6033      	str	r3, [r6, #0]
 800c37a:	6823      	ldr	r3, [r4, #0]
 800c37c:	0699      	lsls	r1, r3, #26
 800c37e:	bf42      	ittt	mi
 800c380:	6833      	ldrmi	r3, [r6, #0]
 800c382:	3302      	addmi	r3, #2
 800c384:	6033      	strmi	r3, [r6, #0]
 800c386:	6825      	ldr	r5, [r4, #0]
 800c388:	f015 0506 	ands.w	r5, r5, #6
 800c38c:	d106      	bne.n	800c39c <_printf_common+0x48>
 800c38e:	f104 0a19 	add.w	sl, r4, #25
 800c392:	68e3      	ldr	r3, [r4, #12]
 800c394:	6832      	ldr	r2, [r6, #0]
 800c396:	1a9b      	subs	r3, r3, r2
 800c398:	42ab      	cmp	r3, r5
 800c39a:	dc26      	bgt.n	800c3ea <_printf_common+0x96>
 800c39c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3a0:	1e13      	subs	r3, r2, #0
 800c3a2:	6822      	ldr	r2, [r4, #0]
 800c3a4:	bf18      	it	ne
 800c3a6:	2301      	movne	r3, #1
 800c3a8:	0692      	lsls	r2, r2, #26
 800c3aa:	d42b      	bmi.n	800c404 <_printf_common+0xb0>
 800c3ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3b0:	4649      	mov	r1, r9
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	47c0      	blx	r8
 800c3b6:	3001      	adds	r0, #1
 800c3b8:	d01e      	beq.n	800c3f8 <_printf_common+0xa4>
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	68e5      	ldr	r5, [r4, #12]
 800c3be:	6832      	ldr	r2, [r6, #0]
 800c3c0:	f003 0306 	and.w	r3, r3, #6
 800c3c4:	2b04      	cmp	r3, #4
 800c3c6:	bf08      	it	eq
 800c3c8:	1aad      	subeq	r5, r5, r2
 800c3ca:	68a3      	ldr	r3, [r4, #8]
 800c3cc:	6922      	ldr	r2, [r4, #16]
 800c3ce:	bf0c      	ite	eq
 800c3d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3d4:	2500      	movne	r5, #0
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	bfc4      	itt	gt
 800c3da:	1a9b      	subgt	r3, r3, r2
 800c3dc:	18ed      	addgt	r5, r5, r3
 800c3de:	2600      	movs	r6, #0
 800c3e0:	341a      	adds	r4, #26
 800c3e2:	42b5      	cmp	r5, r6
 800c3e4:	d11a      	bne.n	800c41c <_printf_common+0xc8>
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	e008      	b.n	800c3fc <_printf_common+0xa8>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	4652      	mov	r2, sl
 800c3ee:	4649      	mov	r1, r9
 800c3f0:	4638      	mov	r0, r7
 800c3f2:	47c0      	blx	r8
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	d103      	bne.n	800c400 <_printf_common+0xac>
 800c3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c400:	3501      	adds	r5, #1
 800c402:	e7c6      	b.n	800c392 <_printf_common+0x3e>
 800c404:	18e1      	adds	r1, r4, r3
 800c406:	1c5a      	adds	r2, r3, #1
 800c408:	2030      	movs	r0, #48	; 0x30
 800c40a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c40e:	4422      	add	r2, r4
 800c410:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c414:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c418:	3302      	adds	r3, #2
 800c41a:	e7c7      	b.n	800c3ac <_printf_common+0x58>
 800c41c:	2301      	movs	r3, #1
 800c41e:	4622      	mov	r2, r4
 800c420:	4649      	mov	r1, r9
 800c422:	4638      	mov	r0, r7
 800c424:	47c0      	blx	r8
 800c426:	3001      	adds	r0, #1
 800c428:	d0e6      	beq.n	800c3f8 <_printf_common+0xa4>
 800c42a:	3601      	adds	r6, #1
 800c42c:	e7d9      	b.n	800c3e2 <_printf_common+0x8e>
	...

0800c430 <_printf_i>:
 800c430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c434:	460c      	mov	r4, r1
 800c436:	4691      	mov	r9, r2
 800c438:	7e27      	ldrb	r7, [r4, #24]
 800c43a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c43c:	2f78      	cmp	r7, #120	; 0x78
 800c43e:	4680      	mov	r8, r0
 800c440:	469a      	mov	sl, r3
 800c442:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c446:	d807      	bhi.n	800c458 <_printf_i+0x28>
 800c448:	2f62      	cmp	r7, #98	; 0x62
 800c44a:	d80a      	bhi.n	800c462 <_printf_i+0x32>
 800c44c:	2f00      	cmp	r7, #0
 800c44e:	f000 80d8 	beq.w	800c602 <_printf_i+0x1d2>
 800c452:	2f58      	cmp	r7, #88	; 0x58
 800c454:	f000 80a3 	beq.w	800c59e <_printf_i+0x16e>
 800c458:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c45c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c460:	e03a      	b.n	800c4d8 <_printf_i+0xa8>
 800c462:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c466:	2b15      	cmp	r3, #21
 800c468:	d8f6      	bhi.n	800c458 <_printf_i+0x28>
 800c46a:	a001      	add	r0, pc, #4	; (adr r0, 800c470 <_printf_i+0x40>)
 800c46c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c470:	0800c4c9 	.word	0x0800c4c9
 800c474:	0800c4dd 	.word	0x0800c4dd
 800c478:	0800c459 	.word	0x0800c459
 800c47c:	0800c459 	.word	0x0800c459
 800c480:	0800c459 	.word	0x0800c459
 800c484:	0800c459 	.word	0x0800c459
 800c488:	0800c4dd 	.word	0x0800c4dd
 800c48c:	0800c459 	.word	0x0800c459
 800c490:	0800c459 	.word	0x0800c459
 800c494:	0800c459 	.word	0x0800c459
 800c498:	0800c459 	.word	0x0800c459
 800c49c:	0800c5e9 	.word	0x0800c5e9
 800c4a0:	0800c50d 	.word	0x0800c50d
 800c4a4:	0800c5cb 	.word	0x0800c5cb
 800c4a8:	0800c459 	.word	0x0800c459
 800c4ac:	0800c459 	.word	0x0800c459
 800c4b0:	0800c60b 	.word	0x0800c60b
 800c4b4:	0800c459 	.word	0x0800c459
 800c4b8:	0800c50d 	.word	0x0800c50d
 800c4bc:	0800c459 	.word	0x0800c459
 800c4c0:	0800c459 	.word	0x0800c459
 800c4c4:	0800c5d3 	.word	0x0800c5d3
 800c4c8:	680b      	ldr	r3, [r1, #0]
 800c4ca:	1d1a      	adds	r2, r3, #4
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	600a      	str	r2, [r1, #0]
 800c4d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c4d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e0a3      	b.n	800c624 <_printf_i+0x1f4>
 800c4dc:	6825      	ldr	r5, [r4, #0]
 800c4de:	6808      	ldr	r0, [r1, #0]
 800c4e0:	062e      	lsls	r6, r5, #24
 800c4e2:	f100 0304 	add.w	r3, r0, #4
 800c4e6:	d50a      	bpl.n	800c4fe <_printf_i+0xce>
 800c4e8:	6805      	ldr	r5, [r0, #0]
 800c4ea:	600b      	str	r3, [r1, #0]
 800c4ec:	2d00      	cmp	r5, #0
 800c4ee:	da03      	bge.n	800c4f8 <_printf_i+0xc8>
 800c4f0:	232d      	movs	r3, #45	; 0x2d
 800c4f2:	426d      	negs	r5, r5
 800c4f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4f8:	485e      	ldr	r0, [pc, #376]	; (800c674 <_printf_i+0x244>)
 800c4fa:	230a      	movs	r3, #10
 800c4fc:	e019      	b.n	800c532 <_printf_i+0x102>
 800c4fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c502:	6805      	ldr	r5, [r0, #0]
 800c504:	600b      	str	r3, [r1, #0]
 800c506:	bf18      	it	ne
 800c508:	b22d      	sxthne	r5, r5
 800c50a:	e7ef      	b.n	800c4ec <_printf_i+0xbc>
 800c50c:	680b      	ldr	r3, [r1, #0]
 800c50e:	6825      	ldr	r5, [r4, #0]
 800c510:	1d18      	adds	r0, r3, #4
 800c512:	6008      	str	r0, [r1, #0]
 800c514:	0628      	lsls	r0, r5, #24
 800c516:	d501      	bpl.n	800c51c <_printf_i+0xec>
 800c518:	681d      	ldr	r5, [r3, #0]
 800c51a:	e002      	b.n	800c522 <_printf_i+0xf2>
 800c51c:	0669      	lsls	r1, r5, #25
 800c51e:	d5fb      	bpl.n	800c518 <_printf_i+0xe8>
 800c520:	881d      	ldrh	r5, [r3, #0]
 800c522:	4854      	ldr	r0, [pc, #336]	; (800c674 <_printf_i+0x244>)
 800c524:	2f6f      	cmp	r7, #111	; 0x6f
 800c526:	bf0c      	ite	eq
 800c528:	2308      	moveq	r3, #8
 800c52a:	230a      	movne	r3, #10
 800c52c:	2100      	movs	r1, #0
 800c52e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c532:	6866      	ldr	r6, [r4, #4]
 800c534:	60a6      	str	r6, [r4, #8]
 800c536:	2e00      	cmp	r6, #0
 800c538:	bfa2      	ittt	ge
 800c53a:	6821      	ldrge	r1, [r4, #0]
 800c53c:	f021 0104 	bicge.w	r1, r1, #4
 800c540:	6021      	strge	r1, [r4, #0]
 800c542:	b90d      	cbnz	r5, 800c548 <_printf_i+0x118>
 800c544:	2e00      	cmp	r6, #0
 800c546:	d04d      	beq.n	800c5e4 <_printf_i+0x1b4>
 800c548:	4616      	mov	r6, r2
 800c54a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c54e:	fb03 5711 	mls	r7, r3, r1, r5
 800c552:	5dc7      	ldrb	r7, [r0, r7]
 800c554:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c558:	462f      	mov	r7, r5
 800c55a:	42bb      	cmp	r3, r7
 800c55c:	460d      	mov	r5, r1
 800c55e:	d9f4      	bls.n	800c54a <_printf_i+0x11a>
 800c560:	2b08      	cmp	r3, #8
 800c562:	d10b      	bne.n	800c57c <_printf_i+0x14c>
 800c564:	6823      	ldr	r3, [r4, #0]
 800c566:	07df      	lsls	r7, r3, #31
 800c568:	d508      	bpl.n	800c57c <_printf_i+0x14c>
 800c56a:	6923      	ldr	r3, [r4, #16]
 800c56c:	6861      	ldr	r1, [r4, #4]
 800c56e:	4299      	cmp	r1, r3
 800c570:	bfde      	ittt	le
 800c572:	2330      	movle	r3, #48	; 0x30
 800c574:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c578:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c57c:	1b92      	subs	r2, r2, r6
 800c57e:	6122      	str	r2, [r4, #16]
 800c580:	f8cd a000 	str.w	sl, [sp]
 800c584:	464b      	mov	r3, r9
 800c586:	aa03      	add	r2, sp, #12
 800c588:	4621      	mov	r1, r4
 800c58a:	4640      	mov	r0, r8
 800c58c:	f7ff fee2 	bl	800c354 <_printf_common>
 800c590:	3001      	adds	r0, #1
 800c592:	d14c      	bne.n	800c62e <_printf_i+0x1fe>
 800c594:	f04f 30ff 	mov.w	r0, #4294967295
 800c598:	b004      	add	sp, #16
 800c59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c59e:	4835      	ldr	r0, [pc, #212]	; (800c674 <_printf_i+0x244>)
 800c5a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	680e      	ldr	r6, [r1, #0]
 800c5a8:	061f      	lsls	r7, r3, #24
 800c5aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800c5ae:	600e      	str	r6, [r1, #0]
 800c5b0:	d514      	bpl.n	800c5dc <_printf_i+0x1ac>
 800c5b2:	07d9      	lsls	r1, r3, #31
 800c5b4:	bf44      	itt	mi
 800c5b6:	f043 0320 	orrmi.w	r3, r3, #32
 800c5ba:	6023      	strmi	r3, [r4, #0]
 800c5bc:	b91d      	cbnz	r5, 800c5c6 <_printf_i+0x196>
 800c5be:	6823      	ldr	r3, [r4, #0]
 800c5c0:	f023 0320 	bic.w	r3, r3, #32
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	2310      	movs	r3, #16
 800c5c8:	e7b0      	b.n	800c52c <_printf_i+0xfc>
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	f043 0320 	orr.w	r3, r3, #32
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	2378      	movs	r3, #120	; 0x78
 800c5d4:	4828      	ldr	r0, [pc, #160]	; (800c678 <_printf_i+0x248>)
 800c5d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5da:	e7e3      	b.n	800c5a4 <_printf_i+0x174>
 800c5dc:	065e      	lsls	r6, r3, #25
 800c5de:	bf48      	it	mi
 800c5e0:	b2ad      	uxthmi	r5, r5
 800c5e2:	e7e6      	b.n	800c5b2 <_printf_i+0x182>
 800c5e4:	4616      	mov	r6, r2
 800c5e6:	e7bb      	b.n	800c560 <_printf_i+0x130>
 800c5e8:	680b      	ldr	r3, [r1, #0]
 800c5ea:	6826      	ldr	r6, [r4, #0]
 800c5ec:	6960      	ldr	r0, [r4, #20]
 800c5ee:	1d1d      	adds	r5, r3, #4
 800c5f0:	600d      	str	r5, [r1, #0]
 800c5f2:	0635      	lsls	r5, r6, #24
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	d501      	bpl.n	800c5fc <_printf_i+0x1cc>
 800c5f8:	6018      	str	r0, [r3, #0]
 800c5fa:	e002      	b.n	800c602 <_printf_i+0x1d2>
 800c5fc:	0671      	lsls	r1, r6, #25
 800c5fe:	d5fb      	bpl.n	800c5f8 <_printf_i+0x1c8>
 800c600:	8018      	strh	r0, [r3, #0]
 800c602:	2300      	movs	r3, #0
 800c604:	6123      	str	r3, [r4, #16]
 800c606:	4616      	mov	r6, r2
 800c608:	e7ba      	b.n	800c580 <_printf_i+0x150>
 800c60a:	680b      	ldr	r3, [r1, #0]
 800c60c:	1d1a      	adds	r2, r3, #4
 800c60e:	600a      	str	r2, [r1, #0]
 800c610:	681e      	ldr	r6, [r3, #0]
 800c612:	6862      	ldr	r2, [r4, #4]
 800c614:	2100      	movs	r1, #0
 800c616:	4630      	mov	r0, r6
 800c618:	f7f3 fdf2 	bl	8000200 <memchr>
 800c61c:	b108      	cbz	r0, 800c622 <_printf_i+0x1f2>
 800c61e:	1b80      	subs	r0, r0, r6
 800c620:	6060      	str	r0, [r4, #4]
 800c622:	6863      	ldr	r3, [r4, #4]
 800c624:	6123      	str	r3, [r4, #16]
 800c626:	2300      	movs	r3, #0
 800c628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c62c:	e7a8      	b.n	800c580 <_printf_i+0x150>
 800c62e:	6923      	ldr	r3, [r4, #16]
 800c630:	4632      	mov	r2, r6
 800c632:	4649      	mov	r1, r9
 800c634:	4640      	mov	r0, r8
 800c636:	47d0      	blx	sl
 800c638:	3001      	adds	r0, #1
 800c63a:	d0ab      	beq.n	800c594 <_printf_i+0x164>
 800c63c:	6823      	ldr	r3, [r4, #0]
 800c63e:	079b      	lsls	r3, r3, #30
 800c640:	d413      	bmi.n	800c66a <_printf_i+0x23a>
 800c642:	68e0      	ldr	r0, [r4, #12]
 800c644:	9b03      	ldr	r3, [sp, #12]
 800c646:	4298      	cmp	r0, r3
 800c648:	bfb8      	it	lt
 800c64a:	4618      	movlt	r0, r3
 800c64c:	e7a4      	b.n	800c598 <_printf_i+0x168>
 800c64e:	2301      	movs	r3, #1
 800c650:	4632      	mov	r2, r6
 800c652:	4649      	mov	r1, r9
 800c654:	4640      	mov	r0, r8
 800c656:	47d0      	blx	sl
 800c658:	3001      	adds	r0, #1
 800c65a:	d09b      	beq.n	800c594 <_printf_i+0x164>
 800c65c:	3501      	adds	r5, #1
 800c65e:	68e3      	ldr	r3, [r4, #12]
 800c660:	9903      	ldr	r1, [sp, #12]
 800c662:	1a5b      	subs	r3, r3, r1
 800c664:	42ab      	cmp	r3, r5
 800c666:	dcf2      	bgt.n	800c64e <_printf_i+0x21e>
 800c668:	e7eb      	b.n	800c642 <_printf_i+0x212>
 800c66a:	2500      	movs	r5, #0
 800c66c:	f104 0619 	add.w	r6, r4, #25
 800c670:	e7f5      	b.n	800c65e <_printf_i+0x22e>
 800c672:	bf00      	nop
 800c674:	08011026 	.word	0x08011026
 800c678:	08011037 	.word	0x08011037

0800c67c <_scanf_float>:
 800c67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c680:	b087      	sub	sp, #28
 800c682:	4617      	mov	r7, r2
 800c684:	9303      	str	r3, [sp, #12]
 800c686:	688b      	ldr	r3, [r1, #8]
 800c688:	1e5a      	subs	r2, r3, #1
 800c68a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c68e:	bf83      	ittte	hi
 800c690:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c694:	195b      	addhi	r3, r3, r5
 800c696:	9302      	strhi	r3, [sp, #8]
 800c698:	2300      	movls	r3, #0
 800c69a:	bf86      	itte	hi
 800c69c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c6a0:	608b      	strhi	r3, [r1, #8]
 800c6a2:	9302      	strls	r3, [sp, #8]
 800c6a4:	680b      	ldr	r3, [r1, #0]
 800c6a6:	468b      	mov	fp, r1
 800c6a8:	2500      	movs	r5, #0
 800c6aa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c6ae:	f84b 3b1c 	str.w	r3, [fp], #28
 800c6b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c6b6:	4680      	mov	r8, r0
 800c6b8:	460c      	mov	r4, r1
 800c6ba:	465e      	mov	r6, fp
 800c6bc:	46aa      	mov	sl, r5
 800c6be:	46a9      	mov	r9, r5
 800c6c0:	9501      	str	r5, [sp, #4]
 800c6c2:	68a2      	ldr	r2, [r4, #8]
 800c6c4:	b152      	cbz	r2, 800c6dc <_scanf_float+0x60>
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	2b4e      	cmp	r3, #78	; 0x4e
 800c6cc:	d864      	bhi.n	800c798 <_scanf_float+0x11c>
 800c6ce:	2b40      	cmp	r3, #64	; 0x40
 800c6d0:	d83c      	bhi.n	800c74c <_scanf_float+0xd0>
 800c6d2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c6d6:	b2c8      	uxtb	r0, r1
 800c6d8:	280e      	cmp	r0, #14
 800c6da:	d93a      	bls.n	800c752 <_scanf_float+0xd6>
 800c6dc:	f1b9 0f00 	cmp.w	r9, #0
 800c6e0:	d003      	beq.n	800c6ea <_scanf_float+0x6e>
 800c6e2:	6823      	ldr	r3, [r4, #0]
 800c6e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6ee:	f1ba 0f01 	cmp.w	sl, #1
 800c6f2:	f200 8113 	bhi.w	800c91c <_scanf_float+0x2a0>
 800c6f6:	455e      	cmp	r6, fp
 800c6f8:	f200 8105 	bhi.w	800c906 <_scanf_float+0x28a>
 800c6fc:	2501      	movs	r5, #1
 800c6fe:	4628      	mov	r0, r5
 800c700:	b007      	add	sp, #28
 800c702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c706:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c70a:	2a0d      	cmp	r2, #13
 800c70c:	d8e6      	bhi.n	800c6dc <_scanf_float+0x60>
 800c70e:	a101      	add	r1, pc, #4	; (adr r1, 800c714 <_scanf_float+0x98>)
 800c710:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c714:	0800c853 	.word	0x0800c853
 800c718:	0800c6dd 	.word	0x0800c6dd
 800c71c:	0800c6dd 	.word	0x0800c6dd
 800c720:	0800c6dd 	.word	0x0800c6dd
 800c724:	0800c8b3 	.word	0x0800c8b3
 800c728:	0800c88b 	.word	0x0800c88b
 800c72c:	0800c6dd 	.word	0x0800c6dd
 800c730:	0800c6dd 	.word	0x0800c6dd
 800c734:	0800c861 	.word	0x0800c861
 800c738:	0800c6dd 	.word	0x0800c6dd
 800c73c:	0800c6dd 	.word	0x0800c6dd
 800c740:	0800c6dd 	.word	0x0800c6dd
 800c744:	0800c6dd 	.word	0x0800c6dd
 800c748:	0800c819 	.word	0x0800c819
 800c74c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c750:	e7db      	b.n	800c70a <_scanf_float+0x8e>
 800c752:	290e      	cmp	r1, #14
 800c754:	d8c2      	bhi.n	800c6dc <_scanf_float+0x60>
 800c756:	a001      	add	r0, pc, #4	; (adr r0, 800c75c <_scanf_float+0xe0>)
 800c758:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c75c:	0800c80b 	.word	0x0800c80b
 800c760:	0800c6dd 	.word	0x0800c6dd
 800c764:	0800c80b 	.word	0x0800c80b
 800c768:	0800c89f 	.word	0x0800c89f
 800c76c:	0800c6dd 	.word	0x0800c6dd
 800c770:	0800c7b9 	.word	0x0800c7b9
 800c774:	0800c7f5 	.word	0x0800c7f5
 800c778:	0800c7f5 	.word	0x0800c7f5
 800c77c:	0800c7f5 	.word	0x0800c7f5
 800c780:	0800c7f5 	.word	0x0800c7f5
 800c784:	0800c7f5 	.word	0x0800c7f5
 800c788:	0800c7f5 	.word	0x0800c7f5
 800c78c:	0800c7f5 	.word	0x0800c7f5
 800c790:	0800c7f5 	.word	0x0800c7f5
 800c794:	0800c7f5 	.word	0x0800c7f5
 800c798:	2b6e      	cmp	r3, #110	; 0x6e
 800c79a:	d809      	bhi.n	800c7b0 <_scanf_float+0x134>
 800c79c:	2b60      	cmp	r3, #96	; 0x60
 800c79e:	d8b2      	bhi.n	800c706 <_scanf_float+0x8a>
 800c7a0:	2b54      	cmp	r3, #84	; 0x54
 800c7a2:	d077      	beq.n	800c894 <_scanf_float+0x218>
 800c7a4:	2b59      	cmp	r3, #89	; 0x59
 800c7a6:	d199      	bne.n	800c6dc <_scanf_float+0x60>
 800c7a8:	2d07      	cmp	r5, #7
 800c7aa:	d197      	bne.n	800c6dc <_scanf_float+0x60>
 800c7ac:	2508      	movs	r5, #8
 800c7ae:	e029      	b.n	800c804 <_scanf_float+0x188>
 800c7b0:	2b74      	cmp	r3, #116	; 0x74
 800c7b2:	d06f      	beq.n	800c894 <_scanf_float+0x218>
 800c7b4:	2b79      	cmp	r3, #121	; 0x79
 800c7b6:	e7f6      	b.n	800c7a6 <_scanf_float+0x12a>
 800c7b8:	6821      	ldr	r1, [r4, #0]
 800c7ba:	05c8      	lsls	r0, r1, #23
 800c7bc:	d51a      	bpl.n	800c7f4 <_scanf_float+0x178>
 800c7be:	9b02      	ldr	r3, [sp, #8]
 800c7c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c7c4:	6021      	str	r1, [r4, #0]
 800c7c6:	f109 0901 	add.w	r9, r9, #1
 800c7ca:	b11b      	cbz	r3, 800c7d4 <_scanf_float+0x158>
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	3201      	adds	r2, #1
 800c7d0:	9302      	str	r3, [sp, #8]
 800c7d2:	60a2      	str	r2, [r4, #8]
 800c7d4:	68a3      	ldr	r3, [r4, #8]
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	60a3      	str	r3, [r4, #8]
 800c7da:	6923      	ldr	r3, [r4, #16]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	6123      	str	r3, [r4, #16]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	607b      	str	r3, [r7, #4]
 800c7e8:	f340 8084 	ble.w	800c8f4 <_scanf_float+0x278>
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	603b      	str	r3, [r7, #0]
 800c7f2:	e766      	b.n	800c6c2 <_scanf_float+0x46>
 800c7f4:	eb1a 0f05 	cmn.w	sl, r5
 800c7f8:	f47f af70 	bne.w	800c6dc <_scanf_float+0x60>
 800c7fc:	6822      	ldr	r2, [r4, #0]
 800c7fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c802:	6022      	str	r2, [r4, #0]
 800c804:	f806 3b01 	strb.w	r3, [r6], #1
 800c808:	e7e4      	b.n	800c7d4 <_scanf_float+0x158>
 800c80a:	6822      	ldr	r2, [r4, #0]
 800c80c:	0610      	lsls	r0, r2, #24
 800c80e:	f57f af65 	bpl.w	800c6dc <_scanf_float+0x60>
 800c812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c816:	e7f4      	b.n	800c802 <_scanf_float+0x186>
 800c818:	f1ba 0f00 	cmp.w	sl, #0
 800c81c:	d10e      	bne.n	800c83c <_scanf_float+0x1c0>
 800c81e:	f1b9 0f00 	cmp.w	r9, #0
 800c822:	d10e      	bne.n	800c842 <_scanf_float+0x1c6>
 800c824:	6822      	ldr	r2, [r4, #0]
 800c826:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c82a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c82e:	d108      	bne.n	800c842 <_scanf_float+0x1c6>
 800c830:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c834:	6022      	str	r2, [r4, #0]
 800c836:	f04f 0a01 	mov.w	sl, #1
 800c83a:	e7e3      	b.n	800c804 <_scanf_float+0x188>
 800c83c:	f1ba 0f02 	cmp.w	sl, #2
 800c840:	d055      	beq.n	800c8ee <_scanf_float+0x272>
 800c842:	2d01      	cmp	r5, #1
 800c844:	d002      	beq.n	800c84c <_scanf_float+0x1d0>
 800c846:	2d04      	cmp	r5, #4
 800c848:	f47f af48 	bne.w	800c6dc <_scanf_float+0x60>
 800c84c:	3501      	adds	r5, #1
 800c84e:	b2ed      	uxtb	r5, r5
 800c850:	e7d8      	b.n	800c804 <_scanf_float+0x188>
 800c852:	f1ba 0f01 	cmp.w	sl, #1
 800c856:	f47f af41 	bne.w	800c6dc <_scanf_float+0x60>
 800c85a:	f04f 0a02 	mov.w	sl, #2
 800c85e:	e7d1      	b.n	800c804 <_scanf_float+0x188>
 800c860:	b97d      	cbnz	r5, 800c882 <_scanf_float+0x206>
 800c862:	f1b9 0f00 	cmp.w	r9, #0
 800c866:	f47f af3c 	bne.w	800c6e2 <_scanf_float+0x66>
 800c86a:	6822      	ldr	r2, [r4, #0]
 800c86c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c870:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c874:	f47f af39 	bne.w	800c6ea <_scanf_float+0x6e>
 800c878:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c87c:	6022      	str	r2, [r4, #0]
 800c87e:	2501      	movs	r5, #1
 800c880:	e7c0      	b.n	800c804 <_scanf_float+0x188>
 800c882:	2d03      	cmp	r5, #3
 800c884:	d0e2      	beq.n	800c84c <_scanf_float+0x1d0>
 800c886:	2d05      	cmp	r5, #5
 800c888:	e7de      	b.n	800c848 <_scanf_float+0x1cc>
 800c88a:	2d02      	cmp	r5, #2
 800c88c:	f47f af26 	bne.w	800c6dc <_scanf_float+0x60>
 800c890:	2503      	movs	r5, #3
 800c892:	e7b7      	b.n	800c804 <_scanf_float+0x188>
 800c894:	2d06      	cmp	r5, #6
 800c896:	f47f af21 	bne.w	800c6dc <_scanf_float+0x60>
 800c89a:	2507      	movs	r5, #7
 800c89c:	e7b2      	b.n	800c804 <_scanf_float+0x188>
 800c89e:	6822      	ldr	r2, [r4, #0]
 800c8a0:	0591      	lsls	r1, r2, #22
 800c8a2:	f57f af1b 	bpl.w	800c6dc <_scanf_float+0x60>
 800c8a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c8aa:	6022      	str	r2, [r4, #0]
 800c8ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800c8b0:	e7a8      	b.n	800c804 <_scanf_float+0x188>
 800c8b2:	6822      	ldr	r2, [r4, #0]
 800c8b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c8b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c8bc:	d006      	beq.n	800c8cc <_scanf_float+0x250>
 800c8be:	0550      	lsls	r0, r2, #21
 800c8c0:	f57f af0c 	bpl.w	800c6dc <_scanf_float+0x60>
 800c8c4:	f1b9 0f00 	cmp.w	r9, #0
 800c8c8:	f43f af0f 	beq.w	800c6ea <_scanf_float+0x6e>
 800c8cc:	0591      	lsls	r1, r2, #22
 800c8ce:	bf58      	it	pl
 800c8d0:	9901      	ldrpl	r1, [sp, #4]
 800c8d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c8d6:	bf58      	it	pl
 800c8d8:	eba9 0101 	subpl.w	r1, r9, r1
 800c8dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c8e0:	bf58      	it	pl
 800c8e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c8e6:	6022      	str	r2, [r4, #0]
 800c8e8:	f04f 0900 	mov.w	r9, #0
 800c8ec:	e78a      	b.n	800c804 <_scanf_float+0x188>
 800c8ee:	f04f 0a03 	mov.w	sl, #3
 800c8f2:	e787      	b.n	800c804 <_scanf_float+0x188>
 800c8f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c8f8:	4639      	mov	r1, r7
 800c8fa:	4640      	mov	r0, r8
 800c8fc:	4798      	blx	r3
 800c8fe:	2800      	cmp	r0, #0
 800c900:	f43f aedf 	beq.w	800c6c2 <_scanf_float+0x46>
 800c904:	e6ea      	b.n	800c6dc <_scanf_float+0x60>
 800c906:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c90a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c90e:	463a      	mov	r2, r7
 800c910:	4640      	mov	r0, r8
 800c912:	4798      	blx	r3
 800c914:	6923      	ldr	r3, [r4, #16]
 800c916:	3b01      	subs	r3, #1
 800c918:	6123      	str	r3, [r4, #16]
 800c91a:	e6ec      	b.n	800c6f6 <_scanf_float+0x7a>
 800c91c:	1e6b      	subs	r3, r5, #1
 800c91e:	2b06      	cmp	r3, #6
 800c920:	d825      	bhi.n	800c96e <_scanf_float+0x2f2>
 800c922:	2d02      	cmp	r5, #2
 800c924:	d836      	bhi.n	800c994 <_scanf_float+0x318>
 800c926:	455e      	cmp	r6, fp
 800c928:	f67f aee8 	bls.w	800c6fc <_scanf_float+0x80>
 800c92c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c930:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c934:	463a      	mov	r2, r7
 800c936:	4640      	mov	r0, r8
 800c938:	4798      	blx	r3
 800c93a:	6923      	ldr	r3, [r4, #16]
 800c93c:	3b01      	subs	r3, #1
 800c93e:	6123      	str	r3, [r4, #16]
 800c940:	e7f1      	b.n	800c926 <_scanf_float+0x2aa>
 800c942:	9802      	ldr	r0, [sp, #8]
 800c944:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c948:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c94c:	9002      	str	r0, [sp, #8]
 800c94e:	463a      	mov	r2, r7
 800c950:	4640      	mov	r0, r8
 800c952:	4798      	blx	r3
 800c954:	6923      	ldr	r3, [r4, #16]
 800c956:	3b01      	subs	r3, #1
 800c958:	6123      	str	r3, [r4, #16]
 800c95a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c95e:	fa5f fa8a 	uxtb.w	sl, sl
 800c962:	f1ba 0f02 	cmp.w	sl, #2
 800c966:	d1ec      	bne.n	800c942 <_scanf_float+0x2c6>
 800c968:	3d03      	subs	r5, #3
 800c96a:	b2ed      	uxtb	r5, r5
 800c96c:	1b76      	subs	r6, r6, r5
 800c96e:	6823      	ldr	r3, [r4, #0]
 800c970:	05da      	lsls	r2, r3, #23
 800c972:	d52f      	bpl.n	800c9d4 <_scanf_float+0x358>
 800c974:	055b      	lsls	r3, r3, #21
 800c976:	d510      	bpl.n	800c99a <_scanf_float+0x31e>
 800c978:	455e      	cmp	r6, fp
 800c97a:	f67f aebf 	bls.w	800c6fc <_scanf_float+0x80>
 800c97e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c982:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c986:	463a      	mov	r2, r7
 800c988:	4640      	mov	r0, r8
 800c98a:	4798      	blx	r3
 800c98c:	6923      	ldr	r3, [r4, #16]
 800c98e:	3b01      	subs	r3, #1
 800c990:	6123      	str	r3, [r4, #16]
 800c992:	e7f1      	b.n	800c978 <_scanf_float+0x2fc>
 800c994:	46aa      	mov	sl, r5
 800c996:	9602      	str	r6, [sp, #8]
 800c998:	e7df      	b.n	800c95a <_scanf_float+0x2de>
 800c99a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c99e:	6923      	ldr	r3, [r4, #16]
 800c9a0:	2965      	cmp	r1, #101	; 0x65
 800c9a2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c9a6:	f106 35ff 	add.w	r5, r6, #4294967295
 800c9aa:	6123      	str	r3, [r4, #16]
 800c9ac:	d00c      	beq.n	800c9c8 <_scanf_float+0x34c>
 800c9ae:	2945      	cmp	r1, #69	; 0x45
 800c9b0:	d00a      	beq.n	800c9c8 <_scanf_float+0x34c>
 800c9b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9b6:	463a      	mov	r2, r7
 800c9b8:	4640      	mov	r0, r8
 800c9ba:	4798      	blx	r3
 800c9bc:	6923      	ldr	r3, [r4, #16]
 800c9be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c9c2:	3b01      	subs	r3, #1
 800c9c4:	1eb5      	subs	r5, r6, #2
 800c9c6:	6123      	str	r3, [r4, #16]
 800c9c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9cc:	463a      	mov	r2, r7
 800c9ce:	4640      	mov	r0, r8
 800c9d0:	4798      	blx	r3
 800c9d2:	462e      	mov	r6, r5
 800c9d4:	6825      	ldr	r5, [r4, #0]
 800c9d6:	f015 0510 	ands.w	r5, r5, #16
 800c9da:	d158      	bne.n	800ca8e <_scanf_float+0x412>
 800c9dc:	7035      	strb	r5, [r6, #0]
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c9e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c9e8:	d11c      	bne.n	800ca24 <_scanf_float+0x3a8>
 800c9ea:	9b01      	ldr	r3, [sp, #4]
 800c9ec:	454b      	cmp	r3, r9
 800c9ee:	eba3 0209 	sub.w	r2, r3, r9
 800c9f2:	d124      	bne.n	800ca3e <_scanf_float+0x3c2>
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4659      	mov	r1, fp
 800c9f8:	4640      	mov	r0, r8
 800c9fa:	f000 ff7f 	bl	800d8fc <_strtod_r>
 800c9fe:	9b03      	ldr	r3, [sp, #12]
 800ca00:	6821      	ldr	r1, [r4, #0]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f011 0f02 	tst.w	r1, #2
 800ca08:	ec57 6b10 	vmov	r6, r7, d0
 800ca0c:	f103 0204 	add.w	r2, r3, #4
 800ca10:	d020      	beq.n	800ca54 <_scanf_float+0x3d8>
 800ca12:	9903      	ldr	r1, [sp, #12]
 800ca14:	600a      	str	r2, [r1, #0]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	e9c3 6700 	strd	r6, r7, [r3]
 800ca1c:	68e3      	ldr	r3, [r4, #12]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	60e3      	str	r3, [r4, #12]
 800ca22:	e66c      	b.n	800c6fe <_scanf_float+0x82>
 800ca24:	9b04      	ldr	r3, [sp, #16]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d0e4      	beq.n	800c9f4 <_scanf_float+0x378>
 800ca2a:	9905      	ldr	r1, [sp, #20]
 800ca2c:	230a      	movs	r3, #10
 800ca2e:	462a      	mov	r2, r5
 800ca30:	3101      	adds	r1, #1
 800ca32:	4640      	mov	r0, r8
 800ca34:	f000 ffec 	bl	800da10 <_strtol_r>
 800ca38:	9b04      	ldr	r3, [sp, #16]
 800ca3a:	9e05      	ldr	r6, [sp, #20]
 800ca3c:	1ac2      	subs	r2, r0, r3
 800ca3e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ca42:	429e      	cmp	r6, r3
 800ca44:	bf28      	it	cs
 800ca46:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ca4a:	4912      	ldr	r1, [pc, #72]	; (800ca94 <_scanf_float+0x418>)
 800ca4c:	4630      	mov	r0, r6
 800ca4e:	f000 f8c9 	bl	800cbe4 <siprintf>
 800ca52:	e7cf      	b.n	800c9f4 <_scanf_float+0x378>
 800ca54:	f011 0f04 	tst.w	r1, #4
 800ca58:	9903      	ldr	r1, [sp, #12]
 800ca5a:	600a      	str	r2, [r1, #0]
 800ca5c:	d1db      	bne.n	800ca16 <_scanf_float+0x39a>
 800ca5e:	f8d3 8000 	ldr.w	r8, [r3]
 800ca62:	ee10 2a10 	vmov	r2, s0
 800ca66:	ee10 0a10 	vmov	r0, s0
 800ca6a:	463b      	mov	r3, r7
 800ca6c:	4639      	mov	r1, r7
 800ca6e:	f7f4 f86d 	bl	8000b4c <__aeabi_dcmpun>
 800ca72:	b128      	cbz	r0, 800ca80 <_scanf_float+0x404>
 800ca74:	4808      	ldr	r0, [pc, #32]	; (800ca98 <_scanf_float+0x41c>)
 800ca76:	f000 f8af 	bl	800cbd8 <nanf>
 800ca7a:	ed88 0a00 	vstr	s0, [r8]
 800ca7e:	e7cd      	b.n	800ca1c <_scanf_float+0x3a0>
 800ca80:	4630      	mov	r0, r6
 800ca82:	4639      	mov	r1, r7
 800ca84:	f7f4 f8c0 	bl	8000c08 <__aeabi_d2f>
 800ca88:	f8c8 0000 	str.w	r0, [r8]
 800ca8c:	e7c6      	b.n	800ca1c <_scanf_float+0x3a0>
 800ca8e:	2500      	movs	r5, #0
 800ca90:	e635      	b.n	800c6fe <_scanf_float+0x82>
 800ca92:	bf00      	nop
 800ca94:	08011048 	.word	0x08011048
 800ca98:	08011460 	.word	0x08011460

0800ca9c <iprintf>:
 800ca9c:	b40f      	push	{r0, r1, r2, r3}
 800ca9e:	4b0a      	ldr	r3, [pc, #40]	; (800cac8 <iprintf+0x2c>)
 800caa0:	b513      	push	{r0, r1, r4, lr}
 800caa2:	681c      	ldr	r4, [r3, #0]
 800caa4:	b124      	cbz	r4, 800cab0 <iprintf+0x14>
 800caa6:	69a3      	ldr	r3, [r4, #24]
 800caa8:	b913      	cbnz	r3, 800cab0 <iprintf+0x14>
 800caaa:	4620      	mov	r0, r4
 800caac:	f7ff f846 	bl	800bb3c <__sinit>
 800cab0:	ab05      	add	r3, sp, #20
 800cab2:	9a04      	ldr	r2, [sp, #16]
 800cab4:	68a1      	ldr	r1, [r4, #8]
 800cab6:	9301      	str	r3, [sp, #4]
 800cab8:	4620      	mov	r0, r4
 800caba:	f003 fa7d 	bl	800ffb8 <_vfiprintf_r>
 800cabe:	b002      	add	sp, #8
 800cac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac4:	b004      	add	sp, #16
 800cac6:	4770      	bx	lr
 800cac8:	20000080 	.word	0x20000080

0800cacc <_puts_r>:
 800cacc:	b570      	push	{r4, r5, r6, lr}
 800cace:	460e      	mov	r6, r1
 800cad0:	4605      	mov	r5, r0
 800cad2:	b118      	cbz	r0, 800cadc <_puts_r+0x10>
 800cad4:	6983      	ldr	r3, [r0, #24]
 800cad6:	b90b      	cbnz	r3, 800cadc <_puts_r+0x10>
 800cad8:	f7ff f830 	bl	800bb3c <__sinit>
 800cadc:	69ab      	ldr	r3, [r5, #24]
 800cade:	68ac      	ldr	r4, [r5, #8]
 800cae0:	b913      	cbnz	r3, 800cae8 <_puts_r+0x1c>
 800cae2:	4628      	mov	r0, r5
 800cae4:	f7ff f82a 	bl	800bb3c <__sinit>
 800cae8:	4b2c      	ldr	r3, [pc, #176]	; (800cb9c <_puts_r+0xd0>)
 800caea:	429c      	cmp	r4, r3
 800caec:	d120      	bne.n	800cb30 <_puts_r+0x64>
 800caee:	686c      	ldr	r4, [r5, #4]
 800caf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800caf2:	07db      	lsls	r3, r3, #31
 800caf4:	d405      	bmi.n	800cb02 <_puts_r+0x36>
 800caf6:	89a3      	ldrh	r3, [r4, #12]
 800caf8:	0598      	lsls	r0, r3, #22
 800cafa:	d402      	bmi.n	800cb02 <_puts_r+0x36>
 800cafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cafe:	f7ff f8e0 	bl	800bcc2 <__retarget_lock_acquire_recursive>
 800cb02:	89a3      	ldrh	r3, [r4, #12]
 800cb04:	0719      	lsls	r1, r3, #28
 800cb06:	d51d      	bpl.n	800cb44 <_puts_r+0x78>
 800cb08:	6923      	ldr	r3, [r4, #16]
 800cb0a:	b1db      	cbz	r3, 800cb44 <_puts_r+0x78>
 800cb0c:	3e01      	subs	r6, #1
 800cb0e:	68a3      	ldr	r3, [r4, #8]
 800cb10:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cb14:	3b01      	subs	r3, #1
 800cb16:	60a3      	str	r3, [r4, #8]
 800cb18:	bb39      	cbnz	r1, 800cb6a <_puts_r+0x9e>
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	da38      	bge.n	800cb90 <_puts_r+0xc4>
 800cb1e:	4622      	mov	r2, r4
 800cb20:	210a      	movs	r1, #10
 800cb22:	4628      	mov	r0, r5
 800cb24:	f000 ff76 	bl	800da14 <__swbuf_r>
 800cb28:	3001      	adds	r0, #1
 800cb2a:	d011      	beq.n	800cb50 <_puts_r+0x84>
 800cb2c:	250a      	movs	r5, #10
 800cb2e:	e011      	b.n	800cb54 <_puts_r+0x88>
 800cb30:	4b1b      	ldr	r3, [pc, #108]	; (800cba0 <_puts_r+0xd4>)
 800cb32:	429c      	cmp	r4, r3
 800cb34:	d101      	bne.n	800cb3a <_puts_r+0x6e>
 800cb36:	68ac      	ldr	r4, [r5, #8]
 800cb38:	e7da      	b.n	800caf0 <_puts_r+0x24>
 800cb3a:	4b1a      	ldr	r3, [pc, #104]	; (800cba4 <_puts_r+0xd8>)
 800cb3c:	429c      	cmp	r4, r3
 800cb3e:	bf08      	it	eq
 800cb40:	68ec      	ldreq	r4, [r5, #12]
 800cb42:	e7d5      	b.n	800caf0 <_puts_r+0x24>
 800cb44:	4621      	mov	r1, r4
 800cb46:	4628      	mov	r0, r5
 800cb48:	f000 ffc8 	bl	800dadc <__swsetup_r>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d0dd      	beq.n	800cb0c <_puts_r+0x40>
 800cb50:	f04f 35ff 	mov.w	r5, #4294967295
 800cb54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb56:	07da      	lsls	r2, r3, #31
 800cb58:	d405      	bmi.n	800cb66 <_puts_r+0x9a>
 800cb5a:	89a3      	ldrh	r3, [r4, #12]
 800cb5c:	059b      	lsls	r3, r3, #22
 800cb5e:	d402      	bmi.n	800cb66 <_puts_r+0x9a>
 800cb60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb62:	f7ff f8af 	bl	800bcc4 <__retarget_lock_release_recursive>
 800cb66:	4628      	mov	r0, r5
 800cb68:	bd70      	pop	{r4, r5, r6, pc}
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	da04      	bge.n	800cb78 <_puts_r+0xac>
 800cb6e:	69a2      	ldr	r2, [r4, #24]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	dc06      	bgt.n	800cb82 <_puts_r+0xb6>
 800cb74:	290a      	cmp	r1, #10
 800cb76:	d004      	beq.n	800cb82 <_puts_r+0xb6>
 800cb78:	6823      	ldr	r3, [r4, #0]
 800cb7a:	1c5a      	adds	r2, r3, #1
 800cb7c:	6022      	str	r2, [r4, #0]
 800cb7e:	7019      	strb	r1, [r3, #0]
 800cb80:	e7c5      	b.n	800cb0e <_puts_r+0x42>
 800cb82:	4622      	mov	r2, r4
 800cb84:	4628      	mov	r0, r5
 800cb86:	f000 ff45 	bl	800da14 <__swbuf_r>
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	d1bf      	bne.n	800cb0e <_puts_r+0x42>
 800cb8e:	e7df      	b.n	800cb50 <_puts_r+0x84>
 800cb90:	6823      	ldr	r3, [r4, #0]
 800cb92:	250a      	movs	r5, #10
 800cb94:	1c5a      	adds	r2, r3, #1
 800cb96:	6022      	str	r2, [r4, #0]
 800cb98:	701d      	strb	r5, [r3, #0]
 800cb9a:	e7db      	b.n	800cb54 <_puts_r+0x88>
 800cb9c:	08010fd0 	.word	0x08010fd0
 800cba0:	08010ff0 	.word	0x08010ff0
 800cba4:	08010fb0 	.word	0x08010fb0

0800cba8 <puts>:
 800cba8:	4b02      	ldr	r3, [pc, #8]	; (800cbb4 <puts+0xc>)
 800cbaa:	4601      	mov	r1, r0
 800cbac:	6818      	ldr	r0, [r3, #0]
 800cbae:	f7ff bf8d 	b.w	800cacc <_puts_r>
 800cbb2:	bf00      	nop
 800cbb4:	20000080 	.word	0x20000080

0800cbb8 <_sbrk_r>:
 800cbb8:	b538      	push	{r3, r4, r5, lr}
 800cbba:	4d06      	ldr	r5, [pc, #24]	; (800cbd4 <_sbrk_r+0x1c>)
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	4608      	mov	r0, r1
 800cbc2:	602b      	str	r3, [r5, #0]
 800cbc4:	f003 fc82 	bl	80104cc <_sbrk>
 800cbc8:	1c43      	adds	r3, r0, #1
 800cbca:	d102      	bne.n	800cbd2 <_sbrk_r+0x1a>
 800cbcc:	682b      	ldr	r3, [r5, #0]
 800cbce:	b103      	cbz	r3, 800cbd2 <_sbrk_r+0x1a>
 800cbd0:	6023      	str	r3, [r4, #0]
 800cbd2:	bd38      	pop	{r3, r4, r5, pc}
 800cbd4:	200013bc 	.word	0x200013bc

0800cbd8 <nanf>:
 800cbd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cbe0 <nanf+0x8>
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop
 800cbe0:	7fc00000 	.word	0x7fc00000

0800cbe4 <siprintf>:
 800cbe4:	b40e      	push	{r1, r2, r3}
 800cbe6:	b500      	push	{lr}
 800cbe8:	b09c      	sub	sp, #112	; 0x70
 800cbea:	ab1d      	add	r3, sp, #116	; 0x74
 800cbec:	9002      	str	r0, [sp, #8]
 800cbee:	9006      	str	r0, [sp, #24]
 800cbf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbf4:	4809      	ldr	r0, [pc, #36]	; (800cc1c <siprintf+0x38>)
 800cbf6:	9107      	str	r1, [sp, #28]
 800cbf8:	9104      	str	r1, [sp, #16]
 800cbfa:	4909      	ldr	r1, [pc, #36]	; (800cc20 <siprintf+0x3c>)
 800cbfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc00:	9105      	str	r1, [sp, #20]
 800cc02:	6800      	ldr	r0, [r0, #0]
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	a902      	add	r1, sp, #8
 800cc08:	f003 f8ac 	bl	800fd64 <_svfiprintf_r>
 800cc0c:	9b02      	ldr	r3, [sp, #8]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	701a      	strb	r2, [r3, #0]
 800cc12:	b01c      	add	sp, #112	; 0x70
 800cc14:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc18:	b003      	add	sp, #12
 800cc1a:	4770      	bx	lr
 800cc1c:	20000080 	.word	0x20000080
 800cc20:	ffff0208 	.word	0xffff0208

0800cc24 <__sread>:
 800cc24:	b510      	push	{r4, lr}
 800cc26:	460c      	mov	r4, r1
 800cc28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc2c:	f003 faf4 	bl	8010218 <_read_r>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	bfab      	itete	ge
 800cc34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc36:	89a3      	ldrhlt	r3, [r4, #12]
 800cc38:	181b      	addge	r3, r3, r0
 800cc3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc3e:	bfac      	ite	ge
 800cc40:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc42:	81a3      	strhlt	r3, [r4, #12]
 800cc44:	bd10      	pop	{r4, pc}

0800cc46 <__swrite>:
 800cc46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc4a:	461f      	mov	r7, r3
 800cc4c:	898b      	ldrh	r3, [r1, #12]
 800cc4e:	05db      	lsls	r3, r3, #23
 800cc50:	4605      	mov	r5, r0
 800cc52:	460c      	mov	r4, r1
 800cc54:	4616      	mov	r6, r2
 800cc56:	d505      	bpl.n	800cc64 <__swrite+0x1e>
 800cc58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc5c:	2302      	movs	r3, #2
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f002 fa6e 	bl	800f140 <_lseek_r>
 800cc64:	89a3      	ldrh	r3, [r4, #12]
 800cc66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc6e:	81a3      	strh	r3, [r4, #12]
 800cc70:	4632      	mov	r2, r6
 800cc72:	463b      	mov	r3, r7
 800cc74:	4628      	mov	r0, r5
 800cc76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc7a:	f000 bf1d 	b.w	800dab8 <_write_r>

0800cc7e <__sseek>:
 800cc7e:	b510      	push	{r4, lr}
 800cc80:	460c      	mov	r4, r1
 800cc82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc86:	f002 fa5b 	bl	800f140 <_lseek_r>
 800cc8a:	1c43      	adds	r3, r0, #1
 800cc8c:	89a3      	ldrh	r3, [r4, #12]
 800cc8e:	bf15      	itete	ne
 800cc90:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc9a:	81a3      	strheq	r3, [r4, #12]
 800cc9c:	bf18      	it	ne
 800cc9e:	81a3      	strhne	r3, [r4, #12]
 800cca0:	bd10      	pop	{r4, pc}

0800cca2 <__sclose>:
 800cca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cca6:	f000 bf87 	b.w	800dbb8 <_close_r>

0800ccaa <sulp>:
 800ccaa:	b570      	push	{r4, r5, r6, lr}
 800ccac:	4604      	mov	r4, r0
 800ccae:	460d      	mov	r5, r1
 800ccb0:	ec45 4b10 	vmov	d0, r4, r5
 800ccb4:	4616      	mov	r6, r2
 800ccb6:	f002 fe4b 	bl	800f950 <__ulp>
 800ccba:	ec51 0b10 	vmov	r0, r1, d0
 800ccbe:	b17e      	cbz	r6, 800cce0 <sulp+0x36>
 800ccc0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ccc4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	dd09      	ble.n	800cce0 <sulp+0x36>
 800cccc:	051b      	lsls	r3, r3, #20
 800ccce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ccd2:	2400      	movs	r4, #0
 800ccd4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ccd8:	4622      	mov	r2, r4
 800ccda:	462b      	mov	r3, r5
 800ccdc:	f7f3 fc9c 	bl	8000618 <__aeabi_dmul>
 800cce0:	bd70      	pop	{r4, r5, r6, pc}
 800cce2:	0000      	movs	r0, r0
 800cce4:	0000      	movs	r0, r0
	...

0800cce8 <_strtod_l>:
 800cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccec:	b0a3      	sub	sp, #140	; 0x8c
 800ccee:	461f      	mov	r7, r3
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	931e      	str	r3, [sp, #120]	; 0x78
 800ccf4:	4ba4      	ldr	r3, [pc, #656]	; (800cf88 <_strtod_l+0x2a0>)
 800ccf6:	9219      	str	r2, [sp, #100]	; 0x64
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	9307      	str	r3, [sp, #28]
 800ccfc:	4604      	mov	r4, r0
 800ccfe:	4618      	mov	r0, r3
 800cd00:	4688      	mov	r8, r1
 800cd02:	f7f3 fa75 	bl	80001f0 <strlen>
 800cd06:	f04f 0a00 	mov.w	sl, #0
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	f04f 0b00 	mov.w	fp, #0
 800cd10:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cd14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cd16:	781a      	ldrb	r2, [r3, #0]
 800cd18:	2a2b      	cmp	r2, #43	; 0x2b
 800cd1a:	d04c      	beq.n	800cdb6 <_strtod_l+0xce>
 800cd1c:	d839      	bhi.n	800cd92 <_strtod_l+0xaa>
 800cd1e:	2a0d      	cmp	r2, #13
 800cd20:	d832      	bhi.n	800cd88 <_strtod_l+0xa0>
 800cd22:	2a08      	cmp	r2, #8
 800cd24:	d832      	bhi.n	800cd8c <_strtod_l+0xa4>
 800cd26:	2a00      	cmp	r2, #0
 800cd28:	d03c      	beq.n	800cda4 <_strtod_l+0xbc>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	930e      	str	r3, [sp, #56]	; 0x38
 800cd2e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cd30:	7833      	ldrb	r3, [r6, #0]
 800cd32:	2b30      	cmp	r3, #48	; 0x30
 800cd34:	f040 80b4 	bne.w	800cea0 <_strtod_l+0x1b8>
 800cd38:	7873      	ldrb	r3, [r6, #1]
 800cd3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd3e:	2b58      	cmp	r3, #88	; 0x58
 800cd40:	d16c      	bne.n	800ce1c <_strtod_l+0x134>
 800cd42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	ab1e      	add	r3, sp, #120	; 0x78
 800cd48:	9702      	str	r7, [sp, #8]
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	4a8f      	ldr	r2, [pc, #572]	; (800cf8c <_strtod_l+0x2a4>)
 800cd4e:	ab1f      	add	r3, sp, #124	; 0x7c
 800cd50:	a91d      	add	r1, sp, #116	; 0x74
 800cd52:	4620      	mov	r0, r4
 800cd54:	f001 fee8 	bl	800eb28 <__gethex>
 800cd58:	f010 0707 	ands.w	r7, r0, #7
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	d005      	beq.n	800cd6c <_strtod_l+0x84>
 800cd60:	2f06      	cmp	r7, #6
 800cd62:	d12a      	bne.n	800cdba <_strtod_l+0xd2>
 800cd64:	3601      	adds	r6, #1
 800cd66:	2300      	movs	r3, #0
 800cd68:	961d      	str	r6, [sp, #116]	; 0x74
 800cd6a:	930e      	str	r3, [sp, #56]	; 0x38
 800cd6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f040 8596 	bne.w	800d8a0 <_strtod_l+0xbb8>
 800cd74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd76:	b1db      	cbz	r3, 800cdb0 <_strtod_l+0xc8>
 800cd78:	4652      	mov	r2, sl
 800cd7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cd7e:	ec43 2b10 	vmov	d0, r2, r3
 800cd82:	b023      	add	sp, #140	; 0x8c
 800cd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd88:	2a20      	cmp	r2, #32
 800cd8a:	d1ce      	bne.n	800cd2a <_strtod_l+0x42>
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	931d      	str	r3, [sp, #116]	; 0x74
 800cd90:	e7c0      	b.n	800cd14 <_strtod_l+0x2c>
 800cd92:	2a2d      	cmp	r2, #45	; 0x2d
 800cd94:	d1c9      	bne.n	800cd2a <_strtod_l+0x42>
 800cd96:	2201      	movs	r2, #1
 800cd98:	920e      	str	r2, [sp, #56]	; 0x38
 800cd9a:	1c5a      	adds	r2, r3, #1
 800cd9c:	921d      	str	r2, [sp, #116]	; 0x74
 800cd9e:	785b      	ldrb	r3, [r3, #1]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1c4      	bne.n	800cd2e <_strtod_l+0x46>
 800cda4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cda6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f040 8576 	bne.w	800d89c <_strtod_l+0xbb4>
 800cdb0:	4652      	mov	r2, sl
 800cdb2:	465b      	mov	r3, fp
 800cdb4:	e7e3      	b.n	800cd7e <_strtod_l+0x96>
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	e7ee      	b.n	800cd98 <_strtod_l+0xb0>
 800cdba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cdbc:	b13a      	cbz	r2, 800cdce <_strtod_l+0xe6>
 800cdbe:	2135      	movs	r1, #53	; 0x35
 800cdc0:	a820      	add	r0, sp, #128	; 0x80
 800cdc2:	f002 fed0 	bl	800fb66 <__copybits>
 800cdc6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cdc8:	4620      	mov	r0, r4
 800cdca:	f002 fa95 	bl	800f2f8 <_Bfree>
 800cdce:	3f01      	subs	r7, #1
 800cdd0:	2f05      	cmp	r7, #5
 800cdd2:	d807      	bhi.n	800cde4 <_strtod_l+0xfc>
 800cdd4:	e8df f007 	tbb	[pc, r7]
 800cdd8:	1d180b0e 	.word	0x1d180b0e
 800cddc:	030e      	.short	0x030e
 800cdde:	f04f 0b00 	mov.w	fp, #0
 800cde2:	46da      	mov	sl, fp
 800cde4:	0728      	lsls	r0, r5, #28
 800cde6:	d5c1      	bpl.n	800cd6c <_strtod_l+0x84>
 800cde8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cdec:	e7be      	b.n	800cd6c <_strtod_l+0x84>
 800cdee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800cdf2:	e7f7      	b.n	800cde4 <_strtod_l+0xfc>
 800cdf4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800cdf8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cdfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cdfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ce02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ce06:	e7ed      	b.n	800cde4 <_strtod_l+0xfc>
 800ce08:	f8df b184 	ldr.w	fp, [pc, #388]	; 800cf90 <_strtod_l+0x2a8>
 800ce0c:	f04f 0a00 	mov.w	sl, #0
 800ce10:	e7e8      	b.n	800cde4 <_strtod_l+0xfc>
 800ce12:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ce16:	f04f 3aff 	mov.w	sl, #4294967295
 800ce1a:	e7e3      	b.n	800cde4 <_strtod_l+0xfc>
 800ce1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce1e:	1c5a      	adds	r2, r3, #1
 800ce20:	921d      	str	r2, [sp, #116]	; 0x74
 800ce22:	785b      	ldrb	r3, [r3, #1]
 800ce24:	2b30      	cmp	r3, #48	; 0x30
 800ce26:	d0f9      	beq.n	800ce1c <_strtod_l+0x134>
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d09f      	beq.n	800cd6c <_strtod_l+0x84>
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	f04f 0900 	mov.w	r9, #0
 800ce32:	9304      	str	r3, [sp, #16]
 800ce34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ce36:	930a      	str	r3, [sp, #40]	; 0x28
 800ce38:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ce3c:	464f      	mov	r7, r9
 800ce3e:	220a      	movs	r2, #10
 800ce40:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ce42:	7806      	ldrb	r6, [r0, #0]
 800ce44:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ce48:	b2d9      	uxtb	r1, r3
 800ce4a:	2909      	cmp	r1, #9
 800ce4c:	d92a      	bls.n	800cea4 <_strtod_l+0x1bc>
 800ce4e:	9907      	ldr	r1, [sp, #28]
 800ce50:	462a      	mov	r2, r5
 800ce52:	f003 f9fd 	bl	8010250 <strncmp>
 800ce56:	b398      	cbz	r0, 800cec0 <_strtod_l+0x1d8>
 800ce58:	2000      	movs	r0, #0
 800ce5a:	4633      	mov	r3, r6
 800ce5c:	463d      	mov	r5, r7
 800ce5e:	9007      	str	r0, [sp, #28]
 800ce60:	4602      	mov	r2, r0
 800ce62:	2b65      	cmp	r3, #101	; 0x65
 800ce64:	d001      	beq.n	800ce6a <_strtod_l+0x182>
 800ce66:	2b45      	cmp	r3, #69	; 0x45
 800ce68:	d118      	bne.n	800ce9c <_strtod_l+0x1b4>
 800ce6a:	b91d      	cbnz	r5, 800ce74 <_strtod_l+0x18c>
 800ce6c:	9b04      	ldr	r3, [sp, #16]
 800ce6e:	4303      	orrs	r3, r0
 800ce70:	d098      	beq.n	800cda4 <_strtod_l+0xbc>
 800ce72:	2500      	movs	r5, #0
 800ce74:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800ce78:	f108 0301 	add.w	r3, r8, #1
 800ce7c:	931d      	str	r3, [sp, #116]	; 0x74
 800ce7e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ce82:	2b2b      	cmp	r3, #43	; 0x2b
 800ce84:	d075      	beq.n	800cf72 <_strtod_l+0x28a>
 800ce86:	2b2d      	cmp	r3, #45	; 0x2d
 800ce88:	d07b      	beq.n	800cf82 <_strtod_l+0x29a>
 800ce8a:	f04f 0c00 	mov.w	ip, #0
 800ce8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ce92:	2909      	cmp	r1, #9
 800ce94:	f240 8082 	bls.w	800cf9c <_strtod_l+0x2b4>
 800ce98:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ce9c:	2600      	movs	r6, #0
 800ce9e:	e09d      	b.n	800cfdc <_strtod_l+0x2f4>
 800cea0:	2300      	movs	r3, #0
 800cea2:	e7c4      	b.n	800ce2e <_strtod_l+0x146>
 800cea4:	2f08      	cmp	r7, #8
 800cea6:	bfd8      	it	le
 800cea8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ceaa:	f100 0001 	add.w	r0, r0, #1
 800ceae:	bfda      	itte	le
 800ceb0:	fb02 3301 	mlale	r3, r2, r1, r3
 800ceb4:	9309      	strle	r3, [sp, #36]	; 0x24
 800ceb6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ceba:	3701      	adds	r7, #1
 800cebc:	901d      	str	r0, [sp, #116]	; 0x74
 800cebe:	e7bf      	b.n	800ce40 <_strtod_l+0x158>
 800cec0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cec2:	195a      	adds	r2, r3, r5
 800cec4:	921d      	str	r2, [sp, #116]	; 0x74
 800cec6:	5d5b      	ldrb	r3, [r3, r5]
 800cec8:	2f00      	cmp	r7, #0
 800ceca:	d037      	beq.n	800cf3c <_strtod_l+0x254>
 800cecc:	9007      	str	r0, [sp, #28]
 800cece:	463d      	mov	r5, r7
 800ced0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ced4:	2a09      	cmp	r2, #9
 800ced6:	d912      	bls.n	800cefe <_strtod_l+0x216>
 800ced8:	2201      	movs	r2, #1
 800ceda:	e7c2      	b.n	800ce62 <_strtod_l+0x17a>
 800cedc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cede:	1c5a      	adds	r2, r3, #1
 800cee0:	921d      	str	r2, [sp, #116]	; 0x74
 800cee2:	785b      	ldrb	r3, [r3, #1]
 800cee4:	3001      	adds	r0, #1
 800cee6:	2b30      	cmp	r3, #48	; 0x30
 800cee8:	d0f8      	beq.n	800cedc <_strtod_l+0x1f4>
 800ceea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800ceee:	2a08      	cmp	r2, #8
 800cef0:	f200 84db 	bhi.w	800d8aa <_strtod_l+0xbc2>
 800cef4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cef6:	9007      	str	r0, [sp, #28]
 800cef8:	2000      	movs	r0, #0
 800cefa:	920a      	str	r2, [sp, #40]	; 0x28
 800cefc:	4605      	mov	r5, r0
 800cefe:	3b30      	subs	r3, #48	; 0x30
 800cf00:	f100 0201 	add.w	r2, r0, #1
 800cf04:	d014      	beq.n	800cf30 <_strtod_l+0x248>
 800cf06:	9907      	ldr	r1, [sp, #28]
 800cf08:	4411      	add	r1, r2
 800cf0a:	9107      	str	r1, [sp, #28]
 800cf0c:	462a      	mov	r2, r5
 800cf0e:	eb00 0e05 	add.w	lr, r0, r5
 800cf12:	210a      	movs	r1, #10
 800cf14:	4572      	cmp	r2, lr
 800cf16:	d113      	bne.n	800cf40 <_strtod_l+0x258>
 800cf18:	182a      	adds	r2, r5, r0
 800cf1a:	2a08      	cmp	r2, #8
 800cf1c:	f105 0501 	add.w	r5, r5, #1
 800cf20:	4405      	add	r5, r0
 800cf22:	dc1c      	bgt.n	800cf5e <_strtod_l+0x276>
 800cf24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf26:	220a      	movs	r2, #10
 800cf28:	fb02 3301 	mla	r3, r2, r1, r3
 800cf2c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf2e:	2200      	movs	r2, #0
 800cf30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf32:	1c59      	adds	r1, r3, #1
 800cf34:	911d      	str	r1, [sp, #116]	; 0x74
 800cf36:	785b      	ldrb	r3, [r3, #1]
 800cf38:	4610      	mov	r0, r2
 800cf3a:	e7c9      	b.n	800ced0 <_strtod_l+0x1e8>
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	e7d2      	b.n	800cee6 <_strtod_l+0x1fe>
 800cf40:	2a08      	cmp	r2, #8
 800cf42:	dc04      	bgt.n	800cf4e <_strtod_l+0x266>
 800cf44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cf46:	434e      	muls	r6, r1
 800cf48:	9609      	str	r6, [sp, #36]	; 0x24
 800cf4a:	3201      	adds	r2, #1
 800cf4c:	e7e2      	b.n	800cf14 <_strtod_l+0x22c>
 800cf4e:	f102 0c01 	add.w	ip, r2, #1
 800cf52:	f1bc 0f10 	cmp.w	ip, #16
 800cf56:	bfd8      	it	le
 800cf58:	fb01 f909 	mulle.w	r9, r1, r9
 800cf5c:	e7f5      	b.n	800cf4a <_strtod_l+0x262>
 800cf5e:	2d10      	cmp	r5, #16
 800cf60:	bfdc      	itt	le
 800cf62:	220a      	movle	r2, #10
 800cf64:	fb02 3909 	mlale	r9, r2, r9, r3
 800cf68:	e7e1      	b.n	800cf2e <_strtod_l+0x246>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	9307      	str	r3, [sp, #28]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	e77c      	b.n	800ce6c <_strtod_l+0x184>
 800cf72:	f04f 0c00 	mov.w	ip, #0
 800cf76:	f108 0302 	add.w	r3, r8, #2
 800cf7a:	931d      	str	r3, [sp, #116]	; 0x74
 800cf7c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800cf80:	e785      	b.n	800ce8e <_strtod_l+0x1a6>
 800cf82:	f04f 0c01 	mov.w	ip, #1
 800cf86:	e7f6      	b.n	800cf76 <_strtod_l+0x28e>
 800cf88:	080112a0 	.word	0x080112a0
 800cf8c:	08011050 	.word	0x08011050
 800cf90:	7ff00000 	.word	0x7ff00000
 800cf94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf96:	1c59      	adds	r1, r3, #1
 800cf98:	911d      	str	r1, [sp, #116]	; 0x74
 800cf9a:	785b      	ldrb	r3, [r3, #1]
 800cf9c:	2b30      	cmp	r3, #48	; 0x30
 800cf9e:	d0f9      	beq.n	800cf94 <_strtod_l+0x2ac>
 800cfa0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800cfa4:	2908      	cmp	r1, #8
 800cfa6:	f63f af79 	bhi.w	800ce9c <_strtod_l+0x1b4>
 800cfaa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800cfae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cfb0:	9308      	str	r3, [sp, #32]
 800cfb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cfb4:	1c59      	adds	r1, r3, #1
 800cfb6:	911d      	str	r1, [sp, #116]	; 0x74
 800cfb8:	785b      	ldrb	r3, [r3, #1]
 800cfba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800cfbe:	2e09      	cmp	r6, #9
 800cfc0:	d937      	bls.n	800d032 <_strtod_l+0x34a>
 800cfc2:	9e08      	ldr	r6, [sp, #32]
 800cfc4:	1b89      	subs	r1, r1, r6
 800cfc6:	2908      	cmp	r1, #8
 800cfc8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cfcc:	dc02      	bgt.n	800cfd4 <_strtod_l+0x2ec>
 800cfce:	4576      	cmp	r6, lr
 800cfd0:	bfa8      	it	ge
 800cfd2:	4676      	movge	r6, lr
 800cfd4:	f1bc 0f00 	cmp.w	ip, #0
 800cfd8:	d000      	beq.n	800cfdc <_strtod_l+0x2f4>
 800cfda:	4276      	negs	r6, r6
 800cfdc:	2d00      	cmp	r5, #0
 800cfde:	d14f      	bne.n	800d080 <_strtod_l+0x398>
 800cfe0:	9904      	ldr	r1, [sp, #16]
 800cfe2:	4301      	orrs	r1, r0
 800cfe4:	f47f aec2 	bne.w	800cd6c <_strtod_l+0x84>
 800cfe8:	2a00      	cmp	r2, #0
 800cfea:	f47f aedb 	bne.w	800cda4 <_strtod_l+0xbc>
 800cfee:	2b69      	cmp	r3, #105	; 0x69
 800cff0:	d027      	beq.n	800d042 <_strtod_l+0x35a>
 800cff2:	dc24      	bgt.n	800d03e <_strtod_l+0x356>
 800cff4:	2b49      	cmp	r3, #73	; 0x49
 800cff6:	d024      	beq.n	800d042 <_strtod_l+0x35a>
 800cff8:	2b4e      	cmp	r3, #78	; 0x4e
 800cffa:	f47f aed3 	bne.w	800cda4 <_strtod_l+0xbc>
 800cffe:	499e      	ldr	r1, [pc, #632]	; (800d278 <_strtod_l+0x590>)
 800d000:	a81d      	add	r0, sp, #116	; 0x74
 800d002:	f001 ffe9 	bl	800efd8 <__match>
 800d006:	2800      	cmp	r0, #0
 800d008:	f43f aecc 	beq.w	800cda4 <_strtod_l+0xbc>
 800d00c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	2b28      	cmp	r3, #40	; 0x28
 800d012:	d12d      	bne.n	800d070 <_strtod_l+0x388>
 800d014:	4999      	ldr	r1, [pc, #612]	; (800d27c <_strtod_l+0x594>)
 800d016:	aa20      	add	r2, sp, #128	; 0x80
 800d018:	a81d      	add	r0, sp, #116	; 0x74
 800d01a:	f001 fff1 	bl	800f000 <__hexnan>
 800d01e:	2805      	cmp	r0, #5
 800d020:	d126      	bne.n	800d070 <_strtod_l+0x388>
 800d022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d024:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800d028:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d02c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d030:	e69c      	b.n	800cd6c <_strtod_l+0x84>
 800d032:	210a      	movs	r1, #10
 800d034:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d038:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d03c:	e7b9      	b.n	800cfb2 <_strtod_l+0x2ca>
 800d03e:	2b6e      	cmp	r3, #110	; 0x6e
 800d040:	e7db      	b.n	800cffa <_strtod_l+0x312>
 800d042:	498f      	ldr	r1, [pc, #572]	; (800d280 <_strtod_l+0x598>)
 800d044:	a81d      	add	r0, sp, #116	; 0x74
 800d046:	f001 ffc7 	bl	800efd8 <__match>
 800d04a:	2800      	cmp	r0, #0
 800d04c:	f43f aeaa 	beq.w	800cda4 <_strtod_l+0xbc>
 800d050:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d052:	498c      	ldr	r1, [pc, #560]	; (800d284 <_strtod_l+0x59c>)
 800d054:	3b01      	subs	r3, #1
 800d056:	a81d      	add	r0, sp, #116	; 0x74
 800d058:	931d      	str	r3, [sp, #116]	; 0x74
 800d05a:	f001 ffbd 	bl	800efd8 <__match>
 800d05e:	b910      	cbnz	r0, 800d066 <_strtod_l+0x37e>
 800d060:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d062:	3301      	adds	r3, #1
 800d064:	931d      	str	r3, [sp, #116]	; 0x74
 800d066:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800d294 <_strtod_l+0x5ac>
 800d06a:	f04f 0a00 	mov.w	sl, #0
 800d06e:	e67d      	b.n	800cd6c <_strtod_l+0x84>
 800d070:	4885      	ldr	r0, [pc, #532]	; (800d288 <_strtod_l+0x5a0>)
 800d072:	f003 f8e5 	bl	8010240 <nan>
 800d076:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d07a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d07e:	e675      	b.n	800cd6c <_strtod_l+0x84>
 800d080:	9b07      	ldr	r3, [sp, #28]
 800d082:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d084:	1af3      	subs	r3, r6, r3
 800d086:	2f00      	cmp	r7, #0
 800d088:	bf08      	it	eq
 800d08a:	462f      	moveq	r7, r5
 800d08c:	2d10      	cmp	r5, #16
 800d08e:	9308      	str	r3, [sp, #32]
 800d090:	46a8      	mov	r8, r5
 800d092:	bfa8      	it	ge
 800d094:	f04f 0810 	movge.w	r8, #16
 800d098:	f7f3 fa44 	bl	8000524 <__aeabi_ui2d>
 800d09c:	2d09      	cmp	r5, #9
 800d09e:	4682      	mov	sl, r0
 800d0a0:	468b      	mov	fp, r1
 800d0a2:	dd13      	ble.n	800d0cc <_strtod_l+0x3e4>
 800d0a4:	4b79      	ldr	r3, [pc, #484]	; (800d28c <_strtod_l+0x5a4>)
 800d0a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d0aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d0ae:	f7f3 fab3 	bl	8000618 <__aeabi_dmul>
 800d0b2:	4682      	mov	sl, r0
 800d0b4:	4648      	mov	r0, r9
 800d0b6:	468b      	mov	fp, r1
 800d0b8:	f7f3 fa34 	bl	8000524 <__aeabi_ui2d>
 800d0bc:	4602      	mov	r2, r0
 800d0be:	460b      	mov	r3, r1
 800d0c0:	4650      	mov	r0, sl
 800d0c2:	4659      	mov	r1, fp
 800d0c4:	f7f3 f8f2 	bl	80002ac <__adddf3>
 800d0c8:	4682      	mov	sl, r0
 800d0ca:	468b      	mov	fp, r1
 800d0cc:	2d0f      	cmp	r5, #15
 800d0ce:	dc38      	bgt.n	800d142 <_strtod_l+0x45a>
 800d0d0:	9b08      	ldr	r3, [sp, #32]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f43f ae4a 	beq.w	800cd6c <_strtod_l+0x84>
 800d0d8:	dd24      	ble.n	800d124 <_strtod_l+0x43c>
 800d0da:	2b16      	cmp	r3, #22
 800d0dc:	dc0b      	bgt.n	800d0f6 <_strtod_l+0x40e>
 800d0de:	4d6b      	ldr	r5, [pc, #428]	; (800d28c <_strtod_l+0x5a4>)
 800d0e0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d0e4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d0e8:	4652      	mov	r2, sl
 800d0ea:	465b      	mov	r3, fp
 800d0ec:	f7f3 fa94 	bl	8000618 <__aeabi_dmul>
 800d0f0:	4682      	mov	sl, r0
 800d0f2:	468b      	mov	fp, r1
 800d0f4:	e63a      	b.n	800cd6c <_strtod_l+0x84>
 800d0f6:	9a08      	ldr	r2, [sp, #32]
 800d0f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	db20      	blt.n	800d142 <_strtod_l+0x45a>
 800d100:	4c62      	ldr	r4, [pc, #392]	; (800d28c <_strtod_l+0x5a4>)
 800d102:	f1c5 050f 	rsb	r5, r5, #15
 800d106:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d10a:	4652      	mov	r2, sl
 800d10c:	465b      	mov	r3, fp
 800d10e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d112:	f7f3 fa81 	bl	8000618 <__aeabi_dmul>
 800d116:	9b08      	ldr	r3, [sp, #32]
 800d118:	1b5d      	subs	r5, r3, r5
 800d11a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d11e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d122:	e7e3      	b.n	800d0ec <_strtod_l+0x404>
 800d124:	9b08      	ldr	r3, [sp, #32]
 800d126:	3316      	adds	r3, #22
 800d128:	db0b      	blt.n	800d142 <_strtod_l+0x45a>
 800d12a:	9b07      	ldr	r3, [sp, #28]
 800d12c:	4a57      	ldr	r2, [pc, #348]	; (800d28c <_strtod_l+0x5a4>)
 800d12e:	1b9e      	subs	r6, r3, r6
 800d130:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d134:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d138:	4650      	mov	r0, sl
 800d13a:	4659      	mov	r1, fp
 800d13c:	f7f3 fb96 	bl	800086c <__aeabi_ddiv>
 800d140:	e7d6      	b.n	800d0f0 <_strtod_l+0x408>
 800d142:	9b08      	ldr	r3, [sp, #32]
 800d144:	eba5 0808 	sub.w	r8, r5, r8
 800d148:	4498      	add	r8, r3
 800d14a:	f1b8 0f00 	cmp.w	r8, #0
 800d14e:	dd71      	ble.n	800d234 <_strtod_l+0x54c>
 800d150:	f018 030f 	ands.w	r3, r8, #15
 800d154:	d00a      	beq.n	800d16c <_strtod_l+0x484>
 800d156:	494d      	ldr	r1, [pc, #308]	; (800d28c <_strtod_l+0x5a4>)
 800d158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d15c:	4652      	mov	r2, sl
 800d15e:	465b      	mov	r3, fp
 800d160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d164:	f7f3 fa58 	bl	8000618 <__aeabi_dmul>
 800d168:	4682      	mov	sl, r0
 800d16a:	468b      	mov	fp, r1
 800d16c:	f038 080f 	bics.w	r8, r8, #15
 800d170:	d04d      	beq.n	800d20e <_strtod_l+0x526>
 800d172:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d176:	dd22      	ble.n	800d1be <_strtod_l+0x4d6>
 800d178:	2500      	movs	r5, #0
 800d17a:	462e      	mov	r6, r5
 800d17c:	9509      	str	r5, [sp, #36]	; 0x24
 800d17e:	9507      	str	r5, [sp, #28]
 800d180:	2322      	movs	r3, #34	; 0x22
 800d182:	f8df b110 	ldr.w	fp, [pc, #272]	; 800d294 <_strtod_l+0x5ac>
 800d186:	6023      	str	r3, [r4, #0]
 800d188:	f04f 0a00 	mov.w	sl, #0
 800d18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f43f adec 	beq.w	800cd6c <_strtod_l+0x84>
 800d194:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d196:	4620      	mov	r0, r4
 800d198:	f002 f8ae 	bl	800f2f8 <_Bfree>
 800d19c:	9907      	ldr	r1, [sp, #28]
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f002 f8aa 	bl	800f2f8 <_Bfree>
 800d1a4:	4631      	mov	r1, r6
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	f002 f8a6 	bl	800f2f8 <_Bfree>
 800d1ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d1ae:	4620      	mov	r0, r4
 800d1b0:	f002 f8a2 	bl	800f2f8 <_Bfree>
 800d1b4:	4629      	mov	r1, r5
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f002 f89e 	bl	800f2f8 <_Bfree>
 800d1bc:	e5d6      	b.n	800cd6c <_strtod_l+0x84>
 800d1be:	2300      	movs	r3, #0
 800d1c0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d1c4:	4650      	mov	r0, sl
 800d1c6:	4659      	mov	r1, fp
 800d1c8:	4699      	mov	r9, r3
 800d1ca:	f1b8 0f01 	cmp.w	r8, #1
 800d1ce:	dc21      	bgt.n	800d214 <_strtod_l+0x52c>
 800d1d0:	b10b      	cbz	r3, 800d1d6 <_strtod_l+0x4ee>
 800d1d2:	4682      	mov	sl, r0
 800d1d4:	468b      	mov	fp, r1
 800d1d6:	4b2e      	ldr	r3, [pc, #184]	; (800d290 <_strtod_l+0x5a8>)
 800d1d8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d1dc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d1e0:	4652      	mov	r2, sl
 800d1e2:	465b      	mov	r3, fp
 800d1e4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d1e8:	f7f3 fa16 	bl	8000618 <__aeabi_dmul>
 800d1ec:	4b29      	ldr	r3, [pc, #164]	; (800d294 <_strtod_l+0x5ac>)
 800d1ee:	460a      	mov	r2, r1
 800d1f0:	400b      	ands	r3, r1
 800d1f2:	4929      	ldr	r1, [pc, #164]	; (800d298 <_strtod_l+0x5b0>)
 800d1f4:	428b      	cmp	r3, r1
 800d1f6:	4682      	mov	sl, r0
 800d1f8:	d8be      	bhi.n	800d178 <_strtod_l+0x490>
 800d1fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d1fe:	428b      	cmp	r3, r1
 800d200:	bf86      	itte	hi
 800d202:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d29c <_strtod_l+0x5b4>
 800d206:	f04f 3aff 	movhi.w	sl, #4294967295
 800d20a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d20e:	2300      	movs	r3, #0
 800d210:	9304      	str	r3, [sp, #16]
 800d212:	e081      	b.n	800d318 <_strtod_l+0x630>
 800d214:	f018 0f01 	tst.w	r8, #1
 800d218:	d007      	beq.n	800d22a <_strtod_l+0x542>
 800d21a:	4b1d      	ldr	r3, [pc, #116]	; (800d290 <_strtod_l+0x5a8>)
 800d21c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800d220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d224:	f7f3 f9f8 	bl	8000618 <__aeabi_dmul>
 800d228:	2301      	movs	r3, #1
 800d22a:	f109 0901 	add.w	r9, r9, #1
 800d22e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d232:	e7ca      	b.n	800d1ca <_strtod_l+0x4e2>
 800d234:	d0eb      	beq.n	800d20e <_strtod_l+0x526>
 800d236:	f1c8 0800 	rsb	r8, r8, #0
 800d23a:	f018 020f 	ands.w	r2, r8, #15
 800d23e:	d00a      	beq.n	800d256 <_strtod_l+0x56e>
 800d240:	4b12      	ldr	r3, [pc, #72]	; (800d28c <_strtod_l+0x5a4>)
 800d242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d246:	4650      	mov	r0, sl
 800d248:	4659      	mov	r1, fp
 800d24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d24e:	f7f3 fb0d 	bl	800086c <__aeabi_ddiv>
 800d252:	4682      	mov	sl, r0
 800d254:	468b      	mov	fp, r1
 800d256:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d25a:	d0d8      	beq.n	800d20e <_strtod_l+0x526>
 800d25c:	f1b8 0f1f 	cmp.w	r8, #31
 800d260:	dd1e      	ble.n	800d2a0 <_strtod_l+0x5b8>
 800d262:	2500      	movs	r5, #0
 800d264:	462e      	mov	r6, r5
 800d266:	9509      	str	r5, [sp, #36]	; 0x24
 800d268:	9507      	str	r5, [sp, #28]
 800d26a:	2322      	movs	r3, #34	; 0x22
 800d26c:	f04f 0a00 	mov.w	sl, #0
 800d270:	f04f 0b00 	mov.w	fp, #0
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	e789      	b.n	800d18c <_strtod_l+0x4a4>
 800d278:	08011021 	.word	0x08011021
 800d27c:	08011064 	.word	0x08011064
 800d280:	08011019 	.word	0x08011019
 800d284:	080111a4 	.word	0x080111a4
 800d288:	08011460 	.word	0x08011460
 800d28c:	08011340 	.word	0x08011340
 800d290:	08011318 	.word	0x08011318
 800d294:	7ff00000 	.word	0x7ff00000
 800d298:	7ca00000 	.word	0x7ca00000
 800d29c:	7fefffff 	.word	0x7fefffff
 800d2a0:	f018 0310 	ands.w	r3, r8, #16
 800d2a4:	bf18      	it	ne
 800d2a6:	236a      	movne	r3, #106	; 0x6a
 800d2a8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d660 <_strtod_l+0x978>
 800d2ac:	9304      	str	r3, [sp, #16]
 800d2ae:	4650      	mov	r0, sl
 800d2b0:	4659      	mov	r1, fp
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	f018 0f01 	tst.w	r8, #1
 800d2b8:	d004      	beq.n	800d2c4 <_strtod_l+0x5dc>
 800d2ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d2be:	f7f3 f9ab 	bl	8000618 <__aeabi_dmul>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d2c8:	f109 0908 	add.w	r9, r9, #8
 800d2cc:	d1f2      	bne.n	800d2b4 <_strtod_l+0x5cc>
 800d2ce:	b10b      	cbz	r3, 800d2d4 <_strtod_l+0x5ec>
 800d2d0:	4682      	mov	sl, r0
 800d2d2:	468b      	mov	fp, r1
 800d2d4:	9b04      	ldr	r3, [sp, #16]
 800d2d6:	b1bb      	cbz	r3, 800d308 <_strtod_l+0x620>
 800d2d8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d2dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	4659      	mov	r1, fp
 800d2e4:	dd10      	ble.n	800d308 <_strtod_l+0x620>
 800d2e6:	2b1f      	cmp	r3, #31
 800d2e8:	f340 8128 	ble.w	800d53c <_strtod_l+0x854>
 800d2ec:	2b34      	cmp	r3, #52	; 0x34
 800d2ee:	bfde      	ittt	le
 800d2f0:	3b20      	suble	r3, #32
 800d2f2:	f04f 32ff 	movle.w	r2, #4294967295
 800d2f6:	fa02 f303 	lslle.w	r3, r2, r3
 800d2fa:	f04f 0a00 	mov.w	sl, #0
 800d2fe:	bfcc      	ite	gt
 800d300:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d304:	ea03 0b01 	andle.w	fp, r3, r1
 800d308:	2200      	movs	r2, #0
 800d30a:	2300      	movs	r3, #0
 800d30c:	4650      	mov	r0, sl
 800d30e:	4659      	mov	r1, fp
 800d310:	f7f3 fbea 	bl	8000ae8 <__aeabi_dcmpeq>
 800d314:	2800      	cmp	r0, #0
 800d316:	d1a4      	bne.n	800d262 <_strtod_l+0x57a>
 800d318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d31a:	9300      	str	r3, [sp, #0]
 800d31c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d31e:	462b      	mov	r3, r5
 800d320:	463a      	mov	r2, r7
 800d322:	4620      	mov	r0, r4
 800d324:	f002 f854 	bl	800f3d0 <__s2b>
 800d328:	9009      	str	r0, [sp, #36]	; 0x24
 800d32a:	2800      	cmp	r0, #0
 800d32c:	f43f af24 	beq.w	800d178 <_strtod_l+0x490>
 800d330:	9b07      	ldr	r3, [sp, #28]
 800d332:	1b9e      	subs	r6, r3, r6
 800d334:	9b08      	ldr	r3, [sp, #32]
 800d336:	2b00      	cmp	r3, #0
 800d338:	bfb4      	ite	lt
 800d33a:	4633      	movlt	r3, r6
 800d33c:	2300      	movge	r3, #0
 800d33e:	9310      	str	r3, [sp, #64]	; 0x40
 800d340:	9b08      	ldr	r3, [sp, #32]
 800d342:	2500      	movs	r5, #0
 800d344:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d348:	9318      	str	r3, [sp, #96]	; 0x60
 800d34a:	462e      	mov	r6, r5
 800d34c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d34e:	4620      	mov	r0, r4
 800d350:	6859      	ldr	r1, [r3, #4]
 800d352:	f001 ff91 	bl	800f278 <_Balloc>
 800d356:	9007      	str	r0, [sp, #28]
 800d358:	2800      	cmp	r0, #0
 800d35a:	f43f af11 	beq.w	800d180 <_strtod_l+0x498>
 800d35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d360:	691a      	ldr	r2, [r3, #16]
 800d362:	3202      	adds	r2, #2
 800d364:	f103 010c 	add.w	r1, r3, #12
 800d368:	0092      	lsls	r2, r2, #2
 800d36a:	300c      	adds	r0, #12
 800d36c:	f7fe fcab 	bl	800bcc6 <memcpy>
 800d370:	ec4b ab10 	vmov	d0, sl, fp
 800d374:	aa20      	add	r2, sp, #128	; 0x80
 800d376:	a91f      	add	r1, sp, #124	; 0x7c
 800d378:	4620      	mov	r0, r4
 800d37a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d37e:	f002 fb63 	bl	800fa48 <__d2b>
 800d382:	901e      	str	r0, [sp, #120]	; 0x78
 800d384:	2800      	cmp	r0, #0
 800d386:	f43f aefb 	beq.w	800d180 <_strtod_l+0x498>
 800d38a:	2101      	movs	r1, #1
 800d38c:	4620      	mov	r0, r4
 800d38e:	f002 f8b9 	bl	800f504 <__i2b>
 800d392:	4606      	mov	r6, r0
 800d394:	2800      	cmp	r0, #0
 800d396:	f43f aef3 	beq.w	800d180 <_strtod_l+0x498>
 800d39a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d39c:	9904      	ldr	r1, [sp, #16]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	bfab      	itete	ge
 800d3a2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d3a4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d3a6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d3a8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d3ac:	bfac      	ite	ge
 800d3ae:	eb03 0902 	addge.w	r9, r3, r2
 800d3b2:	1ad7      	sublt	r7, r2, r3
 800d3b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d3b6:	eba3 0801 	sub.w	r8, r3, r1
 800d3ba:	4490      	add	r8, r2
 800d3bc:	4ba3      	ldr	r3, [pc, #652]	; (800d64c <_strtod_l+0x964>)
 800d3be:	f108 38ff 	add.w	r8, r8, #4294967295
 800d3c2:	4598      	cmp	r8, r3
 800d3c4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d3c8:	f280 80cc 	bge.w	800d564 <_strtod_l+0x87c>
 800d3cc:	eba3 0308 	sub.w	r3, r3, r8
 800d3d0:	2b1f      	cmp	r3, #31
 800d3d2:	eba2 0203 	sub.w	r2, r2, r3
 800d3d6:	f04f 0101 	mov.w	r1, #1
 800d3da:	f300 80b6 	bgt.w	800d54a <_strtod_l+0x862>
 800d3de:	fa01 f303 	lsl.w	r3, r1, r3
 800d3e2:	9311      	str	r3, [sp, #68]	; 0x44
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	930c      	str	r3, [sp, #48]	; 0x30
 800d3e8:	eb09 0802 	add.w	r8, r9, r2
 800d3ec:	9b04      	ldr	r3, [sp, #16]
 800d3ee:	45c1      	cmp	r9, r8
 800d3f0:	4417      	add	r7, r2
 800d3f2:	441f      	add	r7, r3
 800d3f4:	464b      	mov	r3, r9
 800d3f6:	bfa8      	it	ge
 800d3f8:	4643      	movge	r3, r8
 800d3fa:	42bb      	cmp	r3, r7
 800d3fc:	bfa8      	it	ge
 800d3fe:	463b      	movge	r3, r7
 800d400:	2b00      	cmp	r3, #0
 800d402:	bfc2      	ittt	gt
 800d404:	eba8 0803 	subgt.w	r8, r8, r3
 800d408:	1aff      	subgt	r7, r7, r3
 800d40a:	eba9 0903 	subgt.w	r9, r9, r3
 800d40e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d410:	2b00      	cmp	r3, #0
 800d412:	dd17      	ble.n	800d444 <_strtod_l+0x75c>
 800d414:	4631      	mov	r1, r6
 800d416:	461a      	mov	r2, r3
 800d418:	4620      	mov	r0, r4
 800d41a:	f002 f92f 	bl	800f67c <__pow5mult>
 800d41e:	4606      	mov	r6, r0
 800d420:	2800      	cmp	r0, #0
 800d422:	f43f aead 	beq.w	800d180 <_strtod_l+0x498>
 800d426:	4601      	mov	r1, r0
 800d428:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d42a:	4620      	mov	r0, r4
 800d42c:	f002 f880 	bl	800f530 <__multiply>
 800d430:	900f      	str	r0, [sp, #60]	; 0x3c
 800d432:	2800      	cmp	r0, #0
 800d434:	f43f aea4 	beq.w	800d180 <_strtod_l+0x498>
 800d438:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d43a:	4620      	mov	r0, r4
 800d43c:	f001 ff5c 	bl	800f2f8 <_Bfree>
 800d440:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d442:	931e      	str	r3, [sp, #120]	; 0x78
 800d444:	f1b8 0f00 	cmp.w	r8, #0
 800d448:	f300 8091 	bgt.w	800d56e <_strtod_l+0x886>
 800d44c:	9b08      	ldr	r3, [sp, #32]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	dd08      	ble.n	800d464 <_strtod_l+0x77c>
 800d452:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d454:	9907      	ldr	r1, [sp, #28]
 800d456:	4620      	mov	r0, r4
 800d458:	f002 f910 	bl	800f67c <__pow5mult>
 800d45c:	9007      	str	r0, [sp, #28]
 800d45e:	2800      	cmp	r0, #0
 800d460:	f43f ae8e 	beq.w	800d180 <_strtod_l+0x498>
 800d464:	2f00      	cmp	r7, #0
 800d466:	dd08      	ble.n	800d47a <_strtod_l+0x792>
 800d468:	9907      	ldr	r1, [sp, #28]
 800d46a:	463a      	mov	r2, r7
 800d46c:	4620      	mov	r0, r4
 800d46e:	f002 f95f 	bl	800f730 <__lshift>
 800d472:	9007      	str	r0, [sp, #28]
 800d474:	2800      	cmp	r0, #0
 800d476:	f43f ae83 	beq.w	800d180 <_strtod_l+0x498>
 800d47a:	f1b9 0f00 	cmp.w	r9, #0
 800d47e:	dd08      	ble.n	800d492 <_strtod_l+0x7aa>
 800d480:	4631      	mov	r1, r6
 800d482:	464a      	mov	r2, r9
 800d484:	4620      	mov	r0, r4
 800d486:	f002 f953 	bl	800f730 <__lshift>
 800d48a:	4606      	mov	r6, r0
 800d48c:	2800      	cmp	r0, #0
 800d48e:	f43f ae77 	beq.w	800d180 <_strtod_l+0x498>
 800d492:	9a07      	ldr	r2, [sp, #28]
 800d494:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d496:	4620      	mov	r0, r4
 800d498:	f002 f9d2 	bl	800f840 <__mdiff>
 800d49c:	4605      	mov	r5, r0
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	f43f ae6e 	beq.w	800d180 <_strtod_l+0x498>
 800d4a4:	68c3      	ldr	r3, [r0, #12]
 800d4a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	60c3      	str	r3, [r0, #12]
 800d4ac:	4631      	mov	r1, r6
 800d4ae:	f002 f9ab 	bl	800f808 <__mcmp>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	da65      	bge.n	800d582 <_strtod_l+0x89a>
 800d4b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4b8:	ea53 030a 	orrs.w	r3, r3, sl
 800d4bc:	f040 8087 	bne.w	800d5ce <_strtod_l+0x8e6>
 800d4c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f040 8082 	bne.w	800d5ce <_strtod_l+0x8e6>
 800d4ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d4ce:	0d1b      	lsrs	r3, r3, #20
 800d4d0:	051b      	lsls	r3, r3, #20
 800d4d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d4d6:	d97a      	bls.n	800d5ce <_strtod_l+0x8e6>
 800d4d8:	696b      	ldr	r3, [r5, #20]
 800d4da:	b913      	cbnz	r3, 800d4e2 <_strtod_l+0x7fa>
 800d4dc:	692b      	ldr	r3, [r5, #16]
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	dd75      	ble.n	800d5ce <_strtod_l+0x8e6>
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	f002 f922 	bl	800f730 <__lshift>
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	4605      	mov	r5, r0
 800d4f0:	f002 f98a 	bl	800f808 <__mcmp>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	dd6a      	ble.n	800d5ce <_strtod_l+0x8e6>
 800d4f8:	9904      	ldr	r1, [sp, #16]
 800d4fa:	4a55      	ldr	r2, [pc, #340]	; (800d650 <_strtod_l+0x968>)
 800d4fc:	465b      	mov	r3, fp
 800d4fe:	2900      	cmp	r1, #0
 800d500:	f000 8085 	beq.w	800d60e <_strtod_l+0x926>
 800d504:	ea02 010b 	and.w	r1, r2, fp
 800d508:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d50c:	dc7f      	bgt.n	800d60e <_strtod_l+0x926>
 800d50e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d512:	f77f aeaa 	ble.w	800d26a <_strtod_l+0x582>
 800d516:	4a4f      	ldr	r2, [pc, #316]	; (800d654 <_strtod_l+0x96c>)
 800d518:	2300      	movs	r3, #0
 800d51a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d51e:	4650      	mov	r0, sl
 800d520:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d524:	4659      	mov	r1, fp
 800d526:	f7f3 f877 	bl	8000618 <__aeabi_dmul>
 800d52a:	460b      	mov	r3, r1
 800d52c:	4303      	orrs	r3, r0
 800d52e:	bf08      	it	eq
 800d530:	2322      	moveq	r3, #34	; 0x22
 800d532:	4682      	mov	sl, r0
 800d534:	468b      	mov	fp, r1
 800d536:	bf08      	it	eq
 800d538:	6023      	streq	r3, [r4, #0]
 800d53a:	e62b      	b.n	800d194 <_strtod_l+0x4ac>
 800d53c:	f04f 32ff 	mov.w	r2, #4294967295
 800d540:	fa02 f303 	lsl.w	r3, r2, r3
 800d544:	ea03 0a0a 	and.w	sl, r3, sl
 800d548:	e6de      	b.n	800d308 <_strtod_l+0x620>
 800d54a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d54e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d552:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d556:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d55a:	fa01 f308 	lsl.w	r3, r1, r8
 800d55e:	930c      	str	r3, [sp, #48]	; 0x30
 800d560:	9111      	str	r1, [sp, #68]	; 0x44
 800d562:	e741      	b.n	800d3e8 <_strtod_l+0x700>
 800d564:	2300      	movs	r3, #0
 800d566:	930c      	str	r3, [sp, #48]	; 0x30
 800d568:	2301      	movs	r3, #1
 800d56a:	9311      	str	r3, [sp, #68]	; 0x44
 800d56c:	e73c      	b.n	800d3e8 <_strtod_l+0x700>
 800d56e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d570:	4642      	mov	r2, r8
 800d572:	4620      	mov	r0, r4
 800d574:	f002 f8dc 	bl	800f730 <__lshift>
 800d578:	901e      	str	r0, [sp, #120]	; 0x78
 800d57a:	2800      	cmp	r0, #0
 800d57c:	f47f af66 	bne.w	800d44c <_strtod_l+0x764>
 800d580:	e5fe      	b.n	800d180 <_strtod_l+0x498>
 800d582:	465f      	mov	r7, fp
 800d584:	d16e      	bne.n	800d664 <_strtod_l+0x97c>
 800d586:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d58c:	b342      	cbz	r2, 800d5e0 <_strtod_l+0x8f8>
 800d58e:	4a32      	ldr	r2, [pc, #200]	; (800d658 <_strtod_l+0x970>)
 800d590:	4293      	cmp	r3, r2
 800d592:	d128      	bne.n	800d5e6 <_strtod_l+0x8fe>
 800d594:	9b04      	ldr	r3, [sp, #16]
 800d596:	4650      	mov	r0, sl
 800d598:	b1eb      	cbz	r3, 800d5d6 <_strtod_l+0x8ee>
 800d59a:	4a2d      	ldr	r2, [pc, #180]	; (800d650 <_strtod_l+0x968>)
 800d59c:	403a      	ands	r2, r7
 800d59e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d5a2:	f04f 31ff 	mov.w	r1, #4294967295
 800d5a6:	d819      	bhi.n	800d5dc <_strtod_l+0x8f4>
 800d5a8:	0d12      	lsrs	r2, r2, #20
 800d5aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d5ae:	fa01 f303 	lsl.w	r3, r1, r3
 800d5b2:	4298      	cmp	r0, r3
 800d5b4:	d117      	bne.n	800d5e6 <_strtod_l+0x8fe>
 800d5b6:	4b29      	ldr	r3, [pc, #164]	; (800d65c <_strtod_l+0x974>)
 800d5b8:	429f      	cmp	r7, r3
 800d5ba:	d102      	bne.n	800d5c2 <_strtod_l+0x8da>
 800d5bc:	3001      	adds	r0, #1
 800d5be:	f43f addf 	beq.w	800d180 <_strtod_l+0x498>
 800d5c2:	4b23      	ldr	r3, [pc, #140]	; (800d650 <_strtod_l+0x968>)
 800d5c4:	403b      	ands	r3, r7
 800d5c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d5ca:	f04f 0a00 	mov.w	sl, #0
 800d5ce:	9b04      	ldr	r3, [sp, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d1a0      	bne.n	800d516 <_strtod_l+0x82e>
 800d5d4:	e5de      	b.n	800d194 <_strtod_l+0x4ac>
 800d5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d5da:	e7ea      	b.n	800d5b2 <_strtod_l+0x8ca>
 800d5dc:	460b      	mov	r3, r1
 800d5de:	e7e8      	b.n	800d5b2 <_strtod_l+0x8ca>
 800d5e0:	ea53 030a 	orrs.w	r3, r3, sl
 800d5e4:	d088      	beq.n	800d4f8 <_strtod_l+0x810>
 800d5e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d5e8:	b1db      	cbz	r3, 800d622 <_strtod_l+0x93a>
 800d5ea:	423b      	tst	r3, r7
 800d5ec:	d0ef      	beq.n	800d5ce <_strtod_l+0x8e6>
 800d5ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5f0:	9a04      	ldr	r2, [sp, #16]
 800d5f2:	4650      	mov	r0, sl
 800d5f4:	4659      	mov	r1, fp
 800d5f6:	b1c3      	cbz	r3, 800d62a <_strtod_l+0x942>
 800d5f8:	f7ff fb57 	bl	800ccaa <sulp>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	460b      	mov	r3, r1
 800d600:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d604:	f7f2 fe52 	bl	80002ac <__adddf3>
 800d608:	4682      	mov	sl, r0
 800d60a:	468b      	mov	fp, r1
 800d60c:	e7df      	b.n	800d5ce <_strtod_l+0x8e6>
 800d60e:	4013      	ands	r3, r2
 800d610:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d614:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d618:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d61c:	f04f 3aff 	mov.w	sl, #4294967295
 800d620:	e7d5      	b.n	800d5ce <_strtod_l+0x8e6>
 800d622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d624:	ea13 0f0a 	tst.w	r3, sl
 800d628:	e7e0      	b.n	800d5ec <_strtod_l+0x904>
 800d62a:	f7ff fb3e 	bl	800ccaa <sulp>
 800d62e:	4602      	mov	r2, r0
 800d630:	460b      	mov	r3, r1
 800d632:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d636:	f7f2 fe37 	bl	80002a8 <__aeabi_dsub>
 800d63a:	2200      	movs	r2, #0
 800d63c:	2300      	movs	r3, #0
 800d63e:	4682      	mov	sl, r0
 800d640:	468b      	mov	fp, r1
 800d642:	f7f3 fa51 	bl	8000ae8 <__aeabi_dcmpeq>
 800d646:	2800      	cmp	r0, #0
 800d648:	d0c1      	beq.n	800d5ce <_strtod_l+0x8e6>
 800d64a:	e60e      	b.n	800d26a <_strtod_l+0x582>
 800d64c:	fffffc02 	.word	0xfffffc02
 800d650:	7ff00000 	.word	0x7ff00000
 800d654:	39500000 	.word	0x39500000
 800d658:	000fffff 	.word	0x000fffff
 800d65c:	7fefffff 	.word	0x7fefffff
 800d660:	08011078 	.word	0x08011078
 800d664:	4631      	mov	r1, r6
 800d666:	4628      	mov	r0, r5
 800d668:	f002 fa4a 	bl	800fb00 <__ratio>
 800d66c:	ec59 8b10 	vmov	r8, r9, d0
 800d670:	ee10 0a10 	vmov	r0, s0
 800d674:	2200      	movs	r2, #0
 800d676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d67a:	4649      	mov	r1, r9
 800d67c:	f7f3 fa48 	bl	8000b10 <__aeabi_dcmple>
 800d680:	2800      	cmp	r0, #0
 800d682:	d07c      	beq.n	800d77e <_strtod_l+0xa96>
 800d684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d686:	2b00      	cmp	r3, #0
 800d688:	d04c      	beq.n	800d724 <_strtod_l+0xa3c>
 800d68a:	4b95      	ldr	r3, [pc, #596]	; (800d8e0 <_strtod_l+0xbf8>)
 800d68c:	2200      	movs	r2, #0
 800d68e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d692:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d8e0 <_strtod_l+0xbf8>
 800d696:	f04f 0800 	mov.w	r8, #0
 800d69a:	4b92      	ldr	r3, [pc, #584]	; (800d8e4 <_strtod_l+0xbfc>)
 800d69c:	403b      	ands	r3, r7
 800d69e:	9311      	str	r3, [sp, #68]	; 0x44
 800d6a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d6a2:	4b91      	ldr	r3, [pc, #580]	; (800d8e8 <_strtod_l+0xc00>)
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	f040 80b2 	bne.w	800d80e <_strtod_l+0xb26>
 800d6aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6b2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d6b6:	ec4b ab10 	vmov	d0, sl, fp
 800d6ba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d6be:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d6c2:	f002 f945 	bl	800f950 <__ulp>
 800d6c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6ca:	ec53 2b10 	vmov	r2, r3, d0
 800d6ce:	f7f2 ffa3 	bl	8000618 <__aeabi_dmul>
 800d6d2:	4652      	mov	r2, sl
 800d6d4:	465b      	mov	r3, fp
 800d6d6:	f7f2 fde9 	bl	80002ac <__adddf3>
 800d6da:	460b      	mov	r3, r1
 800d6dc:	4981      	ldr	r1, [pc, #516]	; (800d8e4 <_strtod_l+0xbfc>)
 800d6de:	4a83      	ldr	r2, [pc, #524]	; (800d8ec <_strtod_l+0xc04>)
 800d6e0:	4019      	ands	r1, r3
 800d6e2:	4291      	cmp	r1, r2
 800d6e4:	4682      	mov	sl, r0
 800d6e6:	d95e      	bls.n	800d7a6 <_strtod_l+0xabe>
 800d6e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6ea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d103      	bne.n	800d6fa <_strtod_l+0xa12>
 800d6f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	f43f ad43 	beq.w	800d180 <_strtod_l+0x498>
 800d6fa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800d8f8 <_strtod_l+0xc10>
 800d6fe:	f04f 3aff 	mov.w	sl, #4294967295
 800d702:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d704:	4620      	mov	r0, r4
 800d706:	f001 fdf7 	bl	800f2f8 <_Bfree>
 800d70a:	9907      	ldr	r1, [sp, #28]
 800d70c:	4620      	mov	r0, r4
 800d70e:	f001 fdf3 	bl	800f2f8 <_Bfree>
 800d712:	4631      	mov	r1, r6
 800d714:	4620      	mov	r0, r4
 800d716:	f001 fdef 	bl	800f2f8 <_Bfree>
 800d71a:	4629      	mov	r1, r5
 800d71c:	4620      	mov	r0, r4
 800d71e:	f001 fdeb 	bl	800f2f8 <_Bfree>
 800d722:	e613      	b.n	800d34c <_strtod_l+0x664>
 800d724:	f1ba 0f00 	cmp.w	sl, #0
 800d728:	d11b      	bne.n	800d762 <_strtod_l+0xa7a>
 800d72a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d72e:	b9f3      	cbnz	r3, 800d76e <_strtod_l+0xa86>
 800d730:	4b6b      	ldr	r3, [pc, #428]	; (800d8e0 <_strtod_l+0xbf8>)
 800d732:	2200      	movs	r2, #0
 800d734:	4640      	mov	r0, r8
 800d736:	4649      	mov	r1, r9
 800d738:	f7f3 f9e0 	bl	8000afc <__aeabi_dcmplt>
 800d73c:	b9d0      	cbnz	r0, 800d774 <_strtod_l+0xa8c>
 800d73e:	4640      	mov	r0, r8
 800d740:	4649      	mov	r1, r9
 800d742:	4b6b      	ldr	r3, [pc, #428]	; (800d8f0 <_strtod_l+0xc08>)
 800d744:	2200      	movs	r2, #0
 800d746:	f7f2 ff67 	bl	8000618 <__aeabi_dmul>
 800d74a:	4680      	mov	r8, r0
 800d74c:	4689      	mov	r9, r1
 800d74e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d752:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d756:	931b      	str	r3, [sp, #108]	; 0x6c
 800d758:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d75c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d760:	e79b      	b.n	800d69a <_strtod_l+0x9b2>
 800d762:	f1ba 0f01 	cmp.w	sl, #1
 800d766:	d102      	bne.n	800d76e <_strtod_l+0xa86>
 800d768:	2f00      	cmp	r7, #0
 800d76a:	f43f ad7e 	beq.w	800d26a <_strtod_l+0x582>
 800d76e:	4b61      	ldr	r3, [pc, #388]	; (800d8f4 <_strtod_l+0xc0c>)
 800d770:	2200      	movs	r2, #0
 800d772:	e78c      	b.n	800d68e <_strtod_l+0x9a6>
 800d774:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d8f0 <_strtod_l+0xc08>
 800d778:	f04f 0800 	mov.w	r8, #0
 800d77c:	e7e7      	b.n	800d74e <_strtod_l+0xa66>
 800d77e:	4b5c      	ldr	r3, [pc, #368]	; (800d8f0 <_strtod_l+0xc08>)
 800d780:	4640      	mov	r0, r8
 800d782:	4649      	mov	r1, r9
 800d784:	2200      	movs	r2, #0
 800d786:	f7f2 ff47 	bl	8000618 <__aeabi_dmul>
 800d78a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d78c:	4680      	mov	r8, r0
 800d78e:	4689      	mov	r9, r1
 800d790:	b933      	cbnz	r3, 800d7a0 <_strtod_l+0xab8>
 800d792:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d796:	9012      	str	r0, [sp, #72]	; 0x48
 800d798:	9313      	str	r3, [sp, #76]	; 0x4c
 800d79a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d79e:	e7dd      	b.n	800d75c <_strtod_l+0xa74>
 800d7a0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d7a4:	e7f9      	b.n	800d79a <_strtod_l+0xab2>
 800d7a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d7aa:	9b04      	ldr	r3, [sp, #16]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1a8      	bne.n	800d702 <_strtod_l+0xa1a>
 800d7b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d7b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d7b6:	0d1b      	lsrs	r3, r3, #20
 800d7b8:	051b      	lsls	r3, r3, #20
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d1a1      	bne.n	800d702 <_strtod_l+0xa1a>
 800d7be:	4640      	mov	r0, r8
 800d7c0:	4649      	mov	r1, r9
 800d7c2:	f7f3 fa89 	bl	8000cd8 <__aeabi_d2lz>
 800d7c6:	f7f2 fef9 	bl	80005bc <__aeabi_l2d>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	4640      	mov	r0, r8
 800d7d0:	4649      	mov	r1, r9
 800d7d2:	f7f2 fd69 	bl	80002a8 <__aeabi_dsub>
 800d7d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d7d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7dc:	ea43 030a 	orr.w	r3, r3, sl
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	4680      	mov	r8, r0
 800d7e4:	4689      	mov	r9, r1
 800d7e6:	d053      	beq.n	800d890 <_strtod_l+0xba8>
 800d7e8:	a335      	add	r3, pc, #212	; (adr r3, 800d8c0 <_strtod_l+0xbd8>)
 800d7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ee:	f7f3 f985 	bl	8000afc <__aeabi_dcmplt>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	f47f acce 	bne.w	800d194 <_strtod_l+0x4ac>
 800d7f8:	a333      	add	r3, pc, #204	; (adr r3, 800d8c8 <_strtod_l+0xbe0>)
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	4640      	mov	r0, r8
 800d800:	4649      	mov	r1, r9
 800d802:	f7f3 f999 	bl	8000b38 <__aeabi_dcmpgt>
 800d806:	2800      	cmp	r0, #0
 800d808:	f43f af7b 	beq.w	800d702 <_strtod_l+0xa1a>
 800d80c:	e4c2      	b.n	800d194 <_strtod_l+0x4ac>
 800d80e:	9b04      	ldr	r3, [sp, #16]
 800d810:	b333      	cbz	r3, 800d860 <_strtod_l+0xb78>
 800d812:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d814:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d818:	d822      	bhi.n	800d860 <_strtod_l+0xb78>
 800d81a:	a32d      	add	r3, pc, #180	; (adr r3, 800d8d0 <_strtod_l+0xbe8>)
 800d81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d820:	4640      	mov	r0, r8
 800d822:	4649      	mov	r1, r9
 800d824:	f7f3 f974 	bl	8000b10 <__aeabi_dcmple>
 800d828:	b1a0      	cbz	r0, 800d854 <_strtod_l+0xb6c>
 800d82a:	4649      	mov	r1, r9
 800d82c:	4640      	mov	r0, r8
 800d82e:	f7f3 f9cb 	bl	8000bc8 <__aeabi_d2uiz>
 800d832:	2801      	cmp	r0, #1
 800d834:	bf38      	it	cc
 800d836:	2001      	movcc	r0, #1
 800d838:	f7f2 fe74 	bl	8000524 <__aeabi_ui2d>
 800d83c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d83e:	4680      	mov	r8, r0
 800d840:	4689      	mov	r9, r1
 800d842:	bb13      	cbnz	r3, 800d88a <_strtod_l+0xba2>
 800d844:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d848:	9014      	str	r0, [sp, #80]	; 0x50
 800d84a:	9315      	str	r3, [sp, #84]	; 0x54
 800d84c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d850:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d856:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d858:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d85c:	1a9b      	subs	r3, r3, r2
 800d85e:	930d      	str	r3, [sp, #52]	; 0x34
 800d860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d864:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d868:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d86c:	f002 f870 	bl	800f950 <__ulp>
 800d870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d874:	ec53 2b10 	vmov	r2, r3, d0
 800d878:	f7f2 fece 	bl	8000618 <__aeabi_dmul>
 800d87c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d880:	f7f2 fd14 	bl	80002ac <__adddf3>
 800d884:	4682      	mov	sl, r0
 800d886:	468b      	mov	fp, r1
 800d888:	e78f      	b.n	800d7aa <_strtod_l+0xac2>
 800d88a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800d88e:	e7dd      	b.n	800d84c <_strtod_l+0xb64>
 800d890:	a311      	add	r3, pc, #68	; (adr r3, 800d8d8 <_strtod_l+0xbf0>)
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	f7f3 f931 	bl	8000afc <__aeabi_dcmplt>
 800d89a:	e7b4      	b.n	800d806 <_strtod_l+0xb1e>
 800d89c:	2300      	movs	r3, #0
 800d89e:	930e      	str	r3, [sp, #56]	; 0x38
 800d8a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d8a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	f7ff ba65 	b.w	800cd74 <_strtod_l+0x8c>
 800d8aa:	2b65      	cmp	r3, #101	; 0x65
 800d8ac:	f43f ab5d 	beq.w	800cf6a <_strtod_l+0x282>
 800d8b0:	2b45      	cmp	r3, #69	; 0x45
 800d8b2:	f43f ab5a 	beq.w	800cf6a <_strtod_l+0x282>
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	f7ff bb92 	b.w	800cfe0 <_strtod_l+0x2f8>
 800d8bc:	f3af 8000 	nop.w
 800d8c0:	94a03595 	.word	0x94a03595
 800d8c4:	3fdfffff 	.word	0x3fdfffff
 800d8c8:	35afe535 	.word	0x35afe535
 800d8cc:	3fe00000 	.word	0x3fe00000
 800d8d0:	ffc00000 	.word	0xffc00000
 800d8d4:	41dfffff 	.word	0x41dfffff
 800d8d8:	94a03595 	.word	0x94a03595
 800d8dc:	3fcfffff 	.word	0x3fcfffff
 800d8e0:	3ff00000 	.word	0x3ff00000
 800d8e4:	7ff00000 	.word	0x7ff00000
 800d8e8:	7fe00000 	.word	0x7fe00000
 800d8ec:	7c9fffff 	.word	0x7c9fffff
 800d8f0:	3fe00000 	.word	0x3fe00000
 800d8f4:	bff00000 	.word	0xbff00000
 800d8f8:	7fefffff 	.word	0x7fefffff

0800d8fc <_strtod_r>:
 800d8fc:	4b01      	ldr	r3, [pc, #4]	; (800d904 <_strtod_r+0x8>)
 800d8fe:	f7ff b9f3 	b.w	800cce8 <_strtod_l>
 800d902:	bf00      	nop
 800d904:	200000e8 	.word	0x200000e8

0800d908 <_strtol_l.isra.0>:
 800d908:	2b01      	cmp	r3, #1
 800d90a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d90e:	d001      	beq.n	800d914 <_strtol_l.isra.0+0xc>
 800d910:	2b24      	cmp	r3, #36	; 0x24
 800d912:	d906      	bls.n	800d922 <_strtol_l.isra.0+0x1a>
 800d914:	f000 ffd8 	bl	800e8c8 <__errno>
 800d918:	2316      	movs	r3, #22
 800d91a:	6003      	str	r3, [r0, #0]
 800d91c:	2000      	movs	r0, #0
 800d91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d922:	4f3a      	ldr	r7, [pc, #232]	; (800da0c <_strtol_l.isra.0+0x104>)
 800d924:	468e      	mov	lr, r1
 800d926:	4676      	mov	r6, lr
 800d928:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d92c:	5de5      	ldrb	r5, [r4, r7]
 800d92e:	f015 0508 	ands.w	r5, r5, #8
 800d932:	d1f8      	bne.n	800d926 <_strtol_l.isra.0+0x1e>
 800d934:	2c2d      	cmp	r4, #45	; 0x2d
 800d936:	d134      	bne.n	800d9a2 <_strtol_l.isra.0+0x9a>
 800d938:	f89e 4000 	ldrb.w	r4, [lr]
 800d93c:	f04f 0801 	mov.w	r8, #1
 800d940:	f106 0e02 	add.w	lr, r6, #2
 800d944:	2b00      	cmp	r3, #0
 800d946:	d05c      	beq.n	800da02 <_strtol_l.isra.0+0xfa>
 800d948:	2b10      	cmp	r3, #16
 800d94a:	d10c      	bne.n	800d966 <_strtol_l.isra.0+0x5e>
 800d94c:	2c30      	cmp	r4, #48	; 0x30
 800d94e:	d10a      	bne.n	800d966 <_strtol_l.isra.0+0x5e>
 800d950:	f89e 4000 	ldrb.w	r4, [lr]
 800d954:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d958:	2c58      	cmp	r4, #88	; 0x58
 800d95a:	d14d      	bne.n	800d9f8 <_strtol_l.isra.0+0xf0>
 800d95c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d960:	2310      	movs	r3, #16
 800d962:	f10e 0e02 	add.w	lr, lr, #2
 800d966:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d96a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d96e:	2600      	movs	r6, #0
 800d970:	fbbc f9f3 	udiv	r9, ip, r3
 800d974:	4635      	mov	r5, r6
 800d976:	fb03 ca19 	mls	sl, r3, r9, ip
 800d97a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d97e:	2f09      	cmp	r7, #9
 800d980:	d818      	bhi.n	800d9b4 <_strtol_l.isra.0+0xac>
 800d982:	463c      	mov	r4, r7
 800d984:	42a3      	cmp	r3, r4
 800d986:	dd24      	ble.n	800d9d2 <_strtol_l.isra.0+0xca>
 800d988:	2e00      	cmp	r6, #0
 800d98a:	db1f      	blt.n	800d9cc <_strtol_l.isra.0+0xc4>
 800d98c:	45a9      	cmp	r9, r5
 800d98e:	d31d      	bcc.n	800d9cc <_strtol_l.isra.0+0xc4>
 800d990:	d101      	bne.n	800d996 <_strtol_l.isra.0+0x8e>
 800d992:	45a2      	cmp	sl, r4
 800d994:	db1a      	blt.n	800d9cc <_strtol_l.isra.0+0xc4>
 800d996:	fb05 4503 	mla	r5, r5, r3, r4
 800d99a:	2601      	movs	r6, #1
 800d99c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d9a0:	e7eb      	b.n	800d97a <_strtol_l.isra.0+0x72>
 800d9a2:	2c2b      	cmp	r4, #43	; 0x2b
 800d9a4:	bf08      	it	eq
 800d9a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d9aa:	46a8      	mov	r8, r5
 800d9ac:	bf08      	it	eq
 800d9ae:	f106 0e02 	addeq.w	lr, r6, #2
 800d9b2:	e7c7      	b.n	800d944 <_strtol_l.isra.0+0x3c>
 800d9b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d9b8:	2f19      	cmp	r7, #25
 800d9ba:	d801      	bhi.n	800d9c0 <_strtol_l.isra.0+0xb8>
 800d9bc:	3c37      	subs	r4, #55	; 0x37
 800d9be:	e7e1      	b.n	800d984 <_strtol_l.isra.0+0x7c>
 800d9c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d9c4:	2f19      	cmp	r7, #25
 800d9c6:	d804      	bhi.n	800d9d2 <_strtol_l.isra.0+0xca>
 800d9c8:	3c57      	subs	r4, #87	; 0x57
 800d9ca:	e7db      	b.n	800d984 <_strtol_l.isra.0+0x7c>
 800d9cc:	f04f 36ff 	mov.w	r6, #4294967295
 800d9d0:	e7e4      	b.n	800d99c <_strtol_l.isra.0+0x94>
 800d9d2:	2e00      	cmp	r6, #0
 800d9d4:	da05      	bge.n	800d9e2 <_strtol_l.isra.0+0xda>
 800d9d6:	2322      	movs	r3, #34	; 0x22
 800d9d8:	6003      	str	r3, [r0, #0]
 800d9da:	4665      	mov	r5, ip
 800d9dc:	b942      	cbnz	r2, 800d9f0 <_strtol_l.isra.0+0xe8>
 800d9de:	4628      	mov	r0, r5
 800d9e0:	e79d      	b.n	800d91e <_strtol_l.isra.0+0x16>
 800d9e2:	f1b8 0f00 	cmp.w	r8, #0
 800d9e6:	d000      	beq.n	800d9ea <_strtol_l.isra.0+0xe2>
 800d9e8:	426d      	negs	r5, r5
 800d9ea:	2a00      	cmp	r2, #0
 800d9ec:	d0f7      	beq.n	800d9de <_strtol_l.isra.0+0xd6>
 800d9ee:	b10e      	cbz	r6, 800d9f4 <_strtol_l.isra.0+0xec>
 800d9f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d9f4:	6011      	str	r1, [r2, #0]
 800d9f6:	e7f2      	b.n	800d9de <_strtol_l.isra.0+0xd6>
 800d9f8:	2430      	movs	r4, #48	; 0x30
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d1b3      	bne.n	800d966 <_strtol_l.isra.0+0x5e>
 800d9fe:	2308      	movs	r3, #8
 800da00:	e7b1      	b.n	800d966 <_strtol_l.isra.0+0x5e>
 800da02:	2c30      	cmp	r4, #48	; 0x30
 800da04:	d0a4      	beq.n	800d950 <_strtol_l.isra.0+0x48>
 800da06:	230a      	movs	r3, #10
 800da08:	e7ad      	b.n	800d966 <_strtol_l.isra.0+0x5e>
 800da0a:	bf00      	nop
 800da0c:	080110a1 	.word	0x080110a1

0800da10 <_strtol_r>:
 800da10:	f7ff bf7a 	b.w	800d908 <_strtol_l.isra.0>

0800da14 <__swbuf_r>:
 800da14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da16:	460e      	mov	r6, r1
 800da18:	4614      	mov	r4, r2
 800da1a:	4605      	mov	r5, r0
 800da1c:	b118      	cbz	r0, 800da26 <__swbuf_r+0x12>
 800da1e:	6983      	ldr	r3, [r0, #24]
 800da20:	b90b      	cbnz	r3, 800da26 <__swbuf_r+0x12>
 800da22:	f7fe f88b 	bl	800bb3c <__sinit>
 800da26:	4b21      	ldr	r3, [pc, #132]	; (800daac <__swbuf_r+0x98>)
 800da28:	429c      	cmp	r4, r3
 800da2a:	d12b      	bne.n	800da84 <__swbuf_r+0x70>
 800da2c:	686c      	ldr	r4, [r5, #4]
 800da2e:	69a3      	ldr	r3, [r4, #24]
 800da30:	60a3      	str	r3, [r4, #8]
 800da32:	89a3      	ldrh	r3, [r4, #12]
 800da34:	071a      	lsls	r2, r3, #28
 800da36:	d52f      	bpl.n	800da98 <__swbuf_r+0x84>
 800da38:	6923      	ldr	r3, [r4, #16]
 800da3a:	b36b      	cbz	r3, 800da98 <__swbuf_r+0x84>
 800da3c:	6923      	ldr	r3, [r4, #16]
 800da3e:	6820      	ldr	r0, [r4, #0]
 800da40:	1ac0      	subs	r0, r0, r3
 800da42:	6963      	ldr	r3, [r4, #20]
 800da44:	b2f6      	uxtb	r6, r6
 800da46:	4283      	cmp	r3, r0
 800da48:	4637      	mov	r7, r6
 800da4a:	dc04      	bgt.n	800da56 <__swbuf_r+0x42>
 800da4c:	4621      	mov	r1, r4
 800da4e:	4628      	mov	r0, r5
 800da50:	f000 ffc6 	bl	800e9e0 <_fflush_r>
 800da54:	bb30      	cbnz	r0, 800daa4 <__swbuf_r+0x90>
 800da56:	68a3      	ldr	r3, [r4, #8]
 800da58:	3b01      	subs	r3, #1
 800da5a:	60a3      	str	r3, [r4, #8]
 800da5c:	6823      	ldr	r3, [r4, #0]
 800da5e:	1c5a      	adds	r2, r3, #1
 800da60:	6022      	str	r2, [r4, #0]
 800da62:	701e      	strb	r6, [r3, #0]
 800da64:	6963      	ldr	r3, [r4, #20]
 800da66:	3001      	adds	r0, #1
 800da68:	4283      	cmp	r3, r0
 800da6a:	d004      	beq.n	800da76 <__swbuf_r+0x62>
 800da6c:	89a3      	ldrh	r3, [r4, #12]
 800da6e:	07db      	lsls	r3, r3, #31
 800da70:	d506      	bpl.n	800da80 <__swbuf_r+0x6c>
 800da72:	2e0a      	cmp	r6, #10
 800da74:	d104      	bne.n	800da80 <__swbuf_r+0x6c>
 800da76:	4621      	mov	r1, r4
 800da78:	4628      	mov	r0, r5
 800da7a:	f000 ffb1 	bl	800e9e0 <_fflush_r>
 800da7e:	b988      	cbnz	r0, 800daa4 <__swbuf_r+0x90>
 800da80:	4638      	mov	r0, r7
 800da82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da84:	4b0a      	ldr	r3, [pc, #40]	; (800dab0 <__swbuf_r+0x9c>)
 800da86:	429c      	cmp	r4, r3
 800da88:	d101      	bne.n	800da8e <__swbuf_r+0x7a>
 800da8a:	68ac      	ldr	r4, [r5, #8]
 800da8c:	e7cf      	b.n	800da2e <__swbuf_r+0x1a>
 800da8e:	4b09      	ldr	r3, [pc, #36]	; (800dab4 <__swbuf_r+0xa0>)
 800da90:	429c      	cmp	r4, r3
 800da92:	bf08      	it	eq
 800da94:	68ec      	ldreq	r4, [r5, #12]
 800da96:	e7ca      	b.n	800da2e <__swbuf_r+0x1a>
 800da98:	4621      	mov	r1, r4
 800da9a:	4628      	mov	r0, r5
 800da9c:	f000 f81e 	bl	800dadc <__swsetup_r>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d0cb      	beq.n	800da3c <__swbuf_r+0x28>
 800daa4:	f04f 37ff 	mov.w	r7, #4294967295
 800daa8:	e7ea      	b.n	800da80 <__swbuf_r+0x6c>
 800daaa:	bf00      	nop
 800daac:	08010fd0 	.word	0x08010fd0
 800dab0:	08010ff0 	.word	0x08010ff0
 800dab4:	08010fb0 	.word	0x08010fb0

0800dab8 <_write_r>:
 800dab8:	b538      	push	{r3, r4, r5, lr}
 800daba:	4d07      	ldr	r5, [pc, #28]	; (800dad8 <_write_r+0x20>)
 800dabc:	4604      	mov	r4, r0
 800dabe:	4608      	mov	r0, r1
 800dac0:	4611      	mov	r1, r2
 800dac2:	2200      	movs	r2, #0
 800dac4:	602a      	str	r2, [r5, #0]
 800dac6:	461a      	mov	r2, r3
 800dac8:	f002 fd0e 	bl	80104e8 <_write>
 800dacc:	1c43      	adds	r3, r0, #1
 800dace:	d102      	bne.n	800dad6 <_write_r+0x1e>
 800dad0:	682b      	ldr	r3, [r5, #0]
 800dad2:	b103      	cbz	r3, 800dad6 <_write_r+0x1e>
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	bd38      	pop	{r3, r4, r5, pc}
 800dad8:	200013bc 	.word	0x200013bc

0800dadc <__swsetup_r>:
 800dadc:	4b32      	ldr	r3, [pc, #200]	; (800dba8 <__swsetup_r+0xcc>)
 800dade:	b570      	push	{r4, r5, r6, lr}
 800dae0:	681d      	ldr	r5, [r3, #0]
 800dae2:	4606      	mov	r6, r0
 800dae4:	460c      	mov	r4, r1
 800dae6:	b125      	cbz	r5, 800daf2 <__swsetup_r+0x16>
 800dae8:	69ab      	ldr	r3, [r5, #24]
 800daea:	b913      	cbnz	r3, 800daf2 <__swsetup_r+0x16>
 800daec:	4628      	mov	r0, r5
 800daee:	f7fe f825 	bl	800bb3c <__sinit>
 800daf2:	4b2e      	ldr	r3, [pc, #184]	; (800dbac <__swsetup_r+0xd0>)
 800daf4:	429c      	cmp	r4, r3
 800daf6:	d10f      	bne.n	800db18 <__swsetup_r+0x3c>
 800daf8:	686c      	ldr	r4, [r5, #4]
 800dafa:	89a3      	ldrh	r3, [r4, #12]
 800dafc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db00:	0719      	lsls	r1, r3, #28
 800db02:	d42c      	bmi.n	800db5e <__swsetup_r+0x82>
 800db04:	06dd      	lsls	r5, r3, #27
 800db06:	d411      	bmi.n	800db2c <__swsetup_r+0x50>
 800db08:	2309      	movs	r3, #9
 800db0a:	6033      	str	r3, [r6, #0]
 800db0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db10:	81a3      	strh	r3, [r4, #12]
 800db12:	f04f 30ff 	mov.w	r0, #4294967295
 800db16:	e03e      	b.n	800db96 <__swsetup_r+0xba>
 800db18:	4b25      	ldr	r3, [pc, #148]	; (800dbb0 <__swsetup_r+0xd4>)
 800db1a:	429c      	cmp	r4, r3
 800db1c:	d101      	bne.n	800db22 <__swsetup_r+0x46>
 800db1e:	68ac      	ldr	r4, [r5, #8]
 800db20:	e7eb      	b.n	800dafa <__swsetup_r+0x1e>
 800db22:	4b24      	ldr	r3, [pc, #144]	; (800dbb4 <__swsetup_r+0xd8>)
 800db24:	429c      	cmp	r4, r3
 800db26:	bf08      	it	eq
 800db28:	68ec      	ldreq	r4, [r5, #12]
 800db2a:	e7e6      	b.n	800dafa <__swsetup_r+0x1e>
 800db2c:	0758      	lsls	r0, r3, #29
 800db2e:	d512      	bpl.n	800db56 <__swsetup_r+0x7a>
 800db30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db32:	b141      	cbz	r1, 800db46 <__swsetup_r+0x6a>
 800db34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db38:	4299      	cmp	r1, r3
 800db3a:	d002      	beq.n	800db42 <__swsetup_r+0x66>
 800db3c:	4630      	mov	r0, r6
 800db3e:	f002 f865 	bl	800fc0c <_free_r>
 800db42:	2300      	movs	r3, #0
 800db44:	6363      	str	r3, [r4, #52]	; 0x34
 800db46:	89a3      	ldrh	r3, [r4, #12]
 800db48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db4c:	81a3      	strh	r3, [r4, #12]
 800db4e:	2300      	movs	r3, #0
 800db50:	6063      	str	r3, [r4, #4]
 800db52:	6923      	ldr	r3, [r4, #16]
 800db54:	6023      	str	r3, [r4, #0]
 800db56:	89a3      	ldrh	r3, [r4, #12]
 800db58:	f043 0308 	orr.w	r3, r3, #8
 800db5c:	81a3      	strh	r3, [r4, #12]
 800db5e:	6923      	ldr	r3, [r4, #16]
 800db60:	b94b      	cbnz	r3, 800db76 <__swsetup_r+0x9a>
 800db62:	89a3      	ldrh	r3, [r4, #12]
 800db64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db6c:	d003      	beq.n	800db76 <__swsetup_r+0x9a>
 800db6e:	4621      	mov	r1, r4
 800db70:	4630      	mov	r0, r6
 800db72:	f001 fb1b 	bl	800f1ac <__smakebuf_r>
 800db76:	89a0      	ldrh	r0, [r4, #12]
 800db78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db7c:	f010 0301 	ands.w	r3, r0, #1
 800db80:	d00a      	beq.n	800db98 <__swsetup_r+0xbc>
 800db82:	2300      	movs	r3, #0
 800db84:	60a3      	str	r3, [r4, #8]
 800db86:	6963      	ldr	r3, [r4, #20]
 800db88:	425b      	negs	r3, r3
 800db8a:	61a3      	str	r3, [r4, #24]
 800db8c:	6923      	ldr	r3, [r4, #16]
 800db8e:	b943      	cbnz	r3, 800dba2 <__swsetup_r+0xc6>
 800db90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db94:	d1ba      	bne.n	800db0c <__swsetup_r+0x30>
 800db96:	bd70      	pop	{r4, r5, r6, pc}
 800db98:	0781      	lsls	r1, r0, #30
 800db9a:	bf58      	it	pl
 800db9c:	6963      	ldrpl	r3, [r4, #20]
 800db9e:	60a3      	str	r3, [r4, #8]
 800dba0:	e7f4      	b.n	800db8c <__swsetup_r+0xb0>
 800dba2:	2000      	movs	r0, #0
 800dba4:	e7f7      	b.n	800db96 <__swsetup_r+0xba>
 800dba6:	bf00      	nop
 800dba8:	20000080 	.word	0x20000080
 800dbac:	08010fd0 	.word	0x08010fd0
 800dbb0:	08010ff0 	.word	0x08010ff0
 800dbb4:	08010fb0 	.word	0x08010fb0

0800dbb8 <_close_r>:
 800dbb8:	b538      	push	{r3, r4, r5, lr}
 800dbba:	4d06      	ldr	r5, [pc, #24]	; (800dbd4 <_close_r+0x1c>)
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	4608      	mov	r0, r1
 800dbc2:	602b      	str	r3, [r5, #0]
 800dbc4:	f002 fc4a 	bl	801045c <_close>
 800dbc8:	1c43      	adds	r3, r0, #1
 800dbca:	d102      	bne.n	800dbd2 <_close_r+0x1a>
 800dbcc:	682b      	ldr	r3, [r5, #0]
 800dbce:	b103      	cbz	r3, 800dbd2 <_close_r+0x1a>
 800dbd0:	6023      	str	r3, [r4, #0]
 800dbd2:	bd38      	pop	{r3, r4, r5, pc}
 800dbd4:	200013bc 	.word	0x200013bc

0800dbd8 <quorem>:
 800dbd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbdc:	6903      	ldr	r3, [r0, #16]
 800dbde:	690c      	ldr	r4, [r1, #16]
 800dbe0:	42a3      	cmp	r3, r4
 800dbe2:	4607      	mov	r7, r0
 800dbe4:	f2c0 8081 	blt.w	800dcea <quorem+0x112>
 800dbe8:	3c01      	subs	r4, #1
 800dbea:	f101 0814 	add.w	r8, r1, #20
 800dbee:	f100 0514 	add.w	r5, r0, #20
 800dbf2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbf6:	9301      	str	r3, [sp, #4]
 800dbf8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dbfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc00:	3301      	adds	r3, #1
 800dc02:	429a      	cmp	r2, r3
 800dc04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dc08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc0c:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc10:	d331      	bcc.n	800dc76 <quorem+0x9e>
 800dc12:	f04f 0e00 	mov.w	lr, #0
 800dc16:	4640      	mov	r0, r8
 800dc18:	46ac      	mov	ip, r5
 800dc1a:	46f2      	mov	sl, lr
 800dc1c:	f850 2b04 	ldr.w	r2, [r0], #4
 800dc20:	b293      	uxth	r3, r2
 800dc22:	fb06 e303 	mla	r3, r6, r3, lr
 800dc26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dc2a:	b29b      	uxth	r3, r3
 800dc2c:	ebaa 0303 	sub.w	r3, sl, r3
 800dc30:	0c12      	lsrs	r2, r2, #16
 800dc32:	f8dc a000 	ldr.w	sl, [ip]
 800dc36:	fb06 e202 	mla	r2, r6, r2, lr
 800dc3a:	fa13 f38a 	uxtah	r3, r3, sl
 800dc3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dc42:	fa1f fa82 	uxth.w	sl, r2
 800dc46:	f8dc 2000 	ldr.w	r2, [ip]
 800dc4a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800dc4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc58:	4581      	cmp	r9, r0
 800dc5a:	f84c 3b04 	str.w	r3, [ip], #4
 800dc5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dc62:	d2db      	bcs.n	800dc1c <quorem+0x44>
 800dc64:	f855 300b 	ldr.w	r3, [r5, fp]
 800dc68:	b92b      	cbnz	r3, 800dc76 <quorem+0x9e>
 800dc6a:	9b01      	ldr	r3, [sp, #4]
 800dc6c:	3b04      	subs	r3, #4
 800dc6e:	429d      	cmp	r5, r3
 800dc70:	461a      	mov	r2, r3
 800dc72:	d32e      	bcc.n	800dcd2 <quorem+0xfa>
 800dc74:	613c      	str	r4, [r7, #16]
 800dc76:	4638      	mov	r0, r7
 800dc78:	f001 fdc6 	bl	800f808 <__mcmp>
 800dc7c:	2800      	cmp	r0, #0
 800dc7e:	db24      	blt.n	800dcca <quorem+0xf2>
 800dc80:	3601      	adds	r6, #1
 800dc82:	4628      	mov	r0, r5
 800dc84:	f04f 0c00 	mov.w	ip, #0
 800dc88:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc8c:	f8d0 e000 	ldr.w	lr, [r0]
 800dc90:	b293      	uxth	r3, r2
 800dc92:	ebac 0303 	sub.w	r3, ip, r3
 800dc96:	0c12      	lsrs	r2, r2, #16
 800dc98:	fa13 f38e 	uxtah	r3, r3, lr
 800dc9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dca0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dca4:	b29b      	uxth	r3, r3
 800dca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcaa:	45c1      	cmp	r9, r8
 800dcac:	f840 3b04 	str.w	r3, [r0], #4
 800dcb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dcb4:	d2e8      	bcs.n	800dc88 <quorem+0xb0>
 800dcb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcbe:	b922      	cbnz	r2, 800dcca <quorem+0xf2>
 800dcc0:	3b04      	subs	r3, #4
 800dcc2:	429d      	cmp	r5, r3
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	d30a      	bcc.n	800dcde <quorem+0x106>
 800dcc8:	613c      	str	r4, [r7, #16]
 800dcca:	4630      	mov	r0, r6
 800dccc:	b003      	add	sp, #12
 800dcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd2:	6812      	ldr	r2, [r2, #0]
 800dcd4:	3b04      	subs	r3, #4
 800dcd6:	2a00      	cmp	r2, #0
 800dcd8:	d1cc      	bne.n	800dc74 <quorem+0x9c>
 800dcda:	3c01      	subs	r4, #1
 800dcdc:	e7c7      	b.n	800dc6e <quorem+0x96>
 800dcde:	6812      	ldr	r2, [r2, #0]
 800dce0:	3b04      	subs	r3, #4
 800dce2:	2a00      	cmp	r2, #0
 800dce4:	d1f0      	bne.n	800dcc8 <quorem+0xf0>
 800dce6:	3c01      	subs	r4, #1
 800dce8:	e7eb      	b.n	800dcc2 <quorem+0xea>
 800dcea:	2000      	movs	r0, #0
 800dcec:	e7ee      	b.n	800dccc <quorem+0xf4>
	...

0800dcf0 <_dtoa_r>:
 800dcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf4:	ed2d 8b02 	vpush	{d8}
 800dcf8:	ec57 6b10 	vmov	r6, r7, d0
 800dcfc:	b095      	sub	sp, #84	; 0x54
 800dcfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dd04:	9105      	str	r1, [sp, #20]
 800dd06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	9209      	str	r2, [sp, #36]	; 0x24
 800dd0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd10:	b975      	cbnz	r5, 800dd30 <_dtoa_r+0x40>
 800dd12:	2010      	movs	r0, #16
 800dd14:	f001 fa8a 	bl	800f22c <malloc>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	6260      	str	r0, [r4, #36]	; 0x24
 800dd1c:	b920      	cbnz	r0, 800dd28 <_dtoa_r+0x38>
 800dd1e:	4bb2      	ldr	r3, [pc, #712]	; (800dfe8 <_dtoa_r+0x2f8>)
 800dd20:	21ea      	movs	r1, #234	; 0xea
 800dd22:	48b2      	ldr	r0, [pc, #712]	; (800dfec <_dtoa_r+0x2fc>)
 800dd24:	f002 fab4 	bl	8010290 <__assert_func>
 800dd28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd2c:	6005      	str	r5, [r0, #0]
 800dd2e:	60c5      	str	r5, [r0, #12]
 800dd30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd32:	6819      	ldr	r1, [r3, #0]
 800dd34:	b151      	cbz	r1, 800dd4c <_dtoa_r+0x5c>
 800dd36:	685a      	ldr	r2, [r3, #4]
 800dd38:	604a      	str	r2, [r1, #4]
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	4093      	lsls	r3, r2
 800dd3e:	608b      	str	r3, [r1, #8]
 800dd40:	4620      	mov	r0, r4
 800dd42:	f001 fad9 	bl	800f2f8 <_Bfree>
 800dd46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd48:	2200      	movs	r2, #0
 800dd4a:	601a      	str	r2, [r3, #0]
 800dd4c:	1e3b      	subs	r3, r7, #0
 800dd4e:	bfb9      	ittee	lt
 800dd50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dd54:	9303      	strlt	r3, [sp, #12]
 800dd56:	2300      	movge	r3, #0
 800dd58:	f8c8 3000 	strge.w	r3, [r8]
 800dd5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dd60:	4ba3      	ldr	r3, [pc, #652]	; (800dff0 <_dtoa_r+0x300>)
 800dd62:	bfbc      	itt	lt
 800dd64:	2201      	movlt	r2, #1
 800dd66:	f8c8 2000 	strlt.w	r2, [r8]
 800dd6a:	ea33 0309 	bics.w	r3, r3, r9
 800dd6e:	d11b      	bne.n	800dda8 <_dtoa_r+0xb8>
 800dd70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dd72:	f242 730f 	movw	r3, #9999	; 0x270f
 800dd76:	6013      	str	r3, [r2, #0]
 800dd78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd7c:	4333      	orrs	r3, r6
 800dd7e:	f000 857a 	beq.w	800e876 <_dtoa_r+0xb86>
 800dd82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd84:	b963      	cbnz	r3, 800dda0 <_dtoa_r+0xb0>
 800dd86:	4b9b      	ldr	r3, [pc, #620]	; (800dff4 <_dtoa_r+0x304>)
 800dd88:	e024      	b.n	800ddd4 <_dtoa_r+0xe4>
 800dd8a:	4b9b      	ldr	r3, [pc, #620]	; (800dff8 <_dtoa_r+0x308>)
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	3308      	adds	r3, #8
 800dd90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd92:	6013      	str	r3, [r2, #0]
 800dd94:	9800      	ldr	r0, [sp, #0]
 800dd96:	b015      	add	sp, #84	; 0x54
 800dd98:	ecbd 8b02 	vpop	{d8}
 800dd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda0:	4b94      	ldr	r3, [pc, #592]	; (800dff4 <_dtoa_r+0x304>)
 800dda2:	9300      	str	r3, [sp, #0]
 800dda4:	3303      	adds	r3, #3
 800dda6:	e7f3      	b.n	800dd90 <_dtoa_r+0xa0>
 800dda8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ddac:	2200      	movs	r2, #0
 800ddae:	ec51 0b17 	vmov	r0, r1, d7
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ddb8:	f7f2 fe96 	bl	8000ae8 <__aeabi_dcmpeq>
 800ddbc:	4680      	mov	r8, r0
 800ddbe:	b158      	cbz	r0, 800ddd8 <_dtoa_r+0xe8>
 800ddc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	6013      	str	r3, [r2, #0]
 800ddc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f000 8551 	beq.w	800e870 <_dtoa_r+0xb80>
 800ddce:	488b      	ldr	r0, [pc, #556]	; (800dffc <_dtoa_r+0x30c>)
 800ddd0:	6018      	str	r0, [r3, #0]
 800ddd2:	1e43      	subs	r3, r0, #1
 800ddd4:	9300      	str	r3, [sp, #0]
 800ddd6:	e7dd      	b.n	800dd94 <_dtoa_r+0xa4>
 800ddd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dddc:	aa12      	add	r2, sp, #72	; 0x48
 800ddde:	a913      	add	r1, sp, #76	; 0x4c
 800dde0:	4620      	mov	r0, r4
 800dde2:	f001 fe31 	bl	800fa48 <__d2b>
 800dde6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ddea:	4683      	mov	fp, r0
 800ddec:	2d00      	cmp	r5, #0
 800ddee:	d07c      	beq.n	800deea <_dtoa_r+0x1fa>
 800ddf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddf2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ddf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddfa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ddfe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800de02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800de06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800de0a:	4b7d      	ldr	r3, [pc, #500]	; (800e000 <_dtoa_r+0x310>)
 800de0c:	2200      	movs	r2, #0
 800de0e:	4630      	mov	r0, r6
 800de10:	4639      	mov	r1, r7
 800de12:	f7f2 fa49 	bl	80002a8 <__aeabi_dsub>
 800de16:	a36e      	add	r3, pc, #440	; (adr r3, 800dfd0 <_dtoa_r+0x2e0>)
 800de18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1c:	f7f2 fbfc 	bl	8000618 <__aeabi_dmul>
 800de20:	a36d      	add	r3, pc, #436	; (adr r3, 800dfd8 <_dtoa_r+0x2e8>)
 800de22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de26:	f7f2 fa41 	bl	80002ac <__adddf3>
 800de2a:	4606      	mov	r6, r0
 800de2c:	4628      	mov	r0, r5
 800de2e:	460f      	mov	r7, r1
 800de30:	f7f2 fb88 	bl	8000544 <__aeabi_i2d>
 800de34:	a36a      	add	r3, pc, #424	; (adr r3, 800dfe0 <_dtoa_r+0x2f0>)
 800de36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de3a:	f7f2 fbed 	bl	8000618 <__aeabi_dmul>
 800de3e:	4602      	mov	r2, r0
 800de40:	460b      	mov	r3, r1
 800de42:	4630      	mov	r0, r6
 800de44:	4639      	mov	r1, r7
 800de46:	f7f2 fa31 	bl	80002ac <__adddf3>
 800de4a:	4606      	mov	r6, r0
 800de4c:	460f      	mov	r7, r1
 800de4e:	f7f2 fe93 	bl	8000b78 <__aeabi_d2iz>
 800de52:	2200      	movs	r2, #0
 800de54:	4682      	mov	sl, r0
 800de56:	2300      	movs	r3, #0
 800de58:	4630      	mov	r0, r6
 800de5a:	4639      	mov	r1, r7
 800de5c:	f7f2 fe4e 	bl	8000afc <__aeabi_dcmplt>
 800de60:	b148      	cbz	r0, 800de76 <_dtoa_r+0x186>
 800de62:	4650      	mov	r0, sl
 800de64:	f7f2 fb6e 	bl	8000544 <__aeabi_i2d>
 800de68:	4632      	mov	r2, r6
 800de6a:	463b      	mov	r3, r7
 800de6c:	f7f2 fe3c 	bl	8000ae8 <__aeabi_dcmpeq>
 800de70:	b908      	cbnz	r0, 800de76 <_dtoa_r+0x186>
 800de72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de76:	f1ba 0f16 	cmp.w	sl, #22
 800de7a:	d854      	bhi.n	800df26 <_dtoa_r+0x236>
 800de7c:	4b61      	ldr	r3, [pc, #388]	; (800e004 <_dtoa_r+0x314>)
 800de7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800de82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800de8a:	f7f2 fe37 	bl	8000afc <__aeabi_dcmplt>
 800de8e:	2800      	cmp	r0, #0
 800de90:	d04b      	beq.n	800df2a <_dtoa_r+0x23a>
 800de92:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de96:	2300      	movs	r3, #0
 800de98:	930e      	str	r3, [sp, #56]	; 0x38
 800de9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de9c:	1b5d      	subs	r5, r3, r5
 800de9e:	1e6b      	subs	r3, r5, #1
 800dea0:	9304      	str	r3, [sp, #16]
 800dea2:	bf43      	ittte	mi
 800dea4:	2300      	movmi	r3, #0
 800dea6:	f1c5 0801 	rsbmi	r8, r5, #1
 800deaa:	9304      	strmi	r3, [sp, #16]
 800deac:	f04f 0800 	movpl.w	r8, #0
 800deb0:	f1ba 0f00 	cmp.w	sl, #0
 800deb4:	db3b      	blt.n	800df2e <_dtoa_r+0x23e>
 800deb6:	9b04      	ldr	r3, [sp, #16]
 800deb8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800debc:	4453      	add	r3, sl
 800debe:	9304      	str	r3, [sp, #16]
 800dec0:	2300      	movs	r3, #0
 800dec2:	9306      	str	r3, [sp, #24]
 800dec4:	9b05      	ldr	r3, [sp, #20]
 800dec6:	2b09      	cmp	r3, #9
 800dec8:	d869      	bhi.n	800df9e <_dtoa_r+0x2ae>
 800deca:	2b05      	cmp	r3, #5
 800decc:	bfc4      	itt	gt
 800dece:	3b04      	subgt	r3, #4
 800ded0:	9305      	strgt	r3, [sp, #20]
 800ded2:	9b05      	ldr	r3, [sp, #20]
 800ded4:	f1a3 0302 	sub.w	r3, r3, #2
 800ded8:	bfcc      	ite	gt
 800deda:	2500      	movgt	r5, #0
 800dedc:	2501      	movle	r5, #1
 800dede:	2b03      	cmp	r3, #3
 800dee0:	d869      	bhi.n	800dfb6 <_dtoa_r+0x2c6>
 800dee2:	e8df f003 	tbb	[pc, r3]
 800dee6:	4e2c      	.short	0x4e2c
 800dee8:	5a4c      	.short	0x5a4c
 800deea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800deee:	441d      	add	r5, r3
 800def0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800def4:	2b20      	cmp	r3, #32
 800def6:	bfc1      	itttt	gt
 800def8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800defc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800df00:	fa09 f303 	lslgt.w	r3, r9, r3
 800df04:	fa26 f000 	lsrgt.w	r0, r6, r0
 800df08:	bfda      	itte	le
 800df0a:	f1c3 0320 	rsble	r3, r3, #32
 800df0e:	fa06 f003 	lslle.w	r0, r6, r3
 800df12:	4318      	orrgt	r0, r3
 800df14:	f7f2 fb06 	bl	8000524 <__aeabi_ui2d>
 800df18:	2301      	movs	r3, #1
 800df1a:	4606      	mov	r6, r0
 800df1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800df20:	3d01      	subs	r5, #1
 800df22:	9310      	str	r3, [sp, #64]	; 0x40
 800df24:	e771      	b.n	800de0a <_dtoa_r+0x11a>
 800df26:	2301      	movs	r3, #1
 800df28:	e7b6      	b.n	800de98 <_dtoa_r+0x1a8>
 800df2a:	900e      	str	r0, [sp, #56]	; 0x38
 800df2c:	e7b5      	b.n	800de9a <_dtoa_r+0x1aa>
 800df2e:	f1ca 0300 	rsb	r3, sl, #0
 800df32:	9306      	str	r3, [sp, #24]
 800df34:	2300      	movs	r3, #0
 800df36:	eba8 080a 	sub.w	r8, r8, sl
 800df3a:	930d      	str	r3, [sp, #52]	; 0x34
 800df3c:	e7c2      	b.n	800dec4 <_dtoa_r+0x1d4>
 800df3e:	2300      	movs	r3, #0
 800df40:	9308      	str	r3, [sp, #32]
 800df42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df44:	2b00      	cmp	r3, #0
 800df46:	dc39      	bgt.n	800dfbc <_dtoa_r+0x2cc>
 800df48:	f04f 0901 	mov.w	r9, #1
 800df4c:	f8cd 9004 	str.w	r9, [sp, #4]
 800df50:	464b      	mov	r3, r9
 800df52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800df56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800df58:	2200      	movs	r2, #0
 800df5a:	6042      	str	r2, [r0, #4]
 800df5c:	2204      	movs	r2, #4
 800df5e:	f102 0614 	add.w	r6, r2, #20
 800df62:	429e      	cmp	r6, r3
 800df64:	6841      	ldr	r1, [r0, #4]
 800df66:	d92f      	bls.n	800dfc8 <_dtoa_r+0x2d8>
 800df68:	4620      	mov	r0, r4
 800df6a:	f001 f985 	bl	800f278 <_Balloc>
 800df6e:	9000      	str	r0, [sp, #0]
 800df70:	2800      	cmp	r0, #0
 800df72:	d14b      	bne.n	800e00c <_dtoa_r+0x31c>
 800df74:	4b24      	ldr	r3, [pc, #144]	; (800e008 <_dtoa_r+0x318>)
 800df76:	4602      	mov	r2, r0
 800df78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800df7c:	e6d1      	b.n	800dd22 <_dtoa_r+0x32>
 800df7e:	2301      	movs	r3, #1
 800df80:	e7de      	b.n	800df40 <_dtoa_r+0x250>
 800df82:	2300      	movs	r3, #0
 800df84:	9308      	str	r3, [sp, #32]
 800df86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df88:	eb0a 0903 	add.w	r9, sl, r3
 800df8c:	f109 0301 	add.w	r3, r9, #1
 800df90:	2b01      	cmp	r3, #1
 800df92:	9301      	str	r3, [sp, #4]
 800df94:	bfb8      	it	lt
 800df96:	2301      	movlt	r3, #1
 800df98:	e7dd      	b.n	800df56 <_dtoa_r+0x266>
 800df9a:	2301      	movs	r3, #1
 800df9c:	e7f2      	b.n	800df84 <_dtoa_r+0x294>
 800df9e:	2501      	movs	r5, #1
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	9305      	str	r3, [sp, #20]
 800dfa4:	9508      	str	r5, [sp, #32]
 800dfa6:	f04f 39ff 	mov.w	r9, #4294967295
 800dfaa:	2200      	movs	r2, #0
 800dfac:	f8cd 9004 	str.w	r9, [sp, #4]
 800dfb0:	2312      	movs	r3, #18
 800dfb2:	9209      	str	r2, [sp, #36]	; 0x24
 800dfb4:	e7cf      	b.n	800df56 <_dtoa_r+0x266>
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	9308      	str	r3, [sp, #32]
 800dfba:	e7f4      	b.n	800dfa6 <_dtoa_r+0x2b6>
 800dfbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dfc0:	f8cd 9004 	str.w	r9, [sp, #4]
 800dfc4:	464b      	mov	r3, r9
 800dfc6:	e7c6      	b.n	800df56 <_dtoa_r+0x266>
 800dfc8:	3101      	adds	r1, #1
 800dfca:	6041      	str	r1, [r0, #4]
 800dfcc:	0052      	lsls	r2, r2, #1
 800dfce:	e7c6      	b.n	800df5e <_dtoa_r+0x26e>
 800dfd0:	636f4361 	.word	0x636f4361
 800dfd4:	3fd287a7 	.word	0x3fd287a7
 800dfd8:	8b60c8b3 	.word	0x8b60c8b3
 800dfdc:	3fc68a28 	.word	0x3fc68a28
 800dfe0:	509f79fb 	.word	0x509f79fb
 800dfe4:	3fd34413 	.word	0x3fd34413
 800dfe8:	080111ae 	.word	0x080111ae
 800dfec:	080111c5 	.word	0x080111c5
 800dff0:	7ff00000 	.word	0x7ff00000
 800dff4:	080111aa 	.word	0x080111aa
 800dff8:	080111a1 	.word	0x080111a1
 800dffc:	08011025 	.word	0x08011025
 800e000:	3ff80000 	.word	0x3ff80000
 800e004:	08011340 	.word	0x08011340
 800e008:	08011224 	.word	0x08011224
 800e00c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e00e:	9a00      	ldr	r2, [sp, #0]
 800e010:	601a      	str	r2, [r3, #0]
 800e012:	9b01      	ldr	r3, [sp, #4]
 800e014:	2b0e      	cmp	r3, #14
 800e016:	f200 80ad 	bhi.w	800e174 <_dtoa_r+0x484>
 800e01a:	2d00      	cmp	r5, #0
 800e01c:	f000 80aa 	beq.w	800e174 <_dtoa_r+0x484>
 800e020:	f1ba 0f00 	cmp.w	sl, #0
 800e024:	dd36      	ble.n	800e094 <_dtoa_r+0x3a4>
 800e026:	4ac3      	ldr	r2, [pc, #780]	; (800e334 <_dtoa_r+0x644>)
 800e028:	f00a 030f 	and.w	r3, sl, #15
 800e02c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e030:	ed93 7b00 	vldr	d7, [r3]
 800e034:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800e038:	ea4f 172a 	mov.w	r7, sl, asr #4
 800e03c:	eeb0 8a47 	vmov.f32	s16, s14
 800e040:	eef0 8a67 	vmov.f32	s17, s15
 800e044:	d016      	beq.n	800e074 <_dtoa_r+0x384>
 800e046:	4bbc      	ldr	r3, [pc, #752]	; (800e338 <_dtoa_r+0x648>)
 800e048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e04c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e050:	f7f2 fc0c 	bl	800086c <__aeabi_ddiv>
 800e054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e058:	f007 070f 	and.w	r7, r7, #15
 800e05c:	2503      	movs	r5, #3
 800e05e:	4eb6      	ldr	r6, [pc, #728]	; (800e338 <_dtoa_r+0x648>)
 800e060:	b957      	cbnz	r7, 800e078 <_dtoa_r+0x388>
 800e062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e066:	ec53 2b18 	vmov	r2, r3, d8
 800e06a:	f7f2 fbff 	bl	800086c <__aeabi_ddiv>
 800e06e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e072:	e029      	b.n	800e0c8 <_dtoa_r+0x3d8>
 800e074:	2502      	movs	r5, #2
 800e076:	e7f2      	b.n	800e05e <_dtoa_r+0x36e>
 800e078:	07f9      	lsls	r1, r7, #31
 800e07a:	d508      	bpl.n	800e08e <_dtoa_r+0x39e>
 800e07c:	ec51 0b18 	vmov	r0, r1, d8
 800e080:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e084:	f7f2 fac8 	bl	8000618 <__aeabi_dmul>
 800e088:	ec41 0b18 	vmov	d8, r0, r1
 800e08c:	3501      	adds	r5, #1
 800e08e:	107f      	asrs	r7, r7, #1
 800e090:	3608      	adds	r6, #8
 800e092:	e7e5      	b.n	800e060 <_dtoa_r+0x370>
 800e094:	f000 80a6 	beq.w	800e1e4 <_dtoa_r+0x4f4>
 800e098:	f1ca 0600 	rsb	r6, sl, #0
 800e09c:	4ba5      	ldr	r3, [pc, #660]	; (800e334 <_dtoa_r+0x644>)
 800e09e:	4fa6      	ldr	r7, [pc, #664]	; (800e338 <_dtoa_r+0x648>)
 800e0a0:	f006 020f 	and.w	r2, r6, #15
 800e0a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e0b0:	f7f2 fab2 	bl	8000618 <__aeabi_dmul>
 800e0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0b8:	1136      	asrs	r6, r6, #4
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	2502      	movs	r5, #2
 800e0be:	2e00      	cmp	r6, #0
 800e0c0:	f040 8085 	bne.w	800e1ce <_dtoa_r+0x4de>
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d1d2      	bne.n	800e06e <_dtoa_r+0x37e>
 800e0c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	f000 808c 	beq.w	800e1e8 <_dtoa_r+0x4f8>
 800e0d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e0d4:	4b99      	ldr	r3, [pc, #612]	; (800e33c <_dtoa_r+0x64c>)
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	4630      	mov	r0, r6
 800e0da:	4639      	mov	r1, r7
 800e0dc:	f7f2 fd0e 	bl	8000afc <__aeabi_dcmplt>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	f000 8081 	beq.w	800e1e8 <_dtoa_r+0x4f8>
 800e0e6:	9b01      	ldr	r3, [sp, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d07d      	beq.n	800e1e8 <_dtoa_r+0x4f8>
 800e0ec:	f1b9 0f00 	cmp.w	r9, #0
 800e0f0:	dd3c      	ble.n	800e16c <_dtoa_r+0x47c>
 800e0f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e0f6:	9307      	str	r3, [sp, #28]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	4b91      	ldr	r3, [pc, #580]	; (800e340 <_dtoa_r+0x650>)
 800e0fc:	4630      	mov	r0, r6
 800e0fe:	4639      	mov	r1, r7
 800e100:	f7f2 fa8a 	bl	8000618 <__aeabi_dmul>
 800e104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e108:	3501      	adds	r5, #1
 800e10a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800e10e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e112:	4628      	mov	r0, r5
 800e114:	f7f2 fa16 	bl	8000544 <__aeabi_i2d>
 800e118:	4632      	mov	r2, r6
 800e11a:	463b      	mov	r3, r7
 800e11c:	f7f2 fa7c 	bl	8000618 <__aeabi_dmul>
 800e120:	4b88      	ldr	r3, [pc, #544]	; (800e344 <_dtoa_r+0x654>)
 800e122:	2200      	movs	r2, #0
 800e124:	f7f2 f8c2 	bl	80002ac <__adddf3>
 800e128:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e12c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e130:	9303      	str	r3, [sp, #12]
 800e132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e134:	2b00      	cmp	r3, #0
 800e136:	d15c      	bne.n	800e1f2 <_dtoa_r+0x502>
 800e138:	4b83      	ldr	r3, [pc, #524]	; (800e348 <_dtoa_r+0x658>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	4630      	mov	r0, r6
 800e13e:	4639      	mov	r1, r7
 800e140:	f7f2 f8b2 	bl	80002a8 <__aeabi_dsub>
 800e144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e148:	4606      	mov	r6, r0
 800e14a:	460f      	mov	r7, r1
 800e14c:	f7f2 fcf4 	bl	8000b38 <__aeabi_dcmpgt>
 800e150:	2800      	cmp	r0, #0
 800e152:	f040 8296 	bne.w	800e682 <_dtoa_r+0x992>
 800e156:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e15a:	4630      	mov	r0, r6
 800e15c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e160:	4639      	mov	r1, r7
 800e162:	f7f2 fccb 	bl	8000afc <__aeabi_dcmplt>
 800e166:	2800      	cmp	r0, #0
 800e168:	f040 8288 	bne.w	800e67c <_dtoa_r+0x98c>
 800e16c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e170:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e176:	2b00      	cmp	r3, #0
 800e178:	f2c0 8158 	blt.w	800e42c <_dtoa_r+0x73c>
 800e17c:	f1ba 0f0e 	cmp.w	sl, #14
 800e180:	f300 8154 	bgt.w	800e42c <_dtoa_r+0x73c>
 800e184:	4b6b      	ldr	r3, [pc, #428]	; (800e334 <_dtoa_r+0x644>)
 800e186:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e18a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e190:	2b00      	cmp	r3, #0
 800e192:	f280 80e3 	bge.w	800e35c <_dtoa_r+0x66c>
 800e196:	9b01      	ldr	r3, [sp, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	f300 80df 	bgt.w	800e35c <_dtoa_r+0x66c>
 800e19e:	f040 826d 	bne.w	800e67c <_dtoa_r+0x98c>
 800e1a2:	4b69      	ldr	r3, [pc, #420]	; (800e348 <_dtoa_r+0x658>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	4640      	mov	r0, r8
 800e1a8:	4649      	mov	r1, r9
 800e1aa:	f7f2 fa35 	bl	8000618 <__aeabi_dmul>
 800e1ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1b2:	f7f2 fcb7 	bl	8000b24 <__aeabi_dcmpge>
 800e1b6:	9e01      	ldr	r6, [sp, #4]
 800e1b8:	4637      	mov	r7, r6
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	f040 8243 	bne.w	800e646 <_dtoa_r+0x956>
 800e1c0:	9d00      	ldr	r5, [sp, #0]
 800e1c2:	2331      	movs	r3, #49	; 0x31
 800e1c4:	f805 3b01 	strb.w	r3, [r5], #1
 800e1c8:	f10a 0a01 	add.w	sl, sl, #1
 800e1cc:	e23f      	b.n	800e64e <_dtoa_r+0x95e>
 800e1ce:	07f2      	lsls	r2, r6, #31
 800e1d0:	d505      	bpl.n	800e1de <_dtoa_r+0x4ee>
 800e1d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1d6:	f7f2 fa1f 	bl	8000618 <__aeabi_dmul>
 800e1da:	3501      	adds	r5, #1
 800e1dc:	2301      	movs	r3, #1
 800e1de:	1076      	asrs	r6, r6, #1
 800e1e0:	3708      	adds	r7, #8
 800e1e2:	e76c      	b.n	800e0be <_dtoa_r+0x3ce>
 800e1e4:	2502      	movs	r5, #2
 800e1e6:	e76f      	b.n	800e0c8 <_dtoa_r+0x3d8>
 800e1e8:	9b01      	ldr	r3, [sp, #4]
 800e1ea:	f8cd a01c 	str.w	sl, [sp, #28]
 800e1ee:	930c      	str	r3, [sp, #48]	; 0x30
 800e1f0:	e78d      	b.n	800e10e <_dtoa_r+0x41e>
 800e1f2:	9900      	ldr	r1, [sp, #0]
 800e1f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e1f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1f8:	4b4e      	ldr	r3, [pc, #312]	; (800e334 <_dtoa_r+0x644>)
 800e1fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1fe:	4401      	add	r1, r0
 800e200:	9102      	str	r1, [sp, #8]
 800e202:	9908      	ldr	r1, [sp, #32]
 800e204:	eeb0 8a47 	vmov.f32	s16, s14
 800e208:	eef0 8a67 	vmov.f32	s17, s15
 800e20c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e210:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e214:	2900      	cmp	r1, #0
 800e216:	d045      	beq.n	800e2a4 <_dtoa_r+0x5b4>
 800e218:	494c      	ldr	r1, [pc, #304]	; (800e34c <_dtoa_r+0x65c>)
 800e21a:	2000      	movs	r0, #0
 800e21c:	f7f2 fb26 	bl	800086c <__aeabi_ddiv>
 800e220:	ec53 2b18 	vmov	r2, r3, d8
 800e224:	f7f2 f840 	bl	80002a8 <__aeabi_dsub>
 800e228:	9d00      	ldr	r5, [sp, #0]
 800e22a:	ec41 0b18 	vmov	d8, r0, r1
 800e22e:	4639      	mov	r1, r7
 800e230:	4630      	mov	r0, r6
 800e232:	f7f2 fca1 	bl	8000b78 <__aeabi_d2iz>
 800e236:	900c      	str	r0, [sp, #48]	; 0x30
 800e238:	f7f2 f984 	bl	8000544 <__aeabi_i2d>
 800e23c:	4602      	mov	r2, r0
 800e23e:	460b      	mov	r3, r1
 800e240:	4630      	mov	r0, r6
 800e242:	4639      	mov	r1, r7
 800e244:	f7f2 f830 	bl	80002a8 <__aeabi_dsub>
 800e248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e24a:	3330      	adds	r3, #48	; 0x30
 800e24c:	f805 3b01 	strb.w	r3, [r5], #1
 800e250:	ec53 2b18 	vmov	r2, r3, d8
 800e254:	4606      	mov	r6, r0
 800e256:	460f      	mov	r7, r1
 800e258:	f7f2 fc50 	bl	8000afc <__aeabi_dcmplt>
 800e25c:	2800      	cmp	r0, #0
 800e25e:	d165      	bne.n	800e32c <_dtoa_r+0x63c>
 800e260:	4632      	mov	r2, r6
 800e262:	463b      	mov	r3, r7
 800e264:	4935      	ldr	r1, [pc, #212]	; (800e33c <_dtoa_r+0x64c>)
 800e266:	2000      	movs	r0, #0
 800e268:	f7f2 f81e 	bl	80002a8 <__aeabi_dsub>
 800e26c:	ec53 2b18 	vmov	r2, r3, d8
 800e270:	f7f2 fc44 	bl	8000afc <__aeabi_dcmplt>
 800e274:	2800      	cmp	r0, #0
 800e276:	f040 80b9 	bne.w	800e3ec <_dtoa_r+0x6fc>
 800e27a:	9b02      	ldr	r3, [sp, #8]
 800e27c:	429d      	cmp	r5, r3
 800e27e:	f43f af75 	beq.w	800e16c <_dtoa_r+0x47c>
 800e282:	4b2f      	ldr	r3, [pc, #188]	; (800e340 <_dtoa_r+0x650>)
 800e284:	ec51 0b18 	vmov	r0, r1, d8
 800e288:	2200      	movs	r2, #0
 800e28a:	f7f2 f9c5 	bl	8000618 <__aeabi_dmul>
 800e28e:	4b2c      	ldr	r3, [pc, #176]	; (800e340 <_dtoa_r+0x650>)
 800e290:	ec41 0b18 	vmov	d8, r0, r1
 800e294:	2200      	movs	r2, #0
 800e296:	4630      	mov	r0, r6
 800e298:	4639      	mov	r1, r7
 800e29a:	f7f2 f9bd 	bl	8000618 <__aeabi_dmul>
 800e29e:	4606      	mov	r6, r0
 800e2a0:	460f      	mov	r7, r1
 800e2a2:	e7c4      	b.n	800e22e <_dtoa_r+0x53e>
 800e2a4:	ec51 0b17 	vmov	r0, r1, d7
 800e2a8:	f7f2 f9b6 	bl	8000618 <__aeabi_dmul>
 800e2ac:	9b02      	ldr	r3, [sp, #8]
 800e2ae:	9d00      	ldr	r5, [sp, #0]
 800e2b0:	930c      	str	r3, [sp, #48]	; 0x30
 800e2b2:	ec41 0b18 	vmov	d8, r0, r1
 800e2b6:	4639      	mov	r1, r7
 800e2b8:	4630      	mov	r0, r6
 800e2ba:	f7f2 fc5d 	bl	8000b78 <__aeabi_d2iz>
 800e2be:	9011      	str	r0, [sp, #68]	; 0x44
 800e2c0:	f7f2 f940 	bl	8000544 <__aeabi_i2d>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	4630      	mov	r0, r6
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	f7f1 ffec 	bl	80002a8 <__aeabi_dsub>
 800e2d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2d2:	3330      	adds	r3, #48	; 0x30
 800e2d4:	f805 3b01 	strb.w	r3, [r5], #1
 800e2d8:	9b02      	ldr	r3, [sp, #8]
 800e2da:	429d      	cmp	r5, r3
 800e2dc:	4606      	mov	r6, r0
 800e2de:	460f      	mov	r7, r1
 800e2e0:	f04f 0200 	mov.w	r2, #0
 800e2e4:	d134      	bne.n	800e350 <_dtoa_r+0x660>
 800e2e6:	4b19      	ldr	r3, [pc, #100]	; (800e34c <_dtoa_r+0x65c>)
 800e2e8:	ec51 0b18 	vmov	r0, r1, d8
 800e2ec:	f7f1 ffde 	bl	80002ac <__adddf3>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	4630      	mov	r0, r6
 800e2f6:	4639      	mov	r1, r7
 800e2f8:	f7f2 fc1e 	bl	8000b38 <__aeabi_dcmpgt>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	d175      	bne.n	800e3ec <_dtoa_r+0x6fc>
 800e300:	ec53 2b18 	vmov	r2, r3, d8
 800e304:	4911      	ldr	r1, [pc, #68]	; (800e34c <_dtoa_r+0x65c>)
 800e306:	2000      	movs	r0, #0
 800e308:	f7f1 ffce 	bl	80002a8 <__aeabi_dsub>
 800e30c:	4602      	mov	r2, r0
 800e30e:	460b      	mov	r3, r1
 800e310:	4630      	mov	r0, r6
 800e312:	4639      	mov	r1, r7
 800e314:	f7f2 fbf2 	bl	8000afc <__aeabi_dcmplt>
 800e318:	2800      	cmp	r0, #0
 800e31a:	f43f af27 	beq.w	800e16c <_dtoa_r+0x47c>
 800e31e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e320:	1e6b      	subs	r3, r5, #1
 800e322:	930c      	str	r3, [sp, #48]	; 0x30
 800e324:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e328:	2b30      	cmp	r3, #48	; 0x30
 800e32a:	d0f8      	beq.n	800e31e <_dtoa_r+0x62e>
 800e32c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e330:	e04a      	b.n	800e3c8 <_dtoa_r+0x6d8>
 800e332:	bf00      	nop
 800e334:	08011340 	.word	0x08011340
 800e338:	08011318 	.word	0x08011318
 800e33c:	3ff00000 	.word	0x3ff00000
 800e340:	40240000 	.word	0x40240000
 800e344:	401c0000 	.word	0x401c0000
 800e348:	40140000 	.word	0x40140000
 800e34c:	3fe00000 	.word	0x3fe00000
 800e350:	4baf      	ldr	r3, [pc, #700]	; (800e610 <_dtoa_r+0x920>)
 800e352:	f7f2 f961 	bl	8000618 <__aeabi_dmul>
 800e356:	4606      	mov	r6, r0
 800e358:	460f      	mov	r7, r1
 800e35a:	e7ac      	b.n	800e2b6 <_dtoa_r+0x5c6>
 800e35c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e360:	9d00      	ldr	r5, [sp, #0]
 800e362:	4642      	mov	r2, r8
 800e364:	464b      	mov	r3, r9
 800e366:	4630      	mov	r0, r6
 800e368:	4639      	mov	r1, r7
 800e36a:	f7f2 fa7f 	bl	800086c <__aeabi_ddiv>
 800e36e:	f7f2 fc03 	bl	8000b78 <__aeabi_d2iz>
 800e372:	9002      	str	r0, [sp, #8]
 800e374:	f7f2 f8e6 	bl	8000544 <__aeabi_i2d>
 800e378:	4642      	mov	r2, r8
 800e37a:	464b      	mov	r3, r9
 800e37c:	f7f2 f94c 	bl	8000618 <__aeabi_dmul>
 800e380:	4602      	mov	r2, r0
 800e382:	460b      	mov	r3, r1
 800e384:	4630      	mov	r0, r6
 800e386:	4639      	mov	r1, r7
 800e388:	f7f1 ff8e 	bl	80002a8 <__aeabi_dsub>
 800e38c:	9e02      	ldr	r6, [sp, #8]
 800e38e:	9f01      	ldr	r7, [sp, #4]
 800e390:	3630      	adds	r6, #48	; 0x30
 800e392:	f805 6b01 	strb.w	r6, [r5], #1
 800e396:	9e00      	ldr	r6, [sp, #0]
 800e398:	1bae      	subs	r6, r5, r6
 800e39a:	42b7      	cmp	r7, r6
 800e39c:	4602      	mov	r2, r0
 800e39e:	460b      	mov	r3, r1
 800e3a0:	d137      	bne.n	800e412 <_dtoa_r+0x722>
 800e3a2:	f7f1 ff83 	bl	80002ac <__adddf3>
 800e3a6:	4642      	mov	r2, r8
 800e3a8:	464b      	mov	r3, r9
 800e3aa:	4606      	mov	r6, r0
 800e3ac:	460f      	mov	r7, r1
 800e3ae:	f7f2 fbc3 	bl	8000b38 <__aeabi_dcmpgt>
 800e3b2:	b9c8      	cbnz	r0, 800e3e8 <_dtoa_r+0x6f8>
 800e3b4:	4642      	mov	r2, r8
 800e3b6:	464b      	mov	r3, r9
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	4639      	mov	r1, r7
 800e3bc:	f7f2 fb94 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3c0:	b110      	cbz	r0, 800e3c8 <_dtoa_r+0x6d8>
 800e3c2:	9b02      	ldr	r3, [sp, #8]
 800e3c4:	07d9      	lsls	r1, r3, #31
 800e3c6:	d40f      	bmi.n	800e3e8 <_dtoa_r+0x6f8>
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	4659      	mov	r1, fp
 800e3cc:	f000 ff94 	bl	800f2f8 <_Bfree>
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	702b      	strb	r3, [r5, #0]
 800e3d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3d6:	f10a 0001 	add.w	r0, sl, #1
 800e3da:	6018      	str	r0, [r3, #0]
 800e3dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	f43f acd8 	beq.w	800dd94 <_dtoa_r+0xa4>
 800e3e4:	601d      	str	r5, [r3, #0]
 800e3e6:	e4d5      	b.n	800dd94 <_dtoa_r+0xa4>
 800e3e8:	f8cd a01c 	str.w	sl, [sp, #28]
 800e3ec:	462b      	mov	r3, r5
 800e3ee:	461d      	mov	r5, r3
 800e3f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3f4:	2a39      	cmp	r2, #57	; 0x39
 800e3f6:	d108      	bne.n	800e40a <_dtoa_r+0x71a>
 800e3f8:	9a00      	ldr	r2, [sp, #0]
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d1f7      	bne.n	800e3ee <_dtoa_r+0x6fe>
 800e3fe:	9a07      	ldr	r2, [sp, #28]
 800e400:	9900      	ldr	r1, [sp, #0]
 800e402:	3201      	adds	r2, #1
 800e404:	9207      	str	r2, [sp, #28]
 800e406:	2230      	movs	r2, #48	; 0x30
 800e408:	700a      	strb	r2, [r1, #0]
 800e40a:	781a      	ldrb	r2, [r3, #0]
 800e40c:	3201      	adds	r2, #1
 800e40e:	701a      	strb	r2, [r3, #0]
 800e410:	e78c      	b.n	800e32c <_dtoa_r+0x63c>
 800e412:	4b7f      	ldr	r3, [pc, #508]	; (800e610 <_dtoa_r+0x920>)
 800e414:	2200      	movs	r2, #0
 800e416:	f7f2 f8ff 	bl	8000618 <__aeabi_dmul>
 800e41a:	2200      	movs	r2, #0
 800e41c:	2300      	movs	r3, #0
 800e41e:	4606      	mov	r6, r0
 800e420:	460f      	mov	r7, r1
 800e422:	f7f2 fb61 	bl	8000ae8 <__aeabi_dcmpeq>
 800e426:	2800      	cmp	r0, #0
 800e428:	d09b      	beq.n	800e362 <_dtoa_r+0x672>
 800e42a:	e7cd      	b.n	800e3c8 <_dtoa_r+0x6d8>
 800e42c:	9a08      	ldr	r2, [sp, #32]
 800e42e:	2a00      	cmp	r2, #0
 800e430:	f000 80c4 	beq.w	800e5bc <_dtoa_r+0x8cc>
 800e434:	9a05      	ldr	r2, [sp, #20]
 800e436:	2a01      	cmp	r2, #1
 800e438:	f300 80a8 	bgt.w	800e58c <_dtoa_r+0x89c>
 800e43c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e43e:	2a00      	cmp	r2, #0
 800e440:	f000 80a0 	beq.w	800e584 <_dtoa_r+0x894>
 800e444:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e448:	9e06      	ldr	r6, [sp, #24]
 800e44a:	4645      	mov	r5, r8
 800e44c:	9a04      	ldr	r2, [sp, #16]
 800e44e:	2101      	movs	r1, #1
 800e450:	441a      	add	r2, r3
 800e452:	4620      	mov	r0, r4
 800e454:	4498      	add	r8, r3
 800e456:	9204      	str	r2, [sp, #16]
 800e458:	f001 f854 	bl	800f504 <__i2b>
 800e45c:	4607      	mov	r7, r0
 800e45e:	2d00      	cmp	r5, #0
 800e460:	dd0b      	ble.n	800e47a <_dtoa_r+0x78a>
 800e462:	9b04      	ldr	r3, [sp, #16]
 800e464:	2b00      	cmp	r3, #0
 800e466:	dd08      	ble.n	800e47a <_dtoa_r+0x78a>
 800e468:	42ab      	cmp	r3, r5
 800e46a:	9a04      	ldr	r2, [sp, #16]
 800e46c:	bfa8      	it	ge
 800e46e:	462b      	movge	r3, r5
 800e470:	eba8 0803 	sub.w	r8, r8, r3
 800e474:	1aed      	subs	r5, r5, r3
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	9304      	str	r3, [sp, #16]
 800e47a:	9b06      	ldr	r3, [sp, #24]
 800e47c:	b1fb      	cbz	r3, 800e4be <_dtoa_r+0x7ce>
 800e47e:	9b08      	ldr	r3, [sp, #32]
 800e480:	2b00      	cmp	r3, #0
 800e482:	f000 809f 	beq.w	800e5c4 <_dtoa_r+0x8d4>
 800e486:	2e00      	cmp	r6, #0
 800e488:	dd11      	ble.n	800e4ae <_dtoa_r+0x7be>
 800e48a:	4639      	mov	r1, r7
 800e48c:	4632      	mov	r2, r6
 800e48e:	4620      	mov	r0, r4
 800e490:	f001 f8f4 	bl	800f67c <__pow5mult>
 800e494:	465a      	mov	r2, fp
 800e496:	4601      	mov	r1, r0
 800e498:	4607      	mov	r7, r0
 800e49a:	4620      	mov	r0, r4
 800e49c:	f001 f848 	bl	800f530 <__multiply>
 800e4a0:	4659      	mov	r1, fp
 800e4a2:	9007      	str	r0, [sp, #28]
 800e4a4:	4620      	mov	r0, r4
 800e4a6:	f000 ff27 	bl	800f2f8 <_Bfree>
 800e4aa:	9b07      	ldr	r3, [sp, #28]
 800e4ac:	469b      	mov	fp, r3
 800e4ae:	9b06      	ldr	r3, [sp, #24]
 800e4b0:	1b9a      	subs	r2, r3, r6
 800e4b2:	d004      	beq.n	800e4be <_dtoa_r+0x7ce>
 800e4b4:	4659      	mov	r1, fp
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	f001 f8e0 	bl	800f67c <__pow5mult>
 800e4bc:	4683      	mov	fp, r0
 800e4be:	2101      	movs	r1, #1
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	f001 f81f 	bl	800f504 <__i2b>
 800e4c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	4606      	mov	r6, r0
 800e4cc:	dd7c      	ble.n	800e5c8 <_dtoa_r+0x8d8>
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	4601      	mov	r1, r0
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	f001 f8d2 	bl	800f67c <__pow5mult>
 800e4d8:	9b05      	ldr	r3, [sp, #20]
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	4606      	mov	r6, r0
 800e4de:	dd76      	ble.n	800e5ce <_dtoa_r+0x8de>
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	9306      	str	r3, [sp, #24]
 800e4e4:	6933      	ldr	r3, [r6, #16]
 800e4e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e4ea:	6918      	ldr	r0, [r3, #16]
 800e4ec:	f000 ffba 	bl	800f464 <__hi0bits>
 800e4f0:	f1c0 0020 	rsb	r0, r0, #32
 800e4f4:	9b04      	ldr	r3, [sp, #16]
 800e4f6:	4418      	add	r0, r3
 800e4f8:	f010 001f 	ands.w	r0, r0, #31
 800e4fc:	f000 8086 	beq.w	800e60c <_dtoa_r+0x91c>
 800e500:	f1c0 0320 	rsb	r3, r0, #32
 800e504:	2b04      	cmp	r3, #4
 800e506:	dd7f      	ble.n	800e608 <_dtoa_r+0x918>
 800e508:	f1c0 001c 	rsb	r0, r0, #28
 800e50c:	9b04      	ldr	r3, [sp, #16]
 800e50e:	4403      	add	r3, r0
 800e510:	4480      	add	r8, r0
 800e512:	4405      	add	r5, r0
 800e514:	9304      	str	r3, [sp, #16]
 800e516:	f1b8 0f00 	cmp.w	r8, #0
 800e51a:	dd05      	ble.n	800e528 <_dtoa_r+0x838>
 800e51c:	4659      	mov	r1, fp
 800e51e:	4642      	mov	r2, r8
 800e520:	4620      	mov	r0, r4
 800e522:	f001 f905 	bl	800f730 <__lshift>
 800e526:	4683      	mov	fp, r0
 800e528:	9b04      	ldr	r3, [sp, #16]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	dd05      	ble.n	800e53a <_dtoa_r+0x84a>
 800e52e:	4631      	mov	r1, r6
 800e530:	461a      	mov	r2, r3
 800e532:	4620      	mov	r0, r4
 800e534:	f001 f8fc 	bl	800f730 <__lshift>
 800e538:	4606      	mov	r6, r0
 800e53a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d069      	beq.n	800e614 <_dtoa_r+0x924>
 800e540:	4631      	mov	r1, r6
 800e542:	4658      	mov	r0, fp
 800e544:	f001 f960 	bl	800f808 <__mcmp>
 800e548:	2800      	cmp	r0, #0
 800e54a:	da63      	bge.n	800e614 <_dtoa_r+0x924>
 800e54c:	2300      	movs	r3, #0
 800e54e:	4659      	mov	r1, fp
 800e550:	220a      	movs	r2, #10
 800e552:	4620      	mov	r0, r4
 800e554:	f000 fef2 	bl	800f33c <__multadd>
 800e558:	9b08      	ldr	r3, [sp, #32]
 800e55a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e55e:	4683      	mov	fp, r0
 800e560:	2b00      	cmp	r3, #0
 800e562:	f000 818f 	beq.w	800e884 <_dtoa_r+0xb94>
 800e566:	4639      	mov	r1, r7
 800e568:	2300      	movs	r3, #0
 800e56a:	220a      	movs	r2, #10
 800e56c:	4620      	mov	r0, r4
 800e56e:	f000 fee5 	bl	800f33c <__multadd>
 800e572:	f1b9 0f00 	cmp.w	r9, #0
 800e576:	4607      	mov	r7, r0
 800e578:	f300 808e 	bgt.w	800e698 <_dtoa_r+0x9a8>
 800e57c:	9b05      	ldr	r3, [sp, #20]
 800e57e:	2b02      	cmp	r3, #2
 800e580:	dc50      	bgt.n	800e624 <_dtoa_r+0x934>
 800e582:	e089      	b.n	800e698 <_dtoa_r+0x9a8>
 800e584:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e58a:	e75d      	b.n	800e448 <_dtoa_r+0x758>
 800e58c:	9b01      	ldr	r3, [sp, #4]
 800e58e:	1e5e      	subs	r6, r3, #1
 800e590:	9b06      	ldr	r3, [sp, #24]
 800e592:	42b3      	cmp	r3, r6
 800e594:	bfbf      	itttt	lt
 800e596:	9b06      	ldrlt	r3, [sp, #24]
 800e598:	9606      	strlt	r6, [sp, #24]
 800e59a:	1af2      	sublt	r2, r6, r3
 800e59c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e59e:	bfb6      	itet	lt
 800e5a0:	189b      	addlt	r3, r3, r2
 800e5a2:	1b9e      	subge	r6, r3, r6
 800e5a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e5a6:	9b01      	ldr	r3, [sp, #4]
 800e5a8:	bfb8      	it	lt
 800e5aa:	2600      	movlt	r6, #0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	bfb5      	itete	lt
 800e5b0:	eba8 0503 	sublt.w	r5, r8, r3
 800e5b4:	9b01      	ldrge	r3, [sp, #4]
 800e5b6:	2300      	movlt	r3, #0
 800e5b8:	4645      	movge	r5, r8
 800e5ba:	e747      	b.n	800e44c <_dtoa_r+0x75c>
 800e5bc:	9e06      	ldr	r6, [sp, #24]
 800e5be:	9f08      	ldr	r7, [sp, #32]
 800e5c0:	4645      	mov	r5, r8
 800e5c2:	e74c      	b.n	800e45e <_dtoa_r+0x76e>
 800e5c4:	9a06      	ldr	r2, [sp, #24]
 800e5c6:	e775      	b.n	800e4b4 <_dtoa_r+0x7c4>
 800e5c8:	9b05      	ldr	r3, [sp, #20]
 800e5ca:	2b01      	cmp	r3, #1
 800e5cc:	dc18      	bgt.n	800e600 <_dtoa_r+0x910>
 800e5ce:	9b02      	ldr	r3, [sp, #8]
 800e5d0:	b9b3      	cbnz	r3, 800e600 <_dtoa_r+0x910>
 800e5d2:	9b03      	ldr	r3, [sp, #12]
 800e5d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e5d8:	b9a3      	cbnz	r3, 800e604 <_dtoa_r+0x914>
 800e5da:	9b03      	ldr	r3, [sp, #12]
 800e5dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e5e0:	0d1b      	lsrs	r3, r3, #20
 800e5e2:	051b      	lsls	r3, r3, #20
 800e5e4:	b12b      	cbz	r3, 800e5f2 <_dtoa_r+0x902>
 800e5e6:	9b04      	ldr	r3, [sp, #16]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	9304      	str	r3, [sp, #16]
 800e5ec:	f108 0801 	add.w	r8, r8, #1
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	9306      	str	r3, [sp, #24]
 800e5f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f47f af74 	bne.w	800e4e4 <_dtoa_r+0x7f4>
 800e5fc:	2001      	movs	r0, #1
 800e5fe:	e779      	b.n	800e4f4 <_dtoa_r+0x804>
 800e600:	2300      	movs	r3, #0
 800e602:	e7f6      	b.n	800e5f2 <_dtoa_r+0x902>
 800e604:	9b02      	ldr	r3, [sp, #8]
 800e606:	e7f4      	b.n	800e5f2 <_dtoa_r+0x902>
 800e608:	d085      	beq.n	800e516 <_dtoa_r+0x826>
 800e60a:	4618      	mov	r0, r3
 800e60c:	301c      	adds	r0, #28
 800e60e:	e77d      	b.n	800e50c <_dtoa_r+0x81c>
 800e610:	40240000 	.word	0x40240000
 800e614:	9b01      	ldr	r3, [sp, #4]
 800e616:	2b00      	cmp	r3, #0
 800e618:	dc38      	bgt.n	800e68c <_dtoa_r+0x99c>
 800e61a:	9b05      	ldr	r3, [sp, #20]
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	dd35      	ble.n	800e68c <_dtoa_r+0x99c>
 800e620:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e624:	f1b9 0f00 	cmp.w	r9, #0
 800e628:	d10d      	bne.n	800e646 <_dtoa_r+0x956>
 800e62a:	4631      	mov	r1, r6
 800e62c:	464b      	mov	r3, r9
 800e62e:	2205      	movs	r2, #5
 800e630:	4620      	mov	r0, r4
 800e632:	f000 fe83 	bl	800f33c <__multadd>
 800e636:	4601      	mov	r1, r0
 800e638:	4606      	mov	r6, r0
 800e63a:	4658      	mov	r0, fp
 800e63c:	f001 f8e4 	bl	800f808 <__mcmp>
 800e640:	2800      	cmp	r0, #0
 800e642:	f73f adbd 	bgt.w	800e1c0 <_dtoa_r+0x4d0>
 800e646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e648:	9d00      	ldr	r5, [sp, #0]
 800e64a:	ea6f 0a03 	mvn.w	sl, r3
 800e64e:	f04f 0800 	mov.w	r8, #0
 800e652:	4631      	mov	r1, r6
 800e654:	4620      	mov	r0, r4
 800e656:	f000 fe4f 	bl	800f2f8 <_Bfree>
 800e65a:	2f00      	cmp	r7, #0
 800e65c:	f43f aeb4 	beq.w	800e3c8 <_dtoa_r+0x6d8>
 800e660:	f1b8 0f00 	cmp.w	r8, #0
 800e664:	d005      	beq.n	800e672 <_dtoa_r+0x982>
 800e666:	45b8      	cmp	r8, r7
 800e668:	d003      	beq.n	800e672 <_dtoa_r+0x982>
 800e66a:	4641      	mov	r1, r8
 800e66c:	4620      	mov	r0, r4
 800e66e:	f000 fe43 	bl	800f2f8 <_Bfree>
 800e672:	4639      	mov	r1, r7
 800e674:	4620      	mov	r0, r4
 800e676:	f000 fe3f 	bl	800f2f8 <_Bfree>
 800e67a:	e6a5      	b.n	800e3c8 <_dtoa_r+0x6d8>
 800e67c:	2600      	movs	r6, #0
 800e67e:	4637      	mov	r7, r6
 800e680:	e7e1      	b.n	800e646 <_dtoa_r+0x956>
 800e682:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e684:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e688:	4637      	mov	r7, r6
 800e68a:	e599      	b.n	800e1c0 <_dtoa_r+0x4d0>
 800e68c:	9b08      	ldr	r3, [sp, #32]
 800e68e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	f000 80fd 	beq.w	800e892 <_dtoa_r+0xba2>
 800e698:	2d00      	cmp	r5, #0
 800e69a:	dd05      	ble.n	800e6a8 <_dtoa_r+0x9b8>
 800e69c:	4639      	mov	r1, r7
 800e69e:	462a      	mov	r2, r5
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	f001 f845 	bl	800f730 <__lshift>
 800e6a6:	4607      	mov	r7, r0
 800e6a8:	9b06      	ldr	r3, [sp, #24]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d05c      	beq.n	800e768 <_dtoa_r+0xa78>
 800e6ae:	6879      	ldr	r1, [r7, #4]
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f000 fde1 	bl	800f278 <_Balloc>
 800e6b6:	4605      	mov	r5, r0
 800e6b8:	b928      	cbnz	r0, 800e6c6 <_dtoa_r+0x9d6>
 800e6ba:	4b80      	ldr	r3, [pc, #512]	; (800e8bc <_dtoa_r+0xbcc>)
 800e6bc:	4602      	mov	r2, r0
 800e6be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e6c2:	f7ff bb2e 	b.w	800dd22 <_dtoa_r+0x32>
 800e6c6:	693a      	ldr	r2, [r7, #16]
 800e6c8:	3202      	adds	r2, #2
 800e6ca:	0092      	lsls	r2, r2, #2
 800e6cc:	f107 010c 	add.w	r1, r7, #12
 800e6d0:	300c      	adds	r0, #12
 800e6d2:	f7fd faf8 	bl	800bcc6 <memcpy>
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	4629      	mov	r1, r5
 800e6da:	4620      	mov	r0, r4
 800e6dc:	f001 f828 	bl	800f730 <__lshift>
 800e6e0:	9b00      	ldr	r3, [sp, #0]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	9301      	str	r3, [sp, #4]
 800e6e6:	9b00      	ldr	r3, [sp, #0]
 800e6e8:	444b      	add	r3, r9
 800e6ea:	9307      	str	r3, [sp, #28]
 800e6ec:	9b02      	ldr	r3, [sp, #8]
 800e6ee:	f003 0301 	and.w	r3, r3, #1
 800e6f2:	46b8      	mov	r8, r7
 800e6f4:	9306      	str	r3, [sp, #24]
 800e6f6:	4607      	mov	r7, r0
 800e6f8:	9b01      	ldr	r3, [sp, #4]
 800e6fa:	4631      	mov	r1, r6
 800e6fc:	3b01      	subs	r3, #1
 800e6fe:	4658      	mov	r0, fp
 800e700:	9302      	str	r3, [sp, #8]
 800e702:	f7ff fa69 	bl	800dbd8 <quorem>
 800e706:	4603      	mov	r3, r0
 800e708:	3330      	adds	r3, #48	; 0x30
 800e70a:	9004      	str	r0, [sp, #16]
 800e70c:	4641      	mov	r1, r8
 800e70e:	4658      	mov	r0, fp
 800e710:	9308      	str	r3, [sp, #32]
 800e712:	f001 f879 	bl	800f808 <__mcmp>
 800e716:	463a      	mov	r2, r7
 800e718:	4681      	mov	r9, r0
 800e71a:	4631      	mov	r1, r6
 800e71c:	4620      	mov	r0, r4
 800e71e:	f001 f88f 	bl	800f840 <__mdiff>
 800e722:	68c2      	ldr	r2, [r0, #12]
 800e724:	9b08      	ldr	r3, [sp, #32]
 800e726:	4605      	mov	r5, r0
 800e728:	bb02      	cbnz	r2, 800e76c <_dtoa_r+0xa7c>
 800e72a:	4601      	mov	r1, r0
 800e72c:	4658      	mov	r0, fp
 800e72e:	f001 f86b 	bl	800f808 <__mcmp>
 800e732:	9b08      	ldr	r3, [sp, #32]
 800e734:	4602      	mov	r2, r0
 800e736:	4629      	mov	r1, r5
 800e738:	4620      	mov	r0, r4
 800e73a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e73e:	f000 fddb 	bl	800f2f8 <_Bfree>
 800e742:	9b05      	ldr	r3, [sp, #20]
 800e744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e746:	9d01      	ldr	r5, [sp, #4]
 800e748:	ea43 0102 	orr.w	r1, r3, r2
 800e74c:	9b06      	ldr	r3, [sp, #24]
 800e74e:	430b      	orrs	r3, r1
 800e750:	9b08      	ldr	r3, [sp, #32]
 800e752:	d10d      	bne.n	800e770 <_dtoa_r+0xa80>
 800e754:	2b39      	cmp	r3, #57	; 0x39
 800e756:	d029      	beq.n	800e7ac <_dtoa_r+0xabc>
 800e758:	f1b9 0f00 	cmp.w	r9, #0
 800e75c:	dd01      	ble.n	800e762 <_dtoa_r+0xa72>
 800e75e:	9b04      	ldr	r3, [sp, #16]
 800e760:	3331      	adds	r3, #49	; 0x31
 800e762:	9a02      	ldr	r2, [sp, #8]
 800e764:	7013      	strb	r3, [r2, #0]
 800e766:	e774      	b.n	800e652 <_dtoa_r+0x962>
 800e768:	4638      	mov	r0, r7
 800e76a:	e7b9      	b.n	800e6e0 <_dtoa_r+0x9f0>
 800e76c:	2201      	movs	r2, #1
 800e76e:	e7e2      	b.n	800e736 <_dtoa_r+0xa46>
 800e770:	f1b9 0f00 	cmp.w	r9, #0
 800e774:	db06      	blt.n	800e784 <_dtoa_r+0xa94>
 800e776:	9905      	ldr	r1, [sp, #20]
 800e778:	ea41 0909 	orr.w	r9, r1, r9
 800e77c:	9906      	ldr	r1, [sp, #24]
 800e77e:	ea59 0101 	orrs.w	r1, r9, r1
 800e782:	d120      	bne.n	800e7c6 <_dtoa_r+0xad6>
 800e784:	2a00      	cmp	r2, #0
 800e786:	ddec      	ble.n	800e762 <_dtoa_r+0xa72>
 800e788:	4659      	mov	r1, fp
 800e78a:	2201      	movs	r2, #1
 800e78c:	4620      	mov	r0, r4
 800e78e:	9301      	str	r3, [sp, #4]
 800e790:	f000 ffce 	bl	800f730 <__lshift>
 800e794:	4631      	mov	r1, r6
 800e796:	4683      	mov	fp, r0
 800e798:	f001 f836 	bl	800f808 <__mcmp>
 800e79c:	2800      	cmp	r0, #0
 800e79e:	9b01      	ldr	r3, [sp, #4]
 800e7a0:	dc02      	bgt.n	800e7a8 <_dtoa_r+0xab8>
 800e7a2:	d1de      	bne.n	800e762 <_dtoa_r+0xa72>
 800e7a4:	07da      	lsls	r2, r3, #31
 800e7a6:	d5dc      	bpl.n	800e762 <_dtoa_r+0xa72>
 800e7a8:	2b39      	cmp	r3, #57	; 0x39
 800e7aa:	d1d8      	bne.n	800e75e <_dtoa_r+0xa6e>
 800e7ac:	9a02      	ldr	r2, [sp, #8]
 800e7ae:	2339      	movs	r3, #57	; 0x39
 800e7b0:	7013      	strb	r3, [r2, #0]
 800e7b2:	462b      	mov	r3, r5
 800e7b4:	461d      	mov	r5, r3
 800e7b6:	3b01      	subs	r3, #1
 800e7b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e7bc:	2a39      	cmp	r2, #57	; 0x39
 800e7be:	d050      	beq.n	800e862 <_dtoa_r+0xb72>
 800e7c0:	3201      	adds	r2, #1
 800e7c2:	701a      	strb	r2, [r3, #0]
 800e7c4:	e745      	b.n	800e652 <_dtoa_r+0x962>
 800e7c6:	2a00      	cmp	r2, #0
 800e7c8:	dd03      	ble.n	800e7d2 <_dtoa_r+0xae2>
 800e7ca:	2b39      	cmp	r3, #57	; 0x39
 800e7cc:	d0ee      	beq.n	800e7ac <_dtoa_r+0xabc>
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	e7c7      	b.n	800e762 <_dtoa_r+0xa72>
 800e7d2:	9a01      	ldr	r2, [sp, #4]
 800e7d4:	9907      	ldr	r1, [sp, #28]
 800e7d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e7da:	428a      	cmp	r2, r1
 800e7dc:	d02a      	beq.n	800e834 <_dtoa_r+0xb44>
 800e7de:	4659      	mov	r1, fp
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	220a      	movs	r2, #10
 800e7e4:	4620      	mov	r0, r4
 800e7e6:	f000 fda9 	bl	800f33c <__multadd>
 800e7ea:	45b8      	cmp	r8, r7
 800e7ec:	4683      	mov	fp, r0
 800e7ee:	f04f 0300 	mov.w	r3, #0
 800e7f2:	f04f 020a 	mov.w	r2, #10
 800e7f6:	4641      	mov	r1, r8
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	d107      	bne.n	800e80c <_dtoa_r+0xb1c>
 800e7fc:	f000 fd9e 	bl	800f33c <__multadd>
 800e800:	4680      	mov	r8, r0
 800e802:	4607      	mov	r7, r0
 800e804:	9b01      	ldr	r3, [sp, #4]
 800e806:	3301      	adds	r3, #1
 800e808:	9301      	str	r3, [sp, #4]
 800e80a:	e775      	b.n	800e6f8 <_dtoa_r+0xa08>
 800e80c:	f000 fd96 	bl	800f33c <__multadd>
 800e810:	4639      	mov	r1, r7
 800e812:	4680      	mov	r8, r0
 800e814:	2300      	movs	r3, #0
 800e816:	220a      	movs	r2, #10
 800e818:	4620      	mov	r0, r4
 800e81a:	f000 fd8f 	bl	800f33c <__multadd>
 800e81e:	4607      	mov	r7, r0
 800e820:	e7f0      	b.n	800e804 <_dtoa_r+0xb14>
 800e822:	f1b9 0f00 	cmp.w	r9, #0
 800e826:	9a00      	ldr	r2, [sp, #0]
 800e828:	bfcc      	ite	gt
 800e82a:	464d      	movgt	r5, r9
 800e82c:	2501      	movle	r5, #1
 800e82e:	4415      	add	r5, r2
 800e830:	f04f 0800 	mov.w	r8, #0
 800e834:	4659      	mov	r1, fp
 800e836:	2201      	movs	r2, #1
 800e838:	4620      	mov	r0, r4
 800e83a:	9301      	str	r3, [sp, #4]
 800e83c:	f000 ff78 	bl	800f730 <__lshift>
 800e840:	4631      	mov	r1, r6
 800e842:	4683      	mov	fp, r0
 800e844:	f000 ffe0 	bl	800f808 <__mcmp>
 800e848:	2800      	cmp	r0, #0
 800e84a:	dcb2      	bgt.n	800e7b2 <_dtoa_r+0xac2>
 800e84c:	d102      	bne.n	800e854 <_dtoa_r+0xb64>
 800e84e:	9b01      	ldr	r3, [sp, #4]
 800e850:	07db      	lsls	r3, r3, #31
 800e852:	d4ae      	bmi.n	800e7b2 <_dtoa_r+0xac2>
 800e854:	462b      	mov	r3, r5
 800e856:	461d      	mov	r5, r3
 800e858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e85c:	2a30      	cmp	r2, #48	; 0x30
 800e85e:	d0fa      	beq.n	800e856 <_dtoa_r+0xb66>
 800e860:	e6f7      	b.n	800e652 <_dtoa_r+0x962>
 800e862:	9a00      	ldr	r2, [sp, #0]
 800e864:	429a      	cmp	r2, r3
 800e866:	d1a5      	bne.n	800e7b4 <_dtoa_r+0xac4>
 800e868:	f10a 0a01 	add.w	sl, sl, #1
 800e86c:	2331      	movs	r3, #49	; 0x31
 800e86e:	e779      	b.n	800e764 <_dtoa_r+0xa74>
 800e870:	4b13      	ldr	r3, [pc, #76]	; (800e8c0 <_dtoa_r+0xbd0>)
 800e872:	f7ff baaf 	b.w	800ddd4 <_dtoa_r+0xe4>
 800e876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f47f aa86 	bne.w	800dd8a <_dtoa_r+0x9a>
 800e87e:	4b11      	ldr	r3, [pc, #68]	; (800e8c4 <_dtoa_r+0xbd4>)
 800e880:	f7ff baa8 	b.w	800ddd4 <_dtoa_r+0xe4>
 800e884:	f1b9 0f00 	cmp.w	r9, #0
 800e888:	dc03      	bgt.n	800e892 <_dtoa_r+0xba2>
 800e88a:	9b05      	ldr	r3, [sp, #20]
 800e88c:	2b02      	cmp	r3, #2
 800e88e:	f73f aec9 	bgt.w	800e624 <_dtoa_r+0x934>
 800e892:	9d00      	ldr	r5, [sp, #0]
 800e894:	4631      	mov	r1, r6
 800e896:	4658      	mov	r0, fp
 800e898:	f7ff f99e 	bl	800dbd8 <quorem>
 800e89c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e8a0:	f805 3b01 	strb.w	r3, [r5], #1
 800e8a4:	9a00      	ldr	r2, [sp, #0]
 800e8a6:	1aaa      	subs	r2, r5, r2
 800e8a8:	4591      	cmp	r9, r2
 800e8aa:	ddba      	ble.n	800e822 <_dtoa_r+0xb32>
 800e8ac:	4659      	mov	r1, fp
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	220a      	movs	r2, #10
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f000 fd42 	bl	800f33c <__multadd>
 800e8b8:	4683      	mov	fp, r0
 800e8ba:	e7eb      	b.n	800e894 <_dtoa_r+0xba4>
 800e8bc:	08011224 	.word	0x08011224
 800e8c0:	08011024 	.word	0x08011024
 800e8c4:	080111a1 	.word	0x080111a1

0800e8c8 <__errno>:
 800e8c8:	4b01      	ldr	r3, [pc, #4]	; (800e8d0 <__errno+0x8>)
 800e8ca:	6818      	ldr	r0, [r3, #0]
 800e8cc:	4770      	bx	lr
 800e8ce:	bf00      	nop
 800e8d0:	20000080 	.word	0x20000080

0800e8d4 <__sflush_r>:
 800e8d4:	898a      	ldrh	r2, [r1, #12]
 800e8d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8da:	4605      	mov	r5, r0
 800e8dc:	0710      	lsls	r0, r2, #28
 800e8de:	460c      	mov	r4, r1
 800e8e0:	d458      	bmi.n	800e994 <__sflush_r+0xc0>
 800e8e2:	684b      	ldr	r3, [r1, #4]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	dc05      	bgt.n	800e8f4 <__sflush_r+0x20>
 800e8e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	dc02      	bgt.n	800e8f4 <__sflush_r+0x20>
 800e8ee:	2000      	movs	r0, #0
 800e8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8f6:	2e00      	cmp	r6, #0
 800e8f8:	d0f9      	beq.n	800e8ee <__sflush_r+0x1a>
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e900:	682f      	ldr	r7, [r5, #0]
 800e902:	602b      	str	r3, [r5, #0]
 800e904:	d032      	beq.n	800e96c <__sflush_r+0x98>
 800e906:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e908:	89a3      	ldrh	r3, [r4, #12]
 800e90a:	075a      	lsls	r2, r3, #29
 800e90c:	d505      	bpl.n	800e91a <__sflush_r+0x46>
 800e90e:	6863      	ldr	r3, [r4, #4]
 800e910:	1ac0      	subs	r0, r0, r3
 800e912:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e914:	b10b      	cbz	r3, 800e91a <__sflush_r+0x46>
 800e916:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e918:	1ac0      	subs	r0, r0, r3
 800e91a:	2300      	movs	r3, #0
 800e91c:	4602      	mov	r2, r0
 800e91e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e920:	6a21      	ldr	r1, [r4, #32]
 800e922:	4628      	mov	r0, r5
 800e924:	47b0      	blx	r6
 800e926:	1c43      	adds	r3, r0, #1
 800e928:	89a3      	ldrh	r3, [r4, #12]
 800e92a:	d106      	bne.n	800e93a <__sflush_r+0x66>
 800e92c:	6829      	ldr	r1, [r5, #0]
 800e92e:	291d      	cmp	r1, #29
 800e930:	d82c      	bhi.n	800e98c <__sflush_r+0xb8>
 800e932:	4a2a      	ldr	r2, [pc, #168]	; (800e9dc <__sflush_r+0x108>)
 800e934:	40ca      	lsrs	r2, r1
 800e936:	07d6      	lsls	r6, r2, #31
 800e938:	d528      	bpl.n	800e98c <__sflush_r+0xb8>
 800e93a:	2200      	movs	r2, #0
 800e93c:	6062      	str	r2, [r4, #4]
 800e93e:	04d9      	lsls	r1, r3, #19
 800e940:	6922      	ldr	r2, [r4, #16]
 800e942:	6022      	str	r2, [r4, #0]
 800e944:	d504      	bpl.n	800e950 <__sflush_r+0x7c>
 800e946:	1c42      	adds	r2, r0, #1
 800e948:	d101      	bne.n	800e94e <__sflush_r+0x7a>
 800e94a:	682b      	ldr	r3, [r5, #0]
 800e94c:	b903      	cbnz	r3, 800e950 <__sflush_r+0x7c>
 800e94e:	6560      	str	r0, [r4, #84]	; 0x54
 800e950:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e952:	602f      	str	r7, [r5, #0]
 800e954:	2900      	cmp	r1, #0
 800e956:	d0ca      	beq.n	800e8ee <__sflush_r+0x1a>
 800e958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e95c:	4299      	cmp	r1, r3
 800e95e:	d002      	beq.n	800e966 <__sflush_r+0x92>
 800e960:	4628      	mov	r0, r5
 800e962:	f001 f953 	bl	800fc0c <_free_r>
 800e966:	2000      	movs	r0, #0
 800e968:	6360      	str	r0, [r4, #52]	; 0x34
 800e96a:	e7c1      	b.n	800e8f0 <__sflush_r+0x1c>
 800e96c:	6a21      	ldr	r1, [r4, #32]
 800e96e:	2301      	movs	r3, #1
 800e970:	4628      	mov	r0, r5
 800e972:	47b0      	blx	r6
 800e974:	1c41      	adds	r1, r0, #1
 800e976:	d1c7      	bne.n	800e908 <__sflush_r+0x34>
 800e978:	682b      	ldr	r3, [r5, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d0c4      	beq.n	800e908 <__sflush_r+0x34>
 800e97e:	2b1d      	cmp	r3, #29
 800e980:	d001      	beq.n	800e986 <__sflush_r+0xb2>
 800e982:	2b16      	cmp	r3, #22
 800e984:	d101      	bne.n	800e98a <__sflush_r+0xb6>
 800e986:	602f      	str	r7, [r5, #0]
 800e988:	e7b1      	b.n	800e8ee <__sflush_r+0x1a>
 800e98a:	89a3      	ldrh	r3, [r4, #12]
 800e98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e990:	81a3      	strh	r3, [r4, #12]
 800e992:	e7ad      	b.n	800e8f0 <__sflush_r+0x1c>
 800e994:	690f      	ldr	r7, [r1, #16]
 800e996:	2f00      	cmp	r7, #0
 800e998:	d0a9      	beq.n	800e8ee <__sflush_r+0x1a>
 800e99a:	0793      	lsls	r3, r2, #30
 800e99c:	680e      	ldr	r6, [r1, #0]
 800e99e:	bf08      	it	eq
 800e9a0:	694b      	ldreq	r3, [r1, #20]
 800e9a2:	600f      	str	r7, [r1, #0]
 800e9a4:	bf18      	it	ne
 800e9a6:	2300      	movne	r3, #0
 800e9a8:	eba6 0807 	sub.w	r8, r6, r7
 800e9ac:	608b      	str	r3, [r1, #8]
 800e9ae:	f1b8 0f00 	cmp.w	r8, #0
 800e9b2:	dd9c      	ble.n	800e8ee <__sflush_r+0x1a>
 800e9b4:	6a21      	ldr	r1, [r4, #32]
 800e9b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e9b8:	4643      	mov	r3, r8
 800e9ba:	463a      	mov	r2, r7
 800e9bc:	4628      	mov	r0, r5
 800e9be:	47b0      	blx	r6
 800e9c0:	2800      	cmp	r0, #0
 800e9c2:	dc06      	bgt.n	800e9d2 <__sflush_r+0xfe>
 800e9c4:	89a3      	ldrh	r3, [r4, #12]
 800e9c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9ca:	81a3      	strh	r3, [r4, #12]
 800e9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e9d0:	e78e      	b.n	800e8f0 <__sflush_r+0x1c>
 800e9d2:	4407      	add	r7, r0
 800e9d4:	eba8 0800 	sub.w	r8, r8, r0
 800e9d8:	e7e9      	b.n	800e9ae <__sflush_r+0xda>
 800e9da:	bf00      	nop
 800e9dc:	20400001 	.word	0x20400001

0800e9e0 <_fflush_r>:
 800e9e0:	b538      	push	{r3, r4, r5, lr}
 800e9e2:	690b      	ldr	r3, [r1, #16]
 800e9e4:	4605      	mov	r5, r0
 800e9e6:	460c      	mov	r4, r1
 800e9e8:	b913      	cbnz	r3, 800e9f0 <_fflush_r+0x10>
 800e9ea:	2500      	movs	r5, #0
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	bd38      	pop	{r3, r4, r5, pc}
 800e9f0:	b118      	cbz	r0, 800e9fa <_fflush_r+0x1a>
 800e9f2:	6983      	ldr	r3, [r0, #24]
 800e9f4:	b90b      	cbnz	r3, 800e9fa <_fflush_r+0x1a>
 800e9f6:	f7fd f8a1 	bl	800bb3c <__sinit>
 800e9fa:	4b14      	ldr	r3, [pc, #80]	; (800ea4c <_fflush_r+0x6c>)
 800e9fc:	429c      	cmp	r4, r3
 800e9fe:	d11b      	bne.n	800ea38 <_fflush_r+0x58>
 800ea00:	686c      	ldr	r4, [r5, #4]
 800ea02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d0ef      	beq.n	800e9ea <_fflush_r+0xa>
 800ea0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea0c:	07d0      	lsls	r0, r2, #31
 800ea0e:	d404      	bmi.n	800ea1a <_fflush_r+0x3a>
 800ea10:	0599      	lsls	r1, r3, #22
 800ea12:	d402      	bmi.n	800ea1a <_fflush_r+0x3a>
 800ea14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea16:	f7fd f954 	bl	800bcc2 <__retarget_lock_acquire_recursive>
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	4621      	mov	r1, r4
 800ea1e:	f7ff ff59 	bl	800e8d4 <__sflush_r>
 800ea22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea24:	07da      	lsls	r2, r3, #31
 800ea26:	4605      	mov	r5, r0
 800ea28:	d4e0      	bmi.n	800e9ec <_fflush_r+0xc>
 800ea2a:	89a3      	ldrh	r3, [r4, #12]
 800ea2c:	059b      	lsls	r3, r3, #22
 800ea2e:	d4dd      	bmi.n	800e9ec <_fflush_r+0xc>
 800ea30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea32:	f7fd f947 	bl	800bcc4 <__retarget_lock_release_recursive>
 800ea36:	e7d9      	b.n	800e9ec <_fflush_r+0xc>
 800ea38:	4b05      	ldr	r3, [pc, #20]	; (800ea50 <_fflush_r+0x70>)
 800ea3a:	429c      	cmp	r4, r3
 800ea3c:	d101      	bne.n	800ea42 <_fflush_r+0x62>
 800ea3e:	68ac      	ldr	r4, [r5, #8]
 800ea40:	e7df      	b.n	800ea02 <_fflush_r+0x22>
 800ea42:	4b04      	ldr	r3, [pc, #16]	; (800ea54 <_fflush_r+0x74>)
 800ea44:	429c      	cmp	r4, r3
 800ea46:	bf08      	it	eq
 800ea48:	68ec      	ldreq	r4, [r5, #12]
 800ea4a:	e7da      	b.n	800ea02 <_fflush_r+0x22>
 800ea4c:	08010fd0 	.word	0x08010fd0
 800ea50:	08010ff0 	.word	0x08010ff0
 800ea54:	08010fb0 	.word	0x08010fb0

0800ea58 <rshift>:
 800ea58:	6903      	ldr	r3, [r0, #16]
 800ea5a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ea5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea62:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ea66:	f100 0414 	add.w	r4, r0, #20
 800ea6a:	dd45      	ble.n	800eaf8 <rshift+0xa0>
 800ea6c:	f011 011f 	ands.w	r1, r1, #31
 800ea70:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ea74:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ea78:	d10c      	bne.n	800ea94 <rshift+0x3c>
 800ea7a:	f100 0710 	add.w	r7, r0, #16
 800ea7e:	4629      	mov	r1, r5
 800ea80:	42b1      	cmp	r1, r6
 800ea82:	d334      	bcc.n	800eaee <rshift+0x96>
 800ea84:	1a9b      	subs	r3, r3, r2
 800ea86:	009b      	lsls	r3, r3, #2
 800ea88:	1eea      	subs	r2, r5, #3
 800ea8a:	4296      	cmp	r6, r2
 800ea8c:	bf38      	it	cc
 800ea8e:	2300      	movcc	r3, #0
 800ea90:	4423      	add	r3, r4
 800ea92:	e015      	b.n	800eac0 <rshift+0x68>
 800ea94:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ea98:	f1c1 0820 	rsb	r8, r1, #32
 800ea9c:	40cf      	lsrs	r7, r1
 800ea9e:	f105 0e04 	add.w	lr, r5, #4
 800eaa2:	46a1      	mov	r9, r4
 800eaa4:	4576      	cmp	r6, lr
 800eaa6:	46f4      	mov	ip, lr
 800eaa8:	d815      	bhi.n	800ead6 <rshift+0x7e>
 800eaaa:	1a9b      	subs	r3, r3, r2
 800eaac:	009a      	lsls	r2, r3, #2
 800eaae:	3a04      	subs	r2, #4
 800eab0:	3501      	adds	r5, #1
 800eab2:	42ae      	cmp	r6, r5
 800eab4:	bf38      	it	cc
 800eab6:	2200      	movcc	r2, #0
 800eab8:	18a3      	adds	r3, r4, r2
 800eaba:	50a7      	str	r7, [r4, r2]
 800eabc:	b107      	cbz	r7, 800eac0 <rshift+0x68>
 800eabe:	3304      	adds	r3, #4
 800eac0:	1b1a      	subs	r2, r3, r4
 800eac2:	42a3      	cmp	r3, r4
 800eac4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eac8:	bf08      	it	eq
 800eaca:	2300      	moveq	r3, #0
 800eacc:	6102      	str	r2, [r0, #16]
 800eace:	bf08      	it	eq
 800ead0:	6143      	streq	r3, [r0, #20]
 800ead2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ead6:	f8dc c000 	ldr.w	ip, [ip]
 800eada:	fa0c fc08 	lsl.w	ip, ip, r8
 800eade:	ea4c 0707 	orr.w	r7, ip, r7
 800eae2:	f849 7b04 	str.w	r7, [r9], #4
 800eae6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eaea:	40cf      	lsrs	r7, r1
 800eaec:	e7da      	b.n	800eaa4 <rshift+0x4c>
 800eaee:	f851 cb04 	ldr.w	ip, [r1], #4
 800eaf2:	f847 cf04 	str.w	ip, [r7, #4]!
 800eaf6:	e7c3      	b.n	800ea80 <rshift+0x28>
 800eaf8:	4623      	mov	r3, r4
 800eafa:	e7e1      	b.n	800eac0 <rshift+0x68>

0800eafc <__hexdig_fun>:
 800eafc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eb00:	2b09      	cmp	r3, #9
 800eb02:	d802      	bhi.n	800eb0a <__hexdig_fun+0xe>
 800eb04:	3820      	subs	r0, #32
 800eb06:	b2c0      	uxtb	r0, r0
 800eb08:	4770      	bx	lr
 800eb0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800eb0e:	2b05      	cmp	r3, #5
 800eb10:	d801      	bhi.n	800eb16 <__hexdig_fun+0x1a>
 800eb12:	3847      	subs	r0, #71	; 0x47
 800eb14:	e7f7      	b.n	800eb06 <__hexdig_fun+0xa>
 800eb16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800eb1a:	2b05      	cmp	r3, #5
 800eb1c:	d801      	bhi.n	800eb22 <__hexdig_fun+0x26>
 800eb1e:	3827      	subs	r0, #39	; 0x27
 800eb20:	e7f1      	b.n	800eb06 <__hexdig_fun+0xa>
 800eb22:	2000      	movs	r0, #0
 800eb24:	4770      	bx	lr
	...

0800eb28 <__gethex>:
 800eb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb2c:	ed2d 8b02 	vpush	{d8}
 800eb30:	b089      	sub	sp, #36	; 0x24
 800eb32:	ee08 0a10 	vmov	s16, r0
 800eb36:	9304      	str	r3, [sp, #16]
 800eb38:	4bbc      	ldr	r3, [pc, #752]	; (800ee2c <__gethex+0x304>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	9301      	str	r3, [sp, #4]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	468b      	mov	fp, r1
 800eb42:	4690      	mov	r8, r2
 800eb44:	f7f1 fb54 	bl	80001f0 <strlen>
 800eb48:	9b01      	ldr	r3, [sp, #4]
 800eb4a:	f8db 2000 	ldr.w	r2, [fp]
 800eb4e:	4403      	add	r3, r0
 800eb50:	4682      	mov	sl, r0
 800eb52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800eb56:	9305      	str	r3, [sp, #20]
 800eb58:	1c93      	adds	r3, r2, #2
 800eb5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800eb5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800eb62:	32fe      	adds	r2, #254	; 0xfe
 800eb64:	18d1      	adds	r1, r2, r3
 800eb66:	461f      	mov	r7, r3
 800eb68:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eb6c:	9100      	str	r1, [sp, #0]
 800eb6e:	2830      	cmp	r0, #48	; 0x30
 800eb70:	d0f8      	beq.n	800eb64 <__gethex+0x3c>
 800eb72:	f7ff ffc3 	bl	800eafc <__hexdig_fun>
 800eb76:	4604      	mov	r4, r0
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d13a      	bne.n	800ebf2 <__gethex+0xca>
 800eb7c:	9901      	ldr	r1, [sp, #4]
 800eb7e:	4652      	mov	r2, sl
 800eb80:	4638      	mov	r0, r7
 800eb82:	f001 fb65 	bl	8010250 <strncmp>
 800eb86:	4605      	mov	r5, r0
 800eb88:	2800      	cmp	r0, #0
 800eb8a:	d168      	bne.n	800ec5e <__gethex+0x136>
 800eb8c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800eb90:	eb07 060a 	add.w	r6, r7, sl
 800eb94:	f7ff ffb2 	bl	800eafc <__hexdig_fun>
 800eb98:	2800      	cmp	r0, #0
 800eb9a:	d062      	beq.n	800ec62 <__gethex+0x13a>
 800eb9c:	4633      	mov	r3, r6
 800eb9e:	7818      	ldrb	r0, [r3, #0]
 800eba0:	2830      	cmp	r0, #48	; 0x30
 800eba2:	461f      	mov	r7, r3
 800eba4:	f103 0301 	add.w	r3, r3, #1
 800eba8:	d0f9      	beq.n	800eb9e <__gethex+0x76>
 800ebaa:	f7ff ffa7 	bl	800eafc <__hexdig_fun>
 800ebae:	2301      	movs	r3, #1
 800ebb0:	fab0 f480 	clz	r4, r0
 800ebb4:	0964      	lsrs	r4, r4, #5
 800ebb6:	4635      	mov	r5, r6
 800ebb8:	9300      	str	r3, [sp, #0]
 800ebba:	463a      	mov	r2, r7
 800ebbc:	4616      	mov	r6, r2
 800ebbe:	3201      	adds	r2, #1
 800ebc0:	7830      	ldrb	r0, [r6, #0]
 800ebc2:	f7ff ff9b 	bl	800eafc <__hexdig_fun>
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	d1f8      	bne.n	800ebbc <__gethex+0x94>
 800ebca:	9901      	ldr	r1, [sp, #4]
 800ebcc:	4652      	mov	r2, sl
 800ebce:	4630      	mov	r0, r6
 800ebd0:	f001 fb3e 	bl	8010250 <strncmp>
 800ebd4:	b980      	cbnz	r0, 800ebf8 <__gethex+0xd0>
 800ebd6:	b94d      	cbnz	r5, 800ebec <__gethex+0xc4>
 800ebd8:	eb06 050a 	add.w	r5, r6, sl
 800ebdc:	462a      	mov	r2, r5
 800ebde:	4616      	mov	r6, r2
 800ebe0:	3201      	adds	r2, #1
 800ebe2:	7830      	ldrb	r0, [r6, #0]
 800ebe4:	f7ff ff8a 	bl	800eafc <__hexdig_fun>
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	d1f8      	bne.n	800ebde <__gethex+0xb6>
 800ebec:	1bad      	subs	r5, r5, r6
 800ebee:	00ad      	lsls	r5, r5, #2
 800ebf0:	e004      	b.n	800ebfc <__gethex+0xd4>
 800ebf2:	2400      	movs	r4, #0
 800ebf4:	4625      	mov	r5, r4
 800ebf6:	e7e0      	b.n	800ebba <__gethex+0x92>
 800ebf8:	2d00      	cmp	r5, #0
 800ebfa:	d1f7      	bne.n	800ebec <__gethex+0xc4>
 800ebfc:	7833      	ldrb	r3, [r6, #0]
 800ebfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ec02:	2b50      	cmp	r3, #80	; 0x50
 800ec04:	d13b      	bne.n	800ec7e <__gethex+0x156>
 800ec06:	7873      	ldrb	r3, [r6, #1]
 800ec08:	2b2b      	cmp	r3, #43	; 0x2b
 800ec0a:	d02c      	beq.n	800ec66 <__gethex+0x13e>
 800ec0c:	2b2d      	cmp	r3, #45	; 0x2d
 800ec0e:	d02e      	beq.n	800ec6e <__gethex+0x146>
 800ec10:	1c71      	adds	r1, r6, #1
 800ec12:	f04f 0900 	mov.w	r9, #0
 800ec16:	7808      	ldrb	r0, [r1, #0]
 800ec18:	f7ff ff70 	bl	800eafc <__hexdig_fun>
 800ec1c:	1e43      	subs	r3, r0, #1
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	2b18      	cmp	r3, #24
 800ec22:	d82c      	bhi.n	800ec7e <__gethex+0x156>
 800ec24:	f1a0 0210 	sub.w	r2, r0, #16
 800ec28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ec2c:	f7ff ff66 	bl	800eafc <__hexdig_fun>
 800ec30:	1e43      	subs	r3, r0, #1
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	2b18      	cmp	r3, #24
 800ec36:	d91d      	bls.n	800ec74 <__gethex+0x14c>
 800ec38:	f1b9 0f00 	cmp.w	r9, #0
 800ec3c:	d000      	beq.n	800ec40 <__gethex+0x118>
 800ec3e:	4252      	negs	r2, r2
 800ec40:	4415      	add	r5, r2
 800ec42:	f8cb 1000 	str.w	r1, [fp]
 800ec46:	b1e4      	cbz	r4, 800ec82 <__gethex+0x15a>
 800ec48:	9b00      	ldr	r3, [sp, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	bf14      	ite	ne
 800ec4e:	2700      	movne	r7, #0
 800ec50:	2706      	moveq	r7, #6
 800ec52:	4638      	mov	r0, r7
 800ec54:	b009      	add	sp, #36	; 0x24
 800ec56:	ecbd 8b02 	vpop	{d8}
 800ec5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec5e:	463e      	mov	r6, r7
 800ec60:	4625      	mov	r5, r4
 800ec62:	2401      	movs	r4, #1
 800ec64:	e7ca      	b.n	800ebfc <__gethex+0xd4>
 800ec66:	f04f 0900 	mov.w	r9, #0
 800ec6a:	1cb1      	adds	r1, r6, #2
 800ec6c:	e7d3      	b.n	800ec16 <__gethex+0xee>
 800ec6e:	f04f 0901 	mov.w	r9, #1
 800ec72:	e7fa      	b.n	800ec6a <__gethex+0x142>
 800ec74:	230a      	movs	r3, #10
 800ec76:	fb03 0202 	mla	r2, r3, r2, r0
 800ec7a:	3a10      	subs	r2, #16
 800ec7c:	e7d4      	b.n	800ec28 <__gethex+0x100>
 800ec7e:	4631      	mov	r1, r6
 800ec80:	e7df      	b.n	800ec42 <__gethex+0x11a>
 800ec82:	1bf3      	subs	r3, r6, r7
 800ec84:	3b01      	subs	r3, #1
 800ec86:	4621      	mov	r1, r4
 800ec88:	2b07      	cmp	r3, #7
 800ec8a:	dc0b      	bgt.n	800eca4 <__gethex+0x17c>
 800ec8c:	ee18 0a10 	vmov	r0, s16
 800ec90:	f000 faf2 	bl	800f278 <_Balloc>
 800ec94:	4604      	mov	r4, r0
 800ec96:	b940      	cbnz	r0, 800ecaa <__gethex+0x182>
 800ec98:	4b65      	ldr	r3, [pc, #404]	; (800ee30 <__gethex+0x308>)
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	21de      	movs	r1, #222	; 0xde
 800ec9e:	4865      	ldr	r0, [pc, #404]	; (800ee34 <__gethex+0x30c>)
 800eca0:	f001 faf6 	bl	8010290 <__assert_func>
 800eca4:	3101      	adds	r1, #1
 800eca6:	105b      	asrs	r3, r3, #1
 800eca8:	e7ee      	b.n	800ec88 <__gethex+0x160>
 800ecaa:	f100 0914 	add.w	r9, r0, #20
 800ecae:	f04f 0b00 	mov.w	fp, #0
 800ecb2:	f1ca 0301 	rsb	r3, sl, #1
 800ecb6:	f8cd 9008 	str.w	r9, [sp, #8]
 800ecba:	f8cd b000 	str.w	fp, [sp]
 800ecbe:	9306      	str	r3, [sp, #24]
 800ecc0:	42b7      	cmp	r7, r6
 800ecc2:	d340      	bcc.n	800ed46 <__gethex+0x21e>
 800ecc4:	9802      	ldr	r0, [sp, #8]
 800ecc6:	9b00      	ldr	r3, [sp, #0]
 800ecc8:	f840 3b04 	str.w	r3, [r0], #4
 800eccc:	eba0 0009 	sub.w	r0, r0, r9
 800ecd0:	1080      	asrs	r0, r0, #2
 800ecd2:	0146      	lsls	r6, r0, #5
 800ecd4:	6120      	str	r0, [r4, #16]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f000 fbc4 	bl	800f464 <__hi0bits>
 800ecdc:	1a30      	subs	r0, r6, r0
 800ecde:	f8d8 6000 	ldr.w	r6, [r8]
 800ece2:	42b0      	cmp	r0, r6
 800ece4:	dd63      	ble.n	800edae <__gethex+0x286>
 800ece6:	1b87      	subs	r7, r0, r6
 800ece8:	4639      	mov	r1, r7
 800ecea:	4620      	mov	r0, r4
 800ecec:	f000 ff5e 	bl	800fbac <__any_on>
 800ecf0:	4682      	mov	sl, r0
 800ecf2:	b1a8      	cbz	r0, 800ed20 <__gethex+0x1f8>
 800ecf4:	1e7b      	subs	r3, r7, #1
 800ecf6:	1159      	asrs	r1, r3, #5
 800ecf8:	f003 021f 	and.w	r2, r3, #31
 800ecfc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ed00:	f04f 0a01 	mov.w	sl, #1
 800ed04:	fa0a f202 	lsl.w	r2, sl, r2
 800ed08:	420a      	tst	r2, r1
 800ed0a:	d009      	beq.n	800ed20 <__gethex+0x1f8>
 800ed0c:	4553      	cmp	r3, sl
 800ed0e:	dd05      	ble.n	800ed1c <__gethex+0x1f4>
 800ed10:	1eb9      	subs	r1, r7, #2
 800ed12:	4620      	mov	r0, r4
 800ed14:	f000 ff4a 	bl	800fbac <__any_on>
 800ed18:	2800      	cmp	r0, #0
 800ed1a:	d145      	bne.n	800eda8 <__gethex+0x280>
 800ed1c:	f04f 0a02 	mov.w	sl, #2
 800ed20:	4639      	mov	r1, r7
 800ed22:	4620      	mov	r0, r4
 800ed24:	f7ff fe98 	bl	800ea58 <rshift>
 800ed28:	443d      	add	r5, r7
 800ed2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed2e:	42ab      	cmp	r3, r5
 800ed30:	da4c      	bge.n	800edcc <__gethex+0x2a4>
 800ed32:	ee18 0a10 	vmov	r0, s16
 800ed36:	4621      	mov	r1, r4
 800ed38:	f000 fade 	bl	800f2f8 <_Bfree>
 800ed3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ed3e:	2300      	movs	r3, #0
 800ed40:	6013      	str	r3, [r2, #0]
 800ed42:	27a3      	movs	r7, #163	; 0xa3
 800ed44:	e785      	b.n	800ec52 <__gethex+0x12a>
 800ed46:	1e73      	subs	r3, r6, #1
 800ed48:	9a05      	ldr	r2, [sp, #20]
 800ed4a:	9303      	str	r3, [sp, #12]
 800ed4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d019      	beq.n	800ed88 <__gethex+0x260>
 800ed54:	f1bb 0f20 	cmp.w	fp, #32
 800ed58:	d107      	bne.n	800ed6a <__gethex+0x242>
 800ed5a:	9b02      	ldr	r3, [sp, #8]
 800ed5c:	9a00      	ldr	r2, [sp, #0]
 800ed5e:	f843 2b04 	str.w	r2, [r3], #4
 800ed62:	9302      	str	r3, [sp, #8]
 800ed64:	2300      	movs	r3, #0
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	469b      	mov	fp, r3
 800ed6a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ed6e:	f7ff fec5 	bl	800eafc <__hexdig_fun>
 800ed72:	9b00      	ldr	r3, [sp, #0]
 800ed74:	f000 000f 	and.w	r0, r0, #15
 800ed78:	fa00 f00b 	lsl.w	r0, r0, fp
 800ed7c:	4303      	orrs	r3, r0
 800ed7e:	9300      	str	r3, [sp, #0]
 800ed80:	f10b 0b04 	add.w	fp, fp, #4
 800ed84:	9b03      	ldr	r3, [sp, #12]
 800ed86:	e00d      	b.n	800eda4 <__gethex+0x27c>
 800ed88:	9b03      	ldr	r3, [sp, #12]
 800ed8a:	9a06      	ldr	r2, [sp, #24]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	42bb      	cmp	r3, r7
 800ed90:	d3e0      	bcc.n	800ed54 <__gethex+0x22c>
 800ed92:	4618      	mov	r0, r3
 800ed94:	9901      	ldr	r1, [sp, #4]
 800ed96:	9307      	str	r3, [sp, #28]
 800ed98:	4652      	mov	r2, sl
 800ed9a:	f001 fa59 	bl	8010250 <strncmp>
 800ed9e:	9b07      	ldr	r3, [sp, #28]
 800eda0:	2800      	cmp	r0, #0
 800eda2:	d1d7      	bne.n	800ed54 <__gethex+0x22c>
 800eda4:	461e      	mov	r6, r3
 800eda6:	e78b      	b.n	800ecc0 <__gethex+0x198>
 800eda8:	f04f 0a03 	mov.w	sl, #3
 800edac:	e7b8      	b.n	800ed20 <__gethex+0x1f8>
 800edae:	da0a      	bge.n	800edc6 <__gethex+0x29e>
 800edb0:	1a37      	subs	r7, r6, r0
 800edb2:	4621      	mov	r1, r4
 800edb4:	ee18 0a10 	vmov	r0, s16
 800edb8:	463a      	mov	r2, r7
 800edba:	f000 fcb9 	bl	800f730 <__lshift>
 800edbe:	1bed      	subs	r5, r5, r7
 800edc0:	4604      	mov	r4, r0
 800edc2:	f100 0914 	add.w	r9, r0, #20
 800edc6:	f04f 0a00 	mov.w	sl, #0
 800edca:	e7ae      	b.n	800ed2a <__gethex+0x202>
 800edcc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800edd0:	42a8      	cmp	r0, r5
 800edd2:	dd72      	ble.n	800eeba <__gethex+0x392>
 800edd4:	1b45      	subs	r5, r0, r5
 800edd6:	42ae      	cmp	r6, r5
 800edd8:	dc36      	bgt.n	800ee48 <__gethex+0x320>
 800edda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edde:	2b02      	cmp	r3, #2
 800ede0:	d02a      	beq.n	800ee38 <__gethex+0x310>
 800ede2:	2b03      	cmp	r3, #3
 800ede4:	d02c      	beq.n	800ee40 <__gethex+0x318>
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d115      	bne.n	800ee16 <__gethex+0x2ee>
 800edea:	42ae      	cmp	r6, r5
 800edec:	d113      	bne.n	800ee16 <__gethex+0x2ee>
 800edee:	2e01      	cmp	r6, #1
 800edf0:	d10b      	bne.n	800ee0a <__gethex+0x2e2>
 800edf2:	9a04      	ldr	r2, [sp, #16]
 800edf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800edf8:	6013      	str	r3, [r2, #0]
 800edfa:	2301      	movs	r3, #1
 800edfc:	6123      	str	r3, [r4, #16]
 800edfe:	f8c9 3000 	str.w	r3, [r9]
 800ee02:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ee04:	2762      	movs	r7, #98	; 0x62
 800ee06:	601c      	str	r4, [r3, #0]
 800ee08:	e723      	b.n	800ec52 <__gethex+0x12a>
 800ee0a:	1e71      	subs	r1, r6, #1
 800ee0c:	4620      	mov	r0, r4
 800ee0e:	f000 fecd 	bl	800fbac <__any_on>
 800ee12:	2800      	cmp	r0, #0
 800ee14:	d1ed      	bne.n	800edf2 <__gethex+0x2ca>
 800ee16:	ee18 0a10 	vmov	r0, s16
 800ee1a:	4621      	mov	r1, r4
 800ee1c:	f000 fa6c 	bl	800f2f8 <_Bfree>
 800ee20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ee22:	2300      	movs	r3, #0
 800ee24:	6013      	str	r3, [r2, #0]
 800ee26:	2750      	movs	r7, #80	; 0x50
 800ee28:	e713      	b.n	800ec52 <__gethex+0x12a>
 800ee2a:	bf00      	nop
 800ee2c:	080112a0 	.word	0x080112a0
 800ee30:	08011224 	.word	0x08011224
 800ee34:	08011235 	.word	0x08011235
 800ee38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1eb      	bne.n	800ee16 <__gethex+0x2ee>
 800ee3e:	e7d8      	b.n	800edf2 <__gethex+0x2ca>
 800ee40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1d5      	bne.n	800edf2 <__gethex+0x2ca>
 800ee46:	e7e6      	b.n	800ee16 <__gethex+0x2ee>
 800ee48:	1e6f      	subs	r7, r5, #1
 800ee4a:	f1ba 0f00 	cmp.w	sl, #0
 800ee4e:	d131      	bne.n	800eeb4 <__gethex+0x38c>
 800ee50:	b127      	cbz	r7, 800ee5c <__gethex+0x334>
 800ee52:	4639      	mov	r1, r7
 800ee54:	4620      	mov	r0, r4
 800ee56:	f000 fea9 	bl	800fbac <__any_on>
 800ee5a:	4682      	mov	sl, r0
 800ee5c:	117b      	asrs	r3, r7, #5
 800ee5e:	2101      	movs	r1, #1
 800ee60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ee64:	f007 071f 	and.w	r7, r7, #31
 800ee68:	fa01 f707 	lsl.w	r7, r1, r7
 800ee6c:	421f      	tst	r7, r3
 800ee6e:	4629      	mov	r1, r5
 800ee70:	4620      	mov	r0, r4
 800ee72:	bf18      	it	ne
 800ee74:	f04a 0a02 	orrne.w	sl, sl, #2
 800ee78:	1b76      	subs	r6, r6, r5
 800ee7a:	f7ff fded 	bl	800ea58 <rshift>
 800ee7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ee82:	2702      	movs	r7, #2
 800ee84:	f1ba 0f00 	cmp.w	sl, #0
 800ee88:	d048      	beq.n	800ef1c <__gethex+0x3f4>
 800ee8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ee8e:	2b02      	cmp	r3, #2
 800ee90:	d015      	beq.n	800eebe <__gethex+0x396>
 800ee92:	2b03      	cmp	r3, #3
 800ee94:	d017      	beq.n	800eec6 <__gethex+0x39e>
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d109      	bne.n	800eeae <__gethex+0x386>
 800ee9a:	f01a 0f02 	tst.w	sl, #2
 800ee9e:	d006      	beq.n	800eeae <__gethex+0x386>
 800eea0:	f8d9 0000 	ldr.w	r0, [r9]
 800eea4:	ea4a 0a00 	orr.w	sl, sl, r0
 800eea8:	f01a 0f01 	tst.w	sl, #1
 800eeac:	d10e      	bne.n	800eecc <__gethex+0x3a4>
 800eeae:	f047 0710 	orr.w	r7, r7, #16
 800eeb2:	e033      	b.n	800ef1c <__gethex+0x3f4>
 800eeb4:	f04f 0a01 	mov.w	sl, #1
 800eeb8:	e7d0      	b.n	800ee5c <__gethex+0x334>
 800eeba:	2701      	movs	r7, #1
 800eebc:	e7e2      	b.n	800ee84 <__gethex+0x35c>
 800eebe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eec0:	f1c3 0301 	rsb	r3, r3, #1
 800eec4:	9315      	str	r3, [sp, #84]	; 0x54
 800eec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d0f0      	beq.n	800eeae <__gethex+0x386>
 800eecc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eed0:	f104 0314 	add.w	r3, r4, #20
 800eed4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eed8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eedc:	f04f 0c00 	mov.w	ip, #0
 800eee0:	4618      	mov	r0, r3
 800eee2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eee6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eeea:	d01c      	beq.n	800ef26 <__gethex+0x3fe>
 800eeec:	3201      	adds	r2, #1
 800eeee:	6002      	str	r2, [r0, #0]
 800eef0:	2f02      	cmp	r7, #2
 800eef2:	f104 0314 	add.w	r3, r4, #20
 800eef6:	d13f      	bne.n	800ef78 <__gethex+0x450>
 800eef8:	f8d8 2000 	ldr.w	r2, [r8]
 800eefc:	3a01      	subs	r2, #1
 800eefe:	42b2      	cmp	r2, r6
 800ef00:	d10a      	bne.n	800ef18 <__gethex+0x3f0>
 800ef02:	1171      	asrs	r1, r6, #5
 800ef04:	2201      	movs	r2, #1
 800ef06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef0a:	f006 061f 	and.w	r6, r6, #31
 800ef0e:	fa02 f606 	lsl.w	r6, r2, r6
 800ef12:	421e      	tst	r6, r3
 800ef14:	bf18      	it	ne
 800ef16:	4617      	movne	r7, r2
 800ef18:	f047 0720 	orr.w	r7, r7, #32
 800ef1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef1e:	601c      	str	r4, [r3, #0]
 800ef20:	9b04      	ldr	r3, [sp, #16]
 800ef22:	601d      	str	r5, [r3, #0]
 800ef24:	e695      	b.n	800ec52 <__gethex+0x12a>
 800ef26:	4299      	cmp	r1, r3
 800ef28:	f843 cc04 	str.w	ip, [r3, #-4]
 800ef2c:	d8d8      	bhi.n	800eee0 <__gethex+0x3b8>
 800ef2e:	68a3      	ldr	r3, [r4, #8]
 800ef30:	459b      	cmp	fp, r3
 800ef32:	db19      	blt.n	800ef68 <__gethex+0x440>
 800ef34:	6861      	ldr	r1, [r4, #4]
 800ef36:	ee18 0a10 	vmov	r0, s16
 800ef3a:	3101      	adds	r1, #1
 800ef3c:	f000 f99c 	bl	800f278 <_Balloc>
 800ef40:	4681      	mov	r9, r0
 800ef42:	b918      	cbnz	r0, 800ef4c <__gethex+0x424>
 800ef44:	4b1a      	ldr	r3, [pc, #104]	; (800efb0 <__gethex+0x488>)
 800ef46:	4602      	mov	r2, r0
 800ef48:	2184      	movs	r1, #132	; 0x84
 800ef4a:	e6a8      	b.n	800ec9e <__gethex+0x176>
 800ef4c:	6922      	ldr	r2, [r4, #16]
 800ef4e:	3202      	adds	r2, #2
 800ef50:	f104 010c 	add.w	r1, r4, #12
 800ef54:	0092      	lsls	r2, r2, #2
 800ef56:	300c      	adds	r0, #12
 800ef58:	f7fc feb5 	bl	800bcc6 <memcpy>
 800ef5c:	4621      	mov	r1, r4
 800ef5e:	ee18 0a10 	vmov	r0, s16
 800ef62:	f000 f9c9 	bl	800f2f8 <_Bfree>
 800ef66:	464c      	mov	r4, r9
 800ef68:	6923      	ldr	r3, [r4, #16]
 800ef6a:	1c5a      	adds	r2, r3, #1
 800ef6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef70:	6122      	str	r2, [r4, #16]
 800ef72:	2201      	movs	r2, #1
 800ef74:	615a      	str	r2, [r3, #20]
 800ef76:	e7bb      	b.n	800eef0 <__gethex+0x3c8>
 800ef78:	6922      	ldr	r2, [r4, #16]
 800ef7a:	455a      	cmp	r2, fp
 800ef7c:	dd0b      	ble.n	800ef96 <__gethex+0x46e>
 800ef7e:	2101      	movs	r1, #1
 800ef80:	4620      	mov	r0, r4
 800ef82:	f7ff fd69 	bl	800ea58 <rshift>
 800ef86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef8a:	3501      	adds	r5, #1
 800ef8c:	42ab      	cmp	r3, r5
 800ef8e:	f6ff aed0 	blt.w	800ed32 <__gethex+0x20a>
 800ef92:	2701      	movs	r7, #1
 800ef94:	e7c0      	b.n	800ef18 <__gethex+0x3f0>
 800ef96:	f016 061f 	ands.w	r6, r6, #31
 800ef9a:	d0fa      	beq.n	800ef92 <__gethex+0x46a>
 800ef9c:	449a      	add	sl, r3
 800ef9e:	f1c6 0620 	rsb	r6, r6, #32
 800efa2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800efa6:	f000 fa5d 	bl	800f464 <__hi0bits>
 800efaa:	42b0      	cmp	r0, r6
 800efac:	dbe7      	blt.n	800ef7e <__gethex+0x456>
 800efae:	e7f0      	b.n	800ef92 <__gethex+0x46a>
 800efb0:	08011224 	.word	0x08011224

0800efb4 <L_shift>:
 800efb4:	f1c2 0208 	rsb	r2, r2, #8
 800efb8:	0092      	lsls	r2, r2, #2
 800efba:	b570      	push	{r4, r5, r6, lr}
 800efbc:	f1c2 0620 	rsb	r6, r2, #32
 800efc0:	6843      	ldr	r3, [r0, #4]
 800efc2:	6804      	ldr	r4, [r0, #0]
 800efc4:	fa03 f506 	lsl.w	r5, r3, r6
 800efc8:	432c      	orrs	r4, r5
 800efca:	40d3      	lsrs	r3, r2
 800efcc:	6004      	str	r4, [r0, #0]
 800efce:	f840 3f04 	str.w	r3, [r0, #4]!
 800efd2:	4288      	cmp	r0, r1
 800efd4:	d3f4      	bcc.n	800efc0 <L_shift+0xc>
 800efd6:	bd70      	pop	{r4, r5, r6, pc}

0800efd8 <__match>:
 800efd8:	b530      	push	{r4, r5, lr}
 800efda:	6803      	ldr	r3, [r0, #0]
 800efdc:	3301      	adds	r3, #1
 800efde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efe2:	b914      	cbnz	r4, 800efea <__match+0x12>
 800efe4:	6003      	str	r3, [r0, #0]
 800efe6:	2001      	movs	r0, #1
 800efe8:	bd30      	pop	{r4, r5, pc}
 800efea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eff2:	2d19      	cmp	r5, #25
 800eff4:	bf98      	it	ls
 800eff6:	3220      	addls	r2, #32
 800eff8:	42a2      	cmp	r2, r4
 800effa:	d0f0      	beq.n	800efde <__match+0x6>
 800effc:	2000      	movs	r0, #0
 800effe:	e7f3      	b.n	800efe8 <__match+0x10>

0800f000 <__hexnan>:
 800f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f004:	680b      	ldr	r3, [r1, #0]
 800f006:	6801      	ldr	r1, [r0, #0]
 800f008:	115e      	asrs	r6, r3, #5
 800f00a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f00e:	f013 031f 	ands.w	r3, r3, #31
 800f012:	b087      	sub	sp, #28
 800f014:	bf18      	it	ne
 800f016:	3604      	addne	r6, #4
 800f018:	2500      	movs	r5, #0
 800f01a:	1f37      	subs	r7, r6, #4
 800f01c:	4682      	mov	sl, r0
 800f01e:	4690      	mov	r8, r2
 800f020:	9301      	str	r3, [sp, #4]
 800f022:	f846 5c04 	str.w	r5, [r6, #-4]
 800f026:	46b9      	mov	r9, r7
 800f028:	463c      	mov	r4, r7
 800f02a:	9502      	str	r5, [sp, #8]
 800f02c:	46ab      	mov	fp, r5
 800f02e:	784a      	ldrb	r2, [r1, #1]
 800f030:	1c4b      	adds	r3, r1, #1
 800f032:	9303      	str	r3, [sp, #12]
 800f034:	b342      	cbz	r2, 800f088 <__hexnan+0x88>
 800f036:	4610      	mov	r0, r2
 800f038:	9105      	str	r1, [sp, #20]
 800f03a:	9204      	str	r2, [sp, #16]
 800f03c:	f7ff fd5e 	bl	800eafc <__hexdig_fun>
 800f040:	2800      	cmp	r0, #0
 800f042:	d14f      	bne.n	800f0e4 <__hexnan+0xe4>
 800f044:	9a04      	ldr	r2, [sp, #16]
 800f046:	9905      	ldr	r1, [sp, #20]
 800f048:	2a20      	cmp	r2, #32
 800f04a:	d818      	bhi.n	800f07e <__hexnan+0x7e>
 800f04c:	9b02      	ldr	r3, [sp, #8]
 800f04e:	459b      	cmp	fp, r3
 800f050:	dd13      	ble.n	800f07a <__hexnan+0x7a>
 800f052:	454c      	cmp	r4, r9
 800f054:	d206      	bcs.n	800f064 <__hexnan+0x64>
 800f056:	2d07      	cmp	r5, #7
 800f058:	dc04      	bgt.n	800f064 <__hexnan+0x64>
 800f05a:	462a      	mov	r2, r5
 800f05c:	4649      	mov	r1, r9
 800f05e:	4620      	mov	r0, r4
 800f060:	f7ff ffa8 	bl	800efb4 <L_shift>
 800f064:	4544      	cmp	r4, r8
 800f066:	d950      	bls.n	800f10a <__hexnan+0x10a>
 800f068:	2300      	movs	r3, #0
 800f06a:	f1a4 0904 	sub.w	r9, r4, #4
 800f06e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f072:	f8cd b008 	str.w	fp, [sp, #8]
 800f076:	464c      	mov	r4, r9
 800f078:	461d      	mov	r5, r3
 800f07a:	9903      	ldr	r1, [sp, #12]
 800f07c:	e7d7      	b.n	800f02e <__hexnan+0x2e>
 800f07e:	2a29      	cmp	r2, #41	; 0x29
 800f080:	d156      	bne.n	800f130 <__hexnan+0x130>
 800f082:	3102      	adds	r1, #2
 800f084:	f8ca 1000 	str.w	r1, [sl]
 800f088:	f1bb 0f00 	cmp.w	fp, #0
 800f08c:	d050      	beq.n	800f130 <__hexnan+0x130>
 800f08e:	454c      	cmp	r4, r9
 800f090:	d206      	bcs.n	800f0a0 <__hexnan+0xa0>
 800f092:	2d07      	cmp	r5, #7
 800f094:	dc04      	bgt.n	800f0a0 <__hexnan+0xa0>
 800f096:	462a      	mov	r2, r5
 800f098:	4649      	mov	r1, r9
 800f09a:	4620      	mov	r0, r4
 800f09c:	f7ff ff8a 	bl	800efb4 <L_shift>
 800f0a0:	4544      	cmp	r4, r8
 800f0a2:	d934      	bls.n	800f10e <__hexnan+0x10e>
 800f0a4:	f1a8 0204 	sub.w	r2, r8, #4
 800f0a8:	4623      	mov	r3, r4
 800f0aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800f0ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800f0b2:	429f      	cmp	r7, r3
 800f0b4:	d2f9      	bcs.n	800f0aa <__hexnan+0xaa>
 800f0b6:	1b3b      	subs	r3, r7, r4
 800f0b8:	f023 0303 	bic.w	r3, r3, #3
 800f0bc:	3304      	adds	r3, #4
 800f0be:	3401      	adds	r4, #1
 800f0c0:	3e03      	subs	r6, #3
 800f0c2:	42b4      	cmp	r4, r6
 800f0c4:	bf88      	it	hi
 800f0c6:	2304      	movhi	r3, #4
 800f0c8:	4443      	add	r3, r8
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	f843 2b04 	str.w	r2, [r3], #4
 800f0d0:	429f      	cmp	r7, r3
 800f0d2:	d2fb      	bcs.n	800f0cc <__hexnan+0xcc>
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	b91b      	cbnz	r3, 800f0e0 <__hexnan+0xe0>
 800f0d8:	4547      	cmp	r7, r8
 800f0da:	d127      	bne.n	800f12c <__hexnan+0x12c>
 800f0dc:	2301      	movs	r3, #1
 800f0de:	603b      	str	r3, [r7, #0]
 800f0e0:	2005      	movs	r0, #5
 800f0e2:	e026      	b.n	800f132 <__hexnan+0x132>
 800f0e4:	3501      	adds	r5, #1
 800f0e6:	2d08      	cmp	r5, #8
 800f0e8:	f10b 0b01 	add.w	fp, fp, #1
 800f0ec:	dd06      	ble.n	800f0fc <__hexnan+0xfc>
 800f0ee:	4544      	cmp	r4, r8
 800f0f0:	d9c3      	bls.n	800f07a <__hexnan+0x7a>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800f0f8:	2501      	movs	r5, #1
 800f0fa:	3c04      	subs	r4, #4
 800f0fc:	6822      	ldr	r2, [r4, #0]
 800f0fe:	f000 000f 	and.w	r0, r0, #15
 800f102:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f106:	6022      	str	r2, [r4, #0]
 800f108:	e7b7      	b.n	800f07a <__hexnan+0x7a>
 800f10a:	2508      	movs	r5, #8
 800f10c:	e7b5      	b.n	800f07a <__hexnan+0x7a>
 800f10e:	9b01      	ldr	r3, [sp, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d0df      	beq.n	800f0d4 <__hexnan+0xd4>
 800f114:	f04f 32ff 	mov.w	r2, #4294967295
 800f118:	f1c3 0320 	rsb	r3, r3, #32
 800f11c:	fa22 f303 	lsr.w	r3, r2, r3
 800f120:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f124:	401a      	ands	r2, r3
 800f126:	f846 2c04 	str.w	r2, [r6, #-4]
 800f12a:	e7d3      	b.n	800f0d4 <__hexnan+0xd4>
 800f12c:	3f04      	subs	r7, #4
 800f12e:	e7d1      	b.n	800f0d4 <__hexnan+0xd4>
 800f130:	2004      	movs	r0, #4
 800f132:	b007      	add	sp, #28
 800f134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f138 <_localeconv_r>:
 800f138:	4800      	ldr	r0, [pc, #0]	; (800f13c <_localeconv_r+0x4>)
 800f13a:	4770      	bx	lr
 800f13c:	200001d8 	.word	0x200001d8

0800f140 <_lseek_r>:
 800f140:	b538      	push	{r3, r4, r5, lr}
 800f142:	4d07      	ldr	r5, [pc, #28]	; (800f160 <_lseek_r+0x20>)
 800f144:	4604      	mov	r4, r0
 800f146:	4608      	mov	r0, r1
 800f148:	4611      	mov	r1, r2
 800f14a:	2200      	movs	r2, #0
 800f14c:	602a      	str	r2, [r5, #0]
 800f14e:	461a      	mov	r2, r3
 800f150:	f001 f9ac 	bl	80104ac <_lseek>
 800f154:	1c43      	adds	r3, r0, #1
 800f156:	d102      	bne.n	800f15e <_lseek_r+0x1e>
 800f158:	682b      	ldr	r3, [r5, #0]
 800f15a:	b103      	cbz	r3, 800f15e <_lseek_r+0x1e>
 800f15c:	6023      	str	r3, [r4, #0]
 800f15e:	bd38      	pop	{r3, r4, r5, pc}
 800f160:	200013bc 	.word	0x200013bc

0800f164 <__swhatbuf_r>:
 800f164:	b570      	push	{r4, r5, r6, lr}
 800f166:	460e      	mov	r6, r1
 800f168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f16c:	2900      	cmp	r1, #0
 800f16e:	b096      	sub	sp, #88	; 0x58
 800f170:	4614      	mov	r4, r2
 800f172:	461d      	mov	r5, r3
 800f174:	da07      	bge.n	800f186 <__swhatbuf_r+0x22>
 800f176:	2300      	movs	r3, #0
 800f178:	602b      	str	r3, [r5, #0]
 800f17a:	89b3      	ldrh	r3, [r6, #12]
 800f17c:	061a      	lsls	r2, r3, #24
 800f17e:	d410      	bmi.n	800f1a2 <__swhatbuf_r+0x3e>
 800f180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f184:	e00e      	b.n	800f1a4 <__swhatbuf_r+0x40>
 800f186:	466a      	mov	r2, sp
 800f188:	f001 f8b2 	bl	80102f0 <_fstat_r>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	dbf2      	blt.n	800f176 <__swhatbuf_r+0x12>
 800f190:	9a01      	ldr	r2, [sp, #4]
 800f192:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f196:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f19a:	425a      	negs	r2, r3
 800f19c:	415a      	adcs	r2, r3
 800f19e:	602a      	str	r2, [r5, #0]
 800f1a0:	e7ee      	b.n	800f180 <__swhatbuf_r+0x1c>
 800f1a2:	2340      	movs	r3, #64	; 0x40
 800f1a4:	2000      	movs	r0, #0
 800f1a6:	6023      	str	r3, [r4, #0]
 800f1a8:	b016      	add	sp, #88	; 0x58
 800f1aa:	bd70      	pop	{r4, r5, r6, pc}

0800f1ac <__smakebuf_r>:
 800f1ac:	898b      	ldrh	r3, [r1, #12]
 800f1ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f1b0:	079d      	lsls	r5, r3, #30
 800f1b2:	4606      	mov	r6, r0
 800f1b4:	460c      	mov	r4, r1
 800f1b6:	d507      	bpl.n	800f1c8 <__smakebuf_r+0x1c>
 800f1b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f1bc:	6023      	str	r3, [r4, #0]
 800f1be:	6123      	str	r3, [r4, #16]
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	6163      	str	r3, [r4, #20]
 800f1c4:	b002      	add	sp, #8
 800f1c6:	bd70      	pop	{r4, r5, r6, pc}
 800f1c8:	ab01      	add	r3, sp, #4
 800f1ca:	466a      	mov	r2, sp
 800f1cc:	f7ff ffca 	bl	800f164 <__swhatbuf_r>
 800f1d0:	9900      	ldr	r1, [sp, #0]
 800f1d2:	4605      	mov	r5, r0
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	f7fc fd8d 	bl	800bcf4 <_malloc_r>
 800f1da:	b948      	cbnz	r0, 800f1f0 <__smakebuf_r+0x44>
 800f1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1e0:	059a      	lsls	r2, r3, #22
 800f1e2:	d4ef      	bmi.n	800f1c4 <__smakebuf_r+0x18>
 800f1e4:	f023 0303 	bic.w	r3, r3, #3
 800f1e8:	f043 0302 	orr.w	r3, r3, #2
 800f1ec:	81a3      	strh	r3, [r4, #12]
 800f1ee:	e7e3      	b.n	800f1b8 <__smakebuf_r+0xc>
 800f1f0:	4b0d      	ldr	r3, [pc, #52]	; (800f228 <__smakebuf_r+0x7c>)
 800f1f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f1f4:	89a3      	ldrh	r3, [r4, #12]
 800f1f6:	6020      	str	r0, [r4, #0]
 800f1f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1fc:	81a3      	strh	r3, [r4, #12]
 800f1fe:	9b00      	ldr	r3, [sp, #0]
 800f200:	6163      	str	r3, [r4, #20]
 800f202:	9b01      	ldr	r3, [sp, #4]
 800f204:	6120      	str	r0, [r4, #16]
 800f206:	b15b      	cbz	r3, 800f220 <__smakebuf_r+0x74>
 800f208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f20c:	4630      	mov	r0, r6
 800f20e:	f001 f881 	bl	8010314 <_isatty_r>
 800f212:	b128      	cbz	r0, 800f220 <__smakebuf_r+0x74>
 800f214:	89a3      	ldrh	r3, [r4, #12]
 800f216:	f023 0303 	bic.w	r3, r3, #3
 800f21a:	f043 0301 	orr.w	r3, r3, #1
 800f21e:	81a3      	strh	r3, [r4, #12]
 800f220:	89a0      	ldrh	r0, [r4, #12]
 800f222:	4305      	orrs	r5, r0
 800f224:	81a5      	strh	r5, [r4, #12]
 800f226:	e7cd      	b.n	800f1c4 <__smakebuf_r+0x18>
 800f228:	0800bad5 	.word	0x0800bad5

0800f22c <malloc>:
 800f22c:	4b02      	ldr	r3, [pc, #8]	; (800f238 <malloc+0xc>)
 800f22e:	4601      	mov	r1, r0
 800f230:	6818      	ldr	r0, [r3, #0]
 800f232:	f7fc bd5f 	b.w	800bcf4 <_malloc_r>
 800f236:	bf00      	nop
 800f238:	20000080 	.word	0x20000080

0800f23c <__ascii_mbtowc>:
 800f23c:	b082      	sub	sp, #8
 800f23e:	b901      	cbnz	r1, 800f242 <__ascii_mbtowc+0x6>
 800f240:	a901      	add	r1, sp, #4
 800f242:	b142      	cbz	r2, 800f256 <__ascii_mbtowc+0x1a>
 800f244:	b14b      	cbz	r3, 800f25a <__ascii_mbtowc+0x1e>
 800f246:	7813      	ldrb	r3, [r2, #0]
 800f248:	600b      	str	r3, [r1, #0]
 800f24a:	7812      	ldrb	r2, [r2, #0]
 800f24c:	1e10      	subs	r0, r2, #0
 800f24e:	bf18      	it	ne
 800f250:	2001      	movne	r0, #1
 800f252:	b002      	add	sp, #8
 800f254:	4770      	bx	lr
 800f256:	4610      	mov	r0, r2
 800f258:	e7fb      	b.n	800f252 <__ascii_mbtowc+0x16>
 800f25a:	f06f 0001 	mvn.w	r0, #1
 800f25e:	e7f8      	b.n	800f252 <__ascii_mbtowc+0x16>

0800f260 <__malloc_lock>:
 800f260:	4801      	ldr	r0, [pc, #4]	; (800f268 <__malloc_lock+0x8>)
 800f262:	f7fc bd2e 	b.w	800bcc2 <__retarget_lock_acquire_recursive>
 800f266:	bf00      	nop
 800f268:	200013b4 	.word	0x200013b4

0800f26c <__malloc_unlock>:
 800f26c:	4801      	ldr	r0, [pc, #4]	; (800f274 <__malloc_unlock+0x8>)
 800f26e:	f7fc bd29 	b.w	800bcc4 <__retarget_lock_release_recursive>
 800f272:	bf00      	nop
 800f274:	200013b4 	.word	0x200013b4

0800f278 <_Balloc>:
 800f278:	b570      	push	{r4, r5, r6, lr}
 800f27a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f27c:	4604      	mov	r4, r0
 800f27e:	460d      	mov	r5, r1
 800f280:	b976      	cbnz	r6, 800f2a0 <_Balloc+0x28>
 800f282:	2010      	movs	r0, #16
 800f284:	f7ff ffd2 	bl	800f22c <malloc>
 800f288:	4602      	mov	r2, r0
 800f28a:	6260      	str	r0, [r4, #36]	; 0x24
 800f28c:	b920      	cbnz	r0, 800f298 <_Balloc+0x20>
 800f28e:	4b18      	ldr	r3, [pc, #96]	; (800f2f0 <_Balloc+0x78>)
 800f290:	4818      	ldr	r0, [pc, #96]	; (800f2f4 <_Balloc+0x7c>)
 800f292:	2166      	movs	r1, #102	; 0x66
 800f294:	f000 fffc 	bl	8010290 <__assert_func>
 800f298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f29c:	6006      	str	r6, [r0, #0]
 800f29e:	60c6      	str	r6, [r0, #12]
 800f2a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f2a2:	68f3      	ldr	r3, [r6, #12]
 800f2a4:	b183      	cbz	r3, 800f2c8 <_Balloc+0x50>
 800f2a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2a8:	68db      	ldr	r3, [r3, #12]
 800f2aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f2ae:	b9b8      	cbnz	r0, 800f2e0 <_Balloc+0x68>
 800f2b0:	2101      	movs	r1, #1
 800f2b2:	fa01 f605 	lsl.w	r6, r1, r5
 800f2b6:	1d72      	adds	r2, r6, #5
 800f2b8:	0092      	lsls	r2, r2, #2
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	f000 fc97 	bl	800fbee <_calloc_r>
 800f2c0:	b160      	cbz	r0, 800f2dc <_Balloc+0x64>
 800f2c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f2c6:	e00e      	b.n	800f2e6 <_Balloc+0x6e>
 800f2c8:	2221      	movs	r2, #33	; 0x21
 800f2ca:	2104      	movs	r1, #4
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	f000 fc8e 	bl	800fbee <_calloc_r>
 800f2d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2d4:	60f0      	str	r0, [r6, #12]
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d1e4      	bne.n	800f2a6 <_Balloc+0x2e>
 800f2dc:	2000      	movs	r0, #0
 800f2de:	bd70      	pop	{r4, r5, r6, pc}
 800f2e0:	6802      	ldr	r2, [r0, #0]
 800f2e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f2ec:	e7f7      	b.n	800f2de <_Balloc+0x66>
 800f2ee:	bf00      	nop
 800f2f0:	080111ae 	.word	0x080111ae
 800f2f4:	080112b4 	.word	0x080112b4

0800f2f8 <_Bfree>:
 800f2f8:	b570      	push	{r4, r5, r6, lr}
 800f2fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f2fc:	4605      	mov	r5, r0
 800f2fe:	460c      	mov	r4, r1
 800f300:	b976      	cbnz	r6, 800f320 <_Bfree+0x28>
 800f302:	2010      	movs	r0, #16
 800f304:	f7ff ff92 	bl	800f22c <malloc>
 800f308:	4602      	mov	r2, r0
 800f30a:	6268      	str	r0, [r5, #36]	; 0x24
 800f30c:	b920      	cbnz	r0, 800f318 <_Bfree+0x20>
 800f30e:	4b09      	ldr	r3, [pc, #36]	; (800f334 <_Bfree+0x3c>)
 800f310:	4809      	ldr	r0, [pc, #36]	; (800f338 <_Bfree+0x40>)
 800f312:	218a      	movs	r1, #138	; 0x8a
 800f314:	f000 ffbc 	bl	8010290 <__assert_func>
 800f318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f31c:	6006      	str	r6, [r0, #0]
 800f31e:	60c6      	str	r6, [r0, #12]
 800f320:	b13c      	cbz	r4, 800f332 <_Bfree+0x3a>
 800f322:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f324:	6862      	ldr	r2, [r4, #4]
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f32c:	6021      	str	r1, [r4, #0]
 800f32e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f332:	bd70      	pop	{r4, r5, r6, pc}
 800f334:	080111ae 	.word	0x080111ae
 800f338:	080112b4 	.word	0x080112b4

0800f33c <__multadd>:
 800f33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f340:	690e      	ldr	r6, [r1, #16]
 800f342:	4607      	mov	r7, r0
 800f344:	4698      	mov	r8, r3
 800f346:	460c      	mov	r4, r1
 800f348:	f101 0014 	add.w	r0, r1, #20
 800f34c:	2300      	movs	r3, #0
 800f34e:	6805      	ldr	r5, [r0, #0]
 800f350:	b2a9      	uxth	r1, r5
 800f352:	fb02 8101 	mla	r1, r2, r1, r8
 800f356:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f35a:	0c2d      	lsrs	r5, r5, #16
 800f35c:	fb02 c505 	mla	r5, r2, r5, ip
 800f360:	b289      	uxth	r1, r1
 800f362:	3301      	adds	r3, #1
 800f364:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f368:	429e      	cmp	r6, r3
 800f36a:	f840 1b04 	str.w	r1, [r0], #4
 800f36e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f372:	dcec      	bgt.n	800f34e <__multadd+0x12>
 800f374:	f1b8 0f00 	cmp.w	r8, #0
 800f378:	d022      	beq.n	800f3c0 <__multadd+0x84>
 800f37a:	68a3      	ldr	r3, [r4, #8]
 800f37c:	42b3      	cmp	r3, r6
 800f37e:	dc19      	bgt.n	800f3b4 <__multadd+0x78>
 800f380:	6861      	ldr	r1, [r4, #4]
 800f382:	4638      	mov	r0, r7
 800f384:	3101      	adds	r1, #1
 800f386:	f7ff ff77 	bl	800f278 <_Balloc>
 800f38a:	4605      	mov	r5, r0
 800f38c:	b928      	cbnz	r0, 800f39a <__multadd+0x5e>
 800f38e:	4602      	mov	r2, r0
 800f390:	4b0d      	ldr	r3, [pc, #52]	; (800f3c8 <__multadd+0x8c>)
 800f392:	480e      	ldr	r0, [pc, #56]	; (800f3cc <__multadd+0x90>)
 800f394:	21b5      	movs	r1, #181	; 0xb5
 800f396:	f000 ff7b 	bl	8010290 <__assert_func>
 800f39a:	6922      	ldr	r2, [r4, #16]
 800f39c:	3202      	adds	r2, #2
 800f39e:	f104 010c 	add.w	r1, r4, #12
 800f3a2:	0092      	lsls	r2, r2, #2
 800f3a4:	300c      	adds	r0, #12
 800f3a6:	f7fc fc8e 	bl	800bcc6 <memcpy>
 800f3aa:	4621      	mov	r1, r4
 800f3ac:	4638      	mov	r0, r7
 800f3ae:	f7ff ffa3 	bl	800f2f8 <_Bfree>
 800f3b2:	462c      	mov	r4, r5
 800f3b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f3b8:	3601      	adds	r6, #1
 800f3ba:	f8c3 8014 	str.w	r8, [r3, #20]
 800f3be:	6126      	str	r6, [r4, #16]
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c6:	bf00      	nop
 800f3c8:	08011224 	.word	0x08011224
 800f3cc:	080112b4 	.word	0x080112b4

0800f3d0 <__s2b>:
 800f3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3d4:	460c      	mov	r4, r1
 800f3d6:	4615      	mov	r5, r2
 800f3d8:	461f      	mov	r7, r3
 800f3da:	2209      	movs	r2, #9
 800f3dc:	3308      	adds	r3, #8
 800f3de:	4606      	mov	r6, r0
 800f3e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	db09      	blt.n	800f400 <__s2b+0x30>
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	f7ff ff43 	bl	800f278 <_Balloc>
 800f3f2:	b940      	cbnz	r0, 800f406 <__s2b+0x36>
 800f3f4:	4602      	mov	r2, r0
 800f3f6:	4b19      	ldr	r3, [pc, #100]	; (800f45c <__s2b+0x8c>)
 800f3f8:	4819      	ldr	r0, [pc, #100]	; (800f460 <__s2b+0x90>)
 800f3fa:	21ce      	movs	r1, #206	; 0xce
 800f3fc:	f000 ff48 	bl	8010290 <__assert_func>
 800f400:	0052      	lsls	r2, r2, #1
 800f402:	3101      	adds	r1, #1
 800f404:	e7f0      	b.n	800f3e8 <__s2b+0x18>
 800f406:	9b08      	ldr	r3, [sp, #32]
 800f408:	6143      	str	r3, [r0, #20]
 800f40a:	2d09      	cmp	r5, #9
 800f40c:	f04f 0301 	mov.w	r3, #1
 800f410:	6103      	str	r3, [r0, #16]
 800f412:	dd16      	ble.n	800f442 <__s2b+0x72>
 800f414:	f104 0909 	add.w	r9, r4, #9
 800f418:	46c8      	mov	r8, r9
 800f41a:	442c      	add	r4, r5
 800f41c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f420:	4601      	mov	r1, r0
 800f422:	3b30      	subs	r3, #48	; 0x30
 800f424:	220a      	movs	r2, #10
 800f426:	4630      	mov	r0, r6
 800f428:	f7ff ff88 	bl	800f33c <__multadd>
 800f42c:	45a0      	cmp	r8, r4
 800f42e:	d1f5      	bne.n	800f41c <__s2b+0x4c>
 800f430:	f1a5 0408 	sub.w	r4, r5, #8
 800f434:	444c      	add	r4, r9
 800f436:	1b2d      	subs	r5, r5, r4
 800f438:	1963      	adds	r3, r4, r5
 800f43a:	42bb      	cmp	r3, r7
 800f43c:	db04      	blt.n	800f448 <__s2b+0x78>
 800f43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f442:	340a      	adds	r4, #10
 800f444:	2509      	movs	r5, #9
 800f446:	e7f6      	b.n	800f436 <__s2b+0x66>
 800f448:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f44c:	4601      	mov	r1, r0
 800f44e:	3b30      	subs	r3, #48	; 0x30
 800f450:	220a      	movs	r2, #10
 800f452:	4630      	mov	r0, r6
 800f454:	f7ff ff72 	bl	800f33c <__multadd>
 800f458:	e7ee      	b.n	800f438 <__s2b+0x68>
 800f45a:	bf00      	nop
 800f45c:	08011224 	.word	0x08011224
 800f460:	080112b4 	.word	0x080112b4

0800f464 <__hi0bits>:
 800f464:	0c03      	lsrs	r3, r0, #16
 800f466:	041b      	lsls	r3, r3, #16
 800f468:	b9d3      	cbnz	r3, 800f4a0 <__hi0bits+0x3c>
 800f46a:	0400      	lsls	r0, r0, #16
 800f46c:	2310      	movs	r3, #16
 800f46e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f472:	bf04      	itt	eq
 800f474:	0200      	lsleq	r0, r0, #8
 800f476:	3308      	addeq	r3, #8
 800f478:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f47c:	bf04      	itt	eq
 800f47e:	0100      	lsleq	r0, r0, #4
 800f480:	3304      	addeq	r3, #4
 800f482:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f486:	bf04      	itt	eq
 800f488:	0080      	lsleq	r0, r0, #2
 800f48a:	3302      	addeq	r3, #2
 800f48c:	2800      	cmp	r0, #0
 800f48e:	db05      	blt.n	800f49c <__hi0bits+0x38>
 800f490:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f494:	f103 0301 	add.w	r3, r3, #1
 800f498:	bf08      	it	eq
 800f49a:	2320      	moveq	r3, #32
 800f49c:	4618      	mov	r0, r3
 800f49e:	4770      	bx	lr
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	e7e4      	b.n	800f46e <__hi0bits+0xa>

0800f4a4 <__lo0bits>:
 800f4a4:	6803      	ldr	r3, [r0, #0]
 800f4a6:	f013 0207 	ands.w	r2, r3, #7
 800f4aa:	4601      	mov	r1, r0
 800f4ac:	d00b      	beq.n	800f4c6 <__lo0bits+0x22>
 800f4ae:	07da      	lsls	r2, r3, #31
 800f4b0:	d424      	bmi.n	800f4fc <__lo0bits+0x58>
 800f4b2:	0798      	lsls	r0, r3, #30
 800f4b4:	bf49      	itett	mi
 800f4b6:	085b      	lsrmi	r3, r3, #1
 800f4b8:	089b      	lsrpl	r3, r3, #2
 800f4ba:	2001      	movmi	r0, #1
 800f4bc:	600b      	strmi	r3, [r1, #0]
 800f4be:	bf5c      	itt	pl
 800f4c0:	600b      	strpl	r3, [r1, #0]
 800f4c2:	2002      	movpl	r0, #2
 800f4c4:	4770      	bx	lr
 800f4c6:	b298      	uxth	r0, r3
 800f4c8:	b9b0      	cbnz	r0, 800f4f8 <__lo0bits+0x54>
 800f4ca:	0c1b      	lsrs	r3, r3, #16
 800f4cc:	2010      	movs	r0, #16
 800f4ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f4d2:	bf04      	itt	eq
 800f4d4:	0a1b      	lsreq	r3, r3, #8
 800f4d6:	3008      	addeq	r0, #8
 800f4d8:	071a      	lsls	r2, r3, #28
 800f4da:	bf04      	itt	eq
 800f4dc:	091b      	lsreq	r3, r3, #4
 800f4de:	3004      	addeq	r0, #4
 800f4e0:	079a      	lsls	r2, r3, #30
 800f4e2:	bf04      	itt	eq
 800f4e4:	089b      	lsreq	r3, r3, #2
 800f4e6:	3002      	addeq	r0, #2
 800f4e8:	07da      	lsls	r2, r3, #31
 800f4ea:	d403      	bmi.n	800f4f4 <__lo0bits+0x50>
 800f4ec:	085b      	lsrs	r3, r3, #1
 800f4ee:	f100 0001 	add.w	r0, r0, #1
 800f4f2:	d005      	beq.n	800f500 <__lo0bits+0x5c>
 800f4f4:	600b      	str	r3, [r1, #0]
 800f4f6:	4770      	bx	lr
 800f4f8:	4610      	mov	r0, r2
 800f4fa:	e7e8      	b.n	800f4ce <__lo0bits+0x2a>
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	4770      	bx	lr
 800f500:	2020      	movs	r0, #32
 800f502:	4770      	bx	lr

0800f504 <__i2b>:
 800f504:	b510      	push	{r4, lr}
 800f506:	460c      	mov	r4, r1
 800f508:	2101      	movs	r1, #1
 800f50a:	f7ff feb5 	bl	800f278 <_Balloc>
 800f50e:	4602      	mov	r2, r0
 800f510:	b928      	cbnz	r0, 800f51e <__i2b+0x1a>
 800f512:	4b05      	ldr	r3, [pc, #20]	; (800f528 <__i2b+0x24>)
 800f514:	4805      	ldr	r0, [pc, #20]	; (800f52c <__i2b+0x28>)
 800f516:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f51a:	f000 feb9 	bl	8010290 <__assert_func>
 800f51e:	2301      	movs	r3, #1
 800f520:	6144      	str	r4, [r0, #20]
 800f522:	6103      	str	r3, [r0, #16]
 800f524:	bd10      	pop	{r4, pc}
 800f526:	bf00      	nop
 800f528:	08011224 	.word	0x08011224
 800f52c:	080112b4 	.word	0x080112b4

0800f530 <__multiply>:
 800f530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f534:	4614      	mov	r4, r2
 800f536:	690a      	ldr	r2, [r1, #16]
 800f538:	6923      	ldr	r3, [r4, #16]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	bfb8      	it	lt
 800f53e:	460b      	movlt	r3, r1
 800f540:	460d      	mov	r5, r1
 800f542:	bfbc      	itt	lt
 800f544:	4625      	movlt	r5, r4
 800f546:	461c      	movlt	r4, r3
 800f548:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f54c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f550:	68ab      	ldr	r3, [r5, #8]
 800f552:	6869      	ldr	r1, [r5, #4]
 800f554:	eb0a 0709 	add.w	r7, sl, r9
 800f558:	42bb      	cmp	r3, r7
 800f55a:	b085      	sub	sp, #20
 800f55c:	bfb8      	it	lt
 800f55e:	3101      	addlt	r1, #1
 800f560:	f7ff fe8a 	bl	800f278 <_Balloc>
 800f564:	b930      	cbnz	r0, 800f574 <__multiply+0x44>
 800f566:	4602      	mov	r2, r0
 800f568:	4b42      	ldr	r3, [pc, #264]	; (800f674 <__multiply+0x144>)
 800f56a:	4843      	ldr	r0, [pc, #268]	; (800f678 <__multiply+0x148>)
 800f56c:	f240 115d 	movw	r1, #349	; 0x15d
 800f570:	f000 fe8e 	bl	8010290 <__assert_func>
 800f574:	f100 0614 	add.w	r6, r0, #20
 800f578:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f57c:	4633      	mov	r3, r6
 800f57e:	2200      	movs	r2, #0
 800f580:	4543      	cmp	r3, r8
 800f582:	d31e      	bcc.n	800f5c2 <__multiply+0x92>
 800f584:	f105 0c14 	add.w	ip, r5, #20
 800f588:	f104 0314 	add.w	r3, r4, #20
 800f58c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f590:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f594:	9202      	str	r2, [sp, #8]
 800f596:	ebac 0205 	sub.w	r2, ip, r5
 800f59a:	3a15      	subs	r2, #21
 800f59c:	f022 0203 	bic.w	r2, r2, #3
 800f5a0:	3204      	adds	r2, #4
 800f5a2:	f105 0115 	add.w	r1, r5, #21
 800f5a6:	458c      	cmp	ip, r1
 800f5a8:	bf38      	it	cc
 800f5aa:	2204      	movcc	r2, #4
 800f5ac:	9201      	str	r2, [sp, #4]
 800f5ae:	9a02      	ldr	r2, [sp, #8]
 800f5b0:	9303      	str	r3, [sp, #12]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d808      	bhi.n	800f5c8 <__multiply+0x98>
 800f5b6:	2f00      	cmp	r7, #0
 800f5b8:	dc55      	bgt.n	800f666 <__multiply+0x136>
 800f5ba:	6107      	str	r7, [r0, #16]
 800f5bc:	b005      	add	sp, #20
 800f5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5c2:	f843 2b04 	str.w	r2, [r3], #4
 800f5c6:	e7db      	b.n	800f580 <__multiply+0x50>
 800f5c8:	f8b3 a000 	ldrh.w	sl, [r3]
 800f5cc:	f1ba 0f00 	cmp.w	sl, #0
 800f5d0:	d020      	beq.n	800f614 <__multiply+0xe4>
 800f5d2:	f105 0e14 	add.w	lr, r5, #20
 800f5d6:	46b1      	mov	r9, r6
 800f5d8:	2200      	movs	r2, #0
 800f5da:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f5de:	f8d9 b000 	ldr.w	fp, [r9]
 800f5e2:	b2a1      	uxth	r1, r4
 800f5e4:	fa1f fb8b 	uxth.w	fp, fp
 800f5e8:	fb0a b101 	mla	r1, sl, r1, fp
 800f5ec:	4411      	add	r1, r2
 800f5ee:	f8d9 2000 	ldr.w	r2, [r9]
 800f5f2:	0c24      	lsrs	r4, r4, #16
 800f5f4:	0c12      	lsrs	r2, r2, #16
 800f5f6:	fb0a 2404 	mla	r4, sl, r4, r2
 800f5fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f5fe:	b289      	uxth	r1, r1
 800f600:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f604:	45f4      	cmp	ip, lr
 800f606:	f849 1b04 	str.w	r1, [r9], #4
 800f60a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f60e:	d8e4      	bhi.n	800f5da <__multiply+0xaa>
 800f610:	9901      	ldr	r1, [sp, #4]
 800f612:	5072      	str	r2, [r6, r1]
 800f614:	9a03      	ldr	r2, [sp, #12]
 800f616:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f61a:	3304      	adds	r3, #4
 800f61c:	f1b9 0f00 	cmp.w	r9, #0
 800f620:	d01f      	beq.n	800f662 <__multiply+0x132>
 800f622:	6834      	ldr	r4, [r6, #0]
 800f624:	f105 0114 	add.w	r1, r5, #20
 800f628:	46b6      	mov	lr, r6
 800f62a:	f04f 0a00 	mov.w	sl, #0
 800f62e:	880a      	ldrh	r2, [r1, #0]
 800f630:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f634:	fb09 b202 	mla	r2, r9, r2, fp
 800f638:	4492      	add	sl, r2
 800f63a:	b2a4      	uxth	r4, r4
 800f63c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f640:	f84e 4b04 	str.w	r4, [lr], #4
 800f644:	f851 4b04 	ldr.w	r4, [r1], #4
 800f648:	f8be 2000 	ldrh.w	r2, [lr]
 800f64c:	0c24      	lsrs	r4, r4, #16
 800f64e:	fb09 2404 	mla	r4, r9, r4, r2
 800f652:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f656:	458c      	cmp	ip, r1
 800f658:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f65c:	d8e7      	bhi.n	800f62e <__multiply+0xfe>
 800f65e:	9a01      	ldr	r2, [sp, #4]
 800f660:	50b4      	str	r4, [r6, r2]
 800f662:	3604      	adds	r6, #4
 800f664:	e7a3      	b.n	800f5ae <__multiply+0x7e>
 800f666:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1a5      	bne.n	800f5ba <__multiply+0x8a>
 800f66e:	3f01      	subs	r7, #1
 800f670:	e7a1      	b.n	800f5b6 <__multiply+0x86>
 800f672:	bf00      	nop
 800f674:	08011224 	.word	0x08011224
 800f678:	080112b4 	.word	0x080112b4

0800f67c <__pow5mult>:
 800f67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f680:	4615      	mov	r5, r2
 800f682:	f012 0203 	ands.w	r2, r2, #3
 800f686:	4606      	mov	r6, r0
 800f688:	460f      	mov	r7, r1
 800f68a:	d007      	beq.n	800f69c <__pow5mult+0x20>
 800f68c:	4c25      	ldr	r4, [pc, #148]	; (800f724 <__pow5mult+0xa8>)
 800f68e:	3a01      	subs	r2, #1
 800f690:	2300      	movs	r3, #0
 800f692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f696:	f7ff fe51 	bl	800f33c <__multadd>
 800f69a:	4607      	mov	r7, r0
 800f69c:	10ad      	asrs	r5, r5, #2
 800f69e:	d03d      	beq.n	800f71c <__pow5mult+0xa0>
 800f6a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f6a2:	b97c      	cbnz	r4, 800f6c4 <__pow5mult+0x48>
 800f6a4:	2010      	movs	r0, #16
 800f6a6:	f7ff fdc1 	bl	800f22c <malloc>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	6270      	str	r0, [r6, #36]	; 0x24
 800f6ae:	b928      	cbnz	r0, 800f6bc <__pow5mult+0x40>
 800f6b0:	4b1d      	ldr	r3, [pc, #116]	; (800f728 <__pow5mult+0xac>)
 800f6b2:	481e      	ldr	r0, [pc, #120]	; (800f72c <__pow5mult+0xb0>)
 800f6b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f6b8:	f000 fdea 	bl	8010290 <__assert_func>
 800f6bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6c0:	6004      	str	r4, [r0, #0]
 800f6c2:	60c4      	str	r4, [r0, #12]
 800f6c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f6c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f6cc:	b94c      	cbnz	r4, 800f6e2 <__pow5mult+0x66>
 800f6ce:	f240 2171 	movw	r1, #625	; 0x271
 800f6d2:	4630      	mov	r0, r6
 800f6d4:	f7ff ff16 	bl	800f504 <__i2b>
 800f6d8:	2300      	movs	r3, #0
 800f6da:	f8c8 0008 	str.w	r0, [r8, #8]
 800f6de:	4604      	mov	r4, r0
 800f6e0:	6003      	str	r3, [r0, #0]
 800f6e2:	f04f 0900 	mov.w	r9, #0
 800f6e6:	07eb      	lsls	r3, r5, #31
 800f6e8:	d50a      	bpl.n	800f700 <__pow5mult+0x84>
 800f6ea:	4639      	mov	r1, r7
 800f6ec:	4622      	mov	r2, r4
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	f7ff ff1e 	bl	800f530 <__multiply>
 800f6f4:	4639      	mov	r1, r7
 800f6f6:	4680      	mov	r8, r0
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	f7ff fdfd 	bl	800f2f8 <_Bfree>
 800f6fe:	4647      	mov	r7, r8
 800f700:	106d      	asrs	r5, r5, #1
 800f702:	d00b      	beq.n	800f71c <__pow5mult+0xa0>
 800f704:	6820      	ldr	r0, [r4, #0]
 800f706:	b938      	cbnz	r0, 800f718 <__pow5mult+0x9c>
 800f708:	4622      	mov	r2, r4
 800f70a:	4621      	mov	r1, r4
 800f70c:	4630      	mov	r0, r6
 800f70e:	f7ff ff0f 	bl	800f530 <__multiply>
 800f712:	6020      	str	r0, [r4, #0]
 800f714:	f8c0 9000 	str.w	r9, [r0]
 800f718:	4604      	mov	r4, r0
 800f71a:	e7e4      	b.n	800f6e6 <__pow5mult+0x6a>
 800f71c:	4638      	mov	r0, r7
 800f71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f722:	bf00      	nop
 800f724:	08011408 	.word	0x08011408
 800f728:	080111ae 	.word	0x080111ae
 800f72c:	080112b4 	.word	0x080112b4

0800f730 <__lshift>:
 800f730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f734:	460c      	mov	r4, r1
 800f736:	6849      	ldr	r1, [r1, #4]
 800f738:	6923      	ldr	r3, [r4, #16]
 800f73a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f73e:	68a3      	ldr	r3, [r4, #8]
 800f740:	4607      	mov	r7, r0
 800f742:	4691      	mov	r9, r2
 800f744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f748:	f108 0601 	add.w	r6, r8, #1
 800f74c:	42b3      	cmp	r3, r6
 800f74e:	db0b      	blt.n	800f768 <__lshift+0x38>
 800f750:	4638      	mov	r0, r7
 800f752:	f7ff fd91 	bl	800f278 <_Balloc>
 800f756:	4605      	mov	r5, r0
 800f758:	b948      	cbnz	r0, 800f76e <__lshift+0x3e>
 800f75a:	4602      	mov	r2, r0
 800f75c:	4b28      	ldr	r3, [pc, #160]	; (800f800 <__lshift+0xd0>)
 800f75e:	4829      	ldr	r0, [pc, #164]	; (800f804 <__lshift+0xd4>)
 800f760:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f764:	f000 fd94 	bl	8010290 <__assert_func>
 800f768:	3101      	adds	r1, #1
 800f76a:	005b      	lsls	r3, r3, #1
 800f76c:	e7ee      	b.n	800f74c <__lshift+0x1c>
 800f76e:	2300      	movs	r3, #0
 800f770:	f100 0114 	add.w	r1, r0, #20
 800f774:	f100 0210 	add.w	r2, r0, #16
 800f778:	4618      	mov	r0, r3
 800f77a:	4553      	cmp	r3, sl
 800f77c:	db33      	blt.n	800f7e6 <__lshift+0xb6>
 800f77e:	6920      	ldr	r0, [r4, #16]
 800f780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f784:	f104 0314 	add.w	r3, r4, #20
 800f788:	f019 091f 	ands.w	r9, r9, #31
 800f78c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f790:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f794:	d02b      	beq.n	800f7ee <__lshift+0xbe>
 800f796:	f1c9 0e20 	rsb	lr, r9, #32
 800f79a:	468a      	mov	sl, r1
 800f79c:	2200      	movs	r2, #0
 800f79e:	6818      	ldr	r0, [r3, #0]
 800f7a0:	fa00 f009 	lsl.w	r0, r0, r9
 800f7a4:	4302      	orrs	r2, r0
 800f7a6:	f84a 2b04 	str.w	r2, [sl], #4
 800f7aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7ae:	459c      	cmp	ip, r3
 800f7b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800f7b4:	d8f3      	bhi.n	800f79e <__lshift+0x6e>
 800f7b6:	ebac 0304 	sub.w	r3, ip, r4
 800f7ba:	3b15      	subs	r3, #21
 800f7bc:	f023 0303 	bic.w	r3, r3, #3
 800f7c0:	3304      	adds	r3, #4
 800f7c2:	f104 0015 	add.w	r0, r4, #21
 800f7c6:	4584      	cmp	ip, r0
 800f7c8:	bf38      	it	cc
 800f7ca:	2304      	movcc	r3, #4
 800f7cc:	50ca      	str	r2, [r1, r3]
 800f7ce:	b10a      	cbz	r2, 800f7d4 <__lshift+0xa4>
 800f7d0:	f108 0602 	add.w	r6, r8, #2
 800f7d4:	3e01      	subs	r6, #1
 800f7d6:	4638      	mov	r0, r7
 800f7d8:	612e      	str	r6, [r5, #16]
 800f7da:	4621      	mov	r1, r4
 800f7dc:	f7ff fd8c 	bl	800f2f8 <_Bfree>
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	e7c5      	b.n	800f77a <__lshift+0x4a>
 800f7ee:	3904      	subs	r1, #4
 800f7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800f7f8:	459c      	cmp	ip, r3
 800f7fa:	d8f9      	bhi.n	800f7f0 <__lshift+0xc0>
 800f7fc:	e7ea      	b.n	800f7d4 <__lshift+0xa4>
 800f7fe:	bf00      	nop
 800f800:	08011224 	.word	0x08011224
 800f804:	080112b4 	.word	0x080112b4

0800f808 <__mcmp>:
 800f808:	b530      	push	{r4, r5, lr}
 800f80a:	6902      	ldr	r2, [r0, #16]
 800f80c:	690c      	ldr	r4, [r1, #16]
 800f80e:	1b12      	subs	r2, r2, r4
 800f810:	d10e      	bne.n	800f830 <__mcmp+0x28>
 800f812:	f100 0314 	add.w	r3, r0, #20
 800f816:	3114      	adds	r1, #20
 800f818:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f81c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f820:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f824:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f828:	42a5      	cmp	r5, r4
 800f82a:	d003      	beq.n	800f834 <__mcmp+0x2c>
 800f82c:	d305      	bcc.n	800f83a <__mcmp+0x32>
 800f82e:	2201      	movs	r2, #1
 800f830:	4610      	mov	r0, r2
 800f832:	bd30      	pop	{r4, r5, pc}
 800f834:	4283      	cmp	r3, r0
 800f836:	d3f3      	bcc.n	800f820 <__mcmp+0x18>
 800f838:	e7fa      	b.n	800f830 <__mcmp+0x28>
 800f83a:	f04f 32ff 	mov.w	r2, #4294967295
 800f83e:	e7f7      	b.n	800f830 <__mcmp+0x28>

0800f840 <__mdiff>:
 800f840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f844:	460c      	mov	r4, r1
 800f846:	4606      	mov	r6, r0
 800f848:	4611      	mov	r1, r2
 800f84a:	4620      	mov	r0, r4
 800f84c:	4617      	mov	r7, r2
 800f84e:	f7ff ffdb 	bl	800f808 <__mcmp>
 800f852:	1e05      	subs	r5, r0, #0
 800f854:	d110      	bne.n	800f878 <__mdiff+0x38>
 800f856:	4629      	mov	r1, r5
 800f858:	4630      	mov	r0, r6
 800f85a:	f7ff fd0d 	bl	800f278 <_Balloc>
 800f85e:	b930      	cbnz	r0, 800f86e <__mdiff+0x2e>
 800f860:	4b39      	ldr	r3, [pc, #228]	; (800f948 <__mdiff+0x108>)
 800f862:	4602      	mov	r2, r0
 800f864:	f240 2132 	movw	r1, #562	; 0x232
 800f868:	4838      	ldr	r0, [pc, #224]	; (800f94c <__mdiff+0x10c>)
 800f86a:	f000 fd11 	bl	8010290 <__assert_func>
 800f86e:	2301      	movs	r3, #1
 800f870:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f878:	bfa4      	itt	ge
 800f87a:	463b      	movge	r3, r7
 800f87c:	4627      	movge	r7, r4
 800f87e:	4630      	mov	r0, r6
 800f880:	6879      	ldr	r1, [r7, #4]
 800f882:	bfa6      	itte	ge
 800f884:	461c      	movge	r4, r3
 800f886:	2500      	movge	r5, #0
 800f888:	2501      	movlt	r5, #1
 800f88a:	f7ff fcf5 	bl	800f278 <_Balloc>
 800f88e:	b920      	cbnz	r0, 800f89a <__mdiff+0x5a>
 800f890:	4b2d      	ldr	r3, [pc, #180]	; (800f948 <__mdiff+0x108>)
 800f892:	4602      	mov	r2, r0
 800f894:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f898:	e7e6      	b.n	800f868 <__mdiff+0x28>
 800f89a:	693e      	ldr	r6, [r7, #16]
 800f89c:	60c5      	str	r5, [r0, #12]
 800f89e:	6925      	ldr	r5, [r4, #16]
 800f8a0:	f107 0114 	add.w	r1, r7, #20
 800f8a4:	f104 0914 	add.w	r9, r4, #20
 800f8a8:	f100 0e14 	add.w	lr, r0, #20
 800f8ac:	f107 0210 	add.w	r2, r7, #16
 800f8b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f8b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f8b8:	46f2      	mov	sl, lr
 800f8ba:	2700      	movs	r7, #0
 800f8bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800f8c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f8c4:	fa1f f883 	uxth.w	r8, r3
 800f8c8:	fa17 f78b 	uxtah	r7, r7, fp
 800f8cc:	0c1b      	lsrs	r3, r3, #16
 800f8ce:	eba7 0808 	sub.w	r8, r7, r8
 800f8d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f8d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f8da:	fa1f f888 	uxth.w	r8, r8
 800f8de:	141f      	asrs	r7, r3, #16
 800f8e0:	454d      	cmp	r5, r9
 800f8e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f8e6:	f84a 3b04 	str.w	r3, [sl], #4
 800f8ea:	d8e7      	bhi.n	800f8bc <__mdiff+0x7c>
 800f8ec:	1b2b      	subs	r3, r5, r4
 800f8ee:	3b15      	subs	r3, #21
 800f8f0:	f023 0303 	bic.w	r3, r3, #3
 800f8f4:	3304      	adds	r3, #4
 800f8f6:	3415      	adds	r4, #21
 800f8f8:	42a5      	cmp	r5, r4
 800f8fa:	bf38      	it	cc
 800f8fc:	2304      	movcc	r3, #4
 800f8fe:	4419      	add	r1, r3
 800f900:	4473      	add	r3, lr
 800f902:	469e      	mov	lr, r3
 800f904:	460d      	mov	r5, r1
 800f906:	4565      	cmp	r5, ip
 800f908:	d30e      	bcc.n	800f928 <__mdiff+0xe8>
 800f90a:	f10c 0203 	add.w	r2, ip, #3
 800f90e:	1a52      	subs	r2, r2, r1
 800f910:	f022 0203 	bic.w	r2, r2, #3
 800f914:	3903      	subs	r1, #3
 800f916:	458c      	cmp	ip, r1
 800f918:	bf38      	it	cc
 800f91a:	2200      	movcc	r2, #0
 800f91c:	441a      	add	r2, r3
 800f91e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f922:	b17b      	cbz	r3, 800f944 <__mdiff+0x104>
 800f924:	6106      	str	r6, [r0, #16]
 800f926:	e7a5      	b.n	800f874 <__mdiff+0x34>
 800f928:	f855 8b04 	ldr.w	r8, [r5], #4
 800f92c:	fa17 f488 	uxtah	r4, r7, r8
 800f930:	1422      	asrs	r2, r4, #16
 800f932:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f936:	b2a4      	uxth	r4, r4
 800f938:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f93c:	f84e 4b04 	str.w	r4, [lr], #4
 800f940:	1417      	asrs	r7, r2, #16
 800f942:	e7e0      	b.n	800f906 <__mdiff+0xc6>
 800f944:	3e01      	subs	r6, #1
 800f946:	e7ea      	b.n	800f91e <__mdiff+0xde>
 800f948:	08011224 	.word	0x08011224
 800f94c:	080112b4 	.word	0x080112b4

0800f950 <__ulp>:
 800f950:	b082      	sub	sp, #8
 800f952:	ed8d 0b00 	vstr	d0, [sp]
 800f956:	9b01      	ldr	r3, [sp, #4]
 800f958:	4912      	ldr	r1, [pc, #72]	; (800f9a4 <__ulp+0x54>)
 800f95a:	4019      	ands	r1, r3
 800f95c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f960:	2900      	cmp	r1, #0
 800f962:	dd05      	ble.n	800f970 <__ulp+0x20>
 800f964:	2200      	movs	r2, #0
 800f966:	460b      	mov	r3, r1
 800f968:	ec43 2b10 	vmov	d0, r2, r3
 800f96c:	b002      	add	sp, #8
 800f96e:	4770      	bx	lr
 800f970:	4249      	negs	r1, r1
 800f972:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f976:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f97a:	f04f 0200 	mov.w	r2, #0
 800f97e:	f04f 0300 	mov.w	r3, #0
 800f982:	da04      	bge.n	800f98e <__ulp+0x3e>
 800f984:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f988:	fa41 f300 	asr.w	r3, r1, r0
 800f98c:	e7ec      	b.n	800f968 <__ulp+0x18>
 800f98e:	f1a0 0114 	sub.w	r1, r0, #20
 800f992:	291e      	cmp	r1, #30
 800f994:	bfda      	itte	le
 800f996:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f99a:	fa20 f101 	lsrle.w	r1, r0, r1
 800f99e:	2101      	movgt	r1, #1
 800f9a0:	460a      	mov	r2, r1
 800f9a2:	e7e1      	b.n	800f968 <__ulp+0x18>
 800f9a4:	7ff00000 	.word	0x7ff00000

0800f9a8 <__b2d>:
 800f9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9aa:	6905      	ldr	r5, [r0, #16]
 800f9ac:	f100 0714 	add.w	r7, r0, #20
 800f9b0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f9b4:	1f2e      	subs	r6, r5, #4
 800f9b6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	f7ff fd52 	bl	800f464 <__hi0bits>
 800f9c0:	f1c0 0320 	rsb	r3, r0, #32
 800f9c4:	280a      	cmp	r0, #10
 800f9c6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fa44 <__b2d+0x9c>
 800f9ca:	600b      	str	r3, [r1, #0]
 800f9cc:	dc14      	bgt.n	800f9f8 <__b2d+0x50>
 800f9ce:	f1c0 0e0b 	rsb	lr, r0, #11
 800f9d2:	fa24 f10e 	lsr.w	r1, r4, lr
 800f9d6:	42b7      	cmp	r7, r6
 800f9d8:	ea41 030c 	orr.w	r3, r1, ip
 800f9dc:	bf34      	ite	cc
 800f9de:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f9e2:	2100      	movcs	r1, #0
 800f9e4:	3015      	adds	r0, #21
 800f9e6:	fa04 f000 	lsl.w	r0, r4, r0
 800f9ea:	fa21 f10e 	lsr.w	r1, r1, lr
 800f9ee:	ea40 0201 	orr.w	r2, r0, r1
 800f9f2:	ec43 2b10 	vmov	d0, r2, r3
 800f9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9f8:	42b7      	cmp	r7, r6
 800f9fa:	bf3a      	itte	cc
 800f9fc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fa00:	f1a5 0608 	subcc.w	r6, r5, #8
 800fa04:	2100      	movcs	r1, #0
 800fa06:	380b      	subs	r0, #11
 800fa08:	d017      	beq.n	800fa3a <__b2d+0x92>
 800fa0a:	f1c0 0c20 	rsb	ip, r0, #32
 800fa0e:	fa04 f500 	lsl.w	r5, r4, r0
 800fa12:	42be      	cmp	r6, r7
 800fa14:	fa21 f40c 	lsr.w	r4, r1, ip
 800fa18:	ea45 0504 	orr.w	r5, r5, r4
 800fa1c:	bf8c      	ite	hi
 800fa1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fa22:	2400      	movls	r4, #0
 800fa24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fa28:	fa01 f000 	lsl.w	r0, r1, r0
 800fa2c:	fa24 f40c 	lsr.w	r4, r4, ip
 800fa30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fa34:	ea40 0204 	orr.w	r2, r0, r4
 800fa38:	e7db      	b.n	800f9f2 <__b2d+0x4a>
 800fa3a:	ea44 030c 	orr.w	r3, r4, ip
 800fa3e:	460a      	mov	r2, r1
 800fa40:	e7d7      	b.n	800f9f2 <__b2d+0x4a>
 800fa42:	bf00      	nop
 800fa44:	3ff00000 	.word	0x3ff00000

0800fa48 <__d2b>:
 800fa48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa4c:	4689      	mov	r9, r1
 800fa4e:	2101      	movs	r1, #1
 800fa50:	ec57 6b10 	vmov	r6, r7, d0
 800fa54:	4690      	mov	r8, r2
 800fa56:	f7ff fc0f 	bl	800f278 <_Balloc>
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	b930      	cbnz	r0, 800fa6c <__d2b+0x24>
 800fa5e:	4602      	mov	r2, r0
 800fa60:	4b25      	ldr	r3, [pc, #148]	; (800faf8 <__d2b+0xb0>)
 800fa62:	4826      	ldr	r0, [pc, #152]	; (800fafc <__d2b+0xb4>)
 800fa64:	f240 310a 	movw	r1, #778	; 0x30a
 800fa68:	f000 fc12 	bl	8010290 <__assert_func>
 800fa6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fa70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fa74:	bb35      	cbnz	r5, 800fac4 <__d2b+0x7c>
 800fa76:	2e00      	cmp	r6, #0
 800fa78:	9301      	str	r3, [sp, #4]
 800fa7a:	d028      	beq.n	800face <__d2b+0x86>
 800fa7c:	4668      	mov	r0, sp
 800fa7e:	9600      	str	r6, [sp, #0]
 800fa80:	f7ff fd10 	bl	800f4a4 <__lo0bits>
 800fa84:	9900      	ldr	r1, [sp, #0]
 800fa86:	b300      	cbz	r0, 800faca <__d2b+0x82>
 800fa88:	9a01      	ldr	r2, [sp, #4]
 800fa8a:	f1c0 0320 	rsb	r3, r0, #32
 800fa8e:	fa02 f303 	lsl.w	r3, r2, r3
 800fa92:	430b      	orrs	r3, r1
 800fa94:	40c2      	lsrs	r2, r0
 800fa96:	6163      	str	r3, [r4, #20]
 800fa98:	9201      	str	r2, [sp, #4]
 800fa9a:	9b01      	ldr	r3, [sp, #4]
 800fa9c:	61a3      	str	r3, [r4, #24]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	bf14      	ite	ne
 800faa2:	2202      	movne	r2, #2
 800faa4:	2201      	moveq	r2, #1
 800faa6:	6122      	str	r2, [r4, #16]
 800faa8:	b1d5      	cbz	r5, 800fae0 <__d2b+0x98>
 800faaa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800faae:	4405      	add	r5, r0
 800fab0:	f8c9 5000 	str.w	r5, [r9]
 800fab4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fab8:	f8c8 0000 	str.w	r0, [r8]
 800fabc:	4620      	mov	r0, r4
 800fabe:	b003      	add	sp, #12
 800fac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fac8:	e7d5      	b.n	800fa76 <__d2b+0x2e>
 800faca:	6161      	str	r1, [r4, #20]
 800facc:	e7e5      	b.n	800fa9a <__d2b+0x52>
 800face:	a801      	add	r0, sp, #4
 800fad0:	f7ff fce8 	bl	800f4a4 <__lo0bits>
 800fad4:	9b01      	ldr	r3, [sp, #4]
 800fad6:	6163      	str	r3, [r4, #20]
 800fad8:	2201      	movs	r2, #1
 800fada:	6122      	str	r2, [r4, #16]
 800fadc:	3020      	adds	r0, #32
 800fade:	e7e3      	b.n	800faa8 <__d2b+0x60>
 800fae0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fae4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fae8:	f8c9 0000 	str.w	r0, [r9]
 800faec:	6918      	ldr	r0, [r3, #16]
 800faee:	f7ff fcb9 	bl	800f464 <__hi0bits>
 800faf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800faf6:	e7df      	b.n	800fab8 <__d2b+0x70>
 800faf8:	08011224 	.word	0x08011224
 800fafc:	080112b4 	.word	0x080112b4

0800fb00 <__ratio>:
 800fb00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb04:	4688      	mov	r8, r1
 800fb06:	4669      	mov	r1, sp
 800fb08:	4681      	mov	r9, r0
 800fb0a:	f7ff ff4d 	bl	800f9a8 <__b2d>
 800fb0e:	a901      	add	r1, sp, #4
 800fb10:	4640      	mov	r0, r8
 800fb12:	ec55 4b10 	vmov	r4, r5, d0
 800fb16:	f7ff ff47 	bl	800f9a8 <__b2d>
 800fb1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fb22:	eba3 0c02 	sub.w	ip, r3, r2
 800fb26:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fb2a:	1a9b      	subs	r3, r3, r2
 800fb2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fb30:	ec51 0b10 	vmov	r0, r1, d0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	bfd6      	itet	le
 800fb38:	460a      	movle	r2, r1
 800fb3a:	462a      	movgt	r2, r5
 800fb3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fb40:	468b      	mov	fp, r1
 800fb42:	462f      	mov	r7, r5
 800fb44:	bfd4      	ite	le
 800fb46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fb4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fb4e:	4620      	mov	r0, r4
 800fb50:	ee10 2a10 	vmov	r2, s0
 800fb54:	465b      	mov	r3, fp
 800fb56:	4639      	mov	r1, r7
 800fb58:	f7f0 fe88 	bl	800086c <__aeabi_ddiv>
 800fb5c:	ec41 0b10 	vmov	d0, r0, r1
 800fb60:	b003      	add	sp, #12
 800fb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fb66 <__copybits>:
 800fb66:	3901      	subs	r1, #1
 800fb68:	b570      	push	{r4, r5, r6, lr}
 800fb6a:	1149      	asrs	r1, r1, #5
 800fb6c:	6914      	ldr	r4, [r2, #16]
 800fb6e:	3101      	adds	r1, #1
 800fb70:	f102 0314 	add.w	r3, r2, #20
 800fb74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fb78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fb7c:	1f05      	subs	r5, r0, #4
 800fb7e:	42a3      	cmp	r3, r4
 800fb80:	d30c      	bcc.n	800fb9c <__copybits+0x36>
 800fb82:	1aa3      	subs	r3, r4, r2
 800fb84:	3b11      	subs	r3, #17
 800fb86:	f023 0303 	bic.w	r3, r3, #3
 800fb8a:	3211      	adds	r2, #17
 800fb8c:	42a2      	cmp	r2, r4
 800fb8e:	bf88      	it	hi
 800fb90:	2300      	movhi	r3, #0
 800fb92:	4418      	add	r0, r3
 800fb94:	2300      	movs	r3, #0
 800fb96:	4288      	cmp	r0, r1
 800fb98:	d305      	bcc.n	800fba6 <__copybits+0x40>
 800fb9a:	bd70      	pop	{r4, r5, r6, pc}
 800fb9c:	f853 6b04 	ldr.w	r6, [r3], #4
 800fba0:	f845 6f04 	str.w	r6, [r5, #4]!
 800fba4:	e7eb      	b.n	800fb7e <__copybits+0x18>
 800fba6:	f840 3b04 	str.w	r3, [r0], #4
 800fbaa:	e7f4      	b.n	800fb96 <__copybits+0x30>

0800fbac <__any_on>:
 800fbac:	f100 0214 	add.w	r2, r0, #20
 800fbb0:	6900      	ldr	r0, [r0, #16]
 800fbb2:	114b      	asrs	r3, r1, #5
 800fbb4:	4298      	cmp	r0, r3
 800fbb6:	b510      	push	{r4, lr}
 800fbb8:	db11      	blt.n	800fbde <__any_on+0x32>
 800fbba:	dd0a      	ble.n	800fbd2 <__any_on+0x26>
 800fbbc:	f011 011f 	ands.w	r1, r1, #31
 800fbc0:	d007      	beq.n	800fbd2 <__any_on+0x26>
 800fbc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fbc6:	fa24 f001 	lsr.w	r0, r4, r1
 800fbca:	fa00 f101 	lsl.w	r1, r0, r1
 800fbce:	428c      	cmp	r4, r1
 800fbd0:	d10b      	bne.n	800fbea <__any_on+0x3e>
 800fbd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d803      	bhi.n	800fbe2 <__any_on+0x36>
 800fbda:	2000      	movs	r0, #0
 800fbdc:	bd10      	pop	{r4, pc}
 800fbde:	4603      	mov	r3, r0
 800fbe0:	e7f7      	b.n	800fbd2 <__any_on+0x26>
 800fbe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fbe6:	2900      	cmp	r1, #0
 800fbe8:	d0f5      	beq.n	800fbd6 <__any_on+0x2a>
 800fbea:	2001      	movs	r0, #1
 800fbec:	e7f6      	b.n	800fbdc <__any_on+0x30>

0800fbee <_calloc_r>:
 800fbee:	b513      	push	{r0, r1, r4, lr}
 800fbf0:	434a      	muls	r2, r1
 800fbf2:	4611      	mov	r1, r2
 800fbf4:	9201      	str	r2, [sp, #4]
 800fbf6:	f7fc f87d 	bl	800bcf4 <_malloc_r>
 800fbfa:	4604      	mov	r4, r0
 800fbfc:	b118      	cbz	r0, 800fc06 <_calloc_r+0x18>
 800fbfe:	9a01      	ldr	r2, [sp, #4]
 800fc00:	2100      	movs	r1, #0
 800fc02:	f7fc f86e 	bl	800bce2 <memset>
 800fc06:	4620      	mov	r0, r4
 800fc08:	b002      	add	sp, #8
 800fc0a:	bd10      	pop	{r4, pc}

0800fc0c <_free_r>:
 800fc0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc0e:	2900      	cmp	r1, #0
 800fc10:	d048      	beq.n	800fca4 <_free_r+0x98>
 800fc12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc16:	9001      	str	r0, [sp, #4]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	f1a1 0404 	sub.w	r4, r1, #4
 800fc1e:	bfb8      	it	lt
 800fc20:	18e4      	addlt	r4, r4, r3
 800fc22:	f7ff fb1d 	bl	800f260 <__malloc_lock>
 800fc26:	4a20      	ldr	r2, [pc, #128]	; (800fca8 <_free_r+0x9c>)
 800fc28:	9801      	ldr	r0, [sp, #4]
 800fc2a:	6813      	ldr	r3, [r2, #0]
 800fc2c:	4615      	mov	r5, r2
 800fc2e:	b933      	cbnz	r3, 800fc3e <_free_r+0x32>
 800fc30:	6063      	str	r3, [r4, #4]
 800fc32:	6014      	str	r4, [r2, #0]
 800fc34:	b003      	add	sp, #12
 800fc36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc3a:	f7ff bb17 	b.w	800f26c <__malloc_unlock>
 800fc3e:	42a3      	cmp	r3, r4
 800fc40:	d90b      	bls.n	800fc5a <_free_r+0x4e>
 800fc42:	6821      	ldr	r1, [r4, #0]
 800fc44:	1862      	adds	r2, r4, r1
 800fc46:	4293      	cmp	r3, r2
 800fc48:	bf04      	itt	eq
 800fc4a:	681a      	ldreq	r2, [r3, #0]
 800fc4c:	685b      	ldreq	r3, [r3, #4]
 800fc4e:	6063      	str	r3, [r4, #4]
 800fc50:	bf04      	itt	eq
 800fc52:	1852      	addeq	r2, r2, r1
 800fc54:	6022      	streq	r2, [r4, #0]
 800fc56:	602c      	str	r4, [r5, #0]
 800fc58:	e7ec      	b.n	800fc34 <_free_r+0x28>
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	b10b      	cbz	r3, 800fc64 <_free_r+0x58>
 800fc60:	42a3      	cmp	r3, r4
 800fc62:	d9fa      	bls.n	800fc5a <_free_r+0x4e>
 800fc64:	6811      	ldr	r1, [r2, #0]
 800fc66:	1855      	adds	r5, r2, r1
 800fc68:	42a5      	cmp	r5, r4
 800fc6a:	d10b      	bne.n	800fc84 <_free_r+0x78>
 800fc6c:	6824      	ldr	r4, [r4, #0]
 800fc6e:	4421      	add	r1, r4
 800fc70:	1854      	adds	r4, r2, r1
 800fc72:	42a3      	cmp	r3, r4
 800fc74:	6011      	str	r1, [r2, #0]
 800fc76:	d1dd      	bne.n	800fc34 <_free_r+0x28>
 800fc78:	681c      	ldr	r4, [r3, #0]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	6053      	str	r3, [r2, #4]
 800fc7e:	4421      	add	r1, r4
 800fc80:	6011      	str	r1, [r2, #0]
 800fc82:	e7d7      	b.n	800fc34 <_free_r+0x28>
 800fc84:	d902      	bls.n	800fc8c <_free_r+0x80>
 800fc86:	230c      	movs	r3, #12
 800fc88:	6003      	str	r3, [r0, #0]
 800fc8a:	e7d3      	b.n	800fc34 <_free_r+0x28>
 800fc8c:	6825      	ldr	r5, [r4, #0]
 800fc8e:	1961      	adds	r1, r4, r5
 800fc90:	428b      	cmp	r3, r1
 800fc92:	bf04      	itt	eq
 800fc94:	6819      	ldreq	r1, [r3, #0]
 800fc96:	685b      	ldreq	r3, [r3, #4]
 800fc98:	6063      	str	r3, [r4, #4]
 800fc9a:	bf04      	itt	eq
 800fc9c:	1949      	addeq	r1, r1, r5
 800fc9e:	6021      	streq	r1, [r4, #0]
 800fca0:	6054      	str	r4, [r2, #4]
 800fca2:	e7c7      	b.n	800fc34 <_free_r+0x28>
 800fca4:	b003      	add	sp, #12
 800fca6:	bd30      	pop	{r4, r5, pc}
 800fca8:	20000770 	.word	0x20000770

0800fcac <__ssputs_r>:
 800fcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcb0:	688e      	ldr	r6, [r1, #8]
 800fcb2:	429e      	cmp	r6, r3
 800fcb4:	4682      	mov	sl, r0
 800fcb6:	460c      	mov	r4, r1
 800fcb8:	4690      	mov	r8, r2
 800fcba:	461f      	mov	r7, r3
 800fcbc:	d838      	bhi.n	800fd30 <__ssputs_r+0x84>
 800fcbe:	898a      	ldrh	r2, [r1, #12]
 800fcc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fcc4:	d032      	beq.n	800fd2c <__ssputs_r+0x80>
 800fcc6:	6825      	ldr	r5, [r4, #0]
 800fcc8:	6909      	ldr	r1, [r1, #16]
 800fcca:	eba5 0901 	sub.w	r9, r5, r1
 800fcce:	6965      	ldr	r5, [r4, #20]
 800fcd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fcd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fcd8:	3301      	adds	r3, #1
 800fcda:	444b      	add	r3, r9
 800fcdc:	106d      	asrs	r5, r5, #1
 800fcde:	429d      	cmp	r5, r3
 800fce0:	bf38      	it	cc
 800fce2:	461d      	movcc	r5, r3
 800fce4:	0553      	lsls	r3, r2, #21
 800fce6:	d531      	bpl.n	800fd4c <__ssputs_r+0xa0>
 800fce8:	4629      	mov	r1, r5
 800fcea:	f7fc f803 	bl	800bcf4 <_malloc_r>
 800fcee:	4606      	mov	r6, r0
 800fcf0:	b950      	cbnz	r0, 800fd08 <__ssputs_r+0x5c>
 800fcf2:	230c      	movs	r3, #12
 800fcf4:	f8ca 3000 	str.w	r3, [sl]
 800fcf8:	89a3      	ldrh	r3, [r4, #12]
 800fcfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcfe:	81a3      	strh	r3, [r4, #12]
 800fd00:	f04f 30ff 	mov.w	r0, #4294967295
 800fd04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd08:	6921      	ldr	r1, [r4, #16]
 800fd0a:	464a      	mov	r2, r9
 800fd0c:	f7fb ffdb 	bl	800bcc6 <memcpy>
 800fd10:	89a3      	ldrh	r3, [r4, #12]
 800fd12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fd16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd1a:	81a3      	strh	r3, [r4, #12]
 800fd1c:	6126      	str	r6, [r4, #16]
 800fd1e:	6165      	str	r5, [r4, #20]
 800fd20:	444e      	add	r6, r9
 800fd22:	eba5 0509 	sub.w	r5, r5, r9
 800fd26:	6026      	str	r6, [r4, #0]
 800fd28:	60a5      	str	r5, [r4, #8]
 800fd2a:	463e      	mov	r6, r7
 800fd2c:	42be      	cmp	r6, r7
 800fd2e:	d900      	bls.n	800fd32 <__ssputs_r+0x86>
 800fd30:	463e      	mov	r6, r7
 800fd32:	4632      	mov	r2, r6
 800fd34:	6820      	ldr	r0, [r4, #0]
 800fd36:	4641      	mov	r1, r8
 800fd38:	f000 fafc 	bl	8010334 <memmove>
 800fd3c:	68a3      	ldr	r3, [r4, #8]
 800fd3e:	6822      	ldr	r2, [r4, #0]
 800fd40:	1b9b      	subs	r3, r3, r6
 800fd42:	4432      	add	r2, r6
 800fd44:	60a3      	str	r3, [r4, #8]
 800fd46:	6022      	str	r2, [r4, #0]
 800fd48:	2000      	movs	r0, #0
 800fd4a:	e7db      	b.n	800fd04 <__ssputs_r+0x58>
 800fd4c:	462a      	mov	r2, r5
 800fd4e:	f000 fb0b 	bl	8010368 <_realloc_r>
 800fd52:	4606      	mov	r6, r0
 800fd54:	2800      	cmp	r0, #0
 800fd56:	d1e1      	bne.n	800fd1c <__ssputs_r+0x70>
 800fd58:	6921      	ldr	r1, [r4, #16]
 800fd5a:	4650      	mov	r0, sl
 800fd5c:	f7ff ff56 	bl	800fc0c <_free_r>
 800fd60:	e7c7      	b.n	800fcf2 <__ssputs_r+0x46>
	...

0800fd64 <_svfiprintf_r>:
 800fd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd68:	4698      	mov	r8, r3
 800fd6a:	898b      	ldrh	r3, [r1, #12]
 800fd6c:	061b      	lsls	r3, r3, #24
 800fd6e:	b09d      	sub	sp, #116	; 0x74
 800fd70:	4607      	mov	r7, r0
 800fd72:	460d      	mov	r5, r1
 800fd74:	4614      	mov	r4, r2
 800fd76:	d50e      	bpl.n	800fd96 <_svfiprintf_r+0x32>
 800fd78:	690b      	ldr	r3, [r1, #16]
 800fd7a:	b963      	cbnz	r3, 800fd96 <_svfiprintf_r+0x32>
 800fd7c:	2140      	movs	r1, #64	; 0x40
 800fd7e:	f7fb ffb9 	bl	800bcf4 <_malloc_r>
 800fd82:	6028      	str	r0, [r5, #0]
 800fd84:	6128      	str	r0, [r5, #16]
 800fd86:	b920      	cbnz	r0, 800fd92 <_svfiprintf_r+0x2e>
 800fd88:	230c      	movs	r3, #12
 800fd8a:	603b      	str	r3, [r7, #0]
 800fd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fd90:	e0d1      	b.n	800ff36 <_svfiprintf_r+0x1d2>
 800fd92:	2340      	movs	r3, #64	; 0x40
 800fd94:	616b      	str	r3, [r5, #20]
 800fd96:	2300      	movs	r3, #0
 800fd98:	9309      	str	r3, [sp, #36]	; 0x24
 800fd9a:	2320      	movs	r3, #32
 800fd9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fda0:	f8cd 800c 	str.w	r8, [sp, #12]
 800fda4:	2330      	movs	r3, #48	; 0x30
 800fda6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ff50 <_svfiprintf_r+0x1ec>
 800fdaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdae:	f04f 0901 	mov.w	r9, #1
 800fdb2:	4623      	mov	r3, r4
 800fdb4:	469a      	mov	sl, r3
 800fdb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdba:	b10a      	cbz	r2, 800fdc0 <_svfiprintf_r+0x5c>
 800fdbc:	2a25      	cmp	r2, #37	; 0x25
 800fdbe:	d1f9      	bne.n	800fdb4 <_svfiprintf_r+0x50>
 800fdc0:	ebba 0b04 	subs.w	fp, sl, r4
 800fdc4:	d00b      	beq.n	800fdde <_svfiprintf_r+0x7a>
 800fdc6:	465b      	mov	r3, fp
 800fdc8:	4622      	mov	r2, r4
 800fdca:	4629      	mov	r1, r5
 800fdcc:	4638      	mov	r0, r7
 800fdce:	f7ff ff6d 	bl	800fcac <__ssputs_r>
 800fdd2:	3001      	adds	r0, #1
 800fdd4:	f000 80aa 	beq.w	800ff2c <_svfiprintf_r+0x1c8>
 800fdd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdda:	445a      	add	r2, fp
 800fddc:	9209      	str	r2, [sp, #36]	; 0x24
 800fdde:	f89a 3000 	ldrb.w	r3, [sl]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	f000 80a2 	beq.w	800ff2c <_svfiprintf_r+0x1c8>
 800fde8:	2300      	movs	r3, #0
 800fdea:	f04f 32ff 	mov.w	r2, #4294967295
 800fdee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fdf2:	f10a 0a01 	add.w	sl, sl, #1
 800fdf6:	9304      	str	r3, [sp, #16]
 800fdf8:	9307      	str	r3, [sp, #28]
 800fdfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fdfe:	931a      	str	r3, [sp, #104]	; 0x68
 800fe00:	4654      	mov	r4, sl
 800fe02:	2205      	movs	r2, #5
 800fe04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe08:	4851      	ldr	r0, [pc, #324]	; (800ff50 <_svfiprintf_r+0x1ec>)
 800fe0a:	f7f0 f9f9 	bl	8000200 <memchr>
 800fe0e:	9a04      	ldr	r2, [sp, #16]
 800fe10:	b9d8      	cbnz	r0, 800fe4a <_svfiprintf_r+0xe6>
 800fe12:	06d0      	lsls	r0, r2, #27
 800fe14:	bf44      	itt	mi
 800fe16:	2320      	movmi	r3, #32
 800fe18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe1c:	0711      	lsls	r1, r2, #28
 800fe1e:	bf44      	itt	mi
 800fe20:	232b      	movmi	r3, #43	; 0x2b
 800fe22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe26:	f89a 3000 	ldrb.w	r3, [sl]
 800fe2a:	2b2a      	cmp	r3, #42	; 0x2a
 800fe2c:	d015      	beq.n	800fe5a <_svfiprintf_r+0xf6>
 800fe2e:	9a07      	ldr	r2, [sp, #28]
 800fe30:	4654      	mov	r4, sl
 800fe32:	2000      	movs	r0, #0
 800fe34:	f04f 0c0a 	mov.w	ip, #10
 800fe38:	4621      	mov	r1, r4
 800fe3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe3e:	3b30      	subs	r3, #48	; 0x30
 800fe40:	2b09      	cmp	r3, #9
 800fe42:	d94e      	bls.n	800fee2 <_svfiprintf_r+0x17e>
 800fe44:	b1b0      	cbz	r0, 800fe74 <_svfiprintf_r+0x110>
 800fe46:	9207      	str	r2, [sp, #28]
 800fe48:	e014      	b.n	800fe74 <_svfiprintf_r+0x110>
 800fe4a:	eba0 0308 	sub.w	r3, r0, r8
 800fe4e:	fa09 f303 	lsl.w	r3, r9, r3
 800fe52:	4313      	orrs	r3, r2
 800fe54:	9304      	str	r3, [sp, #16]
 800fe56:	46a2      	mov	sl, r4
 800fe58:	e7d2      	b.n	800fe00 <_svfiprintf_r+0x9c>
 800fe5a:	9b03      	ldr	r3, [sp, #12]
 800fe5c:	1d19      	adds	r1, r3, #4
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	9103      	str	r1, [sp, #12]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	bfbb      	ittet	lt
 800fe66:	425b      	neglt	r3, r3
 800fe68:	f042 0202 	orrlt.w	r2, r2, #2
 800fe6c:	9307      	strge	r3, [sp, #28]
 800fe6e:	9307      	strlt	r3, [sp, #28]
 800fe70:	bfb8      	it	lt
 800fe72:	9204      	strlt	r2, [sp, #16]
 800fe74:	7823      	ldrb	r3, [r4, #0]
 800fe76:	2b2e      	cmp	r3, #46	; 0x2e
 800fe78:	d10c      	bne.n	800fe94 <_svfiprintf_r+0x130>
 800fe7a:	7863      	ldrb	r3, [r4, #1]
 800fe7c:	2b2a      	cmp	r3, #42	; 0x2a
 800fe7e:	d135      	bne.n	800feec <_svfiprintf_r+0x188>
 800fe80:	9b03      	ldr	r3, [sp, #12]
 800fe82:	1d1a      	adds	r2, r3, #4
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	9203      	str	r2, [sp, #12]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	bfb8      	it	lt
 800fe8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe90:	3402      	adds	r4, #2
 800fe92:	9305      	str	r3, [sp, #20]
 800fe94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ff60 <_svfiprintf_r+0x1fc>
 800fe98:	7821      	ldrb	r1, [r4, #0]
 800fe9a:	2203      	movs	r2, #3
 800fe9c:	4650      	mov	r0, sl
 800fe9e:	f7f0 f9af 	bl	8000200 <memchr>
 800fea2:	b140      	cbz	r0, 800feb6 <_svfiprintf_r+0x152>
 800fea4:	2340      	movs	r3, #64	; 0x40
 800fea6:	eba0 000a 	sub.w	r0, r0, sl
 800feaa:	fa03 f000 	lsl.w	r0, r3, r0
 800feae:	9b04      	ldr	r3, [sp, #16]
 800feb0:	4303      	orrs	r3, r0
 800feb2:	3401      	adds	r4, #1
 800feb4:	9304      	str	r3, [sp, #16]
 800feb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feba:	4826      	ldr	r0, [pc, #152]	; (800ff54 <_svfiprintf_r+0x1f0>)
 800febc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fec0:	2206      	movs	r2, #6
 800fec2:	f7f0 f99d 	bl	8000200 <memchr>
 800fec6:	2800      	cmp	r0, #0
 800fec8:	d038      	beq.n	800ff3c <_svfiprintf_r+0x1d8>
 800feca:	4b23      	ldr	r3, [pc, #140]	; (800ff58 <_svfiprintf_r+0x1f4>)
 800fecc:	bb1b      	cbnz	r3, 800ff16 <_svfiprintf_r+0x1b2>
 800fece:	9b03      	ldr	r3, [sp, #12]
 800fed0:	3307      	adds	r3, #7
 800fed2:	f023 0307 	bic.w	r3, r3, #7
 800fed6:	3308      	adds	r3, #8
 800fed8:	9303      	str	r3, [sp, #12]
 800feda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fedc:	4433      	add	r3, r6
 800fede:	9309      	str	r3, [sp, #36]	; 0x24
 800fee0:	e767      	b.n	800fdb2 <_svfiprintf_r+0x4e>
 800fee2:	fb0c 3202 	mla	r2, ip, r2, r3
 800fee6:	460c      	mov	r4, r1
 800fee8:	2001      	movs	r0, #1
 800feea:	e7a5      	b.n	800fe38 <_svfiprintf_r+0xd4>
 800feec:	2300      	movs	r3, #0
 800feee:	3401      	adds	r4, #1
 800fef0:	9305      	str	r3, [sp, #20]
 800fef2:	4619      	mov	r1, r3
 800fef4:	f04f 0c0a 	mov.w	ip, #10
 800fef8:	4620      	mov	r0, r4
 800fefa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fefe:	3a30      	subs	r2, #48	; 0x30
 800ff00:	2a09      	cmp	r2, #9
 800ff02:	d903      	bls.n	800ff0c <_svfiprintf_r+0x1a8>
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d0c5      	beq.n	800fe94 <_svfiprintf_r+0x130>
 800ff08:	9105      	str	r1, [sp, #20]
 800ff0a:	e7c3      	b.n	800fe94 <_svfiprintf_r+0x130>
 800ff0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff10:	4604      	mov	r4, r0
 800ff12:	2301      	movs	r3, #1
 800ff14:	e7f0      	b.n	800fef8 <_svfiprintf_r+0x194>
 800ff16:	ab03      	add	r3, sp, #12
 800ff18:	9300      	str	r3, [sp, #0]
 800ff1a:	462a      	mov	r2, r5
 800ff1c:	4b0f      	ldr	r3, [pc, #60]	; (800ff5c <_svfiprintf_r+0x1f8>)
 800ff1e:	a904      	add	r1, sp, #16
 800ff20:	4638      	mov	r0, r7
 800ff22:	f7fb ffe1 	bl	800bee8 <_printf_float>
 800ff26:	1c42      	adds	r2, r0, #1
 800ff28:	4606      	mov	r6, r0
 800ff2a:	d1d6      	bne.n	800feda <_svfiprintf_r+0x176>
 800ff2c:	89ab      	ldrh	r3, [r5, #12]
 800ff2e:	065b      	lsls	r3, r3, #25
 800ff30:	f53f af2c 	bmi.w	800fd8c <_svfiprintf_r+0x28>
 800ff34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff36:	b01d      	add	sp, #116	; 0x74
 800ff38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3c:	ab03      	add	r3, sp, #12
 800ff3e:	9300      	str	r3, [sp, #0]
 800ff40:	462a      	mov	r2, r5
 800ff42:	4b06      	ldr	r3, [pc, #24]	; (800ff5c <_svfiprintf_r+0x1f8>)
 800ff44:	a904      	add	r1, sp, #16
 800ff46:	4638      	mov	r0, r7
 800ff48:	f7fc fa72 	bl	800c430 <_printf_i>
 800ff4c:	e7eb      	b.n	800ff26 <_svfiprintf_r+0x1c2>
 800ff4e:	bf00      	nop
 800ff50:	08011414 	.word	0x08011414
 800ff54:	0801141e 	.word	0x0801141e
 800ff58:	0800bee9 	.word	0x0800bee9
 800ff5c:	0800fcad 	.word	0x0800fcad
 800ff60:	0801141a 	.word	0x0801141a

0800ff64 <__sfputc_r>:
 800ff64:	6893      	ldr	r3, [r2, #8]
 800ff66:	3b01      	subs	r3, #1
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	b410      	push	{r4}
 800ff6c:	6093      	str	r3, [r2, #8]
 800ff6e:	da08      	bge.n	800ff82 <__sfputc_r+0x1e>
 800ff70:	6994      	ldr	r4, [r2, #24]
 800ff72:	42a3      	cmp	r3, r4
 800ff74:	db01      	blt.n	800ff7a <__sfputc_r+0x16>
 800ff76:	290a      	cmp	r1, #10
 800ff78:	d103      	bne.n	800ff82 <__sfputc_r+0x1e>
 800ff7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff7e:	f7fd bd49 	b.w	800da14 <__swbuf_r>
 800ff82:	6813      	ldr	r3, [r2, #0]
 800ff84:	1c58      	adds	r0, r3, #1
 800ff86:	6010      	str	r0, [r2, #0]
 800ff88:	7019      	strb	r1, [r3, #0]
 800ff8a:	4608      	mov	r0, r1
 800ff8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff90:	4770      	bx	lr

0800ff92 <__sfputs_r>:
 800ff92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff94:	4606      	mov	r6, r0
 800ff96:	460f      	mov	r7, r1
 800ff98:	4614      	mov	r4, r2
 800ff9a:	18d5      	adds	r5, r2, r3
 800ff9c:	42ac      	cmp	r4, r5
 800ff9e:	d101      	bne.n	800ffa4 <__sfputs_r+0x12>
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	e007      	b.n	800ffb4 <__sfputs_r+0x22>
 800ffa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffa8:	463a      	mov	r2, r7
 800ffaa:	4630      	mov	r0, r6
 800ffac:	f7ff ffda 	bl	800ff64 <__sfputc_r>
 800ffb0:	1c43      	adds	r3, r0, #1
 800ffb2:	d1f3      	bne.n	800ff9c <__sfputs_r+0xa>
 800ffb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ffb8 <_vfiprintf_r>:
 800ffb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffbc:	460d      	mov	r5, r1
 800ffbe:	b09d      	sub	sp, #116	; 0x74
 800ffc0:	4614      	mov	r4, r2
 800ffc2:	4698      	mov	r8, r3
 800ffc4:	4606      	mov	r6, r0
 800ffc6:	b118      	cbz	r0, 800ffd0 <_vfiprintf_r+0x18>
 800ffc8:	6983      	ldr	r3, [r0, #24]
 800ffca:	b90b      	cbnz	r3, 800ffd0 <_vfiprintf_r+0x18>
 800ffcc:	f7fb fdb6 	bl	800bb3c <__sinit>
 800ffd0:	4b89      	ldr	r3, [pc, #548]	; (80101f8 <_vfiprintf_r+0x240>)
 800ffd2:	429d      	cmp	r5, r3
 800ffd4:	d11b      	bne.n	801000e <_vfiprintf_r+0x56>
 800ffd6:	6875      	ldr	r5, [r6, #4]
 800ffd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffda:	07d9      	lsls	r1, r3, #31
 800ffdc:	d405      	bmi.n	800ffea <_vfiprintf_r+0x32>
 800ffde:	89ab      	ldrh	r3, [r5, #12]
 800ffe0:	059a      	lsls	r2, r3, #22
 800ffe2:	d402      	bmi.n	800ffea <_vfiprintf_r+0x32>
 800ffe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffe6:	f7fb fe6c 	bl	800bcc2 <__retarget_lock_acquire_recursive>
 800ffea:	89ab      	ldrh	r3, [r5, #12]
 800ffec:	071b      	lsls	r3, r3, #28
 800ffee:	d501      	bpl.n	800fff4 <_vfiprintf_r+0x3c>
 800fff0:	692b      	ldr	r3, [r5, #16]
 800fff2:	b9eb      	cbnz	r3, 8010030 <_vfiprintf_r+0x78>
 800fff4:	4629      	mov	r1, r5
 800fff6:	4630      	mov	r0, r6
 800fff8:	f7fd fd70 	bl	800dadc <__swsetup_r>
 800fffc:	b1c0      	cbz	r0, 8010030 <_vfiprintf_r+0x78>
 800fffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010000:	07dc      	lsls	r4, r3, #31
 8010002:	d50e      	bpl.n	8010022 <_vfiprintf_r+0x6a>
 8010004:	f04f 30ff 	mov.w	r0, #4294967295
 8010008:	b01d      	add	sp, #116	; 0x74
 801000a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801000e:	4b7b      	ldr	r3, [pc, #492]	; (80101fc <_vfiprintf_r+0x244>)
 8010010:	429d      	cmp	r5, r3
 8010012:	d101      	bne.n	8010018 <_vfiprintf_r+0x60>
 8010014:	68b5      	ldr	r5, [r6, #8]
 8010016:	e7df      	b.n	800ffd8 <_vfiprintf_r+0x20>
 8010018:	4b79      	ldr	r3, [pc, #484]	; (8010200 <_vfiprintf_r+0x248>)
 801001a:	429d      	cmp	r5, r3
 801001c:	bf08      	it	eq
 801001e:	68f5      	ldreq	r5, [r6, #12]
 8010020:	e7da      	b.n	800ffd8 <_vfiprintf_r+0x20>
 8010022:	89ab      	ldrh	r3, [r5, #12]
 8010024:	0598      	lsls	r0, r3, #22
 8010026:	d4ed      	bmi.n	8010004 <_vfiprintf_r+0x4c>
 8010028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801002a:	f7fb fe4b 	bl	800bcc4 <__retarget_lock_release_recursive>
 801002e:	e7e9      	b.n	8010004 <_vfiprintf_r+0x4c>
 8010030:	2300      	movs	r3, #0
 8010032:	9309      	str	r3, [sp, #36]	; 0x24
 8010034:	2320      	movs	r3, #32
 8010036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801003a:	f8cd 800c 	str.w	r8, [sp, #12]
 801003e:	2330      	movs	r3, #48	; 0x30
 8010040:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010204 <_vfiprintf_r+0x24c>
 8010044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010048:	f04f 0901 	mov.w	r9, #1
 801004c:	4623      	mov	r3, r4
 801004e:	469a      	mov	sl, r3
 8010050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010054:	b10a      	cbz	r2, 801005a <_vfiprintf_r+0xa2>
 8010056:	2a25      	cmp	r2, #37	; 0x25
 8010058:	d1f9      	bne.n	801004e <_vfiprintf_r+0x96>
 801005a:	ebba 0b04 	subs.w	fp, sl, r4
 801005e:	d00b      	beq.n	8010078 <_vfiprintf_r+0xc0>
 8010060:	465b      	mov	r3, fp
 8010062:	4622      	mov	r2, r4
 8010064:	4629      	mov	r1, r5
 8010066:	4630      	mov	r0, r6
 8010068:	f7ff ff93 	bl	800ff92 <__sfputs_r>
 801006c:	3001      	adds	r0, #1
 801006e:	f000 80aa 	beq.w	80101c6 <_vfiprintf_r+0x20e>
 8010072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010074:	445a      	add	r2, fp
 8010076:	9209      	str	r2, [sp, #36]	; 0x24
 8010078:	f89a 3000 	ldrb.w	r3, [sl]
 801007c:	2b00      	cmp	r3, #0
 801007e:	f000 80a2 	beq.w	80101c6 <_vfiprintf_r+0x20e>
 8010082:	2300      	movs	r3, #0
 8010084:	f04f 32ff 	mov.w	r2, #4294967295
 8010088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801008c:	f10a 0a01 	add.w	sl, sl, #1
 8010090:	9304      	str	r3, [sp, #16]
 8010092:	9307      	str	r3, [sp, #28]
 8010094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010098:	931a      	str	r3, [sp, #104]	; 0x68
 801009a:	4654      	mov	r4, sl
 801009c:	2205      	movs	r2, #5
 801009e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100a2:	4858      	ldr	r0, [pc, #352]	; (8010204 <_vfiprintf_r+0x24c>)
 80100a4:	f7f0 f8ac 	bl	8000200 <memchr>
 80100a8:	9a04      	ldr	r2, [sp, #16]
 80100aa:	b9d8      	cbnz	r0, 80100e4 <_vfiprintf_r+0x12c>
 80100ac:	06d1      	lsls	r1, r2, #27
 80100ae:	bf44      	itt	mi
 80100b0:	2320      	movmi	r3, #32
 80100b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100b6:	0713      	lsls	r3, r2, #28
 80100b8:	bf44      	itt	mi
 80100ba:	232b      	movmi	r3, #43	; 0x2b
 80100bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100c0:	f89a 3000 	ldrb.w	r3, [sl]
 80100c4:	2b2a      	cmp	r3, #42	; 0x2a
 80100c6:	d015      	beq.n	80100f4 <_vfiprintf_r+0x13c>
 80100c8:	9a07      	ldr	r2, [sp, #28]
 80100ca:	4654      	mov	r4, sl
 80100cc:	2000      	movs	r0, #0
 80100ce:	f04f 0c0a 	mov.w	ip, #10
 80100d2:	4621      	mov	r1, r4
 80100d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100d8:	3b30      	subs	r3, #48	; 0x30
 80100da:	2b09      	cmp	r3, #9
 80100dc:	d94e      	bls.n	801017c <_vfiprintf_r+0x1c4>
 80100de:	b1b0      	cbz	r0, 801010e <_vfiprintf_r+0x156>
 80100e0:	9207      	str	r2, [sp, #28]
 80100e2:	e014      	b.n	801010e <_vfiprintf_r+0x156>
 80100e4:	eba0 0308 	sub.w	r3, r0, r8
 80100e8:	fa09 f303 	lsl.w	r3, r9, r3
 80100ec:	4313      	orrs	r3, r2
 80100ee:	9304      	str	r3, [sp, #16]
 80100f0:	46a2      	mov	sl, r4
 80100f2:	e7d2      	b.n	801009a <_vfiprintf_r+0xe2>
 80100f4:	9b03      	ldr	r3, [sp, #12]
 80100f6:	1d19      	adds	r1, r3, #4
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	9103      	str	r1, [sp, #12]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	bfbb      	ittet	lt
 8010100:	425b      	neglt	r3, r3
 8010102:	f042 0202 	orrlt.w	r2, r2, #2
 8010106:	9307      	strge	r3, [sp, #28]
 8010108:	9307      	strlt	r3, [sp, #28]
 801010a:	bfb8      	it	lt
 801010c:	9204      	strlt	r2, [sp, #16]
 801010e:	7823      	ldrb	r3, [r4, #0]
 8010110:	2b2e      	cmp	r3, #46	; 0x2e
 8010112:	d10c      	bne.n	801012e <_vfiprintf_r+0x176>
 8010114:	7863      	ldrb	r3, [r4, #1]
 8010116:	2b2a      	cmp	r3, #42	; 0x2a
 8010118:	d135      	bne.n	8010186 <_vfiprintf_r+0x1ce>
 801011a:	9b03      	ldr	r3, [sp, #12]
 801011c:	1d1a      	adds	r2, r3, #4
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	9203      	str	r2, [sp, #12]
 8010122:	2b00      	cmp	r3, #0
 8010124:	bfb8      	it	lt
 8010126:	f04f 33ff 	movlt.w	r3, #4294967295
 801012a:	3402      	adds	r4, #2
 801012c:	9305      	str	r3, [sp, #20]
 801012e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010214 <_vfiprintf_r+0x25c>
 8010132:	7821      	ldrb	r1, [r4, #0]
 8010134:	2203      	movs	r2, #3
 8010136:	4650      	mov	r0, sl
 8010138:	f7f0 f862 	bl	8000200 <memchr>
 801013c:	b140      	cbz	r0, 8010150 <_vfiprintf_r+0x198>
 801013e:	2340      	movs	r3, #64	; 0x40
 8010140:	eba0 000a 	sub.w	r0, r0, sl
 8010144:	fa03 f000 	lsl.w	r0, r3, r0
 8010148:	9b04      	ldr	r3, [sp, #16]
 801014a:	4303      	orrs	r3, r0
 801014c:	3401      	adds	r4, #1
 801014e:	9304      	str	r3, [sp, #16]
 8010150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010154:	482c      	ldr	r0, [pc, #176]	; (8010208 <_vfiprintf_r+0x250>)
 8010156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801015a:	2206      	movs	r2, #6
 801015c:	f7f0 f850 	bl	8000200 <memchr>
 8010160:	2800      	cmp	r0, #0
 8010162:	d03f      	beq.n	80101e4 <_vfiprintf_r+0x22c>
 8010164:	4b29      	ldr	r3, [pc, #164]	; (801020c <_vfiprintf_r+0x254>)
 8010166:	bb1b      	cbnz	r3, 80101b0 <_vfiprintf_r+0x1f8>
 8010168:	9b03      	ldr	r3, [sp, #12]
 801016a:	3307      	adds	r3, #7
 801016c:	f023 0307 	bic.w	r3, r3, #7
 8010170:	3308      	adds	r3, #8
 8010172:	9303      	str	r3, [sp, #12]
 8010174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010176:	443b      	add	r3, r7
 8010178:	9309      	str	r3, [sp, #36]	; 0x24
 801017a:	e767      	b.n	801004c <_vfiprintf_r+0x94>
 801017c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010180:	460c      	mov	r4, r1
 8010182:	2001      	movs	r0, #1
 8010184:	e7a5      	b.n	80100d2 <_vfiprintf_r+0x11a>
 8010186:	2300      	movs	r3, #0
 8010188:	3401      	adds	r4, #1
 801018a:	9305      	str	r3, [sp, #20]
 801018c:	4619      	mov	r1, r3
 801018e:	f04f 0c0a 	mov.w	ip, #10
 8010192:	4620      	mov	r0, r4
 8010194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010198:	3a30      	subs	r2, #48	; 0x30
 801019a:	2a09      	cmp	r2, #9
 801019c:	d903      	bls.n	80101a6 <_vfiprintf_r+0x1ee>
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d0c5      	beq.n	801012e <_vfiprintf_r+0x176>
 80101a2:	9105      	str	r1, [sp, #20]
 80101a4:	e7c3      	b.n	801012e <_vfiprintf_r+0x176>
 80101a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80101aa:	4604      	mov	r4, r0
 80101ac:	2301      	movs	r3, #1
 80101ae:	e7f0      	b.n	8010192 <_vfiprintf_r+0x1da>
 80101b0:	ab03      	add	r3, sp, #12
 80101b2:	9300      	str	r3, [sp, #0]
 80101b4:	462a      	mov	r2, r5
 80101b6:	4b16      	ldr	r3, [pc, #88]	; (8010210 <_vfiprintf_r+0x258>)
 80101b8:	a904      	add	r1, sp, #16
 80101ba:	4630      	mov	r0, r6
 80101bc:	f7fb fe94 	bl	800bee8 <_printf_float>
 80101c0:	4607      	mov	r7, r0
 80101c2:	1c78      	adds	r0, r7, #1
 80101c4:	d1d6      	bne.n	8010174 <_vfiprintf_r+0x1bc>
 80101c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101c8:	07d9      	lsls	r1, r3, #31
 80101ca:	d405      	bmi.n	80101d8 <_vfiprintf_r+0x220>
 80101cc:	89ab      	ldrh	r3, [r5, #12]
 80101ce:	059a      	lsls	r2, r3, #22
 80101d0:	d402      	bmi.n	80101d8 <_vfiprintf_r+0x220>
 80101d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101d4:	f7fb fd76 	bl	800bcc4 <__retarget_lock_release_recursive>
 80101d8:	89ab      	ldrh	r3, [r5, #12]
 80101da:	065b      	lsls	r3, r3, #25
 80101dc:	f53f af12 	bmi.w	8010004 <_vfiprintf_r+0x4c>
 80101e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101e2:	e711      	b.n	8010008 <_vfiprintf_r+0x50>
 80101e4:	ab03      	add	r3, sp, #12
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	462a      	mov	r2, r5
 80101ea:	4b09      	ldr	r3, [pc, #36]	; (8010210 <_vfiprintf_r+0x258>)
 80101ec:	a904      	add	r1, sp, #16
 80101ee:	4630      	mov	r0, r6
 80101f0:	f7fc f91e 	bl	800c430 <_printf_i>
 80101f4:	e7e4      	b.n	80101c0 <_vfiprintf_r+0x208>
 80101f6:	bf00      	nop
 80101f8:	08010fd0 	.word	0x08010fd0
 80101fc:	08010ff0 	.word	0x08010ff0
 8010200:	08010fb0 	.word	0x08010fb0
 8010204:	08011414 	.word	0x08011414
 8010208:	0801141e 	.word	0x0801141e
 801020c:	0800bee9 	.word	0x0800bee9
 8010210:	0800ff93 	.word	0x0800ff93
 8010214:	0801141a 	.word	0x0801141a

08010218 <_read_r>:
 8010218:	b538      	push	{r3, r4, r5, lr}
 801021a:	4d07      	ldr	r5, [pc, #28]	; (8010238 <_read_r+0x20>)
 801021c:	4604      	mov	r4, r0
 801021e:	4608      	mov	r0, r1
 8010220:	4611      	mov	r1, r2
 8010222:	2200      	movs	r2, #0
 8010224:	602a      	str	r2, [r5, #0]
 8010226:	461a      	mov	r2, r3
 8010228:	f000 f948 	bl	80104bc <_read>
 801022c:	1c43      	adds	r3, r0, #1
 801022e:	d102      	bne.n	8010236 <_read_r+0x1e>
 8010230:	682b      	ldr	r3, [r5, #0]
 8010232:	b103      	cbz	r3, 8010236 <_read_r+0x1e>
 8010234:	6023      	str	r3, [r4, #0]
 8010236:	bd38      	pop	{r3, r4, r5, pc}
 8010238:	200013bc 	.word	0x200013bc
 801023c:	00000000 	.word	0x00000000

08010240 <nan>:
 8010240:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010248 <nan+0x8>
 8010244:	4770      	bx	lr
 8010246:	bf00      	nop
 8010248:	00000000 	.word	0x00000000
 801024c:	7ff80000 	.word	0x7ff80000

08010250 <strncmp>:
 8010250:	b510      	push	{r4, lr}
 8010252:	b16a      	cbz	r2, 8010270 <strncmp+0x20>
 8010254:	3901      	subs	r1, #1
 8010256:	1884      	adds	r4, r0, r2
 8010258:	f810 3b01 	ldrb.w	r3, [r0], #1
 801025c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010260:	4293      	cmp	r3, r2
 8010262:	d103      	bne.n	801026c <strncmp+0x1c>
 8010264:	42a0      	cmp	r0, r4
 8010266:	d001      	beq.n	801026c <strncmp+0x1c>
 8010268:	2b00      	cmp	r3, #0
 801026a:	d1f5      	bne.n	8010258 <strncmp+0x8>
 801026c:	1a98      	subs	r0, r3, r2
 801026e:	bd10      	pop	{r4, pc}
 8010270:	4610      	mov	r0, r2
 8010272:	e7fc      	b.n	801026e <strncmp+0x1e>

08010274 <__ascii_wctomb>:
 8010274:	b149      	cbz	r1, 801028a <__ascii_wctomb+0x16>
 8010276:	2aff      	cmp	r2, #255	; 0xff
 8010278:	bf85      	ittet	hi
 801027a:	238a      	movhi	r3, #138	; 0x8a
 801027c:	6003      	strhi	r3, [r0, #0]
 801027e:	700a      	strbls	r2, [r1, #0]
 8010280:	f04f 30ff 	movhi.w	r0, #4294967295
 8010284:	bf98      	it	ls
 8010286:	2001      	movls	r0, #1
 8010288:	4770      	bx	lr
 801028a:	4608      	mov	r0, r1
 801028c:	4770      	bx	lr
	...

08010290 <__assert_func>:
 8010290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010292:	4614      	mov	r4, r2
 8010294:	461a      	mov	r2, r3
 8010296:	4b09      	ldr	r3, [pc, #36]	; (80102bc <__assert_func+0x2c>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4605      	mov	r5, r0
 801029c:	68d8      	ldr	r0, [r3, #12]
 801029e:	b14c      	cbz	r4, 80102b4 <__assert_func+0x24>
 80102a0:	4b07      	ldr	r3, [pc, #28]	; (80102c0 <__assert_func+0x30>)
 80102a2:	9100      	str	r1, [sp, #0]
 80102a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80102a8:	4906      	ldr	r1, [pc, #24]	; (80102c4 <__assert_func+0x34>)
 80102aa:	462b      	mov	r3, r5
 80102ac:	f000 f80e 	bl	80102cc <fiprintf>
 80102b0:	f000 f880 	bl	80103b4 <abort>
 80102b4:	4b04      	ldr	r3, [pc, #16]	; (80102c8 <__assert_func+0x38>)
 80102b6:	461c      	mov	r4, r3
 80102b8:	e7f3      	b.n	80102a2 <__assert_func+0x12>
 80102ba:	bf00      	nop
 80102bc:	20000080 	.word	0x20000080
 80102c0:	08011425 	.word	0x08011425
 80102c4:	08011432 	.word	0x08011432
 80102c8:	08011460 	.word	0x08011460

080102cc <fiprintf>:
 80102cc:	b40e      	push	{r1, r2, r3}
 80102ce:	b503      	push	{r0, r1, lr}
 80102d0:	4601      	mov	r1, r0
 80102d2:	ab03      	add	r3, sp, #12
 80102d4:	4805      	ldr	r0, [pc, #20]	; (80102ec <fiprintf+0x20>)
 80102d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80102da:	6800      	ldr	r0, [r0, #0]
 80102dc:	9301      	str	r3, [sp, #4]
 80102de:	f7ff fe6b 	bl	800ffb8 <_vfiprintf_r>
 80102e2:	b002      	add	sp, #8
 80102e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80102e8:	b003      	add	sp, #12
 80102ea:	4770      	bx	lr
 80102ec:	20000080 	.word	0x20000080

080102f0 <_fstat_r>:
 80102f0:	b538      	push	{r3, r4, r5, lr}
 80102f2:	4d07      	ldr	r5, [pc, #28]	; (8010310 <_fstat_r+0x20>)
 80102f4:	2300      	movs	r3, #0
 80102f6:	4604      	mov	r4, r0
 80102f8:	4608      	mov	r0, r1
 80102fa:	4611      	mov	r1, r2
 80102fc:	602b      	str	r3, [r5, #0]
 80102fe:	f000 f8b5 	bl	801046c <_fstat>
 8010302:	1c43      	adds	r3, r0, #1
 8010304:	d102      	bne.n	801030c <_fstat_r+0x1c>
 8010306:	682b      	ldr	r3, [r5, #0]
 8010308:	b103      	cbz	r3, 801030c <_fstat_r+0x1c>
 801030a:	6023      	str	r3, [r4, #0]
 801030c:	bd38      	pop	{r3, r4, r5, pc}
 801030e:	bf00      	nop
 8010310:	200013bc 	.word	0x200013bc

08010314 <_isatty_r>:
 8010314:	b538      	push	{r3, r4, r5, lr}
 8010316:	4d06      	ldr	r5, [pc, #24]	; (8010330 <_isatty_r+0x1c>)
 8010318:	2300      	movs	r3, #0
 801031a:	4604      	mov	r4, r0
 801031c:	4608      	mov	r0, r1
 801031e:	602b      	str	r3, [r5, #0]
 8010320:	f000 f8b4 	bl	801048c <_isatty>
 8010324:	1c43      	adds	r3, r0, #1
 8010326:	d102      	bne.n	801032e <_isatty_r+0x1a>
 8010328:	682b      	ldr	r3, [r5, #0]
 801032a:	b103      	cbz	r3, 801032e <_isatty_r+0x1a>
 801032c:	6023      	str	r3, [r4, #0]
 801032e:	bd38      	pop	{r3, r4, r5, pc}
 8010330:	200013bc 	.word	0x200013bc

08010334 <memmove>:
 8010334:	4288      	cmp	r0, r1
 8010336:	b510      	push	{r4, lr}
 8010338:	eb01 0402 	add.w	r4, r1, r2
 801033c:	d902      	bls.n	8010344 <memmove+0x10>
 801033e:	4284      	cmp	r4, r0
 8010340:	4623      	mov	r3, r4
 8010342:	d807      	bhi.n	8010354 <memmove+0x20>
 8010344:	1e43      	subs	r3, r0, #1
 8010346:	42a1      	cmp	r1, r4
 8010348:	d008      	beq.n	801035c <memmove+0x28>
 801034a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801034e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010352:	e7f8      	b.n	8010346 <memmove+0x12>
 8010354:	4402      	add	r2, r0
 8010356:	4601      	mov	r1, r0
 8010358:	428a      	cmp	r2, r1
 801035a:	d100      	bne.n	801035e <memmove+0x2a>
 801035c:	bd10      	pop	{r4, pc}
 801035e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010366:	e7f7      	b.n	8010358 <memmove+0x24>

08010368 <_realloc_r>:
 8010368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801036a:	4607      	mov	r7, r0
 801036c:	4614      	mov	r4, r2
 801036e:	460e      	mov	r6, r1
 8010370:	b921      	cbnz	r1, 801037c <_realloc_r+0x14>
 8010372:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010376:	4611      	mov	r1, r2
 8010378:	f7fb bcbc 	b.w	800bcf4 <_malloc_r>
 801037c:	b922      	cbnz	r2, 8010388 <_realloc_r+0x20>
 801037e:	f7ff fc45 	bl	800fc0c <_free_r>
 8010382:	4625      	mov	r5, r4
 8010384:	4628      	mov	r0, r5
 8010386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010388:	f000 f81b 	bl	80103c2 <_malloc_usable_size_r>
 801038c:	42a0      	cmp	r0, r4
 801038e:	d20f      	bcs.n	80103b0 <_realloc_r+0x48>
 8010390:	4621      	mov	r1, r4
 8010392:	4638      	mov	r0, r7
 8010394:	f7fb fcae 	bl	800bcf4 <_malloc_r>
 8010398:	4605      	mov	r5, r0
 801039a:	2800      	cmp	r0, #0
 801039c:	d0f2      	beq.n	8010384 <_realloc_r+0x1c>
 801039e:	4631      	mov	r1, r6
 80103a0:	4622      	mov	r2, r4
 80103a2:	f7fb fc90 	bl	800bcc6 <memcpy>
 80103a6:	4631      	mov	r1, r6
 80103a8:	4638      	mov	r0, r7
 80103aa:	f7ff fc2f 	bl	800fc0c <_free_r>
 80103ae:	e7e9      	b.n	8010384 <_realloc_r+0x1c>
 80103b0:	4635      	mov	r5, r6
 80103b2:	e7e7      	b.n	8010384 <_realloc_r+0x1c>

080103b4 <abort>:
 80103b4:	b508      	push	{r3, lr}
 80103b6:	2006      	movs	r0, #6
 80103b8:	f000 f834 	bl	8010424 <raise>
 80103bc:	2001      	movs	r0, #1
 80103be:	f000 f89b 	bl	80104f8 <_exit>

080103c2 <_malloc_usable_size_r>:
 80103c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80103c6:	1f18      	subs	r0, r3, #4
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	bfbc      	itt	lt
 80103cc:	580b      	ldrlt	r3, [r1, r0]
 80103ce:	18c0      	addlt	r0, r0, r3
 80103d0:	4770      	bx	lr

080103d2 <_raise_r>:
 80103d2:	291f      	cmp	r1, #31
 80103d4:	b538      	push	{r3, r4, r5, lr}
 80103d6:	4604      	mov	r4, r0
 80103d8:	460d      	mov	r5, r1
 80103da:	d904      	bls.n	80103e6 <_raise_r+0x14>
 80103dc:	2316      	movs	r3, #22
 80103de:	6003      	str	r3, [r0, #0]
 80103e0:	f04f 30ff 	mov.w	r0, #4294967295
 80103e4:	bd38      	pop	{r3, r4, r5, pc}
 80103e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80103e8:	b112      	cbz	r2, 80103f0 <_raise_r+0x1e>
 80103ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103ee:	b94b      	cbnz	r3, 8010404 <_raise_r+0x32>
 80103f0:	4620      	mov	r0, r4
 80103f2:	f000 f831 	bl	8010458 <_getpid_r>
 80103f6:	462a      	mov	r2, r5
 80103f8:	4601      	mov	r1, r0
 80103fa:	4620      	mov	r0, r4
 80103fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010400:	f000 b818 	b.w	8010434 <_kill_r>
 8010404:	2b01      	cmp	r3, #1
 8010406:	d00a      	beq.n	801041e <_raise_r+0x4c>
 8010408:	1c59      	adds	r1, r3, #1
 801040a:	d103      	bne.n	8010414 <_raise_r+0x42>
 801040c:	2316      	movs	r3, #22
 801040e:	6003      	str	r3, [r0, #0]
 8010410:	2001      	movs	r0, #1
 8010412:	e7e7      	b.n	80103e4 <_raise_r+0x12>
 8010414:	2400      	movs	r4, #0
 8010416:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801041a:	4628      	mov	r0, r5
 801041c:	4798      	blx	r3
 801041e:	2000      	movs	r0, #0
 8010420:	e7e0      	b.n	80103e4 <_raise_r+0x12>
	...

08010424 <raise>:
 8010424:	4b02      	ldr	r3, [pc, #8]	; (8010430 <raise+0xc>)
 8010426:	4601      	mov	r1, r0
 8010428:	6818      	ldr	r0, [r3, #0]
 801042a:	f7ff bfd2 	b.w	80103d2 <_raise_r>
 801042e:	bf00      	nop
 8010430:	20000080 	.word	0x20000080

08010434 <_kill_r>:
 8010434:	b538      	push	{r3, r4, r5, lr}
 8010436:	4d07      	ldr	r5, [pc, #28]	; (8010454 <_kill_r+0x20>)
 8010438:	2300      	movs	r3, #0
 801043a:	4604      	mov	r4, r0
 801043c:	4608      	mov	r0, r1
 801043e:	4611      	mov	r1, r2
 8010440:	602b      	str	r3, [r5, #0]
 8010442:	f000 f82b 	bl	801049c <_kill>
 8010446:	1c43      	adds	r3, r0, #1
 8010448:	d102      	bne.n	8010450 <_kill_r+0x1c>
 801044a:	682b      	ldr	r3, [r5, #0]
 801044c:	b103      	cbz	r3, 8010450 <_kill_r+0x1c>
 801044e:	6023      	str	r3, [r4, #0]
 8010450:	bd38      	pop	{r3, r4, r5, pc}
 8010452:	bf00      	nop
 8010454:	200013bc 	.word	0x200013bc

08010458 <_getpid_r>:
 8010458:	f000 b810 	b.w	801047c <_getpid>

0801045c <_close>:
 801045c:	4b02      	ldr	r3, [pc, #8]	; (8010468 <_close+0xc>)
 801045e:	2258      	movs	r2, #88	; 0x58
 8010460:	601a      	str	r2, [r3, #0]
 8010462:	f04f 30ff 	mov.w	r0, #4294967295
 8010466:	4770      	bx	lr
 8010468:	200013bc 	.word	0x200013bc

0801046c <_fstat>:
 801046c:	4b02      	ldr	r3, [pc, #8]	; (8010478 <_fstat+0xc>)
 801046e:	2258      	movs	r2, #88	; 0x58
 8010470:	601a      	str	r2, [r3, #0]
 8010472:	f04f 30ff 	mov.w	r0, #4294967295
 8010476:	4770      	bx	lr
 8010478:	200013bc 	.word	0x200013bc

0801047c <_getpid>:
 801047c:	4b02      	ldr	r3, [pc, #8]	; (8010488 <_getpid+0xc>)
 801047e:	2258      	movs	r2, #88	; 0x58
 8010480:	601a      	str	r2, [r3, #0]
 8010482:	f04f 30ff 	mov.w	r0, #4294967295
 8010486:	4770      	bx	lr
 8010488:	200013bc 	.word	0x200013bc

0801048c <_isatty>:
 801048c:	4b02      	ldr	r3, [pc, #8]	; (8010498 <_isatty+0xc>)
 801048e:	2258      	movs	r2, #88	; 0x58
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	2000      	movs	r0, #0
 8010494:	4770      	bx	lr
 8010496:	bf00      	nop
 8010498:	200013bc 	.word	0x200013bc

0801049c <_kill>:
 801049c:	4b02      	ldr	r3, [pc, #8]	; (80104a8 <_kill+0xc>)
 801049e:	2258      	movs	r2, #88	; 0x58
 80104a0:	601a      	str	r2, [r3, #0]
 80104a2:	f04f 30ff 	mov.w	r0, #4294967295
 80104a6:	4770      	bx	lr
 80104a8:	200013bc 	.word	0x200013bc

080104ac <_lseek>:
 80104ac:	4b02      	ldr	r3, [pc, #8]	; (80104b8 <_lseek+0xc>)
 80104ae:	2258      	movs	r2, #88	; 0x58
 80104b0:	601a      	str	r2, [r3, #0]
 80104b2:	f04f 30ff 	mov.w	r0, #4294967295
 80104b6:	4770      	bx	lr
 80104b8:	200013bc 	.word	0x200013bc

080104bc <_read>:
 80104bc:	4b02      	ldr	r3, [pc, #8]	; (80104c8 <_read+0xc>)
 80104be:	2258      	movs	r2, #88	; 0x58
 80104c0:	601a      	str	r2, [r3, #0]
 80104c2:	f04f 30ff 	mov.w	r0, #4294967295
 80104c6:	4770      	bx	lr
 80104c8:	200013bc 	.word	0x200013bc

080104cc <_sbrk>:
 80104cc:	4b04      	ldr	r3, [pc, #16]	; (80104e0 <_sbrk+0x14>)
 80104ce:	6819      	ldr	r1, [r3, #0]
 80104d0:	4602      	mov	r2, r0
 80104d2:	b909      	cbnz	r1, 80104d8 <_sbrk+0xc>
 80104d4:	4903      	ldr	r1, [pc, #12]	; (80104e4 <_sbrk+0x18>)
 80104d6:	6019      	str	r1, [r3, #0]
 80104d8:	6818      	ldr	r0, [r3, #0]
 80104da:	4402      	add	r2, r0
 80104dc:	601a      	str	r2, [r3, #0]
 80104de:	4770      	bx	lr
 80104e0:	20000778 	.word	0x20000778
 80104e4:	200013c0 	.word	0x200013c0

080104e8 <_write>:
 80104e8:	4b02      	ldr	r3, [pc, #8]	; (80104f4 <_write+0xc>)
 80104ea:	2258      	movs	r2, #88	; 0x58
 80104ec:	601a      	str	r2, [r3, #0]
 80104ee:	f04f 30ff 	mov.w	r0, #4294967295
 80104f2:	4770      	bx	lr
 80104f4:	200013bc 	.word	0x200013bc

080104f8 <_exit>:
 80104f8:	e7fe      	b.n	80104f8 <_exit>
	...

080104fc <_init>:
 80104fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104fe:	bf00      	nop
 8010500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010502:	bc08      	pop	{r3}
 8010504:	469e      	mov	lr, r3
 8010506:	4770      	bx	lr

08010508 <_fini>:
 8010508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801050a:	bf00      	nop
 801050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801050e:	bc08      	pop	{r3}
 8010510:	469e      	mov	lr, r3
 8010512:	4770      	bx	lr
