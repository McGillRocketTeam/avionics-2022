
Iridium9603N_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a64c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000119c  0800a820  0800a820  0001a820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9bc  0800b9bc  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9bc  0800b9bc  0001b9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9c4  0800b9c4  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b9c4  0800b9c4  0001b9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9cc  0800b9cc  0001b9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800b9d0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  20000244  0800bc14  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800bc14  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000240c3  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a49  00000000  00000000  00044337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  00047d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001458  00000000  00000000  00049298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c48  00000000  00000000  0004a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bf6  00000000  00000000  00072338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc64d  00000000  00000000  0008af2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016757b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073c0  00000000  00000000  001675d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000244 	.word	0x20000244
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a804 	.word	0x0800a804

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000248 	.word	0x20000248
 800020c:	0800a804 	.word	0x0800a804

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9b9 	b.w	8000f9c <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	b091      	sub	sp, #68	; 0x44
 8000fa4:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa6:	f003 f939 	bl	800421c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000faa:	f000 f82d 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fae:	f000 f8f1 	bl	8001194 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fb2:	f000 f8c5 	bl	8001140 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000fb6:	f000 f895 	bl	80010e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MRT_Static_Iridium_Setup(huart3);
 8000fba:	4e12      	ldr	r6, [pc, #72]	; (8001004 <main+0x64>)
 8000fbc:	466d      	mov	r5, sp
 8000fbe:	f106 0410 	add.w	r4, r6, #16
 8000fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fce:	6823      	ldr	r3, [r4, #0]
 8000fd0:	602b      	str	r3, [r5, #0]
 8000fd2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fd6:	f002 fb61 	bl	800369c <MRT_Static_Iridium_Setup>
  MRT_Static_Iridium_checkCSQ(0);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f002 fba0 	bl	8003720 <MRT_Static_Iridium_checkCSQ>
  for (int i = 0 ; i<10 ; i++){
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	e008      	b.n	8000ff8 <main+0x58>
	  MRT_Static_Iridium_getTime();
 8000fe6:	f002 fbaf 	bl	8003748 <MRT_Static_Iridium_getTime>
	  HAL_Delay(10000);
 8000fea:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fee:	f003 f957 	bl	80042a0 <HAL_Delay>
  for (int i = 0 ; i<10 ; i++){
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b09      	cmp	r3, #9
 8000ffc:	ddf3      	ble.n	8000fe6 <main+0x46>
  }
  MRT_Static_Iridium_Shutdown();
 8000ffe:	f002 fb77 	bl	80036f0 <MRT_Static_Iridium_Shutdown>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001002:	e7fe      	b.n	8001002 <main+0x62>
 8001004:	200004c4 	.word	0x200004c4

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	2234      	movs	r2, #52	; 0x34
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f005 fad2 	bl	80065c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <SystemClock_Config+0xd4>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a29      	ldr	r2, [pc, #164]	; (80010dc <SystemClock_Config+0xd4>)
 8001036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103a:	6413      	str	r3, [r2, #64]	; 0x40
 800103c:	4b27      	ldr	r3, [pc, #156]	; (80010dc <SystemClock_Config+0xd4>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <SystemClock_Config+0xd8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001054:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <SystemClock_Config+0xd8>)
 8001056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <SystemClock_Config+0xd8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001070:	2310      	movs	r3, #16
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001078:	2300      	movs	r3, #0
 800107a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800107c:	2308      	movs	r3, #8
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001080:	2332      	movs	r3, #50	; 0x32
 8001082:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001084:	2302      	movs	r3, #2
 8001086:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001088:	2307      	movs	r3, #7
 800108a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800108c:	2302      	movs	r3, #2
 800108e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4618      	mov	r0, r3
 8001096:	f004 f879 	bl	800518c <HAL_RCC_OscConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010a0:	f000 f8cc 	bl	800123c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a4:	230f      	movs	r3, #15
 80010a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a8:	2302      	movs	r3, #2
 80010aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	2101      	movs	r1, #1
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 fd64 	bl	8004b90 <HAL_RCC_ClockConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010ce:	f000 f8b5 	bl	800123c <Error_Handler>
  }
}
 80010d2:	bf00      	nop
 80010d4:	3750      	adds	r7, #80	; 0x50
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40007000 	.word	0x40007000

080010e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2C1_Init+0x50>)
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <MX_I2C1_Init+0x54>)
 80010ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_I2C1_Init+0x50>)
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <MX_I2C1_Init+0x58>)
 80010f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_I2C1_Init+0x50>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_I2C1_Init+0x50>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_I2C1_Init+0x50>)
 8001102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001106:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <MX_I2C1_Init+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_I2C1_Init+0x50>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <MX_I2C1_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_I2C1_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001120:	4804      	ldr	r0, [pc, #16]	; (8001134 <MX_I2C1_Init+0x50>)
 8001122:	f003 fbbb 	bl	800489c <HAL_I2C_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800112c:	f000 f886 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000508 	.word	0x20000508
 8001138:	40005400 	.word	0x40005400
 800113c:	000186a0 	.word	0x000186a0

08001140 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART3_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART3_UART_Init+0x4c>)
 800114c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001150:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART3_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART3_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART3_UART_Init+0x4c>)
 8001178:	f004 fd54 	bl	8005c24 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f000 f85b 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200004c4 	.word	0x200004c4
 8001190:	40004800 	.word	0x40004800

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_GPIO_Init+0x7c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <MX_GPIO_Init+0x7c>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_GPIO_Init+0x7c>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_GPIO_Init+0x7c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <MX_GPIO_Init+0x7c>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_GPIO_Init+0x7c>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2120      	movs	r1, #32
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <MX_GPIO_Init+0x80>)
 80011e8:	f003 fb3e 	bl	8004868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011ec:	2320      	movs	r3, #32
 80011ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_GPIO_Init+0x80>)
 8001204:	f003 f984 	bl	8004510 <HAL_GPIO_Init>

}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40023800 	.word	0x40023800
 8001214:	40020400 	.word	0x40020400

08001218 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800122a:	f003 f819 	bl	8004260 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40010000 	.word	0x40010000

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	e7fe      	b.n	8001244 <Error_Handler+0x8>
	...

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_MspInit+0x4c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a0f      	ldr	r2, [pc, #60]	; (8001294 <HAL_MspInit+0x4c>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_MspInit+0x4c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <HAL_MspInit+0x4c>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800

08001298 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a19      	ldr	r2, [pc, #100]	; (800131c <HAL_I2C_MspInit+0x84>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d12c      	bne.n	8001314 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e8:	2304      	movs	r3, #4
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <HAL_I2C_MspInit+0x8c>)
 80012f4:	f003 f90c 	bl	8004510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_I2C_MspInit+0x88>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_I2C_MspInit+0x88>)
 8001302:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001306:	6413      	str	r3, [r2, #64]	; 0x40
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_I2C_MspInit+0x88>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	; 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40005400 	.word	0x40005400
 8001320:	40023800 	.word	0x40023800
 8001324:	40020400 	.word	0x40020400

08001328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_UART_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12c      	bne.n	80013a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_UART_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_UART_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001382:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001394:	2307      	movs	r3, #7
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <HAL_UART_MspInit+0x8c>)
 80013a0:	f003 f8b6 	bl	8004510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40004800 	.word	0x40004800
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020c00 	.word	0x40020c00

080013b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	; 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	2019      	movs	r0, #25
 80013ce:	f003 f867 	bl	80044a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013d2:	2019      	movs	r0, #25
 80013d4:	f003 f880 	bl	80044d8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <HAL_InitTick+0xa4>)
 80013de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e0:	4a1e      	ldr	r2, [pc, #120]	; (800145c <HAL_InitTick+0xa4>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6453      	str	r3, [r2, #68]	; 0x44
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_InitTick+0xa4>)
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013f4:	f107 0210 	add.w	r2, r7, #16
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fce0 	bl	8004dc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001404:	f003 fcca 	bl	8004d9c <HAL_RCC_GetPCLK2Freq>
 8001408:	4603      	mov	r3, r0
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001410:	4a13      	ldr	r2, [pc, #76]	; (8001460 <HAL_InitTick+0xa8>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0c9b      	lsrs	r3, r3, #18
 8001418:	3b01      	subs	r3, #1
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <HAL_InitTick+0xac>)
 800141e:	4a12      	ldr	r2, [pc, #72]	; (8001468 <HAL_InitTick+0xb0>)
 8001420:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_InitTick+0xac>)
 8001424:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001428:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_InitTick+0xac>)
 800142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_InitTick+0xac>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_InitTick+0xac>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800143c:	4809      	ldr	r0, [pc, #36]	; (8001464 <HAL_InitTick+0xac>)
 800143e:	f004 f943 	bl	80056c8 <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d104      	bne.n	8001452 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <HAL_InitTick+0xac>)
 800144a:	f004 f997 	bl	800577c <HAL_TIM_Base_Start_IT>
 800144e:	4603      	mov	r3, r0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3730      	adds	r7, #48	; 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	431bde83 	.word	0x431bde83
 8001464:	2000055c 	.word	0x2000055c
 8001468:	40010000 	.word	0x40010000

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014ca:	f004 f9c7 	bl	800585c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	2000055c 	.word	0x2000055c

080014d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
	return 1;
 80014dc:	2301      	movs	r3, #1
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_kill>:

int _kill(int pid, int sig)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014f2:	f004 fee7 	bl	80062c4 <__errno>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2216      	movs	r2, #22
 80014fa:	601a      	str	r2, [r3, #0]
	return -1;
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_exit>:

void _exit (int status)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ffe7 	bl	80014e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800151a:	e7fe      	b.n	800151a <_exit+0x12>

0800151c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e00a      	b.n	8001544 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800152e:	f3af 8000 	nop.w
 8001532:	4601      	mov	r1, r0
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60ba      	str	r2, [r7, #8]
 800153a:	b2ca      	uxtb	r2, r1
 800153c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697a      	ldr	r2, [r7, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf0      	blt.n	800152e <_read+0x12>
	}

return len;
 800154c:	687b      	ldr	r3, [r7, #4]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e009      	b.n	800157c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	60ba      	str	r2, [r7, #8]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	dbf1      	blt.n	8001568 <_write+0x12>
	}
	return len;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <_close>:

int _close(int file)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
	return -1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015b6:	605a      	str	r2, [r3, #4]
	return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <_isatty>:

int _isatty(int file)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	return 1;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
	return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f004 fe4c 	bl	80062c4 <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20020000 	.word	0x20020000
 8001658:	00000400 	.word	0x00000400
 800165c:	20000264 	.word	0x20000264
 8001660:	200005b8 	.word	0x200005b8

08001664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168e:	490e      	ldr	r1, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a4:	4c0b      	ldr	r4, [pc, #44]	; (80016d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016b2:	f7ff ffd7 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b6:	f004 fe0b 	bl	80062d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7ff fc71 	bl	8000fa0 <main>
  bx  lr    
 80016be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 80016cc:	0800b9d0 	.word	0x0800b9d0
  ldr r2, =_sbss
 80016d0:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 80016d4:	200005b8 	.word	0x200005b8

080016d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC_IRQHandler>

080016da <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	6039      	str	r1, [r7, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	4611      	mov	r1, r2
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	4798      	blx	r3
 80016f4:	4603      	mov	r3, r0
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
 8001702:	2301      	movs	r3, #1
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	70fb      	strb	r3, [r7, #3]
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	70fb      	strb	r3, [r7, #3]
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 8001750:	2309      	movs	r3, #9
 8001752:	e01b      	b.n	800178c <_ZN10IridiumSBD5beginEv+0x4e>

   this->reentrant = true;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalBegin();
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 fae3 	bl	8001d28 <_ZN10IridiumSBD13internalBeginEv>
 8001762:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <_ZN10IridiumSBD5beginEv+0x4c>
   {
      if (this->useSerial)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <_ZN10IridiumSBD5beginEv+0x44>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fe5f 	bl	8002440 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8001782:	2100      	movs	r1, #0
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 fda1 	bl	80022cc <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_ZN10IridiumSBD16getSignalQualityERi>:
   return ret;
}

// High-level wrapper for AT+CSQ
int IridiumSBD::getSignalQuality(int &quality)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
   if (this->reentrant)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <_ZN10IridiumSBD16getSignalQualityERi+0x18>
      return ISBD_REENTRANT;
 80017a8:	2309      	movs	r3, #9
 80017aa:	e00d      	b.n	80017c8 <_ZN10IridiumSBD16getSignalQualityERi+0x34>

   this->reentrant = true;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2201      	movs	r2, #1
 80017b0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalGetSignalQuality(quality);
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fc40 	bl	800203c <_ZN10IridiumSBD24internalGetSignalQualityERi>
 80017bc:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   return ret;
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <_ZN10IridiumSBD5sleepEv>:

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 80017e2:	2309      	movs	r3, #9
 80017e4:	e028      	b.n	8001838 <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <_ZN10IridiumSBD5sleepEv+0x30>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80017f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017fa:	d101      	bne.n	8001800 <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 80017fc:	230b      	movs	r3, #11
 80017fe:	e01b      	b.n	8001838 <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 fc61 	bl	80020d0 <_ZN10IridiumSBD13internalSleepEv>
 800180e:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10b      	bne.n	8001836 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 fe09 	bl	8002440 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 800182e:	2100      	movs	r1, #0
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 fd4b 	bl	80022cc <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   if (enable)
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00e      	beq.n	8001878 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
   {
      this->ringAsserted = false;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001868:	f083 0301 	eor.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
      {
        clearRingIndicator();
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f9b2 	bl	8001bdc <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 8001880:	b5b0      	push	{r4, r5, r7, lr}
 8001882:	b09c      	sub	sp, #112	; 0x70
 8001884:	af02      	add	r7, sp, #8
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 800188a:	2301      	movs	r3, #1
 800188c:	2201      	movs	r2, #1
 800188e:	493f      	ldr	r1, [pc, #252]	; (800198c <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fde3 	bl	800245c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8001896:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 80018a0:	2218      	movs	r2, #24
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fc26 	bl	80020f4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f083 0301 	eor.w	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d009      	beq.n	80018c8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 fcdd 	bl	8002274 <_ZN10IridiumSBD9cancelledEv>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 80018c0:	2304      	movs	r3, #4
 80018c2:	e05e      	b.n	8001982 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 80018c4:	2303      	movs	r3, #3
 80018c6:	e05c      	b.n	8001982 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 80018c8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80018cc:	4618      	mov	r0, r3
 80018ce:	f004 fd23 	bl	8006318 <isxdigit>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 80018d8:	230c      	movs	r3, #12
 80018da:	e052      	b.n	8001982 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 80018dc:	2372      	movs	r3, #114	; 0x72
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 80018e0:	2304      	movs	r3, #4
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 80018e4:	230b      	movs	r3, #11
 80018e6:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 80018e8:	230e      	movs	r3, #14
 80018ea:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 80018ec:	2317      	movs	r3, #23
 80018ee:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 80018f0:	2337      	movs	r3, #55	; 0x37
 80018f2:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 80018f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018f8:	2210      	movs	r2, #16
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f005 ff95 	bl	800782c <strtoul>
 8001902:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8001904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001906:	4a24      	ldr	r2, [pc, #144]	; (8001998 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8001908:	fba2 2303 	umull	r2, r3, r2, r3
 800190c:	099b      	lsrs	r3, r3, #6
 800190e:	225a      	movs	r2, #90	; 0x5a
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 8001916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001918:	085b      	lsrs	r3, r3, #1
 800191a:	4a20      	ldr	r2, [pc, #128]	; (800199c <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	095b      	lsrs	r3, r3, #5
 8001922:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8001930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001932:	225a      	movs	r2, #90	; 0x5a
 8001934:	fb02 f303 	mul.w	r3, r2, r3
 8001938:	4a17      	ldr	r2, [pc, #92]	; (8001998 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	099b      	lsrs	r3, r3, #6
 8001940:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001942:	4413      	add	r3, r2
 8001944:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4618      	mov	r0, r3
 800194c:	f004 ff18 	bl	8006780 <mktime>
 8001950:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 8001954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001956:	4618      	mov	r0, r3
 8001958:	f04f 0100 	mov.w	r1, #0
 800195c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001960:	1884      	adds	r4, r0, r2
 8001962:	eb41 0503 	adc.w	r5, r1, r3
 8001966:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	4618      	mov	r0, r3
 8001970:	f004 fcda 	bl	8006328 <localtime>
 8001974:	4603      	mov	r3, r0
 8001976:	2224      	movs	r2, #36	; 0x24
 8001978:	4619      	mov	r1, r3
 800197a:	6838      	ldr	r0, [r7, #0]
 800197c:	f004 fdf8 	bl	8006570 <memcpy>
   return ISBD_SUCCESS;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3768      	adds	r7, #104	; 0x68
 8001986:	46bd      	mov	sp, r7
 8001988:	bdb0      	pop	{r4, r5, r7, pc}
 800198a:	bf00      	nop
 800198c:	0800a848 	.word	0x0800a848
 8001990:	0800a860 	.word	0x0800a860
 8001994:	0800a854 	.word	0x0800a854
 8001998:	10624dd3 	.word	0x10624dd3
 800199c:	b60b60b7 	.word	0xb60b60b7

080019a0 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af02      	add	r7, sp, #8
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b07      	cmp	r3, #7
 80019b0:	d801      	bhi.n	80019b6 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 80019b2:	2308      	movs	r3, #8
 80019b4:	e01e      	b.n	80019f4 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 80019b6:	2301      	movs	r3, #1
 80019b8:	2201      	movs	r2, #1
 80019ba:	4910      	ldr	r1, [pc, #64]	; (80019fc <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 fd4d 	bl	800245c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 fb91 	bl	80020f4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f083 0301 	eor.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 fc48 	bl	8002274 <_ZN10IridiumSBD9cancelledEv>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 80019ea:	2304      	movs	r3, #4
 80019ec:	e002      	b.n	80019f4 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 80019ee:	2303      	movs	r3, #3
 80019f0:	e000      	b.n	80019f4 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	0800a868 	.word	0x0800a868
 8001a00:	0800a860 	.word	0x0800a860
 8001a04:	0800a874 	.word	0x0800a874

08001a08 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d004      	beq.n	8001a28 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001a1e:	4918      	ldr	r1, [pc, #96]	; (8001a80 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fdc3 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8001a26:	e028      	b.n	8001a7a <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f001 f8a1 	bl	8002b70 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00b      	beq.n	8001a4c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001a40:	4313      	orrs	r3, r2
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8001a4a:	e00f      	b.n	8001a6c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001a52:	b25a      	sxtb	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001a72:	4619      	mov	r1, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f001 f8b6 	bl	8002be6 <_ZN10IridiumSBD11set9603pinsEh>
}
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	0800a890 	.word	0x0800a890

08001a84 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1e>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001a96:	4912      	ldr	r1, [pc, #72]	; (8001ae0 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 fd87 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e01a      	b.n	8001ad8 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f001 f864 	bl	8002b70 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf14      	ite	ne
 8001ac8:	2301      	movne	r3, #1
 8001aca:	2300      	moveq	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  {
    return(true);
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }
  else
  {
    return(false);
 8001ad6:	2300      	movs	r3, #0
  }
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	0800a8dc 	.word	0x0800a8dc

08001ae4 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d004      	beq.n	8001b04 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001afa:	4918      	ldr	r1, [pc, #96]	; (8001b5c <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fd55 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8001b02:	e028      	b.n	8001b56 <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f001 f833 	bl	8002b70 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00b      	beq.n	8001b28 <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8001b26:	e00f      	b.n	8001b48 <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001b2e:	b25a      	sxtb	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8001b36:	b25b      	sxtb	r3, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	b25b      	sxtb	r3, r3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001b4e:	4619      	mov	r1, r3
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f001 f848 	bl	8002be6 <_ZN10IridiumSBD11set9603pinsEh>
}
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	0800a928 	.word	0x0800a928

08001b60 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001b76:	4918      	ldr	r1, [pc, #96]	; (8001bd8 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fd17 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8001b7e:	e028      	b.n	8001bd2 <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 fff5 	bl	8002b70 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00b      	beq.n	8001ba4 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8001ba2:	e00f      	b.n	8001bc4 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001baa:	b25a      	sxtb	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	4013      	ands	r3, r2
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f001 f80a 	bl	8002be6 <_ZN10IridiumSBD11set9603pinsEh>
}
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	0800a970 	.word	0x0800a970

08001bdc <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1c>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001bee:	4913      	ldr	r1, [pc, #76]	; (8001c3c <_ZN10IridiumSBD18clearRingIndicatorEv+0x60>)
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fcdb 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8001bf6:	e01d      	b.n	8001c34 <_ZN10IridiumSBD18clearRingIndicatorEv+0x58>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 ffb9 	bl	8002b70 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001c04:	b25a      	sxtb	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	4013      	ands	r3, r2
 8001c14:	b25b      	sxtb	r3, r3
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  set9603pins(IO_REGISTER); // Update the pins
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 ffdd 	bl	8002be6 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	0800aa40 	.word	0x0800aa40

08001c40 <_ZN10IridiumSBD21checkNetworkAvailableEv>:

bool IridiumSBD::checkNetworkAvailable()
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d005      	beq.n	8001c5e <_ZN10IridiumSBD21checkNetworkAvailableEv+0x1e>
  {
    diagprint(F("checkNetworkAvailable is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001c52:	4912      	ldr	r1, [pc, #72]	; (8001c9c <_ZN10IridiumSBD21checkNetworkAvailableEv+0x5c>)
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fca9 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e01a      	b.n	8001c94 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x54>
  }

  // Check the status of the 9603 Network Available pin
  check9603pins(); // Update IO_REGISTER
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 ff86 	bl	8002b70 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_NA) // If the NA bit is set, return true
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8001c70:	4013      	ands	r3, r2
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf14      	ite	ne
 8001c84:	2301      	movne	r3, #1
 8001c86:	2300      	moveq	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x52>
  {
    return(true);
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <_ZN10IridiumSBD21checkNetworkAvailableEv+0x54>
  }
  else
  {
    return(false);
 8001c92:	2300      	movs	r3, #0
  }
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	0800aa88 	.word	0x0800aa88

08001ca0 <_ZN10IridiumSBD7getIMEIEPcj>:
   return ret;
}

// High-level wrapper for AT+CGSN
int IridiumSBD::getIMEI(char *IMEI, size_t bufferSize)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
   if (this->reentrant)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <_ZN10IridiumSBD7getIMEIEPcj+0x1a>
      return ISBD_REENTRANT;
 8001cb6:	2309      	movs	r3, #9
 8001cb8:	e00e      	b.n	8001cd8 <_ZN10IridiumSBD7getIMEIEPcj+0x38>

   this->reentrant = true;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalGetIMEI(IMEI, bufferSize);
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f001 f824 	bl	8002d14 <_ZN10IridiumSBD15internalGetIMEIEPcj>
 8001ccc:	6178      	str	r0, [r7, #20]
   this->reentrant = false;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   return ret;
 8001cd6:	697b      	ldr	r3, [r7, #20]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <_ZN10IridiumSBD11isConnectedEv+0x16>
   {
		return true;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e013      	b.n	8001d1e <_ZN10IridiumSBD11isConnectedEv+0x3e>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f001 fe40 	bl	8003988 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 fe85 	bl	8003a1c <_ZN7TwoWire15endTransmissionEv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
   }
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b090      	sub	sp, #64	; 0x40
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8001d30:	49b1      	ldr	r1, [pc, #708]	; (8001ff8 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fc3a 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8001d3e:	f083 0301 	eor.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e150      	b.n	8001fee <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (!this->useSerial) // If we are using I2C
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d52:	f083 0301 	eor.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <_ZN10IridiumSBD13internalBeginEv+0x40>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 ff07 	bl	8002b70 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fe2c 	bl	80029c0 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8001d68:	2101      	movs	r1, #1
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 faae 	bl	80022cc <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8001d76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8001d7c:	f002 fa84 	bl	8004288 <HAL_GetTick>
 8001d80:	62b8      	str	r0, [r7, #40]	; 0x28
 8001d82:	f002 fa81 	bl	8004288 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	bf8c      	ite	hi
 8001d92:	2301      	movhi	r3, #1
 8001d94:	2300      	movls	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <_ZN10IridiumSBD13internalBeginEv+0x84>
      if (cancelled())
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fa69 	bl	8002274 <_ZN10IridiumSBD9cancelledEv>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0ec      	beq.n	8001d82 <_ZN10IridiumSBD13internalBeginEv+0x5a>
         return ISBD_CANCELLED;
 8001da8:	2304      	movs	r3, #4
 8001daa:	e120      	b.n	8001fee <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (this->useSerial) // If we are using Serial
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d002      	beq.n	8001dbc <_ZN10IridiumSBD13internalBeginEv+0x94>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fb34 	bl	8002424 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8001dbc:	f002 fa64 	bl	8004288 <HAL_GetTick>
 8001dc0:	6278      	str	r0, [r7, #36]	; 0x24
 8001dc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001dc6:	f083 0301 	eor.w	r3, r3, #1
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d010      	beq.n	8001df2 <_ZN10IridiumSBD13internalBeginEv+0xca>
 8001dd0:	f002 fa5a 	bl	8004288 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	1ad2      	subs	r2, r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001de0:	4619      	mov	r1, r3
 8001de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de6:	fb03 f301 	mul.w	r3, r3, r1
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d201      	bcs.n	8001df2 <_ZN10IridiumSBD13internalBeginEv+0xca>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <_ZN10IridiumSBD13internalBeginEv+0xcc>
 8001df2:	2300      	movs	r3, #0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d018      	beq.n	8001e2a <_ZN10IridiumSBD13internalBeginEv+0x102>
   {
      send(F("AT\r"));
 8001df8:	2301      	movs	r3, #1
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	497f      	ldr	r1, [pc, #508]	; (8001ffc <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fb2c 	bl	800245c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8001e04:	4b7e      	ldr	r3, [pc, #504]	; (8002000 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f970 	bl	80020f4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fa2a 	bl	8002274 <_ZN10IridiumSBD9cancelledEv>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0cd      	beq.n	8001dc2 <_ZN10IridiumSBD13internalBeginEv+0x9a>
         return ISBD_CANCELLED;
 8001e26:	2304      	movs	r3, #4
 8001e28:	e0e1      	b.n	8001fee <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   if (!modemAlive)
 8001e2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e2e:	f083 0301 	eor.w	r3, r3, #1
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <_ZN10IridiumSBD13internalBeginEv+0x11c>
   {
      diagprint(F("No modem detected.\r\n"));
 8001e38:	4972      	ldr	r1, [pc, #456]	; (8002004 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fbb6 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8001e40:	2305      	movs	r3, #5
 8001e42:	e0d4      	b.n	8001fee <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8001e44:	4a70      	ldr	r2, [pc, #448]	; (8002008 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8001e46:	f107 0310 	add.w	r3, r7, #16
 8001e4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8001e50:	2300      	movs	r3, #0
 8001e52:	633b      	str	r3, [r7, #48]	; 0x30
 8001e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	dc26      	bgt.n	8001ea8 <_ZN10IridiumSBD13internalBeginEv+0x180>
   {
      send(strings[i]);
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001e62:	4413      	add	r3, r2
 8001e64:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fb50 	bl	8002510 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8001e70:	4b63      	ldr	r3, [pc, #396]	; (8002000 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2300      	movs	r3, #0
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f93a 	bl	80020f4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f083 0301 	eor.w	r3, r3, #1
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d009      	beq.n	8001ea0 <_ZN10IridiumSBD13internalBeginEv+0x178>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f9f1 	bl	8002274 <_ZN10IridiumSBD9cancelledEv>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <_ZN10IridiumSBD13internalBeginEv+0x174>
 8001e98:	2304      	movs	r3, #4
 8001e9a:	e0a8      	b.n	8001fee <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0a6      	b.n	8001fee <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   for (int i=0; i<3; ++i)
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ea6:	e7d5      	b.n	8001e54 <_ZN10IridiumSBD13internalBeginEv+0x12c>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8001ea8:	4958      	ldr	r1, [pc, #352]	; (800200c <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 fb7e 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <_ZN10IridiumSBD13internalBeginEv+0x196>
 8001eba:	4b55      	ldr	r3, [pc, #340]	; (8002010 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8001ebc:	e000      	b.n	8001ec0 <_ZN10IridiumSBD13internalBeginEv+0x198>
 8001ebe:	4b55      	ldr	r3, [pc, #340]	; (8002014 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fb72 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8001ec8:	4953      	ldr	r1, [pc, #332]	; (8002018 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fb6e 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d004      	beq.n	8001ee4 <_ZN10IridiumSBD13internalBeginEv+0x1bc>
 8001eda:	2101      	movs	r1, #1
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff fcaf 	bl	8001840 <_ZN10IridiumSBD16enableRingAlertsEb>
 8001ee2:	e00a      	b.n	8001efa <_ZN10IridiumSBD13internalBeginEv+0x1d2>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <_ZN10IridiumSBD13internalBeginEv+0x1d2>
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff fe71 	bl	8001bdc <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <_ZN10IridiumSBD13internalBeginEv+0x1e0>
 8001f04:	4945      	ldr	r1, [pc, #276]	; (800201c <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8001f06:	e000      	b.n	8001f0a <_ZN10IridiumSBD13internalBeginEv+0x1e2>
 8001f08:	4945      	ldr	r1, [pc, #276]	; (8002020 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 faa4 	bl	800245c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8001f14:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8e8 	bl	80020f4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f083 0301 	eor.w	r3, r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d009      	beq.n	8001f44 <_ZN10IridiumSBD13internalBeginEv+0x21c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f99f 	bl	8002274 <_ZN10IridiumSBD9cancelledEv>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <_ZN10IridiumSBD13internalBeginEv+0x218>
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	e056      	b.n	8001fee <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8001f40:	2303      	movs	r3, #3
 8001f42:	e054      	b.n	8001fee <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8001f44:	f107 0308 	add.w	r3, r7, #8
 8001f48:	2208      	movs	r2, #8
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff fd27 	bl	80019a0 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8001f52:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d008      	beq.n	8001f6c <_ZN10IridiumSBD13internalBeginEv+0x244>
   {
      diagprint(F("Unknown FW version\r\n"));
 8001f5a:	4932      	ldr	r1, [pc, #200]	; (8002024 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 fb25 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8001f6a:	e027      	b.n	8001fbc <_ZN10IridiumSBD13internalBeginEv+0x294>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8001f6c:	492e      	ldr	r1, [pc, #184]	; (8002028 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fb1c 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8001f74:	f107 0308 	add.w	r3, r7, #8
 8001f78:	4619      	mov	r1, r3
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 fb3c 	bl	80025f8 <_ZN10IridiumSBD9diagprintEPKc>
 8001f80:	492a      	ldr	r1, [pc, #168]	; (800202c <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 fb12 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8001f88:	7a3b      	ldrb	r3, [r7, #8]
 8001f8a:	2b54      	cmp	r3, #84	; 0x54
 8001f8c:	d116      	bne.n	8001fbc <_ZN10IridiumSBD13internalBeginEv+0x294>
 8001f8e:	7a7b      	ldrb	r3, [r7, #9]
 8001f90:	2b41      	cmp	r3, #65	; 0x41
 8001f92:	d113      	bne.n	8001fbc <_ZN10IridiumSBD13internalBeginEv+0x294>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8001f94:	f107 0308 	add.w	r3, r7, #8
 8001f98:	3302      	adds	r3, #2
 8001f9a:	220a      	movs	r2, #10
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f005 fc44 	bl	800782c <strtoul>
 8001fa4:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8001fac:	4293      	cmp	r3, r2
 8001fae:	bf94      	ite	ls
 8001fb0:	2301      	movls	r3, #1
 8001fb2:	2300      	movhi	r3, #0
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8001fbc:	491c      	ldr	r1, [pc, #112]	; (8002030 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 faf4 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8001fd0:	e000      	b.n	8001fd4 <_ZN10IridiumSBD13internalBeginEv+0x2ac>
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fae8 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8001fdc:	4915      	ldr	r1, [pc, #84]	; (8002034 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fae4 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8001fe4:	4914      	ldr	r1, [pc, #80]	; (8002038 <_ZN10IridiumSBD13internalBeginEv+0x310>)
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fae0 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3738      	adds	r7, #56	; 0x38
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	0800ab60 	.word	0x0800ab60
 8001ffc:	0800ab78 	.word	0x0800ab78
 8002000:	0800a860 	.word	0x0800a860
 8002004:	0800ab7c 	.word	0x0800ab7c
 8002008:	0800ac50 	.word	0x0800ac50
 800200c:	0800ab94 	.word	0x0800ab94
 8002010:	0800aba4 	.word	0x0800aba4
 8002014:	0800aba8 	.word	0x0800aba8
 8002018:	0800abb0 	.word	0x0800abb0
 800201c:	0800abbc 	.word	0x0800abbc
 8002020:	0800abcc 	.word	0x0800abcc
 8002024:	0800abdc 	.word	0x0800abdc
 8002028:	0800abf4 	.word	0x0800abf4
 800202c:	0800ac0c 	.word	0x0800ac0c
 8002030:	0800ac10 	.word	0x0800ac10
 8002034:	0800ac24 	.word	0x0800ac24
 8002038:	0800ac34 	.word	0x0800ac34

0800203c <_ZN10IridiumSBD24internalGetSignalQualityERi>:
   diagprint(F("SBDIX timeout!\r\n"));
   return ISBD_SENDRECEIVE_TIMEOUT;
}

int IridiumSBD::internalGetSignalQuality(int &quality)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af02      	add	r7, sp, #8
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
   if (this->asleep)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x18>
      return ISBD_IS_ASLEEP;
 8002050:	230a      	movs	r3, #10
 8002052:	e032      	b.n	80020ba <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   char csqResponseBuf[2];

   send(F("AT+CSQ\r"));
 8002054:	2301      	movs	r3, #1
 8002056:	2201      	movs	r2, #1
 8002058:	491a      	ldr	r1, [pc, #104]	; (80020c4 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x88>)
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f9fe 	bl	800245c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(csqResponseBuf, sizeof(csqResponseBuf), "+CSQ:"))
 8002060:	f107 010c 	add.w	r1, r7, #12
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x8c>)
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <_ZN10IridiumSBD24internalGetSignalQualityERi+0x90>)
 800206a:	2202      	movs	r2, #2
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f841 	bl	80020f4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8002072:	4603      	mov	r3, r0
 8002074:	f083 0301 	eor.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d009      	beq.n	8002092 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x56>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8f8 	bl	8002274 <_ZN10IridiumSBD9cancelledEv>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <_ZN10IridiumSBD24internalGetSignalQualityERi+0x52>
 800208a:	2304      	movs	r3, #4
 800208c:	e015      	b.n	80020ba <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
 800208e:	2303      	movs	r3, #3
 8002090:	e013      	b.n	80020ba <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>

   if (isdigit(csqResponseBuf[0]))
 8002092:	7b3b      	ldrb	r3, [r7, #12]
 8002094:	3b30      	subs	r3, #48	; 0x30
 8002096:	2b09      	cmp	r3, #9
 8002098:	bf94      	ite	ls
 800209a:	2301      	movls	r3, #1
 800209c:	2300      	movhi	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d009      	beq.n	80020b8 <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7c>
   {
      quality = atoi(csqResponseBuf);
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	4618      	mov	r0, r3
 80020aa:	f004 f906 	bl	80062ba <atoi>
 80020ae:	4602      	mov	r2, r0
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	601a      	str	r2, [r3, #0]
      return ISBD_SUCCESS;
 80020b4:	2300      	movs	r3, #0
 80020b6:	e000      	b.n	80020ba <_ZN10IridiumSBD24internalGetSignalQualityERi+0x7e>
   }

   return ISBD_PROTOCOL_ERROR;
 80020b8:	2303      	movs	r3, #3
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	0800ad84 	.word	0x0800ad84
 80020c8:	0800a860 	.word	0x0800a860
 80020cc:	0800ad8c 	.word	0x0800ad8c

080020d0 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 80020e2:	230a      	movs	r3, #10
 80020e4:	e000      	b.n	80020e8 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 8002102:	4959      	ldr	r1, [pc, #356]	; (8002268 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>)
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 fa51 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 800210a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 fa73 	bl	80025f8 <_ZN10IridiumSBD9diagprintEPKc>
   diagprint(F("\r\n"));
 8002112:	4956      	ldr	r1, [pc, #344]	; (800226c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x178>)
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 fa49 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d005      	beq.n	800212c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x38>
      memset(response, 0, responseSize);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	461a      	mov	r2, r3
 8002124:	2100      	movs	r1, #0
 8002126:	68b8      	ldr	r0, [r7, #8]
 8002128:	f004 fa4a 	bl	80065c0 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x4a>
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x4c>
 800213e:	2302      	movs	r3, #2
 8002140:	61fb      	str	r3, [r7, #28]
   consoleprint(F("<< "));
 8002142:	494b      	ldr	r1, [pc, #300]	; (8002270 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>)
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 fa79 	bl	800263c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 800214a:	f002 f89d 	bl	8004288 <HAL_GetTick>
 800214e:	61b8      	str	r0, [r7, #24]
 8002150:	f002 f89a 	bl	8004288 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	1ad2      	subs	r2, r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002160:	4619      	mov	r1, r3
 8002162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002166:	fb03 f301 	mul.w	r3, r3, r1
 800216a:	429a      	cmp	r2, r3
 800216c:	bf34      	ite	cc
 800216e:	2301      	movcc	r3, #1
 8002170:	2300      	movcs	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d072      	beq.n	800225e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>
   {
      if (cancelled())
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 f87b 	bl	8002274 <_ZN10IridiumSBD9cancelledEv>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x94>
         return false;
 8002184:	2300      	movs	r3, #0
 8002186:	e06b      	b.n	8002260 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16c>

      while (filteredavailable() > 0)
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 fbb7 	bl	80028fc <_ZN10IridiumSBD17filteredavailableEv>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	bfcc      	ite	gt
 8002194:	2301      	movgt	r3, #1
 8002196:	2300      	movle	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0d8      	beq.n	8002150 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x5c>
      {
         char c = filteredread();
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fbc8 	bl	8002934 <_ZN10IridiumSBD12filteredreadEv>
 80021a4:	4603      	mov	r3, r0
 80021a6:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d03b      	beq.n	8002226 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x132>
         {
            switch (promptState)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xc8>
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d01d      	beq.n	80021f6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x102>
 80021ba:	e034      	b.n	8002226 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x132>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	7dfa      	ldrb	r2, [r7, #23]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d10b      	bne.n	80021e2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xee>
               {
                  ++matchPromptPos;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	3301      	adds	r3, #1
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	4413      	add	r3, r2
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d121      	bne.n	8002220 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12c>
                     promptState = GATHERING_RESPONSE;
 80021dc:	2301      	movs	r3, #1
 80021de:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 80021e0:	e01e      	b.n	8002220 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12c>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	7dfa      	ldrb	r2, [r7, #23]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d101      	bne.n	80021f0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfc>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfe>
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 80021f4:	e014      	b.n	8002220 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12c>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
               {
                  if (c == '\r' || responseSize < 2)
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b0d      	cmp	r3, #13
 8002200:	d002      	beq.n	8002208 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x114>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b01      	cmp	r3, #1
 8002206:	dc02      	bgt.n	800220e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x11a>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8002208:	2302      	movs	r3, #2
 800220a:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 800220c:	e00a      	b.n	8002224 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
                     *response++ = c;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	60ba      	str	r2, [r7, #8]
 8002214:	7dfa      	ldrb	r2, [r7, #23]
 8002216:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	607b      	str	r3, [r7, #4]
               break;
 800221e:	e001      	b.n	8002224 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
               break;
 8002220:	bf00      	nop
 8002222:	e000      	b.n	8002226 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x132>
               break;
 8002224:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	7dfa      	ldrb	r2, [r7, #23]
 8002230:	429a      	cmp	r2, r3
 8002232:	d10a      	bne.n	800224a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x156>
         {
            ++matchTerminatorPos;
 8002234:	6a3b      	ldr	r3, [r7, #32]
 8002236:	3301      	adds	r3, #1
 8002238:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800223e:	4413      	add	r3, r2
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1a0      	bne.n	8002188 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x94>
               return true;
 8002246:	2301      	movs	r3, #1
 8002248:	e00a      	b.n	8002260 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16c>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 800224a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	7dfa      	ldrb	r2, [r7, #23]
 8002250:	429a      	cmp	r2, r3
 8002252:	d101      	bne.n	8002258 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x164>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x166>
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 800225c:	e794      	b.n	8002188 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x94>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	3728      	adds	r7, #40	; 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	0800ad94 	.word	0x0800ad94
 800226c:	0800ac0c 	.word	0x0800ac0c
 8002270:	0800adac 	.word	0x0800adac

08002274 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002282:	2b00      	cmp	r3, #0
 8002284:	d015      	beq.n	80022b2 <_ZN10IridiumSBD9cancelledEv+0x3e>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d008      	beq.n	80022a4 <_ZN10IridiumSBD9cancelledEv+0x30>
 8002292:	2110      	movs	r1, #16
 8002294:	480c      	ldr	r0, [pc, #48]	; (80022c8 <_ZN10IridiumSBD9cancelledEv+0x54>)
 8002296:	f002 facf 	bl	8004838 <HAL_GPIO_ReadPin>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <_ZN10IridiumSBD9cancelledEv+0x30>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <_ZN10IridiumSBD9cancelledEv+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <_ZN10IridiumSBD9cancelledEv+0x3e>
	  {
         ringAsserted = true;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		 //diagprint(F("ringPin seen!\r\n"));
	  }
   }

   return !ISBDCallback();
 80022b2:	f7ff fa24 	bl	80016fe <_Z12ISBDCallbackv>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f083 0301 	eor.w	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40020800 	.word	0x40020800

080022cc <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	f083 0301 	eor.w	r3, r3, #1
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d011      	beq.n	8002314 <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fa:	d04c      	beq.n	8002396 <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f84e 	bl	80023a8 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8002314:	78fb      	ldrb	r3, [r7, #3]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d018      	beq.n	800234c <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 800231a:	4921      	ldr	r1, [pc, #132]	; (80023a0 <_ZN10IridiumSBD5powerEb+0xd4>)
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f945 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 800232c:	2101      	movs	r1, #1
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f850 	bl	80023d4 <_ZN10IridiumSBD11setSleepPinEh>
 8002334:	e003      	b.n	800233e <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 8002336:	2101      	movs	r1, #1
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fc11 	bl	8001b60 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 800233e:	f001 ffa3 	bl	8004288 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800234a:	e025      	b.n	8002398 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 800234c:	f001 ff9c 	bl	8004288 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002362:	d205      	bcs.n	8002370 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800236a:	4618      	mov	r0, r3
 800236c:	f001 ff98 	bl	80042a0 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8002370:	490c      	ldr	r1, [pc, #48]	; (80023a4 <_ZN10IridiumSBD5powerEb+0xd8>)
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f91a 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 8002382:	2100      	movs	r1, #0
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f825 	bl	80023d4 <_ZN10IridiumSBD11setSleepPinEh>
 800238a:	e005      	b.n	8002398 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 800238c:	2100      	movs	r1, #0
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fbe6 	bl	8001b60 <_ZN10IridiumSBD10enable9603Eb>
 8002394:	e000      	b.n	8002398 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8002396:	bf00      	nop
      }
   }
}
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	0800adf4 	.word	0x0800adf4
 80023a4:	0800ae0c 	.word	0x0800ae0c

080023a8 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	//pinMode(this->sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
 80023b0:	2200      	movs	r2, #0
 80023b2:	2108      	movs	r1, #8
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <_ZN10IridiumSBD17configureSleepPinEv+0x24>)
 80023b6:	f000 ff09 	bl	80031cc <_Z10st_pinModeP12GPIO_TypeDefhi>
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 80023ba:	4905      	ldr	r1, [pc, #20]	; (80023d0 <_ZN10IridiumSBD17configureSleepPinEv+0x28>)
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f8f5 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40020800 	.word	0x40020800
 80023d0:	0800ae24 	.word	0x0800ae24

080023d4 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 80023e0:	2201      	movs	r2, #1
 80023e2:	2108      	movs	r1, #8
 80023e4:	480b      	ldr	r0, [pc, #44]	; (8002414 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 80023e6:	f002 fa3f 	bl	8004868 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 80023ea:	490b      	ldr	r1, [pc, #44]	; (8002418 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f8dd 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d104      	bne.n	8002402 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 80023f8:	4908      	ldr	r1, [pc, #32]	; (800241c <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f8d6 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8002400:	e003      	b.n	800240a <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8002402:	4907      	ldr	r1, [pc, #28]	; (8002420 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f8d1 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40020800 	.word	0x40020800
 8002418:	0800ae50 	.word	0x0800ae50
 800241c:	0800ae6c 	.word	0x0800ae6c
 8002420:	0800ae74 	.word	0x0800ae74

08002424 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 800242c:	4903      	ldr	r1, [pc, #12]	; (800243c <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f8bc 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	0800ae7c 	.word	0x0800ae7c

08002440 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8002448:	4903      	ldr	r1, [pc, #12]	; (8002458 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8ae 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	0800ae9c 	.word	0x0800ae9c

0800245c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	4611      	mov	r1, r2
 8002468:	461a      	mov	r2, r3
 800246a:	460b      	mov	r3, r1
 800246c:	71fb      	strb	r3, [r7, #7]
 800246e:	4613      	mov	r3, r2
 8002470:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8002478:	4922      	ldr	r1, [pc, #136]	; (8002504 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f8de 	bl	800263c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f8da 	bl	800263c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8002488:	79bb      	ldrb	r3, [r7, #6]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 800248e:	491e      	ldr	r1, [pc, #120]	; (8002508 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f8d3 	bl	800263c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x52>
   {
      stream->print(str);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f001 f9a2 	bl	80037f0 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80024ac:	e025      	b.n	80024fa <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024b8:	4619      	mov	r1, r3
 80024ba:	4610      	mov	r0, r2
 80024bc:	f001 fa64 	bl	8003988 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c4:	21ff      	movs	r1, #255	; 0xff
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f907 	bl	80016da <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f001 f98c 	bl	80037f0 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	4618      	mov	r0, r3
 80024de:	f001 fa9d 	bl	8003a1c <_ZN7TwoWire15endTransmissionEv>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf14      	ite	ne
 80024e8:	2301      	movne	r3, #1
 80024ea:	2300      	moveq	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
         diagprint(F("I2C write was not successful!\r\n"));
 80024f2:	4906      	ldr	r1, [pc, #24]	; (800250c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f859 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	0800aeb8 	.word	0x0800aeb8
 8002508:	0800ac0c 	.word	0x0800ac0c
 800250c:	0800ac8c 	.word	0x0800ac8c

08002510 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 800251a:	4921      	ldr	r1, [pc, #132]	; (80025a0 <_ZN10IridiumSBD4sendEPKc+0x90>)
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f88d 	bl	800263c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8002522:	6839      	ldr	r1, [r7, #0]
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f8af 	bl	8002688 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 800252a:	491e      	ldr	r1, [pc, #120]	; (80025a4 <_ZN10IridiumSBD4sendEPKc+0x94>)
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f885 	bl	800263c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002538:	2b00      	cmp	r3, #0
 800253a:	d006      	beq.n	800254a <_ZN10IridiumSBD4sendEPKc+0x3a>
   {
      stream->print(str);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002540:	6839      	ldr	r1, [r7, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f001 f962 	bl	800380c <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8002548:	e025      	b.n	8002596 <_ZN10IridiumSBD4sendEPKc+0x86>
      wireport->beginTransmission((uint8_t)deviceaddress);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002554:	4619      	mov	r1, r3
 8002556:	4610      	mov	r0, r2
 8002558:	f001 fa16 	bl	8003988 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002560:	21ff      	movs	r1, #255	; 0xff
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f8b9 	bl	80016da <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256c:	6839      	ldr	r1, [r7, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f001 f94c 	bl	800380c <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002578:	4618      	mov	r0, r3
 800257a:	f001 fa4f 	bl	8003a1c <_ZN7TwoWire15endTransmissionEv>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf14      	ite	ne
 8002584:	2301      	movne	r3, #1
 8002586:	2300      	moveq	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <_ZN10IridiumSBD4sendEPKc+0x86>
         diagprint(F("I2C write was not successful!\r\n"));
 800258e:	4906      	ldr	r1, [pc, #24]	; (80025a8 <_ZN10IridiumSBD4sendEPKc+0x98>)
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f80b 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	0800aeb8 	.word	0x0800aeb8
 80025a4:	0800ac0c 	.word	0x0800ac0c
 80025a8:	0800ac8c 	.word	0x0800ac8c

080025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	60fa      	str	r2, [r7, #12]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80025c4:	7afb      	ldrb	r3, [r7, #11]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 80025ca:	7afb      	ldrb	r3, [r7, #11]
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff f8a9 	bl	8001726 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 80025d4:	e7f1      	b.n	80025ba <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80025d6:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 80025d8:	687c      	ldr	r4, [r7, #4]
 80025da:	6838      	ldr	r0, [r7, #0]
 80025dc:	f7fd fe22 	bl	8000224 <strlen>
 80025e0:	4603      	mov	r3, r0
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	f04f 33ff 	mov.w	r3, #4294967295
 80025e8:	6839      	ldr	r1, [r7, #0]
 80025ea:	4620      	mov	r0, r4
 80025ec:	f003 fb67 	bl	8005cbe <HAL_UART_Transmit>
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd90      	pop	{r4, r7, pc}

080025f8 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
   while (*str)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d008      	beq.n	800261c <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	603a      	str	r2, [r7, #0]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff f886 	bl	8001726 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 800261a:	e7f2      	b.n	8002602 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800261c:	687c      	ldr	r4, [r7, #4]
 800261e:	6838      	ldr	r0, [r7, #0]
 8002620:	f7fd fe00 	bl	8000224 <strlen>
 8002624:	4603      	mov	r3, r0
 8002626:	b29a      	uxth	r2, r3
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
 800262c:	6839      	ldr	r1, [r7, #0]
 800262e:	4620      	mov	r0, r4
 8002630:	f003 fb45 	bl	8005cbe <HAL_UART_Transmit>
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bd90      	pop	{r4, r7, pc}

0800263c <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   diagprint(str); //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(FlashString str)
{
 800263c:	b590      	push	{r4, r7, lr}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	60fa      	str	r2, [r7, #12]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8002654:	7afb      	ldrb	r3, [r7, #11]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 800265a:	7afb      	ldrb	r3, [r7, #11]
 800265c:	4619      	mov	r1, r3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff f855 	bl	800170e <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8002664:	e7f1      	b.n	800264a <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8002666:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*) str), HAL_MAX_DELAY);
 8002668:	687c      	ldr	r4, [r7, #4]
 800266a:	6838      	ldr	r0, [r7, #0]
 800266c:	f7fd fdda 	bl	8000224 <strlen>
 8002670:	4603      	mov	r3, r0
 8002672:	b29a      	uxth	r2, r3
 8002674:	f04f 33ff 	mov.w	r3, #4294967295
 8002678:	6839      	ldr	r1, [r7, #0]
 800267a:	4620      	mov	r0, r4
 800267c:	f003 fb1f 	bl	8005cbe <HAL_UART_Transmit>
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bd90      	pop	{r4, r7, pc}

08002688 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
   while (*str)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d008      	beq.n	80026ac <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	603a      	str	r2, [r7, #0]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff f832 	bl	800170e <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 80026aa:	e7f2      	b.n	8002692 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80026ac:	687c      	ldr	r4, [r7, #4]
 80026ae:	6838      	ldr	r0, [r7, #0]
 80026b0:	f7fd fdb8 	bl	8000224 <strlen>
 80026b4:	4603      	mov	r3, r0
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
 80026bc:	6839      	ldr	r1, [r7, #0]
 80026be:	4620      	mov	r0, r4
 80026c0:	f003 fafd 	bl	8005cbe <HAL_UART_Transmit>
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd90      	pop	{r4, r7, pc}

080026cc <_ZN10IridiumSBD12consoleprintEc>:
   //consoleprint((const char*) str);
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(char c)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	4619      	mov	r1, r3
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f7ff f816 	bl	800170e <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   diagprint(F("SBDRING alert seen!\r\n"));
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ff54 	bl	80025ac <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	0800aec0 	.word	0x0800aec0

08002710 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800271e:	f083 0301 	eor.w	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f949 	bl	80029c0 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00b      	beq.n	8002750 <_ZN10IridiumSBD13filterSBDRINGEv+0x40>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3308      	adds	r3, #8
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4610      	mov	r0, r2
 8002748:	4798      	blx	r3
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	dc0d      	bgt.n	800276c <_ZN10IridiumSBD13filterSBDRINGEv+0x5c>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002756:	f083 0301 	eor.w	r3, r3, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00d      	beq.n	800277c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 fa67 	bl	8002c34 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	dd07      	ble.n	800277c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002776:	d101      	bne.n	800277c <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <_ZN10IridiumSBD13filterSBDRINGEv+0x6e>
 800277c:	2300      	movs	r3, #0
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 80b6 	beq.w	80028f0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e0>
   {
      char c;
      if (this->useSerial)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <_ZN10IridiumSBD13filterSBDRINGEv+0x96>
      {
         c = stream->read();
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4610      	mov	r0, r2
 800279e:	4798      	blx	r3
 80027a0:	4603      	mov	r3, r0
 80027a2:	73fb      	strb	r3, [r7, #15]
 80027a4:	e004      	b.n	80027b0 <_ZN10IridiumSBD13filterSBDRINGEv+0xa0>
      }
      else
      {
         c = i2cSerRead();
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa5e 	bl	8002c68 <_ZN10IridiumSBD10i2cSerReadEv>
 80027ac:	4603      	mov	r3, r0
 80027ae:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	4619      	mov	r1, r3
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff89 	bl	80026cc <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 808d 	beq.w	80028e2 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	f040 8085 	bne.w	80028e2 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
      {
         ++head;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         if (*head == 0)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10d      	bne.n	800280e <_ZN10IridiumSBD13filterSBDRINGEv+0xfe>
         {
            SBDRINGSeen();
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ff7a 	bl	80026ec <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a3f      	ldr	r2, [pc, #252]	; (80028f8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e8>)
 80027fc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 800280c:	e06e      	b.n	80028ec <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 800280e:	f001 fd3b 	bl	8004288 <HAL_GetTick>
 8002812:	60b8      	str	r0, [r7, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <_ZN10IridiumSBD13filterSBDRINGEv+0x126>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3308      	adds	r3, #8
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4610      	mov	r0, r2
 800282e:	4798      	blx	r3
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00d      	beq.n	8002852 <_ZN10IridiumSBD13filterSBDRINGEv+0x142>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800283c:	f083 0301 	eor.w	r3, r3, #1
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00e      	beq.n	8002864 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f9f4 	bl	8002c34 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d108      	bne.n	8002864 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8002852:	f001 fd19 	bl	8004288 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b09      	cmp	r3, #9
 800285e:	d801      	bhi.n	8002864 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <_ZN10IridiumSBD13filterSBDRINGEv+0x156>
 8002864:	2300      	movs	r3, #0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d000      	beq.n	800286c <_ZN10IridiumSBD13filterSBDRINGEv+0x15c>
 800286a:	e7d3      	b.n	8002814 <_ZN10IridiumSBD13filterSBDRINGEv+0x104>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002872:	f083 0301 	eor.w	r3, r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <_ZN10IridiumSBD13filterSBDRINGEv+0x172>
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 f89f 	bl	80029c0 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00b      	beq.n	80028a4 <_ZN10IridiumSBD13filterSBDRINGEv+0x194>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3308      	adds	r3, #8
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4610      	mov	r0, r2
 800289c:	4798      	blx	r3
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00d      	beq.n	80028c0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028aa:	f083 0301 	eor.w	r3, r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f9bd 	bl	8002c34 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b6>
 80028c4:	2300      	movs	r3, #0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d010      	beq.n	80028ec <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
               --head;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
               nextChar = c;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
         }
 80028e0:	e004      	b.n	80028ec <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
      }
      else
      {
         nextChar = c;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80028ea:	e720      	b.n	800272e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
         }
 80028ec:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 80028ee:	e71e      	b.n	800272e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
      }
   }
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	0800b404 	.word	0x0800b404

080028fc <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff03 	bl	8002710 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 800291e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8002922:	d001      	beq.n	8002928 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8002924:	2201      	movs	r2, #1
 8002926:	e000      	b.n	800292a <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8002928:	2200      	movs	r2, #0
 800292a:	4413      	add	r3, r2
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fee7 	bl	8002710 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800294e:	429a      	cmp	r2, r3
 8002950:	d91c      	bls.n	800298c <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002958:	1c59      	adds	r1, r3, #1
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002970:	429a      	cmp	r2, r3
 8002972:	d109      	bne.n	8002988 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a11      	ldr	r2, [pc, #68]	; (80029bc <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8002978:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      return c;
 8002988:	7bbb      	ldrb	r3, [r7, #14]
 800298a:	e012      	b.n	80029b2 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d00a      	beq.n	80029ae <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800299e:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f04f 32ff 	mov.w	r2, #4294967295
 80029a6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      return c;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	e001      	b.n	80029b2 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 80029ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	0800b404 	.word	0x0800b404

080029c0 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 80029c8:	f001 fc5e 	bl	8004288 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 80029dc:	4293      	cmp	r3, r2
 80029de:	bf2c      	ite	cs
 80029e0:	2301      	movcs	r3, #1
 80029e2:	2300      	movcc	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80be 	beq.w	8002b68 <_ZN10IridiumSBD13check9603dataEv+0x1a8>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f000 ffc3 	bl	8003988 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	21fd      	movs	r1, #253	; 0xfd
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe fe66 	bl	80016da <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	4618      	mov	r0, r3
 8002a14:	f001 f802 	bl	8003a1c <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a22:	2202      	movs	r2, #2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f000 ff9c 	bl	8003962 <_ZN7TwoWire11requestFromEhh>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	bf0c      	ite	eq
 8002a30:	2301      	moveq	r3, #1
 8002a32:	2300      	movne	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d01d      	beq.n	8002a76 <_ZN10IridiumSBD13check9603dataEv+0xb6>
    {
      uint8_t msb = wireport->read();
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4798      	blx	r3
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	330c      	adds	r3, #12
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4610      	mov	r0, r2
 8002a60:	4798      	blx	r3
 8002a62:	4603      	mov	r3, r0
 8002a64:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8002a66:	7b7b      	ldrb	r3, [r7, #13]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	b21a      	sxth	r2, r3
 8002a6c:	7b3b      	ldrb	r3, [r7, #12]
 8002a6e:	b21b      	sxth	r3, r3
 8002a70:	4313      	orrs	r3, r2
 8002a72:	b21b      	sxth	r3, r3
 8002a74:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8002a76:	89fb      	ldrh	r3, [r7, #14]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d06f      	beq.n	8002b5c <_ZN10IridiumSBD13check9603dataEv+0x19c>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a86:	4619      	mov	r1, r3
 8002a88:	4610      	mov	r0, r2
 8002a8a:	f000 ff7d 	bl	8003988 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	21ff      	movs	r1, #255	; 0xff
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fe fe20 	bl	80016da <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 ffbc 	bl	8003a1c <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8002aa4:	89fb      	ldrh	r3, [r7, #14]
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d92d      	bls.n	8002b06 <_ZN10IridiumSBD13check9603dataEv+0x146>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	f000 ff18 	bl	80038ec <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3308      	adds	r3, #8
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4610      	mov	r0, r2
 8002acc:	4798      	blx	r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00f      	beq.n	8002afe <_ZN10IridiumSBD13check9603dataEv+0x13e>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	330c      	adds	r3, #12
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4610      	mov	r0, r2
 8002aee:	4798      	blx	r3
 8002af0:	4603      	mov	r3, r0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	4619      	mov	r1, r3
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8e2 	bl	8002cc0 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8002afc:	e7de      	b.n	8002abc <_ZN10IridiumSBD13check9603dataEv+0xfc>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8002afe:	89fb      	ldrh	r3, [r7, #14]
 8002b00:	3b08      	subs	r3, #8
 8002b02:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8002b04:	e7ce      	b.n	8002aa4 <_ZN10IridiumSBD13check9603dataEv+0xe4>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b10:	89fa      	ldrh	r2, [r7, #14]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f000 ff24 	bl	8003962 <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3308      	adds	r3, #8
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4610      	mov	r0, r2
 8002b2a:	4798      	blx	r3
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2301      	movne	r3, #1
 8002b34:	2300      	moveq	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00f      	beq.n	8002b5c <_ZN10IridiumSBD13check9603dataEv+0x19c>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	330c      	adds	r3, #12
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4798      	blx	r3
 8002b4e:	4603      	mov	r3, r0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	4619      	mov	r1, r3
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f8b3 	bl	8002cc0 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8002b5a:	e7de      	b.n	8002b1a <_ZN10IridiumSBD13check9603dataEv+0x15a>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8002b5c:	f001 fb94 	bl	8004288 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b82:	4619      	mov	r1, r3
 8002b84:	4610      	mov	r0, r2
 8002b86:	f000 feff 	bl	8003988 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8e:	2110      	movs	r1, #16
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fda2 	bl	80016da <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 ff3e 	bl	8003a1c <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002baa:	2201      	movs	r2, #1
 8002bac:	4619      	mov	r1, r3
 8002bae:	f000 fed8 	bl	8003962 <_ZN7TwoWire11requestFromEhh>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4798      	blx	r3
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f000 fec2 	bl	8003988 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c08:	2110      	movs	r1, #16
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fd65 	bl	80016da <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	78f9      	ldrb	r1, [r7, #3]
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fef8 	bl	8003a1c <_ZN7TwoWire15endTransmissionEv>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c42:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	425a      	negs	r2, r3
 8002c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c54:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002c58:	bf58      	it	pl
 8002c5a:	4253      	negpl	r3, r2
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d102      	bne.n	8002c86 <_ZN10IridiumSBD10i2cSerReadEv+0x1e>
    return -1;
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295
 8002c84:	e016      	b.n	8002cb4 <_ZN10IridiumSBD10i2cSerReadEv+0x4c>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8002c94:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	425a      	negs	r2, r3
 8002ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002ca8:	bf58      	it	pl
 8002caa:	4253      	negpl	r3, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  return d;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	425a      	negs	r2, r3
 8002cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002cde:	bf58      	it	pl
 8002ce0:	4253      	negpl	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d00b      	beq.n	8002d08 <_ZN10IridiumSBD10i2cSerPokeEc+0x48>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    i2c_ser_buffer_tail = next;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <_ZN10IridiumSBD15internalGetIMEIEPcj>:
}

int IridiumSBD::internalGetIMEI(char *IMEI, size_t bufferSize)
// Get the IMEI
// https://github.com/mikalhart/IridiumSBD/pull/21
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
   if (this->asleep)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <_ZN10IridiumSBD15internalGetIMEIEPcj+0x1a>
      return ISBD_IS_ASLEEP;
 8002d2a:	230a      	movs	r3, #10
 8002d2c:	e023      	b.n	8002d76 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   if (bufferSize < 16) // IMEI is 15 digits
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b0f      	cmp	r3, #15
 8002d32:	d801      	bhi.n	8002d38 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x24>
      return ISBD_RX_OVERFLOW;
 8002d34:	2308      	movs	r3, #8
 8002d36:	e01e      	b.n	8002d76 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   send(F("AT+CGSN\r"));
 8002d38:	2301      	movs	r3, #1
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	4910      	ldr	r1, [pc, #64]	; (8002d80 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x6c>)
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f7ff fb8c 	bl	800245c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(IMEI, bufferSize, "\n"))
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x70>)
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x74>)
 8002d4c:	68b9      	ldr	r1, [r7, #8]
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff f9d0 	bl	80020f4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f083 0301 	eor.w	r3, r3, #1
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d009      	beq.n	8002d74 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x60>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff fa87 	bl	8002274 <_ZN10IridiumSBD9cancelledEv>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x5c>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	e002      	b.n	8002d76 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>
 8002d70:	2303      	movs	r3, #3
 8002d72:	e000      	b.n	8002d76 <_ZN10IridiumSBD15internalGetIMEIEPcj+0x62>

   return ISBD_SUCCESS;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	0800af30 	.word	0x0800af30
 8002d84:	0800a860 	.word	0x0800a860
 8002d88:	0800af3c 	.word	0x0800af3c

08002d8c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>:
	#endif
}


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO
uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart){
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	f107 001c 	add.w	r0, r7, #28
 8002d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->uart = huart;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f107 031c 	add.w	r3, r7, #28
 8002da6:	2244      	movs	r2, #68	; 0x44
 8002da8:	4619      	mov	r1, r3
 8002daa:	f003 fbe1 	bl	8006570 <memcpy>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nSetting up the Iridium 9603N\r\n", 32, HAL_MAX_DELAY);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295
 8002db4:	2220      	movs	r2, #32
 8002db6:	4960      	ldr	r1, [pc, #384]	; (8002f38 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1ac>)
 8002db8:	f002 ff81 	bl	8005cbe <HAL_UART_Transmit>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Checking for the device...", 28, HAL_MAX_DELAY);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc2:	221c      	movs	r2, #28
 8002dc4:	495d      	ldr	r1, [pc, #372]	; (8002f3c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b0>)
 8002dc6:	f002 ff7a 	bl	8005cbe <HAL_UART_Transmit>
	while(!this->isConnected()){
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe ff88 	bl	8001ce0 <_ZN10IridiumSBD11isConnectedEv>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f083 0301 	eor.w	r3, r3, #1
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02c      	beq.n	8002e36 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xaa>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295
 8002de2:	2235      	movs	r2, #53	; 0x35
 8002de4:	4956      	ldr	r1, [pc, #344]	; (8002f40 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b4>)
 8002de6:	f002 ff6a 	bl	8005cbe <HAL_UART_Transmit>
		HAL_Delay(500);
 8002dea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dee:	f001 fa57 	bl	80042a0 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295
 8002df8:	2203      	movs	r2, #3
 8002dfa:	4952      	ldr	r1, [pc, #328]	; (8002f44 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b8>)
 8002dfc:	f002 ff5f 	bl	8005cbe <HAL_UART_Transmit>
		HAL_Delay(1000);
 8002e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e04:	f001 fa4c 	bl	80042a0 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	2203      	movs	r2, #3
 8002e10:	494d      	ldr	r1, [pc, #308]	; (8002f48 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1bc>)
 8002e12:	f002 ff54 	bl	8005cbe <HAL_UART_Transmit>
		HAL_Delay(1000);
 8002e16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e1a:	f001 fa41 	bl	80042a0 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295
 8002e24:	2207      	movs	r2, #7
 8002e26:	4949      	ldr	r1, [pc, #292]	; (8002f4c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c0>)
 8002e28:	f002 ff49 	bl	8005cbe <HAL_UART_Transmit>
		HAL_Delay(1000);
 8002e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e30:	f001 fa36 	bl	80042a0 <HAL_Delay>
	while(!this->isConnected()){
 8002e34:	e7c9      	b.n	8002dca <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x3e>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3c:	2206      	movs	r2, #6
 8002e3e:	4944      	ldr	r1, [pc, #272]	; (8002f50 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c4>)
 8002e40:	f002 ff3d 	bl	8005cbe <HAL_UART_Transmit>

	//Activate the superchargers
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	221f      	movs	r2, #31
 8002e4c:	4941      	ldr	r1, [pc, #260]	; (8002f54 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c8>)
 8002e4e:	f002 ff36 	bl	8005cbe <HAL_UART_Transmit>
	this->enableSuperCapCharger(true);
 8002e52:	2101      	movs	r1, #1
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7fe fdd7 	bl	8001a08 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e60:	2206      	movs	r2, #6
 8002e62:	493b      	ldr	r1, [pc, #236]	; (8002f50 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c4>)
 8002e64:	f002 ff2b 	bl	8005cbe <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	//int start=millis();
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6e:	222c      	movs	r2, #44	; 0x2c
 8002e70:	4939      	ldr	r1, [pc, #228]	; (8002f58 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8002e72:	f002 ff24 	bl	8005cbe <HAL_UART_Transmit>
	while (!this->checkSuperCapCharger()){
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fe fe04 	bl	8001a84 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f083 0301 	eor.w	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x106>
		HAL_Delay(333);
 8002e88:	f240 104d 	movw	r0, #333	; 0x14d
 8002e8c:	f001 fa08 	bl	80042a0 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8002e90:	e7f1      	b.n	8002e76 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xea>
			HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
			start=millis();
		}
		*/
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295
 8002e98:	2206      	movs	r2, #6
 8002e9a:	492d      	ldr	r1, [pc, #180]	; (8002f50 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c4>)
 8002e9c:	f002 ff0f 	bl	8005cbe <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea6:	2217      	movs	r2, #23
 8002ea8:	492c      	ldr	r1, [pc, #176]	; (8002f5c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d0>)
 8002eaa:	f002 ff08 	bl	8005cbe <HAL_UART_Transmit>
	this->enable9603Npower(true);
 8002eae:	2101      	movs	r1, #1
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7fe fe17 	bl	8001ae4 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebc:	2206      	movs	r2, #6
 8002ebe:	4924      	ldr	r1, [pc, #144]	; (8002f50 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c4>)
 8002ec0:	f002 fefd 	bl	8005cbe <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eca:	2211      	movs	r2, #17
 8002ecc:	4924      	ldr	r1, [pc, #144]	; (8002f60 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d4>)
 8002ece:	f002 fef6 	bl	8005cbe <HAL_UART_Transmit>
	//this->setPowerProfile(profile);
	int err = this->begin();
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe fc33 	bl	800173e <_ZN10IridiumSBD5beginEv>
 8002ed8:	60f8      	str	r0, [r7, #12]
	if (err != ISBD_SUCCESS)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d015      	beq.n	8002f0c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x180>
	  {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	491e      	ldr	r1, [pc, #120]	; (8002f64 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d8>)
 8002eea:	f002 fee8 	bl	8005cbe <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) err, 4, HAL_MAX_DELAY);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	68f9      	ldr	r1, [r7, #12]
 8002ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	f002 fee1 	bl	8005cbe <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	4619      	mov	r1, r3
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8aa 	bl	800305c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e00e      	b.n	8002f2a <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x19e>
	  }
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "...OK\r\n", 7, HAL_MAX_DELAY);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	2207      	movs	r2, #7
 8002f14:	4914      	ldr	r1, [pc, #80]	; (8002f68 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1dc>)
 8002f16:	f002 fed2 	bl	8005cbe <HAL_UART_Transmit>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "End of setup\r\n", 14, HAL_MAX_DELAY);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f20:	220e      	movs	r2, #14
 8002f22:	4912      	ldr	r1, [pc, #72]	; (8002f6c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e0>)
 8002f24:	f002 fecb 	bl	8005cbe <HAL_UART_Transmit>

	return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f34:	b004      	add	sp, #16
 8002f36:	4770      	bx	lr
 8002f38:	0800af40 	.word	0x0800af40
 8002f3c:	0800af64 	.word	0x0800af64
 8002f40:	0800af80 	.word	0x0800af80
 8002f44:	0800afb4 	.word	0x0800afb4
 8002f48:	0800afb8 	.word	0x0800afb8
 8002f4c:	0800afbc 	.word	0x0800afbc
 8002f50:	0800a860 	.word	0x0800a860
 8002f54:	0800afc4 	.word	0x0800afc4
 8002f58:	0800afe4 	.word	0x0800afe4
 8002f5c:	0800b014 	.word	0x0800b014
 8002f60:	0800b02c 	.word	0x0800b02c
 8002f64:	0800b040 	.word	0x0800b040
 8002f68:	0800b04c 	.word	0x0800b04c
 8002f6c:	0800b054 	.word	0x0800b054

08002f70 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b08b      	sub	sp, #44	; 0x2c
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	221d      	movs	r2, #29
 8002f80:	492f      	ldr	r1, [pc, #188]	; (8003040 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8002f82:	f002 fe9c 	bl	8005cbe <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8c:	221d      	movs	r2, #29
 8002f8e:	492d      	ldr	r1, [pc, #180]	; (8003044 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8002f90:	f002 fe95 	bl	8005cbe <HAL_UART_Transmit>
	int err = this->sleep();
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7fe fc1b 	bl	80017d0 <_ZN10IridiumSBD5sleepEv>
 8002f9a:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d017      	beq.n	8002fd2 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8002fa2:	f107 0308 	add.w	r3, r7, #8
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa8:	4927      	ldr	r1, [pc, #156]	; (8003048 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8002faa:	4618      	mov	r0, r3
 8002fac:	f004 faf6 	bl	800759c <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8002fb0:	687c      	ldr	r4, [r7, #4]
 8002fb2:	f107 0308 	add.w	r3, r7, #8
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd f934 	bl	8000224 <strlen>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	f107 0108 	add.w	r1, r7, #8
 8002fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f002 fe78 	bl	8005cbe <HAL_UART_Transmit>
		return false;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e032      	b.n	8003038 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd8:	2204      	movs	r2, #4
 8002fda:	491c      	ldr	r1, [pc, #112]	; (800304c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8002fdc:	f002 fe6f 	bl	8005cbe <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe6:	2218      	movs	r2, #24
 8002fe8:	4919      	ldr	r1, [pc, #100]	; (8003050 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8002fea:	f002 fe68 	bl	8005cbe <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8002fee:	2100      	movs	r1, #0
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7fe fd77 	bl	8001ae4 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	4913      	ldr	r1, [pc, #76]	; (800304c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8003000:	f002 fe5d 	bl	8005cbe <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	2227      	movs	r2, #39	; 0x27
 800300c:	4911      	ldr	r1, [pc, #68]	; (8003054 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 800300e:	f002 fe56 	bl	8005cbe <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 8003012:	2100      	movs	r1, #0
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7fe fcf7 	bl	8001a08 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f04f 33ff 	mov.w	r3, #4294967295
 8003020:	2204      	movs	r2, #4
 8003022:	490a      	ldr	r1, [pc, #40]	; (800304c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8003024:	f002 fe4b 	bl	8005cbe <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f04f 33ff 	mov.w	r3, #4294967295
 800302e:	2220      	movs	r2, #32
 8003030:	4909      	ldr	r1, [pc, #36]	; (8003058 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8003032:	f002 fe44 	bl	8005cbe <HAL_UART_Transmit>
	return true;
 8003036:	2301      	movs	r3, #1
}
 8003038:	4618      	mov	r0, r3
 800303a:	372c      	adds	r7, #44	; 0x2c
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}
 8003040:	0800b064 	.word	0x0800b064
 8003044:	0800b084 	.word	0x0800b084
 8003048:	0800b0a4 	.word	0x0800b0a4
 800304c:	0800a860 	.word	0x0800a860
 8003050:	0800b0c0 	.word	0x0800b0c0
 8003054:	0800b0dc 	.word	0x0800b0dc
 8003058:	0800b104 	.word	0x0800b104

0800305c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f04f 33ff 	mov.w	r3, #4294967295
 800306e:	220c      	movs	r2, #12
 8003070:	4948      	ldr	r1, [pc, #288]	; (8003194 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x138>)
 8003072:	f002 fe24 	bl	8005cbe <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d107      	bne.n	800308c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x30>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f04f 33ff 	mov.w	r3, #4294967295
 8003082:	2211      	movs	r2, #17
 8003084:	4944      	ldr	r1, [pc, #272]	; (8003198 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x13c>)
 8003086:	f002 fe1a 	bl	8005cbe <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
	}
	else{
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
	}
}
 800308a:	e07f      	b.n	800318c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SERIAL_FAILURE){
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d107      	bne.n	80030a2 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x46>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f04f 33ff 	mov.w	r3, #4294967295
 8003098:	2212      	movs	r2, #18
 800309a:	4940      	ldr	r1, [pc, #256]	; (800319c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x140>)
 800309c:	f002 fe0f 	bl	8005cbe <HAL_UART_Transmit>
}
 80030a0:	e074      	b.n	800318c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_PROTOCOL_ERROR){
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d107      	bne.n	80030b8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x5c>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	2212      	movs	r2, #18
 80030b0:	493b      	ldr	r1, [pc, #236]	; (80031a0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x144>)
 80030b2:	f002 fe04 	bl	8005cbe <HAL_UART_Transmit>
}
 80030b6:	e069      	b.n	800318c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_CANCELLED){
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d107      	bne.n	80030ce <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x72>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f04f 33ff 	mov.w	r3, #4294967295
 80030c4:	220d      	movs	r2, #13
 80030c6:	4937      	ldr	r1, [pc, #220]	; (80031a4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x148>)
 80030c8:	f002 fdf9 	bl	8005cbe <HAL_UART_Transmit>
}
 80030cc:	e05e      	b.n	800318c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_MODEM_DETECTED){
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	2b05      	cmp	r3, #5
 80030d2:	d107      	bne.n	80030e4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x88>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295
 80030da:	2224      	movs	r2, #36	; 0x24
 80030dc:	4932      	ldr	r1, [pc, #200]	; (80031a8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x14c>)
 80030de:	f002 fdee 	bl	8005cbe <HAL_UART_Transmit>
}
 80030e2:	e053      	b.n	800318c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 80030e4:	78fb      	ldrb	r3, [r7, #3]
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d107      	bne.n	80030fa <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x9e>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f04f 33ff 	mov.w	r3, #4294967295
 80030f0:	2215      	movs	r2, #21
 80030f2:	492e      	ldr	r1, [pc, #184]	; (80031ac <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x150>)
 80030f4:	f002 fde3 	bl	8005cbe <HAL_UART_Transmit>
}
 80030f8:	e048      	b.n	800318c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	2b07      	cmp	r3, #7
 80030fe:	d107      	bne.n	8003110 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	2218      	movs	r2, #24
 8003108:	4929      	ldr	r1, [pc, #164]	; (80031b0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x154>)
 800310a:	f002 fdd8 	bl	8005cbe <HAL_UART_Transmit>
}
 800310e:	e03d      	b.n	800318c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_RX_OVERFLOW){
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	2b08      	cmp	r3, #8
 8003114:	d107      	bne.n	8003126 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xca>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f04f 33ff 	mov.w	r3, #4294967295
 800311c:	220f      	movs	r2, #15
 800311e:	4925      	ldr	r1, [pc, #148]	; (80031b4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x158>)
 8003120:	f002 fdcd 	bl	8005cbe <HAL_UART_Transmit>
}
 8003124:	e032      	b.n	800318c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_REENTRANT){
 8003126:	78fb      	ldrb	r3, [r7, #3]
 8003128:	2b09      	cmp	r3, #9
 800312a:	d107      	bne.n	800313c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f04f 33ff 	mov.w	r3, #4294967295
 8003132:	220d      	movs	r2, #13
 8003134:	4920      	ldr	r1, [pc, #128]	; (80031b8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x15c>)
 8003136:	f002 fdc2 	bl	8005cbe <HAL_UART_Transmit>
}
 800313a:	e027      	b.n	800318c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_IS_ASLEEP){
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	2b0a      	cmp	r3, #10
 8003140:	d107      	bne.n	8003152 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf6>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f04f 33ff 	mov.w	r3, #4294967295
 8003148:	220d      	movs	r2, #13
 800314a:	491c      	ldr	r1, [pc, #112]	; (80031bc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x160>)
 800314c:	f002 fdb7 	bl	8005cbe <HAL_UART_Transmit>
}
 8003150:	e01c      	b.n	800318c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_SLEEP_PIN){
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	2b0b      	cmp	r3, #11
 8003156:	d107      	bne.n	8003168 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
 800315e:	2210      	movs	r2, #16
 8003160:	4917      	ldr	r1, [pc, #92]	; (80031c0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x164>)
 8003162:	f002 fdac 	bl	8005cbe <HAL_UART_Transmit>
}
 8003166:	e011      	b.n	800318c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if(error == 20){
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	2b14      	cmp	r3, #20
 800316c:	d107      	bne.n	800317e <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x122>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f04f 33ff 	mov.w	r3, #4294967295
 8003174:	2216      	movs	r2, #22
 8003176:	4913      	ldr	r1, [pc, #76]	; (80031c4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x168>)
 8003178:	f002 fda1 	bl	8005cbe <HAL_UART_Transmit>
}
 800317c:	e006      	b.n	800318c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f04f 33ff 	mov.w	r3, #4294967295
 8003184:	220b      	movs	r2, #11
 8003186:	4910      	ldr	r1, [pc, #64]	; (80031c8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x16c>)
 8003188:	f002 fd99 	bl	8005cbe <HAL_UART_Transmit>
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	0800b124 	.word	0x0800b124
 8003198:	0800b130 	.word	0x0800b130
 800319c:	0800b140 	.word	0x0800b140
 80031a0:	0800b154 	.word	0x0800b154
 80031a4:	0800b168 	.word	0x0800b168
 80031a8:	0800b174 	.word	0x0800b174
 80031ac:	0800b198 	.word	0x0800b198
 80031b0:	0800b1ac 	.word	0x0800b1ac
 80031b4:	0800b1c4 	.word	0x0800b1c4
 80031b8:	0800b1d4 	.word	0x0800b1d4
 80031bc:	0800b1e0 	.word	0x0800b1e0
 80031c0:	0800b1ec 	.word	0x0800b1ec
 80031c4:	0800b1fc 	.word	0x0800b1fc
 80031c8:	0800b214 	.word	0x0800b214

080031cc <_Z10st_pinModeP12GPIO_TypeDefhi>:


//Define a version of pinMode for st to convert arduino's pinMode with macro
void st_pinMode(GPIO_TypeDef* PIN_NAME_GPIO_Port,uint8_t PIN_NAME_Pin,int i){
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	460b      	mov	r3, r1
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	72fb      	strb	r3, [r7, #11]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031da:	f107 0314 	add.w	r3, r7, #20
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	60da      	str	r2, [r3, #12]
 80031e8:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pin Output Level */
	if (i==1){
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <_Z10st_pinModeP12GPIO_TypeDefhi+0x32>
		HAL_GPIO_WritePin(PIN_NAME_GPIO_Port, PIN_NAME_Pin, GPIO_PIN_RESET);
 80031f0:	7afb      	ldrb	r3, [r7, #11]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2200      	movs	r2, #0
 80031f6:	4619      	mov	r1, r3
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f001 fb35 	bl	8004868 <HAL_GPIO_WritePin>
	}
	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = PIN_NAME_Pin;
 80031fe:	7afb      	ldrb	r3, [r7, #11]
 8003200:	617b      	str	r3, [r7, #20]
	if (i==1) {
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d102      	bne.n	800320e <_Z10st_pinModeP12GPIO_TypeDefhi+0x42>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003208:	2301      	movs	r3, #1
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e001      	b.n	8003212 <_Z10st_pinModeP12GPIO_TypeDefhi+0x46>
	}
	else{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
	}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003216:	2300      	movs	r3, #0
 8003218:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(PIN_NAME_GPIO_Port, &GPIO_InitStruct);
 800321a:	f107 0314 	add.w	r3, r7, #20
 800321e:	4619      	mov	r1, r3
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f001 f975 	bl	8004510 <HAL_GPIO_Init>
}
 8003226:	bf00      	nop
 8003228:	3728      	adds	r7, #40	; 0x28
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>:


/*
 * This function requests the satellite modem's IMEI number.
 */
boolean IridiumSBD::MRT_Iridium_getIMEI(void){
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b093      	sub	sp, #76	; 0x4c
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	// Get the IMEI
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nRetrieving the IMEI\r\n", 23, HAL_MAX_DELAY);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	2217      	movs	r2, #23
 8003240:	4920      	ldr	r1, [pc, #128]	; (80032c4 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x94>)
 8003242:	f002 fd3c 	bl	8005cbe <HAL_UART_Transmit>
	//int err = this->getIMEI(IMEI, sizeof(IMEI)/sizeof(char)); TODO
	int err = this->getIMEI(IMEI, 16);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	2210      	movs	r2, #16
 800324c:	4619      	mov	r1, r3
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7fe fd26 	bl	8001ca0 <_ZN10IridiumSBD7getIMEIEPcj>
 8003254:	6478      	str	r0, [r7, #68]	; 0x44
	if (err != ISBD_SUCCESS)
 8003256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003258:	2b00      	cmp	r3, #0
 800325a:	d017      	beq.n	800328c <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x5c>
	{
		char str[24+sizeof(int)];
	    sprintf(str, "getIMEI failed: error %i\r\n", err);
 800325c:	f107 030c 	add.w	r3, r7, #12
 8003260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003262:	4919      	ldr	r1, [pc, #100]	; (80032c8 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x98>)
 8003264:	4618      	mov	r0, r3
 8003266:	f004 f999 	bl	800759c <siprintf>
	    HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800326a:	687c      	ldr	r4, [r7, #4]
 800326c:	f107 030c 	add.w	r3, r7, #12
 8003270:	4618      	mov	r0, r3
 8003272:	f7fc ffd7 	bl	8000224 <strlen>
 8003276:	4603      	mov	r3, r0
 8003278:	b29a      	uxth	r2, r3
 800327a:	f107 010c 	add.w	r1, r7, #12
 800327e:	f04f 33ff 	mov.w	r3, #4294967295
 8003282:	4620      	mov	r0, r4
 8003284:	f002 fd1b 	bl	8005cbe <HAL_UART_Transmit>
	    return false;
 8003288:	2300      	movs	r3, #0
 800328a:	e017      	b.n	80032bc <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x8c>
	  }
	  char str[28];//IMEI is 15 integers long
	  sprintf(str, "IMEI is %s\r\n", IMEI);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003294:	490d      	ldr	r1, [pc, #52]	; (80032cc <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv+0x9c>)
 8003296:	4618      	mov	r0, r3
 8003298:	f004 f980 	bl	800759c <siprintf>
	  HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800329c:	687c      	ldr	r4, [r7, #4]
 800329e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fc ffbe 	bl	8000224 <strlen>
 80032a8:	4603      	mov	r3, r0
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80032b0:	f04f 33ff 	mov.w	r3, #4294967295
 80032b4:	4620      	mov	r0, r4
 80032b6:	f002 fd02 	bl	8005cbe <HAL_UART_Transmit>
	  return true;
 80032ba:	2301      	movs	r3, #1
}
 80032bc:	4618      	mov	r0, r3
 80032be:	374c      	adds	r7, #76	; 0x4c
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	0800b220 	.word	0x0800b220
 80032c8:	0800b238 	.word	0x0800b238
 80032cc:	0800b254 	.word	0x0800b254

080032d0 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh>:
 * This sketch checks the Iridium signal quality and returns the status
 * of the Network Available signal.
 *
 * The boolean param is if you want to check for network availability
 */
int IridiumSBD::MRT_Iridium_checkCSQ(boolean b){
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b0a5      	sub	sp, #148	; 0x94
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nChecking Signal Quality\r\n", 27, HAL_MAX_DELAY);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	221b      	movs	r2, #27
 80032e4:	4952      	ldr	r1, [pc, #328]	; (8003430 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x160>)
 80032e6:	f002 fcea 	bl	8005cbe <HAL_UART_Transmit>
	int signalQuality = -1;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295
 80032ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	//If IMEI not retrieved already, get it
	if (strlen(IMEI)==4 || IMEI[0]=='\0'){
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fc ff94 	bl	8000224 <strlen>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d004      	beq.n	800330c <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x3c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10a      	bne.n	8003322 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x52>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "No IMEI\r\n", 10, HAL_MAX_DELAY);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
 8003312:	220a      	movs	r2, #10
 8003314:	4947      	ldr	r1, [pc, #284]	; (8003434 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x164>)
 8003316:	f002 fcd2 	bl	8005cbe <HAL_UART_Transmit>
		this->MRT_Iridium_getIMEI();
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ff88 	bl	8003230 <_ZN10IridiumSBD19MRT_Iridium_getIMEIEv>
 8003320:	e016      	b.n	8003350 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x80>
	}
	else{
		char str[28]; //IMEI is 15 integers long
		sprintf(str, "IMEI is %s\r\n", IMEI);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003326:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800332a:	4943      	ldr	r1, [pc, #268]	; (8003438 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x168>)
 800332c:	4618      	mov	r0, r3
 800332e:	f004 f935 	bl	800759c <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8003332:	687c      	ldr	r4, [r7, #4]
 8003334:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003338:	4618      	mov	r0, r3
 800333a:	f7fc ff73 	bl	8000224 <strlen>
 800333e:	4603      	mov	r3, r0
 8003340:	b29a      	uxth	r2, r3
 8003342:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003346:	f04f 33ff 	mov.w	r3, #4294967295
 800334a:	4620      	mov	r0, r4
 800334c:	f002 fcb7 	bl	8005cbe <HAL_UART_Transmit>
	}

	// Check the signal quality.
	// This returns a number between 0 and 5.
	// 2 or better is preferred.
	int err = this->getSignalQuality(signalQuality);
 8003350:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fe fa1c 	bl	8001794 <_ZN10IridiumSBD16getSignalQualityERi>
 800335c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if (err != ISBD_SUCCESS)
 8003360:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d020      	beq.n	80033aa <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0xda>
	{
	  char str[34+sizeof(int)];
	  sprintf(str, "SignalQuality failed: error  %i\r\n", err);
 8003368:	f107 0308 	add.w	r3, r7, #8
 800336c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8003370:	4932      	ldr	r1, [pc, #200]	; (800343c <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x16c>)
 8003372:	4618      	mov	r0, r3
 8003374:	f004 f912 	bl	800759c <siprintf>
	  HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8003378:	687c      	ldr	r4, [r7, #4]
 800337a:	f107 0308 	add.w	r3, r7, #8
 800337e:	4618      	mov	r0, r3
 8003380:	f7fc ff50 	bl	8000224 <strlen>
 8003384:	4603      	mov	r3, r0
 8003386:	b29a      	uxth	r2, r3
 8003388:	f107 0108 	add.w	r1, r7, #8
 800338c:	f04f 33ff 	mov.w	r3, #4294967295
 8003390:	4620      	mov	r0, r4
 8003392:	f002 fc94 	bl	8005cbe <HAL_UART_Transmit>
	  this->MRT_Iridium_ErrorMessage(err);
 8003396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800339a:	b2db      	uxtb	r3, r3
 800339c:	4619      	mov	r1, r3
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff fe5c 	bl	800305c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
	  return -1;
 80033a4:	f04f 33ff 	mov.w	r3, #4294967295
 80033a8:	e03e      	b.n	8003428 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x158>
	}

	char str[56+sizeof(int)];
	sprintf(str, "On a scale of 0 to 5, signal quality is currently  %i\r\n", signalQuality);
 80033aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80033ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033b2:	4923      	ldr	r1, [pc, #140]	; (8003440 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x170>)
 80033b4:	4618      	mov	r0, r3
 80033b6:	f004 f8f1 	bl	800759c <siprintf>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80033ba:	687c      	ldr	r4, [r7, #4]
 80033bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fc ff2f 	bl	8000224 <strlen>
 80033c6:	4603      	mov	r3, r0
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80033ce:	f04f 33ff 	mov.w	r3, #4294967295
 80033d2:	4620      	mov	r0, r4
 80033d4:	f002 fc73 	bl	8005cbe <HAL_UART_Transmit>

	if (b){
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d022      	beq.n	8003424 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x154>
		// Check Network Available.
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Checking if Network is Available:\t", 35, HAL_MAX_DELAY);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f04f 33ff 	mov.w	r3, #4294967295
 80033e4:	2223      	movs	r2, #35	; 0x23
 80033e6:	4917      	ldr	r1, [pc, #92]	; (8003444 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x174>)
 80033e8:	f002 fc69 	bl	8005cbe <HAL_UART_Transmit>
		while (!this->checkNetworkAvailable())
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7fe fc27 	bl	8001c40 <_ZN10IridiumSBD21checkNetworkAvailableEv>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f083 0301 	eor.w	r3, r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x146>
		{
	  HAL_UART_Transmit(&(this->uart),(uint8_t*) "Network is not available.\r\nChecking again in 10 seconds...\r\n", 60, HAL_MAX_DELAY);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f04f 33ff 	mov.w	r3, #4294967295
 8003404:	223c      	movs	r2, #60	; 0x3c
 8003406:	4910      	ldr	r1, [pc, #64]	; (8003448 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x178>)
 8003408:	f002 fc59 	bl	8005cbe <HAL_UART_Transmit>
	  //diagprint(F("(This might be because the 9603N has not yet aquired the ring channel.)\r\n"));
	  HAL_Delay(10000);
 800340c:	f242 7010 	movw	r0, #10000	; 0x2710
 8003410:	f000 ff46 	bl	80042a0 <HAL_Delay>
		while (!this->checkNetworkAvailable())
 8003414:	e7ea      	b.n	80033ec <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x11c>
	  }
	  HAL_UART_Transmit(&(this->uart),(uint8_t*) "Network is available!\r\n", 23, HAL_MAX_DELAY);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f04f 33ff 	mov.w	r3, #4294967295
 800341c:	2217      	movs	r2, #23
 800341e:	490b      	ldr	r1, [pc, #44]	; (800344c <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh+0x17c>)
 8003420:	f002 fc4d 	bl	8005cbe <HAL_UART_Transmit>
	}
	return signalQuality;
 8003424:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 8003428:	4618      	mov	r0, r3
 800342a:	3794      	adds	r7, #148	; 0x94
 800342c:	46bd      	mov	sp, r7
 800342e:	bd90      	pop	{r4, r7, pc}
 8003430:	0800b264 	.word	0x0800b264
 8003434:	0800b280 	.word	0x0800b280
 8003438:	0800b254 	.word	0x0800b254
 800343c:	0800b28c 	.word	0x0800b28c
 8003440:	0800b2b0 	.word	0x0800b2b0
 8003444:	0800b2e8 	.word	0x0800b2e8
 8003448:	0800b30c 	.word	0x0800b30c
 800344c:	0800b34c 	.word	0x0800b34c

08003450 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:

/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	b0a1      	sub	sp, #132	; 0x84
 8003454:	af04      	add	r7, sp, #16
 8003456:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nRetrieving time\r\n", 20, HAL_MAX_DELAY);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f04f 33ff 	mov.w	r3, #4294967295
 800345e:	2214      	movs	r2, #20
 8003460:	4928      	ldr	r1, [pc, #160]	; (8003504 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xb4>)
 8003462:	f002 fc2c 	bl	8005cbe <HAL_UART_Transmit>
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 8003466:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800346a:	4619      	mov	r1, r3
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7fe fa07 	bl	8001880 <_ZN10IridiumSBD13getSystemTimeER2tm>
 8003472:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 8003474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d125      	bne.n	80034c6 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x76>
	    {
		char buf[61];
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 800347a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 800347c:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8003480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8003482:	1c5e      	adds	r6, r3, #1
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003488:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800348a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800348c:	f107 0408 	add.w	r4, r7, #8
 8003490:	9003      	str	r0, [sp, #12]
 8003492:	9102      	str	r1, [sp, #8]
 8003494:	9201      	str	r2, [sp, #4]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	4633      	mov	r3, r6
 800349a:	462a      	mov	r2, r5
 800349c:	491a      	ldr	r1, [pc, #104]	; (8003508 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xb8>)
 800349e:	4620      	mov	r0, r4
 80034a0:	f004 f87c 	bl	800759c <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) buf, strlen(buf), HAL_MAX_DELAY);
 80034a4:	687c      	ldr	r4, [r7, #4]
 80034a6:	f107 0308 	add.w	r3, r7, #8
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fc feba 	bl	8000224 <strlen>
 80034b0:	4603      	mov	r3, r0
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	f107 0108 	add.w	r1, r7, #8
 80034b8:	f04f 33ff 	mov.w	r3, #4294967295
 80034bc:	4620      	mov	r0, r4
 80034be:	f002 fbfe 	bl	8005cbe <HAL_UART_Transmit>
		return true;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e019      	b.n	80034fa <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xaa>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 80034c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c8:	2b0c      	cmp	r3, #12
 80034ca:	d108      	bne.n	80034de <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x8e>
	     {
	  	 HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo network detected.\r\n", 28, HAL_MAX_DELAY);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	221c      	movs	r2, #28
 80034d4:	490d      	ldr	r1, [pc, #52]	; (800350c <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xbc>)
 80034d6:	f002 fbf2 	bl	8005cbe <HAL_UART_Transmit>
	   	 return false;
 80034da:	2300      	movs	r3, #0
 80034dc:	e00d      	b.n	80034fa <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xaa>
	}

	else
	    {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nUnexpected Error ", 21, HAL_MAX_DELAY);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f04f 33ff 	mov.w	r3, #4294967295
 80034e4:	2215      	movs	r2, #21
 80034e6:	490a      	ldr	r1, [pc, #40]	; (8003510 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xc0>)
 80034e8:	f002 fbe9 	bl	8005cbe <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 80034ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fdb2 	bl	800305c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 80034f8:	2300      	movs	r3, #0
	}
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3774      	adds	r7, #116	; 0x74
 80034fe:	46bd      	mov	sp, r7
 8003500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003502:	bf00      	nop
 8003504:	0800b364 	.word	0x0800b364
 8003508:	0800b378 	.word	0x0800b378
 800350c:	0800b3b0 	.word	0x0800b3b0
 8003510:	0800b3cc 	.word	0x0800b3cc

08003514 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

   IridiumSBD(TwoWire &wirePort = Wire, uint8_t deviceAddress = 0x63)
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	4613      	mov	r3, r2
 8003520:	71fb      	strb	r3, [r7, #7]
   {
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2205      	movs	r2, #5
 800352e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2202      	movs	r2, #2
 800353e:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2204      	movs	r2, #4
 8003546:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2208      	movs	r2, #8
 800354e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2210      	movs	r2, #16
 8003556:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2240      	movs	r2, #64	; 0x40
 8003566:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
      useSerial = false;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      wireport = &wirePort;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	64da      	str	r2, [r3, #76]	; 0x4c
      deviceaddress = deviceAddress;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	79fa      	ldrb	r2, [r7, #7]
 800357c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	221e      	movs	r2, #30
 8003584:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	221e      	movs	r2, #30
 800358c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003596:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	22f0      	movs	r2, #240	; 0xf0
 800359e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      remainingMessages = -1;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f04f 32ff 	mov.w	r2, #4294967295
 80035a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      asleep = true;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
      reentrant = false;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
      sleepPin = -1;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f04f 32ff 	mov.w	r2, #4294967295
 80035c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      sleepPinConfigured = false;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      ringPin = -1;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295
 80035d4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      msstmWorkaroundRequested = false;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      ringAlertsEnabled = true;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      ringAsserted = false;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      lastPowerOnTime = 0UL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      head = SBDRING;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a0d      	ldr	r2, [pc, #52]	; (8003630 <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 80035fc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      tail = SBDRING;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a0b      	ldr	r2, [pc, #44]	; (8003630 <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8003604:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      nextChar = -1;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f04f 32ff 	mov.w	r2, #4294967295
 800360e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      i2c_ser_buffer_tail = 0;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      i2c_ser_buffer_head = 0;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   }
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	0800b404 	.word	0x0800b404

08003634 <MRT_Static_Iridium_Constructor>:
extern "C" {
#endif

static IridiumSBD *E_T = NULL;

void MRT_Static_Iridium_Constructor(){
 8003634:	b598      	push	{r3, r4, r7, lr}
 8003636:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <MRT_Static_Iridium_Constructor+0x38>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10b      	bne.n	8003658 <MRT_Static_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 8003640:	20e4      	movs	r0, #228	; 0xe4
 8003642:	f002 fe05 	bl	8006250 <_Znwj>
 8003646:	4603      	mov	r3, r0
 8003648:	461c      	mov	r4, r3
 800364a:	2263      	movs	r2, #99	; 0x63
 800364c:	4908      	ldr	r1, [pc, #32]	; (8003670 <MRT_Static_Iridium_Constructor+0x3c>)
 800364e:	4620      	mov	r0, r4
 8003650:	f7ff ff60 	bl	8003514 <_ZN10IridiumSBDC1ER7TwoWireh>
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <MRT_Static_Iridium_Constructor+0x38>)
 8003656:	601c      	str	r4, [r3, #0]
	}
	E_T->IMEI = (char*) malloc(16*sizeof(char));
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <MRT_Static_Iridium_Constructor+0x38>)
 800365a:	681c      	ldr	r4, [r3, #0]
 800365c:	2010      	movs	r0, #16
 800365e:	f002 ff77 	bl	8006550 <malloc>
 8003662:	4603      	mov	r3, r0
 8003664:	6463      	str	r3, [r4, #68]	; 0x44
}
 8003666:	bf00      	nop
 8003668:	bd98      	pop	{r3, r4, r7, pc}
 800366a:	bf00      	nop
 800366c:	20000268 	.word	0x20000268
 8003670:	2000026c 	.word	0x2000026c

08003674 <MRT_Static_Iridium_Destructor>:

void MRT_Static_Iridium_Destructor(){
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
	free(E_T->IMEI);
 8003678:	4b07      	ldr	r3, [pc, #28]	; (8003698 <MRT_Static_Iridium_Destructor+0x24>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	4618      	mov	r0, r3
 8003680:	f002 ff6e 	bl	8006560 <free>
	if (E_T!=NULL){
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <MRT_Static_Iridium_Destructor+0x24>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <MRT_Static_Iridium_Destructor+0x1e>
		E_T = NULL;
 800368c:	4b02      	ldr	r3, [pc, #8]	; (8003698 <MRT_Static_Iridium_Destructor+0x24>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
	}
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000268 	.word	0x20000268

0800369c <MRT_Static_Iridium_Setup>:


uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart){
 800369c:	b084      	sub	sp, #16
 800369e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a0:	b08f      	sub	sp, #60	; 0x3c
 80036a2:	af0e      	add	r7, sp, #56	; 0x38
 80036a4:	f107 0418 	add.w	r4, r7, #24
 80036a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MRT_Static_Iridium_Constructor();
 80036ac:	f7ff ffc2 	bl	8003634 <MRT_Static_Iridium_Constructor>
	return E_T->MRT_Iridium_setup(huart);
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <MRT_Static_Iridium_Setup+0x50>)
 80036b2:	681e      	ldr	r6, [r3, #0]
 80036b4:	466d      	mov	r5, sp
 80036b6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80036ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80036ce:	f107 0318 	add.w	r3, r7, #24
 80036d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d4:	4630      	mov	r0, r6
 80036d6:	f7ff fb59 	bl	8002d8c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>
 80036da:	4603      	mov	r3, r0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3704      	adds	r7, #4
 80036e0:	46bd      	mov	sp, r7
 80036e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80036e6:	b004      	add	sp, #16
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000268 	.word	0x20000268

080036f0 <MRT_Static_Iridium_Shutdown>:

bool MRT_Static_Iridium_Shutdown(void){
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <MRT_Static_Iridium_Shutdown+0x2c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fc38 	bl	8002f70 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	bf14      	ite	ne
 8003706:	2301      	movne	r3, #1
 8003708:	2300      	moveq	r3, #0
 800370a:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 800370c:	f7ff ffb2 	bl	8003674 <MRT_Static_Iridium_Destructor>
	return b;
 8003710:	79fb      	ldrb	r3, [r7, #7]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000268 	.word	0x20000268

08003720 <MRT_Static_Iridium_checkCSQ>:
bool MRT_Static_Iridium_getIMEI(void){
	return E_T->MRT_Iridium_getIMEI();
}


int MRT_Static_Iridium_checkCSQ(bool b){
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
	return E_T->MRT_Iridium_checkCSQ(b);
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <MRT_Static_Iridium_checkCSQ+0x24>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	79fa      	ldrb	r2, [r7, #7]
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fdcc 	bl	80032d0 <_ZN10IridiumSBD20MRT_Iridium_checkCSQEh>
 8003738:	4603      	mov	r3, r0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000268 	.word	0x20000268

08003748 <MRT_Static_Iridium_getTime>:


bool MRT_Static_Iridium_getTime(void){
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <MRT_Static_Iridium_getTime+0x20>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fe7d 	bl	8003450 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf14      	ite	ne
 800375c:	2301      	movne	r3, #1
 800375e:	2300      	moveq	r3, #0
 8003760:	b2db      	uxtb	r3, r3
}
 8003762:	4618      	mov	r0, r3
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000268 	.word	0x20000268

0800376c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <_ZN5Print5writeEPKc+0x14>
 800377c:	2300      	movs	r3, #0
 800377e:	e00d      	b.n	800379c <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3304      	adds	r3, #4
 8003786:	681c      	ldr	r4, [r3, #0]
 8003788:	6838      	ldr	r0, [r7, #0]
 800378a:	f7fc fd4b 	bl	8000224 <strlen>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	6839      	ldr	r1, [r7, #0]
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	47a0      	blx	r4
 8003798:	4603      	mov	r3, r0
 800379a:	bf00      	nop
    }
 800379c:	4618      	mov	r0, r3
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd90      	pop	{r4, r7, pc}

080037a4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
  while (size--) {
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	1e5a      	subs	r2, r3, #1
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00e      	beq.n	80037e6 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1c59      	adds	r1, r3, #1
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	4619      	mov	r1, r3
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	4790      	blx	r2
 80037dc:	4602      	mov	r2, r0
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	4413      	add	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
  while (size--) {
 80037e4:	e7e6      	b.n	80037b4 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 80037e6:	697b      	ldr	r3, [r7, #20]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 80037fa:	6839      	ldr	r1, [r7, #0]
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f805 	bl	800380c <_ZN5Print5printEPKc>
 8003802:	4603      	mov	r3, r0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  return write(str);
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ffa7 	bl	800376c <_ZN5Print5writeEPKc>
 800381e:	4603      	mov	r3, r0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	4a06      	ldr	r2, [pc, #24]	; (800384c <_ZN5PrintC1Ev+0x24>)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	0800b418 	.word	0x0800b418

08003850 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4618      	mov	r0, r3
 800385c:	f7ff ffe4 	bl	8003828 <_ZN5PrintC1Ev>
 8003860:	4a05      	ldr	r2, [pc, #20]	; (8003878 <_ZN6StreamC1Ev+0x28>)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800386c:	609a      	str	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	0800b448 	.word	0x0800b448

0800387c <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ffe1 	bl	8003850 <_ZN6StreamC1Ev>
 800388e:	4a16      	ldr	r2, [pc, #88]	; (80038e8 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3390      	adds	r3, #144	; 0x90
 800389e:	2220      	movs	r2, #32
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f002 fe8c 	bl	80065c0 <memset>
  rxBufferIndex = 0;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	0800b428 	.word	0x0800b428

080038ec <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	4608      	mov	r0, r1
 80038f6:	4611      	mov	r1, r2
 80038f8:	461a      	mov	r2, r3
 80038fa:	4603      	mov	r3, r0
 80038fc:	70fb      	strb	r3, [r7, #3]
 80038fe:	460b      	mov	r3, r1
 8003900:	70bb      	strb	r3, [r7, #2]
 8003902:	4613      	mov	r3, r2
 8003904:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fc24 	bl	8004154 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 800390c:	78bb      	ldrb	r3, [r7, #2]
 800390e:	2b20      	cmp	r3, #32
 8003910:	d901      	bls.n	8003916 <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8003912:	2320      	movs	r3, #32
 8003914:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	b2d9      	uxtb	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8003922:	78b8      	ldrb	r0, [r7, #2]
 8003924:	787b      	ldrb	r3, [r7, #1]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	4603      	mov	r3, r0
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9cf 	bl	8003cce <_ZN7TwoWire15i2c_master_readEhPchh>
 8003930:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	da02      	bge.n	800393e <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	73fb      	strb	r3, [r7, #15]
 800393c:	e001      	b.n	8003942 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fbcc 	bl	80040f0 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8003958:	7bfb      	ldrb	r3, [r7, #15]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	460b      	mov	r3, r1
 800396c:	70fb      	strb	r3, [r7, #3]
 800396e:	4613      	mov	r3, r2
 8003970:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8003972:	78ba      	ldrb	r2, [r7, #2]
 8003974:	78f9      	ldrb	r1, [r7, #3]
 8003976:	2301      	movs	r3, #1
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ffb7 	bl	80038ec <_ZN7TwoWire11requestFromEhhh>
 800397e:	4603      	mov	r3, r0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af02      	add	r7, sp, #8
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	460b      	mov	r3, r1
 80039c8:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fbc2 	bl	8004154 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7c1b      	ldrb	r3, [r3, #16]
 80039d4:	0059      	lsls	r1, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f103 0211 	add.w	r2, r3, #17
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80039e2:	4618      	mov	r0, r3
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	4603      	mov	r3, r0
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fa00 	bl	8003df0 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 80039f0:	4603      	mov	r3, r0
 80039f2:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fb6f 	bl	80040f0 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 8003a24:	2101      	movs	r1, #1
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ffc9 	bl	80039be <_ZN7TwoWire15endTransmissionEh>
 8003a2c:	4603      	mov	r3, r0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d01d      	beq.n	8003a88 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003a52:	2b1f      	cmp	r3, #31
 8003a54:	d901      	bls.n	8003a5a <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e028      	b.n	8003aac <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003a60:	4619      	mov	r1, r3
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	440b      	add	r3, r1
 8003a68:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003a70:	3301      	adds	r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003a86:	e010      	b.n	8003aaa <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fb63 	bl	8004154 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8003a8e:	1cfb      	adds	r3, r7, #3
 8003a90:	2201      	movs	r2, #1
 8003a92:	4619      	mov	r1, r3
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 fa95 	bl	8003fc4 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fb28 	bl	80040f0 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	333c      	adds	r3, #60	; 0x3c
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 f83d 	bl	8004b24 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8003aaa:	2301      	movs	r3, #1
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d013      	beq.n	8003af2 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d21e      	bcs.n	8003b14 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	440a      	add	r2, r1
 8003ae2:	7812      	ldrb	r2, [r2, #0]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	3301      	adds	r3, #1
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e7ed      	b.n	8003ace <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fb2e 	bl	8004154 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68b9      	ldr	r1, [r7, #8]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 fa60 	bl	8003fc4 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f000 faf3 	bl	80040f0 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	333c      	adds	r3, #60	; 0x3c
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 f808 	bl	8004b24 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8003b14:	687b      	ldr	r3, [r7, #4]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	1ad3      	subs	r3, r2, r3
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  int value = -1;
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b52:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	429a      	cmp	r2, r3
 8003b66:	bf34      	ite	cc
 8003b68:	2301      	movcc	r3, #1
 8003b6a:	2300      	movcs	r3, #0
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d012      	beq.n	8003b98 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003b84:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8003b98:	68fb      	ldr	r3, [r7, #12]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b085      	sub	sp, #20
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  int value = -1;
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb2:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	bf34      	ite	cc
 8003bc8:	2301      	movcc	r3, #1
 8003bca:	2300      	movcs	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8003be6:	68fb      	ldr	r3, [r7, #12]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c14:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c1e:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 8003c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c24:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1e5a      	subs	r2, r3, #1
 8003c42:	60fa      	str	r2, [r7, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0e9      	beq.n	8003c26 <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e021      	b.n	8003c9a <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 8003c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c66:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1e5a      	subs	r2, r3, #1
 8003c84:	60fa      	str	r2, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bf0c      	ite	eq
 8003c8a:	2301      	moveq	r3, #1
 8003c8c:	2300      	movne	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0e9      	beq.n	8003c68 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	601a      	str	r2, [r3, #0]

    return 0;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b08a      	sub	sp, #40	; 0x28
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	460b      	mov	r3, r1
 8003cdc:	72fb      	strb	r3, [r7, #11]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f7ff ff8d 	bl	8003c08 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8003cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	bf14      	ite	ne
 8003d02:	2301      	movne	r3, #1
 8003d04:	2300      	moveq	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1ed      	bne.n	8003cf4 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8003d18:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1c:	e064      	b.n	8003de8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 8003d1e:	7afb      	ldrb	r3, [r7, #11]
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8003d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ed      	bne.n	8003d32 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 8003d56:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5a:	e045      	b.n	8003de8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	613b      	str	r3, [r7, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	7abb      	ldrb	r3, [r7, #10]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	6a3a      	ldr	r2, [r7, #32]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	da17      	bge.n	8003db0 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	2200      	movs	r2, #0
 8003d86:	4619      	mov	r1, r3
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f8a4 	bl	8003ed6 <_ZN7TwoWire20i2c_master_byte_readEPii>
 8003d8e:	61b8      	str	r0, [r7, #24]
        if(ret)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8003d96:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9a:	e025      	b.n	8003de8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8003d9c:	6979      	ldr	r1, [r7, #20]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4413      	add	r3, r2
 8003da4:	b2ca      	uxtb	r2, r1
 8003da6:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	3301      	adds	r3, #1
 8003dac:	623b      	str	r3, [r7, #32]
 8003dae:	e7e2      	b.n	8003d76 <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8003db0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff ff74 	bl	8003ca6 <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8003dbe:	f107 0314 	add.w	r3, r7, #20
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f000 f885 	bl	8003ed6 <_ZN7TwoWire20i2c_master_byte_readEPii>
 8003dcc:	61b8      	str	r0, [r7, #24]
    if(ret)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd8:	e006      	b.n	8003de8 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8003dda:	6979      	ldr	r1, [r7, #20]
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	4413      	add	r3, r2
 8003de2:	b2ca      	uxtb	r2, r1
 8003de4:	701a      	strb	r2, [r3, #0]

    return length;
 8003de6:	7abb      	ldrb	r3, [r7, #10]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3728      	adds	r7, #40	; 0x28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
 8003dfc:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f7ff feff 	bl	8003c08 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8003e0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e0e:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	bf14      	ite	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	2300      	moveq	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1ed      	bne.n	8003e10 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 8003e34:	2304      	movs	r3, #4
 8003e36:	e04a      	b.n	8003ece <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8003e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e48:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	bf14      	ite	ne
 8003e58:	2301      	movne	r3, #1
 8003e5a:	2300      	moveq	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1ed      	bne.n	8003e4a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	e02d      	b.n	8003ece <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8003e72:	2300      	movs	r3, #0
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61bb      	str	r3, [r7, #24]
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	da15      	bge.n	8003ec0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f85a 	bl	8003f58 <_ZN7TwoWire21i2c_master_byte_writeEi>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	bf14      	ite	ne
 8003eaa:	2301      	movne	r3, #1
 8003eac:	2300      	moveq	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e00a      	b.n	8003ece <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	e7e5      	b.n	8003e8c <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f7ff feed 	bl	8003ca6 <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3720      	adds	r7, #32
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b087      	sub	sp, #28
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d006      	beq.n	8003efc <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e005      	b.n	8003f08 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8003f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f0c:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	bf14      	ite	ne
 8003f1c:	2301      	movne	r3, #1
 8003f1e:	2300      	moveq	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00c      	beq.n	8003f40 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	1e5a      	subs	r2, r3, #1
 8003f2a:	617a      	str	r2, [r7, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	bf0c      	ite	eq
 8003f30:	2301      	moveq	r3, #1
 8003f32:	2300      	movne	r3, #0
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0e9      	beq.n	8003f0e <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 8003f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3e:	e005      	b.n	8003f4c <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	461a      	mov	r2, r3
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	601a      	str	r2, [r3, #0]

    return 0;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	371c      	adds	r7, #28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f66:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8003f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f76:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b80      	cmp	r3, #128	; 0x80
 8003f84:	d008      	beq.n	8003f98 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d001      	beq.n	8003f98 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	60fa      	str	r2, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0e2      	beq.n	8003f78 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e000      	b.n	8003fb8 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8003fb6:	2301      	movs	r3, #1
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b089      	sub	sp, #36	; 0x24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	dd41      	ble.n	8004064 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8003fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fe4:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff0:	2b80      	cmp	r3, #128	; 0x80
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3b01      	subs	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1ed      	bne.n	8003fe6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 800400a:	f04f 33ff 	mov.w	r3, #4294967295
 800400e:	e068      	b.n	80040e2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	60ba      	str	r2, [r7, #8]
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	461a      	mov	r2, r3
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	611a      	str	r2, [r3, #16]
        length--;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3b01      	subs	r3, #1
 8004022:	607b      	str	r3, [r7, #4]
        size++;
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	3301      	adds	r3, #1
 8004028:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b04      	cmp	r3, #4
 8004036:	d104      	bne.n	8004042 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d0c8      	beq.n	8003fda <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	60ba      	str	r2, [r7, #8]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	611a      	str	r2, [r3, #16]
            length--;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3b01      	subs	r3, #1
 800405a:	607b      	str	r3, [r7, #4]
            size++;
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	3301      	adds	r3, #1
 8004060:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8004062:	e7ba      	b.n	8003fda <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8004064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004068:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004078:	bf14      	ite	ne
 800407a:	2301      	movne	r3, #1
 800407c:	2300      	moveq	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	3b01      	subs	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ec      	bne.n	800406a <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8004090:	f04f 33ff 	mov.w	r3, #4294967295
 8004094:	e025      	b.n	80040e2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409e:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 80040a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a4:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1ed      	bne.n	80040a6 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 80040ca:	f04f 33ff 	mov.w	r3, #4294967295
 80040ce:	e008      	b.n	80040e2 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80040e0:	69bb      	ldr	r3, [r7, #24]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3724      	adds	r7, #36	; 0x24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
	...

080040f0 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	4a12      	ldr	r2, [pc, #72]	; (8004148 <_ZN7TwoWire15enableInterruptEv+0x58>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d106      	bne.n	8004110 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8004102:	2049      	movs	r0, #73	; 0x49
 8004104:	f000 f9e8 	bl	80044d8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8004108:	2048      	movs	r0, #72	; 0x48
 800410a:	f000 f9e5 	bl	80044d8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800410e:	e016      	b.n	800413e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004114:	4a0d      	ldr	r2, [pc, #52]	; (800414c <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d106      	bne.n	8004128 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800411a:	2022      	movs	r0, #34	; 0x22
 800411c:	f000 f9dc 	bl	80044d8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004120:	2021      	movs	r0, #33	; 0x21
 8004122:	f000 f9d9 	bl	80044d8 <HAL_NVIC_EnableIRQ>
}
 8004126:	e00a      	b.n	800413e <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	4a08      	ldr	r2, [pc, #32]	; (8004150 <_ZN7TwoWire15enableInterruptEv+0x60>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d105      	bne.n	800413e <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004132:	2020      	movs	r0, #32
 8004134:	f000 f9d0 	bl	80044d8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004138:	201f      	movs	r0, #31
 800413a:	f000 f9cd 	bl	80044d8 <HAL_NVIC_EnableIRQ>
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40005c00 	.word	0x40005c00
 800414c:	40005800 	.word	0x40005800
 8004150:	40005400 	.word	0x40005400

08004154 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004160:	4a12      	ldr	r2, [pc, #72]	; (80041ac <_ZN7TwoWire16disableInterruptEv+0x58>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d106      	bne.n	8004174 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8004166:	2049      	movs	r0, #73	; 0x49
 8004168:	f000 f9c4 	bl	80044f4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 800416c:	2048      	movs	r0, #72	; 0x48
 800416e:	f000 f9c1 	bl	80044f4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8004172:	e016      	b.n	80041a2 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004178:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d106      	bne.n	800418c <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 800417e:	2022      	movs	r0, #34	; 0x22
 8004180:	f000 f9b8 	bl	80044f4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8004184:	2021      	movs	r0, #33	; 0x21
 8004186:	f000 f9b5 	bl	80044f4 <HAL_NVIC_DisableIRQ>
}
 800418a:	e00a      	b.n	80041a2 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	4a08      	ldr	r2, [pc, #32]	; (80041b4 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d105      	bne.n	80041a2 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8004196:	2020      	movs	r0, #32
 8004198:	f000 f9ac 	bl	80044f4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800419c:	201f      	movs	r0, #31
 800419e:	f000 f9a9 	bl	80044f4 <HAL_NVIC_DisableIRQ>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40005c00 	.word	0x40005c00
 80041b0:	40005800 	.word	0x40005800
 80041b4:	40005400 	.word	0x40005400

080041b8 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d110      	bne.n	80041ea <_Z41__static_initialization_and_destruction_0ii+0x32>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10b      	bne.n	80041ea <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 80041d2:	4908      	ldr	r1, [pc, #32]	; (80041f4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80041d4:	4808      	ldr	r0, [pc, #32]	; (80041f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80041d6:	f7ff fb51 	bl	800387c <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 80041da:	4908      	ldr	r1, [pc, #32]	; (80041fc <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80041dc:	4808      	ldr	r0, [pc, #32]	; (8004200 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80041de:	f7ff fb4d 	bl	800387c <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 80041e2:	4908      	ldr	r1, [pc, #32]	; (8004204 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80041e4:	4808      	ldr	r0, [pc, #32]	; (8004208 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80041e6:	f7ff fb49 	bl	800387c <_ZN7TwoWireC1EP11I2C_TypeDef>
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40005400 	.word	0x40005400
 80041f8:	2000026c 	.word	0x2000026c
 80041fc:	40005800 	.word	0x40005800
 8004200:	20000324 	.word	0x20000324
 8004204:	40005c00 	.word	0x40005c00
 8004208:	200003dc 	.word	0x200003dc

0800420c <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
 8004210:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004214:	2001      	movs	r0, #1
 8004216:	f7ff ffcf 	bl	80041b8 <_Z41__static_initialization_and_destruction_0ii>
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004220:	4b0e      	ldr	r3, [pc, #56]	; (800425c <HAL_Init+0x40>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a0d      	ldr	r2, [pc, #52]	; (800425c <HAL_Init+0x40>)
 8004226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800422a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800422c:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_Init+0x40>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a0a      	ldr	r2, [pc, #40]	; (800425c <HAL_Init+0x40>)
 8004232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_Init+0x40>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a07      	ldr	r2, [pc, #28]	; (800425c <HAL_Init+0x40>)
 800423e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004244:	2003      	movs	r0, #3
 8004246:	f000 f920 	bl	800448a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800424a:	200f      	movs	r0, #15
 800424c:	f7fd f8b4 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004250:	f7fc fffa 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023c00 	.word	0x40023c00

08004260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <HAL_IncTick+0x20>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_IncTick+0x24>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4413      	add	r3, r2
 8004270:	4a04      	ldr	r2, [pc, #16]	; (8004284 <HAL_IncTick+0x24>)
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	2000000c 	.word	0x2000000c
 8004284:	200005a4 	.word	0x200005a4

08004288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return uwTick;
 800428c:	4b03      	ldr	r3, [pc, #12]	; (800429c <HAL_GetTick+0x14>)
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	200005a4 	.word	0x200005a4

080042a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042a8:	f7ff ffee 	bl	8004288 <HAL_GetTick>
 80042ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b8:	d005      	beq.n	80042c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ba:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_Delay+0x44>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042c6:	bf00      	nop
 80042c8:	f7ff ffde 	bl	8004288 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d8f7      	bhi.n	80042c8 <HAL_Delay+0x28>
  {
  }
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	2000000c 	.word	0x2000000c

080042e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <__NVIC_SetPriorityGrouping+0x44>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004304:	4013      	ands	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800431a:	4a04      	ldr	r2, [pc, #16]	; (800432c <__NVIC_SetPriorityGrouping+0x44>)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	60d3      	str	r3, [r2, #12]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <__NVIC_GetPriorityGrouping+0x18>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	f003 0307 	and.w	r3, r3, #7
}
 800433e:	4618      	mov	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	2b00      	cmp	r3, #0
 800435c:	db0b      	blt.n	8004376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	4907      	ldr	r1, [pc, #28]	; (8004384 <__NVIC_EnableIRQ+0x38>)
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2001      	movs	r0, #1
 800436e:	fa00 f202 	lsl.w	r2, r0, r2
 8004372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	e000e100 	.word	0xe000e100

08004388 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	2b00      	cmp	r3, #0
 8004398:	db12      	blt.n	80043c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	f003 021f 	and.w	r2, r3, #31
 80043a0:	490a      	ldr	r1, [pc, #40]	; (80043cc <__NVIC_DisableIRQ+0x44>)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	2001      	movs	r0, #1
 80043aa:	fa00 f202 	lsl.w	r2, r0, r2
 80043ae:	3320      	adds	r3, #32
 80043b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80043b4:	f3bf 8f4f 	dsb	sy
}
 80043b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80043ba:	f3bf 8f6f 	isb	sy
}
 80043be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000e100 	.word	0xe000e100

080043d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	db0a      	blt.n	80043fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	490c      	ldr	r1, [pc, #48]	; (800441c <__NVIC_SetPriority+0x4c>)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	0112      	lsls	r2, r2, #4
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	440b      	add	r3, r1
 80043f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043f8:	e00a      	b.n	8004410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4908      	ldr	r1, [pc, #32]	; (8004420 <__NVIC_SetPriority+0x50>)
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	3b04      	subs	r3, #4
 8004408:	0112      	lsls	r2, r2, #4
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	440b      	add	r3, r1
 800440e:	761a      	strb	r2, [r3, #24]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	e000e100 	.word	0xe000e100
 8004420:	e000ed00 	.word	0xe000ed00

08004424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f1c3 0307 	rsb	r3, r3, #7
 800443e:	2b04      	cmp	r3, #4
 8004440:	bf28      	it	cs
 8004442:	2304      	movcs	r3, #4
 8004444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3304      	adds	r3, #4
 800444a:	2b06      	cmp	r3, #6
 800444c:	d902      	bls.n	8004454 <NVIC_EncodePriority+0x30>
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3b03      	subs	r3, #3
 8004452:	e000      	b.n	8004456 <NVIC_EncodePriority+0x32>
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004458:	f04f 32ff 	mov.w	r2, #4294967295
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43da      	mvns	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	401a      	ands	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800446c:	f04f 31ff 	mov.w	r1, #4294967295
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	fa01 f303 	lsl.w	r3, r1, r3
 8004476:	43d9      	mvns	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800447c:	4313      	orrs	r3, r2
         );
}
 800447e:	4618      	mov	r0, r3
 8004480:	3724      	adds	r7, #36	; 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ff28 	bl	80042e8 <__NVIC_SetPriorityGrouping>
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044b2:	f7ff ff3d 	bl	8004330 <__NVIC_GetPriorityGrouping>
 80044b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	6978      	ldr	r0, [r7, #20]
 80044be:	f7ff ffb1 	bl	8004424 <NVIC_EncodePriority>
 80044c2:	4602      	mov	r2, r0
 80044c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff ff80 	bl	80043d0 <__NVIC_SetPriority>
}
 80044d0:	bf00      	nop
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff ff30 	bl	800434c <__NVIC_EnableIRQ>
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80044fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ff40 	bl	8004388 <__NVIC_DisableIRQ>
}
 8004508:	bf00      	nop
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004510:	b480      	push	{r7}
 8004512:	b089      	sub	sp, #36	; 0x24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800451e:	2300      	movs	r3, #0
 8004520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e165      	b.n	80047f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800452c:	2201      	movs	r2, #1
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	429a      	cmp	r2, r3
 8004546:	f040 8154 	bne.w	80047f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b01      	cmp	r3, #1
 8004554:	d005      	beq.n	8004562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800455e:	2b02      	cmp	r3, #2
 8004560:	d130      	bne.n	80045c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	2203      	movs	r2, #3
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004598:	2201      	movs	r2, #1
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	fa02 f303 	lsl.w	r3, r2, r3
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 0201 	and.w	r2, r3, #1
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d017      	beq.n	8004600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	2203      	movs	r2, #3
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d123      	bne.n	8004654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	08da      	lsrs	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3208      	adds	r2, #8
 8004614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	220f      	movs	r2, #15
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	08da      	lsrs	r2, r3, #3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3208      	adds	r2, #8
 800464e:	69b9      	ldr	r1, [r7, #24]
 8004650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	2203      	movs	r2, #3
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 0203 	and.w	r2, r3, #3
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80ae 	beq.w	80047f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	4b5d      	ldr	r3, [pc, #372]	; (8004810 <HAL_GPIO_Init+0x300>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	4a5c      	ldr	r2, [pc, #368]	; (8004810 <HAL_GPIO_Init+0x300>)
 80046a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046a4:	6453      	str	r3, [r2, #68]	; 0x44
 80046a6:	4b5a      	ldr	r3, [pc, #360]	; (8004810 <HAL_GPIO_Init+0x300>)
 80046a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046b2:	4a58      	ldr	r2, [pc, #352]	; (8004814 <HAL_GPIO_Init+0x304>)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	3302      	adds	r3, #2
 80046ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	220f      	movs	r2, #15
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a4f      	ldr	r2, [pc, #316]	; (8004818 <HAL_GPIO_Init+0x308>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d025      	beq.n	800472a <HAL_GPIO_Init+0x21a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4e      	ldr	r2, [pc, #312]	; (800481c <HAL_GPIO_Init+0x30c>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01f      	beq.n	8004726 <HAL_GPIO_Init+0x216>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4d      	ldr	r2, [pc, #308]	; (8004820 <HAL_GPIO_Init+0x310>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d019      	beq.n	8004722 <HAL_GPIO_Init+0x212>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4c      	ldr	r2, [pc, #304]	; (8004824 <HAL_GPIO_Init+0x314>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d013      	beq.n	800471e <HAL_GPIO_Init+0x20e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a4b      	ldr	r2, [pc, #300]	; (8004828 <HAL_GPIO_Init+0x318>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00d      	beq.n	800471a <HAL_GPIO_Init+0x20a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a4a      	ldr	r2, [pc, #296]	; (800482c <HAL_GPIO_Init+0x31c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <HAL_GPIO_Init+0x206>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a49      	ldr	r2, [pc, #292]	; (8004830 <HAL_GPIO_Init+0x320>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d101      	bne.n	8004712 <HAL_GPIO_Init+0x202>
 800470e:	2306      	movs	r3, #6
 8004710:	e00c      	b.n	800472c <HAL_GPIO_Init+0x21c>
 8004712:	2307      	movs	r3, #7
 8004714:	e00a      	b.n	800472c <HAL_GPIO_Init+0x21c>
 8004716:	2305      	movs	r3, #5
 8004718:	e008      	b.n	800472c <HAL_GPIO_Init+0x21c>
 800471a:	2304      	movs	r3, #4
 800471c:	e006      	b.n	800472c <HAL_GPIO_Init+0x21c>
 800471e:	2303      	movs	r3, #3
 8004720:	e004      	b.n	800472c <HAL_GPIO_Init+0x21c>
 8004722:	2302      	movs	r3, #2
 8004724:	e002      	b.n	800472c <HAL_GPIO_Init+0x21c>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_GPIO_Init+0x21c>
 800472a:	2300      	movs	r3, #0
 800472c:	69fa      	ldr	r2, [r7, #28]
 800472e:	f002 0203 	and.w	r2, r2, #3
 8004732:	0092      	lsls	r2, r2, #2
 8004734:	4093      	lsls	r3, r2
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800473c:	4935      	ldr	r1, [pc, #212]	; (8004814 <HAL_GPIO_Init+0x304>)
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	089b      	lsrs	r3, r3, #2
 8004742:	3302      	adds	r3, #2
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800474a:	4b3a      	ldr	r3, [pc, #232]	; (8004834 <HAL_GPIO_Init+0x324>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	43db      	mvns	r3, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4013      	ands	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800476e:	4a31      	ldr	r2, [pc, #196]	; (8004834 <HAL_GPIO_Init+0x324>)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004774:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_GPIO_Init+0x324>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004798:	4a26      	ldr	r2, [pc, #152]	; (8004834 <HAL_GPIO_Init+0x324>)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800479e:	4b25      	ldr	r3, [pc, #148]	; (8004834 <HAL_GPIO_Init+0x324>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047c2:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <HAL_GPIO_Init+0x324>)
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047c8:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <HAL_GPIO_Init+0x324>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047ec:	4a11      	ldr	r2, [pc, #68]	; (8004834 <HAL_GPIO_Init+0x324>)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	3301      	adds	r3, #1
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b0f      	cmp	r3, #15
 80047fc:	f67f ae96 	bls.w	800452c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	3724      	adds	r7, #36	; 0x24
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	40023800 	.word	0x40023800
 8004814:	40013800 	.word	0x40013800
 8004818:	40020000 	.word	0x40020000
 800481c:	40020400 	.word	0x40020400
 8004820:	40020800 	.word	0x40020800
 8004824:	40020c00 	.word	0x40020c00
 8004828:	40021000 	.word	0x40021000
 800482c:	40021400 	.word	0x40021400
 8004830:	40021800 	.word	0x40021800
 8004834:	40013c00 	.word	0x40013c00

08004838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691a      	ldr	r2, [r3, #16]
 8004848:	887b      	ldrh	r3, [r7, #2]
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
 8004854:	e001      	b.n	800485a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004856:	2300      	movs	r3, #0
 8004858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	807b      	strh	r3, [r7, #2]
 8004874:	4613      	mov	r3, r2
 8004876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004878:	787b      	ldrb	r3, [r7, #1]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800487e:	887a      	ldrh	r2, [r7, #2]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004884:	e003      	b.n	800488e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004886:	887b      	ldrh	r3, [r7, #2]
 8004888:	041a      	lsls	r2, r3, #16
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	619a      	str	r2, [r3, #24]
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e12b      	b.n	8004b06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc fce8 	bl	8001298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2224      	movs	r2, #36	; 0x24
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004900:	f000 fa38 	bl	8004d74 <HAL_RCC_GetPCLK1Freq>
 8004904:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	4a81      	ldr	r2, [pc, #516]	; (8004b10 <HAL_I2C_Init+0x274>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d807      	bhi.n	8004920 <HAL_I2C_Init+0x84>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4a80      	ldr	r2, [pc, #512]	; (8004b14 <HAL_I2C_Init+0x278>)
 8004914:	4293      	cmp	r3, r2
 8004916:	bf94      	ite	ls
 8004918:	2301      	movls	r3, #1
 800491a:	2300      	movhi	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e006      	b.n	800492e <HAL_I2C_Init+0x92>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4a7d      	ldr	r2, [pc, #500]	; (8004b18 <HAL_I2C_Init+0x27c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	bf94      	ite	ls
 8004928:	2301      	movls	r3, #1
 800492a:	2300      	movhi	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e0e7      	b.n	8004b06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4a78      	ldr	r2, [pc, #480]	; (8004b1c <HAL_I2C_Init+0x280>)
 800493a:	fba2 2303 	umull	r2, r3, r2, r3
 800493e:	0c9b      	lsrs	r3, r3, #18
 8004940:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4a6a      	ldr	r2, [pc, #424]	; (8004b10 <HAL_I2C_Init+0x274>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d802      	bhi.n	8004970 <HAL_I2C_Init+0xd4>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	3301      	adds	r3, #1
 800496e:	e009      	b.n	8004984 <HAL_I2C_Init+0xe8>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	4a69      	ldr	r2, [pc, #420]	; (8004b20 <HAL_I2C_Init+0x284>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	099b      	lsrs	r3, r3, #6
 8004982:	3301      	adds	r3, #1
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	430b      	orrs	r3, r1
 800498a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69db      	ldr	r3, [r3, #28]
 8004992:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004996:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	495c      	ldr	r1, [pc, #368]	; (8004b10 <HAL_I2C_Init+0x274>)
 80049a0:	428b      	cmp	r3, r1
 80049a2:	d819      	bhi.n	80049d8 <HAL_I2C_Init+0x13c>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	1e59      	subs	r1, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80049b2:	1c59      	adds	r1, r3, #1
 80049b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049b8:	400b      	ands	r3, r1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_I2C_Init+0x138>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	1e59      	subs	r1, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80049cc:	3301      	adds	r3, #1
 80049ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d2:	e051      	b.n	8004a78 <HAL_I2C_Init+0x1dc>
 80049d4:	2304      	movs	r3, #4
 80049d6:	e04f      	b.n	8004a78 <HAL_I2C_Init+0x1dc>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d111      	bne.n	8004a04 <HAL_I2C_Init+0x168>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1e58      	subs	r0, r3, #1
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6859      	ldr	r1, [r3, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	440b      	add	r3, r1
 80049ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f2:	3301      	adds	r3, #1
 80049f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	e012      	b.n	8004a2a <HAL_I2C_Init+0x18e>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1e58      	subs	r0, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	0099      	lsls	r1, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <HAL_I2C_Init+0x196>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e022      	b.n	8004a78 <HAL_I2C_Init+0x1dc>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10e      	bne.n	8004a58 <HAL_I2C_Init+0x1bc>
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1e58      	subs	r0, r3, #1
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6859      	ldr	r1, [r3, #4]
 8004a42:	460b      	mov	r3, r1
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	440b      	add	r3, r1
 8004a48:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a56:	e00f      	b.n	8004a78 <HAL_I2C_Init+0x1dc>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	1e58      	subs	r0, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	0099      	lsls	r1, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	6809      	ldr	r1, [r1, #0]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004aa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6911      	ldr	r1, [r2, #16]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68d2      	ldr	r2, [r2, #12]
 8004ab2:	4311      	orrs	r1, r2
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695a      	ldr	r2, [r3, #20]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	000186a0 	.word	0x000186a0
 8004b14:	001e847f 	.word	0x001e847f
 8004b18:	003d08ff 	.word	0x003d08ff
 8004b1c:	431bde83 	.word	0x431bde83
 8004b20:	10624dd3 	.word	0x10624dd3

08004b24 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d124      	bne.n	8004b82 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2228      	movs	r2, #40	; 0x28
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d007      	beq.n	8004b5e <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b6c:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004b7c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e000      	b.n	8004b84 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
  }
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0cc      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b68      	ldr	r3, [pc, #416]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d90c      	bls.n	8004bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b65      	ldr	r3, [pc, #404]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bba:	4b63      	ldr	r3, [pc, #396]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0b8      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be4:	4b59      	ldr	r3, [pc, #356]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	4a58      	ldr	r2, [pc, #352]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bfc:	4b53      	ldr	r3, [pc, #332]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a52      	ldr	r2, [pc, #328]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c08:	4b50      	ldr	r3, [pc, #320]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	494d      	ldr	r1, [pc, #308]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d044      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2e:	4b47      	ldr	r3, [pc, #284]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d119      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e07f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d003      	beq.n	8004c4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d107      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4e:	4b3f      	ldr	r3, [pc, #252]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e06f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5e:	4b3b      	ldr	r3, [pc, #236]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e067      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6e:	4b37      	ldr	r3, [pc, #220]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f023 0203 	bic.w	r2, r3, #3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4934      	ldr	r1, [pc, #208]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c80:	f7ff fb02 	bl	8004288 <HAL_GetTick>
 8004c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c86:	e00a      	b.n	8004c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c88:	f7ff fafe 	bl	8004288 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e04f      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c9e:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 020c 	and.w	r2, r3, #12
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d1eb      	bne.n	8004c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb0:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d20c      	bcs.n	8004cd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cbe:	4b22      	ldr	r3, [pc, #136]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc6:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d001      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e032      	b.n	8004d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4916      	ldr	r1, [pc, #88]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d009      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d02:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	490e      	ldr	r1, [pc, #56]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d16:	f000 f887 	bl	8004e28 <HAL_RCC_GetSysClockFreq>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	490a      	ldr	r1, [pc, #40]	; (8004d50 <HAL_RCC_ClockConfig+0x1c0>)
 8004d28:	5ccb      	ldrb	r3, [r1, r3]
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <HAL_RCC_ClockConfig+0x1c4>)
 8004d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d32:	4b09      	ldr	r3, [pc, #36]	; (8004d58 <HAL_RCC_ClockConfig+0x1c8>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc fb3e 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40023c00 	.word	0x40023c00
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	0800b3ec 	.word	0x0800b3ec
 8004d54:	20000004 	.word	0x20000004
 8004d58:	20000008 	.word	0x20000008

08004d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d60:	4b03      	ldr	r3, [pc, #12]	; (8004d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d62:	681b      	ldr	r3, [r3, #0]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20000004 	.word	0x20000004

08004d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d78:	f7ff fff0 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	0a9b      	lsrs	r3, r3, #10
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	4903      	ldr	r1, [pc, #12]	; (8004d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d8a:	5ccb      	ldrb	r3, [r1, r3]
 8004d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	0800b3fc 	.word	0x0800b3fc

08004d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004da0:	f7ff ffdc 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004da4:	4602      	mov	r2, r0
 8004da6:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	0b5b      	lsrs	r3, r3, #13
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	4903      	ldr	r1, [pc, #12]	; (8004dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004db2:	5ccb      	ldrb	r3, [r1, r3]
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	0800b3fc 	.word	0x0800b3fc

08004dc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	220f      	movs	r2, #15
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dd4:	4b12      	ldr	r3, [pc, #72]	; (8004e20 <HAL_RCC_GetClockConfig+0x5c>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0203 	and.w	r2, r3, #3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004de0:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <HAL_RCC_GetClockConfig+0x5c>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004dec:	4b0c      	ldr	r3, [pc, #48]	; (8004e20 <HAL_RCC_GetClockConfig+0x5c>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004df8:	4b09      	ldr	r3, [pc, #36]	; (8004e20 <HAL_RCC_GetClockConfig+0x5c>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	08db      	lsrs	r3, r3, #3
 8004dfe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e06:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <HAL_RCC_GetClockConfig+0x60>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 020f 	and.w	r2, r3, #15
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	601a      	str	r2, [r3, #0]
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
 8004e24:	40023c00 	.word	0x40023c00

08004e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e2c:	b088      	sub	sp, #32
 8004e2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e44:	4bce      	ldr	r3, [pc, #824]	; (8005180 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 030c 	and.w	r3, r3, #12
 8004e4c:	2b0c      	cmp	r3, #12
 8004e4e:	f200 818d 	bhi.w	800516c <HAL_RCC_GetSysClockFreq+0x344>
 8004e52:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <HAL_RCC_GetSysClockFreq+0x30>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e8d 	.word	0x08004e8d
 8004e5c:	0800516d 	.word	0x0800516d
 8004e60:	0800516d 	.word	0x0800516d
 8004e64:	0800516d 	.word	0x0800516d
 8004e68:	08004e93 	.word	0x08004e93
 8004e6c:	0800516d 	.word	0x0800516d
 8004e70:	0800516d 	.word	0x0800516d
 8004e74:	0800516d 	.word	0x0800516d
 8004e78:	08004e99 	.word	0x08004e99
 8004e7c:	0800516d 	.word	0x0800516d
 8004e80:	0800516d 	.word	0x0800516d
 8004e84:	0800516d 	.word	0x0800516d
 8004e88:	0800500d 	.word	0x0800500d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e8c:	4bbd      	ldr	r3, [pc, #756]	; (8005184 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e8e:	61bb      	str	r3, [r7, #24]
       break;
 8004e90:	e16f      	b.n	8005172 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e92:	4bbd      	ldr	r3, [pc, #756]	; (8005188 <HAL_RCC_GetSysClockFreq+0x360>)
 8004e94:	61bb      	str	r3, [r7, #24]
      break;
 8004e96:	e16c      	b.n	8005172 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e98:	4bb9      	ldr	r3, [pc, #740]	; (8005180 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ea2:	4bb7      	ldr	r3, [pc, #732]	; (8005180 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d053      	beq.n	8004f56 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eae:	4bb4      	ldr	r3, [pc, #720]	; (8005180 <HAL_RCC_GetSysClockFreq+0x358>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	099b      	lsrs	r3, r3, #6
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ebe:	f04f 0100 	mov.w	r1, #0
 8004ec2:	ea02 0400 	and.w	r4, r2, r0
 8004ec6:	603c      	str	r4, [r7, #0]
 8004ec8:	400b      	ands	r3, r1
 8004eca:	607b      	str	r3, [r7, #4]
 8004ecc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	014b      	lsls	r3, r1, #5
 8004ede:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ee2:	0142      	lsls	r2, r0, #5
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4623      	mov	r3, r4
 8004eea:	1ac0      	subs	r0, r0, r3
 8004eec:	462b      	mov	r3, r5
 8004eee:	eb61 0103 	sbc.w	r1, r1, r3
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	f04f 0300 	mov.w	r3, #0
 8004efa:	018b      	lsls	r3, r1, #6
 8004efc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f00:	0182      	lsls	r2, r0, #6
 8004f02:	1a12      	subs	r2, r2, r0
 8004f04:	eb63 0301 	sbc.w	r3, r3, r1
 8004f08:	f04f 0000 	mov.w	r0, #0
 8004f0c:	f04f 0100 	mov.w	r1, #0
 8004f10:	00d9      	lsls	r1, r3, #3
 8004f12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f16:	00d0      	lsls	r0, r2, #3
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	1852      	adds	r2, r2, r1
 8004f20:	4629      	mov	r1, r5
 8004f22:	eb43 0101 	adc.w	r1, r3, r1
 8004f26:	460b      	mov	r3, r1
 8004f28:	f04f 0000 	mov.w	r0, #0
 8004f2c:	f04f 0100 	mov.w	r1, #0
 8004f30:	0259      	lsls	r1, r3, #9
 8004f32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f36:	0250      	lsls	r0, r2, #9
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4610      	mov	r0, r2
 8004f3e:	4619      	mov	r1, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	f7fb feae 	bl	8000ca8 <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4613      	mov	r3, r2
 8004f52:	61fb      	str	r3, [r7, #28]
 8004f54:	e04c      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f56:	4b8a      	ldr	r3, [pc, #552]	; (8005180 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	099b      	lsrs	r3, r3, #6
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f66:	f04f 0100 	mov.w	r1, #0
 8004f6a:	ea02 0a00 	and.w	sl, r2, r0
 8004f6e:	ea03 0b01 	and.w	fp, r3, r1
 8004f72:	4650      	mov	r0, sl
 8004f74:	4659      	mov	r1, fp
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	014b      	lsls	r3, r1, #5
 8004f80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f84:	0142      	lsls	r2, r0, #5
 8004f86:	4610      	mov	r0, r2
 8004f88:	4619      	mov	r1, r3
 8004f8a:	ebb0 000a 	subs.w	r0, r0, sl
 8004f8e:	eb61 010b 	sbc.w	r1, r1, fp
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	018b      	lsls	r3, r1, #6
 8004f9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fa0:	0182      	lsls	r2, r0, #6
 8004fa2:	1a12      	subs	r2, r2, r0
 8004fa4:	eb63 0301 	sbc.w	r3, r3, r1
 8004fa8:	f04f 0000 	mov.w	r0, #0
 8004fac:	f04f 0100 	mov.w	r1, #0
 8004fb0:	00d9      	lsls	r1, r3, #3
 8004fb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fb6:	00d0      	lsls	r0, r2, #3
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	eb12 020a 	adds.w	r2, r2, sl
 8004fc0:	eb43 030b 	adc.w	r3, r3, fp
 8004fc4:	f04f 0000 	mov.w	r0, #0
 8004fc8:	f04f 0100 	mov.w	r1, #0
 8004fcc:	0299      	lsls	r1, r3, #10
 8004fce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004fd2:	0290      	lsls	r0, r2, #10
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4610      	mov	r0, r2
 8004fda:	4619      	mov	r1, r3
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	f7fb fe60 	bl	8000ca8 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4613      	mov	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ff0:	4b63      	ldr	r3, [pc, #396]	; (8005180 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	0c1b      	lsrs	r3, r3, #16
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	61bb      	str	r3, [r7, #24]
      break;
 800500a:	e0b2      	b.n	8005172 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800500c:	4b5c      	ldr	r3, [pc, #368]	; (8005180 <HAL_RCC_GetSysClockFreq+0x358>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005014:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005016:	4b5a      	ldr	r3, [pc, #360]	; (8005180 <HAL_RCC_GetSysClockFreq+0x358>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d04d      	beq.n	80050be <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005022:	4b57      	ldr	r3, [pc, #348]	; (8005180 <HAL_RCC_GetSysClockFreq+0x358>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	099b      	lsrs	r3, r3, #6
 8005028:	461a      	mov	r2, r3
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005032:	f04f 0100 	mov.w	r1, #0
 8005036:	ea02 0800 	and.w	r8, r2, r0
 800503a:	ea03 0901 	and.w	r9, r3, r1
 800503e:	4640      	mov	r0, r8
 8005040:	4649      	mov	r1, r9
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	014b      	lsls	r3, r1, #5
 800504c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005050:	0142      	lsls	r2, r0, #5
 8005052:	4610      	mov	r0, r2
 8005054:	4619      	mov	r1, r3
 8005056:	ebb0 0008 	subs.w	r0, r0, r8
 800505a:	eb61 0109 	sbc.w	r1, r1, r9
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	018b      	lsls	r3, r1, #6
 8005068:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800506c:	0182      	lsls	r2, r0, #6
 800506e:	1a12      	subs	r2, r2, r0
 8005070:	eb63 0301 	sbc.w	r3, r3, r1
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f04f 0100 	mov.w	r1, #0
 800507c:	00d9      	lsls	r1, r3, #3
 800507e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005082:	00d0      	lsls	r0, r2, #3
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	eb12 0208 	adds.w	r2, r2, r8
 800508c:	eb43 0309 	adc.w	r3, r3, r9
 8005090:	f04f 0000 	mov.w	r0, #0
 8005094:	f04f 0100 	mov.w	r1, #0
 8005098:	0259      	lsls	r1, r3, #9
 800509a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800509e:	0250      	lsls	r0, r2, #9
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	f7fb fdfa 	bl	8000ca8 <__aeabi_uldivmod>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4613      	mov	r3, r2
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	e04a      	b.n	8005154 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050be:	4b30      	ldr	r3, [pc, #192]	; (8005180 <HAL_RCC_GetSysClockFreq+0x358>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	099b      	lsrs	r3, r3, #6
 80050c4:	461a      	mov	r2, r3
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050ce:	f04f 0100 	mov.w	r1, #0
 80050d2:	ea02 0400 	and.w	r4, r2, r0
 80050d6:	ea03 0501 	and.w	r5, r3, r1
 80050da:	4620      	mov	r0, r4
 80050dc:	4629      	mov	r1, r5
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	014b      	lsls	r3, r1, #5
 80050e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050ec:	0142      	lsls	r2, r0, #5
 80050ee:	4610      	mov	r0, r2
 80050f0:	4619      	mov	r1, r3
 80050f2:	1b00      	subs	r0, r0, r4
 80050f4:	eb61 0105 	sbc.w	r1, r1, r5
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	018b      	lsls	r3, r1, #6
 8005102:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005106:	0182      	lsls	r2, r0, #6
 8005108:	1a12      	subs	r2, r2, r0
 800510a:	eb63 0301 	sbc.w	r3, r3, r1
 800510e:	f04f 0000 	mov.w	r0, #0
 8005112:	f04f 0100 	mov.w	r1, #0
 8005116:	00d9      	lsls	r1, r3, #3
 8005118:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800511c:	00d0      	lsls	r0, r2, #3
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	1912      	adds	r2, r2, r4
 8005124:	eb45 0303 	adc.w	r3, r5, r3
 8005128:	f04f 0000 	mov.w	r0, #0
 800512c:	f04f 0100 	mov.w	r1, #0
 8005130:	0299      	lsls	r1, r3, #10
 8005132:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005136:	0290      	lsls	r0, r2, #10
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4610      	mov	r0, r2
 800513e:	4619      	mov	r1, r3
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	461a      	mov	r2, r3
 8005144:	f04f 0300 	mov.w	r3, #0
 8005148:	f7fb fdae 	bl	8000ca8 <__aeabi_uldivmod>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4613      	mov	r3, r2
 8005152:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005154:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <HAL_RCC_GetSysClockFreq+0x358>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	0f1b      	lsrs	r3, r3, #28
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	fbb2 f3f3 	udiv	r3, r2, r3
 8005168:	61bb      	str	r3, [r7, #24]
      break;
 800516a:	e002      	b.n	8005172 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800516c:	4b05      	ldr	r3, [pc, #20]	; (8005184 <HAL_RCC_GetSysClockFreq+0x35c>)
 800516e:	61bb      	str	r3, [r7, #24]
      break;
 8005170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005172:	69bb      	ldr	r3, [r7, #24]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800517e:	bf00      	nop
 8005180:	40023800 	.word	0x40023800
 8005184:	00f42400 	.word	0x00f42400
 8005188:	007a1200 	.word	0x007a1200

0800518c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e28d      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8083 	beq.w	80052b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051ac:	4b94      	ldr	r3, [pc, #592]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 030c 	and.w	r3, r3, #12
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d019      	beq.n	80051ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051b8:	4b91      	ldr	r3, [pc, #580]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d106      	bne.n	80051d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051c4:	4b8e      	ldr	r3, [pc, #568]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051d0:	d00c      	beq.n	80051ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051d2:	4b8b      	ldr	r3, [pc, #556]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d112      	bne.n	8005204 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051de:	4b88      	ldr	r3, [pc, #544]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ea:	d10b      	bne.n	8005204 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ec:	4b84      	ldr	r3, [pc, #528]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d05b      	beq.n	80052b0 <HAL_RCC_OscConfig+0x124>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d157      	bne.n	80052b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e25a      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520c:	d106      	bne.n	800521c <HAL_RCC_OscConfig+0x90>
 800520e:	4b7c      	ldr	r3, [pc, #496]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7b      	ldr	r2, [pc, #492]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e01d      	b.n	8005258 <HAL_RCC_OscConfig+0xcc>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0xb4>
 8005226:	4b76      	ldr	r3, [pc, #472]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a75      	ldr	r2, [pc, #468]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800522c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b73      	ldr	r3, [pc, #460]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a72      	ldr	r2, [pc, #456]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0xcc>
 8005240:	4b6f      	ldr	r3, [pc, #444]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a6e      	ldr	r2, [pc, #440]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4b6c      	ldr	r3, [pc, #432]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a6b      	ldr	r2, [pc, #428]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d013      	beq.n	8005288 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7ff f812 	bl	8004288 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005268:	f7ff f80e 	bl	8004288 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b64      	cmp	r3, #100	; 0x64
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e21f      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800527a:	4b61      	ldr	r3, [pc, #388]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0xdc>
 8005286:	e014      	b.n	80052b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005288:	f7fe fffe 	bl	8004288 <HAL_GetTick>
 800528c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005290:	f7fe fffa 	bl	8004288 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e20b      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052a2:	4b57      	ldr	r3, [pc, #348]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x104>
 80052ae:	e000      	b.n	80052b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d06f      	beq.n	800539e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052be:	4b50      	ldr	r3, [pc, #320]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 030c 	and.w	r3, r3, #12
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d017      	beq.n	80052fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052ca:	4b4d      	ldr	r3, [pc, #308]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d105      	bne.n	80052e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052d6:	4b4a      	ldr	r3, [pc, #296]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052e2:	4b47      	ldr	r3, [pc, #284]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052ea:	2b0c      	cmp	r3, #12
 80052ec:	d11c      	bne.n	8005328 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052ee:	4b44      	ldr	r3, [pc, #272]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d116      	bne.n	8005328 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052fa:	4b41      	ldr	r3, [pc, #260]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0302 	and.w	r3, r3, #2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d005      	beq.n	8005312 <HAL_RCC_OscConfig+0x186>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d001      	beq.n	8005312 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e1d3      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005312:	4b3b      	ldr	r3, [pc, #236]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4937      	ldr	r1, [pc, #220]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005322:	4313      	orrs	r3, r2
 8005324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005326:	e03a      	b.n	800539e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d020      	beq.n	8005372 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005330:	4b34      	ldr	r3, [pc, #208]	; (8005404 <HAL_RCC_OscConfig+0x278>)
 8005332:	2201      	movs	r2, #1
 8005334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005336:	f7fe ffa7 	bl	8004288 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800533e:	f7fe ffa3 	bl	8004288 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e1b4      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005350:	4b2b      	ldr	r3, [pc, #172]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800535c:	4b28      	ldr	r3, [pc, #160]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4925      	ldr	r1, [pc, #148]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 800536c:	4313      	orrs	r3, r2
 800536e:	600b      	str	r3, [r1, #0]
 8005370:	e015      	b.n	800539e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005372:	4b24      	ldr	r3, [pc, #144]	; (8005404 <HAL_RCC_OscConfig+0x278>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fe ff86 	bl	8004288 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005380:	f7fe ff82 	bl	8004288 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e193      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005392:	4b1b      	ldr	r3, [pc, #108]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d036      	beq.n	8005418 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d016      	beq.n	80053e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053b2:	4b15      	ldr	r3, [pc, #84]	; (8005408 <HAL_RCC_OscConfig+0x27c>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fe ff66 	bl	8004288 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053c0:	f7fe ff62 	bl	8004288 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e173      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <HAL_RCC_OscConfig+0x274>)
 80053d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0f0      	beq.n	80053c0 <HAL_RCC_OscConfig+0x234>
 80053de:	e01b      	b.n	8005418 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e0:	4b09      	ldr	r3, [pc, #36]	; (8005408 <HAL_RCC_OscConfig+0x27c>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e6:	f7fe ff4f 	bl	8004288 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053ec:	e00e      	b.n	800540c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ee:	f7fe ff4b 	bl	8004288 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d907      	bls.n	800540c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e15c      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
 8005400:	40023800 	.word	0x40023800
 8005404:	42470000 	.word	0x42470000
 8005408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800540c:	4b8a      	ldr	r3, [pc, #552]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800540e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ea      	bne.n	80053ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8097 	beq.w	8005554 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005426:	2300      	movs	r3, #0
 8005428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800542a:	4b83      	ldr	r3, [pc, #524]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10f      	bne.n	8005456 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	4b7f      	ldr	r3, [pc, #508]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	4a7e      	ldr	r2, [pc, #504]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005444:	6413      	str	r3, [r2, #64]	; 0x40
 8005446:	4b7c      	ldr	r3, [pc, #496]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005452:	2301      	movs	r3, #1
 8005454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005456:	4b79      	ldr	r3, [pc, #484]	; (800563c <HAL_RCC_OscConfig+0x4b0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d118      	bne.n	8005494 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005462:	4b76      	ldr	r3, [pc, #472]	; (800563c <HAL_RCC_OscConfig+0x4b0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a75      	ldr	r2, [pc, #468]	; (800563c <HAL_RCC_OscConfig+0x4b0>)
 8005468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800546c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800546e:	f7fe ff0b 	bl	8004288 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005474:	e008      	b.n	8005488 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005476:	f7fe ff07 	bl	8004288 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e118      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005488:	4b6c      	ldr	r3, [pc, #432]	; (800563c <HAL_RCC_OscConfig+0x4b0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0f0      	beq.n	8005476 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d106      	bne.n	80054aa <HAL_RCC_OscConfig+0x31e>
 800549c:	4b66      	ldr	r3, [pc, #408]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a0:	4a65      	ldr	r2, [pc, #404]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	6713      	str	r3, [r2, #112]	; 0x70
 80054a8:	e01c      	b.n	80054e4 <HAL_RCC_OscConfig+0x358>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b05      	cmp	r3, #5
 80054b0:	d10c      	bne.n	80054cc <HAL_RCC_OscConfig+0x340>
 80054b2:	4b61      	ldr	r3, [pc, #388]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b6:	4a60      	ldr	r2, [pc, #384]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054b8:	f043 0304 	orr.w	r3, r3, #4
 80054bc:	6713      	str	r3, [r2, #112]	; 0x70
 80054be:	4b5e      	ldr	r3, [pc, #376]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	4a5d      	ldr	r2, [pc, #372]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6713      	str	r3, [r2, #112]	; 0x70
 80054ca:	e00b      	b.n	80054e4 <HAL_RCC_OscConfig+0x358>
 80054cc:	4b5a      	ldr	r3, [pc, #360]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d0:	4a59      	ldr	r2, [pc, #356]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054d2:	f023 0301 	bic.w	r3, r3, #1
 80054d6:	6713      	str	r3, [r2, #112]	; 0x70
 80054d8:	4b57      	ldr	r3, [pc, #348]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	4a56      	ldr	r2, [pc, #344]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80054de:	f023 0304 	bic.w	r3, r3, #4
 80054e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d015      	beq.n	8005518 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ec:	f7fe fecc 	bl	8004288 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054f2:	e00a      	b.n	800550a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054f4:	f7fe fec8 	bl	8004288 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005502:	4293      	cmp	r3, r2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e0d7      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550a:	4b4b      	ldr	r3, [pc, #300]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0ee      	beq.n	80054f4 <HAL_RCC_OscConfig+0x368>
 8005516:	e014      	b.n	8005542 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fe feb6 	bl	8004288 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005520:	f7fe feb2 	bl	8004288 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	; 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e0c1      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005536:	4b40      	ldr	r3, [pc, #256]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1ee      	bne.n	8005520 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d105      	bne.n	8005554 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005548:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	4a3a      	ldr	r2, [pc, #232]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 800554e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80ad 	beq.w	80056b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800555e:	4b36      	ldr	r3, [pc, #216]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f003 030c 	and.w	r3, r3, #12
 8005566:	2b08      	cmp	r3, #8
 8005568:	d060      	beq.n	800562c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d145      	bne.n	80055fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005572:	4b33      	ldr	r3, [pc, #204]	; (8005640 <HAL_RCC_OscConfig+0x4b4>)
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fe fe86 	bl	8004288 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005580:	f7fe fe82 	bl	8004288 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e093      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005592:	4b29      	ldr	r3, [pc, #164]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	69da      	ldr	r2, [r3, #28]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	019b      	lsls	r3, r3, #6
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	085b      	lsrs	r3, r3, #1
 80055b6:	3b01      	subs	r3, #1
 80055b8:	041b      	lsls	r3, r3, #16
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	061b      	lsls	r3, r3, #24
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	071b      	lsls	r3, r3, #28
 80055ca:	491b      	ldr	r1, [pc, #108]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d0:	4b1b      	ldr	r3, [pc, #108]	; (8005640 <HAL_RCC_OscConfig+0x4b4>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d6:	f7fe fe57 	bl	8004288 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055de:	f7fe fe53 	bl	8004288 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e064      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f0:	4b11      	ldr	r3, [pc, #68]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <HAL_RCC_OscConfig+0x452>
 80055fc:	e05c      	b.n	80056b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <HAL_RCC_OscConfig+0x4b4>)
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fe fe40 	bl	8004288 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800560c:	f7fe fe3c 	bl	8004288 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e04d      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_RCC_OscConfig+0x4ac>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0x480>
 800562a:	e045      	b.n	80056b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d107      	bne.n	8005644 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e040      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
 8005638:	40023800 	.word	0x40023800
 800563c:	40007000 	.word	0x40007000
 8005640:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005644:	4b1f      	ldr	r3, [pc, #124]	; (80056c4 <HAL_RCC_OscConfig+0x538>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d030      	beq.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d129      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800566a:	429a      	cmp	r2, r3
 800566c:	d122      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005674:	4013      	ands	r3, r2
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800567a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800567c:	4293      	cmp	r3, r2
 800567e:	d119      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	3b01      	subs	r3, #1
 800568e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005690:	429a      	cmp	r2, r3
 8005692:	d10f      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d001      	beq.n	80056b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e000      	b.n	80056ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800

080056c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e041      	b.n	800575e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d106      	bne.n	80056f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f839 	bl	8005766 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3304      	adds	r3, #4
 8005704:	4619      	mov	r1, r3
 8005706:	4610      	mov	r0, r2
 8005708:	f000 f9d8 	bl	8005abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
	...

0800577c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	d001      	beq.n	8005794 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e04e      	b.n	8005832 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a23      	ldr	r2, [pc, #140]	; (8005840 <HAL_TIM_Base_Start_IT+0xc4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d022      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x80>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057be:	d01d      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x80>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1f      	ldr	r2, [pc, #124]	; (8005844 <HAL_TIM_Base_Start_IT+0xc8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d018      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x80>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1e      	ldr	r2, [pc, #120]	; (8005848 <HAL_TIM_Base_Start_IT+0xcc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d013      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x80>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1c      	ldr	r2, [pc, #112]	; (800584c <HAL_TIM_Base_Start_IT+0xd0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00e      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x80>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <HAL_TIM_Base_Start_IT+0xd4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d009      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x80>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a19      	ldr	r2, [pc, #100]	; (8005854 <HAL_TIM_Base_Start_IT+0xd8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <HAL_TIM_Base_Start_IT+0x80>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a18      	ldr	r2, [pc, #96]	; (8005858 <HAL_TIM_Base_Start_IT+0xdc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d111      	bne.n	8005820 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b06      	cmp	r3, #6
 800580c:	d010      	beq.n	8005830 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581e:	e007      	b.n	8005830 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40010000 	.word	0x40010000
 8005844:	40000400 	.word	0x40000400
 8005848:	40000800 	.word	0x40000800
 800584c:	40000c00 	.word	0x40000c00
 8005850:	40010400 	.word	0x40010400
 8005854:	40014000 	.word	0x40014000
 8005858:	40001800 	.word	0x40001800

0800585c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b02      	cmp	r3, #2
 8005870:	d122      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d11b      	bne.n	80058b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0202 	mvn.w	r2, #2
 8005888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f8ee 	bl	8005a80 <HAL_TIM_IC_CaptureCallback>
 80058a4:	e005      	b.n	80058b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f8e0 	bl	8005a6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f8f1 	bl	8005a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d122      	bne.n	800590c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b04      	cmp	r3, #4
 80058d2:	d11b      	bne.n	800590c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f06f 0204 	mvn.w	r2, #4
 80058dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2202      	movs	r2, #2
 80058e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f8c4 	bl	8005a80 <HAL_TIM_IC_CaptureCallback>
 80058f8:	e005      	b.n	8005906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8b6 	bl	8005a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f8c7 	bl	8005a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b08      	cmp	r3, #8
 8005918:	d122      	bne.n	8005960 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b08      	cmp	r3, #8
 8005926:	d11b      	bne.n	8005960 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0208 	mvn.w	r2, #8
 8005930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2204      	movs	r2, #4
 8005936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f89a 	bl	8005a80 <HAL_TIM_IC_CaptureCallback>
 800594c:	e005      	b.n	800595a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f88c 	bl	8005a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f89d 	bl	8005a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b10      	cmp	r3, #16
 800596c:	d122      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b10      	cmp	r3, #16
 800597a:	d11b      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0210 	mvn.w	r2, #16
 8005984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2208      	movs	r2, #8
 800598a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f870 	bl	8005a80 <HAL_TIM_IC_CaptureCallback>
 80059a0:	e005      	b.n	80059ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f862 	bl	8005a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f873 	bl	8005a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d10e      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d107      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0201 	mvn.w	r2, #1
 80059d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fb fc1c 	bl	8001218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d10e      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f8:	2b80      	cmp	r3, #128	; 0x80
 80059fa:	d107      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f902 	bl	8005c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d10e      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d107      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f838 	bl	8005aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d10e      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d107      	bne.n	8005a64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0220 	mvn.w	r2, #32
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f8cc 	bl	8005bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a40      	ldr	r2, [pc, #256]	; (8005bd0 <TIM_Base_SetConfig+0x114>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d013      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ada:	d00f      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a3d      	ldr	r2, [pc, #244]	; (8005bd4 <TIM_Base_SetConfig+0x118>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00b      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a3c      	ldr	r2, [pc, #240]	; (8005bd8 <TIM_Base_SetConfig+0x11c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d007      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a3b      	ldr	r2, [pc, #236]	; (8005bdc <TIM_Base_SetConfig+0x120>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d003      	beq.n	8005afc <TIM_Base_SetConfig+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a3a      	ldr	r2, [pc, #232]	; (8005be0 <TIM_Base_SetConfig+0x124>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d108      	bne.n	8005b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a2f      	ldr	r2, [pc, #188]	; (8005bd0 <TIM_Base_SetConfig+0x114>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d02b      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1c:	d027      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a2c      	ldr	r2, [pc, #176]	; (8005bd4 <TIM_Base_SetConfig+0x118>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d023      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a2b      	ldr	r2, [pc, #172]	; (8005bd8 <TIM_Base_SetConfig+0x11c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01f      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2a      	ldr	r2, [pc, #168]	; (8005bdc <TIM_Base_SetConfig+0x120>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d01b      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a29      	ldr	r2, [pc, #164]	; (8005be0 <TIM_Base_SetConfig+0x124>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d017      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a28      	ldr	r2, [pc, #160]	; (8005be4 <TIM_Base_SetConfig+0x128>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a27      	ldr	r2, [pc, #156]	; (8005be8 <TIM_Base_SetConfig+0x12c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00f      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a26      	ldr	r2, [pc, #152]	; (8005bec <TIM_Base_SetConfig+0x130>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a25      	ldr	r2, [pc, #148]	; (8005bf0 <TIM_Base_SetConfig+0x134>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d007      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a24      	ldr	r2, [pc, #144]	; (8005bf4 <TIM_Base_SetConfig+0x138>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a23      	ldr	r2, [pc, #140]	; (8005bf8 <TIM_Base_SetConfig+0x13c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d108      	bne.n	8005b80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	; (8005bd0 <TIM_Base_SetConfig+0x114>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_Base_SetConfig+0xf8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a0c      	ldr	r2, [pc, #48]	; (8005be0 <TIM_Base_SetConfig+0x124>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d103      	bne.n	8005bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	615a      	str	r2, [r3, #20]
}
 8005bc2:	bf00      	nop
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40000400 	.word	0x40000400
 8005bd8:	40000800 	.word	0x40000800
 8005bdc:	40000c00 	.word	0x40000c00
 8005be0:	40010400 	.word	0x40010400
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40014400 	.word	0x40014400
 8005bec:	40014800 	.word	0x40014800
 8005bf0:	40001800 	.word	0x40001800
 8005bf4:	40001c00 	.word	0x40001c00
 8005bf8:	40002000 	.word	0x40002000

08005bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e03f      	b.n	8005cb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fb fb6c 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2224      	movs	r2, #36	; 0x24
 8005c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f929 	bl	8005ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695a      	ldr	r2, [r3, #20]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b08a      	sub	sp, #40	; 0x28
 8005cc2:	af02      	add	r7, sp, #8
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d17c      	bne.n	8005dd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_UART_Transmit+0x2c>
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e075      	b.n	8005dda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_UART_Transmit+0x3e>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e06e      	b.n	8005dda <HAL_UART_Transmit+0x11c>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2221      	movs	r2, #33	; 0x21
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d12:	f7fe fab9 	bl	8004288 <HAL_GetTick>
 8005d16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	88fa      	ldrh	r2, [r7, #6]
 8005d22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2c:	d108      	bne.n	8005d40 <HAL_UART_Transmit+0x82>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d104      	bne.n	8005d40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	e003      	b.n	8005d48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d44:	2300      	movs	r3, #0
 8005d46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d50:	e02a      	b.n	8005da8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2180      	movs	r1, #128	; 0x80
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 f840 	bl	8005de2 <UART_WaitOnFlagUntilTimeout>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e036      	b.n	8005dda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10b      	bne.n	8005d8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	3302      	adds	r3, #2
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	e007      	b.n	8005d9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	3301      	adds	r3, #1
 8005d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1cf      	bne.n	8005d52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2200      	movs	r2, #0
 8005dba:	2140      	movs	r1, #64	; 0x40
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 f810 	bl	8005de2 <UART_WaitOnFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e006      	b.n	8005dda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e000      	b.n	8005dda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005dd8:	2302      	movs	r3, #2
  }
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b090      	sub	sp, #64	; 0x40
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	603b      	str	r3, [r7, #0]
 8005dee:	4613      	mov	r3, r2
 8005df0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005df2:	e050      	b.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d04c      	beq.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e02:	f7fe fa41 	bl	8004288 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d241      	bcs.n	8005e96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	330c      	adds	r3, #12
 8005e18:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	e853 3f00 	ldrex	r3, [r3]
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	330c      	adds	r3, #12
 8005e30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e32:	637a      	str	r2, [r7, #52]	; 0x34
 8005e34:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e3a:	e841 2300 	strex	r3, r2, [r1]
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1e5      	bne.n	8005e12 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	613b      	str	r3, [r7, #16]
   return(result);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f023 0301 	bic.w	r3, r3, #1
 8005e5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3314      	adds	r3, #20
 8005e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e66:	623a      	str	r2, [r7, #32]
 8005e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6a:	69f9      	ldr	r1, [r7, #28]
 8005e6c:	6a3a      	ldr	r2, [r7, #32]
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e5      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e92:	2303      	movs	r3, #3
 8005e94:	e00f      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d09f      	beq.n	8005df4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3740      	adds	r7, #64	; 0x40
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	b09f      	sub	sp, #124	; 0x7c
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed6:	68d9      	ldr	r1, [r3, #12]
 8005ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	ea40 0301 	orr.w	r3, r0, r1
 8005ee0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f04:	f021 010c 	bic.w	r1, r1, #12
 8005f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f1e:	6999      	ldr	r1, [r3, #24]
 8005f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	ea40 0301 	orr.w	r3, r0, r1
 8005f28:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4bc5      	ldr	r3, [pc, #788]	; (8006244 <UART_SetConfig+0x384>)
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d004      	beq.n	8005f3e <UART_SetConfig+0x7e>
 8005f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4bc3      	ldr	r3, [pc, #780]	; (8006248 <UART_SetConfig+0x388>)
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d103      	bne.n	8005f46 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f3e:	f7fe ff2d 	bl	8004d9c <HAL_RCC_GetPCLK2Freq>
 8005f42:	6778      	str	r0, [r7, #116]	; 0x74
 8005f44:	e002      	b.n	8005f4c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f46:	f7fe ff15 	bl	8004d74 <HAL_RCC_GetPCLK1Freq>
 8005f4a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f54:	f040 80b6 	bne.w	80060c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f5a:	461c      	mov	r4, r3
 8005f5c:	f04f 0500 	mov.w	r5, #0
 8005f60:	4622      	mov	r2, r4
 8005f62:	462b      	mov	r3, r5
 8005f64:	1891      	adds	r1, r2, r2
 8005f66:	6439      	str	r1, [r7, #64]	; 0x40
 8005f68:	415b      	adcs	r3, r3
 8005f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f6c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f70:	1912      	adds	r2, r2, r4
 8005f72:	eb45 0303 	adc.w	r3, r5, r3
 8005f76:	f04f 0000 	mov.w	r0, #0
 8005f7a:	f04f 0100 	mov.w	r1, #0
 8005f7e:	00d9      	lsls	r1, r3, #3
 8005f80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f84:	00d0      	lsls	r0, r2, #3
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	1911      	adds	r1, r2, r4
 8005f8c:	6639      	str	r1, [r7, #96]	; 0x60
 8005f8e:	416b      	adcs	r3, r5
 8005f90:	667b      	str	r3, [r7, #100]	; 0x64
 8005f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f04f 0300 	mov.w	r3, #0
 8005f9c:	1891      	adds	r1, r2, r2
 8005f9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fa0:	415b      	adcs	r3, r3
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fa8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005fac:	f7fa fe7c 	bl	8000ca8 <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4ba5      	ldr	r3, [pc, #660]	; (800624c <UART_SetConfig+0x38c>)
 8005fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	011e      	lsls	r6, r3, #4
 8005fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc0:	461c      	mov	r4, r3
 8005fc2:	f04f 0500 	mov.w	r5, #0
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	462b      	mov	r3, r5
 8005fca:	1891      	adds	r1, r2, r2
 8005fcc:	6339      	str	r1, [r7, #48]	; 0x30
 8005fce:	415b      	adcs	r3, r3
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005fd6:	1912      	adds	r2, r2, r4
 8005fd8:	eb45 0303 	adc.w	r3, r5, r3
 8005fdc:	f04f 0000 	mov.w	r0, #0
 8005fe0:	f04f 0100 	mov.w	r1, #0
 8005fe4:	00d9      	lsls	r1, r3, #3
 8005fe6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fea:	00d0      	lsls	r0, r2, #3
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	1911      	adds	r1, r2, r4
 8005ff2:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ff4:	416b      	adcs	r3, r5
 8005ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f04f 0300 	mov.w	r3, #0
 8006002:	1891      	adds	r1, r2, r2
 8006004:	62b9      	str	r1, [r7, #40]	; 0x28
 8006006:	415b      	adcs	r3, r3
 8006008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800600a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800600e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006012:	f7fa fe49 	bl	8000ca8 <__aeabi_uldivmod>
 8006016:	4602      	mov	r2, r0
 8006018:	460b      	mov	r3, r1
 800601a:	4b8c      	ldr	r3, [pc, #560]	; (800624c <UART_SetConfig+0x38c>)
 800601c:	fba3 1302 	umull	r1, r3, r3, r2
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	2164      	movs	r1, #100	; 0x64
 8006024:	fb01 f303 	mul.w	r3, r1, r3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	00db      	lsls	r3, r3, #3
 800602c:	3332      	adds	r3, #50	; 0x32
 800602e:	4a87      	ldr	r2, [pc, #540]	; (800624c <UART_SetConfig+0x38c>)
 8006030:	fba2 2303 	umull	r2, r3, r2, r3
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800603c:	441e      	add	r6, r3
 800603e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006040:	4618      	mov	r0, r3
 8006042:	f04f 0100 	mov.w	r1, #0
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	1894      	adds	r4, r2, r2
 800604c:	623c      	str	r4, [r7, #32]
 800604e:	415b      	adcs	r3, r3
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
 8006052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006056:	1812      	adds	r2, r2, r0
 8006058:	eb41 0303 	adc.w	r3, r1, r3
 800605c:	f04f 0400 	mov.w	r4, #0
 8006060:	f04f 0500 	mov.w	r5, #0
 8006064:	00dd      	lsls	r5, r3, #3
 8006066:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800606a:	00d4      	lsls	r4, r2, #3
 800606c:	4622      	mov	r2, r4
 800606e:	462b      	mov	r3, r5
 8006070:	1814      	adds	r4, r2, r0
 8006072:	653c      	str	r4, [r7, #80]	; 0x50
 8006074:	414b      	adcs	r3, r1
 8006076:	657b      	str	r3, [r7, #84]	; 0x54
 8006078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	461a      	mov	r2, r3
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	1891      	adds	r1, r2, r2
 8006084:	61b9      	str	r1, [r7, #24]
 8006086:	415b      	adcs	r3, r3
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800608e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006092:	f7fa fe09 	bl	8000ca8 <__aeabi_uldivmod>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4b6c      	ldr	r3, [pc, #432]	; (800624c <UART_SetConfig+0x38c>)
 800609c:	fba3 1302 	umull	r1, r3, r3, r2
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	2164      	movs	r1, #100	; 0x64
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	3332      	adds	r3, #50	; 0x32
 80060ae:	4a67      	ldr	r2, [pc, #412]	; (800624c <UART_SetConfig+0x38c>)
 80060b0:	fba2 2303 	umull	r2, r3, r2, r3
 80060b4:	095b      	lsrs	r3, r3, #5
 80060b6:	f003 0207 	and.w	r2, r3, #7
 80060ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4432      	add	r2, r6
 80060c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060c2:	e0b9      	b.n	8006238 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060c6:	461c      	mov	r4, r3
 80060c8:	f04f 0500 	mov.w	r5, #0
 80060cc:	4622      	mov	r2, r4
 80060ce:	462b      	mov	r3, r5
 80060d0:	1891      	adds	r1, r2, r2
 80060d2:	6139      	str	r1, [r7, #16]
 80060d4:	415b      	adcs	r3, r3
 80060d6:	617b      	str	r3, [r7, #20]
 80060d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060dc:	1912      	adds	r2, r2, r4
 80060de:	eb45 0303 	adc.w	r3, r5, r3
 80060e2:	f04f 0000 	mov.w	r0, #0
 80060e6:	f04f 0100 	mov.w	r1, #0
 80060ea:	00d9      	lsls	r1, r3, #3
 80060ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060f0:	00d0      	lsls	r0, r2, #3
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	eb12 0804 	adds.w	r8, r2, r4
 80060fa:	eb43 0905 	adc.w	r9, r3, r5
 80060fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	4618      	mov	r0, r3
 8006104:	f04f 0100 	mov.w	r1, #0
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	008b      	lsls	r3, r1, #2
 8006112:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006116:	0082      	lsls	r2, r0, #2
 8006118:	4640      	mov	r0, r8
 800611a:	4649      	mov	r1, r9
 800611c:	f7fa fdc4 	bl	8000ca8 <__aeabi_uldivmod>
 8006120:	4602      	mov	r2, r0
 8006122:	460b      	mov	r3, r1
 8006124:	4b49      	ldr	r3, [pc, #292]	; (800624c <UART_SetConfig+0x38c>)
 8006126:	fba3 2302 	umull	r2, r3, r3, r2
 800612a:	095b      	lsrs	r3, r3, #5
 800612c:	011e      	lsls	r6, r3, #4
 800612e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006130:	4618      	mov	r0, r3
 8006132:	f04f 0100 	mov.w	r1, #0
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	1894      	adds	r4, r2, r2
 800613c:	60bc      	str	r4, [r7, #8]
 800613e:	415b      	adcs	r3, r3
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006146:	1812      	adds	r2, r2, r0
 8006148:	eb41 0303 	adc.w	r3, r1, r3
 800614c:	f04f 0400 	mov.w	r4, #0
 8006150:	f04f 0500 	mov.w	r5, #0
 8006154:	00dd      	lsls	r5, r3, #3
 8006156:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800615a:	00d4      	lsls	r4, r2, #3
 800615c:	4622      	mov	r2, r4
 800615e:	462b      	mov	r3, r5
 8006160:	1814      	adds	r4, r2, r0
 8006162:	64bc      	str	r4, [r7, #72]	; 0x48
 8006164:	414b      	adcs	r3, r1
 8006166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	4618      	mov	r0, r3
 800616e:	f04f 0100 	mov.w	r1, #0
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	f04f 0300 	mov.w	r3, #0
 800617a:	008b      	lsls	r3, r1, #2
 800617c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006180:	0082      	lsls	r2, r0, #2
 8006182:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006186:	f7fa fd8f 	bl	8000ca8 <__aeabi_uldivmod>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4b2f      	ldr	r3, [pc, #188]	; (800624c <UART_SetConfig+0x38c>)
 8006190:	fba3 1302 	umull	r1, r3, r3, r2
 8006194:	095b      	lsrs	r3, r3, #5
 8006196:	2164      	movs	r1, #100	; 0x64
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	3332      	adds	r3, #50	; 0x32
 80061a2:	4a2a      	ldr	r2, [pc, #168]	; (800624c <UART_SetConfig+0x38c>)
 80061a4:	fba2 2303 	umull	r2, r3, r2, r3
 80061a8:	095b      	lsrs	r3, r3, #5
 80061aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ae:	441e      	add	r6, r3
 80061b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061b2:	4618      	mov	r0, r3
 80061b4:	f04f 0100 	mov.w	r1, #0
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	1894      	adds	r4, r2, r2
 80061be:	603c      	str	r4, [r7, #0]
 80061c0:	415b      	adcs	r3, r3
 80061c2:	607b      	str	r3, [r7, #4]
 80061c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061c8:	1812      	adds	r2, r2, r0
 80061ca:	eb41 0303 	adc.w	r3, r1, r3
 80061ce:	f04f 0400 	mov.w	r4, #0
 80061d2:	f04f 0500 	mov.w	r5, #0
 80061d6:	00dd      	lsls	r5, r3, #3
 80061d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061dc:	00d4      	lsls	r4, r2, #3
 80061de:	4622      	mov	r2, r4
 80061e0:	462b      	mov	r3, r5
 80061e2:	eb12 0a00 	adds.w	sl, r2, r0
 80061e6:	eb43 0b01 	adc.w	fp, r3, r1
 80061ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f04f 0100 	mov.w	r1, #0
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	008b      	lsls	r3, r1, #2
 80061fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006202:	0082      	lsls	r2, r0, #2
 8006204:	4650      	mov	r0, sl
 8006206:	4659      	mov	r1, fp
 8006208:	f7fa fd4e 	bl	8000ca8 <__aeabi_uldivmod>
 800620c:	4602      	mov	r2, r0
 800620e:	460b      	mov	r3, r1
 8006210:	4b0e      	ldr	r3, [pc, #56]	; (800624c <UART_SetConfig+0x38c>)
 8006212:	fba3 1302 	umull	r1, r3, r3, r2
 8006216:	095b      	lsrs	r3, r3, #5
 8006218:	2164      	movs	r1, #100	; 0x64
 800621a:	fb01 f303 	mul.w	r3, r1, r3
 800621e:	1ad3      	subs	r3, r2, r3
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	3332      	adds	r3, #50	; 0x32
 8006224:	4a09      	ldr	r2, [pc, #36]	; (800624c <UART_SetConfig+0x38c>)
 8006226:	fba2 2303 	umull	r2, r3, r2, r3
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	f003 020f 	and.w	r2, r3, #15
 8006230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4432      	add	r2, r6
 8006236:	609a      	str	r2, [r3, #8]
}
 8006238:	bf00      	nop
 800623a:	377c      	adds	r7, #124	; 0x7c
 800623c:	46bd      	mov	sp, r7
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006242:	bf00      	nop
 8006244:	40011000 	.word	0x40011000
 8006248:	40011400 	.word	0x40011400
 800624c:	51eb851f 	.word	0x51eb851f

08006250 <_Znwj>:
 8006250:	2801      	cmp	r0, #1
 8006252:	bf38      	it	cc
 8006254:	2001      	movcc	r0, #1
 8006256:	b510      	push	{r4, lr}
 8006258:	4604      	mov	r4, r0
 800625a:	4620      	mov	r0, r4
 800625c:	f000 f978 	bl	8006550 <malloc>
 8006260:	b930      	cbnz	r0, 8006270 <_Znwj+0x20>
 8006262:	f000 f81b 	bl	800629c <_ZSt15get_new_handlerv>
 8006266:	b908      	cbnz	r0, 800626c <_Znwj+0x1c>
 8006268:	f000 f820 	bl	80062ac <abort>
 800626c:	4780      	blx	r0
 800626e:	e7f4      	b.n	800625a <_Znwj+0xa>
 8006270:	bd10      	pop	{r4, pc}

08006272 <__cxa_pure_virtual>:
 8006272:	b508      	push	{r3, lr}
 8006274:	f000 f80c 	bl	8006290 <_ZSt9terminatev>

08006278 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006278:	b508      	push	{r3, lr}
 800627a:	4780      	blx	r0
 800627c:	f000 f816 	bl	80062ac <abort>

08006280 <_ZSt13get_terminatev>:
 8006280:	4b02      	ldr	r3, [pc, #8]	; (800628c <_ZSt13get_terminatev+0xc>)
 8006282:	6818      	ldr	r0, [r3, #0]
 8006284:	f3bf 8f5b 	dmb	ish
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	20000010 	.word	0x20000010

08006290 <_ZSt9terminatev>:
 8006290:	b508      	push	{r3, lr}
 8006292:	f7ff fff5 	bl	8006280 <_ZSt13get_terminatev>
 8006296:	f7ff ffef 	bl	8006278 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800629c <_ZSt15get_new_handlerv>:
 800629c:	4b02      	ldr	r3, [pc, #8]	; (80062a8 <_ZSt15get_new_handlerv+0xc>)
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	f3bf 8f5b 	dmb	ish
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20000494 	.word	0x20000494

080062ac <abort>:
 80062ac:	b508      	push	{r3, lr}
 80062ae:	2006      	movs	r0, #6
 80062b0:	f001 f958 	bl	8007564 <raise>
 80062b4:	2001      	movs	r0, #1
 80062b6:	f7fb f927 	bl	8001508 <_exit>

080062ba <atoi>:
 80062ba:	220a      	movs	r2, #10
 80062bc:	2100      	movs	r1, #0
 80062be:	f001 ba2d 	b.w	800771c <strtol>
	...

080062c4 <__errno>:
 80062c4:	4b01      	ldr	r3, [pc, #4]	; (80062cc <__errno+0x8>)
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	20000014 	.word	0x20000014

080062d0 <__libc_init_array>:
 80062d0:	b570      	push	{r4, r5, r6, lr}
 80062d2:	4d0d      	ldr	r5, [pc, #52]	; (8006308 <__libc_init_array+0x38>)
 80062d4:	4c0d      	ldr	r4, [pc, #52]	; (800630c <__libc_init_array+0x3c>)
 80062d6:	1b64      	subs	r4, r4, r5
 80062d8:	10a4      	asrs	r4, r4, #2
 80062da:	2600      	movs	r6, #0
 80062dc:	42a6      	cmp	r6, r4
 80062de:	d109      	bne.n	80062f4 <__libc_init_array+0x24>
 80062e0:	4d0b      	ldr	r5, [pc, #44]	; (8006310 <__libc_init_array+0x40>)
 80062e2:	4c0c      	ldr	r4, [pc, #48]	; (8006314 <__libc_init_array+0x44>)
 80062e4:	f004 fa8e 	bl	800a804 <_init>
 80062e8:	1b64      	subs	r4, r4, r5
 80062ea:	10a4      	asrs	r4, r4, #2
 80062ec:	2600      	movs	r6, #0
 80062ee:	42a6      	cmp	r6, r4
 80062f0:	d105      	bne.n	80062fe <__libc_init_array+0x2e>
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f8:	4798      	blx	r3
 80062fa:	3601      	adds	r6, #1
 80062fc:	e7ee      	b.n	80062dc <__libc_init_array+0xc>
 80062fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006302:	4798      	blx	r3
 8006304:	3601      	adds	r6, #1
 8006306:	e7f2      	b.n	80062ee <__libc_init_array+0x1e>
 8006308:	0800b9c4 	.word	0x0800b9c4
 800630c:	0800b9c4 	.word	0x0800b9c4
 8006310:	0800b9c4 	.word	0x0800b9c4
 8006314:	0800b9cc 	.word	0x0800b9cc

08006318 <isxdigit>:
 8006318:	4b02      	ldr	r3, [pc, #8]	; (8006324 <isxdigit+0xc>)
 800631a:	4418      	add	r0, r3
 800631c:	7840      	ldrb	r0, [r0, #1]
 800631e:	f000 0044 	and.w	r0, r0, #68	; 0x44
 8006322:	4770      	bx	lr
 8006324:	0800b646 	.word	0x0800b646

08006328 <localtime>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <localtime+0x30>)
 800632c:	681d      	ldr	r5, [r3, #0]
 800632e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8006330:	4604      	mov	r4, r0
 8006332:	b953      	cbnz	r3, 800634a <localtime+0x22>
 8006334:	2024      	movs	r0, #36	; 0x24
 8006336:	f000 f90b 	bl	8006550 <malloc>
 800633a:	4602      	mov	r2, r0
 800633c:	63e8      	str	r0, [r5, #60]	; 0x3c
 800633e:	b920      	cbnz	r0, 800634a <localtime+0x22>
 8006340:	4b06      	ldr	r3, [pc, #24]	; (800635c <localtime+0x34>)
 8006342:	4807      	ldr	r0, [pc, #28]	; (8006360 <localtime+0x38>)
 8006344:	2132      	movs	r1, #50	; 0x32
 8006346:	f001 fcb1 	bl	8007cac <__assert_func>
 800634a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800634c:	4620      	mov	r0, r4
 800634e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006352:	f000 b807 	b.w	8006364 <localtime_r>
 8006356:	bf00      	nop
 8006358:	20000014 	.word	0x20000014
 800635c:	0800b464 	.word	0x0800b464
 8006360:	0800b47b 	.word	0x0800b47b

08006364 <localtime_r>:
 8006364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006368:	4607      	mov	r7, r0
 800636a:	9101      	str	r1, [sp, #4]
 800636c:	f002 fb9c 	bl	8008aa8 <__gettzinfo>
 8006370:	9901      	ldr	r1, [sp, #4]
 8006372:	4680      	mov	r8, r0
 8006374:	4638      	mov	r0, r7
 8006376:	f002 fb9b 	bl	8008ab0 <gmtime_r>
 800637a:	6943      	ldr	r3, [r0, #20]
 800637c:	079a      	lsls	r2, r3, #30
 800637e:	4604      	mov	r4, r0
 8006380:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8006384:	d105      	bne.n	8006392 <localtime_r+0x2e>
 8006386:	2264      	movs	r2, #100	; 0x64
 8006388:	fb96 f3f2 	sdiv	r3, r6, r2
 800638c:	fb02 6313 	mls	r3, r2, r3, r6
 8006390:	bb7b      	cbnz	r3, 80063f2 <localtime_r+0x8e>
 8006392:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8006396:	fb96 f5f3 	sdiv	r5, r6, r3
 800639a:	fb03 6515 	mls	r5, r3, r5, r6
 800639e:	fab5 f585 	clz	r5, r5
 80063a2:	096d      	lsrs	r5, r5, #5
 80063a4:	4b68      	ldr	r3, [pc, #416]	; (8006548 <localtime_r+0x1e4>)
 80063a6:	2230      	movs	r2, #48	; 0x30
 80063a8:	fb02 3505 	mla	r5, r2, r5, r3
 80063ac:	f001 faf0 	bl	8007990 <__tz_lock>
 80063b0:	f001 fafa 	bl	80079a8 <_tzset_unlocked>
 80063b4:	4b65      	ldr	r3, [pc, #404]	; (800654c <localtime_r+0x1e8>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	b353      	cbz	r3, 8006410 <localtime_r+0xac>
 80063ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80063be:	42b3      	cmp	r3, r6
 80063c0:	d119      	bne.n	80063f6 <localtime_r+0x92>
 80063c2:	f8d8 1000 	ldr.w	r1, [r8]
 80063c6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80063ca:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80063ce:	b9d1      	cbnz	r1, 8006406 <localtime_r+0xa2>
 80063d0:	4296      	cmp	r6, r2
 80063d2:	eb77 0303 	sbcs.w	r3, r7, r3
 80063d6:	da23      	bge.n	8006420 <localtime_r+0xbc>
 80063d8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80063dc:	4296      	cmp	r6, r2
 80063de:	eb77 0303 	sbcs.w	r3, r7, r3
 80063e2:	bfb4      	ite	lt
 80063e4:	2301      	movlt	r3, #1
 80063e6:	2300      	movge	r3, #0
 80063e8:	6223      	str	r3, [r4, #32]
 80063ea:	db1b      	blt.n	8006424 <localtime_r+0xc0>
 80063ec:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80063f0:	e01a      	b.n	8006428 <localtime_r+0xc4>
 80063f2:	2501      	movs	r5, #1
 80063f4:	e7d6      	b.n	80063a4 <localtime_r+0x40>
 80063f6:	4630      	mov	r0, r6
 80063f8:	f001 fa22 	bl	8007840 <__tzcalc_limits>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d1e0      	bne.n	80063c2 <localtime_r+0x5e>
 8006400:	f04f 33ff 	mov.w	r3, #4294967295
 8006404:	e004      	b.n	8006410 <localtime_r+0xac>
 8006406:	4296      	cmp	r6, r2
 8006408:	eb77 0303 	sbcs.w	r3, r7, r3
 800640c:	da02      	bge.n	8006414 <localtime_r+0xb0>
 800640e:	2300      	movs	r3, #0
 8006410:	6223      	str	r3, [r4, #32]
 8006412:	e7eb      	b.n	80063ec <localtime_r+0x88>
 8006414:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8006418:	4296      	cmp	r6, r2
 800641a:	eb77 0303 	sbcs.w	r3, r7, r3
 800641e:	daf6      	bge.n	800640e <localtime_r+0xaa>
 8006420:	2301      	movs	r3, #1
 8006422:	6223      	str	r3, [r4, #32]
 8006424:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8006428:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800642c:	203c      	movs	r0, #60	; 0x3c
 800642e:	fb91 f6f3 	sdiv	r6, r1, r3
 8006432:	fb03 1316 	mls	r3, r3, r6, r1
 8006436:	6861      	ldr	r1, [r4, #4]
 8006438:	fb93 f2f0 	sdiv	r2, r3, r0
 800643c:	fb00 3012 	mls	r0, r0, r2, r3
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	1a89      	subs	r1, r1, r2
 8006444:	68a2      	ldr	r2, [r4, #8]
 8006446:	6061      	str	r1, [r4, #4]
 8006448:	1a1b      	subs	r3, r3, r0
 800644a:	1b92      	subs	r2, r2, r6
 800644c:	2b3b      	cmp	r3, #59	; 0x3b
 800644e:	6023      	str	r3, [r4, #0]
 8006450:	60a2      	str	r2, [r4, #8]
 8006452:	dd35      	ble.n	80064c0 <localtime_r+0x15c>
 8006454:	3101      	adds	r1, #1
 8006456:	6061      	str	r1, [r4, #4]
 8006458:	3b3c      	subs	r3, #60	; 0x3c
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	6863      	ldr	r3, [r4, #4]
 800645e:	2b3b      	cmp	r3, #59	; 0x3b
 8006460:	dd34      	ble.n	80064cc <localtime_r+0x168>
 8006462:	3201      	adds	r2, #1
 8006464:	60a2      	str	r2, [r4, #8]
 8006466:	3b3c      	subs	r3, #60	; 0x3c
 8006468:	6063      	str	r3, [r4, #4]
 800646a:	68a3      	ldr	r3, [r4, #8]
 800646c:	2b17      	cmp	r3, #23
 800646e:	dd33      	ble.n	80064d8 <localtime_r+0x174>
 8006470:	69e2      	ldr	r2, [r4, #28]
 8006472:	3201      	adds	r2, #1
 8006474:	61e2      	str	r2, [r4, #28]
 8006476:	69a2      	ldr	r2, [r4, #24]
 8006478:	3201      	adds	r2, #1
 800647a:	2a06      	cmp	r2, #6
 800647c:	bfc8      	it	gt
 800647e:	2200      	movgt	r2, #0
 8006480:	61a2      	str	r2, [r4, #24]
 8006482:	68e2      	ldr	r2, [r4, #12]
 8006484:	3b18      	subs	r3, #24
 8006486:	3201      	adds	r2, #1
 8006488:	60a3      	str	r3, [r4, #8]
 800648a:	6923      	ldr	r3, [r4, #16]
 800648c:	60e2      	str	r2, [r4, #12]
 800648e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8006492:	428a      	cmp	r2, r1
 8006494:	dd0e      	ble.n	80064b4 <localtime_r+0x150>
 8006496:	2b0b      	cmp	r3, #11
 8006498:	eba2 0201 	sub.w	r2, r2, r1
 800649c:	60e2      	str	r2, [r4, #12]
 800649e:	f103 0201 	add.w	r2, r3, #1
 80064a2:	bf09      	itett	eq
 80064a4:	6963      	ldreq	r3, [r4, #20]
 80064a6:	6122      	strne	r2, [r4, #16]
 80064a8:	2200      	moveq	r2, #0
 80064aa:	3301      	addeq	r3, #1
 80064ac:	bf02      	ittt	eq
 80064ae:	6122      	streq	r2, [r4, #16]
 80064b0:	6163      	streq	r3, [r4, #20]
 80064b2:	61e2      	streq	r2, [r4, #28]
 80064b4:	f001 fa72 	bl	800799c <__tz_unlock>
 80064b8:	4620      	mov	r0, r4
 80064ba:	b002      	add	sp, #8
 80064bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	dacb      	bge.n	800645c <localtime_r+0xf8>
 80064c4:	3901      	subs	r1, #1
 80064c6:	6061      	str	r1, [r4, #4]
 80064c8:	333c      	adds	r3, #60	; 0x3c
 80064ca:	e7c6      	b.n	800645a <localtime_r+0xf6>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dacc      	bge.n	800646a <localtime_r+0x106>
 80064d0:	3a01      	subs	r2, #1
 80064d2:	60a2      	str	r2, [r4, #8]
 80064d4:	333c      	adds	r3, #60	; 0x3c
 80064d6:	e7c7      	b.n	8006468 <localtime_r+0x104>
 80064d8:	2b00      	cmp	r3, #0
 80064da:	daeb      	bge.n	80064b4 <localtime_r+0x150>
 80064dc:	69e2      	ldr	r2, [r4, #28]
 80064de:	3a01      	subs	r2, #1
 80064e0:	61e2      	str	r2, [r4, #28]
 80064e2:	69a2      	ldr	r2, [r4, #24]
 80064e4:	3a01      	subs	r2, #1
 80064e6:	bf48      	it	mi
 80064e8:	2206      	movmi	r2, #6
 80064ea:	61a2      	str	r2, [r4, #24]
 80064ec:	68e2      	ldr	r2, [r4, #12]
 80064ee:	3318      	adds	r3, #24
 80064f0:	3a01      	subs	r2, #1
 80064f2:	60e2      	str	r2, [r4, #12]
 80064f4:	60a3      	str	r3, [r4, #8]
 80064f6:	2a00      	cmp	r2, #0
 80064f8:	d1dc      	bne.n	80064b4 <localtime_r+0x150>
 80064fa:	6923      	ldr	r3, [r4, #16]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	d405      	bmi.n	800650c <localtime_r+0x1a8>
 8006500:	6123      	str	r3, [r4, #16]
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006508:	60e3      	str	r3, [r4, #12]
 800650a:	e7d3      	b.n	80064b4 <localtime_r+0x150>
 800650c:	230b      	movs	r3, #11
 800650e:	6123      	str	r3, [r4, #16]
 8006510:	6963      	ldr	r3, [r4, #20]
 8006512:	1e5a      	subs	r2, r3, #1
 8006514:	6162      	str	r2, [r4, #20]
 8006516:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 800651a:	0793      	lsls	r3, r2, #30
 800651c:	d105      	bne.n	800652a <localtime_r+0x1c6>
 800651e:	2164      	movs	r1, #100	; 0x64
 8006520:	fb92 f3f1 	sdiv	r3, r2, r1
 8006524:	fb01 2313 	mls	r3, r1, r3, r2
 8006528:	b963      	cbnz	r3, 8006544 <localtime_r+0x1e0>
 800652a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800652e:	fb92 f3f1 	sdiv	r3, r2, r1
 8006532:	fb01 2313 	mls	r3, r1, r3, r2
 8006536:	fab3 f383 	clz	r3, r3
 800653a:	095b      	lsrs	r3, r3, #5
 800653c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006540:	61e3      	str	r3, [r4, #28]
 8006542:	e7de      	b.n	8006502 <localtime_r+0x19e>
 8006544:	2301      	movs	r3, #1
 8006546:	e7f9      	b.n	800653c <localtime_r+0x1d8>
 8006548:	0800b53c 	.word	0x0800b53c
 800654c:	200004bc 	.word	0x200004bc

08006550 <malloc>:
 8006550:	4b02      	ldr	r3, [pc, #8]	; (800655c <malloc+0xc>)
 8006552:	4601      	mov	r1, r0
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	f000 bb09 	b.w	8006b6c <_malloc_r>
 800655a:	bf00      	nop
 800655c:	20000014 	.word	0x20000014

08006560 <free>:
 8006560:	4b02      	ldr	r3, [pc, #8]	; (800656c <free+0xc>)
 8006562:	4601      	mov	r1, r0
 8006564:	6818      	ldr	r0, [r3, #0]
 8006566:	f000 bab1 	b.w	8006acc <_free_r>
 800656a:	bf00      	nop
 800656c:	20000014 	.word	0x20000014

08006570 <memcpy>:
 8006570:	440a      	add	r2, r1
 8006572:	4291      	cmp	r1, r2
 8006574:	f100 33ff 	add.w	r3, r0, #4294967295
 8006578:	d100      	bne.n	800657c <memcpy+0xc>
 800657a:	4770      	bx	lr
 800657c:	b510      	push	{r4, lr}
 800657e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006582:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006586:	4291      	cmp	r1, r2
 8006588:	d1f9      	bne.n	800657e <memcpy+0xe>
 800658a:	bd10      	pop	{r4, pc}

0800658c <memmove>:
 800658c:	4288      	cmp	r0, r1
 800658e:	b510      	push	{r4, lr}
 8006590:	eb01 0402 	add.w	r4, r1, r2
 8006594:	d902      	bls.n	800659c <memmove+0x10>
 8006596:	4284      	cmp	r4, r0
 8006598:	4623      	mov	r3, r4
 800659a:	d807      	bhi.n	80065ac <memmove+0x20>
 800659c:	1e43      	subs	r3, r0, #1
 800659e:	42a1      	cmp	r1, r4
 80065a0:	d008      	beq.n	80065b4 <memmove+0x28>
 80065a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065aa:	e7f8      	b.n	800659e <memmove+0x12>
 80065ac:	4402      	add	r2, r0
 80065ae:	4601      	mov	r1, r0
 80065b0:	428a      	cmp	r2, r1
 80065b2:	d100      	bne.n	80065b6 <memmove+0x2a>
 80065b4:	bd10      	pop	{r4, pc}
 80065b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065be:	e7f7      	b.n	80065b0 <memmove+0x24>

080065c0 <memset>:
 80065c0:	4402      	add	r2, r0
 80065c2:	4603      	mov	r3, r0
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d100      	bne.n	80065ca <memset+0xa>
 80065c8:	4770      	bx	lr
 80065ca:	f803 1b01 	strb.w	r1, [r3], #1
 80065ce:	e7f9      	b.n	80065c4 <memset+0x4>

080065d0 <validate_structure>:
 80065d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065d2:	6801      	ldr	r1, [r0, #0]
 80065d4:	293b      	cmp	r1, #59	; 0x3b
 80065d6:	4604      	mov	r4, r0
 80065d8:	d911      	bls.n	80065fe <validate_structure+0x2e>
 80065da:	223c      	movs	r2, #60	; 0x3c
 80065dc:	4668      	mov	r0, sp
 80065de:	f001 fb83 	bl	8007ce8 <div>
 80065e2:	9a01      	ldr	r2, [sp, #4]
 80065e4:	6863      	ldr	r3, [r4, #4]
 80065e6:	9900      	ldr	r1, [sp, #0]
 80065e8:	2a00      	cmp	r2, #0
 80065ea:	440b      	add	r3, r1
 80065ec:	6063      	str	r3, [r4, #4]
 80065ee:	bfbb      	ittet	lt
 80065f0:	323c      	addlt	r2, #60	; 0x3c
 80065f2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80065f6:	6022      	strge	r2, [r4, #0]
 80065f8:	6022      	strlt	r2, [r4, #0]
 80065fa:	bfb8      	it	lt
 80065fc:	6063      	strlt	r3, [r4, #4]
 80065fe:	6861      	ldr	r1, [r4, #4]
 8006600:	293b      	cmp	r1, #59	; 0x3b
 8006602:	d911      	bls.n	8006628 <validate_structure+0x58>
 8006604:	223c      	movs	r2, #60	; 0x3c
 8006606:	4668      	mov	r0, sp
 8006608:	f001 fb6e 	bl	8007ce8 <div>
 800660c:	9a01      	ldr	r2, [sp, #4]
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	9900      	ldr	r1, [sp, #0]
 8006612:	2a00      	cmp	r2, #0
 8006614:	440b      	add	r3, r1
 8006616:	60a3      	str	r3, [r4, #8]
 8006618:	bfbb      	ittet	lt
 800661a:	323c      	addlt	r2, #60	; 0x3c
 800661c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8006620:	6062      	strge	r2, [r4, #4]
 8006622:	6062      	strlt	r2, [r4, #4]
 8006624:	bfb8      	it	lt
 8006626:	60a3      	strlt	r3, [r4, #8]
 8006628:	68a1      	ldr	r1, [r4, #8]
 800662a:	2917      	cmp	r1, #23
 800662c:	d911      	bls.n	8006652 <validate_structure+0x82>
 800662e:	2218      	movs	r2, #24
 8006630:	4668      	mov	r0, sp
 8006632:	f001 fb59 	bl	8007ce8 <div>
 8006636:	9a01      	ldr	r2, [sp, #4]
 8006638:	68e3      	ldr	r3, [r4, #12]
 800663a:	9900      	ldr	r1, [sp, #0]
 800663c:	2a00      	cmp	r2, #0
 800663e:	440b      	add	r3, r1
 8006640:	60e3      	str	r3, [r4, #12]
 8006642:	bfbb      	ittet	lt
 8006644:	3218      	addlt	r2, #24
 8006646:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800664a:	60a2      	strge	r2, [r4, #8]
 800664c:	60a2      	strlt	r2, [r4, #8]
 800664e:	bfb8      	it	lt
 8006650:	60e3      	strlt	r3, [r4, #12]
 8006652:	6921      	ldr	r1, [r4, #16]
 8006654:	290b      	cmp	r1, #11
 8006656:	d911      	bls.n	800667c <validate_structure+0xac>
 8006658:	220c      	movs	r2, #12
 800665a:	4668      	mov	r0, sp
 800665c:	f001 fb44 	bl	8007ce8 <div>
 8006660:	9a01      	ldr	r2, [sp, #4]
 8006662:	6963      	ldr	r3, [r4, #20]
 8006664:	9900      	ldr	r1, [sp, #0]
 8006666:	2a00      	cmp	r2, #0
 8006668:	440b      	add	r3, r1
 800666a:	6163      	str	r3, [r4, #20]
 800666c:	bfbb      	ittet	lt
 800666e:	320c      	addlt	r2, #12
 8006670:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8006674:	6122      	strge	r2, [r4, #16]
 8006676:	6122      	strlt	r2, [r4, #16]
 8006678:	bfb8      	it	lt
 800667a:	6163      	strlt	r3, [r4, #20]
 800667c:	6963      	ldr	r3, [r4, #20]
 800667e:	0799      	lsls	r1, r3, #30
 8006680:	d120      	bne.n	80066c4 <validate_structure+0xf4>
 8006682:	2164      	movs	r1, #100	; 0x64
 8006684:	fb93 f2f1 	sdiv	r2, r3, r1
 8006688:	fb01 3212 	mls	r2, r1, r2, r3
 800668c:	b9e2      	cbnz	r2, 80066c8 <validate_structure+0xf8>
 800668e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8006692:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006696:	fb93 f2f1 	sdiv	r2, r3, r1
 800669a:	fb01 3312 	mls	r3, r1, r2, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bf14      	ite	ne
 80066a2:	231c      	movne	r3, #28
 80066a4:	231d      	moveq	r3, #29
 80066a6:	68e2      	ldr	r2, [r4, #12]
 80066a8:	2a00      	cmp	r2, #0
 80066aa:	dc0f      	bgt.n	80066cc <validate_structure+0xfc>
 80066ac:	4f33      	ldr	r7, [pc, #204]	; (800677c <validate_structure+0x1ac>)
 80066ae:	260b      	movs	r6, #11
 80066b0:	2064      	movs	r0, #100	; 0x64
 80066b2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80066b6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80066ba:	f1bc 0f00 	cmp.w	ip, #0
 80066be:	dd31      	ble.n	8006724 <validate_structure+0x154>
 80066c0:	b003      	add	sp, #12
 80066c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c4:	231c      	movs	r3, #28
 80066c6:	e7ee      	b.n	80066a6 <validate_structure+0xd6>
 80066c8:	231d      	movs	r3, #29
 80066ca:	e7ec      	b.n	80066a6 <validate_structure+0xd6>
 80066cc:	4f2b      	ldr	r7, [pc, #172]	; (800677c <validate_structure+0x1ac>)
 80066ce:	f04f 0c00 	mov.w	ip, #0
 80066d2:	2564      	movs	r5, #100	; 0x64
 80066d4:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80066d8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80066dc:	2a01      	cmp	r2, #1
 80066de:	bf14      	ite	ne
 80066e0:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 80066e4:	4618      	moveq	r0, r3
 80066e6:	4281      	cmp	r1, r0
 80066e8:	ddea      	ble.n	80066c0 <validate_structure+0xf0>
 80066ea:	3201      	adds	r2, #1
 80066ec:	1a09      	subs	r1, r1, r0
 80066ee:	2a0c      	cmp	r2, #12
 80066f0:	60e1      	str	r1, [r4, #12]
 80066f2:	6122      	str	r2, [r4, #16]
 80066f4:	d1f0      	bne.n	80066d8 <validate_structure+0x108>
 80066f6:	6963      	ldr	r3, [r4, #20]
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	0791      	lsls	r1, r2, #30
 80066fc:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8006700:	d137      	bne.n	8006772 <validate_structure+0x1a2>
 8006702:	fb92 f1f5 	sdiv	r1, r2, r5
 8006706:	fb05 2211 	mls	r2, r5, r1, r2
 800670a:	2a00      	cmp	r2, #0
 800670c:	d133      	bne.n	8006776 <validate_structure+0x1a6>
 800670e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8006712:	fb93 f2f6 	sdiv	r2, r3, r6
 8006716:	fb06 3312 	mls	r3, r6, r2, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf14      	ite	ne
 800671e:	231c      	movne	r3, #28
 8006720:	231d      	moveq	r3, #29
 8006722:	e7d9      	b.n	80066d8 <validate_structure+0x108>
 8006724:	6921      	ldr	r1, [r4, #16]
 8006726:	3901      	subs	r1, #1
 8006728:	6121      	str	r1, [r4, #16]
 800672a:	3101      	adds	r1, #1
 800672c:	d114      	bne.n	8006758 <validate_structure+0x188>
 800672e:	6963      	ldr	r3, [r4, #20]
 8006730:	1e59      	subs	r1, r3, #1
 8006732:	078a      	lsls	r2, r1, #30
 8006734:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8006738:	d117      	bne.n	800676a <validate_structure+0x19a>
 800673a:	fb91 f2f0 	sdiv	r2, r1, r0
 800673e:	fb00 1112 	mls	r1, r0, r2, r1
 8006742:	b9a1      	cbnz	r1, 800676e <validate_structure+0x19e>
 8006744:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8006748:	fb93 f2f5 	sdiv	r2, r3, r5
 800674c:	fb05 3312 	mls	r3, r5, r2, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf14      	ite	ne
 8006754:	231c      	movne	r3, #28
 8006756:	231d      	moveq	r3, #29
 8006758:	6922      	ldr	r2, [r4, #16]
 800675a:	2a01      	cmp	r2, #1
 800675c:	bf14      	ite	ne
 800675e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8006762:	461a      	moveq	r2, r3
 8006764:	4462      	add	r2, ip
 8006766:	60e2      	str	r2, [r4, #12]
 8006768:	e7a5      	b.n	80066b6 <validate_structure+0xe6>
 800676a:	231c      	movs	r3, #28
 800676c:	e7f4      	b.n	8006758 <validate_structure+0x188>
 800676e:	231d      	movs	r3, #29
 8006770:	e7f2      	b.n	8006758 <validate_structure+0x188>
 8006772:	231c      	movs	r3, #28
 8006774:	e7b0      	b.n	80066d8 <validate_structure+0x108>
 8006776:	231d      	movs	r3, #29
 8006778:	e7ae      	b.n	80066d8 <validate_structure+0x108>
 800677a:	bf00      	nop
 800677c:	0800b4dc 	.word	0x0800b4dc

08006780 <mktime>:
 8006780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006784:	b08b      	sub	sp, #44	; 0x2c
 8006786:	4605      	mov	r5, r0
 8006788:	f002 f98e 	bl	8008aa8 <__gettzinfo>
 800678c:	4607      	mov	r7, r0
 800678e:	4628      	mov	r0, r5
 8006790:	f7ff ff1e 	bl	80065d0 <validate_structure>
 8006794:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006798:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 800679c:	68a8      	ldr	r0, [r5, #8]
 800679e:	696e      	ldr	r6, [r5, #20]
 80067a0:	fb0a 2303 	mla	r3, sl, r3, r2
 80067a4:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 80067a8:	fb0a 3a00 	mla	sl, sl, r0, r3
 80067ac:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 80067b0:	4ac3      	ldr	r2, [pc, #780]	; (8006ac0 <mktime+0x340>)
 80067b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80067b6:	3c01      	subs	r4, #1
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	4414      	add	r4, r2
 80067bc:	dd11      	ble.n	80067e2 <mktime+0x62>
 80067be:	07b1      	lsls	r1, r6, #30
 80067c0:	d10f      	bne.n	80067e2 <mktime+0x62>
 80067c2:	2264      	movs	r2, #100	; 0x64
 80067c4:	fb96 f3f2 	sdiv	r3, r6, r2
 80067c8:	fb02 6313 	mls	r3, r2, r3, r6
 80067cc:	b943      	cbnz	r3, 80067e0 <mktime+0x60>
 80067ce:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80067d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80067d6:	fb91 f3f2 	sdiv	r3, r1, r2
 80067da:	fb02 1313 	mls	r3, r2, r3, r1
 80067de:	b903      	cbnz	r3, 80067e2 <mktime+0x62>
 80067e0:	3401      	adds	r4, #1
 80067e2:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80067e6:	3310      	adds	r3, #16
 80067e8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80067ec:	4293      	cmp	r3, r2
 80067ee:	61ec      	str	r4, [r5, #28]
 80067f0:	f200 8161 	bhi.w	8006ab6 <mktime+0x336>
 80067f4:	2e46      	cmp	r6, #70	; 0x46
 80067f6:	dd77      	ble.n	80068e8 <mktime+0x168>
 80067f8:	2346      	movs	r3, #70	; 0x46
 80067fa:	f240 1e6d 	movw	lr, #365	; 0x16d
 80067fe:	2164      	movs	r1, #100	; 0x64
 8006800:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006804:	079a      	lsls	r2, r3, #30
 8006806:	d169      	bne.n	80068dc <mktime+0x15c>
 8006808:	fb93 f2f1 	sdiv	r2, r3, r1
 800680c:	fb01 3212 	mls	r2, r1, r2, r3
 8006810:	2a00      	cmp	r2, #0
 8006812:	d166      	bne.n	80068e2 <mktime+0x162>
 8006814:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8006818:	fb9c f2f0 	sdiv	r2, ip, r0
 800681c:	fb00 c212 	mls	r2, r0, r2, ip
 8006820:	2a00      	cmp	r2, #0
 8006822:	bf14      	ite	ne
 8006824:	4672      	movne	r2, lr
 8006826:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800682a:	3301      	adds	r3, #1
 800682c:	429e      	cmp	r6, r3
 800682e:	4414      	add	r4, r2
 8006830:	d1e8      	bne.n	8006804 <mktime+0x84>
 8006832:	4ba4      	ldr	r3, [pc, #656]	; (8006ac4 <mktime+0x344>)
 8006834:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8006838:	fbc3 ab04 	smlal	sl, fp, r3, r4
 800683c:	f001 f8a8 	bl	8007990 <__tz_lock>
 8006840:	f001 f8b2 	bl	80079a8 <_tzset_unlocked>
 8006844:	4ba0      	ldr	r3, [pc, #640]	; (8006ac8 <mktime+0x348>)
 8006846:	f8d3 9000 	ldr.w	r9, [r3]
 800684a:	f1b9 0f00 	cmp.w	r9, #0
 800684e:	d03f      	beq.n	80068d0 <mktime+0x150>
 8006850:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8006854:	6968      	ldr	r0, [r5, #20]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f1b9 0f01 	cmp.w	r9, #1
 800685c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8006860:	46c8      	mov	r8, r9
 8006862:	bfa8      	it	ge
 8006864:	f04f 0801 	movge.w	r8, #1
 8006868:	4283      	cmp	r3, r0
 800686a:	d17f      	bne.n	800696c <mktime+0x1ec>
 800686c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686e:	4619      	mov	r1, r3
 8006870:	17da      	asrs	r2, r3, #31
 8006872:	e9cd 1200 	strd	r1, r2, [sp]
 8006876:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800687a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800687e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006884:	1a80      	subs	r0, r0, r2
 8006886:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 800688a:	4582      	cmp	sl, r0
 800688c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006890:	eb7b 0101 	sbcs.w	r1, fp, r1
 8006894:	da71      	bge.n	800697a <mktime+0x1fa>
 8006896:	9800      	ldr	r0, [sp, #0]
 8006898:	6a39      	ldr	r1, [r7, #32]
 800689a:	1a09      	subs	r1, r1, r0
 800689c:	9104      	str	r1, [sp, #16]
 800689e:	9801      	ldr	r0, [sp, #4]
 80068a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068a2:	eb61 0100 	sbc.w	r1, r1, r0
 80068a6:	9105      	str	r1, [sp, #20]
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	2900      	cmp	r1, #0
 80068ac:	d075      	beq.n	800699a <mktime+0x21a>
 80068ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b2:	4582      	cmp	sl, r0
 80068b4:	eb7b 0101 	sbcs.w	r1, fp, r1
 80068b8:	db05      	blt.n	80068c6 <mktime+0x146>
 80068ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068be:	4582      	cmp	sl, r0
 80068c0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80068c4:	db6f      	blt.n	80069a6 <mktime+0x226>
 80068c6:	f1b9 0f00 	cmp.w	r9, #0
 80068ca:	f04f 0900 	mov.w	r9, #0
 80068ce:	da6f      	bge.n	80069b0 <mktime+0x230>
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	eb1a 0a03 	adds.w	sl, sl, r3
 80068d6:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80068da:	e0ae      	b.n	8006a3a <mktime+0x2ba>
 80068dc:	f240 126d 	movw	r2, #365	; 0x16d
 80068e0:	e7a3      	b.n	800682a <mktime+0xaa>
 80068e2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80068e6:	e7a0      	b.n	800682a <mktime+0xaa>
 80068e8:	d0a3      	beq.n	8006832 <mktime+0xb2>
 80068ea:	2345      	movs	r3, #69	; 0x45
 80068ec:	f240 1e6d 	movw	lr, #365	; 0x16d
 80068f0:	2164      	movs	r1, #100	; 0x64
 80068f2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80068f6:	e012      	b.n	800691e <mktime+0x19e>
 80068f8:	bb62      	cbnz	r2, 8006954 <mktime+0x1d4>
 80068fa:	fb93 f2f1 	sdiv	r2, r3, r1
 80068fe:	fb01 3212 	mls	r2, r1, r2, r3
 8006902:	bb52      	cbnz	r2, 800695a <mktime+0x1da>
 8006904:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8006908:	fb9c f2f0 	sdiv	r2, ip, r0
 800690c:	fb00 c212 	mls	r2, r0, r2, ip
 8006910:	2a00      	cmp	r2, #0
 8006912:	bf14      	ite	ne
 8006914:	4672      	movne	r2, lr
 8006916:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800691a:	1aa4      	subs	r4, r4, r2
 800691c:	3b01      	subs	r3, #1
 800691e:	429e      	cmp	r6, r3
 8006920:	f003 0203 	and.w	r2, r3, #3
 8006924:	dbe8      	blt.n	80068f8 <mktime+0x178>
 8006926:	b9da      	cbnz	r2, 8006960 <mktime+0x1e0>
 8006928:	2264      	movs	r2, #100	; 0x64
 800692a:	fb96 f3f2 	sdiv	r3, r6, r2
 800692e:	fb02 6313 	mls	r3, r2, r3, r6
 8006932:	b9c3      	cbnz	r3, 8006966 <mktime+0x1e6>
 8006934:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8006938:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800693c:	fb91 f3f2 	sdiv	r3, r1, r2
 8006940:	fb02 1313 	mls	r3, r2, r3, r1
 8006944:	2b00      	cmp	r3, #0
 8006946:	f240 136d 	movw	r3, #365	; 0x16d
 800694a:	bf08      	it	eq
 800694c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8006950:	1ae4      	subs	r4, r4, r3
 8006952:	e76e      	b.n	8006832 <mktime+0xb2>
 8006954:	f240 126d 	movw	r2, #365	; 0x16d
 8006958:	e7df      	b.n	800691a <mktime+0x19a>
 800695a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800695e:	e7dc      	b.n	800691a <mktime+0x19a>
 8006960:	f240 136d 	movw	r3, #365	; 0x16d
 8006964:	e7f4      	b.n	8006950 <mktime+0x1d0>
 8006966:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800696a:	e7f1      	b.n	8006950 <mktime+0x1d0>
 800696c:	f000 ff68 	bl	8007840 <__tzcalc_limits>
 8006970:	2800      	cmp	r0, #0
 8006972:	f47f af7b 	bne.w	800686c <mktime+0xec>
 8006976:	46c1      	mov	r9, r8
 8006978:	e054      	b.n	8006a24 <mktime+0x2a4>
 800697a:	9800      	ldr	r0, [sp, #0]
 800697c:	9902      	ldr	r1, [sp, #8]
 800697e:	1a09      	subs	r1, r1, r0
 8006980:	9108      	str	r1, [sp, #32]
 8006982:	9801      	ldr	r0, [sp, #4]
 8006984:	9903      	ldr	r1, [sp, #12]
 8006986:	eb61 0100 	sbc.w	r1, r1, r0
 800698a:	9109      	str	r1, [sp, #36]	; 0x24
 800698c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006990:	4582      	cmp	sl, r0
 8006992:	eb7b 0101 	sbcs.w	r1, fp, r1
 8006996:	dbee      	blt.n	8006976 <mktime+0x1f6>
 8006998:	e77d      	b.n	8006896 <mktime+0x116>
 800699a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800699e:	4582      	cmp	sl, r0
 80069a0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80069a4:	db89      	blt.n	80068ba <mktime+0x13a>
 80069a6:	f1b9 0f00 	cmp.w	r9, #0
 80069aa:	db3f      	blt.n	8006a2c <mktime+0x2ac>
 80069ac:	f04f 0901 	mov.w	r9, #1
 80069b0:	ea88 0809 	eor.w	r8, r8, r9
 80069b4:	f1b8 0f01 	cmp.w	r8, #1
 80069b8:	d134      	bne.n	8006a24 <mktime+0x2a4>
 80069ba:	f1b9 0f00 	cmp.w	r9, #0
 80069be:	d04f      	beq.n	8006a60 <mktime+0x2e0>
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	682a      	ldr	r2, [r5, #0]
 80069c4:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80069c8:	441a      	add	r2, r3
 80069ca:	eb1a 0a03 	adds.w	sl, sl, r3
 80069ce:	602a      	str	r2, [r5, #0]
 80069d0:	4628      	mov	r0, r5
 80069d2:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80069d6:	f7ff fdfb 	bl	80065d0 <validate_structure>
 80069da:	68ea      	ldr	r2, [r5, #12]
 80069dc:	ebb2 0208 	subs.w	r2, r2, r8
 80069e0:	d020      	beq.n	8006a24 <mktime+0x2a4>
 80069e2:	2a01      	cmp	r2, #1
 80069e4:	dc3e      	bgt.n	8006a64 <mktime+0x2e4>
 80069e6:	1c90      	adds	r0, r2, #2
 80069e8:	bfd8      	it	le
 80069ea:	2201      	movle	r2, #1
 80069ec:	69eb      	ldr	r3, [r5, #28]
 80069ee:	18d3      	adds	r3, r2, r3
 80069f0:	4414      	add	r4, r2
 80069f2:	d540      	bpl.n	8006a76 <mktime+0x2f6>
 80069f4:	1e72      	subs	r2, r6, #1
 80069f6:	0791      	lsls	r1, r2, #30
 80069f8:	d137      	bne.n	8006a6a <mktime+0x2ea>
 80069fa:	2164      	movs	r1, #100	; 0x64
 80069fc:	fb92 f3f1 	sdiv	r3, r2, r1
 8006a00:	fb01 2313 	mls	r3, r1, r3, r2
 8006a04:	bba3      	cbnz	r3, 8006a70 <mktime+0x2f0>
 8006a06:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8006a0a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006a0e:	fb96 f3f2 	sdiv	r3, r6, r2
 8006a12:	fb02 6613 	mls	r6, r2, r3, r6
 8006a16:	2e00      	cmp	r6, #0
 8006a18:	f240 136d 	movw	r3, #365	; 0x16d
 8006a1c:	bf18      	it	ne
 8006a1e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8006a22:	61eb      	str	r3, [r5, #28]
 8006a24:	f1b9 0f01 	cmp.w	r9, #1
 8006a28:	f47f af52 	bne.w	80068d0 <mktime+0x150>
 8006a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a2e:	eb1a 0a03 	adds.w	sl, sl, r3
 8006a32:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8006a36:	f04f 0901 	mov.w	r9, #1
 8006a3a:	f000 ffaf 	bl	800799c <__tz_unlock>
 8006a3e:	3404      	adds	r4, #4
 8006a40:	2307      	movs	r3, #7
 8006a42:	fb94 f3f3 	sdiv	r3, r4, r3
 8006a46:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006a4a:	1ae4      	subs	r4, r4, r3
 8006a4c:	bf48      	it	mi
 8006a4e:	3407      	addmi	r4, #7
 8006a50:	f8c5 9020 	str.w	r9, [r5, #32]
 8006a54:	61ac      	str	r4, [r5, #24]
 8006a56:	4650      	mov	r0, sl
 8006a58:	4659      	mov	r1, fp
 8006a5a:	b00b      	add	sp, #44	; 0x2c
 8006a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a60:	1a9b      	subs	r3, r3, r2
 8006a62:	e7ae      	b.n	80069c2 <mktime+0x242>
 8006a64:	f04f 32ff 	mov.w	r2, #4294967295
 8006a68:	e7c0      	b.n	80069ec <mktime+0x26c>
 8006a6a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8006a6e:	e7d8      	b.n	8006a22 <mktime+0x2a2>
 8006a70:	f240 136d 	movw	r3, #365	; 0x16d
 8006a74:	e7d5      	b.n	8006a22 <mktime+0x2a2>
 8006a76:	07b2      	lsls	r2, r6, #30
 8006a78:	d117      	bne.n	8006aaa <mktime+0x32a>
 8006a7a:	2164      	movs	r1, #100	; 0x64
 8006a7c:	fb96 f2f1 	sdiv	r2, r6, r1
 8006a80:	fb01 6212 	mls	r2, r1, r2, r6
 8006a84:	b9a2      	cbnz	r2, 8006ab0 <mktime+0x330>
 8006a86:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8006a8a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006a8e:	fb96 f2f1 	sdiv	r2, r6, r1
 8006a92:	fb01 6612 	mls	r6, r1, r2, r6
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	f240 126d 	movw	r2, #365	; 0x16d
 8006a9c:	bf08      	it	eq
 8006a9e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	bfa8      	it	ge
 8006aa6:	1a9b      	subge	r3, r3, r2
 8006aa8:	e7bb      	b.n	8006a22 <mktime+0x2a2>
 8006aaa:	f240 126d 	movw	r2, #365	; 0x16d
 8006aae:	e7f8      	b.n	8006aa2 <mktime+0x322>
 8006ab0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8006ab4:	e7f5      	b.n	8006aa2 <mktime+0x322>
 8006ab6:	f04f 3aff 	mov.w	sl, #4294967295
 8006aba:	f04f 3bff 	mov.w	fp, #4294967295
 8006abe:	e7ca      	b.n	8006a56 <mktime+0x2d6>
 8006ac0:	0800b50c 	.word	0x0800b50c
 8006ac4:	00015180 	.word	0x00015180
 8006ac8:	200004bc 	.word	0x200004bc

08006acc <_free_r>:
 8006acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006ace:	2900      	cmp	r1, #0
 8006ad0:	d048      	beq.n	8006b64 <_free_r+0x98>
 8006ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ad6:	9001      	str	r0, [sp, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f1a1 0404 	sub.w	r4, r1, #4
 8006ade:	bfb8      	it	lt
 8006ae0:	18e4      	addlt	r4, r4, r3
 8006ae2:	f002 f8b1 	bl	8008c48 <__malloc_lock>
 8006ae6:	4a20      	ldr	r2, [pc, #128]	; (8006b68 <_free_r+0x9c>)
 8006ae8:	9801      	ldr	r0, [sp, #4]
 8006aea:	6813      	ldr	r3, [r2, #0]
 8006aec:	4615      	mov	r5, r2
 8006aee:	b933      	cbnz	r3, 8006afe <_free_r+0x32>
 8006af0:	6063      	str	r3, [r4, #4]
 8006af2:	6014      	str	r4, [r2, #0]
 8006af4:	b003      	add	sp, #12
 8006af6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006afa:	f002 b8ab 	b.w	8008c54 <__malloc_unlock>
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	d90b      	bls.n	8006b1a <_free_r+0x4e>
 8006b02:	6821      	ldr	r1, [r4, #0]
 8006b04:	1862      	adds	r2, r4, r1
 8006b06:	4293      	cmp	r3, r2
 8006b08:	bf04      	itt	eq
 8006b0a:	681a      	ldreq	r2, [r3, #0]
 8006b0c:	685b      	ldreq	r3, [r3, #4]
 8006b0e:	6063      	str	r3, [r4, #4]
 8006b10:	bf04      	itt	eq
 8006b12:	1852      	addeq	r2, r2, r1
 8006b14:	6022      	streq	r2, [r4, #0]
 8006b16:	602c      	str	r4, [r5, #0]
 8006b18:	e7ec      	b.n	8006af4 <_free_r+0x28>
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	b10b      	cbz	r3, 8006b24 <_free_r+0x58>
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	d9fa      	bls.n	8006b1a <_free_r+0x4e>
 8006b24:	6811      	ldr	r1, [r2, #0]
 8006b26:	1855      	adds	r5, r2, r1
 8006b28:	42a5      	cmp	r5, r4
 8006b2a:	d10b      	bne.n	8006b44 <_free_r+0x78>
 8006b2c:	6824      	ldr	r4, [r4, #0]
 8006b2e:	4421      	add	r1, r4
 8006b30:	1854      	adds	r4, r2, r1
 8006b32:	42a3      	cmp	r3, r4
 8006b34:	6011      	str	r1, [r2, #0]
 8006b36:	d1dd      	bne.n	8006af4 <_free_r+0x28>
 8006b38:	681c      	ldr	r4, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	6053      	str	r3, [r2, #4]
 8006b3e:	4421      	add	r1, r4
 8006b40:	6011      	str	r1, [r2, #0]
 8006b42:	e7d7      	b.n	8006af4 <_free_r+0x28>
 8006b44:	d902      	bls.n	8006b4c <_free_r+0x80>
 8006b46:	230c      	movs	r3, #12
 8006b48:	6003      	str	r3, [r0, #0]
 8006b4a:	e7d3      	b.n	8006af4 <_free_r+0x28>
 8006b4c:	6825      	ldr	r5, [r4, #0]
 8006b4e:	1961      	adds	r1, r4, r5
 8006b50:	428b      	cmp	r3, r1
 8006b52:	bf04      	itt	eq
 8006b54:	6819      	ldreq	r1, [r3, #0]
 8006b56:	685b      	ldreq	r3, [r3, #4]
 8006b58:	6063      	str	r3, [r4, #4]
 8006b5a:	bf04      	itt	eq
 8006b5c:	1949      	addeq	r1, r1, r5
 8006b5e:	6021      	streq	r1, [r4, #0]
 8006b60:	6054      	str	r4, [r2, #4]
 8006b62:	e7c7      	b.n	8006af4 <_free_r+0x28>
 8006b64:	b003      	add	sp, #12
 8006b66:	bd30      	pop	{r4, r5, pc}
 8006b68:	20000498 	.word	0x20000498

08006b6c <_malloc_r>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	1ccd      	adds	r5, r1, #3
 8006b70:	f025 0503 	bic.w	r5, r5, #3
 8006b74:	3508      	adds	r5, #8
 8006b76:	2d0c      	cmp	r5, #12
 8006b78:	bf38      	it	cc
 8006b7a:	250c      	movcc	r5, #12
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	4606      	mov	r6, r0
 8006b80:	db01      	blt.n	8006b86 <_malloc_r+0x1a>
 8006b82:	42a9      	cmp	r1, r5
 8006b84:	d903      	bls.n	8006b8e <_malloc_r+0x22>
 8006b86:	230c      	movs	r3, #12
 8006b88:	6033      	str	r3, [r6, #0]
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b8e:	f002 f85b 	bl	8008c48 <__malloc_lock>
 8006b92:	4921      	ldr	r1, [pc, #132]	; (8006c18 <_malloc_r+0xac>)
 8006b94:	680a      	ldr	r2, [r1, #0]
 8006b96:	4614      	mov	r4, r2
 8006b98:	b99c      	cbnz	r4, 8006bc2 <_malloc_r+0x56>
 8006b9a:	4f20      	ldr	r7, [pc, #128]	; (8006c1c <_malloc_r+0xb0>)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	b923      	cbnz	r3, 8006baa <_malloc_r+0x3e>
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f000 fca6 	bl	80074f4 <_sbrk_r>
 8006ba8:	6038      	str	r0, [r7, #0]
 8006baa:	4629      	mov	r1, r5
 8006bac:	4630      	mov	r0, r6
 8006bae:	f000 fca1 	bl	80074f4 <_sbrk_r>
 8006bb2:	1c43      	adds	r3, r0, #1
 8006bb4:	d123      	bne.n	8006bfe <_malloc_r+0x92>
 8006bb6:	230c      	movs	r3, #12
 8006bb8:	6033      	str	r3, [r6, #0]
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f002 f84a 	bl	8008c54 <__malloc_unlock>
 8006bc0:	e7e3      	b.n	8006b8a <_malloc_r+0x1e>
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	1b5b      	subs	r3, r3, r5
 8006bc6:	d417      	bmi.n	8006bf8 <_malloc_r+0x8c>
 8006bc8:	2b0b      	cmp	r3, #11
 8006bca:	d903      	bls.n	8006bd4 <_malloc_r+0x68>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	441c      	add	r4, r3
 8006bd0:	6025      	str	r5, [r4, #0]
 8006bd2:	e004      	b.n	8006bde <_malloc_r+0x72>
 8006bd4:	6863      	ldr	r3, [r4, #4]
 8006bd6:	42a2      	cmp	r2, r4
 8006bd8:	bf0c      	ite	eq
 8006bda:	600b      	streq	r3, [r1, #0]
 8006bdc:	6053      	strne	r3, [r2, #4]
 8006bde:	4630      	mov	r0, r6
 8006be0:	f002 f838 	bl	8008c54 <__malloc_unlock>
 8006be4:	f104 000b 	add.w	r0, r4, #11
 8006be8:	1d23      	adds	r3, r4, #4
 8006bea:	f020 0007 	bic.w	r0, r0, #7
 8006bee:	1ac2      	subs	r2, r0, r3
 8006bf0:	d0cc      	beq.n	8006b8c <_malloc_r+0x20>
 8006bf2:	1a1b      	subs	r3, r3, r0
 8006bf4:	50a3      	str	r3, [r4, r2]
 8006bf6:	e7c9      	b.n	8006b8c <_malloc_r+0x20>
 8006bf8:	4622      	mov	r2, r4
 8006bfa:	6864      	ldr	r4, [r4, #4]
 8006bfc:	e7cc      	b.n	8006b98 <_malloc_r+0x2c>
 8006bfe:	1cc4      	adds	r4, r0, #3
 8006c00:	f024 0403 	bic.w	r4, r4, #3
 8006c04:	42a0      	cmp	r0, r4
 8006c06:	d0e3      	beq.n	8006bd0 <_malloc_r+0x64>
 8006c08:	1a21      	subs	r1, r4, r0
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f000 fc72 	bl	80074f4 <_sbrk_r>
 8006c10:	3001      	adds	r0, #1
 8006c12:	d1dd      	bne.n	8006bd0 <_malloc_r+0x64>
 8006c14:	e7cf      	b.n	8006bb6 <_malloc_r+0x4a>
 8006c16:	bf00      	nop
 8006c18:	20000498 	.word	0x20000498
 8006c1c:	2000049c 	.word	0x2000049c

08006c20 <__cvt>:
 8006c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c24:	ec55 4b10 	vmov	r4, r5, d0
 8006c28:	2d00      	cmp	r5, #0
 8006c2a:	460e      	mov	r6, r1
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	462b      	mov	r3, r5
 8006c30:	bfbb      	ittet	lt
 8006c32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c36:	461d      	movlt	r5, r3
 8006c38:	2300      	movge	r3, #0
 8006c3a:	232d      	movlt	r3, #45	; 0x2d
 8006c3c:	700b      	strb	r3, [r1, #0]
 8006c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c44:	4691      	mov	r9, r2
 8006c46:	f023 0820 	bic.w	r8, r3, #32
 8006c4a:	bfbc      	itt	lt
 8006c4c:	4622      	movlt	r2, r4
 8006c4e:	4614      	movlt	r4, r2
 8006c50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c54:	d005      	beq.n	8006c62 <__cvt+0x42>
 8006c56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c5a:	d100      	bne.n	8006c5e <__cvt+0x3e>
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	2102      	movs	r1, #2
 8006c60:	e000      	b.n	8006c64 <__cvt+0x44>
 8006c62:	2103      	movs	r1, #3
 8006c64:	ab03      	add	r3, sp, #12
 8006c66:	9301      	str	r3, [sp, #4]
 8006c68:	ab02      	add	r3, sp, #8
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	ec45 4b10 	vmov	d0, r4, r5
 8006c70:	4653      	mov	r3, sl
 8006c72:	4632      	mov	r2, r6
 8006c74:	f001 f8d8 	bl	8007e28 <_dtoa_r>
 8006c78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	d102      	bne.n	8006c86 <__cvt+0x66>
 8006c80:	f019 0f01 	tst.w	r9, #1
 8006c84:	d022      	beq.n	8006ccc <__cvt+0xac>
 8006c86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c8a:	eb07 0906 	add.w	r9, r7, r6
 8006c8e:	d110      	bne.n	8006cb2 <__cvt+0x92>
 8006c90:	783b      	ldrb	r3, [r7, #0]
 8006c92:	2b30      	cmp	r3, #48	; 0x30
 8006c94:	d10a      	bne.n	8006cac <__cvt+0x8c>
 8006c96:	2200      	movs	r2, #0
 8006c98:	2300      	movs	r3, #0
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	f7f9 ff43 	bl	8000b28 <__aeabi_dcmpeq>
 8006ca2:	b918      	cbnz	r0, 8006cac <__cvt+0x8c>
 8006ca4:	f1c6 0601 	rsb	r6, r6, #1
 8006ca8:	f8ca 6000 	str.w	r6, [sl]
 8006cac:	f8da 3000 	ldr.w	r3, [sl]
 8006cb0:	4499      	add	r9, r3
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	4629      	mov	r1, r5
 8006cba:	f7f9 ff35 	bl	8000b28 <__aeabi_dcmpeq>
 8006cbe:	b108      	cbz	r0, 8006cc4 <__cvt+0xa4>
 8006cc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006cc4:	2230      	movs	r2, #48	; 0x30
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	454b      	cmp	r3, r9
 8006cca:	d307      	bcc.n	8006cdc <__cvt+0xbc>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cd0:	1bdb      	subs	r3, r3, r7
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	b004      	add	sp, #16
 8006cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cdc:	1c59      	adds	r1, r3, #1
 8006cde:	9103      	str	r1, [sp, #12]
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	e7f0      	b.n	8006cc6 <__cvt+0xa6>

08006ce4 <__exponent>:
 8006ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2900      	cmp	r1, #0
 8006cea:	bfb8      	it	lt
 8006cec:	4249      	neglt	r1, r1
 8006cee:	f803 2b02 	strb.w	r2, [r3], #2
 8006cf2:	bfb4      	ite	lt
 8006cf4:	222d      	movlt	r2, #45	; 0x2d
 8006cf6:	222b      	movge	r2, #43	; 0x2b
 8006cf8:	2909      	cmp	r1, #9
 8006cfa:	7042      	strb	r2, [r0, #1]
 8006cfc:	dd2a      	ble.n	8006d54 <__exponent+0x70>
 8006cfe:	f10d 0407 	add.w	r4, sp, #7
 8006d02:	46a4      	mov	ip, r4
 8006d04:	270a      	movs	r7, #10
 8006d06:	46a6      	mov	lr, r4
 8006d08:	460a      	mov	r2, r1
 8006d0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d0e:	fb07 1516 	mls	r5, r7, r6, r1
 8006d12:	3530      	adds	r5, #48	; 0x30
 8006d14:	2a63      	cmp	r2, #99	; 0x63
 8006d16:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d1e:	4631      	mov	r1, r6
 8006d20:	dcf1      	bgt.n	8006d06 <__exponent+0x22>
 8006d22:	3130      	adds	r1, #48	; 0x30
 8006d24:	f1ae 0502 	sub.w	r5, lr, #2
 8006d28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d2c:	1c44      	adds	r4, r0, #1
 8006d2e:	4629      	mov	r1, r5
 8006d30:	4561      	cmp	r1, ip
 8006d32:	d30a      	bcc.n	8006d4a <__exponent+0x66>
 8006d34:	f10d 0209 	add.w	r2, sp, #9
 8006d38:	eba2 020e 	sub.w	r2, r2, lr
 8006d3c:	4565      	cmp	r5, ip
 8006d3e:	bf88      	it	hi
 8006d40:	2200      	movhi	r2, #0
 8006d42:	4413      	add	r3, r2
 8006d44:	1a18      	subs	r0, r3, r0
 8006d46:	b003      	add	sp, #12
 8006d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d52:	e7ed      	b.n	8006d30 <__exponent+0x4c>
 8006d54:	2330      	movs	r3, #48	; 0x30
 8006d56:	3130      	adds	r1, #48	; 0x30
 8006d58:	7083      	strb	r3, [r0, #2]
 8006d5a:	70c1      	strb	r1, [r0, #3]
 8006d5c:	1d03      	adds	r3, r0, #4
 8006d5e:	e7f1      	b.n	8006d44 <__exponent+0x60>

08006d60 <_printf_float>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	ed2d 8b02 	vpush	{d8}
 8006d68:	b08d      	sub	sp, #52	; 0x34
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d70:	4616      	mov	r6, r2
 8006d72:	461f      	mov	r7, r3
 8006d74:	4605      	mov	r5, r0
 8006d76:	f001 ff4b 	bl	8008c10 <_localeconv_r>
 8006d7a:	f8d0 a000 	ldr.w	sl, [r0]
 8006d7e:	4650      	mov	r0, sl
 8006d80:	f7f9 fa50 	bl	8000224 <strlen>
 8006d84:	2300      	movs	r3, #0
 8006d86:	930a      	str	r3, [sp, #40]	; 0x28
 8006d88:	6823      	ldr	r3, [r4, #0]
 8006d8a:	9305      	str	r3, [sp, #20]
 8006d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006d90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d94:	3307      	adds	r3, #7
 8006d96:	f023 0307 	bic.w	r3, r3, #7
 8006d9a:	f103 0208 	add.w	r2, r3, #8
 8006d9e:	f8c8 2000 	str.w	r2, [r8]
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006daa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006dae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006db2:	9307      	str	r3, [sp, #28]
 8006db4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006db8:	ee08 0a10 	vmov	s16, r0
 8006dbc:	4b9f      	ldr	r3, [pc, #636]	; (800703c <_printf_float+0x2dc>)
 8006dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc6:	f7f9 fee1 	bl	8000b8c <__aeabi_dcmpun>
 8006dca:	bb88      	cbnz	r0, 8006e30 <_printf_float+0xd0>
 8006dcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dd0:	4b9a      	ldr	r3, [pc, #616]	; (800703c <_printf_float+0x2dc>)
 8006dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006dd6:	f7f9 febb 	bl	8000b50 <__aeabi_dcmple>
 8006dda:	bb48      	cbnz	r0, 8006e30 <_printf_float+0xd0>
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2300      	movs	r3, #0
 8006de0:	4640      	mov	r0, r8
 8006de2:	4649      	mov	r1, r9
 8006de4:	f7f9 feaa 	bl	8000b3c <__aeabi_dcmplt>
 8006de8:	b110      	cbz	r0, 8006df0 <_printf_float+0x90>
 8006dea:	232d      	movs	r3, #45	; 0x2d
 8006dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df0:	4b93      	ldr	r3, [pc, #588]	; (8007040 <_printf_float+0x2e0>)
 8006df2:	4894      	ldr	r0, [pc, #592]	; (8007044 <_printf_float+0x2e4>)
 8006df4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006df8:	bf94      	ite	ls
 8006dfa:	4698      	movls	r8, r3
 8006dfc:	4680      	movhi	r8, r0
 8006dfe:	2303      	movs	r3, #3
 8006e00:	6123      	str	r3, [r4, #16]
 8006e02:	9b05      	ldr	r3, [sp, #20]
 8006e04:	f023 0204 	bic.w	r2, r3, #4
 8006e08:	6022      	str	r2, [r4, #0]
 8006e0a:	f04f 0900 	mov.w	r9, #0
 8006e0e:	9700      	str	r7, [sp, #0]
 8006e10:	4633      	mov	r3, r6
 8006e12:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e14:	4621      	mov	r1, r4
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 f9d8 	bl	80071cc <_printf_common>
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	f040 8090 	bne.w	8006f42 <_printf_float+0x1e2>
 8006e22:	f04f 30ff 	mov.w	r0, #4294967295
 8006e26:	b00d      	add	sp, #52	; 0x34
 8006e28:	ecbd 8b02 	vpop	{d8}
 8006e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e30:	4642      	mov	r2, r8
 8006e32:	464b      	mov	r3, r9
 8006e34:	4640      	mov	r0, r8
 8006e36:	4649      	mov	r1, r9
 8006e38:	f7f9 fea8 	bl	8000b8c <__aeabi_dcmpun>
 8006e3c:	b140      	cbz	r0, 8006e50 <_printf_float+0xf0>
 8006e3e:	464b      	mov	r3, r9
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bfbc      	itt	lt
 8006e44:	232d      	movlt	r3, #45	; 0x2d
 8006e46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e4a:	487f      	ldr	r0, [pc, #508]	; (8007048 <_printf_float+0x2e8>)
 8006e4c:	4b7f      	ldr	r3, [pc, #508]	; (800704c <_printf_float+0x2ec>)
 8006e4e:	e7d1      	b.n	8006df4 <_printf_float+0x94>
 8006e50:	6863      	ldr	r3, [r4, #4]
 8006e52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e56:	9206      	str	r2, [sp, #24]
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	d13f      	bne.n	8006edc <_printf_float+0x17c>
 8006e5c:	2306      	movs	r3, #6
 8006e5e:	6063      	str	r3, [r4, #4]
 8006e60:	9b05      	ldr	r3, [sp, #20]
 8006e62:	6861      	ldr	r1, [r4, #4]
 8006e64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9303      	str	r3, [sp, #12]
 8006e6c:	ab0a      	add	r3, sp, #40	; 0x28
 8006e6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e72:	ab09      	add	r3, sp, #36	; 0x24
 8006e74:	ec49 8b10 	vmov	d0, r8, r9
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	6022      	str	r2, [r4, #0]
 8006e7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e80:	4628      	mov	r0, r5
 8006e82:	f7ff fecd 	bl	8006c20 <__cvt>
 8006e86:	9b06      	ldr	r3, [sp, #24]
 8006e88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e8a:	2b47      	cmp	r3, #71	; 0x47
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	d108      	bne.n	8006ea2 <_printf_float+0x142>
 8006e90:	1cc8      	adds	r0, r1, #3
 8006e92:	db02      	blt.n	8006e9a <_printf_float+0x13a>
 8006e94:	6863      	ldr	r3, [r4, #4]
 8006e96:	4299      	cmp	r1, r3
 8006e98:	dd41      	ble.n	8006f1e <_printf_float+0x1be>
 8006e9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e9e:	fa5f fb8b 	uxtb.w	fp, fp
 8006ea2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ea6:	d820      	bhi.n	8006eea <_printf_float+0x18a>
 8006ea8:	3901      	subs	r1, #1
 8006eaa:	465a      	mov	r2, fp
 8006eac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006eb0:	9109      	str	r1, [sp, #36]	; 0x24
 8006eb2:	f7ff ff17 	bl	8006ce4 <__exponent>
 8006eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eb8:	1813      	adds	r3, r2, r0
 8006eba:	2a01      	cmp	r2, #1
 8006ebc:	4681      	mov	r9, r0
 8006ebe:	6123      	str	r3, [r4, #16]
 8006ec0:	dc02      	bgt.n	8006ec8 <_printf_float+0x168>
 8006ec2:	6822      	ldr	r2, [r4, #0]
 8006ec4:	07d2      	lsls	r2, r2, #31
 8006ec6:	d501      	bpl.n	8006ecc <_printf_float+0x16c>
 8006ec8:	3301      	adds	r3, #1
 8006eca:	6123      	str	r3, [r4, #16]
 8006ecc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d09c      	beq.n	8006e0e <_printf_float+0xae>
 8006ed4:	232d      	movs	r3, #45	; 0x2d
 8006ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eda:	e798      	b.n	8006e0e <_printf_float+0xae>
 8006edc:	9a06      	ldr	r2, [sp, #24]
 8006ede:	2a47      	cmp	r2, #71	; 0x47
 8006ee0:	d1be      	bne.n	8006e60 <_printf_float+0x100>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1bc      	bne.n	8006e60 <_printf_float+0x100>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e7b9      	b.n	8006e5e <_printf_float+0xfe>
 8006eea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006eee:	d118      	bne.n	8006f22 <_printf_float+0x1c2>
 8006ef0:	2900      	cmp	r1, #0
 8006ef2:	6863      	ldr	r3, [r4, #4]
 8006ef4:	dd0b      	ble.n	8006f0e <_printf_float+0x1ae>
 8006ef6:	6121      	str	r1, [r4, #16]
 8006ef8:	b913      	cbnz	r3, 8006f00 <_printf_float+0x1a0>
 8006efa:	6822      	ldr	r2, [r4, #0]
 8006efc:	07d0      	lsls	r0, r2, #31
 8006efe:	d502      	bpl.n	8006f06 <_printf_float+0x1a6>
 8006f00:	3301      	adds	r3, #1
 8006f02:	440b      	add	r3, r1
 8006f04:	6123      	str	r3, [r4, #16]
 8006f06:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f08:	f04f 0900 	mov.w	r9, #0
 8006f0c:	e7de      	b.n	8006ecc <_printf_float+0x16c>
 8006f0e:	b913      	cbnz	r3, 8006f16 <_printf_float+0x1b6>
 8006f10:	6822      	ldr	r2, [r4, #0]
 8006f12:	07d2      	lsls	r2, r2, #31
 8006f14:	d501      	bpl.n	8006f1a <_printf_float+0x1ba>
 8006f16:	3302      	adds	r3, #2
 8006f18:	e7f4      	b.n	8006f04 <_printf_float+0x1a4>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e7f2      	b.n	8006f04 <_printf_float+0x1a4>
 8006f1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f24:	4299      	cmp	r1, r3
 8006f26:	db05      	blt.n	8006f34 <_printf_float+0x1d4>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	6121      	str	r1, [r4, #16]
 8006f2c:	07d8      	lsls	r0, r3, #31
 8006f2e:	d5ea      	bpl.n	8006f06 <_printf_float+0x1a6>
 8006f30:	1c4b      	adds	r3, r1, #1
 8006f32:	e7e7      	b.n	8006f04 <_printf_float+0x1a4>
 8006f34:	2900      	cmp	r1, #0
 8006f36:	bfd4      	ite	le
 8006f38:	f1c1 0202 	rsble	r2, r1, #2
 8006f3c:	2201      	movgt	r2, #1
 8006f3e:	4413      	add	r3, r2
 8006f40:	e7e0      	b.n	8006f04 <_printf_float+0x1a4>
 8006f42:	6823      	ldr	r3, [r4, #0]
 8006f44:	055a      	lsls	r2, r3, #21
 8006f46:	d407      	bmi.n	8006f58 <_printf_float+0x1f8>
 8006f48:	6923      	ldr	r3, [r4, #16]
 8006f4a:	4642      	mov	r2, r8
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4628      	mov	r0, r5
 8006f50:	47b8      	blx	r7
 8006f52:	3001      	adds	r0, #1
 8006f54:	d12c      	bne.n	8006fb0 <_printf_float+0x250>
 8006f56:	e764      	b.n	8006e22 <_printf_float+0xc2>
 8006f58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f5c:	f240 80e0 	bls.w	8007120 <_printf_float+0x3c0>
 8006f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f64:	2200      	movs	r2, #0
 8006f66:	2300      	movs	r3, #0
 8006f68:	f7f9 fdde 	bl	8000b28 <__aeabi_dcmpeq>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d034      	beq.n	8006fda <_printf_float+0x27a>
 8006f70:	4a37      	ldr	r2, [pc, #220]	; (8007050 <_printf_float+0x2f0>)
 8006f72:	2301      	movs	r3, #1
 8006f74:	4631      	mov	r1, r6
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b8      	blx	r7
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	f43f af51 	beq.w	8006e22 <_printf_float+0xc2>
 8006f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f84:	429a      	cmp	r2, r3
 8006f86:	db02      	blt.n	8006f8e <_printf_float+0x22e>
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	07d8      	lsls	r0, r3, #31
 8006f8c:	d510      	bpl.n	8006fb0 <_printf_float+0x250>
 8006f8e:	ee18 3a10 	vmov	r3, s16
 8006f92:	4652      	mov	r2, sl
 8006f94:	4631      	mov	r1, r6
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b8      	blx	r7
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	f43f af41 	beq.w	8006e22 <_printf_float+0xc2>
 8006fa0:	f04f 0800 	mov.w	r8, #0
 8006fa4:	f104 091a 	add.w	r9, r4, #26
 8006fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006faa:	3b01      	subs	r3, #1
 8006fac:	4543      	cmp	r3, r8
 8006fae:	dc09      	bgt.n	8006fc4 <_printf_float+0x264>
 8006fb0:	6823      	ldr	r3, [r4, #0]
 8006fb2:	079b      	lsls	r3, r3, #30
 8006fb4:	f100 8105 	bmi.w	80071c2 <_printf_float+0x462>
 8006fb8:	68e0      	ldr	r0, [r4, #12]
 8006fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fbc:	4298      	cmp	r0, r3
 8006fbe:	bfb8      	it	lt
 8006fc0:	4618      	movlt	r0, r3
 8006fc2:	e730      	b.n	8006e26 <_printf_float+0xc6>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	464a      	mov	r2, r9
 8006fc8:	4631      	mov	r1, r6
 8006fca:	4628      	mov	r0, r5
 8006fcc:	47b8      	blx	r7
 8006fce:	3001      	adds	r0, #1
 8006fd0:	f43f af27 	beq.w	8006e22 <_printf_float+0xc2>
 8006fd4:	f108 0801 	add.w	r8, r8, #1
 8006fd8:	e7e6      	b.n	8006fa8 <_printf_float+0x248>
 8006fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	dc39      	bgt.n	8007054 <_printf_float+0x2f4>
 8006fe0:	4a1b      	ldr	r2, [pc, #108]	; (8007050 <_printf_float+0x2f0>)
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b8      	blx	r7
 8006fea:	3001      	adds	r0, #1
 8006fec:	f43f af19 	beq.w	8006e22 <_printf_float+0xc2>
 8006ff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	d102      	bne.n	8006ffe <_printf_float+0x29e>
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	07d9      	lsls	r1, r3, #31
 8006ffc:	d5d8      	bpl.n	8006fb0 <_printf_float+0x250>
 8006ffe:	ee18 3a10 	vmov	r3, s16
 8007002:	4652      	mov	r2, sl
 8007004:	4631      	mov	r1, r6
 8007006:	4628      	mov	r0, r5
 8007008:	47b8      	blx	r7
 800700a:	3001      	adds	r0, #1
 800700c:	f43f af09 	beq.w	8006e22 <_printf_float+0xc2>
 8007010:	f04f 0900 	mov.w	r9, #0
 8007014:	f104 0a1a 	add.w	sl, r4, #26
 8007018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701a:	425b      	negs	r3, r3
 800701c:	454b      	cmp	r3, r9
 800701e:	dc01      	bgt.n	8007024 <_printf_float+0x2c4>
 8007020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007022:	e792      	b.n	8006f4a <_printf_float+0x1ea>
 8007024:	2301      	movs	r3, #1
 8007026:	4652      	mov	r2, sl
 8007028:	4631      	mov	r1, r6
 800702a:	4628      	mov	r0, r5
 800702c:	47b8      	blx	r7
 800702e:	3001      	adds	r0, #1
 8007030:	f43f aef7 	beq.w	8006e22 <_printf_float+0xc2>
 8007034:	f109 0901 	add.w	r9, r9, #1
 8007038:	e7ee      	b.n	8007018 <_printf_float+0x2b8>
 800703a:	bf00      	nop
 800703c:	7fefffff 	.word	0x7fefffff
 8007040:	0800b59c 	.word	0x0800b59c
 8007044:	0800b5a0 	.word	0x0800b5a0
 8007048:	0800b5a8 	.word	0x0800b5a8
 800704c:	0800b5a4 	.word	0x0800b5a4
 8007050:	0800b9a4 	.word	0x0800b9a4
 8007054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007056:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007058:	429a      	cmp	r2, r3
 800705a:	bfa8      	it	ge
 800705c:	461a      	movge	r2, r3
 800705e:	2a00      	cmp	r2, #0
 8007060:	4691      	mov	r9, r2
 8007062:	dc37      	bgt.n	80070d4 <_printf_float+0x374>
 8007064:	f04f 0b00 	mov.w	fp, #0
 8007068:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800706c:	f104 021a 	add.w	r2, r4, #26
 8007070:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007072:	9305      	str	r3, [sp, #20]
 8007074:	eba3 0309 	sub.w	r3, r3, r9
 8007078:	455b      	cmp	r3, fp
 800707a:	dc33      	bgt.n	80070e4 <_printf_float+0x384>
 800707c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007080:	429a      	cmp	r2, r3
 8007082:	db3b      	blt.n	80070fc <_printf_float+0x39c>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	07da      	lsls	r2, r3, #31
 8007088:	d438      	bmi.n	80070fc <_printf_float+0x39c>
 800708a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800708c:	9b05      	ldr	r3, [sp, #20]
 800708e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	eba2 0901 	sub.w	r9, r2, r1
 8007096:	4599      	cmp	r9, r3
 8007098:	bfa8      	it	ge
 800709a:	4699      	movge	r9, r3
 800709c:	f1b9 0f00 	cmp.w	r9, #0
 80070a0:	dc35      	bgt.n	800710e <_printf_float+0x3ae>
 80070a2:	f04f 0800 	mov.w	r8, #0
 80070a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070aa:	f104 0a1a 	add.w	sl, r4, #26
 80070ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070b2:	1a9b      	subs	r3, r3, r2
 80070b4:	eba3 0309 	sub.w	r3, r3, r9
 80070b8:	4543      	cmp	r3, r8
 80070ba:	f77f af79 	ble.w	8006fb0 <_printf_float+0x250>
 80070be:	2301      	movs	r3, #1
 80070c0:	4652      	mov	r2, sl
 80070c2:	4631      	mov	r1, r6
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b8      	blx	r7
 80070c8:	3001      	adds	r0, #1
 80070ca:	f43f aeaa 	beq.w	8006e22 <_printf_float+0xc2>
 80070ce:	f108 0801 	add.w	r8, r8, #1
 80070d2:	e7ec      	b.n	80070ae <_printf_float+0x34e>
 80070d4:	4613      	mov	r3, r2
 80070d6:	4631      	mov	r1, r6
 80070d8:	4642      	mov	r2, r8
 80070da:	4628      	mov	r0, r5
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	d1c0      	bne.n	8007064 <_printf_float+0x304>
 80070e2:	e69e      	b.n	8006e22 <_printf_float+0xc2>
 80070e4:	2301      	movs	r3, #1
 80070e6:	4631      	mov	r1, r6
 80070e8:	4628      	mov	r0, r5
 80070ea:	9205      	str	r2, [sp, #20]
 80070ec:	47b8      	blx	r7
 80070ee:	3001      	adds	r0, #1
 80070f0:	f43f ae97 	beq.w	8006e22 <_printf_float+0xc2>
 80070f4:	9a05      	ldr	r2, [sp, #20]
 80070f6:	f10b 0b01 	add.w	fp, fp, #1
 80070fa:	e7b9      	b.n	8007070 <_printf_float+0x310>
 80070fc:	ee18 3a10 	vmov	r3, s16
 8007100:	4652      	mov	r2, sl
 8007102:	4631      	mov	r1, r6
 8007104:	4628      	mov	r0, r5
 8007106:	47b8      	blx	r7
 8007108:	3001      	adds	r0, #1
 800710a:	d1be      	bne.n	800708a <_printf_float+0x32a>
 800710c:	e689      	b.n	8006e22 <_printf_float+0xc2>
 800710e:	9a05      	ldr	r2, [sp, #20]
 8007110:	464b      	mov	r3, r9
 8007112:	4442      	add	r2, r8
 8007114:	4631      	mov	r1, r6
 8007116:	4628      	mov	r0, r5
 8007118:	47b8      	blx	r7
 800711a:	3001      	adds	r0, #1
 800711c:	d1c1      	bne.n	80070a2 <_printf_float+0x342>
 800711e:	e680      	b.n	8006e22 <_printf_float+0xc2>
 8007120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007122:	2a01      	cmp	r2, #1
 8007124:	dc01      	bgt.n	800712a <_printf_float+0x3ca>
 8007126:	07db      	lsls	r3, r3, #31
 8007128:	d538      	bpl.n	800719c <_printf_float+0x43c>
 800712a:	2301      	movs	r3, #1
 800712c:	4642      	mov	r2, r8
 800712e:	4631      	mov	r1, r6
 8007130:	4628      	mov	r0, r5
 8007132:	47b8      	blx	r7
 8007134:	3001      	adds	r0, #1
 8007136:	f43f ae74 	beq.w	8006e22 <_printf_float+0xc2>
 800713a:	ee18 3a10 	vmov	r3, s16
 800713e:	4652      	mov	r2, sl
 8007140:	4631      	mov	r1, r6
 8007142:	4628      	mov	r0, r5
 8007144:	47b8      	blx	r7
 8007146:	3001      	adds	r0, #1
 8007148:	f43f ae6b 	beq.w	8006e22 <_printf_float+0xc2>
 800714c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007150:	2200      	movs	r2, #0
 8007152:	2300      	movs	r3, #0
 8007154:	f7f9 fce8 	bl	8000b28 <__aeabi_dcmpeq>
 8007158:	b9d8      	cbnz	r0, 8007192 <_printf_float+0x432>
 800715a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800715c:	f108 0201 	add.w	r2, r8, #1
 8007160:	3b01      	subs	r3, #1
 8007162:	4631      	mov	r1, r6
 8007164:	4628      	mov	r0, r5
 8007166:	47b8      	blx	r7
 8007168:	3001      	adds	r0, #1
 800716a:	d10e      	bne.n	800718a <_printf_float+0x42a>
 800716c:	e659      	b.n	8006e22 <_printf_float+0xc2>
 800716e:	2301      	movs	r3, #1
 8007170:	4652      	mov	r2, sl
 8007172:	4631      	mov	r1, r6
 8007174:	4628      	mov	r0, r5
 8007176:	47b8      	blx	r7
 8007178:	3001      	adds	r0, #1
 800717a:	f43f ae52 	beq.w	8006e22 <_printf_float+0xc2>
 800717e:	f108 0801 	add.w	r8, r8, #1
 8007182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007184:	3b01      	subs	r3, #1
 8007186:	4543      	cmp	r3, r8
 8007188:	dcf1      	bgt.n	800716e <_printf_float+0x40e>
 800718a:	464b      	mov	r3, r9
 800718c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007190:	e6dc      	b.n	8006f4c <_printf_float+0x1ec>
 8007192:	f04f 0800 	mov.w	r8, #0
 8007196:	f104 0a1a 	add.w	sl, r4, #26
 800719a:	e7f2      	b.n	8007182 <_printf_float+0x422>
 800719c:	2301      	movs	r3, #1
 800719e:	4642      	mov	r2, r8
 80071a0:	e7df      	b.n	8007162 <_printf_float+0x402>
 80071a2:	2301      	movs	r3, #1
 80071a4:	464a      	mov	r2, r9
 80071a6:	4631      	mov	r1, r6
 80071a8:	4628      	mov	r0, r5
 80071aa:	47b8      	blx	r7
 80071ac:	3001      	adds	r0, #1
 80071ae:	f43f ae38 	beq.w	8006e22 <_printf_float+0xc2>
 80071b2:	f108 0801 	add.w	r8, r8, #1
 80071b6:	68e3      	ldr	r3, [r4, #12]
 80071b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071ba:	1a5b      	subs	r3, r3, r1
 80071bc:	4543      	cmp	r3, r8
 80071be:	dcf0      	bgt.n	80071a2 <_printf_float+0x442>
 80071c0:	e6fa      	b.n	8006fb8 <_printf_float+0x258>
 80071c2:	f04f 0800 	mov.w	r8, #0
 80071c6:	f104 0919 	add.w	r9, r4, #25
 80071ca:	e7f4      	b.n	80071b6 <_printf_float+0x456>

080071cc <_printf_common>:
 80071cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d0:	4616      	mov	r6, r2
 80071d2:	4699      	mov	r9, r3
 80071d4:	688a      	ldr	r2, [r1, #8]
 80071d6:	690b      	ldr	r3, [r1, #16]
 80071d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071dc:	4293      	cmp	r3, r2
 80071de:	bfb8      	it	lt
 80071e0:	4613      	movlt	r3, r2
 80071e2:	6033      	str	r3, [r6, #0]
 80071e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071e8:	4607      	mov	r7, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	b10a      	cbz	r2, 80071f2 <_printf_common+0x26>
 80071ee:	3301      	adds	r3, #1
 80071f0:	6033      	str	r3, [r6, #0]
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	0699      	lsls	r1, r3, #26
 80071f6:	bf42      	ittt	mi
 80071f8:	6833      	ldrmi	r3, [r6, #0]
 80071fa:	3302      	addmi	r3, #2
 80071fc:	6033      	strmi	r3, [r6, #0]
 80071fe:	6825      	ldr	r5, [r4, #0]
 8007200:	f015 0506 	ands.w	r5, r5, #6
 8007204:	d106      	bne.n	8007214 <_printf_common+0x48>
 8007206:	f104 0a19 	add.w	sl, r4, #25
 800720a:	68e3      	ldr	r3, [r4, #12]
 800720c:	6832      	ldr	r2, [r6, #0]
 800720e:	1a9b      	subs	r3, r3, r2
 8007210:	42ab      	cmp	r3, r5
 8007212:	dc26      	bgt.n	8007262 <_printf_common+0x96>
 8007214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007218:	1e13      	subs	r3, r2, #0
 800721a:	6822      	ldr	r2, [r4, #0]
 800721c:	bf18      	it	ne
 800721e:	2301      	movne	r3, #1
 8007220:	0692      	lsls	r2, r2, #26
 8007222:	d42b      	bmi.n	800727c <_printf_common+0xb0>
 8007224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007228:	4649      	mov	r1, r9
 800722a:	4638      	mov	r0, r7
 800722c:	47c0      	blx	r8
 800722e:	3001      	adds	r0, #1
 8007230:	d01e      	beq.n	8007270 <_printf_common+0xa4>
 8007232:	6823      	ldr	r3, [r4, #0]
 8007234:	68e5      	ldr	r5, [r4, #12]
 8007236:	6832      	ldr	r2, [r6, #0]
 8007238:	f003 0306 	and.w	r3, r3, #6
 800723c:	2b04      	cmp	r3, #4
 800723e:	bf08      	it	eq
 8007240:	1aad      	subeq	r5, r5, r2
 8007242:	68a3      	ldr	r3, [r4, #8]
 8007244:	6922      	ldr	r2, [r4, #16]
 8007246:	bf0c      	ite	eq
 8007248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800724c:	2500      	movne	r5, #0
 800724e:	4293      	cmp	r3, r2
 8007250:	bfc4      	itt	gt
 8007252:	1a9b      	subgt	r3, r3, r2
 8007254:	18ed      	addgt	r5, r5, r3
 8007256:	2600      	movs	r6, #0
 8007258:	341a      	adds	r4, #26
 800725a:	42b5      	cmp	r5, r6
 800725c:	d11a      	bne.n	8007294 <_printf_common+0xc8>
 800725e:	2000      	movs	r0, #0
 8007260:	e008      	b.n	8007274 <_printf_common+0xa8>
 8007262:	2301      	movs	r3, #1
 8007264:	4652      	mov	r2, sl
 8007266:	4649      	mov	r1, r9
 8007268:	4638      	mov	r0, r7
 800726a:	47c0      	blx	r8
 800726c:	3001      	adds	r0, #1
 800726e:	d103      	bne.n	8007278 <_printf_common+0xac>
 8007270:	f04f 30ff 	mov.w	r0, #4294967295
 8007274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007278:	3501      	adds	r5, #1
 800727a:	e7c6      	b.n	800720a <_printf_common+0x3e>
 800727c:	18e1      	adds	r1, r4, r3
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	2030      	movs	r0, #48	; 0x30
 8007282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007286:	4422      	add	r2, r4
 8007288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800728c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007290:	3302      	adds	r3, #2
 8007292:	e7c7      	b.n	8007224 <_printf_common+0x58>
 8007294:	2301      	movs	r3, #1
 8007296:	4622      	mov	r2, r4
 8007298:	4649      	mov	r1, r9
 800729a:	4638      	mov	r0, r7
 800729c:	47c0      	blx	r8
 800729e:	3001      	adds	r0, #1
 80072a0:	d0e6      	beq.n	8007270 <_printf_common+0xa4>
 80072a2:	3601      	adds	r6, #1
 80072a4:	e7d9      	b.n	800725a <_printf_common+0x8e>
	...

080072a8 <_printf_i>:
 80072a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072ac:	460c      	mov	r4, r1
 80072ae:	4691      	mov	r9, r2
 80072b0:	7e27      	ldrb	r7, [r4, #24]
 80072b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072b4:	2f78      	cmp	r7, #120	; 0x78
 80072b6:	4680      	mov	r8, r0
 80072b8:	469a      	mov	sl, r3
 80072ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072be:	d807      	bhi.n	80072d0 <_printf_i+0x28>
 80072c0:	2f62      	cmp	r7, #98	; 0x62
 80072c2:	d80a      	bhi.n	80072da <_printf_i+0x32>
 80072c4:	2f00      	cmp	r7, #0
 80072c6:	f000 80d8 	beq.w	800747a <_printf_i+0x1d2>
 80072ca:	2f58      	cmp	r7, #88	; 0x58
 80072cc:	f000 80a3 	beq.w	8007416 <_printf_i+0x16e>
 80072d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072d8:	e03a      	b.n	8007350 <_printf_i+0xa8>
 80072da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072de:	2b15      	cmp	r3, #21
 80072e0:	d8f6      	bhi.n	80072d0 <_printf_i+0x28>
 80072e2:	a001      	add	r0, pc, #4	; (adr r0, 80072e8 <_printf_i+0x40>)
 80072e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80072e8:	08007341 	.word	0x08007341
 80072ec:	08007355 	.word	0x08007355
 80072f0:	080072d1 	.word	0x080072d1
 80072f4:	080072d1 	.word	0x080072d1
 80072f8:	080072d1 	.word	0x080072d1
 80072fc:	080072d1 	.word	0x080072d1
 8007300:	08007355 	.word	0x08007355
 8007304:	080072d1 	.word	0x080072d1
 8007308:	080072d1 	.word	0x080072d1
 800730c:	080072d1 	.word	0x080072d1
 8007310:	080072d1 	.word	0x080072d1
 8007314:	08007461 	.word	0x08007461
 8007318:	08007385 	.word	0x08007385
 800731c:	08007443 	.word	0x08007443
 8007320:	080072d1 	.word	0x080072d1
 8007324:	080072d1 	.word	0x080072d1
 8007328:	08007483 	.word	0x08007483
 800732c:	080072d1 	.word	0x080072d1
 8007330:	08007385 	.word	0x08007385
 8007334:	080072d1 	.word	0x080072d1
 8007338:	080072d1 	.word	0x080072d1
 800733c:	0800744b 	.word	0x0800744b
 8007340:	680b      	ldr	r3, [r1, #0]
 8007342:	1d1a      	adds	r2, r3, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	600a      	str	r2, [r1, #0]
 8007348:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800734c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007350:	2301      	movs	r3, #1
 8007352:	e0a3      	b.n	800749c <_printf_i+0x1f4>
 8007354:	6825      	ldr	r5, [r4, #0]
 8007356:	6808      	ldr	r0, [r1, #0]
 8007358:	062e      	lsls	r6, r5, #24
 800735a:	f100 0304 	add.w	r3, r0, #4
 800735e:	d50a      	bpl.n	8007376 <_printf_i+0xce>
 8007360:	6805      	ldr	r5, [r0, #0]
 8007362:	600b      	str	r3, [r1, #0]
 8007364:	2d00      	cmp	r5, #0
 8007366:	da03      	bge.n	8007370 <_printf_i+0xc8>
 8007368:	232d      	movs	r3, #45	; 0x2d
 800736a:	426d      	negs	r5, r5
 800736c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007370:	485e      	ldr	r0, [pc, #376]	; (80074ec <_printf_i+0x244>)
 8007372:	230a      	movs	r3, #10
 8007374:	e019      	b.n	80073aa <_printf_i+0x102>
 8007376:	f015 0f40 	tst.w	r5, #64	; 0x40
 800737a:	6805      	ldr	r5, [r0, #0]
 800737c:	600b      	str	r3, [r1, #0]
 800737e:	bf18      	it	ne
 8007380:	b22d      	sxthne	r5, r5
 8007382:	e7ef      	b.n	8007364 <_printf_i+0xbc>
 8007384:	680b      	ldr	r3, [r1, #0]
 8007386:	6825      	ldr	r5, [r4, #0]
 8007388:	1d18      	adds	r0, r3, #4
 800738a:	6008      	str	r0, [r1, #0]
 800738c:	0628      	lsls	r0, r5, #24
 800738e:	d501      	bpl.n	8007394 <_printf_i+0xec>
 8007390:	681d      	ldr	r5, [r3, #0]
 8007392:	e002      	b.n	800739a <_printf_i+0xf2>
 8007394:	0669      	lsls	r1, r5, #25
 8007396:	d5fb      	bpl.n	8007390 <_printf_i+0xe8>
 8007398:	881d      	ldrh	r5, [r3, #0]
 800739a:	4854      	ldr	r0, [pc, #336]	; (80074ec <_printf_i+0x244>)
 800739c:	2f6f      	cmp	r7, #111	; 0x6f
 800739e:	bf0c      	ite	eq
 80073a0:	2308      	moveq	r3, #8
 80073a2:	230a      	movne	r3, #10
 80073a4:	2100      	movs	r1, #0
 80073a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073aa:	6866      	ldr	r6, [r4, #4]
 80073ac:	60a6      	str	r6, [r4, #8]
 80073ae:	2e00      	cmp	r6, #0
 80073b0:	bfa2      	ittt	ge
 80073b2:	6821      	ldrge	r1, [r4, #0]
 80073b4:	f021 0104 	bicge.w	r1, r1, #4
 80073b8:	6021      	strge	r1, [r4, #0]
 80073ba:	b90d      	cbnz	r5, 80073c0 <_printf_i+0x118>
 80073bc:	2e00      	cmp	r6, #0
 80073be:	d04d      	beq.n	800745c <_printf_i+0x1b4>
 80073c0:	4616      	mov	r6, r2
 80073c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80073c6:	fb03 5711 	mls	r7, r3, r1, r5
 80073ca:	5dc7      	ldrb	r7, [r0, r7]
 80073cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073d0:	462f      	mov	r7, r5
 80073d2:	42bb      	cmp	r3, r7
 80073d4:	460d      	mov	r5, r1
 80073d6:	d9f4      	bls.n	80073c2 <_printf_i+0x11a>
 80073d8:	2b08      	cmp	r3, #8
 80073da:	d10b      	bne.n	80073f4 <_printf_i+0x14c>
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	07df      	lsls	r7, r3, #31
 80073e0:	d508      	bpl.n	80073f4 <_printf_i+0x14c>
 80073e2:	6923      	ldr	r3, [r4, #16]
 80073e4:	6861      	ldr	r1, [r4, #4]
 80073e6:	4299      	cmp	r1, r3
 80073e8:	bfde      	ittt	le
 80073ea:	2330      	movle	r3, #48	; 0x30
 80073ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80073f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80073f4:	1b92      	subs	r2, r2, r6
 80073f6:	6122      	str	r2, [r4, #16]
 80073f8:	f8cd a000 	str.w	sl, [sp]
 80073fc:	464b      	mov	r3, r9
 80073fe:	aa03      	add	r2, sp, #12
 8007400:	4621      	mov	r1, r4
 8007402:	4640      	mov	r0, r8
 8007404:	f7ff fee2 	bl	80071cc <_printf_common>
 8007408:	3001      	adds	r0, #1
 800740a:	d14c      	bne.n	80074a6 <_printf_i+0x1fe>
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
 8007410:	b004      	add	sp, #16
 8007412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007416:	4835      	ldr	r0, [pc, #212]	; (80074ec <_printf_i+0x244>)
 8007418:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	680e      	ldr	r6, [r1, #0]
 8007420:	061f      	lsls	r7, r3, #24
 8007422:	f856 5b04 	ldr.w	r5, [r6], #4
 8007426:	600e      	str	r6, [r1, #0]
 8007428:	d514      	bpl.n	8007454 <_printf_i+0x1ac>
 800742a:	07d9      	lsls	r1, r3, #31
 800742c:	bf44      	itt	mi
 800742e:	f043 0320 	orrmi.w	r3, r3, #32
 8007432:	6023      	strmi	r3, [r4, #0]
 8007434:	b91d      	cbnz	r5, 800743e <_printf_i+0x196>
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	f023 0320 	bic.w	r3, r3, #32
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	2310      	movs	r3, #16
 8007440:	e7b0      	b.n	80073a4 <_printf_i+0xfc>
 8007442:	6823      	ldr	r3, [r4, #0]
 8007444:	f043 0320 	orr.w	r3, r3, #32
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	2378      	movs	r3, #120	; 0x78
 800744c:	4828      	ldr	r0, [pc, #160]	; (80074f0 <_printf_i+0x248>)
 800744e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007452:	e7e3      	b.n	800741c <_printf_i+0x174>
 8007454:	065e      	lsls	r6, r3, #25
 8007456:	bf48      	it	mi
 8007458:	b2ad      	uxthmi	r5, r5
 800745a:	e7e6      	b.n	800742a <_printf_i+0x182>
 800745c:	4616      	mov	r6, r2
 800745e:	e7bb      	b.n	80073d8 <_printf_i+0x130>
 8007460:	680b      	ldr	r3, [r1, #0]
 8007462:	6826      	ldr	r6, [r4, #0]
 8007464:	6960      	ldr	r0, [r4, #20]
 8007466:	1d1d      	adds	r5, r3, #4
 8007468:	600d      	str	r5, [r1, #0]
 800746a:	0635      	lsls	r5, r6, #24
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	d501      	bpl.n	8007474 <_printf_i+0x1cc>
 8007470:	6018      	str	r0, [r3, #0]
 8007472:	e002      	b.n	800747a <_printf_i+0x1d2>
 8007474:	0671      	lsls	r1, r6, #25
 8007476:	d5fb      	bpl.n	8007470 <_printf_i+0x1c8>
 8007478:	8018      	strh	r0, [r3, #0]
 800747a:	2300      	movs	r3, #0
 800747c:	6123      	str	r3, [r4, #16]
 800747e:	4616      	mov	r6, r2
 8007480:	e7ba      	b.n	80073f8 <_printf_i+0x150>
 8007482:	680b      	ldr	r3, [r1, #0]
 8007484:	1d1a      	adds	r2, r3, #4
 8007486:	600a      	str	r2, [r1, #0]
 8007488:	681e      	ldr	r6, [r3, #0]
 800748a:	6862      	ldr	r2, [r4, #4]
 800748c:	2100      	movs	r1, #0
 800748e:	4630      	mov	r0, r6
 8007490:	f7f8 fed6 	bl	8000240 <memchr>
 8007494:	b108      	cbz	r0, 800749a <_printf_i+0x1f2>
 8007496:	1b80      	subs	r0, r0, r6
 8007498:	6060      	str	r0, [r4, #4]
 800749a:	6863      	ldr	r3, [r4, #4]
 800749c:	6123      	str	r3, [r4, #16]
 800749e:	2300      	movs	r3, #0
 80074a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074a4:	e7a8      	b.n	80073f8 <_printf_i+0x150>
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	4632      	mov	r2, r6
 80074aa:	4649      	mov	r1, r9
 80074ac:	4640      	mov	r0, r8
 80074ae:	47d0      	blx	sl
 80074b0:	3001      	adds	r0, #1
 80074b2:	d0ab      	beq.n	800740c <_printf_i+0x164>
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	079b      	lsls	r3, r3, #30
 80074b8:	d413      	bmi.n	80074e2 <_printf_i+0x23a>
 80074ba:	68e0      	ldr	r0, [r4, #12]
 80074bc:	9b03      	ldr	r3, [sp, #12]
 80074be:	4298      	cmp	r0, r3
 80074c0:	bfb8      	it	lt
 80074c2:	4618      	movlt	r0, r3
 80074c4:	e7a4      	b.n	8007410 <_printf_i+0x168>
 80074c6:	2301      	movs	r3, #1
 80074c8:	4632      	mov	r2, r6
 80074ca:	4649      	mov	r1, r9
 80074cc:	4640      	mov	r0, r8
 80074ce:	47d0      	blx	sl
 80074d0:	3001      	adds	r0, #1
 80074d2:	d09b      	beq.n	800740c <_printf_i+0x164>
 80074d4:	3501      	adds	r5, #1
 80074d6:	68e3      	ldr	r3, [r4, #12]
 80074d8:	9903      	ldr	r1, [sp, #12]
 80074da:	1a5b      	subs	r3, r3, r1
 80074dc:	42ab      	cmp	r3, r5
 80074de:	dcf2      	bgt.n	80074c6 <_printf_i+0x21e>
 80074e0:	e7eb      	b.n	80074ba <_printf_i+0x212>
 80074e2:	2500      	movs	r5, #0
 80074e4:	f104 0619 	add.w	r6, r4, #25
 80074e8:	e7f5      	b.n	80074d6 <_printf_i+0x22e>
 80074ea:	bf00      	nop
 80074ec:	0800b5ac 	.word	0x0800b5ac
 80074f0:	0800b5bd 	.word	0x0800b5bd

080074f4 <_sbrk_r>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4d06      	ldr	r5, [pc, #24]	; (8007510 <_sbrk_r+0x1c>)
 80074f8:	2300      	movs	r3, #0
 80074fa:	4604      	mov	r4, r0
 80074fc:	4608      	mov	r0, r1
 80074fe:	602b      	str	r3, [r5, #0]
 8007500:	f7fa f87a 	bl	80015f8 <_sbrk>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d102      	bne.n	800750e <_sbrk_r+0x1a>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	b103      	cbz	r3, 800750e <_sbrk_r+0x1a>
 800750c:	6023      	str	r3, [r4, #0]
 800750e:	bd38      	pop	{r3, r4, r5, pc}
 8007510:	200005b4 	.word	0x200005b4

08007514 <_raise_r>:
 8007514:	291f      	cmp	r1, #31
 8007516:	b538      	push	{r3, r4, r5, lr}
 8007518:	4604      	mov	r4, r0
 800751a:	460d      	mov	r5, r1
 800751c:	d904      	bls.n	8007528 <_raise_r+0x14>
 800751e:	2316      	movs	r3, #22
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	f04f 30ff 	mov.w	r0, #4294967295
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800752a:	b112      	cbz	r2, 8007532 <_raise_r+0x1e>
 800752c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007530:	b94b      	cbnz	r3, 8007546 <_raise_r+0x32>
 8007532:	4620      	mov	r0, r4
 8007534:	f000 f830 	bl	8007598 <_getpid_r>
 8007538:	462a      	mov	r2, r5
 800753a:	4601      	mov	r1, r0
 800753c:	4620      	mov	r0, r4
 800753e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007542:	f000 b817 	b.w	8007574 <_kill_r>
 8007546:	2b01      	cmp	r3, #1
 8007548:	d00a      	beq.n	8007560 <_raise_r+0x4c>
 800754a:	1c59      	adds	r1, r3, #1
 800754c:	d103      	bne.n	8007556 <_raise_r+0x42>
 800754e:	2316      	movs	r3, #22
 8007550:	6003      	str	r3, [r0, #0]
 8007552:	2001      	movs	r0, #1
 8007554:	e7e7      	b.n	8007526 <_raise_r+0x12>
 8007556:	2400      	movs	r4, #0
 8007558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800755c:	4628      	mov	r0, r5
 800755e:	4798      	blx	r3
 8007560:	2000      	movs	r0, #0
 8007562:	e7e0      	b.n	8007526 <_raise_r+0x12>

08007564 <raise>:
 8007564:	4b02      	ldr	r3, [pc, #8]	; (8007570 <raise+0xc>)
 8007566:	4601      	mov	r1, r0
 8007568:	6818      	ldr	r0, [r3, #0]
 800756a:	f7ff bfd3 	b.w	8007514 <_raise_r>
 800756e:	bf00      	nop
 8007570:	20000014 	.word	0x20000014

08007574 <_kill_r>:
 8007574:	b538      	push	{r3, r4, r5, lr}
 8007576:	4d07      	ldr	r5, [pc, #28]	; (8007594 <_kill_r+0x20>)
 8007578:	2300      	movs	r3, #0
 800757a:	4604      	mov	r4, r0
 800757c:	4608      	mov	r0, r1
 800757e:	4611      	mov	r1, r2
 8007580:	602b      	str	r3, [r5, #0]
 8007582:	f7f9 ffb1 	bl	80014e8 <_kill>
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	d102      	bne.n	8007590 <_kill_r+0x1c>
 800758a:	682b      	ldr	r3, [r5, #0]
 800758c:	b103      	cbz	r3, 8007590 <_kill_r+0x1c>
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	bd38      	pop	{r3, r4, r5, pc}
 8007592:	bf00      	nop
 8007594:	200005b4 	.word	0x200005b4

08007598 <_getpid_r>:
 8007598:	f7f9 bf9e 	b.w	80014d8 <_getpid>

0800759c <siprintf>:
 800759c:	b40e      	push	{r1, r2, r3}
 800759e:	b500      	push	{lr}
 80075a0:	b09c      	sub	sp, #112	; 0x70
 80075a2:	ab1d      	add	r3, sp, #116	; 0x74
 80075a4:	9002      	str	r0, [sp, #8]
 80075a6:	9006      	str	r0, [sp, #24]
 80075a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80075ac:	4809      	ldr	r0, [pc, #36]	; (80075d4 <siprintf+0x38>)
 80075ae:	9107      	str	r1, [sp, #28]
 80075b0:	9104      	str	r1, [sp, #16]
 80075b2:	4909      	ldr	r1, [pc, #36]	; (80075d8 <siprintf+0x3c>)
 80075b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80075b8:	9105      	str	r1, [sp, #20]
 80075ba:	6800      	ldr	r0, [r0, #0]
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	a902      	add	r1, sp, #8
 80075c0:	f001 ff5c 	bl	800947c <_svfiprintf_r>
 80075c4:	9b02      	ldr	r3, [sp, #8]
 80075c6:	2200      	movs	r2, #0
 80075c8:	701a      	strb	r2, [r3, #0]
 80075ca:	b01c      	add	sp, #112	; 0x70
 80075cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075d0:	b003      	add	sp, #12
 80075d2:	4770      	bx	lr
 80075d4:	20000014 	.word	0x20000014
 80075d8:	ffff0208 	.word	0xffff0208

080075dc <strcpy>:
 80075dc:	4603      	mov	r3, r0
 80075de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075e2:	f803 2b01 	strb.w	r2, [r3], #1
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	d1f9      	bne.n	80075de <strcpy+0x2>
 80075ea:	4770      	bx	lr

080075ec <strncmp>:
 80075ec:	b510      	push	{r4, lr}
 80075ee:	b16a      	cbz	r2, 800760c <strncmp+0x20>
 80075f0:	3901      	subs	r1, #1
 80075f2:	1884      	adds	r4, r0, r2
 80075f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80075f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d103      	bne.n	8007608 <strncmp+0x1c>
 8007600:	42a0      	cmp	r0, r4
 8007602:	d001      	beq.n	8007608 <strncmp+0x1c>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1f5      	bne.n	80075f4 <strncmp+0x8>
 8007608:	1a98      	subs	r0, r3, r2
 800760a:	bd10      	pop	{r4, pc}
 800760c:	4610      	mov	r0, r2
 800760e:	e7fc      	b.n	800760a <strncmp+0x1e>

08007610 <_strtol_l.isra.0>:
 8007610:	2b01      	cmp	r3, #1
 8007612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007616:	d001      	beq.n	800761c <_strtol_l.isra.0+0xc>
 8007618:	2b24      	cmp	r3, #36	; 0x24
 800761a:	d906      	bls.n	800762a <_strtol_l.isra.0+0x1a>
 800761c:	f7fe fe52 	bl	80062c4 <__errno>
 8007620:	2316      	movs	r3, #22
 8007622:	6003      	str	r3, [r0, #0]
 8007624:	2000      	movs	r0, #0
 8007626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762a:	4f3a      	ldr	r7, [pc, #232]	; (8007714 <_strtol_l.isra.0+0x104>)
 800762c:	468e      	mov	lr, r1
 800762e:	4676      	mov	r6, lr
 8007630:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007634:	5de5      	ldrb	r5, [r4, r7]
 8007636:	f015 0508 	ands.w	r5, r5, #8
 800763a:	d1f8      	bne.n	800762e <_strtol_l.isra.0+0x1e>
 800763c:	2c2d      	cmp	r4, #45	; 0x2d
 800763e:	d134      	bne.n	80076aa <_strtol_l.isra.0+0x9a>
 8007640:	f89e 4000 	ldrb.w	r4, [lr]
 8007644:	f04f 0801 	mov.w	r8, #1
 8007648:	f106 0e02 	add.w	lr, r6, #2
 800764c:	2b00      	cmp	r3, #0
 800764e:	d05c      	beq.n	800770a <_strtol_l.isra.0+0xfa>
 8007650:	2b10      	cmp	r3, #16
 8007652:	d10c      	bne.n	800766e <_strtol_l.isra.0+0x5e>
 8007654:	2c30      	cmp	r4, #48	; 0x30
 8007656:	d10a      	bne.n	800766e <_strtol_l.isra.0+0x5e>
 8007658:	f89e 4000 	ldrb.w	r4, [lr]
 800765c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007660:	2c58      	cmp	r4, #88	; 0x58
 8007662:	d14d      	bne.n	8007700 <_strtol_l.isra.0+0xf0>
 8007664:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007668:	2310      	movs	r3, #16
 800766a:	f10e 0e02 	add.w	lr, lr, #2
 800766e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007672:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007676:	2600      	movs	r6, #0
 8007678:	fbbc f9f3 	udiv	r9, ip, r3
 800767c:	4635      	mov	r5, r6
 800767e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007682:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007686:	2f09      	cmp	r7, #9
 8007688:	d818      	bhi.n	80076bc <_strtol_l.isra.0+0xac>
 800768a:	463c      	mov	r4, r7
 800768c:	42a3      	cmp	r3, r4
 800768e:	dd24      	ble.n	80076da <_strtol_l.isra.0+0xca>
 8007690:	2e00      	cmp	r6, #0
 8007692:	db1f      	blt.n	80076d4 <_strtol_l.isra.0+0xc4>
 8007694:	45a9      	cmp	r9, r5
 8007696:	d31d      	bcc.n	80076d4 <_strtol_l.isra.0+0xc4>
 8007698:	d101      	bne.n	800769e <_strtol_l.isra.0+0x8e>
 800769a:	45a2      	cmp	sl, r4
 800769c:	db1a      	blt.n	80076d4 <_strtol_l.isra.0+0xc4>
 800769e:	fb05 4503 	mla	r5, r5, r3, r4
 80076a2:	2601      	movs	r6, #1
 80076a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80076a8:	e7eb      	b.n	8007682 <_strtol_l.isra.0+0x72>
 80076aa:	2c2b      	cmp	r4, #43	; 0x2b
 80076ac:	bf08      	it	eq
 80076ae:	f89e 4000 	ldrbeq.w	r4, [lr]
 80076b2:	46a8      	mov	r8, r5
 80076b4:	bf08      	it	eq
 80076b6:	f106 0e02 	addeq.w	lr, r6, #2
 80076ba:	e7c7      	b.n	800764c <_strtol_l.isra.0+0x3c>
 80076bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80076c0:	2f19      	cmp	r7, #25
 80076c2:	d801      	bhi.n	80076c8 <_strtol_l.isra.0+0xb8>
 80076c4:	3c37      	subs	r4, #55	; 0x37
 80076c6:	e7e1      	b.n	800768c <_strtol_l.isra.0+0x7c>
 80076c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80076cc:	2f19      	cmp	r7, #25
 80076ce:	d804      	bhi.n	80076da <_strtol_l.isra.0+0xca>
 80076d0:	3c57      	subs	r4, #87	; 0x57
 80076d2:	e7db      	b.n	800768c <_strtol_l.isra.0+0x7c>
 80076d4:	f04f 36ff 	mov.w	r6, #4294967295
 80076d8:	e7e4      	b.n	80076a4 <_strtol_l.isra.0+0x94>
 80076da:	2e00      	cmp	r6, #0
 80076dc:	da05      	bge.n	80076ea <_strtol_l.isra.0+0xda>
 80076de:	2322      	movs	r3, #34	; 0x22
 80076e0:	6003      	str	r3, [r0, #0]
 80076e2:	4665      	mov	r5, ip
 80076e4:	b942      	cbnz	r2, 80076f8 <_strtol_l.isra.0+0xe8>
 80076e6:	4628      	mov	r0, r5
 80076e8:	e79d      	b.n	8007626 <_strtol_l.isra.0+0x16>
 80076ea:	f1b8 0f00 	cmp.w	r8, #0
 80076ee:	d000      	beq.n	80076f2 <_strtol_l.isra.0+0xe2>
 80076f0:	426d      	negs	r5, r5
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	d0f7      	beq.n	80076e6 <_strtol_l.isra.0+0xd6>
 80076f6:	b10e      	cbz	r6, 80076fc <_strtol_l.isra.0+0xec>
 80076f8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80076fc:	6011      	str	r1, [r2, #0]
 80076fe:	e7f2      	b.n	80076e6 <_strtol_l.isra.0+0xd6>
 8007700:	2430      	movs	r4, #48	; 0x30
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1b3      	bne.n	800766e <_strtol_l.isra.0+0x5e>
 8007706:	2308      	movs	r3, #8
 8007708:	e7b1      	b.n	800766e <_strtol_l.isra.0+0x5e>
 800770a:	2c30      	cmp	r4, #48	; 0x30
 800770c:	d0a4      	beq.n	8007658 <_strtol_l.isra.0+0x48>
 800770e:	230a      	movs	r3, #10
 8007710:	e7ad      	b.n	800766e <_strtol_l.isra.0+0x5e>
 8007712:	bf00      	nop
 8007714:	0800b647 	.word	0x0800b647

08007718 <_strtol_r>:
 8007718:	f7ff bf7a 	b.w	8007610 <_strtol_l.isra.0>

0800771c <strtol>:
 800771c:	4613      	mov	r3, r2
 800771e:	460a      	mov	r2, r1
 8007720:	4601      	mov	r1, r0
 8007722:	4802      	ldr	r0, [pc, #8]	; (800772c <strtol+0x10>)
 8007724:	6800      	ldr	r0, [r0, #0]
 8007726:	f7ff bf73 	b.w	8007610 <_strtol_l.isra.0>
 800772a:	bf00      	nop
 800772c:	20000014 	.word	0x20000014

08007730 <_strtoul_l.isra.0>:
 8007730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007734:	4e3b      	ldr	r6, [pc, #236]	; (8007824 <_strtoul_l.isra.0+0xf4>)
 8007736:	4686      	mov	lr, r0
 8007738:	468c      	mov	ip, r1
 800773a:	4660      	mov	r0, ip
 800773c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007740:	5da5      	ldrb	r5, [r4, r6]
 8007742:	f015 0508 	ands.w	r5, r5, #8
 8007746:	d1f8      	bne.n	800773a <_strtoul_l.isra.0+0xa>
 8007748:	2c2d      	cmp	r4, #45	; 0x2d
 800774a:	d134      	bne.n	80077b6 <_strtoul_l.isra.0+0x86>
 800774c:	f89c 4000 	ldrb.w	r4, [ip]
 8007750:	f04f 0801 	mov.w	r8, #1
 8007754:	f100 0c02 	add.w	ip, r0, #2
 8007758:	2b00      	cmp	r3, #0
 800775a:	d05e      	beq.n	800781a <_strtoul_l.isra.0+0xea>
 800775c:	2b10      	cmp	r3, #16
 800775e:	d10c      	bne.n	800777a <_strtoul_l.isra.0+0x4a>
 8007760:	2c30      	cmp	r4, #48	; 0x30
 8007762:	d10a      	bne.n	800777a <_strtoul_l.isra.0+0x4a>
 8007764:	f89c 0000 	ldrb.w	r0, [ip]
 8007768:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800776c:	2858      	cmp	r0, #88	; 0x58
 800776e:	d14f      	bne.n	8007810 <_strtoul_l.isra.0+0xe0>
 8007770:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007774:	2310      	movs	r3, #16
 8007776:	f10c 0c02 	add.w	ip, ip, #2
 800777a:	f04f 37ff 	mov.w	r7, #4294967295
 800777e:	2500      	movs	r5, #0
 8007780:	fbb7 f7f3 	udiv	r7, r7, r3
 8007784:	fb03 f907 	mul.w	r9, r3, r7
 8007788:	ea6f 0909 	mvn.w	r9, r9
 800778c:	4628      	mov	r0, r5
 800778e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007792:	2e09      	cmp	r6, #9
 8007794:	d818      	bhi.n	80077c8 <_strtoul_l.isra.0+0x98>
 8007796:	4634      	mov	r4, r6
 8007798:	42a3      	cmp	r3, r4
 800779a:	dd24      	ble.n	80077e6 <_strtoul_l.isra.0+0xb6>
 800779c:	2d00      	cmp	r5, #0
 800779e:	db1f      	blt.n	80077e0 <_strtoul_l.isra.0+0xb0>
 80077a0:	4287      	cmp	r7, r0
 80077a2:	d31d      	bcc.n	80077e0 <_strtoul_l.isra.0+0xb0>
 80077a4:	d101      	bne.n	80077aa <_strtoul_l.isra.0+0x7a>
 80077a6:	45a1      	cmp	r9, r4
 80077a8:	db1a      	blt.n	80077e0 <_strtoul_l.isra.0+0xb0>
 80077aa:	fb00 4003 	mla	r0, r0, r3, r4
 80077ae:	2501      	movs	r5, #1
 80077b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80077b4:	e7eb      	b.n	800778e <_strtoul_l.isra.0+0x5e>
 80077b6:	2c2b      	cmp	r4, #43	; 0x2b
 80077b8:	bf08      	it	eq
 80077ba:	f89c 4000 	ldrbeq.w	r4, [ip]
 80077be:	46a8      	mov	r8, r5
 80077c0:	bf08      	it	eq
 80077c2:	f100 0c02 	addeq.w	ip, r0, #2
 80077c6:	e7c7      	b.n	8007758 <_strtoul_l.isra.0+0x28>
 80077c8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80077cc:	2e19      	cmp	r6, #25
 80077ce:	d801      	bhi.n	80077d4 <_strtoul_l.isra.0+0xa4>
 80077d0:	3c37      	subs	r4, #55	; 0x37
 80077d2:	e7e1      	b.n	8007798 <_strtoul_l.isra.0+0x68>
 80077d4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80077d8:	2e19      	cmp	r6, #25
 80077da:	d804      	bhi.n	80077e6 <_strtoul_l.isra.0+0xb6>
 80077dc:	3c57      	subs	r4, #87	; 0x57
 80077de:	e7db      	b.n	8007798 <_strtoul_l.isra.0+0x68>
 80077e0:	f04f 35ff 	mov.w	r5, #4294967295
 80077e4:	e7e4      	b.n	80077b0 <_strtoul_l.isra.0+0x80>
 80077e6:	2d00      	cmp	r5, #0
 80077e8:	da07      	bge.n	80077fa <_strtoul_l.isra.0+0xca>
 80077ea:	2322      	movs	r3, #34	; 0x22
 80077ec:	f8ce 3000 	str.w	r3, [lr]
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	b942      	cbnz	r2, 8007808 <_strtoul_l.isra.0+0xd8>
 80077f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077fa:	f1b8 0f00 	cmp.w	r8, #0
 80077fe:	d000      	beq.n	8007802 <_strtoul_l.isra.0+0xd2>
 8007800:	4240      	negs	r0, r0
 8007802:	2a00      	cmp	r2, #0
 8007804:	d0f7      	beq.n	80077f6 <_strtoul_l.isra.0+0xc6>
 8007806:	b10d      	cbz	r5, 800780c <_strtoul_l.isra.0+0xdc>
 8007808:	f10c 31ff 	add.w	r1, ip, #4294967295
 800780c:	6011      	str	r1, [r2, #0]
 800780e:	e7f2      	b.n	80077f6 <_strtoul_l.isra.0+0xc6>
 8007810:	2430      	movs	r4, #48	; 0x30
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1b1      	bne.n	800777a <_strtoul_l.isra.0+0x4a>
 8007816:	2308      	movs	r3, #8
 8007818:	e7af      	b.n	800777a <_strtoul_l.isra.0+0x4a>
 800781a:	2c30      	cmp	r4, #48	; 0x30
 800781c:	d0a2      	beq.n	8007764 <_strtoul_l.isra.0+0x34>
 800781e:	230a      	movs	r3, #10
 8007820:	e7ab      	b.n	800777a <_strtoul_l.isra.0+0x4a>
 8007822:	bf00      	nop
 8007824:	0800b647 	.word	0x0800b647

08007828 <_strtoul_r>:
 8007828:	f7ff bf82 	b.w	8007730 <_strtoul_l.isra.0>

0800782c <strtoul>:
 800782c:	4613      	mov	r3, r2
 800782e:	460a      	mov	r2, r1
 8007830:	4601      	mov	r1, r0
 8007832:	4802      	ldr	r0, [pc, #8]	; (800783c <strtoul+0x10>)
 8007834:	6800      	ldr	r0, [r0, #0]
 8007836:	f7ff bf7b 	b.w	8007730 <_strtoul_l.isra.0>
 800783a:	bf00      	nop
 800783c:	20000014 	.word	0x20000014

08007840 <__tzcalc_limits>:
 8007840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	4680      	mov	r8, r0
 8007846:	f001 f92f 	bl	8008aa8 <__gettzinfo>
 800784a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800784e:	4598      	cmp	r8, r3
 8007850:	f340 8098 	ble.w	8007984 <__tzcalc_limits+0x144>
 8007854:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8007858:	4443      	add	r3, r8
 800785a:	109b      	asrs	r3, r3, #2
 800785c:	f240 126d 	movw	r2, #365	; 0x16d
 8007860:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8007864:	fb02 3505 	mla	r5, r2, r5, r3
 8007868:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800786c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8007870:	fb93 f3f2 	sdiv	r3, r3, r2
 8007874:	441d      	add	r5, r3
 8007876:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800787a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800787e:	fb98 f7f3 	sdiv	r7, r8, r3
 8007882:	fb03 8717 	mls	r7, r3, r7, r8
 8007886:	4442      	add	r2, r8
 8007888:	fab7 fc87 	clz	ip, r7
 800788c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007890:	f008 0303 	and.w	r3, r8, #3
 8007894:	4415      	add	r5, r2
 8007896:	2264      	movs	r2, #100	; 0x64
 8007898:	f8c0 8004 	str.w	r8, [r0, #4]
 800789c:	fb98 f6f2 	sdiv	r6, r8, r2
 80078a0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80078a4:	fb02 8616 	mls	r6, r2, r6, r8
 80078a8:	4604      	mov	r4, r0
 80078aa:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	f04f 0e07 	mov.w	lr, #7
 80078b4:	7a22      	ldrb	r2, [r4, #8]
 80078b6:	6963      	ldr	r3, [r4, #20]
 80078b8:	2a4a      	cmp	r2, #74	; 0x4a
 80078ba:	d128      	bne.n	800790e <__tzcalc_limits+0xce>
 80078bc:	9900      	ldr	r1, [sp, #0]
 80078be:	18ea      	adds	r2, r5, r3
 80078c0:	b901      	cbnz	r1, 80078c4 <__tzcalc_limits+0x84>
 80078c2:	b906      	cbnz	r6, 80078c6 <__tzcalc_limits+0x86>
 80078c4:	bb0f      	cbnz	r7, 800790a <__tzcalc_limits+0xca>
 80078c6:	2b3b      	cmp	r3, #59	; 0x3b
 80078c8:	bfd4      	ite	le
 80078ca:	2300      	movle	r3, #0
 80078cc:	2301      	movgt	r3, #1
 80078ce:	4413      	add	r3, r2
 80078d0:	1e5a      	subs	r2, r3, #1
 80078d2:	69a3      	ldr	r3, [r4, #24]
 80078d4:	492c      	ldr	r1, [pc, #176]	; (8007988 <__tzcalc_limits+0x148>)
 80078d6:	fb01 3202 	mla	r2, r1, r2, r3
 80078da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80078dc:	4413      	add	r3, r2
 80078de:	461a      	mov	r2, r3
 80078e0:	17db      	asrs	r3, r3, #31
 80078e2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80078e6:	3428      	adds	r4, #40	; 0x28
 80078e8:	45a3      	cmp	fp, r4
 80078ea:	d1e3      	bne.n	80078b4 <__tzcalc_limits+0x74>
 80078ec:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80078f0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80078f4:	4294      	cmp	r4, r2
 80078f6:	eb75 0303 	sbcs.w	r3, r5, r3
 80078fa:	bfb4      	ite	lt
 80078fc:	2301      	movlt	r3, #1
 80078fe:	2300      	movge	r3, #0
 8007900:	6003      	str	r3, [r0, #0]
 8007902:	2001      	movs	r0, #1
 8007904:	b003      	add	sp, #12
 8007906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790a:	2300      	movs	r3, #0
 800790c:	e7df      	b.n	80078ce <__tzcalc_limits+0x8e>
 800790e:	2a44      	cmp	r2, #68	; 0x44
 8007910:	d101      	bne.n	8007916 <__tzcalc_limits+0xd6>
 8007912:	18ea      	adds	r2, r5, r3
 8007914:	e7dd      	b.n	80078d2 <__tzcalc_limits+0x92>
 8007916:	9a00      	ldr	r2, [sp, #0]
 8007918:	bb72      	cbnz	r2, 8007978 <__tzcalc_limits+0x138>
 800791a:	2e00      	cmp	r6, #0
 800791c:	bf0c      	ite	eq
 800791e:	46e0      	moveq	r8, ip
 8007920:	f04f 0801 	movne.w	r8, #1
 8007924:	4919      	ldr	r1, [pc, #100]	; (800798c <__tzcalc_limits+0x14c>)
 8007926:	68e2      	ldr	r2, [r4, #12]
 8007928:	9201      	str	r2, [sp, #4]
 800792a:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800792e:	fb0a 1808 	mla	r8, sl, r8, r1
 8007932:	462a      	mov	r2, r5
 8007934:	f04f 0900 	mov.w	r9, #0
 8007938:	f1a8 0804 	sub.w	r8, r8, #4
 800793c:	9901      	ldr	r1, [sp, #4]
 800793e:	f109 0901 	add.w	r9, r9, #1
 8007942:	4549      	cmp	r1, r9
 8007944:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8007948:	dc18      	bgt.n	800797c <__tzcalc_limits+0x13c>
 800794a:	f102 0804 	add.w	r8, r2, #4
 800794e:	fb98 f9fe 	sdiv	r9, r8, lr
 8007952:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8007956:	eba8 0909 	sub.w	r9, r8, r9
 800795a:	ebb3 0909 	subs.w	r9, r3, r9
 800795e:	6923      	ldr	r3, [r4, #16]
 8007960:	f103 33ff 	add.w	r3, r3, #4294967295
 8007964:	bf48      	it	mi
 8007966:	f109 0907 	addmi.w	r9, r9, #7
 800796a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800796e:	444b      	add	r3, r9
 8007970:	4553      	cmp	r3, sl
 8007972:	da05      	bge.n	8007980 <__tzcalc_limits+0x140>
 8007974:	441a      	add	r2, r3
 8007976:	e7ac      	b.n	80078d2 <__tzcalc_limits+0x92>
 8007978:	46e0      	mov	r8, ip
 800797a:	e7d3      	b.n	8007924 <__tzcalc_limits+0xe4>
 800797c:	4452      	add	r2, sl
 800797e:	e7dd      	b.n	800793c <__tzcalc_limits+0xfc>
 8007980:	3b07      	subs	r3, #7
 8007982:	e7f5      	b.n	8007970 <__tzcalc_limits+0x130>
 8007984:	2000      	movs	r0, #0
 8007986:	e7bd      	b.n	8007904 <__tzcalc_limits+0xc4>
 8007988:	00015180 	.word	0x00015180
 800798c:	0800b53c 	.word	0x0800b53c

08007990 <__tz_lock>:
 8007990:	4801      	ldr	r0, [pc, #4]	; (8007998 <__tz_lock+0x8>)
 8007992:	f001 b942 	b.w	8008c1a <__retarget_lock_acquire>
 8007996:	bf00      	nop
 8007998:	200005af 	.word	0x200005af

0800799c <__tz_unlock>:
 800799c:	4801      	ldr	r0, [pc, #4]	; (80079a4 <__tz_unlock+0x8>)
 800799e:	f001 b93e 	b.w	8008c1e <__retarget_lock_release>
 80079a2:	bf00      	nop
 80079a4:	200005af 	.word	0x200005af

080079a8 <_tzset_unlocked>:
 80079a8:	4b01      	ldr	r3, [pc, #4]	; (80079b0 <_tzset_unlocked+0x8>)
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	f000 b802 	b.w	80079b4 <_tzset_unlocked_r>
 80079b0:	20000014 	.word	0x20000014

080079b4 <_tzset_unlocked_r>:
 80079b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	b08d      	sub	sp, #52	; 0x34
 80079ba:	4607      	mov	r7, r0
 80079bc:	f001 f874 	bl	8008aa8 <__gettzinfo>
 80079c0:	49ae      	ldr	r1, [pc, #696]	; (8007c7c <_tzset_unlocked_r+0x2c8>)
 80079c2:	4eaf      	ldr	r6, [pc, #700]	; (8007c80 <_tzset_unlocked_r+0x2cc>)
 80079c4:	4605      	mov	r5, r0
 80079c6:	4638      	mov	r0, r7
 80079c8:	f001 f866 	bl	8008a98 <_getenv_r>
 80079cc:	4604      	mov	r4, r0
 80079ce:	b970      	cbnz	r0, 80079ee <_tzset_unlocked_r+0x3a>
 80079d0:	4bac      	ldr	r3, [pc, #688]	; (8007c84 <_tzset_unlocked_r+0x2d0>)
 80079d2:	4aad      	ldr	r2, [pc, #692]	; (8007c88 <_tzset_unlocked_r+0x2d4>)
 80079d4:	6018      	str	r0, [r3, #0]
 80079d6:	4bad      	ldr	r3, [pc, #692]	; (8007c8c <_tzset_unlocked_r+0x2d8>)
 80079d8:	6018      	str	r0, [r3, #0]
 80079da:	4bad      	ldr	r3, [pc, #692]	; (8007c90 <_tzset_unlocked_r+0x2dc>)
 80079dc:	6830      	ldr	r0, [r6, #0]
 80079de:	e9c3 2200 	strd	r2, r2, [r3]
 80079e2:	f7fe fdbd 	bl	8006560 <free>
 80079e6:	6034      	str	r4, [r6, #0]
 80079e8:	b00d      	add	sp, #52	; 0x34
 80079ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ee:	6831      	ldr	r1, [r6, #0]
 80079f0:	2900      	cmp	r1, #0
 80079f2:	d15f      	bne.n	8007ab4 <_tzset_unlocked_r+0x100>
 80079f4:	6830      	ldr	r0, [r6, #0]
 80079f6:	f7fe fdb3 	bl	8006560 <free>
 80079fa:	4620      	mov	r0, r4
 80079fc:	f7f8 fc12 	bl	8000224 <strlen>
 8007a00:	1c41      	adds	r1, r0, #1
 8007a02:	4638      	mov	r0, r7
 8007a04:	f7ff f8b2 	bl	8006b6c <_malloc_r>
 8007a08:	6030      	str	r0, [r6, #0]
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d157      	bne.n	8007abe <_tzset_unlocked_r+0x10a>
 8007a0e:	7823      	ldrb	r3, [r4, #0]
 8007a10:	4aa0      	ldr	r2, [pc, #640]	; (8007c94 <_tzset_unlocked_r+0x2e0>)
 8007a12:	49a1      	ldr	r1, [pc, #644]	; (8007c98 <_tzset_unlocked_r+0x2e4>)
 8007a14:	2b3a      	cmp	r3, #58	; 0x3a
 8007a16:	bf08      	it	eq
 8007a18:	3401      	addeq	r4, #1
 8007a1a:	ae0a      	add	r6, sp, #40	; 0x28
 8007a1c:	4633      	mov	r3, r6
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f001 ff86 	bl	8009930 <siscanf>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	dddf      	ble.n	80079e8 <_tzset_unlocked_r+0x34>
 8007a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2a:	18e7      	adds	r7, r4, r3
 8007a2c:	5ce3      	ldrb	r3, [r4, r3]
 8007a2e:	2b2d      	cmp	r3, #45	; 0x2d
 8007a30:	d149      	bne.n	8007ac6 <_tzset_unlocked_r+0x112>
 8007a32:	3701      	adds	r7, #1
 8007a34:	f04f 34ff 	mov.w	r4, #4294967295
 8007a38:	f10d 0a20 	add.w	sl, sp, #32
 8007a3c:	f10d 0b1e 	add.w	fp, sp, #30
 8007a40:	f04f 0800 	mov.w	r8, #0
 8007a44:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8007a48:	4994      	ldr	r1, [pc, #592]	; (8007c9c <_tzset_unlocked_r+0x2e8>)
 8007a4a:	9603      	str	r6, [sp, #12]
 8007a4c:	f8cd b000 	str.w	fp, [sp]
 8007a50:	4633      	mov	r3, r6
 8007a52:	aa07      	add	r2, sp, #28
 8007a54:	4638      	mov	r0, r7
 8007a56:	f8ad 801e 	strh.w	r8, [sp, #30]
 8007a5a:	f8ad 8020 	strh.w	r8, [sp, #32]
 8007a5e:	f001 ff67 	bl	8009930 <siscanf>
 8007a62:	4540      	cmp	r0, r8
 8007a64:	ddc0      	ble.n	80079e8 <_tzset_unlocked_r+0x34>
 8007a66:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007a6a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007a6e:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8007ca8 <_tzset_unlocked_r+0x2f4>
 8007a72:	213c      	movs	r1, #60	; 0x3c
 8007a74:	fb01 2203 	mla	r2, r1, r3, r2
 8007a78:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007a7c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007a80:	fb01 2303 	mla	r3, r1, r3, r2
 8007a84:	435c      	muls	r4, r3
 8007a86:	62ac      	str	r4, [r5, #40]	; 0x28
 8007a88:	4c81      	ldr	r4, [pc, #516]	; (8007c90 <_tzset_unlocked_r+0x2dc>)
 8007a8a:	4b82      	ldr	r3, [pc, #520]	; (8007c94 <_tzset_unlocked_r+0x2e0>)
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a90:	4981      	ldr	r1, [pc, #516]	; (8007c98 <_tzset_unlocked_r+0x2e4>)
 8007a92:	441f      	add	r7, r3
 8007a94:	464a      	mov	r2, r9
 8007a96:	4633      	mov	r3, r6
 8007a98:	4638      	mov	r0, r7
 8007a9a:	f001 ff49 	bl	8009930 <siscanf>
 8007a9e:	4540      	cmp	r0, r8
 8007aa0:	dc16      	bgt.n	8007ad0 <_tzset_unlocked_r+0x11c>
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	6063      	str	r3, [r4, #4]
 8007aa6:	4b77      	ldr	r3, [pc, #476]	; (8007c84 <_tzset_unlocked_r+0x2d0>)
 8007aa8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	4b77      	ldr	r3, [pc, #476]	; (8007c8c <_tzset_unlocked_r+0x2d8>)
 8007aae:	f8c3 8000 	str.w	r8, [r3]
 8007ab2:	e799      	b.n	80079e8 <_tzset_unlocked_r+0x34>
 8007ab4:	f7f8 fbac 	bl	8000210 <strcmp>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d19b      	bne.n	80079f4 <_tzset_unlocked_r+0x40>
 8007abc:	e794      	b.n	80079e8 <_tzset_unlocked_r+0x34>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	f7ff fd8c 	bl	80075dc <strcpy>
 8007ac4:	e7a3      	b.n	8007a0e <_tzset_unlocked_r+0x5a>
 8007ac6:	2b2b      	cmp	r3, #43	; 0x2b
 8007ac8:	bf08      	it	eq
 8007aca:	3701      	addeq	r7, #1
 8007acc:	2401      	movs	r4, #1
 8007ace:	e7b3      	b.n	8007a38 <_tzset_unlocked_r+0x84>
 8007ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad2:	f8c4 9004 	str.w	r9, [r4, #4]
 8007ad6:	18fc      	adds	r4, r7, r3
 8007ad8:	5cfb      	ldrb	r3, [r7, r3]
 8007ada:	2b2d      	cmp	r3, #45	; 0x2d
 8007adc:	f040 808b 	bne.w	8007bf6 <_tzset_unlocked_r+0x242>
 8007ae0:	3401      	adds	r4, #1
 8007ae2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007aec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007af0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007af4:	930a      	str	r3, [sp, #40]	; 0x28
 8007af6:	e9cd a602 	strd	sl, r6, [sp, #8]
 8007afa:	e9cd b600 	strd	fp, r6, [sp]
 8007afe:	4967      	ldr	r1, [pc, #412]	; (8007c9c <_tzset_unlocked_r+0x2e8>)
 8007b00:	4633      	mov	r3, r6
 8007b02:	aa07      	add	r2, sp, #28
 8007b04:	4620      	mov	r0, r4
 8007b06:	f001 ff13 	bl	8009930 <siscanf>
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	dc78      	bgt.n	8007c00 <_tzset_unlocked_r+0x24c>
 8007b0e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8007b10:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8007b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b16:	652f      	str	r7, [r5, #80]	; 0x50
 8007b18:	441c      	add	r4, r3
 8007b1a:	462f      	mov	r7, r5
 8007b1c:	f04f 0900 	mov.w	r9, #0
 8007b20:	7823      	ldrb	r3, [r4, #0]
 8007b22:	2b2c      	cmp	r3, #44	; 0x2c
 8007b24:	bf08      	it	eq
 8007b26:	3401      	addeq	r4, #1
 8007b28:	f894 8000 	ldrb.w	r8, [r4]
 8007b2c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8007b30:	d178      	bne.n	8007c24 <_tzset_unlocked_r+0x270>
 8007b32:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8007b36:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8007b3a:	ab09      	add	r3, sp, #36	; 0x24
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	4958      	ldr	r1, [pc, #352]	; (8007ca0 <_tzset_unlocked_r+0x2ec>)
 8007b40:	9603      	str	r6, [sp, #12]
 8007b42:	4633      	mov	r3, r6
 8007b44:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f001 fef1 	bl	8009930 <siscanf>
 8007b4e:	2803      	cmp	r0, #3
 8007b50:	f47f af4a 	bne.w	80079e8 <_tzset_unlocked_r+0x34>
 8007b54:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8007b58:	1e4b      	subs	r3, r1, #1
 8007b5a:	2b0b      	cmp	r3, #11
 8007b5c:	f63f af44 	bhi.w	80079e8 <_tzset_unlocked_r+0x34>
 8007b60:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007b64:	1e53      	subs	r3, r2, #1
 8007b66:	2b04      	cmp	r3, #4
 8007b68:	f63f af3e 	bhi.w	80079e8 <_tzset_unlocked_r+0x34>
 8007b6c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8007b70:	2b06      	cmp	r3, #6
 8007b72:	f63f af39 	bhi.w	80079e8 <_tzset_unlocked_r+0x34>
 8007b76:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8007b7a:	f887 8008 	strb.w	r8, [r7, #8]
 8007b7e:	617b      	str	r3, [r7, #20]
 8007b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b82:	eb04 0803 	add.w	r8, r4, r3
 8007b86:	2302      	movs	r3, #2
 8007b88:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007b92:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007b96:	930a      	str	r3, [sp, #40]	; 0x28
 8007b98:	f898 3000 	ldrb.w	r3, [r8]
 8007b9c:	2b2f      	cmp	r3, #47	; 0x2f
 8007b9e:	d109      	bne.n	8007bb4 <_tzset_unlocked_r+0x200>
 8007ba0:	e9cd a602 	strd	sl, r6, [sp, #8]
 8007ba4:	e9cd b600 	strd	fp, r6, [sp]
 8007ba8:	493e      	ldr	r1, [pc, #248]	; (8007ca4 <_tzset_unlocked_r+0x2f0>)
 8007baa:	4633      	mov	r3, r6
 8007bac:	aa07      	add	r2, sp, #28
 8007bae:	4640      	mov	r0, r8
 8007bb0:	f001 febe 	bl	8009930 <siscanf>
 8007bb4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007bb8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007bbc:	213c      	movs	r1, #60	; 0x3c
 8007bbe:	fb01 2203 	mla	r2, r1, r3, r2
 8007bc2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007bc6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007bca:	fb01 2303 	mla	r3, r1, r3, r2
 8007bce:	61bb      	str	r3, [r7, #24]
 8007bd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007bd2:	3728      	adds	r7, #40	; 0x28
 8007bd4:	4444      	add	r4, r8
 8007bd6:	f1b9 0f00 	cmp.w	r9, #0
 8007bda:	d020      	beq.n	8007c1e <_tzset_unlocked_r+0x26a>
 8007bdc:	6868      	ldr	r0, [r5, #4]
 8007bde:	f7ff fe2f 	bl	8007840 <__tzcalc_limits>
 8007be2:	4b28      	ldr	r3, [pc, #160]	; (8007c84 <_tzset_unlocked_r+0x2d0>)
 8007be4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007bea:	1a9b      	subs	r3, r3, r2
 8007bec:	4a27      	ldr	r2, [pc, #156]	; (8007c8c <_tzset_unlocked_r+0x2d8>)
 8007bee:	bf18      	it	ne
 8007bf0:	2301      	movne	r3, #1
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	e6f8      	b.n	80079e8 <_tzset_unlocked_r+0x34>
 8007bf6:	2b2b      	cmp	r3, #43	; 0x2b
 8007bf8:	bf08      	it	eq
 8007bfa:	3401      	addeq	r4, #1
 8007bfc:	2701      	movs	r7, #1
 8007bfe:	e772      	b.n	8007ae6 <_tzset_unlocked_r+0x132>
 8007c00:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007c04:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007c08:	213c      	movs	r1, #60	; 0x3c
 8007c0a:	fb01 2203 	mla	r2, r1, r3, r2
 8007c0e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007c12:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007c16:	fb01 2303 	mla	r3, r1, r3, r2
 8007c1a:	435f      	muls	r7, r3
 8007c1c:	e77a      	b.n	8007b14 <_tzset_unlocked_r+0x160>
 8007c1e:	f04f 0901 	mov.w	r9, #1
 8007c22:	e77d      	b.n	8007b20 <_tzset_unlocked_r+0x16c>
 8007c24:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8007c28:	bf06      	itte	eq
 8007c2a:	3401      	addeq	r4, #1
 8007c2c:	4643      	moveq	r3, r8
 8007c2e:	2344      	movne	r3, #68	; 0x44
 8007c30:	220a      	movs	r2, #10
 8007c32:	a90b      	add	r1, sp, #44	; 0x2c
 8007c34:	4620      	mov	r0, r4
 8007c36:	9305      	str	r3, [sp, #20]
 8007c38:	f7ff fdf8 	bl	800782c <strtoul>
 8007c3c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8007c40:	9b05      	ldr	r3, [sp, #20]
 8007c42:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8007c46:	45a0      	cmp	r8, r4
 8007c48:	d114      	bne.n	8007c74 <_tzset_unlocked_r+0x2c0>
 8007c4a:	234d      	movs	r3, #77	; 0x4d
 8007c4c:	f1b9 0f00 	cmp.w	r9, #0
 8007c50:	d107      	bne.n	8007c62 <_tzset_unlocked_r+0x2ae>
 8007c52:	722b      	strb	r3, [r5, #8]
 8007c54:	2103      	movs	r1, #3
 8007c56:	2302      	movs	r3, #2
 8007c58:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8007c5c:	f8c5 9014 	str.w	r9, [r5, #20]
 8007c60:	e791      	b.n	8007b86 <_tzset_unlocked_r+0x1d2>
 8007c62:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8007c66:	220b      	movs	r2, #11
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8007c6e:	2300      	movs	r3, #0
 8007c70:	63eb      	str	r3, [r5, #60]	; 0x3c
 8007c72:	e788      	b.n	8007b86 <_tzset_unlocked_r+0x1d2>
 8007c74:	b280      	uxth	r0, r0
 8007c76:	723b      	strb	r3, [r7, #8]
 8007c78:	6178      	str	r0, [r7, #20]
 8007c7a:	e784      	b.n	8007b86 <_tzset_unlocked_r+0x1d2>
 8007c7c:	0800b5ce 	.word	0x0800b5ce
 8007c80:	200004b8 	.word	0x200004b8
 8007c84:	200004c0 	.word	0x200004c0
 8007c88:	0800b5d1 	.word	0x0800b5d1
 8007c8c:	200004bc 	.word	0x200004bc
 8007c90:	20000078 	.word	0x20000078
 8007c94:	200004ab 	.word	0x200004ab
 8007c98:	0800b5d5 	.word	0x0800b5d5
 8007c9c:	0800b5f8 	.word	0x0800b5f8
 8007ca0:	0800b5e4 	.word	0x0800b5e4
 8007ca4:	0800b5f7 	.word	0x0800b5f7
 8007ca8:	200004a0 	.word	0x200004a0

08007cac <__assert_func>:
 8007cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007cae:	4614      	mov	r4, r2
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4b09      	ldr	r3, [pc, #36]	; (8007cd8 <__assert_func+0x2c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	68d8      	ldr	r0, [r3, #12]
 8007cba:	b14c      	cbz	r4, 8007cd0 <__assert_func+0x24>
 8007cbc:	4b07      	ldr	r3, [pc, #28]	; (8007cdc <__assert_func+0x30>)
 8007cbe:	9100      	str	r1, [sp, #0]
 8007cc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cc4:	4906      	ldr	r1, [pc, #24]	; (8007ce0 <__assert_func+0x34>)
 8007cc6:	462b      	mov	r3, r5
 8007cc8:	f000 fe9a 	bl	8008a00 <fiprintf>
 8007ccc:	f7fe faee 	bl	80062ac <abort>
 8007cd0:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <__assert_func+0x38>)
 8007cd2:	461c      	mov	r4, r3
 8007cd4:	e7f3      	b.n	8007cbe <__assert_func+0x12>
 8007cd6:	bf00      	nop
 8007cd8:	20000014 	.word	0x20000014
 8007cdc:	0800b60a 	.word	0x0800b60a
 8007ce0:	0800b617 	.word	0x0800b617
 8007ce4:	0800b645 	.word	0x0800b645

08007ce8 <div>:
 8007ce8:	2900      	cmp	r1, #0
 8007cea:	b510      	push	{r4, lr}
 8007cec:	fb91 f4f2 	sdiv	r4, r1, r2
 8007cf0:	fb02 1314 	mls	r3, r2, r4, r1
 8007cf4:	db06      	blt.n	8007d04 <div+0x1c>
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	da01      	bge.n	8007cfe <div+0x16>
 8007cfa:	3401      	adds	r4, #1
 8007cfc:	1a9b      	subs	r3, r3, r2
 8007cfe:	e9c0 4300 	strd	r4, r3, [r0]
 8007d02:	bd10      	pop	{r4, pc}
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bfc4      	itt	gt
 8007d08:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8007d0c:	189b      	addgt	r3, r3, r2
 8007d0e:	e7f6      	b.n	8007cfe <div+0x16>

08007d10 <quorem>:
 8007d10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	6903      	ldr	r3, [r0, #16]
 8007d16:	690c      	ldr	r4, [r1, #16]
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	4607      	mov	r7, r0
 8007d1c:	f2c0 8081 	blt.w	8007e22 <quorem+0x112>
 8007d20:	3c01      	subs	r4, #1
 8007d22:	f101 0814 	add.w	r8, r1, #20
 8007d26:	f100 0514 	add.w	r5, r0, #20
 8007d2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d2e:	9301      	str	r3, [sp, #4]
 8007d30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d44:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d48:	d331      	bcc.n	8007dae <quorem+0x9e>
 8007d4a:	f04f 0e00 	mov.w	lr, #0
 8007d4e:	4640      	mov	r0, r8
 8007d50:	46ac      	mov	ip, r5
 8007d52:	46f2      	mov	sl, lr
 8007d54:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d58:	b293      	uxth	r3, r2
 8007d5a:	fb06 e303 	mla	r3, r6, r3, lr
 8007d5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	ebaa 0303 	sub.w	r3, sl, r3
 8007d68:	0c12      	lsrs	r2, r2, #16
 8007d6a:	f8dc a000 	ldr.w	sl, [ip]
 8007d6e:	fb06 e202 	mla	r2, r6, r2, lr
 8007d72:	fa13 f38a 	uxtah	r3, r3, sl
 8007d76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d7a:	fa1f fa82 	uxth.w	sl, r2
 8007d7e:	f8dc 2000 	ldr.w	r2, [ip]
 8007d82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007d86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d90:	4581      	cmp	r9, r0
 8007d92:	f84c 3b04 	str.w	r3, [ip], #4
 8007d96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d9a:	d2db      	bcs.n	8007d54 <quorem+0x44>
 8007d9c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007da0:	b92b      	cbnz	r3, 8007dae <quorem+0x9e>
 8007da2:	9b01      	ldr	r3, [sp, #4]
 8007da4:	3b04      	subs	r3, #4
 8007da6:	429d      	cmp	r5, r3
 8007da8:	461a      	mov	r2, r3
 8007daa:	d32e      	bcc.n	8007e0a <quorem+0xfa>
 8007dac:	613c      	str	r4, [r7, #16]
 8007dae:	4638      	mov	r0, r7
 8007db0:	f001 f9d4 	bl	800915c <__mcmp>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	db24      	blt.n	8007e02 <quorem+0xf2>
 8007db8:	3601      	adds	r6, #1
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f04f 0c00 	mov.w	ip, #0
 8007dc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dc4:	f8d0 e000 	ldr.w	lr, [r0]
 8007dc8:	b293      	uxth	r3, r2
 8007dca:	ebac 0303 	sub.w	r3, ip, r3
 8007dce:	0c12      	lsrs	r2, r2, #16
 8007dd0:	fa13 f38e 	uxtah	r3, r3, lr
 8007dd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007dd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007de2:	45c1      	cmp	r9, r8
 8007de4:	f840 3b04 	str.w	r3, [r0], #4
 8007de8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007dec:	d2e8      	bcs.n	8007dc0 <quorem+0xb0>
 8007dee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007df2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007df6:	b922      	cbnz	r2, 8007e02 <quorem+0xf2>
 8007df8:	3b04      	subs	r3, #4
 8007dfa:	429d      	cmp	r5, r3
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	d30a      	bcc.n	8007e16 <quorem+0x106>
 8007e00:	613c      	str	r4, [r7, #16]
 8007e02:	4630      	mov	r0, r6
 8007e04:	b003      	add	sp, #12
 8007e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0a:	6812      	ldr	r2, [r2, #0]
 8007e0c:	3b04      	subs	r3, #4
 8007e0e:	2a00      	cmp	r2, #0
 8007e10:	d1cc      	bne.n	8007dac <quorem+0x9c>
 8007e12:	3c01      	subs	r4, #1
 8007e14:	e7c7      	b.n	8007da6 <quorem+0x96>
 8007e16:	6812      	ldr	r2, [r2, #0]
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	2a00      	cmp	r2, #0
 8007e1c:	d1f0      	bne.n	8007e00 <quorem+0xf0>
 8007e1e:	3c01      	subs	r4, #1
 8007e20:	e7eb      	b.n	8007dfa <quorem+0xea>
 8007e22:	2000      	movs	r0, #0
 8007e24:	e7ee      	b.n	8007e04 <quorem+0xf4>
	...

08007e28 <_dtoa_r>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	ed2d 8b02 	vpush	{d8}
 8007e30:	ec57 6b10 	vmov	r6, r7, d0
 8007e34:	b095      	sub	sp, #84	; 0x54
 8007e36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e3c:	9105      	str	r1, [sp, #20]
 8007e3e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007e42:	4604      	mov	r4, r0
 8007e44:	9209      	str	r2, [sp, #36]	; 0x24
 8007e46:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e48:	b975      	cbnz	r5, 8007e68 <_dtoa_r+0x40>
 8007e4a:	2010      	movs	r0, #16
 8007e4c:	f7fe fb80 	bl	8006550 <malloc>
 8007e50:	4602      	mov	r2, r0
 8007e52:	6260      	str	r0, [r4, #36]	; 0x24
 8007e54:	b920      	cbnz	r0, 8007e60 <_dtoa_r+0x38>
 8007e56:	4bb2      	ldr	r3, [pc, #712]	; (8008120 <_dtoa_r+0x2f8>)
 8007e58:	21ea      	movs	r1, #234	; 0xea
 8007e5a:	48b2      	ldr	r0, [pc, #712]	; (8008124 <_dtoa_r+0x2fc>)
 8007e5c:	f7ff ff26 	bl	8007cac <__assert_func>
 8007e60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e64:	6005      	str	r5, [r0, #0]
 8007e66:	60c5      	str	r5, [r0, #12]
 8007e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e6a:	6819      	ldr	r1, [r3, #0]
 8007e6c:	b151      	cbz	r1, 8007e84 <_dtoa_r+0x5c>
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	604a      	str	r2, [r1, #4]
 8007e72:	2301      	movs	r3, #1
 8007e74:	4093      	lsls	r3, r2
 8007e76:	608b      	str	r3, [r1, #8]
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 ff31 	bl	8008ce0 <_Bfree>
 8007e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	1e3b      	subs	r3, r7, #0
 8007e86:	bfb9      	ittee	lt
 8007e88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e8c:	9303      	strlt	r3, [sp, #12]
 8007e8e:	2300      	movge	r3, #0
 8007e90:	f8c8 3000 	strge.w	r3, [r8]
 8007e94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007e98:	4ba3      	ldr	r3, [pc, #652]	; (8008128 <_dtoa_r+0x300>)
 8007e9a:	bfbc      	itt	lt
 8007e9c:	2201      	movlt	r2, #1
 8007e9e:	f8c8 2000 	strlt.w	r2, [r8]
 8007ea2:	ea33 0309 	bics.w	r3, r3, r9
 8007ea6:	d11b      	bne.n	8007ee0 <_dtoa_r+0xb8>
 8007ea8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007eaa:	f242 730f 	movw	r3, #9999	; 0x270f
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007eb4:	4333      	orrs	r3, r6
 8007eb6:	f000 857a 	beq.w	80089ae <_dtoa_r+0xb86>
 8007eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ebc:	b963      	cbnz	r3, 8007ed8 <_dtoa_r+0xb0>
 8007ebe:	4b9b      	ldr	r3, [pc, #620]	; (800812c <_dtoa_r+0x304>)
 8007ec0:	e024      	b.n	8007f0c <_dtoa_r+0xe4>
 8007ec2:	4b9b      	ldr	r3, [pc, #620]	; (8008130 <_dtoa_r+0x308>)
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	9800      	ldr	r0, [sp, #0]
 8007ece:	b015      	add	sp, #84	; 0x54
 8007ed0:	ecbd 8b02 	vpop	{d8}
 8007ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed8:	4b94      	ldr	r3, [pc, #592]	; (800812c <_dtoa_r+0x304>)
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	3303      	adds	r3, #3
 8007ede:	e7f3      	b.n	8007ec8 <_dtoa_r+0xa0>
 8007ee0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	ec51 0b17 	vmov	r0, r1, d7
 8007eea:	2300      	movs	r3, #0
 8007eec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007ef0:	f7f8 fe1a 	bl	8000b28 <__aeabi_dcmpeq>
 8007ef4:	4680      	mov	r8, r0
 8007ef6:	b158      	cbz	r0, 8007f10 <_dtoa_r+0xe8>
 8007ef8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007efa:	2301      	movs	r3, #1
 8007efc:	6013      	str	r3, [r2, #0]
 8007efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 8551 	beq.w	80089a8 <_dtoa_r+0xb80>
 8007f06:	488b      	ldr	r0, [pc, #556]	; (8008134 <_dtoa_r+0x30c>)
 8007f08:	6018      	str	r0, [r3, #0]
 8007f0a:	1e43      	subs	r3, r0, #1
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	e7dd      	b.n	8007ecc <_dtoa_r+0xa4>
 8007f10:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007f14:	aa12      	add	r2, sp, #72	; 0x48
 8007f16:	a913      	add	r1, sp, #76	; 0x4c
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f001 f9c3 	bl	80092a4 <__d2b>
 8007f1e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f22:	4683      	mov	fp, r0
 8007f24:	2d00      	cmp	r5, #0
 8007f26:	d07c      	beq.n	8008022 <_dtoa_r+0x1fa>
 8007f28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f2a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007f2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f32:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007f36:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f42:	4b7d      	ldr	r3, [pc, #500]	; (8008138 <_dtoa_r+0x310>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	4630      	mov	r0, r6
 8007f48:	4639      	mov	r1, r7
 8007f4a:	f7f8 f9cd 	bl	80002e8 <__aeabi_dsub>
 8007f4e:	a36e      	add	r3, pc, #440	; (adr r3, 8008108 <_dtoa_r+0x2e0>)
 8007f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f54:	f7f8 fb80 	bl	8000658 <__aeabi_dmul>
 8007f58:	a36d      	add	r3, pc, #436	; (adr r3, 8008110 <_dtoa_r+0x2e8>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f7f8 f9c5 	bl	80002ec <__adddf3>
 8007f62:	4606      	mov	r6, r0
 8007f64:	4628      	mov	r0, r5
 8007f66:	460f      	mov	r7, r1
 8007f68:	f7f8 fb0c 	bl	8000584 <__aeabi_i2d>
 8007f6c:	a36a      	add	r3, pc, #424	; (adr r3, 8008118 <_dtoa_r+0x2f0>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	f7f8 fb71 	bl	8000658 <__aeabi_dmul>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	f7f8 f9b5 	bl	80002ec <__adddf3>
 8007f82:	4606      	mov	r6, r0
 8007f84:	460f      	mov	r7, r1
 8007f86:	f7f8 fe17 	bl	8000bb8 <__aeabi_d2iz>
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	4682      	mov	sl, r0
 8007f8e:	2300      	movs	r3, #0
 8007f90:	4630      	mov	r0, r6
 8007f92:	4639      	mov	r1, r7
 8007f94:	f7f8 fdd2 	bl	8000b3c <__aeabi_dcmplt>
 8007f98:	b148      	cbz	r0, 8007fae <_dtoa_r+0x186>
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	f7f8 faf2 	bl	8000584 <__aeabi_i2d>
 8007fa0:	4632      	mov	r2, r6
 8007fa2:	463b      	mov	r3, r7
 8007fa4:	f7f8 fdc0 	bl	8000b28 <__aeabi_dcmpeq>
 8007fa8:	b908      	cbnz	r0, 8007fae <_dtoa_r+0x186>
 8007faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fae:	f1ba 0f16 	cmp.w	sl, #22
 8007fb2:	d854      	bhi.n	800805e <_dtoa_r+0x236>
 8007fb4:	4b61      	ldr	r3, [pc, #388]	; (800813c <_dtoa_r+0x314>)
 8007fb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fc2:	f7f8 fdbb 	bl	8000b3c <__aeabi_dcmplt>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	d04b      	beq.n	8008062 <_dtoa_r+0x23a>
 8007fca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fce:	2300      	movs	r3, #0
 8007fd0:	930e      	str	r3, [sp, #56]	; 0x38
 8007fd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fd4:	1b5d      	subs	r5, r3, r5
 8007fd6:	1e6b      	subs	r3, r5, #1
 8007fd8:	9304      	str	r3, [sp, #16]
 8007fda:	bf43      	ittte	mi
 8007fdc:	2300      	movmi	r3, #0
 8007fde:	f1c5 0801 	rsbmi	r8, r5, #1
 8007fe2:	9304      	strmi	r3, [sp, #16]
 8007fe4:	f04f 0800 	movpl.w	r8, #0
 8007fe8:	f1ba 0f00 	cmp.w	sl, #0
 8007fec:	db3b      	blt.n	8008066 <_dtoa_r+0x23e>
 8007fee:	9b04      	ldr	r3, [sp, #16]
 8007ff0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007ff4:	4453      	add	r3, sl
 8007ff6:	9304      	str	r3, [sp, #16]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9306      	str	r3, [sp, #24]
 8007ffc:	9b05      	ldr	r3, [sp, #20]
 8007ffe:	2b09      	cmp	r3, #9
 8008000:	d869      	bhi.n	80080d6 <_dtoa_r+0x2ae>
 8008002:	2b05      	cmp	r3, #5
 8008004:	bfc4      	itt	gt
 8008006:	3b04      	subgt	r3, #4
 8008008:	9305      	strgt	r3, [sp, #20]
 800800a:	9b05      	ldr	r3, [sp, #20]
 800800c:	f1a3 0302 	sub.w	r3, r3, #2
 8008010:	bfcc      	ite	gt
 8008012:	2500      	movgt	r5, #0
 8008014:	2501      	movle	r5, #1
 8008016:	2b03      	cmp	r3, #3
 8008018:	d869      	bhi.n	80080ee <_dtoa_r+0x2c6>
 800801a:	e8df f003 	tbb	[pc, r3]
 800801e:	4e2c      	.short	0x4e2c
 8008020:	5a4c      	.short	0x5a4c
 8008022:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008026:	441d      	add	r5, r3
 8008028:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800802c:	2b20      	cmp	r3, #32
 800802e:	bfc1      	itttt	gt
 8008030:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008034:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008038:	fa09 f303 	lslgt.w	r3, r9, r3
 800803c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008040:	bfda      	itte	le
 8008042:	f1c3 0320 	rsble	r3, r3, #32
 8008046:	fa06 f003 	lslle.w	r0, r6, r3
 800804a:	4318      	orrgt	r0, r3
 800804c:	f7f8 fa8a 	bl	8000564 <__aeabi_ui2d>
 8008050:	2301      	movs	r3, #1
 8008052:	4606      	mov	r6, r0
 8008054:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008058:	3d01      	subs	r5, #1
 800805a:	9310      	str	r3, [sp, #64]	; 0x40
 800805c:	e771      	b.n	8007f42 <_dtoa_r+0x11a>
 800805e:	2301      	movs	r3, #1
 8008060:	e7b6      	b.n	8007fd0 <_dtoa_r+0x1a8>
 8008062:	900e      	str	r0, [sp, #56]	; 0x38
 8008064:	e7b5      	b.n	8007fd2 <_dtoa_r+0x1aa>
 8008066:	f1ca 0300 	rsb	r3, sl, #0
 800806a:	9306      	str	r3, [sp, #24]
 800806c:	2300      	movs	r3, #0
 800806e:	eba8 080a 	sub.w	r8, r8, sl
 8008072:	930d      	str	r3, [sp, #52]	; 0x34
 8008074:	e7c2      	b.n	8007ffc <_dtoa_r+0x1d4>
 8008076:	2300      	movs	r3, #0
 8008078:	9308      	str	r3, [sp, #32]
 800807a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800807c:	2b00      	cmp	r3, #0
 800807e:	dc39      	bgt.n	80080f4 <_dtoa_r+0x2cc>
 8008080:	f04f 0901 	mov.w	r9, #1
 8008084:	f8cd 9004 	str.w	r9, [sp, #4]
 8008088:	464b      	mov	r3, r9
 800808a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800808e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008090:	2200      	movs	r2, #0
 8008092:	6042      	str	r2, [r0, #4]
 8008094:	2204      	movs	r2, #4
 8008096:	f102 0614 	add.w	r6, r2, #20
 800809a:	429e      	cmp	r6, r3
 800809c:	6841      	ldr	r1, [r0, #4]
 800809e:	d92f      	bls.n	8008100 <_dtoa_r+0x2d8>
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 fddd 	bl	8008c60 <_Balloc>
 80080a6:	9000      	str	r0, [sp, #0]
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d14b      	bne.n	8008144 <_dtoa_r+0x31c>
 80080ac:	4b24      	ldr	r3, [pc, #144]	; (8008140 <_dtoa_r+0x318>)
 80080ae:	4602      	mov	r2, r0
 80080b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080b4:	e6d1      	b.n	8007e5a <_dtoa_r+0x32>
 80080b6:	2301      	movs	r3, #1
 80080b8:	e7de      	b.n	8008078 <_dtoa_r+0x250>
 80080ba:	2300      	movs	r3, #0
 80080bc:	9308      	str	r3, [sp, #32]
 80080be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c0:	eb0a 0903 	add.w	r9, sl, r3
 80080c4:	f109 0301 	add.w	r3, r9, #1
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	9301      	str	r3, [sp, #4]
 80080cc:	bfb8      	it	lt
 80080ce:	2301      	movlt	r3, #1
 80080d0:	e7dd      	b.n	800808e <_dtoa_r+0x266>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e7f2      	b.n	80080bc <_dtoa_r+0x294>
 80080d6:	2501      	movs	r5, #1
 80080d8:	2300      	movs	r3, #0
 80080da:	9305      	str	r3, [sp, #20]
 80080dc:	9508      	str	r5, [sp, #32]
 80080de:	f04f 39ff 	mov.w	r9, #4294967295
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80080e8:	2312      	movs	r3, #18
 80080ea:	9209      	str	r2, [sp, #36]	; 0x24
 80080ec:	e7cf      	b.n	800808e <_dtoa_r+0x266>
 80080ee:	2301      	movs	r3, #1
 80080f0:	9308      	str	r3, [sp, #32]
 80080f2:	e7f4      	b.n	80080de <_dtoa_r+0x2b6>
 80080f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80080f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80080fc:	464b      	mov	r3, r9
 80080fe:	e7c6      	b.n	800808e <_dtoa_r+0x266>
 8008100:	3101      	adds	r1, #1
 8008102:	6041      	str	r1, [r0, #4]
 8008104:	0052      	lsls	r2, r2, #1
 8008106:	e7c6      	b.n	8008096 <_dtoa_r+0x26e>
 8008108:	636f4361 	.word	0x636f4361
 800810c:	3fd287a7 	.word	0x3fd287a7
 8008110:	8b60c8b3 	.word	0x8b60c8b3
 8008114:	3fc68a28 	.word	0x3fc68a28
 8008118:	509f79fb 	.word	0x509f79fb
 800811c:	3fd34413 	.word	0x3fd34413
 8008120:	0800b464 	.word	0x0800b464
 8008124:	0800b754 	.word	0x0800b754
 8008128:	7ff00000 	.word	0x7ff00000
 800812c:	0800b750 	.word	0x0800b750
 8008130:	0800b747 	.word	0x0800b747
 8008134:	0800b9a5 	.word	0x0800b9a5
 8008138:	3ff80000 	.word	0x3ff80000
 800813c:	0800b858 	.word	0x0800b858
 8008140:	0800b7b3 	.word	0x0800b7b3
 8008144:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008146:	9a00      	ldr	r2, [sp, #0]
 8008148:	601a      	str	r2, [r3, #0]
 800814a:	9b01      	ldr	r3, [sp, #4]
 800814c:	2b0e      	cmp	r3, #14
 800814e:	f200 80ad 	bhi.w	80082ac <_dtoa_r+0x484>
 8008152:	2d00      	cmp	r5, #0
 8008154:	f000 80aa 	beq.w	80082ac <_dtoa_r+0x484>
 8008158:	f1ba 0f00 	cmp.w	sl, #0
 800815c:	dd36      	ble.n	80081cc <_dtoa_r+0x3a4>
 800815e:	4ac3      	ldr	r2, [pc, #780]	; (800846c <_dtoa_r+0x644>)
 8008160:	f00a 030f 	and.w	r3, sl, #15
 8008164:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008168:	ed93 7b00 	vldr	d7, [r3]
 800816c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008170:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008174:	eeb0 8a47 	vmov.f32	s16, s14
 8008178:	eef0 8a67 	vmov.f32	s17, s15
 800817c:	d016      	beq.n	80081ac <_dtoa_r+0x384>
 800817e:	4bbc      	ldr	r3, [pc, #752]	; (8008470 <_dtoa_r+0x648>)
 8008180:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008184:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008188:	f7f8 fb90 	bl	80008ac <__aeabi_ddiv>
 800818c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008190:	f007 070f 	and.w	r7, r7, #15
 8008194:	2503      	movs	r5, #3
 8008196:	4eb6      	ldr	r6, [pc, #728]	; (8008470 <_dtoa_r+0x648>)
 8008198:	b957      	cbnz	r7, 80081b0 <_dtoa_r+0x388>
 800819a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800819e:	ec53 2b18 	vmov	r2, r3, d8
 80081a2:	f7f8 fb83 	bl	80008ac <__aeabi_ddiv>
 80081a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081aa:	e029      	b.n	8008200 <_dtoa_r+0x3d8>
 80081ac:	2502      	movs	r5, #2
 80081ae:	e7f2      	b.n	8008196 <_dtoa_r+0x36e>
 80081b0:	07f9      	lsls	r1, r7, #31
 80081b2:	d508      	bpl.n	80081c6 <_dtoa_r+0x39e>
 80081b4:	ec51 0b18 	vmov	r0, r1, d8
 80081b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081bc:	f7f8 fa4c 	bl	8000658 <__aeabi_dmul>
 80081c0:	ec41 0b18 	vmov	d8, r0, r1
 80081c4:	3501      	adds	r5, #1
 80081c6:	107f      	asrs	r7, r7, #1
 80081c8:	3608      	adds	r6, #8
 80081ca:	e7e5      	b.n	8008198 <_dtoa_r+0x370>
 80081cc:	f000 80a6 	beq.w	800831c <_dtoa_r+0x4f4>
 80081d0:	f1ca 0600 	rsb	r6, sl, #0
 80081d4:	4ba5      	ldr	r3, [pc, #660]	; (800846c <_dtoa_r+0x644>)
 80081d6:	4fa6      	ldr	r7, [pc, #664]	; (8008470 <_dtoa_r+0x648>)
 80081d8:	f006 020f 	and.w	r2, r6, #15
 80081dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081e8:	f7f8 fa36 	bl	8000658 <__aeabi_dmul>
 80081ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081f0:	1136      	asrs	r6, r6, #4
 80081f2:	2300      	movs	r3, #0
 80081f4:	2502      	movs	r5, #2
 80081f6:	2e00      	cmp	r6, #0
 80081f8:	f040 8085 	bne.w	8008306 <_dtoa_r+0x4de>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1d2      	bne.n	80081a6 <_dtoa_r+0x37e>
 8008200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008202:	2b00      	cmp	r3, #0
 8008204:	f000 808c 	beq.w	8008320 <_dtoa_r+0x4f8>
 8008208:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800820c:	4b99      	ldr	r3, [pc, #612]	; (8008474 <_dtoa_r+0x64c>)
 800820e:	2200      	movs	r2, #0
 8008210:	4630      	mov	r0, r6
 8008212:	4639      	mov	r1, r7
 8008214:	f7f8 fc92 	bl	8000b3c <__aeabi_dcmplt>
 8008218:	2800      	cmp	r0, #0
 800821a:	f000 8081 	beq.w	8008320 <_dtoa_r+0x4f8>
 800821e:	9b01      	ldr	r3, [sp, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d07d      	beq.n	8008320 <_dtoa_r+0x4f8>
 8008224:	f1b9 0f00 	cmp.w	r9, #0
 8008228:	dd3c      	ble.n	80082a4 <_dtoa_r+0x47c>
 800822a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800822e:	9307      	str	r3, [sp, #28]
 8008230:	2200      	movs	r2, #0
 8008232:	4b91      	ldr	r3, [pc, #580]	; (8008478 <_dtoa_r+0x650>)
 8008234:	4630      	mov	r0, r6
 8008236:	4639      	mov	r1, r7
 8008238:	f7f8 fa0e 	bl	8000658 <__aeabi_dmul>
 800823c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008240:	3501      	adds	r5, #1
 8008242:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008246:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800824a:	4628      	mov	r0, r5
 800824c:	f7f8 f99a 	bl	8000584 <__aeabi_i2d>
 8008250:	4632      	mov	r2, r6
 8008252:	463b      	mov	r3, r7
 8008254:	f7f8 fa00 	bl	8000658 <__aeabi_dmul>
 8008258:	4b88      	ldr	r3, [pc, #544]	; (800847c <_dtoa_r+0x654>)
 800825a:	2200      	movs	r2, #0
 800825c:	f7f8 f846 	bl	80002ec <__adddf3>
 8008260:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008268:	9303      	str	r3, [sp, #12]
 800826a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800826c:	2b00      	cmp	r3, #0
 800826e:	d15c      	bne.n	800832a <_dtoa_r+0x502>
 8008270:	4b83      	ldr	r3, [pc, #524]	; (8008480 <_dtoa_r+0x658>)
 8008272:	2200      	movs	r2, #0
 8008274:	4630      	mov	r0, r6
 8008276:	4639      	mov	r1, r7
 8008278:	f7f8 f836 	bl	80002e8 <__aeabi_dsub>
 800827c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008280:	4606      	mov	r6, r0
 8008282:	460f      	mov	r7, r1
 8008284:	f7f8 fc78 	bl	8000b78 <__aeabi_dcmpgt>
 8008288:	2800      	cmp	r0, #0
 800828a:	f040 8296 	bne.w	80087ba <_dtoa_r+0x992>
 800828e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008292:	4630      	mov	r0, r6
 8008294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008298:	4639      	mov	r1, r7
 800829a:	f7f8 fc4f 	bl	8000b3c <__aeabi_dcmplt>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f040 8288 	bne.w	80087b4 <_dtoa_r+0x98c>
 80082a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	f2c0 8158 	blt.w	8008564 <_dtoa_r+0x73c>
 80082b4:	f1ba 0f0e 	cmp.w	sl, #14
 80082b8:	f300 8154 	bgt.w	8008564 <_dtoa_r+0x73c>
 80082bc:	4b6b      	ldr	r3, [pc, #428]	; (800846c <_dtoa_r+0x644>)
 80082be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f280 80e3 	bge.w	8008494 <_dtoa_r+0x66c>
 80082ce:	9b01      	ldr	r3, [sp, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f300 80df 	bgt.w	8008494 <_dtoa_r+0x66c>
 80082d6:	f040 826d 	bne.w	80087b4 <_dtoa_r+0x98c>
 80082da:	4b69      	ldr	r3, [pc, #420]	; (8008480 <_dtoa_r+0x658>)
 80082dc:	2200      	movs	r2, #0
 80082de:	4640      	mov	r0, r8
 80082e0:	4649      	mov	r1, r9
 80082e2:	f7f8 f9b9 	bl	8000658 <__aeabi_dmul>
 80082e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ea:	f7f8 fc3b 	bl	8000b64 <__aeabi_dcmpge>
 80082ee:	9e01      	ldr	r6, [sp, #4]
 80082f0:	4637      	mov	r7, r6
 80082f2:	2800      	cmp	r0, #0
 80082f4:	f040 8243 	bne.w	800877e <_dtoa_r+0x956>
 80082f8:	9d00      	ldr	r5, [sp, #0]
 80082fa:	2331      	movs	r3, #49	; 0x31
 80082fc:	f805 3b01 	strb.w	r3, [r5], #1
 8008300:	f10a 0a01 	add.w	sl, sl, #1
 8008304:	e23f      	b.n	8008786 <_dtoa_r+0x95e>
 8008306:	07f2      	lsls	r2, r6, #31
 8008308:	d505      	bpl.n	8008316 <_dtoa_r+0x4ee>
 800830a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800830e:	f7f8 f9a3 	bl	8000658 <__aeabi_dmul>
 8008312:	3501      	adds	r5, #1
 8008314:	2301      	movs	r3, #1
 8008316:	1076      	asrs	r6, r6, #1
 8008318:	3708      	adds	r7, #8
 800831a:	e76c      	b.n	80081f6 <_dtoa_r+0x3ce>
 800831c:	2502      	movs	r5, #2
 800831e:	e76f      	b.n	8008200 <_dtoa_r+0x3d8>
 8008320:	9b01      	ldr	r3, [sp, #4]
 8008322:	f8cd a01c 	str.w	sl, [sp, #28]
 8008326:	930c      	str	r3, [sp, #48]	; 0x30
 8008328:	e78d      	b.n	8008246 <_dtoa_r+0x41e>
 800832a:	9900      	ldr	r1, [sp, #0]
 800832c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800832e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008330:	4b4e      	ldr	r3, [pc, #312]	; (800846c <_dtoa_r+0x644>)
 8008332:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008336:	4401      	add	r1, r0
 8008338:	9102      	str	r1, [sp, #8]
 800833a:	9908      	ldr	r1, [sp, #32]
 800833c:	eeb0 8a47 	vmov.f32	s16, s14
 8008340:	eef0 8a67 	vmov.f32	s17, s15
 8008344:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008348:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800834c:	2900      	cmp	r1, #0
 800834e:	d045      	beq.n	80083dc <_dtoa_r+0x5b4>
 8008350:	494c      	ldr	r1, [pc, #304]	; (8008484 <_dtoa_r+0x65c>)
 8008352:	2000      	movs	r0, #0
 8008354:	f7f8 faaa 	bl	80008ac <__aeabi_ddiv>
 8008358:	ec53 2b18 	vmov	r2, r3, d8
 800835c:	f7f7 ffc4 	bl	80002e8 <__aeabi_dsub>
 8008360:	9d00      	ldr	r5, [sp, #0]
 8008362:	ec41 0b18 	vmov	d8, r0, r1
 8008366:	4639      	mov	r1, r7
 8008368:	4630      	mov	r0, r6
 800836a:	f7f8 fc25 	bl	8000bb8 <__aeabi_d2iz>
 800836e:	900c      	str	r0, [sp, #48]	; 0x30
 8008370:	f7f8 f908 	bl	8000584 <__aeabi_i2d>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4630      	mov	r0, r6
 800837a:	4639      	mov	r1, r7
 800837c:	f7f7 ffb4 	bl	80002e8 <__aeabi_dsub>
 8008380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008382:	3330      	adds	r3, #48	; 0x30
 8008384:	f805 3b01 	strb.w	r3, [r5], #1
 8008388:	ec53 2b18 	vmov	r2, r3, d8
 800838c:	4606      	mov	r6, r0
 800838e:	460f      	mov	r7, r1
 8008390:	f7f8 fbd4 	bl	8000b3c <__aeabi_dcmplt>
 8008394:	2800      	cmp	r0, #0
 8008396:	d165      	bne.n	8008464 <_dtoa_r+0x63c>
 8008398:	4632      	mov	r2, r6
 800839a:	463b      	mov	r3, r7
 800839c:	4935      	ldr	r1, [pc, #212]	; (8008474 <_dtoa_r+0x64c>)
 800839e:	2000      	movs	r0, #0
 80083a0:	f7f7 ffa2 	bl	80002e8 <__aeabi_dsub>
 80083a4:	ec53 2b18 	vmov	r2, r3, d8
 80083a8:	f7f8 fbc8 	bl	8000b3c <__aeabi_dcmplt>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	f040 80b9 	bne.w	8008524 <_dtoa_r+0x6fc>
 80083b2:	9b02      	ldr	r3, [sp, #8]
 80083b4:	429d      	cmp	r5, r3
 80083b6:	f43f af75 	beq.w	80082a4 <_dtoa_r+0x47c>
 80083ba:	4b2f      	ldr	r3, [pc, #188]	; (8008478 <_dtoa_r+0x650>)
 80083bc:	ec51 0b18 	vmov	r0, r1, d8
 80083c0:	2200      	movs	r2, #0
 80083c2:	f7f8 f949 	bl	8000658 <__aeabi_dmul>
 80083c6:	4b2c      	ldr	r3, [pc, #176]	; (8008478 <_dtoa_r+0x650>)
 80083c8:	ec41 0b18 	vmov	d8, r0, r1
 80083cc:	2200      	movs	r2, #0
 80083ce:	4630      	mov	r0, r6
 80083d0:	4639      	mov	r1, r7
 80083d2:	f7f8 f941 	bl	8000658 <__aeabi_dmul>
 80083d6:	4606      	mov	r6, r0
 80083d8:	460f      	mov	r7, r1
 80083da:	e7c4      	b.n	8008366 <_dtoa_r+0x53e>
 80083dc:	ec51 0b17 	vmov	r0, r1, d7
 80083e0:	f7f8 f93a 	bl	8000658 <__aeabi_dmul>
 80083e4:	9b02      	ldr	r3, [sp, #8]
 80083e6:	9d00      	ldr	r5, [sp, #0]
 80083e8:	930c      	str	r3, [sp, #48]	; 0x30
 80083ea:	ec41 0b18 	vmov	d8, r0, r1
 80083ee:	4639      	mov	r1, r7
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7f8 fbe1 	bl	8000bb8 <__aeabi_d2iz>
 80083f6:	9011      	str	r0, [sp, #68]	; 0x44
 80083f8:	f7f8 f8c4 	bl	8000584 <__aeabi_i2d>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4630      	mov	r0, r6
 8008402:	4639      	mov	r1, r7
 8008404:	f7f7 ff70 	bl	80002e8 <__aeabi_dsub>
 8008408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800840a:	3330      	adds	r3, #48	; 0x30
 800840c:	f805 3b01 	strb.w	r3, [r5], #1
 8008410:	9b02      	ldr	r3, [sp, #8]
 8008412:	429d      	cmp	r5, r3
 8008414:	4606      	mov	r6, r0
 8008416:	460f      	mov	r7, r1
 8008418:	f04f 0200 	mov.w	r2, #0
 800841c:	d134      	bne.n	8008488 <_dtoa_r+0x660>
 800841e:	4b19      	ldr	r3, [pc, #100]	; (8008484 <_dtoa_r+0x65c>)
 8008420:	ec51 0b18 	vmov	r0, r1, d8
 8008424:	f7f7 ff62 	bl	80002ec <__adddf3>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4630      	mov	r0, r6
 800842e:	4639      	mov	r1, r7
 8008430:	f7f8 fba2 	bl	8000b78 <__aeabi_dcmpgt>
 8008434:	2800      	cmp	r0, #0
 8008436:	d175      	bne.n	8008524 <_dtoa_r+0x6fc>
 8008438:	ec53 2b18 	vmov	r2, r3, d8
 800843c:	4911      	ldr	r1, [pc, #68]	; (8008484 <_dtoa_r+0x65c>)
 800843e:	2000      	movs	r0, #0
 8008440:	f7f7 ff52 	bl	80002e8 <__aeabi_dsub>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4630      	mov	r0, r6
 800844a:	4639      	mov	r1, r7
 800844c:	f7f8 fb76 	bl	8000b3c <__aeabi_dcmplt>
 8008450:	2800      	cmp	r0, #0
 8008452:	f43f af27 	beq.w	80082a4 <_dtoa_r+0x47c>
 8008456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008458:	1e6b      	subs	r3, r5, #1
 800845a:	930c      	str	r3, [sp, #48]	; 0x30
 800845c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008460:	2b30      	cmp	r3, #48	; 0x30
 8008462:	d0f8      	beq.n	8008456 <_dtoa_r+0x62e>
 8008464:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008468:	e04a      	b.n	8008500 <_dtoa_r+0x6d8>
 800846a:	bf00      	nop
 800846c:	0800b858 	.word	0x0800b858
 8008470:	0800b830 	.word	0x0800b830
 8008474:	3ff00000 	.word	0x3ff00000
 8008478:	40240000 	.word	0x40240000
 800847c:	401c0000 	.word	0x401c0000
 8008480:	40140000 	.word	0x40140000
 8008484:	3fe00000 	.word	0x3fe00000
 8008488:	4baf      	ldr	r3, [pc, #700]	; (8008748 <_dtoa_r+0x920>)
 800848a:	f7f8 f8e5 	bl	8000658 <__aeabi_dmul>
 800848e:	4606      	mov	r6, r0
 8008490:	460f      	mov	r7, r1
 8008492:	e7ac      	b.n	80083ee <_dtoa_r+0x5c6>
 8008494:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008498:	9d00      	ldr	r5, [sp, #0]
 800849a:	4642      	mov	r2, r8
 800849c:	464b      	mov	r3, r9
 800849e:	4630      	mov	r0, r6
 80084a0:	4639      	mov	r1, r7
 80084a2:	f7f8 fa03 	bl	80008ac <__aeabi_ddiv>
 80084a6:	f7f8 fb87 	bl	8000bb8 <__aeabi_d2iz>
 80084aa:	9002      	str	r0, [sp, #8]
 80084ac:	f7f8 f86a 	bl	8000584 <__aeabi_i2d>
 80084b0:	4642      	mov	r2, r8
 80084b2:	464b      	mov	r3, r9
 80084b4:	f7f8 f8d0 	bl	8000658 <__aeabi_dmul>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4630      	mov	r0, r6
 80084be:	4639      	mov	r1, r7
 80084c0:	f7f7 ff12 	bl	80002e8 <__aeabi_dsub>
 80084c4:	9e02      	ldr	r6, [sp, #8]
 80084c6:	9f01      	ldr	r7, [sp, #4]
 80084c8:	3630      	adds	r6, #48	; 0x30
 80084ca:	f805 6b01 	strb.w	r6, [r5], #1
 80084ce:	9e00      	ldr	r6, [sp, #0]
 80084d0:	1bae      	subs	r6, r5, r6
 80084d2:	42b7      	cmp	r7, r6
 80084d4:	4602      	mov	r2, r0
 80084d6:	460b      	mov	r3, r1
 80084d8:	d137      	bne.n	800854a <_dtoa_r+0x722>
 80084da:	f7f7 ff07 	bl	80002ec <__adddf3>
 80084de:	4642      	mov	r2, r8
 80084e0:	464b      	mov	r3, r9
 80084e2:	4606      	mov	r6, r0
 80084e4:	460f      	mov	r7, r1
 80084e6:	f7f8 fb47 	bl	8000b78 <__aeabi_dcmpgt>
 80084ea:	b9c8      	cbnz	r0, 8008520 <_dtoa_r+0x6f8>
 80084ec:	4642      	mov	r2, r8
 80084ee:	464b      	mov	r3, r9
 80084f0:	4630      	mov	r0, r6
 80084f2:	4639      	mov	r1, r7
 80084f4:	f7f8 fb18 	bl	8000b28 <__aeabi_dcmpeq>
 80084f8:	b110      	cbz	r0, 8008500 <_dtoa_r+0x6d8>
 80084fa:	9b02      	ldr	r3, [sp, #8]
 80084fc:	07d9      	lsls	r1, r3, #31
 80084fe:	d40f      	bmi.n	8008520 <_dtoa_r+0x6f8>
 8008500:	4620      	mov	r0, r4
 8008502:	4659      	mov	r1, fp
 8008504:	f000 fbec 	bl	8008ce0 <_Bfree>
 8008508:	2300      	movs	r3, #0
 800850a:	702b      	strb	r3, [r5, #0]
 800850c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800850e:	f10a 0001 	add.w	r0, sl, #1
 8008512:	6018      	str	r0, [r3, #0]
 8008514:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008516:	2b00      	cmp	r3, #0
 8008518:	f43f acd8 	beq.w	8007ecc <_dtoa_r+0xa4>
 800851c:	601d      	str	r5, [r3, #0]
 800851e:	e4d5      	b.n	8007ecc <_dtoa_r+0xa4>
 8008520:	f8cd a01c 	str.w	sl, [sp, #28]
 8008524:	462b      	mov	r3, r5
 8008526:	461d      	mov	r5, r3
 8008528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800852c:	2a39      	cmp	r2, #57	; 0x39
 800852e:	d108      	bne.n	8008542 <_dtoa_r+0x71a>
 8008530:	9a00      	ldr	r2, [sp, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d1f7      	bne.n	8008526 <_dtoa_r+0x6fe>
 8008536:	9a07      	ldr	r2, [sp, #28]
 8008538:	9900      	ldr	r1, [sp, #0]
 800853a:	3201      	adds	r2, #1
 800853c:	9207      	str	r2, [sp, #28]
 800853e:	2230      	movs	r2, #48	; 0x30
 8008540:	700a      	strb	r2, [r1, #0]
 8008542:	781a      	ldrb	r2, [r3, #0]
 8008544:	3201      	adds	r2, #1
 8008546:	701a      	strb	r2, [r3, #0]
 8008548:	e78c      	b.n	8008464 <_dtoa_r+0x63c>
 800854a:	4b7f      	ldr	r3, [pc, #508]	; (8008748 <_dtoa_r+0x920>)
 800854c:	2200      	movs	r2, #0
 800854e:	f7f8 f883 	bl	8000658 <__aeabi_dmul>
 8008552:	2200      	movs	r2, #0
 8008554:	2300      	movs	r3, #0
 8008556:	4606      	mov	r6, r0
 8008558:	460f      	mov	r7, r1
 800855a:	f7f8 fae5 	bl	8000b28 <__aeabi_dcmpeq>
 800855e:	2800      	cmp	r0, #0
 8008560:	d09b      	beq.n	800849a <_dtoa_r+0x672>
 8008562:	e7cd      	b.n	8008500 <_dtoa_r+0x6d8>
 8008564:	9a08      	ldr	r2, [sp, #32]
 8008566:	2a00      	cmp	r2, #0
 8008568:	f000 80c4 	beq.w	80086f4 <_dtoa_r+0x8cc>
 800856c:	9a05      	ldr	r2, [sp, #20]
 800856e:	2a01      	cmp	r2, #1
 8008570:	f300 80a8 	bgt.w	80086c4 <_dtoa_r+0x89c>
 8008574:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008576:	2a00      	cmp	r2, #0
 8008578:	f000 80a0 	beq.w	80086bc <_dtoa_r+0x894>
 800857c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008580:	9e06      	ldr	r6, [sp, #24]
 8008582:	4645      	mov	r5, r8
 8008584:	9a04      	ldr	r2, [sp, #16]
 8008586:	2101      	movs	r1, #1
 8008588:	441a      	add	r2, r3
 800858a:	4620      	mov	r0, r4
 800858c:	4498      	add	r8, r3
 800858e:	9204      	str	r2, [sp, #16]
 8008590:	f000 fc62 	bl	8008e58 <__i2b>
 8008594:	4607      	mov	r7, r0
 8008596:	2d00      	cmp	r5, #0
 8008598:	dd0b      	ble.n	80085b2 <_dtoa_r+0x78a>
 800859a:	9b04      	ldr	r3, [sp, #16]
 800859c:	2b00      	cmp	r3, #0
 800859e:	dd08      	ble.n	80085b2 <_dtoa_r+0x78a>
 80085a0:	42ab      	cmp	r3, r5
 80085a2:	9a04      	ldr	r2, [sp, #16]
 80085a4:	bfa8      	it	ge
 80085a6:	462b      	movge	r3, r5
 80085a8:	eba8 0803 	sub.w	r8, r8, r3
 80085ac:	1aed      	subs	r5, r5, r3
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	9304      	str	r3, [sp, #16]
 80085b2:	9b06      	ldr	r3, [sp, #24]
 80085b4:	b1fb      	cbz	r3, 80085f6 <_dtoa_r+0x7ce>
 80085b6:	9b08      	ldr	r3, [sp, #32]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 809f 	beq.w	80086fc <_dtoa_r+0x8d4>
 80085be:	2e00      	cmp	r6, #0
 80085c0:	dd11      	ble.n	80085e6 <_dtoa_r+0x7be>
 80085c2:	4639      	mov	r1, r7
 80085c4:	4632      	mov	r2, r6
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 fd02 	bl	8008fd0 <__pow5mult>
 80085cc:	465a      	mov	r2, fp
 80085ce:	4601      	mov	r1, r0
 80085d0:	4607      	mov	r7, r0
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 fc56 	bl	8008e84 <__multiply>
 80085d8:	4659      	mov	r1, fp
 80085da:	9007      	str	r0, [sp, #28]
 80085dc:	4620      	mov	r0, r4
 80085de:	f000 fb7f 	bl	8008ce0 <_Bfree>
 80085e2:	9b07      	ldr	r3, [sp, #28]
 80085e4:	469b      	mov	fp, r3
 80085e6:	9b06      	ldr	r3, [sp, #24]
 80085e8:	1b9a      	subs	r2, r3, r6
 80085ea:	d004      	beq.n	80085f6 <_dtoa_r+0x7ce>
 80085ec:	4659      	mov	r1, fp
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 fcee 	bl	8008fd0 <__pow5mult>
 80085f4:	4683      	mov	fp, r0
 80085f6:	2101      	movs	r1, #1
 80085f8:	4620      	mov	r0, r4
 80085fa:	f000 fc2d 	bl	8008e58 <__i2b>
 80085fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008600:	2b00      	cmp	r3, #0
 8008602:	4606      	mov	r6, r0
 8008604:	dd7c      	ble.n	8008700 <_dtoa_r+0x8d8>
 8008606:	461a      	mov	r2, r3
 8008608:	4601      	mov	r1, r0
 800860a:	4620      	mov	r0, r4
 800860c:	f000 fce0 	bl	8008fd0 <__pow5mult>
 8008610:	9b05      	ldr	r3, [sp, #20]
 8008612:	2b01      	cmp	r3, #1
 8008614:	4606      	mov	r6, r0
 8008616:	dd76      	ble.n	8008706 <_dtoa_r+0x8de>
 8008618:	2300      	movs	r3, #0
 800861a:	9306      	str	r3, [sp, #24]
 800861c:	6933      	ldr	r3, [r6, #16]
 800861e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008622:	6918      	ldr	r0, [r3, #16]
 8008624:	f000 fbc8 	bl	8008db8 <__hi0bits>
 8008628:	f1c0 0020 	rsb	r0, r0, #32
 800862c:	9b04      	ldr	r3, [sp, #16]
 800862e:	4418      	add	r0, r3
 8008630:	f010 001f 	ands.w	r0, r0, #31
 8008634:	f000 8086 	beq.w	8008744 <_dtoa_r+0x91c>
 8008638:	f1c0 0320 	rsb	r3, r0, #32
 800863c:	2b04      	cmp	r3, #4
 800863e:	dd7f      	ble.n	8008740 <_dtoa_r+0x918>
 8008640:	f1c0 001c 	rsb	r0, r0, #28
 8008644:	9b04      	ldr	r3, [sp, #16]
 8008646:	4403      	add	r3, r0
 8008648:	4480      	add	r8, r0
 800864a:	4405      	add	r5, r0
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	f1b8 0f00 	cmp.w	r8, #0
 8008652:	dd05      	ble.n	8008660 <_dtoa_r+0x838>
 8008654:	4659      	mov	r1, fp
 8008656:	4642      	mov	r2, r8
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fd13 	bl	8009084 <__lshift>
 800865e:	4683      	mov	fp, r0
 8008660:	9b04      	ldr	r3, [sp, #16]
 8008662:	2b00      	cmp	r3, #0
 8008664:	dd05      	ble.n	8008672 <_dtoa_r+0x84a>
 8008666:	4631      	mov	r1, r6
 8008668:	461a      	mov	r2, r3
 800866a:	4620      	mov	r0, r4
 800866c:	f000 fd0a 	bl	8009084 <__lshift>
 8008670:	4606      	mov	r6, r0
 8008672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008674:	2b00      	cmp	r3, #0
 8008676:	d069      	beq.n	800874c <_dtoa_r+0x924>
 8008678:	4631      	mov	r1, r6
 800867a:	4658      	mov	r0, fp
 800867c:	f000 fd6e 	bl	800915c <__mcmp>
 8008680:	2800      	cmp	r0, #0
 8008682:	da63      	bge.n	800874c <_dtoa_r+0x924>
 8008684:	2300      	movs	r3, #0
 8008686:	4659      	mov	r1, fp
 8008688:	220a      	movs	r2, #10
 800868a:	4620      	mov	r0, r4
 800868c:	f000 fb4a 	bl	8008d24 <__multadd>
 8008690:	9b08      	ldr	r3, [sp, #32]
 8008692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008696:	4683      	mov	fp, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	f000 818f 	beq.w	80089bc <_dtoa_r+0xb94>
 800869e:	4639      	mov	r1, r7
 80086a0:	2300      	movs	r3, #0
 80086a2:	220a      	movs	r2, #10
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 fb3d 	bl	8008d24 <__multadd>
 80086aa:	f1b9 0f00 	cmp.w	r9, #0
 80086ae:	4607      	mov	r7, r0
 80086b0:	f300 808e 	bgt.w	80087d0 <_dtoa_r+0x9a8>
 80086b4:	9b05      	ldr	r3, [sp, #20]
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	dc50      	bgt.n	800875c <_dtoa_r+0x934>
 80086ba:	e089      	b.n	80087d0 <_dtoa_r+0x9a8>
 80086bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086c2:	e75d      	b.n	8008580 <_dtoa_r+0x758>
 80086c4:	9b01      	ldr	r3, [sp, #4]
 80086c6:	1e5e      	subs	r6, r3, #1
 80086c8:	9b06      	ldr	r3, [sp, #24]
 80086ca:	42b3      	cmp	r3, r6
 80086cc:	bfbf      	itttt	lt
 80086ce:	9b06      	ldrlt	r3, [sp, #24]
 80086d0:	9606      	strlt	r6, [sp, #24]
 80086d2:	1af2      	sublt	r2, r6, r3
 80086d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80086d6:	bfb6      	itet	lt
 80086d8:	189b      	addlt	r3, r3, r2
 80086da:	1b9e      	subge	r6, r3, r6
 80086dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80086de:	9b01      	ldr	r3, [sp, #4]
 80086e0:	bfb8      	it	lt
 80086e2:	2600      	movlt	r6, #0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	bfb5      	itete	lt
 80086e8:	eba8 0503 	sublt.w	r5, r8, r3
 80086ec:	9b01      	ldrge	r3, [sp, #4]
 80086ee:	2300      	movlt	r3, #0
 80086f0:	4645      	movge	r5, r8
 80086f2:	e747      	b.n	8008584 <_dtoa_r+0x75c>
 80086f4:	9e06      	ldr	r6, [sp, #24]
 80086f6:	9f08      	ldr	r7, [sp, #32]
 80086f8:	4645      	mov	r5, r8
 80086fa:	e74c      	b.n	8008596 <_dtoa_r+0x76e>
 80086fc:	9a06      	ldr	r2, [sp, #24]
 80086fe:	e775      	b.n	80085ec <_dtoa_r+0x7c4>
 8008700:	9b05      	ldr	r3, [sp, #20]
 8008702:	2b01      	cmp	r3, #1
 8008704:	dc18      	bgt.n	8008738 <_dtoa_r+0x910>
 8008706:	9b02      	ldr	r3, [sp, #8]
 8008708:	b9b3      	cbnz	r3, 8008738 <_dtoa_r+0x910>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008710:	b9a3      	cbnz	r3, 800873c <_dtoa_r+0x914>
 8008712:	9b03      	ldr	r3, [sp, #12]
 8008714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008718:	0d1b      	lsrs	r3, r3, #20
 800871a:	051b      	lsls	r3, r3, #20
 800871c:	b12b      	cbz	r3, 800872a <_dtoa_r+0x902>
 800871e:	9b04      	ldr	r3, [sp, #16]
 8008720:	3301      	adds	r3, #1
 8008722:	9304      	str	r3, [sp, #16]
 8008724:	f108 0801 	add.w	r8, r8, #1
 8008728:	2301      	movs	r3, #1
 800872a:	9306      	str	r3, [sp, #24]
 800872c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800872e:	2b00      	cmp	r3, #0
 8008730:	f47f af74 	bne.w	800861c <_dtoa_r+0x7f4>
 8008734:	2001      	movs	r0, #1
 8008736:	e779      	b.n	800862c <_dtoa_r+0x804>
 8008738:	2300      	movs	r3, #0
 800873a:	e7f6      	b.n	800872a <_dtoa_r+0x902>
 800873c:	9b02      	ldr	r3, [sp, #8]
 800873e:	e7f4      	b.n	800872a <_dtoa_r+0x902>
 8008740:	d085      	beq.n	800864e <_dtoa_r+0x826>
 8008742:	4618      	mov	r0, r3
 8008744:	301c      	adds	r0, #28
 8008746:	e77d      	b.n	8008644 <_dtoa_r+0x81c>
 8008748:	40240000 	.word	0x40240000
 800874c:	9b01      	ldr	r3, [sp, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	dc38      	bgt.n	80087c4 <_dtoa_r+0x99c>
 8008752:	9b05      	ldr	r3, [sp, #20]
 8008754:	2b02      	cmp	r3, #2
 8008756:	dd35      	ble.n	80087c4 <_dtoa_r+0x99c>
 8008758:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800875c:	f1b9 0f00 	cmp.w	r9, #0
 8008760:	d10d      	bne.n	800877e <_dtoa_r+0x956>
 8008762:	4631      	mov	r1, r6
 8008764:	464b      	mov	r3, r9
 8008766:	2205      	movs	r2, #5
 8008768:	4620      	mov	r0, r4
 800876a:	f000 fadb 	bl	8008d24 <__multadd>
 800876e:	4601      	mov	r1, r0
 8008770:	4606      	mov	r6, r0
 8008772:	4658      	mov	r0, fp
 8008774:	f000 fcf2 	bl	800915c <__mcmp>
 8008778:	2800      	cmp	r0, #0
 800877a:	f73f adbd 	bgt.w	80082f8 <_dtoa_r+0x4d0>
 800877e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008780:	9d00      	ldr	r5, [sp, #0]
 8008782:	ea6f 0a03 	mvn.w	sl, r3
 8008786:	f04f 0800 	mov.w	r8, #0
 800878a:	4631      	mov	r1, r6
 800878c:	4620      	mov	r0, r4
 800878e:	f000 faa7 	bl	8008ce0 <_Bfree>
 8008792:	2f00      	cmp	r7, #0
 8008794:	f43f aeb4 	beq.w	8008500 <_dtoa_r+0x6d8>
 8008798:	f1b8 0f00 	cmp.w	r8, #0
 800879c:	d005      	beq.n	80087aa <_dtoa_r+0x982>
 800879e:	45b8      	cmp	r8, r7
 80087a0:	d003      	beq.n	80087aa <_dtoa_r+0x982>
 80087a2:	4641      	mov	r1, r8
 80087a4:	4620      	mov	r0, r4
 80087a6:	f000 fa9b 	bl	8008ce0 <_Bfree>
 80087aa:	4639      	mov	r1, r7
 80087ac:	4620      	mov	r0, r4
 80087ae:	f000 fa97 	bl	8008ce0 <_Bfree>
 80087b2:	e6a5      	b.n	8008500 <_dtoa_r+0x6d8>
 80087b4:	2600      	movs	r6, #0
 80087b6:	4637      	mov	r7, r6
 80087b8:	e7e1      	b.n	800877e <_dtoa_r+0x956>
 80087ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80087bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80087c0:	4637      	mov	r7, r6
 80087c2:	e599      	b.n	80082f8 <_dtoa_r+0x4d0>
 80087c4:	9b08      	ldr	r3, [sp, #32]
 80087c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 80fd 	beq.w	80089ca <_dtoa_r+0xba2>
 80087d0:	2d00      	cmp	r5, #0
 80087d2:	dd05      	ble.n	80087e0 <_dtoa_r+0x9b8>
 80087d4:	4639      	mov	r1, r7
 80087d6:	462a      	mov	r2, r5
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 fc53 	bl	8009084 <__lshift>
 80087de:	4607      	mov	r7, r0
 80087e0:	9b06      	ldr	r3, [sp, #24]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d05c      	beq.n	80088a0 <_dtoa_r+0xa78>
 80087e6:	6879      	ldr	r1, [r7, #4]
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 fa39 	bl	8008c60 <_Balloc>
 80087ee:	4605      	mov	r5, r0
 80087f0:	b928      	cbnz	r0, 80087fe <_dtoa_r+0x9d6>
 80087f2:	4b80      	ldr	r3, [pc, #512]	; (80089f4 <_dtoa_r+0xbcc>)
 80087f4:	4602      	mov	r2, r0
 80087f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087fa:	f7ff bb2e 	b.w	8007e5a <_dtoa_r+0x32>
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	3202      	adds	r2, #2
 8008802:	0092      	lsls	r2, r2, #2
 8008804:	f107 010c 	add.w	r1, r7, #12
 8008808:	300c      	adds	r0, #12
 800880a:	f7fd feb1 	bl	8006570 <memcpy>
 800880e:	2201      	movs	r2, #1
 8008810:	4629      	mov	r1, r5
 8008812:	4620      	mov	r0, r4
 8008814:	f000 fc36 	bl	8009084 <__lshift>
 8008818:	9b00      	ldr	r3, [sp, #0]
 800881a:	3301      	adds	r3, #1
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	9b00      	ldr	r3, [sp, #0]
 8008820:	444b      	add	r3, r9
 8008822:	9307      	str	r3, [sp, #28]
 8008824:	9b02      	ldr	r3, [sp, #8]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	46b8      	mov	r8, r7
 800882c:	9306      	str	r3, [sp, #24]
 800882e:	4607      	mov	r7, r0
 8008830:	9b01      	ldr	r3, [sp, #4]
 8008832:	4631      	mov	r1, r6
 8008834:	3b01      	subs	r3, #1
 8008836:	4658      	mov	r0, fp
 8008838:	9302      	str	r3, [sp, #8]
 800883a:	f7ff fa69 	bl	8007d10 <quorem>
 800883e:	4603      	mov	r3, r0
 8008840:	3330      	adds	r3, #48	; 0x30
 8008842:	9004      	str	r0, [sp, #16]
 8008844:	4641      	mov	r1, r8
 8008846:	4658      	mov	r0, fp
 8008848:	9308      	str	r3, [sp, #32]
 800884a:	f000 fc87 	bl	800915c <__mcmp>
 800884e:	463a      	mov	r2, r7
 8008850:	4681      	mov	r9, r0
 8008852:	4631      	mov	r1, r6
 8008854:	4620      	mov	r0, r4
 8008856:	f000 fc9d 	bl	8009194 <__mdiff>
 800885a:	68c2      	ldr	r2, [r0, #12]
 800885c:	9b08      	ldr	r3, [sp, #32]
 800885e:	4605      	mov	r5, r0
 8008860:	bb02      	cbnz	r2, 80088a4 <_dtoa_r+0xa7c>
 8008862:	4601      	mov	r1, r0
 8008864:	4658      	mov	r0, fp
 8008866:	f000 fc79 	bl	800915c <__mcmp>
 800886a:	9b08      	ldr	r3, [sp, #32]
 800886c:	4602      	mov	r2, r0
 800886e:	4629      	mov	r1, r5
 8008870:	4620      	mov	r0, r4
 8008872:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008876:	f000 fa33 	bl	8008ce0 <_Bfree>
 800887a:	9b05      	ldr	r3, [sp, #20]
 800887c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800887e:	9d01      	ldr	r5, [sp, #4]
 8008880:	ea43 0102 	orr.w	r1, r3, r2
 8008884:	9b06      	ldr	r3, [sp, #24]
 8008886:	430b      	orrs	r3, r1
 8008888:	9b08      	ldr	r3, [sp, #32]
 800888a:	d10d      	bne.n	80088a8 <_dtoa_r+0xa80>
 800888c:	2b39      	cmp	r3, #57	; 0x39
 800888e:	d029      	beq.n	80088e4 <_dtoa_r+0xabc>
 8008890:	f1b9 0f00 	cmp.w	r9, #0
 8008894:	dd01      	ble.n	800889a <_dtoa_r+0xa72>
 8008896:	9b04      	ldr	r3, [sp, #16]
 8008898:	3331      	adds	r3, #49	; 0x31
 800889a:	9a02      	ldr	r2, [sp, #8]
 800889c:	7013      	strb	r3, [r2, #0]
 800889e:	e774      	b.n	800878a <_dtoa_r+0x962>
 80088a0:	4638      	mov	r0, r7
 80088a2:	e7b9      	b.n	8008818 <_dtoa_r+0x9f0>
 80088a4:	2201      	movs	r2, #1
 80088a6:	e7e2      	b.n	800886e <_dtoa_r+0xa46>
 80088a8:	f1b9 0f00 	cmp.w	r9, #0
 80088ac:	db06      	blt.n	80088bc <_dtoa_r+0xa94>
 80088ae:	9905      	ldr	r1, [sp, #20]
 80088b0:	ea41 0909 	orr.w	r9, r1, r9
 80088b4:	9906      	ldr	r1, [sp, #24]
 80088b6:	ea59 0101 	orrs.w	r1, r9, r1
 80088ba:	d120      	bne.n	80088fe <_dtoa_r+0xad6>
 80088bc:	2a00      	cmp	r2, #0
 80088be:	ddec      	ble.n	800889a <_dtoa_r+0xa72>
 80088c0:	4659      	mov	r1, fp
 80088c2:	2201      	movs	r2, #1
 80088c4:	4620      	mov	r0, r4
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	f000 fbdc 	bl	8009084 <__lshift>
 80088cc:	4631      	mov	r1, r6
 80088ce:	4683      	mov	fp, r0
 80088d0:	f000 fc44 	bl	800915c <__mcmp>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	9b01      	ldr	r3, [sp, #4]
 80088d8:	dc02      	bgt.n	80088e0 <_dtoa_r+0xab8>
 80088da:	d1de      	bne.n	800889a <_dtoa_r+0xa72>
 80088dc:	07da      	lsls	r2, r3, #31
 80088de:	d5dc      	bpl.n	800889a <_dtoa_r+0xa72>
 80088e0:	2b39      	cmp	r3, #57	; 0x39
 80088e2:	d1d8      	bne.n	8008896 <_dtoa_r+0xa6e>
 80088e4:	9a02      	ldr	r2, [sp, #8]
 80088e6:	2339      	movs	r3, #57	; 0x39
 80088e8:	7013      	strb	r3, [r2, #0]
 80088ea:	462b      	mov	r3, r5
 80088ec:	461d      	mov	r5, r3
 80088ee:	3b01      	subs	r3, #1
 80088f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088f4:	2a39      	cmp	r2, #57	; 0x39
 80088f6:	d050      	beq.n	800899a <_dtoa_r+0xb72>
 80088f8:	3201      	adds	r2, #1
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	e745      	b.n	800878a <_dtoa_r+0x962>
 80088fe:	2a00      	cmp	r2, #0
 8008900:	dd03      	ble.n	800890a <_dtoa_r+0xae2>
 8008902:	2b39      	cmp	r3, #57	; 0x39
 8008904:	d0ee      	beq.n	80088e4 <_dtoa_r+0xabc>
 8008906:	3301      	adds	r3, #1
 8008908:	e7c7      	b.n	800889a <_dtoa_r+0xa72>
 800890a:	9a01      	ldr	r2, [sp, #4]
 800890c:	9907      	ldr	r1, [sp, #28]
 800890e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008912:	428a      	cmp	r2, r1
 8008914:	d02a      	beq.n	800896c <_dtoa_r+0xb44>
 8008916:	4659      	mov	r1, fp
 8008918:	2300      	movs	r3, #0
 800891a:	220a      	movs	r2, #10
 800891c:	4620      	mov	r0, r4
 800891e:	f000 fa01 	bl	8008d24 <__multadd>
 8008922:	45b8      	cmp	r8, r7
 8008924:	4683      	mov	fp, r0
 8008926:	f04f 0300 	mov.w	r3, #0
 800892a:	f04f 020a 	mov.w	r2, #10
 800892e:	4641      	mov	r1, r8
 8008930:	4620      	mov	r0, r4
 8008932:	d107      	bne.n	8008944 <_dtoa_r+0xb1c>
 8008934:	f000 f9f6 	bl	8008d24 <__multadd>
 8008938:	4680      	mov	r8, r0
 800893a:	4607      	mov	r7, r0
 800893c:	9b01      	ldr	r3, [sp, #4]
 800893e:	3301      	adds	r3, #1
 8008940:	9301      	str	r3, [sp, #4]
 8008942:	e775      	b.n	8008830 <_dtoa_r+0xa08>
 8008944:	f000 f9ee 	bl	8008d24 <__multadd>
 8008948:	4639      	mov	r1, r7
 800894a:	4680      	mov	r8, r0
 800894c:	2300      	movs	r3, #0
 800894e:	220a      	movs	r2, #10
 8008950:	4620      	mov	r0, r4
 8008952:	f000 f9e7 	bl	8008d24 <__multadd>
 8008956:	4607      	mov	r7, r0
 8008958:	e7f0      	b.n	800893c <_dtoa_r+0xb14>
 800895a:	f1b9 0f00 	cmp.w	r9, #0
 800895e:	9a00      	ldr	r2, [sp, #0]
 8008960:	bfcc      	ite	gt
 8008962:	464d      	movgt	r5, r9
 8008964:	2501      	movle	r5, #1
 8008966:	4415      	add	r5, r2
 8008968:	f04f 0800 	mov.w	r8, #0
 800896c:	4659      	mov	r1, fp
 800896e:	2201      	movs	r2, #1
 8008970:	4620      	mov	r0, r4
 8008972:	9301      	str	r3, [sp, #4]
 8008974:	f000 fb86 	bl	8009084 <__lshift>
 8008978:	4631      	mov	r1, r6
 800897a:	4683      	mov	fp, r0
 800897c:	f000 fbee 	bl	800915c <__mcmp>
 8008980:	2800      	cmp	r0, #0
 8008982:	dcb2      	bgt.n	80088ea <_dtoa_r+0xac2>
 8008984:	d102      	bne.n	800898c <_dtoa_r+0xb64>
 8008986:	9b01      	ldr	r3, [sp, #4]
 8008988:	07db      	lsls	r3, r3, #31
 800898a:	d4ae      	bmi.n	80088ea <_dtoa_r+0xac2>
 800898c:	462b      	mov	r3, r5
 800898e:	461d      	mov	r5, r3
 8008990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008994:	2a30      	cmp	r2, #48	; 0x30
 8008996:	d0fa      	beq.n	800898e <_dtoa_r+0xb66>
 8008998:	e6f7      	b.n	800878a <_dtoa_r+0x962>
 800899a:	9a00      	ldr	r2, [sp, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d1a5      	bne.n	80088ec <_dtoa_r+0xac4>
 80089a0:	f10a 0a01 	add.w	sl, sl, #1
 80089a4:	2331      	movs	r3, #49	; 0x31
 80089a6:	e779      	b.n	800889c <_dtoa_r+0xa74>
 80089a8:	4b13      	ldr	r3, [pc, #76]	; (80089f8 <_dtoa_r+0xbd0>)
 80089aa:	f7ff baaf 	b.w	8007f0c <_dtoa_r+0xe4>
 80089ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f47f aa86 	bne.w	8007ec2 <_dtoa_r+0x9a>
 80089b6:	4b11      	ldr	r3, [pc, #68]	; (80089fc <_dtoa_r+0xbd4>)
 80089b8:	f7ff baa8 	b.w	8007f0c <_dtoa_r+0xe4>
 80089bc:	f1b9 0f00 	cmp.w	r9, #0
 80089c0:	dc03      	bgt.n	80089ca <_dtoa_r+0xba2>
 80089c2:	9b05      	ldr	r3, [sp, #20]
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	f73f aec9 	bgt.w	800875c <_dtoa_r+0x934>
 80089ca:	9d00      	ldr	r5, [sp, #0]
 80089cc:	4631      	mov	r1, r6
 80089ce:	4658      	mov	r0, fp
 80089d0:	f7ff f99e 	bl	8007d10 <quorem>
 80089d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80089d8:	f805 3b01 	strb.w	r3, [r5], #1
 80089dc:	9a00      	ldr	r2, [sp, #0]
 80089de:	1aaa      	subs	r2, r5, r2
 80089e0:	4591      	cmp	r9, r2
 80089e2:	ddba      	ble.n	800895a <_dtoa_r+0xb32>
 80089e4:	4659      	mov	r1, fp
 80089e6:	2300      	movs	r3, #0
 80089e8:	220a      	movs	r2, #10
 80089ea:	4620      	mov	r0, r4
 80089ec:	f000 f99a 	bl	8008d24 <__multadd>
 80089f0:	4683      	mov	fp, r0
 80089f2:	e7eb      	b.n	80089cc <_dtoa_r+0xba4>
 80089f4:	0800b7b3 	.word	0x0800b7b3
 80089f8:	0800b9a4 	.word	0x0800b9a4
 80089fc:	0800b747 	.word	0x0800b747

08008a00 <fiprintf>:
 8008a00:	b40e      	push	{r1, r2, r3}
 8008a02:	b503      	push	{r0, r1, lr}
 8008a04:	4601      	mov	r1, r0
 8008a06:	ab03      	add	r3, sp, #12
 8008a08:	4805      	ldr	r0, [pc, #20]	; (8008a20 <fiprintf+0x20>)
 8008a0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a0e:	6800      	ldr	r0, [r0, #0]
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	f000 fe5d 	bl	80096d0 <_vfiprintf_r>
 8008a16:	b002      	add	sp, #8
 8008a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a1c:	b003      	add	sp, #12
 8008a1e:	4770      	bx	lr
 8008a20:	20000014 	.word	0x20000014

08008a24 <_findenv_r>:
 8008a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a28:	4607      	mov	r7, r0
 8008a2a:	4689      	mov	r9, r1
 8008a2c:	4616      	mov	r6, r2
 8008a2e:	f001 f8e1 	bl	8009bf4 <__env_lock>
 8008a32:	4b18      	ldr	r3, [pc, #96]	; (8008a94 <_findenv_r+0x70>)
 8008a34:	681c      	ldr	r4, [r3, #0]
 8008a36:	469a      	mov	sl, r3
 8008a38:	b134      	cbz	r4, 8008a48 <_findenv_r+0x24>
 8008a3a:	464b      	mov	r3, r9
 8008a3c:	4698      	mov	r8, r3
 8008a3e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008a42:	b139      	cbz	r1, 8008a54 <_findenv_r+0x30>
 8008a44:	293d      	cmp	r1, #61	; 0x3d
 8008a46:	d1f9      	bne.n	8008a3c <_findenv_r+0x18>
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f001 f8d9 	bl	8009c00 <__env_unlock>
 8008a4e:	2000      	movs	r0, #0
 8008a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a54:	eba8 0809 	sub.w	r8, r8, r9
 8008a58:	46a3      	mov	fp, r4
 8008a5a:	f854 0b04 	ldr.w	r0, [r4], #4
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d0f2      	beq.n	8008a48 <_findenv_r+0x24>
 8008a62:	4642      	mov	r2, r8
 8008a64:	4649      	mov	r1, r9
 8008a66:	f7fe fdc1 	bl	80075ec <strncmp>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d1f4      	bne.n	8008a58 <_findenv_r+0x34>
 8008a6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008a72:	eb03 0508 	add.w	r5, r3, r8
 8008a76:	f813 3008 	ldrb.w	r3, [r3, r8]
 8008a7a:	2b3d      	cmp	r3, #61	; 0x3d
 8008a7c:	d1ec      	bne.n	8008a58 <_findenv_r+0x34>
 8008a7e:	f8da 3000 	ldr.w	r3, [sl]
 8008a82:	ebab 0303 	sub.w	r3, fp, r3
 8008a86:	109b      	asrs	r3, r3, #2
 8008a88:	4638      	mov	r0, r7
 8008a8a:	6033      	str	r3, [r6, #0]
 8008a8c:	f001 f8b8 	bl	8009c00 <__env_unlock>
 8008a90:	1c68      	adds	r0, r5, #1
 8008a92:	e7dd      	b.n	8008a50 <_findenv_r+0x2c>
 8008a94:	20000000 	.word	0x20000000

08008a98 <_getenv_r>:
 8008a98:	b507      	push	{r0, r1, r2, lr}
 8008a9a:	aa01      	add	r2, sp, #4
 8008a9c:	f7ff ffc2 	bl	8008a24 <_findenv_r>
 8008aa0:	b003      	add	sp, #12
 8008aa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008aa8 <__gettzinfo>:
 8008aa8:	4800      	ldr	r0, [pc, #0]	; (8008aac <__gettzinfo+0x4>)
 8008aaa:	4770      	bx	lr
 8008aac:	20000080 	.word	0x20000080

08008ab0 <gmtime_r>:
 8008ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8008ab8:	460c      	mov	r4, r1
 8008aba:	4a51      	ldr	r2, [pc, #324]	; (8008c00 <gmtime_r+0x150>)
 8008abc:	2300      	movs	r3, #0
 8008abe:	4630      	mov	r0, r6
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	f7f8 f8a1 	bl	8000c08 <__aeabi_ldivmod>
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	4605      	mov	r5, r0
 8008aca:	4a4d      	ldr	r2, [pc, #308]	; (8008c00 <gmtime_r+0x150>)
 8008acc:	4630      	mov	r0, r6
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f7f8 f89a 	bl	8000c08 <__aeabi_ldivmod>
 8008ad4:	2a00      	cmp	r2, #0
 8008ad6:	bfbc      	itt	lt
 8008ad8:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8008adc:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8008ae0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008ae4:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8008ae8:	fbb2 f3f1 	udiv	r3, r2, r1
 8008aec:	fb01 2213 	mls	r2, r1, r3, r2
 8008af0:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8008af4:	bfac      	ite	ge
 8008af6:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8008afa:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8008afe:	60a3      	str	r3, [r4, #8]
 8008b00:	fbb2 f3f1 	udiv	r3, r2, r1
 8008b04:	fb01 2213 	mls	r2, r1, r3, r2
 8008b08:	6063      	str	r3, [r4, #4]
 8008b0a:	6022      	str	r2, [r4, #0]
 8008b0c:	1cc3      	adds	r3, r0, #3
 8008b0e:	2207      	movs	r2, #7
 8008b10:	fb93 f2f2 	sdiv	r2, r3, r2
 8008b14:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8008b18:	1a9b      	subs	r3, r3, r2
 8008b1a:	bf48      	it	mi
 8008b1c:	3307      	addmi	r3, #7
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	61a3      	str	r3, [r4, #24]
 8008b22:	bfb8      	it	lt
 8008b24:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8008b28:	4936      	ldr	r1, [pc, #216]	; (8008c04 <gmtime_r+0x154>)
 8008b2a:	bfae      	itee	ge
 8008b2c:	fb90 f1f1 	sdivge	r1, r0, r1
 8008b30:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8008b34:	fb93 f1f1 	sdivlt	r1, r3, r1
 8008b38:	4b33      	ldr	r3, [pc, #204]	; (8008c08 <gmtime_r+0x158>)
 8008b3a:	fb03 0001 	mla	r0, r3, r1, r0
 8008b3e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8008b42:	fbb0 f2f2 	udiv	r2, r0, r2
 8008b46:	4402      	add	r2, r0
 8008b48:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8008b4c:	fbb0 f3fc 	udiv	r3, r0, ip
 8008b50:	1ad2      	subs	r2, r2, r3
 8008b52:	f240 176d 	movw	r7, #365	; 0x16d
 8008b56:	4b2d      	ldr	r3, [pc, #180]	; (8008c0c <gmtime_r+0x15c>)
 8008b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b5c:	2664      	movs	r6, #100	; 0x64
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	fbb3 f5f7 	udiv	r5, r3, r7
 8008b64:	fbb3 f3fc 	udiv	r3, r3, ip
 8008b68:	fbb5 f2f6 	udiv	r2, r5, r6
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	4403      	add	r3, r0
 8008b70:	fb07 3315 	mls	r3, r7, r5, r3
 8008b74:	2099      	movs	r0, #153	; 0x99
 8008b76:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8008b7a:	f10c 0c02 	add.w	ip, ip, #2
 8008b7e:	f103 0e01 	add.w	lr, r3, #1
 8008b82:	fbbc f7f0 	udiv	r7, ip, r0
 8008b86:	4378      	muls	r0, r7
 8008b88:	3002      	adds	r0, #2
 8008b8a:	f04f 0805 	mov.w	r8, #5
 8008b8e:	fbb0 f0f8 	udiv	r0, r0, r8
 8008b92:	ebae 0000 	sub.w	r0, lr, r0
 8008b96:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8008b9a:	45f4      	cmp	ip, lr
 8008b9c:	bf94      	ite	ls
 8008b9e:	f04f 0c02 	movls.w	ip, #2
 8008ba2:	f06f 0c09 	mvnhi.w	ip, #9
 8008ba6:	4467      	add	r7, ip
 8008ba8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8008bac:	fb0c 5101 	mla	r1, ip, r1, r5
 8008bb0:	2f01      	cmp	r7, #1
 8008bb2:	bf98      	it	ls
 8008bb4:	3101      	addls	r1, #1
 8008bb6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8008bba:	d30c      	bcc.n	8008bd6 <gmtime_r+0x126>
 8008bbc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008bc0:	61e3      	str	r3, [r4, #28]
 8008bc2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60e0      	str	r0, [r4, #12]
 8008bca:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8008bce:	6223      	str	r3, [r4, #32]
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd6:	f015 0f03 	tst.w	r5, #3
 8008bda:	d102      	bne.n	8008be2 <gmtime_r+0x132>
 8008bdc:	fb06 5212 	mls	r2, r6, r2, r5
 8008be0:	b95a      	cbnz	r2, 8008bfa <gmtime_r+0x14a>
 8008be2:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8008be6:	fbb5 f2f6 	udiv	r2, r5, r6
 8008bea:	fb06 5212 	mls	r2, r6, r2, r5
 8008bee:	fab2 f282 	clz	r2, r2
 8008bf2:	0952      	lsrs	r2, r2, #5
 8008bf4:	333b      	adds	r3, #59	; 0x3b
 8008bf6:	4413      	add	r3, r2
 8008bf8:	e7e2      	b.n	8008bc0 <gmtime_r+0x110>
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	e7fa      	b.n	8008bf4 <gmtime_r+0x144>
 8008bfe:	bf00      	nop
 8008c00:	00015180 	.word	0x00015180
 8008c04:	00023ab1 	.word	0x00023ab1
 8008c08:	fffdc54f 	.word	0xfffdc54f
 8008c0c:	00023ab0 	.word	0x00023ab0

08008c10 <_localeconv_r>:
 8008c10:	4800      	ldr	r0, [pc, #0]	; (8008c14 <_localeconv_r+0x4>)
 8008c12:	4770      	bx	lr
 8008c14:	200001c8 	.word	0x200001c8

08008c18 <__retarget_lock_init_recursive>:
 8008c18:	4770      	bx	lr

08008c1a <__retarget_lock_acquire>:
 8008c1a:	4770      	bx	lr

08008c1c <__retarget_lock_acquire_recursive>:
 8008c1c:	4770      	bx	lr

08008c1e <__retarget_lock_release>:
 8008c1e:	4770      	bx	lr

08008c20 <__retarget_lock_release_recursive>:
 8008c20:	4770      	bx	lr

08008c22 <__ascii_mbtowc>:
 8008c22:	b082      	sub	sp, #8
 8008c24:	b901      	cbnz	r1, 8008c28 <__ascii_mbtowc+0x6>
 8008c26:	a901      	add	r1, sp, #4
 8008c28:	b142      	cbz	r2, 8008c3c <__ascii_mbtowc+0x1a>
 8008c2a:	b14b      	cbz	r3, 8008c40 <__ascii_mbtowc+0x1e>
 8008c2c:	7813      	ldrb	r3, [r2, #0]
 8008c2e:	600b      	str	r3, [r1, #0]
 8008c30:	7812      	ldrb	r2, [r2, #0]
 8008c32:	1e10      	subs	r0, r2, #0
 8008c34:	bf18      	it	ne
 8008c36:	2001      	movne	r0, #1
 8008c38:	b002      	add	sp, #8
 8008c3a:	4770      	bx	lr
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	e7fb      	b.n	8008c38 <__ascii_mbtowc+0x16>
 8008c40:	f06f 0001 	mvn.w	r0, #1
 8008c44:	e7f8      	b.n	8008c38 <__ascii_mbtowc+0x16>
	...

08008c48 <__malloc_lock>:
 8008c48:	4801      	ldr	r0, [pc, #4]	; (8008c50 <__malloc_lock+0x8>)
 8008c4a:	f7ff bfe7 	b.w	8008c1c <__retarget_lock_acquire_recursive>
 8008c4e:	bf00      	nop
 8008c50:	200005ac 	.word	0x200005ac

08008c54 <__malloc_unlock>:
 8008c54:	4801      	ldr	r0, [pc, #4]	; (8008c5c <__malloc_unlock+0x8>)
 8008c56:	f7ff bfe3 	b.w	8008c20 <__retarget_lock_release_recursive>
 8008c5a:	bf00      	nop
 8008c5c:	200005ac 	.word	0x200005ac

08008c60 <_Balloc>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c64:	4604      	mov	r4, r0
 8008c66:	460d      	mov	r5, r1
 8008c68:	b976      	cbnz	r6, 8008c88 <_Balloc+0x28>
 8008c6a:	2010      	movs	r0, #16
 8008c6c:	f7fd fc70 	bl	8006550 <malloc>
 8008c70:	4602      	mov	r2, r0
 8008c72:	6260      	str	r0, [r4, #36]	; 0x24
 8008c74:	b920      	cbnz	r0, 8008c80 <_Balloc+0x20>
 8008c76:	4b18      	ldr	r3, [pc, #96]	; (8008cd8 <_Balloc+0x78>)
 8008c78:	4818      	ldr	r0, [pc, #96]	; (8008cdc <_Balloc+0x7c>)
 8008c7a:	2166      	movs	r1, #102	; 0x66
 8008c7c:	f7ff f816 	bl	8007cac <__assert_func>
 8008c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c84:	6006      	str	r6, [r0, #0]
 8008c86:	60c6      	str	r6, [r0, #12]
 8008c88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c8a:	68f3      	ldr	r3, [r6, #12]
 8008c8c:	b183      	cbz	r3, 8008cb0 <_Balloc+0x50>
 8008c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c96:	b9b8      	cbnz	r0, 8008cc8 <_Balloc+0x68>
 8008c98:	2101      	movs	r1, #1
 8008c9a:	fa01 f605 	lsl.w	r6, r1, r5
 8008c9e:	1d72      	adds	r2, r6, #5
 8008ca0:	0092      	lsls	r2, r2, #2
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f000 fb5a 	bl	800935c <_calloc_r>
 8008ca8:	b160      	cbz	r0, 8008cc4 <_Balloc+0x64>
 8008caa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cae:	e00e      	b.n	8008cce <_Balloc+0x6e>
 8008cb0:	2221      	movs	r2, #33	; 0x21
 8008cb2:	2104      	movs	r1, #4
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 fb51 	bl	800935c <_calloc_r>
 8008cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cbc:	60f0      	str	r0, [r6, #12]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1e4      	bne.n	8008c8e <_Balloc+0x2e>
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}
 8008cc8:	6802      	ldr	r2, [r0, #0]
 8008cca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cd4:	e7f7      	b.n	8008cc6 <_Balloc+0x66>
 8008cd6:	bf00      	nop
 8008cd8:	0800b464 	.word	0x0800b464
 8008cdc:	0800b7ce 	.word	0x0800b7ce

08008ce0 <_Bfree>:
 8008ce0:	b570      	push	{r4, r5, r6, lr}
 8008ce2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	b976      	cbnz	r6, 8008d08 <_Bfree+0x28>
 8008cea:	2010      	movs	r0, #16
 8008cec:	f7fd fc30 	bl	8006550 <malloc>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	6268      	str	r0, [r5, #36]	; 0x24
 8008cf4:	b920      	cbnz	r0, 8008d00 <_Bfree+0x20>
 8008cf6:	4b09      	ldr	r3, [pc, #36]	; (8008d1c <_Bfree+0x3c>)
 8008cf8:	4809      	ldr	r0, [pc, #36]	; (8008d20 <_Bfree+0x40>)
 8008cfa:	218a      	movs	r1, #138	; 0x8a
 8008cfc:	f7fe ffd6 	bl	8007cac <__assert_func>
 8008d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d04:	6006      	str	r6, [r0, #0]
 8008d06:	60c6      	str	r6, [r0, #12]
 8008d08:	b13c      	cbz	r4, 8008d1a <_Bfree+0x3a>
 8008d0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d0c:	6862      	ldr	r2, [r4, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d14:	6021      	str	r1, [r4, #0]
 8008d16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d1a:	bd70      	pop	{r4, r5, r6, pc}
 8008d1c:	0800b464 	.word	0x0800b464
 8008d20:	0800b7ce 	.word	0x0800b7ce

08008d24 <__multadd>:
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	690e      	ldr	r6, [r1, #16]
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	4698      	mov	r8, r3
 8008d2e:	460c      	mov	r4, r1
 8008d30:	f101 0014 	add.w	r0, r1, #20
 8008d34:	2300      	movs	r3, #0
 8008d36:	6805      	ldr	r5, [r0, #0]
 8008d38:	b2a9      	uxth	r1, r5
 8008d3a:	fb02 8101 	mla	r1, r2, r1, r8
 8008d3e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008d42:	0c2d      	lsrs	r5, r5, #16
 8008d44:	fb02 c505 	mla	r5, r2, r5, ip
 8008d48:	b289      	uxth	r1, r1
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008d50:	429e      	cmp	r6, r3
 8008d52:	f840 1b04 	str.w	r1, [r0], #4
 8008d56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008d5a:	dcec      	bgt.n	8008d36 <__multadd+0x12>
 8008d5c:	f1b8 0f00 	cmp.w	r8, #0
 8008d60:	d022      	beq.n	8008da8 <__multadd+0x84>
 8008d62:	68a3      	ldr	r3, [r4, #8]
 8008d64:	42b3      	cmp	r3, r6
 8008d66:	dc19      	bgt.n	8008d9c <__multadd+0x78>
 8008d68:	6861      	ldr	r1, [r4, #4]
 8008d6a:	4638      	mov	r0, r7
 8008d6c:	3101      	adds	r1, #1
 8008d6e:	f7ff ff77 	bl	8008c60 <_Balloc>
 8008d72:	4605      	mov	r5, r0
 8008d74:	b928      	cbnz	r0, 8008d82 <__multadd+0x5e>
 8008d76:	4602      	mov	r2, r0
 8008d78:	4b0d      	ldr	r3, [pc, #52]	; (8008db0 <__multadd+0x8c>)
 8008d7a:	480e      	ldr	r0, [pc, #56]	; (8008db4 <__multadd+0x90>)
 8008d7c:	21b5      	movs	r1, #181	; 0xb5
 8008d7e:	f7fe ff95 	bl	8007cac <__assert_func>
 8008d82:	6922      	ldr	r2, [r4, #16]
 8008d84:	3202      	adds	r2, #2
 8008d86:	f104 010c 	add.w	r1, r4, #12
 8008d8a:	0092      	lsls	r2, r2, #2
 8008d8c:	300c      	adds	r0, #12
 8008d8e:	f7fd fbef 	bl	8006570 <memcpy>
 8008d92:	4621      	mov	r1, r4
 8008d94:	4638      	mov	r0, r7
 8008d96:	f7ff ffa3 	bl	8008ce0 <_Bfree>
 8008d9a:	462c      	mov	r4, r5
 8008d9c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008da0:	3601      	adds	r6, #1
 8008da2:	f8c3 8014 	str.w	r8, [r3, #20]
 8008da6:	6126      	str	r6, [r4, #16]
 8008da8:	4620      	mov	r0, r4
 8008daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dae:	bf00      	nop
 8008db0:	0800b7b3 	.word	0x0800b7b3
 8008db4:	0800b7ce 	.word	0x0800b7ce

08008db8 <__hi0bits>:
 8008db8:	0c03      	lsrs	r3, r0, #16
 8008dba:	041b      	lsls	r3, r3, #16
 8008dbc:	b9d3      	cbnz	r3, 8008df4 <__hi0bits+0x3c>
 8008dbe:	0400      	lsls	r0, r0, #16
 8008dc0:	2310      	movs	r3, #16
 8008dc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008dc6:	bf04      	itt	eq
 8008dc8:	0200      	lsleq	r0, r0, #8
 8008dca:	3308      	addeq	r3, #8
 8008dcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008dd0:	bf04      	itt	eq
 8008dd2:	0100      	lsleq	r0, r0, #4
 8008dd4:	3304      	addeq	r3, #4
 8008dd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008dda:	bf04      	itt	eq
 8008ddc:	0080      	lsleq	r0, r0, #2
 8008dde:	3302      	addeq	r3, #2
 8008de0:	2800      	cmp	r0, #0
 8008de2:	db05      	blt.n	8008df0 <__hi0bits+0x38>
 8008de4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008de8:	f103 0301 	add.w	r3, r3, #1
 8008dec:	bf08      	it	eq
 8008dee:	2320      	moveq	r3, #32
 8008df0:	4618      	mov	r0, r3
 8008df2:	4770      	bx	lr
 8008df4:	2300      	movs	r3, #0
 8008df6:	e7e4      	b.n	8008dc2 <__hi0bits+0xa>

08008df8 <__lo0bits>:
 8008df8:	6803      	ldr	r3, [r0, #0]
 8008dfa:	f013 0207 	ands.w	r2, r3, #7
 8008dfe:	4601      	mov	r1, r0
 8008e00:	d00b      	beq.n	8008e1a <__lo0bits+0x22>
 8008e02:	07da      	lsls	r2, r3, #31
 8008e04:	d424      	bmi.n	8008e50 <__lo0bits+0x58>
 8008e06:	0798      	lsls	r0, r3, #30
 8008e08:	bf49      	itett	mi
 8008e0a:	085b      	lsrmi	r3, r3, #1
 8008e0c:	089b      	lsrpl	r3, r3, #2
 8008e0e:	2001      	movmi	r0, #1
 8008e10:	600b      	strmi	r3, [r1, #0]
 8008e12:	bf5c      	itt	pl
 8008e14:	600b      	strpl	r3, [r1, #0]
 8008e16:	2002      	movpl	r0, #2
 8008e18:	4770      	bx	lr
 8008e1a:	b298      	uxth	r0, r3
 8008e1c:	b9b0      	cbnz	r0, 8008e4c <__lo0bits+0x54>
 8008e1e:	0c1b      	lsrs	r3, r3, #16
 8008e20:	2010      	movs	r0, #16
 8008e22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008e26:	bf04      	itt	eq
 8008e28:	0a1b      	lsreq	r3, r3, #8
 8008e2a:	3008      	addeq	r0, #8
 8008e2c:	071a      	lsls	r2, r3, #28
 8008e2e:	bf04      	itt	eq
 8008e30:	091b      	lsreq	r3, r3, #4
 8008e32:	3004      	addeq	r0, #4
 8008e34:	079a      	lsls	r2, r3, #30
 8008e36:	bf04      	itt	eq
 8008e38:	089b      	lsreq	r3, r3, #2
 8008e3a:	3002      	addeq	r0, #2
 8008e3c:	07da      	lsls	r2, r3, #31
 8008e3e:	d403      	bmi.n	8008e48 <__lo0bits+0x50>
 8008e40:	085b      	lsrs	r3, r3, #1
 8008e42:	f100 0001 	add.w	r0, r0, #1
 8008e46:	d005      	beq.n	8008e54 <__lo0bits+0x5c>
 8008e48:	600b      	str	r3, [r1, #0]
 8008e4a:	4770      	bx	lr
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	e7e8      	b.n	8008e22 <__lo0bits+0x2a>
 8008e50:	2000      	movs	r0, #0
 8008e52:	4770      	bx	lr
 8008e54:	2020      	movs	r0, #32
 8008e56:	4770      	bx	lr

08008e58 <__i2b>:
 8008e58:	b510      	push	{r4, lr}
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	f7ff feff 	bl	8008c60 <_Balloc>
 8008e62:	4602      	mov	r2, r0
 8008e64:	b928      	cbnz	r0, 8008e72 <__i2b+0x1a>
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <__i2b+0x24>)
 8008e68:	4805      	ldr	r0, [pc, #20]	; (8008e80 <__i2b+0x28>)
 8008e6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e6e:	f7fe ff1d 	bl	8007cac <__assert_func>
 8008e72:	2301      	movs	r3, #1
 8008e74:	6144      	str	r4, [r0, #20]
 8008e76:	6103      	str	r3, [r0, #16]
 8008e78:	bd10      	pop	{r4, pc}
 8008e7a:	bf00      	nop
 8008e7c:	0800b7b3 	.word	0x0800b7b3
 8008e80:	0800b7ce 	.word	0x0800b7ce

08008e84 <__multiply>:
 8008e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e88:	4614      	mov	r4, r2
 8008e8a:	690a      	ldr	r2, [r1, #16]
 8008e8c:	6923      	ldr	r3, [r4, #16]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	bfb8      	it	lt
 8008e92:	460b      	movlt	r3, r1
 8008e94:	460d      	mov	r5, r1
 8008e96:	bfbc      	itt	lt
 8008e98:	4625      	movlt	r5, r4
 8008e9a:	461c      	movlt	r4, r3
 8008e9c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008ea0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008ea4:	68ab      	ldr	r3, [r5, #8]
 8008ea6:	6869      	ldr	r1, [r5, #4]
 8008ea8:	eb0a 0709 	add.w	r7, sl, r9
 8008eac:	42bb      	cmp	r3, r7
 8008eae:	b085      	sub	sp, #20
 8008eb0:	bfb8      	it	lt
 8008eb2:	3101      	addlt	r1, #1
 8008eb4:	f7ff fed4 	bl	8008c60 <_Balloc>
 8008eb8:	b930      	cbnz	r0, 8008ec8 <__multiply+0x44>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	4b42      	ldr	r3, [pc, #264]	; (8008fc8 <__multiply+0x144>)
 8008ebe:	4843      	ldr	r0, [pc, #268]	; (8008fcc <__multiply+0x148>)
 8008ec0:	f240 115d 	movw	r1, #349	; 0x15d
 8008ec4:	f7fe fef2 	bl	8007cac <__assert_func>
 8008ec8:	f100 0614 	add.w	r6, r0, #20
 8008ecc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008ed0:	4633      	mov	r3, r6
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	4543      	cmp	r3, r8
 8008ed6:	d31e      	bcc.n	8008f16 <__multiply+0x92>
 8008ed8:	f105 0c14 	add.w	ip, r5, #20
 8008edc:	f104 0314 	add.w	r3, r4, #20
 8008ee0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008ee4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008ee8:	9202      	str	r2, [sp, #8]
 8008eea:	ebac 0205 	sub.w	r2, ip, r5
 8008eee:	3a15      	subs	r2, #21
 8008ef0:	f022 0203 	bic.w	r2, r2, #3
 8008ef4:	3204      	adds	r2, #4
 8008ef6:	f105 0115 	add.w	r1, r5, #21
 8008efa:	458c      	cmp	ip, r1
 8008efc:	bf38      	it	cc
 8008efe:	2204      	movcc	r2, #4
 8008f00:	9201      	str	r2, [sp, #4]
 8008f02:	9a02      	ldr	r2, [sp, #8]
 8008f04:	9303      	str	r3, [sp, #12]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d808      	bhi.n	8008f1c <__multiply+0x98>
 8008f0a:	2f00      	cmp	r7, #0
 8008f0c:	dc55      	bgt.n	8008fba <__multiply+0x136>
 8008f0e:	6107      	str	r7, [r0, #16]
 8008f10:	b005      	add	sp, #20
 8008f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f16:	f843 2b04 	str.w	r2, [r3], #4
 8008f1a:	e7db      	b.n	8008ed4 <__multiply+0x50>
 8008f1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f20:	f1ba 0f00 	cmp.w	sl, #0
 8008f24:	d020      	beq.n	8008f68 <__multiply+0xe4>
 8008f26:	f105 0e14 	add.w	lr, r5, #20
 8008f2a:	46b1      	mov	r9, r6
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008f32:	f8d9 b000 	ldr.w	fp, [r9]
 8008f36:	b2a1      	uxth	r1, r4
 8008f38:	fa1f fb8b 	uxth.w	fp, fp
 8008f3c:	fb0a b101 	mla	r1, sl, r1, fp
 8008f40:	4411      	add	r1, r2
 8008f42:	f8d9 2000 	ldr.w	r2, [r9]
 8008f46:	0c24      	lsrs	r4, r4, #16
 8008f48:	0c12      	lsrs	r2, r2, #16
 8008f4a:	fb0a 2404 	mla	r4, sl, r4, r2
 8008f4e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008f52:	b289      	uxth	r1, r1
 8008f54:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008f58:	45f4      	cmp	ip, lr
 8008f5a:	f849 1b04 	str.w	r1, [r9], #4
 8008f5e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008f62:	d8e4      	bhi.n	8008f2e <__multiply+0xaa>
 8008f64:	9901      	ldr	r1, [sp, #4]
 8008f66:	5072      	str	r2, [r6, r1]
 8008f68:	9a03      	ldr	r2, [sp, #12]
 8008f6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f6e:	3304      	adds	r3, #4
 8008f70:	f1b9 0f00 	cmp.w	r9, #0
 8008f74:	d01f      	beq.n	8008fb6 <__multiply+0x132>
 8008f76:	6834      	ldr	r4, [r6, #0]
 8008f78:	f105 0114 	add.w	r1, r5, #20
 8008f7c:	46b6      	mov	lr, r6
 8008f7e:	f04f 0a00 	mov.w	sl, #0
 8008f82:	880a      	ldrh	r2, [r1, #0]
 8008f84:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008f88:	fb09 b202 	mla	r2, r9, r2, fp
 8008f8c:	4492      	add	sl, r2
 8008f8e:	b2a4      	uxth	r4, r4
 8008f90:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008f94:	f84e 4b04 	str.w	r4, [lr], #4
 8008f98:	f851 4b04 	ldr.w	r4, [r1], #4
 8008f9c:	f8be 2000 	ldrh.w	r2, [lr]
 8008fa0:	0c24      	lsrs	r4, r4, #16
 8008fa2:	fb09 2404 	mla	r4, r9, r4, r2
 8008fa6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008faa:	458c      	cmp	ip, r1
 8008fac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008fb0:	d8e7      	bhi.n	8008f82 <__multiply+0xfe>
 8008fb2:	9a01      	ldr	r2, [sp, #4]
 8008fb4:	50b4      	str	r4, [r6, r2]
 8008fb6:	3604      	adds	r6, #4
 8008fb8:	e7a3      	b.n	8008f02 <__multiply+0x7e>
 8008fba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1a5      	bne.n	8008f0e <__multiply+0x8a>
 8008fc2:	3f01      	subs	r7, #1
 8008fc4:	e7a1      	b.n	8008f0a <__multiply+0x86>
 8008fc6:	bf00      	nop
 8008fc8:	0800b7b3 	.word	0x0800b7b3
 8008fcc:	0800b7ce 	.word	0x0800b7ce

08008fd0 <__pow5mult>:
 8008fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd4:	4615      	mov	r5, r2
 8008fd6:	f012 0203 	ands.w	r2, r2, #3
 8008fda:	4606      	mov	r6, r0
 8008fdc:	460f      	mov	r7, r1
 8008fde:	d007      	beq.n	8008ff0 <__pow5mult+0x20>
 8008fe0:	4c25      	ldr	r4, [pc, #148]	; (8009078 <__pow5mult+0xa8>)
 8008fe2:	3a01      	subs	r2, #1
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fea:	f7ff fe9b 	bl	8008d24 <__multadd>
 8008fee:	4607      	mov	r7, r0
 8008ff0:	10ad      	asrs	r5, r5, #2
 8008ff2:	d03d      	beq.n	8009070 <__pow5mult+0xa0>
 8008ff4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ff6:	b97c      	cbnz	r4, 8009018 <__pow5mult+0x48>
 8008ff8:	2010      	movs	r0, #16
 8008ffa:	f7fd faa9 	bl	8006550 <malloc>
 8008ffe:	4602      	mov	r2, r0
 8009000:	6270      	str	r0, [r6, #36]	; 0x24
 8009002:	b928      	cbnz	r0, 8009010 <__pow5mult+0x40>
 8009004:	4b1d      	ldr	r3, [pc, #116]	; (800907c <__pow5mult+0xac>)
 8009006:	481e      	ldr	r0, [pc, #120]	; (8009080 <__pow5mult+0xb0>)
 8009008:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800900c:	f7fe fe4e 	bl	8007cac <__assert_func>
 8009010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009014:	6004      	str	r4, [r0, #0]
 8009016:	60c4      	str	r4, [r0, #12]
 8009018:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800901c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009020:	b94c      	cbnz	r4, 8009036 <__pow5mult+0x66>
 8009022:	f240 2171 	movw	r1, #625	; 0x271
 8009026:	4630      	mov	r0, r6
 8009028:	f7ff ff16 	bl	8008e58 <__i2b>
 800902c:	2300      	movs	r3, #0
 800902e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009032:	4604      	mov	r4, r0
 8009034:	6003      	str	r3, [r0, #0]
 8009036:	f04f 0900 	mov.w	r9, #0
 800903a:	07eb      	lsls	r3, r5, #31
 800903c:	d50a      	bpl.n	8009054 <__pow5mult+0x84>
 800903e:	4639      	mov	r1, r7
 8009040:	4622      	mov	r2, r4
 8009042:	4630      	mov	r0, r6
 8009044:	f7ff ff1e 	bl	8008e84 <__multiply>
 8009048:	4639      	mov	r1, r7
 800904a:	4680      	mov	r8, r0
 800904c:	4630      	mov	r0, r6
 800904e:	f7ff fe47 	bl	8008ce0 <_Bfree>
 8009052:	4647      	mov	r7, r8
 8009054:	106d      	asrs	r5, r5, #1
 8009056:	d00b      	beq.n	8009070 <__pow5mult+0xa0>
 8009058:	6820      	ldr	r0, [r4, #0]
 800905a:	b938      	cbnz	r0, 800906c <__pow5mult+0x9c>
 800905c:	4622      	mov	r2, r4
 800905e:	4621      	mov	r1, r4
 8009060:	4630      	mov	r0, r6
 8009062:	f7ff ff0f 	bl	8008e84 <__multiply>
 8009066:	6020      	str	r0, [r4, #0]
 8009068:	f8c0 9000 	str.w	r9, [r0]
 800906c:	4604      	mov	r4, r0
 800906e:	e7e4      	b.n	800903a <__pow5mult+0x6a>
 8009070:	4638      	mov	r0, r7
 8009072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009076:	bf00      	nop
 8009078:	0800b920 	.word	0x0800b920
 800907c:	0800b464 	.word	0x0800b464
 8009080:	0800b7ce 	.word	0x0800b7ce

08009084 <__lshift>:
 8009084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009088:	460c      	mov	r4, r1
 800908a:	6849      	ldr	r1, [r1, #4]
 800908c:	6923      	ldr	r3, [r4, #16]
 800908e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	4607      	mov	r7, r0
 8009096:	4691      	mov	r9, r2
 8009098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800909c:	f108 0601 	add.w	r6, r8, #1
 80090a0:	42b3      	cmp	r3, r6
 80090a2:	db0b      	blt.n	80090bc <__lshift+0x38>
 80090a4:	4638      	mov	r0, r7
 80090a6:	f7ff fddb 	bl	8008c60 <_Balloc>
 80090aa:	4605      	mov	r5, r0
 80090ac:	b948      	cbnz	r0, 80090c2 <__lshift+0x3e>
 80090ae:	4602      	mov	r2, r0
 80090b0:	4b28      	ldr	r3, [pc, #160]	; (8009154 <__lshift+0xd0>)
 80090b2:	4829      	ldr	r0, [pc, #164]	; (8009158 <__lshift+0xd4>)
 80090b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090b8:	f7fe fdf8 	bl	8007cac <__assert_func>
 80090bc:	3101      	adds	r1, #1
 80090be:	005b      	lsls	r3, r3, #1
 80090c0:	e7ee      	b.n	80090a0 <__lshift+0x1c>
 80090c2:	2300      	movs	r3, #0
 80090c4:	f100 0114 	add.w	r1, r0, #20
 80090c8:	f100 0210 	add.w	r2, r0, #16
 80090cc:	4618      	mov	r0, r3
 80090ce:	4553      	cmp	r3, sl
 80090d0:	db33      	blt.n	800913a <__lshift+0xb6>
 80090d2:	6920      	ldr	r0, [r4, #16]
 80090d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090d8:	f104 0314 	add.w	r3, r4, #20
 80090dc:	f019 091f 	ands.w	r9, r9, #31
 80090e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090e8:	d02b      	beq.n	8009142 <__lshift+0xbe>
 80090ea:	f1c9 0e20 	rsb	lr, r9, #32
 80090ee:	468a      	mov	sl, r1
 80090f0:	2200      	movs	r2, #0
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	fa00 f009 	lsl.w	r0, r0, r9
 80090f8:	4302      	orrs	r2, r0
 80090fa:	f84a 2b04 	str.w	r2, [sl], #4
 80090fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009102:	459c      	cmp	ip, r3
 8009104:	fa22 f20e 	lsr.w	r2, r2, lr
 8009108:	d8f3      	bhi.n	80090f2 <__lshift+0x6e>
 800910a:	ebac 0304 	sub.w	r3, ip, r4
 800910e:	3b15      	subs	r3, #21
 8009110:	f023 0303 	bic.w	r3, r3, #3
 8009114:	3304      	adds	r3, #4
 8009116:	f104 0015 	add.w	r0, r4, #21
 800911a:	4584      	cmp	ip, r0
 800911c:	bf38      	it	cc
 800911e:	2304      	movcc	r3, #4
 8009120:	50ca      	str	r2, [r1, r3]
 8009122:	b10a      	cbz	r2, 8009128 <__lshift+0xa4>
 8009124:	f108 0602 	add.w	r6, r8, #2
 8009128:	3e01      	subs	r6, #1
 800912a:	4638      	mov	r0, r7
 800912c:	612e      	str	r6, [r5, #16]
 800912e:	4621      	mov	r1, r4
 8009130:	f7ff fdd6 	bl	8008ce0 <_Bfree>
 8009134:	4628      	mov	r0, r5
 8009136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800913a:	f842 0f04 	str.w	r0, [r2, #4]!
 800913e:	3301      	adds	r3, #1
 8009140:	e7c5      	b.n	80090ce <__lshift+0x4a>
 8009142:	3904      	subs	r1, #4
 8009144:	f853 2b04 	ldr.w	r2, [r3], #4
 8009148:	f841 2f04 	str.w	r2, [r1, #4]!
 800914c:	459c      	cmp	ip, r3
 800914e:	d8f9      	bhi.n	8009144 <__lshift+0xc0>
 8009150:	e7ea      	b.n	8009128 <__lshift+0xa4>
 8009152:	bf00      	nop
 8009154:	0800b7b3 	.word	0x0800b7b3
 8009158:	0800b7ce 	.word	0x0800b7ce

0800915c <__mcmp>:
 800915c:	b530      	push	{r4, r5, lr}
 800915e:	6902      	ldr	r2, [r0, #16]
 8009160:	690c      	ldr	r4, [r1, #16]
 8009162:	1b12      	subs	r2, r2, r4
 8009164:	d10e      	bne.n	8009184 <__mcmp+0x28>
 8009166:	f100 0314 	add.w	r3, r0, #20
 800916a:	3114      	adds	r1, #20
 800916c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009174:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009178:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800917c:	42a5      	cmp	r5, r4
 800917e:	d003      	beq.n	8009188 <__mcmp+0x2c>
 8009180:	d305      	bcc.n	800918e <__mcmp+0x32>
 8009182:	2201      	movs	r2, #1
 8009184:	4610      	mov	r0, r2
 8009186:	bd30      	pop	{r4, r5, pc}
 8009188:	4283      	cmp	r3, r0
 800918a:	d3f3      	bcc.n	8009174 <__mcmp+0x18>
 800918c:	e7fa      	b.n	8009184 <__mcmp+0x28>
 800918e:	f04f 32ff 	mov.w	r2, #4294967295
 8009192:	e7f7      	b.n	8009184 <__mcmp+0x28>

08009194 <__mdiff>:
 8009194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	460c      	mov	r4, r1
 800919a:	4606      	mov	r6, r0
 800919c:	4611      	mov	r1, r2
 800919e:	4620      	mov	r0, r4
 80091a0:	4617      	mov	r7, r2
 80091a2:	f7ff ffdb 	bl	800915c <__mcmp>
 80091a6:	1e05      	subs	r5, r0, #0
 80091a8:	d110      	bne.n	80091cc <__mdiff+0x38>
 80091aa:	4629      	mov	r1, r5
 80091ac:	4630      	mov	r0, r6
 80091ae:	f7ff fd57 	bl	8008c60 <_Balloc>
 80091b2:	b930      	cbnz	r0, 80091c2 <__mdiff+0x2e>
 80091b4:	4b39      	ldr	r3, [pc, #228]	; (800929c <__mdiff+0x108>)
 80091b6:	4602      	mov	r2, r0
 80091b8:	f240 2132 	movw	r1, #562	; 0x232
 80091bc:	4838      	ldr	r0, [pc, #224]	; (80092a0 <__mdiff+0x10c>)
 80091be:	f7fe fd75 	bl	8007cac <__assert_func>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	bfa4      	itt	ge
 80091ce:	463b      	movge	r3, r7
 80091d0:	4627      	movge	r7, r4
 80091d2:	4630      	mov	r0, r6
 80091d4:	6879      	ldr	r1, [r7, #4]
 80091d6:	bfa6      	itte	ge
 80091d8:	461c      	movge	r4, r3
 80091da:	2500      	movge	r5, #0
 80091dc:	2501      	movlt	r5, #1
 80091de:	f7ff fd3f 	bl	8008c60 <_Balloc>
 80091e2:	b920      	cbnz	r0, 80091ee <__mdiff+0x5a>
 80091e4:	4b2d      	ldr	r3, [pc, #180]	; (800929c <__mdiff+0x108>)
 80091e6:	4602      	mov	r2, r0
 80091e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091ec:	e7e6      	b.n	80091bc <__mdiff+0x28>
 80091ee:	693e      	ldr	r6, [r7, #16]
 80091f0:	60c5      	str	r5, [r0, #12]
 80091f2:	6925      	ldr	r5, [r4, #16]
 80091f4:	f107 0114 	add.w	r1, r7, #20
 80091f8:	f104 0914 	add.w	r9, r4, #20
 80091fc:	f100 0e14 	add.w	lr, r0, #20
 8009200:	f107 0210 	add.w	r2, r7, #16
 8009204:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009208:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800920c:	46f2      	mov	sl, lr
 800920e:	2700      	movs	r7, #0
 8009210:	f859 3b04 	ldr.w	r3, [r9], #4
 8009214:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009218:	fa1f f883 	uxth.w	r8, r3
 800921c:	fa17 f78b 	uxtah	r7, r7, fp
 8009220:	0c1b      	lsrs	r3, r3, #16
 8009222:	eba7 0808 	sub.w	r8, r7, r8
 8009226:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800922a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800922e:	fa1f f888 	uxth.w	r8, r8
 8009232:	141f      	asrs	r7, r3, #16
 8009234:	454d      	cmp	r5, r9
 8009236:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800923a:	f84a 3b04 	str.w	r3, [sl], #4
 800923e:	d8e7      	bhi.n	8009210 <__mdiff+0x7c>
 8009240:	1b2b      	subs	r3, r5, r4
 8009242:	3b15      	subs	r3, #21
 8009244:	f023 0303 	bic.w	r3, r3, #3
 8009248:	3304      	adds	r3, #4
 800924a:	3415      	adds	r4, #21
 800924c:	42a5      	cmp	r5, r4
 800924e:	bf38      	it	cc
 8009250:	2304      	movcc	r3, #4
 8009252:	4419      	add	r1, r3
 8009254:	4473      	add	r3, lr
 8009256:	469e      	mov	lr, r3
 8009258:	460d      	mov	r5, r1
 800925a:	4565      	cmp	r5, ip
 800925c:	d30e      	bcc.n	800927c <__mdiff+0xe8>
 800925e:	f10c 0203 	add.w	r2, ip, #3
 8009262:	1a52      	subs	r2, r2, r1
 8009264:	f022 0203 	bic.w	r2, r2, #3
 8009268:	3903      	subs	r1, #3
 800926a:	458c      	cmp	ip, r1
 800926c:	bf38      	it	cc
 800926e:	2200      	movcc	r2, #0
 8009270:	441a      	add	r2, r3
 8009272:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009276:	b17b      	cbz	r3, 8009298 <__mdiff+0x104>
 8009278:	6106      	str	r6, [r0, #16]
 800927a:	e7a5      	b.n	80091c8 <__mdiff+0x34>
 800927c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009280:	fa17 f488 	uxtah	r4, r7, r8
 8009284:	1422      	asrs	r2, r4, #16
 8009286:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800928a:	b2a4      	uxth	r4, r4
 800928c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009290:	f84e 4b04 	str.w	r4, [lr], #4
 8009294:	1417      	asrs	r7, r2, #16
 8009296:	e7e0      	b.n	800925a <__mdiff+0xc6>
 8009298:	3e01      	subs	r6, #1
 800929a:	e7ea      	b.n	8009272 <__mdiff+0xde>
 800929c:	0800b7b3 	.word	0x0800b7b3
 80092a0:	0800b7ce 	.word	0x0800b7ce

080092a4 <__d2b>:
 80092a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092a8:	4689      	mov	r9, r1
 80092aa:	2101      	movs	r1, #1
 80092ac:	ec57 6b10 	vmov	r6, r7, d0
 80092b0:	4690      	mov	r8, r2
 80092b2:	f7ff fcd5 	bl	8008c60 <_Balloc>
 80092b6:	4604      	mov	r4, r0
 80092b8:	b930      	cbnz	r0, 80092c8 <__d2b+0x24>
 80092ba:	4602      	mov	r2, r0
 80092bc:	4b25      	ldr	r3, [pc, #148]	; (8009354 <__d2b+0xb0>)
 80092be:	4826      	ldr	r0, [pc, #152]	; (8009358 <__d2b+0xb4>)
 80092c0:	f240 310a 	movw	r1, #778	; 0x30a
 80092c4:	f7fe fcf2 	bl	8007cac <__assert_func>
 80092c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80092cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092d0:	bb35      	cbnz	r5, 8009320 <__d2b+0x7c>
 80092d2:	2e00      	cmp	r6, #0
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	d028      	beq.n	800932a <__d2b+0x86>
 80092d8:	4668      	mov	r0, sp
 80092da:	9600      	str	r6, [sp, #0]
 80092dc:	f7ff fd8c 	bl	8008df8 <__lo0bits>
 80092e0:	9900      	ldr	r1, [sp, #0]
 80092e2:	b300      	cbz	r0, 8009326 <__d2b+0x82>
 80092e4:	9a01      	ldr	r2, [sp, #4]
 80092e6:	f1c0 0320 	rsb	r3, r0, #32
 80092ea:	fa02 f303 	lsl.w	r3, r2, r3
 80092ee:	430b      	orrs	r3, r1
 80092f0:	40c2      	lsrs	r2, r0
 80092f2:	6163      	str	r3, [r4, #20]
 80092f4:	9201      	str	r2, [sp, #4]
 80092f6:	9b01      	ldr	r3, [sp, #4]
 80092f8:	61a3      	str	r3, [r4, #24]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	bf14      	ite	ne
 80092fe:	2202      	movne	r2, #2
 8009300:	2201      	moveq	r2, #1
 8009302:	6122      	str	r2, [r4, #16]
 8009304:	b1d5      	cbz	r5, 800933c <__d2b+0x98>
 8009306:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800930a:	4405      	add	r5, r0
 800930c:	f8c9 5000 	str.w	r5, [r9]
 8009310:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009314:	f8c8 0000 	str.w	r0, [r8]
 8009318:	4620      	mov	r0, r4
 800931a:	b003      	add	sp, #12
 800931c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009324:	e7d5      	b.n	80092d2 <__d2b+0x2e>
 8009326:	6161      	str	r1, [r4, #20]
 8009328:	e7e5      	b.n	80092f6 <__d2b+0x52>
 800932a:	a801      	add	r0, sp, #4
 800932c:	f7ff fd64 	bl	8008df8 <__lo0bits>
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	6163      	str	r3, [r4, #20]
 8009334:	2201      	movs	r2, #1
 8009336:	6122      	str	r2, [r4, #16]
 8009338:	3020      	adds	r0, #32
 800933a:	e7e3      	b.n	8009304 <__d2b+0x60>
 800933c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009340:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009344:	f8c9 0000 	str.w	r0, [r9]
 8009348:	6918      	ldr	r0, [r3, #16]
 800934a:	f7ff fd35 	bl	8008db8 <__hi0bits>
 800934e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009352:	e7df      	b.n	8009314 <__d2b+0x70>
 8009354:	0800b7b3 	.word	0x0800b7b3
 8009358:	0800b7ce 	.word	0x0800b7ce

0800935c <_calloc_r>:
 800935c:	b513      	push	{r0, r1, r4, lr}
 800935e:	434a      	muls	r2, r1
 8009360:	4611      	mov	r1, r2
 8009362:	9201      	str	r2, [sp, #4]
 8009364:	f7fd fc02 	bl	8006b6c <_malloc_r>
 8009368:	4604      	mov	r4, r0
 800936a:	b118      	cbz	r0, 8009374 <_calloc_r+0x18>
 800936c:	9a01      	ldr	r2, [sp, #4]
 800936e:	2100      	movs	r1, #0
 8009370:	f7fd f926 	bl	80065c0 <memset>
 8009374:	4620      	mov	r0, r4
 8009376:	b002      	add	sp, #8
 8009378:	bd10      	pop	{r4, pc}

0800937a <_realloc_r>:
 800937a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937c:	4607      	mov	r7, r0
 800937e:	4614      	mov	r4, r2
 8009380:	460e      	mov	r6, r1
 8009382:	b921      	cbnz	r1, 800938e <_realloc_r+0x14>
 8009384:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009388:	4611      	mov	r1, r2
 800938a:	f7fd bbef 	b.w	8006b6c <_malloc_r>
 800938e:	b922      	cbnz	r2, 800939a <_realloc_r+0x20>
 8009390:	f7fd fb9c 	bl	8006acc <_free_r>
 8009394:	4625      	mov	r5, r4
 8009396:	4628      	mov	r0, r5
 8009398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800939a:	f000 fe65 	bl	800a068 <_malloc_usable_size_r>
 800939e:	42a0      	cmp	r0, r4
 80093a0:	d20f      	bcs.n	80093c2 <_realloc_r+0x48>
 80093a2:	4621      	mov	r1, r4
 80093a4:	4638      	mov	r0, r7
 80093a6:	f7fd fbe1 	bl	8006b6c <_malloc_r>
 80093aa:	4605      	mov	r5, r0
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d0f2      	beq.n	8009396 <_realloc_r+0x1c>
 80093b0:	4631      	mov	r1, r6
 80093b2:	4622      	mov	r2, r4
 80093b4:	f7fd f8dc 	bl	8006570 <memcpy>
 80093b8:	4631      	mov	r1, r6
 80093ba:	4638      	mov	r0, r7
 80093bc:	f7fd fb86 	bl	8006acc <_free_r>
 80093c0:	e7e9      	b.n	8009396 <_realloc_r+0x1c>
 80093c2:	4635      	mov	r5, r6
 80093c4:	e7e7      	b.n	8009396 <_realloc_r+0x1c>

080093c6 <__ssputs_r>:
 80093c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093ca:	688e      	ldr	r6, [r1, #8]
 80093cc:	429e      	cmp	r6, r3
 80093ce:	4682      	mov	sl, r0
 80093d0:	460c      	mov	r4, r1
 80093d2:	4690      	mov	r8, r2
 80093d4:	461f      	mov	r7, r3
 80093d6:	d838      	bhi.n	800944a <__ssputs_r+0x84>
 80093d8:	898a      	ldrh	r2, [r1, #12]
 80093da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093de:	d032      	beq.n	8009446 <__ssputs_r+0x80>
 80093e0:	6825      	ldr	r5, [r4, #0]
 80093e2:	6909      	ldr	r1, [r1, #16]
 80093e4:	eba5 0901 	sub.w	r9, r5, r1
 80093e8:	6965      	ldr	r5, [r4, #20]
 80093ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093f2:	3301      	adds	r3, #1
 80093f4:	444b      	add	r3, r9
 80093f6:	106d      	asrs	r5, r5, #1
 80093f8:	429d      	cmp	r5, r3
 80093fa:	bf38      	it	cc
 80093fc:	461d      	movcc	r5, r3
 80093fe:	0553      	lsls	r3, r2, #21
 8009400:	d531      	bpl.n	8009466 <__ssputs_r+0xa0>
 8009402:	4629      	mov	r1, r5
 8009404:	f7fd fbb2 	bl	8006b6c <_malloc_r>
 8009408:	4606      	mov	r6, r0
 800940a:	b950      	cbnz	r0, 8009422 <__ssputs_r+0x5c>
 800940c:	230c      	movs	r3, #12
 800940e:	f8ca 3000 	str.w	r3, [sl]
 8009412:	89a3      	ldrh	r3, [r4, #12]
 8009414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009418:	81a3      	strh	r3, [r4, #12]
 800941a:	f04f 30ff 	mov.w	r0, #4294967295
 800941e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009422:	6921      	ldr	r1, [r4, #16]
 8009424:	464a      	mov	r2, r9
 8009426:	f7fd f8a3 	bl	8006570 <memcpy>
 800942a:	89a3      	ldrh	r3, [r4, #12]
 800942c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009434:	81a3      	strh	r3, [r4, #12]
 8009436:	6126      	str	r6, [r4, #16]
 8009438:	6165      	str	r5, [r4, #20]
 800943a:	444e      	add	r6, r9
 800943c:	eba5 0509 	sub.w	r5, r5, r9
 8009440:	6026      	str	r6, [r4, #0]
 8009442:	60a5      	str	r5, [r4, #8]
 8009444:	463e      	mov	r6, r7
 8009446:	42be      	cmp	r6, r7
 8009448:	d900      	bls.n	800944c <__ssputs_r+0x86>
 800944a:	463e      	mov	r6, r7
 800944c:	4632      	mov	r2, r6
 800944e:	6820      	ldr	r0, [r4, #0]
 8009450:	4641      	mov	r1, r8
 8009452:	f7fd f89b 	bl	800658c <memmove>
 8009456:	68a3      	ldr	r3, [r4, #8]
 8009458:	6822      	ldr	r2, [r4, #0]
 800945a:	1b9b      	subs	r3, r3, r6
 800945c:	4432      	add	r2, r6
 800945e:	60a3      	str	r3, [r4, #8]
 8009460:	6022      	str	r2, [r4, #0]
 8009462:	2000      	movs	r0, #0
 8009464:	e7db      	b.n	800941e <__ssputs_r+0x58>
 8009466:	462a      	mov	r2, r5
 8009468:	f7ff ff87 	bl	800937a <_realloc_r>
 800946c:	4606      	mov	r6, r0
 800946e:	2800      	cmp	r0, #0
 8009470:	d1e1      	bne.n	8009436 <__ssputs_r+0x70>
 8009472:	6921      	ldr	r1, [r4, #16]
 8009474:	4650      	mov	r0, sl
 8009476:	f7fd fb29 	bl	8006acc <_free_r>
 800947a:	e7c7      	b.n	800940c <__ssputs_r+0x46>

0800947c <_svfiprintf_r>:
 800947c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009480:	4698      	mov	r8, r3
 8009482:	898b      	ldrh	r3, [r1, #12]
 8009484:	061b      	lsls	r3, r3, #24
 8009486:	b09d      	sub	sp, #116	; 0x74
 8009488:	4607      	mov	r7, r0
 800948a:	460d      	mov	r5, r1
 800948c:	4614      	mov	r4, r2
 800948e:	d50e      	bpl.n	80094ae <_svfiprintf_r+0x32>
 8009490:	690b      	ldr	r3, [r1, #16]
 8009492:	b963      	cbnz	r3, 80094ae <_svfiprintf_r+0x32>
 8009494:	2140      	movs	r1, #64	; 0x40
 8009496:	f7fd fb69 	bl	8006b6c <_malloc_r>
 800949a:	6028      	str	r0, [r5, #0]
 800949c:	6128      	str	r0, [r5, #16]
 800949e:	b920      	cbnz	r0, 80094aa <_svfiprintf_r+0x2e>
 80094a0:	230c      	movs	r3, #12
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	f04f 30ff 	mov.w	r0, #4294967295
 80094a8:	e0d1      	b.n	800964e <_svfiprintf_r+0x1d2>
 80094aa:	2340      	movs	r3, #64	; 0x40
 80094ac:	616b      	str	r3, [r5, #20]
 80094ae:	2300      	movs	r3, #0
 80094b0:	9309      	str	r3, [sp, #36]	; 0x24
 80094b2:	2320      	movs	r3, #32
 80094b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80094b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80094bc:	2330      	movs	r3, #48	; 0x30
 80094be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009668 <_svfiprintf_r+0x1ec>
 80094c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094c6:	f04f 0901 	mov.w	r9, #1
 80094ca:	4623      	mov	r3, r4
 80094cc:	469a      	mov	sl, r3
 80094ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094d2:	b10a      	cbz	r2, 80094d8 <_svfiprintf_r+0x5c>
 80094d4:	2a25      	cmp	r2, #37	; 0x25
 80094d6:	d1f9      	bne.n	80094cc <_svfiprintf_r+0x50>
 80094d8:	ebba 0b04 	subs.w	fp, sl, r4
 80094dc:	d00b      	beq.n	80094f6 <_svfiprintf_r+0x7a>
 80094de:	465b      	mov	r3, fp
 80094e0:	4622      	mov	r2, r4
 80094e2:	4629      	mov	r1, r5
 80094e4:	4638      	mov	r0, r7
 80094e6:	f7ff ff6e 	bl	80093c6 <__ssputs_r>
 80094ea:	3001      	adds	r0, #1
 80094ec:	f000 80aa 	beq.w	8009644 <_svfiprintf_r+0x1c8>
 80094f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094f2:	445a      	add	r2, fp
 80094f4:	9209      	str	r2, [sp, #36]	; 0x24
 80094f6:	f89a 3000 	ldrb.w	r3, [sl]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 80a2 	beq.w	8009644 <_svfiprintf_r+0x1c8>
 8009500:	2300      	movs	r3, #0
 8009502:	f04f 32ff 	mov.w	r2, #4294967295
 8009506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800950a:	f10a 0a01 	add.w	sl, sl, #1
 800950e:	9304      	str	r3, [sp, #16]
 8009510:	9307      	str	r3, [sp, #28]
 8009512:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009516:	931a      	str	r3, [sp, #104]	; 0x68
 8009518:	4654      	mov	r4, sl
 800951a:	2205      	movs	r2, #5
 800951c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009520:	4851      	ldr	r0, [pc, #324]	; (8009668 <_svfiprintf_r+0x1ec>)
 8009522:	f7f6 fe8d 	bl	8000240 <memchr>
 8009526:	9a04      	ldr	r2, [sp, #16]
 8009528:	b9d8      	cbnz	r0, 8009562 <_svfiprintf_r+0xe6>
 800952a:	06d0      	lsls	r0, r2, #27
 800952c:	bf44      	itt	mi
 800952e:	2320      	movmi	r3, #32
 8009530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009534:	0711      	lsls	r1, r2, #28
 8009536:	bf44      	itt	mi
 8009538:	232b      	movmi	r3, #43	; 0x2b
 800953a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800953e:	f89a 3000 	ldrb.w	r3, [sl]
 8009542:	2b2a      	cmp	r3, #42	; 0x2a
 8009544:	d015      	beq.n	8009572 <_svfiprintf_r+0xf6>
 8009546:	9a07      	ldr	r2, [sp, #28]
 8009548:	4654      	mov	r4, sl
 800954a:	2000      	movs	r0, #0
 800954c:	f04f 0c0a 	mov.w	ip, #10
 8009550:	4621      	mov	r1, r4
 8009552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009556:	3b30      	subs	r3, #48	; 0x30
 8009558:	2b09      	cmp	r3, #9
 800955a:	d94e      	bls.n	80095fa <_svfiprintf_r+0x17e>
 800955c:	b1b0      	cbz	r0, 800958c <_svfiprintf_r+0x110>
 800955e:	9207      	str	r2, [sp, #28]
 8009560:	e014      	b.n	800958c <_svfiprintf_r+0x110>
 8009562:	eba0 0308 	sub.w	r3, r0, r8
 8009566:	fa09 f303 	lsl.w	r3, r9, r3
 800956a:	4313      	orrs	r3, r2
 800956c:	9304      	str	r3, [sp, #16]
 800956e:	46a2      	mov	sl, r4
 8009570:	e7d2      	b.n	8009518 <_svfiprintf_r+0x9c>
 8009572:	9b03      	ldr	r3, [sp, #12]
 8009574:	1d19      	adds	r1, r3, #4
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	9103      	str	r1, [sp, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	bfbb      	ittet	lt
 800957e:	425b      	neglt	r3, r3
 8009580:	f042 0202 	orrlt.w	r2, r2, #2
 8009584:	9307      	strge	r3, [sp, #28]
 8009586:	9307      	strlt	r3, [sp, #28]
 8009588:	bfb8      	it	lt
 800958a:	9204      	strlt	r2, [sp, #16]
 800958c:	7823      	ldrb	r3, [r4, #0]
 800958e:	2b2e      	cmp	r3, #46	; 0x2e
 8009590:	d10c      	bne.n	80095ac <_svfiprintf_r+0x130>
 8009592:	7863      	ldrb	r3, [r4, #1]
 8009594:	2b2a      	cmp	r3, #42	; 0x2a
 8009596:	d135      	bne.n	8009604 <_svfiprintf_r+0x188>
 8009598:	9b03      	ldr	r3, [sp, #12]
 800959a:	1d1a      	adds	r2, r3, #4
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	9203      	str	r2, [sp, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	bfb8      	it	lt
 80095a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80095a8:	3402      	adds	r4, #2
 80095aa:	9305      	str	r3, [sp, #20]
 80095ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009678 <_svfiprintf_r+0x1fc>
 80095b0:	7821      	ldrb	r1, [r4, #0]
 80095b2:	2203      	movs	r2, #3
 80095b4:	4650      	mov	r0, sl
 80095b6:	f7f6 fe43 	bl	8000240 <memchr>
 80095ba:	b140      	cbz	r0, 80095ce <_svfiprintf_r+0x152>
 80095bc:	2340      	movs	r3, #64	; 0x40
 80095be:	eba0 000a 	sub.w	r0, r0, sl
 80095c2:	fa03 f000 	lsl.w	r0, r3, r0
 80095c6:	9b04      	ldr	r3, [sp, #16]
 80095c8:	4303      	orrs	r3, r0
 80095ca:	3401      	adds	r4, #1
 80095cc:	9304      	str	r3, [sp, #16]
 80095ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d2:	4826      	ldr	r0, [pc, #152]	; (800966c <_svfiprintf_r+0x1f0>)
 80095d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095d8:	2206      	movs	r2, #6
 80095da:	f7f6 fe31 	bl	8000240 <memchr>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d038      	beq.n	8009654 <_svfiprintf_r+0x1d8>
 80095e2:	4b23      	ldr	r3, [pc, #140]	; (8009670 <_svfiprintf_r+0x1f4>)
 80095e4:	bb1b      	cbnz	r3, 800962e <_svfiprintf_r+0x1b2>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	3307      	adds	r3, #7
 80095ea:	f023 0307 	bic.w	r3, r3, #7
 80095ee:	3308      	adds	r3, #8
 80095f0:	9303      	str	r3, [sp, #12]
 80095f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f4:	4433      	add	r3, r6
 80095f6:	9309      	str	r3, [sp, #36]	; 0x24
 80095f8:	e767      	b.n	80094ca <_svfiprintf_r+0x4e>
 80095fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80095fe:	460c      	mov	r4, r1
 8009600:	2001      	movs	r0, #1
 8009602:	e7a5      	b.n	8009550 <_svfiprintf_r+0xd4>
 8009604:	2300      	movs	r3, #0
 8009606:	3401      	adds	r4, #1
 8009608:	9305      	str	r3, [sp, #20]
 800960a:	4619      	mov	r1, r3
 800960c:	f04f 0c0a 	mov.w	ip, #10
 8009610:	4620      	mov	r0, r4
 8009612:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009616:	3a30      	subs	r2, #48	; 0x30
 8009618:	2a09      	cmp	r2, #9
 800961a:	d903      	bls.n	8009624 <_svfiprintf_r+0x1a8>
 800961c:	2b00      	cmp	r3, #0
 800961e:	d0c5      	beq.n	80095ac <_svfiprintf_r+0x130>
 8009620:	9105      	str	r1, [sp, #20]
 8009622:	e7c3      	b.n	80095ac <_svfiprintf_r+0x130>
 8009624:	fb0c 2101 	mla	r1, ip, r1, r2
 8009628:	4604      	mov	r4, r0
 800962a:	2301      	movs	r3, #1
 800962c:	e7f0      	b.n	8009610 <_svfiprintf_r+0x194>
 800962e:	ab03      	add	r3, sp, #12
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	462a      	mov	r2, r5
 8009634:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <_svfiprintf_r+0x1f8>)
 8009636:	a904      	add	r1, sp, #16
 8009638:	4638      	mov	r0, r7
 800963a:	f7fd fb91 	bl	8006d60 <_printf_float>
 800963e:	1c42      	adds	r2, r0, #1
 8009640:	4606      	mov	r6, r0
 8009642:	d1d6      	bne.n	80095f2 <_svfiprintf_r+0x176>
 8009644:	89ab      	ldrh	r3, [r5, #12]
 8009646:	065b      	lsls	r3, r3, #25
 8009648:	f53f af2c 	bmi.w	80094a4 <_svfiprintf_r+0x28>
 800964c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800964e:	b01d      	add	sp, #116	; 0x74
 8009650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009654:	ab03      	add	r3, sp, #12
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	462a      	mov	r2, r5
 800965a:	4b06      	ldr	r3, [pc, #24]	; (8009674 <_svfiprintf_r+0x1f8>)
 800965c:	a904      	add	r1, sp, #16
 800965e:	4638      	mov	r0, r7
 8009660:	f7fd fe22 	bl	80072a8 <_printf_i>
 8009664:	e7eb      	b.n	800963e <_svfiprintf_r+0x1c2>
 8009666:	bf00      	nop
 8009668:	0800b92c 	.word	0x0800b92c
 800966c:	0800b936 	.word	0x0800b936
 8009670:	08006d61 	.word	0x08006d61
 8009674:	080093c7 	.word	0x080093c7
 8009678:	0800b932 	.word	0x0800b932

0800967c <__sfputc_r>:
 800967c:	6893      	ldr	r3, [r2, #8]
 800967e:	3b01      	subs	r3, #1
 8009680:	2b00      	cmp	r3, #0
 8009682:	b410      	push	{r4}
 8009684:	6093      	str	r3, [r2, #8]
 8009686:	da08      	bge.n	800969a <__sfputc_r+0x1e>
 8009688:	6994      	ldr	r4, [r2, #24]
 800968a:	42a3      	cmp	r3, r4
 800968c:	db01      	blt.n	8009692 <__sfputc_r+0x16>
 800968e:	290a      	cmp	r1, #10
 8009690:	d103      	bne.n	800969a <__sfputc_r+0x1e>
 8009692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009696:	f000 b9bd 	b.w	8009a14 <__swbuf_r>
 800969a:	6813      	ldr	r3, [r2, #0]
 800969c:	1c58      	adds	r0, r3, #1
 800969e:	6010      	str	r0, [r2, #0]
 80096a0:	7019      	strb	r1, [r3, #0]
 80096a2:	4608      	mov	r0, r1
 80096a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <__sfputs_r>:
 80096aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ac:	4606      	mov	r6, r0
 80096ae:	460f      	mov	r7, r1
 80096b0:	4614      	mov	r4, r2
 80096b2:	18d5      	adds	r5, r2, r3
 80096b4:	42ac      	cmp	r4, r5
 80096b6:	d101      	bne.n	80096bc <__sfputs_r+0x12>
 80096b8:	2000      	movs	r0, #0
 80096ba:	e007      	b.n	80096cc <__sfputs_r+0x22>
 80096bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c0:	463a      	mov	r2, r7
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff ffda 	bl	800967c <__sfputc_r>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d1f3      	bne.n	80096b4 <__sfputs_r+0xa>
 80096cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096d0 <_vfiprintf_r>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	460d      	mov	r5, r1
 80096d6:	b09d      	sub	sp, #116	; 0x74
 80096d8:	4614      	mov	r4, r2
 80096da:	4698      	mov	r8, r3
 80096dc:	4606      	mov	r6, r0
 80096de:	b118      	cbz	r0, 80096e8 <_vfiprintf_r+0x18>
 80096e0:	6983      	ldr	r3, [r0, #24]
 80096e2:	b90b      	cbnz	r3, 80096e8 <_vfiprintf_r+0x18>
 80096e4:	f000 fbac 	bl	8009e40 <__sinit>
 80096e8:	4b89      	ldr	r3, [pc, #548]	; (8009910 <_vfiprintf_r+0x240>)
 80096ea:	429d      	cmp	r5, r3
 80096ec:	d11b      	bne.n	8009726 <_vfiprintf_r+0x56>
 80096ee:	6875      	ldr	r5, [r6, #4]
 80096f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096f2:	07d9      	lsls	r1, r3, #31
 80096f4:	d405      	bmi.n	8009702 <_vfiprintf_r+0x32>
 80096f6:	89ab      	ldrh	r3, [r5, #12]
 80096f8:	059a      	lsls	r2, r3, #22
 80096fa:	d402      	bmi.n	8009702 <_vfiprintf_r+0x32>
 80096fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096fe:	f7ff fa8d 	bl	8008c1c <__retarget_lock_acquire_recursive>
 8009702:	89ab      	ldrh	r3, [r5, #12]
 8009704:	071b      	lsls	r3, r3, #28
 8009706:	d501      	bpl.n	800970c <_vfiprintf_r+0x3c>
 8009708:	692b      	ldr	r3, [r5, #16]
 800970a:	b9eb      	cbnz	r3, 8009748 <_vfiprintf_r+0x78>
 800970c:	4629      	mov	r1, r5
 800970e:	4630      	mov	r0, r6
 8009710:	f000 f9f2 	bl	8009af8 <__swsetup_r>
 8009714:	b1c0      	cbz	r0, 8009748 <_vfiprintf_r+0x78>
 8009716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009718:	07dc      	lsls	r4, r3, #31
 800971a:	d50e      	bpl.n	800973a <_vfiprintf_r+0x6a>
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	b01d      	add	sp, #116	; 0x74
 8009722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009726:	4b7b      	ldr	r3, [pc, #492]	; (8009914 <_vfiprintf_r+0x244>)
 8009728:	429d      	cmp	r5, r3
 800972a:	d101      	bne.n	8009730 <_vfiprintf_r+0x60>
 800972c:	68b5      	ldr	r5, [r6, #8]
 800972e:	e7df      	b.n	80096f0 <_vfiprintf_r+0x20>
 8009730:	4b79      	ldr	r3, [pc, #484]	; (8009918 <_vfiprintf_r+0x248>)
 8009732:	429d      	cmp	r5, r3
 8009734:	bf08      	it	eq
 8009736:	68f5      	ldreq	r5, [r6, #12]
 8009738:	e7da      	b.n	80096f0 <_vfiprintf_r+0x20>
 800973a:	89ab      	ldrh	r3, [r5, #12]
 800973c:	0598      	lsls	r0, r3, #22
 800973e:	d4ed      	bmi.n	800971c <_vfiprintf_r+0x4c>
 8009740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009742:	f7ff fa6d 	bl	8008c20 <__retarget_lock_release_recursive>
 8009746:	e7e9      	b.n	800971c <_vfiprintf_r+0x4c>
 8009748:	2300      	movs	r3, #0
 800974a:	9309      	str	r3, [sp, #36]	; 0x24
 800974c:	2320      	movs	r3, #32
 800974e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009752:	f8cd 800c 	str.w	r8, [sp, #12]
 8009756:	2330      	movs	r3, #48	; 0x30
 8009758:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800991c <_vfiprintf_r+0x24c>
 800975c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009760:	f04f 0901 	mov.w	r9, #1
 8009764:	4623      	mov	r3, r4
 8009766:	469a      	mov	sl, r3
 8009768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800976c:	b10a      	cbz	r2, 8009772 <_vfiprintf_r+0xa2>
 800976e:	2a25      	cmp	r2, #37	; 0x25
 8009770:	d1f9      	bne.n	8009766 <_vfiprintf_r+0x96>
 8009772:	ebba 0b04 	subs.w	fp, sl, r4
 8009776:	d00b      	beq.n	8009790 <_vfiprintf_r+0xc0>
 8009778:	465b      	mov	r3, fp
 800977a:	4622      	mov	r2, r4
 800977c:	4629      	mov	r1, r5
 800977e:	4630      	mov	r0, r6
 8009780:	f7ff ff93 	bl	80096aa <__sfputs_r>
 8009784:	3001      	adds	r0, #1
 8009786:	f000 80aa 	beq.w	80098de <_vfiprintf_r+0x20e>
 800978a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800978c:	445a      	add	r2, fp
 800978e:	9209      	str	r2, [sp, #36]	; 0x24
 8009790:	f89a 3000 	ldrb.w	r3, [sl]
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 80a2 	beq.w	80098de <_vfiprintf_r+0x20e>
 800979a:	2300      	movs	r3, #0
 800979c:	f04f 32ff 	mov.w	r2, #4294967295
 80097a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097a4:	f10a 0a01 	add.w	sl, sl, #1
 80097a8:	9304      	str	r3, [sp, #16]
 80097aa:	9307      	str	r3, [sp, #28]
 80097ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097b0:	931a      	str	r3, [sp, #104]	; 0x68
 80097b2:	4654      	mov	r4, sl
 80097b4:	2205      	movs	r2, #5
 80097b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097ba:	4858      	ldr	r0, [pc, #352]	; (800991c <_vfiprintf_r+0x24c>)
 80097bc:	f7f6 fd40 	bl	8000240 <memchr>
 80097c0:	9a04      	ldr	r2, [sp, #16]
 80097c2:	b9d8      	cbnz	r0, 80097fc <_vfiprintf_r+0x12c>
 80097c4:	06d1      	lsls	r1, r2, #27
 80097c6:	bf44      	itt	mi
 80097c8:	2320      	movmi	r3, #32
 80097ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ce:	0713      	lsls	r3, r2, #28
 80097d0:	bf44      	itt	mi
 80097d2:	232b      	movmi	r3, #43	; 0x2b
 80097d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097d8:	f89a 3000 	ldrb.w	r3, [sl]
 80097dc:	2b2a      	cmp	r3, #42	; 0x2a
 80097de:	d015      	beq.n	800980c <_vfiprintf_r+0x13c>
 80097e0:	9a07      	ldr	r2, [sp, #28]
 80097e2:	4654      	mov	r4, sl
 80097e4:	2000      	movs	r0, #0
 80097e6:	f04f 0c0a 	mov.w	ip, #10
 80097ea:	4621      	mov	r1, r4
 80097ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097f0:	3b30      	subs	r3, #48	; 0x30
 80097f2:	2b09      	cmp	r3, #9
 80097f4:	d94e      	bls.n	8009894 <_vfiprintf_r+0x1c4>
 80097f6:	b1b0      	cbz	r0, 8009826 <_vfiprintf_r+0x156>
 80097f8:	9207      	str	r2, [sp, #28]
 80097fa:	e014      	b.n	8009826 <_vfiprintf_r+0x156>
 80097fc:	eba0 0308 	sub.w	r3, r0, r8
 8009800:	fa09 f303 	lsl.w	r3, r9, r3
 8009804:	4313      	orrs	r3, r2
 8009806:	9304      	str	r3, [sp, #16]
 8009808:	46a2      	mov	sl, r4
 800980a:	e7d2      	b.n	80097b2 <_vfiprintf_r+0xe2>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	1d19      	adds	r1, r3, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	9103      	str	r1, [sp, #12]
 8009814:	2b00      	cmp	r3, #0
 8009816:	bfbb      	ittet	lt
 8009818:	425b      	neglt	r3, r3
 800981a:	f042 0202 	orrlt.w	r2, r2, #2
 800981e:	9307      	strge	r3, [sp, #28]
 8009820:	9307      	strlt	r3, [sp, #28]
 8009822:	bfb8      	it	lt
 8009824:	9204      	strlt	r2, [sp, #16]
 8009826:	7823      	ldrb	r3, [r4, #0]
 8009828:	2b2e      	cmp	r3, #46	; 0x2e
 800982a:	d10c      	bne.n	8009846 <_vfiprintf_r+0x176>
 800982c:	7863      	ldrb	r3, [r4, #1]
 800982e:	2b2a      	cmp	r3, #42	; 0x2a
 8009830:	d135      	bne.n	800989e <_vfiprintf_r+0x1ce>
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	1d1a      	adds	r2, r3, #4
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	9203      	str	r2, [sp, #12]
 800983a:	2b00      	cmp	r3, #0
 800983c:	bfb8      	it	lt
 800983e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009842:	3402      	adds	r4, #2
 8009844:	9305      	str	r3, [sp, #20]
 8009846:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800992c <_vfiprintf_r+0x25c>
 800984a:	7821      	ldrb	r1, [r4, #0]
 800984c:	2203      	movs	r2, #3
 800984e:	4650      	mov	r0, sl
 8009850:	f7f6 fcf6 	bl	8000240 <memchr>
 8009854:	b140      	cbz	r0, 8009868 <_vfiprintf_r+0x198>
 8009856:	2340      	movs	r3, #64	; 0x40
 8009858:	eba0 000a 	sub.w	r0, r0, sl
 800985c:	fa03 f000 	lsl.w	r0, r3, r0
 8009860:	9b04      	ldr	r3, [sp, #16]
 8009862:	4303      	orrs	r3, r0
 8009864:	3401      	adds	r4, #1
 8009866:	9304      	str	r3, [sp, #16]
 8009868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800986c:	482c      	ldr	r0, [pc, #176]	; (8009920 <_vfiprintf_r+0x250>)
 800986e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009872:	2206      	movs	r2, #6
 8009874:	f7f6 fce4 	bl	8000240 <memchr>
 8009878:	2800      	cmp	r0, #0
 800987a:	d03f      	beq.n	80098fc <_vfiprintf_r+0x22c>
 800987c:	4b29      	ldr	r3, [pc, #164]	; (8009924 <_vfiprintf_r+0x254>)
 800987e:	bb1b      	cbnz	r3, 80098c8 <_vfiprintf_r+0x1f8>
 8009880:	9b03      	ldr	r3, [sp, #12]
 8009882:	3307      	adds	r3, #7
 8009884:	f023 0307 	bic.w	r3, r3, #7
 8009888:	3308      	adds	r3, #8
 800988a:	9303      	str	r3, [sp, #12]
 800988c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800988e:	443b      	add	r3, r7
 8009890:	9309      	str	r3, [sp, #36]	; 0x24
 8009892:	e767      	b.n	8009764 <_vfiprintf_r+0x94>
 8009894:	fb0c 3202 	mla	r2, ip, r2, r3
 8009898:	460c      	mov	r4, r1
 800989a:	2001      	movs	r0, #1
 800989c:	e7a5      	b.n	80097ea <_vfiprintf_r+0x11a>
 800989e:	2300      	movs	r3, #0
 80098a0:	3401      	adds	r4, #1
 80098a2:	9305      	str	r3, [sp, #20]
 80098a4:	4619      	mov	r1, r3
 80098a6:	f04f 0c0a 	mov.w	ip, #10
 80098aa:	4620      	mov	r0, r4
 80098ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098b0:	3a30      	subs	r2, #48	; 0x30
 80098b2:	2a09      	cmp	r2, #9
 80098b4:	d903      	bls.n	80098be <_vfiprintf_r+0x1ee>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0c5      	beq.n	8009846 <_vfiprintf_r+0x176>
 80098ba:	9105      	str	r1, [sp, #20]
 80098bc:	e7c3      	b.n	8009846 <_vfiprintf_r+0x176>
 80098be:	fb0c 2101 	mla	r1, ip, r1, r2
 80098c2:	4604      	mov	r4, r0
 80098c4:	2301      	movs	r3, #1
 80098c6:	e7f0      	b.n	80098aa <_vfiprintf_r+0x1da>
 80098c8:	ab03      	add	r3, sp, #12
 80098ca:	9300      	str	r3, [sp, #0]
 80098cc:	462a      	mov	r2, r5
 80098ce:	4b16      	ldr	r3, [pc, #88]	; (8009928 <_vfiprintf_r+0x258>)
 80098d0:	a904      	add	r1, sp, #16
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7fd fa44 	bl	8006d60 <_printf_float>
 80098d8:	4607      	mov	r7, r0
 80098da:	1c78      	adds	r0, r7, #1
 80098dc:	d1d6      	bne.n	800988c <_vfiprintf_r+0x1bc>
 80098de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098e0:	07d9      	lsls	r1, r3, #31
 80098e2:	d405      	bmi.n	80098f0 <_vfiprintf_r+0x220>
 80098e4:	89ab      	ldrh	r3, [r5, #12]
 80098e6:	059a      	lsls	r2, r3, #22
 80098e8:	d402      	bmi.n	80098f0 <_vfiprintf_r+0x220>
 80098ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ec:	f7ff f998 	bl	8008c20 <__retarget_lock_release_recursive>
 80098f0:	89ab      	ldrh	r3, [r5, #12]
 80098f2:	065b      	lsls	r3, r3, #25
 80098f4:	f53f af12 	bmi.w	800971c <_vfiprintf_r+0x4c>
 80098f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098fa:	e711      	b.n	8009720 <_vfiprintf_r+0x50>
 80098fc:	ab03      	add	r3, sp, #12
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	462a      	mov	r2, r5
 8009902:	4b09      	ldr	r3, [pc, #36]	; (8009928 <_vfiprintf_r+0x258>)
 8009904:	a904      	add	r1, sp, #16
 8009906:	4630      	mov	r0, r6
 8009908:	f7fd fcce 	bl	80072a8 <_printf_i>
 800990c:	e7e4      	b.n	80098d8 <_vfiprintf_r+0x208>
 800990e:	bf00      	nop
 8009910:	0800b960 	.word	0x0800b960
 8009914:	0800b980 	.word	0x0800b980
 8009918:	0800b940 	.word	0x0800b940
 800991c:	0800b92c 	.word	0x0800b92c
 8009920:	0800b936 	.word	0x0800b936
 8009924:	08006d61 	.word	0x08006d61
 8009928:	080096ab 	.word	0x080096ab
 800992c:	0800b932 	.word	0x0800b932

08009930 <siscanf>:
 8009930:	b40e      	push	{r1, r2, r3}
 8009932:	b510      	push	{r4, lr}
 8009934:	b09f      	sub	sp, #124	; 0x7c
 8009936:	ac21      	add	r4, sp, #132	; 0x84
 8009938:	f44f 7101 	mov.w	r1, #516	; 0x204
 800993c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009940:	9201      	str	r2, [sp, #4]
 8009942:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009946:	9004      	str	r0, [sp, #16]
 8009948:	9008      	str	r0, [sp, #32]
 800994a:	f7f6 fc6b 	bl	8000224 <strlen>
 800994e:	4b0c      	ldr	r3, [pc, #48]	; (8009980 <siscanf+0x50>)
 8009950:	9005      	str	r0, [sp, #20]
 8009952:	9009      	str	r0, [sp, #36]	; 0x24
 8009954:	930d      	str	r3, [sp, #52]	; 0x34
 8009956:	480b      	ldr	r0, [pc, #44]	; (8009984 <siscanf+0x54>)
 8009958:	9a01      	ldr	r2, [sp, #4]
 800995a:	6800      	ldr	r0, [r0, #0]
 800995c:	9403      	str	r4, [sp, #12]
 800995e:	2300      	movs	r3, #0
 8009960:	9311      	str	r3, [sp, #68]	; 0x44
 8009962:	9316      	str	r3, [sp, #88]	; 0x58
 8009964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009968:	f8ad 301e 	strh.w	r3, [sp, #30]
 800996c:	a904      	add	r1, sp, #16
 800996e:	4623      	mov	r3, r4
 8009970:	f000 fbdc 	bl	800a12c <__ssvfiscanf_r>
 8009974:	b01f      	add	sp, #124	; 0x7c
 8009976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800997a:	b003      	add	sp, #12
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	080099ab 	.word	0x080099ab
 8009984:	20000014 	.word	0x20000014

08009988 <__sread>:
 8009988:	b510      	push	{r4, lr}
 800998a:	460c      	mov	r4, r1
 800998c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009990:	f000 fe90 	bl	800a6b4 <_read_r>
 8009994:	2800      	cmp	r0, #0
 8009996:	bfab      	itete	ge
 8009998:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800999a:	89a3      	ldrhlt	r3, [r4, #12]
 800999c:	181b      	addge	r3, r3, r0
 800999e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099a2:	bfac      	ite	ge
 80099a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80099a6:	81a3      	strhlt	r3, [r4, #12]
 80099a8:	bd10      	pop	{r4, pc}

080099aa <__seofread>:
 80099aa:	2000      	movs	r0, #0
 80099ac:	4770      	bx	lr

080099ae <__swrite>:
 80099ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b2:	461f      	mov	r7, r3
 80099b4:	898b      	ldrh	r3, [r1, #12]
 80099b6:	05db      	lsls	r3, r3, #23
 80099b8:	4605      	mov	r5, r0
 80099ba:	460c      	mov	r4, r1
 80099bc:	4616      	mov	r6, r2
 80099be:	d505      	bpl.n	80099cc <__swrite+0x1e>
 80099c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c4:	2302      	movs	r3, #2
 80099c6:	2200      	movs	r2, #0
 80099c8:	f000 fad8 	bl	8009f7c <_lseek_r>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	4632      	mov	r2, r6
 80099da:	463b      	mov	r3, r7
 80099dc:	4628      	mov	r0, r5
 80099de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099e2:	f000 b877 	b.w	8009ad4 <_write_r>

080099e6 <__sseek>:
 80099e6:	b510      	push	{r4, lr}
 80099e8:	460c      	mov	r4, r1
 80099ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ee:	f000 fac5 	bl	8009f7c <_lseek_r>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	bf15      	itete	ne
 80099f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80099fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a02:	81a3      	strheq	r3, [r4, #12]
 8009a04:	bf18      	it	ne
 8009a06:	81a3      	strhne	r3, [r4, #12]
 8009a08:	bd10      	pop	{r4, pc}

08009a0a <__sclose>:
 8009a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0e:	f000 b8e1 	b.w	8009bd4 <_close_r>
	...

08009a14 <__swbuf_r>:
 8009a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a16:	460e      	mov	r6, r1
 8009a18:	4614      	mov	r4, r2
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	b118      	cbz	r0, 8009a26 <__swbuf_r+0x12>
 8009a1e:	6983      	ldr	r3, [r0, #24]
 8009a20:	b90b      	cbnz	r3, 8009a26 <__swbuf_r+0x12>
 8009a22:	f000 fa0d 	bl	8009e40 <__sinit>
 8009a26:	4b21      	ldr	r3, [pc, #132]	; (8009aac <__swbuf_r+0x98>)
 8009a28:	429c      	cmp	r4, r3
 8009a2a:	d12b      	bne.n	8009a84 <__swbuf_r+0x70>
 8009a2c:	686c      	ldr	r4, [r5, #4]
 8009a2e:	69a3      	ldr	r3, [r4, #24]
 8009a30:	60a3      	str	r3, [r4, #8]
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	071a      	lsls	r2, r3, #28
 8009a36:	d52f      	bpl.n	8009a98 <__swbuf_r+0x84>
 8009a38:	6923      	ldr	r3, [r4, #16]
 8009a3a:	b36b      	cbz	r3, 8009a98 <__swbuf_r+0x84>
 8009a3c:	6923      	ldr	r3, [r4, #16]
 8009a3e:	6820      	ldr	r0, [r4, #0]
 8009a40:	1ac0      	subs	r0, r0, r3
 8009a42:	6963      	ldr	r3, [r4, #20]
 8009a44:	b2f6      	uxtb	r6, r6
 8009a46:	4283      	cmp	r3, r0
 8009a48:	4637      	mov	r7, r6
 8009a4a:	dc04      	bgt.n	8009a56 <__swbuf_r+0x42>
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f000 f962 	bl	8009d18 <_fflush_r>
 8009a54:	bb30      	cbnz	r0, 8009aa4 <__swbuf_r+0x90>
 8009a56:	68a3      	ldr	r3, [r4, #8]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	60a3      	str	r3, [r4, #8]
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	1c5a      	adds	r2, r3, #1
 8009a60:	6022      	str	r2, [r4, #0]
 8009a62:	701e      	strb	r6, [r3, #0]
 8009a64:	6963      	ldr	r3, [r4, #20]
 8009a66:	3001      	adds	r0, #1
 8009a68:	4283      	cmp	r3, r0
 8009a6a:	d004      	beq.n	8009a76 <__swbuf_r+0x62>
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	07db      	lsls	r3, r3, #31
 8009a70:	d506      	bpl.n	8009a80 <__swbuf_r+0x6c>
 8009a72:	2e0a      	cmp	r6, #10
 8009a74:	d104      	bne.n	8009a80 <__swbuf_r+0x6c>
 8009a76:	4621      	mov	r1, r4
 8009a78:	4628      	mov	r0, r5
 8009a7a:	f000 f94d 	bl	8009d18 <_fflush_r>
 8009a7e:	b988      	cbnz	r0, 8009aa4 <__swbuf_r+0x90>
 8009a80:	4638      	mov	r0, r7
 8009a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a84:	4b0a      	ldr	r3, [pc, #40]	; (8009ab0 <__swbuf_r+0x9c>)
 8009a86:	429c      	cmp	r4, r3
 8009a88:	d101      	bne.n	8009a8e <__swbuf_r+0x7a>
 8009a8a:	68ac      	ldr	r4, [r5, #8]
 8009a8c:	e7cf      	b.n	8009a2e <__swbuf_r+0x1a>
 8009a8e:	4b09      	ldr	r3, [pc, #36]	; (8009ab4 <__swbuf_r+0xa0>)
 8009a90:	429c      	cmp	r4, r3
 8009a92:	bf08      	it	eq
 8009a94:	68ec      	ldreq	r4, [r5, #12]
 8009a96:	e7ca      	b.n	8009a2e <__swbuf_r+0x1a>
 8009a98:	4621      	mov	r1, r4
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	f000 f82c 	bl	8009af8 <__swsetup_r>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d0cb      	beq.n	8009a3c <__swbuf_r+0x28>
 8009aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8009aa8:	e7ea      	b.n	8009a80 <__swbuf_r+0x6c>
 8009aaa:	bf00      	nop
 8009aac:	0800b960 	.word	0x0800b960
 8009ab0:	0800b980 	.word	0x0800b980
 8009ab4:	0800b940 	.word	0x0800b940

08009ab8 <__ascii_wctomb>:
 8009ab8:	b149      	cbz	r1, 8009ace <__ascii_wctomb+0x16>
 8009aba:	2aff      	cmp	r2, #255	; 0xff
 8009abc:	bf85      	ittet	hi
 8009abe:	238a      	movhi	r3, #138	; 0x8a
 8009ac0:	6003      	strhi	r3, [r0, #0]
 8009ac2:	700a      	strbls	r2, [r1, #0]
 8009ac4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ac8:	bf98      	it	ls
 8009aca:	2001      	movls	r0, #1
 8009acc:	4770      	bx	lr
 8009ace:	4608      	mov	r0, r1
 8009ad0:	4770      	bx	lr
	...

08009ad4 <_write_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d07      	ldr	r5, [pc, #28]	; (8009af4 <_write_r+0x20>)
 8009ad8:	4604      	mov	r4, r0
 8009ada:	4608      	mov	r0, r1
 8009adc:	4611      	mov	r1, r2
 8009ade:	2200      	movs	r2, #0
 8009ae0:	602a      	str	r2, [r5, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f7f7 fd37 	bl	8001556 <_write>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_write_r+0x1e>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_write_r+0x1e>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	200005b4 	.word	0x200005b4

08009af8 <__swsetup_r>:
 8009af8:	4b32      	ldr	r3, [pc, #200]	; (8009bc4 <__swsetup_r+0xcc>)
 8009afa:	b570      	push	{r4, r5, r6, lr}
 8009afc:	681d      	ldr	r5, [r3, #0]
 8009afe:	4606      	mov	r6, r0
 8009b00:	460c      	mov	r4, r1
 8009b02:	b125      	cbz	r5, 8009b0e <__swsetup_r+0x16>
 8009b04:	69ab      	ldr	r3, [r5, #24]
 8009b06:	b913      	cbnz	r3, 8009b0e <__swsetup_r+0x16>
 8009b08:	4628      	mov	r0, r5
 8009b0a:	f000 f999 	bl	8009e40 <__sinit>
 8009b0e:	4b2e      	ldr	r3, [pc, #184]	; (8009bc8 <__swsetup_r+0xd0>)
 8009b10:	429c      	cmp	r4, r3
 8009b12:	d10f      	bne.n	8009b34 <__swsetup_r+0x3c>
 8009b14:	686c      	ldr	r4, [r5, #4]
 8009b16:	89a3      	ldrh	r3, [r4, #12]
 8009b18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b1c:	0719      	lsls	r1, r3, #28
 8009b1e:	d42c      	bmi.n	8009b7a <__swsetup_r+0x82>
 8009b20:	06dd      	lsls	r5, r3, #27
 8009b22:	d411      	bmi.n	8009b48 <__swsetup_r+0x50>
 8009b24:	2309      	movs	r3, #9
 8009b26:	6033      	str	r3, [r6, #0]
 8009b28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009b2c:	81a3      	strh	r3, [r4, #12]
 8009b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b32:	e03e      	b.n	8009bb2 <__swsetup_r+0xba>
 8009b34:	4b25      	ldr	r3, [pc, #148]	; (8009bcc <__swsetup_r+0xd4>)
 8009b36:	429c      	cmp	r4, r3
 8009b38:	d101      	bne.n	8009b3e <__swsetup_r+0x46>
 8009b3a:	68ac      	ldr	r4, [r5, #8]
 8009b3c:	e7eb      	b.n	8009b16 <__swsetup_r+0x1e>
 8009b3e:	4b24      	ldr	r3, [pc, #144]	; (8009bd0 <__swsetup_r+0xd8>)
 8009b40:	429c      	cmp	r4, r3
 8009b42:	bf08      	it	eq
 8009b44:	68ec      	ldreq	r4, [r5, #12]
 8009b46:	e7e6      	b.n	8009b16 <__swsetup_r+0x1e>
 8009b48:	0758      	lsls	r0, r3, #29
 8009b4a:	d512      	bpl.n	8009b72 <__swsetup_r+0x7a>
 8009b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b4e:	b141      	cbz	r1, 8009b62 <__swsetup_r+0x6a>
 8009b50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b54:	4299      	cmp	r1, r3
 8009b56:	d002      	beq.n	8009b5e <__swsetup_r+0x66>
 8009b58:	4630      	mov	r0, r6
 8009b5a:	f7fc ffb7 	bl	8006acc <_free_r>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	6363      	str	r3, [r4, #52]	; 0x34
 8009b62:	89a3      	ldrh	r3, [r4, #12]
 8009b64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b68:	81a3      	strh	r3, [r4, #12]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	6063      	str	r3, [r4, #4]
 8009b6e:	6923      	ldr	r3, [r4, #16]
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	f043 0308 	orr.w	r3, r3, #8
 8009b78:	81a3      	strh	r3, [r4, #12]
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	b94b      	cbnz	r3, 8009b92 <__swsetup_r+0x9a>
 8009b7e:	89a3      	ldrh	r3, [r4, #12]
 8009b80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b88:	d003      	beq.n	8009b92 <__swsetup_r+0x9a>
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4630      	mov	r0, r6
 8009b8e:	f000 fa2b 	bl	8009fe8 <__smakebuf_r>
 8009b92:	89a0      	ldrh	r0, [r4, #12]
 8009b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b98:	f010 0301 	ands.w	r3, r0, #1
 8009b9c:	d00a      	beq.n	8009bb4 <__swsetup_r+0xbc>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60a3      	str	r3, [r4, #8]
 8009ba2:	6963      	ldr	r3, [r4, #20]
 8009ba4:	425b      	negs	r3, r3
 8009ba6:	61a3      	str	r3, [r4, #24]
 8009ba8:	6923      	ldr	r3, [r4, #16]
 8009baa:	b943      	cbnz	r3, 8009bbe <__swsetup_r+0xc6>
 8009bac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009bb0:	d1ba      	bne.n	8009b28 <__swsetup_r+0x30>
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}
 8009bb4:	0781      	lsls	r1, r0, #30
 8009bb6:	bf58      	it	pl
 8009bb8:	6963      	ldrpl	r3, [r4, #20]
 8009bba:	60a3      	str	r3, [r4, #8]
 8009bbc:	e7f4      	b.n	8009ba8 <__swsetup_r+0xb0>
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	e7f7      	b.n	8009bb2 <__swsetup_r+0xba>
 8009bc2:	bf00      	nop
 8009bc4:	20000014 	.word	0x20000014
 8009bc8:	0800b960 	.word	0x0800b960
 8009bcc:	0800b980 	.word	0x0800b980
 8009bd0:	0800b940 	.word	0x0800b940

08009bd4 <_close_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	4d06      	ldr	r5, [pc, #24]	; (8009bf0 <_close_r+0x1c>)
 8009bd8:	2300      	movs	r3, #0
 8009bda:	4604      	mov	r4, r0
 8009bdc:	4608      	mov	r0, r1
 8009bde:	602b      	str	r3, [r5, #0]
 8009be0:	f7f7 fcd5 	bl	800158e <_close>
 8009be4:	1c43      	adds	r3, r0, #1
 8009be6:	d102      	bne.n	8009bee <_close_r+0x1a>
 8009be8:	682b      	ldr	r3, [r5, #0]
 8009bea:	b103      	cbz	r3, 8009bee <_close_r+0x1a>
 8009bec:	6023      	str	r3, [r4, #0]
 8009bee:	bd38      	pop	{r3, r4, r5, pc}
 8009bf0:	200005b4 	.word	0x200005b4

08009bf4 <__env_lock>:
 8009bf4:	4801      	ldr	r0, [pc, #4]	; (8009bfc <__env_lock+0x8>)
 8009bf6:	f7ff b811 	b.w	8008c1c <__retarget_lock_acquire_recursive>
 8009bfa:	bf00      	nop
 8009bfc:	200005aa 	.word	0x200005aa

08009c00 <__env_unlock>:
 8009c00:	4801      	ldr	r0, [pc, #4]	; (8009c08 <__env_unlock+0x8>)
 8009c02:	f7ff b80d 	b.w	8008c20 <__retarget_lock_release_recursive>
 8009c06:	bf00      	nop
 8009c08:	200005aa 	.word	0x200005aa

08009c0c <__sflush_r>:
 8009c0c:	898a      	ldrh	r2, [r1, #12]
 8009c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c12:	4605      	mov	r5, r0
 8009c14:	0710      	lsls	r0, r2, #28
 8009c16:	460c      	mov	r4, r1
 8009c18:	d458      	bmi.n	8009ccc <__sflush_r+0xc0>
 8009c1a:	684b      	ldr	r3, [r1, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dc05      	bgt.n	8009c2c <__sflush_r+0x20>
 8009c20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	dc02      	bgt.n	8009c2c <__sflush_r+0x20>
 8009c26:	2000      	movs	r0, #0
 8009c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c2e:	2e00      	cmp	r6, #0
 8009c30:	d0f9      	beq.n	8009c26 <__sflush_r+0x1a>
 8009c32:	2300      	movs	r3, #0
 8009c34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c38:	682f      	ldr	r7, [r5, #0]
 8009c3a:	602b      	str	r3, [r5, #0]
 8009c3c:	d032      	beq.n	8009ca4 <__sflush_r+0x98>
 8009c3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	075a      	lsls	r2, r3, #29
 8009c44:	d505      	bpl.n	8009c52 <__sflush_r+0x46>
 8009c46:	6863      	ldr	r3, [r4, #4]
 8009c48:	1ac0      	subs	r0, r0, r3
 8009c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c4c:	b10b      	cbz	r3, 8009c52 <__sflush_r+0x46>
 8009c4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c50:	1ac0      	subs	r0, r0, r3
 8009c52:	2300      	movs	r3, #0
 8009c54:	4602      	mov	r2, r0
 8009c56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c58:	6a21      	ldr	r1, [r4, #32]
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b0      	blx	r6
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	89a3      	ldrh	r3, [r4, #12]
 8009c62:	d106      	bne.n	8009c72 <__sflush_r+0x66>
 8009c64:	6829      	ldr	r1, [r5, #0]
 8009c66:	291d      	cmp	r1, #29
 8009c68:	d82c      	bhi.n	8009cc4 <__sflush_r+0xb8>
 8009c6a:	4a2a      	ldr	r2, [pc, #168]	; (8009d14 <__sflush_r+0x108>)
 8009c6c:	40ca      	lsrs	r2, r1
 8009c6e:	07d6      	lsls	r6, r2, #31
 8009c70:	d528      	bpl.n	8009cc4 <__sflush_r+0xb8>
 8009c72:	2200      	movs	r2, #0
 8009c74:	6062      	str	r2, [r4, #4]
 8009c76:	04d9      	lsls	r1, r3, #19
 8009c78:	6922      	ldr	r2, [r4, #16]
 8009c7a:	6022      	str	r2, [r4, #0]
 8009c7c:	d504      	bpl.n	8009c88 <__sflush_r+0x7c>
 8009c7e:	1c42      	adds	r2, r0, #1
 8009c80:	d101      	bne.n	8009c86 <__sflush_r+0x7a>
 8009c82:	682b      	ldr	r3, [r5, #0]
 8009c84:	b903      	cbnz	r3, 8009c88 <__sflush_r+0x7c>
 8009c86:	6560      	str	r0, [r4, #84]	; 0x54
 8009c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c8a:	602f      	str	r7, [r5, #0]
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	d0ca      	beq.n	8009c26 <__sflush_r+0x1a>
 8009c90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c94:	4299      	cmp	r1, r3
 8009c96:	d002      	beq.n	8009c9e <__sflush_r+0x92>
 8009c98:	4628      	mov	r0, r5
 8009c9a:	f7fc ff17 	bl	8006acc <_free_r>
 8009c9e:	2000      	movs	r0, #0
 8009ca0:	6360      	str	r0, [r4, #52]	; 0x34
 8009ca2:	e7c1      	b.n	8009c28 <__sflush_r+0x1c>
 8009ca4:	6a21      	ldr	r1, [r4, #32]
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b0      	blx	r6
 8009cac:	1c41      	adds	r1, r0, #1
 8009cae:	d1c7      	bne.n	8009c40 <__sflush_r+0x34>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0c4      	beq.n	8009c40 <__sflush_r+0x34>
 8009cb6:	2b1d      	cmp	r3, #29
 8009cb8:	d001      	beq.n	8009cbe <__sflush_r+0xb2>
 8009cba:	2b16      	cmp	r3, #22
 8009cbc:	d101      	bne.n	8009cc2 <__sflush_r+0xb6>
 8009cbe:	602f      	str	r7, [r5, #0]
 8009cc0:	e7b1      	b.n	8009c26 <__sflush_r+0x1a>
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	e7ad      	b.n	8009c28 <__sflush_r+0x1c>
 8009ccc:	690f      	ldr	r7, [r1, #16]
 8009cce:	2f00      	cmp	r7, #0
 8009cd0:	d0a9      	beq.n	8009c26 <__sflush_r+0x1a>
 8009cd2:	0793      	lsls	r3, r2, #30
 8009cd4:	680e      	ldr	r6, [r1, #0]
 8009cd6:	bf08      	it	eq
 8009cd8:	694b      	ldreq	r3, [r1, #20]
 8009cda:	600f      	str	r7, [r1, #0]
 8009cdc:	bf18      	it	ne
 8009cde:	2300      	movne	r3, #0
 8009ce0:	eba6 0807 	sub.w	r8, r6, r7
 8009ce4:	608b      	str	r3, [r1, #8]
 8009ce6:	f1b8 0f00 	cmp.w	r8, #0
 8009cea:	dd9c      	ble.n	8009c26 <__sflush_r+0x1a>
 8009cec:	6a21      	ldr	r1, [r4, #32]
 8009cee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cf0:	4643      	mov	r3, r8
 8009cf2:	463a      	mov	r2, r7
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	47b0      	blx	r6
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	dc06      	bgt.n	8009d0a <__sflush_r+0xfe>
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d02:	81a3      	strh	r3, [r4, #12]
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	e78e      	b.n	8009c28 <__sflush_r+0x1c>
 8009d0a:	4407      	add	r7, r0
 8009d0c:	eba8 0800 	sub.w	r8, r8, r0
 8009d10:	e7e9      	b.n	8009ce6 <__sflush_r+0xda>
 8009d12:	bf00      	nop
 8009d14:	20400001 	.word	0x20400001

08009d18 <_fflush_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	690b      	ldr	r3, [r1, #16]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	460c      	mov	r4, r1
 8009d20:	b913      	cbnz	r3, 8009d28 <_fflush_r+0x10>
 8009d22:	2500      	movs	r5, #0
 8009d24:	4628      	mov	r0, r5
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	b118      	cbz	r0, 8009d32 <_fflush_r+0x1a>
 8009d2a:	6983      	ldr	r3, [r0, #24]
 8009d2c:	b90b      	cbnz	r3, 8009d32 <_fflush_r+0x1a>
 8009d2e:	f000 f887 	bl	8009e40 <__sinit>
 8009d32:	4b14      	ldr	r3, [pc, #80]	; (8009d84 <_fflush_r+0x6c>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	d11b      	bne.n	8009d70 <_fflush_r+0x58>
 8009d38:	686c      	ldr	r4, [r5, #4]
 8009d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d0ef      	beq.n	8009d22 <_fflush_r+0xa>
 8009d42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009d44:	07d0      	lsls	r0, r2, #31
 8009d46:	d404      	bmi.n	8009d52 <_fflush_r+0x3a>
 8009d48:	0599      	lsls	r1, r3, #22
 8009d4a:	d402      	bmi.n	8009d52 <_fflush_r+0x3a>
 8009d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d4e:	f7fe ff65 	bl	8008c1c <__retarget_lock_acquire_recursive>
 8009d52:	4628      	mov	r0, r5
 8009d54:	4621      	mov	r1, r4
 8009d56:	f7ff ff59 	bl	8009c0c <__sflush_r>
 8009d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d5c:	07da      	lsls	r2, r3, #31
 8009d5e:	4605      	mov	r5, r0
 8009d60:	d4e0      	bmi.n	8009d24 <_fflush_r+0xc>
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	059b      	lsls	r3, r3, #22
 8009d66:	d4dd      	bmi.n	8009d24 <_fflush_r+0xc>
 8009d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d6a:	f7fe ff59 	bl	8008c20 <__retarget_lock_release_recursive>
 8009d6e:	e7d9      	b.n	8009d24 <_fflush_r+0xc>
 8009d70:	4b05      	ldr	r3, [pc, #20]	; (8009d88 <_fflush_r+0x70>)
 8009d72:	429c      	cmp	r4, r3
 8009d74:	d101      	bne.n	8009d7a <_fflush_r+0x62>
 8009d76:	68ac      	ldr	r4, [r5, #8]
 8009d78:	e7df      	b.n	8009d3a <_fflush_r+0x22>
 8009d7a:	4b04      	ldr	r3, [pc, #16]	; (8009d8c <_fflush_r+0x74>)
 8009d7c:	429c      	cmp	r4, r3
 8009d7e:	bf08      	it	eq
 8009d80:	68ec      	ldreq	r4, [r5, #12]
 8009d82:	e7da      	b.n	8009d3a <_fflush_r+0x22>
 8009d84:	0800b960 	.word	0x0800b960
 8009d88:	0800b980 	.word	0x0800b980
 8009d8c:	0800b940 	.word	0x0800b940

08009d90 <std>:
 8009d90:	2300      	movs	r3, #0
 8009d92:	b510      	push	{r4, lr}
 8009d94:	4604      	mov	r4, r0
 8009d96:	e9c0 3300 	strd	r3, r3, [r0]
 8009d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d9e:	6083      	str	r3, [r0, #8]
 8009da0:	8181      	strh	r1, [r0, #12]
 8009da2:	6643      	str	r3, [r0, #100]	; 0x64
 8009da4:	81c2      	strh	r2, [r0, #14]
 8009da6:	6183      	str	r3, [r0, #24]
 8009da8:	4619      	mov	r1, r3
 8009daa:	2208      	movs	r2, #8
 8009dac:	305c      	adds	r0, #92	; 0x5c
 8009dae:	f7fc fc07 	bl	80065c0 <memset>
 8009db2:	4b05      	ldr	r3, [pc, #20]	; (8009dc8 <std+0x38>)
 8009db4:	6263      	str	r3, [r4, #36]	; 0x24
 8009db6:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <std+0x3c>)
 8009db8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dba:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <std+0x40>)
 8009dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dbe:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <std+0x44>)
 8009dc0:	6224      	str	r4, [r4, #32]
 8009dc2:	6323      	str	r3, [r4, #48]	; 0x30
 8009dc4:	bd10      	pop	{r4, pc}
 8009dc6:	bf00      	nop
 8009dc8:	08009989 	.word	0x08009989
 8009dcc:	080099af 	.word	0x080099af
 8009dd0:	080099e7 	.word	0x080099e7
 8009dd4:	08009a0b 	.word	0x08009a0b

08009dd8 <_cleanup_r>:
 8009dd8:	4901      	ldr	r1, [pc, #4]	; (8009de0 <_cleanup_r+0x8>)
 8009dda:	f000 b8af 	b.w	8009f3c <_fwalk_reent>
 8009dde:	bf00      	nop
 8009de0:	08009d19 	.word	0x08009d19

08009de4 <__sfmoreglue>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	1e4a      	subs	r2, r1, #1
 8009de8:	2568      	movs	r5, #104	; 0x68
 8009dea:	4355      	muls	r5, r2
 8009dec:	460e      	mov	r6, r1
 8009dee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009df2:	f7fc febb 	bl	8006b6c <_malloc_r>
 8009df6:	4604      	mov	r4, r0
 8009df8:	b140      	cbz	r0, 8009e0c <__sfmoreglue+0x28>
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	e9c0 1600 	strd	r1, r6, [r0]
 8009e00:	300c      	adds	r0, #12
 8009e02:	60a0      	str	r0, [r4, #8]
 8009e04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009e08:	f7fc fbda 	bl	80065c0 <memset>
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	bd70      	pop	{r4, r5, r6, pc}

08009e10 <__sfp_lock_acquire>:
 8009e10:	4801      	ldr	r0, [pc, #4]	; (8009e18 <__sfp_lock_acquire+0x8>)
 8009e12:	f7fe bf03 	b.w	8008c1c <__retarget_lock_acquire_recursive>
 8009e16:	bf00      	nop
 8009e18:	200005b0 	.word	0x200005b0

08009e1c <__sfp_lock_release>:
 8009e1c:	4801      	ldr	r0, [pc, #4]	; (8009e24 <__sfp_lock_release+0x8>)
 8009e1e:	f7fe beff 	b.w	8008c20 <__retarget_lock_release_recursive>
 8009e22:	bf00      	nop
 8009e24:	200005b0 	.word	0x200005b0

08009e28 <__sinit_lock_acquire>:
 8009e28:	4801      	ldr	r0, [pc, #4]	; (8009e30 <__sinit_lock_acquire+0x8>)
 8009e2a:	f7fe bef7 	b.w	8008c1c <__retarget_lock_acquire_recursive>
 8009e2e:	bf00      	nop
 8009e30:	200005ab 	.word	0x200005ab

08009e34 <__sinit_lock_release>:
 8009e34:	4801      	ldr	r0, [pc, #4]	; (8009e3c <__sinit_lock_release+0x8>)
 8009e36:	f7fe bef3 	b.w	8008c20 <__retarget_lock_release_recursive>
 8009e3a:	bf00      	nop
 8009e3c:	200005ab 	.word	0x200005ab

08009e40 <__sinit>:
 8009e40:	b510      	push	{r4, lr}
 8009e42:	4604      	mov	r4, r0
 8009e44:	f7ff fff0 	bl	8009e28 <__sinit_lock_acquire>
 8009e48:	69a3      	ldr	r3, [r4, #24]
 8009e4a:	b11b      	cbz	r3, 8009e54 <__sinit+0x14>
 8009e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e50:	f7ff bff0 	b.w	8009e34 <__sinit_lock_release>
 8009e54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009e58:	6523      	str	r3, [r4, #80]	; 0x50
 8009e5a:	4b13      	ldr	r3, [pc, #76]	; (8009ea8 <__sinit+0x68>)
 8009e5c:	4a13      	ldr	r2, [pc, #76]	; (8009eac <__sinit+0x6c>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e62:	42a3      	cmp	r3, r4
 8009e64:	bf04      	itt	eq
 8009e66:	2301      	moveq	r3, #1
 8009e68:	61a3      	streq	r3, [r4, #24]
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	f000 f820 	bl	8009eb0 <__sfp>
 8009e70:	6060      	str	r0, [r4, #4]
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 f81c 	bl	8009eb0 <__sfp>
 8009e78:	60a0      	str	r0, [r4, #8]
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 f818 	bl	8009eb0 <__sfp>
 8009e80:	2200      	movs	r2, #0
 8009e82:	60e0      	str	r0, [r4, #12]
 8009e84:	2104      	movs	r1, #4
 8009e86:	6860      	ldr	r0, [r4, #4]
 8009e88:	f7ff ff82 	bl	8009d90 <std>
 8009e8c:	68a0      	ldr	r0, [r4, #8]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	2109      	movs	r1, #9
 8009e92:	f7ff ff7d 	bl	8009d90 <std>
 8009e96:	68e0      	ldr	r0, [r4, #12]
 8009e98:	2202      	movs	r2, #2
 8009e9a:	2112      	movs	r1, #18
 8009e9c:	f7ff ff78 	bl	8009d90 <std>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	61a3      	str	r3, [r4, #24]
 8009ea4:	e7d2      	b.n	8009e4c <__sinit+0xc>
 8009ea6:	bf00      	nop
 8009ea8:	0800b460 	.word	0x0800b460
 8009eac:	08009dd9 	.word	0x08009dd9

08009eb0 <__sfp>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	4607      	mov	r7, r0
 8009eb4:	f7ff ffac 	bl	8009e10 <__sfp_lock_acquire>
 8009eb8:	4b1e      	ldr	r3, [pc, #120]	; (8009f34 <__sfp+0x84>)
 8009eba:	681e      	ldr	r6, [r3, #0]
 8009ebc:	69b3      	ldr	r3, [r6, #24]
 8009ebe:	b913      	cbnz	r3, 8009ec6 <__sfp+0x16>
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f7ff ffbd 	bl	8009e40 <__sinit>
 8009ec6:	3648      	adds	r6, #72	; 0x48
 8009ec8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	d503      	bpl.n	8009ed8 <__sfp+0x28>
 8009ed0:	6833      	ldr	r3, [r6, #0]
 8009ed2:	b30b      	cbz	r3, 8009f18 <__sfp+0x68>
 8009ed4:	6836      	ldr	r6, [r6, #0]
 8009ed6:	e7f7      	b.n	8009ec8 <__sfp+0x18>
 8009ed8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009edc:	b9d5      	cbnz	r5, 8009f14 <__sfp+0x64>
 8009ede:	4b16      	ldr	r3, [pc, #88]	; (8009f38 <__sfp+0x88>)
 8009ee0:	60e3      	str	r3, [r4, #12]
 8009ee2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ee6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ee8:	f7fe fe96 	bl	8008c18 <__retarget_lock_init_recursive>
 8009eec:	f7ff ff96 	bl	8009e1c <__sfp_lock_release>
 8009ef0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ef4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ef8:	6025      	str	r5, [r4, #0]
 8009efa:	61a5      	str	r5, [r4, #24]
 8009efc:	2208      	movs	r2, #8
 8009efe:	4629      	mov	r1, r5
 8009f00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f04:	f7fc fb5c 	bl	80065c0 <memset>
 8009f08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009f0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009f10:	4620      	mov	r0, r4
 8009f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f14:	3468      	adds	r4, #104	; 0x68
 8009f16:	e7d9      	b.n	8009ecc <__sfp+0x1c>
 8009f18:	2104      	movs	r1, #4
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	f7ff ff62 	bl	8009de4 <__sfmoreglue>
 8009f20:	4604      	mov	r4, r0
 8009f22:	6030      	str	r0, [r6, #0]
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d1d5      	bne.n	8009ed4 <__sfp+0x24>
 8009f28:	f7ff ff78 	bl	8009e1c <__sfp_lock_release>
 8009f2c:	230c      	movs	r3, #12
 8009f2e:	603b      	str	r3, [r7, #0]
 8009f30:	e7ee      	b.n	8009f10 <__sfp+0x60>
 8009f32:	bf00      	nop
 8009f34:	0800b460 	.word	0x0800b460
 8009f38:	ffff0001 	.word	0xffff0001

08009f3c <_fwalk_reent>:
 8009f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f40:	4606      	mov	r6, r0
 8009f42:	4688      	mov	r8, r1
 8009f44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009f48:	2700      	movs	r7, #0
 8009f4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f4e:	f1b9 0901 	subs.w	r9, r9, #1
 8009f52:	d505      	bpl.n	8009f60 <_fwalk_reent+0x24>
 8009f54:	6824      	ldr	r4, [r4, #0]
 8009f56:	2c00      	cmp	r4, #0
 8009f58:	d1f7      	bne.n	8009f4a <_fwalk_reent+0xe>
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f60:	89ab      	ldrh	r3, [r5, #12]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d907      	bls.n	8009f76 <_fwalk_reent+0x3a>
 8009f66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	d003      	beq.n	8009f76 <_fwalk_reent+0x3a>
 8009f6e:	4629      	mov	r1, r5
 8009f70:	4630      	mov	r0, r6
 8009f72:	47c0      	blx	r8
 8009f74:	4307      	orrs	r7, r0
 8009f76:	3568      	adds	r5, #104	; 0x68
 8009f78:	e7e9      	b.n	8009f4e <_fwalk_reent+0x12>
	...

08009f7c <_lseek_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d07      	ldr	r5, [pc, #28]	; (8009f9c <_lseek_r+0x20>)
 8009f80:	4604      	mov	r4, r0
 8009f82:	4608      	mov	r0, r1
 8009f84:	4611      	mov	r1, r2
 8009f86:	2200      	movs	r2, #0
 8009f88:	602a      	str	r2, [r5, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	f7f7 fb26 	bl	80015dc <_lseek>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d102      	bne.n	8009f9a <_lseek_r+0x1e>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	b103      	cbz	r3, 8009f9a <_lseek_r+0x1e>
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	200005b4 	.word	0x200005b4

08009fa0 <__swhatbuf_r>:
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	460e      	mov	r6, r1
 8009fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa8:	2900      	cmp	r1, #0
 8009faa:	b096      	sub	sp, #88	; 0x58
 8009fac:	4614      	mov	r4, r2
 8009fae:	461d      	mov	r5, r3
 8009fb0:	da07      	bge.n	8009fc2 <__swhatbuf_r+0x22>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	602b      	str	r3, [r5, #0]
 8009fb6:	89b3      	ldrh	r3, [r6, #12]
 8009fb8:	061a      	lsls	r2, r3, #24
 8009fba:	d410      	bmi.n	8009fde <__swhatbuf_r+0x3e>
 8009fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fc0:	e00e      	b.n	8009fe0 <__swhatbuf_r+0x40>
 8009fc2:	466a      	mov	r2, sp
 8009fc4:	f000 fbfc 	bl	800a7c0 <_fstat_r>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	dbf2      	blt.n	8009fb2 <__swhatbuf_r+0x12>
 8009fcc:	9a01      	ldr	r2, [sp, #4]
 8009fce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009fd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009fd6:	425a      	negs	r2, r3
 8009fd8:	415a      	adcs	r2, r3
 8009fda:	602a      	str	r2, [r5, #0]
 8009fdc:	e7ee      	b.n	8009fbc <__swhatbuf_r+0x1c>
 8009fde:	2340      	movs	r3, #64	; 0x40
 8009fe0:	2000      	movs	r0, #0
 8009fe2:	6023      	str	r3, [r4, #0]
 8009fe4:	b016      	add	sp, #88	; 0x58
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}

08009fe8 <__smakebuf_r>:
 8009fe8:	898b      	ldrh	r3, [r1, #12]
 8009fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fec:	079d      	lsls	r5, r3, #30
 8009fee:	4606      	mov	r6, r0
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	d507      	bpl.n	800a004 <__smakebuf_r+0x1c>
 8009ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	6123      	str	r3, [r4, #16]
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	6163      	str	r3, [r4, #20]
 800a000:	b002      	add	sp, #8
 800a002:	bd70      	pop	{r4, r5, r6, pc}
 800a004:	ab01      	add	r3, sp, #4
 800a006:	466a      	mov	r2, sp
 800a008:	f7ff ffca 	bl	8009fa0 <__swhatbuf_r>
 800a00c:	9900      	ldr	r1, [sp, #0]
 800a00e:	4605      	mov	r5, r0
 800a010:	4630      	mov	r0, r6
 800a012:	f7fc fdab 	bl	8006b6c <_malloc_r>
 800a016:	b948      	cbnz	r0, 800a02c <__smakebuf_r+0x44>
 800a018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a01c:	059a      	lsls	r2, r3, #22
 800a01e:	d4ef      	bmi.n	800a000 <__smakebuf_r+0x18>
 800a020:	f023 0303 	bic.w	r3, r3, #3
 800a024:	f043 0302 	orr.w	r3, r3, #2
 800a028:	81a3      	strh	r3, [r4, #12]
 800a02a:	e7e3      	b.n	8009ff4 <__smakebuf_r+0xc>
 800a02c:	4b0d      	ldr	r3, [pc, #52]	; (800a064 <__smakebuf_r+0x7c>)
 800a02e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	6020      	str	r0, [r4, #0]
 800a034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a038:	81a3      	strh	r3, [r4, #12]
 800a03a:	9b00      	ldr	r3, [sp, #0]
 800a03c:	6163      	str	r3, [r4, #20]
 800a03e:	9b01      	ldr	r3, [sp, #4]
 800a040:	6120      	str	r0, [r4, #16]
 800a042:	b15b      	cbz	r3, 800a05c <__smakebuf_r+0x74>
 800a044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a048:	4630      	mov	r0, r6
 800a04a:	f000 fbcb 	bl	800a7e4 <_isatty_r>
 800a04e:	b128      	cbz	r0, 800a05c <__smakebuf_r+0x74>
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	f023 0303 	bic.w	r3, r3, #3
 800a056:	f043 0301 	orr.w	r3, r3, #1
 800a05a:	81a3      	strh	r3, [r4, #12]
 800a05c:	89a0      	ldrh	r0, [r4, #12]
 800a05e:	4305      	orrs	r5, r0
 800a060:	81a5      	strh	r5, [r4, #12]
 800a062:	e7cd      	b.n	800a000 <__smakebuf_r+0x18>
 800a064:	08009dd9 	.word	0x08009dd9

0800a068 <_malloc_usable_size_r>:
 800a068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a06c:	1f18      	subs	r0, r3, #4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	bfbc      	itt	lt
 800a072:	580b      	ldrlt	r3, [r1, r0]
 800a074:	18c0      	addlt	r0, r0, r3
 800a076:	4770      	bx	lr

0800a078 <_sungetc_r>:
 800a078:	b538      	push	{r3, r4, r5, lr}
 800a07a:	1c4b      	adds	r3, r1, #1
 800a07c:	4614      	mov	r4, r2
 800a07e:	d103      	bne.n	800a088 <_sungetc_r+0x10>
 800a080:	f04f 35ff 	mov.w	r5, #4294967295
 800a084:	4628      	mov	r0, r5
 800a086:	bd38      	pop	{r3, r4, r5, pc}
 800a088:	8993      	ldrh	r3, [r2, #12]
 800a08a:	f023 0320 	bic.w	r3, r3, #32
 800a08e:	8193      	strh	r3, [r2, #12]
 800a090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a092:	6852      	ldr	r2, [r2, #4]
 800a094:	b2cd      	uxtb	r5, r1
 800a096:	b18b      	cbz	r3, 800a0bc <_sungetc_r+0x44>
 800a098:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a09a:	4293      	cmp	r3, r2
 800a09c:	dd08      	ble.n	800a0b0 <_sungetc_r+0x38>
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	1e5a      	subs	r2, r3, #1
 800a0a2:	6022      	str	r2, [r4, #0]
 800a0a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	6063      	str	r3, [r4, #4]
 800a0ae:	e7e9      	b.n	800a084 <_sungetc_r+0xc>
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	f000 fb4b 	bl	800a74c <__submore>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d0f1      	beq.n	800a09e <_sungetc_r+0x26>
 800a0ba:	e7e1      	b.n	800a080 <_sungetc_r+0x8>
 800a0bc:	6921      	ldr	r1, [r4, #16]
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	b151      	cbz	r1, 800a0d8 <_sungetc_r+0x60>
 800a0c2:	4299      	cmp	r1, r3
 800a0c4:	d208      	bcs.n	800a0d8 <_sungetc_r+0x60>
 800a0c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a0ca:	42a9      	cmp	r1, r5
 800a0cc:	d104      	bne.n	800a0d8 <_sungetc_r+0x60>
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	3201      	adds	r2, #1
 800a0d2:	6023      	str	r3, [r4, #0]
 800a0d4:	6062      	str	r2, [r4, #4]
 800a0d6:	e7d5      	b.n	800a084 <_sungetc_r+0xc>
 800a0d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a0dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	63a3      	str	r3, [r4, #56]	; 0x38
 800a0e6:	4623      	mov	r3, r4
 800a0e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e7dc      	b.n	800a0ac <_sungetc_r+0x34>

0800a0f2 <__ssrefill_r>:
 800a0f2:	b510      	push	{r4, lr}
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a0f8:	b169      	cbz	r1, 800a116 <__ssrefill_r+0x24>
 800a0fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0fe:	4299      	cmp	r1, r3
 800a100:	d001      	beq.n	800a106 <__ssrefill_r+0x14>
 800a102:	f7fc fce3 	bl	8006acc <_free_r>
 800a106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a108:	6063      	str	r3, [r4, #4]
 800a10a:	2000      	movs	r0, #0
 800a10c:	6360      	str	r0, [r4, #52]	; 0x34
 800a10e:	b113      	cbz	r3, 800a116 <__ssrefill_r+0x24>
 800a110:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a112:	6023      	str	r3, [r4, #0]
 800a114:	bd10      	pop	{r4, pc}
 800a116:	6923      	ldr	r3, [r4, #16]
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	2300      	movs	r3, #0
 800a11c:	6063      	str	r3, [r4, #4]
 800a11e:	89a3      	ldrh	r3, [r4, #12]
 800a120:	f043 0320 	orr.w	r3, r3, #32
 800a124:	81a3      	strh	r3, [r4, #12]
 800a126:	f04f 30ff 	mov.w	r0, #4294967295
 800a12a:	e7f3      	b.n	800a114 <__ssrefill_r+0x22>

0800a12c <__ssvfiscanf_r>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	460c      	mov	r4, r1
 800a132:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a136:	2100      	movs	r1, #0
 800a138:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a13c:	49b2      	ldr	r1, [pc, #712]	; (800a408 <__ssvfiscanf_r+0x2dc>)
 800a13e:	91a0      	str	r1, [sp, #640]	; 0x280
 800a140:	f10d 0804 	add.w	r8, sp, #4
 800a144:	49b1      	ldr	r1, [pc, #708]	; (800a40c <__ssvfiscanf_r+0x2e0>)
 800a146:	4fb2      	ldr	r7, [pc, #712]	; (800a410 <__ssvfiscanf_r+0x2e4>)
 800a148:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800a414 <__ssvfiscanf_r+0x2e8>
 800a14c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a150:	4606      	mov	r6, r0
 800a152:	91a1      	str	r1, [sp, #644]	; 0x284
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	f892 a000 	ldrb.w	sl, [r2]
 800a15a:	f1ba 0f00 	cmp.w	sl, #0
 800a15e:	f000 8151 	beq.w	800a404 <__ssvfiscanf_r+0x2d8>
 800a162:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a166:	f013 0308 	ands.w	r3, r3, #8
 800a16a:	f102 0501 	add.w	r5, r2, #1
 800a16e:	d019      	beq.n	800a1a4 <__ssvfiscanf_r+0x78>
 800a170:	6863      	ldr	r3, [r4, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	dd0f      	ble.n	800a196 <__ssvfiscanf_r+0x6a>
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	781a      	ldrb	r2, [r3, #0]
 800a17a:	5cba      	ldrb	r2, [r7, r2]
 800a17c:	0712      	lsls	r2, r2, #28
 800a17e:	d401      	bmi.n	800a184 <__ssvfiscanf_r+0x58>
 800a180:	462a      	mov	r2, r5
 800a182:	e7e8      	b.n	800a156 <__ssvfiscanf_r+0x2a>
 800a184:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a186:	3201      	adds	r2, #1
 800a188:	9245      	str	r2, [sp, #276]	; 0x114
 800a18a:	6862      	ldr	r2, [r4, #4]
 800a18c:	3301      	adds	r3, #1
 800a18e:	3a01      	subs	r2, #1
 800a190:	6062      	str	r2, [r4, #4]
 800a192:	6023      	str	r3, [r4, #0]
 800a194:	e7ec      	b.n	800a170 <__ssvfiscanf_r+0x44>
 800a196:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a198:	4621      	mov	r1, r4
 800a19a:	4630      	mov	r0, r6
 800a19c:	4798      	blx	r3
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d0e9      	beq.n	800a176 <__ssvfiscanf_r+0x4a>
 800a1a2:	e7ed      	b.n	800a180 <__ssvfiscanf_r+0x54>
 800a1a4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a1a8:	f040 8083 	bne.w	800a2b2 <__ssvfiscanf_r+0x186>
 800a1ac:	9341      	str	r3, [sp, #260]	; 0x104
 800a1ae:	9343      	str	r3, [sp, #268]	; 0x10c
 800a1b0:	7853      	ldrb	r3, [r2, #1]
 800a1b2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1b4:	bf02      	ittt	eq
 800a1b6:	2310      	moveq	r3, #16
 800a1b8:	1c95      	addeq	r5, r2, #2
 800a1ba:	9341      	streq	r3, [sp, #260]	; 0x104
 800a1bc:	220a      	movs	r2, #10
 800a1be:	46ab      	mov	fp, r5
 800a1c0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800a1c4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a1c8:	2b09      	cmp	r3, #9
 800a1ca:	d91d      	bls.n	800a208 <__ssvfiscanf_r+0xdc>
 800a1cc:	4891      	ldr	r0, [pc, #580]	; (800a414 <__ssvfiscanf_r+0x2e8>)
 800a1ce:	2203      	movs	r2, #3
 800a1d0:	f7f6 f836 	bl	8000240 <memchr>
 800a1d4:	b140      	cbz	r0, 800a1e8 <__ssvfiscanf_r+0xbc>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	eba0 0009 	sub.w	r0, r0, r9
 800a1dc:	fa03 f000 	lsl.w	r0, r3, r0
 800a1e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a1e2:	4318      	orrs	r0, r3
 800a1e4:	9041      	str	r0, [sp, #260]	; 0x104
 800a1e6:	465d      	mov	r5, fp
 800a1e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a1ec:	2b78      	cmp	r3, #120	; 0x78
 800a1ee:	d806      	bhi.n	800a1fe <__ssvfiscanf_r+0xd2>
 800a1f0:	2b57      	cmp	r3, #87	; 0x57
 800a1f2:	d810      	bhi.n	800a216 <__ssvfiscanf_r+0xea>
 800a1f4:	2b25      	cmp	r3, #37	; 0x25
 800a1f6:	d05c      	beq.n	800a2b2 <__ssvfiscanf_r+0x186>
 800a1f8:	d856      	bhi.n	800a2a8 <__ssvfiscanf_r+0x17c>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d074      	beq.n	800a2e8 <__ssvfiscanf_r+0x1bc>
 800a1fe:	2303      	movs	r3, #3
 800a200:	9347      	str	r3, [sp, #284]	; 0x11c
 800a202:	230a      	movs	r3, #10
 800a204:	9342      	str	r3, [sp, #264]	; 0x108
 800a206:	e081      	b.n	800a30c <__ssvfiscanf_r+0x1e0>
 800a208:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a20a:	fb02 1303 	mla	r3, r2, r3, r1
 800a20e:	3b30      	subs	r3, #48	; 0x30
 800a210:	9343      	str	r3, [sp, #268]	; 0x10c
 800a212:	465d      	mov	r5, fp
 800a214:	e7d3      	b.n	800a1be <__ssvfiscanf_r+0x92>
 800a216:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a21a:	2a20      	cmp	r2, #32
 800a21c:	d8ef      	bhi.n	800a1fe <__ssvfiscanf_r+0xd2>
 800a21e:	a101      	add	r1, pc, #4	; (adr r1, 800a224 <__ssvfiscanf_r+0xf8>)
 800a220:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a224:	0800a2f7 	.word	0x0800a2f7
 800a228:	0800a1ff 	.word	0x0800a1ff
 800a22c:	0800a1ff 	.word	0x0800a1ff
 800a230:	0800a355 	.word	0x0800a355
 800a234:	0800a1ff 	.word	0x0800a1ff
 800a238:	0800a1ff 	.word	0x0800a1ff
 800a23c:	0800a1ff 	.word	0x0800a1ff
 800a240:	0800a1ff 	.word	0x0800a1ff
 800a244:	0800a1ff 	.word	0x0800a1ff
 800a248:	0800a1ff 	.word	0x0800a1ff
 800a24c:	0800a1ff 	.word	0x0800a1ff
 800a250:	0800a36b 	.word	0x0800a36b
 800a254:	0800a341 	.word	0x0800a341
 800a258:	0800a2af 	.word	0x0800a2af
 800a25c:	0800a2af 	.word	0x0800a2af
 800a260:	0800a2af 	.word	0x0800a2af
 800a264:	0800a1ff 	.word	0x0800a1ff
 800a268:	0800a345 	.word	0x0800a345
 800a26c:	0800a1ff 	.word	0x0800a1ff
 800a270:	0800a1ff 	.word	0x0800a1ff
 800a274:	0800a1ff 	.word	0x0800a1ff
 800a278:	0800a1ff 	.word	0x0800a1ff
 800a27c:	0800a37b 	.word	0x0800a37b
 800a280:	0800a34d 	.word	0x0800a34d
 800a284:	0800a2ef 	.word	0x0800a2ef
 800a288:	0800a1ff 	.word	0x0800a1ff
 800a28c:	0800a1ff 	.word	0x0800a1ff
 800a290:	0800a377 	.word	0x0800a377
 800a294:	0800a1ff 	.word	0x0800a1ff
 800a298:	0800a341 	.word	0x0800a341
 800a29c:	0800a1ff 	.word	0x0800a1ff
 800a2a0:	0800a1ff 	.word	0x0800a1ff
 800a2a4:	0800a2f7 	.word	0x0800a2f7
 800a2a8:	3b45      	subs	r3, #69	; 0x45
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d8a7      	bhi.n	800a1fe <__ssvfiscanf_r+0xd2>
 800a2ae:	2305      	movs	r3, #5
 800a2b0:	e02b      	b.n	800a30a <__ssvfiscanf_r+0x1de>
 800a2b2:	6863      	ldr	r3, [r4, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	dd0d      	ble.n	800a2d4 <__ssvfiscanf_r+0x1a8>
 800a2b8:	6823      	ldr	r3, [r4, #0]
 800a2ba:	781a      	ldrb	r2, [r3, #0]
 800a2bc:	4552      	cmp	r2, sl
 800a2be:	f040 80a1 	bne.w	800a404 <__ssvfiscanf_r+0x2d8>
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	6862      	ldr	r2, [r4, #4]
 800a2c6:	6023      	str	r3, [r4, #0]
 800a2c8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a2ca:	3a01      	subs	r2, #1
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	6062      	str	r2, [r4, #4]
 800a2d0:	9345      	str	r3, [sp, #276]	; 0x114
 800a2d2:	e755      	b.n	800a180 <__ssvfiscanf_r+0x54>
 800a2d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	4630      	mov	r0, r6
 800a2da:	4798      	blx	r3
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d0eb      	beq.n	800a2b8 <__ssvfiscanf_r+0x18c>
 800a2e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	f040 8084 	bne.w	800a3f0 <__ssvfiscanf_r+0x2c4>
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ec:	e086      	b.n	800a3fc <__ssvfiscanf_r+0x2d0>
 800a2ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a2f0:	f042 0220 	orr.w	r2, r2, #32
 800a2f4:	9241      	str	r2, [sp, #260]	; 0x104
 800a2f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a2f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2fc:	9241      	str	r2, [sp, #260]	; 0x104
 800a2fe:	2210      	movs	r2, #16
 800a300:	2b6f      	cmp	r3, #111	; 0x6f
 800a302:	9242      	str	r2, [sp, #264]	; 0x108
 800a304:	bf34      	ite	cc
 800a306:	2303      	movcc	r3, #3
 800a308:	2304      	movcs	r3, #4
 800a30a:	9347      	str	r3, [sp, #284]	; 0x11c
 800a30c:	6863      	ldr	r3, [r4, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	dd41      	ble.n	800a396 <__ssvfiscanf_r+0x26a>
 800a312:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a314:	0659      	lsls	r1, r3, #25
 800a316:	d404      	bmi.n	800a322 <__ssvfiscanf_r+0x1f6>
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	781a      	ldrb	r2, [r3, #0]
 800a31c:	5cba      	ldrb	r2, [r7, r2]
 800a31e:	0712      	lsls	r2, r2, #28
 800a320:	d440      	bmi.n	800a3a4 <__ssvfiscanf_r+0x278>
 800a322:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a324:	2b02      	cmp	r3, #2
 800a326:	dc4f      	bgt.n	800a3c8 <__ssvfiscanf_r+0x29c>
 800a328:	466b      	mov	r3, sp
 800a32a:	4622      	mov	r2, r4
 800a32c:	a941      	add	r1, sp, #260	; 0x104
 800a32e:	4630      	mov	r0, r6
 800a330:	f000 f874 	bl	800a41c <_scanf_chars>
 800a334:	2801      	cmp	r0, #1
 800a336:	d065      	beq.n	800a404 <__ssvfiscanf_r+0x2d8>
 800a338:	2802      	cmp	r0, #2
 800a33a:	f47f af21 	bne.w	800a180 <__ssvfiscanf_r+0x54>
 800a33e:	e7cf      	b.n	800a2e0 <__ssvfiscanf_r+0x1b4>
 800a340:	220a      	movs	r2, #10
 800a342:	e7dd      	b.n	800a300 <__ssvfiscanf_r+0x1d4>
 800a344:	2300      	movs	r3, #0
 800a346:	9342      	str	r3, [sp, #264]	; 0x108
 800a348:	2303      	movs	r3, #3
 800a34a:	e7de      	b.n	800a30a <__ssvfiscanf_r+0x1de>
 800a34c:	2308      	movs	r3, #8
 800a34e:	9342      	str	r3, [sp, #264]	; 0x108
 800a350:	2304      	movs	r3, #4
 800a352:	e7da      	b.n	800a30a <__ssvfiscanf_r+0x1de>
 800a354:	4629      	mov	r1, r5
 800a356:	4640      	mov	r0, r8
 800a358:	f000 f9be 	bl	800a6d8 <__sccl>
 800a35c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a35e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a362:	9341      	str	r3, [sp, #260]	; 0x104
 800a364:	4605      	mov	r5, r0
 800a366:	2301      	movs	r3, #1
 800a368:	e7cf      	b.n	800a30a <__ssvfiscanf_r+0x1de>
 800a36a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a36c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a370:	9341      	str	r3, [sp, #260]	; 0x104
 800a372:	2300      	movs	r3, #0
 800a374:	e7c9      	b.n	800a30a <__ssvfiscanf_r+0x1de>
 800a376:	2302      	movs	r3, #2
 800a378:	e7c7      	b.n	800a30a <__ssvfiscanf_r+0x1de>
 800a37a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a37c:	06c3      	lsls	r3, r0, #27
 800a37e:	f53f aeff 	bmi.w	800a180 <__ssvfiscanf_r+0x54>
 800a382:	9b00      	ldr	r3, [sp, #0]
 800a384:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a386:	1d19      	adds	r1, r3, #4
 800a388:	9100      	str	r1, [sp, #0]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	07c0      	lsls	r0, r0, #31
 800a38e:	bf4c      	ite	mi
 800a390:	801a      	strhmi	r2, [r3, #0]
 800a392:	601a      	strpl	r2, [r3, #0]
 800a394:	e6f4      	b.n	800a180 <__ssvfiscanf_r+0x54>
 800a396:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a398:	4621      	mov	r1, r4
 800a39a:	4630      	mov	r0, r6
 800a39c:	4798      	blx	r3
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d0b7      	beq.n	800a312 <__ssvfiscanf_r+0x1e6>
 800a3a2:	e79d      	b.n	800a2e0 <__ssvfiscanf_r+0x1b4>
 800a3a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a3a6:	3201      	adds	r2, #1
 800a3a8:	9245      	str	r2, [sp, #276]	; 0x114
 800a3aa:	6862      	ldr	r2, [r4, #4]
 800a3ac:	3a01      	subs	r2, #1
 800a3ae:	2a00      	cmp	r2, #0
 800a3b0:	6062      	str	r2, [r4, #4]
 800a3b2:	dd02      	ble.n	800a3ba <__ssvfiscanf_r+0x28e>
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	6023      	str	r3, [r4, #0]
 800a3b8:	e7ae      	b.n	800a318 <__ssvfiscanf_r+0x1ec>
 800a3ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a3bc:	4621      	mov	r1, r4
 800a3be:	4630      	mov	r0, r6
 800a3c0:	4798      	blx	r3
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d0a8      	beq.n	800a318 <__ssvfiscanf_r+0x1ec>
 800a3c6:	e78b      	b.n	800a2e0 <__ssvfiscanf_r+0x1b4>
 800a3c8:	2b04      	cmp	r3, #4
 800a3ca:	dc06      	bgt.n	800a3da <__ssvfiscanf_r+0x2ae>
 800a3cc:	466b      	mov	r3, sp
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	a941      	add	r1, sp, #260	; 0x104
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f000 f87a 	bl	800a4cc <_scanf_i>
 800a3d8:	e7ac      	b.n	800a334 <__ssvfiscanf_r+0x208>
 800a3da:	4b0f      	ldr	r3, [pc, #60]	; (800a418 <__ssvfiscanf_r+0x2ec>)
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f43f aecf 	beq.w	800a180 <__ssvfiscanf_r+0x54>
 800a3e2:	466b      	mov	r3, sp
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	a941      	add	r1, sp, #260	; 0x104
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f3af 8000 	nop.w
 800a3ee:	e7a1      	b.n	800a334 <__ssvfiscanf_r+0x208>
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a3f6:	bf18      	it	ne
 800a3f8:	f04f 30ff 	movne.w	r0, #4294967295
 800a3fc:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a404:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a406:	e7f9      	b.n	800a3fc <__ssvfiscanf_r+0x2d0>
 800a408:	0800a079 	.word	0x0800a079
 800a40c:	0800a0f3 	.word	0x0800a0f3
 800a410:	0800b647 	.word	0x0800b647
 800a414:	0800b932 	.word	0x0800b932
 800a418:	00000000 	.word	0x00000000

0800a41c <_scanf_chars>:
 800a41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a420:	4615      	mov	r5, r2
 800a422:	688a      	ldr	r2, [r1, #8]
 800a424:	4680      	mov	r8, r0
 800a426:	460c      	mov	r4, r1
 800a428:	b932      	cbnz	r2, 800a438 <_scanf_chars+0x1c>
 800a42a:	698a      	ldr	r2, [r1, #24]
 800a42c:	2a00      	cmp	r2, #0
 800a42e:	bf0c      	ite	eq
 800a430:	2201      	moveq	r2, #1
 800a432:	f04f 32ff 	movne.w	r2, #4294967295
 800a436:	608a      	str	r2, [r1, #8]
 800a438:	6822      	ldr	r2, [r4, #0]
 800a43a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a4c8 <_scanf_chars+0xac>
 800a43e:	06d1      	lsls	r1, r2, #27
 800a440:	bf5f      	itttt	pl
 800a442:	681a      	ldrpl	r2, [r3, #0]
 800a444:	1d11      	addpl	r1, r2, #4
 800a446:	6019      	strpl	r1, [r3, #0]
 800a448:	6816      	ldrpl	r6, [r2, #0]
 800a44a:	2700      	movs	r7, #0
 800a44c:	69a0      	ldr	r0, [r4, #24]
 800a44e:	b188      	cbz	r0, 800a474 <_scanf_chars+0x58>
 800a450:	2801      	cmp	r0, #1
 800a452:	d107      	bne.n	800a464 <_scanf_chars+0x48>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	781a      	ldrb	r2, [r3, #0]
 800a458:	6963      	ldr	r3, [r4, #20]
 800a45a:	5c9b      	ldrb	r3, [r3, r2]
 800a45c:	b953      	cbnz	r3, 800a474 <_scanf_chars+0x58>
 800a45e:	bb27      	cbnz	r7, 800a4aa <_scanf_chars+0x8e>
 800a460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a464:	2802      	cmp	r0, #2
 800a466:	d120      	bne.n	800a4aa <_scanf_chars+0x8e>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a470:	071b      	lsls	r3, r3, #28
 800a472:	d41a      	bmi.n	800a4aa <_scanf_chars+0x8e>
 800a474:	6823      	ldr	r3, [r4, #0]
 800a476:	06da      	lsls	r2, r3, #27
 800a478:	bf5e      	ittt	pl
 800a47a:	682b      	ldrpl	r3, [r5, #0]
 800a47c:	781b      	ldrbpl	r3, [r3, #0]
 800a47e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a482:	682a      	ldr	r2, [r5, #0]
 800a484:	686b      	ldr	r3, [r5, #4]
 800a486:	3201      	adds	r2, #1
 800a488:	602a      	str	r2, [r5, #0]
 800a48a:	68a2      	ldr	r2, [r4, #8]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	3a01      	subs	r2, #1
 800a490:	606b      	str	r3, [r5, #4]
 800a492:	3701      	adds	r7, #1
 800a494:	60a2      	str	r2, [r4, #8]
 800a496:	b142      	cbz	r2, 800a4aa <_scanf_chars+0x8e>
 800a498:	2b00      	cmp	r3, #0
 800a49a:	dcd7      	bgt.n	800a44c <_scanf_chars+0x30>
 800a49c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	4798      	blx	r3
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d0d0      	beq.n	800a44c <_scanf_chars+0x30>
 800a4aa:	6823      	ldr	r3, [r4, #0]
 800a4ac:	f013 0310 	ands.w	r3, r3, #16
 800a4b0:	d105      	bne.n	800a4be <_scanf_chars+0xa2>
 800a4b2:	68e2      	ldr	r2, [r4, #12]
 800a4b4:	3201      	adds	r2, #1
 800a4b6:	60e2      	str	r2, [r4, #12]
 800a4b8:	69a2      	ldr	r2, [r4, #24]
 800a4ba:	b102      	cbz	r2, 800a4be <_scanf_chars+0xa2>
 800a4bc:	7033      	strb	r3, [r6, #0]
 800a4be:	6923      	ldr	r3, [r4, #16]
 800a4c0:	441f      	add	r7, r3
 800a4c2:	6127      	str	r7, [r4, #16]
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	e7cb      	b.n	800a460 <_scanf_chars+0x44>
 800a4c8:	0800b647 	.word	0x0800b647

0800a4cc <_scanf_i>:
 800a4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d0:	4698      	mov	r8, r3
 800a4d2:	4b74      	ldr	r3, [pc, #464]	; (800a6a4 <_scanf_i+0x1d8>)
 800a4d4:	460c      	mov	r4, r1
 800a4d6:	4682      	mov	sl, r0
 800a4d8:	4616      	mov	r6, r2
 800a4da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	ab03      	add	r3, sp, #12
 800a4e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a4e6:	4b70      	ldr	r3, [pc, #448]	; (800a6a8 <_scanf_i+0x1dc>)
 800a4e8:	69a1      	ldr	r1, [r4, #24]
 800a4ea:	4a70      	ldr	r2, [pc, #448]	; (800a6ac <_scanf_i+0x1e0>)
 800a4ec:	2903      	cmp	r1, #3
 800a4ee:	bf18      	it	ne
 800a4f0:	461a      	movne	r2, r3
 800a4f2:	68a3      	ldr	r3, [r4, #8]
 800a4f4:	9201      	str	r2, [sp, #4]
 800a4f6:	1e5a      	subs	r2, r3, #1
 800a4f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a4fc:	bf88      	it	hi
 800a4fe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a502:	4627      	mov	r7, r4
 800a504:	bf82      	ittt	hi
 800a506:	eb03 0905 	addhi.w	r9, r3, r5
 800a50a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a50e:	60a3      	strhi	r3, [r4, #8]
 800a510:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a514:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a518:	bf98      	it	ls
 800a51a:	f04f 0900 	movls.w	r9, #0
 800a51e:	6023      	str	r3, [r4, #0]
 800a520:	463d      	mov	r5, r7
 800a522:	f04f 0b00 	mov.w	fp, #0
 800a526:	6831      	ldr	r1, [r6, #0]
 800a528:	ab03      	add	r3, sp, #12
 800a52a:	7809      	ldrb	r1, [r1, #0]
 800a52c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a530:	2202      	movs	r2, #2
 800a532:	f7f5 fe85 	bl	8000240 <memchr>
 800a536:	b328      	cbz	r0, 800a584 <_scanf_i+0xb8>
 800a538:	f1bb 0f01 	cmp.w	fp, #1
 800a53c:	d159      	bne.n	800a5f2 <_scanf_i+0x126>
 800a53e:	6862      	ldr	r2, [r4, #4]
 800a540:	b92a      	cbnz	r2, 800a54e <_scanf_i+0x82>
 800a542:	6822      	ldr	r2, [r4, #0]
 800a544:	2308      	movs	r3, #8
 800a546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a54a:	6063      	str	r3, [r4, #4]
 800a54c:	6022      	str	r2, [r4, #0]
 800a54e:	6822      	ldr	r2, [r4, #0]
 800a550:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a554:	6022      	str	r2, [r4, #0]
 800a556:	68a2      	ldr	r2, [r4, #8]
 800a558:	1e51      	subs	r1, r2, #1
 800a55a:	60a1      	str	r1, [r4, #8]
 800a55c:	b192      	cbz	r2, 800a584 <_scanf_i+0xb8>
 800a55e:	6832      	ldr	r2, [r6, #0]
 800a560:	1c51      	adds	r1, r2, #1
 800a562:	6031      	str	r1, [r6, #0]
 800a564:	7812      	ldrb	r2, [r2, #0]
 800a566:	f805 2b01 	strb.w	r2, [r5], #1
 800a56a:	6872      	ldr	r2, [r6, #4]
 800a56c:	3a01      	subs	r2, #1
 800a56e:	2a00      	cmp	r2, #0
 800a570:	6072      	str	r2, [r6, #4]
 800a572:	dc07      	bgt.n	800a584 <_scanf_i+0xb8>
 800a574:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a578:	4631      	mov	r1, r6
 800a57a:	4650      	mov	r0, sl
 800a57c:	4790      	blx	r2
 800a57e:	2800      	cmp	r0, #0
 800a580:	f040 8085 	bne.w	800a68e <_scanf_i+0x1c2>
 800a584:	f10b 0b01 	add.w	fp, fp, #1
 800a588:	f1bb 0f03 	cmp.w	fp, #3
 800a58c:	d1cb      	bne.n	800a526 <_scanf_i+0x5a>
 800a58e:	6863      	ldr	r3, [r4, #4]
 800a590:	b90b      	cbnz	r3, 800a596 <_scanf_i+0xca>
 800a592:	230a      	movs	r3, #10
 800a594:	6063      	str	r3, [r4, #4]
 800a596:	6863      	ldr	r3, [r4, #4]
 800a598:	4945      	ldr	r1, [pc, #276]	; (800a6b0 <_scanf_i+0x1e4>)
 800a59a:	6960      	ldr	r0, [r4, #20]
 800a59c:	1ac9      	subs	r1, r1, r3
 800a59e:	f000 f89b 	bl	800a6d8 <__sccl>
 800a5a2:	f04f 0b00 	mov.w	fp, #0
 800a5a6:	68a3      	ldr	r3, [r4, #8]
 800a5a8:	6822      	ldr	r2, [r4, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d03d      	beq.n	800a62a <_scanf_i+0x15e>
 800a5ae:	6831      	ldr	r1, [r6, #0]
 800a5b0:	6960      	ldr	r0, [r4, #20]
 800a5b2:	f891 c000 	ldrb.w	ip, [r1]
 800a5b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d035      	beq.n	800a62a <_scanf_i+0x15e>
 800a5be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a5c2:	d124      	bne.n	800a60e <_scanf_i+0x142>
 800a5c4:	0510      	lsls	r0, r2, #20
 800a5c6:	d522      	bpl.n	800a60e <_scanf_i+0x142>
 800a5c8:	f10b 0b01 	add.w	fp, fp, #1
 800a5cc:	f1b9 0f00 	cmp.w	r9, #0
 800a5d0:	d003      	beq.n	800a5da <_scanf_i+0x10e>
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	f109 39ff 	add.w	r9, r9, #4294967295
 800a5d8:	60a3      	str	r3, [r4, #8]
 800a5da:	6873      	ldr	r3, [r6, #4]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	6073      	str	r3, [r6, #4]
 800a5e2:	dd1b      	ble.n	800a61c <_scanf_i+0x150>
 800a5e4:	6833      	ldr	r3, [r6, #0]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	6033      	str	r3, [r6, #0]
 800a5ea:	68a3      	ldr	r3, [r4, #8]
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	60a3      	str	r3, [r4, #8]
 800a5f0:	e7d9      	b.n	800a5a6 <_scanf_i+0xda>
 800a5f2:	f1bb 0f02 	cmp.w	fp, #2
 800a5f6:	d1ae      	bne.n	800a556 <_scanf_i+0x8a>
 800a5f8:	6822      	ldr	r2, [r4, #0]
 800a5fa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a5fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a602:	d1bf      	bne.n	800a584 <_scanf_i+0xb8>
 800a604:	2310      	movs	r3, #16
 800a606:	6063      	str	r3, [r4, #4]
 800a608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a60c:	e7a2      	b.n	800a554 <_scanf_i+0x88>
 800a60e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a612:	6022      	str	r2, [r4, #0]
 800a614:	780b      	ldrb	r3, [r1, #0]
 800a616:	f805 3b01 	strb.w	r3, [r5], #1
 800a61a:	e7de      	b.n	800a5da <_scanf_i+0x10e>
 800a61c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a620:	4631      	mov	r1, r6
 800a622:	4650      	mov	r0, sl
 800a624:	4798      	blx	r3
 800a626:	2800      	cmp	r0, #0
 800a628:	d0df      	beq.n	800a5ea <_scanf_i+0x11e>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	05d9      	lsls	r1, r3, #23
 800a62e:	d50d      	bpl.n	800a64c <_scanf_i+0x180>
 800a630:	42bd      	cmp	r5, r7
 800a632:	d909      	bls.n	800a648 <_scanf_i+0x17c>
 800a634:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a638:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a63c:	4632      	mov	r2, r6
 800a63e:	4650      	mov	r0, sl
 800a640:	4798      	blx	r3
 800a642:	f105 39ff 	add.w	r9, r5, #4294967295
 800a646:	464d      	mov	r5, r9
 800a648:	42bd      	cmp	r5, r7
 800a64a:	d028      	beq.n	800a69e <_scanf_i+0x1d2>
 800a64c:	6822      	ldr	r2, [r4, #0]
 800a64e:	f012 0210 	ands.w	r2, r2, #16
 800a652:	d113      	bne.n	800a67c <_scanf_i+0x1b0>
 800a654:	702a      	strb	r2, [r5, #0]
 800a656:	6863      	ldr	r3, [r4, #4]
 800a658:	9e01      	ldr	r6, [sp, #4]
 800a65a:	4639      	mov	r1, r7
 800a65c:	4650      	mov	r0, sl
 800a65e:	47b0      	blx	r6
 800a660:	f8d8 3000 	ldr.w	r3, [r8]
 800a664:	6821      	ldr	r1, [r4, #0]
 800a666:	1d1a      	adds	r2, r3, #4
 800a668:	f8c8 2000 	str.w	r2, [r8]
 800a66c:	f011 0f20 	tst.w	r1, #32
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	d00f      	beq.n	800a694 <_scanf_i+0x1c8>
 800a674:	6018      	str	r0, [r3, #0]
 800a676:	68e3      	ldr	r3, [r4, #12]
 800a678:	3301      	adds	r3, #1
 800a67a:	60e3      	str	r3, [r4, #12]
 800a67c:	1bed      	subs	r5, r5, r7
 800a67e:	44ab      	add	fp, r5
 800a680:	6925      	ldr	r5, [r4, #16]
 800a682:	445d      	add	r5, fp
 800a684:	6125      	str	r5, [r4, #16]
 800a686:	2000      	movs	r0, #0
 800a688:	b007      	add	sp, #28
 800a68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a68e:	f04f 0b00 	mov.w	fp, #0
 800a692:	e7ca      	b.n	800a62a <_scanf_i+0x15e>
 800a694:	07ca      	lsls	r2, r1, #31
 800a696:	bf4c      	ite	mi
 800a698:	8018      	strhmi	r0, [r3, #0]
 800a69a:	6018      	strpl	r0, [r3, #0]
 800a69c:	e7eb      	b.n	800a676 <_scanf_i+0x1aa>
 800a69e:	2001      	movs	r0, #1
 800a6a0:	e7f2      	b.n	800a688 <_scanf_i+0x1bc>
 800a6a2:	bf00      	nop
 800a6a4:	0800b3e0 	.word	0x0800b3e0
 800a6a8:	08007829 	.word	0x08007829
 800a6ac:	08007719 	.word	0x08007719
 800a6b0:	0800b9b9 	.word	0x0800b9b9

0800a6b4 <_read_r>:
 800a6b4:	b538      	push	{r3, r4, r5, lr}
 800a6b6:	4d07      	ldr	r5, [pc, #28]	; (800a6d4 <_read_r+0x20>)
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	4608      	mov	r0, r1
 800a6bc:	4611      	mov	r1, r2
 800a6be:	2200      	movs	r2, #0
 800a6c0:	602a      	str	r2, [r5, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7f6 ff2a 	bl	800151c <_read>
 800a6c8:	1c43      	adds	r3, r0, #1
 800a6ca:	d102      	bne.n	800a6d2 <_read_r+0x1e>
 800a6cc:	682b      	ldr	r3, [r5, #0]
 800a6ce:	b103      	cbz	r3, 800a6d2 <_read_r+0x1e>
 800a6d0:	6023      	str	r3, [r4, #0]
 800a6d2:	bd38      	pop	{r3, r4, r5, pc}
 800a6d4:	200005b4 	.word	0x200005b4

0800a6d8 <__sccl>:
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	780b      	ldrb	r3, [r1, #0]
 800a6dc:	4604      	mov	r4, r0
 800a6de:	2b5e      	cmp	r3, #94	; 0x5e
 800a6e0:	bf0b      	itete	eq
 800a6e2:	784b      	ldrbeq	r3, [r1, #1]
 800a6e4:	1c48      	addne	r0, r1, #1
 800a6e6:	1c88      	addeq	r0, r1, #2
 800a6e8:	2200      	movne	r2, #0
 800a6ea:	bf08      	it	eq
 800a6ec:	2201      	moveq	r2, #1
 800a6ee:	1e61      	subs	r1, r4, #1
 800a6f0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a6f4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a6f8:	42a9      	cmp	r1, r5
 800a6fa:	d1fb      	bne.n	800a6f4 <__sccl+0x1c>
 800a6fc:	b90b      	cbnz	r3, 800a702 <__sccl+0x2a>
 800a6fe:	3801      	subs	r0, #1
 800a700:	bd70      	pop	{r4, r5, r6, pc}
 800a702:	f082 0101 	eor.w	r1, r2, #1
 800a706:	54e1      	strb	r1, [r4, r3]
 800a708:	1c42      	adds	r2, r0, #1
 800a70a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800a70e:	2d2d      	cmp	r5, #45	; 0x2d
 800a710:	f102 36ff 	add.w	r6, r2, #4294967295
 800a714:	4610      	mov	r0, r2
 800a716:	d006      	beq.n	800a726 <__sccl+0x4e>
 800a718:	2d5d      	cmp	r5, #93	; 0x5d
 800a71a:	d0f1      	beq.n	800a700 <__sccl+0x28>
 800a71c:	b90d      	cbnz	r5, 800a722 <__sccl+0x4a>
 800a71e:	4630      	mov	r0, r6
 800a720:	e7ee      	b.n	800a700 <__sccl+0x28>
 800a722:	462b      	mov	r3, r5
 800a724:	e7ef      	b.n	800a706 <__sccl+0x2e>
 800a726:	7816      	ldrb	r6, [r2, #0]
 800a728:	2e5d      	cmp	r6, #93	; 0x5d
 800a72a:	d0fa      	beq.n	800a722 <__sccl+0x4a>
 800a72c:	42b3      	cmp	r3, r6
 800a72e:	dcf8      	bgt.n	800a722 <__sccl+0x4a>
 800a730:	4618      	mov	r0, r3
 800a732:	3001      	adds	r0, #1
 800a734:	4286      	cmp	r6, r0
 800a736:	5421      	strb	r1, [r4, r0]
 800a738:	dcfb      	bgt.n	800a732 <__sccl+0x5a>
 800a73a:	43d8      	mvns	r0, r3
 800a73c:	4430      	add	r0, r6
 800a73e:	1c5d      	adds	r5, r3, #1
 800a740:	42b3      	cmp	r3, r6
 800a742:	bfa8      	it	ge
 800a744:	2000      	movge	r0, #0
 800a746:	182b      	adds	r3, r5, r0
 800a748:	3202      	adds	r2, #2
 800a74a:	e7de      	b.n	800a70a <__sccl+0x32>

0800a74c <__submore>:
 800a74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a750:	460c      	mov	r4, r1
 800a752:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a758:	4299      	cmp	r1, r3
 800a75a:	d11d      	bne.n	800a798 <__submore+0x4c>
 800a75c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a760:	f7fc fa04 	bl	8006b6c <_malloc_r>
 800a764:	b918      	cbnz	r0, 800a76e <__submore+0x22>
 800a766:	f04f 30ff 	mov.w	r0, #4294967295
 800a76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a76e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a772:	63a3      	str	r3, [r4, #56]	; 0x38
 800a774:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a778:	6360      	str	r0, [r4, #52]	; 0x34
 800a77a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a77e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a782:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a786:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a78a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a78e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a792:	6020      	str	r0, [r4, #0]
 800a794:	2000      	movs	r0, #0
 800a796:	e7e8      	b.n	800a76a <__submore+0x1e>
 800a798:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a79a:	0077      	lsls	r7, r6, #1
 800a79c:	463a      	mov	r2, r7
 800a79e:	f7fe fdec 	bl	800937a <_realloc_r>
 800a7a2:	4605      	mov	r5, r0
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d0de      	beq.n	800a766 <__submore+0x1a>
 800a7a8:	eb00 0806 	add.w	r8, r0, r6
 800a7ac:	4601      	mov	r1, r0
 800a7ae:	4632      	mov	r2, r6
 800a7b0:	4640      	mov	r0, r8
 800a7b2:	f7fb fedd 	bl	8006570 <memcpy>
 800a7b6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a7ba:	f8c4 8000 	str.w	r8, [r4]
 800a7be:	e7e9      	b.n	800a794 <__submore+0x48>

0800a7c0 <_fstat_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4d07      	ldr	r5, [pc, #28]	; (800a7e0 <_fstat_r+0x20>)
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	4611      	mov	r1, r2
 800a7cc:	602b      	str	r3, [r5, #0]
 800a7ce:	f7f6 feea 	bl	80015a6 <_fstat>
 800a7d2:	1c43      	adds	r3, r0, #1
 800a7d4:	d102      	bne.n	800a7dc <_fstat_r+0x1c>
 800a7d6:	682b      	ldr	r3, [r5, #0]
 800a7d8:	b103      	cbz	r3, 800a7dc <_fstat_r+0x1c>
 800a7da:	6023      	str	r3, [r4, #0]
 800a7dc:	bd38      	pop	{r3, r4, r5, pc}
 800a7de:	bf00      	nop
 800a7e0:	200005b4 	.word	0x200005b4

0800a7e4 <_isatty_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4d06      	ldr	r5, [pc, #24]	; (800a800 <_isatty_r+0x1c>)
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	4604      	mov	r4, r0
 800a7ec:	4608      	mov	r0, r1
 800a7ee:	602b      	str	r3, [r5, #0]
 800a7f0:	f7f6 fee9 	bl	80015c6 <_isatty>
 800a7f4:	1c43      	adds	r3, r0, #1
 800a7f6:	d102      	bne.n	800a7fe <_isatty_r+0x1a>
 800a7f8:	682b      	ldr	r3, [r5, #0]
 800a7fa:	b103      	cbz	r3, 800a7fe <_isatty_r+0x1a>
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	bd38      	pop	{r3, r4, r5, pc}
 800a800:	200005b4 	.word	0x200005b4

0800a804 <_init>:
 800a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a806:	bf00      	nop
 800a808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a80a:	bc08      	pop	{r3}
 800a80c:	469e      	mov	lr, r3
 800a80e:	4770      	bx	lr

0800a810 <_fini>:
 800a810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a812:	bf00      	nop
 800a814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a816:	bc08      	pop	{r3}
 800a818:	469e      	mov	lr, r3
 800a81a:	4770      	bx	lr
