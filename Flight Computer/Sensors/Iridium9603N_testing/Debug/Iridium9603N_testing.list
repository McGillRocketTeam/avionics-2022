
Iridium9603N_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d68  08008150  08008150  00018150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eb8  08008eb8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008eb8  08008eb8  00018eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ec0  08008ec0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08008ec0  08008ec0  00018ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ecc  08008ecc  00018ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001e0  080090b0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c0  080090b0  000205c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000230af  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f5  00000000  00000000  000432bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00046bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  00048060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027aae  00000000  00000000  00049458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001827c  00000000  00000000  00070f06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc42f  00000000  00000000  00089182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001655b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069b8  00000000  00000000  00165604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008138 	.word	0x08008138

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08008138 	.word	0x08008138

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);

   }

   IridiumSBD(TwoWire &wirePort = Wire, uint8_t deviceAddress = 0x63)
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	4613      	mov	r3, r2
 8000eec:	71fb      	strb	r3, [r7, #7]
   {
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	665a      	str	r2, [r3, #100]	; 0x64
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2205      	movs	r2, #5
 8000ef8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2201      	movs	r2, #1
 8000f00:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2202      	movs	r2, #2
 8000f08:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2204      	movs	r2, #4
 8000f10:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2208      	movs	r2, #8
 8000f18:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2210      	movs	r2, #16
 8000f20:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2220      	movs	r2, #32
 8000f28:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2240      	movs	r2, #64	; 0x40
 8000f30:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
      useSerial = false;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2200      	movs	r2, #0
 8000f38:	725a      	strb	r2, [r3, #9]
      wireport = &wirePort;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	605a      	str	r2, [r3, #4]
      deviceaddress = deviceAddress;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	79fa      	ldrb	r2, [r7, #7]
 8000f44:	721a      	strb	r2, [r3, #8]
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	221e      	movs	r2, #30
 8000f4a:	655a      	str	r2, [r3, #84]	; 0x54
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	221e      	movs	r2, #30
 8000f50:	659a      	str	r2, [r3, #88]	; 0x58
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f58:	65da      	str	r2, [r3, #92]	; 0x5c
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	22f0      	movs	r2, #240	; 0xf0
 8000f5e:	661a      	str	r2, [r3, #96]	; 0x60
      remainingMessages = -1;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f04f 32ff 	mov.w	r2, #4294967295
 8000f66:	66da      	str	r2, [r3, #108]	; 0x6c
      asleep = true;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
      reentrant = false;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
      sleepPin = -1;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7e:	675a      	str	r2, [r3, #116]	; 0x74
      sleepPinConfigured = false;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
      ringPin = -1;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8e:	67da      	str	r2, [r3, #124]	; 0x7c
      msstmWorkaroundRequested = false;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      ringAlertsEnabled = true;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      ringAsserted = false;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      lastPowerOnTime = 0UL;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      head = SBDRING;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <_ZN10IridiumSBDC1ER7TwoWireh+0x104>)
 8000fb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      tail = SBDRING;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <_ZN10IridiumSBDC1ER7TwoWireh+0x104>)
 8000fbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      nextChar = -1;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      i2c_ser_buffer_tail = 0;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	64da      	str	r2, [r3, #76]	; 0x4c
      i2c_ser_buffer_head = 0;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	651a      	str	r2, [r3, #80]	; 0x50
   }
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	08008a78 	.word	0x08008a78

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b0a5      	sub	sp, #148	; 0x94
 8000fec:	af24      	add	r7, sp, #144	; 0x90
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f002 fb71 	bl	80036d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f815 	bl	8001020 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 f8ed 	bl	80011d4 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8000ffa:	f000 f8bd 	bl	8001178 <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 8000ffe:	f000 f887 	bl	8001110 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  setup(GPS);
 8001002:	4c06      	ldr	r4, [pc, #24]	; (800101c <main+0x34>)
 8001004:	4668      	mov	r0, sp
 8001006:	f104 0310 	add.w	r3, r4, #16
 800100a:	228c      	movs	r2, #140	; 0x8c
 800100c:	4619      	mov	r1, r3
 800100e:	f004 fbc9 	bl	80057a4 <memcpy>
 8001012:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001016:	f000 f905 	bl	8001224 <_ZL5setup10IridiumSBD>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800101a:	e7fe      	b.n	800101a <main+0x32>
 800101c:	20000294 	.word	0x20000294

08001020 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b094      	sub	sp, #80	; 0x50
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	2234      	movs	r2, #52	; 0x34
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f004 fbc6 	bl	80057c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <_Z18SystemClock_Configv+0xe8>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	4a2e      	ldr	r2, [pc, #184]	; (8001108 <_Z18SystemClock_Configv+0xe8>)
 800104e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001052:	6413      	str	r3, [r2, #64]	; 0x40
 8001054:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <_Z18SystemClock_Configv+0xe8>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001060:	2300      	movs	r3, #0
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <_Z18SystemClock_Configv+0xec>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800106c:	4a27      	ldr	r2, [pc, #156]	; (800110c <_Z18SystemClock_Configv+0xec>)
 800106e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <_Z18SystemClock_Configv+0xec>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001080:	2302      	movs	r3, #2
 8001082:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001084:	2301      	movs	r3, #1
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001088:	2310      	movs	r3, #16
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108c:	2302      	movs	r3, #2
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001090:	2300      	movs	r3, #0
 8001092:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001094:	2308      	movs	r3, #8
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001098:	2332      	movs	r3, #50	; 0x32
 800109a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800109c:	2302      	movs	r3, #2
 800109e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010a0:	2307      	movs	r3, #7
 80010a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 fac9 	bl	8004644 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bf14      	ite	ne
 80010b8:	2301      	movne	r3, #1
 80010ba:	2300      	moveq	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80010c2:	f000 fa73 	bl	80015ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c6:	230f      	movs	r3, #15
 80010c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ca:	2302      	movs	r3, #2
 80010cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	2101      	movs	r1, #1
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 ffaf 	bl	8004048 <HAL_RCC_ClockConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bf14      	ite	ne
 80010f0:	2301      	movne	r3, #1
 80010f2:	2300      	moveq	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 80010fa:	f000 fa57 	bl	80015ac <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3750      	adds	r7, #80	; 0x50
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <_ZL12MX_I2C1_Initv+0x5c>)
 8001116:	4a16      	ldr	r2, [pc, #88]	; (8001170 <_ZL12MX_I2C1_Initv+0x60>)
 8001118:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <_ZL12MX_I2C1_Initv+0x5c>)
 800111c:	4a15      	ldr	r2, [pc, #84]	; (8001174 <_ZL12MX_I2C1_Initv+0x64>)
 800111e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <_ZL12MX_I2C1_Initv+0x5c>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <_ZL12MX_I2C1_Initv+0x5c>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <_ZL12MX_I2C1_Initv+0x5c>)
 800112e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001132:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <_ZL12MX_I2C1_Initv+0x5c>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <_ZL12MX_I2C1_Initv+0x5c>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <_ZL12MX_I2C1_Initv+0x5c>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <_ZL12MX_I2C1_Initv+0x5c>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800114c:	4807      	ldr	r0, [pc, #28]	; (800116c <_ZL12MX_I2C1_Initv+0x5c>)
 800114e:	f002 fe01 	bl	8003d54 <HAL_I2C_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	bf14      	ite	ne
 8001158:	2301      	movne	r3, #1
 800115a:	2300      	moveq	r3, #0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001162:	f000 fa23 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200001fc 	.word	0x200001fc
 8001170:	40005400 	.word	0x40005400
 8001174:	000186a0 	.word	0x000186a0

08001178 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <_ZL19MX_USART3_UART_Initv+0x54>)
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001180:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001184:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001188:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <_ZL19MX_USART3_UART_Initv+0x54>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <_ZL19MX_USART3_UART_Initv+0x54>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <_ZL19MX_USART3_UART_Initv+0x54>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <_ZL19MX_USART3_UART_Initv+0x54>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <_ZL19MX_USART3_UART_Initv+0x54>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <_ZL19MX_USART3_UART_Initv+0x54>)
 80011b0:	f003 ff94 	bl	80050dc <HAL_UART_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	bf14      	ite	ne
 80011ba:	2301      	movne	r3, #1
 80011bc:	2300      	moveq	r3, #0
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80011c4:	f000 f9f2 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000250 	.word	0x20000250
 80011d0:	40004800 	.word	0x40004800

080011d4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <_ZL12MX_GPIO_Initv+0x4c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <_ZL12MX_GPIO_Initv+0x4c>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <_ZL12MX_GPIO_Initv+0x4c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <_ZL12MX_GPIO_Initv+0x4c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <_ZL12MX_GPIO_Initv+0x4c>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <_ZL12MX_GPIO_Initv+0x4c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <_ZL5setup10IridiumSBD>:

/* USER CODE BEGIN 4 */

static uint8_t setup(IridiumSBD I){
 8001224:	b084      	sub	sp, #16
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	f107 0c10 	add.w	ip, r7, #16
 8001230:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart3,(uint8_t*) "\r\nChecking for the device...", 30, HAL_MAX_DELAY);
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
 8001238:	221e      	movs	r2, #30
 800123a:	4968      	ldr	r1, [pc, #416]	; (80013dc <_ZL5setup10IridiumSBD+0x1b8>)
 800123c:	4868      	ldr	r0, [pc, #416]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 800123e:	f003 ff9a 	bl	8005176 <HAL_UART_Transmit>
	while(!I.isConnected()){
 8001242:	f107 0010 	add.w	r0, r7, #16
 8001246:	f000 fde9 	bl	8001e1c <_ZN10IridiumSBD11isConnectedEv>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	bf0c      	ite	eq
 8001250:	2301      	moveq	r3, #1
 8001252:	2300      	movne	r3, #0
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d02c      	beq.n	80012b4 <_ZL5setup10IridiumSBD+0x90>
		HAL_UART_Transmit(&huart3,(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	2235      	movs	r2, #53	; 0x35
 8001260:	4960      	ldr	r1, [pc, #384]	; (80013e4 <_ZL5setup10IridiumSBD+0x1c0>)
 8001262:	485f      	ldr	r0, [pc, #380]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 8001264:	f003 ff87 	bl	8005176 <HAL_UART_Transmit>
		HAL_Delay(500);
 8001268:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800126c:	f002 fa74 	bl	8003758 <HAL_Delay>
		HAL_UART_Transmit(&huart3,(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	2203      	movs	r2, #3
 8001276:	495c      	ldr	r1, [pc, #368]	; (80013e8 <_ZL5setup10IridiumSBD+0x1c4>)
 8001278:	4859      	ldr	r0, [pc, #356]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 800127a:	f003 ff7c 	bl	8005176 <HAL_UART_Transmit>
		HAL_Delay(1000);
 800127e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001282:	f002 fa69 	bl	8003758 <HAL_Delay>
		HAL_UART_Transmit(&huart3,(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
 800128a:	2203      	movs	r2, #3
 800128c:	4957      	ldr	r1, [pc, #348]	; (80013ec <_ZL5setup10IridiumSBD+0x1c8>)
 800128e:	4854      	ldr	r0, [pc, #336]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 8001290:	f003 ff71 	bl	8005176 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001298:	f002 fa5e 	bl	8003758 <HAL_Delay>
		HAL_UART_Transmit(&huart3,(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	2207      	movs	r2, #7
 80012a2:	4953      	ldr	r1, [pc, #332]	; (80013f0 <_ZL5setup10IridiumSBD+0x1cc>)
 80012a4:	484e      	ldr	r0, [pc, #312]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 80012a6:	f003 ff66 	bl	8005176 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80012aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ae:	f002 fa53 	bl	8003758 <HAL_Delay>
	while(!I.isConnected()){
 80012b2:	e7c6      	b.n	8001242 <_ZL5setup10IridiumSBD+0x1e>
	}
	HAL_UART_Transmit(&huart3,(uint8_t*) "Done\r\n", 8, HAL_MAX_DELAY);
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	2208      	movs	r2, #8
 80012ba:	494e      	ldr	r1, [pc, #312]	; (80013f4 <_ZL5setup10IridiumSBD+0x1d0>)
 80012bc:	4848      	ldr	r0, [pc, #288]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 80012be:	f003 ff5a 	bl	8005176 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart3,(uint8_t*) "The device was found!\n\r", 25, HAL_MAX_DELAY);
	*/

	//Activate the superchargers
	HAL_UART_Transmit(&huart3,(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	221f      	movs	r2, #31
 80012c8:	494b      	ldr	r1, [pc, #300]	; (80013f8 <_ZL5setup10IridiumSBD+0x1d4>)
 80012ca:	4845      	ldr	r0, [pc, #276]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 80012cc:	f003 ff53 	bl	8005176 <HAL_UART_Transmit>
	I.enableSuperCapCharger(true);
 80012d0:	2101      	movs	r1, #1
 80012d2:	f107 0010 	add.w	r0, r7, #16
 80012d6:	f000 fc87 	bl	8001be8 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&huart3,(uint8_t*) "Done\r\n", 8, HAL_MAX_DELAY);
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	2208      	movs	r2, #8
 80012e0:	4944      	ldr	r1, [pc, #272]	; (80013f4 <_ZL5setup10IridiumSBD+0x1d0>)
 80012e2:	483f      	ldr	r0, [pc, #252]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 80012e4:	f003 ff47 	bl	8005176 <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	while (!I.checkSuperCapCharger()){
 80012e8:	f107 0010 	add.w	r0, r7, #16
 80012ec:	f000 fcba 	bl	8001c64 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f083 0301 	eor.w	r3, r3, #1
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d021      	beq.n	8001340 <_ZL5setup10IridiumSBD+0x11c>
		HAL_UART_Transmit(&huart3,(uint8_t*) "\rWaiting for the supercapacitors to charge.\r", 46, HAL_MAX_DELAY);
 80012fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001300:	222e      	movs	r2, #46	; 0x2e
 8001302:	493e      	ldr	r1, [pc, #248]	; (80013fc <_ZL5setup10IridiumSBD+0x1d8>)
 8001304:	4836      	ldr	r0, [pc, #216]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 8001306:	f003 ff36 	bl	8005176 <HAL_UART_Transmit>
		HAL_Delay(333);
 800130a:	f240 104d 	movw	r0, #333	; 0x14d
 800130e:	f002 fa23 	bl	8003758 <HAL_Delay>
		HAL_UART_Transmit(&huart3,(uint8_t*) "Waiting for the supercapacitors to charge..\r", 45, HAL_MAX_DELAY);
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
 8001316:	222d      	movs	r2, #45	; 0x2d
 8001318:	4939      	ldr	r1, [pc, #228]	; (8001400 <_ZL5setup10IridiumSBD+0x1dc>)
 800131a:	4831      	ldr	r0, [pc, #196]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 800131c:	f003 ff2b 	bl	8005176 <HAL_UART_Transmit>
		HAL_Delay(333);
 8001320:	f240 104d 	movw	r0, #333	; 0x14d
 8001324:	f002 fa18 	bl	8003758 <HAL_Delay>
		HAL_UART_Transmit(&huart3,(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	222c      	movs	r2, #44	; 0x2c
 800132e:	4935      	ldr	r1, [pc, #212]	; (8001404 <_ZL5setup10IridiumSBD+0x1e0>)
 8001330:	482b      	ldr	r0, [pc, #172]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 8001332:	f003 ff20 	bl	8005176 <HAL_UART_Transmit>
		HAL_Delay(333);
 8001336:	f240 104d 	movw	r0, #333	; 0x14d
 800133a:	f002 fa0d 	bl	8003758 <HAL_Delay>
	while (!I.checkSuperCapCharger()){
 800133e:	e7d3      	b.n	80012e8 <_ZL5setup10IridiumSBD+0xc4>
	}
	HAL_UART_Transmit(&huart3,(uint8_t*) "Done\r\n", 8, HAL_MAX_DELAY);
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
 8001344:	2208      	movs	r2, #8
 8001346:	492b      	ldr	r1, [pc, #172]	; (80013f4 <_ZL5setup10IridiumSBD+0x1d0>)
 8001348:	4825      	ldr	r0, [pc, #148]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 800134a:	f003 ff14 	bl	8005176 <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&huart3,(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	2217      	movs	r2, #23
 8001354:	492c      	ldr	r1, [pc, #176]	; (8001408 <_ZL5setup10IridiumSBD+0x1e4>)
 8001356:	4822      	ldr	r0, [pc, #136]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 8001358:	f003 ff0d 	bl	8005176 <HAL_UART_Transmit>
	I.enable9603Npower(true);
 800135c:	2101      	movs	r1, #1
 800135e:	f107 0010 	add.w	r0, r7, #16
 8001362:	f000 fcaf 	bl	8001cc4 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&huart3,(uint8_t*) "Done\r\n", 8, HAL_MAX_DELAY);
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	2208      	movs	r2, #8
 800136c:	4921      	ldr	r1, [pc, #132]	; (80013f4 <_ZL5setup10IridiumSBD+0x1d0>)
 800136e:	481c      	ldr	r0, [pc, #112]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 8001370:	f003 ff01 	bl	8005176 <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&huart3,(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 8001374:	f04f 33ff 	mov.w	r3, #4294967295
 8001378:	2211      	movs	r2, #17
 800137a:	4924      	ldr	r1, [pc, #144]	; (800140c <_ZL5setup10IridiumSBD+0x1e8>)
 800137c:	4818      	ldr	r0, [pc, #96]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 800137e:	f003 fefa 	bl	8005176 <HAL_UART_Transmit>
	int err = I.begin();
 8001382:	f107 0010 	add.w	r0, r7, #16
 8001386:	f000 fbe5 	bl	8001b54 <_ZN10IridiumSBD5beginEv>
 800138a:	6078      	str	r0, [r7, #4]
	if (err != ISBD_SUCCESS)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d014      	beq.n	80013bc <_ZL5setup10IridiumSBD+0x198>
	  {
		HAL_UART_Transmit(&huart3,(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2208      	movs	r2, #8
 8001398:	491d      	ldr	r1, [pc, #116]	; (8001410 <_ZL5setup10IridiumSBD+0x1ec>)
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 800139c:	f003 feeb 	bl	8005176 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3,(uint8_t*) err, 4, HAL_MAX_DELAY);
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	2204      	movs	r2, #4
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 80013aa:	f003 fee4 	bl	8005176 <HAL_UART_Transmit>
		iridiumErrorMessage(err);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f82e 	bl	8001414 <_ZL19iridiumErrorMessageh>

	    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e007      	b.n	80013cc <_ZL5setup10IridiumSBD+0x1a8>
	  }
	HAL_UART_Transmit(&huart3,(uint8_t*) "Done\r\n", 8, HAL_MAX_DELAY);
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
 80013c0:	2208      	movs	r2, #8
 80013c2:	490c      	ldr	r1, [pc, #48]	; (80013f4 <_ZL5setup10IridiumSBD+0x1d0>)
 80013c4:	4806      	ldr	r0, [pc, #24]	; (80013e0 <_ZL5setup10IridiumSBD+0x1bc>)
 80013c6:	f003 fed6 	bl	8005176 <HAL_UART_Transmit>

	return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013d6:	b004      	add	sp, #16
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	08008150 	.word	0x08008150
 80013e0:	20000250 	.word	0x20000250
 80013e4:	08008170 	.word	0x08008170
 80013e8:	080081a4 	.word	0x080081a4
 80013ec:	080081a8 	.word	0x080081a8
 80013f0:	080081ac 	.word	0x080081ac
 80013f4:	080081b4 	.word	0x080081b4
 80013f8:	080081bc 	.word	0x080081bc
 80013fc:	080081dc 	.word	0x080081dc
 8001400:	0800820c 	.word	0x0800820c
 8001404:	0800823c 	.word	0x0800823c
 8001408:	0800826c 	.word	0x0800826c
 800140c:	08008284 	.word	0x08008284
 8001410:	08008298 	.word	0x08008298

08001414 <_ZL19iridiumErrorMessageh>:

static void iridiumErrorMessage(uint8_t error){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3,(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	220c      	movs	r2, #12
 8001424:	4949      	ldr	r1, [pc, #292]	; (800154c <_ZL19iridiumErrorMessageh+0x138>)
 8001426:	484a      	ldr	r0, [pc, #296]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 8001428:	f003 fea5 	bl	8005176 <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b01      	cmp	r3, #1
 8001430:	d107      	bne.n	8001442 <_ZL19iridiumErrorMessageh+0x2e>
	   	HAL_UART_Transmit(&huart3,(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	2211      	movs	r2, #17
 8001438:	4946      	ldr	r1, [pc, #280]	; (8001554 <_ZL19iridiumErrorMessageh+0x140>)
 800143a:	4845      	ldr	r0, [pc, #276]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 800143c:	f003 fe9b 	bl	8005176 <HAL_UART_Transmit>
#define ISBD_RX_OVERFLOW         8
#define ISBD_REENTRANT           9
#define ISBD_IS_ASLEEP           10
#define ISBD_NO_SLEEP_PIN        11
*/
}
 8001440:	e07f      	b.n	8001542 <_ZL19iridiumErrorMessageh+0x12e>
	else if (error == ISBD_SERIAL_FAILURE){
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d107      	bne.n	8001458 <_ZL19iridiumErrorMessageh+0x44>
	   	HAL_UART_Transmit(&huart3,(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	2212      	movs	r2, #18
 800144e:	4942      	ldr	r1, [pc, #264]	; (8001558 <_ZL19iridiumErrorMessageh+0x144>)
 8001450:	483f      	ldr	r0, [pc, #252]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 8001452:	f003 fe90 	bl	8005176 <HAL_UART_Transmit>
}
 8001456:	e074      	b.n	8001542 <_ZL19iridiumErrorMessageh+0x12e>
	else if (error == ISBD_PROTOCOL_ERROR){
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d107      	bne.n	800146e <_ZL19iridiumErrorMessageh+0x5a>
		HAL_UART_Transmit(&huart3,(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	2212      	movs	r2, #18
 8001464:	493d      	ldr	r1, [pc, #244]	; (800155c <_ZL19iridiumErrorMessageh+0x148>)
 8001466:	483a      	ldr	r0, [pc, #232]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 8001468:	f003 fe85 	bl	8005176 <HAL_UART_Transmit>
}
 800146c:	e069      	b.n	8001542 <_ZL19iridiumErrorMessageh+0x12e>
	else if (error == ISBD_CANCELLED){
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d107      	bne.n	8001484 <_ZL19iridiumErrorMessageh+0x70>
	   	HAL_UART_Transmit(&huart3,(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	220d      	movs	r2, #13
 800147a:	4939      	ldr	r1, [pc, #228]	; (8001560 <_ZL19iridiumErrorMessageh+0x14c>)
 800147c:	4834      	ldr	r0, [pc, #208]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 800147e:	f003 fe7a 	bl	8005176 <HAL_UART_Transmit>
}
 8001482:	e05e      	b.n	8001542 <_ZL19iridiumErrorMessageh+0x12e>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d107      	bne.n	800149a <_ZL19iridiumErrorMessageh+0x86>
	   	HAL_UART_Transmit(&huart3,(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 800148a:	f04f 33ff 	mov.w	r3, #4294967295
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	4934      	ldr	r1, [pc, #208]	; (8001564 <_ZL19iridiumErrorMessageh+0x150>)
 8001492:	482f      	ldr	r0, [pc, #188]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 8001494:	f003 fe6f 	bl	8005176 <HAL_UART_Transmit>
}
 8001498:	e053      	b.n	8001542 <_ZL19iridiumErrorMessageh+0x12e>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2b06      	cmp	r3, #6
 800149e:	d107      	bne.n	80014b0 <_ZL19iridiumErrorMessageh+0x9c>
	   	HAL_UART_Transmit(&huart3,(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	2215      	movs	r2, #21
 80014a6:	4930      	ldr	r1, [pc, #192]	; (8001568 <_ZL19iridiumErrorMessageh+0x154>)
 80014a8:	4829      	ldr	r0, [pc, #164]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 80014aa:	f003 fe64 	bl	8005176 <HAL_UART_Transmit>
}
 80014ae:	e048      	b.n	8001542 <_ZL19iridiumErrorMessageh+0x12e>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b07      	cmp	r3, #7
 80014b4:	d107      	bne.n	80014c6 <_ZL19iridiumErrorMessageh+0xb2>
	   	HAL_UART_Transmit(&huart3,(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	2218      	movs	r2, #24
 80014bc:	492b      	ldr	r1, [pc, #172]	; (800156c <_ZL19iridiumErrorMessageh+0x158>)
 80014be:	4824      	ldr	r0, [pc, #144]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 80014c0:	f003 fe59 	bl	8005176 <HAL_UART_Transmit>
}
 80014c4:	e03d      	b.n	8001542 <_ZL19iridiumErrorMessageh+0x12e>
	else if (error == ISBD_RX_OVERFLOW){
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d107      	bne.n	80014dc <_ZL19iridiumErrorMessageh+0xc8>
		HAL_UART_Transmit(&huart3,(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	220f      	movs	r2, #15
 80014d2:	4927      	ldr	r1, [pc, #156]	; (8001570 <_ZL19iridiumErrorMessageh+0x15c>)
 80014d4:	481e      	ldr	r0, [pc, #120]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 80014d6:	f003 fe4e 	bl	8005176 <HAL_UART_Transmit>
}
 80014da:	e032      	b.n	8001542 <_ZL19iridiumErrorMessageh+0x12e>
	else if (error == ISBD_REENTRANT){
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	2b09      	cmp	r3, #9
 80014e0:	d107      	bne.n	80014f2 <_ZL19iridiumErrorMessageh+0xde>
		HAL_UART_Transmit(&huart3,(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	220d      	movs	r2, #13
 80014e8:	4922      	ldr	r1, [pc, #136]	; (8001574 <_ZL19iridiumErrorMessageh+0x160>)
 80014ea:	4819      	ldr	r0, [pc, #100]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 80014ec:	f003 fe43 	bl	8005176 <HAL_UART_Transmit>
}
 80014f0:	e027      	b.n	8001542 <_ZL19iridiumErrorMessageh+0x12e>
	else if (error == ISBD_IS_ASLEEP){
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	2b0a      	cmp	r3, #10
 80014f6:	d107      	bne.n	8001508 <_ZL19iridiumErrorMessageh+0xf4>
	   	HAL_UART_Transmit(&huart3,(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	220d      	movs	r2, #13
 80014fe:	491e      	ldr	r1, [pc, #120]	; (8001578 <_ZL19iridiumErrorMessageh+0x164>)
 8001500:	4813      	ldr	r0, [pc, #76]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 8001502:	f003 fe38 	bl	8005176 <HAL_UART_Transmit>
}
 8001506:	e01c      	b.n	8001542 <_ZL19iridiumErrorMessageh+0x12e>
	else if (error == ISBD_NO_SLEEP_PIN){
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	2b0b      	cmp	r3, #11
 800150c:	d107      	bne.n	800151e <_ZL19iridiumErrorMessageh+0x10a>
	   	HAL_UART_Transmit(&huart3,(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	2210      	movs	r2, #16
 8001514:	4919      	ldr	r1, [pc, #100]	; (800157c <_ZL19iridiumErrorMessageh+0x168>)
 8001516:	480e      	ldr	r0, [pc, #56]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 8001518:	f003 fe2d 	bl	8005176 <HAL_UART_Transmit>
}
 800151c:	e011      	b.n	8001542 <_ZL19iridiumErrorMessageh+0x12e>
	else if(error == 20){
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b14      	cmp	r3, #20
 8001522:	d107      	bne.n	8001534 <_ZL19iridiumErrorMessageh+0x120>
		HAL_UART_Transmit(&huart3,(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	2216      	movs	r2, #22
 800152a:	4915      	ldr	r1, [pc, #84]	; (8001580 <_ZL19iridiumErrorMessageh+0x16c>)
 800152c:	4808      	ldr	r0, [pc, #32]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 800152e:	f003 fe22 	bl	8005176 <HAL_UART_Transmit>
}
 8001532:	e006      	b.n	8001542 <_ZL19iridiumErrorMessageh+0x12e>
		HAL_UART_Transmit(&huart3,(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	220b      	movs	r2, #11
 800153a:	4912      	ldr	r1, [pc, #72]	; (8001584 <_ZL19iridiumErrorMessageh+0x170>)
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <_ZL19iridiumErrorMessageh+0x13c>)
 800153e:	f003 fe1a 	bl	8005176 <HAL_UART_Transmit>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	080082a4 	.word	0x080082a4
 8001550:	20000250 	.word	0x20000250
 8001554:	080082b0 	.word	0x080082b0
 8001558:	080082c0 	.word	0x080082c0
 800155c:	080082d4 	.word	0x080082d4
 8001560:	080082e8 	.word	0x080082e8
 8001564:	080082f4 	.word	0x080082f4
 8001568:	08008318 	.word	0x08008318
 800156c:	0800832c 	.word	0x0800832c
 8001570:	08008344 	.word	0x08008344
 8001574:	08008354 	.word	0x08008354
 8001578:	08008360 	.word	0x08008360
 800157c:	0800836c 	.word	0x0800836c
 8001580:	0800837c 	.word	0x0800837c
 8001584:	08008394 	.word	0x08008394

08001588 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800159a:	f002 f8bd 	bl	8003718 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40010000 	.word	0x40010000

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <Error_Handler+0x8>
	...

080015b8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d109      	bne.n	80015dc <_Z41__static_initialization_and_destruction_0ii+0x24>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d104      	bne.n	80015dc <_Z41__static_initialization_and_destruction_0ii+0x24>
IridiumSBD GPS;
 80015d2:	2263      	movs	r2, #99	; 0x63
 80015d4:	4903      	ldr	r1, [pc, #12]	; (80015e4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80015d6:	4804      	ldr	r0, [pc, #16]	; (80015e8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80015d8:	f7ff fc82 	bl	8000ee0 <_ZN10IridiumSBDC1ER7TwoWireh>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000334 	.word	0x20000334
 80015e8:	20000294 	.word	0x20000294

080015ec <_GLOBAL__sub_I_hi2c1>:
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff ffdf 	bl	80015b8 <_Z41__static_initialization_and_destruction_0ii>
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_MspInit+0x4c>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_MspInit+0x4c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_MspInit+0x4c>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_MspInit+0x4c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	603b      	str	r3, [r7, #0]
 8001638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <HAL_I2C_MspInit+0x84>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d12c      	bne.n	80016c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <HAL_I2C_MspInit+0x88>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_I2C_MspInit+0x88>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_I2C_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800168a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001690:	2312      	movs	r3, #18
 8001692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800169c:	2304      	movs	r3, #4
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	480c      	ldr	r0, [pc, #48]	; (80016d8 <HAL_I2C_MspInit+0x8c>)
 80016a8:	f002 f98e 	bl	80039c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_I2C_MspInit+0x88>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <HAL_I2C_MspInit+0x88>)
 80016b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ba:	6413      	str	r3, [r2, #64]	; 0x40
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_I2C_MspInit+0x88>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	; 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40005400 	.word	0x40005400
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020400 	.word	0x40020400

080016dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	; 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a19      	ldr	r2, [pc, #100]	; (8001760 <HAL_UART_MspInit+0x84>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12c      	bne.n	8001758 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_UART_MspInit+0x88>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a17      	ldr	r2, [pc, #92]	; (8001764 <HAL_UART_MspInit+0x88>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_UART_MspInit+0x88>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_UART_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <HAL_UART_MspInit+0x88>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_UART_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001736:	f44f 7340 	mov.w	r3, #768	; 0x300
 800173a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001748:	2307      	movs	r3, #7
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	4805      	ldr	r0, [pc, #20]	; (8001768 <HAL_UART_MspInit+0x8c>)
 8001754:	f002 f938 	bl	80039c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	; 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40004800 	.word	0x40004800
 8001764:	40023800 	.word	0x40023800
 8001768:	40020c00 	.word	0x40020c00

0800176c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	2019      	movs	r0, #25
 8001782:	f002 f8e9 	bl	8003958 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001786:	2019      	movs	r0, #25
 8001788:	f002 f902 	bl	8003990 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <HAL_InitTick+0xa4>)
 8001792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <HAL_InitTick+0xa4>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6453      	str	r3, [r2, #68]	; 0x44
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_InitTick+0xa4>)
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a8:	f107 0210 	add.w	r2, r7, #16
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 fd62 	bl	800427c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80017b8:	f002 fd4c 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 80017bc:	4603      	mov	r3, r0
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c4:	4a13      	ldr	r2, [pc, #76]	; (8001814 <HAL_InitTick+0xa8>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	0c9b      	lsrs	r3, r3, #18
 80017cc:	3b01      	subs	r3, #1
 80017ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_InitTick+0xac>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <HAL_InitTick+0xb0>)
 80017d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <HAL_InitTick+0xac>)
 80017d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017dc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017de:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <HAL_InitTick+0xac>)
 80017e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_InitTick+0xac>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_InitTick+0xac>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80017f0:	4809      	ldr	r0, [pc, #36]	; (8001818 <HAL_InitTick+0xac>)
 80017f2:	f003 f9c5 	bl	8004b80 <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d104      	bne.n	8001806 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80017fc:	4806      	ldr	r0, [pc, #24]	; (8001818 <HAL_InitTick+0xac>)
 80017fe:	f003 fa19 	bl	8004c34 <HAL_TIM_Base_Start_IT>
 8001802:	4603      	mov	r3, r0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3730      	adds	r7, #48	; 0x30
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40023800 	.word	0x40023800
 8001814:	431bde83 	.word	0x431bde83
 8001818:	20000564 	.word	0x20000564
 800181c:	40010000 	.word	0x40010000

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <NMI_Handler+0x4>

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler+0x4>

08001832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler+0x4>

0800183e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800187e:	f003 fa49 	bl	8004d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000564 	.word	0x20000564

0800188c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	return 1;
 8001890:	2301      	movs	r3, #1
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_kill>:

int _kill(int pid, int sig)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018a6:	f003 ff4b 	bl	8005740 <__errno>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2216      	movs	r2, #22
 80018ae:	601a      	str	r2, [r3, #0]
	return -1;
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <_exit>:

void _exit (int status)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ffe7 	bl	800189c <_kill>
	while (1) {}		/* Make sure we hang here */
 80018ce:	e7fe      	b.n	80018ce <_exit+0x12>

080018d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e00a      	b.n	80018f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018e2:	f3af 8000 	nop.w
 80018e6:	4601      	mov	r1, r0
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	b2ca      	uxtb	r2, r1
 80018f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	dbf0      	blt.n	80018e2 <_read+0x12>
	}

return len;
 8001900:	687b      	ldr	r3, [r7, #4]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b086      	sub	sp, #24
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e009      	b.n	8001930 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	60ba      	str	r2, [r7, #8]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf1      	blt.n	800191c <_write+0x12>
	}
	return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_close>:

int _close(int file)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
	return -1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196a:	605a      	str	r2, [r3, #4]
	return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_isatty>:

int _isatty(int file)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
	return 1;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
	return 0;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <_sbrk+0x5c>)
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <_sbrk+0x60>)
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <_sbrk+0x64>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d102      	bne.n	80019ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <_sbrk+0x64>)
 80019ca:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <_sbrk+0x68>)
 80019cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d207      	bcs.n	80019ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019dc:	f003 feb0 	bl	8005740 <__errno>
 80019e0:	4603      	mov	r3, r0
 80019e2:	220c      	movs	r2, #12
 80019e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019e6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ea:	e009      	b.n	8001a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <_sbrk+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <_sbrk+0x64>)
 80019fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20020000 	.word	0x20020000
 8001a0c:	00000400 	.word	0x00000400
 8001a10:	20000330 	.word	0x20000330
 8001a14:	200005c0 	.word	0x200005c0

08001a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <SystemInit+0x20>)
 8001a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a22:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <SystemInit+0x20>)
 8001a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a44:	4a0e      	ldr	r2, [pc, #56]	; (8001a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a48:	e002      	b.n	8001a50 <LoopCopyDataInit>

08001a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a4e:	3304      	adds	r3, #4

08001a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a54:	d3f9      	bcc.n	8001a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a56:	4a0b      	ldr	r2, [pc, #44]	; (8001a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a58:	4c0b      	ldr	r4, [pc, #44]	; (8001a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a5c:	e001      	b.n	8001a62 <LoopFillZerobss>

08001a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a60:	3204      	adds	r2, #4

08001a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a64:	d3fb      	bcc.n	8001a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a66:	f7ff ffd7 	bl	8001a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a6a:	f003 fe6f 	bl	800574c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a6e:	f7ff fabb 	bl	8000fe8 <main>
  bx  lr    
 8001a72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a7c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a80:	08008ed0 	.word	0x08008ed0
  ldr r2, =_sbss
 8001a84:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a88:	200005c0 	.word	0x200005c0

08001a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a8c:	e7fe      	b.n	8001a8c <ADC_IRQHandler>

08001a8e <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	70fb      	strb	r3, [r7, #3]
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	70fb      	strb	r3, [r7, #3]
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_Z10st_pinModeP12GPIO_TypeDefhi>:


//Define a version of pinMode for st to convert arduino's pinMode with macro
void st_pinMode(GPIO_TypeDef* PIN_NAME_GPIO_Port,uint8_t PIN_NAME_Pin,int i){
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b08a      	sub	sp, #40	; 0x28
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	460b      	mov	r3, r1
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	72fb      	strb	r3, [r7, #11]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pin Output Level */
	if (i==1){
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d106      	bne.n	8001b24 <_Z10st_pinModeP12GPIO_TypeDefhi+0x32>
		HAL_GPIO_WritePin(PIN_NAME_GPIO_Port, PIN_NAME_Pin, GPIO_PIN_RESET);
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f002 f8fe 	bl	8003d20 <HAL_GPIO_WritePin>
	}
	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = PIN_NAME_Pin;
 8001b24:	7afb      	ldrb	r3, [r7, #11]
 8001b26:	617b      	str	r3, [r7, #20]
	if (i==1) {
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d102      	bne.n	8001b34 <_Z10st_pinModeP12GPIO_TypeDefhi+0x42>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61bb      	str	r3, [r7, #24]
 8001b32:	e001      	b.n	8001b38 <_Z10st_pinModeP12GPIO_TypeDefhi+0x46>
	}
	else{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
	}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(PIN_NAME_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f001 ff3e 	bl	80039c8 <HAL_GPIO_Init>
}
 8001b4c:	bf00      	nop
 8001b4e:	3728      	adds	r7, #40	; 0x28
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_ZN10IridiumSBD5beginEv>:


// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 8001b66:	2309      	movs	r3, #9
 8001b68:	e01a      	b.n	8001ba0 <_ZN10IridiumSBD5beginEv+0x4c>

   this->reentrant = true;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
   int ret = internalBegin();
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f974 	bl	8001e60 <_ZN10IridiumSBD13internalBeginEv>
 8001b78:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00a      	beq.n	8001b9e <_ZN10IridiumSBD5beginEv+0x4a>
   {
      if (this->useSerial)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7a5b      	ldrb	r3, [r3, #9]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <_ZN10IridiumSBD5beginEv+0x42>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 fc31 	bl	80023f8 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8001b96:	2100      	movs	r1, #0
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fb77 	bl	800228c <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
   if (enable)
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00d      	beq.n	8001bde <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
   {
      this->ringAsserted = false;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	7a5b      	ldrb	r3, [r3, #9]
 8001bce:	f083 0301 	eor.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <_ZN10IridiumSBD16enableRingAlertsEb+0x36>
      {
        clearRingIndicator();
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f8ef 	bl	8001dbc <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

   return ISBD_SUCCESS;
}

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7a5b      	ldrb	r3, [r3, #9]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x1e>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001bfc:	4918      	ldr	r1, [pc, #96]	; (8001c60 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fcac 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8001c04:	e028      	b.n	8001c58 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x70>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 ff49 	bl	8002a9e <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <_ZN10IridiumSBD21enableSuperCapChargerEb+0x42>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8001c28:	e00f      	b.n	8001c4a <_ZN10IridiumSBD21enableSuperCapChargerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001c30:	b25a      	sxtb	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	4013      	ands	r3, r2
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  }
  set9603pins(IO_REGISTER); // Update the pins
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 ff5c 	bl	8002b10 <_ZN10IridiumSBD11set9603pinsEh>
}
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	08008410 	.word	0x08008410

08001c64 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7a5b      	ldrb	r3, [r3, #9]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1c>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001c74:	4912      	ldr	r1, [pc, #72]	; (8001cc0 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 fc70 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e01a      	b.n	8001cb6 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 ff0c 	bl	8002a9e <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8001c92:	4013      	ands	r3, r2
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x50>
  {
    return(true);
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  }
  else
  {
    return(false);
 8001cb4:	2300      	movs	r3, #0
  }
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	0800845c 	.word	0x0800845c

08001cc4 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7a5b      	ldrb	r3, [r3, #9]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d004      	beq.n	8001ce2 <_ZN10IridiumSBD16enable9603NpowerEb+0x1e>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001cd8:	4918      	ldr	r1, [pc, #96]	; (8001d3c <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fc3e 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8001ce0:	e028      	b.n	8001d34 <_ZN10IridiumSBD16enable9603NpowerEb+0x70>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fedb 	bl	8002a9e <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <_ZN10IridiumSBD16enable9603NpowerEb+0x42>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8001d04:	e00f      	b.n	8001d26 <_ZN10IridiumSBD16enable9603NpowerEb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001d0c:	b25a      	sxtb	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8001d14:	b25b      	sxtb	r3, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b25b      	sxtb	r3, r3
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  }
  set9603pins(IO_REGISTER); // Update the pins
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 feee 	bl	8002b10 <_ZN10IridiumSBD11set9603pinsEh>
}
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	080084a8 	.word	0x080084a8

08001d40 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7a5b      	ldrb	r3, [r3, #9]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d004      	beq.n	8001d5e <_ZN10IridiumSBD10enable9603Eb+0x1e>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001d54:	4918      	ldr	r1, [pc, #96]	; (8001db8 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fc00 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8001d5c:	e028      	b.n	8001db0 <_ZN10IridiumSBD10enable9603Eb+0x70>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 fe9d 	bl	8002a9e <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00b      	beq.n	8001d82 <_ZN10IridiumSBD10enable9603Eb+0x42>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 2094 	ldrb.w	r2, [r3, #148]	; 0x94
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
 8001d80:	e00f      	b.n	8001da2 <_ZN10IridiumSBD10enable9603Eb+0x62>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001d88:	b25a      	sxtb	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8001d90:	b25b      	sxtb	r3, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	4013      	ands	r3, r2
 8001d98:	b25b      	sxtb	r3, r3
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  }
  set9603pins(IO_REGISTER); // Update the pins
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001da8:	4619      	mov	r1, r3
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 feb0 	bl	8002b10 <_ZN10IridiumSBD11set9603pinsEh>
}
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	080084f0 	.word	0x080084f0

08001dbc <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7a5b      	ldrb	r3, [r3, #9]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d004      	beq.n	8001dd6 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1a>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001dcc:	4912      	ldr	r1, [pc, #72]	; (8001e18 <_ZN10IridiumSBD18clearRingIndicatorEv+0x5c>)
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 fbc4 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8001dd4:	e01d      	b.n	8001e12 <_ZN10IridiumSBD18clearRingIndicatorEv+0x56>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 fe61 	bl	8002a9e <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001de2:	b25a      	sxtb	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	4013      	ands	r3, r2
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  set9603pins(IO_REGISTER); // Update the pins
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8001e02:	4619      	mov	r1, r3
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fe83 	bl	8002b10 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	080085c0 	.word	0x080085c0

08001e1c <_ZN10IridiumSBD11isConnectedEv>:
}

//Returns true if the I2C device is connected
//Always returns true for serial
boolean IridiumSBD::isConnected()
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7a5b      	ldrb	r3, [r3, #9]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <_ZN10IridiumSBD11isConnectedEv+0x14>
   {
		return true;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e012      	b.n	8001e56 <_ZN10IridiumSBD11isConnectedEv+0x3a>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7a1b      	ldrb	r3, [r3, #8]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	f001 f800 	bl	8002e40 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 f845 	bl	8002ed4 <_ZN7TwoWire15endTransmissionEv>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
   }
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08e      	sub	sp, #56	; 0x38
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8001e68:	4985      	ldr	r1, [pc, #532]	; (8002080 <_ZN10IridiumSBD13internalBeginEv+0x220>)
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fb76 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0f8      	b.n	8002076 <_ZN10IridiumSBD13internalBeginEv+0x216>

   if (!this->useSerial) // If we are using I2C
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	7a5b      	ldrb	r3, [r3, #9]
 8001e88:	f083 0301 	eor.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <_ZN10IridiumSBD13internalBeginEv+0x3e>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fe03 	bl	8002a9e <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 fd2f 	bl	80028fc <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f9f3 	bl	800228c <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

   unsigned long startupTime = 500; //ms
 8001eac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8001eb2:	f001 fc45 	bl	8003740 <HAL_GetTick>
 8001eb6:	6238      	str	r0, [r7, #32]
 8001eb8:	f001 fc42 	bl	8003740 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	bf8c      	ite	hi
 8001ec8:	2301      	movhi	r3, #1
 8001eca:	2300      	movls	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <_ZN10IridiumSBD13internalBeginEv+0x82>
      if (cancelled())
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f9aa 	bl	800222c <_ZN10IridiumSBD9cancelledEv>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0ec      	beq.n	8001eb8 <_ZN10IridiumSBD13internalBeginEv+0x58>
         return ISBD_CANCELLED;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e0c9      	b.n	8002076 <_ZN10IridiumSBD13internalBeginEv+0x216>

   if (this->useSerial) // If we are using Serial
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7a5b      	ldrb	r3, [r3, #9]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <_ZN10IridiumSBD13internalBeginEv+0x90>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fa76 	bl	80023dc <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8001ef0:	f001 fc26 	bl	8003740 <HAL_GetTick>
 8001ef4:	61f8      	str	r0, [r7, #28]
 8001ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001efa:	f083 0301 	eor.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00f      	beq.n	8001f24 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8001f04:	f001 fc1c 	bl	8003740 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	1ad2      	subs	r2, r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	4619      	mov	r1, r3
 8001f14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f18:	fb03 f301 	mul.w	r3, r3, r1
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d201      	bcs.n	8001f24 <_ZN10IridiumSBD13internalBeginEv+0xc4>
 8001f20:	2301      	movs	r3, #1
 8001f22:	e000      	b.n	8001f26 <_ZN10IridiumSBD13internalBeginEv+0xc6>
 8001f24:	2300      	movs	r3, #0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d018      	beq.n	8001f5c <_ZN10IridiumSBD13internalBeginEv+0xfc>
   {
      send(F("AT\r"));
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4955      	ldr	r1, [pc, #340]	; (8002084 <_ZN10IridiumSBD13internalBeginEv+0x224>)
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fa6f 	bl	8002414 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8001f36:	4b54      	ldr	r3, [pc, #336]	; (8002088 <_ZN10IridiumSBD13internalBeginEv+0x228>)
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f8b3 	bl	80020ac <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      if (cancelled())
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f96d 	bl	800222c <_ZN10IridiumSBD9cancelledEv>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ce      	beq.n	8001ef6 <_ZN10IridiumSBD13internalBeginEv+0x96>
         return ISBD_CANCELLED;
 8001f58:	2304      	movs	r3, #4
 8001f5a:	e08c      	b.n	8002076 <_ZN10IridiumSBD13internalBeginEv+0x216>
   }

   if (!modemAlive)
 8001f5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001f60:	f083 0301 	eor.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <_ZN10IridiumSBD13internalBeginEv+0x116>
   {
      diagprint(F("No modem detected.\r\n"));
 8001f6a:	4948      	ldr	r1, [pc, #288]	; (800208c <_ZN10IridiumSBD13internalBeginEv+0x22c>)
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 faf5 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8001f72:	2305      	movs	r3, #5
 8001f74:	e07f      	b.n	8002076 <_ZN10IridiumSBD13internalBeginEv+0x216>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8001f76:	4a46      	ldr	r2, [pc, #280]	; (8002090 <_ZN10IridiumSBD13internalBeginEv+0x230>)
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8001f82:	2300      	movs	r3, #0
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	dc26      	bgt.n	8001fda <_ZN10IridiumSBD13internalBeginEv+0x17a>
   {
      send(strings[i]);
 8001f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001f94:	4413      	add	r3, r2
 8001f96:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fa91 	bl	80024c4 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8001fa2:	4b39      	ldr	r3, [pc, #228]	; (8002088 <_ZN10IridiumSBD13internalBeginEv+0x228>)
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f87d 	bl	80020ac <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f083 0301 	eor.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <_ZN10IridiumSBD13internalBeginEv+0x172>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f934 	bl	800222c <_ZN10IridiumSBD9cancelledEv>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <_ZN10IridiumSBD13internalBeginEv+0x16e>
 8001fca:	2304      	movs	r3, #4
 8001fcc:	e053      	b.n	8002076 <_ZN10IridiumSBD13internalBeginEv+0x216>
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e051      	b.n	8002076 <_ZN10IridiumSBD13internalBeginEv+0x216>
   for (int i=0; i<3; ++i)
 8001fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd8:	e7d5      	b.n	8001f86 <_ZN10IridiumSBD13internalBeginEv+0x126>
   }


   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8001fda:	492e      	ldr	r1, [pc, #184]	; (8002094 <_ZN10IridiumSBD13internalBeginEv+0x234>)
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 fabd 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <_ZN10IridiumSBD13internalBeginEv+0x190>
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <_ZN10IridiumSBD13internalBeginEv+0x238>)
 8001fee:	e000      	b.n	8001ff2 <_ZN10IridiumSBD13internalBeginEv+0x192>
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <_ZN10IridiumSBD13internalBeginEv+0x23c>)
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fab1 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8001ffa:	4929      	ldr	r1, [pc, #164]	; (80020a0 <_ZN10IridiumSBD13internalBeginEv+0x240>)
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 faad 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002008:	2b00      	cmp	r3, #0
 800200a:	d004      	beq.n	8002016 <_ZN10IridiumSBD13internalBeginEv+0x1b6>
 800200c:	2101      	movs	r1, #1
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fdca 	bl	8001ba8 <_ZN10IridiumSBD16enableRingAlertsEb>
 8002014:	e009      	b.n	800202a <_ZN10IridiumSBD13internalBeginEv+0x1ca>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7a5b      	ldrb	r3, [r3, #9]
 800201a:	f083 0301 	eor.w	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <_ZN10IridiumSBD13internalBeginEv+0x1ca>
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fec9 	bl	8001dbc <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <_ZN10IridiumSBD13internalBeginEv+0x1d8>
 8002034:	491b      	ldr	r1, [pc, #108]	; (80020a4 <_ZN10IridiumSBD13internalBeginEv+0x244>)
 8002036:	e000      	b.n	800203a <_ZN10IridiumSBD13internalBeginEv+0x1da>
 8002038:	491b      	ldr	r1, [pc, #108]	; (80020a8 <_ZN10IridiumSBD13internalBeginEv+0x248>)
 800203a:	2301      	movs	r3, #1
 800203c:	2201      	movs	r2, #1
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f9e8 	bl	8002414 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <_ZN10IridiumSBD13internalBeginEv+0x228>)
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2300      	movs	r3, #0
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f82c 	bl	80020ac <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8002054:	4603      	mov	r3, r0
 8002056:	f083 0301 	eor.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <_ZN10IridiumSBD13internalBeginEv+0x214>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f8e3 	bl	800222c <_ZN10IridiumSBD9cancelledEv>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <_ZN10IridiumSBD13internalBeginEv+0x210>
 800206c:	2304      	movs	r3, #4
 800206e:	e002      	b.n	8002076 <_ZN10IridiumSBD13internalBeginEv+0x216>
 8002070:	2303      	movs	r3, #3
 8002072:	e000      	b.n	8002076 <_ZN10IridiumSBD13internalBeginEv+0x216>

   return 20; //TODO debug line
 8002074:	2314      	movs	r3, #20
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
   return ISBD_SUCCESS;
}
 8002076:	4618      	mov	r0, r3
 8002078:	3730      	adds	r7, #48	; 0x30
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	080086e0 	.word	0x080086e0
 8002084:	080086f8 	.word	0x080086f8
 8002088:	080083e0 	.word	0x080083e0
 800208c:	080086fc 	.word	0x080086fc
 8002090:	0800875c 	.word	0x0800875c
 8002094:	08008714 	.word	0x08008714
 8002098:	08008724 	.word	0x08008724
 800209c:	08008728 	.word	0x08008728
 80020a0:	08008730 	.word	0x08008730
 80020a4:	0800873c 	.word	0x0800873c
 80020a8:	0800874c 	.word	0x0800874c

080020ac <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 80020ba:	4959      	ldr	r1, [pc, #356]	; (8002220 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>)
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 fa4d 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 80020c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fa63 	bl	8002590 <_ZN10IridiumSBD9diagprintEPKc>
   diagprint(F("\r\n"));
 80020ca:	4956      	ldr	r1, [pc, #344]	; (8002224 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x178>)
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 fa45 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x38>
      memset(response, 0, responseSize);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	461a      	mov	r2, r3
 80020dc:	2100      	movs	r1, #0
 80020de:	68b8      	ldr	r0, [r7, #8]
 80020e0:	f003 fb6e 	bl	80057c0 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 80020e8:	2300      	movs	r3, #0
 80020ea:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x4a>
 80020f2:	2300      	movs	r3, #0
 80020f4:	e000      	b.n	80020f8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x4c>
 80020f6:	2302      	movs	r3, #2
 80020f8:	61fb      	str	r3, [r7, #28]
   consoleprint(F("<< "));
 80020fa:	494b      	ldr	r1, [pc, #300]	; (8002228 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>)
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fa5d 	bl	80025bc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8002102:	f001 fb1d 	bl	8003740 <HAL_GetTick>
 8002106:	61b8      	str	r0, [r7, #24]
 8002108:	f001 fb1a 	bl	8003740 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	1ad2      	subs	r2, r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	4619      	mov	r1, r3
 8002118:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800211c:	fb03 f301 	mul.w	r3, r3, r1
 8002120:	429a      	cmp	r2, r3
 8002122:	bf34      	ite	cc
 8002124:	2301      	movcc	r3, #1
 8002126:	2300      	movcs	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d072      	beq.n	8002214 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x168>
   {
      if (cancelled())
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f87c 	bl	800222c <_ZN10IridiumSBD9cancelledEv>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         return false;
 800213a:	2300      	movs	r3, #0
 800213c:	e06b      	b.n	8002216 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>

      while (filteredavailable() > 0)
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 fb7a 	bl	8002838 <_ZN10IridiumSBD17filteredavailableEv>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	bfcc      	ite	gt
 800214a:	2301      	movgt	r3, #1
 800214c:	2300      	movle	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0d9      	beq.n	8002108 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x5c>
      {
         char c = filteredread();
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fb8b 	bl	8002870 <_ZN10IridiumSBD12filteredreadEv>
 800215a:	4603      	mov	r3, r0
 800215c:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d03b      	beq.n	80021dc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
         {
            switch (promptState)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xc6>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d01d      	beq.n	80021ac <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x100>
 8002170:	e034      	b.n	80021dc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	7dfa      	ldrb	r2, [r7, #23]
 800217c:	429a      	cmp	r2, r3
 800217e:	d10b      	bne.n	8002198 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xec>
               {
                  ++matchPromptPos;
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	3301      	adds	r3, #1
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d121      	bne.n	80021d6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                     promptState = GATHERING_RESPONSE;
 8002192:	2301      	movs	r3, #1
 8002194:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8002196:	e01e      	b.n	80021d6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	7dfa      	ldrb	r2, [r7, #23]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d101      	bne.n	80021a6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfa>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfc>
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 80021aa:	e014      	b.n	80021d6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d013      	beq.n	80021da <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               {
                  if (c == '\r' || responseSize < 2)
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
 80021b4:	2b0d      	cmp	r3, #13
 80021b6:	d002      	beq.n	80021be <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	dc02      	bgt.n	80021c4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x118>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 80021be:	2302      	movs	r3, #2
 80021c0:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 80021c2:	e00a      	b.n	80021da <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
                     *response++ = c;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	60ba      	str	r2, [r7, #8]
 80021ca:	7dfa      	ldrb	r2, [r7, #23]
 80021cc:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	607b      	str	r3, [r7, #4]
               break;
 80021d4:	e001      	b.n	80021da <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12e>
               break;
 80021d6:	bf00      	nop
 80021d8:	e000      	b.n	80021dc <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
               break;
 80021da:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021e0:	4413      	add	r3, r2
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	7dfa      	ldrb	r2, [r7, #23]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d10a      	bne.n	8002200 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x154>
         {
            ++matchTerminatorPos;
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	3301      	adds	r3, #1
 80021ee:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021f4:	4413      	add	r3, r2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1a0      	bne.n	800213e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
               return true;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e00a      	b.n	8002216 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	7dfa      	ldrb	r2, [r7, #23]
 8002206:	429a      	cmp	r2, r3
 8002208:	d101      	bne.n	800220e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x162>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x164>
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8002212:	e794      	b.n	800213e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x92>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3728      	adds	r7, #40	; 0x28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	080088a4 	.word	0x080088a4
 8002224:	080087d0 	.word	0x080087d0
 8002228:	080088bc 	.word	0x080088bc

0800222c <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7a5b      	ldrb	r3, [r3, #9]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d018      	beq.n	800226e <_ZN10IridiumSBD9cancelledEv+0x42>
   {
	   //For some reason when using digitalRead here it didn't work so simply replaced with HAL function
      if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d008      	beq.n	8002258 <_ZN10IridiumSBD9cancelledEv+0x2c>
 8002246:	2110      	movs	r1, #16
 8002248:	480e      	ldr	r0, [pc, #56]	; (8002284 <_ZN10IridiumSBD9cancelledEv+0x58>)
 800224a:	f001 fd51 	bl	8003cf0 <HAL_GPIO_ReadPin>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <_ZN10IridiumSBD9cancelledEv+0x2c>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <_ZN10IridiumSBD9cancelledEv+0x2e>
 8002258:	2300      	movs	r3, #0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <_ZN10IridiumSBD9cancelledEv+0x42>
	  {
         ringAsserted = true;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		 diagprint(F("ringPin seen!\r\n"));
 8002266:	4908      	ldr	r1, [pc, #32]	; (8002288 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f977 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 800226e:	f7ff fc20 	bl	8001ab2 <_Z12ISBDCallbackv>
 8002272:	4603      	mov	r3, r0
 8002274:	f083 0301 	eor.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40020800 	.word	0x40020800
 8002288:	080088c0 	.word	0x080088c0

0800228c <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	f083 0301 	eor.w	r3, r3, #1
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

   if (this->useSerial)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7a5b      	ldrb	r3, [r3, #9]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d010      	beq.n	80022d0 <_ZN10IridiumSBD5powerEb+0x44>
   {
      if (this->sleepPin == -1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b6:	d04a      	beq.n	800234e <_ZN10IridiumSBD5powerEb+0xc2>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <_ZN10IridiumSBD5powerEb+0x44>
          {
        	  //TODO
             configureSleepPin();
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f84c 	bl	8002360 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          }
      }
   }

   if (on)
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d017      	beq.n	8002306 <_ZN10IridiumSBD5powerEb+0x7a>
   {
      diagprint(F("Powering on modem...\r\n"));
 80022d6:	4920      	ldr	r1, [pc, #128]	; (8002358 <_ZN10IridiumSBD5powerEb+0xcc>)
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f93f 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7a5b      	ldrb	r3, [r3, #9]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <_ZN10IridiumSBD5powerEb+0x64>
      {
         setSleepPin(HIGH); // HIGH = awake
 80022e6:	2101      	movs	r1, #1
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f84f 	bl	800238c <_ZN10IridiumSBD11setSleepPinEh>
 80022ee:	e003      	b.n	80022f8 <_ZN10IridiumSBD5powerEb+0x6c>
      }
      else
      {
         enable9603(true);
 80022f0:	2101      	movs	r1, #1
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fd24 	bl	8001d40 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 80022f8:	f001 fa22 	bl	8003740 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002304:	e024      	b.n	8002350 <_ZN10IridiumSBD5powerEb+0xc4>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8002306:	f001 fa1b 	bl	8003740 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800231c:	d205      	bcs.n	800232a <_ZN10IridiumSBD5powerEb+0x9e>
         HAL_Delay(2000UL - elapsed);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8002324:	4618      	mov	r0, r3
 8002326:	f001 fa17 	bl	8003758 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 800232a:	490c      	ldr	r1, [pc, #48]	; (800235c <_ZN10IridiumSBD5powerEb+0xd0>)
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f915 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7a5b      	ldrb	r3, [r3, #9]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <_ZN10IridiumSBD5powerEb+0xb8>
      {
         setSleepPin(LOW); // LOW = asleep
 800233a:	2100      	movs	r1, #0
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f825 	bl	800238c <_ZN10IridiumSBD11setSleepPinEh>
 8002342:	e005      	b.n	8002350 <_ZN10IridiumSBD5powerEb+0xc4>
      }
      else
      {
         enable9603(false);
 8002344:	2100      	movs	r1, #0
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fcfa 	bl	8001d40 <_ZN10IridiumSBD10enable9603Eb>
 800234c:	e000      	b.n	8002350 <_ZN10IridiumSBD5powerEb+0xc4>
         return;
 800234e:	bf00      	nop
      }
   }
}
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	08008914 	.word	0x08008914
 800235c:	0800892c 	.word	0x0800892c

08002360 <_ZN10IridiumSBD17configureSleepPinEv>:


void IridiumSBD::configureSleepPin()
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
   //pinMode(this->sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
	pinMode(sleepPin, OUTPUT_PP);
 8002368:	2200      	movs	r2, #0
 800236a:	2108      	movs	r1, #8
 800236c:	4805      	ldr	r0, [pc, #20]	; (8002384 <_ZN10IridiumSBD17configureSleepPinEv+0x24>)
 800236e:	f7ff fbc0 	bl	8001af2 <_Z10st_pinModeP12GPIO_TypeDefhi>
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8002372:	4905      	ldr	r1, [pc, #20]	; (8002388 <_ZN10IridiumSBD17configureSleepPinEv+0x28>)
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f8f1 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40020800 	.word	0x40020800
 8002388:	08008944 	.word	0x08008944

0800238c <_ZN10IridiumSBD11setSleepPinEh>:


void IridiumSBD::setSleepPin(uint8_t enable)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8002398:	2201      	movs	r2, #1
 800239a:	2108      	movs	r1, #8
 800239c:	480b      	ldr	r0, [pc, #44]	; (80023cc <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 800239e:	f001 fcbf 	bl	8003d20 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 80023a2:	490b      	ldr	r1, [pc, #44]	; (80023d0 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f8d9 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d104      	bne.n	80023ba <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 80023b0:	4908      	ldr	r1, [pc, #32]	; (80023d4 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 f8d2 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 80023b8:	e003      	b.n	80023c2 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 80023ba:	4907      	ldr	r1, [pc, #28]	; (80023d8 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f8cd 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40020800 	.word	0x40020800
 80023d0:	08008970 	.word	0x08008970
 80023d4:	0800898c 	.word	0x0800898c
 80023d8:	08008994 	.word	0x08008994

080023dc <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 80023e4:	4903      	ldr	r1, [pc, #12]	; (80023f4 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f8b8 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	0800899c 	.word	0x0800899c

080023f8 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8002400:	4903      	ldr	r1, [pc, #12]	; (8002410 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f8aa 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	080089bc 	.word	0x080089bc

08002414 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	4611      	mov	r1, r2
 8002420:	461a      	mov	r2, r3
 8002422:	460b      	mov	r3, r1
 8002424:	71fb      	strb	r3, [r7, #7]
 8002426:	4613      	mov	r3, r2
 8002428:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8002430:	4921      	ldr	r1, [pc, #132]	; (80024b8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa4>)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f8c2 	bl	80025bc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f8be 	bl	80025bc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8002440:	79bb      	ldrb	r3, [r7, #6]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 8002446:	491d      	ldr	r1, [pc, #116]	; (80024bc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f8b7 	bl	80025bc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	7a5b      	ldrb	r3, [r3, #9]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d006      	beq.n	8002464 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x50>
   {
      stream->print(str);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fc22 	bl	8002ca6 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8002462:	e024      	b.n	80024ae <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9a>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	7a1b      	ldrb	r3, [r3, #8]
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f000 fce6 	bl	8002e40 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	21ff      	movs	r1, #255	; 0xff
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fb07 	bl	8001a8e <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	68b9      	ldr	r1, [r7, #8]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fc0d 	bl	8002ca6 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fd1f 	bl	8002ed4 <_ZN7TwoWire15endTransmissionEv>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	bf14      	ite	ne
 800249c:	2301      	movne	r3, #1
 800249e:	2300      	moveq	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9a>
         diagprint(F("I2C write was not successful!\r\n"));
 80024a6:	4906      	ldr	r1, [pc, #24]	; (80024c0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f857 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	080089d8 	.word	0x080089d8
 80024bc:	080087d0 	.word	0x080087d0
 80024c0:	08008798 	.word	0x08008798

080024c4 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 80024ce:	4920      	ldr	r1, [pc, #128]	; (8002550 <_ZN10IridiumSBD4sendEPKc+0x8c>)
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f873 	bl	80025bc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 80024d6:	6839      	ldr	r1, [r7, #0]
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f889 	bl	80025f0 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 80024de:	491d      	ldr	r1, [pc, #116]	; (8002554 <_ZN10IridiumSBD4sendEPKc+0x90>)
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f86b 	bl	80025bc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7a5b      	ldrb	r3, [r3, #9]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <_ZN10IridiumSBD4sendEPKc+0x38>
   {
      stream->print(str);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6839      	ldr	r1, [r7, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 fbe4 	bl	8002cc2 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80024fa:	e024      	b.n	8002546 <_ZN10IridiumSBD4sendEPKc+0x82>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7a1b      	ldrb	r3, [r3, #8]
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f000 fc9a 	bl	8002e40 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	21ff      	movs	r1, #255	; 0xff
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fabb 	bl	8001a8e <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	6839      	ldr	r1, [r7, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f000 fbcf 	bl	8002cc2 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fcd3 	bl	8002ed4 <_ZN7TwoWire15endTransmissionEv>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <_ZN10IridiumSBD4sendEPKc+0x82>
         diagprint(F("I2C write was not successful!\r\n"));
 800253e:	4906      	ldr	r1, [pc, #24]	; (8002558 <_ZN10IridiumSBD4sendEPKc+0x94>)
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f80b 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	080089d8 	.word	0x080089d8
 8002554:	080087d0 	.word	0x080087d0
 8002558:	08008798 	.word	0x08008798

0800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	60fa      	str	r2, [r7, #12]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8002574:	7afb      	ldrb	r3, [r7, #11]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 800257a:	7afb      	ldrb	r3, [r7, #11]
 800257c:	4619      	mov	r1, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff faab 	bl	8001ada <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8002584:	e7f1      	b.n	800256a <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8002586:	bf00      	nop
}
 8002588:	bf00      	nop
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
   while (*str)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d008      	beq.n	80025b4 <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	603a      	str	r2, [r7, #0]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	4619      	mov	r1, r3
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f7ff fa94 	bl	8001ada <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 80025b2:	e7f2      	b.n	800259a <_ZN10IridiumSBD9diagprintEPKc+0xa>
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   sprintf(str, "%u", n);
   diagprint(str);
}

void IridiumSBD::consoleprint(FlashString str)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	60fa      	str	r2, [r7, #12]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80025d4:	7afb      	ldrb	r3, [r7, #11]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 80025da:	7afb      	ldrb	r3, [r7, #11]
 80025dc:	4619      	mov	r1, r3
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff fa6f 	bl	8001ac2 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 80025e4:	e7f1      	b.n	80025ca <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80025e6:	bf00      	nop
}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
   while (*str)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d008      	beq.n	8002614 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	603a      	str	r2, [r7, #0]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff fa58 	bl	8001ac2 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 8002612:	e7f2      	b.n	80025fa <_ZN10IridiumSBD12consoleprintEPKc+0xa>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <_ZN10IridiumSBD12consoleprintEc>:
   sprintf(str, "%u", n);
   consoleprint(str);
}

void IridiumSBD::consoleprint(char c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	4619      	mov	r1, r3
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff fa48 	bl	8001ac2 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
   diagprint(F("SBDRING alert seen!\r\n"));
 800264c:	4903      	ldr	r1, [pc, #12]	; (800265c <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ff84 	bl	800255c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	080089e0 	.word	0x080089e0

08002660 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7a5b      	ldrb	r3, [r3, #9]
 800266c:	f083 0301 	eor.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f940 	bl	80028fc <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7a5b      	ldrb	r3, [r3, #9]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <_ZN10IridiumSBD13filterSBDRINGEv+0x3c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3308      	adds	r3, #8
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4610      	mov	r0, r2
 8002694:	4798      	blx	r3
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	dc0c      	bgt.n	80026b6 <_ZN10IridiumSBD13filterSBDRINGEv+0x56>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7a5b      	ldrb	r3, [r3, #9]
 80026a0:	f083 0301 	eor.w	r3, r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00d      	beq.n	80026c6 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fa56 	bl	8002b5c <_ZN10IridiumSBD15i2cSerAvailableEv>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	dd07      	ble.n	80026c6 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d101      	bne.n	80026c6 <_ZN10IridiumSBD13filterSBDRINGEv+0x66>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <_ZN10IridiumSBD13filterSBDRINGEv+0x68>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 80af 	beq.w	800282c <_ZN10IridiumSBD13filterSBDRINGEv+0x1cc>
   {
      char c;
      if (this->useSerial)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	7a5b      	ldrb	r3, [r3, #9]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00b      	beq.n	80026ee <_ZN10IridiumSBD13filterSBDRINGEv+0x8e>
      {
         c = stream->read();
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4610      	mov	r0, r2
 80026e6:	4798      	blx	r3
 80026e8:	4603      	mov	r3, r0
 80026ea:	73fb      	strb	r3, [r7, #15]
 80026ec:	e004      	b.n	80026f8 <_ZN10IridiumSBD13filterSBDRINGEv+0x98>
      }
      else
      {
         c = i2cSerRead();
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fa4c 	bl	8002b8c <_ZN10IridiumSBD10i2cSerReadEv>
 80026f4:	4603      	mov	r3, r0
 80026f6:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff ff8d 	bl	800261c <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8087 	beq.w	800281e <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	429a      	cmp	r2, r3
 800271c:	d17f      	bne.n	800281e <_ZN10IridiumSBD13filterSBDRINGEv+0x1be>
      {
         ++head;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
         if (*head == 0)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10d      	bne.n	8002754 <_ZN10IridiumSBD13filterSBDRINGEv+0xf4>
         {
            SBDRINGSeen();
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ff7f 	bl	800263c <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a3c      	ldr	r2, [pc, #240]	; (8002834 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d4>)
 8002742:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 8002752:	e069      	b.n	8002828 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 8002754:	f000 fff4 	bl	8003740 <HAL_GetTick>
 8002758:	60b8      	str	r0, [r7, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	7a5b      	ldrb	r3, [r3, #9]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <_ZN10IridiumSBD13filterSBDRINGEv+0x11a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3308      	adds	r3, #8
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4610      	mov	r0, r2
 8002772:	4798      	blx	r3
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00c      	beq.n	8002794 <_ZN10IridiumSBD13filterSBDRINGEv+0x134>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	7a5b      	ldrb	r3, [r3, #9]
 800277e:	f083 0301 	eor.w	r3, r3, #1
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00e      	beq.n	80027a6 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f9e7 	bl	8002b5c <_ZN10IridiumSBD15i2cSerAvailableEv>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d108      	bne.n	80027a6 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 8002794:	f000 ffd4 	bl	8003740 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b09      	cmp	r3, #9
 80027a0:	d801      	bhi.n	80027a6 <_ZN10IridiumSBD13filterSBDRINGEv+0x146>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <_ZN10IridiumSBD13filterSBDRINGEv+0x148>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d000      	beq.n	80027ae <_ZN10IridiumSBD13filterSBDRINGEv+0x14e>
 80027ac:	e7d5      	b.n	800275a <_ZN10IridiumSBD13filterSBDRINGEv+0xfa>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	7a5b      	ldrb	r3, [r3, #9]
 80027b2:	f083 0301 	eor.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <_ZN10IridiumSBD13filterSBDRINGEv+0x162>
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f89d 	bl	80028fc <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7a5b      	ldrb	r3, [r3, #9]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00b      	beq.n	80027e2 <_ZN10IridiumSBD13filterSBDRINGEv+0x182>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3308      	adds	r3, #8
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4610      	mov	r0, r2
 80027da:	4798      	blx	r3
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00c      	beq.n	80027fc <_ZN10IridiumSBD13filterSBDRINGEv+0x19c>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7a5b      	ldrb	r3, [r3, #9]
 80027e6:	f083 0301 	eor.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f9b3 	bl	8002b5c <_ZN10IridiumSBD15i2cSerAvailableEv>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a0>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <_ZN10IridiumSBD13filterSBDRINGEv+0x1a2>
 8002800:	2300      	movs	r3, #0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d010      	beq.n	8002828 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
               --head;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	1e5a      	subs	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
               nextChar = c;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
         }
 800281c:	e004      	b.n	8002828 <_ZN10IridiumSBD13filterSBDRINGEv+0x1c8>
      }
      else
      {
         nextChar = c;
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002826:	e729      	b.n	800267c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
         }
 8002828:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800282a:	e727      	b.n	800267c <_ZN10IridiumSBD13filterSBDRINGEv+0x1c>
      }
   }
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	08008a78 	.word	0x08008a78

08002838 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ff0d 	bl	8002660 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800285a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800285e:	d001      	beq.n	8002864 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8002860:	2201      	movs	r2, #1
 8002862:	e000      	b.n	8002866 <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8002864:	2200      	movs	r2, #0
 8002866:	4413      	add	r3, r2
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fef1 	bl	8002660 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800288a:	429a      	cmp	r2, r3
 800288c:	d91c      	bls.n	80028c8 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002894:	1c59      	adds	r1, r3, #1
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d109      	bne.n	80028c4 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a11      	ldr	r2, [pc, #68]	; (80028f8 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 80028b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return c;
 80028c4:	7bbb      	ldrb	r3, [r7, #14]
 80028c6:	e012      	b.n	80028ee <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d00a      	beq.n	80028ea <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f04f 32ff 	mov.w	r2, #4294967295
 80028e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      return c;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	e001      	b.n	80028ee <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	08008a78 	.word	0x08008a78

080028fc <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 8002904:	f000 ff1c 	bl	8003740 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8002916:	4293      	cmp	r3, r2
 8002918:	bf2c      	ite	cs
 800291a:	2301      	movcs	r3, #1
 800291c:	2300      	movcc	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80b8 	beq.w	8002a96 <_ZN10IridiumSBD13check9603dataEv+0x19a>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7a1b      	ldrb	r3, [r3, #8]
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f000 fa83 	bl	8002e40 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	21fd      	movs	r1, #253	; 0xfd
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff f8a4 	bl	8001a8e <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4618      	mov	r0, r3
 800294c:	f000 fac2 	bl	8002ed4 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6858      	ldr	r0, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7a1b      	ldrb	r3, [r3, #8]
 8002958:	2202      	movs	r2, #2
 800295a:	4619      	mov	r1, r3
 800295c:	f000 fa5d 	bl	8002e1a <_ZN7TwoWire11requestFromEhh>
 8002960:	4603      	mov	r3, r0
 8002962:	2b02      	cmp	r3, #2
 8002964:	bf0c      	ite	eq
 8002966:	2301      	moveq	r3, #1
 8002968:	2300      	movne	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01d      	beq.n	80029ac <_ZN10IridiumSBD13check9603dataEv+0xb0>
    {
      uint8_t msb = wireport->read();
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4610      	mov	r0, r2
 8002980:	4798      	blx	r3
 8002982:	4603      	mov	r3, r0
 8002984:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4610      	mov	r0, r2
 8002996:	4798      	blx	r3
 8002998:	4603      	mov	r3, r0
 800299a:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 800299c:	7b7b      	ldrb	r3, [r7, #13]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	b21a      	sxth	r2, r3
 80029a2:	7b3b      	ldrb	r3, [r7, #12]
 80029a4:	b21b      	sxth	r3, r3
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 80029ac:	89fb      	ldrh	r3, [r7, #14]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d06c      	beq.n	8002a8c <_ZN10IridiumSBD13check9603dataEv+0x190>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	7a1b      	ldrb	r3, [r3, #8]
 80029ba:	4619      	mov	r1, r3
 80029bc:	4610      	mov	r0, r2
 80029be:	f000 fa3f 	bl	8002e40 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	21ff      	movs	r1, #255	; 0xff
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f860 	bl	8001a8e <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fa7e 	bl	8002ed4 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 80029d8:	89fb      	ldrh	r3, [r7, #14]
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d92c      	bls.n	8002a38 <_ZN10IridiumSBD13check9603dataEv+0x13c>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6858      	ldr	r0, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7a19      	ldrb	r1, [r3, #8]
 80029e6:	2300      	movs	r3, #0
 80029e8:	2208      	movs	r2, #8
 80029ea:	f000 f9db 	bl	8002da4 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3308      	adds	r3, #8
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4610      	mov	r0, r2
 80029fe:	4798      	blx	r3
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bf14      	ite	ne
 8002a06:	2301      	movne	r3, #1
 8002a08:	2300      	moveq	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00f      	beq.n	8002a30 <_ZN10IridiumSBD13check9603dataEv+0x134>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4798      	blx	r3
 8002a22:	4603      	mov	r3, r0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	4619      	mov	r1, r3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f8d5 	bl	8002bd8 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8002a2e:	e7de      	b.n	80029ee <_ZN10IridiumSBD13check9603dataEv+0xf2>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8002a30:	89fb      	ldrh	r3, [r7, #14]
 8002a32:	3b08      	subs	r3, #8
 8002a34:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8002a36:	e7cf      	b.n	80029d8 <_ZN10IridiumSBD13check9603dataEv+0xdc>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6858      	ldr	r0, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	7a1b      	ldrb	r3, [r3, #8]
 8002a40:	89fa      	ldrh	r2, [r7, #14]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	f000 f9e8 	bl	8002e1a <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3308      	adds	r3, #8
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4798      	blx	r3
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00f      	beq.n	8002a8c <_ZN10IridiumSBD13check9603dataEv+0x190>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	330c      	adds	r3, #12
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4798      	blx	r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f8a7 	bl	8002bd8 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8002a8a:	e7de      	b.n	8002a4a <_ZN10IridiumSBD13check9603dataEv+0x14e>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8002a8c:	f000 fe58 	bl	8003740 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	7a1b      	ldrb	r3, [r3, #8]
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	f000 f9c5 	bl	8002e40 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2110      	movs	r1, #16
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe ffe6 	bl	8001a8e <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fa04 	bl	8002ed4 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6858      	ldr	r0, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7a1b      	ldrb	r3, [r3, #8]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f000 f99f 	bl	8002e1a <_ZN7TwoWire11requestFromEhh>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	bf0c      	ite	eq
 8002ae2:	2301      	moveq	r3, #1
 8002ae4:	2300      	movne	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00d      	beq.n	8002b08 <_ZN10IridiumSBD13check9603pinsEv+0x6a>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	330c      	adds	r3, #12
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4610      	mov	r0, r2
 8002afc:	4798      	blx	r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	7a1b      	ldrb	r3, [r3, #8]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	f000 f98a 	bl	8002e40 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2110      	movs	r1, #16
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe ffab 	bl	8001a8e <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	78f9      	ldrb	r1, [r7, #3]
 8002b46:	4610      	mov	r0, r2
 8002b48:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f9c0 	bl	8002ed4 <_ZN7TwoWire15endTransmissionEv>
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	425a      	negs	r2, r3
 8002b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b78:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002b7c:	bf58      	it	pl
 8002b7e:	4253      	negpl	r3, r2
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d102      	bne.n	8002ba6 <_ZN10IridiumSBD10i2cSerReadEv+0x1a>
    return -1;
 8002ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba4:	e012      	b.n	8002bcc <_ZN10IridiumSBD10i2cSerReadEv+0x40>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	4413      	add	r3, r2
 8002bae:	7a9b      	ldrb	r3, [r3, #10]
 8002bb0:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	425a      	negs	r2, r3
 8002bba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bbe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002bc2:	bf58      	it	pl
 8002bc4:	4253      	negpl	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6513      	str	r3, [r2, #80]	; 0x50
  return d;
 8002bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	3301      	adds	r3, #1
 8002bea:	425a      	negs	r2, r3
 8002bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002bf4:	bf58      	it	pl
 8002bf6:	4253      	negpl	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d008      	beq.n	8002c16 <_ZN10IridiumSBD10i2cSerPokeEc+0x3e>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	729a      	strb	r2, [r3, #10]
    i2c_ser_buffer_tail = next;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	64da      	str	r2, [r3, #76]	; 0x4c
  }
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8002c22:	b590      	push	{r4, r7, lr}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <_ZN5Print5writeEPKc+0x14>
 8002c32:	2300      	movs	r3, #0
 8002c34:	e00d      	b.n	8002c52 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	681c      	ldr	r4, [r3, #0]
 8002c3e:	6838      	ldr	r0, [r7, #0]
 8002c40:	f7fd fae6 	bl	8000210 <strlen>
 8002c44:	4603      	mov	r3, r0
 8002c46:	461a      	mov	r2, r3
 8002c48:	6839      	ldr	r1, [r7, #0]
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	47a0      	blx	r4
 8002c4e:	4603      	mov	r3, r0
 8002c50:	bf00      	nop
    }
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd90      	pop	{r4, r7, pc}

08002c5a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
  while (size--) {
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	1e5a      	subs	r2, r3, #1
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00e      	beq.n	8002c9c <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	1c59      	adds	r1, r3, #1
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	4790      	blx	r2
 8002c92:	4602      	mov	r2, r0
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	4413      	add	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  while (size--) {
 8002c9a:	e7e6      	b.n	8002c6a <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8002c9c:	697b      	ldr	r3, [r7, #20]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 8002cb0:	6839      	ldr	r1, [r7, #0]
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f805 	bl	8002cc2 <_ZN5Print5printEPKc>
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
  return write(str);
 8002ccc:	6839      	ldr	r1, [r7, #0]
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff ffa7 	bl	8002c22 <_ZN5Print5writeEPKc>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <_ZN5PrintC1Ev+0x24>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	08008a8c 	.word	0x08008a8c

08002d08 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ffe4 	bl	8002ce0 <_ZN5PrintC1Ev>
 8002d18:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <_ZN6StreamC1Ev+0x28>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d24:	609a      	str	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	08008abc 	.word	0x08008abc

08002d34 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ffe1 	bl	8002d08 <_ZN6StreamC1Ev>
 8002d46:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3390      	adds	r3, #144	; 0x90
 8002d56:	2220      	movs	r2, #32
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f002 fd30 	bl	80057c0 <memset>
  rxBufferIndex = 0;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	08008a9c 	.word	0x08008a9c

08002da4 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	4608      	mov	r0, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	70fb      	strb	r3, [r7, #3]
 8002db6:	460b      	mov	r3, r1
 8002db8:	70bb      	strb	r3, [r7, #2]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fc24 	bl	800360c <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8002dc4:	78bb      	ldrb	r3, [r7, #2]
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d901      	bls.n	8002dce <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 8002dca:	2320      	movs	r3, #32
 8002dcc:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	b2d9      	uxtb	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8002dda:	78b8      	ldrb	r0, [r7, #2]
 8002ddc:	787b      	ldrb	r3, [r7, #1]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	4603      	mov	r3, r0
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9cf 	bl	8003186 <_ZN7TwoWire15i2c_master_readEhPchh>
 8002de8:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	da02      	bge.n	8002df6 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e001      	b.n	8002dfa <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fbcc 	bl	80035a8 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70fb      	strb	r3, [r7, #3]
 8002e26:	4613      	mov	r3, r2
 8002e28:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8002e2a:	78ba      	ldrb	r2, [r7, #2]
 8002e2c:	78f9      	ldrb	r1, [r7, #3]
 8002e2e:	2301      	movs	r3, #1
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ffb7 	bl	8002da4 <_ZN7TwoWire11requestFromEhhh>
 8002e36:	4603      	mov	r3, r0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af02      	add	r7, sp, #8
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fbc2 	bl	800360c <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7c1b      	ldrb	r3, [r3, #16]
 8002e8c:	0059      	lsls	r1, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f103 0211 	add.w	r2, r3, #17
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fa00 	bl	80032a8 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fb6f 	bl	80035a8 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 8002edc:	2101      	movs	r1, #1
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff ffc9 	bl	8002e76 <_ZN7TwoWire15endTransmissionEh>
 8002ee4:	4603      	mov	r3, r0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01d      	beq.n	8002f40 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002f0a:	2b1f      	cmp	r3, #31
 8002f0c:	d901      	bls.n	8002f12 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e028      	b.n	8002f64 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f18:	4619      	mov	r1, r3
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	440b      	add	r3, r1
 8002f20:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002f28:	3301      	adds	r3, #1
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8002f3e:	e010      	b.n	8002f62 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fb63 	bl	800360c <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8002f46:	1cfb      	adds	r3, r7, #3
 8002f48:	2201      	movs	r2, #1
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fa95 	bl	800347c <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fb28 	bl	80035a8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	333c      	adds	r3, #60	; 0x3c
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 f83d 	bl	8003fdc <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8002f62:	2301      	movs	r3, #1
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d013      	beq.n	8002faa <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d21e      	bcs.n	8002fcc <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	440a      	add	r2, r1
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e7ed      	b.n	8002f86 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fb2e 	bl	800360c <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fa60 	bl	800347c <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 faf3 	bl	80035a8 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	333c      	adds	r3, #60	; 0x3c
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f001 f808 	bl	8003fdc <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8002fcc:	687b      	ldr	r3, [r7, #4]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	1ad3      	subs	r3, r2, r3
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b085      	sub	sp, #20
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  int value = -1;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003012:	b2da      	uxtb	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	429a      	cmp	r2, r3
 800301e:	bf34      	ite	cc
 8003020:	2301      	movcc	r3, #1
 8003022:	2300      	movcs	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d012      	beq.n	8003050 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800303c:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	3301      	adds	r3, #1
 8003048:	b2da      	uxtb	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8003050:	68fb      	ldr	r3, [r7, #12]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 800305e:	b480      	push	{r7}
 8003060:	b085      	sub	sp, #20
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  int value = -1;
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003072:	b2da      	uxtb	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	429a      	cmp	r2, r3
 800307e:	bf34      	ite	cc
 8003080:	2301      	movcc	r3, #1
 8003082:	2300      	movcs	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4413      	add	r3, r2
 8003098:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800309c:	60fb      	str	r3, [r7, #12]
  }

  return value;
 800309e:	68fb      	ldr	r3, [r7, #12]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030cc:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030d6:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 80030d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030dc:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1e5a      	subs	r2, r3, #1
 80030fa:	60fa      	str	r2, [r7, #12]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0e9      	beq.n	80030de <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 800310a:	2301      	movs	r3, #1
 800310c:	e021      	b.n	8003152 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 800311a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800311e:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b01      	cmp	r3, #1
 800312c:	bf14      	ite	ne
 800312e:	2301      	movne	r3, #1
 8003130:	2300      	moveq	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00b      	beq.n	8003150 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1e5a      	subs	r2, r3, #1
 800313c:	60fa      	str	r2, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d0e9      	beq.n	8003120 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 800314c:	2301      	movs	r3, #1
 800314e:	e000      	b.n	8003152 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	601a      	str	r2, [r3, #0]

    return 0;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b08a      	sub	sp, #40	; 0x28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	461a      	mov	r2, r3
 8003192:	460b      	mov	r3, r1
 8003194:	72fb      	strb	r3, [r7, #11]
 8003196:	4613      	mov	r3, r2
 8003198:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff ff8d 	bl	80030c0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80031a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	bf14      	ite	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	2300      	moveq	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	3b01      	subs	r3, #1
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1ed      	bne.n	80031ac <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295
 80031d4:	e064      	b.n	80032a0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 80031d6:	7afb      	ldrb	r3, [r7, #11]
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80031e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	3b01      	subs	r3, #1
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1ed      	bne.n	80031ea <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	e045      	b.n	80032a0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]
 800322e:	7abb      	ldrb	r3, [r7, #10]
 8003230:	3b01      	subs	r3, #1
 8003232:	6a3a      	ldr	r2, [r7, #32]
 8003234:	429a      	cmp	r2, r3
 8003236:	da17      	bge.n	8003268 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	2200      	movs	r2, #0
 800323e:	4619      	mov	r1, r3
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f8a4 	bl	800338e <_ZN7TwoWire20i2c_master_byte_readEPii>
 8003246:	61b8      	str	r0, [r7, #24]
        if(ret)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295
 8003252:	e025      	b.n	80032a0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8003254:	6979      	ldr	r1, [r7, #20]
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4413      	add	r3, r2
 800325c:	b2ca      	uxtb	r2, r1
 800325e:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	3301      	adds	r3, #1
 8003264:	623b      	str	r3, [r7, #32]
 8003266:	e7e2      	b.n	800322e <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8003268:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800326c:	2b00      	cmp	r3, #0
 800326e:	d002      	beq.n	8003276 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7ff ff74 	bl	800315e <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8003276:	f107 0314 	add.w	r3, r7, #20
 800327a:	2201      	movs	r2, #1
 800327c:	4619      	mov	r1, r3
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f000 f885 	bl	800338e <_ZN7TwoWire20i2c_master_byte_readEPii>
 8003284:	61b8      	str	r0, [r7, #24]
    if(ret)
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 800328c:	f04f 33ff 	mov.w	r3, #4294967295
 8003290:	e006      	b.n	80032a0 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8003292:	6979      	ldr	r1, [r7, #20]
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	b2ca      	uxtb	r2, r1
 800329c:	701a      	strb	r2, [r3, #0]

    return length;
 800329e:	7abb      	ldrb	r3, [r7, #10]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3728      	adds	r7, #40	; 0x28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff feff 	bl	80030c0 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80032c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c6:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1ed      	bne.n	80032c8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 80032ec:	2304      	movs	r3, #4
 80032ee:	e04a      	b.n	8003386 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80032fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003300:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b02      	cmp	r3, #2
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3b01      	subs	r3, #1
 800331e:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ed      	bne.n	8003302 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8003326:	2302      	movs	r3, #2
 8003328:	e02d      	b.n	8003386 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	da15      	bge.n	8003378 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f85a 	bl	8003410 <_ZN7TwoWire21i2c_master_byte_writeEi>
 800335c:	4603      	mov	r3, r0
 800335e:	2b01      	cmp	r3, #1
 8003360:	bf14      	ite	ne
 8003362:	2301      	movne	r3, #1
 8003364:	2300      	moveq	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 800336c:	2303      	movs	r3, #3
 800336e:	e00a      	b.n	8003386 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	3301      	adds	r3, #1
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	e7e5      	b.n	8003344 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8003378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff feed 	bl	800315e <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 800338e:	b480      	push	{r7}
 8003390:	b087      	sub	sp, #28
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d006      	beq.n	80033b4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e005      	b.n	80033c0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 80033c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c4:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00c      	beq.n	80033f8 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	1e5a      	subs	r2, r3, #1
 80033e2:	617a      	str	r2, [r7, #20]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0e9      	beq.n	80033c6 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295
 80033f6:	e005      	b.n	8003404 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	461a      	mov	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	601a      	str	r2, [r3, #0]

    return 0;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	b2db      	uxtb	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 800342a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800342e:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343a:	2b80      	cmp	r3, #128	; 0x80
 800343c:	d008      	beq.n	8003450 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8003448:	2b04      	cmp	r3, #4
 800344a:	d001      	beq.n	8003450 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8003450:	2300      	movs	r3, #0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1e5a      	subs	r2, r3, #1
 800345a:	60fa      	str	r2, [r7, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0e2      	beq.n	8003430 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 800346e:	2301      	movs	r3, #1
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 800347c:	b480      	push	{r7}
 800347e:	b089      	sub	sp, #36	; 0x24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	dd41      	ble.n	800351c <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8003498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800349c:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ed      	bne.n	800349e <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	e068      	b.n	800359a <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	60ba      	str	r2, [r7, #8]
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	611a      	str	r2, [r3, #16]
        length--;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3b01      	subs	r3, #1
 80034da:	607b      	str	r3, [r7, #4]
        size++;
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	3301      	adds	r3, #1
 80034e0:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d104      	bne.n	80034fa <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 80034fa:	2300      	movs	r3, #0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0c8      	beq.n	8003492 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	60ba      	str	r2, [r7, #8]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	611a      	str	r2, [r3, #16]
            length--;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3b01      	subs	r3, #1
 8003512:	607b      	str	r3, [r7, #4]
            size++;
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	3301      	adds	r3, #1
 8003518:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 800351a:	e7ba      	b.n	8003492 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 800351c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003520:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800352c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003530:	bf14      	ite	ne
 8003532:	2301      	movne	r3, #1
 8003534:	2300      	moveq	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	3b01      	subs	r3, #1
 8003540:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ec      	bne.n	8003522 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
 800354c:	e025      	b.n	800359a <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003556:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8003558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800355c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b02      	cmp	r3, #2
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3b01      	subs	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1ed      	bne.n	800355e <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	e008      	b.n	800359a <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8003598:	69bb      	ldr	r3, [r7, #24]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3724      	adds	r7, #36	; 0x24
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	4a12      	ldr	r2, [pc, #72]	; (8003600 <_ZN7TwoWire15enableInterruptEv+0x58>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d106      	bne.n	80035c8 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80035ba:	2049      	movs	r0, #73	; 0x49
 80035bc:	f000 f9e8 	bl	8003990 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80035c0:	2048      	movs	r0, #72	; 0x48
 80035c2:	f000 f9e5 	bl	8003990 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 80035c6:	e016      	b.n	80035f6 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035cc:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d106      	bne.n	80035e0 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80035d2:	2022      	movs	r0, #34	; 0x22
 80035d4:	f000 f9dc 	bl	8003990 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80035d8:	2021      	movs	r0, #33	; 0x21
 80035da:	f000 f9d9 	bl	8003990 <HAL_NVIC_EnableIRQ>
}
 80035de:	e00a      	b.n	80035f6 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	4a08      	ldr	r2, [pc, #32]	; (8003608 <_ZN7TwoWire15enableInterruptEv+0x60>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d105      	bne.n	80035f6 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80035ea:	2020      	movs	r0, #32
 80035ec:	f000 f9d0 	bl	8003990 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80035f0:	201f      	movs	r0, #31
 80035f2:	f000 f9cd 	bl	8003990 <HAL_NVIC_EnableIRQ>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40005c00 	.word	0x40005c00
 8003604:	40005800 	.word	0x40005800
 8003608:	40005400 	.word	0x40005400

0800360c <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003618:	4a12      	ldr	r2, [pc, #72]	; (8003664 <_ZN7TwoWire16disableInterruptEv+0x58>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d106      	bne.n	800362c <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800361e:	2049      	movs	r0, #73	; 0x49
 8003620:	f000 f9c4 	bl	80039ac <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8003624:	2048      	movs	r0, #72	; 0x48
 8003626:	f000 f9c1 	bl	80039ac <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 800362a:	e016      	b.n	800365a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	4a0d      	ldr	r2, [pc, #52]	; (8003668 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d106      	bne.n	8003644 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8003636:	2022      	movs	r0, #34	; 0x22
 8003638:	f000 f9b8 	bl	80039ac <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 800363c:	2021      	movs	r0, #33	; 0x21
 800363e:	f000 f9b5 	bl	80039ac <HAL_NVIC_DisableIRQ>
}
 8003642:	e00a      	b.n	800365a <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	4a08      	ldr	r2, [pc, #32]	; (800366c <_ZN7TwoWire16disableInterruptEv+0x60>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d105      	bne.n	800365a <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800364e:	2020      	movs	r0, #32
 8003650:	f000 f9ac 	bl	80039ac <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003654:	201f      	movs	r0, #31
 8003656:	f000 f9a9 	bl	80039ac <HAL_NVIC_DisableIRQ>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40005c00 	.word	0x40005c00
 8003668:	40005800 	.word	0x40005800
 800366c:	40005400 	.word	0x40005400

08003670 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d110      	bne.n	80036a2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003686:	4293      	cmp	r3, r2
 8003688:	d10b      	bne.n	80036a2 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 800368a:	4908      	ldr	r1, [pc, #32]	; (80036ac <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800368c:	4808      	ldr	r0, [pc, #32]	; (80036b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800368e:	f7ff fb51 	bl	8002d34 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8003692:	4908      	ldr	r1, [pc, #32]	; (80036b4 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003694:	4808      	ldr	r0, [pc, #32]	; (80036b8 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003696:	f7ff fb4d 	bl	8002d34 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 800369a:	4908      	ldr	r1, [pc, #32]	; (80036bc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800369c:	4808      	ldr	r0, [pc, #32]	; (80036c0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800369e:	f7ff fb49 	bl	8002d34 <_ZN7TwoWireC1EP11I2C_TypeDef>
 80036a2:	bf00      	nop
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40005400 	.word	0x40005400
 80036b0:	20000334 	.word	0x20000334
 80036b4:	40005800 	.word	0x40005800
 80036b8:	200003ec 	.word	0x200003ec
 80036bc:	40005c00 	.word	0x40005c00
 80036c0:	200004a4 	.word	0x200004a4

080036c4 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036cc:	2001      	movs	r0, #1
 80036ce:	f7ff ffcf 	bl	8003670 <_Z41__static_initialization_and_destruction_0ii>
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036d8:	4b0e      	ldr	r3, [pc, #56]	; (8003714 <HAL_Init+0x40>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <HAL_Init+0x40>)
 80036de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <HAL_Init+0x40>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <HAL_Init+0x40>)
 80036ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036f0:	4b08      	ldr	r3, [pc, #32]	; (8003714 <HAL_Init+0x40>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a07      	ldr	r2, [pc, #28]	; (8003714 <HAL_Init+0x40>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036fc:	2003      	movs	r0, #3
 80036fe:	f000 f920 	bl	8003942 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003702:	200f      	movs	r0, #15
 8003704:	f7fe f832 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003708:	f7fd ff78 	bl	80015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023c00 	.word	0x40023c00

08003718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_IncTick+0x20>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_IncTick+0x24>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4413      	add	r3, r2
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <HAL_IncTick+0x24>)
 800372a:	6013      	str	r3, [r2, #0]
}
 800372c:	bf00      	nop
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000008 	.word	0x20000008
 800373c:	200005ac 	.word	0x200005ac

08003740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return uwTick;
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <HAL_GetTick+0x14>)
 8003746:	681b      	ldr	r3, [r3, #0]
}
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	200005ac 	.word	0x200005ac

08003758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003760:	f7ff ffee 	bl	8003740 <HAL_GetTick>
 8003764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d005      	beq.n	800377e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_Delay+0x44>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800377e:	bf00      	nop
 8003780:	f7ff ffde 	bl	8003740 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	429a      	cmp	r2, r3
 800378e:	d8f7      	bhi.n	8003780 <HAL_Delay+0x28>
  {
  }
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000008 	.word	0x20000008

080037a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b0:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <__NVIC_SetPriorityGrouping+0x44>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037bc:	4013      	ands	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037d2:	4a04      	ldr	r2, [pc, #16]	; (80037e4 <__NVIC_SetPriorityGrouping+0x44>)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	60d3      	str	r3, [r2, #12]
}
 80037d8:	bf00      	nop
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <__NVIC_GetPriorityGrouping+0x18>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	0a1b      	lsrs	r3, r3, #8
 80037f2:	f003 0307 	and.w	r3, r3, #7
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	4603      	mov	r3, r0
 800380c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	2b00      	cmp	r3, #0
 8003814:	db0b      	blt.n	800382e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	f003 021f 	and.w	r2, r3, #31
 800381c:	4907      	ldr	r1, [pc, #28]	; (800383c <__NVIC_EnableIRQ+0x38>)
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2001      	movs	r0, #1
 8003826:	fa00 f202 	lsl.w	r2, r0, r2
 800382a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	e000e100 	.word	0xe000e100

08003840 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	2b00      	cmp	r3, #0
 8003850:	db12      	blt.n	8003878 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	f003 021f 	and.w	r2, r3, #31
 8003858:	490a      	ldr	r1, [pc, #40]	; (8003884 <__NVIC_DisableIRQ+0x44>)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	2001      	movs	r0, #1
 8003862:	fa00 f202 	lsl.w	r2, r0, r2
 8003866:	3320      	adds	r3, #32
 8003868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800386c:	f3bf 8f4f 	dsb	sy
}
 8003870:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003872:	f3bf 8f6f 	isb	sy
}
 8003876:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000e100 	.word	0xe000e100

08003888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	6039      	str	r1, [r7, #0]
 8003892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003898:	2b00      	cmp	r3, #0
 800389a:	db0a      	blt.n	80038b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	490c      	ldr	r1, [pc, #48]	; (80038d4 <__NVIC_SetPriority+0x4c>)
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	0112      	lsls	r2, r2, #4
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	440b      	add	r3, r1
 80038ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b0:	e00a      	b.n	80038c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4908      	ldr	r1, [pc, #32]	; (80038d8 <__NVIC_SetPriority+0x50>)
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	3b04      	subs	r3, #4
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	440b      	add	r3, r1
 80038c6:	761a      	strb	r2, [r3, #24]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000e100 	.word	0xe000e100
 80038d8:	e000ed00 	.word	0xe000ed00

080038dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	; 0x24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f1c3 0307 	rsb	r3, r3, #7
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	bf28      	it	cs
 80038fa:	2304      	movcs	r3, #4
 80038fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3304      	adds	r3, #4
 8003902:	2b06      	cmp	r3, #6
 8003904:	d902      	bls.n	800390c <NVIC_EncodePriority+0x30>
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3b03      	subs	r3, #3
 800390a:	e000      	b.n	800390e <NVIC_EncodePriority+0x32>
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003910:	f04f 32ff 	mov.w	r2, #4294967295
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43da      	mvns	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	401a      	ands	r2, r3
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003924:	f04f 31ff 	mov.w	r1, #4294967295
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	fa01 f303 	lsl.w	r3, r1, r3
 800392e:	43d9      	mvns	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003934:	4313      	orrs	r3, r2
         );
}
 8003936:	4618      	mov	r0, r3
 8003938:	3724      	adds	r7, #36	; 0x24
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff ff28 	bl	80037a0 <__NVIC_SetPriorityGrouping>
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800396a:	f7ff ff3d 	bl	80037e8 <__NVIC_GetPriorityGrouping>
 800396e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	68b9      	ldr	r1, [r7, #8]
 8003974:	6978      	ldr	r0, [r7, #20]
 8003976:	f7ff ffb1 	bl	80038dc <NVIC_EncodePriority>
 800397a:	4602      	mov	r2, r0
 800397c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff ff80 	bl	8003888 <__NVIC_SetPriority>
}
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff ff30 	bl	8003804 <__NVIC_EnableIRQ>
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff ff40 	bl	8003840 <__NVIC_DisableIRQ>
}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	e165      	b.n	8003cb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039e4:	2201      	movs	r2, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	f040 8154 	bne.w	8003caa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d005      	beq.n	8003a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d130      	bne.n	8003a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	2203      	movs	r2, #3
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a50:	2201      	movs	r2, #1
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 0201 	and.w	r2, r3, #1
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d017      	beq.n	8003ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	2203      	movs	r2, #3
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0303 	and.w	r3, r3, #3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d123      	bne.n	8003b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	08da      	lsrs	r2, r3, #3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3208      	adds	r2, #8
 8003acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	220f      	movs	r2, #15
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	08da      	lsrs	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3208      	adds	r2, #8
 8003b06:	69b9      	ldr	r1, [r7, #24]
 8003b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	2203      	movs	r2, #3
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0203 	and.w	r2, r3, #3
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80ae 	beq.w	8003caa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	4b5d      	ldr	r3, [pc, #372]	; (8003cc8 <HAL_GPIO_Init+0x300>)
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	4a5c      	ldr	r2, [pc, #368]	; (8003cc8 <HAL_GPIO_Init+0x300>)
 8003b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b5e:	4b5a      	ldr	r3, [pc, #360]	; (8003cc8 <HAL_GPIO_Init+0x300>)
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b6a:	4a58      	ldr	r2, [pc, #352]	; (8003ccc <HAL_GPIO_Init+0x304>)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	3302      	adds	r3, #2
 8003b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	220f      	movs	r2, #15
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a4f      	ldr	r2, [pc, #316]	; (8003cd0 <HAL_GPIO_Init+0x308>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d025      	beq.n	8003be2 <HAL_GPIO_Init+0x21a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a4e      	ldr	r2, [pc, #312]	; (8003cd4 <HAL_GPIO_Init+0x30c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01f      	beq.n	8003bde <HAL_GPIO_Init+0x216>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a4d      	ldr	r2, [pc, #308]	; (8003cd8 <HAL_GPIO_Init+0x310>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d019      	beq.n	8003bda <HAL_GPIO_Init+0x212>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a4c      	ldr	r2, [pc, #304]	; (8003cdc <HAL_GPIO_Init+0x314>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_GPIO_Init+0x20e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	; (8003ce0 <HAL_GPIO_Init+0x318>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00d      	beq.n	8003bd2 <HAL_GPIO_Init+0x20a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a4a      	ldr	r2, [pc, #296]	; (8003ce4 <HAL_GPIO_Init+0x31c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <HAL_GPIO_Init+0x206>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a49      	ldr	r2, [pc, #292]	; (8003ce8 <HAL_GPIO_Init+0x320>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_GPIO_Init+0x202>
 8003bc6:	2306      	movs	r3, #6
 8003bc8:	e00c      	b.n	8003be4 <HAL_GPIO_Init+0x21c>
 8003bca:	2307      	movs	r3, #7
 8003bcc:	e00a      	b.n	8003be4 <HAL_GPIO_Init+0x21c>
 8003bce:	2305      	movs	r3, #5
 8003bd0:	e008      	b.n	8003be4 <HAL_GPIO_Init+0x21c>
 8003bd2:	2304      	movs	r3, #4
 8003bd4:	e006      	b.n	8003be4 <HAL_GPIO_Init+0x21c>
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e004      	b.n	8003be4 <HAL_GPIO_Init+0x21c>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e002      	b.n	8003be4 <HAL_GPIO_Init+0x21c>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <HAL_GPIO_Init+0x21c>
 8003be2:	2300      	movs	r3, #0
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	f002 0203 	and.w	r2, r2, #3
 8003bea:	0092      	lsls	r2, r2, #2
 8003bec:	4093      	lsls	r3, r2
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bf4:	4935      	ldr	r1, [pc, #212]	; (8003ccc <HAL_GPIO_Init+0x304>)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	089b      	lsrs	r3, r3, #2
 8003bfa:	3302      	adds	r3, #2
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c02:	4b3a      	ldr	r3, [pc, #232]	; (8003cec <HAL_GPIO_Init+0x324>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c26:	4a31      	ldr	r2, [pc, #196]	; (8003cec <HAL_GPIO_Init+0x324>)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c2c:	4b2f      	ldr	r3, [pc, #188]	; (8003cec <HAL_GPIO_Init+0x324>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c50:	4a26      	ldr	r2, [pc, #152]	; (8003cec <HAL_GPIO_Init+0x324>)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c56:	4b25      	ldr	r3, [pc, #148]	; (8003cec <HAL_GPIO_Init+0x324>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4013      	ands	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c7a:	4a1c      	ldr	r2, [pc, #112]	; (8003cec <HAL_GPIO_Init+0x324>)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c80:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_GPIO_Init+0x324>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ca4:	4a11      	ldr	r2, [pc, #68]	; (8003cec <HAL_GPIO_Init+0x324>)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	3301      	adds	r3, #1
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b0f      	cmp	r3, #15
 8003cb4:	f67f ae96 	bls.w	80039e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3724      	adds	r7, #36	; 0x24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40013800 	.word	0x40013800
 8003cd0:	40020000 	.word	0x40020000
 8003cd4:	40020400 	.word	0x40020400
 8003cd8:	40020800 	.word	0x40020800
 8003cdc:	40020c00 	.word	0x40020c00
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40021400 	.word	0x40021400
 8003ce8:	40021800 	.word	0x40021800
 8003cec:	40013c00 	.word	0x40013c00

08003cf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	887b      	ldrh	r3, [r7, #2]
 8003d02:	4013      	ands	r3, r2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e001      	b.n	8003d12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	807b      	strh	r3, [r7, #2]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d30:	787b      	ldrb	r3, [r7, #1]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d3c:	e003      	b.n	8003d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d3e:	887b      	ldrh	r3, [r7, #2]
 8003d40:	041a      	lsls	r2, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	619a      	str	r2, [r3, #24]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e12b      	b.n	8003fbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d106      	bne.n	8003d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7fd fc66 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2224      	movs	r2, #36	; 0x24
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0201 	bic.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003db6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003db8:	f000 fa38 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8003dbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	4a81      	ldr	r2, [pc, #516]	; (8003fc8 <HAL_I2C_Init+0x274>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d807      	bhi.n	8003dd8 <HAL_I2C_Init+0x84>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a80      	ldr	r2, [pc, #512]	; (8003fcc <HAL_I2C_Init+0x278>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	bf94      	ite	ls
 8003dd0:	2301      	movls	r3, #1
 8003dd2:	2300      	movhi	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	e006      	b.n	8003de6 <HAL_I2C_Init+0x92>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4a7d      	ldr	r2, [pc, #500]	; (8003fd0 <HAL_I2C_Init+0x27c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	bf94      	ite	ls
 8003de0:	2301      	movls	r3, #1
 8003de2:	2300      	movhi	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0e7      	b.n	8003fbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a78      	ldr	r2, [pc, #480]	; (8003fd4 <HAL_I2C_Init+0x280>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	0c9b      	lsrs	r3, r3, #18
 8003df8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4a6a      	ldr	r2, [pc, #424]	; (8003fc8 <HAL_I2C_Init+0x274>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d802      	bhi.n	8003e28 <HAL_I2C_Init+0xd4>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3301      	adds	r3, #1
 8003e26:	e009      	b.n	8003e3c <HAL_I2C_Init+0xe8>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e2e:	fb02 f303 	mul.w	r3, r2, r3
 8003e32:	4a69      	ldr	r2, [pc, #420]	; (8003fd8 <HAL_I2C_Init+0x284>)
 8003e34:	fba2 2303 	umull	r2, r3, r2, r3
 8003e38:	099b      	lsrs	r3, r3, #6
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	495c      	ldr	r1, [pc, #368]	; (8003fc8 <HAL_I2C_Init+0x274>)
 8003e58:	428b      	cmp	r3, r1
 8003e5a:	d819      	bhi.n	8003e90 <HAL_I2C_Init+0x13c>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1e59      	subs	r1, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e6a:	1c59      	adds	r1, r3, #1
 8003e6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e70:	400b      	ands	r3, r1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HAL_I2C_Init+0x138>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1e59      	subs	r1, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e84:	3301      	adds	r3, #1
 8003e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8a:	e051      	b.n	8003f30 <HAL_I2C_Init+0x1dc>
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	e04f      	b.n	8003f30 <HAL_I2C_Init+0x1dc>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d111      	bne.n	8003ebc <HAL_I2C_Init+0x168>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1e58      	subs	r0, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	440b      	add	r3, r1
 8003ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e012      	b.n	8003ee2 <HAL_I2C_Init+0x18e>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1e58      	subs	r0, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	0099      	lsls	r1, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Init+0x196>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e022      	b.n	8003f30 <HAL_I2C_Init+0x1dc>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10e      	bne.n	8003f10 <HAL_I2C_Init+0x1bc>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1e58      	subs	r0, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6859      	ldr	r1, [r3, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	440b      	add	r3, r1
 8003f00:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f04:	3301      	adds	r3, #1
 8003f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0e:	e00f      	b.n	8003f30 <HAL_I2C_Init+0x1dc>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	1e58      	subs	r0, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6859      	ldr	r1, [r3, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	0099      	lsls	r1, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f26:	3301      	adds	r3, #1
 8003f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f30:	6879      	ldr	r1, [r7, #4]
 8003f32:	6809      	ldr	r1, [r1, #0]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69da      	ldr	r2, [r3, #28]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6911      	ldr	r1, [r2, #16]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68d2      	ldr	r2, [r2, #12]
 8003f6a:	4311      	orrs	r1, r2
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	000186a0 	.word	0x000186a0
 8003fcc:	001e847f 	.word	0x001e847f
 8003fd0:	003d08ff 	.word	0x003d08ff
 8003fd4:	431bde83 	.word	0x431bde83
 8003fd8:	10624dd3 	.word	0x10624dd3

08003fdc <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	d124      	bne.n	800403a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2228      	movs	r2, #40	; 0x28
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b01      	cmp	r3, #1
 8004004:	d007      	beq.n	8004016 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004024:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004034:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e000      	b.n	800403c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800403a:	2302      	movs	r3, #2
  }
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0cc      	b.n	80041f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800405c:	4b68      	ldr	r3, [pc, #416]	; (8004200 <HAL_RCC_ClockConfig+0x1b8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d90c      	bls.n	8004084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b65      	ldr	r3, [pc, #404]	; (8004200 <HAL_RCC_ClockConfig+0x1b8>)
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004072:	4b63      	ldr	r3, [pc, #396]	; (8004200 <HAL_RCC_ClockConfig+0x1b8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d001      	beq.n	8004084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e0b8      	b.n	80041f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d020      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800409c:	4b59      	ldr	r3, [pc, #356]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	4a58      	ldr	r2, [pc, #352]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040b4:	4b53      	ldr	r3, [pc, #332]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	4a52      	ldr	r2, [pc, #328]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c0:	4b50      	ldr	r3, [pc, #320]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	494d      	ldr	r1, [pc, #308]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d044      	beq.n	8004168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e6:	4b47      	ldr	r3, [pc, #284]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d119      	bne.n	8004126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e07f      	b.n	80041f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d003      	beq.n	8004106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004102:	2b03      	cmp	r3, #3
 8004104:	d107      	bne.n	8004116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004106:	4b3f      	ldr	r3, [pc, #252]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d109      	bne.n	8004126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e06f      	b.n	80041f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004116:	4b3b      	ldr	r3, [pc, #236]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e067      	b.n	80041f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004126:	4b37      	ldr	r3, [pc, #220]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f023 0203 	bic.w	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	4934      	ldr	r1, [pc, #208]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004138:	f7ff fb02 	bl	8003740 <HAL_GetTick>
 800413c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413e:	e00a      	b.n	8004156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004140:	f7ff fafe 	bl	8003740 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	; 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e04f      	b.n	80041f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004156:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 020c 	and.w	r2, r3, #12
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	429a      	cmp	r2, r3
 8004166:	d1eb      	bne.n	8004140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004168:	4b25      	ldr	r3, [pc, #148]	; (8004200 <HAL_RCC_ClockConfig+0x1b8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d20c      	bcs.n	8004190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004176:	4b22      	ldr	r3, [pc, #136]	; (8004200 <HAL_RCC_ClockConfig+0x1b8>)
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800417e:	4b20      	ldr	r3, [pc, #128]	; (8004200 <HAL_RCC_ClockConfig+0x1b8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d001      	beq.n	8004190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e032      	b.n	80041f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4916      	ldr	r1, [pc, #88]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ba:	4b12      	ldr	r3, [pc, #72]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	490e      	ldr	r1, [pc, #56]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ce:	f000 f887 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 80041d2:	4602      	mov	r2, r0
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	091b      	lsrs	r3, r3, #4
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	490a      	ldr	r1, [pc, #40]	; (8004208 <HAL_RCC_ClockConfig+0x1c0>)
 80041e0:	5ccb      	ldrb	r3, [r1, r3]
 80041e2:	fa22 f303 	lsr.w	r3, r2, r3
 80041e6:	4a09      	ldr	r2, [pc, #36]	; (800420c <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ea:	4b09      	ldr	r3, [pc, #36]	; (8004210 <HAL_RCC_ClockConfig+0x1c8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fd fabc 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	40023c00 	.word	0x40023c00
 8004204:	40023800 	.word	0x40023800
 8004208:	08008a60 	.word	0x08008a60
 800420c:	20000000 	.word	0x20000000
 8004210:	20000004 	.word	0x20000004

08004214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004218:	4b03      	ldr	r3, [pc, #12]	; (8004228 <HAL_RCC_GetHCLKFreq+0x14>)
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000000 	.word	0x20000000

0800422c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004230:	f7ff fff0 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0a9b      	lsrs	r3, r3, #10
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	08008a70 	.word	0x08008a70

08004254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004258:	f7ff ffdc 	bl	8004214 <HAL_RCC_GetHCLKFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	0b5b      	lsrs	r3, r3, #13
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40023800 	.word	0x40023800
 8004278:	08008a70 	.word	0x08008a70

0800427c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	220f      	movs	r2, #15
 800428a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800428c:	4b12      	ldr	r3, [pc, #72]	; (80042d8 <HAL_RCC_GetClockConfig+0x5c>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0203 	and.w	r2, r3, #3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004298:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <HAL_RCC_GetClockConfig+0x5c>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_RCC_GetClockConfig+0x5c>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <HAL_RCC_GetClockConfig+0x5c>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	08db      	lsrs	r3, r3, #3
 80042b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042be:	4b07      	ldr	r3, [pc, #28]	; (80042dc <HAL_RCC_GetClockConfig+0x60>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 020f 	and.w	r2, r3, #15
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	601a      	str	r2, [r3, #0]
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40023c00 	.word	0x40023c00

080042e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e4:	b088      	sub	sp, #32
 80042e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042fc:	4bce      	ldr	r3, [pc, #824]	; (8004638 <HAL_RCC_GetSysClockFreq+0x358>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 030c 	and.w	r3, r3, #12
 8004304:	2b0c      	cmp	r3, #12
 8004306:	f200 818d 	bhi.w	8004624 <HAL_RCC_GetSysClockFreq+0x344>
 800430a:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <HAL_RCC_GetSysClockFreq+0x30>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004345 	.word	0x08004345
 8004314:	08004625 	.word	0x08004625
 8004318:	08004625 	.word	0x08004625
 800431c:	08004625 	.word	0x08004625
 8004320:	0800434b 	.word	0x0800434b
 8004324:	08004625 	.word	0x08004625
 8004328:	08004625 	.word	0x08004625
 800432c:	08004625 	.word	0x08004625
 8004330:	08004351 	.word	0x08004351
 8004334:	08004625 	.word	0x08004625
 8004338:	08004625 	.word	0x08004625
 800433c:	08004625 	.word	0x08004625
 8004340:	080044c5 	.word	0x080044c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004344:	4bbd      	ldr	r3, [pc, #756]	; (800463c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004346:	61bb      	str	r3, [r7, #24]
       break;
 8004348:	e16f      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800434a:	4bbd      	ldr	r3, [pc, #756]	; (8004640 <HAL_RCC_GetSysClockFreq+0x360>)
 800434c:	61bb      	str	r3, [r7, #24]
      break;
 800434e:	e16c      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004350:	4bb9      	ldr	r3, [pc, #740]	; (8004638 <HAL_RCC_GetSysClockFreq+0x358>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004358:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800435a:	4bb7      	ldr	r3, [pc, #732]	; (8004638 <HAL_RCC_GetSysClockFreq+0x358>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d053      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004366:	4bb4      	ldr	r3, [pc, #720]	; (8004638 <HAL_RCC_GetSysClockFreq+0x358>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	099b      	lsrs	r3, r3, #6
 800436c:	461a      	mov	r2, r3
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004376:	f04f 0100 	mov.w	r1, #0
 800437a:	ea02 0400 	and.w	r4, r2, r0
 800437e:	603c      	str	r4, [r7, #0]
 8004380:	400b      	ands	r3, r1
 8004382:	607b      	str	r3, [r7, #4]
 8004384:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004388:	4620      	mov	r0, r4
 800438a:	4629      	mov	r1, r5
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	014b      	lsls	r3, r1, #5
 8004396:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800439a:	0142      	lsls	r2, r0, #5
 800439c:	4610      	mov	r0, r2
 800439e:	4619      	mov	r1, r3
 80043a0:	4623      	mov	r3, r4
 80043a2:	1ac0      	subs	r0, r0, r3
 80043a4:	462b      	mov	r3, r5
 80043a6:	eb61 0103 	sbc.w	r1, r1, r3
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	018b      	lsls	r3, r1, #6
 80043b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043b8:	0182      	lsls	r2, r0, #6
 80043ba:	1a12      	subs	r2, r2, r0
 80043bc:	eb63 0301 	sbc.w	r3, r3, r1
 80043c0:	f04f 0000 	mov.w	r0, #0
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	00d9      	lsls	r1, r3, #3
 80043ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043ce:	00d0      	lsls	r0, r2, #3
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4621      	mov	r1, r4
 80043d6:	1852      	adds	r2, r2, r1
 80043d8:	4629      	mov	r1, r5
 80043da:	eb43 0101 	adc.w	r1, r3, r1
 80043de:	460b      	mov	r3, r1
 80043e0:	f04f 0000 	mov.w	r0, #0
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	0259      	lsls	r1, r3, #9
 80043ea:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80043ee:	0250      	lsls	r0, r2, #9
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4610      	mov	r0, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	f7fc fbf2 	bl	8000be8 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4613      	mov	r3, r2
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	e04c      	b.n	80044a8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440e:	4b8a      	ldr	r3, [pc, #552]	; (8004638 <HAL_RCC_GetSysClockFreq+0x358>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	461a      	mov	r2, r3
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800441e:	f04f 0100 	mov.w	r1, #0
 8004422:	ea02 0a00 	and.w	sl, r2, r0
 8004426:	ea03 0b01 	and.w	fp, r3, r1
 800442a:	4650      	mov	r0, sl
 800442c:	4659      	mov	r1, fp
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	014b      	lsls	r3, r1, #5
 8004438:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800443c:	0142      	lsls	r2, r0, #5
 800443e:	4610      	mov	r0, r2
 8004440:	4619      	mov	r1, r3
 8004442:	ebb0 000a 	subs.w	r0, r0, sl
 8004446:	eb61 010b 	sbc.w	r1, r1, fp
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	018b      	lsls	r3, r1, #6
 8004454:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004458:	0182      	lsls	r2, r0, #6
 800445a:	1a12      	subs	r2, r2, r0
 800445c:	eb63 0301 	sbc.w	r3, r3, r1
 8004460:	f04f 0000 	mov.w	r0, #0
 8004464:	f04f 0100 	mov.w	r1, #0
 8004468:	00d9      	lsls	r1, r3, #3
 800446a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800446e:	00d0      	lsls	r0, r2, #3
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	eb12 020a 	adds.w	r2, r2, sl
 8004478:	eb43 030b 	adc.w	r3, r3, fp
 800447c:	f04f 0000 	mov.w	r0, #0
 8004480:	f04f 0100 	mov.w	r1, #0
 8004484:	0299      	lsls	r1, r3, #10
 8004486:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800448a:	0290      	lsls	r0, r2, #10
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4610      	mov	r0, r2
 8004492:	4619      	mov	r1, r3
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	461a      	mov	r2, r3
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	f7fc fba4 	bl	8000be8 <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4613      	mov	r3, r2
 80044a6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044a8:	4b63      	ldr	r3, [pc, #396]	; (8004638 <HAL_RCC_GetSysClockFreq+0x358>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	3301      	adds	r3, #1
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	61bb      	str	r3, [r7, #24]
      break;
 80044c2:	e0b2      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c4:	4b5c      	ldr	r3, [pc, #368]	; (8004638 <HAL_RCC_GetSysClockFreq+0x358>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044cc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ce:	4b5a      	ldr	r3, [pc, #360]	; (8004638 <HAL_RCC_GetSysClockFreq+0x358>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d04d      	beq.n	8004576 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044da:	4b57      	ldr	r3, [pc, #348]	; (8004638 <HAL_RCC_GetSysClockFreq+0x358>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	099b      	lsrs	r3, r3, #6
 80044e0:	461a      	mov	r2, r3
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	ea02 0800 	and.w	r8, r2, r0
 80044f2:	ea03 0901 	and.w	r9, r3, r1
 80044f6:	4640      	mov	r0, r8
 80044f8:	4649      	mov	r1, r9
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	f04f 0300 	mov.w	r3, #0
 8004502:	014b      	lsls	r3, r1, #5
 8004504:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004508:	0142      	lsls	r2, r0, #5
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	ebb0 0008 	subs.w	r0, r0, r8
 8004512:	eb61 0109 	sbc.w	r1, r1, r9
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	018b      	lsls	r3, r1, #6
 8004520:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004524:	0182      	lsls	r2, r0, #6
 8004526:	1a12      	subs	r2, r2, r0
 8004528:	eb63 0301 	sbc.w	r3, r3, r1
 800452c:	f04f 0000 	mov.w	r0, #0
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	00d9      	lsls	r1, r3, #3
 8004536:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800453a:	00d0      	lsls	r0, r2, #3
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	eb12 0208 	adds.w	r2, r2, r8
 8004544:	eb43 0309 	adc.w	r3, r3, r9
 8004548:	f04f 0000 	mov.w	r0, #0
 800454c:	f04f 0100 	mov.w	r1, #0
 8004550:	0259      	lsls	r1, r3, #9
 8004552:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004556:	0250      	lsls	r0, r2, #9
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	461a      	mov	r2, r3
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	f7fc fb3e 	bl	8000be8 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4613      	mov	r3, r2
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	e04a      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004576:	4b30      	ldr	r3, [pc, #192]	; (8004638 <HAL_RCC_GetSysClockFreq+0x358>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	099b      	lsrs	r3, r3, #6
 800457c:	461a      	mov	r2, r3
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004586:	f04f 0100 	mov.w	r1, #0
 800458a:	ea02 0400 	and.w	r4, r2, r0
 800458e:	ea03 0501 	and.w	r5, r3, r1
 8004592:	4620      	mov	r0, r4
 8004594:	4629      	mov	r1, r5
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 0300 	mov.w	r3, #0
 800459e:	014b      	lsls	r3, r1, #5
 80045a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045a4:	0142      	lsls	r2, r0, #5
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	1b00      	subs	r0, r0, r4
 80045ac:	eb61 0105 	sbc.w	r1, r1, r5
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	018b      	lsls	r3, r1, #6
 80045ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045be:	0182      	lsls	r2, r0, #6
 80045c0:	1a12      	subs	r2, r2, r0
 80045c2:	eb63 0301 	sbc.w	r3, r3, r1
 80045c6:	f04f 0000 	mov.w	r0, #0
 80045ca:	f04f 0100 	mov.w	r1, #0
 80045ce:	00d9      	lsls	r1, r3, #3
 80045d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045d4:	00d0      	lsls	r0, r2, #3
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	1912      	adds	r2, r2, r4
 80045dc:	eb45 0303 	adc.w	r3, r5, r3
 80045e0:	f04f 0000 	mov.w	r0, #0
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	0299      	lsls	r1, r3, #10
 80045ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045ee:	0290      	lsls	r0, r2, #10
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	461a      	mov	r2, r3
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	f7fc faf2 	bl	8000be8 <__aeabi_uldivmod>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	4613      	mov	r3, r2
 800460a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <HAL_RCC_GetSysClockFreq+0x358>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	0f1b      	lsrs	r3, r3, #28
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	61bb      	str	r3, [r7, #24]
      break;
 8004622:	e002      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004626:	61bb      	str	r3, [r7, #24]
      break;
 8004628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462a:	69bb      	ldr	r3, [r7, #24]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3720      	adds	r7, #32
 8004630:	46bd      	mov	sp, r7
 8004632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800
 800463c:	00f42400 	.word	0x00f42400
 8004640:	007a1200 	.word	0x007a1200

08004644 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e28d      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 8083 	beq.w	800476a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004664:	4b94      	ldr	r3, [pc, #592]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 030c 	and.w	r3, r3, #12
 800466c:	2b04      	cmp	r3, #4
 800466e:	d019      	beq.n	80046a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004670:	4b91      	ldr	r3, [pc, #580]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004678:	2b08      	cmp	r3, #8
 800467a:	d106      	bne.n	800468a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800467c:	4b8e      	ldr	r3, [pc, #568]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004688:	d00c      	beq.n	80046a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800468a:	4b8b      	ldr	r3, [pc, #556]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d112      	bne.n	80046bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004696:	4b88      	ldr	r3, [pc, #544]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a2:	d10b      	bne.n	80046bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a4:	4b84      	ldr	r3, [pc, #528]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d05b      	beq.n	8004768 <HAL_RCC_OscConfig+0x124>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d157      	bne.n	8004768 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e25a      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d106      	bne.n	80046d4 <HAL_RCC_OscConfig+0x90>
 80046c6:	4b7c      	ldr	r3, [pc, #496]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a7b      	ldr	r2, [pc, #492]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e01d      	b.n	8004710 <HAL_RCC_OscConfig+0xcc>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCC_OscConfig+0xb4>
 80046de:	4b76      	ldr	r3, [pc, #472]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a75      	ldr	r2, [pc, #468]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	4b73      	ldr	r3, [pc, #460]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a72      	ldr	r2, [pc, #456]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	e00b      	b.n	8004710 <HAL_RCC_OscConfig+0xcc>
 80046f8:	4b6f      	ldr	r3, [pc, #444]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a6e      	ldr	r2, [pc, #440]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80046fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	4b6c      	ldr	r3, [pc, #432]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a6b      	ldr	r2, [pc, #428]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800470a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800470e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d013      	beq.n	8004740 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7ff f812 	bl	8003740 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004720:	f7ff f80e 	bl	8003740 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b64      	cmp	r3, #100	; 0x64
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e21f      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004732:	4b61      	ldr	r3, [pc, #388]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0f0      	beq.n	8004720 <HAL_RCC_OscConfig+0xdc>
 800473e:	e014      	b.n	800476a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fe fffe 	bl	8003740 <HAL_GetTick>
 8004744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004748:	f7fe fffa 	bl	8003740 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b64      	cmp	r3, #100	; 0x64
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e20b      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475a:	4b57      	ldr	r3, [pc, #348]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f0      	bne.n	8004748 <HAL_RCC_OscConfig+0x104>
 8004766:	e000      	b.n	800476a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d06f      	beq.n	8004856 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004776:	4b50      	ldr	r3, [pc, #320]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 030c 	and.w	r3, r3, #12
 800477e:	2b00      	cmp	r3, #0
 8004780:	d017      	beq.n	80047b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004782:	4b4d      	ldr	r3, [pc, #308]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800478a:	2b08      	cmp	r3, #8
 800478c:	d105      	bne.n	800479a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800478e:	4b4a      	ldr	r3, [pc, #296]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00b      	beq.n	80047b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800479a:	4b47      	ldr	r3, [pc, #284]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047a2:	2b0c      	cmp	r3, #12
 80047a4:	d11c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047a6:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d116      	bne.n	80047e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b2:	4b41      	ldr	r3, [pc, #260]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_RCC_OscConfig+0x186>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d001      	beq.n	80047ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e1d3      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ca:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	4937      	ldr	r1, [pc, #220]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	e03a      	b.n	8004856 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047e8:	4b34      	ldr	r3, [pc, #208]	; (80048bc <HAL_RCC_OscConfig+0x278>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ee:	f7fe ffa7 	bl	8003740 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f6:	f7fe ffa3 	bl	8003740 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e1b4      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004808:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004814:	4b28      	ldr	r3, [pc, #160]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4925      	ldr	r1, [pc, #148]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 8004824:	4313      	orrs	r3, r2
 8004826:	600b      	str	r3, [r1, #0]
 8004828:	e015      	b.n	8004856 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800482a:	4b24      	ldr	r3, [pc, #144]	; (80048bc <HAL_RCC_OscConfig+0x278>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fe ff86 	bl	8003740 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004838:	f7fe ff82 	bl	8003740 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e193      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d036      	beq.n	80048d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <HAL_RCC_OscConfig+0x27c>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fe ff66 	bl	8003740 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004878:	f7fe ff62 	bl	8003740 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e173      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_RCC_OscConfig+0x274>)
 800488c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f0      	beq.n	8004878 <HAL_RCC_OscConfig+0x234>
 8004896:	e01b      	b.n	80048d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004898:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <HAL_RCC_OscConfig+0x27c>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489e:	f7fe ff4f 	bl	8003740 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a4:	e00e      	b.n	80048c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048a6:	f7fe ff4b 	bl	8003740 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d907      	bls.n	80048c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e15c      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
 80048b8:	40023800 	.word	0x40023800
 80048bc:	42470000 	.word	0x42470000
 80048c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c4:	4b8a      	ldr	r3, [pc, #552]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 80048c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1ea      	bne.n	80048a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 8097 	beq.w	8004a0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048de:	2300      	movs	r3, #0
 80048e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048e2:	4b83      	ldr	r3, [pc, #524]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10f      	bne.n	800490e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	4b7f      	ldr	r3, [pc, #508]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	4a7e      	ldr	r2, [pc, #504]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 80048f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fc:	6413      	str	r3, [r2, #64]	; 0x40
 80048fe:	4b7c      	ldr	r3, [pc, #496]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490e:	4b79      	ldr	r3, [pc, #484]	; (8004af4 <HAL_RCC_OscConfig+0x4b0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d118      	bne.n	800494c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800491a:	4b76      	ldr	r3, [pc, #472]	; (8004af4 <HAL_RCC_OscConfig+0x4b0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a75      	ldr	r2, [pc, #468]	; (8004af4 <HAL_RCC_OscConfig+0x4b0>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004926:	f7fe ff0b 	bl	8003740 <HAL_GetTick>
 800492a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492e:	f7fe ff07 	bl	8003740 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e118      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	4b6c      	ldr	r3, [pc, #432]	; (8004af4 <HAL_RCC_OscConfig+0x4b0>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f0      	beq.n	800492e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d106      	bne.n	8004962 <HAL_RCC_OscConfig+0x31e>
 8004954:	4b66      	ldr	r3, [pc, #408]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4a65      	ldr	r2, [pc, #404]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	e01c      	b.n	800499c <HAL_RCC_OscConfig+0x358>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b05      	cmp	r3, #5
 8004968:	d10c      	bne.n	8004984 <HAL_RCC_OscConfig+0x340>
 800496a:	4b61      	ldr	r3, [pc, #388]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496e:	4a60      	ldr	r2, [pc, #384]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004970:	f043 0304 	orr.w	r3, r3, #4
 8004974:	6713      	str	r3, [r2, #112]	; 0x70
 8004976:	4b5e      	ldr	r3, [pc, #376]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497a:	4a5d      	ldr	r2, [pc, #372]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6713      	str	r3, [r2, #112]	; 0x70
 8004982:	e00b      	b.n	800499c <HAL_RCC_OscConfig+0x358>
 8004984:	4b5a      	ldr	r3, [pc, #360]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004988:	4a59      	ldr	r2, [pc, #356]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	6713      	str	r3, [r2, #112]	; 0x70
 8004990:	4b57      	ldr	r3, [pc, #348]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	4a56      	ldr	r2, [pc, #344]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004996:	f023 0304 	bic.w	r3, r3, #4
 800499a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d015      	beq.n	80049d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a4:	f7fe fecc 	bl	8003740 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ac:	f7fe fec8 	bl	8003740 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e0d7      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c2:	4b4b      	ldr	r3, [pc, #300]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0ee      	beq.n	80049ac <HAL_RCC_OscConfig+0x368>
 80049ce:	e014      	b.n	80049fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fe feb6 	bl	8003740 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7fe feb2 	bl	8003740 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0c1      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ee:	4b40      	ldr	r3, [pc, #256]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1ee      	bne.n	80049d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d105      	bne.n	8004a0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a00:	4b3b      	ldr	r3, [pc, #236]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	4a3a      	ldr	r2, [pc, #232]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80ad 	beq.w	8004b70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a16:	4b36      	ldr	r3, [pc, #216]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d060      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d145      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2a:	4b33      	ldr	r3, [pc, #204]	; (8004af8 <HAL_RCC_OscConfig+0x4b4>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a30:	f7fe fe86 	bl	8003740 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fe fe82 	bl	8003740 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e093      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4a:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	019b      	lsls	r3, r3, #6
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	061b      	lsls	r3, r3, #24
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	071b      	lsls	r3, r3, #28
 8004a82:	491b      	ldr	r1, [pc, #108]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a88:	4b1b      	ldr	r3, [pc, #108]	; (8004af8 <HAL_RCC_OscConfig+0x4b4>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fe fe57 	bl	8003740 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fe fe53 	bl	8003740 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e064      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aa8:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0f0      	beq.n	8004a96 <HAL_RCC_OscConfig+0x452>
 8004ab4:	e05c      	b.n	8004b70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <HAL_RCC_OscConfig+0x4b4>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fe fe40 	bl	8003740 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac4:	f7fe fe3c 	bl	8003740 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e04d      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_OscConfig+0x4ac>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x480>
 8004ae2:	e045      	b.n	8004b70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d107      	bne.n	8004afc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e040      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40007000 	.word	0x40007000
 8004af8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004afc:	4b1f      	ldr	r3, [pc, #124]	; (8004b7c <HAL_RCC_OscConfig+0x538>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d030      	beq.n	8004b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d129      	bne.n	8004b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d122      	bne.n	8004b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d119      	bne.n	8004b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	3b01      	subs	r3, #1
 8004b46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d10f      	bne.n	8004b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800

08004b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e041      	b.n	8004c16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f839 	bl	8004c1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f000 f9d8 	bl	8004f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d001      	beq.n	8004c4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e04e      	b.n	8004cea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a23      	ldr	r2, [pc, #140]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d022      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x80>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c76:	d01d      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x80>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1f      	ldr	r2, [pc, #124]	; (8004cfc <HAL_TIM_Base_Start_IT+0xc8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d018      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x80>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1e      	ldr	r2, [pc, #120]	; (8004d00 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x80>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1c      	ldr	r2, [pc, #112]	; (8004d04 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00e      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x80>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x80>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a19      	ldr	r2, [pc, #100]	; (8004d0c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_TIM_Base_Start_IT+0x80>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d111      	bne.n	8004cd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b06      	cmp	r3, #6
 8004cc4:	d010      	beq.n	8004ce8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd6:	e007      	b.n	8004ce8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40010000 	.word	0x40010000
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	40000800 	.word	0x40000800
 8004d04:	40000c00 	.word	0x40000c00
 8004d08:	40010400 	.word	0x40010400
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40001800 	.word	0x40001800

08004d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d122      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d11b      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0202 	mvn.w	r2, #2
 8004d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f8ee 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004d5c:	e005      	b.n	8004d6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f8e0 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f8f1 	bl	8004f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d122      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d11b      	bne.n	8004dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0204 	mvn.w	r2, #4
 8004d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f8c4 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004db0:	e005      	b.n	8004dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f8b6 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f8c7 	bl	8004f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b08      	cmp	r3, #8
 8004dd0:	d122      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d11b      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f06f 0208 	mvn.w	r2, #8
 8004de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2204      	movs	r2, #4
 8004dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69db      	ldr	r3, [r3, #28]
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f89a 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004e04:	e005      	b.n	8004e12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f88c 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f89d 	bl	8004f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0310 	and.w	r3, r3, #16
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d122      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d11b      	bne.n	8004e6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f06f 0210 	mvn.w	r2, #16
 8004e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2208      	movs	r2, #8
 8004e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f870 	bl	8004f38 <HAL_TIM_IC_CaptureCallback>
 8004e58:	e005      	b.n	8004e66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f862 	bl	8004f24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f873 	bl	8004f4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d10e      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d107      	bne.n	8004e98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f06f 0201 	mvn.w	r2, #1
 8004e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc fb78 	bl	8001588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea2:	2b80      	cmp	r3, #128	; 0x80
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb0:	2b80      	cmp	r3, #128	; 0x80
 8004eb2:	d107      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f902 	bl	80050c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	d10e      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004edc:	2b40      	cmp	r3, #64	; 0x40
 8004ede:	d107      	bne.n	8004ef0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f838 	bl	8004f60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b20      	cmp	r3, #32
 8004efc:	d10e      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d107      	bne.n	8004f1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0220 	mvn.w	r2, #32
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8cc 	bl	80050b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a40      	ldr	r2, [pc, #256]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f92:	d00f      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a3d      	ldr	r2, [pc, #244]	; (800508c <TIM_Base_SetConfig+0x118>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00b      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a3c      	ldr	r2, [pc, #240]	; (8005090 <TIM_Base_SetConfig+0x11c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d007      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a3b      	ldr	r2, [pc, #236]	; (8005094 <TIM_Base_SetConfig+0x120>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d003      	beq.n	8004fb4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a3a      	ldr	r2, [pc, #232]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d108      	bne.n	8004fc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2f      	ldr	r2, [pc, #188]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d02b      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd4:	d027      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a2c      	ldr	r2, [pc, #176]	; (800508c <TIM_Base_SetConfig+0x118>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d023      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a2b      	ldr	r2, [pc, #172]	; (8005090 <TIM_Base_SetConfig+0x11c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d01f      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <TIM_Base_SetConfig+0x120>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01b      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a29      	ldr	r2, [pc, #164]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d017      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a28      	ldr	r2, [pc, #160]	; (800509c <TIM_Base_SetConfig+0x128>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d013      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a27      	ldr	r2, [pc, #156]	; (80050a0 <TIM_Base_SetConfig+0x12c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00f      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a26      	ldr	r2, [pc, #152]	; (80050a4 <TIM_Base_SetConfig+0x130>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00b      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a25      	ldr	r2, [pc, #148]	; (80050a8 <TIM_Base_SetConfig+0x134>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a24      	ldr	r2, [pc, #144]	; (80050ac <TIM_Base_SetConfig+0x138>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d003      	beq.n	8005026 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a23      	ldr	r2, [pc, #140]	; (80050b0 <TIM_Base_SetConfig+0x13c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d108      	bne.n	8005038 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800502c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a0a      	ldr	r2, [pc, #40]	; (8005088 <TIM_Base_SetConfig+0x114>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_Base_SetConfig+0xf8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <TIM_Base_SetConfig+0x124>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d103      	bne.n	8005074 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	615a      	str	r2, [r3, #20]
}
 800507a:	bf00      	nop
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40010000 	.word	0x40010000
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40010400 	.word	0x40010400
 800509c:	40014000 	.word	0x40014000
 80050a0:	40014400 	.word	0x40014400
 80050a4:	40014800 	.word	0x40014800
 80050a8:	40001800 	.word	0x40001800
 80050ac:	40001c00 	.word	0x40001c00
 80050b0:	40002000 	.word	0x40002000

080050b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e03f      	b.n	800516e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fc faea 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2224      	movs	r2, #36	; 0x24
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800511e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f929 	bl	8005378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b08a      	sub	sp, #40	; 0x28
 800517a:	af02      	add	r7, sp, #8
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	603b      	str	r3, [r7, #0]
 8005182:	4613      	mov	r3, r2
 8005184:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b20      	cmp	r3, #32
 8005194:	d17c      	bne.n	8005290 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <HAL_UART_Transmit+0x2c>
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e075      	b.n	8005292 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_UART_Transmit+0x3e>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e06e      	b.n	8005292 <HAL_UART_Transmit+0x11c>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2221      	movs	r2, #33	; 0x21
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ca:	f7fe fab9 	bl	8003740 <HAL_GetTick>
 80051ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e4:	d108      	bne.n	80051f8 <HAL_UART_Transmit+0x82>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d104      	bne.n	80051f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	e003      	b.n	8005200 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005208:	e02a      	b.n	8005260 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2200      	movs	r2, #0
 8005212:	2180      	movs	r1, #128	; 0x80
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f840 	bl	800529a <UART_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e036      	b.n	8005292 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005238:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	3302      	adds	r3, #2
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	e007      	b.n	8005252 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	3301      	adds	r3, #1
 8005250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1cf      	bne.n	800520a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2200      	movs	r2, #0
 8005272:	2140      	movs	r1, #64	; 0x40
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f810 	bl	800529a <UART_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e006      	b.n	8005292 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3720      	adds	r7, #32
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b090      	sub	sp, #64	; 0x40
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	4613      	mov	r3, r2
 80052a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052aa:	e050      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d04c      	beq.n	800534e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <UART_WaitOnFlagUntilTimeout+0x30>
 80052ba:	f7fe fa41 	bl	8003740 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d241      	bcs.n	800534e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	330c      	adds	r3, #12
 80052d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052ea:	637a      	str	r2, [r7, #52]	; 0x34
 80052ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e5      	bne.n	80052ca <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3314      	adds	r3, #20
 8005304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	613b      	str	r3, [r7, #16]
   return(result);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	63bb      	str	r3, [r7, #56]	; 0x38
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3314      	adds	r3, #20
 800531c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800531e:	623a      	str	r2, [r7, #32]
 8005320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	69f9      	ldr	r1, [r7, #28]
 8005324:	6a3a      	ldr	r2, [r7, #32]
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	61bb      	str	r3, [r7, #24]
   return(result);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e5      	bne.n	80052fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e00f      	b.n	800536e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	bf0c      	ite	eq
 800535e:	2301      	moveq	r3, #1
 8005360:	2300      	movne	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	429a      	cmp	r2, r3
 800536a:	d09f      	beq.n	80052ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3740      	adds	r7, #64	; 0x40
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537c:	b09f      	sub	sp, #124	; 0x7c
 800537e:	af00      	add	r7, sp, #0
 8005380:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800538c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800538e:	68d9      	ldr	r1, [r3, #12]
 8005390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	ea40 0301 	orr.w	r3, r0, r1
 8005398:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800539a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	431a      	orrs	r2, r3
 80053aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80053b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053bc:	f021 010c 	bic.w	r1, r1, #12
 80053c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053c6:	430b      	orrs	r3, r1
 80053c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053d6:	6999      	ldr	r1, [r3, #24]
 80053d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	ea40 0301 	orr.w	r3, r0, r1
 80053e0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	4bc5      	ldr	r3, [pc, #788]	; (80056fc <UART_SetConfig+0x384>)
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d004      	beq.n	80053f6 <UART_SetConfig+0x7e>
 80053ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4bc3      	ldr	r3, [pc, #780]	; (8005700 <UART_SetConfig+0x388>)
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d103      	bne.n	80053fe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053f6:	f7fe ff2d 	bl	8004254 <HAL_RCC_GetPCLK2Freq>
 80053fa:	6778      	str	r0, [r7, #116]	; 0x74
 80053fc:	e002      	b.n	8005404 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053fe:	f7fe ff15 	bl	800422c <HAL_RCC_GetPCLK1Freq>
 8005402:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540c:	f040 80b6 	bne.w	800557c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005410:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005412:	461c      	mov	r4, r3
 8005414:	f04f 0500 	mov.w	r5, #0
 8005418:	4622      	mov	r2, r4
 800541a:	462b      	mov	r3, r5
 800541c:	1891      	adds	r1, r2, r2
 800541e:	6439      	str	r1, [r7, #64]	; 0x40
 8005420:	415b      	adcs	r3, r3
 8005422:	647b      	str	r3, [r7, #68]	; 0x44
 8005424:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005428:	1912      	adds	r2, r2, r4
 800542a:	eb45 0303 	adc.w	r3, r5, r3
 800542e:	f04f 0000 	mov.w	r0, #0
 8005432:	f04f 0100 	mov.w	r1, #0
 8005436:	00d9      	lsls	r1, r3, #3
 8005438:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800543c:	00d0      	lsls	r0, r2, #3
 800543e:	4602      	mov	r2, r0
 8005440:	460b      	mov	r3, r1
 8005442:	1911      	adds	r1, r2, r4
 8005444:	6639      	str	r1, [r7, #96]	; 0x60
 8005446:	416b      	adcs	r3, r5
 8005448:	667b      	str	r3, [r7, #100]	; 0x64
 800544a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	461a      	mov	r2, r3
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	1891      	adds	r1, r2, r2
 8005456:	63b9      	str	r1, [r7, #56]	; 0x38
 8005458:	415b      	adcs	r3, r3
 800545a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800545c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005460:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005464:	f7fb fbc0 	bl	8000be8 <__aeabi_uldivmod>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4ba5      	ldr	r3, [pc, #660]	; (8005704 <UART_SetConfig+0x38c>)
 800546e:	fba3 2302 	umull	r2, r3, r3, r2
 8005472:	095b      	lsrs	r3, r3, #5
 8005474:	011e      	lsls	r6, r3, #4
 8005476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005478:	461c      	mov	r4, r3
 800547a:	f04f 0500 	mov.w	r5, #0
 800547e:	4622      	mov	r2, r4
 8005480:	462b      	mov	r3, r5
 8005482:	1891      	adds	r1, r2, r2
 8005484:	6339      	str	r1, [r7, #48]	; 0x30
 8005486:	415b      	adcs	r3, r3
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
 800548a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800548e:	1912      	adds	r2, r2, r4
 8005490:	eb45 0303 	adc.w	r3, r5, r3
 8005494:	f04f 0000 	mov.w	r0, #0
 8005498:	f04f 0100 	mov.w	r1, #0
 800549c:	00d9      	lsls	r1, r3, #3
 800549e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054a2:	00d0      	lsls	r0, r2, #3
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	1911      	adds	r1, r2, r4
 80054aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80054ac:	416b      	adcs	r3, r5
 80054ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	461a      	mov	r2, r3
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	1891      	adds	r1, r2, r2
 80054bc:	62b9      	str	r1, [r7, #40]	; 0x28
 80054be:	415b      	adcs	r3, r3
 80054c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054c6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80054ca:	f7fb fb8d 	bl	8000be8 <__aeabi_uldivmod>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4b8c      	ldr	r3, [pc, #560]	; (8005704 <UART_SetConfig+0x38c>)
 80054d4:	fba3 1302 	umull	r1, r3, r3, r2
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	2164      	movs	r1, #100	; 0x64
 80054dc:	fb01 f303 	mul.w	r3, r1, r3
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	3332      	adds	r3, #50	; 0x32
 80054e6:	4a87      	ldr	r2, [pc, #540]	; (8005704 <UART_SetConfig+0x38c>)
 80054e8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054f4:	441e      	add	r6, r3
 80054f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054f8:	4618      	mov	r0, r3
 80054fa:	f04f 0100 	mov.w	r1, #0
 80054fe:	4602      	mov	r2, r0
 8005500:	460b      	mov	r3, r1
 8005502:	1894      	adds	r4, r2, r2
 8005504:	623c      	str	r4, [r7, #32]
 8005506:	415b      	adcs	r3, r3
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
 800550a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800550e:	1812      	adds	r2, r2, r0
 8005510:	eb41 0303 	adc.w	r3, r1, r3
 8005514:	f04f 0400 	mov.w	r4, #0
 8005518:	f04f 0500 	mov.w	r5, #0
 800551c:	00dd      	lsls	r5, r3, #3
 800551e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005522:	00d4      	lsls	r4, r2, #3
 8005524:	4622      	mov	r2, r4
 8005526:	462b      	mov	r3, r5
 8005528:	1814      	adds	r4, r2, r0
 800552a:	653c      	str	r4, [r7, #80]	; 0x50
 800552c:	414b      	adcs	r3, r1
 800552e:	657b      	str	r3, [r7, #84]	; 0x54
 8005530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	461a      	mov	r2, r3
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	1891      	adds	r1, r2, r2
 800553c:	61b9      	str	r1, [r7, #24]
 800553e:	415b      	adcs	r3, r3
 8005540:	61fb      	str	r3, [r7, #28]
 8005542:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005546:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800554a:	f7fb fb4d 	bl	8000be8 <__aeabi_uldivmod>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4b6c      	ldr	r3, [pc, #432]	; (8005704 <UART_SetConfig+0x38c>)
 8005554:	fba3 1302 	umull	r1, r3, r3, r2
 8005558:	095b      	lsrs	r3, r3, #5
 800555a:	2164      	movs	r1, #100	; 0x64
 800555c:	fb01 f303 	mul.w	r3, r1, r3
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	3332      	adds	r3, #50	; 0x32
 8005566:	4a67      	ldr	r2, [pc, #412]	; (8005704 <UART_SetConfig+0x38c>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	f003 0207 	and.w	r2, r3, #7
 8005572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4432      	add	r2, r6
 8005578:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800557a:	e0b9      	b.n	80056f0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800557c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800557e:	461c      	mov	r4, r3
 8005580:	f04f 0500 	mov.w	r5, #0
 8005584:	4622      	mov	r2, r4
 8005586:	462b      	mov	r3, r5
 8005588:	1891      	adds	r1, r2, r2
 800558a:	6139      	str	r1, [r7, #16]
 800558c:	415b      	adcs	r3, r3
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005594:	1912      	adds	r2, r2, r4
 8005596:	eb45 0303 	adc.w	r3, r5, r3
 800559a:	f04f 0000 	mov.w	r0, #0
 800559e:	f04f 0100 	mov.w	r1, #0
 80055a2:	00d9      	lsls	r1, r3, #3
 80055a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055a8:	00d0      	lsls	r0, r2, #3
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	eb12 0804 	adds.w	r8, r2, r4
 80055b2:	eb43 0905 	adc.w	r9, r3, r5
 80055b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f04f 0100 	mov.w	r1, #0
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	f04f 0300 	mov.w	r3, #0
 80055c8:	008b      	lsls	r3, r1, #2
 80055ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055ce:	0082      	lsls	r2, r0, #2
 80055d0:	4640      	mov	r0, r8
 80055d2:	4649      	mov	r1, r9
 80055d4:	f7fb fb08 	bl	8000be8 <__aeabi_uldivmod>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4b49      	ldr	r3, [pc, #292]	; (8005704 <UART_SetConfig+0x38c>)
 80055de:	fba3 2302 	umull	r2, r3, r3, r2
 80055e2:	095b      	lsrs	r3, r3, #5
 80055e4:	011e      	lsls	r6, r3, #4
 80055e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055e8:	4618      	mov	r0, r3
 80055ea:	f04f 0100 	mov.w	r1, #0
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	1894      	adds	r4, r2, r2
 80055f4:	60bc      	str	r4, [r7, #8]
 80055f6:	415b      	adcs	r3, r3
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055fe:	1812      	adds	r2, r2, r0
 8005600:	eb41 0303 	adc.w	r3, r1, r3
 8005604:	f04f 0400 	mov.w	r4, #0
 8005608:	f04f 0500 	mov.w	r5, #0
 800560c:	00dd      	lsls	r5, r3, #3
 800560e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005612:	00d4      	lsls	r4, r2, #3
 8005614:	4622      	mov	r2, r4
 8005616:	462b      	mov	r3, r5
 8005618:	1814      	adds	r4, r2, r0
 800561a:	64bc      	str	r4, [r7, #72]	; 0x48
 800561c:	414b      	adcs	r3, r1
 800561e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	4618      	mov	r0, r3
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	008b      	lsls	r3, r1, #2
 8005634:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005638:	0082      	lsls	r2, r0, #2
 800563a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800563e:	f7fb fad3 	bl	8000be8 <__aeabi_uldivmod>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4b2f      	ldr	r3, [pc, #188]	; (8005704 <UART_SetConfig+0x38c>)
 8005648:	fba3 1302 	umull	r1, r3, r3, r2
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	2164      	movs	r1, #100	; 0x64
 8005650:	fb01 f303 	mul.w	r3, r1, r3
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	3332      	adds	r3, #50	; 0x32
 800565a:	4a2a      	ldr	r2, [pc, #168]	; (8005704 <UART_SetConfig+0x38c>)
 800565c:	fba2 2303 	umull	r2, r3, r2, r3
 8005660:	095b      	lsrs	r3, r3, #5
 8005662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005666:	441e      	add	r6, r3
 8005668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800566a:	4618      	mov	r0, r3
 800566c:	f04f 0100 	mov.w	r1, #0
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	1894      	adds	r4, r2, r2
 8005676:	603c      	str	r4, [r7, #0]
 8005678:	415b      	adcs	r3, r3
 800567a:	607b      	str	r3, [r7, #4]
 800567c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005680:	1812      	adds	r2, r2, r0
 8005682:	eb41 0303 	adc.w	r3, r1, r3
 8005686:	f04f 0400 	mov.w	r4, #0
 800568a:	f04f 0500 	mov.w	r5, #0
 800568e:	00dd      	lsls	r5, r3, #3
 8005690:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005694:	00d4      	lsls	r4, r2, #3
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	eb12 0a00 	adds.w	sl, r2, r0
 800569e:	eb43 0b01 	adc.w	fp, r3, r1
 80056a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f04f 0100 	mov.w	r1, #0
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	008b      	lsls	r3, r1, #2
 80056b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056ba:	0082      	lsls	r2, r0, #2
 80056bc:	4650      	mov	r0, sl
 80056be:	4659      	mov	r1, fp
 80056c0:	f7fb fa92 	bl	8000be8 <__aeabi_uldivmod>
 80056c4:	4602      	mov	r2, r0
 80056c6:	460b      	mov	r3, r1
 80056c8:	4b0e      	ldr	r3, [pc, #56]	; (8005704 <UART_SetConfig+0x38c>)
 80056ca:	fba3 1302 	umull	r1, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	2164      	movs	r1, #100	; 0x64
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	3332      	adds	r3, #50	; 0x32
 80056dc:	4a09      	ldr	r2, [pc, #36]	; (8005704 <UART_SetConfig+0x38c>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	f003 020f 	and.w	r2, r3, #15
 80056e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4432      	add	r2, r6
 80056ee:	609a      	str	r2, [r3, #8]
}
 80056f0:	bf00      	nop
 80056f2:	377c      	adds	r7, #124	; 0x7c
 80056f4:	46bd      	mov	sp, r7
 80056f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fa:	bf00      	nop
 80056fc:	40011000 	.word	0x40011000
 8005700:	40011400 	.word	0x40011400
 8005704:	51eb851f 	.word	0x51eb851f

08005708 <__cxa_pure_virtual>:
 8005708:	b508      	push	{r3, lr}
 800570a:	f000 f80d 	bl	8005728 <_ZSt9terminatev>

0800570e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800570e:	b508      	push	{r3, lr}
 8005710:	4780      	blx	r0
 8005712:	f000 f80e 	bl	8005732 <abort>
	...

08005718 <_ZSt13get_terminatev>:
 8005718:	4b02      	ldr	r3, [pc, #8]	; (8005724 <_ZSt13get_terminatev+0xc>)
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	f3bf 8f5b 	dmb	ish
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	2000000c 	.word	0x2000000c

08005728 <_ZSt9terminatev>:
 8005728:	b508      	push	{r3, lr}
 800572a:	f7ff fff5 	bl	8005718 <_ZSt13get_terminatev>
 800572e:	f7ff ffee 	bl	800570e <_ZN10__cxxabiv111__terminateEPFvvE>

08005732 <abort>:
 8005732:	b508      	push	{r3, lr}
 8005734:	2006      	movs	r0, #6
 8005736:	f000 fd97 	bl	8006268 <raise>
 800573a:	2001      	movs	r0, #1
 800573c:	f7fc f8be 	bl	80018bc <_exit>

08005740 <__errno>:
 8005740:	4b01      	ldr	r3, [pc, #4]	; (8005748 <__errno+0x8>)
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000010 	.word	0x20000010

0800574c <__libc_init_array>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4d0d      	ldr	r5, [pc, #52]	; (8005784 <__libc_init_array+0x38>)
 8005750:	4c0d      	ldr	r4, [pc, #52]	; (8005788 <__libc_init_array+0x3c>)
 8005752:	1b64      	subs	r4, r4, r5
 8005754:	10a4      	asrs	r4, r4, #2
 8005756:	2600      	movs	r6, #0
 8005758:	42a6      	cmp	r6, r4
 800575a:	d109      	bne.n	8005770 <__libc_init_array+0x24>
 800575c:	4d0b      	ldr	r5, [pc, #44]	; (800578c <__libc_init_array+0x40>)
 800575e:	4c0c      	ldr	r4, [pc, #48]	; (8005790 <__libc_init_array+0x44>)
 8005760:	f002 fcea 	bl	8008138 <_init>
 8005764:	1b64      	subs	r4, r4, r5
 8005766:	10a4      	asrs	r4, r4, #2
 8005768:	2600      	movs	r6, #0
 800576a:	42a6      	cmp	r6, r4
 800576c:	d105      	bne.n	800577a <__libc_init_array+0x2e>
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	f855 3b04 	ldr.w	r3, [r5], #4
 8005774:	4798      	blx	r3
 8005776:	3601      	adds	r6, #1
 8005778:	e7ee      	b.n	8005758 <__libc_init_array+0xc>
 800577a:	f855 3b04 	ldr.w	r3, [r5], #4
 800577e:	4798      	blx	r3
 8005780:	3601      	adds	r6, #1
 8005782:	e7f2      	b.n	800576a <__libc_init_array+0x1e>
 8005784:	08008ec0 	.word	0x08008ec0
 8005788:	08008ec0 	.word	0x08008ec0
 800578c:	08008ec0 	.word	0x08008ec0
 8005790:	08008ecc 	.word	0x08008ecc

08005794 <malloc>:
 8005794:	4b02      	ldr	r3, [pc, #8]	; (80057a0 <malloc+0xc>)
 8005796:	4601      	mov	r1, r0
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	f000 b869 	b.w	8005870 <_malloc_r>
 800579e:	bf00      	nop
 80057a0:	20000010 	.word	0x20000010

080057a4 <memcpy>:
 80057a4:	440a      	add	r2, r1
 80057a6:	4291      	cmp	r1, r2
 80057a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057ac:	d100      	bne.n	80057b0 <memcpy+0xc>
 80057ae:	4770      	bx	lr
 80057b0:	b510      	push	{r4, lr}
 80057b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ba:	4291      	cmp	r1, r2
 80057bc:	d1f9      	bne.n	80057b2 <memcpy+0xe>
 80057be:	bd10      	pop	{r4, pc}

080057c0 <memset>:
 80057c0:	4402      	add	r2, r0
 80057c2:	4603      	mov	r3, r0
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d100      	bne.n	80057ca <memset+0xa>
 80057c8:	4770      	bx	lr
 80057ca:	f803 1b01 	strb.w	r1, [r3], #1
 80057ce:	e7f9      	b.n	80057c4 <memset+0x4>

080057d0 <_free_r>:
 80057d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057d2:	2900      	cmp	r1, #0
 80057d4:	d048      	beq.n	8005868 <_free_r+0x98>
 80057d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057da:	9001      	str	r0, [sp, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f1a1 0404 	sub.w	r4, r1, #4
 80057e2:	bfb8      	it	lt
 80057e4:	18e4      	addlt	r4, r4, r3
 80057e6:	f001 fc1f 	bl	8007028 <__malloc_lock>
 80057ea:	4a20      	ldr	r2, [pc, #128]	; (800586c <_free_r+0x9c>)
 80057ec:	9801      	ldr	r0, [sp, #4]
 80057ee:	6813      	ldr	r3, [r2, #0]
 80057f0:	4615      	mov	r5, r2
 80057f2:	b933      	cbnz	r3, 8005802 <_free_r+0x32>
 80057f4:	6063      	str	r3, [r4, #4]
 80057f6:	6014      	str	r4, [r2, #0]
 80057f8:	b003      	add	sp, #12
 80057fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057fe:	f001 bc19 	b.w	8007034 <__malloc_unlock>
 8005802:	42a3      	cmp	r3, r4
 8005804:	d90b      	bls.n	800581e <_free_r+0x4e>
 8005806:	6821      	ldr	r1, [r4, #0]
 8005808:	1862      	adds	r2, r4, r1
 800580a:	4293      	cmp	r3, r2
 800580c:	bf04      	itt	eq
 800580e:	681a      	ldreq	r2, [r3, #0]
 8005810:	685b      	ldreq	r3, [r3, #4]
 8005812:	6063      	str	r3, [r4, #4]
 8005814:	bf04      	itt	eq
 8005816:	1852      	addeq	r2, r2, r1
 8005818:	6022      	streq	r2, [r4, #0]
 800581a:	602c      	str	r4, [r5, #0]
 800581c:	e7ec      	b.n	80057f8 <_free_r+0x28>
 800581e:	461a      	mov	r2, r3
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	b10b      	cbz	r3, 8005828 <_free_r+0x58>
 8005824:	42a3      	cmp	r3, r4
 8005826:	d9fa      	bls.n	800581e <_free_r+0x4e>
 8005828:	6811      	ldr	r1, [r2, #0]
 800582a:	1855      	adds	r5, r2, r1
 800582c:	42a5      	cmp	r5, r4
 800582e:	d10b      	bne.n	8005848 <_free_r+0x78>
 8005830:	6824      	ldr	r4, [r4, #0]
 8005832:	4421      	add	r1, r4
 8005834:	1854      	adds	r4, r2, r1
 8005836:	42a3      	cmp	r3, r4
 8005838:	6011      	str	r1, [r2, #0]
 800583a:	d1dd      	bne.n	80057f8 <_free_r+0x28>
 800583c:	681c      	ldr	r4, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	6053      	str	r3, [r2, #4]
 8005842:	4421      	add	r1, r4
 8005844:	6011      	str	r1, [r2, #0]
 8005846:	e7d7      	b.n	80057f8 <_free_r+0x28>
 8005848:	d902      	bls.n	8005850 <_free_r+0x80>
 800584a:	230c      	movs	r3, #12
 800584c:	6003      	str	r3, [r0, #0]
 800584e:	e7d3      	b.n	80057f8 <_free_r+0x28>
 8005850:	6825      	ldr	r5, [r4, #0]
 8005852:	1961      	adds	r1, r4, r5
 8005854:	428b      	cmp	r3, r1
 8005856:	bf04      	itt	eq
 8005858:	6819      	ldreq	r1, [r3, #0]
 800585a:	685b      	ldreq	r3, [r3, #4]
 800585c:	6063      	str	r3, [r4, #4]
 800585e:	bf04      	itt	eq
 8005860:	1949      	addeq	r1, r1, r5
 8005862:	6021      	streq	r1, [r4, #0]
 8005864:	6054      	str	r4, [r2, #4]
 8005866:	e7c7      	b.n	80057f8 <_free_r+0x28>
 8005868:	b003      	add	sp, #12
 800586a:	bd30      	pop	{r4, r5, pc}
 800586c:	2000055c 	.word	0x2000055c

08005870 <_malloc_r>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	1ccd      	adds	r5, r1, #3
 8005874:	f025 0503 	bic.w	r5, r5, #3
 8005878:	3508      	adds	r5, #8
 800587a:	2d0c      	cmp	r5, #12
 800587c:	bf38      	it	cc
 800587e:	250c      	movcc	r5, #12
 8005880:	2d00      	cmp	r5, #0
 8005882:	4606      	mov	r6, r0
 8005884:	db01      	blt.n	800588a <_malloc_r+0x1a>
 8005886:	42a9      	cmp	r1, r5
 8005888:	d903      	bls.n	8005892 <_malloc_r+0x22>
 800588a:	230c      	movs	r3, #12
 800588c:	6033      	str	r3, [r6, #0]
 800588e:	2000      	movs	r0, #0
 8005890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005892:	f001 fbc9 	bl	8007028 <__malloc_lock>
 8005896:	4921      	ldr	r1, [pc, #132]	; (800591c <_malloc_r+0xac>)
 8005898:	680a      	ldr	r2, [r1, #0]
 800589a:	4614      	mov	r4, r2
 800589c:	b99c      	cbnz	r4, 80058c6 <_malloc_r+0x56>
 800589e:	4f20      	ldr	r7, [pc, #128]	; (8005920 <_malloc_r+0xb0>)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	b923      	cbnz	r3, 80058ae <_malloc_r+0x3e>
 80058a4:	4621      	mov	r1, r4
 80058a6:	4630      	mov	r0, r6
 80058a8:	f000 fca6 	bl	80061f8 <_sbrk_r>
 80058ac:	6038      	str	r0, [r7, #0]
 80058ae:	4629      	mov	r1, r5
 80058b0:	4630      	mov	r0, r6
 80058b2:	f000 fca1 	bl	80061f8 <_sbrk_r>
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	d123      	bne.n	8005902 <_malloc_r+0x92>
 80058ba:	230c      	movs	r3, #12
 80058bc:	6033      	str	r3, [r6, #0]
 80058be:	4630      	mov	r0, r6
 80058c0:	f001 fbb8 	bl	8007034 <__malloc_unlock>
 80058c4:	e7e3      	b.n	800588e <_malloc_r+0x1e>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	1b5b      	subs	r3, r3, r5
 80058ca:	d417      	bmi.n	80058fc <_malloc_r+0x8c>
 80058cc:	2b0b      	cmp	r3, #11
 80058ce:	d903      	bls.n	80058d8 <_malloc_r+0x68>
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	441c      	add	r4, r3
 80058d4:	6025      	str	r5, [r4, #0]
 80058d6:	e004      	b.n	80058e2 <_malloc_r+0x72>
 80058d8:	6863      	ldr	r3, [r4, #4]
 80058da:	42a2      	cmp	r2, r4
 80058dc:	bf0c      	ite	eq
 80058de:	600b      	streq	r3, [r1, #0]
 80058e0:	6053      	strne	r3, [r2, #4]
 80058e2:	4630      	mov	r0, r6
 80058e4:	f001 fba6 	bl	8007034 <__malloc_unlock>
 80058e8:	f104 000b 	add.w	r0, r4, #11
 80058ec:	1d23      	adds	r3, r4, #4
 80058ee:	f020 0007 	bic.w	r0, r0, #7
 80058f2:	1ac2      	subs	r2, r0, r3
 80058f4:	d0cc      	beq.n	8005890 <_malloc_r+0x20>
 80058f6:	1a1b      	subs	r3, r3, r0
 80058f8:	50a3      	str	r3, [r4, r2]
 80058fa:	e7c9      	b.n	8005890 <_malloc_r+0x20>
 80058fc:	4622      	mov	r2, r4
 80058fe:	6864      	ldr	r4, [r4, #4]
 8005900:	e7cc      	b.n	800589c <_malloc_r+0x2c>
 8005902:	1cc4      	adds	r4, r0, #3
 8005904:	f024 0403 	bic.w	r4, r4, #3
 8005908:	42a0      	cmp	r0, r4
 800590a:	d0e3      	beq.n	80058d4 <_malloc_r+0x64>
 800590c:	1a21      	subs	r1, r4, r0
 800590e:	4630      	mov	r0, r6
 8005910:	f000 fc72 	bl	80061f8 <_sbrk_r>
 8005914:	3001      	adds	r0, #1
 8005916:	d1dd      	bne.n	80058d4 <_malloc_r+0x64>
 8005918:	e7cf      	b.n	80058ba <_malloc_r+0x4a>
 800591a:	bf00      	nop
 800591c:	2000055c 	.word	0x2000055c
 8005920:	20000560 	.word	0x20000560

08005924 <__cvt>:
 8005924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005928:	ec55 4b10 	vmov	r4, r5, d0
 800592c:	2d00      	cmp	r5, #0
 800592e:	460e      	mov	r6, r1
 8005930:	4619      	mov	r1, r3
 8005932:	462b      	mov	r3, r5
 8005934:	bfbb      	ittet	lt
 8005936:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800593a:	461d      	movlt	r5, r3
 800593c:	2300      	movge	r3, #0
 800593e:	232d      	movlt	r3, #45	; 0x2d
 8005940:	700b      	strb	r3, [r1, #0]
 8005942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005944:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005948:	4691      	mov	r9, r2
 800594a:	f023 0820 	bic.w	r8, r3, #32
 800594e:	bfbc      	itt	lt
 8005950:	4622      	movlt	r2, r4
 8005952:	4614      	movlt	r4, r2
 8005954:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005958:	d005      	beq.n	8005966 <__cvt+0x42>
 800595a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800595e:	d100      	bne.n	8005962 <__cvt+0x3e>
 8005960:	3601      	adds	r6, #1
 8005962:	2102      	movs	r1, #2
 8005964:	e000      	b.n	8005968 <__cvt+0x44>
 8005966:	2103      	movs	r1, #3
 8005968:	ab03      	add	r3, sp, #12
 800596a:	9301      	str	r3, [sp, #4]
 800596c:	ab02      	add	r3, sp, #8
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	ec45 4b10 	vmov	d0, r4, r5
 8005974:	4653      	mov	r3, sl
 8005976:	4632      	mov	r2, r6
 8005978:	f000 fd3e 	bl	80063f8 <_dtoa_r>
 800597c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005980:	4607      	mov	r7, r0
 8005982:	d102      	bne.n	800598a <__cvt+0x66>
 8005984:	f019 0f01 	tst.w	r9, #1
 8005988:	d022      	beq.n	80059d0 <__cvt+0xac>
 800598a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800598e:	eb07 0906 	add.w	r9, r7, r6
 8005992:	d110      	bne.n	80059b6 <__cvt+0x92>
 8005994:	783b      	ldrb	r3, [r7, #0]
 8005996:	2b30      	cmp	r3, #48	; 0x30
 8005998:	d10a      	bne.n	80059b0 <__cvt+0x8c>
 800599a:	2200      	movs	r2, #0
 800599c:	2300      	movs	r3, #0
 800599e:	4620      	mov	r0, r4
 80059a0:	4629      	mov	r1, r5
 80059a2:	f7fb f8b1 	bl	8000b08 <__aeabi_dcmpeq>
 80059a6:	b918      	cbnz	r0, 80059b0 <__cvt+0x8c>
 80059a8:	f1c6 0601 	rsb	r6, r6, #1
 80059ac:	f8ca 6000 	str.w	r6, [sl]
 80059b0:	f8da 3000 	ldr.w	r3, [sl]
 80059b4:	4499      	add	r9, r3
 80059b6:	2200      	movs	r2, #0
 80059b8:	2300      	movs	r3, #0
 80059ba:	4620      	mov	r0, r4
 80059bc:	4629      	mov	r1, r5
 80059be:	f7fb f8a3 	bl	8000b08 <__aeabi_dcmpeq>
 80059c2:	b108      	cbz	r0, 80059c8 <__cvt+0xa4>
 80059c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80059c8:	2230      	movs	r2, #48	; 0x30
 80059ca:	9b03      	ldr	r3, [sp, #12]
 80059cc:	454b      	cmp	r3, r9
 80059ce:	d307      	bcc.n	80059e0 <__cvt+0xbc>
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059d4:	1bdb      	subs	r3, r3, r7
 80059d6:	4638      	mov	r0, r7
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	b004      	add	sp, #16
 80059dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e0:	1c59      	adds	r1, r3, #1
 80059e2:	9103      	str	r1, [sp, #12]
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e7f0      	b.n	80059ca <__cvt+0xa6>

080059e8 <__exponent>:
 80059e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ea:	4603      	mov	r3, r0
 80059ec:	2900      	cmp	r1, #0
 80059ee:	bfb8      	it	lt
 80059f0:	4249      	neglt	r1, r1
 80059f2:	f803 2b02 	strb.w	r2, [r3], #2
 80059f6:	bfb4      	ite	lt
 80059f8:	222d      	movlt	r2, #45	; 0x2d
 80059fa:	222b      	movge	r2, #43	; 0x2b
 80059fc:	2909      	cmp	r1, #9
 80059fe:	7042      	strb	r2, [r0, #1]
 8005a00:	dd2a      	ble.n	8005a58 <__exponent+0x70>
 8005a02:	f10d 0407 	add.w	r4, sp, #7
 8005a06:	46a4      	mov	ip, r4
 8005a08:	270a      	movs	r7, #10
 8005a0a:	46a6      	mov	lr, r4
 8005a0c:	460a      	mov	r2, r1
 8005a0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005a12:	fb07 1516 	mls	r5, r7, r6, r1
 8005a16:	3530      	adds	r5, #48	; 0x30
 8005a18:	2a63      	cmp	r2, #99	; 0x63
 8005a1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005a1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a22:	4631      	mov	r1, r6
 8005a24:	dcf1      	bgt.n	8005a0a <__exponent+0x22>
 8005a26:	3130      	adds	r1, #48	; 0x30
 8005a28:	f1ae 0502 	sub.w	r5, lr, #2
 8005a2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a30:	1c44      	adds	r4, r0, #1
 8005a32:	4629      	mov	r1, r5
 8005a34:	4561      	cmp	r1, ip
 8005a36:	d30a      	bcc.n	8005a4e <__exponent+0x66>
 8005a38:	f10d 0209 	add.w	r2, sp, #9
 8005a3c:	eba2 020e 	sub.w	r2, r2, lr
 8005a40:	4565      	cmp	r5, ip
 8005a42:	bf88      	it	hi
 8005a44:	2200      	movhi	r2, #0
 8005a46:	4413      	add	r3, r2
 8005a48:	1a18      	subs	r0, r3, r0
 8005a4a:	b003      	add	sp, #12
 8005a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a56:	e7ed      	b.n	8005a34 <__exponent+0x4c>
 8005a58:	2330      	movs	r3, #48	; 0x30
 8005a5a:	3130      	adds	r1, #48	; 0x30
 8005a5c:	7083      	strb	r3, [r0, #2]
 8005a5e:	70c1      	strb	r1, [r0, #3]
 8005a60:	1d03      	adds	r3, r0, #4
 8005a62:	e7f1      	b.n	8005a48 <__exponent+0x60>

08005a64 <_printf_float>:
 8005a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a68:	ed2d 8b02 	vpush	{d8}
 8005a6c:	b08d      	sub	sp, #52	; 0x34
 8005a6e:	460c      	mov	r4, r1
 8005a70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a74:	4616      	mov	r6, r2
 8005a76:	461f      	mov	r7, r3
 8005a78:	4605      	mov	r5, r0
 8005a7a:	f001 fabb 	bl	8006ff4 <_localeconv_r>
 8005a7e:	f8d0 a000 	ldr.w	sl, [r0]
 8005a82:	4650      	mov	r0, sl
 8005a84:	f7fa fbc4 	bl	8000210 <strlen>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	9305      	str	r3, [sp, #20]
 8005a90:	f8d8 3000 	ldr.w	r3, [r8]
 8005a94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a98:	3307      	adds	r3, #7
 8005a9a:	f023 0307 	bic.w	r3, r3, #7
 8005a9e:	f103 0208 	add.w	r2, r3, #8
 8005aa2:	f8c8 2000 	str.w	r2, [r8]
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005aae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005ab2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ab6:	9307      	str	r3, [sp, #28]
 8005ab8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005abc:	ee08 0a10 	vmov	s16, r0
 8005ac0:	4b9f      	ldr	r3, [pc, #636]	; (8005d40 <_printf_float+0x2dc>)
 8005ac2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aca:	f7fb f84f 	bl	8000b6c <__aeabi_dcmpun>
 8005ace:	bb88      	cbnz	r0, 8005b34 <_printf_float+0xd0>
 8005ad0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ad4:	4b9a      	ldr	r3, [pc, #616]	; (8005d40 <_printf_float+0x2dc>)
 8005ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ada:	f7fb f829 	bl	8000b30 <__aeabi_dcmple>
 8005ade:	bb48      	cbnz	r0, 8005b34 <_printf_float+0xd0>
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	4640      	mov	r0, r8
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	f7fb f818 	bl	8000b1c <__aeabi_dcmplt>
 8005aec:	b110      	cbz	r0, 8005af4 <_printf_float+0x90>
 8005aee:	232d      	movs	r3, #45	; 0x2d
 8005af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af4:	4b93      	ldr	r3, [pc, #588]	; (8005d44 <_printf_float+0x2e0>)
 8005af6:	4894      	ldr	r0, [pc, #592]	; (8005d48 <_printf_float+0x2e4>)
 8005af8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005afc:	bf94      	ite	ls
 8005afe:	4698      	movls	r8, r3
 8005b00:	4680      	movhi	r8, r0
 8005b02:	2303      	movs	r3, #3
 8005b04:	6123      	str	r3, [r4, #16]
 8005b06:	9b05      	ldr	r3, [sp, #20]
 8005b08:	f023 0204 	bic.w	r2, r3, #4
 8005b0c:	6022      	str	r2, [r4, #0]
 8005b0e:	f04f 0900 	mov.w	r9, #0
 8005b12:	9700      	str	r7, [sp, #0]
 8005b14:	4633      	mov	r3, r6
 8005b16:	aa0b      	add	r2, sp, #44	; 0x2c
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f000 f9d8 	bl	8005ed0 <_printf_common>
 8005b20:	3001      	adds	r0, #1
 8005b22:	f040 8090 	bne.w	8005c46 <_printf_float+0x1e2>
 8005b26:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2a:	b00d      	add	sp, #52	; 0x34
 8005b2c:	ecbd 8b02 	vpop	{d8}
 8005b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b34:	4642      	mov	r2, r8
 8005b36:	464b      	mov	r3, r9
 8005b38:	4640      	mov	r0, r8
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	f7fb f816 	bl	8000b6c <__aeabi_dcmpun>
 8005b40:	b140      	cbz	r0, 8005b54 <_printf_float+0xf0>
 8005b42:	464b      	mov	r3, r9
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	bfbc      	itt	lt
 8005b48:	232d      	movlt	r3, #45	; 0x2d
 8005b4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b4e:	487f      	ldr	r0, [pc, #508]	; (8005d4c <_printf_float+0x2e8>)
 8005b50:	4b7f      	ldr	r3, [pc, #508]	; (8005d50 <_printf_float+0x2ec>)
 8005b52:	e7d1      	b.n	8005af8 <_printf_float+0x94>
 8005b54:	6863      	ldr	r3, [r4, #4]
 8005b56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b5a:	9206      	str	r2, [sp, #24]
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	d13f      	bne.n	8005be0 <_printf_float+0x17c>
 8005b60:	2306      	movs	r3, #6
 8005b62:	6063      	str	r3, [r4, #4]
 8005b64:	9b05      	ldr	r3, [sp, #20]
 8005b66:	6861      	ldr	r1, [r4, #4]
 8005b68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	9303      	str	r3, [sp, #12]
 8005b70:	ab0a      	add	r3, sp, #40	; 0x28
 8005b72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b76:	ab09      	add	r3, sp, #36	; 0x24
 8005b78:	ec49 8b10 	vmov	d0, r8, r9
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	6022      	str	r2, [r4, #0]
 8005b80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b84:	4628      	mov	r0, r5
 8005b86:	f7ff fecd 	bl	8005924 <__cvt>
 8005b8a:	9b06      	ldr	r3, [sp, #24]
 8005b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b8e:	2b47      	cmp	r3, #71	; 0x47
 8005b90:	4680      	mov	r8, r0
 8005b92:	d108      	bne.n	8005ba6 <_printf_float+0x142>
 8005b94:	1cc8      	adds	r0, r1, #3
 8005b96:	db02      	blt.n	8005b9e <_printf_float+0x13a>
 8005b98:	6863      	ldr	r3, [r4, #4]
 8005b9a:	4299      	cmp	r1, r3
 8005b9c:	dd41      	ble.n	8005c22 <_printf_float+0x1be>
 8005b9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ba2:	fa5f fb8b 	uxtb.w	fp, fp
 8005ba6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005baa:	d820      	bhi.n	8005bee <_printf_float+0x18a>
 8005bac:	3901      	subs	r1, #1
 8005bae:	465a      	mov	r2, fp
 8005bb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005bb4:	9109      	str	r1, [sp, #36]	; 0x24
 8005bb6:	f7ff ff17 	bl	80059e8 <__exponent>
 8005bba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bbc:	1813      	adds	r3, r2, r0
 8005bbe:	2a01      	cmp	r2, #1
 8005bc0:	4681      	mov	r9, r0
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	dc02      	bgt.n	8005bcc <_printf_float+0x168>
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	07d2      	lsls	r2, r2, #31
 8005bca:	d501      	bpl.n	8005bd0 <_printf_float+0x16c>
 8005bcc:	3301      	adds	r3, #1
 8005bce:	6123      	str	r3, [r4, #16]
 8005bd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d09c      	beq.n	8005b12 <_printf_float+0xae>
 8005bd8:	232d      	movs	r3, #45	; 0x2d
 8005bda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bde:	e798      	b.n	8005b12 <_printf_float+0xae>
 8005be0:	9a06      	ldr	r2, [sp, #24]
 8005be2:	2a47      	cmp	r2, #71	; 0x47
 8005be4:	d1be      	bne.n	8005b64 <_printf_float+0x100>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1bc      	bne.n	8005b64 <_printf_float+0x100>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e7b9      	b.n	8005b62 <_printf_float+0xfe>
 8005bee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005bf2:	d118      	bne.n	8005c26 <_printf_float+0x1c2>
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	6863      	ldr	r3, [r4, #4]
 8005bf8:	dd0b      	ble.n	8005c12 <_printf_float+0x1ae>
 8005bfa:	6121      	str	r1, [r4, #16]
 8005bfc:	b913      	cbnz	r3, 8005c04 <_printf_float+0x1a0>
 8005bfe:	6822      	ldr	r2, [r4, #0]
 8005c00:	07d0      	lsls	r0, r2, #31
 8005c02:	d502      	bpl.n	8005c0a <_printf_float+0x1a6>
 8005c04:	3301      	adds	r3, #1
 8005c06:	440b      	add	r3, r1
 8005c08:	6123      	str	r3, [r4, #16]
 8005c0a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005c0c:	f04f 0900 	mov.w	r9, #0
 8005c10:	e7de      	b.n	8005bd0 <_printf_float+0x16c>
 8005c12:	b913      	cbnz	r3, 8005c1a <_printf_float+0x1b6>
 8005c14:	6822      	ldr	r2, [r4, #0]
 8005c16:	07d2      	lsls	r2, r2, #31
 8005c18:	d501      	bpl.n	8005c1e <_printf_float+0x1ba>
 8005c1a:	3302      	adds	r3, #2
 8005c1c:	e7f4      	b.n	8005c08 <_printf_float+0x1a4>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e7f2      	b.n	8005c08 <_printf_float+0x1a4>
 8005c22:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c28:	4299      	cmp	r1, r3
 8005c2a:	db05      	blt.n	8005c38 <_printf_float+0x1d4>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	6121      	str	r1, [r4, #16]
 8005c30:	07d8      	lsls	r0, r3, #31
 8005c32:	d5ea      	bpl.n	8005c0a <_printf_float+0x1a6>
 8005c34:	1c4b      	adds	r3, r1, #1
 8005c36:	e7e7      	b.n	8005c08 <_printf_float+0x1a4>
 8005c38:	2900      	cmp	r1, #0
 8005c3a:	bfd4      	ite	le
 8005c3c:	f1c1 0202 	rsble	r2, r1, #2
 8005c40:	2201      	movgt	r2, #1
 8005c42:	4413      	add	r3, r2
 8005c44:	e7e0      	b.n	8005c08 <_printf_float+0x1a4>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	055a      	lsls	r2, r3, #21
 8005c4a:	d407      	bmi.n	8005c5c <_printf_float+0x1f8>
 8005c4c:	6923      	ldr	r3, [r4, #16]
 8005c4e:	4642      	mov	r2, r8
 8005c50:	4631      	mov	r1, r6
 8005c52:	4628      	mov	r0, r5
 8005c54:	47b8      	blx	r7
 8005c56:	3001      	adds	r0, #1
 8005c58:	d12c      	bne.n	8005cb4 <_printf_float+0x250>
 8005c5a:	e764      	b.n	8005b26 <_printf_float+0xc2>
 8005c5c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c60:	f240 80e0 	bls.w	8005e24 <_printf_float+0x3c0>
 8005c64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f7fa ff4c 	bl	8000b08 <__aeabi_dcmpeq>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	d034      	beq.n	8005cde <_printf_float+0x27a>
 8005c74:	4a37      	ldr	r2, [pc, #220]	; (8005d54 <_printf_float+0x2f0>)
 8005c76:	2301      	movs	r3, #1
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f af51 	beq.w	8005b26 <_printf_float+0xc2>
 8005c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	db02      	blt.n	8005c92 <_printf_float+0x22e>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	07d8      	lsls	r0, r3, #31
 8005c90:	d510      	bpl.n	8005cb4 <_printf_float+0x250>
 8005c92:	ee18 3a10 	vmov	r3, s16
 8005c96:	4652      	mov	r2, sl
 8005c98:	4631      	mov	r1, r6
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	47b8      	blx	r7
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	f43f af41 	beq.w	8005b26 <_printf_float+0xc2>
 8005ca4:	f04f 0800 	mov.w	r8, #0
 8005ca8:	f104 091a 	add.w	r9, r4, #26
 8005cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	4543      	cmp	r3, r8
 8005cb2:	dc09      	bgt.n	8005cc8 <_printf_float+0x264>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	079b      	lsls	r3, r3, #30
 8005cb8:	f100 8105 	bmi.w	8005ec6 <_printf_float+0x462>
 8005cbc:	68e0      	ldr	r0, [r4, #12]
 8005cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cc0:	4298      	cmp	r0, r3
 8005cc2:	bfb8      	it	lt
 8005cc4:	4618      	movlt	r0, r3
 8005cc6:	e730      	b.n	8005b2a <_printf_float+0xc6>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	464a      	mov	r2, r9
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b8      	blx	r7
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f43f af27 	beq.w	8005b26 <_printf_float+0xc2>
 8005cd8:	f108 0801 	add.w	r8, r8, #1
 8005cdc:	e7e6      	b.n	8005cac <_printf_float+0x248>
 8005cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dc39      	bgt.n	8005d58 <_printf_float+0x2f4>
 8005ce4:	4a1b      	ldr	r2, [pc, #108]	; (8005d54 <_printf_float+0x2f0>)
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	f43f af19 	beq.w	8005b26 <_printf_float+0xc2>
 8005cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	d102      	bne.n	8005d02 <_printf_float+0x29e>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	07d9      	lsls	r1, r3, #31
 8005d00:	d5d8      	bpl.n	8005cb4 <_printf_float+0x250>
 8005d02:	ee18 3a10 	vmov	r3, s16
 8005d06:	4652      	mov	r2, sl
 8005d08:	4631      	mov	r1, r6
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	47b8      	blx	r7
 8005d0e:	3001      	adds	r0, #1
 8005d10:	f43f af09 	beq.w	8005b26 <_printf_float+0xc2>
 8005d14:	f04f 0900 	mov.w	r9, #0
 8005d18:	f104 0a1a 	add.w	sl, r4, #26
 8005d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d1e:	425b      	negs	r3, r3
 8005d20:	454b      	cmp	r3, r9
 8005d22:	dc01      	bgt.n	8005d28 <_printf_float+0x2c4>
 8005d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d26:	e792      	b.n	8005c4e <_printf_float+0x1ea>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4652      	mov	r2, sl
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4628      	mov	r0, r5
 8005d30:	47b8      	blx	r7
 8005d32:	3001      	adds	r0, #1
 8005d34:	f43f aef7 	beq.w	8005b26 <_printf_float+0xc2>
 8005d38:	f109 0901 	add.w	r9, r9, #1
 8005d3c:	e7ee      	b.n	8005d1c <_printf_float+0x2b8>
 8005d3e:	bf00      	nop
 8005d40:	7fefffff 	.word	0x7fefffff
 8005d44:	08008ad8 	.word	0x08008ad8
 8005d48:	08008adc 	.word	0x08008adc
 8005d4c:	08008ae4 	.word	0x08008ae4
 8005d50:	08008ae0 	.word	0x08008ae0
 8005d54:	08008ae8 	.word	0x08008ae8
 8005d58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	bfa8      	it	ge
 8005d60:	461a      	movge	r2, r3
 8005d62:	2a00      	cmp	r2, #0
 8005d64:	4691      	mov	r9, r2
 8005d66:	dc37      	bgt.n	8005dd8 <_printf_float+0x374>
 8005d68:	f04f 0b00 	mov.w	fp, #0
 8005d6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d70:	f104 021a 	add.w	r2, r4, #26
 8005d74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d76:	9305      	str	r3, [sp, #20]
 8005d78:	eba3 0309 	sub.w	r3, r3, r9
 8005d7c:	455b      	cmp	r3, fp
 8005d7e:	dc33      	bgt.n	8005de8 <_printf_float+0x384>
 8005d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d84:	429a      	cmp	r2, r3
 8005d86:	db3b      	blt.n	8005e00 <_printf_float+0x39c>
 8005d88:	6823      	ldr	r3, [r4, #0]
 8005d8a:	07da      	lsls	r2, r3, #31
 8005d8c:	d438      	bmi.n	8005e00 <_printf_float+0x39c>
 8005d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d90:	9b05      	ldr	r3, [sp, #20]
 8005d92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	eba2 0901 	sub.w	r9, r2, r1
 8005d9a:	4599      	cmp	r9, r3
 8005d9c:	bfa8      	it	ge
 8005d9e:	4699      	movge	r9, r3
 8005da0:	f1b9 0f00 	cmp.w	r9, #0
 8005da4:	dc35      	bgt.n	8005e12 <_printf_float+0x3ae>
 8005da6:	f04f 0800 	mov.w	r8, #0
 8005daa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dae:	f104 0a1a 	add.w	sl, r4, #26
 8005db2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005db6:	1a9b      	subs	r3, r3, r2
 8005db8:	eba3 0309 	sub.w	r3, r3, r9
 8005dbc:	4543      	cmp	r3, r8
 8005dbe:	f77f af79 	ble.w	8005cb4 <_printf_float+0x250>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4628      	mov	r0, r5
 8005dca:	47b8      	blx	r7
 8005dcc:	3001      	adds	r0, #1
 8005dce:	f43f aeaa 	beq.w	8005b26 <_printf_float+0xc2>
 8005dd2:	f108 0801 	add.w	r8, r8, #1
 8005dd6:	e7ec      	b.n	8005db2 <_printf_float+0x34e>
 8005dd8:	4613      	mov	r3, r2
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4642      	mov	r2, r8
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b8      	blx	r7
 8005de2:	3001      	adds	r0, #1
 8005de4:	d1c0      	bne.n	8005d68 <_printf_float+0x304>
 8005de6:	e69e      	b.n	8005b26 <_printf_float+0xc2>
 8005de8:	2301      	movs	r3, #1
 8005dea:	4631      	mov	r1, r6
 8005dec:	4628      	mov	r0, r5
 8005dee:	9205      	str	r2, [sp, #20]
 8005df0:	47b8      	blx	r7
 8005df2:	3001      	adds	r0, #1
 8005df4:	f43f ae97 	beq.w	8005b26 <_printf_float+0xc2>
 8005df8:	9a05      	ldr	r2, [sp, #20]
 8005dfa:	f10b 0b01 	add.w	fp, fp, #1
 8005dfe:	e7b9      	b.n	8005d74 <_printf_float+0x310>
 8005e00:	ee18 3a10 	vmov	r3, s16
 8005e04:	4652      	mov	r2, sl
 8005e06:	4631      	mov	r1, r6
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b8      	blx	r7
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d1be      	bne.n	8005d8e <_printf_float+0x32a>
 8005e10:	e689      	b.n	8005b26 <_printf_float+0xc2>
 8005e12:	9a05      	ldr	r2, [sp, #20]
 8005e14:	464b      	mov	r3, r9
 8005e16:	4442      	add	r2, r8
 8005e18:	4631      	mov	r1, r6
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	47b8      	blx	r7
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d1c1      	bne.n	8005da6 <_printf_float+0x342>
 8005e22:	e680      	b.n	8005b26 <_printf_float+0xc2>
 8005e24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e26:	2a01      	cmp	r2, #1
 8005e28:	dc01      	bgt.n	8005e2e <_printf_float+0x3ca>
 8005e2a:	07db      	lsls	r3, r3, #31
 8005e2c:	d538      	bpl.n	8005ea0 <_printf_float+0x43c>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	4642      	mov	r2, r8
 8005e32:	4631      	mov	r1, r6
 8005e34:	4628      	mov	r0, r5
 8005e36:	47b8      	blx	r7
 8005e38:	3001      	adds	r0, #1
 8005e3a:	f43f ae74 	beq.w	8005b26 <_printf_float+0xc2>
 8005e3e:	ee18 3a10 	vmov	r3, s16
 8005e42:	4652      	mov	r2, sl
 8005e44:	4631      	mov	r1, r6
 8005e46:	4628      	mov	r0, r5
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f43f ae6b 	beq.w	8005b26 <_printf_float+0xc2>
 8005e50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e54:	2200      	movs	r2, #0
 8005e56:	2300      	movs	r3, #0
 8005e58:	f7fa fe56 	bl	8000b08 <__aeabi_dcmpeq>
 8005e5c:	b9d8      	cbnz	r0, 8005e96 <_printf_float+0x432>
 8005e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e60:	f108 0201 	add.w	r2, r8, #1
 8005e64:	3b01      	subs	r3, #1
 8005e66:	4631      	mov	r1, r6
 8005e68:	4628      	mov	r0, r5
 8005e6a:	47b8      	blx	r7
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d10e      	bne.n	8005e8e <_printf_float+0x42a>
 8005e70:	e659      	b.n	8005b26 <_printf_float+0xc2>
 8005e72:	2301      	movs	r3, #1
 8005e74:	4652      	mov	r2, sl
 8005e76:	4631      	mov	r1, r6
 8005e78:	4628      	mov	r0, r5
 8005e7a:	47b8      	blx	r7
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	f43f ae52 	beq.w	8005b26 <_printf_float+0xc2>
 8005e82:	f108 0801 	add.w	r8, r8, #1
 8005e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	4543      	cmp	r3, r8
 8005e8c:	dcf1      	bgt.n	8005e72 <_printf_float+0x40e>
 8005e8e:	464b      	mov	r3, r9
 8005e90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e94:	e6dc      	b.n	8005c50 <_printf_float+0x1ec>
 8005e96:	f04f 0800 	mov.w	r8, #0
 8005e9a:	f104 0a1a 	add.w	sl, r4, #26
 8005e9e:	e7f2      	b.n	8005e86 <_printf_float+0x422>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	4642      	mov	r2, r8
 8005ea4:	e7df      	b.n	8005e66 <_printf_float+0x402>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	464a      	mov	r2, r9
 8005eaa:	4631      	mov	r1, r6
 8005eac:	4628      	mov	r0, r5
 8005eae:	47b8      	blx	r7
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	f43f ae38 	beq.w	8005b26 <_printf_float+0xc2>
 8005eb6:	f108 0801 	add.w	r8, r8, #1
 8005eba:	68e3      	ldr	r3, [r4, #12]
 8005ebc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ebe:	1a5b      	subs	r3, r3, r1
 8005ec0:	4543      	cmp	r3, r8
 8005ec2:	dcf0      	bgt.n	8005ea6 <_printf_float+0x442>
 8005ec4:	e6fa      	b.n	8005cbc <_printf_float+0x258>
 8005ec6:	f04f 0800 	mov.w	r8, #0
 8005eca:	f104 0919 	add.w	r9, r4, #25
 8005ece:	e7f4      	b.n	8005eba <_printf_float+0x456>

08005ed0 <_printf_common>:
 8005ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed4:	4616      	mov	r6, r2
 8005ed6:	4699      	mov	r9, r3
 8005ed8:	688a      	ldr	r2, [r1, #8]
 8005eda:	690b      	ldr	r3, [r1, #16]
 8005edc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	bfb8      	it	lt
 8005ee4:	4613      	movlt	r3, r2
 8005ee6:	6033      	str	r3, [r6, #0]
 8005ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eec:	4607      	mov	r7, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	b10a      	cbz	r2, 8005ef6 <_printf_common+0x26>
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	6033      	str	r3, [r6, #0]
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	0699      	lsls	r1, r3, #26
 8005efa:	bf42      	ittt	mi
 8005efc:	6833      	ldrmi	r3, [r6, #0]
 8005efe:	3302      	addmi	r3, #2
 8005f00:	6033      	strmi	r3, [r6, #0]
 8005f02:	6825      	ldr	r5, [r4, #0]
 8005f04:	f015 0506 	ands.w	r5, r5, #6
 8005f08:	d106      	bne.n	8005f18 <_printf_common+0x48>
 8005f0a:	f104 0a19 	add.w	sl, r4, #25
 8005f0e:	68e3      	ldr	r3, [r4, #12]
 8005f10:	6832      	ldr	r2, [r6, #0]
 8005f12:	1a9b      	subs	r3, r3, r2
 8005f14:	42ab      	cmp	r3, r5
 8005f16:	dc26      	bgt.n	8005f66 <_printf_common+0x96>
 8005f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f1c:	1e13      	subs	r3, r2, #0
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	bf18      	it	ne
 8005f22:	2301      	movne	r3, #1
 8005f24:	0692      	lsls	r2, r2, #26
 8005f26:	d42b      	bmi.n	8005f80 <_printf_common+0xb0>
 8005f28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	4638      	mov	r0, r7
 8005f30:	47c0      	blx	r8
 8005f32:	3001      	adds	r0, #1
 8005f34:	d01e      	beq.n	8005f74 <_printf_common+0xa4>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	68e5      	ldr	r5, [r4, #12]
 8005f3a:	6832      	ldr	r2, [r6, #0]
 8005f3c:	f003 0306 	and.w	r3, r3, #6
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	bf08      	it	eq
 8005f44:	1aad      	subeq	r5, r5, r2
 8005f46:	68a3      	ldr	r3, [r4, #8]
 8005f48:	6922      	ldr	r2, [r4, #16]
 8005f4a:	bf0c      	ite	eq
 8005f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f50:	2500      	movne	r5, #0
 8005f52:	4293      	cmp	r3, r2
 8005f54:	bfc4      	itt	gt
 8005f56:	1a9b      	subgt	r3, r3, r2
 8005f58:	18ed      	addgt	r5, r5, r3
 8005f5a:	2600      	movs	r6, #0
 8005f5c:	341a      	adds	r4, #26
 8005f5e:	42b5      	cmp	r5, r6
 8005f60:	d11a      	bne.n	8005f98 <_printf_common+0xc8>
 8005f62:	2000      	movs	r0, #0
 8005f64:	e008      	b.n	8005f78 <_printf_common+0xa8>
 8005f66:	2301      	movs	r3, #1
 8005f68:	4652      	mov	r2, sl
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	4638      	mov	r0, r7
 8005f6e:	47c0      	blx	r8
 8005f70:	3001      	adds	r0, #1
 8005f72:	d103      	bne.n	8005f7c <_printf_common+0xac>
 8005f74:	f04f 30ff 	mov.w	r0, #4294967295
 8005f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	e7c6      	b.n	8005f0e <_printf_common+0x3e>
 8005f80:	18e1      	adds	r1, r4, r3
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	2030      	movs	r0, #48	; 0x30
 8005f86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f8a:	4422      	add	r2, r4
 8005f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f94:	3302      	adds	r3, #2
 8005f96:	e7c7      	b.n	8005f28 <_printf_common+0x58>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	4638      	mov	r0, r7
 8005fa0:	47c0      	blx	r8
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	d0e6      	beq.n	8005f74 <_printf_common+0xa4>
 8005fa6:	3601      	adds	r6, #1
 8005fa8:	e7d9      	b.n	8005f5e <_printf_common+0x8e>
	...

08005fac <_printf_i>:
 8005fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	4691      	mov	r9, r2
 8005fb4:	7e27      	ldrb	r7, [r4, #24]
 8005fb6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005fb8:	2f78      	cmp	r7, #120	; 0x78
 8005fba:	4680      	mov	r8, r0
 8005fbc:	469a      	mov	sl, r3
 8005fbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fc2:	d807      	bhi.n	8005fd4 <_printf_i+0x28>
 8005fc4:	2f62      	cmp	r7, #98	; 0x62
 8005fc6:	d80a      	bhi.n	8005fde <_printf_i+0x32>
 8005fc8:	2f00      	cmp	r7, #0
 8005fca:	f000 80d8 	beq.w	800617e <_printf_i+0x1d2>
 8005fce:	2f58      	cmp	r7, #88	; 0x58
 8005fd0:	f000 80a3 	beq.w	800611a <_printf_i+0x16e>
 8005fd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fdc:	e03a      	b.n	8006054 <_printf_i+0xa8>
 8005fde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fe2:	2b15      	cmp	r3, #21
 8005fe4:	d8f6      	bhi.n	8005fd4 <_printf_i+0x28>
 8005fe6:	a001      	add	r0, pc, #4	; (adr r0, 8005fec <_printf_i+0x40>)
 8005fe8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005fec:	08006045 	.word	0x08006045
 8005ff0:	08006059 	.word	0x08006059
 8005ff4:	08005fd5 	.word	0x08005fd5
 8005ff8:	08005fd5 	.word	0x08005fd5
 8005ffc:	08005fd5 	.word	0x08005fd5
 8006000:	08005fd5 	.word	0x08005fd5
 8006004:	08006059 	.word	0x08006059
 8006008:	08005fd5 	.word	0x08005fd5
 800600c:	08005fd5 	.word	0x08005fd5
 8006010:	08005fd5 	.word	0x08005fd5
 8006014:	08005fd5 	.word	0x08005fd5
 8006018:	08006165 	.word	0x08006165
 800601c:	08006089 	.word	0x08006089
 8006020:	08006147 	.word	0x08006147
 8006024:	08005fd5 	.word	0x08005fd5
 8006028:	08005fd5 	.word	0x08005fd5
 800602c:	08006187 	.word	0x08006187
 8006030:	08005fd5 	.word	0x08005fd5
 8006034:	08006089 	.word	0x08006089
 8006038:	08005fd5 	.word	0x08005fd5
 800603c:	08005fd5 	.word	0x08005fd5
 8006040:	0800614f 	.word	0x0800614f
 8006044:	680b      	ldr	r3, [r1, #0]
 8006046:	1d1a      	adds	r2, r3, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	600a      	str	r2, [r1, #0]
 800604c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006054:	2301      	movs	r3, #1
 8006056:	e0a3      	b.n	80061a0 <_printf_i+0x1f4>
 8006058:	6825      	ldr	r5, [r4, #0]
 800605a:	6808      	ldr	r0, [r1, #0]
 800605c:	062e      	lsls	r6, r5, #24
 800605e:	f100 0304 	add.w	r3, r0, #4
 8006062:	d50a      	bpl.n	800607a <_printf_i+0xce>
 8006064:	6805      	ldr	r5, [r0, #0]
 8006066:	600b      	str	r3, [r1, #0]
 8006068:	2d00      	cmp	r5, #0
 800606a:	da03      	bge.n	8006074 <_printf_i+0xc8>
 800606c:	232d      	movs	r3, #45	; 0x2d
 800606e:	426d      	negs	r5, r5
 8006070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006074:	485e      	ldr	r0, [pc, #376]	; (80061f0 <_printf_i+0x244>)
 8006076:	230a      	movs	r3, #10
 8006078:	e019      	b.n	80060ae <_printf_i+0x102>
 800607a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800607e:	6805      	ldr	r5, [r0, #0]
 8006080:	600b      	str	r3, [r1, #0]
 8006082:	bf18      	it	ne
 8006084:	b22d      	sxthne	r5, r5
 8006086:	e7ef      	b.n	8006068 <_printf_i+0xbc>
 8006088:	680b      	ldr	r3, [r1, #0]
 800608a:	6825      	ldr	r5, [r4, #0]
 800608c:	1d18      	adds	r0, r3, #4
 800608e:	6008      	str	r0, [r1, #0]
 8006090:	0628      	lsls	r0, r5, #24
 8006092:	d501      	bpl.n	8006098 <_printf_i+0xec>
 8006094:	681d      	ldr	r5, [r3, #0]
 8006096:	e002      	b.n	800609e <_printf_i+0xf2>
 8006098:	0669      	lsls	r1, r5, #25
 800609a:	d5fb      	bpl.n	8006094 <_printf_i+0xe8>
 800609c:	881d      	ldrh	r5, [r3, #0]
 800609e:	4854      	ldr	r0, [pc, #336]	; (80061f0 <_printf_i+0x244>)
 80060a0:	2f6f      	cmp	r7, #111	; 0x6f
 80060a2:	bf0c      	ite	eq
 80060a4:	2308      	moveq	r3, #8
 80060a6:	230a      	movne	r3, #10
 80060a8:	2100      	movs	r1, #0
 80060aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060ae:	6866      	ldr	r6, [r4, #4]
 80060b0:	60a6      	str	r6, [r4, #8]
 80060b2:	2e00      	cmp	r6, #0
 80060b4:	bfa2      	ittt	ge
 80060b6:	6821      	ldrge	r1, [r4, #0]
 80060b8:	f021 0104 	bicge.w	r1, r1, #4
 80060bc:	6021      	strge	r1, [r4, #0]
 80060be:	b90d      	cbnz	r5, 80060c4 <_printf_i+0x118>
 80060c0:	2e00      	cmp	r6, #0
 80060c2:	d04d      	beq.n	8006160 <_printf_i+0x1b4>
 80060c4:	4616      	mov	r6, r2
 80060c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80060ca:	fb03 5711 	mls	r7, r3, r1, r5
 80060ce:	5dc7      	ldrb	r7, [r0, r7]
 80060d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060d4:	462f      	mov	r7, r5
 80060d6:	42bb      	cmp	r3, r7
 80060d8:	460d      	mov	r5, r1
 80060da:	d9f4      	bls.n	80060c6 <_printf_i+0x11a>
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d10b      	bne.n	80060f8 <_printf_i+0x14c>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	07df      	lsls	r7, r3, #31
 80060e4:	d508      	bpl.n	80060f8 <_printf_i+0x14c>
 80060e6:	6923      	ldr	r3, [r4, #16]
 80060e8:	6861      	ldr	r1, [r4, #4]
 80060ea:	4299      	cmp	r1, r3
 80060ec:	bfde      	ittt	le
 80060ee:	2330      	movle	r3, #48	; 0x30
 80060f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060f8:	1b92      	subs	r2, r2, r6
 80060fa:	6122      	str	r2, [r4, #16]
 80060fc:	f8cd a000 	str.w	sl, [sp]
 8006100:	464b      	mov	r3, r9
 8006102:	aa03      	add	r2, sp, #12
 8006104:	4621      	mov	r1, r4
 8006106:	4640      	mov	r0, r8
 8006108:	f7ff fee2 	bl	8005ed0 <_printf_common>
 800610c:	3001      	adds	r0, #1
 800610e:	d14c      	bne.n	80061aa <_printf_i+0x1fe>
 8006110:	f04f 30ff 	mov.w	r0, #4294967295
 8006114:	b004      	add	sp, #16
 8006116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800611a:	4835      	ldr	r0, [pc, #212]	; (80061f0 <_printf_i+0x244>)
 800611c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	680e      	ldr	r6, [r1, #0]
 8006124:	061f      	lsls	r7, r3, #24
 8006126:	f856 5b04 	ldr.w	r5, [r6], #4
 800612a:	600e      	str	r6, [r1, #0]
 800612c:	d514      	bpl.n	8006158 <_printf_i+0x1ac>
 800612e:	07d9      	lsls	r1, r3, #31
 8006130:	bf44      	itt	mi
 8006132:	f043 0320 	orrmi.w	r3, r3, #32
 8006136:	6023      	strmi	r3, [r4, #0]
 8006138:	b91d      	cbnz	r5, 8006142 <_printf_i+0x196>
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	f023 0320 	bic.w	r3, r3, #32
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	2310      	movs	r3, #16
 8006144:	e7b0      	b.n	80060a8 <_printf_i+0xfc>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	f043 0320 	orr.w	r3, r3, #32
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	2378      	movs	r3, #120	; 0x78
 8006150:	4828      	ldr	r0, [pc, #160]	; (80061f4 <_printf_i+0x248>)
 8006152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006156:	e7e3      	b.n	8006120 <_printf_i+0x174>
 8006158:	065e      	lsls	r6, r3, #25
 800615a:	bf48      	it	mi
 800615c:	b2ad      	uxthmi	r5, r5
 800615e:	e7e6      	b.n	800612e <_printf_i+0x182>
 8006160:	4616      	mov	r6, r2
 8006162:	e7bb      	b.n	80060dc <_printf_i+0x130>
 8006164:	680b      	ldr	r3, [r1, #0]
 8006166:	6826      	ldr	r6, [r4, #0]
 8006168:	6960      	ldr	r0, [r4, #20]
 800616a:	1d1d      	adds	r5, r3, #4
 800616c:	600d      	str	r5, [r1, #0]
 800616e:	0635      	lsls	r5, r6, #24
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	d501      	bpl.n	8006178 <_printf_i+0x1cc>
 8006174:	6018      	str	r0, [r3, #0]
 8006176:	e002      	b.n	800617e <_printf_i+0x1d2>
 8006178:	0671      	lsls	r1, r6, #25
 800617a:	d5fb      	bpl.n	8006174 <_printf_i+0x1c8>
 800617c:	8018      	strh	r0, [r3, #0]
 800617e:	2300      	movs	r3, #0
 8006180:	6123      	str	r3, [r4, #16]
 8006182:	4616      	mov	r6, r2
 8006184:	e7ba      	b.n	80060fc <_printf_i+0x150>
 8006186:	680b      	ldr	r3, [r1, #0]
 8006188:	1d1a      	adds	r2, r3, #4
 800618a:	600a      	str	r2, [r1, #0]
 800618c:	681e      	ldr	r6, [r3, #0]
 800618e:	6862      	ldr	r2, [r4, #4]
 8006190:	2100      	movs	r1, #0
 8006192:	4630      	mov	r0, r6
 8006194:	f7fa f844 	bl	8000220 <memchr>
 8006198:	b108      	cbz	r0, 800619e <_printf_i+0x1f2>
 800619a:	1b80      	subs	r0, r0, r6
 800619c:	6060      	str	r0, [r4, #4]
 800619e:	6863      	ldr	r3, [r4, #4]
 80061a0:	6123      	str	r3, [r4, #16]
 80061a2:	2300      	movs	r3, #0
 80061a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061a8:	e7a8      	b.n	80060fc <_printf_i+0x150>
 80061aa:	6923      	ldr	r3, [r4, #16]
 80061ac:	4632      	mov	r2, r6
 80061ae:	4649      	mov	r1, r9
 80061b0:	4640      	mov	r0, r8
 80061b2:	47d0      	blx	sl
 80061b4:	3001      	adds	r0, #1
 80061b6:	d0ab      	beq.n	8006110 <_printf_i+0x164>
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	079b      	lsls	r3, r3, #30
 80061bc:	d413      	bmi.n	80061e6 <_printf_i+0x23a>
 80061be:	68e0      	ldr	r0, [r4, #12]
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	4298      	cmp	r0, r3
 80061c4:	bfb8      	it	lt
 80061c6:	4618      	movlt	r0, r3
 80061c8:	e7a4      	b.n	8006114 <_printf_i+0x168>
 80061ca:	2301      	movs	r3, #1
 80061cc:	4632      	mov	r2, r6
 80061ce:	4649      	mov	r1, r9
 80061d0:	4640      	mov	r0, r8
 80061d2:	47d0      	blx	sl
 80061d4:	3001      	adds	r0, #1
 80061d6:	d09b      	beq.n	8006110 <_printf_i+0x164>
 80061d8:	3501      	adds	r5, #1
 80061da:	68e3      	ldr	r3, [r4, #12]
 80061dc:	9903      	ldr	r1, [sp, #12]
 80061de:	1a5b      	subs	r3, r3, r1
 80061e0:	42ab      	cmp	r3, r5
 80061e2:	dcf2      	bgt.n	80061ca <_printf_i+0x21e>
 80061e4:	e7eb      	b.n	80061be <_printf_i+0x212>
 80061e6:	2500      	movs	r5, #0
 80061e8:	f104 0619 	add.w	r6, r4, #25
 80061ec:	e7f5      	b.n	80061da <_printf_i+0x22e>
 80061ee:	bf00      	nop
 80061f0:	08008aea 	.word	0x08008aea
 80061f4:	08008afb 	.word	0x08008afb

080061f8 <_sbrk_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4d06      	ldr	r5, [pc, #24]	; (8006214 <_sbrk_r+0x1c>)
 80061fc:	2300      	movs	r3, #0
 80061fe:	4604      	mov	r4, r0
 8006200:	4608      	mov	r0, r1
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	f7fb fbd2 	bl	80019ac <_sbrk>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d102      	bne.n	8006212 <_sbrk_r+0x1a>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	b103      	cbz	r3, 8006212 <_sbrk_r+0x1a>
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	200005bc 	.word	0x200005bc

08006218 <_raise_r>:
 8006218:	291f      	cmp	r1, #31
 800621a:	b538      	push	{r3, r4, r5, lr}
 800621c:	4604      	mov	r4, r0
 800621e:	460d      	mov	r5, r1
 8006220:	d904      	bls.n	800622c <_raise_r+0x14>
 8006222:	2316      	movs	r3, #22
 8006224:	6003      	str	r3, [r0, #0]
 8006226:	f04f 30ff 	mov.w	r0, #4294967295
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800622e:	b112      	cbz	r2, 8006236 <_raise_r+0x1e>
 8006230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006234:	b94b      	cbnz	r3, 800624a <_raise_r+0x32>
 8006236:	4620      	mov	r0, r4
 8006238:	f000 f830 	bl	800629c <_getpid_r>
 800623c:	462a      	mov	r2, r5
 800623e:	4601      	mov	r1, r0
 8006240:	4620      	mov	r0, r4
 8006242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006246:	f000 b817 	b.w	8006278 <_kill_r>
 800624a:	2b01      	cmp	r3, #1
 800624c:	d00a      	beq.n	8006264 <_raise_r+0x4c>
 800624e:	1c59      	adds	r1, r3, #1
 8006250:	d103      	bne.n	800625a <_raise_r+0x42>
 8006252:	2316      	movs	r3, #22
 8006254:	6003      	str	r3, [r0, #0]
 8006256:	2001      	movs	r0, #1
 8006258:	e7e7      	b.n	800622a <_raise_r+0x12>
 800625a:	2400      	movs	r4, #0
 800625c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006260:	4628      	mov	r0, r5
 8006262:	4798      	blx	r3
 8006264:	2000      	movs	r0, #0
 8006266:	e7e0      	b.n	800622a <_raise_r+0x12>

08006268 <raise>:
 8006268:	4b02      	ldr	r3, [pc, #8]	; (8006274 <raise+0xc>)
 800626a:	4601      	mov	r1, r0
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	f7ff bfd3 	b.w	8006218 <_raise_r>
 8006272:	bf00      	nop
 8006274:	20000010 	.word	0x20000010

08006278 <_kill_r>:
 8006278:	b538      	push	{r3, r4, r5, lr}
 800627a:	4d07      	ldr	r5, [pc, #28]	; (8006298 <_kill_r+0x20>)
 800627c:	2300      	movs	r3, #0
 800627e:	4604      	mov	r4, r0
 8006280:	4608      	mov	r0, r1
 8006282:	4611      	mov	r1, r2
 8006284:	602b      	str	r3, [r5, #0]
 8006286:	f7fb fb09 	bl	800189c <_kill>
 800628a:	1c43      	adds	r3, r0, #1
 800628c:	d102      	bne.n	8006294 <_kill_r+0x1c>
 800628e:	682b      	ldr	r3, [r5, #0]
 8006290:	b103      	cbz	r3, 8006294 <_kill_r+0x1c>
 8006292:	6023      	str	r3, [r4, #0]
 8006294:	bd38      	pop	{r3, r4, r5, pc}
 8006296:	bf00      	nop
 8006298:	200005bc 	.word	0x200005bc

0800629c <_getpid_r>:
 800629c:	f7fb baf6 	b.w	800188c <_getpid>

080062a0 <__assert_func>:
 80062a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80062a2:	4614      	mov	r4, r2
 80062a4:	461a      	mov	r2, r3
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <__assert_func+0x2c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4605      	mov	r5, r0
 80062ac:	68d8      	ldr	r0, [r3, #12]
 80062ae:	b14c      	cbz	r4, 80062c4 <__assert_func+0x24>
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <__assert_func+0x30>)
 80062b2:	9100      	str	r1, [sp, #0]
 80062b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80062b8:	4906      	ldr	r1, [pc, #24]	; (80062d4 <__assert_func+0x34>)
 80062ba:	462b      	mov	r3, r5
 80062bc:	f000 fe88 	bl	8006fd0 <fiprintf>
 80062c0:	f7ff fa37 	bl	8005732 <abort>
 80062c4:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <__assert_func+0x38>)
 80062c6:	461c      	mov	r4, r3
 80062c8:	e7f3      	b.n	80062b2 <__assert_func+0x12>
 80062ca:	bf00      	nop
 80062cc:	20000010 	.word	0x20000010
 80062d0:	08008b0c 	.word	0x08008b0c
 80062d4:	08008b19 	.word	0x08008b19
 80062d8:	08008b47 	.word	0x08008b47

080062dc <quorem>:
 80062dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e0:	6903      	ldr	r3, [r0, #16]
 80062e2:	690c      	ldr	r4, [r1, #16]
 80062e4:	42a3      	cmp	r3, r4
 80062e6:	4607      	mov	r7, r0
 80062e8:	f2c0 8081 	blt.w	80063ee <quorem+0x112>
 80062ec:	3c01      	subs	r4, #1
 80062ee:	f101 0814 	add.w	r8, r1, #20
 80062f2:	f100 0514 	add.w	r5, r0, #20
 80062f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006300:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006304:	3301      	adds	r3, #1
 8006306:	429a      	cmp	r2, r3
 8006308:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800630c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006310:	fbb2 f6f3 	udiv	r6, r2, r3
 8006314:	d331      	bcc.n	800637a <quorem+0x9e>
 8006316:	f04f 0e00 	mov.w	lr, #0
 800631a:	4640      	mov	r0, r8
 800631c:	46ac      	mov	ip, r5
 800631e:	46f2      	mov	sl, lr
 8006320:	f850 2b04 	ldr.w	r2, [r0], #4
 8006324:	b293      	uxth	r3, r2
 8006326:	fb06 e303 	mla	r3, r6, r3, lr
 800632a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800632e:	b29b      	uxth	r3, r3
 8006330:	ebaa 0303 	sub.w	r3, sl, r3
 8006334:	0c12      	lsrs	r2, r2, #16
 8006336:	f8dc a000 	ldr.w	sl, [ip]
 800633a:	fb06 e202 	mla	r2, r6, r2, lr
 800633e:	fa13 f38a 	uxtah	r3, r3, sl
 8006342:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006346:	fa1f fa82 	uxth.w	sl, r2
 800634a:	f8dc 2000 	ldr.w	r2, [ip]
 800634e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006352:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006356:	b29b      	uxth	r3, r3
 8006358:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800635c:	4581      	cmp	r9, r0
 800635e:	f84c 3b04 	str.w	r3, [ip], #4
 8006362:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006366:	d2db      	bcs.n	8006320 <quorem+0x44>
 8006368:	f855 300b 	ldr.w	r3, [r5, fp]
 800636c:	b92b      	cbnz	r3, 800637a <quorem+0x9e>
 800636e:	9b01      	ldr	r3, [sp, #4]
 8006370:	3b04      	subs	r3, #4
 8006372:	429d      	cmp	r5, r3
 8006374:	461a      	mov	r2, r3
 8006376:	d32e      	bcc.n	80063d6 <quorem+0xfa>
 8006378:	613c      	str	r4, [r7, #16]
 800637a:	4638      	mov	r0, r7
 800637c:	f001 f8de 	bl	800753c <__mcmp>
 8006380:	2800      	cmp	r0, #0
 8006382:	db24      	blt.n	80063ce <quorem+0xf2>
 8006384:	3601      	adds	r6, #1
 8006386:	4628      	mov	r0, r5
 8006388:	f04f 0c00 	mov.w	ip, #0
 800638c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006390:	f8d0 e000 	ldr.w	lr, [r0]
 8006394:	b293      	uxth	r3, r2
 8006396:	ebac 0303 	sub.w	r3, ip, r3
 800639a:	0c12      	lsrs	r2, r2, #16
 800639c:	fa13 f38e 	uxtah	r3, r3, lr
 80063a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063ae:	45c1      	cmp	r9, r8
 80063b0:	f840 3b04 	str.w	r3, [r0], #4
 80063b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80063b8:	d2e8      	bcs.n	800638c <quorem+0xb0>
 80063ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063c2:	b922      	cbnz	r2, 80063ce <quorem+0xf2>
 80063c4:	3b04      	subs	r3, #4
 80063c6:	429d      	cmp	r5, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	d30a      	bcc.n	80063e2 <quorem+0x106>
 80063cc:	613c      	str	r4, [r7, #16]
 80063ce:	4630      	mov	r0, r6
 80063d0:	b003      	add	sp, #12
 80063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	3b04      	subs	r3, #4
 80063da:	2a00      	cmp	r2, #0
 80063dc:	d1cc      	bne.n	8006378 <quorem+0x9c>
 80063de:	3c01      	subs	r4, #1
 80063e0:	e7c7      	b.n	8006372 <quorem+0x96>
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	3b04      	subs	r3, #4
 80063e6:	2a00      	cmp	r2, #0
 80063e8:	d1f0      	bne.n	80063cc <quorem+0xf0>
 80063ea:	3c01      	subs	r4, #1
 80063ec:	e7eb      	b.n	80063c6 <quorem+0xea>
 80063ee:	2000      	movs	r0, #0
 80063f0:	e7ee      	b.n	80063d0 <quorem+0xf4>
 80063f2:	0000      	movs	r0, r0
 80063f4:	0000      	movs	r0, r0
	...

080063f8 <_dtoa_r>:
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	ed2d 8b02 	vpush	{d8}
 8006400:	ec57 6b10 	vmov	r6, r7, d0
 8006404:	b095      	sub	sp, #84	; 0x54
 8006406:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006408:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800640c:	9105      	str	r1, [sp, #20]
 800640e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006412:	4604      	mov	r4, r0
 8006414:	9209      	str	r2, [sp, #36]	; 0x24
 8006416:	930f      	str	r3, [sp, #60]	; 0x3c
 8006418:	b975      	cbnz	r5, 8006438 <_dtoa_r+0x40>
 800641a:	2010      	movs	r0, #16
 800641c:	f7ff f9ba 	bl	8005794 <malloc>
 8006420:	4602      	mov	r2, r0
 8006422:	6260      	str	r0, [r4, #36]	; 0x24
 8006424:	b920      	cbnz	r0, 8006430 <_dtoa_r+0x38>
 8006426:	4bb2      	ldr	r3, [pc, #712]	; (80066f0 <_dtoa_r+0x2f8>)
 8006428:	21ea      	movs	r1, #234	; 0xea
 800642a:	48b2      	ldr	r0, [pc, #712]	; (80066f4 <_dtoa_r+0x2fc>)
 800642c:	f7ff ff38 	bl	80062a0 <__assert_func>
 8006430:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006434:	6005      	str	r5, [r0, #0]
 8006436:	60c5      	str	r5, [r0, #12]
 8006438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800643a:	6819      	ldr	r1, [r3, #0]
 800643c:	b151      	cbz	r1, 8006454 <_dtoa_r+0x5c>
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	604a      	str	r2, [r1, #4]
 8006442:	2301      	movs	r3, #1
 8006444:	4093      	lsls	r3, r2
 8006446:	608b      	str	r3, [r1, #8]
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fe39 	bl	80070c0 <_Bfree>
 800644e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006450:	2200      	movs	r2, #0
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	1e3b      	subs	r3, r7, #0
 8006456:	bfb9      	ittee	lt
 8006458:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800645c:	9303      	strlt	r3, [sp, #12]
 800645e:	2300      	movge	r3, #0
 8006460:	f8c8 3000 	strge.w	r3, [r8]
 8006464:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006468:	4ba3      	ldr	r3, [pc, #652]	; (80066f8 <_dtoa_r+0x300>)
 800646a:	bfbc      	itt	lt
 800646c:	2201      	movlt	r2, #1
 800646e:	f8c8 2000 	strlt.w	r2, [r8]
 8006472:	ea33 0309 	bics.w	r3, r3, r9
 8006476:	d11b      	bne.n	80064b0 <_dtoa_r+0xb8>
 8006478:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800647a:	f242 730f 	movw	r3, #9999	; 0x270f
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006484:	4333      	orrs	r3, r6
 8006486:	f000 857a 	beq.w	8006f7e <_dtoa_r+0xb86>
 800648a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800648c:	b963      	cbnz	r3, 80064a8 <_dtoa_r+0xb0>
 800648e:	4b9b      	ldr	r3, [pc, #620]	; (80066fc <_dtoa_r+0x304>)
 8006490:	e024      	b.n	80064dc <_dtoa_r+0xe4>
 8006492:	4b9b      	ldr	r3, [pc, #620]	; (8006700 <_dtoa_r+0x308>)
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	3308      	adds	r3, #8
 8006498:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	9800      	ldr	r0, [sp, #0]
 800649e:	b015      	add	sp, #84	; 0x54
 80064a0:	ecbd 8b02 	vpop	{d8}
 80064a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	4b94      	ldr	r3, [pc, #592]	; (80066fc <_dtoa_r+0x304>)
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	3303      	adds	r3, #3
 80064ae:	e7f3      	b.n	8006498 <_dtoa_r+0xa0>
 80064b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064b4:	2200      	movs	r2, #0
 80064b6:	ec51 0b17 	vmov	r0, r1, d7
 80064ba:	2300      	movs	r3, #0
 80064bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80064c0:	f7fa fb22 	bl	8000b08 <__aeabi_dcmpeq>
 80064c4:	4680      	mov	r8, r0
 80064c6:	b158      	cbz	r0, 80064e0 <_dtoa_r+0xe8>
 80064c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80064ca:	2301      	movs	r3, #1
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 8551 	beq.w	8006f78 <_dtoa_r+0xb80>
 80064d6:	488b      	ldr	r0, [pc, #556]	; (8006704 <_dtoa_r+0x30c>)
 80064d8:	6018      	str	r0, [r3, #0]
 80064da:	1e43      	subs	r3, r0, #1
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	e7dd      	b.n	800649c <_dtoa_r+0xa4>
 80064e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80064e4:	aa12      	add	r2, sp, #72	; 0x48
 80064e6:	a913      	add	r1, sp, #76	; 0x4c
 80064e8:	4620      	mov	r0, r4
 80064ea:	f001 f8cb 	bl	8007684 <__d2b>
 80064ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064f2:	4683      	mov	fp, r0
 80064f4:	2d00      	cmp	r5, #0
 80064f6:	d07c      	beq.n	80065f2 <_dtoa_r+0x1fa>
 80064f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80064fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006502:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006506:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800650a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800650e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006512:	4b7d      	ldr	r3, [pc, #500]	; (8006708 <_dtoa_r+0x310>)
 8006514:	2200      	movs	r2, #0
 8006516:	4630      	mov	r0, r6
 8006518:	4639      	mov	r1, r7
 800651a:	f7f9 fed5 	bl	80002c8 <__aeabi_dsub>
 800651e:	a36e      	add	r3, pc, #440	; (adr r3, 80066d8 <_dtoa_r+0x2e0>)
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f7fa f888 	bl	8000638 <__aeabi_dmul>
 8006528:	a36d      	add	r3, pc, #436	; (adr r3, 80066e0 <_dtoa_r+0x2e8>)
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f7f9 fecd 	bl	80002cc <__adddf3>
 8006532:	4606      	mov	r6, r0
 8006534:	4628      	mov	r0, r5
 8006536:	460f      	mov	r7, r1
 8006538:	f7fa f814 	bl	8000564 <__aeabi_i2d>
 800653c:	a36a      	add	r3, pc, #424	; (adr r3, 80066e8 <_dtoa_r+0x2f0>)
 800653e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006542:	f7fa f879 	bl	8000638 <__aeabi_dmul>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	4630      	mov	r0, r6
 800654c:	4639      	mov	r1, r7
 800654e:	f7f9 febd 	bl	80002cc <__adddf3>
 8006552:	4606      	mov	r6, r0
 8006554:	460f      	mov	r7, r1
 8006556:	f7fa fb1f 	bl	8000b98 <__aeabi_d2iz>
 800655a:	2200      	movs	r2, #0
 800655c:	4682      	mov	sl, r0
 800655e:	2300      	movs	r3, #0
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	f7fa fada 	bl	8000b1c <__aeabi_dcmplt>
 8006568:	b148      	cbz	r0, 800657e <_dtoa_r+0x186>
 800656a:	4650      	mov	r0, sl
 800656c:	f7f9 fffa 	bl	8000564 <__aeabi_i2d>
 8006570:	4632      	mov	r2, r6
 8006572:	463b      	mov	r3, r7
 8006574:	f7fa fac8 	bl	8000b08 <__aeabi_dcmpeq>
 8006578:	b908      	cbnz	r0, 800657e <_dtoa_r+0x186>
 800657a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800657e:	f1ba 0f16 	cmp.w	sl, #22
 8006582:	d854      	bhi.n	800662e <_dtoa_r+0x236>
 8006584:	4b61      	ldr	r3, [pc, #388]	; (800670c <_dtoa_r+0x314>)
 8006586:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006592:	f7fa fac3 	bl	8000b1c <__aeabi_dcmplt>
 8006596:	2800      	cmp	r0, #0
 8006598:	d04b      	beq.n	8006632 <_dtoa_r+0x23a>
 800659a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800659e:	2300      	movs	r3, #0
 80065a0:	930e      	str	r3, [sp, #56]	; 0x38
 80065a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065a4:	1b5d      	subs	r5, r3, r5
 80065a6:	1e6b      	subs	r3, r5, #1
 80065a8:	9304      	str	r3, [sp, #16]
 80065aa:	bf43      	ittte	mi
 80065ac:	2300      	movmi	r3, #0
 80065ae:	f1c5 0801 	rsbmi	r8, r5, #1
 80065b2:	9304      	strmi	r3, [sp, #16]
 80065b4:	f04f 0800 	movpl.w	r8, #0
 80065b8:	f1ba 0f00 	cmp.w	sl, #0
 80065bc:	db3b      	blt.n	8006636 <_dtoa_r+0x23e>
 80065be:	9b04      	ldr	r3, [sp, #16]
 80065c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80065c4:	4453      	add	r3, sl
 80065c6:	9304      	str	r3, [sp, #16]
 80065c8:	2300      	movs	r3, #0
 80065ca:	9306      	str	r3, [sp, #24]
 80065cc:	9b05      	ldr	r3, [sp, #20]
 80065ce:	2b09      	cmp	r3, #9
 80065d0:	d869      	bhi.n	80066a6 <_dtoa_r+0x2ae>
 80065d2:	2b05      	cmp	r3, #5
 80065d4:	bfc4      	itt	gt
 80065d6:	3b04      	subgt	r3, #4
 80065d8:	9305      	strgt	r3, [sp, #20]
 80065da:	9b05      	ldr	r3, [sp, #20]
 80065dc:	f1a3 0302 	sub.w	r3, r3, #2
 80065e0:	bfcc      	ite	gt
 80065e2:	2500      	movgt	r5, #0
 80065e4:	2501      	movle	r5, #1
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d869      	bhi.n	80066be <_dtoa_r+0x2c6>
 80065ea:	e8df f003 	tbb	[pc, r3]
 80065ee:	4e2c      	.short	0x4e2c
 80065f0:	5a4c      	.short	0x5a4c
 80065f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80065f6:	441d      	add	r5, r3
 80065f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	bfc1      	itttt	gt
 8006600:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006604:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006608:	fa09 f303 	lslgt.w	r3, r9, r3
 800660c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006610:	bfda      	itte	le
 8006612:	f1c3 0320 	rsble	r3, r3, #32
 8006616:	fa06 f003 	lslle.w	r0, r6, r3
 800661a:	4318      	orrgt	r0, r3
 800661c:	f7f9 ff92 	bl	8000544 <__aeabi_ui2d>
 8006620:	2301      	movs	r3, #1
 8006622:	4606      	mov	r6, r0
 8006624:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006628:	3d01      	subs	r5, #1
 800662a:	9310      	str	r3, [sp, #64]	; 0x40
 800662c:	e771      	b.n	8006512 <_dtoa_r+0x11a>
 800662e:	2301      	movs	r3, #1
 8006630:	e7b6      	b.n	80065a0 <_dtoa_r+0x1a8>
 8006632:	900e      	str	r0, [sp, #56]	; 0x38
 8006634:	e7b5      	b.n	80065a2 <_dtoa_r+0x1aa>
 8006636:	f1ca 0300 	rsb	r3, sl, #0
 800663a:	9306      	str	r3, [sp, #24]
 800663c:	2300      	movs	r3, #0
 800663e:	eba8 080a 	sub.w	r8, r8, sl
 8006642:	930d      	str	r3, [sp, #52]	; 0x34
 8006644:	e7c2      	b.n	80065cc <_dtoa_r+0x1d4>
 8006646:	2300      	movs	r3, #0
 8006648:	9308      	str	r3, [sp, #32]
 800664a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	dc39      	bgt.n	80066c4 <_dtoa_r+0x2cc>
 8006650:	f04f 0901 	mov.w	r9, #1
 8006654:	f8cd 9004 	str.w	r9, [sp, #4]
 8006658:	464b      	mov	r3, r9
 800665a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800665e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006660:	2200      	movs	r2, #0
 8006662:	6042      	str	r2, [r0, #4]
 8006664:	2204      	movs	r2, #4
 8006666:	f102 0614 	add.w	r6, r2, #20
 800666a:	429e      	cmp	r6, r3
 800666c:	6841      	ldr	r1, [r0, #4]
 800666e:	d92f      	bls.n	80066d0 <_dtoa_r+0x2d8>
 8006670:	4620      	mov	r0, r4
 8006672:	f000 fce5 	bl	8007040 <_Balloc>
 8006676:	9000      	str	r0, [sp, #0]
 8006678:	2800      	cmp	r0, #0
 800667a:	d14b      	bne.n	8006714 <_dtoa_r+0x31c>
 800667c:	4b24      	ldr	r3, [pc, #144]	; (8006710 <_dtoa_r+0x318>)
 800667e:	4602      	mov	r2, r0
 8006680:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006684:	e6d1      	b.n	800642a <_dtoa_r+0x32>
 8006686:	2301      	movs	r3, #1
 8006688:	e7de      	b.n	8006648 <_dtoa_r+0x250>
 800668a:	2300      	movs	r3, #0
 800668c:	9308      	str	r3, [sp, #32]
 800668e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006690:	eb0a 0903 	add.w	r9, sl, r3
 8006694:	f109 0301 	add.w	r3, r9, #1
 8006698:	2b01      	cmp	r3, #1
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	bfb8      	it	lt
 800669e:	2301      	movlt	r3, #1
 80066a0:	e7dd      	b.n	800665e <_dtoa_r+0x266>
 80066a2:	2301      	movs	r3, #1
 80066a4:	e7f2      	b.n	800668c <_dtoa_r+0x294>
 80066a6:	2501      	movs	r5, #1
 80066a8:	2300      	movs	r3, #0
 80066aa:	9305      	str	r3, [sp, #20]
 80066ac:	9508      	str	r5, [sp, #32]
 80066ae:	f04f 39ff 	mov.w	r9, #4294967295
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80066b8:	2312      	movs	r3, #18
 80066ba:	9209      	str	r2, [sp, #36]	; 0x24
 80066bc:	e7cf      	b.n	800665e <_dtoa_r+0x266>
 80066be:	2301      	movs	r3, #1
 80066c0:	9308      	str	r3, [sp, #32]
 80066c2:	e7f4      	b.n	80066ae <_dtoa_r+0x2b6>
 80066c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80066c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80066cc:	464b      	mov	r3, r9
 80066ce:	e7c6      	b.n	800665e <_dtoa_r+0x266>
 80066d0:	3101      	adds	r1, #1
 80066d2:	6041      	str	r1, [r0, #4]
 80066d4:	0052      	lsls	r2, r2, #1
 80066d6:	e7c6      	b.n	8006666 <_dtoa_r+0x26e>
 80066d8:	636f4361 	.word	0x636f4361
 80066dc:	3fd287a7 	.word	0x3fd287a7
 80066e0:	8b60c8b3 	.word	0x8b60c8b3
 80066e4:	3fc68a28 	.word	0x3fc68a28
 80066e8:	509f79fb 	.word	0x509f79fb
 80066ec:	3fd34413 	.word	0x3fd34413
 80066f0:	08008c56 	.word	0x08008c56
 80066f4:	08008c6d 	.word	0x08008c6d
 80066f8:	7ff00000 	.word	0x7ff00000
 80066fc:	08008c52 	.word	0x08008c52
 8006700:	08008c49 	.word	0x08008c49
 8006704:	08008ae9 	.word	0x08008ae9
 8006708:	3ff80000 	.word	0x3ff80000
 800670c:	08008d70 	.word	0x08008d70
 8006710:	08008ccc 	.word	0x08008ccc
 8006714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006716:	9a00      	ldr	r2, [sp, #0]
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	9b01      	ldr	r3, [sp, #4]
 800671c:	2b0e      	cmp	r3, #14
 800671e:	f200 80ad 	bhi.w	800687c <_dtoa_r+0x484>
 8006722:	2d00      	cmp	r5, #0
 8006724:	f000 80aa 	beq.w	800687c <_dtoa_r+0x484>
 8006728:	f1ba 0f00 	cmp.w	sl, #0
 800672c:	dd36      	ble.n	800679c <_dtoa_r+0x3a4>
 800672e:	4ac3      	ldr	r2, [pc, #780]	; (8006a3c <_dtoa_r+0x644>)
 8006730:	f00a 030f 	and.w	r3, sl, #15
 8006734:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006738:	ed93 7b00 	vldr	d7, [r3]
 800673c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006740:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006744:	eeb0 8a47 	vmov.f32	s16, s14
 8006748:	eef0 8a67 	vmov.f32	s17, s15
 800674c:	d016      	beq.n	800677c <_dtoa_r+0x384>
 800674e:	4bbc      	ldr	r3, [pc, #752]	; (8006a40 <_dtoa_r+0x648>)
 8006750:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006754:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006758:	f7fa f898 	bl	800088c <__aeabi_ddiv>
 800675c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006760:	f007 070f 	and.w	r7, r7, #15
 8006764:	2503      	movs	r5, #3
 8006766:	4eb6      	ldr	r6, [pc, #728]	; (8006a40 <_dtoa_r+0x648>)
 8006768:	b957      	cbnz	r7, 8006780 <_dtoa_r+0x388>
 800676a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800676e:	ec53 2b18 	vmov	r2, r3, d8
 8006772:	f7fa f88b 	bl	800088c <__aeabi_ddiv>
 8006776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800677a:	e029      	b.n	80067d0 <_dtoa_r+0x3d8>
 800677c:	2502      	movs	r5, #2
 800677e:	e7f2      	b.n	8006766 <_dtoa_r+0x36e>
 8006780:	07f9      	lsls	r1, r7, #31
 8006782:	d508      	bpl.n	8006796 <_dtoa_r+0x39e>
 8006784:	ec51 0b18 	vmov	r0, r1, d8
 8006788:	e9d6 2300 	ldrd	r2, r3, [r6]
 800678c:	f7f9 ff54 	bl	8000638 <__aeabi_dmul>
 8006790:	ec41 0b18 	vmov	d8, r0, r1
 8006794:	3501      	adds	r5, #1
 8006796:	107f      	asrs	r7, r7, #1
 8006798:	3608      	adds	r6, #8
 800679a:	e7e5      	b.n	8006768 <_dtoa_r+0x370>
 800679c:	f000 80a6 	beq.w	80068ec <_dtoa_r+0x4f4>
 80067a0:	f1ca 0600 	rsb	r6, sl, #0
 80067a4:	4ba5      	ldr	r3, [pc, #660]	; (8006a3c <_dtoa_r+0x644>)
 80067a6:	4fa6      	ldr	r7, [pc, #664]	; (8006a40 <_dtoa_r+0x648>)
 80067a8:	f006 020f 	and.w	r2, r6, #15
 80067ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067b8:	f7f9 ff3e 	bl	8000638 <__aeabi_dmul>
 80067bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067c0:	1136      	asrs	r6, r6, #4
 80067c2:	2300      	movs	r3, #0
 80067c4:	2502      	movs	r5, #2
 80067c6:	2e00      	cmp	r6, #0
 80067c8:	f040 8085 	bne.w	80068d6 <_dtoa_r+0x4de>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1d2      	bne.n	8006776 <_dtoa_r+0x37e>
 80067d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 808c 	beq.w	80068f0 <_dtoa_r+0x4f8>
 80067d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80067dc:	4b99      	ldr	r3, [pc, #612]	; (8006a44 <_dtoa_r+0x64c>)
 80067de:	2200      	movs	r2, #0
 80067e0:	4630      	mov	r0, r6
 80067e2:	4639      	mov	r1, r7
 80067e4:	f7fa f99a 	bl	8000b1c <__aeabi_dcmplt>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f000 8081 	beq.w	80068f0 <_dtoa_r+0x4f8>
 80067ee:	9b01      	ldr	r3, [sp, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d07d      	beq.n	80068f0 <_dtoa_r+0x4f8>
 80067f4:	f1b9 0f00 	cmp.w	r9, #0
 80067f8:	dd3c      	ble.n	8006874 <_dtoa_r+0x47c>
 80067fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80067fe:	9307      	str	r3, [sp, #28]
 8006800:	2200      	movs	r2, #0
 8006802:	4b91      	ldr	r3, [pc, #580]	; (8006a48 <_dtoa_r+0x650>)
 8006804:	4630      	mov	r0, r6
 8006806:	4639      	mov	r1, r7
 8006808:	f7f9 ff16 	bl	8000638 <__aeabi_dmul>
 800680c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006810:	3501      	adds	r5, #1
 8006812:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006816:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800681a:	4628      	mov	r0, r5
 800681c:	f7f9 fea2 	bl	8000564 <__aeabi_i2d>
 8006820:	4632      	mov	r2, r6
 8006822:	463b      	mov	r3, r7
 8006824:	f7f9 ff08 	bl	8000638 <__aeabi_dmul>
 8006828:	4b88      	ldr	r3, [pc, #544]	; (8006a4c <_dtoa_r+0x654>)
 800682a:	2200      	movs	r2, #0
 800682c:	f7f9 fd4e 	bl	80002cc <__adddf3>
 8006830:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006838:	9303      	str	r3, [sp, #12]
 800683a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800683c:	2b00      	cmp	r3, #0
 800683e:	d15c      	bne.n	80068fa <_dtoa_r+0x502>
 8006840:	4b83      	ldr	r3, [pc, #524]	; (8006a50 <_dtoa_r+0x658>)
 8006842:	2200      	movs	r2, #0
 8006844:	4630      	mov	r0, r6
 8006846:	4639      	mov	r1, r7
 8006848:	f7f9 fd3e 	bl	80002c8 <__aeabi_dsub>
 800684c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006850:	4606      	mov	r6, r0
 8006852:	460f      	mov	r7, r1
 8006854:	f7fa f980 	bl	8000b58 <__aeabi_dcmpgt>
 8006858:	2800      	cmp	r0, #0
 800685a:	f040 8296 	bne.w	8006d8a <_dtoa_r+0x992>
 800685e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006862:	4630      	mov	r0, r6
 8006864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006868:	4639      	mov	r1, r7
 800686a:	f7fa f957 	bl	8000b1c <__aeabi_dcmplt>
 800686e:	2800      	cmp	r0, #0
 8006870:	f040 8288 	bne.w	8006d84 <_dtoa_r+0x98c>
 8006874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006878:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800687c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800687e:	2b00      	cmp	r3, #0
 8006880:	f2c0 8158 	blt.w	8006b34 <_dtoa_r+0x73c>
 8006884:	f1ba 0f0e 	cmp.w	sl, #14
 8006888:	f300 8154 	bgt.w	8006b34 <_dtoa_r+0x73c>
 800688c:	4b6b      	ldr	r3, [pc, #428]	; (8006a3c <_dtoa_r+0x644>)
 800688e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006892:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	f280 80e3 	bge.w	8006a64 <_dtoa_r+0x66c>
 800689e:	9b01      	ldr	r3, [sp, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f300 80df 	bgt.w	8006a64 <_dtoa_r+0x66c>
 80068a6:	f040 826d 	bne.w	8006d84 <_dtoa_r+0x98c>
 80068aa:	4b69      	ldr	r3, [pc, #420]	; (8006a50 <_dtoa_r+0x658>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	4640      	mov	r0, r8
 80068b0:	4649      	mov	r1, r9
 80068b2:	f7f9 fec1 	bl	8000638 <__aeabi_dmul>
 80068b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068ba:	f7fa f943 	bl	8000b44 <__aeabi_dcmpge>
 80068be:	9e01      	ldr	r6, [sp, #4]
 80068c0:	4637      	mov	r7, r6
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f040 8243 	bne.w	8006d4e <_dtoa_r+0x956>
 80068c8:	9d00      	ldr	r5, [sp, #0]
 80068ca:	2331      	movs	r3, #49	; 0x31
 80068cc:	f805 3b01 	strb.w	r3, [r5], #1
 80068d0:	f10a 0a01 	add.w	sl, sl, #1
 80068d4:	e23f      	b.n	8006d56 <_dtoa_r+0x95e>
 80068d6:	07f2      	lsls	r2, r6, #31
 80068d8:	d505      	bpl.n	80068e6 <_dtoa_r+0x4ee>
 80068da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068de:	f7f9 feab 	bl	8000638 <__aeabi_dmul>
 80068e2:	3501      	adds	r5, #1
 80068e4:	2301      	movs	r3, #1
 80068e6:	1076      	asrs	r6, r6, #1
 80068e8:	3708      	adds	r7, #8
 80068ea:	e76c      	b.n	80067c6 <_dtoa_r+0x3ce>
 80068ec:	2502      	movs	r5, #2
 80068ee:	e76f      	b.n	80067d0 <_dtoa_r+0x3d8>
 80068f0:	9b01      	ldr	r3, [sp, #4]
 80068f2:	f8cd a01c 	str.w	sl, [sp, #28]
 80068f6:	930c      	str	r3, [sp, #48]	; 0x30
 80068f8:	e78d      	b.n	8006816 <_dtoa_r+0x41e>
 80068fa:	9900      	ldr	r1, [sp, #0]
 80068fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80068fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006900:	4b4e      	ldr	r3, [pc, #312]	; (8006a3c <_dtoa_r+0x644>)
 8006902:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006906:	4401      	add	r1, r0
 8006908:	9102      	str	r1, [sp, #8]
 800690a:	9908      	ldr	r1, [sp, #32]
 800690c:	eeb0 8a47 	vmov.f32	s16, s14
 8006910:	eef0 8a67 	vmov.f32	s17, s15
 8006914:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006918:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800691c:	2900      	cmp	r1, #0
 800691e:	d045      	beq.n	80069ac <_dtoa_r+0x5b4>
 8006920:	494c      	ldr	r1, [pc, #304]	; (8006a54 <_dtoa_r+0x65c>)
 8006922:	2000      	movs	r0, #0
 8006924:	f7f9 ffb2 	bl	800088c <__aeabi_ddiv>
 8006928:	ec53 2b18 	vmov	r2, r3, d8
 800692c:	f7f9 fccc 	bl	80002c8 <__aeabi_dsub>
 8006930:	9d00      	ldr	r5, [sp, #0]
 8006932:	ec41 0b18 	vmov	d8, r0, r1
 8006936:	4639      	mov	r1, r7
 8006938:	4630      	mov	r0, r6
 800693a:	f7fa f92d 	bl	8000b98 <__aeabi_d2iz>
 800693e:	900c      	str	r0, [sp, #48]	; 0x30
 8006940:	f7f9 fe10 	bl	8000564 <__aeabi_i2d>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4630      	mov	r0, r6
 800694a:	4639      	mov	r1, r7
 800694c:	f7f9 fcbc 	bl	80002c8 <__aeabi_dsub>
 8006950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006952:	3330      	adds	r3, #48	; 0x30
 8006954:	f805 3b01 	strb.w	r3, [r5], #1
 8006958:	ec53 2b18 	vmov	r2, r3, d8
 800695c:	4606      	mov	r6, r0
 800695e:	460f      	mov	r7, r1
 8006960:	f7fa f8dc 	bl	8000b1c <__aeabi_dcmplt>
 8006964:	2800      	cmp	r0, #0
 8006966:	d165      	bne.n	8006a34 <_dtoa_r+0x63c>
 8006968:	4632      	mov	r2, r6
 800696a:	463b      	mov	r3, r7
 800696c:	4935      	ldr	r1, [pc, #212]	; (8006a44 <_dtoa_r+0x64c>)
 800696e:	2000      	movs	r0, #0
 8006970:	f7f9 fcaa 	bl	80002c8 <__aeabi_dsub>
 8006974:	ec53 2b18 	vmov	r2, r3, d8
 8006978:	f7fa f8d0 	bl	8000b1c <__aeabi_dcmplt>
 800697c:	2800      	cmp	r0, #0
 800697e:	f040 80b9 	bne.w	8006af4 <_dtoa_r+0x6fc>
 8006982:	9b02      	ldr	r3, [sp, #8]
 8006984:	429d      	cmp	r5, r3
 8006986:	f43f af75 	beq.w	8006874 <_dtoa_r+0x47c>
 800698a:	4b2f      	ldr	r3, [pc, #188]	; (8006a48 <_dtoa_r+0x650>)
 800698c:	ec51 0b18 	vmov	r0, r1, d8
 8006990:	2200      	movs	r2, #0
 8006992:	f7f9 fe51 	bl	8000638 <__aeabi_dmul>
 8006996:	4b2c      	ldr	r3, [pc, #176]	; (8006a48 <_dtoa_r+0x650>)
 8006998:	ec41 0b18 	vmov	d8, r0, r1
 800699c:	2200      	movs	r2, #0
 800699e:	4630      	mov	r0, r6
 80069a0:	4639      	mov	r1, r7
 80069a2:	f7f9 fe49 	bl	8000638 <__aeabi_dmul>
 80069a6:	4606      	mov	r6, r0
 80069a8:	460f      	mov	r7, r1
 80069aa:	e7c4      	b.n	8006936 <_dtoa_r+0x53e>
 80069ac:	ec51 0b17 	vmov	r0, r1, d7
 80069b0:	f7f9 fe42 	bl	8000638 <__aeabi_dmul>
 80069b4:	9b02      	ldr	r3, [sp, #8]
 80069b6:	9d00      	ldr	r5, [sp, #0]
 80069b8:	930c      	str	r3, [sp, #48]	; 0x30
 80069ba:	ec41 0b18 	vmov	d8, r0, r1
 80069be:	4639      	mov	r1, r7
 80069c0:	4630      	mov	r0, r6
 80069c2:	f7fa f8e9 	bl	8000b98 <__aeabi_d2iz>
 80069c6:	9011      	str	r0, [sp, #68]	; 0x44
 80069c8:	f7f9 fdcc 	bl	8000564 <__aeabi_i2d>
 80069cc:	4602      	mov	r2, r0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4630      	mov	r0, r6
 80069d2:	4639      	mov	r1, r7
 80069d4:	f7f9 fc78 	bl	80002c8 <__aeabi_dsub>
 80069d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069da:	3330      	adds	r3, #48	; 0x30
 80069dc:	f805 3b01 	strb.w	r3, [r5], #1
 80069e0:	9b02      	ldr	r3, [sp, #8]
 80069e2:	429d      	cmp	r5, r3
 80069e4:	4606      	mov	r6, r0
 80069e6:	460f      	mov	r7, r1
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	d134      	bne.n	8006a58 <_dtoa_r+0x660>
 80069ee:	4b19      	ldr	r3, [pc, #100]	; (8006a54 <_dtoa_r+0x65c>)
 80069f0:	ec51 0b18 	vmov	r0, r1, d8
 80069f4:	f7f9 fc6a 	bl	80002cc <__adddf3>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4630      	mov	r0, r6
 80069fe:	4639      	mov	r1, r7
 8006a00:	f7fa f8aa 	bl	8000b58 <__aeabi_dcmpgt>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d175      	bne.n	8006af4 <_dtoa_r+0x6fc>
 8006a08:	ec53 2b18 	vmov	r2, r3, d8
 8006a0c:	4911      	ldr	r1, [pc, #68]	; (8006a54 <_dtoa_r+0x65c>)
 8006a0e:	2000      	movs	r0, #0
 8006a10:	f7f9 fc5a 	bl	80002c8 <__aeabi_dsub>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4630      	mov	r0, r6
 8006a1a:	4639      	mov	r1, r7
 8006a1c:	f7fa f87e 	bl	8000b1c <__aeabi_dcmplt>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	f43f af27 	beq.w	8006874 <_dtoa_r+0x47c>
 8006a26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a28:	1e6b      	subs	r3, r5, #1
 8006a2a:	930c      	str	r3, [sp, #48]	; 0x30
 8006a2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a30:	2b30      	cmp	r3, #48	; 0x30
 8006a32:	d0f8      	beq.n	8006a26 <_dtoa_r+0x62e>
 8006a34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006a38:	e04a      	b.n	8006ad0 <_dtoa_r+0x6d8>
 8006a3a:	bf00      	nop
 8006a3c:	08008d70 	.word	0x08008d70
 8006a40:	08008d48 	.word	0x08008d48
 8006a44:	3ff00000 	.word	0x3ff00000
 8006a48:	40240000 	.word	0x40240000
 8006a4c:	401c0000 	.word	0x401c0000
 8006a50:	40140000 	.word	0x40140000
 8006a54:	3fe00000 	.word	0x3fe00000
 8006a58:	4baf      	ldr	r3, [pc, #700]	; (8006d18 <_dtoa_r+0x920>)
 8006a5a:	f7f9 fded 	bl	8000638 <__aeabi_dmul>
 8006a5e:	4606      	mov	r6, r0
 8006a60:	460f      	mov	r7, r1
 8006a62:	e7ac      	b.n	80069be <_dtoa_r+0x5c6>
 8006a64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a68:	9d00      	ldr	r5, [sp, #0]
 8006a6a:	4642      	mov	r2, r8
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	4630      	mov	r0, r6
 8006a70:	4639      	mov	r1, r7
 8006a72:	f7f9 ff0b 	bl	800088c <__aeabi_ddiv>
 8006a76:	f7fa f88f 	bl	8000b98 <__aeabi_d2iz>
 8006a7a:	9002      	str	r0, [sp, #8]
 8006a7c:	f7f9 fd72 	bl	8000564 <__aeabi_i2d>
 8006a80:	4642      	mov	r2, r8
 8006a82:	464b      	mov	r3, r9
 8006a84:	f7f9 fdd8 	bl	8000638 <__aeabi_dmul>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	4639      	mov	r1, r7
 8006a90:	f7f9 fc1a 	bl	80002c8 <__aeabi_dsub>
 8006a94:	9e02      	ldr	r6, [sp, #8]
 8006a96:	9f01      	ldr	r7, [sp, #4]
 8006a98:	3630      	adds	r6, #48	; 0x30
 8006a9a:	f805 6b01 	strb.w	r6, [r5], #1
 8006a9e:	9e00      	ldr	r6, [sp, #0]
 8006aa0:	1bae      	subs	r6, r5, r6
 8006aa2:	42b7      	cmp	r7, r6
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	d137      	bne.n	8006b1a <_dtoa_r+0x722>
 8006aaa:	f7f9 fc0f 	bl	80002cc <__adddf3>
 8006aae:	4642      	mov	r2, r8
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460f      	mov	r7, r1
 8006ab6:	f7fa f84f 	bl	8000b58 <__aeabi_dcmpgt>
 8006aba:	b9c8      	cbnz	r0, 8006af0 <_dtoa_r+0x6f8>
 8006abc:	4642      	mov	r2, r8
 8006abe:	464b      	mov	r3, r9
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7fa f820 	bl	8000b08 <__aeabi_dcmpeq>
 8006ac8:	b110      	cbz	r0, 8006ad0 <_dtoa_r+0x6d8>
 8006aca:	9b02      	ldr	r3, [sp, #8]
 8006acc:	07d9      	lsls	r1, r3, #31
 8006ace:	d40f      	bmi.n	8006af0 <_dtoa_r+0x6f8>
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	4659      	mov	r1, fp
 8006ad4:	f000 faf4 	bl	80070c0 <_Bfree>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	702b      	strb	r3, [r5, #0]
 8006adc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ade:	f10a 0001 	add.w	r0, sl, #1
 8006ae2:	6018      	str	r0, [r3, #0]
 8006ae4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f43f acd8 	beq.w	800649c <_dtoa_r+0xa4>
 8006aec:	601d      	str	r5, [r3, #0]
 8006aee:	e4d5      	b.n	800649c <_dtoa_r+0xa4>
 8006af0:	f8cd a01c 	str.w	sl, [sp, #28]
 8006af4:	462b      	mov	r3, r5
 8006af6:	461d      	mov	r5, r3
 8006af8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006afc:	2a39      	cmp	r2, #57	; 0x39
 8006afe:	d108      	bne.n	8006b12 <_dtoa_r+0x71a>
 8006b00:	9a00      	ldr	r2, [sp, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d1f7      	bne.n	8006af6 <_dtoa_r+0x6fe>
 8006b06:	9a07      	ldr	r2, [sp, #28]
 8006b08:	9900      	ldr	r1, [sp, #0]
 8006b0a:	3201      	adds	r2, #1
 8006b0c:	9207      	str	r2, [sp, #28]
 8006b0e:	2230      	movs	r2, #48	; 0x30
 8006b10:	700a      	strb	r2, [r1, #0]
 8006b12:	781a      	ldrb	r2, [r3, #0]
 8006b14:	3201      	adds	r2, #1
 8006b16:	701a      	strb	r2, [r3, #0]
 8006b18:	e78c      	b.n	8006a34 <_dtoa_r+0x63c>
 8006b1a:	4b7f      	ldr	r3, [pc, #508]	; (8006d18 <_dtoa_r+0x920>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f7f9 fd8b 	bl	8000638 <__aeabi_dmul>
 8006b22:	2200      	movs	r2, #0
 8006b24:	2300      	movs	r3, #0
 8006b26:	4606      	mov	r6, r0
 8006b28:	460f      	mov	r7, r1
 8006b2a:	f7f9 ffed 	bl	8000b08 <__aeabi_dcmpeq>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	d09b      	beq.n	8006a6a <_dtoa_r+0x672>
 8006b32:	e7cd      	b.n	8006ad0 <_dtoa_r+0x6d8>
 8006b34:	9a08      	ldr	r2, [sp, #32]
 8006b36:	2a00      	cmp	r2, #0
 8006b38:	f000 80c4 	beq.w	8006cc4 <_dtoa_r+0x8cc>
 8006b3c:	9a05      	ldr	r2, [sp, #20]
 8006b3e:	2a01      	cmp	r2, #1
 8006b40:	f300 80a8 	bgt.w	8006c94 <_dtoa_r+0x89c>
 8006b44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b46:	2a00      	cmp	r2, #0
 8006b48:	f000 80a0 	beq.w	8006c8c <_dtoa_r+0x894>
 8006b4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b50:	9e06      	ldr	r6, [sp, #24]
 8006b52:	4645      	mov	r5, r8
 8006b54:	9a04      	ldr	r2, [sp, #16]
 8006b56:	2101      	movs	r1, #1
 8006b58:	441a      	add	r2, r3
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	4498      	add	r8, r3
 8006b5e:	9204      	str	r2, [sp, #16]
 8006b60:	f000 fb6a 	bl	8007238 <__i2b>
 8006b64:	4607      	mov	r7, r0
 8006b66:	2d00      	cmp	r5, #0
 8006b68:	dd0b      	ble.n	8006b82 <_dtoa_r+0x78a>
 8006b6a:	9b04      	ldr	r3, [sp, #16]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dd08      	ble.n	8006b82 <_dtoa_r+0x78a>
 8006b70:	42ab      	cmp	r3, r5
 8006b72:	9a04      	ldr	r2, [sp, #16]
 8006b74:	bfa8      	it	ge
 8006b76:	462b      	movge	r3, r5
 8006b78:	eba8 0803 	sub.w	r8, r8, r3
 8006b7c:	1aed      	subs	r5, r5, r3
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	9304      	str	r3, [sp, #16]
 8006b82:	9b06      	ldr	r3, [sp, #24]
 8006b84:	b1fb      	cbz	r3, 8006bc6 <_dtoa_r+0x7ce>
 8006b86:	9b08      	ldr	r3, [sp, #32]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 809f 	beq.w	8006ccc <_dtoa_r+0x8d4>
 8006b8e:	2e00      	cmp	r6, #0
 8006b90:	dd11      	ble.n	8006bb6 <_dtoa_r+0x7be>
 8006b92:	4639      	mov	r1, r7
 8006b94:	4632      	mov	r2, r6
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 fc0a 	bl	80073b0 <__pow5mult>
 8006b9c:	465a      	mov	r2, fp
 8006b9e:	4601      	mov	r1, r0
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 fb5e 	bl	8007264 <__multiply>
 8006ba8:	4659      	mov	r1, fp
 8006baa:	9007      	str	r0, [sp, #28]
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 fa87 	bl	80070c0 <_Bfree>
 8006bb2:	9b07      	ldr	r3, [sp, #28]
 8006bb4:	469b      	mov	fp, r3
 8006bb6:	9b06      	ldr	r3, [sp, #24]
 8006bb8:	1b9a      	subs	r2, r3, r6
 8006bba:	d004      	beq.n	8006bc6 <_dtoa_r+0x7ce>
 8006bbc:	4659      	mov	r1, fp
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 fbf6 	bl	80073b0 <__pow5mult>
 8006bc4:	4683      	mov	fp, r0
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fb35 	bl	8007238 <__i2b>
 8006bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	dd7c      	ble.n	8006cd0 <_dtoa_r+0x8d8>
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4601      	mov	r1, r0
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 fbe8 	bl	80073b0 <__pow5mult>
 8006be0:	9b05      	ldr	r3, [sp, #20]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	4606      	mov	r6, r0
 8006be6:	dd76      	ble.n	8006cd6 <_dtoa_r+0x8de>
 8006be8:	2300      	movs	r3, #0
 8006bea:	9306      	str	r3, [sp, #24]
 8006bec:	6933      	ldr	r3, [r6, #16]
 8006bee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006bf2:	6918      	ldr	r0, [r3, #16]
 8006bf4:	f000 fad0 	bl	8007198 <__hi0bits>
 8006bf8:	f1c0 0020 	rsb	r0, r0, #32
 8006bfc:	9b04      	ldr	r3, [sp, #16]
 8006bfe:	4418      	add	r0, r3
 8006c00:	f010 001f 	ands.w	r0, r0, #31
 8006c04:	f000 8086 	beq.w	8006d14 <_dtoa_r+0x91c>
 8006c08:	f1c0 0320 	rsb	r3, r0, #32
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	dd7f      	ble.n	8006d10 <_dtoa_r+0x918>
 8006c10:	f1c0 001c 	rsb	r0, r0, #28
 8006c14:	9b04      	ldr	r3, [sp, #16]
 8006c16:	4403      	add	r3, r0
 8006c18:	4480      	add	r8, r0
 8006c1a:	4405      	add	r5, r0
 8006c1c:	9304      	str	r3, [sp, #16]
 8006c1e:	f1b8 0f00 	cmp.w	r8, #0
 8006c22:	dd05      	ble.n	8006c30 <_dtoa_r+0x838>
 8006c24:	4659      	mov	r1, fp
 8006c26:	4642      	mov	r2, r8
 8006c28:	4620      	mov	r0, r4
 8006c2a:	f000 fc1b 	bl	8007464 <__lshift>
 8006c2e:	4683      	mov	fp, r0
 8006c30:	9b04      	ldr	r3, [sp, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	dd05      	ble.n	8006c42 <_dtoa_r+0x84a>
 8006c36:	4631      	mov	r1, r6
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fc12 	bl	8007464 <__lshift>
 8006c40:	4606      	mov	r6, r0
 8006c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d069      	beq.n	8006d1c <_dtoa_r+0x924>
 8006c48:	4631      	mov	r1, r6
 8006c4a:	4658      	mov	r0, fp
 8006c4c:	f000 fc76 	bl	800753c <__mcmp>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	da63      	bge.n	8006d1c <_dtoa_r+0x924>
 8006c54:	2300      	movs	r3, #0
 8006c56:	4659      	mov	r1, fp
 8006c58:	220a      	movs	r2, #10
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 fa52 	bl	8007104 <__multadd>
 8006c60:	9b08      	ldr	r3, [sp, #32]
 8006c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c66:	4683      	mov	fp, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 818f 	beq.w	8006f8c <_dtoa_r+0xb94>
 8006c6e:	4639      	mov	r1, r7
 8006c70:	2300      	movs	r3, #0
 8006c72:	220a      	movs	r2, #10
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 fa45 	bl	8007104 <__multadd>
 8006c7a:	f1b9 0f00 	cmp.w	r9, #0
 8006c7e:	4607      	mov	r7, r0
 8006c80:	f300 808e 	bgt.w	8006da0 <_dtoa_r+0x9a8>
 8006c84:	9b05      	ldr	r3, [sp, #20]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	dc50      	bgt.n	8006d2c <_dtoa_r+0x934>
 8006c8a:	e089      	b.n	8006da0 <_dtoa_r+0x9a8>
 8006c8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c92:	e75d      	b.n	8006b50 <_dtoa_r+0x758>
 8006c94:	9b01      	ldr	r3, [sp, #4]
 8006c96:	1e5e      	subs	r6, r3, #1
 8006c98:	9b06      	ldr	r3, [sp, #24]
 8006c9a:	42b3      	cmp	r3, r6
 8006c9c:	bfbf      	itttt	lt
 8006c9e:	9b06      	ldrlt	r3, [sp, #24]
 8006ca0:	9606      	strlt	r6, [sp, #24]
 8006ca2:	1af2      	sublt	r2, r6, r3
 8006ca4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006ca6:	bfb6      	itet	lt
 8006ca8:	189b      	addlt	r3, r3, r2
 8006caa:	1b9e      	subge	r6, r3, r6
 8006cac:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006cae:	9b01      	ldr	r3, [sp, #4]
 8006cb0:	bfb8      	it	lt
 8006cb2:	2600      	movlt	r6, #0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	bfb5      	itete	lt
 8006cb8:	eba8 0503 	sublt.w	r5, r8, r3
 8006cbc:	9b01      	ldrge	r3, [sp, #4]
 8006cbe:	2300      	movlt	r3, #0
 8006cc0:	4645      	movge	r5, r8
 8006cc2:	e747      	b.n	8006b54 <_dtoa_r+0x75c>
 8006cc4:	9e06      	ldr	r6, [sp, #24]
 8006cc6:	9f08      	ldr	r7, [sp, #32]
 8006cc8:	4645      	mov	r5, r8
 8006cca:	e74c      	b.n	8006b66 <_dtoa_r+0x76e>
 8006ccc:	9a06      	ldr	r2, [sp, #24]
 8006cce:	e775      	b.n	8006bbc <_dtoa_r+0x7c4>
 8006cd0:	9b05      	ldr	r3, [sp, #20]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	dc18      	bgt.n	8006d08 <_dtoa_r+0x910>
 8006cd6:	9b02      	ldr	r3, [sp, #8]
 8006cd8:	b9b3      	cbnz	r3, 8006d08 <_dtoa_r+0x910>
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ce0:	b9a3      	cbnz	r3, 8006d0c <_dtoa_r+0x914>
 8006ce2:	9b03      	ldr	r3, [sp, #12]
 8006ce4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ce8:	0d1b      	lsrs	r3, r3, #20
 8006cea:	051b      	lsls	r3, r3, #20
 8006cec:	b12b      	cbz	r3, 8006cfa <_dtoa_r+0x902>
 8006cee:	9b04      	ldr	r3, [sp, #16]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	9304      	str	r3, [sp, #16]
 8006cf4:	f108 0801 	add.w	r8, r8, #1
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	9306      	str	r3, [sp, #24]
 8006cfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f47f af74 	bne.w	8006bec <_dtoa_r+0x7f4>
 8006d04:	2001      	movs	r0, #1
 8006d06:	e779      	b.n	8006bfc <_dtoa_r+0x804>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e7f6      	b.n	8006cfa <_dtoa_r+0x902>
 8006d0c:	9b02      	ldr	r3, [sp, #8]
 8006d0e:	e7f4      	b.n	8006cfa <_dtoa_r+0x902>
 8006d10:	d085      	beq.n	8006c1e <_dtoa_r+0x826>
 8006d12:	4618      	mov	r0, r3
 8006d14:	301c      	adds	r0, #28
 8006d16:	e77d      	b.n	8006c14 <_dtoa_r+0x81c>
 8006d18:	40240000 	.word	0x40240000
 8006d1c:	9b01      	ldr	r3, [sp, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	dc38      	bgt.n	8006d94 <_dtoa_r+0x99c>
 8006d22:	9b05      	ldr	r3, [sp, #20]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	dd35      	ble.n	8006d94 <_dtoa_r+0x99c>
 8006d28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006d2c:	f1b9 0f00 	cmp.w	r9, #0
 8006d30:	d10d      	bne.n	8006d4e <_dtoa_r+0x956>
 8006d32:	4631      	mov	r1, r6
 8006d34:	464b      	mov	r3, r9
 8006d36:	2205      	movs	r2, #5
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 f9e3 	bl	8007104 <__multadd>
 8006d3e:	4601      	mov	r1, r0
 8006d40:	4606      	mov	r6, r0
 8006d42:	4658      	mov	r0, fp
 8006d44:	f000 fbfa 	bl	800753c <__mcmp>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	f73f adbd 	bgt.w	80068c8 <_dtoa_r+0x4d0>
 8006d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d50:	9d00      	ldr	r5, [sp, #0]
 8006d52:	ea6f 0a03 	mvn.w	sl, r3
 8006d56:	f04f 0800 	mov.w	r8, #0
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 f9af 	bl	80070c0 <_Bfree>
 8006d62:	2f00      	cmp	r7, #0
 8006d64:	f43f aeb4 	beq.w	8006ad0 <_dtoa_r+0x6d8>
 8006d68:	f1b8 0f00 	cmp.w	r8, #0
 8006d6c:	d005      	beq.n	8006d7a <_dtoa_r+0x982>
 8006d6e:	45b8      	cmp	r8, r7
 8006d70:	d003      	beq.n	8006d7a <_dtoa_r+0x982>
 8006d72:	4641      	mov	r1, r8
 8006d74:	4620      	mov	r0, r4
 8006d76:	f000 f9a3 	bl	80070c0 <_Bfree>
 8006d7a:	4639      	mov	r1, r7
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f000 f99f 	bl	80070c0 <_Bfree>
 8006d82:	e6a5      	b.n	8006ad0 <_dtoa_r+0x6d8>
 8006d84:	2600      	movs	r6, #0
 8006d86:	4637      	mov	r7, r6
 8006d88:	e7e1      	b.n	8006d4e <_dtoa_r+0x956>
 8006d8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006d8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006d90:	4637      	mov	r7, r6
 8006d92:	e599      	b.n	80068c8 <_dtoa_r+0x4d0>
 8006d94:	9b08      	ldr	r3, [sp, #32]
 8006d96:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80fd 	beq.w	8006f9a <_dtoa_r+0xba2>
 8006da0:	2d00      	cmp	r5, #0
 8006da2:	dd05      	ble.n	8006db0 <_dtoa_r+0x9b8>
 8006da4:	4639      	mov	r1, r7
 8006da6:	462a      	mov	r2, r5
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fb5b 	bl	8007464 <__lshift>
 8006dae:	4607      	mov	r7, r0
 8006db0:	9b06      	ldr	r3, [sp, #24]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d05c      	beq.n	8006e70 <_dtoa_r+0xa78>
 8006db6:	6879      	ldr	r1, [r7, #4]
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 f941 	bl	8007040 <_Balloc>
 8006dbe:	4605      	mov	r5, r0
 8006dc0:	b928      	cbnz	r0, 8006dce <_dtoa_r+0x9d6>
 8006dc2:	4b80      	ldr	r3, [pc, #512]	; (8006fc4 <_dtoa_r+0xbcc>)
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006dca:	f7ff bb2e 	b.w	800642a <_dtoa_r+0x32>
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	3202      	adds	r2, #2
 8006dd2:	0092      	lsls	r2, r2, #2
 8006dd4:	f107 010c 	add.w	r1, r7, #12
 8006dd8:	300c      	adds	r0, #12
 8006dda:	f7fe fce3 	bl	80057a4 <memcpy>
 8006dde:	2201      	movs	r2, #1
 8006de0:	4629      	mov	r1, r5
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 fb3e 	bl	8007464 <__lshift>
 8006de8:	9b00      	ldr	r3, [sp, #0]
 8006dea:	3301      	adds	r3, #1
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	9b00      	ldr	r3, [sp, #0]
 8006df0:	444b      	add	r3, r9
 8006df2:	9307      	str	r3, [sp, #28]
 8006df4:	9b02      	ldr	r3, [sp, #8]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	46b8      	mov	r8, r7
 8006dfc:	9306      	str	r3, [sp, #24]
 8006dfe:	4607      	mov	r7, r0
 8006e00:	9b01      	ldr	r3, [sp, #4]
 8006e02:	4631      	mov	r1, r6
 8006e04:	3b01      	subs	r3, #1
 8006e06:	4658      	mov	r0, fp
 8006e08:	9302      	str	r3, [sp, #8]
 8006e0a:	f7ff fa67 	bl	80062dc <quorem>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	3330      	adds	r3, #48	; 0x30
 8006e12:	9004      	str	r0, [sp, #16]
 8006e14:	4641      	mov	r1, r8
 8006e16:	4658      	mov	r0, fp
 8006e18:	9308      	str	r3, [sp, #32]
 8006e1a:	f000 fb8f 	bl	800753c <__mcmp>
 8006e1e:	463a      	mov	r2, r7
 8006e20:	4681      	mov	r9, r0
 8006e22:	4631      	mov	r1, r6
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 fba5 	bl	8007574 <__mdiff>
 8006e2a:	68c2      	ldr	r2, [r0, #12]
 8006e2c:	9b08      	ldr	r3, [sp, #32]
 8006e2e:	4605      	mov	r5, r0
 8006e30:	bb02      	cbnz	r2, 8006e74 <_dtoa_r+0xa7c>
 8006e32:	4601      	mov	r1, r0
 8006e34:	4658      	mov	r0, fp
 8006e36:	f000 fb81 	bl	800753c <__mcmp>
 8006e3a:	9b08      	ldr	r3, [sp, #32]
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4620      	mov	r0, r4
 8006e42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006e46:	f000 f93b 	bl	80070c0 <_Bfree>
 8006e4a:	9b05      	ldr	r3, [sp, #20]
 8006e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e4e:	9d01      	ldr	r5, [sp, #4]
 8006e50:	ea43 0102 	orr.w	r1, r3, r2
 8006e54:	9b06      	ldr	r3, [sp, #24]
 8006e56:	430b      	orrs	r3, r1
 8006e58:	9b08      	ldr	r3, [sp, #32]
 8006e5a:	d10d      	bne.n	8006e78 <_dtoa_r+0xa80>
 8006e5c:	2b39      	cmp	r3, #57	; 0x39
 8006e5e:	d029      	beq.n	8006eb4 <_dtoa_r+0xabc>
 8006e60:	f1b9 0f00 	cmp.w	r9, #0
 8006e64:	dd01      	ble.n	8006e6a <_dtoa_r+0xa72>
 8006e66:	9b04      	ldr	r3, [sp, #16]
 8006e68:	3331      	adds	r3, #49	; 0x31
 8006e6a:	9a02      	ldr	r2, [sp, #8]
 8006e6c:	7013      	strb	r3, [r2, #0]
 8006e6e:	e774      	b.n	8006d5a <_dtoa_r+0x962>
 8006e70:	4638      	mov	r0, r7
 8006e72:	e7b9      	b.n	8006de8 <_dtoa_r+0x9f0>
 8006e74:	2201      	movs	r2, #1
 8006e76:	e7e2      	b.n	8006e3e <_dtoa_r+0xa46>
 8006e78:	f1b9 0f00 	cmp.w	r9, #0
 8006e7c:	db06      	blt.n	8006e8c <_dtoa_r+0xa94>
 8006e7e:	9905      	ldr	r1, [sp, #20]
 8006e80:	ea41 0909 	orr.w	r9, r1, r9
 8006e84:	9906      	ldr	r1, [sp, #24]
 8006e86:	ea59 0101 	orrs.w	r1, r9, r1
 8006e8a:	d120      	bne.n	8006ece <_dtoa_r+0xad6>
 8006e8c:	2a00      	cmp	r2, #0
 8006e8e:	ddec      	ble.n	8006e6a <_dtoa_r+0xa72>
 8006e90:	4659      	mov	r1, fp
 8006e92:	2201      	movs	r2, #1
 8006e94:	4620      	mov	r0, r4
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	f000 fae4 	bl	8007464 <__lshift>
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	4683      	mov	fp, r0
 8006ea0:	f000 fb4c 	bl	800753c <__mcmp>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	9b01      	ldr	r3, [sp, #4]
 8006ea8:	dc02      	bgt.n	8006eb0 <_dtoa_r+0xab8>
 8006eaa:	d1de      	bne.n	8006e6a <_dtoa_r+0xa72>
 8006eac:	07da      	lsls	r2, r3, #31
 8006eae:	d5dc      	bpl.n	8006e6a <_dtoa_r+0xa72>
 8006eb0:	2b39      	cmp	r3, #57	; 0x39
 8006eb2:	d1d8      	bne.n	8006e66 <_dtoa_r+0xa6e>
 8006eb4:	9a02      	ldr	r2, [sp, #8]
 8006eb6:	2339      	movs	r3, #57	; 0x39
 8006eb8:	7013      	strb	r3, [r2, #0]
 8006eba:	462b      	mov	r3, r5
 8006ebc:	461d      	mov	r5, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ec4:	2a39      	cmp	r2, #57	; 0x39
 8006ec6:	d050      	beq.n	8006f6a <_dtoa_r+0xb72>
 8006ec8:	3201      	adds	r2, #1
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	e745      	b.n	8006d5a <_dtoa_r+0x962>
 8006ece:	2a00      	cmp	r2, #0
 8006ed0:	dd03      	ble.n	8006eda <_dtoa_r+0xae2>
 8006ed2:	2b39      	cmp	r3, #57	; 0x39
 8006ed4:	d0ee      	beq.n	8006eb4 <_dtoa_r+0xabc>
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	e7c7      	b.n	8006e6a <_dtoa_r+0xa72>
 8006eda:	9a01      	ldr	r2, [sp, #4]
 8006edc:	9907      	ldr	r1, [sp, #28]
 8006ede:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ee2:	428a      	cmp	r2, r1
 8006ee4:	d02a      	beq.n	8006f3c <_dtoa_r+0xb44>
 8006ee6:	4659      	mov	r1, fp
 8006ee8:	2300      	movs	r3, #0
 8006eea:	220a      	movs	r2, #10
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 f909 	bl	8007104 <__multadd>
 8006ef2:	45b8      	cmp	r8, r7
 8006ef4:	4683      	mov	fp, r0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	f04f 020a 	mov.w	r2, #10
 8006efe:	4641      	mov	r1, r8
 8006f00:	4620      	mov	r0, r4
 8006f02:	d107      	bne.n	8006f14 <_dtoa_r+0xb1c>
 8006f04:	f000 f8fe 	bl	8007104 <__multadd>
 8006f08:	4680      	mov	r8, r0
 8006f0a:	4607      	mov	r7, r0
 8006f0c:	9b01      	ldr	r3, [sp, #4]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	e775      	b.n	8006e00 <_dtoa_r+0xa08>
 8006f14:	f000 f8f6 	bl	8007104 <__multadd>
 8006f18:	4639      	mov	r1, r7
 8006f1a:	4680      	mov	r8, r0
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	220a      	movs	r2, #10
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 f8ef 	bl	8007104 <__multadd>
 8006f26:	4607      	mov	r7, r0
 8006f28:	e7f0      	b.n	8006f0c <_dtoa_r+0xb14>
 8006f2a:	f1b9 0f00 	cmp.w	r9, #0
 8006f2e:	9a00      	ldr	r2, [sp, #0]
 8006f30:	bfcc      	ite	gt
 8006f32:	464d      	movgt	r5, r9
 8006f34:	2501      	movle	r5, #1
 8006f36:	4415      	add	r5, r2
 8006f38:	f04f 0800 	mov.w	r8, #0
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	2201      	movs	r2, #1
 8006f40:	4620      	mov	r0, r4
 8006f42:	9301      	str	r3, [sp, #4]
 8006f44:	f000 fa8e 	bl	8007464 <__lshift>
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4683      	mov	fp, r0
 8006f4c:	f000 faf6 	bl	800753c <__mcmp>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	dcb2      	bgt.n	8006eba <_dtoa_r+0xac2>
 8006f54:	d102      	bne.n	8006f5c <_dtoa_r+0xb64>
 8006f56:	9b01      	ldr	r3, [sp, #4]
 8006f58:	07db      	lsls	r3, r3, #31
 8006f5a:	d4ae      	bmi.n	8006eba <_dtoa_r+0xac2>
 8006f5c:	462b      	mov	r3, r5
 8006f5e:	461d      	mov	r5, r3
 8006f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f64:	2a30      	cmp	r2, #48	; 0x30
 8006f66:	d0fa      	beq.n	8006f5e <_dtoa_r+0xb66>
 8006f68:	e6f7      	b.n	8006d5a <_dtoa_r+0x962>
 8006f6a:	9a00      	ldr	r2, [sp, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d1a5      	bne.n	8006ebc <_dtoa_r+0xac4>
 8006f70:	f10a 0a01 	add.w	sl, sl, #1
 8006f74:	2331      	movs	r3, #49	; 0x31
 8006f76:	e779      	b.n	8006e6c <_dtoa_r+0xa74>
 8006f78:	4b13      	ldr	r3, [pc, #76]	; (8006fc8 <_dtoa_r+0xbd0>)
 8006f7a:	f7ff baaf 	b.w	80064dc <_dtoa_r+0xe4>
 8006f7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f47f aa86 	bne.w	8006492 <_dtoa_r+0x9a>
 8006f86:	4b11      	ldr	r3, [pc, #68]	; (8006fcc <_dtoa_r+0xbd4>)
 8006f88:	f7ff baa8 	b.w	80064dc <_dtoa_r+0xe4>
 8006f8c:	f1b9 0f00 	cmp.w	r9, #0
 8006f90:	dc03      	bgt.n	8006f9a <_dtoa_r+0xba2>
 8006f92:	9b05      	ldr	r3, [sp, #20]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	f73f aec9 	bgt.w	8006d2c <_dtoa_r+0x934>
 8006f9a:	9d00      	ldr	r5, [sp, #0]
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4658      	mov	r0, fp
 8006fa0:	f7ff f99c 	bl	80062dc <quorem>
 8006fa4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006fa8:	f805 3b01 	strb.w	r3, [r5], #1
 8006fac:	9a00      	ldr	r2, [sp, #0]
 8006fae:	1aaa      	subs	r2, r5, r2
 8006fb0:	4591      	cmp	r9, r2
 8006fb2:	ddba      	ble.n	8006f2a <_dtoa_r+0xb32>
 8006fb4:	4659      	mov	r1, fp
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	220a      	movs	r2, #10
 8006fba:	4620      	mov	r0, r4
 8006fbc:	f000 f8a2 	bl	8007104 <__multadd>
 8006fc0:	4683      	mov	fp, r0
 8006fc2:	e7eb      	b.n	8006f9c <_dtoa_r+0xba4>
 8006fc4:	08008ccc 	.word	0x08008ccc
 8006fc8:	08008ae8 	.word	0x08008ae8
 8006fcc:	08008c49 	.word	0x08008c49

08006fd0 <fiprintf>:
 8006fd0:	b40e      	push	{r1, r2, r3}
 8006fd2:	b503      	push	{r0, r1, lr}
 8006fd4:	4601      	mov	r1, r0
 8006fd6:	ab03      	add	r3, sp, #12
 8006fd8:	4805      	ldr	r0, [pc, #20]	; (8006ff0 <fiprintf+0x20>)
 8006fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fde:	6800      	ldr	r0, [r0, #0]
 8006fe0:	9301      	str	r3, [sp, #4]
 8006fe2:	f000 fbe3 	bl	80077ac <_vfiprintf_r>
 8006fe6:	b002      	add	sp, #8
 8006fe8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fec:	b003      	add	sp, #12
 8006fee:	4770      	bx	lr
 8006ff0:	20000010 	.word	0x20000010

08006ff4 <_localeconv_r>:
 8006ff4:	4800      	ldr	r0, [pc, #0]	; (8006ff8 <_localeconv_r+0x4>)
 8006ff6:	4770      	bx	lr
 8006ff8:	20000164 	.word	0x20000164

08006ffc <__retarget_lock_init_recursive>:
 8006ffc:	4770      	bx	lr

08006ffe <__retarget_lock_acquire_recursive>:
 8006ffe:	4770      	bx	lr

08007000 <__retarget_lock_release_recursive>:
 8007000:	4770      	bx	lr

08007002 <__ascii_mbtowc>:
 8007002:	b082      	sub	sp, #8
 8007004:	b901      	cbnz	r1, 8007008 <__ascii_mbtowc+0x6>
 8007006:	a901      	add	r1, sp, #4
 8007008:	b142      	cbz	r2, 800701c <__ascii_mbtowc+0x1a>
 800700a:	b14b      	cbz	r3, 8007020 <__ascii_mbtowc+0x1e>
 800700c:	7813      	ldrb	r3, [r2, #0]
 800700e:	600b      	str	r3, [r1, #0]
 8007010:	7812      	ldrb	r2, [r2, #0]
 8007012:	1e10      	subs	r0, r2, #0
 8007014:	bf18      	it	ne
 8007016:	2001      	movne	r0, #1
 8007018:	b002      	add	sp, #8
 800701a:	4770      	bx	lr
 800701c:	4610      	mov	r0, r2
 800701e:	e7fb      	b.n	8007018 <__ascii_mbtowc+0x16>
 8007020:	f06f 0001 	mvn.w	r0, #1
 8007024:	e7f8      	b.n	8007018 <__ascii_mbtowc+0x16>
	...

08007028 <__malloc_lock>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__malloc_lock+0x8>)
 800702a:	f7ff bfe8 	b.w	8006ffe <__retarget_lock_acquire_recursive>
 800702e:	bf00      	nop
 8007030:	200005b4 	.word	0x200005b4

08007034 <__malloc_unlock>:
 8007034:	4801      	ldr	r0, [pc, #4]	; (800703c <__malloc_unlock+0x8>)
 8007036:	f7ff bfe3 	b.w	8007000 <__retarget_lock_release_recursive>
 800703a:	bf00      	nop
 800703c:	200005b4 	.word	0x200005b4

08007040 <_Balloc>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007044:	4604      	mov	r4, r0
 8007046:	460d      	mov	r5, r1
 8007048:	b976      	cbnz	r6, 8007068 <_Balloc+0x28>
 800704a:	2010      	movs	r0, #16
 800704c:	f7fe fba2 	bl	8005794 <malloc>
 8007050:	4602      	mov	r2, r0
 8007052:	6260      	str	r0, [r4, #36]	; 0x24
 8007054:	b920      	cbnz	r0, 8007060 <_Balloc+0x20>
 8007056:	4b18      	ldr	r3, [pc, #96]	; (80070b8 <_Balloc+0x78>)
 8007058:	4818      	ldr	r0, [pc, #96]	; (80070bc <_Balloc+0x7c>)
 800705a:	2166      	movs	r1, #102	; 0x66
 800705c:	f7ff f920 	bl	80062a0 <__assert_func>
 8007060:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007064:	6006      	str	r6, [r0, #0]
 8007066:	60c6      	str	r6, [r0, #12]
 8007068:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800706a:	68f3      	ldr	r3, [r6, #12]
 800706c:	b183      	cbz	r3, 8007090 <_Balloc+0x50>
 800706e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007076:	b9b8      	cbnz	r0, 80070a8 <_Balloc+0x68>
 8007078:	2101      	movs	r1, #1
 800707a:	fa01 f605 	lsl.w	r6, r1, r5
 800707e:	1d72      	adds	r2, r6, #5
 8007080:	0092      	lsls	r2, r2, #2
 8007082:	4620      	mov	r0, r4
 8007084:	f000 fb5a 	bl	800773c <_calloc_r>
 8007088:	b160      	cbz	r0, 80070a4 <_Balloc+0x64>
 800708a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800708e:	e00e      	b.n	80070ae <_Balloc+0x6e>
 8007090:	2221      	movs	r2, #33	; 0x21
 8007092:	2104      	movs	r1, #4
 8007094:	4620      	mov	r0, r4
 8007096:	f000 fb51 	bl	800773c <_calloc_r>
 800709a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800709c:	60f0      	str	r0, [r6, #12]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e4      	bne.n	800706e <_Balloc+0x2e>
 80070a4:	2000      	movs	r0, #0
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	6802      	ldr	r2, [r0, #0]
 80070aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070ae:	2300      	movs	r3, #0
 80070b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070b4:	e7f7      	b.n	80070a6 <_Balloc+0x66>
 80070b6:	bf00      	nop
 80070b8:	08008c56 	.word	0x08008c56
 80070bc:	08008ce7 	.word	0x08008ce7

080070c0 <_Bfree>:
 80070c0:	b570      	push	{r4, r5, r6, lr}
 80070c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070c4:	4605      	mov	r5, r0
 80070c6:	460c      	mov	r4, r1
 80070c8:	b976      	cbnz	r6, 80070e8 <_Bfree+0x28>
 80070ca:	2010      	movs	r0, #16
 80070cc:	f7fe fb62 	bl	8005794 <malloc>
 80070d0:	4602      	mov	r2, r0
 80070d2:	6268      	str	r0, [r5, #36]	; 0x24
 80070d4:	b920      	cbnz	r0, 80070e0 <_Bfree+0x20>
 80070d6:	4b09      	ldr	r3, [pc, #36]	; (80070fc <_Bfree+0x3c>)
 80070d8:	4809      	ldr	r0, [pc, #36]	; (8007100 <_Bfree+0x40>)
 80070da:	218a      	movs	r1, #138	; 0x8a
 80070dc:	f7ff f8e0 	bl	80062a0 <__assert_func>
 80070e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070e4:	6006      	str	r6, [r0, #0]
 80070e6:	60c6      	str	r6, [r0, #12]
 80070e8:	b13c      	cbz	r4, 80070fa <_Bfree+0x3a>
 80070ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070ec:	6862      	ldr	r2, [r4, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070f4:	6021      	str	r1, [r4, #0]
 80070f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	08008c56 	.word	0x08008c56
 8007100:	08008ce7 	.word	0x08008ce7

08007104 <__multadd>:
 8007104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007108:	690e      	ldr	r6, [r1, #16]
 800710a:	4607      	mov	r7, r0
 800710c:	4698      	mov	r8, r3
 800710e:	460c      	mov	r4, r1
 8007110:	f101 0014 	add.w	r0, r1, #20
 8007114:	2300      	movs	r3, #0
 8007116:	6805      	ldr	r5, [r0, #0]
 8007118:	b2a9      	uxth	r1, r5
 800711a:	fb02 8101 	mla	r1, r2, r1, r8
 800711e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007122:	0c2d      	lsrs	r5, r5, #16
 8007124:	fb02 c505 	mla	r5, r2, r5, ip
 8007128:	b289      	uxth	r1, r1
 800712a:	3301      	adds	r3, #1
 800712c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007130:	429e      	cmp	r6, r3
 8007132:	f840 1b04 	str.w	r1, [r0], #4
 8007136:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800713a:	dcec      	bgt.n	8007116 <__multadd+0x12>
 800713c:	f1b8 0f00 	cmp.w	r8, #0
 8007140:	d022      	beq.n	8007188 <__multadd+0x84>
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	42b3      	cmp	r3, r6
 8007146:	dc19      	bgt.n	800717c <__multadd+0x78>
 8007148:	6861      	ldr	r1, [r4, #4]
 800714a:	4638      	mov	r0, r7
 800714c:	3101      	adds	r1, #1
 800714e:	f7ff ff77 	bl	8007040 <_Balloc>
 8007152:	4605      	mov	r5, r0
 8007154:	b928      	cbnz	r0, 8007162 <__multadd+0x5e>
 8007156:	4602      	mov	r2, r0
 8007158:	4b0d      	ldr	r3, [pc, #52]	; (8007190 <__multadd+0x8c>)
 800715a:	480e      	ldr	r0, [pc, #56]	; (8007194 <__multadd+0x90>)
 800715c:	21b5      	movs	r1, #181	; 0xb5
 800715e:	f7ff f89f 	bl	80062a0 <__assert_func>
 8007162:	6922      	ldr	r2, [r4, #16]
 8007164:	3202      	adds	r2, #2
 8007166:	f104 010c 	add.w	r1, r4, #12
 800716a:	0092      	lsls	r2, r2, #2
 800716c:	300c      	adds	r0, #12
 800716e:	f7fe fb19 	bl	80057a4 <memcpy>
 8007172:	4621      	mov	r1, r4
 8007174:	4638      	mov	r0, r7
 8007176:	f7ff ffa3 	bl	80070c0 <_Bfree>
 800717a:	462c      	mov	r4, r5
 800717c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007180:	3601      	adds	r6, #1
 8007182:	f8c3 8014 	str.w	r8, [r3, #20]
 8007186:	6126      	str	r6, [r4, #16]
 8007188:	4620      	mov	r0, r4
 800718a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800718e:	bf00      	nop
 8007190:	08008ccc 	.word	0x08008ccc
 8007194:	08008ce7 	.word	0x08008ce7

08007198 <__hi0bits>:
 8007198:	0c03      	lsrs	r3, r0, #16
 800719a:	041b      	lsls	r3, r3, #16
 800719c:	b9d3      	cbnz	r3, 80071d4 <__hi0bits+0x3c>
 800719e:	0400      	lsls	r0, r0, #16
 80071a0:	2310      	movs	r3, #16
 80071a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071a6:	bf04      	itt	eq
 80071a8:	0200      	lsleq	r0, r0, #8
 80071aa:	3308      	addeq	r3, #8
 80071ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80071b0:	bf04      	itt	eq
 80071b2:	0100      	lsleq	r0, r0, #4
 80071b4:	3304      	addeq	r3, #4
 80071b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80071ba:	bf04      	itt	eq
 80071bc:	0080      	lsleq	r0, r0, #2
 80071be:	3302      	addeq	r3, #2
 80071c0:	2800      	cmp	r0, #0
 80071c2:	db05      	blt.n	80071d0 <__hi0bits+0x38>
 80071c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071c8:	f103 0301 	add.w	r3, r3, #1
 80071cc:	bf08      	it	eq
 80071ce:	2320      	moveq	r3, #32
 80071d0:	4618      	mov	r0, r3
 80071d2:	4770      	bx	lr
 80071d4:	2300      	movs	r3, #0
 80071d6:	e7e4      	b.n	80071a2 <__hi0bits+0xa>

080071d8 <__lo0bits>:
 80071d8:	6803      	ldr	r3, [r0, #0]
 80071da:	f013 0207 	ands.w	r2, r3, #7
 80071de:	4601      	mov	r1, r0
 80071e0:	d00b      	beq.n	80071fa <__lo0bits+0x22>
 80071e2:	07da      	lsls	r2, r3, #31
 80071e4:	d424      	bmi.n	8007230 <__lo0bits+0x58>
 80071e6:	0798      	lsls	r0, r3, #30
 80071e8:	bf49      	itett	mi
 80071ea:	085b      	lsrmi	r3, r3, #1
 80071ec:	089b      	lsrpl	r3, r3, #2
 80071ee:	2001      	movmi	r0, #1
 80071f0:	600b      	strmi	r3, [r1, #0]
 80071f2:	bf5c      	itt	pl
 80071f4:	600b      	strpl	r3, [r1, #0]
 80071f6:	2002      	movpl	r0, #2
 80071f8:	4770      	bx	lr
 80071fa:	b298      	uxth	r0, r3
 80071fc:	b9b0      	cbnz	r0, 800722c <__lo0bits+0x54>
 80071fe:	0c1b      	lsrs	r3, r3, #16
 8007200:	2010      	movs	r0, #16
 8007202:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007206:	bf04      	itt	eq
 8007208:	0a1b      	lsreq	r3, r3, #8
 800720a:	3008      	addeq	r0, #8
 800720c:	071a      	lsls	r2, r3, #28
 800720e:	bf04      	itt	eq
 8007210:	091b      	lsreq	r3, r3, #4
 8007212:	3004      	addeq	r0, #4
 8007214:	079a      	lsls	r2, r3, #30
 8007216:	bf04      	itt	eq
 8007218:	089b      	lsreq	r3, r3, #2
 800721a:	3002      	addeq	r0, #2
 800721c:	07da      	lsls	r2, r3, #31
 800721e:	d403      	bmi.n	8007228 <__lo0bits+0x50>
 8007220:	085b      	lsrs	r3, r3, #1
 8007222:	f100 0001 	add.w	r0, r0, #1
 8007226:	d005      	beq.n	8007234 <__lo0bits+0x5c>
 8007228:	600b      	str	r3, [r1, #0]
 800722a:	4770      	bx	lr
 800722c:	4610      	mov	r0, r2
 800722e:	e7e8      	b.n	8007202 <__lo0bits+0x2a>
 8007230:	2000      	movs	r0, #0
 8007232:	4770      	bx	lr
 8007234:	2020      	movs	r0, #32
 8007236:	4770      	bx	lr

08007238 <__i2b>:
 8007238:	b510      	push	{r4, lr}
 800723a:	460c      	mov	r4, r1
 800723c:	2101      	movs	r1, #1
 800723e:	f7ff feff 	bl	8007040 <_Balloc>
 8007242:	4602      	mov	r2, r0
 8007244:	b928      	cbnz	r0, 8007252 <__i2b+0x1a>
 8007246:	4b05      	ldr	r3, [pc, #20]	; (800725c <__i2b+0x24>)
 8007248:	4805      	ldr	r0, [pc, #20]	; (8007260 <__i2b+0x28>)
 800724a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800724e:	f7ff f827 	bl	80062a0 <__assert_func>
 8007252:	2301      	movs	r3, #1
 8007254:	6144      	str	r4, [r0, #20]
 8007256:	6103      	str	r3, [r0, #16]
 8007258:	bd10      	pop	{r4, pc}
 800725a:	bf00      	nop
 800725c:	08008ccc 	.word	0x08008ccc
 8007260:	08008ce7 	.word	0x08008ce7

08007264 <__multiply>:
 8007264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007268:	4614      	mov	r4, r2
 800726a:	690a      	ldr	r2, [r1, #16]
 800726c:	6923      	ldr	r3, [r4, #16]
 800726e:	429a      	cmp	r2, r3
 8007270:	bfb8      	it	lt
 8007272:	460b      	movlt	r3, r1
 8007274:	460d      	mov	r5, r1
 8007276:	bfbc      	itt	lt
 8007278:	4625      	movlt	r5, r4
 800727a:	461c      	movlt	r4, r3
 800727c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007280:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007284:	68ab      	ldr	r3, [r5, #8]
 8007286:	6869      	ldr	r1, [r5, #4]
 8007288:	eb0a 0709 	add.w	r7, sl, r9
 800728c:	42bb      	cmp	r3, r7
 800728e:	b085      	sub	sp, #20
 8007290:	bfb8      	it	lt
 8007292:	3101      	addlt	r1, #1
 8007294:	f7ff fed4 	bl	8007040 <_Balloc>
 8007298:	b930      	cbnz	r0, 80072a8 <__multiply+0x44>
 800729a:	4602      	mov	r2, r0
 800729c:	4b42      	ldr	r3, [pc, #264]	; (80073a8 <__multiply+0x144>)
 800729e:	4843      	ldr	r0, [pc, #268]	; (80073ac <__multiply+0x148>)
 80072a0:	f240 115d 	movw	r1, #349	; 0x15d
 80072a4:	f7fe fffc 	bl	80062a0 <__assert_func>
 80072a8:	f100 0614 	add.w	r6, r0, #20
 80072ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80072b0:	4633      	mov	r3, r6
 80072b2:	2200      	movs	r2, #0
 80072b4:	4543      	cmp	r3, r8
 80072b6:	d31e      	bcc.n	80072f6 <__multiply+0x92>
 80072b8:	f105 0c14 	add.w	ip, r5, #20
 80072bc:	f104 0314 	add.w	r3, r4, #20
 80072c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80072c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80072c8:	9202      	str	r2, [sp, #8]
 80072ca:	ebac 0205 	sub.w	r2, ip, r5
 80072ce:	3a15      	subs	r2, #21
 80072d0:	f022 0203 	bic.w	r2, r2, #3
 80072d4:	3204      	adds	r2, #4
 80072d6:	f105 0115 	add.w	r1, r5, #21
 80072da:	458c      	cmp	ip, r1
 80072dc:	bf38      	it	cc
 80072de:	2204      	movcc	r2, #4
 80072e0:	9201      	str	r2, [sp, #4]
 80072e2:	9a02      	ldr	r2, [sp, #8]
 80072e4:	9303      	str	r3, [sp, #12]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d808      	bhi.n	80072fc <__multiply+0x98>
 80072ea:	2f00      	cmp	r7, #0
 80072ec:	dc55      	bgt.n	800739a <__multiply+0x136>
 80072ee:	6107      	str	r7, [r0, #16]
 80072f0:	b005      	add	sp, #20
 80072f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f6:	f843 2b04 	str.w	r2, [r3], #4
 80072fa:	e7db      	b.n	80072b4 <__multiply+0x50>
 80072fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8007300:	f1ba 0f00 	cmp.w	sl, #0
 8007304:	d020      	beq.n	8007348 <__multiply+0xe4>
 8007306:	f105 0e14 	add.w	lr, r5, #20
 800730a:	46b1      	mov	r9, r6
 800730c:	2200      	movs	r2, #0
 800730e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007312:	f8d9 b000 	ldr.w	fp, [r9]
 8007316:	b2a1      	uxth	r1, r4
 8007318:	fa1f fb8b 	uxth.w	fp, fp
 800731c:	fb0a b101 	mla	r1, sl, r1, fp
 8007320:	4411      	add	r1, r2
 8007322:	f8d9 2000 	ldr.w	r2, [r9]
 8007326:	0c24      	lsrs	r4, r4, #16
 8007328:	0c12      	lsrs	r2, r2, #16
 800732a:	fb0a 2404 	mla	r4, sl, r4, r2
 800732e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007332:	b289      	uxth	r1, r1
 8007334:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007338:	45f4      	cmp	ip, lr
 800733a:	f849 1b04 	str.w	r1, [r9], #4
 800733e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007342:	d8e4      	bhi.n	800730e <__multiply+0xaa>
 8007344:	9901      	ldr	r1, [sp, #4]
 8007346:	5072      	str	r2, [r6, r1]
 8007348:	9a03      	ldr	r2, [sp, #12]
 800734a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800734e:	3304      	adds	r3, #4
 8007350:	f1b9 0f00 	cmp.w	r9, #0
 8007354:	d01f      	beq.n	8007396 <__multiply+0x132>
 8007356:	6834      	ldr	r4, [r6, #0]
 8007358:	f105 0114 	add.w	r1, r5, #20
 800735c:	46b6      	mov	lr, r6
 800735e:	f04f 0a00 	mov.w	sl, #0
 8007362:	880a      	ldrh	r2, [r1, #0]
 8007364:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007368:	fb09 b202 	mla	r2, r9, r2, fp
 800736c:	4492      	add	sl, r2
 800736e:	b2a4      	uxth	r4, r4
 8007370:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007374:	f84e 4b04 	str.w	r4, [lr], #4
 8007378:	f851 4b04 	ldr.w	r4, [r1], #4
 800737c:	f8be 2000 	ldrh.w	r2, [lr]
 8007380:	0c24      	lsrs	r4, r4, #16
 8007382:	fb09 2404 	mla	r4, r9, r4, r2
 8007386:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800738a:	458c      	cmp	ip, r1
 800738c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007390:	d8e7      	bhi.n	8007362 <__multiply+0xfe>
 8007392:	9a01      	ldr	r2, [sp, #4]
 8007394:	50b4      	str	r4, [r6, r2]
 8007396:	3604      	adds	r6, #4
 8007398:	e7a3      	b.n	80072e2 <__multiply+0x7e>
 800739a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1a5      	bne.n	80072ee <__multiply+0x8a>
 80073a2:	3f01      	subs	r7, #1
 80073a4:	e7a1      	b.n	80072ea <__multiply+0x86>
 80073a6:	bf00      	nop
 80073a8:	08008ccc 	.word	0x08008ccc
 80073ac:	08008ce7 	.word	0x08008ce7

080073b0 <__pow5mult>:
 80073b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b4:	4615      	mov	r5, r2
 80073b6:	f012 0203 	ands.w	r2, r2, #3
 80073ba:	4606      	mov	r6, r0
 80073bc:	460f      	mov	r7, r1
 80073be:	d007      	beq.n	80073d0 <__pow5mult+0x20>
 80073c0:	4c25      	ldr	r4, [pc, #148]	; (8007458 <__pow5mult+0xa8>)
 80073c2:	3a01      	subs	r2, #1
 80073c4:	2300      	movs	r3, #0
 80073c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073ca:	f7ff fe9b 	bl	8007104 <__multadd>
 80073ce:	4607      	mov	r7, r0
 80073d0:	10ad      	asrs	r5, r5, #2
 80073d2:	d03d      	beq.n	8007450 <__pow5mult+0xa0>
 80073d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073d6:	b97c      	cbnz	r4, 80073f8 <__pow5mult+0x48>
 80073d8:	2010      	movs	r0, #16
 80073da:	f7fe f9db 	bl	8005794 <malloc>
 80073de:	4602      	mov	r2, r0
 80073e0:	6270      	str	r0, [r6, #36]	; 0x24
 80073e2:	b928      	cbnz	r0, 80073f0 <__pow5mult+0x40>
 80073e4:	4b1d      	ldr	r3, [pc, #116]	; (800745c <__pow5mult+0xac>)
 80073e6:	481e      	ldr	r0, [pc, #120]	; (8007460 <__pow5mult+0xb0>)
 80073e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073ec:	f7fe ff58 	bl	80062a0 <__assert_func>
 80073f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073f4:	6004      	str	r4, [r0, #0]
 80073f6:	60c4      	str	r4, [r0, #12]
 80073f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007400:	b94c      	cbnz	r4, 8007416 <__pow5mult+0x66>
 8007402:	f240 2171 	movw	r1, #625	; 0x271
 8007406:	4630      	mov	r0, r6
 8007408:	f7ff ff16 	bl	8007238 <__i2b>
 800740c:	2300      	movs	r3, #0
 800740e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007412:	4604      	mov	r4, r0
 8007414:	6003      	str	r3, [r0, #0]
 8007416:	f04f 0900 	mov.w	r9, #0
 800741a:	07eb      	lsls	r3, r5, #31
 800741c:	d50a      	bpl.n	8007434 <__pow5mult+0x84>
 800741e:	4639      	mov	r1, r7
 8007420:	4622      	mov	r2, r4
 8007422:	4630      	mov	r0, r6
 8007424:	f7ff ff1e 	bl	8007264 <__multiply>
 8007428:	4639      	mov	r1, r7
 800742a:	4680      	mov	r8, r0
 800742c:	4630      	mov	r0, r6
 800742e:	f7ff fe47 	bl	80070c0 <_Bfree>
 8007432:	4647      	mov	r7, r8
 8007434:	106d      	asrs	r5, r5, #1
 8007436:	d00b      	beq.n	8007450 <__pow5mult+0xa0>
 8007438:	6820      	ldr	r0, [r4, #0]
 800743a:	b938      	cbnz	r0, 800744c <__pow5mult+0x9c>
 800743c:	4622      	mov	r2, r4
 800743e:	4621      	mov	r1, r4
 8007440:	4630      	mov	r0, r6
 8007442:	f7ff ff0f 	bl	8007264 <__multiply>
 8007446:	6020      	str	r0, [r4, #0]
 8007448:	f8c0 9000 	str.w	r9, [r0]
 800744c:	4604      	mov	r4, r0
 800744e:	e7e4      	b.n	800741a <__pow5mult+0x6a>
 8007450:	4638      	mov	r0, r7
 8007452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007456:	bf00      	nop
 8007458:	08008e38 	.word	0x08008e38
 800745c:	08008c56 	.word	0x08008c56
 8007460:	08008ce7 	.word	0x08008ce7

08007464 <__lshift>:
 8007464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	460c      	mov	r4, r1
 800746a:	6849      	ldr	r1, [r1, #4]
 800746c:	6923      	ldr	r3, [r4, #16]
 800746e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007472:	68a3      	ldr	r3, [r4, #8]
 8007474:	4607      	mov	r7, r0
 8007476:	4691      	mov	r9, r2
 8007478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800747c:	f108 0601 	add.w	r6, r8, #1
 8007480:	42b3      	cmp	r3, r6
 8007482:	db0b      	blt.n	800749c <__lshift+0x38>
 8007484:	4638      	mov	r0, r7
 8007486:	f7ff fddb 	bl	8007040 <_Balloc>
 800748a:	4605      	mov	r5, r0
 800748c:	b948      	cbnz	r0, 80074a2 <__lshift+0x3e>
 800748e:	4602      	mov	r2, r0
 8007490:	4b28      	ldr	r3, [pc, #160]	; (8007534 <__lshift+0xd0>)
 8007492:	4829      	ldr	r0, [pc, #164]	; (8007538 <__lshift+0xd4>)
 8007494:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007498:	f7fe ff02 	bl	80062a0 <__assert_func>
 800749c:	3101      	adds	r1, #1
 800749e:	005b      	lsls	r3, r3, #1
 80074a0:	e7ee      	b.n	8007480 <__lshift+0x1c>
 80074a2:	2300      	movs	r3, #0
 80074a4:	f100 0114 	add.w	r1, r0, #20
 80074a8:	f100 0210 	add.w	r2, r0, #16
 80074ac:	4618      	mov	r0, r3
 80074ae:	4553      	cmp	r3, sl
 80074b0:	db33      	blt.n	800751a <__lshift+0xb6>
 80074b2:	6920      	ldr	r0, [r4, #16]
 80074b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074b8:	f104 0314 	add.w	r3, r4, #20
 80074bc:	f019 091f 	ands.w	r9, r9, #31
 80074c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074c8:	d02b      	beq.n	8007522 <__lshift+0xbe>
 80074ca:	f1c9 0e20 	rsb	lr, r9, #32
 80074ce:	468a      	mov	sl, r1
 80074d0:	2200      	movs	r2, #0
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	fa00 f009 	lsl.w	r0, r0, r9
 80074d8:	4302      	orrs	r2, r0
 80074da:	f84a 2b04 	str.w	r2, [sl], #4
 80074de:	f853 2b04 	ldr.w	r2, [r3], #4
 80074e2:	459c      	cmp	ip, r3
 80074e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80074e8:	d8f3      	bhi.n	80074d2 <__lshift+0x6e>
 80074ea:	ebac 0304 	sub.w	r3, ip, r4
 80074ee:	3b15      	subs	r3, #21
 80074f0:	f023 0303 	bic.w	r3, r3, #3
 80074f4:	3304      	adds	r3, #4
 80074f6:	f104 0015 	add.w	r0, r4, #21
 80074fa:	4584      	cmp	ip, r0
 80074fc:	bf38      	it	cc
 80074fe:	2304      	movcc	r3, #4
 8007500:	50ca      	str	r2, [r1, r3]
 8007502:	b10a      	cbz	r2, 8007508 <__lshift+0xa4>
 8007504:	f108 0602 	add.w	r6, r8, #2
 8007508:	3e01      	subs	r6, #1
 800750a:	4638      	mov	r0, r7
 800750c:	612e      	str	r6, [r5, #16]
 800750e:	4621      	mov	r1, r4
 8007510:	f7ff fdd6 	bl	80070c0 <_Bfree>
 8007514:	4628      	mov	r0, r5
 8007516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751a:	f842 0f04 	str.w	r0, [r2, #4]!
 800751e:	3301      	adds	r3, #1
 8007520:	e7c5      	b.n	80074ae <__lshift+0x4a>
 8007522:	3904      	subs	r1, #4
 8007524:	f853 2b04 	ldr.w	r2, [r3], #4
 8007528:	f841 2f04 	str.w	r2, [r1, #4]!
 800752c:	459c      	cmp	ip, r3
 800752e:	d8f9      	bhi.n	8007524 <__lshift+0xc0>
 8007530:	e7ea      	b.n	8007508 <__lshift+0xa4>
 8007532:	bf00      	nop
 8007534:	08008ccc 	.word	0x08008ccc
 8007538:	08008ce7 	.word	0x08008ce7

0800753c <__mcmp>:
 800753c:	b530      	push	{r4, r5, lr}
 800753e:	6902      	ldr	r2, [r0, #16]
 8007540:	690c      	ldr	r4, [r1, #16]
 8007542:	1b12      	subs	r2, r2, r4
 8007544:	d10e      	bne.n	8007564 <__mcmp+0x28>
 8007546:	f100 0314 	add.w	r3, r0, #20
 800754a:	3114      	adds	r1, #20
 800754c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007550:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007554:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007558:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800755c:	42a5      	cmp	r5, r4
 800755e:	d003      	beq.n	8007568 <__mcmp+0x2c>
 8007560:	d305      	bcc.n	800756e <__mcmp+0x32>
 8007562:	2201      	movs	r2, #1
 8007564:	4610      	mov	r0, r2
 8007566:	bd30      	pop	{r4, r5, pc}
 8007568:	4283      	cmp	r3, r0
 800756a:	d3f3      	bcc.n	8007554 <__mcmp+0x18>
 800756c:	e7fa      	b.n	8007564 <__mcmp+0x28>
 800756e:	f04f 32ff 	mov.w	r2, #4294967295
 8007572:	e7f7      	b.n	8007564 <__mcmp+0x28>

08007574 <__mdiff>:
 8007574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007578:	460c      	mov	r4, r1
 800757a:	4606      	mov	r6, r0
 800757c:	4611      	mov	r1, r2
 800757e:	4620      	mov	r0, r4
 8007580:	4617      	mov	r7, r2
 8007582:	f7ff ffdb 	bl	800753c <__mcmp>
 8007586:	1e05      	subs	r5, r0, #0
 8007588:	d110      	bne.n	80075ac <__mdiff+0x38>
 800758a:	4629      	mov	r1, r5
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff fd57 	bl	8007040 <_Balloc>
 8007592:	b930      	cbnz	r0, 80075a2 <__mdiff+0x2e>
 8007594:	4b39      	ldr	r3, [pc, #228]	; (800767c <__mdiff+0x108>)
 8007596:	4602      	mov	r2, r0
 8007598:	f240 2132 	movw	r1, #562	; 0x232
 800759c:	4838      	ldr	r0, [pc, #224]	; (8007680 <__mdiff+0x10c>)
 800759e:	f7fe fe7f 	bl	80062a0 <__assert_func>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ac:	bfa4      	itt	ge
 80075ae:	463b      	movge	r3, r7
 80075b0:	4627      	movge	r7, r4
 80075b2:	4630      	mov	r0, r6
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	bfa6      	itte	ge
 80075b8:	461c      	movge	r4, r3
 80075ba:	2500      	movge	r5, #0
 80075bc:	2501      	movlt	r5, #1
 80075be:	f7ff fd3f 	bl	8007040 <_Balloc>
 80075c2:	b920      	cbnz	r0, 80075ce <__mdiff+0x5a>
 80075c4:	4b2d      	ldr	r3, [pc, #180]	; (800767c <__mdiff+0x108>)
 80075c6:	4602      	mov	r2, r0
 80075c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075cc:	e7e6      	b.n	800759c <__mdiff+0x28>
 80075ce:	693e      	ldr	r6, [r7, #16]
 80075d0:	60c5      	str	r5, [r0, #12]
 80075d2:	6925      	ldr	r5, [r4, #16]
 80075d4:	f107 0114 	add.w	r1, r7, #20
 80075d8:	f104 0914 	add.w	r9, r4, #20
 80075dc:	f100 0e14 	add.w	lr, r0, #20
 80075e0:	f107 0210 	add.w	r2, r7, #16
 80075e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80075e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80075ec:	46f2      	mov	sl, lr
 80075ee:	2700      	movs	r7, #0
 80075f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80075f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075f8:	fa1f f883 	uxth.w	r8, r3
 80075fc:	fa17 f78b 	uxtah	r7, r7, fp
 8007600:	0c1b      	lsrs	r3, r3, #16
 8007602:	eba7 0808 	sub.w	r8, r7, r8
 8007606:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800760a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800760e:	fa1f f888 	uxth.w	r8, r8
 8007612:	141f      	asrs	r7, r3, #16
 8007614:	454d      	cmp	r5, r9
 8007616:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800761a:	f84a 3b04 	str.w	r3, [sl], #4
 800761e:	d8e7      	bhi.n	80075f0 <__mdiff+0x7c>
 8007620:	1b2b      	subs	r3, r5, r4
 8007622:	3b15      	subs	r3, #21
 8007624:	f023 0303 	bic.w	r3, r3, #3
 8007628:	3304      	adds	r3, #4
 800762a:	3415      	adds	r4, #21
 800762c:	42a5      	cmp	r5, r4
 800762e:	bf38      	it	cc
 8007630:	2304      	movcc	r3, #4
 8007632:	4419      	add	r1, r3
 8007634:	4473      	add	r3, lr
 8007636:	469e      	mov	lr, r3
 8007638:	460d      	mov	r5, r1
 800763a:	4565      	cmp	r5, ip
 800763c:	d30e      	bcc.n	800765c <__mdiff+0xe8>
 800763e:	f10c 0203 	add.w	r2, ip, #3
 8007642:	1a52      	subs	r2, r2, r1
 8007644:	f022 0203 	bic.w	r2, r2, #3
 8007648:	3903      	subs	r1, #3
 800764a:	458c      	cmp	ip, r1
 800764c:	bf38      	it	cc
 800764e:	2200      	movcc	r2, #0
 8007650:	441a      	add	r2, r3
 8007652:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007656:	b17b      	cbz	r3, 8007678 <__mdiff+0x104>
 8007658:	6106      	str	r6, [r0, #16]
 800765a:	e7a5      	b.n	80075a8 <__mdiff+0x34>
 800765c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007660:	fa17 f488 	uxtah	r4, r7, r8
 8007664:	1422      	asrs	r2, r4, #16
 8007666:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800766a:	b2a4      	uxth	r4, r4
 800766c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007670:	f84e 4b04 	str.w	r4, [lr], #4
 8007674:	1417      	asrs	r7, r2, #16
 8007676:	e7e0      	b.n	800763a <__mdiff+0xc6>
 8007678:	3e01      	subs	r6, #1
 800767a:	e7ea      	b.n	8007652 <__mdiff+0xde>
 800767c:	08008ccc 	.word	0x08008ccc
 8007680:	08008ce7 	.word	0x08008ce7

08007684 <__d2b>:
 8007684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007688:	4689      	mov	r9, r1
 800768a:	2101      	movs	r1, #1
 800768c:	ec57 6b10 	vmov	r6, r7, d0
 8007690:	4690      	mov	r8, r2
 8007692:	f7ff fcd5 	bl	8007040 <_Balloc>
 8007696:	4604      	mov	r4, r0
 8007698:	b930      	cbnz	r0, 80076a8 <__d2b+0x24>
 800769a:	4602      	mov	r2, r0
 800769c:	4b25      	ldr	r3, [pc, #148]	; (8007734 <__d2b+0xb0>)
 800769e:	4826      	ldr	r0, [pc, #152]	; (8007738 <__d2b+0xb4>)
 80076a0:	f240 310a 	movw	r1, #778	; 0x30a
 80076a4:	f7fe fdfc 	bl	80062a0 <__assert_func>
 80076a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80076ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076b0:	bb35      	cbnz	r5, 8007700 <__d2b+0x7c>
 80076b2:	2e00      	cmp	r6, #0
 80076b4:	9301      	str	r3, [sp, #4]
 80076b6:	d028      	beq.n	800770a <__d2b+0x86>
 80076b8:	4668      	mov	r0, sp
 80076ba:	9600      	str	r6, [sp, #0]
 80076bc:	f7ff fd8c 	bl	80071d8 <__lo0bits>
 80076c0:	9900      	ldr	r1, [sp, #0]
 80076c2:	b300      	cbz	r0, 8007706 <__d2b+0x82>
 80076c4:	9a01      	ldr	r2, [sp, #4]
 80076c6:	f1c0 0320 	rsb	r3, r0, #32
 80076ca:	fa02 f303 	lsl.w	r3, r2, r3
 80076ce:	430b      	orrs	r3, r1
 80076d0:	40c2      	lsrs	r2, r0
 80076d2:	6163      	str	r3, [r4, #20]
 80076d4:	9201      	str	r2, [sp, #4]
 80076d6:	9b01      	ldr	r3, [sp, #4]
 80076d8:	61a3      	str	r3, [r4, #24]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	bf14      	ite	ne
 80076de:	2202      	movne	r2, #2
 80076e0:	2201      	moveq	r2, #1
 80076e2:	6122      	str	r2, [r4, #16]
 80076e4:	b1d5      	cbz	r5, 800771c <__d2b+0x98>
 80076e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076ea:	4405      	add	r5, r0
 80076ec:	f8c9 5000 	str.w	r5, [r9]
 80076f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076f4:	f8c8 0000 	str.w	r0, [r8]
 80076f8:	4620      	mov	r0, r4
 80076fa:	b003      	add	sp, #12
 80076fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007700:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007704:	e7d5      	b.n	80076b2 <__d2b+0x2e>
 8007706:	6161      	str	r1, [r4, #20]
 8007708:	e7e5      	b.n	80076d6 <__d2b+0x52>
 800770a:	a801      	add	r0, sp, #4
 800770c:	f7ff fd64 	bl	80071d8 <__lo0bits>
 8007710:	9b01      	ldr	r3, [sp, #4]
 8007712:	6163      	str	r3, [r4, #20]
 8007714:	2201      	movs	r2, #1
 8007716:	6122      	str	r2, [r4, #16]
 8007718:	3020      	adds	r0, #32
 800771a:	e7e3      	b.n	80076e4 <__d2b+0x60>
 800771c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007720:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007724:	f8c9 0000 	str.w	r0, [r9]
 8007728:	6918      	ldr	r0, [r3, #16]
 800772a:	f7ff fd35 	bl	8007198 <__hi0bits>
 800772e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007732:	e7df      	b.n	80076f4 <__d2b+0x70>
 8007734:	08008ccc 	.word	0x08008ccc
 8007738:	08008ce7 	.word	0x08008ce7

0800773c <_calloc_r>:
 800773c:	b513      	push	{r0, r1, r4, lr}
 800773e:	434a      	muls	r2, r1
 8007740:	4611      	mov	r1, r2
 8007742:	9201      	str	r2, [sp, #4]
 8007744:	f7fe f894 	bl	8005870 <_malloc_r>
 8007748:	4604      	mov	r4, r0
 800774a:	b118      	cbz	r0, 8007754 <_calloc_r+0x18>
 800774c:	9a01      	ldr	r2, [sp, #4]
 800774e:	2100      	movs	r1, #0
 8007750:	f7fe f836 	bl	80057c0 <memset>
 8007754:	4620      	mov	r0, r4
 8007756:	b002      	add	sp, #8
 8007758:	bd10      	pop	{r4, pc}

0800775a <__sfputc_r>:
 800775a:	6893      	ldr	r3, [r2, #8]
 800775c:	3b01      	subs	r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	b410      	push	{r4}
 8007762:	6093      	str	r3, [r2, #8]
 8007764:	da08      	bge.n	8007778 <__sfputc_r+0x1e>
 8007766:	6994      	ldr	r4, [r2, #24]
 8007768:	42a3      	cmp	r3, r4
 800776a:	db01      	blt.n	8007770 <__sfputc_r+0x16>
 800776c:	290a      	cmp	r1, #10
 800776e:	d103      	bne.n	8007778 <__sfputc_r+0x1e>
 8007770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007774:	f000 b98e 	b.w	8007a94 <__swbuf_r>
 8007778:	6813      	ldr	r3, [r2, #0]
 800777a:	1c58      	adds	r0, r3, #1
 800777c:	6010      	str	r0, [r2, #0]
 800777e:	7019      	strb	r1, [r3, #0]
 8007780:	4608      	mov	r0, r1
 8007782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007786:	4770      	bx	lr

08007788 <__sfputs_r>:
 8007788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778a:	4606      	mov	r6, r0
 800778c:	460f      	mov	r7, r1
 800778e:	4614      	mov	r4, r2
 8007790:	18d5      	adds	r5, r2, r3
 8007792:	42ac      	cmp	r4, r5
 8007794:	d101      	bne.n	800779a <__sfputs_r+0x12>
 8007796:	2000      	movs	r0, #0
 8007798:	e007      	b.n	80077aa <__sfputs_r+0x22>
 800779a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779e:	463a      	mov	r2, r7
 80077a0:	4630      	mov	r0, r6
 80077a2:	f7ff ffda 	bl	800775a <__sfputc_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	d1f3      	bne.n	8007792 <__sfputs_r+0xa>
 80077aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080077ac <_vfiprintf_r>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	460d      	mov	r5, r1
 80077b2:	b09d      	sub	sp, #116	; 0x74
 80077b4:	4614      	mov	r4, r2
 80077b6:	4698      	mov	r8, r3
 80077b8:	4606      	mov	r6, r0
 80077ba:	b118      	cbz	r0, 80077c4 <_vfiprintf_r+0x18>
 80077bc:	6983      	ldr	r3, [r0, #24]
 80077be:	b90b      	cbnz	r3, 80077c4 <_vfiprintf_r+0x18>
 80077c0:	f000 fb72 	bl	8007ea8 <__sinit>
 80077c4:	4b89      	ldr	r3, [pc, #548]	; (80079ec <_vfiprintf_r+0x240>)
 80077c6:	429d      	cmp	r5, r3
 80077c8:	d11b      	bne.n	8007802 <_vfiprintf_r+0x56>
 80077ca:	6875      	ldr	r5, [r6, #4]
 80077cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077ce:	07d9      	lsls	r1, r3, #31
 80077d0:	d405      	bmi.n	80077de <_vfiprintf_r+0x32>
 80077d2:	89ab      	ldrh	r3, [r5, #12]
 80077d4:	059a      	lsls	r2, r3, #22
 80077d6:	d402      	bmi.n	80077de <_vfiprintf_r+0x32>
 80077d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077da:	f7ff fc10 	bl	8006ffe <__retarget_lock_acquire_recursive>
 80077de:	89ab      	ldrh	r3, [r5, #12]
 80077e0:	071b      	lsls	r3, r3, #28
 80077e2:	d501      	bpl.n	80077e8 <_vfiprintf_r+0x3c>
 80077e4:	692b      	ldr	r3, [r5, #16]
 80077e6:	b9eb      	cbnz	r3, 8007824 <_vfiprintf_r+0x78>
 80077e8:	4629      	mov	r1, r5
 80077ea:	4630      	mov	r0, r6
 80077ec:	f000 f9c4 	bl	8007b78 <__swsetup_r>
 80077f0:	b1c0      	cbz	r0, 8007824 <_vfiprintf_r+0x78>
 80077f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077f4:	07dc      	lsls	r4, r3, #31
 80077f6:	d50e      	bpl.n	8007816 <_vfiprintf_r+0x6a>
 80077f8:	f04f 30ff 	mov.w	r0, #4294967295
 80077fc:	b01d      	add	sp, #116	; 0x74
 80077fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007802:	4b7b      	ldr	r3, [pc, #492]	; (80079f0 <_vfiprintf_r+0x244>)
 8007804:	429d      	cmp	r5, r3
 8007806:	d101      	bne.n	800780c <_vfiprintf_r+0x60>
 8007808:	68b5      	ldr	r5, [r6, #8]
 800780a:	e7df      	b.n	80077cc <_vfiprintf_r+0x20>
 800780c:	4b79      	ldr	r3, [pc, #484]	; (80079f4 <_vfiprintf_r+0x248>)
 800780e:	429d      	cmp	r5, r3
 8007810:	bf08      	it	eq
 8007812:	68f5      	ldreq	r5, [r6, #12]
 8007814:	e7da      	b.n	80077cc <_vfiprintf_r+0x20>
 8007816:	89ab      	ldrh	r3, [r5, #12]
 8007818:	0598      	lsls	r0, r3, #22
 800781a:	d4ed      	bmi.n	80077f8 <_vfiprintf_r+0x4c>
 800781c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800781e:	f7ff fbef 	bl	8007000 <__retarget_lock_release_recursive>
 8007822:	e7e9      	b.n	80077f8 <_vfiprintf_r+0x4c>
 8007824:	2300      	movs	r3, #0
 8007826:	9309      	str	r3, [sp, #36]	; 0x24
 8007828:	2320      	movs	r3, #32
 800782a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800782e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007832:	2330      	movs	r3, #48	; 0x30
 8007834:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079f8 <_vfiprintf_r+0x24c>
 8007838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800783c:	f04f 0901 	mov.w	r9, #1
 8007840:	4623      	mov	r3, r4
 8007842:	469a      	mov	sl, r3
 8007844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007848:	b10a      	cbz	r2, 800784e <_vfiprintf_r+0xa2>
 800784a:	2a25      	cmp	r2, #37	; 0x25
 800784c:	d1f9      	bne.n	8007842 <_vfiprintf_r+0x96>
 800784e:	ebba 0b04 	subs.w	fp, sl, r4
 8007852:	d00b      	beq.n	800786c <_vfiprintf_r+0xc0>
 8007854:	465b      	mov	r3, fp
 8007856:	4622      	mov	r2, r4
 8007858:	4629      	mov	r1, r5
 800785a:	4630      	mov	r0, r6
 800785c:	f7ff ff94 	bl	8007788 <__sfputs_r>
 8007860:	3001      	adds	r0, #1
 8007862:	f000 80aa 	beq.w	80079ba <_vfiprintf_r+0x20e>
 8007866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007868:	445a      	add	r2, fp
 800786a:	9209      	str	r2, [sp, #36]	; 0x24
 800786c:	f89a 3000 	ldrb.w	r3, [sl]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80a2 	beq.w	80079ba <_vfiprintf_r+0x20e>
 8007876:	2300      	movs	r3, #0
 8007878:	f04f 32ff 	mov.w	r2, #4294967295
 800787c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007880:	f10a 0a01 	add.w	sl, sl, #1
 8007884:	9304      	str	r3, [sp, #16]
 8007886:	9307      	str	r3, [sp, #28]
 8007888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800788c:	931a      	str	r3, [sp, #104]	; 0x68
 800788e:	4654      	mov	r4, sl
 8007890:	2205      	movs	r2, #5
 8007892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007896:	4858      	ldr	r0, [pc, #352]	; (80079f8 <_vfiprintf_r+0x24c>)
 8007898:	f7f8 fcc2 	bl	8000220 <memchr>
 800789c:	9a04      	ldr	r2, [sp, #16]
 800789e:	b9d8      	cbnz	r0, 80078d8 <_vfiprintf_r+0x12c>
 80078a0:	06d1      	lsls	r1, r2, #27
 80078a2:	bf44      	itt	mi
 80078a4:	2320      	movmi	r3, #32
 80078a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078aa:	0713      	lsls	r3, r2, #28
 80078ac:	bf44      	itt	mi
 80078ae:	232b      	movmi	r3, #43	; 0x2b
 80078b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078b4:	f89a 3000 	ldrb.w	r3, [sl]
 80078b8:	2b2a      	cmp	r3, #42	; 0x2a
 80078ba:	d015      	beq.n	80078e8 <_vfiprintf_r+0x13c>
 80078bc:	9a07      	ldr	r2, [sp, #28]
 80078be:	4654      	mov	r4, sl
 80078c0:	2000      	movs	r0, #0
 80078c2:	f04f 0c0a 	mov.w	ip, #10
 80078c6:	4621      	mov	r1, r4
 80078c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078cc:	3b30      	subs	r3, #48	; 0x30
 80078ce:	2b09      	cmp	r3, #9
 80078d0:	d94e      	bls.n	8007970 <_vfiprintf_r+0x1c4>
 80078d2:	b1b0      	cbz	r0, 8007902 <_vfiprintf_r+0x156>
 80078d4:	9207      	str	r2, [sp, #28]
 80078d6:	e014      	b.n	8007902 <_vfiprintf_r+0x156>
 80078d8:	eba0 0308 	sub.w	r3, r0, r8
 80078dc:	fa09 f303 	lsl.w	r3, r9, r3
 80078e0:	4313      	orrs	r3, r2
 80078e2:	9304      	str	r3, [sp, #16]
 80078e4:	46a2      	mov	sl, r4
 80078e6:	e7d2      	b.n	800788e <_vfiprintf_r+0xe2>
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	1d19      	adds	r1, r3, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	9103      	str	r1, [sp, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	bfbb      	ittet	lt
 80078f4:	425b      	neglt	r3, r3
 80078f6:	f042 0202 	orrlt.w	r2, r2, #2
 80078fa:	9307      	strge	r3, [sp, #28]
 80078fc:	9307      	strlt	r3, [sp, #28]
 80078fe:	bfb8      	it	lt
 8007900:	9204      	strlt	r2, [sp, #16]
 8007902:	7823      	ldrb	r3, [r4, #0]
 8007904:	2b2e      	cmp	r3, #46	; 0x2e
 8007906:	d10c      	bne.n	8007922 <_vfiprintf_r+0x176>
 8007908:	7863      	ldrb	r3, [r4, #1]
 800790a:	2b2a      	cmp	r3, #42	; 0x2a
 800790c:	d135      	bne.n	800797a <_vfiprintf_r+0x1ce>
 800790e:	9b03      	ldr	r3, [sp, #12]
 8007910:	1d1a      	adds	r2, r3, #4
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	9203      	str	r2, [sp, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	bfb8      	it	lt
 800791a:	f04f 33ff 	movlt.w	r3, #4294967295
 800791e:	3402      	adds	r4, #2
 8007920:	9305      	str	r3, [sp, #20]
 8007922:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a08 <_vfiprintf_r+0x25c>
 8007926:	7821      	ldrb	r1, [r4, #0]
 8007928:	2203      	movs	r2, #3
 800792a:	4650      	mov	r0, sl
 800792c:	f7f8 fc78 	bl	8000220 <memchr>
 8007930:	b140      	cbz	r0, 8007944 <_vfiprintf_r+0x198>
 8007932:	2340      	movs	r3, #64	; 0x40
 8007934:	eba0 000a 	sub.w	r0, r0, sl
 8007938:	fa03 f000 	lsl.w	r0, r3, r0
 800793c:	9b04      	ldr	r3, [sp, #16]
 800793e:	4303      	orrs	r3, r0
 8007940:	3401      	adds	r4, #1
 8007942:	9304      	str	r3, [sp, #16]
 8007944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007948:	482c      	ldr	r0, [pc, #176]	; (80079fc <_vfiprintf_r+0x250>)
 800794a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800794e:	2206      	movs	r2, #6
 8007950:	f7f8 fc66 	bl	8000220 <memchr>
 8007954:	2800      	cmp	r0, #0
 8007956:	d03f      	beq.n	80079d8 <_vfiprintf_r+0x22c>
 8007958:	4b29      	ldr	r3, [pc, #164]	; (8007a00 <_vfiprintf_r+0x254>)
 800795a:	bb1b      	cbnz	r3, 80079a4 <_vfiprintf_r+0x1f8>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	3307      	adds	r3, #7
 8007960:	f023 0307 	bic.w	r3, r3, #7
 8007964:	3308      	adds	r3, #8
 8007966:	9303      	str	r3, [sp, #12]
 8007968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800796a:	443b      	add	r3, r7
 800796c:	9309      	str	r3, [sp, #36]	; 0x24
 800796e:	e767      	b.n	8007840 <_vfiprintf_r+0x94>
 8007970:	fb0c 3202 	mla	r2, ip, r2, r3
 8007974:	460c      	mov	r4, r1
 8007976:	2001      	movs	r0, #1
 8007978:	e7a5      	b.n	80078c6 <_vfiprintf_r+0x11a>
 800797a:	2300      	movs	r3, #0
 800797c:	3401      	adds	r4, #1
 800797e:	9305      	str	r3, [sp, #20]
 8007980:	4619      	mov	r1, r3
 8007982:	f04f 0c0a 	mov.w	ip, #10
 8007986:	4620      	mov	r0, r4
 8007988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800798c:	3a30      	subs	r2, #48	; 0x30
 800798e:	2a09      	cmp	r2, #9
 8007990:	d903      	bls.n	800799a <_vfiprintf_r+0x1ee>
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0c5      	beq.n	8007922 <_vfiprintf_r+0x176>
 8007996:	9105      	str	r1, [sp, #20]
 8007998:	e7c3      	b.n	8007922 <_vfiprintf_r+0x176>
 800799a:	fb0c 2101 	mla	r1, ip, r1, r2
 800799e:	4604      	mov	r4, r0
 80079a0:	2301      	movs	r3, #1
 80079a2:	e7f0      	b.n	8007986 <_vfiprintf_r+0x1da>
 80079a4:	ab03      	add	r3, sp, #12
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	462a      	mov	r2, r5
 80079aa:	4b16      	ldr	r3, [pc, #88]	; (8007a04 <_vfiprintf_r+0x258>)
 80079ac:	a904      	add	r1, sp, #16
 80079ae:	4630      	mov	r0, r6
 80079b0:	f7fe f858 	bl	8005a64 <_printf_float>
 80079b4:	4607      	mov	r7, r0
 80079b6:	1c78      	adds	r0, r7, #1
 80079b8:	d1d6      	bne.n	8007968 <_vfiprintf_r+0x1bc>
 80079ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079bc:	07d9      	lsls	r1, r3, #31
 80079be:	d405      	bmi.n	80079cc <_vfiprintf_r+0x220>
 80079c0:	89ab      	ldrh	r3, [r5, #12]
 80079c2:	059a      	lsls	r2, r3, #22
 80079c4:	d402      	bmi.n	80079cc <_vfiprintf_r+0x220>
 80079c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079c8:	f7ff fb1a 	bl	8007000 <__retarget_lock_release_recursive>
 80079cc:	89ab      	ldrh	r3, [r5, #12]
 80079ce:	065b      	lsls	r3, r3, #25
 80079d0:	f53f af12 	bmi.w	80077f8 <_vfiprintf_r+0x4c>
 80079d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079d6:	e711      	b.n	80077fc <_vfiprintf_r+0x50>
 80079d8:	ab03      	add	r3, sp, #12
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	462a      	mov	r2, r5
 80079de:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <_vfiprintf_r+0x258>)
 80079e0:	a904      	add	r1, sp, #16
 80079e2:	4630      	mov	r0, r6
 80079e4:	f7fe fae2 	bl	8005fac <_printf_i>
 80079e8:	e7e4      	b.n	80079b4 <_vfiprintf_r+0x208>
 80079ea:	bf00      	nop
 80079ec:	08008e78 	.word	0x08008e78
 80079f0:	08008e98 	.word	0x08008e98
 80079f4:	08008e58 	.word	0x08008e58
 80079f8:	08008e44 	.word	0x08008e44
 80079fc:	08008e4e 	.word	0x08008e4e
 8007a00:	08005a65 	.word	0x08005a65
 8007a04:	08007789 	.word	0x08007789
 8007a08:	08008e4a 	.word	0x08008e4a

08007a0c <__sread>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	460c      	mov	r4, r1
 8007a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a14:	f000 fb5c 	bl	80080d0 <_read_r>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	bfab      	itete	ge
 8007a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8007a20:	181b      	addge	r3, r3, r0
 8007a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a26:	bfac      	ite	ge
 8007a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a2a:	81a3      	strhlt	r3, [r4, #12]
 8007a2c:	bd10      	pop	{r4, pc}

08007a2e <__swrite>:
 8007a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a32:	461f      	mov	r7, r3
 8007a34:	898b      	ldrh	r3, [r1, #12]
 8007a36:	05db      	lsls	r3, r3, #23
 8007a38:	4605      	mov	r5, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	4616      	mov	r6, r2
 8007a3e:	d505      	bpl.n	8007a4c <__swrite+0x1e>
 8007a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a44:	2302      	movs	r3, #2
 8007a46:	2200      	movs	r2, #0
 8007a48:	f000 facc 	bl	8007fe4 <_lseek_r>
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a56:	81a3      	strh	r3, [r4, #12]
 8007a58:	4632      	mov	r2, r6
 8007a5a:	463b      	mov	r3, r7
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a62:	f000 b877 	b.w	8007b54 <_write_r>

08007a66 <__sseek>:
 8007a66:	b510      	push	{r4, lr}
 8007a68:	460c      	mov	r4, r1
 8007a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a6e:	f000 fab9 	bl	8007fe4 <_lseek_r>
 8007a72:	1c43      	adds	r3, r0, #1
 8007a74:	89a3      	ldrh	r3, [r4, #12]
 8007a76:	bf15      	itete	ne
 8007a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a82:	81a3      	strheq	r3, [r4, #12]
 8007a84:	bf18      	it	ne
 8007a86:	81a3      	strhne	r3, [r4, #12]
 8007a88:	bd10      	pop	{r4, pc}

08007a8a <__sclose>:
 8007a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8e:	f000 b8e1 	b.w	8007c54 <_close_r>
	...

08007a94 <__swbuf_r>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	460e      	mov	r6, r1
 8007a98:	4614      	mov	r4, r2
 8007a9a:	4605      	mov	r5, r0
 8007a9c:	b118      	cbz	r0, 8007aa6 <__swbuf_r+0x12>
 8007a9e:	6983      	ldr	r3, [r0, #24]
 8007aa0:	b90b      	cbnz	r3, 8007aa6 <__swbuf_r+0x12>
 8007aa2:	f000 fa01 	bl	8007ea8 <__sinit>
 8007aa6:	4b21      	ldr	r3, [pc, #132]	; (8007b2c <__swbuf_r+0x98>)
 8007aa8:	429c      	cmp	r4, r3
 8007aaa:	d12b      	bne.n	8007b04 <__swbuf_r+0x70>
 8007aac:	686c      	ldr	r4, [r5, #4]
 8007aae:	69a3      	ldr	r3, [r4, #24]
 8007ab0:	60a3      	str	r3, [r4, #8]
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	071a      	lsls	r2, r3, #28
 8007ab6:	d52f      	bpl.n	8007b18 <__swbuf_r+0x84>
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	b36b      	cbz	r3, 8007b18 <__swbuf_r+0x84>
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	6820      	ldr	r0, [r4, #0]
 8007ac0:	1ac0      	subs	r0, r0, r3
 8007ac2:	6963      	ldr	r3, [r4, #20]
 8007ac4:	b2f6      	uxtb	r6, r6
 8007ac6:	4283      	cmp	r3, r0
 8007ac8:	4637      	mov	r7, r6
 8007aca:	dc04      	bgt.n	8007ad6 <__swbuf_r+0x42>
 8007acc:	4621      	mov	r1, r4
 8007ace:	4628      	mov	r0, r5
 8007ad0:	f000 f956 	bl	8007d80 <_fflush_r>
 8007ad4:	bb30      	cbnz	r0, 8007b24 <__swbuf_r+0x90>
 8007ad6:	68a3      	ldr	r3, [r4, #8]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	60a3      	str	r3, [r4, #8]
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	6022      	str	r2, [r4, #0]
 8007ae2:	701e      	strb	r6, [r3, #0]
 8007ae4:	6963      	ldr	r3, [r4, #20]
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	4283      	cmp	r3, r0
 8007aea:	d004      	beq.n	8007af6 <__swbuf_r+0x62>
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	07db      	lsls	r3, r3, #31
 8007af0:	d506      	bpl.n	8007b00 <__swbuf_r+0x6c>
 8007af2:	2e0a      	cmp	r6, #10
 8007af4:	d104      	bne.n	8007b00 <__swbuf_r+0x6c>
 8007af6:	4621      	mov	r1, r4
 8007af8:	4628      	mov	r0, r5
 8007afa:	f000 f941 	bl	8007d80 <_fflush_r>
 8007afe:	b988      	cbnz	r0, 8007b24 <__swbuf_r+0x90>
 8007b00:	4638      	mov	r0, r7
 8007b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b04:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <__swbuf_r+0x9c>)
 8007b06:	429c      	cmp	r4, r3
 8007b08:	d101      	bne.n	8007b0e <__swbuf_r+0x7a>
 8007b0a:	68ac      	ldr	r4, [r5, #8]
 8007b0c:	e7cf      	b.n	8007aae <__swbuf_r+0x1a>
 8007b0e:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <__swbuf_r+0xa0>)
 8007b10:	429c      	cmp	r4, r3
 8007b12:	bf08      	it	eq
 8007b14:	68ec      	ldreq	r4, [r5, #12]
 8007b16:	e7ca      	b.n	8007aae <__swbuf_r+0x1a>
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f000 f82c 	bl	8007b78 <__swsetup_r>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d0cb      	beq.n	8007abc <__swbuf_r+0x28>
 8007b24:	f04f 37ff 	mov.w	r7, #4294967295
 8007b28:	e7ea      	b.n	8007b00 <__swbuf_r+0x6c>
 8007b2a:	bf00      	nop
 8007b2c:	08008e78 	.word	0x08008e78
 8007b30:	08008e98 	.word	0x08008e98
 8007b34:	08008e58 	.word	0x08008e58

08007b38 <__ascii_wctomb>:
 8007b38:	b149      	cbz	r1, 8007b4e <__ascii_wctomb+0x16>
 8007b3a:	2aff      	cmp	r2, #255	; 0xff
 8007b3c:	bf85      	ittet	hi
 8007b3e:	238a      	movhi	r3, #138	; 0x8a
 8007b40:	6003      	strhi	r3, [r0, #0]
 8007b42:	700a      	strbls	r2, [r1, #0]
 8007b44:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b48:	bf98      	it	ls
 8007b4a:	2001      	movls	r0, #1
 8007b4c:	4770      	bx	lr
 8007b4e:	4608      	mov	r0, r1
 8007b50:	4770      	bx	lr
	...

08007b54 <_write_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4d07      	ldr	r5, [pc, #28]	; (8007b74 <_write_r+0x20>)
 8007b58:	4604      	mov	r4, r0
 8007b5a:	4608      	mov	r0, r1
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	2200      	movs	r2, #0
 8007b60:	602a      	str	r2, [r5, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f7f9 fed1 	bl	800190a <_write>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d102      	bne.n	8007b72 <_write_r+0x1e>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	b103      	cbz	r3, 8007b72 <_write_r+0x1e>
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	200005bc 	.word	0x200005bc

08007b78 <__swsetup_r>:
 8007b78:	4b32      	ldr	r3, [pc, #200]	; (8007c44 <__swsetup_r+0xcc>)
 8007b7a:	b570      	push	{r4, r5, r6, lr}
 8007b7c:	681d      	ldr	r5, [r3, #0]
 8007b7e:	4606      	mov	r6, r0
 8007b80:	460c      	mov	r4, r1
 8007b82:	b125      	cbz	r5, 8007b8e <__swsetup_r+0x16>
 8007b84:	69ab      	ldr	r3, [r5, #24]
 8007b86:	b913      	cbnz	r3, 8007b8e <__swsetup_r+0x16>
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 f98d 	bl	8007ea8 <__sinit>
 8007b8e:	4b2e      	ldr	r3, [pc, #184]	; (8007c48 <__swsetup_r+0xd0>)
 8007b90:	429c      	cmp	r4, r3
 8007b92:	d10f      	bne.n	8007bb4 <__swsetup_r+0x3c>
 8007b94:	686c      	ldr	r4, [r5, #4]
 8007b96:	89a3      	ldrh	r3, [r4, #12]
 8007b98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b9c:	0719      	lsls	r1, r3, #28
 8007b9e:	d42c      	bmi.n	8007bfa <__swsetup_r+0x82>
 8007ba0:	06dd      	lsls	r5, r3, #27
 8007ba2:	d411      	bmi.n	8007bc8 <__swsetup_r+0x50>
 8007ba4:	2309      	movs	r3, #9
 8007ba6:	6033      	str	r3, [r6, #0]
 8007ba8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bac:	81a3      	strh	r3, [r4, #12]
 8007bae:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb2:	e03e      	b.n	8007c32 <__swsetup_r+0xba>
 8007bb4:	4b25      	ldr	r3, [pc, #148]	; (8007c4c <__swsetup_r+0xd4>)
 8007bb6:	429c      	cmp	r4, r3
 8007bb8:	d101      	bne.n	8007bbe <__swsetup_r+0x46>
 8007bba:	68ac      	ldr	r4, [r5, #8]
 8007bbc:	e7eb      	b.n	8007b96 <__swsetup_r+0x1e>
 8007bbe:	4b24      	ldr	r3, [pc, #144]	; (8007c50 <__swsetup_r+0xd8>)
 8007bc0:	429c      	cmp	r4, r3
 8007bc2:	bf08      	it	eq
 8007bc4:	68ec      	ldreq	r4, [r5, #12]
 8007bc6:	e7e6      	b.n	8007b96 <__swsetup_r+0x1e>
 8007bc8:	0758      	lsls	r0, r3, #29
 8007bca:	d512      	bpl.n	8007bf2 <__swsetup_r+0x7a>
 8007bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bce:	b141      	cbz	r1, 8007be2 <__swsetup_r+0x6a>
 8007bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bd4:	4299      	cmp	r1, r3
 8007bd6:	d002      	beq.n	8007bde <__swsetup_r+0x66>
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f7fd fdf9 	bl	80057d0 <_free_r>
 8007bde:	2300      	movs	r3, #0
 8007be0:	6363      	str	r3, [r4, #52]	; 0x34
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007be8:	81a3      	strh	r3, [r4, #12]
 8007bea:	2300      	movs	r3, #0
 8007bec:	6063      	str	r3, [r4, #4]
 8007bee:	6923      	ldr	r3, [r4, #16]
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	f043 0308 	orr.w	r3, r3, #8
 8007bf8:	81a3      	strh	r3, [r4, #12]
 8007bfa:	6923      	ldr	r3, [r4, #16]
 8007bfc:	b94b      	cbnz	r3, 8007c12 <__swsetup_r+0x9a>
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c08:	d003      	beq.n	8007c12 <__swsetup_r+0x9a>
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f000 fa1f 	bl	8008050 <__smakebuf_r>
 8007c12:	89a0      	ldrh	r0, [r4, #12]
 8007c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c18:	f010 0301 	ands.w	r3, r0, #1
 8007c1c:	d00a      	beq.n	8007c34 <__swsetup_r+0xbc>
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60a3      	str	r3, [r4, #8]
 8007c22:	6963      	ldr	r3, [r4, #20]
 8007c24:	425b      	negs	r3, r3
 8007c26:	61a3      	str	r3, [r4, #24]
 8007c28:	6923      	ldr	r3, [r4, #16]
 8007c2a:	b943      	cbnz	r3, 8007c3e <__swsetup_r+0xc6>
 8007c2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c30:	d1ba      	bne.n	8007ba8 <__swsetup_r+0x30>
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
 8007c34:	0781      	lsls	r1, r0, #30
 8007c36:	bf58      	it	pl
 8007c38:	6963      	ldrpl	r3, [r4, #20]
 8007c3a:	60a3      	str	r3, [r4, #8]
 8007c3c:	e7f4      	b.n	8007c28 <__swsetup_r+0xb0>
 8007c3e:	2000      	movs	r0, #0
 8007c40:	e7f7      	b.n	8007c32 <__swsetup_r+0xba>
 8007c42:	bf00      	nop
 8007c44:	20000010 	.word	0x20000010
 8007c48:	08008e78 	.word	0x08008e78
 8007c4c:	08008e98 	.word	0x08008e98
 8007c50:	08008e58 	.word	0x08008e58

08007c54 <_close_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d06      	ldr	r5, [pc, #24]	; (8007c70 <_close_r+0x1c>)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	602b      	str	r3, [r5, #0]
 8007c60:	f7f9 fe6f 	bl	8001942 <_close>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_close_r+0x1a>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_close_r+0x1a>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	200005bc 	.word	0x200005bc

08007c74 <__sflush_r>:
 8007c74:	898a      	ldrh	r2, [r1, #12]
 8007c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	0710      	lsls	r0, r2, #28
 8007c7e:	460c      	mov	r4, r1
 8007c80:	d458      	bmi.n	8007d34 <__sflush_r+0xc0>
 8007c82:	684b      	ldr	r3, [r1, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	dc05      	bgt.n	8007c94 <__sflush_r+0x20>
 8007c88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	dc02      	bgt.n	8007c94 <__sflush_r+0x20>
 8007c8e:	2000      	movs	r0, #0
 8007c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c96:	2e00      	cmp	r6, #0
 8007c98:	d0f9      	beq.n	8007c8e <__sflush_r+0x1a>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ca0:	682f      	ldr	r7, [r5, #0]
 8007ca2:	602b      	str	r3, [r5, #0]
 8007ca4:	d032      	beq.n	8007d0c <__sflush_r+0x98>
 8007ca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	075a      	lsls	r2, r3, #29
 8007cac:	d505      	bpl.n	8007cba <__sflush_r+0x46>
 8007cae:	6863      	ldr	r3, [r4, #4]
 8007cb0:	1ac0      	subs	r0, r0, r3
 8007cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cb4:	b10b      	cbz	r3, 8007cba <__sflush_r+0x46>
 8007cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cb8:	1ac0      	subs	r0, r0, r3
 8007cba:	2300      	movs	r3, #0
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cc0:	6a21      	ldr	r1, [r4, #32]
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b0      	blx	r6
 8007cc6:	1c43      	adds	r3, r0, #1
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	d106      	bne.n	8007cda <__sflush_r+0x66>
 8007ccc:	6829      	ldr	r1, [r5, #0]
 8007cce:	291d      	cmp	r1, #29
 8007cd0:	d82c      	bhi.n	8007d2c <__sflush_r+0xb8>
 8007cd2:	4a2a      	ldr	r2, [pc, #168]	; (8007d7c <__sflush_r+0x108>)
 8007cd4:	40ca      	lsrs	r2, r1
 8007cd6:	07d6      	lsls	r6, r2, #31
 8007cd8:	d528      	bpl.n	8007d2c <__sflush_r+0xb8>
 8007cda:	2200      	movs	r2, #0
 8007cdc:	6062      	str	r2, [r4, #4]
 8007cde:	04d9      	lsls	r1, r3, #19
 8007ce0:	6922      	ldr	r2, [r4, #16]
 8007ce2:	6022      	str	r2, [r4, #0]
 8007ce4:	d504      	bpl.n	8007cf0 <__sflush_r+0x7c>
 8007ce6:	1c42      	adds	r2, r0, #1
 8007ce8:	d101      	bne.n	8007cee <__sflush_r+0x7a>
 8007cea:	682b      	ldr	r3, [r5, #0]
 8007cec:	b903      	cbnz	r3, 8007cf0 <__sflush_r+0x7c>
 8007cee:	6560      	str	r0, [r4, #84]	; 0x54
 8007cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cf2:	602f      	str	r7, [r5, #0]
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	d0ca      	beq.n	8007c8e <__sflush_r+0x1a>
 8007cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cfc:	4299      	cmp	r1, r3
 8007cfe:	d002      	beq.n	8007d06 <__sflush_r+0x92>
 8007d00:	4628      	mov	r0, r5
 8007d02:	f7fd fd65 	bl	80057d0 <_free_r>
 8007d06:	2000      	movs	r0, #0
 8007d08:	6360      	str	r0, [r4, #52]	; 0x34
 8007d0a:	e7c1      	b.n	8007c90 <__sflush_r+0x1c>
 8007d0c:	6a21      	ldr	r1, [r4, #32]
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4628      	mov	r0, r5
 8007d12:	47b0      	blx	r6
 8007d14:	1c41      	adds	r1, r0, #1
 8007d16:	d1c7      	bne.n	8007ca8 <__sflush_r+0x34>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d0c4      	beq.n	8007ca8 <__sflush_r+0x34>
 8007d1e:	2b1d      	cmp	r3, #29
 8007d20:	d001      	beq.n	8007d26 <__sflush_r+0xb2>
 8007d22:	2b16      	cmp	r3, #22
 8007d24:	d101      	bne.n	8007d2a <__sflush_r+0xb6>
 8007d26:	602f      	str	r7, [r5, #0]
 8007d28:	e7b1      	b.n	8007c8e <__sflush_r+0x1a>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d30:	81a3      	strh	r3, [r4, #12]
 8007d32:	e7ad      	b.n	8007c90 <__sflush_r+0x1c>
 8007d34:	690f      	ldr	r7, [r1, #16]
 8007d36:	2f00      	cmp	r7, #0
 8007d38:	d0a9      	beq.n	8007c8e <__sflush_r+0x1a>
 8007d3a:	0793      	lsls	r3, r2, #30
 8007d3c:	680e      	ldr	r6, [r1, #0]
 8007d3e:	bf08      	it	eq
 8007d40:	694b      	ldreq	r3, [r1, #20]
 8007d42:	600f      	str	r7, [r1, #0]
 8007d44:	bf18      	it	ne
 8007d46:	2300      	movne	r3, #0
 8007d48:	eba6 0807 	sub.w	r8, r6, r7
 8007d4c:	608b      	str	r3, [r1, #8]
 8007d4e:	f1b8 0f00 	cmp.w	r8, #0
 8007d52:	dd9c      	ble.n	8007c8e <__sflush_r+0x1a>
 8007d54:	6a21      	ldr	r1, [r4, #32]
 8007d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d58:	4643      	mov	r3, r8
 8007d5a:	463a      	mov	r2, r7
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	47b0      	blx	r6
 8007d60:	2800      	cmp	r0, #0
 8007d62:	dc06      	bgt.n	8007d72 <__sflush_r+0xfe>
 8007d64:	89a3      	ldrh	r3, [r4, #12]
 8007d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d6a:	81a3      	strh	r3, [r4, #12]
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d70:	e78e      	b.n	8007c90 <__sflush_r+0x1c>
 8007d72:	4407      	add	r7, r0
 8007d74:	eba8 0800 	sub.w	r8, r8, r0
 8007d78:	e7e9      	b.n	8007d4e <__sflush_r+0xda>
 8007d7a:	bf00      	nop
 8007d7c:	20400001 	.word	0x20400001

08007d80 <_fflush_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	690b      	ldr	r3, [r1, #16]
 8007d84:	4605      	mov	r5, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	b913      	cbnz	r3, 8007d90 <_fflush_r+0x10>
 8007d8a:	2500      	movs	r5, #0
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	b118      	cbz	r0, 8007d9a <_fflush_r+0x1a>
 8007d92:	6983      	ldr	r3, [r0, #24]
 8007d94:	b90b      	cbnz	r3, 8007d9a <_fflush_r+0x1a>
 8007d96:	f000 f887 	bl	8007ea8 <__sinit>
 8007d9a:	4b14      	ldr	r3, [pc, #80]	; (8007dec <_fflush_r+0x6c>)
 8007d9c:	429c      	cmp	r4, r3
 8007d9e:	d11b      	bne.n	8007dd8 <_fflush_r+0x58>
 8007da0:	686c      	ldr	r4, [r5, #4]
 8007da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0ef      	beq.n	8007d8a <_fflush_r+0xa>
 8007daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007dac:	07d0      	lsls	r0, r2, #31
 8007dae:	d404      	bmi.n	8007dba <_fflush_r+0x3a>
 8007db0:	0599      	lsls	r1, r3, #22
 8007db2:	d402      	bmi.n	8007dba <_fflush_r+0x3a>
 8007db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007db6:	f7ff f922 	bl	8006ffe <__retarget_lock_acquire_recursive>
 8007dba:	4628      	mov	r0, r5
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	f7ff ff59 	bl	8007c74 <__sflush_r>
 8007dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dc4:	07da      	lsls	r2, r3, #31
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	d4e0      	bmi.n	8007d8c <_fflush_r+0xc>
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	059b      	lsls	r3, r3, #22
 8007dce:	d4dd      	bmi.n	8007d8c <_fflush_r+0xc>
 8007dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dd2:	f7ff f915 	bl	8007000 <__retarget_lock_release_recursive>
 8007dd6:	e7d9      	b.n	8007d8c <_fflush_r+0xc>
 8007dd8:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <_fflush_r+0x70>)
 8007dda:	429c      	cmp	r4, r3
 8007ddc:	d101      	bne.n	8007de2 <_fflush_r+0x62>
 8007dde:	68ac      	ldr	r4, [r5, #8]
 8007de0:	e7df      	b.n	8007da2 <_fflush_r+0x22>
 8007de2:	4b04      	ldr	r3, [pc, #16]	; (8007df4 <_fflush_r+0x74>)
 8007de4:	429c      	cmp	r4, r3
 8007de6:	bf08      	it	eq
 8007de8:	68ec      	ldreq	r4, [r5, #12]
 8007dea:	e7da      	b.n	8007da2 <_fflush_r+0x22>
 8007dec:	08008e78 	.word	0x08008e78
 8007df0:	08008e98 	.word	0x08008e98
 8007df4:	08008e58 	.word	0x08008e58

08007df8 <std>:
 8007df8:	2300      	movs	r3, #0
 8007dfa:	b510      	push	{r4, lr}
 8007dfc:	4604      	mov	r4, r0
 8007dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8007e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e06:	6083      	str	r3, [r0, #8]
 8007e08:	8181      	strh	r1, [r0, #12]
 8007e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8007e0c:	81c2      	strh	r2, [r0, #14]
 8007e0e:	6183      	str	r3, [r0, #24]
 8007e10:	4619      	mov	r1, r3
 8007e12:	2208      	movs	r2, #8
 8007e14:	305c      	adds	r0, #92	; 0x5c
 8007e16:	f7fd fcd3 	bl	80057c0 <memset>
 8007e1a:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <std+0x38>)
 8007e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8007e1e:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <std+0x3c>)
 8007e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e22:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <std+0x40>)
 8007e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e26:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <std+0x44>)
 8007e28:	6224      	str	r4, [r4, #32]
 8007e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e2c:	bd10      	pop	{r4, pc}
 8007e2e:	bf00      	nop
 8007e30:	08007a0d 	.word	0x08007a0d
 8007e34:	08007a2f 	.word	0x08007a2f
 8007e38:	08007a67 	.word	0x08007a67
 8007e3c:	08007a8b 	.word	0x08007a8b

08007e40 <_cleanup_r>:
 8007e40:	4901      	ldr	r1, [pc, #4]	; (8007e48 <_cleanup_r+0x8>)
 8007e42:	f000 b8af 	b.w	8007fa4 <_fwalk_reent>
 8007e46:	bf00      	nop
 8007e48:	08007d81 	.word	0x08007d81

08007e4c <__sfmoreglue>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	1e4a      	subs	r2, r1, #1
 8007e50:	2568      	movs	r5, #104	; 0x68
 8007e52:	4355      	muls	r5, r2
 8007e54:	460e      	mov	r6, r1
 8007e56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e5a:	f7fd fd09 	bl	8005870 <_malloc_r>
 8007e5e:	4604      	mov	r4, r0
 8007e60:	b140      	cbz	r0, 8007e74 <__sfmoreglue+0x28>
 8007e62:	2100      	movs	r1, #0
 8007e64:	e9c0 1600 	strd	r1, r6, [r0]
 8007e68:	300c      	adds	r0, #12
 8007e6a:	60a0      	str	r0, [r4, #8]
 8007e6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e70:	f7fd fca6 	bl	80057c0 <memset>
 8007e74:	4620      	mov	r0, r4
 8007e76:	bd70      	pop	{r4, r5, r6, pc}

08007e78 <__sfp_lock_acquire>:
 8007e78:	4801      	ldr	r0, [pc, #4]	; (8007e80 <__sfp_lock_acquire+0x8>)
 8007e7a:	f7ff b8c0 	b.w	8006ffe <__retarget_lock_acquire_recursive>
 8007e7e:	bf00      	nop
 8007e80:	200005b8 	.word	0x200005b8

08007e84 <__sfp_lock_release>:
 8007e84:	4801      	ldr	r0, [pc, #4]	; (8007e8c <__sfp_lock_release+0x8>)
 8007e86:	f7ff b8bb 	b.w	8007000 <__retarget_lock_release_recursive>
 8007e8a:	bf00      	nop
 8007e8c:	200005b8 	.word	0x200005b8

08007e90 <__sinit_lock_acquire>:
 8007e90:	4801      	ldr	r0, [pc, #4]	; (8007e98 <__sinit_lock_acquire+0x8>)
 8007e92:	f7ff b8b4 	b.w	8006ffe <__retarget_lock_acquire_recursive>
 8007e96:	bf00      	nop
 8007e98:	200005b3 	.word	0x200005b3

08007e9c <__sinit_lock_release>:
 8007e9c:	4801      	ldr	r0, [pc, #4]	; (8007ea4 <__sinit_lock_release+0x8>)
 8007e9e:	f7ff b8af 	b.w	8007000 <__retarget_lock_release_recursive>
 8007ea2:	bf00      	nop
 8007ea4:	200005b3 	.word	0x200005b3

08007ea8 <__sinit>:
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	4604      	mov	r4, r0
 8007eac:	f7ff fff0 	bl	8007e90 <__sinit_lock_acquire>
 8007eb0:	69a3      	ldr	r3, [r4, #24]
 8007eb2:	b11b      	cbz	r3, 8007ebc <__sinit+0x14>
 8007eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb8:	f7ff bff0 	b.w	8007e9c <__sinit_lock_release>
 8007ebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ec2:	4b13      	ldr	r3, [pc, #76]	; (8007f10 <__sinit+0x68>)
 8007ec4:	4a13      	ldr	r2, [pc, #76]	; (8007f14 <__sinit+0x6c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eca:	42a3      	cmp	r3, r4
 8007ecc:	bf04      	itt	eq
 8007ece:	2301      	moveq	r3, #1
 8007ed0:	61a3      	streq	r3, [r4, #24]
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f000 f820 	bl	8007f18 <__sfp>
 8007ed8:	6060      	str	r0, [r4, #4]
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 f81c 	bl	8007f18 <__sfp>
 8007ee0:	60a0      	str	r0, [r4, #8]
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f000 f818 	bl	8007f18 <__sfp>
 8007ee8:	2200      	movs	r2, #0
 8007eea:	60e0      	str	r0, [r4, #12]
 8007eec:	2104      	movs	r1, #4
 8007eee:	6860      	ldr	r0, [r4, #4]
 8007ef0:	f7ff ff82 	bl	8007df8 <std>
 8007ef4:	68a0      	ldr	r0, [r4, #8]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	2109      	movs	r1, #9
 8007efa:	f7ff ff7d 	bl	8007df8 <std>
 8007efe:	68e0      	ldr	r0, [r4, #12]
 8007f00:	2202      	movs	r2, #2
 8007f02:	2112      	movs	r1, #18
 8007f04:	f7ff ff78 	bl	8007df8 <std>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	61a3      	str	r3, [r4, #24]
 8007f0c:	e7d2      	b.n	8007eb4 <__sinit+0xc>
 8007f0e:	bf00      	nop
 8007f10:	08008ad4 	.word	0x08008ad4
 8007f14:	08007e41 	.word	0x08007e41

08007f18 <__sfp>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	4607      	mov	r7, r0
 8007f1c:	f7ff ffac 	bl	8007e78 <__sfp_lock_acquire>
 8007f20:	4b1e      	ldr	r3, [pc, #120]	; (8007f9c <__sfp+0x84>)
 8007f22:	681e      	ldr	r6, [r3, #0]
 8007f24:	69b3      	ldr	r3, [r6, #24]
 8007f26:	b913      	cbnz	r3, 8007f2e <__sfp+0x16>
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f7ff ffbd 	bl	8007ea8 <__sinit>
 8007f2e:	3648      	adds	r6, #72	; 0x48
 8007f30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f34:	3b01      	subs	r3, #1
 8007f36:	d503      	bpl.n	8007f40 <__sfp+0x28>
 8007f38:	6833      	ldr	r3, [r6, #0]
 8007f3a:	b30b      	cbz	r3, 8007f80 <__sfp+0x68>
 8007f3c:	6836      	ldr	r6, [r6, #0]
 8007f3e:	e7f7      	b.n	8007f30 <__sfp+0x18>
 8007f40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f44:	b9d5      	cbnz	r5, 8007f7c <__sfp+0x64>
 8007f46:	4b16      	ldr	r3, [pc, #88]	; (8007fa0 <__sfp+0x88>)
 8007f48:	60e3      	str	r3, [r4, #12]
 8007f4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f4e:	6665      	str	r5, [r4, #100]	; 0x64
 8007f50:	f7ff f854 	bl	8006ffc <__retarget_lock_init_recursive>
 8007f54:	f7ff ff96 	bl	8007e84 <__sfp_lock_release>
 8007f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f60:	6025      	str	r5, [r4, #0]
 8007f62:	61a5      	str	r5, [r4, #24]
 8007f64:	2208      	movs	r2, #8
 8007f66:	4629      	mov	r1, r5
 8007f68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f6c:	f7fd fc28 	bl	80057c0 <memset>
 8007f70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f78:	4620      	mov	r0, r4
 8007f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f7c:	3468      	adds	r4, #104	; 0x68
 8007f7e:	e7d9      	b.n	8007f34 <__sfp+0x1c>
 8007f80:	2104      	movs	r1, #4
 8007f82:	4638      	mov	r0, r7
 8007f84:	f7ff ff62 	bl	8007e4c <__sfmoreglue>
 8007f88:	4604      	mov	r4, r0
 8007f8a:	6030      	str	r0, [r6, #0]
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d1d5      	bne.n	8007f3c <__sfp+0x24>
 8007f90:	f7ff ff78 	bl	8007e84 <__sfp_lock_release>
 8007f94:	230c      	movs	r3, #12
 8007f96:	603b      	str	r3, [r7, #0]
 8007f98:	e7ee      	b.n	8007f78 <__sfp+0x60>
 8007f9a:	bf00      	nop
 8007f9c:	08008ad4 	.word	0x08008ad4
 8007fa0:	ffff0001 	.word	0xffff0001

08007fa4 <_fwalk_reent>:
 8007fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa8:	4606      	mov	r6, r0
 8007faa:	4688      	mov	r8, r1
 8007fac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fb0:	2700      	movs	r7, #0
 8007fb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fb6:	f1b9 0901 	subs.w	r9, r9, #1
 8007fba:	d505      	bpl.n	8007fc8 <_fwalk_reent+0x24>
 8007fbc:	6824      	ldr	r4, [r4, #0]
 8007fbe:	2c00      	cmp	r4, #0
 8007fc0:	d1f7      	bne.n	8007fb2 <_fwalk_reent+0xe>
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fc8:	89ab      	ldrh	r3, [r5, #12]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d907      	bls.n	8007fde <_fwalk_reent+0x3a>
 8007fce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	d003      	beq.n	8007fde <_fwalk_reent+0x3a>
 8007fd6:	4629      	mov	r1, r5
 8007fd8:	4630      	mov	r0, r6
 8007fda:	47c0      	blx	r8
 8007fdc:	4307      	orrs	r7, r0
 8007fde:	3568      	adds	r5, #104	; 0x68
 8007fe0:	e7e9      	b.n	8007fb6 <_fwalk_reent+0x12>
	...

08007fe4 <_lseek_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	4d07      	ldr	r5, [pc, #28]	; (8008004 <_lseek_r+0x20>)
 8007fe8:	4604      	mov	r4, r0
 8007fea:	4608      	mov	r0, r1
 8007fec:	4611      	mov	r1, r2
 8007fee:	2200      	movs	r2, #0
 8007ff0:	602a      	str	r2, [r5, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f7f9 fccc 	bl	8001990 <_lseek>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d102      	bne.n	8008002 <_lseek_r+0x1e>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	b103      	cbz	r3, 8008002 <_lseek_r+0x1e>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	200005bc 	.word	0x200005bc

08008008 <__swhatbuf_r>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	460e      	mov	r6, r1
 800800c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008010:	2900      	cmp	r1, #0
 8008012:	b096      	sub	sp, #88	; 0x58
 8008014:	4614      	mov	r4, r2
 8008016:	461d      	mov	r5, r3
 8008018:	da07      	bge.n	800802a <__swhatbuf_r+0x22>
 800801a:	2300      	movs	r3, #0
 800801c:	602b      	str	r3, [r5, #0]
 800801e:	89b3      	ldrh	r3, [r6, #12]
 8008020:	061a      	lsls	r2, r3, #24
 8008022:	d410      	bmi.n	8008046 <__swhatbuf_r+0x3e>
 8008024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008028:	e00e      	b.n	8008048 <__swhatbuf_r+0x40>
 800802a:	466a      	mov	r2, sp
 800802c:	f000 f862 	bl	80080f4 <_fstat_r>
 8008030:	2800      	cmp	r0, #0
 8008032:	dbf2      	blt.n	800801a <__swhatbuf_r+0x12>
 8008034:	9a01      	ldr	r2, [sp, #4]
 8008036:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800803a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800803e:	425a      	negs	r2, r3
 8008040:	415a      	adcs	r2, r3
 8008042:	602a      	str	r2, [r5, #0]
 8008044:	e7ee      	b.n	8008024 <__swhatbuf_r+0x1c>
 8008046:	2340      	movs	r3, #64	; 0x40
 8008048:	2000      	movs	r0, #0
 800804a:	6023      	str	r3, [r4, #0]
 800804c:	b016      	add	sp, #88	; 0x58
 800804e:	bd70      	pop	{r4, r5, r6, pc}

08008050 <__smakebuf_r>:
 8008050:	898b      	ldrh	r3, [r1, #12]
 8008052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008054:	079d      	lsls	r5, r3, #30
 8008056:	4606      	mov	r6, r0
 8008058:	460c      	mov	r4, r1
 800805a:	d507      	bpl.n	800806c <__smakebuf_r+0x1c>
 800805c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	6123      	str	r3, [r4, #16]
 8008064:	2301      	movs	r3, #1
 8008066:	6163      	str	r3, [r4, #20]
 8008068:	b002      	add	sp, #8
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	ab01      	add	r3, sp, #4
 800806e:	466a      	mov	r2, sp
 8008070:	f7ff ffca 	bl	8008008 <__swhatbuf_r>
 8008074:	9900      	ldr	r1, [sp, #0]
 8008076:	4605      	mov	r5, r0
 8008078:	4630      	mov	r0, r6
 800807a:	f7fd fbf9 	bl	8005870 <_malloc_r>
 800807e:	b948      	cbnz	r0, 8008094 <__smakebuf_r+0x44>
 8008080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008084:	059a      	lsls	r2, r3, #22
 8008086:	d4ef      	bmi.n	8008068 <__smakebuf_r+0x18>
 8008088:	f023 0303 	bic.w	r3, r3, #3
 800808c:	f043 0302 	orr.w	r3, r3, #2
 8008090:	81a3      	strh	r3, [r4, #12]
 8008092:	e7e3      	b.n	800805c <__smakebuf_r+0xc>
 8008094:	4b0d      	ldr	r3, [pc, #52]	; (80080cc <__smakebuf_r+0x7c>)
 8008096:	62b3      	str	r3, [r6, #40]	; 0x28
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	6020      	str	r0, [r4, #0]
 800809c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	9b00      	ldr	r3, [sp, #0]
 80080a4:	6163      	str	r3, [r4, #20]
 80080a6:	9b01      	ldr	r3, [sp, #4]
 80080a8:	6120      	str	r0, [r4, #16]
 80080aa:	b15b      	cbz	r3, 80080c4 <__smakebuf_r+0x74>
 80080ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080b0:	4630      	mov	r0, r6
 80080b2:	f000 f831 	bl	8008118 <_isatty_r>
 80080b6:	b128      	cbz	r0, 80080c4 <__smakebuf_r+0x74>
 80080b8:	89a3      	ldrh	r3, [r4, #12]
 80080ba:	f023 0303 	bic.w	r3, r3, #3
 80080be:	f043 0301 	orr.w	r3, r3, #1
 80080c2:	81a3      	strh	r3, [r4, #12]
 80080c4:	89a0      	ldrh	r0, [r4, #12]
 80080c6:	4305      	orrs	r5, r0
 80080c8:	81a5      	strh	r5, [r4, #12]
 80080ca:	e7cd      	b.n	8008068 <__smakebuf_r+0x18>
 80080cc:	08007e41 	.word	0x08007e41

080080d0 <_read_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4d07      	ldr	r5, [pc, #28]	; (80080f0 <_read_r+0x20>)
 80080d4:	4604      	mov	r4, r0
 80080d6:	4608      	mov	r0, r1
 80080d8:	4611      	mov	r1, r2
 80080da:	2200      	movs	r2, #0
 80080dc:	602a      	str	r2, [r5, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	f7f9 fbf6 	bl	80018d0 <_read>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_read_r+0x1e>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_read_r+0x1e>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	200005bc 	.word	0x200005bc

080080f4 <_fstat_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4d07      	ldr	r5, [pc, #28]	; (8008114 <_fstat_r+0x20>)
 80080f8:	2300      	movs	r3, #0
 80080fa:	4604      	mov	r4, r0
 80080fc:	4608      	mov	r0, r1
 80080fe:	4611      	mov	r1, r2
 8008100:	602b      	str	r3, [r5, #0]
 8008102:	f7f9 fc2a 	bl	800195a <_fstat>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	d102      	bne.n	8008110 <_fstat_r+0x1c>
 800810a:	682b      	ldr	r3, [r5, #0]
 800810c:	b103      	cbz	r3, 8008110 <_fstat_r+0x1c>
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	bd38      	pop	{r3, r4, r5, pc}
 8008112:	bf00      	nop
 8008114:	200005bc 	.word	0x200005bc

08008118 <_isatty_r>:
 8008118:	b538      	push	{r3, r4, r5, lr}
 800811a:	4d06      	ldr	r5, [pc, #24]	; (8008134 <_isatty_r+0x1c>)
 800811c:	2300      	movs	r3, #0
 800811e:	4604      	mov	r4, r0
 8008120:	4608      	mov	r0, r1
 8008122:	602b      	str	r3, [r5, #0]
 8008124:	f7f9 fc29 	bl	800197a <_isatty>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_isatty_r+0x1a>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_isatty_r+0x1a>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	200005bc 	.word	0x200005bc

08008138 <_init>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	bf00      	nop
 800813c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813e:	bc08      	pop	{r3}
 8008140:	469e      	mov	lr, r3
 8008142:	4770      	bx	lr

08008144 <_fini>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	bf00      	nop
 8008148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814a:	bc08      	pop	{r3}
 800814c:	469e      	mov	lr, r3
 800814e:	4770      	bx	lr
