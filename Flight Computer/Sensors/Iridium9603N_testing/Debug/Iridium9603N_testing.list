
Iridium9603N_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd4  0800a150  0800a150  0001a150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b124  0800b124  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800b124  0800b124  0001b124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b12c  0800b12c  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800b12c  0800b12c  0001b12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b138  0800b138  0001b138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800b13c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000244  0800b380  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  0800b380  00020690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023726  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b8  00000000  00000000  0004399a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00047258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013f8  00000000  00000000  00048700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b25  00000000  00000000  00049af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001834c  00000000  00000000  0007161d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc46e  00000000  00000000  00089969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165dd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000718c  00000000  00000000  00165e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000244 	.word	0x20000244
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a134 	.word	0x0800a134

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000248 	.word	0x20000248
 800020c:	0800a134 	.word	0x0800a134

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9b9 	b.w	8000f9c <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);

   }

   IridiumSBD(TwoWire &wirePort = Wire, uint8_t deviceAddress = 0x63)
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	4613      	mov	r3, r2
 8000fac:	71fb      	strb	r3, [r7, #7]
   {
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2205      	movs	r2, #5
 8000fba:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2208      	movs	r2, #8
 8000fda:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2210      	movs	r2, #16
 8000fe2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2220      	movs	r2, #32
 8000fea:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2240      	movs	r2, #64	; 0x40
 8000ff2:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
      useSerial = false;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      wireport = &wirePort;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	649a      	str	r2, [r3, #72]	; 0x48
      deviceaddress = deviceAddress;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	79fa      	ldrb	r2, [r7, #7]
 8001008:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	221e      	movs	r2, #30
 8001010:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	221e      	movs	r2, #30
 8001018:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001022:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	22f0      	movs	r2, #240	; 0xf0
 800102a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      remainingMessages = -1;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      asleep = true;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2201      	movs	r2, #1
 800103c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
      reentrant = false;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
      sleepPin = -1;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f04f 32ff 	mov.w	r2, #4294967295
 800104e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
      sleepPinConfigured = false;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
      ringPin = -1;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
      msstmWorkaroundRequested = false;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
      ringAlertsEnabled = true;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
      ringAsserted = false;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
      lastPowerOnTime = 0UL;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
      head = SBDRING;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8001088:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      tail = SBDRING;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8001090:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      nextChar = -1;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f04f 32ff 	mov.w	r2, #4294967295
 800109a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      i2c_ser_buffer_tail = 0;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      i2c_ser_buffer_head = 0;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   }
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	0800ab6c 	.word	0x0800ab6c

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c2:	b0a1      	sub	sp, #132	; 0x84
 80010c4:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c6:	f002 fd67 	bl	8003b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ca:	f000 f87b 	bl	80011c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ce:	f000 f953 	bl	8001378 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 80010d2:	f000 f923 	bl	800131c <_ZL19MX_USART3_UART_Initv>
  MX_I2C1_Init();
 80010d6:	f000 f8ed 	bl	80012b4 <_ZL12MX_I2C1_Initv>

  /*
    * TODO it seems like huart3 needs to be initialize before being passed in order to print
    * Solution: pass the variable in setup
    */
  GPS.setup(huart3);
 80010da:	4e34      	ldr	r6, [pc, #208]	; (80011ac <main+0xec>)
 80010dc:	466d      	mov	r5, sp
 80010de:	f106 040c 	add.w	r4, r6, #12
 80010e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80010fa:	482d      	ldr	r0, [pc, #180]	; (80011b0 <main+0xf0>)
 80010fc:	f001 fe10 	bl	8002d20 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  struct tm t; // struct tm is defined in time.h
	     int err = GPS.getSystemTime(t); // Ask the 9603N for the system time
 8001100:	f107 0320 	add.w	r3, r7, #32
 8001104:	4619      	mov	r1, r3
 8001106:	482a      	ldr	r0, [pc, #168]	; (80011b0 <main+0xf0>)
 8001108:	f000 fc5e 	bl	80019c8 <_ZN10IridiumSBD13getSystemTimeER2tm>
 800110c:	6478      	str	r0, [r7, #68]	; 0x44
	     if (err == ISBD_SUCCESS) // Was it successful?
 800110e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001110:	2b00      	cmp	r3, #0
 8001112:	d127      	bne.n	8001164 <main+0xa4>
	     {
	        char buf[32];
	        sprintf(buf, "%d-%02d-%02d %02d:%02d:%02d",
	           t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8001114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	        sprintf(buf, "%d-%02d-%02d %02d:%02d:%02d",
 8001116:	f203 756c 	addw	r5, r3, #1900	; 0x76c
	           t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 800111a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	        sprintf(buf, "%d-%02d-%02d %02d:%02d:%02d",
 800111c:	1c5e      	adds	r6, r3, #1
 800111e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001122:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001124:	6a38      	ldr	r0, [r7, #32]
 8001126:	463c      	mov	r4, r7
 8001128:	9003      	str	r0, [sp, #12]
 800112a:	9102      	str	r1, [sp, #8]
 800112c:	9201      	str	r2, [sp, #4]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	4633      	mov	r3, r6
 8001132:	462a      	mov	r2, r5
 8001134:	491f      	ldr	r1, [pc, #124]	; (80011b4 <main+0xf4>)
 8001136:	4620      	mov	r0, r4
 8001138:	f005 fed0 	bl	8006edc <siprintf>
	        HAL_UART_Transmit(&(GPS.uart),(uint8_t*) "\r\nIridium date/time is ", 25, HAL_MAX_DELAY);
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
 8001140:	2219      	movs	r2, #25
 8001142:	491d      	ldr	r1, [pc, #116]	; (80011b8 <main+0xf8>)
 8001144:	481a      	ldr	r0, [pc, #104]	; (80011b0 <main+0xf0>)
 8001146:	f004 fa78 	bl	800563a <HAL_UART_Transmit>
	        HAL_UART_Transmit(&(GPS.uart),(uint8_t*) buf, strlen(buf), HAL_MAX_DELAY);
 800114a:	463b      	mov	r3, r7
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f869 	bl	8000224 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	4639      	mov	r1, r7
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	4814      	ldr	r0, [pc, #80]	; (80011b0 <main+0xf0>)
 800115e:	f004 fa6c 	bl	800563a <HAL_UART_Transmit>
 8001162:	e019      	b.n	8001198 <main+0xd8>
	     }

	     else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 8001164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001166:	2b0c      	cmp	r3, #12
 8001168:	d107      	bne.n	800117a <main+0xba>
	     {
	    	 HAL_UART_Transmit(&(GPS.uart),(uint8_t*) "\r\nNo network detected.  Waiting 10 seconds.\r\n", 49, HAL_MAX_DELAY);
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	2231      	movs	r2, #49	; 0x31
 8001170:	4912      	ldr	r1, [pc, #72]	; (80011bc <main+0xfc>)
 8001172:	480f      	ldr	r0, [pc, #60]	; (80011b0 <main+0xf0>)
 8001174:	f004 fa61 	bl	800563a <HAL_UART_Transmit>
 8001178:	e00e      	b.n	8001198 <main+0xd8>
	     }

	     else
	     {
	        HAL_UART_Transmit(&(GPS.uart),(uint8_t*) "\r\nUnexpected Error ", 21, HAL_MAX_DELAY);
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	2215      	movs	r2, #21
 8001180:	490f      	ldr	r1, [pc, #60]	; (80011c0 <main+0x100>)
 8001182:	480b      	ldr	r0, [pc, #44]	; (80011b0 <main+0xf0>)
 8001184:	f004 fa59 	bl	800563a <HAL_UART_Transmit>
	        GPS.iridiumErrorMessage(err);
 8001188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800118a:	b2db      	uxtb	r3, r3
 800118c:	4619      	mov	r1, r3
 800118e:	4808      	ldr	r0, [pc, #32]	; (80011b0 <main+0xf0>)
 8001190:	f001 fec0 	bl	8002f14 <_ZN10IridiumSBD19iridiumErrorMessageEh>
	        return false;
 8001194:	2300      	movs	r3, #0
 8001196:	e004      	b.n	80011a2 <main+0xe2>
	     }

	     // Delay 10 seconds
	     HAL_Delay(10 * 1000UL);
 8001198:	f242 7010 	movw	r0, #10000	; 0x2710
 800119c:	f002 fd3e 	bl	8003c1c <HAL_Delay>
  }
 80011a0:	e7ae      	b.n	8001100 <main+0x40>
  /* USER CODE END 3 */
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	374c      	adds	r7, #76	; 0x4c
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200002b4 	.word	0x200002b4
 80011b0:	200002f8 	.word	0x200002f8
 80011b4:	0800a150 	.word	0x0800a150
 80011b8:	0800a16c 	.word	0x0800a16c
 80011bc:	0800a184 	.word	0x0800a184
 80011c0:	0800a1b4 	.word	0x0800a1b4

080011c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	; 0x50
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	2234      	movs	r2, #52	; 0x34
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 fe94 	bl	8005f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <_Z18SystemClock_Configv+0xe8>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	4a2e      	ldr	r2, [pc, #184]	; (80012ac <_Z18SystemClock_Configv+0xe8>)
 80011f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f6:	6413      	str	r3, [r2, #64]	; 0x40
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <_Z18SystemClock_Configv+0xe8>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <_Z18SystemClock_Configv+0xec>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001210:	4a27      	ldr	r2, [pc, #156]	; (80012b0 <_Z18SystemClock_Configv+0xec>)
 8001212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <_Z18SystemClock_Configv+0xec>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001224:	2302      	movs	r3, #2
 8001226:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800122c:	2310      	movs	r3, #16
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001230:	2302      	movs	r3, #2
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001234:	2300      	movs	r3, #0
 8001236:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001238:	2308      	movs	r3, #8
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 800123c:	2332      	movs	r3, #50	; 0x32
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001240:	2302      	movs	r3, #2
 8001242:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001244:	2307      	movs	r3, #7
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001248:	2302      	movs	r3, #2
 800124a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fc59 	bl	8004b08 <HAL_RCC_OscConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf14      	ite	ne
 800125c:	2301      	movne	r3, #1
 800125e:	2300      	moveq	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001266:	f000 f8c1 	bl	80013ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	230f      	movs	r3, #15
 800126c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126e:	2302      	movs	r3, #2
 8001270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001276:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800127a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001280:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	2101      	movs	r1, #1
 8001288:	4618      	mov	r0, r3
 800128a:	f003 f93f 	bl	800450c <HAL_RCC_ClockConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	bf14      	ite	ne
 8001294:	2301      	movne	r3, #1
 8001296:	2300      	moveq	r3, #0
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 800129e:	f000 f8a5 	bl	80013ec <Error_Handler>
  }
}
 80012a2:	bf00      	nop
 80012a4:	3750      	adds	r7, #80	; 0x50
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000

080012b4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <_ZL12MX_I2C1_Initv+0x5c>)
 80012ba:	4a16      	ldr	r2, [pc, #88]	; (8001314 <_ZL12MX_I2C1_Initv+0x60>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <_ZL12MX_I2C1_Initv+0x5c>)
 80012c0:	4a15      	ldr	r2, [pc, #84]	; (8001318 <_ZL12MX_I2C1_Initv+0x64>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <_ZL12MX_I2C1_Initv+0x5c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_ZL12MX_I2C1_Initv+0x5c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <_ZL12MX_I2C1_Initv+0x5c>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <_ZL12MX_I2C1_Initv+0x5c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <_ZL12MX_I2C1_Initv+0x5c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <_ZL12MX_I2C1_Initv+0x5c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <_ZL12MX_I2C1_Initv+0x5c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f0:	4807      	ldr	r0, [pc, #28]	; (8001310 <_ZL12MX_I2C1_Initv+0x5c>)
 80012f2:	f002 ff91 	bl	8004218 <HAL_I2C_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001306:	f000 f871 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000260 	.word	0x20000260
 8001314:	40005400 	.word	0x40005400
 8001318:	000186a0 	.word	0x000186a0

0800131c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001322:	4a14      	ldr	r2, [pc, #80]	; (8001374 <_ZL19MX_USART3_UART_Initv+0x58>)
 8001324:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001328:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800132c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <_ZL19MX_USART3_UART_Initv+0x54>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <_ZL19MX_USART3_UART_Initv+0x54>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <_ZL19MX_USART3_UART_Initv+0x54>)
 8001354:	f004 f924 	bl	80055a0 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf14      	ite	ne
 800135e:	2301      	movne	r3, #1
 8001360:	2300      	moveq	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8001368:	f000 f840 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	200002b4 	.word	0x200002b4
 8001374:	40004800 	.word	0x40004800

08001378 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <_ZL12MX_GPIO_Initv+0x4c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <_ZL12MX_GPIO_Initv+0x4c>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <_ZL12MX_GPIO_Initv+0x4c>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <_ZL12MX_GPIO_Initv+0x4c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <_ZL12MX_GPIO_Initv+0x4c>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <_ZL12MX_GPIO_Initv+0x4c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]

}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800

080013c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013da:	f002 fbff 	bl	8003bdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40010000 	.word	0x40010000

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <Error_Handler+0x8>
	...

080013f8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d109      	bne.n	800141c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140e:	4293      	cmp	r3, r2
 8001410:	d104      	bne.n	800141c <_Z41__static_initialization_and_destruction_0ii+0x24>
IridiumSBD GPS;
 8001412:	2263      	movs	r2, #99	; 0x63
 8001414:	4903      	ldr	r1, [pc, #12]	; (8001424 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001418:	f7ff fdc2 	bl	8000fa0 <_ZN10IridiumSBDC1ER7TwoWireh>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200003e0 	.word	0x200003e0
 8001428:	200002f8 	.word	0x200002f8

0800142c <_GLOBAL__sub_I_hi2c1>:
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
 8001430:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff ffdf 	bl	80013f8 <_Z41__static_initialization_and_destruction_0ii>
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_MspInit+0x4c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_MspInit+0x4c>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800

0800148c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a19      	ldr	r2, [pc, #100]	; (8001510 <HAL_I2C_MspInit+0x84>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d12c      	bne.n	8001508 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d0:	2312      	movs	r3, #18
 80014d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014dc:	2304      	movs	r3, #4
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	480c      	ldr	r0, [pc, #48]	; (8001518 <HAL_I2C_MspInit+0x8c>)
 80014e8:	f002 fcd0 	bl	8003e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fa:	6413      	str	r3, [r2, #64]	; 0x40
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_I2C_MspInit+0x88>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40005400 	.word	0x40005400
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_UART_MspInit+0x84>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d12c      	bne.n	8001598 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a17      	ldr	r2, [pc, #92]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <HAL_UART_MspInit+0x88>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <HAL_UART_MspInit+0x88>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001576:	f44f 7340 	mov.w	r3, #768	; 0x300
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001588:	2307      	movs	r3, #7
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <HAL_UART_MspInit+0x8c>)
 8001594:	f002 fc7a 	bl	8003e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	; 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40004800 	.word	0x40004800
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020c00 	.word	0x40020c00

080015ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	2019      	movs	r0, #25
 80015c2:	f002 fc2b 	bl	8003e1c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015c6:	2019      	movs	r0, #25
 80015c8:	f002 fc44 	bl	8003e54 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <HAL_InitTick+0xa4>)
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <HAL_InitTick+0xa4>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6453      	str	r3, [r2, #68]	; 0x44
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_InitTick+0xa4>)
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015e8:	f107 0210 	add.w	r2, r7, #16
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 f8a4 	bl	8004740 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80015f8:	f003 f88e 	bl	8004718 <HAL_RCC_GetPCLK2Freq>
 80015fc:	4603      	mov	r3, r0
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	4a13      	ldr	r2, [pc, #76]	; (8001654 <HAL_InitTick+0xa8>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	0c9b      	lsrs	r3, r3, #18
 800160c:	3b01      	subs	r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <HAL_InitTick+0xac>)
 8001612:	4a12      	ldr	r2, [pc, #72]	; (800165c <HAL_InitTick+0xb0>)
 8001614:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_InitTick+0xac>)
 8001618:	f240 32e7 	movw	r2, #999	; 0x3e7
 800161c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_InitTick+0xac>)
 8001620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001622:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_InitTick+0xac>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_InitTick+0xac>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001630:	4809      	ldr	r0, [pc, #36]	; (8001658 <HAL_InitTick+0xac>)
 8001632:	f003 fd07 	bl	8005044 <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d104      	bne.n	8001646 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800163c:	4806      	ldr	r0, [pc, #24]	; (8001658 <HAL_InitTick+0xac>)
 800163e:	f003 fd5b 	bl	80050f8 <HAL_TIM_Base_Start_IT>
 8001642:	4603      	mov	r3, r0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3730      	adds	r7, #48	; 0x30
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40023800 	.word	0x40023800
 8001654:	431bde83 	.word	0x431bde83
 8001658:	20000634 	.word	0x20000634
 800165c:	40010000 	.word	0x40010000

08001660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <NMI_Handler+0x4>

08001666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <HardFault_Handler+0x4>

0800166c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <MemManage_Handler+0x4>

08001672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <UsageFault_Handler+0x4>

0800167e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016be:	f003 fd8b 	bl	80051d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000634 	.word	0x20000634

080016cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
	return 1;
 80016d0:	2301      	movs	r3, #1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_kill>:

int _kill(int pid, int sig)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016e6:	f004 fa8d 	bl	8005c04 <__errno>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2216      	movs	r2, #22
 80016ee:	601a      	str	r2, [r3, #0]
	return -1;
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_exit>:

void _exit (int status)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ffe7 	bl	80016dc <_kill>
	while (1) {}		/* Make sure we hang here */
 800170e:	e7fe      	b.n	800170e <_exit+0x12>

08001710 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	e00a      	b.n	8001738 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001722:	f3af 8000 	nop.w
 8001726:	4601      	mov	r1, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	b2ca      	uxtb	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf0      	blt.n	8001722 <_read+0x12>
	}

return len;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e009      	b.n	8001770 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf1      	blt.n	800175c <_write+0x12>
	}
	return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_close>:

int _close(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
	return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017aa:	605a      	str	r2, [r3, #4]
	return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_isatty>:

int _isatty(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	return 1;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f004 f9f2 	bl	8005c04 <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20020000 	.word	0x20020000
 800184c:	00000400 	.word	0x00000400
 8001850:	200003dc 	.word	0x200003dc
 8001854:	20000690 	.word	0x20000690

08001858 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <SystemInit+0x20>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <SystemInit+0x20>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001882:	490e      	ldr	r1, [pc, #56]	; (80018bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001884:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001888:	e002      	b.n	8001890 <LoopCopyDataInit>

0800188a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800188c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188e:	3304      	adds	r3, #4

08001890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001894:	d3f9      	bcc.n	800188a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001898:	4c0b      	ldr	r4, [pc, #44]	; (80018c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800189a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800189c:	e001      	b.n	80018a2 <LoopFillZerobss>

0800189e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a0:	3204      	adds	r2, #4

080018a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a4:	d3fb      	bcc.n	800189e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018a6:	f7ff ffd7 	bl	8001858 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018aa:	f004 f9b1 	bl	8005c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ae:	f7ff fc07 	bl	80010c0 <main>
  bx  lr    
 80018b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 80018c0:	0800b13c 	.word	0x0800b13c
  ldr r2, =_sbss
 80018c4:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 80018c8:	20000690 	.word	0x20000690

080018cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC_IRQHandler>

080018ce <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	6039      	str	r1, [r7, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	4611      	mov	r1, r2
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
 80018e8:	4603      	mov	r3, r0
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	2301      	movs	r3, #1
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	70fb      	strb	r3, [r7, #3]
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	460b      	mov	r3, r1
 8001924:	70fb      	strb	r3, [r7, #3]
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_ZN10IridiumSBD5beginEv>:

// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 8001944:	2309      	movs	r3, #9
 8001946:	e01b      	b.n	8001980 <_ZN10IridiumSBD5beginEv+0x4e>

   this->reentrant = true;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
   int ret = internalBegin();
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fa3d 	bl	8001dd0 <_ZN10IridiumSBD13internalBeginEv>
 8001956:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00b      	beq.n	800197e <_ZN10IridiumSBD5beginEv+0x4c>
   {
      if (this->useSerial)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <_ZN10IridiumSBD5beginEv+0x44>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fd63 	bl	800243c <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8001976:	2100      	movs	r1, #0
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 fca5 	bl	80022c8 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 800197e:	68fb      	ldr	r3, [r7, #12]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
   if (enable)
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00e      	beq.n	80019c0 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
   {
      this->ringAsserted = false;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80019b0:	f083 0301 	eor.w	r3, r3, #1
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
      {
        clearRingIndicator();
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f9b2 	bl	8001d24 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 80019c8:	b5b0      	push	{r4, r5, r7, lr}
 80019ca:	b09c      	sub	sp, #112	; 0x70
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 80019d2:	2301      	movs	r3, #1
 80019d4:	2201      	movs	r2, #1
 80019d6:	493f      	ldr	r1, [pc, #252]	; (8001ad4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 fd3d 	bl	8002458 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 80019de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80019e2:	4b3d      	ldr	r3, [pc, #244]	; (8001ad8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 80019e8:	2218      	movs	r2, #24
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 fb7a 	bl	80020e4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f083 0301 	eor.w	r3, r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d009      	beq.n	8001a10 <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fc31 	bl	8002264 <_ZN10IridiumSBD9cancelledEv>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 8001a08:	2304      	movs	r3, #4
 8001a0a:	e05e      	b.n	8001aca <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e05c      	b.n	8001aca <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 8001a10:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001a14:	4618      	mov	r0, r3
 8001a16:	f004 f91f 	bl	8005c58 <isxdigit>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 8001a20:	230c      	movs	r3, #12
 8001a22:	e052      	b.n	8001aca <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 8001a24:	2372      	movs	r3, #114	; 0x72
 8001a26:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 8001a2c:	230b      	movs	r3, #11
 8001a2e:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 8001a30:	230e      	movs	r3, #14
 8001a32:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8001a34:	2317      	movs	r3, #23
 8001a36:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8001a38:	2337      	movs	r3, #55	; 0x37
 8001a3a:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 8001a3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a40:	2210      	movs	r2, #16
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f005 fb87 	bl	8007158 <strtoul>
 8001a4a:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8001a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a4e:	4a24      	ldr	r2, [pc, #144]	; (8001ae0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	225a      	movs	r2, #90	; 0x5a
 8001a58:	fb02 f303 	mul.w	r3, r2, r3
 8001a5c:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 8001a5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a60:	085b      	lsrs	r3, r3, #1
 8001a62:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 8001a64:	fba2 2303 	umull	r2, r3, r2, r3
 8001a68:	095b      	lsrs	r3, r3, #5
 8001a6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a6e:	fb02 f303 	mul.w	r3, r2, r3
 8001a72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8001a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a7a:	225a      	movs	r2, #90	; 0x5a
 8001a7c:	fb02 f303 	mul.w	r3, r2, r3
 8001a80:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	099b      	lsrs	r3, r3, #6
 8001a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a8a:	4413      	add	r3, r2
 8001a8c:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 fb14 	bl	80060c0 <mktime>
 8001a98:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 8001a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f04f 0100 	mov.w	r1, #0
 8001aa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001aa8:	1884      	adds	r4, r0, r2
 8001aaa:	eb41 0503 	adc.w	r5, r1, r3
 8001aae:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f004 f8d6 	bl	8005c68 <localtime>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6838      	ldr	r0, [r7, #0]
 8001ac4:	f004 f9f4 	bl	8005eb0 <memcpy>
   return ISBD_SUCCESS;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3768      	adds	r7, #104	; 0x68
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	0800a1f0 	.word	0x0800a1f0
 8001ad8:	0800a208 	.word	0x0800a208
 8001adc:	0800a1fc 	.word	0x0800a1fc
 8001ae0:	10624dd3 	.word	0x10624dd3
 8001ae4:	b60b60b7 	.word	0xb60b60b7

08001ae8 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b07      	cmp	r3, #7
 8001af8:	d801      	bhi.n	8001afe <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8001afa:	2308      	movs	r3, #8
 8001afc:	e01e      	b.n	8001b3c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 8001afe:	2301      	movs	r3, #1
 8001b00:	2201      	movs	r2, #1
 8001b02:	4910      	ldr	r1, [pc, #64]	; (8001b44 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 fca7 	bl	8002458 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fae5 	bl	80020e4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 fb9c 	bl	8002264 <_ZN10IridiumSBD9cancelledEv>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8001b32:	2304      	movs	r3, #4
 8001b34:	e002      	b.n	8001b3c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8001b36:	2303      	movs	r3, #3
 8001b38:	e000      	b.n	8001b3c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	0800a210 	.word	0x0800a210
 8001b48:	0800a208 	.word	0x0800a208
 8001b4c:	0800a21c 	.word	0x0800a21c

08001b50 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001b66:	4918      	ldr	r1, [pc, #96]	; (8001bc8 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 fd1d 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8001b6e:	e028      	b.n	8001bc2 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f001 f803 	bl	8002b7c <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00b      	beq.n	8001b94 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 30d9 	ldrb.w	r3, [r3, #217]	; 0xd9
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8001b92:	e00f      	b.n	8001bb4 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001b9a:	b25a      	sxtb	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 30d9 	ldrb.w	r3, [r3, #217]	; 0xd9
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	b25b      	sxtb	r3, r3
 8001ba8:	4013      	ands	r3, r2
 8001baa:	b25b      	sxtb	r3, r3
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
  }
  set9603pins(IO_REGISTER); // Update the pins
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f001 f818 	bl	8002bf2 <_ZN10IridiumSBD11set9603pinsEh>
}
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	0800a238 	.word	0x0800a238

08001bcc <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1e>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001bde:	4912      	ldr	r1, [pc, #72]	; (8001c28 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 fce1 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 8001be6:	2300      	movs	r3, #0
 8001be8:	e01a      	b.n	8001c20 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 ffc6 	bl	8002b7c <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf14      	ite	ne
 8001c10:	2301      	movne	r3, #1
 8001c12:	2300      	moveq	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  {
    return(true);
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }
  else
  {
    return(false);
 8001c1e:	2300      	movs	r3, #0
  }
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	0800a284 	.word	0x0800a284

08001c2c <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d004      	beq.n	8001c4c <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001c42:	4918      	ldr	r1, [pc, #96]	; (8001ca4 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fcaf 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8001c4a:	e028      	b.n	8001c9e <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 ff95 	bl	8002b7c <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d00b      	beq.n	8001c70 <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8001c6e:	e00f      	b.n	8001c90 <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001c76:	b25a      	sxtb	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8001c7e:	b25b      	sxtb	r3, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	4013      	ands	r3, r2
 8001c86:	b25b      	sxtb	r3, r3
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
  }
  set9603pins(IO_REGISTER); // Update the pins
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001c96:	4619      	mov	r1, r3
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 ffaa 	bl	8002bf2 <_ZN10IridiumSBD11set9603pinsEh>
}
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	0800a2d0 	.word	0x0800a2d0

08001ca8 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d004      	beq.n	8001cc8 <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001cbe:	4918      	ldr	r1, [pc, #96]	; (8001d20 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fc71 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8001cc6:	e028      	b.n	8001d1a <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 ff57 	bl	8002b7c <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00b      	beq.n	8001cec <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
 8001cea:	e00f      	b.n	8001d0c <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001cf2:	b25a      	sxtb	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	b25b      	sxtb	r3, r3
 8001d00:	4013      	ands	r3, r2
 8001d02:	b25b      	sxtb	r3, r3
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
  }
  set9603pins(IO_REGISTER); // Update the pins
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001d12:	4619      	mov	r1, r3
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 ff6c 	bl	8002bf2 <_ZN10IridiumSBD11set9603pinsEh>
}
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	0800a318 	.word	0x0800a318

08001d24 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d004      	beq.n	8001d40 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1c>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8001d36:	4913      	ldr	r1, [pc, #76]	; (8001d84 <_ZN10IridiumSBD18clearRingIndicatorEv+0x60>)
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fc35 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8001d3e:	e01d      	b.n	8001d7c <_ZN10IridiumSBD18clearRingIndicatorEv+0x58>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 ff1b 	bl	8002b7c <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001d4c:	b25a      	sxtb	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
  set9603pins(IO_REGISTER); // Update the pins
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 ff3f 	bl	8002bf2 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
}
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	0800a3e8 	.word	0x0800a3e8

08001d88 <_ZN10IridiumSBD11isConnectedEv>:
}

//Returns true if the I2C device is connected
//Always returns true for serial
boolean IridiumSBD::isConnected()
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <_ZN10IridiumSBD11isConnectedEv+0x16>
   {
		return true;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e013      	b.n	8001dc6 <_ZN10IridiumSBD11isConnectedEv+0x3e>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f001 faaa 	bl	8003304 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db4:	4618      	mov	r0, r3
 8001db6:	f001 faef 	bl	8003398 <_ZN7TwoWire15endTransmissionEv>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
   }
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b090      	sub	sp, #64	; 0x40
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8001dd8:	49b1      	ldr	r1, [pc, #708]	; (80020a0 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fbe4 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8001de6:	f083 0301 	eor.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e150      	b.n	8002096 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (!this->useSerial) // If we are using I2C
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001dfa:	f083 0301 	eor.w	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <_ZN10IridiumSBD13internalBeginEv+0x40>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 feb9 	bl	8002b7c <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fdde 	bl	80029cc <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8001e10:	2101      	movs	r1, #1
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fa58 	bl	80022c8 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8001e1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8001e24:	f001 feee 	bl	8003c04 <HAL_GetTick>
 8001e28:	62b8      	str	r0, [r7, #40]	; 0x28
 8001e2a:	f001 feeb 	bl	8003c04 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e36:	429a      	cmp	r2, r3
 8001e38:	bf8c      	ite	hi
 8001e3a:	2301      	movhi	r3, #1
 8001e3c:	2300      	movls	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <_ZN10IridiumSBD13internalBeginEv+0x84>
      if (cancelled())
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fa0d 	bl	8002264 <_ZN10IridiumSBD9cancelledEv>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ec      	beq.n	8001e2a <_ZN10IridiumSBD13internalBeginEv+0x5a>
         return ISBD_CANCELLED;
 8001e50:	2304      	movs	r3, #4
 8001e52:	e120      	b.n	8002096 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (this->useSerial) // If we are using Serial
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <_ZN10IridiumSBD13internalBeginEv+0x94>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fade 	bl	8002420 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8001e64:	f001 fece 	bl	8003c04 <HAL_GetTick>
 8001e68:	6278      	str	r0, [r7, #36]	; 0x24
 8001e6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e6e:	f083 0301 	eor.w	r3, r3, #1
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d010      	beq.n	8001e9a <_ZN10IridiumSBD13internalBeginEv+0xca>
 8001e78:	f001 fec4 	bl	8003c04 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	1ad2      	subs	r2, r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	fb03 f301 	mul.w	r3, r3, r1
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d201      	bcs.n	8001e9a <_ZN10IridiumSBD13internalBeginEv+0xca>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <_ZN10IridiumSBD13internalBeginEv+0xcc>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d018      	beq.n	8001ed2 <_ZN10IridiumSBD13internalBeginEv+0x102>
   {
      send(F("AT\r"));
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	497f      	ldr	r1, [pc, #508]	; (80020a4 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fad6 	bl	8002458 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8001eac:	4b7e      	ldr	r3, [pc, #504]	; (80020a8 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f914 	bl	80020e4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f9ce 	bl	8002264 <_ZN10IridiumSBD9cancelledEv>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0cd      	beq.n	8001e6a <_ZN10IridiumSBD13internalBeginEv+0x9a>
         return ISBD_CANCELLED;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	e0e1      	b.n	8002096 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   if (!modemAlive)
 8001ed2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ed6:	f083 0301 	eor.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <_ZN10IridiumSBD13internalBeginEv+0x11c>
   {
      diagprint(F("No modem detected.\r\n"));
 8001ee0:	4972      	ldr	r1, [pc, #456]	; (80020ac <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 fb60 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8001ee8:	2305      	movs	r3, #5
 8001eea:	e0d4      	b.n	8002096 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8001eec:	4a70      	ldr	r2, [pc, #448]	; (80020b0 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8001eee:	f107 0310 	add.w	r3, r7, #16
 8001ef2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ef4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
 8001efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	dc26      	bgt.n	8001f50 <_ZN10IridiumSBD13internalBeginEv+0x180>
   {
      send(strings[i]);
 8001f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001f10:	4619      	mov	r1, r3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fafa 	bl	800250c <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8001f18:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8de 	bl	80020e4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f083 0301 	eor.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d009      	beq.n	8001f48 <_ZN10IridiumSBD13internalBeginEv+0x178>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f995 	bl	8002264 <_ZN10IridiumSBD9cancelledEv>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <_ZN10IridiumSBD13internalBeginEv+0x174>
 8001f40:	2304      	movs	r3, #4
 8001f42:	e0a8      	b.n	8002096 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0a6      	b.n	8002096 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   for (int i=0; i<3; ++i)
 8001f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f4e:	e7d5      	b.n	8001efc <_ZN10IridiumSBD13internalBeginEv+0x12c>
   }


   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8001f50:	4958      	ldr	r1, [pc, #352]	; (80020b4 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fb28 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <_ZN10IridiumSBD13internalBeginEv+0x196>
 8001f62:	4b55      	ldr	r3, [pc, #340]	; (80020b8 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8001f64:	e000      	b.n	8001f68 <_ZN10IridiumSBD13internalBeginEv+0x198>
 8001f66:	4b55      	ldr	r3, [pc, #340]	; (80020bc <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fb1c 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8001f70:	4953      	ldr	r1, [pc, #332]	; (80020c0 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fb18 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d004      	beq.n	8001f8c <_ZN10IridiumSBD13internalBeginEv+0x1bc>
 8001f82:	2101      	movs	r1, #1
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fcff 	bl	8001988 <_ZN10IridiumSBD16enableRingAlertsEb>
 8001f8a:	e00a      	b.n	8001fa2 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001f92:	f083 0301 	eor.w	r3, r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff fec1 	bl	8001d24 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <_ZN10IridiumSBD13internalBeginEv+0x1e0>
 8001fac:	4945      	ldr	r1, [pc, #276]	; (80020c4 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8001fae:	e000      	b.n	8001fb2 <_ZN10IridiumSBD13internalBeginEv+0x1e2>
 8001fb0:	4945      	ldr	r1, [pc, #276]	; (80020c8 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fa4e 	bl	8002458 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f88c 	bl	80020e4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f083 0301 	eor.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d009      	beq.n	8001fec <_ZN10IridiumSBD13internalBeginEv+0x21c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f943 	bl	8002264 <_ZN10IridiumSBD9cancelledEv>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <_ZN10IridiumSBD13internalBeginEv+0x218>
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	e056      	b.n	8002096 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e054      	b.n	8002096 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff fd77 	bl	8001ae8 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8001ffa:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d008      	beq.n	8002014 <_ZN10IridiumSBD13internalBeginEv+0x244>
   {
      diagprint(F("Unknown FW version\r\n"));
 8002002:	4932      	ldr	r1, [pc, #200]	; (80020cc <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 facf 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
 8002012:	e027      	b.n	8002064 <_ZN10IridiumSBD13internalBeginEv+0x294>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8002014:	492e      	ldr	r1, [pc, #184]	; (80020d0 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fac6 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 800201c:	f107 0308 	add.w	r3, r7, #8
 8002020:	4619      	mov	r1, r3
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fae6 	bl	80025f4 <_ZN10IridiumSBD9diagprintEPKc>
 8002028:	492a      	ldr	r1, [pc, #168]	; (80020d4 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fabc 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8002030:	7a3b      	ldrb	r3, [r7, #8]
 8002032:	2b54      	cmp	r3, #84	; 0x54
 8002034:	d116      	bne.n	8002064 <_ZN10IridiumSBD13internalBeginEv+0x294>
 8002036:	7a7b      	ldrb	r3, [r7, #9]
 8002038:	2b41      	cmp	r3, #65	; 0x41
 800203a:	d113      	bne.n	8002064 <_ZN10IridiumSBD13internalBeginEv+0x294>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 800203c:	f107 0308 	add.w	r3, r7, #8
 8002040:	3302      	adds	r3, #2
 8002042:	220a      	movs	r2, #10
 8002044:	2100      	movs	r1, #0
 8002046:	4618      	mov	r0, r3
 8002048:	f005 f886 	bl	8007158 <strtoul>
 800204c:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8002054:	4293      	cmp	r3, r2
 8002056:	bf94      	ite	ls
 8002058:	2301      	movls	r3, #1
 800205a:	2300      	movhi	r3, #0
 800205c:	b2da      	uxtb	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8002064:	491c      	ldr	r1, [pc, #112]	; (80020d8 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fa9e 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8002078:	e000      	b.n	800207c <_ZN10IridiumSBD13internalBeginEv+0x2ac>
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 800207c:	4619      	mov	r1, r3
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fa92 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8002084:	4915      	ldr	r1, [pc, #84]	; (80020dc <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fa8e 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 800208c:	4914      	ldr	r1, [pc, #80]	; (80020e0 <_ZN10IridiumSBD13internalBeginEv+0x310>)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fa8a 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3738      	adds	r7, #56	; 0x38
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	0800a508 	.word	0x0800a508
 80020a4:	0800a520 	.word	0x0800a520
 80020a8:	0800a208 	.word	0x0800a208
 80020ac:	0800a524 	.word	0x0800a524
 80020b0:	0800a5f8 	.word	0x0800a5f8
 80020b4:	0800a53c 	.word	0x0800a53c
 80020b8:	0800a54c 	.word	0x0800a54c
 80020bc:	0800a550 	.word	0x0800a550
 80020c0:	0800a558 	.word	0x0800a558
 80020c4:	0800a564 	.word	0x0800a564
 80020c8:	0800a574 	.word	0x0800a574
 80020cc:	0800a584 	.word	0x0800a584
 80020d0:	0800a59c 	.word	0x0800a59c
 80020d4:	0800a5b4 	.word	0x0800a5b4
 80020d8:	0800a5b8 	.word	0x0800a5b8
 80020dc:	0800a5cc 	.word	0x0800a5cc
 80020e0:	0800a5dc 	.word	0x0800a5dc

080020e4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08a      	sub	sp, #40	; 0x28
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 80020f2:	4959      	ldr	r1, [pc, #356]	; (8002258 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>)
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fa57 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 80020fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fa79 	bl	80025f4 <_ZN10IridiumSBD9diagprintEPKc>
   diagprint(F("\r\n"));
 8002102:	4956      	ldr	r1, [pc, #344]	; (800225c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x178>)
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 fa4f 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x38>
      memset(response, 0, responseSize);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	461a      	mov	r2, r3
 8002114:	2100      	movs	r1, #0
 8002116:	68b8      	ldr	r0, [r7, #8]
 8002118:	f003 fef2 	bl	8005f00 <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x4a>
 800212a:	2300      	movs	r3, #0
 800212c:	e000      	b.n	8002130 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x4c>
 800212e:	2302      	movs	r3, #2
 8002130:	61fb      	str	r3, [r7, #28]
   consoleprint(F("<< "));
 8002132:	494b      	ldr	r1, [pc, #300]	; (8002260 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>)
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fa7f 	bl	8002638 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 800213a:	f001 fd63 	bl	8003c04 <HAL_GetTick>
 800213e:	61b8      	str	r0, [r7, #24]
 8002140:	f001 fd60 	bl	8003c04 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	1ad2      	subs	r2, r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002150:	4619      	mov	r1, r3
 8002152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002156:	fb03 f301 	mul.w	r3, r3, r1
 800215a:	429a      	cmp	r2, r3
 800215c:	bf34      	ite	cc
 800215e:	2301      	movcc	r3, #1
 8002160:	2300      	movcs	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d072      	beq.n	800224e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16a>
   {
      if (cancelled())
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f87b 	bl	8002264 <_ZN10IridiumSBD9cancelledEv>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x94>
         return false;
 8002174:	2300      	movs	r3, #0
 8002176:	e06b      	b.n	8002250 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16c>

      while (filteredavailable() > 0)
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fbc5 	bl	8002908 <_ZN10IridiumSBD17filteredavailableEv>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	bfcc      	ite	gt
 8002184:	2301      	movgt	r3, #1
 8002186:	2300      	movle	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0d8      	beq.n	8002140 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x5c>
      {
         char c = filteredread();
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 fbd6 	bl	8002940 <_ZN10IridiumSBD12filteredreadEv>
 8002194:	4603      	mov	r3, r0
 8002196:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d03b      	beq.n	8002216 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x132>
         {
            switch (promptState)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xc8>
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d01d      	beq.n	80021e6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x102>
 80021aa:	e034      	b.n	8002216 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x132>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	7dfa      	ldrb	r2, [r7, #23]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d10b      	bne.n	80021d2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xee>
               {
                  ++matchPromptPos;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	3301      	adds	r3, #1
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	4413      	add	r3, r2
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d121      	bne.n	8002210 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12c>
                     promptState = GATHERING_RESPONSE;
 80021cc:	2301      	movs	r3, #1
 80021ce:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 80021d0:	e01e      	b.n	8002210 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12c>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	7dfa      	ldrb	r2, [r7, #23]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d101      	bne.n	80021e0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfc>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfe>
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 80021e4:	e014      	b.n	8002210 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12c>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
               {
                  if (c == '\r' || responseSize < 2)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b0d      	cmp	r3, #13
 80021f0:	d002      	beq.n	80021f8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x114>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	dc02      	bgt.n	80021fe <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x11a>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 80021fc:	e00a      	b.n	8002214 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
                     *response++ = c;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	60ba      	str	r2, [r7, #8]
 8002204:	7dfa      	ldrb	r2, [r7, #23]
 8002206:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	607b      	str	r3, [r7, #4]
               break;
 800220e:	e001      	b.n	8002214 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x130>
               break;
 8002210:	bf00      	nop
 8002212:	e000      	b.n	8002216 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x132>
               break;
 8002214:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800221a:	4413      	add	r3, r2
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	7dfa      	ldrb	r2, [r7, #23]
 8002220:	429a      	cmp	r2, r3
 8002222:	d10a      	bne.n	800223a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x156>
         {
            ++matchTerminatorPos;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	3301      	adds	r3, #1
 8002228:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800222e:	4413      	add	r3, r2
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1a0      	bne.n	8002178 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x94>
               return true;
 8002236:	2301      	movs	r3, #1
 8002238:	e00a      	b.n	8002250 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x16c>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	7dfa      	ldrb	r2, [r7, #23]
 8002240:	429a      	cmp	r2, r3
 8002242:	d101      	bne.n	8002248 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x164>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x166>
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 800224c:	e794      	b.n	8002178 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x94>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	0800a73c 	.word	0x0800a73c
 800225c:	0800a5b4 	.word	0x0800a5b4
 8002260:	0800a754 	.word	0x0800a754

08002264 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002272:	2b00      	cmp	r3, #0
 8002274:	d019      	beq.n	80022aa <_ZN10IridiumSBD9cancelledEv+0x46>
   {
	   //For some reason when using digitalRead here it didn't work so simply replaced with HAL function
      if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d008      	beq.n	8002294 <_ZN10IridiumSBD9cancelledEv+0x30>
 8002282:	2110      	movs	r1, #16
 8002284:	480e      	ldr	r0, [pc, #56]	; (80022c0 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8002286:	f001 ff95 	bl	80041b4 <HAL_GPIO_ReadPin>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <_ZN10IridiumSBD9cancelledEv+0x30>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <_ZN10IridiumSBD9cancelledEv+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d007      	beq.n	80022aa <_ZN10IridiumSBD9cancelledEv+0x46>
	  {
         ringAsserted = true;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
		 diagprint(F("ringPin seen!\r\n"));
 80022a2:	4908      	ldr	r1, [pc, #32]	; (80022c4 <_ZN10IridiumSBD9cancelledEv+0x60>)
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f97f 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 80022aa:	f7ff fb22 	bl	80018f2 <_Z12ISBDCallbackv>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f083 0301 	eor.w	r3, r3, #1
 80022b4:	b2db      	uxtb	r3, r3
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40020800 	.word	0x40020800
 80022c4:	0800a758 	.word	0x0800a758

080022c8 <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	f083 0301 	eor.w	r3, r3, #1
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

   if (this->useSerial)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d011      	beq.n	8002310 <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80022f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f6:	d04c      	beq.n	8002392 <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <_ZN10IridiumSBD5powerEb+0x48>
          {
        	  //TODO
             configureSleepPin();
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f84e 	bl	80023a4 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
          }
      }
   }

   if (on)
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d018      	beq.n	8002348 <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 8002316:	4921      	ldr	r1, [pc, #132]	; (800239c <_ZN10IridiumSBD5powerEb+0xd4>)
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f945 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 8002328:	2101      	movs	r1, #1
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f850 	bl	80023d0 <_ZN10IridiumSBD11setSleepPinEh>
 8002330:	e003      	b.n	800233a <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 8002332:	2101      	movs	r1, #1
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff fcb7 	bl	8001ca8 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 800233a:	f001 fc63 	bl	8003c04 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8002346:	e025      	b.n	8002394 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8002348:	f001 fc5c 	bl	8003c04 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800235e:	d205      	bcs.n	800236c <_ZN10IridiumSBD5powerEb+0xa4>
         HAL_Delay(2000UL - elapsed);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8002366:	4618      	mov	r0, r3
 8002368:	f001 fc58 	bl	8003c1c <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 800236c:	490c      	ldr	r1, [pc, #48]	; (80023a0 <_ZN10IridiumSBD5powerEb+0xd8>)
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f91a 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 800237e:	2100      	movs	r1, #0
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f825 	bl	80023d0 <_ZN10IridiumSBD11setSleepPinEh>
 8002386:	e005      	b.n	8002394 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 8002388:	2100      	movs	r1, #0
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff fc8c 	bl	8001ca8 <_ZN10IridiumSBD10enable9603Eb>
 8002390:	e000      	b.n	8002394 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8002392:	bf00      	nop
      }
   }
}
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	0800a7ac 	.word	0x0800a7ac
 80023a0:	0800a7c4 	.word	0x0800a7c4

080023a4 <_ZN10IridiumSBD17configureSleepPinEv>:


void IridiumSBD::configureSleepPin()
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
   //pinMode(this->sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
	pinMode(sleepPin, OUTPUT_PP);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2108      	movs	r1, #8
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <_ZN10IridiumSBD17configureSleepPinEv+0x24>)
 80023b2:	f000 fe67 	bl	8003084 <_Z10st_pinModeP12GPIO_TypeDefhi>
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 80023b6:	4905      	ldr	r1, [pc, #20]	; (80023cc <_ZN10IridiumSBD17configureSleepPinEv+0x28>)
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f8f5 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40020800 	.word	0x40020800
 80023cc:	0800a7dc 	.word	0x0800a7dc

080023d0 <_ZN10IridiumSBD11setSleepPinEh>:


void IridiumSBD::setSleepPin(uint8_t enable)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 80023dc:	2201      	movs	r2, #1
 80023de:	2108      	movs	r1, #8
 80023e0:	480b      	ldr	r0, [pc, #44]	; (8002410 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 80023e2:	f001 feff 	bl	80041e4 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 80023e6:	490b      	ldr	r1, [pc, #44]	; (8002414 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f8dd 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d104      	bne.n	80023fe <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 80023f4:	4908      	ldr	r1, [pc, #32]	; (8002418 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8d6 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 80023fc:	e003      	b.n	8002406 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 80023fe:	4907      	ldr	r1, [pc, #28]	; (800241c <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f8d1 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40020800 	.word	0x40020800
 8002414:	0800a808 	.word	0x0800a808
 8002418:	0800a824 	.word	0x0800a824
 800241c:	0800a82c 	.word	0x0800a82c

08002420 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 8002428:	4903      	ldr	r1, [pc, #12]	; (8002438 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f8bc 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	0800a834 	.word	0x0800a834

0800243c <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8002444:	4903      	ldr	r1, [pc, #12]	; (8002454 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f8ae 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	0800a854 	.word	0x0800a854

08002458 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	4611      	mov	r1, r2
 8002464:	461a      	mov	r2, r3
 8002466:	460b      	mov	r3, r1
 8002468:	71fb      	strb	r3, [r7, #7]
 800246a:	4613      	mov	r3, r2
 800246c:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 8002474:	4922      	ldr	r1, [pc, #136]	; (8002500 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8de 	bl	8002638 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f8da 	bl	8002638 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 8002484:	79bb      	ldrb	r3, [r7, #6]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 800248a:	491e      	ldr	r1, [pc, #120]	; (8002504 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f8d3 	bl	8002638 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002498:	2b00      	cmp	r3, #0
 800249a:	d006      	beq.n	80024aa <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x52>
   {
      stream->print(str);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fe61 	bl	800316a <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80024a8:	e025      	b.n	80024f6 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80024b4:	4619      	mov	r1, r3
 80024b6:	4610      	mov	r0, r2
 80024b8:	f000 ff24 	bl	8003304 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c0:	21ff      	movs	r1, #255	; 0xff
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fa03 	bl	80018ce <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fe4b 	bl	800316a <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 ff5d 	bl	8003398 <_ZN7TwoWire15endTransmissionEv>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf14      	ite	ne
 80024e4:	2301      	movne	r3, #1
 80024e6:	2300      	moveq	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
         diagprint(F("I2C write was not successful!\r\n"));
 80024ee:	4906      	ldr	r1, [pc, #24]	; (8002508 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 f859 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	0800a870 	.word	0x0800a870
 8002504:	0800a5b4 	.word	0x0800a5b4
 8002508:	0800a634 	.word	0x0800a634

0800250c <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8002516:	4921      	ldr	r1, [pc, #132]	; (800259c <_ZN10IridiumSBD4sendEPKc+0x90>)
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f88d 	bl	8002638 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 800251e:	6839      	ldr	r1, [r7, #0]
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f8af 	bl	8002684 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8002526:	491e      	ldr	r1, [pc, #120]	; (80025a0 <_ZN10IridiumSBD4sendEPKc+0x94>)
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f885 	bl	8002638 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <_ZN10IridiumSBD4sendEPKc+0x3a>
   {
      stream->print(str);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	6839      	ldr	r1, [r7, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fe21 	bl	8003186 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8002544:	e025      	b.n	8002592 <_ZN10IridiumSBD4sendEPKc+0x86>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f000 fed6 	bl	8003304 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255c:	21ff      	movs	r1, #255	; 0xff
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff f9b5 	bl	80018ce <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fe0b 	bl	8003186 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	4618      	mov	r0, r3
 8002576:	f000 ff0f 	bl	8003398 <_ZN7TwoWire15endTransmissionEv>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <_ZN10IridiumSBD4sendEPKc+0x86>
         diagprint(F("I2C write was not successful!\r\n"));
 800258a:	4906      	ldr	r1, [pc, #24]	; (80025a4 <_ZN10IridiumSBD4sendEPKc+0x98>)
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f80b 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	0800a870 	.word	0x0800a870
 80025a0:	0800a5b4 	.word	0x0800a5b4
 80025a4:	0800a634 	.word	0x0800a634

080025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	60fa      	str	r2, [r7, #12]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 80025c6:	7afb      	ldrb	r3, [r7, #11]
 80025c8:	4619      	mov	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff f9a5 	bl	800191a <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 80025d0:	e7f1      	b.n	80025b6 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80025d2:	bf00      	nop
   /*
    * TODO diagprint should now print to serial
    */
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((char*) str), HAL_MAX_DELAY);
 80025d4:	687c      	ldr	r4, [r7, #4]
 80025d6:	6838      	ldr	r0, [r7, #0]
 80025d8:	f7fd fe24 	bl	8000224 <strlen>
 80025dc:	4603      	mov	r3, r0
 80025de:	b29a      	uxth	r2, r3
 80025e0:	f04f 33ff 	mov.w	r3, #4294967295
 80025e4:	6839      	ldr	r1, [r7, #0]
 80025e6:	4620      	mov	r0, r4
 80025e8:	f003 f827 	bl	800563a <HAL_UART_Transmit>
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd90      	pop	{r4, r7, pc}

080025f4 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
   while (*str)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	603a      	str	r2, [r7, #0]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff f982 	bl	800191a <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 8002616:	e7f2      	b.n	80025fe <_ZN10IridiumSBD9diagprintEPKc+0xa>
   /*
    * TODO diagprint should now print to serial
    */
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((char*) str), HAL_MAX_DELAY);
 8002618:	687c      	ldr	r4, [r7, #4]
 800261a:	6838      	ldr	r0, [r7, #0]
 800261c:	f7fd fe02 	bl	8000224 <strlen>
 8002620:	4603      	mov	r3, r0
 8002622:	b29a      	uxth	r2, r3
 8002624:	f04f 33ff 	mov.w	r3, #4294967295
 8002628:	6839      	ldr	r1, [r7, #0]
 800262a:	4620      	mov	r0, r4
 800262c:	f003 f805 	bl	800563a <HAL_UART_Transmit>
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	bd90      	pop	{r4, r7, pc}

08002638 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   sprintf(str, "%u", n);
   diagprint(str);
}

void IridiumSBD::consoleprint(FlashString str)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	60fa      	str	r2, [r7, #12]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8002650:	7afb      	ldrb	r3, [r7, #11]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 8002656:	7afb      	ldrb	r3, [r7, #11]
 8002658:	4619      	mov	r1, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff f951 	bl	8001902 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 8002660:	e7f1      	b.n	8002646 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8002662:	bf00      	nop
   /*
    * TODO consoleprint should now print to serial
    */
    HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((char*) str), HAL_MAX_DELAY);
 8002664:	687c      	ldr	r4, [r7, #4]
 8002666:	6838      	ldr	r0, [r7, #0]
 8002668:	f7fd fddc 	bl	8000224 <strlen>
 800266c:	4603      	mov	r3, r0
 800266e:	b29a      	uxth	r2, r3
 8002670:	f04f 33ff 	mov.w	r3, #4294967295
 8002674:	6839      	ldr	r1, [r7, #0]
 8002676:	4620      	mov	r0, r4
 8002678:	f002 ffdf 	bl	800563a <HAL_UART_Transmit>
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bd90      	pop	{r4, r7, pc}

08002684 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
   while (*str)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d008      	beq.n	80026a8 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	1c5a      	adds	r2, r3, #1
 800269a:	603a      	str	r2, [r7, #0]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff f92e 	bl	8001902 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 80026a6:	e7f2      	b.n	800268e <_ZN10IridiumSBD12consoleprintEPKc+0xa>
   /*
    * TODO consoleprint should now print to serial
    */
    HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((char*) str), HAL_MAX_DELAY);
 80026a8:	687c      	ldr	r4, [r7, #4]
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	f7fd fdba 	bl	8000224 <strlen>
 80026b0:	4603      	mov	r3, r0
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295
 80026b8:	6839      	ldr	r1, [r7, #0]
 80026ba:	4620      	mov	r0, r4
 80026bc:	f002 ffbd 	bl	800563a <HAL_UART_Transmit>
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd90      	pop	{r4, r7, pc}

080026c8 <_ZN10IridiumSBD12consoleprintEc>:
   sprintf(str, "%u", n);
   consoleprint(str);
}

void IridiumSBD::consoleprint(char c)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 80026d4:	78fb      	ldrb	r3, [r7, #3]
 80026d6:	4619      	mov	r1, r3
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff f912 	bl	8001902 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   /*
    * TODO consoleprint should now print to serial
    */
    HAL_UART_Transmit(&(this->uart),(uint8_t*) c, sizeof(char), HAL_MAX_DELAY);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	4619      	mov	r1, r3
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	2201      	movs	r2, #1
 80026ea:	f002 ffa6 	bl	800563a <HAL_UART_Transmit>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
   diagprint(F("SBDRING alert seen!\r\n"));
 8002708:	4903      	ldr	r1, [pc, #12]	; (8002718 <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff ff4c 	bl	80025a8 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	0800a878 	.word	0x0800a878

0800271c <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800272a:	f083 0301 	eor.w	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f949 	bl	80029cc <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00b      	beq.n	800275c <_ZN10IridiumSBD13filterSBDRINGEv+0x40>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	3308      	adds	r3, #8
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4610      	mov	r0, r2
 8002754:	4798      	blx	r3
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	dc0d      	bgt.n	8002778 <_ZN10IridiumSBD13filterSBDRINGEv+0x5c>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002762:	f083 0301 	eor.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00d      	beq.n	8002788 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fa67 	bl	8002c40 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	dd07      	ble.n	8002788 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002782:	d101      	bne.n	8002788 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <_ZN10IridiumSBD13filterSBDRINGEv+0x6e>
 8002788:	2300      	movs	r3, #0
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80b6 	beq.w	80028fc <_ZN10IridiumSBD13filterSBDRINGEv+0x1e0>
   {
      char c;
      if (this->useSerial)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <_ZN10IridiumSBD13filterSBDRINGEv+0x96>
      {
         c = stream->read();
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4610      	mov	r0, r2
 80027aa:	4798      	blx	r3
 80027ac:	4603      	mov	r3, r0
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	e004      	b.n	80027bc <_ZN10IridiumSBD13filterSBDRINGEv+0xa0>
      }
      else
      {
         c = i2cSerRead();
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fa5e 	bl	8002c74 <_ZN10IridiumSBD10i2cSerReadEv>
 80027b8:	4603      	mov	r3, r0
 80027ba:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	4619      	mov	r1, r3
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff81 	bl	80026c8 <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 808d 	beq.w	80028ee <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	429a      	cmp	r2, r3
 80027e0:	f040 8085 	bne.w	80028ee <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
      {
         ++head;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
         if (*head == 0)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10d      	bne.n	800281a <_ZN10IridiumSBD13filterSBDRINGEv+0xfe>
         {
            SBDRINGSeen();
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ff7a 	bl	80026f8 <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a3f      	ldr	r2, [pc, #252]	; (8002904 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e8>)
 8002808:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 8002818:	e06e      	b.n	80028f8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 800281a:	f001 f9f3 	bl	8003c04 <HAL_GetTick>
 800281e:	60b8      	str	r0, [r7, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00b      	beq.n	8002842 <_ZN10IridiumSBD13filterSBDRINGEv+0x126>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3308      	adds	r3, #8
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4610      	mov	r0, r2
 800283a:	4798      	blx	r3
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00d      	beq.n	800285e <_ZN10IridiumSBD13filterSBDRINGEv+0x142>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002848:	f083 0301 	eor.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00e      	beq.n	8002870 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f9f4 	bl	8002c40 <_ZN10IridiumSBD15i2cSerAvailableEv>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d108      	bne.n	8002870 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 800285e:	f001 f9d1 	bl	8003c04 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b09      	cmp	r3, #9
 800286a:	d801      	bhi.n	8002870 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <_ZN10IridiumSBD13filterSBDRINGEv+0x156>
 8002870:	2300      	movs	r3, #0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d000      	beq.n	8002878 <_ZN10IridiumSBD13filterSBDRINGEv+0x15c>
 8002876:	e7d3      	b.n	8002820 <_ZN10IridiumSBD13filterSBDRINGEv+0x104>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800287e:	f083 0301 	eor.w	r3, r3, #1
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <_ZN10IridiumSBD13filterSBDRINGEv+0x172>
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f89f 	bl	80029cc <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <_ZN10IridiumSBD13filterSBDRINGEv+0x194>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3308      	adds	r3, #8
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4610      	mov	r0, r2
 80028a8:	4798      	blx	r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00d      	beq.n	80028cc <_ZN10IridiumSBD13filterSBDRINGEv+0x1b0>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80028b6:	f083 0301 	eor.w	r3, r3, #1
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f9bd 	bl	8002c40 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b6>
 80028d0:	2300      	movs	r3, #0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d010      	beq.n	80028f8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
               --head;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80028dc:	1e5a      	subs	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
               nextChar = c;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
         }
 80028ec:	e004      	b.n	80028f8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
      }
      else
      {
         nextChar = c;
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80028f6:	e720      	b.n	800273a <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
         }
 80028f8:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 80028fa:	e71e      	b.n	800273a <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
      }
   }
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	0800ab6c 	.word	0x0800ab6c

08002908 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff ff03 	bl	800271c <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 800292a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800292e:	d001      	beq.n	8002934 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8002930:	2201      	movs	r2, #1
 8002932:	e000      	b.n	8002936 <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8002934:	2200      	movs	r2, #0
 8002936:	4413      	add	r3, r2
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fee7 	bl	800271c <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800295a:	429a      	cmp	r2, r3
 800295c:	d91c      	bls.n	8002998 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002964:	1c59      	adds	r1, r3, #1
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	f8c2 10d0 	str.w	r1, [r2, #208]	; 0xd0
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800297c:	429a      	cmp	r2, r3
 800297e:	d109      	bne.n	8002994 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a11      	ldr	r2, [pc, #68]	; (80029c8 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 8002984:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      return c;
 8002994:	7bbb      	ldrb	r3, [r7, #14]
 8002996:	e012      	b.n	80029be <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a2:	d00a      	beq.n	80029ba <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80029aa:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f04f 32ff 	mov.w	r2, #4294967295
 80029b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      return c;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	e001      	b.n	80029be <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	0800ab6c 	.word	0x0800ab6c

080029cc <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 80029d4:	f001 f916 	bl	8003c04 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	f892 20ac 	ldrb.w	r2, [r2, #172]	; 0xac
 80029e8:	4293      	cmp	r3, r2
 80029ea:	bf2c      	ite	cs
 80029ec:	2301      	movcs	r3, #1
 80029ee:	2300      	movcc	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 80be 	beq.w	8002b74 <_ZN10IridiumSBD13check9603dataEv+0x1a8>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f000 fc7b 	bl	8003304 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	21fd      	movs	r1, #253	; 0xfd
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7fe ff5a 	bl	80018ce <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fcba 	bl	8003398 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002a2e:	2202      	movs	r2, #2
 8002a30:	4619      	mov	r1, r3
 8002a32:	f000 fc54 	bl	80032de <_ZN7TwoWire11requestFromEhh>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01d      	beq.n	8002a82 <_ZN10IridiumSBD13check9603dataEv+0xb6>
    {
      uint8_t msb = wireport->read();
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4610      	mov	r0, r2
 8002a56:	4798      	blx	r3
 8002a58:	4603      	mov	r3, r0
 8002a5a:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	330c      	adds	r3, #12
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4798      	blx	r3
 8002a6e:	4603      	mov	r3, r0
 8002a70:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 8002a72:	7b7b      	ldrb	r3, [r7, #13]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	b21a      	sxth	r2, r3
 8002a78:	7b3b      	ldrb	r3, [r7, #12]
 8002a7a:	b21b      	sxth	r3, r3
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	b21b      	sxth	r3, r3
 8002a80:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 8002a82:	89fb      	ldrh	r3, [r7, #14]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d06f      	beq.n	8002b68 <_ZN10IridiumSBD13check9603dataEv+0x19c>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002a92:	4619      	mov	r1, r3
 8002a94:	4610      	mov	r0, r2
 8002a96:	f000 fc35 	bl	8003304 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9e:	21ff      	movs	r1, #255	; 0xff
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe ff14 	bl	80018ce <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 fc74 	bl	8003398 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8002ab0:	89fb      	ldrh	r3, [r7, #14]
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d92d      	bls.n	8002b12 <_ZN10IridiumSBD13check9603dataEv+0x146>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	f000 fbd0 	bl	8003268 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4798      	blx	r3
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00f      	beq.n	8002b0a <_ZN10IridiumSBD13check9603dataEv+0x13e>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	330c      	adds	r3, #12
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4610      	mov	r0, r2
 8002afa:	4798      	blx	r3
 8002afc:	4603      	mov	r3, r0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f8e2 	bl	8002ccc <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8002b08:	e7de      	b.n	8002ac8 <_ZN10IridiumSBD13check9603dataEv+0xfc>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8002b0a:	89fb      	ldrh	r3, [r7, #14]
 8002b0c:	3b08      	subs	r3, #8
 8002b0e:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8002b10:	e7ce      	b.n	8002ab0 <_ZN10IridiumSBD13check9603dataEv+0xe4>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002b1c:	89fa      	ldrh	r2, [r7, #14]
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f000 fbdc 	bl	80032de <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3308      	adds	r3, #8
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4610      	mov	r0, r2
 8002b36:	4798      	blx	r3
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00f      	beq.n	8002b68 <_ZN10IridiumSBD13check9603dataEv+0x19c>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	330c      	adds	r3, #12
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4610      	mov	r0, r2
 8002b58:	4798      	blx	r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f8b3 	bl	8002ccc <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8002b66:	e7de      	b.n	8002b26 <_ZN10IridiumSBD13check9603dataEv+0x15a>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8002b68:	f001 f84c 	bl	8003c04 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4610      	mov	r0, r2
 8002b92:	f000 fbb7 	bl	8003304 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9a:	2110      	movs	r1, #16
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fe96 	bl	80018ce <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fbf6 	bl	8003398 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f000 fb90 	bl	80032de <_ZN7TwoWire11requestFromEhh>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00d      	beq.n	8002bea <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4798      	blx	r3
 8002be0:	4603      	mov	r3, r0
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
  }
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f000 fb7a 	bl	8003304 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c14:	2110      	movs	r1, #16
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fe59 	bl	80018ce <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	78f9      	ldrb	r1, [r7, #3]
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fbb0 	bl	8003398 <_ZN7TwoWire15endTransmissionEv>
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c4e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	425a      	negs	r2, r3
 8002c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c60:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002c64:	bf58      	it	pl
 8002c66:	4253      	negpl	r3, r2
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d102      	bne.n	8002c92 <_ZN10IridiumSBD10i2cSerReadEv+0x1e>
    return -1;
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c90:	e016      	b.n	8002cc0 <_ZN10IridiumSBD10i2cSerReadEv+0x4c>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002ca0:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca8:	3301      	adds	r3, #1
 8002caa:	425a      	negs	r2, r3
 8002cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cb0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002cb4:	bf58      	it	pl
 8002cb6:	4253      	negpl	r3, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  return d;
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	3301      	adds	r3, #1
 8002ce0:	425a      	negs	r2, r3
 8002ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002cea:	bf58      	it	pl
 8002cec:	4253      	negpl	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d00b      	beq.n	8002d14 <_ZN10IridiumSBD10i2cSerPokeEc+0x48>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    i2c_ser_buffer_tail = next;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef>:


/*
 * TODO HOMEMADE FUNCTIONS BELOW
 */
uint8_t IridiumSBD::setup(UART_HandleTypeDef huart){
 8002d20:	b084      	sub	sp, #16
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	f107 001c 	add.w	r0, r7, #28
 8002d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->uart = huart;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f107 031c 	add.w	r3, r7, #28
 8002d3a:	2244      	movs	r2, #68	; 0x44
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	f003 f8b7 	bl	8005eb0 <memcpy>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nChecking for the device...", 30, HAL_MAX_DELAY);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
 8002d48:	221e      	movs	r2, #30
 8002d4a:	4965      	ldr	r1, [pc, #404]	; (8002ee0 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1c0>)
 8002d4c:	f002 fc75 	bl	800563a <HAL_UART_Transmit>
	while(!this->isConnected()){
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff f819 	bl	8001d88 <_ZN10IridiumSBD11isConnectedEv>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d02c      	beq.n	8002dc0 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0xa0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6c:	2235      	movs	r2, #53	; 0x35
 8002d6e:	495d      	ldr	r1, [pc, #372]	; (8002ee4 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1c4>)
 8002d70:	f002 fc63 	bl	800563a <HAL_UART_Transmit>
		HAL_Delay(500);
 8002d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d78:	f000 ff50 	bl	8003c1c <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	2203      	movs	r2, #3
 8002d84:	4958      	ldr	r1, [pc, #352]	; (8002ee8 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1c8>)
 8002d86:	f002 fc58 	bl	800563a <HAL_UART_Transmit>
		HAL_Delay(1000);
 8002d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d8e:	f000 ff45 	bl	8003c1c <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f04f 33ff 	mov.w	r3, #4294967295
 8002d98:	2203      	movs	r2, #3
 8002d9a:	4954      	ldr	r1, [pc, #336]	; (8002eec <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1cc>)
 8002d9c:	f002 fc4d 	bl	800563a <HAL_UART_Transmit>
		HAL_Delay(1000);
 8002da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002da4:	f000 ff3a 	bl	8003c1c <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	2207      	movs	r2, #7
 8002db0:	494f      	ldr	r1, [pc, #316]	; (8002ef0 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1d0>)
 8002db2:	f002 fc42 	bl	800563a <HAL_UART_Transmit>
		HAL_Delay(1000);
 8002db6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dba:	f000 ff2f 	bl	8003c1c <HAL_Delay>
	while(!this->isConnected()){
 8002dbe:	e7c7      	b.n	8002d50 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x30>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Done\r\n", 8, HAL_MAX_DELAY);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	494a      	ldr	r1, [pc, #296]	; (8002ef4 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1d4>)
 8002dca:	f002 fc36 	bl	800563a <HAL_UART_Transmit>
		HAL_Delay(1000);
	}
	HAL_UART_Transmit(&huart3,(uint8_t*) "The device was found!\n\r", 25, HAL_MAX_DELAY);
	*/
	//Activate the superchargers
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd4:	221f      	movs	r2, #31
 8002dd6:	4948      	ldr	r1, [pc, #288]	; (8002ef8 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1d8>)
 8002dd8:	f002 fc2f 	bl	800563a <HAL_UART_Transmit>
	this->enableSuperCapCharger(true);
 8002ddc:	2101      	movs	r1, #1
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7fe feb6 	bl	8001b50 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Done\r\n", 8, HAL_MAX_DELAY);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dea:	2208      	movs	r2, #8
 8002dec:	4941      	ldr	r1, [pc, #260]	; (8002ef4 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1d4>)
 8002dee:	f002 fc24 	bl	800563a <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	while (!this->checkSuperCapCharger()){
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe feea 	bl	8001bcc <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d021      	beq.n	8002e48 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x128>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\rWaiting for the supercapacitors to charge.  \r", 48, HAL_MAX_DELAY);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0a:	2230      	movs	r2, #48	; 0x30
 8002e0c:	493b      	ldr	r1, [pc, #236]	; (8002efc <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1dc>)
 8002e0e:	f002 fc14 	bl	800563a <HAL_UART_Transmit>
		HAL_Delay(333);
 8002e12:	f240 104d 	movw	r0, #333	; 0x14d
 8002e16:	f000 ff01 	bl	8003c1c <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge.. \r", 46, HAL_MAX_DELAY);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e20:	222e      	movs	r2, #46	; 0x2e
 8002e22:	4937      	ldr	r1, [pc, #220]	; (8002f00 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1e0>)
 8002e24:	f002 fc09 	bl	800563a <HAL_UART_Transmit>
		HAL_Delay(333);
 8002e28:	f240 104d 	movw	r0, #333	; 0x14d
 8002e2c:	f000 fef6 	bl	8003c1c <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	222c      	movs	r2, #44	; 0x2c
 8002e38:	4932      	ldr	r1, [pc, #200]	; (8002f04 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1e4>)
 8002e3a:	f002 fbfe 	bl	800563a <HAL_UART_Transmit>
		HAL_Delay(333);
 8002e3e:	f240 104d 	movw	r0, #333	; 0x14d
 8002e42:	f000 feeb 	bl	8003c1c <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8002e46:	e7d4      	b.n	8002df2 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0xd2>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Done\r\n", 8, HAL_MAX_DELAY);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	2208      	movs	r2, #8
 8002e50:	4928      	ldr	r1, [pc, #160]	; (8002ef4 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1d4>)
 8002e52:	f002 fbf2 	bl	800563a <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5c:	2217      	movs	r2, #23
 8002e5e:	492a      	ldr	r1, [pc, #168]	; (8002f08 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1e8>)
 8002e60:	f002 fbeb 	bl	800563a <HAL_UART_Transmit>
	this->enable9603Npower(true);
 8002e64:	2101      	movs	r1, #1
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe fee0 	bl	8001c2c <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Done\r\n", 8, HAL_MAX_DELAY);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e72:	2208      	movs	r2, #8
 8002e74:	491f      	ldr	r1, [pc, #124]	; (8002ef4 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1d4>)
 8002e76:	f002 fbe0 	bl	800563a <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e80:	2211      	movs	r2, #17
 8002e82:	4922      	ldr	r1, [pc, #136]	; (8002f0c <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1ec>)
 8002e84:	f002 fbd9 	bl	800563a <HAL_UART_Transmit>
	int err = this->begin();
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7fe fd52 	bl	8001932 <_ZN10IridiumSBD5beginEv>
 8002e8e:	60f8      	str	r0, [r7, #12]
	if (err != ISBD_SUCCESS)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d015      	beq.n	8002ec2 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1a2>
	  {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	491c      	ldr	r1, [pc, #112]	; (8002f10 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1f0>)
 8002ea0:	f002 fbcb 	bl	800563a <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) err, 4, HAL_MAX_DELAY);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	68f9      	ldr	r1, [r7, #12]
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8002eac:	2204      	movs	r2, #4
 8002eae:	f002 fbc4 	bl	800563a <HAL_UART_Transmit>
		this->iridiumErrorMessage(err);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f82b 	bl	8002f14 <_ZN10IridiumSBD19iridiumErrorMessageEh>

	    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e007      	b.n	8002ed2 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1b2>
	  }
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Done\r\n", 8, HAL_MAX_DELAY);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec8:	2208      	movs	r2, #8
 8002eca:	490a      	ldr	r1, [pc, #40]	; (8002ef4 <_ZN10IridiumSBD5setupE20__UART_HandleTypeDef+0x1d4>)
 8002ecc:	f002 fbb5 	bl	800563a <HAL_UART_Transmit>

	return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002edc:	b004      	add	sp, #16
 8002ede:	4770      	bx	lr
 8002ee0:	0800a8f8 	.word	0x0800a8f8
 8002ee4:	0800a918 	.word	0x0800a918
 8002ee8:	0800a94c 	.word	0x0800a94c
 8002eec:	0800a950 	.word	0x0800a950
 8002ef0:	0800a954 	.word	0x0800a954
 8002ef4:	0800a95c 	.word	0x0800a95c
 8002ef8:	0800a964 	.word	0x0800a964
 8002efc:	0800a984 	.word	0x0800a984
 8002f00:	0800a9b4 	.word	0x0800a9b4
 8002f04:	0800a9e4 	.word	0x0800a9e4
 8002f08:	0800aa14 	.word	0x0800aa14
 8002f0c:	0800aa2c 	.word	0x0800aa2c
 8002f10:	0800aa40 	.word	0x0800aa40

08002f14 <_ZN10IridiumSBD19iridiumErrorMessageEh>:

void IridiumSBD::iridiumErrorMessage(uint8_t error){
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	220c      	movs	r2, #12
 8002f28:	4948      	ldr	r1, [pc, #288]	; (800304c <_ZN10IridiumSBD19iridiumErrorMessageEh+0x138>)
 8002f2a:	f002 fb86 	bl	800563a <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d107      	bne.n	8002f44 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x30>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3a:	2211      	movs	r2, #17
 8002f3c:	4944      	ldr	r1, [pc, #272]	; (8003050 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x13c>)
 8002f3e:	f002 fb7c 	bl	800563a <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
	}
	else{
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
	}
}
 8002f42:	e07f      	b.n	8003044 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x130>
	else if (error == ISBD_SERIAL_FAILURE){
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d107      	bne.n	8002f5a <_ZN10IridiumSBD19iridiumErrorMessageEh+0x46>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f50:	2212      	movs	r2, #18
 8002f52:	4940      	ldr	r1, [pc, #256]	; (8003054 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x140>)
 8002f54:	f002 fb71 	bl	800563a <HAL_UART_Transmit>
}
 8002f58:	e074      	b.n	8003044 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x130>
	else if (error == ISBD_PROTOCOL_ERROR){
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	2b03      	cmp	r3, #3
 8002f5e:	d107      	bne.n	8002f70 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x5c>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295
 8002f66:	2212      	movs	r2, #18
 8002f68:	493b      	ldr	r1, [pc, #236]	; (8003058 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x144>)
 8002f6a:	f002 fb66 	bl	800563a <HAL_UART_Transmit>
}
 8002f6e:	e069      	b.n	8003044 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x130>
	else if (error == ISBD_CANCELLED){
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d107      	bne.n	8002f86 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x72>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7c:	220d      	movs	r2, #13
 8002f7e:	4937      	ldr	r1, [pc, #220]	; (800305c <_ZN10IridiumSBD19iridiumErrorMessageEh+0x148>)
 8002f80:	f002 fb5b 	bl	800563a <HAL_UART_Transmit>
}
 8002f84:	e05e      	b.n	8003044 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x130>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	2b05      	cmp	r3, #5
 8002f8a:	d107      	bne.n	8002f9c <_ZN10IridiumSBD19iridiumErrorMessageEh+0x88>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	2224      	movs	r2, #36	; 0x24
 8002f94:	4932      	ldr	r1, [pc, #200]	; (8003060 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x14c>)
 8002f96:	f002 fb50 	bl	800563a <HAL_UART_Transmit>
}
 8002f9a:	e053      	b.n	8003044 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x130>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d107      	bne.n	8002fb2 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x9e>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa8:	2215      	movs	r2, #21
 8002faa:	492e      	ldr	r1, [pc, #184]	; (8003064 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x150>)
 8002fac:	f002 fb45 	bl	800563a <HAL_UART_Transmit>
}
 8002fb0:	e048      	b.n	8003044 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x130>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	2b07      	cmp	r3, #7
 8002fb6:	d107      	bne.n	8002fc8 <_ZN10IridiumSBD19iridiumErrorMessageEh+0xb4>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbe:	2218      	movs	r2, #24
 8002fc0:	4929      	ldr	r1, [pc, #164]	; (8003068 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x154>)
 8002fc2:	f002 fb3a 	bl	800563a <HAL_UART_Transmit>
}
 8002fc6:	e03d      	b.n	8003044 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x130>
	else if (error == ISBD_RX_OVERFLOW){
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d107      	bne.n	8002fde <_ZN10IridiumSBD19iridiumErrorMessageEh+0xca>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd4:	220f      	movs	r2, #15
 8002fd6:	4925      	ldr	r1, [pc, #148]	; (800306c <_ZN10IridiumSBD19iridiumErrorMessageEh+0x158>)
 8002fd8:	f002 fb2f 	bl	800563a <HAL_UART_Transmit>
}
 8002fdc:	e032      	b.n	8003044 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x130>
	else if (error == ISBD_REENTRANT){
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	2b09      	cmp	r3, #9
 8002fe2:	d107      	bne.n	8002ff4 <_ZN10IridiumSBD19iridiumErrorMessageEh+0xe0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	220d      	movs	r2, #13
 8002fec:	4920      	ldr	r1, [pc, #128]	; (8003070 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x15c>)
 8002fee:	f002 fb24 	bl	800563a <HAL_UART_Transmit>
}
 8002ff2:	e027      	b.n	8003044 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x130>
	else if (error == ISBD_IS_ASLEEP){
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	2b0a      	cmp	r3, #10
 8002ff8:	d107      	bne.n	800300a <_ZN10IridiumSBD19iridiumErrorMessageEh+0xf6>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8003000:	220d      	movs	r2, #13
 8003002:	491c      	ldr	r1, [pc, #112]	; (8003074 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x160>)
 8003004:	f002 fb19 	bl	800563a <HAL_UART_Transmit>
}
 8003008:	e01c      	b.n	8003044 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x130>
	else if (error == ISBD_NO_SLEEP_PIN){
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	2b0b      	cmp	r3, #11
 800300e:	d107      	bne.n	8003020 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x10c>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f04f 33ff 	mov.w	r3, #4294967295
 8003016:	2210      	movs	r2, #16
 8003018:	4917      	ldr	r1, [pc, #92]	; (8003078 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x164>)
 800301a:	f002 fb0e 	bl	800563a <HAL_UART_Transmit>
}
 800301e:	e011      	b.n	8003044 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x130>
	else if(error == 20){
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	2b14      	cmp	r3, #20
 8003024:	d107      	bne.n	8003036 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x122>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f04f 33ff 	mov.w	r3, #4294967295
 800302c:	2216      	movs	r2, #22
 800302e:	4913      	ldr	r1, [pc, #76]	; (800307c <_ZN10IridiumSBD19iridiumErrorMessageEh+0x168>)
 8003030:	f002 fb03 	bl	800563a <HAL_UART_Transmit>
}
 8003034:	e006      	b.n	8003044 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x130>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f04f 33ff 	mov.w	r3, #4294967295
 800303c:	220b      	movs	r2, #11
 800303e:	4910      	ldr	r1, [pc, #64]	; (8003080 <_ZN10IridiumSBD19iridiumErrorMessageEh+0x16c>)
 8003040:	f002 fafb 	bl	800563a <HAL_UART_Transmit>
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	0800aa4c 	.word	0x0800aa4c
 8003050:	0800aa58 	.word	0x0800aa58
 8003054:	0800aa68 	.word	0x0800aa68
 8003058:	0800aa7c 	.word	0x0800aa7c
 800305c:	0800aa90 	.word	0x0800aa90
 8003060:	0800aa9c 	.word	0x0800aa9c
 8003064:	0800aac0 	.word	0x0800aac0
 8003068:	0800aad4 	.word	0x0800aad4
 800306c:	0800aaec 	.word	0x0800aaec
 8003070:	0800aafc 	.word	0x0800aafc
 8003074:	0800ab08 	.word	0x0800ab08
 8003078:	0800ab14 	.word	0x0800ab14
 800307c:	0800ab24 	.word	0x0800ab24
 8003080:	0800ab3c 	.word	0x0800ab3c

08003084 <_Z10st_pinModeP12GPIO_TypeDefhi>:


//Define a version of pinMode for st to convert arduino's pinMode with macro
void st_pinMode(GPIO_TypeDef* PIN_NAME_GPIO_Port,uint8_t PIN_NAME_Pin,int i){
 8003084:	b580      	push	{r7, lr}
 8003086:	b08a      	sub	sp, #40	; 0x28
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	460b      	mov	r3, r1
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	72fb      	strb	r3, [r7, #11]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	60da      	str	r2, [r3, #12]
 80030a0:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pin Output Level */
	if (i==1){
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d106      	bne.n	80030b6 <_Z10st_pinModeP12GPIO_TypeDefhi+0x32>
		HAL_GPIO_WritePin(PIN_NAME_GPIO_Port, PIN_NAME_Pin, GPIO_PIN_RESET);
 80030a8:	7afb      	ldrb	r3, [r7, #11]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2200      	movs	r2, #0
 80030ae:	4619      	mov	r1, r3
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f001 f897 	bl	80041e4 <HAL_GPIO_WritePin>
	}
	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = PIN_NAME_Pin;
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	617b      	str	r3, [r7, #20]
	if (i==1) {
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d102      	bne.n	80030c6 <_Z10st_pinModeP12GPIO_TypeDefhi+0x42>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030c0:	2301      	movs	r3, #1
 80030c2:	61bb      	str	r3, [r7, #24]
 80030c4:	e001      	b.n	80030ca <_Z10st_pinModeP12GPIO_TypeDefhi+0x46>
	}
	else{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
	}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(PIN_NAME_GPIO_Port, &GPIO_InitStruct);
 80030d2:	f107 0314 	add.w	r3, r7, #20
 80030d6:	4619      	mov	r1, r3
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fed7 	bl	8003e8c <HAL_GPIO_Init>
}
 80030de:	bf00      	nop
 80030e0:	3728      	adds	r7, #40	; 0x28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80030e6:	b590      	push	{r4, r7, lr}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <_ZN5Print5writeEPKc+0x14>
 80030f6:	2300      	movs	r3, #0
 80030f8:	e00d      	b.n	8003116 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3304      	adds	r3, #4
 8003100:	681c      	ldr	r4, [r3, #0]
 8003102:	6838      	ldr	r0, [r7, #0]
 8003104:	f7fd f88e 	bl	8000224 <strlen>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	6839      	ldr	r1, [r7, #0]
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	47a0      	blx	r4
 8003112:	4603      	mov	r3, r0
 8003114:	bf00      	nop
    }
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	bd90      	pop	{r4, r7, pc}

0800311e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b086      	sub	sp, #24
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
  while (size--) {
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	1e5a      	subs	r2, r3, #1
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00e      	beq.n	8003160 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	1c59      	adds	r1, r3, #1
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	4619      	mov	r1, r3
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	4790      	blx	r2
 8003156:	4602      	mov	r2, r0
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	4413      	add	r3, r2
 800315c:	617b      	str	r3, [r7, #20]
  while (size--) {
 800315e:	e7e6      	b.n	800312e <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8003160:	697b      	ldr	r3, [r7, #20]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b082      	sub	sp, #8
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 8003174:	6839      	ldr	r1, [r7, #0]
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f805 	bl	8003186 <_ZN5Print5printEPKc>
 800317c:	4603      	mov	r3, r0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
  return write(str);
 8003190:	6839      	ldr	r1, [r7, #0]
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ffa7 	bl	80030e6 <_ZN5Print5writeEPKc>
 8003198:	4603      	mov	r3, r0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	4a06      	ldr	r2, [pc, #24]	; (80031c8 <_ZN5PrintC1Ev+0x24>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	0800ab80 	.word	0x0800ab80

080031cc <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff ffe4 	bl	80031a4 <_ZN5PrintC1Ev>
 80031dc:	4a05      	ldr	r2, [pc, #20]	; (80031f4 <_ZN6StreamC1Ev+0x28>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	0800abb0 	.word	0x0800abb0

080031f8 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ffe1 	bl	80031cc <_ZN6StreamC1Ev>
 800320a:	4a16      	ldr	r2, [pc, #88]	; (8003264 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3390      	adds	r3, #144	; 0x90
 800321a:	2220      	movs	r2, #32
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f002 fe6e 	bl	8005f00 <memset>
  rxBufferIndex = 0;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	0800ab90 	.word	0x0800ab90

08003268 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af02      	add	r7, sp, #8
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	4608      	mov	r0, r1
 8003272:	4611      	mov	r1, r2
 8003274:	461a      	mov	r2, r3
 8003276:	4603      	mov	r3, r0
 8003278:	70fb      	strb	r3, [r7, #3]
 800327a:	460b      	mov	r3, r1
 800327c:	70bb      	strb	r3, [r7, #2]
 800327e:	4613      	mov	r3, r2
 8003280:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fc24 	bl	8003ad0 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8003288:	78bb      	ldrb	r3, [r7, #2]
 800328a:	2b20      	cmp	r3, #32
 800328c:	d901      	bls.n	8003292 <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 800328e:	2320      	movs	r3, #32
 8003290:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	b2d9      	uxtb	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800329e:	78b8      	ldrb	r0, [r7, #2]
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	4603      	mov	r3, r0
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9cf 	bl	800364a <_ZN7TwoWire15i2c_master_readEhPchh>
 80032ac:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da02      	bge.n	80032ba <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	e001      	b.n	80032be <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fbcc 	bl	8003a6c <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	70fb      	strb	r3, [r7, #3]
 80032ea:	4613      	mov	r3, r2
 80032ec:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80032ee:	78ba      	ldrb	r2, [r7, #2]
 80032f0:	78f9      	ldrb	r1, [r7, #3]
 80032f2:	2301      	movs	r3, #1
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ffb7 	bl	8003268 <_ZN7TwoWire11requestFromEhhh>
 80032fa:	4603      	mov	r3, r0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b086      	sub	sp, #24
 800333e:	af02      	add	r7, sp, #8
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fbc2 	bl	8003ad0 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	7c1b      	ldrb	r3, [r3, #16]
 8003350:	0059      	lsls	r1, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f103 0211 	add.w	r2, r3, #17
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800335e:	4618      	mov	r0, r3
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	4603      	mov	r3, r0
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fa00 	bl	800376c <_ZN7TwoWire16i2c_master_writeEiPKcii>
 800336c:	4603      	mov	r3, r0
 800336e:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 fb6f 	bl	8003a6c <_ZN7TwoWire15enableInterruptEv>

  return ret;
 800338e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 80033a0:	2101      	movs	r1, #1
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff ffc9 	bl	800333a <_ZN7TwoWire15endTransmissionEh>
 80033a8:	4603      	mov	r3, r0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	460b      	mov	r3, r1
 80033bc:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01d      	beq.n	8003404 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80033ce:	2b1f      	cmp	r3, #31
 80033d0:	d901      	bls.n	80033d6 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e028      	b.n	8003428 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80033dc:	4619      	mov	r1, r3
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	440b      	add	r3, r1
 80033e4:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80033ec:	3301      	adds	r3, #1
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8003402:	e010      	b.n	8003426 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fb63 	bl	8003ad0 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 800340a:	1cfb      	adds	r3, r7, #3
 800340c:	2201      	movs	r2, #1
 800340e:	4619      	mov	r1, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fa95 	bl	8003940 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fb28 	bl	8003a6c <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	333c      	adds	r3, #60	; 0x3c
 8003420:	4618      	mov	r0, r3
 8003422:	f001 f83d 	bl	80044a0 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8003426:	2301      	movs	r3, #1
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  if(transmitting){
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003442:	2b00      	cmp	r3, #0
 8003444:	d013      	beq.n	800346e <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8003446:	2300      	movs	r3, #0
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	429a      	cmp	r2, r3
 8003450:	d21e      	bcs.n	8003490 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	440a      	add	r2, r1
 800345e:	7812      	ldrb	r2, [r2, #0]
 8003460:	4611      	mov	r1, r2
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	3301      	adds	r3, #1
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e7ed      	b.n	800344a <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fb2e 	bl	8003ad0 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	461a      	mov	r2, r3
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fa60 	bl	8003940 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 faf3 	bl	8003a6c <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	333c      	adds	r3, #60	; 0x3c
 800348a:	4618      	mov	r0, r3
 800348c:	f001 f808 	bl	80044a0 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8003490:	687b      	ldr	r3, [r7, #4]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	1ad3      	subs	r3, r2, r3
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  int value = -1;
 80034ca:	f04f 33ff 	mov.w	r3, #4294967295
 80034ce:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	429a      	cmp	r2, r3
 80034e2:	bf34      	ite	cc
 80034e4:	2301      	movcc	r3, #1
 80034e6:	2300      	movcs	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d012      	beq.n	8003514 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4413      	add	r3, r2
 80034fc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003500:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	3301      	adds	r3, #1
 800350c:	b2da      	uxtb	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8003514:	68fb      	ldr	r3, [r7, #12]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  int value = -1;
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
 800352e:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003536:	b2da      	uxtb	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800353e:	b2db      	uxtb	r3, r3
 8003540:	429a      	cmp	r2, r3
 8003542:	bf34      	ite	cc
 8003544:	2301      	movcc	r3, #1
 8003546:	2300      	movcs	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003560:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8003562:	68fb      	ldr	r3, [r7, #12]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800359a:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 800359c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035a0:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1e5a      	subs	r2, r3, #1
 80035be:	60fa      	str	r2, [r7, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0e9      	beq.n	80035a2 <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e021      	b.n	8003616 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 80035de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035e2:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	bf14      	ite	ne
 80035f2:	2301      	movne	r3, #1
 80035f4:	2300      	moveq	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	1e5a      	subs	r2, r3, #1
 8003600:	60fa      	str	r2, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf0c      	ite	eq
 8003606:	2301      	moveq	r3, #1
 8003608:	2300      	movne	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0e9      	beq.n	80035e4 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	601a      	str	r2, [r3, #0]

    return 0;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b08a      	sub	sp, #40	; 0x28
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	461a      	mov	r2, r3
 8003656:	460b      	mov	r3, r1
 8003658:	72fb      	strb	r3, [r7, #11]
 800365a:	4613      	mov	r3, r2
 800365c:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f7ff ff8d 	bl	8003584 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800366a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	3b01      	subs	r3, #1
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ed      	bne.n	8003670 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
 8003698:	e064      	b.n	8003764 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80036a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	bf14      	ite	ne
 80036bc:	2301      	movne	r3, #1
 80036be:	2300      	moveq	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d008      	beq.n	80036d8 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	3b01      	subs	r3, #1
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1ed      	bne.n	80036ae <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	e045      	b.n	8003764 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	613b      	str	r3, [r7, #16]
 80036ec:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 80036ee:	2300      	movs	r3, #0
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	7abb      	ldrb	r3, [r7, #10]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	6a3a      	ldr	r2, [r7, #32]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	da17      	bge.n	800372c <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	2200      	movs	r2, #0
 8003702:	4619      	mov	r1, r3
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f8a4 	bl	8003852 <_ZN7TwoWire20i2c_master_byte_readEPii>
 800370a:	61b8      	str	r0, [r7, #24]
        if(ret)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8003712:	f04f 33ff 	mov.w	r3, #4294967295
 8003716:	e025      	b.n	8003764 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8003718:	6979      	ldr	r1, [r7, #20]
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	b2ca      	uxtb	r2, r1
 8003722:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	3301      	adds	r3, #1
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	e7e2      	b.n	80036f2 <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 800372c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7ff ff74 	bl	8003622 <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 800373a:	f107 0314 	add.w	r3, r7, #20
 800373e:	2201      	movs	r2, #1
 8003740:	4619      	mov	r1, r3
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f885 	bl	8003852 <_ZN7TwoWire20i2c_master_byte_readEPii>
 8003748:	61b8      	str	r0, [r7, #24]
    if(ret)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	e006      	b.n	8003764 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8003756:	6979      	ldr	r1, [r7, #20]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	b2ca      	uxtb	r2, r1
 8003760:	701a      	strb	r2, [r3, #0]

    return length;
 8003762:	7abb      	ldrb	r3, [r7, #10]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3728      	adds	r7, #40	; 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377e:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff feff 	bl	8003584 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8003786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800378a:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b01      	cmp	r3, #1
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ed      	bne.n	800378c <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 80037b0:	2304      	movs	r3, #4
 80037b2:	e04a      	b.n	800384a <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80037c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c4:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1ed      	bne.n	80037c6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 80037ea:	2302      	movs	r3, #2
 80037ec:	e02d      	b.n	800384a <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	da15      	bge.n	800383c <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	4619      	mov	r1, r3
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 f85a 	bl	80038d4 <_ZN7TwoWire21i2c_master_byte_writeEi>
 8003820:	4603      	mov	r3, r0
 8003822:	2b01      	cmp	r3, #1
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8003830:	2303      	movs	r3, #3
 8003832:	e00a      	b.n	800384a <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	3301      	adds	r3, #1
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	e7e5      	b.n	8003808 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 800383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff feed 	bl	8003622 <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 8003852:	b480      	push	{r7}
 8003854:	b087      	sub	sp, #28
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d006      	beq.n	8003878 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e005      	b.n	8003884 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8003884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003888:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00c      	beq.n	80038bc <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	1e5a      	subs	r2, r3, #1
 80038a6:	617a      	str	r2, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0e9      	beq.n	800388a <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ba:	e005      	b.n	80038c8 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	461a      	mov	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	601a      	str	r2, [r3, #0]

    return 0;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 80038ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038f2:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b80      	cmp	r3, #128	; 0x80
 8003900:	d008      	beq.n	8003914 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 800390c:	2b04      	cmp	r3, #4
 800390e:	d001      	beq.n	8003914 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8003914:	2300      	movs	r3, #0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1e5a      	subs	r2, r3, #1
 800391e:	60fa      	str	r2, [r7, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf0c      	ite	eq
 8003924:	2301      	moveq	r3, #1
 8003926:	2300      	movne	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0e2      	beq.n	80038f4 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8003932:	2301      	movs	r3, #1
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003954:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	dd41      	ble.n	80039e0 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 800395c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003960:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3b01      	subs	r3, #1
 800397e:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1ed      	bne.n	8003962 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8003986:	f04f 33ff 	mov.w	r3, #4294967295
 800398a:	e068      	b.n	8003a5e <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	60ba      	str	r2, [r7, #8]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	461a      	mov	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	611a      	str	r2, [r3, #16]
        length--;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3b01      	subs	r3, #1
 800399e:	607b      	str	r3, [r7, #4]
        size++;
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d104      	bne.n	80039be <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0c8      	beq.n	8003956 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	60ba      	str	r2, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	611a      	str	r2, [r3, #16]
            length--;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	607b      	str	r3, [r7, #4]
            size++;
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	3301      	adds	r3, #1
 80039dc:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 80039de:	e7ba      	b.n	8003956 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 80039e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039e4:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f4:	bf14      	ite	ne
 80039f6:	2301      	movne	r3, #1
 80039f8:	2300      	moveq	r3, #0
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d008      	beq.n	8003a12 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1ec      	bne.n	80039e6 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8003a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a10:	e025      	b.n	8003a5e <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a1a:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8003a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a20:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d008      	beq.n	8003a4c <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1ed      	bne.n	8003a22 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4a:	e008      	b.n	8003a5e <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3724      	adds	r7, #36	; 0x24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d106      	bne.n	8003a8c <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8003a7e:	2049      	movs	r0, #73	; 0x49
 8003a80:	f000 f9e8 	bl	8003e54 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8003a84:	2048      	movs	r0, #72	; 0x48
 8003a86:	f000 f9e5 	bl	8003e54 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003a8a:	e016      	b.n	8003aba <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	4a0d      	ldr	r2, [pc, #52]	; (8003ac8 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d106      	bne.n	8003aa4 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003a96:	2022      	movs	r0, #34	; 0x22
 8003a98:	f000 f9dc 	bl	8003e54 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003a9c:	2021      	movs	r0, #33	; 0x21
 8003a9e:	f000 f9d9 	bl	8003e54 <HAL_NVIC_EnableIRQ>
}
 8003aa2:	e00a      	b.n	8003aba <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa8:	4a08      	ldr	r2, [pc, #32]	; (8003acc <_ZN7TwoWire15enableInterruptEv+0x60>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d105      	bne.n	8003aba <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003aae:	2020      	movs	r0, #32
 8003ab0:	f000 f9d0 	bl	8003e54 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003ab4:	201f      	movs	r0, #31
 8003ab6:	f000 f9cd 	bl	8003e54 <HAL_NVIC_EnableIRQ>
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40005c00 	.word	0x40005c00
 8003ac8:	40005800 	.word	0x40005800
 8003acc:	40005400 	.word	0x40005400

08003ad0 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d106      	bne.n	8003af0 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8003ae2:	2049      	movs	r0, #73	; 0x49
 8003ae4:	f000 f9c4 	bl	8003e70 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8003ae8:	2048      	movs	r0, #72	; 0x48
 8003aea:	f000 f9c1 	bl	8003e70 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8003aee:	e016      	b.n	8003b1e <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d106      	bne.n	8003b08 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8003afa:	2022      	movs	r0, #34	; 0x22
 8003afc:	f000 f9b8 	bl	8003e70 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8003b00:	2021      	movs	r0, #33	; 0x21
 8003b02:	f000 f9b5 	bl	8003e70 <HAL_NVIC_DisableIRQ>
}
 8003b06:	e00a      	b.n	8003b1e <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0c:	4a08      	ldr	r2, [pc, #32]	; (8003b30 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d105      	bne.n	8003b1e <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8003b12:	2020      	movs	r0, #32
 8003b14:	f000 f9ac 	bl	8003e70 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003b18:	201f      	movs	r0, #31
 8003b1a:	f000 f9a9 	bl	8003e70 <HAL_NVIC_DisableIRQ>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40005c00 	.word	0x40005c00
 8003b2c:	40005800 	.word	0x40005800
 8003b30:	40005400 	.word	0x40005400

08003b34 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d110      	bne.n	8003b66 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d10b      	bne.n	8003b66 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8003b4e:	4908      	ldr	r1, [pc, #32]	; (8003b70 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003b50:	4808      	ldr	r0, [pc, #32]	; (8003b74 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003b52:	f7ff fb51 	bl	80031f8 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8003b56:	4908      	ldr	r1, [pc, #32]	; (8003b78 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8003b58:	4808      	ldr	r0, [pc, #32]	; (8003b7c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8003b5a:	f7ff fb4d 	bl	80031f8 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8003b5e:	4908      	ldr	r1, [pc, #32]	; (8003b80 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003b60:	4808      	ldr	r0, [pc, #32]	; (8003b84 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003b62:	f7ff fb49 	bl	80031f8 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40005400 	.word	0x40005400
 8003b74:	200003e0 	.word	0x200003e0
 8003b78:	40005800 	.word	0x40005800
 8003b7c:	20000498 	.word	0x20000498
 8003b80:	40005c00 	.word	0x40005c00
 8003b84:	20000550 	.word	0x20000550

08003b88 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b90:	2001      	movs	r0, #1
 8003b92:	f7ff ffcf 	bl	8003b34 <_Z41__static_initialization_and_destruction_0ii>
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b9c:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <HAL_Init+0x40>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0d      	ldr	r2, [pc, #52]	; (8003bd8 <HAL_Init+0x40>)
 8003ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <HAL_Init+0x40>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <HAL_Init+0x40>)
 8003bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <HAL_Init+0x40>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <HAL_Init+0x40>)
 8003bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	f000 f920 	bl	8003e06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bc6:	200f      	movs	r0, #15
 8003bc8:	f7fd fcf0 	bl	80015ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bcc:	f7fd fc36 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023c00 	.word	0x40023c00

08003bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be0:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_IncTick+0x20>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_IncTick+0x24>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4413      	add	r3, r2
 8003bec:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <HAL_IncTick+0x24>)
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	2000000c 	.word	0x2000000c
 8003c00:	2000067c 	.word	0x2000067c

08003c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return uwTick;
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <HAL_GetTick+0x14>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	2000067c 	.word	0x2000067c

08003c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c24:	f7ff ffee 	bl	8003c04 <HAL_GetTick>
 8003c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c34:	d005      	beq.n	8003c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <HAL_Delay+0x44>)
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4413      	add	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c42:	bf00      	nop
 8003c44:	f7ff ffde 	bl	8003c04 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d8f7      	bhi.n	8003c44 <HAL_Delay+0x28>
  {
  }
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	2000000c 	.word	0x2000000c

08003c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c74:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c80:	4013      	ands	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c96:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	60d3      	str	r3, [r2, #12]
}
 8003c9c:	bf00      	nop
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	f003 0307 	and.w	r3, r3, #7
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	db0b      	blt.n	8003cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	4907      	ldr	r1, [pc, #28]	; (8003d00 <__NVIC_EnableIRQ+0x38>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	2001      	movs	r0, #1
 8003cea:	fa00 f202 	lsl.w	r2, r0, r2
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	e000e100 	.word	0xe000e100

08003d04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	db12      	blt.n	8003d3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	f003 021f 	and.w	r2, r3, #31
 8003d1c:	490a      	ldr	r1, [pc, #40]	; (8003d48 <__NVIC_DisableIRQ+0x44>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	2001      	movs	r0, #1
 8003d26:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2a:	3320      	adds	r3, #32
 8003d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d30:	f3bf 8f4f 	dsb	sy
}
 8003d34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d36:	f3bf 8f6f 	isb	sy
}
 8003d3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	e000e100 	.word	0xe000e100

08003d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	6039      	str	r1, [r7, #0]
 8003d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	db0a      	blt.n	8003d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	490c      	ldr	r1, [pc, #48]	; (8003d98 <__NVIC_SetPriority+0x4c>)
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	0112      	lsls	r2, r2, #4
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	440b      	add	r3, r1
 8003d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d74:	e00a      	b.n	8003d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4908      	ldr	r1, [pc, #32]	; (8003d9c <__NVIC_SetPriority+0x50>)
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	3b04      	subs	r3, #4
 8003d84:	0112      	lsls	r2, r2, #4
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	440b      	add	r3, r1
 8003d8a:	761a      	strb	r2, [r3, #24]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	e000e100 	.word	0xe000e100
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b089      	sub	sp, #36	; 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f1c3 0307 	rsb	r3, r3, #7
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	bf28      	it	cs
 8003dbe:	2304      	movcs	r3, #4
 8003dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	2b06      	cmp	r3, #6
 8003dc8:	d902      	bls.n	8003dd0 <NVIC_EncodePriority+0x30>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3b03      	subs	r3, #3
 8003dce:	e000      	b.n	8003dd2 <NVIC_EncodePriority+0x32>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	401a      	ands	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	fa01 f303 	lsl.w	r3, r1, r3
 8003df2:	43d9      	mvns	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df8:	4313      	orrs	r3, r2
         );
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3724      	adds	r7, #36	; 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ff28 	bl	8003c64 <__NVIC_SetPriorityGrouping>
}
 8003e14:	bf00      	nop
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e2e:	f7ff ff3d 	bl	8003cac <__NVIC_GetPriorityGrouping>
 8003e32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	6978      	ldr	r0, [r7, #20]
 8003e3a:	f7ff ffb1 	bl	8003da0 <NVIC_EncodePriority>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff ff80 	bl	8003d4c <__NVIC_SetPriority>
}
 8003e4c:	bf00      	nop
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff ff30 	bl	8003cc8 <__NVIC_EnableIRQ>
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ff40 	bl	8003d04 <__NVIC_DisableIRQ>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b089      	sub	sp, #36	; 0x24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	e165      	b.n	8004174 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	f040 8154 	bne.w	800416e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d005      	beq.n	8003ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d130      	bne.n	8003f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f14:	2201      	movs	r2, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 0201 	and.w	r2, r3, #1
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d017      	beq.n	8003f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d123      	bne.n	8003fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	08da      	lsrs	r2, r3, #3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3208      	adds	r2, #8
 8003f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f003 0307 	and.w	r3, r3, #7
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	220f      	movs	r2, #15
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0307 	and.w	r3, r3, #7
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	08da      	lsrs	r2, r3, #3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3208      	adds	r2, #8
 8003fca:	69b9      	ldr	r1, [r7, #24]
 8003fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0203 	and.w	r2, r3, #3
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80ae 	beq.w	800416e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	4b5d      	ldr	r3, [pc, #372]	; (800418c <HAL_GPIO_Init+0x300>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	4a5c      	ldr	r2, [pc, #368]	; (800418c <HAL_GPIO_Init+0x300>)
 800401c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004020:	6453      	str	r3, [r2, #68]	; 0x44
 8004022:	4b5a      	ldr	r3, [pc, #360]	; (800418c <HAL_GPIO_Init+0x300>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800402e:	4a58      	ldr	r2, [pc, #352]	; (8004190 <HAL_GPIO_Init+0x304>)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3302      	adds	r3, #2
 8004036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	220f      	movs	r2, #15
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4f      	ldr	r2, [pc, #316]	; (8004194 <HAL_GPIO_Init+0x308>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d025      	beq.n	80040a6 <HAL_GPIO_Init+0x21a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4e      	ldr	r2, [pc, #312]	; (8004198 <HAL_GPIO_Init+0x30c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <HAL_GPIO_Init+0x216>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4d      	ldr	r2, [pc, #308]	; (800419c <HAL_GPIO_Init+0x310>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d019      	beq.n	800409e <HAL_GPIO_Init+0x212>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4c      	ldr	r2, [pc, #304]	; (80041a0 <HAL_GPIO_Init+0x314>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_GPIO_Init+0x20e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4b      	ldr	r2, [pc, #300]	; (80041a4 <HAL_GPIO_Init+0x318>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00d      	beq.n	8004096 <HAL_GPIO_Init+0x20a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4a      	ldr	r2, [pc, #296]	; (80041a8 <HAL_GPIO_Init+0x31c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <HAL_GPIO_Init+0x206>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a49      	ldr	r2, [pc, #292]	; (80041ac <HAL_GPIO_Init+0x320>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d101      	bne.n	800408e <HAL_GPIO_Init+0x202>
 800408a:	2306      	movs	r3, #6
 800408c:	e00c      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 800408e:	2307      	movs	r3, #7
 8004090:	e00a      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 8004092:	2305      	movs	r3, #5
 8004094:	e008      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 8004096:	2304      	movs	r3, #4
 8004098:	e006      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 800409a:	2303      	movs	r3, #3
 800409c:	e004      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 800409e:	2302      	movs	r3, #2
 80040a0:	e002      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <HAL_GPIO_Init+0x21c>
 80040a6:	2300      	movs	r3, #0
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	f002 0203 	and.w	r2, r2, #3
 80040ae:	0092      	lsls	r2, r2, #2
 80040b0:	4093      	lsls	r3, r2
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040b8:	4935      	ldr	r1, [pc, #212]	; (8004190 <HAL_GPIO_Init+0x304>)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	089b      	lsrs	r3, r3, #2
 80040be:	3302      	adds	r3, #2
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040c6:	4b3a      	ldr	r3, [pc, #232]	; (80041b0 <HAL_GPIO_Init+0x324>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040ea:	4a31      	ldr	r2, [pc, #196]	; (80041b0 <HAL_GPIO_Init+0x324>)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040f0:	4b2f      	ldr	r3, [pc, #188]	; (80041b0 <HAL_GPIO_Init+0x324>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004114:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <HAL_GPIO_Init+0x324>)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800411a:	4b25      	ldr	r3, [pc, #148]	; (80041b0 <HAL_GPIO_Init+0x324>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800413e:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <HAL_GPIO_Init+0x324>)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004144:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <HAL_GPIO_Init+0x324>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	43db      	mvns	r3, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4013      	ands	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	4313      	orrs	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004168:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <HAL_GPIO_Init+0x324>)
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b0f      	cmp	r3, #15
 8004178:	f67f ae96 	bls.w	8003ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	3724      	adds	r7, #36	; 0x24
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40023800 	.word	0x40023800
 8004190:	40013800 	.word	0x40013800
 8004194:	40020000 	.word	0x40020000
 8004198:	40020400 	.word	0x40020400
 800419c:	40020800 	.word	0x40020800
 80041a0:	40020c00 	.word	0x40020c00
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40021400 	.word	0x40021400
 80041ac:	40021800 	.word	0x40021800
 80041b0:	40013c00 	.word	0x40013c00

080041b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	887b      	ldrh	r3, [r7, #2]
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	e001      	b.n	80041d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
 80041f0:	4613      	mov	r3, r2
 80041f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f4:	787b      	ldrb	r3, [r7, #1]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004200:	e003      	b.n	800420a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004202:	887b      	ldrh	r3, [r7, #2]
 8004204:	041a      	lsls	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	619a      	str	r2, [r3, #24]
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e12b      	b.n	8004482 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd f924 	bl	800148c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	; 0x24
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800426a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800427a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800427c:	f000 fa38 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 8004280:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	4a81      	ldr	r2, [pc, #516]	; (800448c <HAL_I2C_Init+0x274>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d807      	bhi.n	800429c <HAL_I2C_Init+0x84>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4a80      	ldr	r2, [pc, #512]	; (8004490 <HAL_I2C_Init+0x278>)
 8004290:	4293      	cmp	r3, r2
 8004292:	bf94      	ite	ls
 8004294:	2301      	movls	r3, #1
 8004296:	2300      	movhi	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	e006      	b.n	80042aa <HAL_I2C_Init+0x92>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a7d      	ldr	r2, [pc, #500]	; (8004494 <HAL_I2C_Init+0x27c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	bf94      	ite	ls
 80042a4:	2301      	movls	r3, #1
 80042a6:	2300      	movhi	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0e7      	b.n	8004482 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a78      	ldr	r2, [pc, #480]	; (8004498 <HAL_I2C_Init+0x280>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	0c9b      	lsrs	r3, r3, #18
 80042bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4a6a      	ldr	r2, [pc, #424]	; (800448c <HAL_I2C_Init+0x274>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d802      	bhi.n	80042ec <HAL_I2C_Init+0xd4>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	3301      	adds	r3, #1
 80042ea:	e009      	b.n	8004300 <HAL_I2C_Init+0xe8>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	4a69      	ldr	r2, [pc, #420]	; (800449c <HAL_I2C_Init+0x284>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	099b      	lsrs	r3, r3, #6
 80042fe:	3301      	adds	r3, #1
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	430b      	orrs	r3, r1
 8004306:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004312:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	495c      	ldr	r1, [pc, #368]	; (800448c <HAL_I2C_Init+0x274>)
 800431c:	428b      	cmp	r3, r1
 800431e:	d819      	bhi.n	8004354 <HAL_I2C_Init+0x13c>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1e59      	subs	r1, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fbb1 f3f3 	udiv	r3, r1, r3
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004334:	400b      	ands	r3, r1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_I2C_Init+0x138>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1e59      	subs	r1, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fbb1 f3f3 	udiv	r3, r1, r3
 8004348:	3301      	adds	r3, #1
 800434a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434e:	e051      	b.n	80043f4 <HAL_I2C_Init+0x1dc>
 8004350:	2304      	movs	r3, #4
 8004352:	e04f      	b.n	80043f4 <HAL_I2C_Init+0x1dc>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d111      	bne.n	8004380 <HAL_I2C_Init+0x168>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1e58      	subs	r0, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	440b      	add	r3, r1
 800436a:	fbb0 f3f3 	udiv	r3, r0, r3
 800436e:	3301      	adds	r3, #1
 8004370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	e012      	b.n	80043a6 <HAL_I2C_Init+0x18e>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1e58      	subs	r0, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6859      	ldr	r1, [r3, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	0099      	lsls	r1, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	fbb0 f3f3 	udiv	r3, r0, r3
 8004396:	3301      	adds	r3, #1
 8004398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Init+0x196>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e022      	b.n	80043f4 <HAL_I2C_Init+0x1dc>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10e      	bne.n	80043d4 <HAL_I2C_Init+0x1bc>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1e58      	subs	r0, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	460b      	mov	r3, r1
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	440b      	add	r3, r1
 80043c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c8:	3301      	adds	r3, #1
 80043ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d2:	e00f      	b.n	80043f4 <HAL_I2C_Init+0x1dc>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1e58      	subs	r0, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	0099      	lsls	r1, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	6809      	ldr	r1, [r1, #0]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6911      	ldr	r1, [r2, #16]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68d2      	ldr	r2, [r2, #12]
 800442e:	4311      	orrs	r1, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	430b      	orrs	r3, r1
 8004436:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	000186a0 	.word	0x000186a0
 8004490:	001e847f 	.word	0x001e847f
 8004494:	003d08ff 	.word	0x003d08ff
 8004498:	431bde83 	.word	0x431bde83
 800449c:	10624dd3 	.word	0x10624dd3

080044a0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d124      	bne.n	80044fe <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2228      	movs	r2, #40	; 0x28
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d007      	beq.n	80044da <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044e8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80044f8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e000      	b.n	8004500 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80044fe:	2302      	movs	r3, #2
  }
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0cc      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004520:	4b68      	ldr	r3, [pc, #416]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d90c      	bls.n	8004548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b65      	ldr	r3, [pc, #404]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004536:	4b63      	ldr	r3, [pc, #396]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0b8      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004560:	4b59      	ldr	r3, [pc, #356]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4a58      	ldr	r2, [pc, #352]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800456a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004578:	4b53      	ldr	r3, [pc, #332]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a52      	ldr	r2, [pc, #328]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004584:	4b50      	ldr	r3, [pc, #320]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	494d      	ldr	r1, [pc, #308]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d044      	beq.n	800462c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045aa:	4b47      	ldr	r3, [pc, #284]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d119      	bne.n	80045ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e07f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d003      	beq.n	80045ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ca:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e06f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045da:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e067      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ea:	4b37      	ldr	r3, [pc, #220]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f023 0203 	bic.w	r2, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4934      	ldr	r1, [pc, #208]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045fc:	f7ff fb02 	bl	8003c04 <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004602:	e00a      	b.n	800461a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004604:	f7ff fafe 	bl	8003c04 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e04f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 020c 	and.w	r2, r3, #12
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	429a      	cmp	r2, r3
 800462a:	d1eb      	bne.n	8004604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d20c      	bcs.n	8004654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463a:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e032      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4916      	ldr	r1, [pc, #88]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	4313      	orrs	r3, r2
 8004670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	490e      	ldr	r1, [pc, #56]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004692:	f000 f887 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8004696:	4602      	mov	r2, r0
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	490a      	ldr	r1, [pc, #40]	; (80046cc <HAL_RCC_ClockConfig+0x1c0>)
 80046a4:	5ccb      	ldrb	r3, [r1, r3]
 80046a6:	fa22 f303 	lsr.w	r3, r2, r3
 80046aa:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <HAL_RCC_ClockConfig+0x1c4>)
 80046ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <HAL_RCC_ClockConfig+0x1c8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fc ff7a 	bl	80015ac <HAL_InitTick>

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023c00 	.word	0x40023c00
 80046c8:	40023800 	.word	0x40023800
 80046cc:	0800ab54 	.word	0x0800ab54
 80046d0:	20000004 	.word	0x20000004
 80046d4:	20000008 	.word	0x20000008

080046d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_RCC_GetHCLKFreq+0x14>)
 80046de:	681b      	ldr	r3, [r3, #0]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000004 	.word	0x20000004

080046f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046f4:	f7ff fff0 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	0a9b      	lsrs	r3, r3, #10
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4903      	ldr	r1, [pc, #12]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800470c:	4618      	mov	r0, r3
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40023800 	.word	0x40023800
 8004714:	0800ab64 	.word	0x0800ab64

08004718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800471c:	f7ff ffdc 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 8004720:	4602      	mov	r2, r0
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	0b5b      	lsrs	r3, r3, #13
 8004728:	f003 0307 	and.w	r3, r3, #7
 800472c:	4903      	ldr	r1, [pc, #12]	; (800473c <HAL_RCC_GetPCLK2Freq+0x24>)
 800472e:	5ccb      	ldrb	r3, [r1, r3]
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	40023800 	.word	0x40023800
 800473c:	0800ab64 	.word	0x0800ab64

08004740 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	220f      	movs	r2, #15
 800474e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004750:	4b12      	ldr	r3, [pc, #72]	; (800479c <HAL_RCC_GetClockConfig+0x5c>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0203 	and.w	r2, r3, #3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800475c:	4b0f      	ldr	r3, [pc, #60]	; (800479c <HAL_RCC_GetClockConfig+0x5c>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <HAL_RCC_GetClockConfig+0x5c>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004774:	4b09      	ldr	r3, [pc, #36]	; (800479c <HAL_RCC_GetClockConfig+0x5c>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	08db      	lsrs	r3, r3, #3
 800477a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004782:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <HAL_RCC_GetClockConfig+0x60>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 020f 	and.w	r2, r3, #15
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	601a      	str	r2, [r3, #0]
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800
 80047a0:	40023c00 	.word	0x40023c00

080047a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a8:	b088      	sub	sp, #32
 80047aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c0:	4bce      	ldr	r3, [pc, #824]	; (8004afc <HAL_RCC_GetSysClockFreq+0x358>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	f200 818d 	bhi.w	8004ae8 <HAL_RCC_GetSysClockFreq+0x344>
 80047ce:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <HAL_RCC_GetSysClockFreq+0x30>)
 80047d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d4:	08004809 	.word	0x08004809
 80047d8:	08004ae9 	.word	0x08004ae9
 80047dc:	08004ae9 	.word	0x08004ae9
 80047e0:	08004ae9 	.word	0x08004ae9
 80047e4:	0800480f 	.word	0x0800480f
 80047e8:	08004ae9 	.word	0x08004ae9
 80047ec:	08004ae9 	.word	0x08004ae9
 80047f0:	08004ae9 	.word	0x08004ae9
 80047f4:	08004815 	.word	0x08004815
 80047f8:	08004ae9 	.word	0x08004ae9
 80047fc:	08004ae9 	.word	0x08004ae9
 8004800:	08004ae9 	.word	0x08004ae9
 8004804:	08004989 	.word	0x08004989
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4bbd      	ldr	r3, [pc, #756]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x35c>)
 800480a:	61bb      	str	r3, [r7, #24]
       break;
 800480c:	e16f      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480e:	4bbd      	ldr	r3, [pc, #756]	; (8004b04 <HAL_RCC_GetSysClockFreq+0x360>)
 8004810:	61bb      	str	r3, [r7, #24]
      break;
 8004812:	e16c      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004814:	4bb9      	ldr	r3, [pc, #740]	; (8004afc <HAL_RCC_GetSysClockFreq+0x358>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800481c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481e:	4bb7      	ldr	r3, [pc, #732]	; (8004afc <HAL_RCC_GetSysClockFreq+0x358>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d053      	beq.n	80048d2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482a:	4bb4      	ldr	r3, [pc, #720]	; (8004afc <HAL_RCC_GetSysClockFreq+0x358>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	099b      	lsrs	r3, r3, #6
 8004830:	461a      	mov	r2, r3
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	f240 10ff 	movw	r0, #511	; 0x1ff
 800483a:	f04f 0100 	mov.w	r1, #0
 800483e:	ea02 0400 	and.w	r4, r2, r0
 8004842:	603c      	str	r4, [r7, #0]
 8004844:	400b      	ands	r3, r1
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	e9d7 4500 	ldrd	r4, r5, [r7]
 800484c:	4620      	mov	r0, r4
 800484e:	4629      	mov	r1, r5
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	014b      	lsls	r3, r1, #5
 800485a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800485e:	0142      	lsls	r2, r0, #5
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	4623      	mov	r3, r4
 8004866:	1ac0      	subs	r0, r0, r3
 8004868:	462b      	mov	r3, r5
 800486a:	eb61 0103 	sbc.w	r1, r1, r3
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	018b      	lsls	r3, r1, #6
 8004878:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800487c:	0182      	lsls	r2, r0, #6
 800487e:	1a12      	subs	r2, r2, r0
 8004880:	eb63 0301 	sbc.w	r3, r3, r1
 8004884:	f04f 0000 	mov.w	r0, #0
 8004888:	f04f 0100 	mov.w	r1, #0
 800488c:	00d9      	lsls	r1, r3, #3
 800488e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004892:	00d0      	lsls	r0, r2, #3
 8004894:	4602      	mov	r2, r0
 8004896:	460b      	mov	r3, r1
 8004898:	4621      	mov	r1, r4
 800489a:	1852      	adds	r2, r2, r1
 800489c:	4629      	mov	r1, r5
 800489e:	eb43 0101 	adc.w	r1, r3, r1
 80048a2:	460b      	mov	r3, r1
 80048a4:	f04f 0000 	mov.w	r0, #0
 80048a8:	f04f 0100 	mov.w	r1, #0
 80048ac:	0259      	lsls	r1, r3, #9
 80048ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80048b2:	0250      	lsls	r0, r2, #9
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4610      	mov	r0, r2
 80048ba:	4619      	mov	r1, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	461a      	mov	r2, r3
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	f7fc f9f0 	bl	8000ca8 <__aeabi_uldivmod>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4613      	mov	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	e04c      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d2:	4b8a      	ldr	r3, [pc, #552]	; (8004afc <HAL_RCC_GetSysClockFreq+0x358>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	099b      	lsrs	r3, r3, #6
 80048d8:	461a      	mov	r2, r3
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80048e2:	f04f 0100 	mov.w	r1, #0
 80048e6:	ea02 0a00 	and.w	sl, r2, r0
 80048ea:	ea03 0b01 	and.w	fp, r3, r1
 80048ee:	4650      	mov	r0, sl
 80048f0:	4659      	mov	r1, fp
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	014b      	lsls	r3, r1, #5
 80048fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004900:	0142      	lsls	r2, r0, #5
 8004902:	4610      	mov	r0, r2
 8004904:	4619      	mov	r1, r3
 8004906:	ebb0 000a 	subs.w	r0, r0, sl
 800490a:	eb61 010b 	sbc.w	r1, r1, fp
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	018b      	lsls	r3, r1, #6
 8004918:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800491c:	0182      	lsls	r2, r0, #6
 800491e:	1a12      	subs	r2, r2, r0
 8004920:	eb63 0301 	sbc.w	r3, r3, r1
 8004924:	f04f 0000 	mov.w	r0, #0
 8004928:	f04f 0100 	mov.w	r1, #0
 800492c:	00d9      	lsls	r1, r3, #3
 800492e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004932:	00d0      	lsls	r0, r2, #3
 8004934:	4602      	mov	r2, r0
 8004936:	460b      	mov	r3, r1
 8004938:	eb12 020a 	adds.w	r2, r2, sl
 800493c:	eb43 030b 	adc.w	r3, r3, fp
 8004940:	f04f 0000 	mov.w	r0, #0
 8004944:	f04f 0100 	mov.w	r1, #0
 8004948:	0299      	lsls	r1, r3, #10
 800494a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800494e:	0290      	lsls	r0, r2, #10
 8004950:	4602      	mov	r2, r0
 8004952:	460b      	mov	r3, r1
 8004954:	4610      	mov	r0, r2
 8004956:	4619      	mov	r1, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	461a      	mov	r2, r3
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	f7fc f9a2 	bl	8000ca8 <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4613      	mov	r3, r2
 800496a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800496c:	4b63      	ldr	r3, [pc, #396]	; (8004afc <HAL_RCC_GetSysClockFreq+0x358>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	3301      	adds	r3, #1
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	61bb      	str	r3, [r7, #24]
      break;
 8004986:	e0b2      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004988:	4b5c      	ldr	r3, [pc, #368]	; (8004afc <HAL_RCC_GetSysClockFreq+0x358>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004990:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004992:	4b5a      	ldr	r3, [pc, #360]	; (8004afc <HAL_RCC_GetSysClockFreq+0x358>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d04d      	beq.n	8004a3a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499e:	4b57      	ldr	r3, [pc, #348]	; (8004afc <HAL_RCC_GetSysClockFreq+0x358>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	099b      	lsrs	r3, r3, #6
 80049a4:	461a      	mov	r2, r3
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ae:	f04f 0100 	mov.w	r1, #0
 80049b2:	ea02 0800 	and.w	r8, r2, r0
 80049b6:	ea03 0901 	and.w	r9, r3, r1
 80049ba:	4640      	mov	r0, r8
 80049bc:	4649      	mov	r1, r9
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	014b      	lsls	r3, r1, #5
 80049c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049cc:	0142      	lsls	r2, r0, #5
 80049ce:	4610      	mov	r0, r2
 80049d0:	4619      	mov	r1, r3
 80049d2:	ebb0 0008 	subs.w	r0, r0, r8
 80049d6:	eb61 0109 	sbc.w	r1, r1, r9
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	018b      	lsls	r3, r1, #6
 80049e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049e8:	0182      	lsls	r2, r0, #6
 80049ea:	1a12      	subs	r2, r2, r0
 80049ec:	eb63 0301 	sbc.w	r3, r3, r1
 80049f0:	f04f 0000 	mov.w	r0, #0
 80049f4:	f04f 0100 	mov.w	r1, #0
 80049f8:	00d9      	lsls	r1, r3, #3
 80049fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049fe:	00d0      	lsls	r0, r2, #3
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	eb12 0208 	adds.w	r2, r2, r8
 8004a08:	eb43 0309 	adc.w	r3, r3, r9
 8004a0c:	f04f 0000 	mov.w	r0, #0
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	0259      	lsls	r1, r3, #9
 8004a16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a1a:	0250      	lsls	r0, r2, #9
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4610      	mov	r0, r2
 8004a22:	4619      	mov	r1, r3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	461a      	mov	r2, r3
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	f7fc f93c 	bl	8000ca8 <__aeabi_uldivmod>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4613      	mov	r3, r2
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	e04a      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a3a:	4b30      	ldr	r3, [pc, #192]	; (8004afc <HAL_RCC_GetSysClockFreq+0x358>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	099b      	lsrs	r3, r3, #6
 8004a40:	461a      	mov	r2, r3
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a4a:	f04f 0100 	mov.w	r1, #0
 8004a4e:	ea02 0400 	and.w	r4, r2, r0
 8004a52:	ea03 0501 	and.w	r5, r3, r1
 8004a56:	4620      	mov	r0, r4
 8004a58:	4629      	mov	r1, r5
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	014b      	lsls	r3, r1, #5
 8004a64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a68:	0142      	lsls	r2, r0, #5
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	1b00      	subs	r0, r0, r4
 8004a70:	eb61 0105 	sbc.w	r1, r1, r5
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	f04f 0300 	mov.w	r3, #0
 8004a7c:	018b      	lsls	r3, r1, #6
 8004a7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a82:	0182      	lsls	r2, r0, #6
 8004a84:	1a12      	subs	r2, r2, r0
 8004a86:	eb63 0301 	sbc.w	r3, r3, r1
 8004a8a:	f04f 0000 	mov.w	r0, #0
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	00d9      	lsls	r1, r3, #3
 8004a94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a98:	00d0      	lsls	r0, r2, #3
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	1912      	adds	r2, r2, r4
 8004aa0:	eb45 0303 	adc.w	r3, r5, r3
 8004aa4:	f04f 0000 	mov.w	r0, #0
 8004aa8:	f04f 0100 	mov.w	r1, #0
 8004aac:	0299      	lsls	r1, r3, #10
 8004aae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ab2:	0290      	lsls	r0, r2, #10
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	f7fc f8f0 	bl	8000ca8 <__aeabi_uldivmod>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4613      	mov	r3, r2
 8004ace:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <HAL_RCC_GetSysClockFreq+0x358>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	0f1b      	lsrs	r3, r3, #28
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	61bb      	str	r3, [r7, #24]
      break;
 8004ae6:	e002      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004aea:	61bb      	str	r3, [r7, #24]
      break;
 8004aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aee:	69bb      	ldr	r3, [r7, #24]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800
 8004b00:	00f42400 	.word	0x00f42400
 8004b04:	007a1200 	.word	0x007a1200

08004b08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e28d      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 8083 	beq.w	8004c2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b28:	4b94      	ldr	r3, [pc, #592]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 030c 	and.w	r3, r3, #12
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d019      	beq.n	8004b68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b34:	4b91      	ldr	r3, [pc, #580]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d106      	bne.n	8004b4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b40:	4b8e      	ldr	r3, [pc, #568]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b4c:	d00c      	beq.n	8004b68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b4e:	4b8b      	ldr	r3, [pc, #556]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b56:	2b0c      	cmp	r3, #12
 8004b58:	d112      	bne.n	8004b80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b5a:	4b88      	ldr	r3, [pc, #544]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b66:	d10b      	bne.n	8004b80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b68:	4b84      	ldr	r3, [pc, #528]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d05b      	beq.n	8004c2c <HAL_RCC_OscConfig+0x124>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d157      	bne.n	8004c2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e25a      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d106      	bne.n	8004b98 <HAL_RCC_OscConfig+0x90>
 8004b8a:	4b7c      	ldr	r3, [pc, #496]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a7b      	ldr	r2, [pc, #492]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e01d      	b.n	8004bd4 <HAL_RCC_OscConfig+0xcc>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0xb4>
 8004ba2:	4b76      	ldr	r3, [pc, #472]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a75      	ldr	r2, [pc, #468]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b73      	ldr	r3, [pc, #460]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a72      	ldr	r2, [pc, #456]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCC_OscConfig+0xcc>
 8004bbc:	4b6f      	ldr	r3, [pc, #444]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a6e      	ldr	r2, [pc, #440]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b6c      	ldr	r3, [pc, #432]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a6b      	ldr	r2, [pc, #428]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d013      	beq.n	8004c04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7ff f812 	bl	8003c04 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be4:	f7ff f80e 	bl	8003c04 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	; 0x64
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e21f      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf6:	4b61      	ldr	r3, [pc, #388]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0xdc>
 8004c02:	e014      	b.n	8004c2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c04:	f7fe fffe 	bl	8003c04 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c0c:	f7fe fffa 	bl	8003c04 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b64      	cmp	r3, #100	; 0x64
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e20b      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1e:	4b57      	ldr	r3, [pc, #348]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x104>
 8004c2a:	e000      	b.n	8004c2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d06f      	beq.n	8004d1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c3a:	4b50      	ldr	r3, [pc, #320]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d017      	beq.n	8004c76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c46:	4b4d      	ldr	r3, [pc, #308]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d105      	bne.n	8004c5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c52:	4b4a      	ldr	r3, [pc, #296]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00b      	beq.n	8004c76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c5e:	4b47      	ldr	r3, [pc, #284]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c66:	2b0c      	cmp	r3, #12
 8004c68:	d11c      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c6a:	4b44      	ldr	r3, [pc, #272]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d116      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c76:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0302 	and.w	r3, r3, #2
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d005      	beq.n	8004c8e <HAL_RCC_OscConfig+0x186>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d001      	beq.n	8004c8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e1d3      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8e:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4937      	ldr	r1, [pc, #220]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca2:	e03a      	b.n	8004d1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d020      	beq.n	8004cee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cac:	4b34      	ldr	r3, [pc, #208]	; (8004d80 <HAL_RCC_OscConfig+0x278>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb2:	f7fe ffa7 	bl	8003c04 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cba:	f7fe ffa3 	bl	8003c04 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e1b4      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ccc:	4b2b      	ldr	r3, [pc, #172]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd8:	4b28      	ldr	r3, [pc, #160]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4925      	ldr	r1, [pc, #148]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	600b      	str	r3, [r1, #0]
 8004cec:	e015      	b.n	8004d1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cee:	4b24      	ldr	r3, [pc, #144]	; (8004d80 <HAL_RCC_OscConfig+0x278>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fe ff86 	bl	8003c04 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cfc:	f7fe ff82 	bl	8003c04 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e193      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0e:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d036      	beq.n	8004d94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d016      	beq.n	8004d5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d2e:	4b15      	ldr	r3, [pc, #84]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d34:	f7fe ff66 	bl	8003c04 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d3c:	f7fe ff62 	bl	8003c04 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e173      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_OscConfig+0x274>)
 8004d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0x234>
 8004d5a:	e01b      	b.n	8004d94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5c:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <HAL_RCC_OscConfig+0x27c>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d62:	f7fe ff4f 	bl	8003c04 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d68:	e00e      	b.n	8004d88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d6a:	f7fe ff4b 	bl	8003c04 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d907      	bls.n	8004d88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e15c      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	42470000 	.word	0x42470000
 8004d84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d88:	4b8a      	ldr	r3, [pc, #552]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1ea      	bne.n	8004d6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8097 	beq.w	8004ed0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da2:	2300      	movs	r3, #0
 8004da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da6:	4b83      	ldr	r3, [pc, #524]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10f      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db2:	2300      	movs	r3, #0
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	4b7f      	ldr	r3, [pc, #508]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	4a7e      	ldr	r2, [pc, #504]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc2:	4b7c      	ldr	r3, [pc, #496]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd2:	4b79      	ldr	r3, [pc, #484]	; (8004fb8 <HAL_RCC_OscConfig+0x4b0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d118      	bne.n	8004e10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dde:	4b76      	ldr	r3, [pc, #472]	; (8004fb8 <HAL_RCC_OscConfig+0x4b0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a75      	ldr	r2, [pc, #468]	; (8004fb8 <HAL_RCC_OscConfig+0x4b0>)
 8004de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dea:	f7fe ff0b 	bl	8003c04 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df2:	f7fe ff07 	bl	8003c04 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e118      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e04:	4b6c      	ldr	r3, [pc, #432]	; (8004fb8 <HAL_RCC_OscConfig+0x4b0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d106      	bne.n	8004e26 <HAL_RCC_OscConfig+0x31e>
 8004e18:	4b66      	ldr	r3, [pc, #408]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1c:	4a65      	ldr	r2, [pc, #404]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	6713      	str	r3, [r2, #112]	; 0x70
 8004e24:	e01c      	b.n	8004e60 <HAL_RCC_OscConfig+0x358>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	2b05      	cmp	r3, #5
 8004e2c:	d10c      	bne.n	8004e48 <HAL_RCC_OscConfig+0x340>
 8004e2e:	4b61      	ldr	r3, [pc, #388]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e32:	4a60      	ldr	r2, [pc, #384]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e34:	f043 0304 	orr.w	r3, r3, #4
 8004e38:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3a:	4b5e      	ldr	r3, [pc, #376]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	4a5d      	ldr	r2, [pc, #372]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	6713      	str	r3, [r2, #112]	; 0x70
 8004e46:	e00b      	b.n	8004e60 <HAL_RCC_OscConfig+0x358>
 8004e48:	4b5a      	ldr	r3, [pc, #360]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4c:	4a59      	ldr	r2, [pc, #356]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e4e:	f023 0301 	bic.w	r3, r3, #1
 8004e52:	6713      	str	r3, [r2, #112]	; 0x70
 8004e54:	4b57      	ldr	r3, [pc, #348]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	4a56      	ldr	r2, [pc, #344]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e5a:	f023 0304 	bic.w	r3, r3, #4
 8004e5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d015      	beq.n	8004e94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fe fecc 	bl	8003c04 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e6e:	e00a      	b.n	8004e86 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e70:	f7fe fec8 	bl	8003c04 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e0d7      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e86:	4b4b      	ldr	r3, [pc, #300]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0ee      	beq.n	8004e70 <HAL_RCC_OscConfig+0x368>
 8004e92:	e014      	b.n	8004ebe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e94:	f7fe feb6 	bl	8003c04 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e9c:	f7fe feb2 	bl	8003c04 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e0c1      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb2:	4b40      	ldr	r3, [pc, #256]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1ee      	bne.n	8004e9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ebe:	7dfb      	ldrb	r3, [r7, #23]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d105      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec4:	4b3b      	ldr	r3, [pc, #236]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	4a3a      	ldr	r2, [pc, #232]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ece:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80ad 	beq.w	8005034 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eda:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f003 030c 	and.w	r3, r3, #12
 8004ee2:	2b08      	cmp	r3, #8
 8004ee4:	d060      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d145      	bne.n	8004f7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eee:	4b33      	ldr	r3, [pc, #204]	; (8004fbc <HAL_RCC_OscConfig+0x4b4>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fe fe86 	bl	8003c04 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004efc:	f7fe fe82 	bl	8003c04 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e093      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0e:	4b29      	ldr	r3, [pc, #164]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69da      	ldr	r2, [r3, #28]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	019b      	lsls	r3, r3, #6
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	3b01      	subs	r3, #1
 8004f34:	041b      	lsls	r3, r3, #16
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	061b      	lsls	r3, r3, #24
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	071b      	lsls	r3, r3, #28
 8004f46:	491b      	ldr	r1, [pc, #108]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f4c:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <HAL_RCC_OscConfig+0x4b4>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f52:	f7fe fe57 	bl	8003c04 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5a:	f7fe fe53 	bl	8003c04 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e064      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6c:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x452>
 8004f78:	e05c      	b.n	8005034 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f7a:	4b10      	ldr	r3, [pc, #64]	; (8004fbc <HAL_RCC_OscConfig+0x4b4>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fe fe40 	bl	8003c04 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f88:	f7fe fe3c 	bl	8003c04 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e04d      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <HAL_RCC_OscConfig+0x4ac>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x480>
 8004fa6:	e045      	b.n	8005034 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e040      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	40007000 	.word	0x40007000
 8004fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fc0:	4b1f      	ldr	r3, [pc, #124]	; (8005040 <HAL_RCC_OscConfig+0x538>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d030      	beq.n	8005030 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d129      	bne.n	8005030 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d122      	bne.n	8005030 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d119      	bne.n	8005030 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	3b01      	subs	r3, #1
 800500a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800500c:	429a      	cmp	r2, r3
 800500e:	d10f      	bne.n	8005030 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800501c:	429a      	cmp	r2, r3
 800501e:	d107      	bne.n	8005030 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800502c:	429a      	cmp	r2, r3
 800502e:	d001      	beq.n	8005034 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e000      	b.n	8005036 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40023800 	.word	0x40023800

08005044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e041      	b.n	80050da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f839 	bl	80050e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3304      	adds	r3, #4
 8005080:	4619      	mov	r1, r3
 8005082:	4610      	mov	r0, r2
 8005084:	f000 f9d8 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d001      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e04e      	b.n	80051ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a23      	ldr	r2, [pc, #140]	; (80051bc <HAL_TIM_Base_Start_IT+0xc4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d022      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513a:	d01d      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d018      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00e      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d009      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a19      	ldr	r2, [pc, #100]	; (80051d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d111      	bne.n	800519c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b06      	cmp	r3, #6
 8005188:	d010      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0201 	orr.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519a:	e007      	b.n	80051ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40000c00 	.word	0x40000c00
 80051cc:	40010400 	.word	0x40010400
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40001800 	.word	0x40001800

080051d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0202 	mvn.w	r2, #2
 8005204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f8ee 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8e0 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f8f1 	bl	8005410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b04      	cmp	r3, #4
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b04      	cmp	r3, #4
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0204 	mvn.w	r2, #4
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f8c4 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8b6 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f8c7 	bl	8005410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b08      	cmp	r3, #8
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0208 	mvn.w	r2, #8
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2204      	movs	r2, #4
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f89a 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f88c 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f89d 	bl	8005410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0210 	mvn.w	r2, #16
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2208      	movs	r2, #8
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f870 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f862 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f873 	bl	8005410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d10e      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d107      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0201 	mvn.w	r2, #1
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fc f836 	bl	80013c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005366:	2b80      	cmp	r3, #128	; 0x80
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005374:	2b80      	cmp	r3, #128	; 0x80
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f902 	bl	800558c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d10e      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d107      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f838 	bl	8005424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d10e      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d107      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0220 	mvn.w	r2, #32
 80053d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8cc 	bl	8005578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a40      	ldr	r2, [pc, #256]	; (800554c <TIM_Base_SetConfig+0x114>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005456:	d00f      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a3d      	ldr	r2, [pc, #244]	; (8005550 <TIM_Base_SetConfig+0x118>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00b      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a3c      	ldr	r2, [pc, #240]	; (8005554 <TIM_Base_SetConfig+0x11c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d007      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a3b      	ldr	r2, [pc, #236]	; (8005558 <TIM_Base_SetConfig+0x120>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a3a      	ldr	r2, [pc, #232]	; (800555c <TIM_Base_SetConfig+0x124>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d108      	bne.n	800548a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2f      	ldr	r2, [pc, #188]	; (800554c <TIM_Base_SetConfig+0x114>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d02b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005498:	d027      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2c      	ldr	r2, [pc, #176]	; (8005550 <TIM_Base_SetConfig+0x118>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d023      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2b      	ldr	r2, [pc, #172]	; (8005554 <TIM_Base_SetConfig+0x11c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01f      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <TIM_Base_SetConfig+0x120>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d01b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a29      	ldr	r2, [pc, #164]	; (800555c <TIM_Base_SetConfig+0x124>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d017      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a28      	ldr	r2, [pc, #160]	; (8005560 <TIM_Base_SetConfig+0x128>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a27      	ldr	r2, [pc, #156]	; (8005564 <TIM_Base_SetConfig+0x12c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00f      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a26      	ldr	r2, [pc, #152]	; (8005568 <TIM_Base_SetConfig+0x130>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a25      	ldr	r2, [pc, #148]	; (800556c <TIM_Base_SetConfig+0x134>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a24      	ldr	r2, [pc, #144]	; (8005570 <TIM_Base_SetConfig+0x138>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a23      	ldr	r2, [pc, #140]	; (8005574 <TIM_Base_SetConfig+0x13c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d108      	bne.n	80054fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <TIM_Base_SetConfig+0x114>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_Base_SetConfig+0xf8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a0c      	ldr	r2, [pc, #48]	; (800555c <TIM_Base_SetConfig+0x124>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d103      	bne.n	8005538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	615a      	str	r2, [r3, #20]
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40010400 	.word	0x40010400
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400
 8005568:	40014800 	.word	0x40014800
 800556c:	40001800 	.word	0x40001800
 8005570:	40001c00 	.word	0x40001c00
 8005574:	40002000 	.word	0x40002000

08005578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e03f      	b.n	8005632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fb ffa8 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2224      	movs	r2, #36	; 0x24
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f929 	bl	800583c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b08a      	sub	sp, #40	; 0x28
 800563e:	af02      	add	r7, sp, #8
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b20      	cmp	r3, #32
 8005658:	d17c      	bne.n	8005754 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <HAL_UART_Transmit+0x2c>
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e075      	b.n	8005756 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_UART_Transmit+0x3e>
 8005674:	2302      	movs	r3, #2
 8005676:	e06e      	b.n	8005756 <HAL_UART_Transmit+0x11c>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2221      	movs	r2, #33	; 0x21
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800568e:	f7fe fab9 	bl	8003c04 <HAL_GetTick>
 8005692:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	88fa      	ldrh	r2, [r7, #6]
 800569e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	d108      	bne.n	80056bc <HAL_UART_Transmit+0x82>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	e003      	b.n	80056c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056c0:	2300      	movs	r3, #0
 80056c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056cc:	e02a      	b.n	8005724 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2180      	movs	r1, #128	; 0x80
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f840 	bl	800575e <UART_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e036      	b.n	8005756 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	3302      	adds	r3, #2
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	e007      	b.n	8005716 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	3301      	adds	r3, #1
 8005714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1cf      	bne.n	80056ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2200      	movs	r2, #0
 8005736:	2140      	movs	r1, #64	; 0x40
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f810 	bl	800575e <UART_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e006      	b.n	8005756 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e000      	b.n	8005756 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005754:	2302      	movs	r3, #2
  }
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b090      	sub	sp, #64	; 0x40
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	603b      	str	r3, [r7, #0]
 800576a:	4613      	mov	r3, r2
 800576c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576e:	e050      	b.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005776:	d04c      	beq.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800577a:	2b00      	cmp	r3, #0
 800577c:	d007      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0x30>
 800577e:	f7fe fa41 	bl	8003c04 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800578a:	429a      	cmp	r2, r3
 800578c:	d241      	bcs.n	8005812 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800579e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057ae:	637a      	str	r2, [r7, #52]	; 0x34
 80057b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e5      	bne.n	800578e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3314      	adds	r3, #20
 80057c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	613b      	str	r3, [r7, #16]
   return(result);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f023 0301 	bic.w	r3, r3, #1
 80057d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3314      	adds	r3, #20
 80057e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057e2:	623a      	str	r2, [r7, #32]
 80057e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	69f9      	ldr	r1, [r7, #28]
 80057e8:	6a3a      	ldr	r2, [r7, #32]
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e5      	bne.n	80057c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2220      	movs	r2, #32
 80057fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e00f      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4013      	ands	r3, r2
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	429a      	cmp	r2, r3
 8005820:	bf0c      	ite	eq
 8005822:	2301      	moveq	r3, #1
 8005824:	2300      	movne	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	429a      	cmp	r2, r3
 800582e:	d09f      	beq.n	8005770 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3740      	adds	r7, #64	; 0x40
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	b09f      	sub	sp, #124	; 0x7c
 8005842:	af00      	add	r7, sp, #0
 8005844:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005852:	68d9      	ldr	r1, [r3, #12]
 8005854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	ea40 0301 	orr.w	r3, r0, r1
 800585c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800585e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005860:	689a      	ldr	r2, [r3, #8]
 8005862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	431a      	orrs	r2, r3
 8005868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	431a      	orrs	r2, r3
 800586e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	4313      	orrs	r3, r2
 8005874:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005880:	f021 010c 	bic.w	r1, r1, #12
 8005884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800588a:	430b      	orrs	r3, r1
 800588c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800588e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589a:	6999      	ldr	r1, [r3, #24]
 800589c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	ea40 0301 	orr.w	r3, r0, r1
 80058a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	4bc5      	ldr	r3, [pc, #788]	; (8005bc0 <UART_SetConfig+0x384>)
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d004      	beq.n	80058ba <UART_SetConfig+0x7e>
 80058b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	4bc3      	ldr	r3, [pc, #780]	; (8005bc4 <UART_SetConfig+0x388>)
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d103      	bne.n	80058c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058ba:	f7fe ff2d 	bl	8004718 <HAL_RCC_GetPCLK2Freq>
 80058be:	6778      	str	r0, [r7, #116]	; 0x74
 80058c0:	e002      	b.n	80058c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058c2:	f7fe ff15 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 80058c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d0:	f040 80b6 	bne.w	8005a40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058d6:	461c      	mov	r4, r3
 80058d8:	f04f 0500 	mov.w	r5, #0
 80058dc:	4622      	mov	r2, r4
 80058de:	462b      	mov	r3, r5
 80058e0:	1891      	adds	r1, r2, r2
 80058e2:	6439      	str	r1, [r7, #64]	; 0x40
 80058e4:	415b      	adcs	r3, r3
 80058e6:	647b      	str	r3, [r7, #68]	; 0x44
 80058e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058ec:	1912      	adds	r2, r2, r4
 80058ee:	eb45 0303 	adc.w	r3, r5, r3
 80058f2:	f04f 0000 	mov.w	r0, #0
 80058f6:	f04f 0100 	mov.w	r1, #0
 80058fa:	00d9      	lsls	r1, r3, #3
 80058fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005900:	00d0      	lsls	r0, r2, #3
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	1911      	adds	r1, r2, r4
 8005908:	6639      	str	r1, [r7, #96]	; 0x60
 800590a:	416b      	adcs	r3, r5
 800590c:	667b      	str	r3, [r7, #100]	; 0x64
 800590e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	461a      	mov	r2, r3
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	1891      	adds	r1, r2, r2
 800591a:	63b9      	str	r1, [r7, #56]	; 0x38
 800591c:	415b      	adcs	r3, r3
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005920:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005924:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005928:	f7fb f9be 	bl	8000ca8 <__aeabi_uldivmod>
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4ba5      	ldr	r3, [pc, #660]	; (8005bc8 <UART_SetConfig+0x38c>)
 8005932:	fba3 2302 	umull	r2, r3, r3, r2
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	011e      	lsls	r6, r3, #4
 800593a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800593c:	461c      	mov	r4, r3
 800593e:	f04f 0500 	mov.w	r5, #0
 8005942:	4622      	mov	r2, r4
 8005944:	462b      	mov	r3, r5
 8005946:	1891      	adds	r1, r2, r2
 8005948:	6339      	str	r1, [r7, #48]	; 0x30
 800594a:	415b      	adcs	r3, r3
 800594c:	637b      	str	r3, [r7, #52]	; 0x34
 800594e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005952:	1912      	adds	r2, r2, r4
 8005954:	eb45 0303 	adc.w	r3, r5, r3
 8005958:	f04f 0000 	mov.w	r0, #0
 800595c:	f04f 0100 	mov.w	r1, #0
 8005960:	00d9      	lsls	r1, r3, #3
 8005962:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005966:	00d0      	lsls	r0, r2, #3
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	1911      	adds	r1, r2, r4
 800596e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005970:	416b      	adcs	r3, r5
 8005972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	461a      	mov	r2, r3
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	1891      	adds	r1, r2, r2
 8005980:	62b9      	str	r1, [r7, #40]	; 0x28
 8005982:	415b      	adcs	r3, r3
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005986:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800598a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800598e:	f7fb f98b 	bl	8000ca8 <__aeabi_uldivmod>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4b8c      	ldr	r3, [pc, #560]	; (8005bc8 <UART_SetConfig+0x38c>)
 8005998:	fba3 1302 	umull	r1, r3, r3, r2
 800599c:	095b      	lsrs	r3, r3, #5
 800599e:	2164      	movs	r1, #100	; 0x64
 80059a0:	fb01 f303 	mul.w	r3, r1, r3
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	3332      	adds	r3, #50	; 0x32
 80059aa:	4a87      	ldr	r2, [pc, #540]	; (8005bc8 <UART_SetConfig+0x38c>)
 80059ac:	fba2 2303 	umull	r2, r3, r2, r3
 80059b0:	095b      	lsrs	r3, r3, #5
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059b8:	441e      	add	r6, r3
 80059ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059bc:	4618      	mov	r0, r3
 80059be:	f04f 0100 	mov.w	r1, #0
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	1894      	adds	r4, r2, r2
 80059c8:	623c      	str	r4, [r7, #32]
 80059ca:	415b      	adcs	r3, r3
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
 80059ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059d2:	1812      	adds	r2, r2, r0
 80059d4:	eb41 0303 	adc.w	r3, r1, r3
 80059d8:	f04f 0400 	mov.w	r4, #0
 80059dc:	f04f 0500 	mov.w	r5, #0
 80059e0:	00dd      	lsls	r5, r3, #3
 80059e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059e6:	00d4      	lsls	r4, r2, #3
 80059e8:	4622      	mov	r2, r4
 80059ea:	462b      	mov	r3, r5
 80059ec:	1814      	adds	r4, r2, r0
 80059ee:	653c      	str	r4, [r7, #80]	; 0x50
 80059f0:	414b      	adcs	r3, r1
 80059f2:	657b      	str	r3, [r7, #84]	; 0x54
 80059f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	461a      	mov	r2, r3
 80059fa:	f04f 0300 	mov.w	r3, #0
 80059fe:	1891      	adds	r1, r2, r2
 8005a00:	61b9      	str	r1, [r7, #24]
 8005a02:	415b      	adcs	r3, r3
 8005a04:	61fb      	str	r3, [r7, #28]
 8005a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005a0e:	f7fb f94b 	bl	8000ca8 <__aeabi_uldivmod>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4b6c      	ldr	r3, [pc, #432]	; (8005bc8 <UART_SetConfig+0x38c>)
 8005a18:	fba3 1302 	umull	r1, r3, r3, r2
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	2164      	movs	r1, #100	; 0x64
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	3332      	adds	r3, #50	; 0x32
 8005a2a:	4a67      	ldr	r2, [pc, #412]	; (8005bc8 <UART_SetConfig+0x38c>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	f003 0207 	and.w	r2, r3, #7
 8005a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4432      	add	r2, r6
 8005a3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a3e:	e0b9      	b.n	8005bb4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a42:	461c      	mov	r4, r3
 8005a44:	f04f 0500 	mov.w	r5, #0
 8005a48:	4622      	mov	r2, r4
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	1891      	adds	r1, r2, r2
 8005a4e:	6139      	str	r1, [r7, #16]
 8005a50:	415b      	adcs	r3, r3
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a58:	1912      	adds	r2, r2, r4
 8005a5a:	eb45 0303 	adc.w	r3, r5, r3
 8005a5e:	f04f 0000 	mov.w	r0, #0
 8005a62:	f04f 0100 	mov.w	r1, #0
 8005a66:	00d9      	lsls	r1, r3, #3
 8005a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a6c:	00d0      	lsls	r0, r2, #3
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	eb12 0804 	adds.w	r8, r2, r4
 8005a76:	eb43 0905 	adc.w	r9, r3, r5
 8005a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f04f 0100 	mov.w	r1, #0
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	008b      	lsls	r3, r1, #2
 8005a8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a92:	0082      	lsls	r2, r0, #2
 8005a94:	4640      	mov	r0, r8
 8005a96:	4649      	mov	r1, r9
 8005a98:	f7fb f906 	bl	8000ca8 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4b49      	ldr	r3, [pc, #292]	; (8005bc8 <UART_SetConfig+0x38c>)
 8005aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8005aa6:	095b      	lsrs	r3, r3, #5
 8005aa8:	011e      	lsls	r6, r3, #4
 8005aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aac:	4618      	mov	r0, r3
 8005aae:	f04f 0100 	mov.w	r1, #0
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	1894      	adds	r4, r2, r2
 8005ab8:	60bc      	str	r4, [r7, #8]
 8005aba:	415b      	adcs	r3, r3
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ac2:	1812      	adds	r2, r2, r0
 8005ac4:	eb41 0303 	adc.w	r3, r1, r3
 8005ac8:	f04f 0400 	mov.w	r4, #0
 8005acc:	f04f 0500 	mov.w	r5, #0
 8005ad0:	00dd      	lsls	r5, r3, #3
 8005ad2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ad6:	00d4      	lsls	r4, r2, #3
 8005ad8:	4622      	mov	r2, r4
 8005ada:	462b      	mov	r3, r5
 8005adc:	1814      	adds	r4, r2, r0
 8005ade:	64bc      	str	r4, [r7, #72]	; 0x48
 8005ae0:	414b      	adcs	r3, r1
 8005ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f04f 0100 	mov.w	r1, #0
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	008b      	lsls	r3, r1, #2
 8005af8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005afc:	0082      	lsls	r2, r0, #2
 8005afe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005b02:	f7fb f8d1 	bl	8000ca8 <__aeabi_uldivmod>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4b2f      	ldr	r3, [pc, #188]	; (8005bc8 <UART_SetConfig+0x38c>)
 8005b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	2164      	movs	r1, #100	; 0x64
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	3332      	adds	r3, #50	; 0x32
 8005b1e:	4a2a      	ldr	r2, [pc, #168]	; (8005bc8 <UART_SetConfig+0x38c>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	095b      	lsrs	r3, r3, #5
 8005b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b2a:	441e      	add	r6, r3
 8005b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f04f 0100 	mov.w	r1, #0
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	1894      	adds	r4, r2, r2
 8005b3a:	603c      	str	r4, [r7, #0]
 8005b3c:	415b      	adcs	r3, r3
 8005b3e:	607b      	str	r3, [r7, #4]
 8005b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b44:	1812      	adds	r2, r2, r0
 8005b46:	eb41 0303 	adc.w	r3, r1, r3
 8005b4a:	f04f 0400 	mov.w	r4, #0
 8005b4e:	f04f 0500 	mov.w	r5, #0
 8005b52:	00dd      	lsls	r5, r3, #3
 8005b54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b58:	00d4      	lsls	r4, r2, #3
 8005b5a:	4622      	mov	r2, r4
 8005b5c:	462b      	mov	r3, r5
 8005b5e:	eb12 0a00 	adds.w	sl, r2, r0
 8005b62:	eb43 0b01 	adc.w	fp, r3, r1
 8005b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f04f 0100 	mov.w	r1, #0
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	008b      	lsls	r3, r1, #2
 8005b7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b7e:	0082      	lsls	r2, r0, #2
 8005b80:	4650      	mov	r0, sl
 8005b82:	4659      	mov	r1, fp
 8005b84:	f7fb f890 	bl	8000ca8 <__aeabi_uldivmod>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <UART_SetConfig+0x38c>)
 8005b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	2164      	movs	r1, #100	; 0x64
 8005b96:	fb01 f303 	mul.w	r3, r1, r3
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	3332      	adds	r3, #50	; 0x32
 8005ba0:	4a09      	ldr	r2, [pc, #36]	; (8005bc8 <UART_SetConfig+0x38c>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	f003 020f 	and.w	r2, r3, #15
 8005bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4432      	add	r2, r6
 8005bb2:	609a      	str	r2, [r3, #8]
}
 8005bb4:	bf00      	nop
 8005bb6:	377c      	adds	r7, #124	; 0x7c
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40011000 	.word	0x40011000
 8005bc4:	40011400 	.word	0x40011400
 8005bc8:	51eb851f 	.word	0x51eb851f

08005bcc <__cxa_pure_virtual>:
 8005bcc:	b508      	push	{r3, lr}
 8005bce:	f000 f80d 	bl	8005bec <_ZSt9terminatev>

08005bd2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005bd2:	b508      	push	{r3, lr}
 8005bd4:	4780      	blx	r0
 8005bd6:	f000 f80e 	bl	8005bf6 <abort>
	...

08005bdc <_ZSt13get_terminatev>:
 8005bdc:	4b02      	ldr	r3, [pc, #8]	; (8005be8 <_ZSt13get_terminatev+0xc>)
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	f3bf 8f5b 	dmb	ish
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20000010 	.word	0x20000010

08005bec <_ZSt9terminatev>:
 8005bec:	b508      	push	{r3, lr}
 8005bee:	f7ff fff5 	bl	8005bdc <_ZSt13get_terminatev>
 8005bf2:	f7ff ffee 	bl	8005bd2 <_ZN10__cxxabiv111__terminateEPFvvE>

08005bf6 <abort>:
 8005bf6:	b508      	push	{r3, lr}
 8005bf8:	2006      	movs	r0, #6
 8005bfa:	f001 f953 	bl	8006ea4 <raise>
 8005bfe:	2001      	movs	r0, #1
 8005c00:	f7fb fd7c 	bl	80016fc <_exit>

08005c04 <__errno>:
 8005c04:	4b01      	ldr	r3, [pc, #4]	; (8005c0c <__errno+0x8>)
 8005c06:	6818      	ldr	r0, [r3, #0]
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	20000014 	.word	0x20000014

08005c10 <__libc_init_array>:
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	4d0d      	ldr	r5, [pc, #52]	; (8005c48 <__libc_init_array+0x38>)
 8005c14:	4c0d      	ldr	r4, [pc, #52]	; (8005c4c <__libc_init_array+0x3c>)
 8005c16:	1b64      	subs	r4, r4, r5
 8005c18:	10a4      	asrs	r4, r4, #2
 8005c1a:	2600      	movs	r6, #0
 8005c1c:	42a6      	cmp	r6, r4
 8005c1e:	d109      	bne.n	8005c34 <__libc_init_array+0x24>
 8005c20:	4d0b      	ldr	r5, [pc, #44]	; (8005c50 <__libc_init_array+0x40>)
 8005c22:	4c0c      	ldr	r4, [pc, #48]	; (8005c54 <__libc_init_array+0x44>)
 8005c24:	f004 fa86 	bl	800a134 <_init>
 8005c28:	1b64      	subs	r4, r4, r5
 8005c2a:	10a4      	asrs	r4, r4, #2
 8005c2c:	2600      	movs	r6, #0
 8005c2e:	42a6      	cmp	r6, r4
 8005c30:	d105      	bne.n	8005c3e <__libc_init_array+0x2e>
 8005c32:	bd70      	pop	{r4, r5, r6, pc}
 8005c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c38:	4798      	blx	r3
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	e7ee      	b.n	8005c1c <__libc_init_array+0xc>
 8005c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c42:	4798      	blx	r3
 8005c44:	3601      	adds	r6, #1
 8005c46:	e7f2      	b.n	8005c2e <__libc_init_array+0x1e>
 8005c48:	0800b12c 	.word	0x0800b12c
 8005c4c:	0800b12c 	.word	0x0800b12c
 8005c50:	0800b12c 	.word	0x0800b12c
 8005c54:	0800b138 	.word	0x0800b138

08005c58 <isxdigit>:
 8005c58:	4b02      	ldr	r3, [pc, #8]	; (8005c64 <isxdigit+0xc>)
 8005c5a:	4418      	add	r0, r3
 8005c5c:	7840      	ldrb	r0, [r0, #1]
 8005c5e:	f000 0044 	and.w	r0, r0, #68	; 0x44
 8005c62:	4770      	bx	lr
 8005c64:	0800adae 	.word	0x0800adae

08005c68 <localtime>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <localtime+0x30>)
 8005c6c:	681d      	ldr	r5, [r3, #0]
 8005c6e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005c70:	4604      	mov	r4, r0
 8005c72:	b953      	cbnz	r3, 8005c8a <localtime+0x22>
 8005c74:	2024      	movs	r0, #36	; 0x24
 8005c76:	f000 f90b 	bl	8005e90 <malloc>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	63e8      	str	r0, [r5, #60]	; 0x3c
 8005c7e:	b920      	cbnz	r0, 8005c8a <localtime+0x22>
 8005c80:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <localtime+0x34>)
 8005c82:	4807      	ldr	r0, [pc, #28]	; (8005ca0 <localtime+0x38>)
 8005c84:	2132      	movs	r1, #50	; 0x32
 8005c86:	f001 fca7 	bl	80075d8 <__assert_func>
 8005c8a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c92:	f000 b807 	b.w	8005ca4 <localtime_r>
 8005c96:	bf00      	nop
 8005c98:	20000014 	.word	0x20000014
 8005c9c:	0800abcc 	.word	0x0800abcc
 8005ca0:	0800abe3 	.word	0x0800abe3

08005ca4 <localtime_r>:
 8005ca4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ca8:	4607      	mov	r7, r0
 8005caa:	9101      	str	r1, [sp, #4]
 8005cac:	f002 fb94 	bl	80083d8 <__gettzinfo>
 8005cb0:	9901      	ldr	r1, [sp, #4]
 8005cb2:	4680      	mov	r8, r0
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	f002 fb93 	bl	80083e0 <gmtime_r>
 8005cba:	6943      	ldr	r3, [r0, #20]
 8005cbc:	079a      	lsls	r2, r3, #30
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8005cc4:	d105      	bne.n	8005cd2 <localtime_r+0x2e>
 8005cc6:	2264      	movs	r2, #100	; 0x64
 8005cc8:	fb96 f3f2 	sdiv	r3, r6, r2
 8005ccc:	fb02 6313 	mls	r3, r2, r3, r6
 8005cd0:	bb7b      	cbnz	r3, 8005d32 <localtime_r+0x8e>
 8005cd2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8005cd6:	fb96 f5f3 	sdiv	r5, r6, r3
 8005cda:	fb03 6515 	mls	r5, r3, r5, r6
 8005cde:	fab5 f585 	clz	r5, r5
 8005ce2:	096d      	lsrs	r5, r5, #5
 8005ce4:	4b68      	ldr	r3, [pc, #416]	; (8005e88 <localtime_r+0x1e4>)
 8005ce6:	2230      	movs	r2, #48	; 0x30
 8005ce8:	fb02 3505 	mla	r5, r2, r5, r3
 8005cec:	f001 fae6 	bl	80072bc <__tz_lock>
 8005cf0:	f001 faf0 	bl	80072d4 <_tzset_unlocked>
 8005cf4:	4b65      	ldr	r3, [pc, #404]	; (8005e8c <localtime_r+0x1e8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	b353      	cbz	r3, 8005d50 <localtime_r+0xac>
 8005cfa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005cfe:	42b3      	cmp	r3, r6
 8005d00:	d119      	bne.n	8005d36 <localtime_r+0x92>
 8005d02:	f8d8 1000 	ldr.w	r1, [r8]
 8005d06:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005d0a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8005d0e:	b9d1      	cbnz	r1, 8005d46 <localtime_r+0xa2>
 8005d10:	4296      	cmp	r6, r2
 8005d12:	eb77 0303 	sbcs.w	r3, r7, r3
 8005d16:	da23      	bge.n	8005d60 <localtime_r+0xbc>
 8005d18:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8005d1c:	4296      	cmp	r6, r2
 8005d1e:	eb77 0303 	sbcs.w	r3, r7, r3
 8005d22:	bfb4      	ite	lt
 8005d24:	2301      	movlt	r3, #1
 8005d26:	2300      	movge	r3, #0
 8005d28:	6223      	str	r3, [r4, #32]
 8005d2a:	db1b      	blt.n	8005d64 <localtime_r+0xc0>
 8005d2c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8005d30:	e01a      	b.n	8005d68 <localtime_r+0xc4>
 8005d32:	2501      	movs	r5, #1
 8005d34:	e7d6      	b.n	8005ce4 <localtime_r+0x40>
 8005d36:	4630      	mov	r0, r6
 8005d38:	f001 fa18 	bl	800716c <__tzcalc_limits>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d1e0      	bne.n	8005d02 <localtime_r+0x5e>
 8005d40:	f04f 33ff 	mov.w	r3, #4294967295
 8005d44:	e004      	b.n	8005d50 <localtime_r+0xac>
 8005d46:	4296      	cmp	r6, r2
 8005d48:	eb77 0303 	sbcs.w	r3, r7, r3
 8005d4c:	da02      	bge.n	8005d54 <localtime_r+0xb0>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	6223      	str	r3, [r4, #32]
 8005d52:	e7eb      	b.n	8005d2c <localtime_r+0x88>
 8005d54:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8005d58:	4296      	cmp	r6, r2
 8005d5a:	eb77 0303 	sbcs.w	r3, r7, r3
 8005d5e:	daf6      	bge.n	8005d4e <localtime_r+0xaa>
 8005d60:	2301      	movs	r3, #1
 8005d62:	6223      	str	r3, [r4, #32]
 8005d64:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8005d68:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005d6c:	203c      	movs	r0, #60	; 0x3c
 8005d6e:	fb91 f6f3 	sdiv	r6, r1, r3
 8005d72:	fb03 1316 	mls	r3, r3, r6, r1
 8005d76:	6861      	ldr	r1, [r4, #4]
 8005d78:	fb93 f2f0 	sdiv	r2, r3, r0
 8005d7c:	fb00 3012 	mls	r0, r0, r2, r3
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	1a89      	subs	r1, r1, r2
 8005d84:	68a2      	ldr	r2, [r4, #8]
 8005d86:	6061      	str	r1, [r4, #4]
 8005d88:	1a1b      	subs	r3, r3, r0
 8005d8a:	1b92      	subs	r2, r2, r6
 8005d8c:	2b3b      	cmp	r3, #59	; 0x3b
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	60a2      	str	r2, [r4, #8]
 8005d92:	dd35      	ble.n	8005e00 <localtime_r+0x15c>
 8005d94:	3101      	adds	r1, #1
 8005d96:	6061      	str	r1, [r4, #4]
 8005d98:	3b3c      	subs	r3, #60	; 0x3c
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	2b3b      	cmp	r3, #59	; 0x3b
 8005da0:	dd34      	ble.n	8005e0c <localtime_r+0x168>
 8005da2:	3201      	adds	r2, #1
 8005da4:	60a2      	str	r2, [r4, #8]
 8005da6:	3b3c      	subs	r3, #60	; 0x3c
 8005da8:	6063      	str	r3, [r4, #4]
 8005daa:	68a3      	ldr	r3, [r4, #8]
 8005dac:	2b17      	cmp	r3, #23
 8005dae:	dd33      	ble.n	8005e18 <localtime_r+0x174>
 8005db0:	69e2      	ldr	r2, [r4, #28]
 8005db2:	3201      	adds	r2, #1
 8005db4:	61e2      	str	r2, [r4, #28]
 8005db6:	69a2      	ldr	r2, [r4, #24]
 8005db8:	3201      	adds	r2, #1
 8005dba:	2a06      	cmp	r2, #6
 8005dbc:	bfc8      	it	gt
 8005dbe:	2200      	movgt	r2, #0
 8005dc0:	61a2      	str	r2, [r4, #24]
 8005dc2:	68e2      	ldr	r2, [r4, #12]
 8005dc4:	3b18      	subs	r3, #24
 8005dc6:	3201      	adds	r2, #1
 8005dc8:	60a3      	str	r3, [r4, #8]
 8005dca:	6923      	ldr	r3, [r4, #16]
 8005dcc:	60e2      	str	r2, [r4, #12]
 8005dce:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8005dd2:	428a      	cmp	r2, r1
 8005dd4:	dd0e      	ble.n	8005df4 <localtime_r+0x150>
 8005dd6:	2b0b      	cmp	r3, #11
 8005dd8:	eba2 0201 	sub.w	r2, r2, r1
 8005ddc:	60e2      	str	r2, [r4, #12]
 8005dde:	f103 0201 	add.w	r2, r3, #1
 8005de2:	bf09      	itett	eq
 8005de4:	6963      	ldreq	r3, [r4, #20]
 8005de6:	6122      	strne	r2, [r4, #16]
 8005de8:	2200      	moveq	r2, #0
 8005dea:	3301      	addeq	r3, #1
 8005dec:	bf02      	ittt	eq
 8005dee:	6122      	streq	r2, [r4, #16]
 8005df0:	6163      	streq	r3, [r4, #20]
 8005df2:	61e2      	streq	r2, [r4, #28]
 8005df4:	f001 fa68 	bl	80072c8 <__tz_unlock>
 8005df8:	4620      	mov	r0, r4
 8005dfa:	b002      	add	sp, #8
 8005dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	dacb      	bge.n	8005d9c <localtime_r+0xf8>
 8005e04:	3901      	subs	r1, #1
 8005e06:	6061      	str	r1, [r4, #4]
 8005e08:	333c      	adds	r3, #60	; 0x3c
 8005e0a:	e7c6      	b.n	8005d9a <localtime_r+0xf6>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dacc      	bge.n	8005daa <localtime_r+0x106>
 8005e10:	3a01      	subs	r2, #1
 8005e12:	60a2      	str	r2, [r4, #8]
 8005e14:	333c      	adds	r3, #60	; 0x3c
 8005e16:	e7c7      	b.n	8005da8 <localtime_r+0x104>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	daeb      	bge.n	8005df4 <localtime_r+0x150>
 8005e1c:	69e2      	ldr	r2, [r4, #28]
 8005e1e:	3a01      	subs	r2, #1
 8005e20:	61e2      	str	r2, [r4, #28]
 8005e22:	69a2      	ldr	r2, [r4, #24]
 8005e24:	3a01      	subs	r2, #1
 8005e26:	bf48      	it	mi
 8005e28:	2206      	movmi	r2, #6
 8005e2a:	61a2      	str	r2, [r4, #24]
 8005e2c:	68e2      	ldr	r2, [r4, #12]
 8005e2e:	3318      	adds	r3, #24
 8005e30:	3a01      	subs	r2, #1
 8005e32:	60e2      	str	r2, [r4, #12]
 8005e34:	60a3      	str	r3, [r4, #8]
 8005e36:	2a00      	cmp	r2, #0
 8005e38:	d1dc      	bne.n	8005df4 <localtime_r+0x150>
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	d405      	bmi.n	8005e4c <localtime_r+0x1a8>
 8005e40:	6123      	str	r3, [r4, #16]
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8005e48:	60e3      	str	r3, [r4, #12]
 8005e4a:	e7d3      	b.n	8005df4 <localtime_r+0x150>
 8005e4c:	230b      	movs	r3, #11
 8005e4e:	6123      	str	r3, [r4, #16]
 8005e50:	6963      	ldr	r3, [r4, #20]
 8005e52:	1e5a      	subs	r2, r3, #1
 8005e54:	6162      	str	r2, [r4, #20]
 8005e56:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8005e5a:	0793      	lsls	r3, r2, #30
 8005e5c:	d105      	bne.n	8005e6a <localtime_r+0x1c6>
 8005e5e:	2164      	movs	r1, #100	; 0x64
 8005e60:	fb92 f3f1 	sdiv	r3, r2, r1
 8005e64:	fb01 2313 	mls	r3, r1, r3, r2
 8005e68:	b963      	cbnz	r3, 8005e84 <localtime_r+0x1e0>
 8005e6a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005e6e:	fb92 f3f1 	sdiv	r3, r2, r1
 8005e72:	fb01 2313 	mls	r3, r1, r3, r2
 8005e76:	fab3 f383 	clz	r3, r3
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8005e80:	61e3      	str	r3, [r4, #28]
 8005e82:	e7de      	b.n	8005e42 <localtime_r+0x19e>
 8005e84:	2301      	movs	r3, #1
 8005e86:	e7f9      	b.n	8005e7c <localtime_r+0x1d8>
 8005e88:	0800aca4 	.word	0x0800aca4
 8005e8c:	2000062c 	.word	0x2000062c

08005e90 <malloc>:
 8005e90:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <malloc+0xc>)
 8005e92:	4601      	mov	r1, r0
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	f000 bb09 	b.w	80064ac <_malloc_r>
 8005e9a:	bf00      	nop
 8005e9c:	20000014 	.word	0x20000014

08005ea0 <free>:
 8005ea0:	4b02      	ldr	r3, [pc, #8]	; (8005eac <free+0xc>)
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	f000 bab1 	b.w	800640c <_free_r>
 8005eaa:	bf00      	nop
 8005eac:	20000014 	.word	0x20000014

08005eb0 <memcpy>:
 8005eb0:	440a      	add	r2, r1
 8005eb2:	4291      	cmp	r1, r2
 8005eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005eb8:	d100      	bne.n	8005ebc <memcpy+0xc>
 8005eba:	4770      	bx	lr
 8005ebc:	b510      	push	{r4, lr}
 8005ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ec2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ec6:	4291      	cmp	r1, r2
 8005ec8:	d1f9      	bne.n	8005ebe <memcpy+0xe>
 8005eca:	bd10      	pop	{r4, pc}

08005ecc <memmove>:
 8005ecc:	4288      	cmp	r0, r1
 8005ece:	b510      	push	{r4, lr}
 8005ed0:	eb01 0402 	add.w	r4, r1, r2
 8005ed4:	d902      	bls.n	8005edc <memmove+0x10>
 8005ed6:	4284      	cmp	r4, r0
 8005ed8:	4623      	mov	r3, r4
 8005eda:	d807      	bhi.n	8005eec <memmove+0x20>
 8005edc:	1e43      	subs	r3, r0, #1
 8005ede:	42a1      	cmp	r1, r4
 8005ee0:	d008      	beq.n	8005ef4 <memmove+0x28>
 8005ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005eea:	e7f8      	b.n	8005ede <memmove+0x12>
 8005eec:	4402      	add	r2, r0
 8005eee:	4601      	mov	r1, r0
 8005ef0:	428a      	cmp	r2, r1
 8005ef2:	d100      	bne.n	8005ef6 <memmove+0x2a>
 8005ef4:	bd10      	pop	{r4, pc}
 8005ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005efa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005efe:	e7f7      	b.n	8005ef0 <memmove+0x24>

08005f00 <memset>:
 8005f00:	4402      	add	r2, r0
 8005f02:	4603      	mov	r3, r0
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d100      	bne.n	8005f0a <memset+0xa>
 8005f08:	4770      	bx	lr
 8005f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0e:	e7f9      	b.n	8005f04 <memset+0x4>

08005f10 <validate_structure>:
 8005f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f12:	6801      	ldr	r1, [r0, #0]
 8005f14:	293b      	cmp	r1, #59	; 0x3b
 8005f16:	4604      	mov	r4, r0
 8005f18:	d911      	bls.n	8005f3e <validate_structure+0x2e>
 8005f1a:	223c      	movs	r2, #60	; 0x3c
 8005f1c:	4668      	mov	r0, sp
 8005f1e:	f001 fb79 	bl	8007614 <div>
 8005f22:	9a01      	ldr	r2, [sp, #4]
 8005f24:	6863      	ldr	r3, [r4, #4]
 8005f26:	9900      	ldr	r1, [sp, #0]
 8005f28:	2a00      	cmp	r2, #0
 8005f2a:	440b      	add	r3, r1
 8005f2c:	6063      	str	r3, [r4, #4]
 8005f2e:	bfbb      	ittet	lt
 8005f30:	323c      	addlt	r2, #60	; 0x3c
 8005f32:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005f36:	6022      	strge	r2, [r4, #0]
 8005f38:	6022      	strlt	r2, [r4, #0]
 8005f3a:	bfb8      	it	lt
 8005f3c:	6063      	strlt	r3, [r4, #4]
 8005f3e:	6861      	ldr	r1, [r4, #4]
 8005f40:	293b      	cmp	r1, #59	; 0x3b
 8005f42:	d911      	bls.n	8005f68 <validate_structure+0x58>
 8005f44:	223c      	movs	r2, #60	; 0x3c
 8005f46:	4668      	mov	r0, sp
 8005f48:	f001 fb64 	bl	8007614 <div>
 8005f4c:	9a01      	ldr	r2, [sp, #4]
 8005f4e:	68a3      	ldr	r3, [r4, #8]
 8005f50:	9900      	ldr	r1, [sp, #0]
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	440b      	add	r3, r1
 8005f56:	60a3      	str	r3, [r4, #8]
 8005f58:	bfbb      	ittet	lt
 8005f5a:	323c      	addlt	r2, #60	; 0x3c
 8005f5c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005f60:	6062      	strge	r2, [r4, #4]
 8005f62:	6062      	strlt	r2, [r4, #4]
 8005f64:	bfb8      	it	lt
 8005f66:	60a3      	strlt	r3, [r4, #8]
 8005f68:	68a1      	ldr	r1, [r4, #8]
 8005f6a:	2917      	cmp	r1, #23
 8005f6c:	d911      	bls.n	8005f92 <validate_structure+0x82>
 8005f6e:	2218      	movs	r2, #24
 8005f70:	4668      	mov	r0, sp
 8005f72:	f001 fb4f 	bl	8007614 <div>
 8005f76:	9a01      	ldr	r2, [sp, #4]
 8005f78:	68e3      	ldr	r3, [r4, #12]
 8005f7a:	9900      	ldr	r1, [sp, #0]
 8005f7c:	2a00      	cmp	r2, #0
 8005f7e:	440b      	add	r3, r1
 8005f80:	60e3      	str	r3, [r4, #12]
 8005f82:	bfbb      	ittet	lt
 8005f84:	3218      	addlt	r2, #24
 8005f86:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005f8a:	60a2      	strge	r2, [r4, #8]
 8005f8c:	60a2      	strlt	r2, [r4, #8]
 8005f8e:	bfb8      	it	lt
 8005f90:	60e3      	strlt	r3, [r4, #12]
 8005f92:	6921      	ldr	r1, [r4, #16]
 8005f94:	290b      	cmp	r1, #11
 8005f96:	d911      	bls.n	8005fbc <validate_structure+0xac>
 8005f98:	220c      	movs	r2, #12
 8005f9a:	4668      	mov	r0, sp
 8005f9c:	f001 fb3a 	bl	8007614 <div>
 8005fa0:	9a01      	ldr	r2, [sp, #4]
 8005fa2:	6963      	ldr	r3, [r4, #20]
 8005fa4:	9900      	ldr	r1, [sp, #0]
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	440b      	add	r3, r1
 8005faa:	6163      	str	r3, [r4, #20]
 8005fac:	bfbb      	ittet	lt
 8005fae:	320c      	addlt	r2, #12
 8005fb0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8005fb4:	6122      	strge	r2, [r4, #16]
 8005fb6:	6122      	strlt	r2, [r4, #16]
 8005fb8:	bfb8      	it	lt
 8005fba:	6163      	strlt	r3, [r4, #20]
 8005fbc:	6963      	ldr	r3, [r4, #20]
 8005fbe:	0799      	lsls	r1, r3, #30
 8005fc0:	d120      	bne.n	8006004 <validate_structure+0xf4>
 8005fc2:	2164      	movs	r1, #100	; 0x64
 8005fc4:	fb93 f2f1 	sdiv	r2, r3, r1
 8005fc8:	fb01 3212 	mls	r2, r1, r2, r3
 8005fcc:	b9e2      	cbnz	r2, 8006008 <validate_structure+0xf8>
 8005fce:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8005fd2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005fd6:	fb93 f2f1 	sdiv	r2, r3, r1
 8005fda:	fb01 3312 	mls	r3, r1, r2, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	bf14      	ite	ne
 8005fe2:	231c      	movne	r3, #28
 8005fe4:	231d      	moveq	r3, #29
 8005fe6:	68e2      	ldr	r2, [r4, #12]
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	dc0f      	bgt.n	800600c <validate_structure+0xfc>
 8005fec:	4f33      	ldr	r7, [pc, #204]	; (80060bc <validate_structure+0x1ac>)
 8005fee:	260b      	movs	r6, #11
 8005ff0:	2064      	movs	r0, #100	; 0x64
 8005ff2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8005ff6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8005ffa:	f1bc 0f00 	cmp.w	ip, #0
 8005ffe:	dd31      	ble.n	8006064 <validate_structure+0x154>
 8006000:	b003      	add	sp, #12
 8006002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006004:	231c      	movs	r3, #28
 8006006:	e7ee      	b.n	8005fe6 <validate_structure+0xd6>
 8006008:	231d      	movs	r3, #29
 800600a:	e7ec      	b.n	8005fe6 <validate_structure+0xd6>
 800600c:	4f2b      	ldr	r7, [pc, #172]	; (80060bc <validate_structure+0x1ac>)
 800600e:	f04f 0c00 	mov.w	ip, #0
 8006012:	2564      	movs	r5, #100	; 0x64
 8006014:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8006018:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800601c:	2a01      	cmp	r2, #1
 800601e:	bf14      	ite	ne
 8006020:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8006024:	4618      	moveq	r0, r3
 8006026:	4281      	cmp	r1, r0
 8006028:	ddea      	ble.n	8006000 <validate_structure+0xf0>
 800602a:	3201      	adds	r2, #1
 800602c:	1a09      	subs	r1, r1, r0
 800602e:	2a0c      	cmp	r2, #12
 8006030:	60e1      	str	r1, [r4, #12]
 8006032:	6122      	str	r2, [r4, #16]
 8006034:	d1f0      	bne.n	8006018 <validate_structure+0x108>
 8006036:	6963      	ldr	r3, [r4, #20]
 8006038:	1c5a      	adds	r2, r3, #1
 800603a:	0791      	lsls	r1, r2, #30
 800603c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8006040:	d137      	bne.n	80060b2 <validate_structure+0x1a2>
 8006042:	fb92 f1f5 	sdiv	r1, r2, r5
 8006046:	fb05 2211 	mls	r2, r5, r1, r2
 800604a:	2a00      	cmp	r2, #0
 800604c:	d133      	bne.n	80060b6 <validate_structure+0x1a6>
 800604e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8006052:	fb93 f2f6 	sdiv	r2, r3, r6
 8006056:	fb06 3312 	mls	r3, r6, r2, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	bf14      	ite	ne
 800605e:	231c      	movne	r3, #28
 8006060:	231d      	moveq	r3, #29
 8006062:	e7d9      	b.n	8006018 <validate_structure+0x108>
 8006064:	6921      	ldr	r1, [r4, #16]
 8006066:	3901      	subs	r1, #1
 8006068:	6121      	str	r1, [r4, #16]
 800606a:	3101      	adds	r1, #1
 800606c:	d114      	bne.n	8006098 <validate_structure+0x188>
 800606e:	6963      	ldr	r3, [r4, #20]
 8006070:	1e59      	subs	r1, r3, #1
 8006072:	078a      	lsls	r2, r1, #30
 8006074:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8006078:	d117      	bne.n	80060aa <validate_structure+0x19a>
 800607a:	fb91 f2f0 	sdiv	r2, r1, r0
 800607e:	fb00 1112 	mls	r1, r0, r2, r1
 8006082:	b9a1      	cbnz	r1, 80060ae <validate_structure+0x19e>
 8006084:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8006088:	fb93 f2f5 	sdiv	r2, r3, r5
 800608c:	fb05 3312 	mls	r3, r5, r2, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	bf14      	ite	ne
 8006094:	231c      	movne	r3, #28
 8006096:	231d      	moveq	r3, #29
 8006098:	6922      	ldr	r2, [r4, #16]
 800609a:	2a01      	cmp	r2, #1
 800609c:	bf14      	ite	ne
 800609e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80060a2:	461a      	moveq	r2, r3
 80060a4:	4462      	add	r2, ip
 80060a6:	60e2      	str	r2, [r4, #12]
 80060a8:	e7a5      	b.n	8005ff6 <validate_structure+0xe6>
 80060aa:	231c      	movs	r3, #28
 80060ac:	e7f4      	b.n	8006098 <validate_structure+0x188>
 80060ae:	231d      	movs	r3, #29
 80060b0:	e7f2      	b.n	8006098 <validate_structure+0x188>
 80060b2:	231c      	movs	r3, #28
 80060b4:	e7b0      	b.n	8006018 <validate_structure+0x108>
 80060b6:	231d      	movs	r3, #29
 80060b8:	e7ae      	b.n	8006018 <validate_structure+0x108>
 80060ba:	bf00      	nop
 80060bc:	0800ac44 	.word	0x0800ac44

080060c0 <mktime>:
 80060c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	b08b      	sub	sp, #44	; 0x2c
 80060c6:	4605      	mov	r5, r0
 80060c8:	f002 f986 	bl	80083d8 <__gettzinfo>
 80060cc:	4607      	mov	r7, r0
 80060ce:	4628      	mov	r0, r5
 80060d0:	f7ff ff1e 	bl	8005f10 <validate_structure>
 80060d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060d8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80060dc:	68a8      	ldr	r0, [r5, #8]
 80060de:	696e      	ldr	r6, [r5, #20]
 80060e0:	fb0a 2303 	mla	r3, sl, r3, r2
 80060e4:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 80060e8:	fb0a 3a00 	mla	sl, sl, r0, r3
 80060ec:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 80060f0:	4ac3      	ldr	r2, [pc, #780]	; (8006400 <mktime+0x340>)
 80060f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80060f6:	3c01      	subs	r4, #1
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	4414      	add	r4, r2
 80060fc:	dd11      	ble.n	8006122 <mktime+0x62>
 80060fe:	07b1      	lsls	r1, r6, #30
 8006100:	d10f      	bne.n	8006122 <mktime+0x62>
 8006102:	2264      	movs	r2, #100	; 0x64
 8006104:	fb96 f3f2 	sdiv	r3, r6, r2
 8006108:	fb02 6313 	mls	r3, r2, r3, r6
 800610c:	b943      	cbnz	r3, 8006120 <mktime+0x60>
 800610e:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8006112:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006116:	fb91 f3f2 	sdiv	r3, r1, r2
 800611a:	fb02 1313 	mls	r3, r2, r3, r1
 800611e:	b903      	cbnz	r3, 8006122 <mktime+0x62>
 8006120:	3401      	adds	r4, #1
 8006122:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8006126:	3310      	adds	r3, #16
 8006128:	f644 6220 	movw	r2, #20000	; 0x4e20
 800612c:	4293      	cmp	r3, r2
 800612e:	61ec      	str	r4, [r5, #28]
 8006130:	f200 8161 	bhi.w	80063f6 <mktime+0x336>
 8006134:	2e46      	cmp	r6, #70	; 0x46
 8006136:	dd77      	ble.n	8006228 <mktime+0x168>
 8006138:	2346      	movs	r3, #70	; 0x46
 800613a:	f240 1e6d 	movw	lr, #365	; 0x16d
 800613e:	2164      	movs	r1, #100	; 0x64
 8006140:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006144:	079a      	lsls	r2, r3, #30
 8006146:	d169      	bne.n	800621c <mktime+0x15c>
 8006148:	fb93 f2f1 	sdiv	r2, r3, r1
 800614c:	fb01 3212 	mls	r2, r1, r2, r3
 8006150:	2a00      	cmp	r2, #0
 8006152:	d166      	bne.n	8006222 <mktime+0x162>
 8006154:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8006158:	fb9c f2f0 	sdiv	r2, ip, r0
 800615c:	fb00 c212 	mls	r2, r0, r2, ip
 8006160:	2a00      	cmp	r2, #0
 8006162:	bf14      	ite	ne
 8006164:	4672      	movne	r2, lr
 8006166:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800616a:	3301      	adds	r3, #1
 800616c:	429e      	cmp	r6, r3
 800616e:	4414      	add	r4, r2
 8006170:	d1e8      	bne.n	8006144 <mktime+0x84>
 8006172:	4ba4      	ldr	r3, [pc, #656]	; (8006404 <mktime+0x344>)
 8006174:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8006178:	fbc3 ab04 	smlal	sl, fp, r3, r4
 800617c:	f001 f89e 	bl	80072bc <__tz_lock>
 8006180:	f001 f8a8 	bl	80072d4 <_tzset_unlocked>
 8006184:	4ba0      	ldr	r3, [pc, #640]	; (8006408 <mktime+0x348>)
 8006186:	f8d3 9000 	ldr.w	r9, [r3]
 800618a:	f1b9 0f00 	cmp.w	r9, #0
 800618e:	d03f      	beq.n	8006210 <mktime+0x150>
 8006190:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8006194:	6968      	ldr	r0, [r5, #20]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f1b9 0f01 	cmp.w	r9, #1
 800619c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80061a0:	46c8      	mov	r8, r9
 80061a2:	bfa8      	it	ge
 80061a4:	f04f 0801 	movge.w	r8, #1
 80061a8:	4283      	cmp	r3, r0
 80061aa:	d17f      	bne.n	80062ac <mktime+0x1ec>
 80061ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ae:	4619      	mov	r1, r3
 80061b0:	17da      	asrs	r2, r3, #31
 80061b2:	e9cd 1200 	strd	r1, r2, [sp]
 80061b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80061ba:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80061be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c4:	1a80      	subs	r0, r0, r2
 80061c6:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 80061ca:	4582      	cmp	sl, r0
 80061cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061d0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80061d4:	da71      	bge.n	80062ba <mktime+0x1fa>
 80061d6:	9800      	ldr	r0, [sp, #0]
 80061d8:	6a39      	ldr	r1, [r7, #32]
 80061da:	1a09      	subs	r1, r1, r0
 80061dc:	9104      	str	r1, [sp, #16]
 80061de:	9801      	ldr	r0, [sp, #4]
 80061e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061e2:	eb61 0100 	sbc.w	r1, r1, r0
 80061e6:	9105      	str	r1, [sp, #20]
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	2900      	cmp	r1, #0
 80061ec:	d075      	beq.n	80062da <mktime+0x21a>
 80061ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061f2:	4582      	cmp	sl, r0
 80061f4:	eb7b 0101 	sbcs.w	r1, fp, r1
 80061f8:	db05      	blt.n	8006206 <mktime+0x146>
 80061fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061fe:	4582      	cmp	sl, r0
 8006200:	eb7b 0101 	sbcs.w	r1, fp, r1
 8006204:	db6f      	blt.n	80062e6 <mktime+0x226>
 8006206:	f1b9 0f00 	cmp.w	r9, #0
 800620a:	f04f 0900 	mov.w	r9, #0
 800620e:	da6f      	bge.n	80062f0 <mktime+0x230>
 8006210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006212:	eb1a 0a03 	adds.w	sl, sl, r3
 8006216:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800621a:	e0ae      	b.n	800637a <mktime+0x2ba>
 800621c:	f240 126d 	movw	r2, #365	; 0x16d
 8006220:	e7a3      	b.n	800616a <mktime+0xaa>
 8006222:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8006226:	e7a0      	b.n	800616a <mktime+0xaa>
 8006228:	d0a3      	beq.n	8006172 <mktime+0xb2>
 800622a:	2345      	movs	r3, #69	; 0x45
 800622c:	f240 1e6d 	movw	lr, #365	; 0x16d
 8006230:	2164      	movs	r1, #100	; 0x64
 8006232:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006236:	e012      	b.n	800625e <mktime+0x19e>
 8006238:	bb62      	cbnz	r2, 8006294 <mktime+0x1d4>
 800623a:	fb93 f2f1 	sdiv	r2, r3, r1
 800623e:	fb01 3212 	mls	r2, r1, r2, r3
 8006242:	bb52      	cbnz	r2, 800629a <mktime+0x1da>
 8006244:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8006248:	fb9c f2f0 	sdiv	r2, ip, r0
 800624c:	fb00 c212 	mls	r2, r0, r2, ip
 8006250:	2a00      	cmp	r2, #0
 8006252:	bf14      	ite	ne
 8006254:	4672      	movne	r2, lr
 8006256:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800625a:	1aa4      	subs	r4, r4, r2
 800625c:	3b01      	subs	r3, #1
 800625e:	429e      	cmp	r6, r3
 8006260:	f003 0203 	and.w	r2, r3, #3
 8006264:	dbe8      	blt.n	8006238 <mktime+0x178>
 8006266:	b9da      	cbnz	r2, 80062a0 <mktime+0x1e0>
 8006268:	2264      	movs	r2, #100	; 0x64
 800626a:	fb96 f3f2 	sdiv	r3, r6, r2
 800626e:	fb02 6313 	mls	r3, r2, r3, r6
 8006272:	b9c3      	cbnz	r3, 80062a6 <mktime+0x1e6>
 8006274:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8006278:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800627c:	fb91 f3f2 	sdiv	r3, r1, r2
 8006280:	fb02 1313 	mls	r3, r2, r3, r1
 8006284:	2b00      	cmp	r3, #0
 8006286:	f240 136d 	movw	r3, #365	; 0x16d
 800628a:	bf08      	it	eq
 800628c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8006290:	1ae4      	subs	r4, r4, r3
 8006292:	e76e      	b.n	8006172 <mktime+0xb2>
 8006294:	f240 126d 	movw	r2, #365	; 0x16d
 8006298:	e7df      	b.n	800625a <mktime+0x19a>
 800629a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800629e:	e7dc      	b.n	800625a <mktime+0x19a>
 80062a0:	f240 136d 	movw	r3, #365	; 0x16d
 80062a4:	e7f4      	b.n	8006290 <mktime+0x1d0>
 80062a6:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80062aa:	e7f1      	b.n	8006290 <mktime+0x1d0>
 80062ac:	f000 ff5e 	bl	800716c <__tzcalc_limits>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	f47f af7b 	bne.w	80061ac <mktime+0xec>
 80062b6:	46c1      	mov	r9, r8
 80062b8:	e054      	b.n	8006364 <mktime+0x2a4>
 80062ba:	9800      	ldr	r0, [sp, #0]
 80062bc:	9902      	ldr	r1, [sp, #8]
 80062be:	1a09      	subs	r1, r1, r0
 80062c0:	9108      	str	r1, [sp, #32]
 80062c2:	9801      	ldr	r0, [sp, #4]
 80062c4:	9903      	ldr	r1, [sp, #12]
 80062c6:	eb61 0100 	sbc.w	r1, r1, r0
 80062ca:	9109      	str	r1, [sp, #36]	; 0x24
 80062cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80062d0:	4582      	cmp	sl, r0
 80062d2:	eb7b 0101 	sbcs.w	r1, fp, r1
 80062d6:	dbee      	blt.n	80062b6 <mktime+0x1f6>
 80062d8:	e77d      	b.n	80061d6 <mktime+0x116>
 80062da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062de:	4582      	cmp	sl, r0
 80062e0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80062e4:	db89      	blt.n	80061fa <mktime+0x13a>
 80062e6:	f1b9 0f00 	cmp.w	r9, #0
 80062ea:	db3f      	blt.n	800636c <mktime+0x2ac>
 80062ec:	f04f 0901 	mov.w	r9, #1
 80062f0:	ea88 0809 	eor.w	r8, r8, r9
 80062f4:	f1b8 0f01 	cmp.w	r8, #1
 80062f8:	d134      	bne.n	8006364 <mktime+0x2a4>
 80062fa:	f1b9 0f00 	cmp.w	r9, #0
 80062fe:	d04f      	beq.n	80063a0 <mktime+0x2e0>
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	682a      	ldr	r2, [r5, #0]
 8006304:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8006308:	441a      	add	r2, r3
 800630a:	eb1a 0a03 	adds.w	sl, sl, r3
 800630e:	602a      	str	r2, [r5, #0]
 8006310:	4628      	mov	r0, r5
 8006312:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8006316:	f7ff fdfb 	bl	8005f10 <validate_structure>
 800631a:	68ea      	ldr	r2, [r5, #12]
 800631c:	ebb2 0208 	subs.w	r2, r2, r8
 8006320:	d020      	beq.n	8006364 <mktime+0x2a4>
 8006322:	2a01      	cmp	r2, #1
 8006324:	dc3e      	bgt.n	80063a4 <mktime+0x2e4>
 8006326:	1c90      	adds	r0, r2, #2
 8006328:	bfd8      	it	le
 800632a:	2201      	movle	r2, #1
 800632c:	69eb      	ldr	r3, [r5, #28]
 800632e:	18d3      	adds	r3, r2, r3
 8006330:	4414      	add	r4, r2
 8006332:	d540      	bpl.n	80063b6 <mktime+0x2f6>
 8006334:	1e72      	subs	r2, r6, #1
 8006336:	0791      	lsls	r1, r2, #30
 8006338:	d137      	bne.n	80063aa <mktime+0x2ea>
 800633a:	2164      	movs	r1, #100	; 0x64
 800633c:	fb92 f3f1 	sdiv	r3, r2, r1
 8006340:	fb01 2313 	mls	r3, r1, r3, r2
 8006344:	bba3      	cbnz	r3, 80063b0 <mktime+0x2f0>
 8006346:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800634a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800634e:	fb96 f3f2 	sdiv	r3, r6, r2
 8006352:	fb02 6613 	mls	r6, r2, r3, r6
 8006356:	2e00      	cmp	r6, #0
 8006358:	f240 136d 	movw	r3, #365	; 0x16d
 800635c:	bf18      	it	ne
 800635e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8006362:	61eb      	str	r3, [r5, #28]
 8006364:	f1b9 0f01 	cmp.w	r9, #1
 8006368:	f47f af52 	bne.w	8006210 <mktime+0x150>
 800636c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800636e:	eb1a 0a03 	adds.w	sl, sl, r3
 8006372:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8006376:	f04f 0901 	mov.w	r9, #1
 800637a:	f000 ffa5 	bl	80072c8 <__tz_unlock>
 800637e:	3404      	adds	r4, #4
 8006380:	2307      	movs	r3, #7
 8006382:	fb94 f3f3 	sdiv	r3, r4, r3
 8006386:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800638a:	1ae4      	subs	r4, r4, r3
 800638c:	bf48      	it	mi
 800638e:	3407      	addmi	r4, #7
 8006390:	f8c5 9020 	str.w	r9, [r5, #32]
 8006394:	61ac      	str	r4, [r5, #24]
 8006396:	4650      	mov	r0, sl
 8006398:	4659      	mov	r1, fp
 800639a:	b00b      	add	sp, #44	; 0x2c
 800639c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a0:	1a9b      	subs	r3, r3, r2
 80063a2:	e7ae      	b.n	8006302 <mktime+0x242>
 80063a4:	f04f 32ff 	mov.w	r2, #4294967295
 80063a8:	e7c0      	b.n	800632c <mktime+0x26c>
 80063aa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80063ae:	e7d8      	b.n	8006362 <mktime+0x2a2>
 80063b0:	f240 136d 	movw	r3, #365	; 0x16d
 80063b4:	e7d5      	b.n	8006362 <mktime+0x2a2>
 80063b6:	07b2      	lsls	r2, r6, #30
 80063b8:	d117      	bne.n	80063ea <mktime+0x32a>
 80063ba:	2164      	movs	r1, #100	; 0x64
 80063bc:	fb96 f2f1 	sdiv	r2, r6, r1
 80063c0:	fb01 6212 	mls	r2, r1, r2, r6
 80063c4:	b9a2      	cbnz	r2, 80063f0 <mktime+0x330>
 80063c6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80063ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80063ce:	fb96 f2f1 	sdiv	r2, r6, r1
 80063d2:	fb01 6612 	mls	r6, r1, r2, r6
 80063d6:	2e00      	cmp	r6, #0
 80063d8:	f240 126d 	movw	r2, #365	; 0x16d
 80063dc:	bf08      	it	eq
 80063de:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80063e2:	4293      	cmp	r3, r2
 80063e4:	bfa8      	it	ge
 80063e6:	1a9b      	subge	r3, r3, r2
 80063e8:	e7bb      	b.n	8006362 <mktime+0x2a2>
 80063ea:	f240 126d 	movw	r2, #365	; 0x16d
 80063ee:	e7f8      	b.n	80063e2 <mktime+0x322>
 80063f0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80063f4:	e7f5      	b.n	80063e2 <mktime+0x322>
 80063f6:	f04f 3aff 	mov.w	sl, #4294967295
 80063fa:	f04f 3bff 	mov.w	fp, #4294967295
 80063fe:	e7ca      	b.n	8006396 <mktime+0x2d6>
 8006400:	0800ac74 	.word	0x0800ac74
 8006404:	00015180 	.word	0x00015180
 8006408:	2000062c 	.word	0x2000062c

0800640c <_free_r>:
 800640c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800640e:	2900      	cmp	r1, #0
 8006410:	d048      	beq.n	80064a4 <_free_r+0x98>
 8006412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006416:	9001      	str	r0, [sp, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	f1a1 0404 	sub.w	r4, r1, #4
 800641e:	bfb8      	it	lt
 8006420:	18e4      	addlt	r4, r4, r3
 8006422:	f002 f8a9 	bl	8008578 <__malloc_lock>
 8006426:	4a20      	ldr	r2, [pc, #128]	; (80064a8 <_free_r+0x9c>)
 8006428:	9801      	ldr	r0, [sp, #4]
 800642a:	6813      	ldr	r3, [r2, #0]
 800642c:	4615      	mov	r5, r2
 800642e:	b933      	cbnz	r3, 800643e <_free_r+0x32>
 8006430:	6063      	str	r3, [r4, #4]
 8006432:	6014      	str	r4, [r2, #0]
 8006434:	b003      	add	sp, #12
 8006436:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800643a:	f002 b8a3 	b.w	8008584 <__malloc_unlock>
 800643e:	42a3      	cmp	r3, r4
 8006440:	d90b      	bls.n	800645a <_free_r+0x4e>
 8006442:	6821      	ldr	r1, [r4, #0]
 8006444:	1862      	adds	r2, r4, r1
 8006446:	4293      	cmp	r3, r2
 8006448:	bf04      	itt	eq
 800644a:	681a      	ldreq	r2, [r3, #0]
 800644c:	685b      	ldreq	r3, [r3, #4]
 800644e:	6063      	str	r3, [r4, #4]
 8006450:	bf04      	itt	eq
 8006452:	1852      	addeq	r2, r2, r1
 8006454:	6022      	streq	r2, [r4, #0]
 8006456:	602c      	str	r4, [r5, #0]
 8006458:	e7ec      	b.n	8006434 <_free_r+0x28>
 800645a:	461a      	mov	r2, r3
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	b10b      	cbz	r3, 8006464 <_free_r+0x58>
 8006460:	42a3      	cmp	r3, r4
 8006462:	d9fa      	bls.n	800645a <_free_r+0x4e>
 8006464:	6811      	ldr	r1, [r2, #0]
 8006466:	1855      	adds	r5, r2, r1
 8006468:	42a5      	cmp	r5, r4
 800646a:	d10b      	bne.n	8006484 <_free_r+0x78>
 800646c:	6824      	ldr	r4, [r4, #0]
 800646e:	4421      	add	r1, r4
 8006470:	1854      	adds	r4, r2, r1
 8006472:	42a3      	cmp	r3, r4
 8006474:	6011      	str	r1, [r2, #0]
 8006476:	d1dd      	bne.n	8006434 <_free_r+0x28>
 8006478:	681c      	ldr	r4, [r3, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	6053      	str	r3, [r2, #4]
 800647e:	4421      	add	r1, r4
 8006480:	6011      	str	r1, [r2, #0]
 8006482:	e7d7      	b.n	8006434 <_free_r+0x28>
 8006484:	d902      	bls.n	800648c <_free_r+0x80>
 8006486:	230c      	movs	r3, #12
 8006488:	6003      	str	r3, [r0, #0]
 800648a:	e7d3      	b.n	8006434 <_free_r+0x28>
 800648c:	6825      	ldr	r5, [r4, #0]
 800648e:	1961      	adds	r1, r4, r5
 8006490:	428b      	cmp	r3, r1
 8006492:	bf04      	itt	eq
 8006494:	6819      	ldreq	r1, [r3, #0]
 8006496:	685b      	ldreq	r3, [r3, #4]
 8006498:	6063      	str	r3, [r4, #4]
 800649a:	bf04      	itt	eq
 800649c:	1949      	addeq	r1, r1, r5
 800649e:	6021      	streq	r1, [r4, #0]
 80064a0:	6054      	str	r4, [r2, #4]
 80064a2:	e7c7      	b.n	8006434 <_free_r+0x28>
 80064a4:	b003      	add	sp, #12
 80064a6:	bd30      	pop	{r4, r5, pc}
 80064a8:	20000608 	.word	0x20000608

080064ac <_malloc_r>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	1ccd      	adds	r5, r1, #3
 80064b0:	f025 0503 	bic.w	r5, r5, #3
 80064b4:	3508      	adds	r5, #8
 80064b6:	2d0c      	cmp	r5, #12
 80064b8:	bf38      	it	cc
 80064ba:	250c      	movcc	r5, #12
 80064bc:	2d00      	cmp	r5, #0
 80064be:	4606      	mov	r6, r0
 80064c0:	db01      	blt.n	80064c6 <_malloc_r+0x1a>
 80064c2:	42a9      	cmp	r1, r5
 80064c4:	d903      	bls.n	80064ce <_malloc_r+0x22>
 80064c6:	230c      	movs	r3, #12
 80064c8:	6033      	str	r3, [r6, #0]
 80064ca:	2000      	movs	r0, #0
 80064cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ce:	f002 f853 	bl	8008578 <__malloc_lock>
 80064d2:	4921      	ldr	r1, [pc, #132]	; (8006558 <_malloc_r+0xac>)
 80064d4:	680a      	ldr	r2, [r1, #0]
 80064d6:	4614      	mov	r4, r2
 80064d8:	b99c      	cbnz	r4, 8006502 <_malloc_r+0x56>
 80064da:	4f20      	ldr	r7, [pc, #128]	; (800655c <_malloc_r+0xb0>)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	b923      	cbnz	r3, 80064ea <_malloc_r+0x3e>
 80064e0:	4621      	mov	r1, r4
 80064e2:	4630      	mov	r0, r6
 80064e4:	f000 fca6 	bl	8006e34 <_sbrk_r>
 80064e8:	6038      	str	r0, [r7, #0]
 80064ea:	4629      	mov	r1, r5
 80064ec:	4630      	mov	r0, r6
 80064ee:	f000 fca1 	bl	8006e34 <_sbrk_r>
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d123      	bne.n	800653e <_malloc_r+0x92>
 80064f6:	230c      	movs	r3, #12
 80064f8:	6033      	str	r3, [r6, #0]
 80064fa:	4630      	mov	r0, r6
 80064fc:	f002 f842 	bl	8008584 <__malloc_unlock>
 8006500:	e7e3      	b.n	80064ca <_malloc_r+0x1e>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	1b5b      	subs	r3, r3, r5
 8006506:	d417      	bmi.n	8006538 <_malloc_r+0x8c>
 8006508:	2b0b      	cmp	r3, #11
 800650a:	d903      	bls.n	8006514 <_malloc_r+0x68>
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	441c      	add	r4, r3
 8006510:	6025      	str	r5, [r4, #0]
 8006512:	e004      	b.n	800651e <_malloc_r+0x72>
 8006514:	6863      	ldr	r3, [r4, #4]
 8006516:	42a2      	cmp	r2, r4
 8006518:	bf0c      	ite	eq
 800651a:	600b      	streq	r3, [r1, #0]
 800651c:	6053      	strne	r3, [r2, #4]
 800651e:	4630      	mov	r0, r6
 8006520:	f002 f830 	bl	8008584 <__malloc_unlock>
 8006524:	f104 000b 	add.w	r0, r4, #11
 8006528:	1d23      	adds	r3, r4, #4
 800652a:	f020 0007 	bic.w	r0, r0, #7
 800652e:	1ac2      	subs	r2, r0, r3
 8006530:	d0cc      	beq.n	80064cc <_malloc_r+0x20>
 8006532:	1a1b      	subs	r3, r3, r0
 8006534:	50a3      	str	r3, [r4, r2]
 8006536:	e7c9      	b.n	80064cc <_malloc_r+0x20>
 8006538:	4622      	mov	r2, r4
 800653a:	6864      	ldr	r4, [r4, #4]
 800653c:	e7cc      	b.n	80064d8 <_malloc_r+0x2c>
 800653e:	1cc4      	adds	r4, r0, #3
 8006540:	f024 0403 	bic.w	r4, r4, #3
 8006544:	42a0      	cmp	r0, r4
 8006546:	d0e3      	beq.n	8006510 <_malloc_r+0x64>
 8006548:	1a21      	subs	r1, r4, r0
 800654a:	4630      	mov	r0, r6
 800654c:	f000 fc72 	bl	8006e34 <_sbrk_r>
 8006550:	3001      	adds	r0, #1
 8006552:	d1dd      	bne.n	8006510 <_malloc_r+0x64>
 8006554:	e7cf      	b.n	80064f6 <_malloc_r+0x4a>
 8006556:	bf00      	nop
 8006558:	20000608 	.word	0x20000608
 800655c:	2000060c 	.word	0x2000060c

08006560 <__cvt>:
 8006560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006564:	ec55 4b10 	vmov	r4, r5, d0
 8006568:	2d00      	cmp	r5, #0
 800656a:	460e      	mov	r6, r1
 800656c:	4619      	mov	r1, r3
 800656e:	462b      	mov	r3, r5
 8006570:	bfbb      	ittet	lt
 8006572:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006576:	461d      	movlt	r5, r3
 8006578:	2300      	movge	r3, #0
 800657a:	232d      	movlt	r3, #45	; 0x2d
 800657c:	700b      	strb	r3, [r1, #0]
 800657e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006580:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006584:	4691      	mov	r9, r2
 8006586:	f023 0820 	bic.w	r8, r3, #32
 800658a:	bfbc      	itt	lt
 800658c:	4622      	movlt	r2, r4
 800658e:	4614      	movlt	r4, r2
 8006590:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006594:	d005      	beq.n	80065a2 <__cvt+0x42>
 8006596:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800659a:	d100      	bne.n	800659e <__cvt+0x3e>
 800659c:	3601      	adds	r6, #1
 800659e:	2102      	movs	r1, #2
 80065a0:	e000      	b.n	80065a4 <__cvt+0x44>
 80065a2:	2103      	movs	r1, #3
 80065a4:	ab03      	add	r3, sp, #12
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	ab02      	add	r3, sp, #8
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	ec45 4b10 	vmov	d0, r4, r5
 80065b0:	4653      	mov	r3, sl
 80065b2:	4632      	mov	r2, r6
 80065b4:	f001 f8d0 	bl	8007758 <_dtoa_r>
 80065b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065bc:	4607      	mov	r7, r0
 80065be:	d102      	bne.n	80065c6 <__cvt+0x66>
 80065c0:	f019 0f01 	tst.w	r9, #1
 80065c4:	d022      	beq.n	800660c <__cvt+0xac>
 80065c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065ca:	eb07 0906 	add.w	r9, r7, r6
 80065ce:	d110      	bne.n	80065f2 <__cvt+0x92>
 80065d0:	783b      	ldrb	r3, [r7, #0]
 80065d2:	2b30      	cmp	r3, #48	; 0x30
 80065d4:	d10a      	bne.n	80065ec <__cvt+0x8c>
 80065d6:	2200      	movs	r2, #0
 80065d8:	2300      	movs	r3, #0
 80065da:	4620      	mov	r0, r4
 80065dc:	4629      	mov	r1, r5
 80065de:	f7fa faa3 	bl	8000b28 <__aeabi_dcmpeq>
 80065e2:	b918      	cbnz	r0, 80065ec <__cvt+0x8c>
 80065e4:	f1c6 0601 	rsb	r6, r6, #1
 80065e8:	f8ca 6000 	str.w	r6, [sl]
 80065ec:	f8da 3000 	ldr.w	r3, [sl]
 80065f0:	4499      	add	r9, r3
 80065f2:	2200      	movs	r2, #0
 80065f4:	2300      	movs	r3, #0
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7fa fa95 	bl	8000b28 <__aeabi_dcmpeq>
 80065fe:	b108      	cbz	r0, 8006604 <__cvt+0xa4>
 8006600:	f8cd 900c 	str.w	r9, [sp, #12]
 8006604:	2230      	movs	r2, #48	; 0x30
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	454b      	cmp	r3, r9
 800660a:	d307      	bcc.n	800661c <__cvt+0xbc>
 800660c:	9b03      	ldr	r3, [sp, #12]
 800660e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006610:	1bdb      	subs	r3, r3, r7
 8006612:	4638      	mov	r0, r7
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	b004      	add	sp, #16
 8006618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661c:	1c59      	adds	r1, r3, #1
 800661e:	9103      	str	r1, [sp, #12]
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	e7f0      	b.n	8006606 <__cvt+0xa6>

08006624 <__exponent>:
 8006624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006626:	4603      	mov	r3, r0
 8006628:	2900      	cmp	r1, #0
 800662a:	bfb8      	it	lt
 800662c:	4249      	neglt	r1, r1
 800662e:	f803 2b02 	strb.w	r2, [r3], #2
 8006632:	bfb4      	ite	lt
 8006634:	222d      	movlt	r2, #45	; 0x2d
 8006636:	222b      	movge	r2, #43	; 0x2b
 8006638:	2909      	cmp	r1, #9
 800663a:	7042      	strb	r2, [r0, #1]
 800663c:	dd2a      	ble.n	8006694 <__exponent+0x70>
 800663e:	f10d 0407 	add.w	r4, sp, #7
 8006642:	46a4      	mov	ip, r4
 8006644:	270a      	movs	r7, #10
 8006646:	46a6      	mov	lr, r4
 8006648:	460a      	mov	r2, r1
 800664a:	fb91 f6f7 	sdiv	r6, r1, r7
 800664e:	fb07 1516 	mls	r5, r7, r6, r1
 8006652:	3530      	adds	r5, #48	; 0x30
 8006654:	2a63      	cmp	r2, #99	; 0x63
 8006656:	f104 34ff 	add.w	r4, r4, #4294967295
 800665a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800665e:	4631      	mov	r1, r6
 8006660:	dcf1      	bgt.n	8006646 <__exponent+0x22>
 8006662:	3130      	adds	r1, #48	; 0x30
 8006664:	f1ae 0502 	sub.w	r5, lr, #2
 8006668:	f804 1c01 	strb.w	r1, [r4, #-1]
 800666c:	1c44      	adds	r4, r0, #1
 800666e:	4629      	mov	r1, r5
 8006670:	4561      	cmp	r1, ip
 8006672:	d30a      	bcc.n	800668a <__exponent+0x66>
 8006674:	f10d 0209 	add.w	r2, sp, #9
 8006678:	eba2 020e 	sub.w	r2, r2, lr
 800667c:	4565      	cmp	r5, ip
 800667e:	bf88      	it	hi
 8006680:	2200      	movhi	r2, #0
 8006682:	4413      	add	r3, r2
 8006684:	1a18      	subs	r0, r3, r0
 8006686:	b003      	add	sp, #12
 8006688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800668a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800668e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006692:	e7ed      	b.n	8006670 <__exponent+0x4c>
 8006694:	2330      	movs	r3, #48	; 0x30
 8006696:	3130      	adds	r1, #48	; 0x30
 8006698:	7083      	strb	r3, [r0, #2]
 800669a:	70c1      	strb	r1, [r0, #3]
 800669c:	1d03      	adds	r3, r0, #4
 800669e:	e7f1      	b.n	8006684 <__exponent+0x60>

080066a0 <_printf_float>:
 80066a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a4:	ed2d 8b02 	vpush	{d8}
 80066a8:	b08d      	sub	sp, #52	; 0x34
 80066aa:	460c      	mov	r4, r1
 80066ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066b0:	4616      	mov	r6, r2
 80066b2:	461f      	mov	r7, r3
 80066b4:	4605      	mov	r5, r0
 80066b6:	f001 ff43 	bl	8008540 <_localeconv_r>
 80066ba:	f8d0 a000 	ldr.w	sl, [r0]
 80066be:	4650      	mov	r0, sl
 80066c0:	f7f9 fdb0 	bl	8000224 <strlen>
 80066c4:	2300      	movs	r3, #0
 80066c6:	930a      	str	r3, [sp, #40]	; 0x28
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	9305      	str	r3, [sp, #20]
 80066cc:	f8d8 3000 	ldr.w	r3, [r8]
 80066d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80066d4:	3307      	adds	r3, #7
 80066d6:	f023 0307 	bic.w	r3, r3, #7
 80066da:	f103 0208 	add.w	r2, r3, #8
 80066de:	f8c8 2000 	str.w	r2, [r8]
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066f2:	9307      	str	r3, [sp, #28]
 80066f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80066f8:	ee08 0a10 	vmov	s16, r0
 80066fc:	4b9f      	ldr	r3, [pc, #636]	; (800697c <_printf_float+0x2dc>)
 80066fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006702:	f04f 32ff 	mov.w	r2, #4294967295
 8006706:	f7fa fa41 	bl	8000b8c <__aeabi_dcmpun>
 800670a:	bb88      	cbnz	r0, 8006770 <_printf_float+0xd0>
 800670c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006710:	4b9a      	ldr	r3, [pc, #616]	; (800697c <_printf_float+0x2dc>)
 8006712:	f04f 32ff 	mov.w	r2, #4294967295
 8006716:	f7fa fa1b 	bl	8000b50 <__aeabi_dcmple>
 800671a:	bb48      	cbnz	r0, 8006770 <_printf_float+0xd0>
 800671c:	2200      	movs	r2, #0
 800671e:	2300      	movs	r3, #0
 8006720:	4640      	mov	r0, r8
 8006722:	4649      	mov	r1, r9
 8006724:	f7fa fa0a 	bl	8000b3c <__aeabi_dcmplt>
 8006728:	b110      	cbz	r0, 8006730 <_printf_float+0x90>
 800672a:	232d      	movs	r3, #45	; 0x2d
 800672c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006730:	4b93      	ldr	r3, [pc, #588]	; (8006980 <_printf_float+0x2e0>)
 8006732:	4894      	ldr	r0, [pc, #592]	; (8006984 <_printf_float+0x2e4>)
 8006734:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006738:	bf94      	ite	ls
 800673a:	4698      	movls	r8, r3
 800673c:	4680      	movhi	r8, r0
 800673e:	2303      	movs	r3, #3
 8006740:	6123      	str	r3, [r4, #16]
 8006742:	9b05      	ldr	r3, [sp, #20]
 8006744:	f023 0204 	bic.w	r2, r3, #4
 8006748:	6022      	str	r2, [r4, #0]
 800674a:	f04f 0900 	mov.w	r9, #0
 800674e:	9700      	str	r7, [sp, #0]
 8006750:	4633      	mov	r3, r6
 8006752:	aa0b      	add	r2, sp, #44	; 0x2c
 8006754:	4621      	mov	r1, r4
 8006756:	4628      	mov	r0, r5
 8006758:	f000 f9d8 	bl	8006b0c <_printf_common>
 800675c:	3001      	adds	r0, #1
 800675e:	f040 8090 	bne.w	8006882 <_printf_float+0x1e2>
 8006762:	f04f 30ff 	mov.w	r0, #4294967295
 8006766:	b00d      	add	sp, #52	; 0x34
 8006768:	ecbd 8b02 	vpop	{d8}
 800676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006770:	4642      	mov	r2, r8
 8006772:	464b      	mov	r3, r9
 8006774:	4640      	mov	r0, r8
 8006776:	4649      	mov	r1, r9
 8006778:	f7fa fa08 	bl	8000b8c <__aeabi_dcmpun>
 800677c:	b140      	cbz	r0, 8006790 <_printf_float+0xf0>
 800677e:	464b      	mov	r3, r9
 8006780:	2b00      	cmp	r3, #0
 8006782:	bfbc      	itt	lt
 8006784:	232d      	movlt	r3, #45	; 0x2d
 8006786:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800678a:	487f      	ldr	r0, [pc, #508]	; (8006988 <_printf_float+0x2e8>)
 800678c:	4b7f      	ldr	r3, [pc, #508]	; (800698c <_printf_float+0x2ec>)
 800678e:	e7d1      	b.n	8006734 <_printf_float+0x94>
 8006790:	6863      	ldr	r3, [r4, #4]
 8006792:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006796:	9206      	str	r2, [sp, #24]
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	d13f      	bne.n	800681c <_printf_float+0x17c>
 800679c:	2306      	movs	r3, #6
 800679e:	6063      	str	r3, [r4, #4]
 80067a0:	9b05      	ldr	r3, [sp, #20]
 80067a2:	6861      	ldr	r1, [r4, #4]
 80067a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067a8:	2300      	movs	r3, #0
 80067aa:	9303      	str	r3, [sp, #12]
 80067ac:	ab0a      	add	r3, sp, #40	; 0x28
 80067ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80067b2:	ab09      	add	r3, sp, #36	; 0x24
 80067b4:	ec49 8b10 	vmov	d0, r8, r9
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	6022      	str	r2, [r4, #0]
 80067bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067c0:	4628      	mov	r0, r5
 80067c2:	f7ff fecd 	bl	8006560 <__cvt>
 80067c6:	9b06      	ldr	r3, [sp, #24]
 80067c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067ca:	2b47      	cmp	r3, #71	; 0x47
 80067cc:	4680      	mov	r8, r0
 80067ce:	d108      	bne.n	80067e2 <_printf_float+0x142>
 80067d0:	1cc8      	adds	r0, r1, #3
 80067d2:	db02      	blt.n	80067da <_printf_float+0x13a>
 80067d4:	6863      	ldr	r3, [r4, #4]
 80067d6:	4299      	cmp	r1, r3
 80067d8:	dd41      	ble.n	800685e <_printf_float+0x1be>
 80067da:	f1ab 0b02 	sub.w	fp, fp, #2
 80067de:	fa5f fb8b 	uxtb.w	fp, fp
 80067e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067e6:	d820      	bhi.n	800682a <_printf_float+0x18a>
 80067e8:	3901      	subs	r1, #1
 80067ea:	465a      	mov	r2, fp
 80067ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067f0:	9109      	str	r1, [sp, #36]	; 0x24
 80067f2:	f7ff ff17 	bl	8006624 <__exponent>
 80067f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067f8:	1813      	adds	r3, r2, r0
 80067fa:	2a01      	cmp	r2, #1
 80067fc:	4681      	mov	r9, r0
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	dc02      	bgt.n	8006808 <_printf_float+0x168>
 8006802:	6822      	ldr	r2, [r4, #0]
 8006804:	07d2      	lsls	r2, r2, #31
 8006806:	d501      	bpl.n	800680c <_printf_float+0x16c>
 8006808:	3301      	adds	r3, #1
 800680a:	6123      	str	r3, [r4, #16]
 800680c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006810:	2b00      	cmp	r3, #0
 8006812:	d09c      	beq.n	800674e <_printf_float+0xae>
 8006814:	232d      	movs	r3, #45	; 0x2d
 8006816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800681a:	e798      	b.n	800674e <_printf_float+0xae>
 800681c:	9a06      	ldr	r2, [sp, #24]
 800681e:	2a47      	cmp	r2, #71	; 0x47
 8006820:	d1be      	bne.n	80067a0 <_printf_float+0x100>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1bc      	bne.n	80067a0 <_printf_float+0x100>
 8006826:	2301      	movs	r3, #1
 8006828:	e7b9      	b.n	800679e <_printf_float+0xfe>
 800682a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800682e:	d118      	bne.n	8006862 <_printf_float+0x1c2>
 8006830:	2900      	cmp	r1, #0
 8006832:	6863      	ldr	r3, [r4, #4]
 8006834:	dd0b      	ble.n	800684e <_printf_float+0x1ae>
 8006836:	6121      	str	r1, [r4, #16]
 8006838:	b913      	cbnz	r3, 8006840 <_printf_float+0x1a0>
 800683a:	6822      	ldr	r2, [r4, #0]
 800683c:	07d0      	lsls	r0, r2, #31
 800683e:	d502      	bpl.n	8006846 <_printf_float+0x1a6>
 8006840:	3301      	adds	r3, #1
 8006842:	440b      	add	r3, r1
 8006844:	6123      	str	r3, [r4, #16]
 8006846:	65a1      	str	r1, [r4, #88]	; 0x58
 8006848:	f04f 0900 	mov.w	r9, #0
 800684c:	e7de      	b.n	800680c <_printf_float+0x16c>
 800684e:	b913      	cbnz	r3, 8006856 <_printf_float+0x1b6>
 8006850:	6822      	ldr	r2, [r4, #0]
 8006852:	07d2      	lsls	r2, r2, #31
 8006854:	d501      	bpl.n	800685a <_printf_float+0x1ba>
 8006856:	3302      	adds	r3, #2
 8006858:	e7f4      	b.n	8006844 <_printf_float+0x1a4>
 800685a:	2301      	movs	r3, #1
 800685c:	e7f2      	b.n	8006844 <_printf_float+0x1a4>
 800685e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006862:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006864:	4299      	cmp	r1, r3
 8006866:	db05      	blt.n	8006874 <_printf_float+0x1d4>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	6121      	str	r1, [r4, #16]
 800686c:	07d8      	lsls	r0, r3, #31
 800686e:	d5ea      	bpl.n	8006846 <_printf_float+0x1a6>
 8006870:	1c4b      	adds	r3, r1, #1
 8006872:	e7e7      	b.n	8006844 <_printf_float+0x1a4>
 8006874:	2900      	cmp	r1, #0
 8006876:	bfd4      	ite	le
 8006878:	f1c1 0202 	rsble	r2, r1, #2
 800687c:	2201      	movgt	r2, #1
 800687e:	4413      	add	r3, r2
 8006880:	e7e0      	b.n	8006844 <_printf_float+0x1a4>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	055a      	lsls	r2, r3, #21
 8006886:	d407      	bmi.n	8006898 <_printf_float+0x1f8>
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	4642      	mov	r2, r8
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	47b8      	blx	r7
 8006892:	3001      	adds	r0, #1
 8006894:	d12c      	bne.n	80068f0 <_printf_float+0x250>
 8006896:	e764      	b.n	8006762 <_printf_float+0xc2>
 8006898:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800689c:	f240 80e0 	bls.w	8006a60 <_printf_float+0x3c0>
 80068a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068a4:	2200      	movs	r2, #0
 80068a6:	2300      	movs	r3, #0
 80068a8:	f7fa f93e 	bl	8000b28 <__aeabi_dcmpeq>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d034      	beq.n	800691a <_printf_float+0x27a>
 80068b0:	4a37      	ldr	r2, [pc, #220]	; (8006990 <_printf_float+0x2f0>)
 80068b2:	2301      	movs	r3, #1
 80068b4:	4631      	mov	r1, r6
 80068b6:	4628      	mov	r0, r5
 80068b8:	47b8      	blx	r7
 80068ba:	3001      	adds	r0, #1
 80068bc:	f43f af51 	beq.w	8006762 <_printf_float+0xc2>
 80068c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068c4:	429a      	cmp	r2, r3
 80068c6:	db02      	blt.n	80068ce <_printf_float+0x22e>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	07d8      	lsls	r0, r3, #31
 80068cc:	d510      	bpl.n	80068f0 <_printf_float+0x250>
 80068ce:	ee18 3a10 	vmov	r3, s16
 80068d2:	4652      	mov	r2, sl
 80068d4:	4631      	mov	r1, r6
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	f43f af41 	beq.w	8006762 <_printf_float+0xc2>
 80068e0:	f04f 0800 	mov.w	r8, #0
 80068e4:	f104 091a 	add.w	r9, r4, #26
 80068e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ea:	3b01      	subs	r3, #1
 80068ec:	4543      	cmp	r3, r8
 80068ee:	dc09      	bgt.n	8006904 <_printf_float+0x264>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	079b      	lsls	r3, r3, #30
 80068f4:	f100 8105 	bmi.w	8006b02 <_printf_float+0x462>
 80068f8:	68e0      	ldr	r0, [r4, #12]
 80068fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068fc:	4298      	cmp	r0, r3
 80068fe:	bfb8      	it	lt
 8006900:	4618      	movlt	r0, r3
 8006902:	e730      	b.n	8006766 <_printf_float+0xc6>
 8006904:	2301      	movs	r3, #1
 8006906:	464a      	mov	r2, r9
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f af27 	beq.w	8006762 <_printf_float+0xc2>
 8006914:	f108 0801 	add.w	r8, r8, #1
 8006918:	e7e6      	b.n	80068e8 <_printf_float+0x248>
 800691a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	dc39      	bgt.n	8006994 <_printf_float+0x2f4>
 8006920:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <_printf_float+0x2f0>)
 8006922:	2301      	movs	r3, #1
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	47b8      	blx	r7
 800692a:	3001      	adds	r0, #1
 800692c:	f43f af19 	beq.w	8006762 <_printf_float+0xc2>
 8006930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006934:	4313      	orrs	r3, r2
 8006936:	d102      	bne.n	800693e <_printf_float+0x29e>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	07d9      	lsls	r1, r3, #31
 800693c:	d5d8      	bpl.n	80068f0 <_printf_float+0x250>
 800693e:	ee18 3a10 	vmov	r3, s16
 8006942:	4652      	mov	r2, sl
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	f43f af09 	beq.w	8006762 <_printf_float+0xc2>
 8006950:	f04f 0900 	mov.w	r9, #0
 8006954:	f104 0a1a 	add.w	sl, r4, #26
 8006958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695a:	425b      	negs	r3, r3
 800695c:	454b      	cmp	r3, r9
 800695e:	dc01      	bgt.n	8006964 <_printf_float+0x2c4>
 8006960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006962:	e792      	b.n	800688a <_printf_float+0x1ea>
 8006964:	2301      	movs	r3, #1
 8006966:	4652      	mov	r2, sl
 8006968:	4631      	mov	r1, r6
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	f43f aef7 	beq.w	8006762 <_printf_float+0xc2>
 8006974:	f109 0901 	add.w	r9, r9, #1
 8006978:	e7ee      	b.n	8006958 <_printf_float+0x2b8>
 800697a:	bf00      	nop
 800697c:	7fefffff 	.word	0x7fefffff
 8006980:	0800ad04 	.word	0x0800ad04
 8006984:	0800ad08 	.word	0x0800ad08
 8006988:	0800ad10 	.word	0x0800ad10
 800698c:	0800ad0c 	.word	0x0800ad0c
 8006990:	0800b10c 	.word	0x0800b10c
 8006994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006998:	429a      	cmp	r2, r3
 800699a:	bfa8      	it	ge
 800699c:	461a      	movge	r2, r3
 800699e:	2a00      	cmp	r2, #0
 80069a0:	4691      	mov	r9, r2
 80069a2:	dc37      	bgt.n	8006a14 <_printf_float+0x374>
 80069a4:	f04f 0b00 	mov.w	fp, #0
 80069a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ac:	f104 021a 	add.w	r2, r4, #26
 80069b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069b2:	9305      	str	r3, [sp, #20]
 80069b4:	eba3 0309 	sub.w	r3, r3, r9
 80069b8:	455b      	cmp	r3, fp
 80069ba:	dc33      	bgt.n	8006a24 <_printf_float+0x384>
 80069bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069c0:	429a      	cmp	r2, r3
 80069c2:	db3b      	blt.n	8006a3c <_printf_float+0x39c>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	07da      	lsls	r2, r3, #31
 80069c8:	d438      	bmi.n	8006a3c <_printf_float+0x39c>
 80069ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069cc:	9b05      	ldr	r3, [sp, #20]
 80069ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	eba2 0901 	sub.w	r9, r2, r1
 80069d6:	4599      	cmp	r9, r3
 80069d8:	bfa8      	it	ge
 80069da:	4699      	movge	r9, r3
 80069dc:	f1b9 0f00 	cmp.w	r9, #0
 80069e0:	dc35      	bgt.n	8006a4e <_printf_float+0x3ae>
 80069e2:	f04f 0800 	mov.w	r8, #0
 80069e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ea:	f104 0a1a 	add.w	sl, r4, #26
 80069ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069f2:	1a9b      	subs	r3, r3, r2
 80069f4:	eba3 0309 	sub.w	r3, r3, r9
 80069f8:	4543      	cmp	r3, r8
 80069fa:	f77f af79 	ble.w	80068f0 <_printf_float+0x250>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4652      	mov	r2, sl
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f aeaa 	beq.w	8006762 <_printf_float+0xc2>
 8006a0e:	f108 0801 	add.w	r8, r8, #1
 8006a12:	e7ec      	b.n	80069ee <_printf_float+0x34e>
 8006a14:	4613      	mov	r3, r2
 8006a16:	4631      	mov	r1, r6
 8006a18:	4642      	mov	r2, r8
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d1c0      	bne.n	80069a4 <_printf_float+0x304>
 8006a22:	e69e      	b.n	8006762 <_printf_float+0xc2>
 8006a24:	2301      	movs	r3, #1
 8006a26:	4631      	mov	r1, r6
 8006a28:	4628      	mov	r0, r5
 8006a2a:	9205      	str	r2, [sp, #20]
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f43f ae97 	beq.w	8006762 <_printf_float+0xc2>
 8006a34:	9a05      	ldr	r2, [sp, #20]
 8006a36:	f10b 0b01 	add.w	fp, fp, #1
 8006a3a:	e7b9      	b.n	80069b0 <_printf_float+0x310>
 8006a3c:	ee18 3a10 	vmov	r3, s16
 8006a40:	4652      	mov	r2, sl
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b8      	blx	r7
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d1be      	bne.n	80069ca <_printf_float+0x32a>
 8006a4c:	e689      	b.n	8006762 <_printf_float+0xc2>
 8006a4e:	9a05      	ldr	r2, [sp, #20]
 8006a50:	464b      	mov	r3, r9
 8006a52:	4442      	add	r2, r8
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d1c1      	bne.n	80069e2 <_printf_float+0x342>
 8006a5e:	e680      	b.n	8006762 <_printf_float+0xc2>
 8006a60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a62:	2a01      	cmp	r2, #1
 8006a64:	dc01      	bgt.n	8006a6a <_printf_float+0x3ca>
 8006a66:	07db      	lsls	r3, r3, #31
 8006a68:	d538      	bpl.n	8006adc <_printf_float+0x43c>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	f43f ae74 	beq.w	8006762 <_printf_float+0xc2>
 8006a7a:	ee18 3a10 	vmov	r3, s16
 8006a7e:	4652      	mov	r2, sl
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	f43f ae6b 	beq.w	8006762 <_printf_float+0xc2>
 8006a8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a90:	2200      	movs	r2, #0
 8006a92:	2300      	movs	r3, #0
 8006a94:	f7fa f848 	bl	8000b28 <__aeabi_dcmpeq>
 8006a98:	b9d8      	cbnz	r0, 8006ad2 <_printf_float+0x432>
 8006a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a9c:	f108 0201 	add.w	r2, r8, #1
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	47b8      	blx	r7
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d10e      	bne.n	8006aca <_printf_float+0x42a>
 8006aac:	e659      	b.n	8006762 <_printf_float+0xc2>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	4652      	mov	r2, sl
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4628      	mov	r0, r5
 8006ab6:	47b8      	blx	r7
 8006ab8:	3001      	adds	r0, #1
 8006aba:	f43f ae52 	beq.w	8006762 <_printf_float+0xc2>
 8006abe:	f108 0801 	add.w	r8, r8, #1
 8006ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	4543      	cmp	r3, r8
 8006ac8:	dcf1      	bgt.n	8006aae <_printf_float+0x40e>
 8006aca:	464b      	mov	r3, r9
 8006acc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ad0:	e6dc      	b.n	800688c <_printf_float+0x1ec>
 8006ad2:	f04f 0800 	mov.w	r8, #0
 8006ad6:	f104 0a1a 	add.w	sl, r4, #26
 8006ada:	e7f2      	b.n	8006ac2 <_printf_float+0x422>
 8006adc:	2301      	movs	r3, #1
 8006ade:	4642      	mov	r2, r8
 8006ae0:	e7df      	b.n	8006aa2 <_printf_float+0x402>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	464a      	mov	r2, r9
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	4628      	mov	r0, r5
 8006aea:	47b8      	blx	r7
 8006aec:	3001      	adds	r0, #1
 8006aee:	f43f ae38 	beq.w	8006762 <_printf_float+0xc2>
 8006af2:	f108 0801 	add.w	r8, r8, #1
 8006af6:	68e3      	ldr	r3, [r4, #12]
 8006af8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006afa:	1a5b      	subs	r3, r3, r1
 8006afc:	4543      	cmp	r3, r8
 8006afe:	dcf0      	bgt.n	8006ae2 <_printf_float+0x442>
 8006b00:	e6fa      	b.n	80068f8 <_printf_float+0x258>
 8006b02:	f04f 0800 	mov.w	r8, #0
 8006b06:	f104 0919 	add.w	r9, r4, #25
 8006b0a:	e7f4      	b.n	8006af6 <_printf_float+0x456>

08006b0c <_printf_common>:
 8006b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b10:	4616      	mov	r6, r2
 8006b12:	4699      	mov	r9, r3
 8006b14:	688a      	ldr	r2, [r1, #8]
 8006b16:	690b      	ldr	r3, [r1, #16]
 8006b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	bfb8      	it	lt
 8006b20:	4613      	movlt	r3, r2
 8006b22:	6033      	str	r3, [r6, #0]
 8006b24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b28:	4607      	mov	r7, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	b10a      	cbz	r2, 8006b32 <_printf_common+0x26>
 8006b2e:	3301      	adds	r3, #1
 8006b30:	6033      	str	r3, [r6, #0]
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	0699      	lsls	r1, r3, #26
 8006b36:	bf42      	ittt	mi
 8006b38:	6833      	ldrmi	r3, [r6, #0]
 8006b3a:	3302      	addmi	r3, #2
 8006b3c:	6033      	strmi	r3, [r6, #0]
 8006b3e:	6825      	ldr	r5, [r4, #0]
 8006b40:	f015 0506 	ands.w	r5, r5, #6
 8006b44:	d106      	bne.n	8006b54 <_printf_common+0x48>
 8006b46:	f104 0a19 	add.w	sl, r4, #25
 8006b4a:	68e3      	ldr	r3, [r4, #12]
 8006b4c:	6832      	ldr	r2, [r6, #0]
 8006b4e:	1a9b      	subs	r3, r3, r2
 8006b50:	42ab      	cmp	r3, r5
 8006b52:	dc26      	bgt.n	8006ba2 <_printf_common+0x96>
 8006b54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b58:	1e13      	subs	r3, r2, #0
 8006b5a:	6822      	ldr	r2, [r4, #0]
 8006b5c:	bf18      	it	ne
 8006b5e:	2301      	movne	r3, #1
 8006b60:	0692      	lsls	r2, r2, #26
 8006b62:	d42b      	bmi.n	8006bbc <_printf_common+0xb0>
 8006b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b68:	4649      	mov	r1, r9
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	47c0      	blx	r8
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d01e      	beq.n	8006bb0 <_printf_common+0xa4>
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	68e5      	ldr	r5, [r4, #12]
 8006b76:	6832      	ldr	r2, [r6, #0]
 8006b78:	f003 0306 	and.w	r3, r3, #6
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	bf08      	it	eq
 8006b80:	1aad      	subeq	r5, r5, r2
 8006b82:	68a3      	ldr	r3, [r4, #8]
 8006b84:	6922      	ldr	r2, [r4, #16]
 8006b86:	bf0c      	ite	eq
 8006b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b8c:	2500      	movne	r5, #0
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	bfc4      	itt	gt
 8006b92:	1a9b      	subgt	r3, r3, r2
 8006b94:	18ed      	addgt	r5, r5, r3
 8006b96:	2600      	movs	r6, #0
 8006b98:	341a      	adds	r4, #26
 8006b9a:	42b5      	cmp	r5, r6
 8006b9c:	d11a      	bne.n	8006bd4 <_printf_common+0xc8>
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	e008      	b.n	8006bb4 <_printf_common+0xa8>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	4652      	mov	r2, sl
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	4638      	mov	r0, r7
 8006baa:	47c0      	blx	r8
 8006bac:	3001      	adds	r0, #1
 8006bae:	d103      	bne.n	8006bb8 <_printf_common+0xac>
 8006bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb8:	3501      	adds	r5, #1
 8006bba:	e7c6      	b.n	8006b4a <_printf_common+0x3e>
 8006bbc:	18e1      	adds	r1, r4, r3
 8006bbe:	1c5a      	adds	r2, r3, #1
 8006bc0:	2030      	movs	r0, #48	; 0x30
 8006bc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bc6:	4422      	add	r2, r4
 8006bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	e7c7      	b.n	8006b64 <_printf_common+0x58>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	4622      	mov	r2, r4
 8006bd8:	4649      	mov	r1, r9
 8006bda:	4638      	mov	r0, r7
 8006bdc:	47c0      	blx	r8
 8006bde:	3001      	adds	r0, #1
 8006be0:	d0e6      	beq.n	8006bb0 <_printf_common+0xa4>
 8006be2:	3601      	adds	r6, #1
 8006be4:	e7d9      	b.n	8006b9a <_printf_common+0x8e>
	...

08006be8 <_printf_i>:
 8006be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bec:	460c      	mov	r4, r1
 8006bee:	4691      	mov	r9, r2
 8006bf0:	7e27      	ldrb	r7, [r4, #24]
 8006bf2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006bf4:	2f78      	cmp	r7, #120	; 0x78
 8006bf6:	4680      	mov	r8, r0
 8006bf8:	469a      	mov	sl, r3
 8006bfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bfe:	d807      	bhi.n	8006c10 <_printf_i+0x28>
 8006c00:	2f62      	cmp	r7, #98	; 0x62
 8006c02:	d80a      	bhi.n	8006c1a <_printf_i+0x32>
 8006c04:	2f00      	cmp	r7, #0
 8006c06:	f000 80d8 	beq.w	8006dba <_printf_i+0x1d2>
 8006c0a:	2f58      	cmp	r7, #88	; 0x58
 8006c0c:	f000 80a3 	beq.w	8006d56 <_printf_i+0x16e>
 8006c10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c18:	e03a      	b.n	8006c90 <_printf_i+0xa8>
 8006c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c1e:	2b15      	cmp	r3, #21
 8006c20:	d8f6      	bhi.n	8006c10 <_printf_i+0x28>
 8006c22:	a001      	add	r0, pc, #4	; (adr r0, 8006c28 <_printf_i+0x40>)
 8006c24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c28:	08006c81 	.word	0x08006c81
 8006c2c:	08006c95 	.word	0x08006c95
 8006c30:	08006c11 	.word	0x08006c11
 8006c34:	08006c11 	.word	0x08006c11
 8006c38:	08006c11 	.word	0x08006c11
 8006c3c:	08006c11 	.word	0x08006c11
 8006c40:	08006c95 	.word	0x08006c95
 8006c44:	08006c11 	.word	0x08006c11
 8006c48:	08006c11 	.word	0x08006c11
 8006c4c:	08006c11 	.word	0x08006c11
 8006c50:	08006c11 	.word	0x08006c11
 8006c54:	08006da1 	.word	0x08006da1
 8006c58:	08006cc5 	.word	0x08006cc5
 8006c5c:	08006d83 	.word	0x08006d83
 8006c60:	08006c11 	.word	0x08006c11
 8006c64:	08006c11 	.word	0x08006c11
 8006c68:	08006dc3 	.word	0x08006dc3
 8006c6c:	08006c11 	.word	0x08006c11
 8006c70:	08006cc5 	.word	0x08006cc5
 8006c74:	08006c11 	.word	0x08006c11
 8006c78:	08006c11 	.word	0x08006c11
 8006c7c:	08006d8b 	.word	0x08006d8b
 8006c80:	680b      	ldr	r3, [r1, #0]
 8006c82:	1d1a      	adds	r2, r3, #4
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	600a      	str	r2, [r1, #0]
 8006c88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c90:	2301      	movs	r3, #1
 8006c92:	e0a3      	b.n	8006ddc <_printf_i+0x1f4>
 8006c94:	6825      	ldr	r5, [r4, #0]
 8006c96:	6808      	ldr	r0, [r1, #0]
 8006c98:	062e      	lsls	r6, r5, #24
 8006c9a:	f100 0304 	add.w	r3, r0, #4
 8006c9e:	d50a      	bpl.n	8006cb6 <_printf_i+0xce>
 8006ca0:	6805      	ldr	r5, [r0, #0]
 8006ca2:	600b      	str	r3, [r1, #0]
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	da03      	bge.n	8006cb0 <_printf_i+0xc8>
 8006ca8:	232d      	movs	r3, #45	; 0x2d
 8006caa:	426d      	negs	r5, r5
 8006cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cb0:	485e      	ldr	r0, [pc, #376]	; (8006e2c <_printf_i+0x244>)
 8006cb2:	230a      	movs	r3, #10
 8006cb4:	e019      	b.n	8006cea <_printf_i+0x102>
 8006cb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006cba:	6805      	ldr	r5, [r0, #0]
 8006cbc:	600b      	str	r3, [r1, #0]
 8006cbe:	bf18      	it	ne
 8006cc0:	b22d      	sxthne	r5, r5
 8006cc2:	e7ef      	b.n	8006ca4 <_printf_i+0xbc>
 8006cc4:	680b      	ldr	r3, [r1, #0]
 8006cc6:	6825      	ldr	r5, [r4, #0]
 8006cc8:	1d18      	adds	r0, r3, #4
 8006cca:	6008      	str	r0, [r1, #0]
 8006ccc:	0628      	lsls	r0, r5, #24
 8006cce:	d501      	bpl.n	8006cd4 <_printf_i+0xec>
 8006cd0:	681d      	ldr	r5, [r3, #0]
 8006cd2:	e002      	b.n	8006cda <_printf_i+0xf2>
 8006cd4:	0669      	lsls	r1, r5, #25
 8006cd6:	d5fb      	bpl.n	8006cd0 <_printf_i+0xe8>
 8006cd8:	881d      	ldrh	r5, [r3, #0]
 8006cda:	4854      	ldr	r0, [pc, #336]	; (8006e2c <_printf_i+0x244>)
 8006cdc:	2f6f      	cmp	r7, #111	; 0x6f
 8006cde:	bf0c      	ite	eq
 8006ce0:	2308      	moveq	r3, #8
 8006ce2:	230a      	movne	r3, #10
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cea:	6866      	ldr	r6, [r4, #4]
 8006cec:	60a6      	str	r6, [r4, #8]
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	bfa2      	ittt	ge
 8006cf2:	6821      	ldrge	r1, [r4, #0]
 8006cf4:	f021 0104 	bicge.w	r1, r1, #4
 8006cf8:	6021      	strge	r1, [r4, #0]
 8006cfa:	b90d      	cbnz	r5, 8006d00 <_printf_i+0x118>
 8006cfc:	2e00      	cmp	r6, #0
 8006cfe:	d04d      	beq.n	8006d9c <_printf_i+0x1b4>
 8006d00:	4616      	mov	r6, r2
 8006d02:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d06:	fb03 5711 	mls	r7, r3, r1, r5
 8006d0a:	5dc7      	ldrb	r7, [r0, r7]
 8006d0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d10:	462f      	mov	r7, r5
 8006d12:	42bb      	cmp	r3, r7
 8006d14:	460d      	mov	r5, r1
 8006d16:	d9f4      	bls.n	8006d02 <_printf_i+0x11a>
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d10b      	bne.n	8006d34 <_printf_i+0x14c>
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	07df      	lsls	r7, r3, #31
 8006d20:	d508      	bpl.n	8006d34 <_printf_i+0x14c>
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	6861      	ldr	r1, [r4, #4]
 8006d26:	4299      	cmp	r1, r3
 8006d28:	bfde      	ittt	le
 8006d2a:	2330      	movle	r3, #48	; 0x30
 8006d2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d34:	1b92      	subs	r2, r2, r6
 8006d36:	6122      	str	r2, [r4, #16]
 8006d38:	f8cd a000 	str.w	sl, [sp]
 8006d3c:	464b      	mov	r3, r9
 8006d3e:	aa03      	add	r2, sp, #12
 8006d40:	4621      	mov	r1, r4
 8006d42:	4640      	mov	r0, r8
 8006d44:	f7ff fee2 	bl	8006b0c <_printf_common>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d14c      	bne.n	8006de6 <_printf_i+0x1fe>
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	b004      	add	sp, #16
 8006d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d56:	4835      	ldr	r0, [pc, #212]	; (8006e2c <_printf_i+0x244>)
 8006d58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	680e      	ldr	r6, [r1, #0]
 8006d60:	061f      	lsls	r7, r3, #24
 8006d62:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d66:	600e      	str	r6, [r1, #0]
 8006d68:	d514      	bpl.n	8006d94 <_printf_i+0x1ac>
 8006d6a:	07d9      	lsls	r1, r3, #31
 8006d6c:	bf44      	itt	mi
 8006d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d72:	6023      	strmi	r3, [r4, #0]
 8006d74:	b91d      	cbnz	r5, 8006d7e <_printf_i+0x196>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	f023 0320 	bic.w	r3, r3, #32
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	2310      	movs	r3, #16
 8006d80:	e7b0      	b.n	8006ce4 <_printf_i+0xfc>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	f043 0320 	orr.w	r3, r3, #32
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	2378      	movs	r3, #120	; 0x78
 8006d8c:	4828      	ldr	r0, [pc, #160]	; (8006e30 <_printf_i+0x248>)
 8006d8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d92:	e7e3      	b.n	8006d5c <_printf_i+0x174>
 8006d94:	065e      	lsls	r6, r3, #25
 8006d96:	bf48      	it	mi
 8006d98:	b2ad      	uxthmi	r5, r5
 8006d9a:	e7e6      	b.n	8006d6a <_printf_i+0x182>
 8006d9c:	4616      	mov	r6, r2
 8006d9e:	e7bb      	b.n	8006d18 <_printf_i+0x130>
 8006da0:	680b      	ldr	r3, [r1, #0]
 8006da2:	6826      	ldr	r6, [r4, #0]
 8006da4:	6960      	ldr	r0, [r4, #20]
 8006da6:	1d1d      	adds	r5, r3, #4
 8006da8:	600d      	str	r5, [r1, #0]
 8006daa:	0635      	lsls	r5, r6, #24
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	d501      	bpl.n	8006db4 <_printf_i+0x1cc>
 8006db0:	6018      	str	r0, [r3, #0]
 8006db2:	e002      	b.n	8006dba <_printf_i+0x1d2>
 8006db4:	0671      	lsls	r1, r6, #25
 8006db6:	d5fb      	bpl.n	8006db0 <_printf_i+0x1c8>
 8006db8:	8018      	strh	r0, [r3, #0]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6123      	str	r3, [r4, #16]
 8006dbe:	4616      	mov	r6, r2
 8006dc0:	e7ba      	b.n	8006d38 <_printf_i+0x150>
 8006dc2:	680b      	ldr	r3, [r1, #0]
 8006dc4:	1d1a      	adds	r2, r3, #4
 8006dc6:	600a      	str	r2, [r1, #0]
 8006dc8:	681e      	ldr	r6, [r3, #0]
 8006dca:	6862      	ldr	r2, [r4, #4]
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f7f9 fa36 	bl	8000240 <memchr>
 8006dd4:	b108      	cbz	r0, 8006dda <_printf_i+0x1f2>
 8006dd6:	1b80      	subs	r0, r0, r6
 8006dd8:	6060      	str	r0, [r4, #4]
 8006dda:	6863      	ldr	r3, [r4, #4]
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	2300      	movs	r3, #0
 8006de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de4:	e7a8      	b.n	8006d38 <_printf_i+0x150>
 8006de6:	6923      	ldr	r3, [r4, #16]
 8006de8:	4632      	mov	r2, r6
 8006dea:	4649      	mov	r1, r9
 8006dec:	4640      	mov	r0, r8
 8006dee:	47d0      	blx	sl
 8006df0:	3001      	adds	r0, #1
 8006df2:	d0ab      	beq.n	8006d4c <_printf_i+0x164>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	079b      	lsls	r3, r3, #30
 8006df8:	d413      	bmi.n	8006e22 <_printf_i+0x23a>
 8006dfa:	68e0      	ldr	r0, [r4, #12]
 8006dfc:	9b03      	ldr	r3, [sp, #12]
 8006dfe:	4298      	cmp	r0, r3
 8006e00:	bfb8      	it	lt
 8006e02:	4618      	movlt	r0, r3
 8006e04:	e7a4      	b.n	8006d50 <_printf_i+0x168>
 8006e06:	2301      	movs	r3, #1
 8006e08:	4632      	mov	r2, r6
 8006e0a:	4649      	mov	r1, r9
 8006e0c:	4640      	mov	r0, r8
 8006e0e:	47d0      	blx	sl
 8006e10:	3001      	adds	r0, #1
 8006e12:	d09b      	beq.n	8006d4c <_printf_i+0x164>
 8006e14:	3501      	adds	r5, #1
 8006e16:	68e3      	ldr	r3, [r4, #12]
 8006e18:	9903      	ldr	r1, [sp, #12]
 8006e1a:	1a5b      	subs	r3, r3, r1
 8006e1c:	42ab      	cmp	r3, r5
 8006e1e:	dcf2      	bgt.n	8006e06 <_printf_i+0x21e>
 8006e20:	e7eb      	b.n	8006dfa <_printf_i+0x212>
 8006e22:	2500      	movs	r5, #0
 8006e24:	f104 0619 	add.w	r6, r4, #25
 8006e28:	e7f5      	b.n	8006e16 <_printf_i+0x22e>
 8006e2a:	bf00      	nop
 8006e2c:	0800ad14 	.word	0x0800ad14
 8006e30:	0800ad25 	.word	0x0800ad25

08006e34 <_sbrk_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	4d06      	ldr	r5, [pc, #24]	; (8006e50 <_sbrk_r+0x1c>)
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4604      	mov	r4, r0
 8006e3c:	4608      	mov	r0, r1
 8006e3e:	602b      	str	r3, [r5, #0]
 8006e40:	f7fa fcd4 	bl	80017ec <_sbrk>
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d102      	bne.n	8006e4e <_sbrk_r+0x1a>
 8006e48:	682b      	ldr	r3, [r5, #0]
 8006e4a:	b103      	cbz	r3, 8006e4e <_sbrk_r+0x1a>
 8006e4c:	6023      	str	r3, [r4, #0]
 8006e4e:	bd38      	pop	{r3, r4, r5, pc}
 8006e50:	2000068c 	.word	0x2000068c

08006e54 <_raise_r>:
 8006e54:	291f      	cmp	r1, #31
 8006e56:	b538      	push	{r3, r4, r5, lr}
 8006e58:	4604      	mov	r4, r0
 8006e5a:	460d      	mov	r5, r1
 8006e5c:	d904      	bls.n	8006e68 <_raise_r+0x14>
 8006e5e:	2316      	movs	r3, #22
 8006e60:	6003      	str	r3, [r0, #0]
 8006e62:	f04f 30ff 	mov.w	r0, #4294967295
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e6a:	b112      	cbz	r2, 8006e72 <_raise_r+0x1e>
 8006e6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e70:	b94b      	cbnz	r3, 8006e86 <_raise_r+0x32>
 8006e72:	4620      	mov	r0, r4
 8006e74:	f000 f830 	bl	8006ed8 <_getpid_r>
 8006e78:	462a      	mov	r2, r5
 8006e7a:	4601      	mov	r1, r0
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e82:	f000 b817 	b.w	8006eb4 <_kill_r>
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d00a      	beq.n	8006ea0 <_raise_r+0x4c>
 8006e8a:	1c59      	adds	r1, r3, #1
 8006e8c:	d103      	bne.n	8006e96 <_raise_r+0x42>
 8006e8e:	2316      	movs	r3, #22
 8006e90:	6003      	str	r3, [r0, #0]
 8006e92:	2001      	movs	r0, #1
 8006e94:	e7e7      	b.n	8006e66 <_raise_r+0x12>
 8006e96:	2400      	movs	r4, #0
 8006e98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	4798      	blx	r3
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	e7e0      	b.n	8006e66 <_raise_r+0x12>

08006ea4 <raise>:
 8006ea4:	4b02      	ldr	r3, [pc, #8]	; (8006eb0 <raise+0xc>)
 8006ea6:	4601      	mov	r1, r0
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	f7ff bfd3 	b.w	8006e54 <_raise_r>
 8006eae:	bf00      	nop
 8006eb0:	20000014 	.word	0x20000014

08006eb4 <_kill_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d07      	ldr	r5, [pc, #28]	; (8006ed4 <_kill_r+0x20>)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	f7fa fc0b 	bl	80016dc <_kill>
 8006ec6:	1c43      	adds	r3, r0, #1
 8006ec8:	d102      	bne.n	8006ed0 <_kill_r+0x1c>
 8006eca:	682b      	ldr	r3, [r5, #0]
 8006ecc:	b103      	cbz	r3, 8006ed0 <_kill_r+0x1c>
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	bd38      	pop	{r3, r4, r5, pc}
 8006ed2:	bf00      	nop
 8006ed4:	2000068c 	.word	0x2000068c

08006ed8 <_getpid_r>:
 8006ed8:	f7fa bbf8 	b.w	80016cc <_getpid>

08006edc <siprintf>:
 8006edc:	b40e      	push	{r1, r2, r3}
 8006ede:	b500      	push	{lr}
 8006ee0:	b09c      	sub	sp, #112	; 0x70
 8006ee2:	ab1d      	add	r3, sp, #116	; 0x74
 8006ee4:	9002      	str	r0, [sp, #8]
 8006ee6:	9006      	str	r0, [sp, #24]
 8006ee8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006eec:	4809      	ldr	r0, [pc, #36]	; (8006f14 <siprintf+0x38>)
 8006eee:	9107      	str	r1, [sp, #28]
 8006ef0:	9104      	str	r1, [sp, #16]
 8006ef2:	4909      	ldr	r1, [pc, #36]	; (8006f18 <siprintf+0x3c>)
 8006ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef8:	9105      	str	r1, [sp, #20]
 8006efa:	6800      	ldr	r0, [r0, #0]
 8006efc:	9301      	str	r3, [sp, #4]
 8006efe:	a902      	add	r1, sp, #8
 8006f00:	f001 ff54 	bl	8008dac <_svfiprintf_r>
 8006f04:	9b02      	ldr	r3, [sp, #8]
 8006f06:	2200      	movs	r2, #0
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	b01c      	add	sp, #112	; 0x70
 8006f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f10:	b003      	add	sp, #12
 8006f12:	4770      	bx	lr
 8006f14:	20000014 	.word	0x20000014
 8006f18:	ffff0208 	.word	0xffff0208

08006f1c <strcpy>:
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f22:	f803 2b01 	strb.w	r2, [r3], #1
 8006f26:	2a00      	cmp	r2, #0
 8006f28:	d1f9      	bne.n	8006f1e <strcpy+0x2>
 8006f2a:	4770      	bx	lr

08006f2c <strncmp>:
 8006f2c:	b510      	push	{r4, lr}
 8006f2e:	b16a      	cbz	r2, 8006f4c <strncmp+0x20>
 8006f30:	3901      	subs	r1, #1
 8006f32:	1884      	adds	r4, r0, r2
 8006f34:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006f38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d103      	bne.n	8006f48 <strncmp+0x1c>
 8006f40:	42a0      	cmp	r0, r4
 8006f42:	d001      	beq.n	8006f48 <strncmp+0x1c>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1f5      	bne.n	8006f34 <strncmp+0x8>
 8006f48:	1a98      	subs	r0, r3, r2
 8006f4a:	bd10      	pop	{r4, pc}
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	e7fc      	b.n	8006f4a <strncmp+0x1e>

08006f50 <_strtol_l.isra.0>:
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f56:	d001      	beq.n	8006f5c <_strtol_l.isra.0+0xc>
 8006f58:	2b24      	cmp	r3, #36	; 0x24
 8006f5a:	d906      	bls.n	8006f6a <_strtol_l.isra.0+0x1a>
 8006f5c:	f7fe fe52 	bl	8005c04 <__errno>
 8006f60:	2316      	movs	r3, #22
 8006f62:	6003      	str	r3, [r0, #0]
 8006f64:	2000      	movs	r0, #0
 8006f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6a:	4f3a      	ldr	r7, [pc, #232]	; (8007054 <_strtol_l.isra.0+0x104>)
 8006f6c:	468e      	mov	lr, r1
 8006f6e:	4676      	mov	r6, lr
 8006f70:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006f74:	5de5      	ldrb	r5, [r4, r7]
 8006f76:	f015 0508 	ands.w	r5, r5, #8
 8006f7a:	d1f8      	bne.n	8006f6e <_strtol_l.isra.0+0x1e>
 8006f7c:	2c2d      	cmp	r4, #45	; 0x2d
 8006f7e:	d134      	bne.n	8006fea <_strtol_l.isra.0+0x9a>
 8006f80:	f89e 4000 	ldrb.w	r4, [lr]
 8006f84:	f04f 0801 	mov.w	r8, #1
 8006f88:	f106 0e02 	add.w	lr, r6, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d05c      	beq.n	800704a <_strtol_l.isra.0+0xfa>
 8006f90:	2b10      	cmp	r3, #16
 8006f92:	d10c      	bne.n	8006fae <_strtol_l.isra.0+0x5e>
 8006f94:	2c30      	cmp	r4, #48	; 0x30
 8006f96:	d10a      	bne.n	8006fae <_strtol_l.isra.0+0x5e>
 8006f98:	f89e 4000 	ldrb.w	r4, [lr]
 8006f9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006fa0:	2c58      	cmp	r4, #88	; 0x58
 8006fa2:	d14d      	bne.n	8007040 <_strtol_l.isra.0+0xf0>
 8006fa4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006fa8:	2310      	movs	r3, #16
 8006faa:	f10e 0e02 	add.w	lr, lr, #2
 8006fae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006fb2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006fb6:	2600      	movs	r6, #0
 8006fb8:	fbbc f9f3 	udiv	r9, ip, r3
 8006fbc:	4635      	mov	r5, r6
 8006fbe:	fb03 ca19 	mls	sl, r3, r9, ip
 8006fc2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006fc6:	2f09      	cmp	r7, #9
 8006fc8:	d818      	bhi.n	8006ffc <_strtol_l.isra.0+0xac>
 8006fca:	463c      	mov	r4, r7
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	dd24      	ble.n	800701a <_strtol_l.isra.0+0xca>
 8006fd0:	2e00      	cmp	r6, #0
 8006fd2:	db1f      	blt.n	8007014 <_strtol_l.isra.0+0xc4>
 8006fd4:	45a9      	cmp	r9, r5
 8006fd6:	d31d      	bcc.n	8007014 <_strtol_l.isra.0+0xc4>
 8006fd8:	d101      	bne.n	8006fde <_strtol_l.isra.0+0x8e>
 8006fda:	45a2      	cmp	sl, r4
 8006fdc:	db1a      	blt.n	8007014 <_strtol_l.isra.0+0xc4>
 8006fde:	fb05 4503 	mla	r5, r5, r3, r4
 8006fe2:	2601      	movs	r6, #1
 8006fe4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006fe8:	e7eb      	b.n	8006fc2 <_strtol_l.isra.0+0x72>
 8006fea:	2c2b      	cmp	r4, #43	; 0x2b
 8006fec:	bf08      	it	eq
 8006fee:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006ff2:	46a8      	mov	r8, r5
 8006ff4:	bf08      	it	eq
 8006ff6:	f106 0e02 	addeq.w	lr, r6, #2
 8006ffa:	e7c7      	b.n	8006f8c <_strtol_l.isra.0+0x3c>
 8006ffc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007000:	2f19      	cmp	r7, #25
 8007002:	d801      	bhi.n	8007008 <_strtol_l.isra.0+0xb8>
 8007004:	3c37      	subs	r4, #55	; 0x37
 8007006:	e7e1      	b.n	8006fcc <_strtol_l.isra.0+0x7c>
 8007008:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800700c:	2f19      	cmp	r7, #25
 800700e:	d804      	bhi.n	800701a <_strtol_l.isra.0+0xca>
 8007010:	3c57      	subs	r4, #87	; 0x57
 8007012:	e7db      	b.n	8006fcc <_strtol_l.isra.0+0x7c>
 8007014:	f04f 36ff 	mov.w	r6, #4294967295
 8007018:	e7e4      	b.n	8006fe4 <_strtol_l.isra.0+0x94>
 800701a:	2e00      	cmp	r6, #0
 800701c:	da05      	bge.n	800702a <_strtol_l.isra.0+0xda>
 800701e:	2322      	movs	r3, #34	; 0x22
 8007020:	6003      	str	r3, [r0, #0]
 8007022:	4665      	mov	r5, ip
 8007024:	b942      	cbnz	r2, 8007038 <_strtol_l.isra.0+0xe8>
 8007026:	4628      	mov	r0, r5
 8007028:	e79d      	b.n	8006f66 <_strtol_l.isra.0+0x16>
 800702a:	f1b8 0f00 	cmp.w	r8, #0
 800702e:	d000      	beq.n	8007032 <_strtol_l.isra.0+0xe2>
 8007030:	426d      	negs	r5, r5
 8007032:	2a00      	cmp	r2, #0
 8007034:	d0f7      	beq.n	8007026 <_strtol_l.isra.0+0xd6>
 8007036:	b10e      	cbz	r6, 800703c <_strtol_l.isra.0+0xec>
 8007038:	f10e 31ff 	add.w	r1, lr, #4294967295
 800703c:	6011      	str	r1, [r2, #0]
 800703e:	e7f2      	b.n	8007026 <_strtol_l.isra.0+0xd6>
 8007040:	2430      	movs	r4, #48	; 0x30
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1b3      	bne.n	8006fae <_strtol_l.isra.0+0x5e>
 8007046:	2308      	movs	r3, #8
 8007048:	e7b1      	b.n	8006fae <_strtol_l.isra.0+0x5e>
 800704a:	2c30      	cmp	r4, #48	; 0x30
 800704c:	d0a4      	beq.n	8006f98 <_strtol_l.isra.0+0x48>
 800704e:	230a      	movs	r3, #10
 8007050:	e7ad      	b.n	8006fae <_strtol_l.isra.0+0x5e>
 8007052:	bf00      	nop
 8007054:	0800adaf 	.word	0x0800adaf

08007058 <_strtol_r>:
 8007058:	f7ff bf7a 	b.w	8006f50 <_strtol_l.isra.0>

0800705c <_strtoul_l.isra.0>:
 800705c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007060:	4e3b      	ldr	r6, [pc, #236]	; (8007150 <_strtoul_l.isra.0+0xf4>)
 8007062:	4686      	mov	lr, r0
 8007064:	468c      	mov	ip, r1
 8007066:	4660      	mov	r0, ip
 8007068:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800706c:	5da5      	ldrb	r5, [r4, r6]
 800706e:	f015 0508 	ands.w	r5, r5, #8
 8007072:	d1f8      	bne.n	8007066 <_strtoul_l.isra.0+0xa>
 8007074:	2c2d      	cmp	r4, #45	; 0x2d
 8007076:	d134      	bne.n	80070e2 <_strtoul_l.isra.0+0x86>
 8007078:	f89c 4000 	ldrb.w	r4, [ip]
 800707c:	f04f 0801 	mov.w	r8, #1
 8007080:	f100 0c02 	add.w	ip, r0, #2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d05e      	beq.n	8007146 <_strtoul_l.isra.0+0xea>
 8007088:	2b10      	cmp	r3, #16
 800708a:	d10c      	bne.n	80070a6 <_strtoul_l.isra.0+0x4a>
 800708c:	2c30      	cmp	r4, #48	; 0x30
 800708e:	d10a      	bne.n	80070a6 <_strtoul_l.isra.0+0x4a>
 8007090:	f89c 0000 	ldrb.w	r0, [ip]
 8007094:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007098:	2858      	cmp	r0, #88	; 0x58
 800709a:	d14f      	bne.n	800713c <_strtoul_l.isra.0+0xe0>
 800709c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80070a0:	2310      	movs	r3, #16
 80070a2:	f10c 0c02 	add.w	ip, ip, #2
 80070a6:	f04f 37ff 	mov.w	r7, #4294967295
 80070aa:	2500      	movs	r5, #0
 80070ac:	fbb7 f7f3 	udiv	r7, r7, r3
 80070b0:	fb03 f907 	mul.w	r9, r3, r7
 80070b4:	ea6f 0909 	mvn.w	r9, r9
 80070b8:	4628      	mov	r0, r5
 80070ba:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80070be:	2e09      	cmp	r6, #9
 80070c0:	d818      	bhi.n	80070f4 <_strtoul_l.isra.0+0x98>
 80070c2:	4634      	mov	r4, r6
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	dd24      	ble.n	8007112 <_strtoul_l.isra.0+0xb6>
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	db1f      	blt.n	800710c <_strtoul_l.isra.0+0xb0>
 80070cc:	4287      	cmp	r7, r0
 80070ce:	d31d      	bcc.n	800710c <_strtoul_l.isra.0+0xb0>
 80070d0:	d101      	bne.n	80070d6 <_strtoul_l.isra.0+0x7a>
 80070d2:	45a1      	cmp	r9, r4
 80070d4:	db1a      	blt.n	800710c <_strtoul_l.isra.0+0xb0>
 80070d6:	fb00 4003 	mla	r0, r0, r3, r4
 80070da:	2501      	movs	r5, #1
 80070dc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80070e0:	e7eb      	b.n	80070ba <_strtoul_l.isra.0+0x5e>
 80070e2:	2c2b      	cmp	r4, #43	; 0x2b
 80070e4:	bf08      	it	eq
 80070e6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80070ea:	46a8      	mov	r8, r5
 80070ec:	bf08      	it	eq
 80070ee:	f100 0c02 	addeq.w	ip, r0, #2
 80070f2:	e7c7      	b.n	8007084 <_strtoul_l.isra.0+0x28>
 80070f4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80070f8:	2e19      	cmp	r6, #25
 80070fa:	d801      	bhi.n	8007100 <_strtoul_l.isra.0+0xa4>
 80070fc:	3c37      	subs	r4, #55	; 0x37
 80070fe:	e7e1      	b.n	80070c4 <_strtoul_l.isra.0+0x68>
 8007100:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007104:	2e19      	cmp	r6, #25
 8007106:	d804      	bhi.n	8007112 <_strtoul_l.isra.0+0xb6>
 8007108:	3c57      	subs	r4, #87	; 0x57
 800710a:	e7db      	b.n	80070c4 <_strtoul_l.isra.0+0x68>
 800710c:	f04f 35ff 	mov.w	r5, #4294967295
 8007110:	e7e4      	b.n	80070dc <_strtoul_l.isra.0+0x80>
 8007112:	2d00      	cmp	r5, #0
 8007114:	da07      	bge.n	8007126 <_strtoul_l.isra.0+0xca>
 8007116:	2322      	movs	r3, #34	; 0x22
 8007118:	f8ce 3000 	str.w	r3, [lr]
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	b942      	cbnz	r2, 8007134 <_strtoul_l.isra.0+0xd8>
 8007122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007126:	f1b8 0f00 	cmp.w	r8, #0
 800712a:	d000      	beq.n	800712e <_strtoul_l.isra.0+0xd2>
 800712c:	4240      	negs	r0, r0
 800712e:	2a00      	cmp	r2, #0
 8007130:	d0f7      	beq.n	8007122 <_strtoul_l.isra.0+0xc6>
 8007132:	b10d      	cbz	r5, 8007138 <_strtoul_l.isra.0+0xdc>
 8007134:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007138:	6011      	str	r1, [r2, #0]
 800713a:	e7f2      	b.n	8007122 <_strtoul_l.isra.0+0xc6>
 800713c:	2430      	movs	r4, #48	; 0x30
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1b1      	bne.n	80070a6 <_strtoul_l.isra.0+0x4a>
 8007142:	2308      	movs	r3, #8
 8007144:	e7af      	b.n	80070a6 <_strtoul_l.isra.0+0x4a>
 8007146:	2c30      	cmp	r4, #48	; 0x30
 8007148:	d0a2      	beq.n	8007090 <_strtoul_l.isra.0+0x34>
 800714a:	230a      	movs	r3, #10
 800714c:	e7ab      	b.n	80070a6 <_strtoul_l.isra.0+0x4a>
 800714e:	bf00      	nop
 8007150:	0800adaf 	.word	0x0800adaf

08007154 <_strtoul_r>:
 8007154:	f7ff bf82 	b.w	800705c <_strtoul_l.isra.0>

08007158 <strtoul>:
 8007158:	4613      	mov	r3, r2
 800715a:	460a      	mov	r2, r1
 800715c:	4601      	mov	r1, r0
 800715e:	4802      	ldr	r0, [pc, #8]	; (8007168 <strtoul+0x10>)
 8007160:	6800      	ldr	r0, [r0, #0]
 8007162:	f7ff bf7b 	b.w	800705c <_strtoul_l.isra.0>
 8007166:	bf00      	nop
 8007168:	20000014 	.word	0x20000014

0800716c <__tzcalc_limits>:
 800716c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007170:	4680      	mov	r8, r0
 8007172:	f001 f931 	bl	80083d8 <__gettzinfo>
 8007176:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800717a:	4598      	cmp	r8, r3
 800717c:	f340 8098 	ble.w	80072b0 <__tzcalc_limits+0x144>
 8007180:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8007184:	4443      	add	r3, r8
 8007186:	109b      	asrs	r3, r3, #2
 8007188:	f240 126d 	movw	r2, #365	; 0x16d
 800718c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8007190:	fb02 3505 	mla	r5, r2, r5, r3
 8007194:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8007198:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 800719c:	fb93 f3f2 	sdiv	r3, r3, r2
 80071a0:	441d      	add	r5, r3
 80071a2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80071a6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80071aa:	fb98 f7f3 	sdiv	r7, r8, r3
 80071ae:	fb03 8717 	mls	r7, r3, r7, r8
 80071b2:	4442      	add	r2, r8
 80071b4:	fab7 fc87 	clz	ip, r7
 80071b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80071bc:	f008 0303 	and.w	r3, r8, #3
 80071c0:	4415      	add	r5, r2
 80071c2:	2264      	movs	r2, #100	; 0x64
 80071c4:	f8c0 8004 	str.w	r8, [r0, #4]
 80071c8:	fb98 f6f2 	sdiv	r6, r8, r2
 80071cc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80071d0:	fb02 8616 	mls	r6, r2, r6, r8
 80071d4:	4604      	mov	r4, r0
 80071d6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	f04f 0e07 	mov.w	lr, #7
 80071e0:	7a22      	ldrb	r2, [r4, #8]
 80071e2:	6963      	ldr	r3, [r4, #20]
 80071e4:	2a4a      	cmp	r2, #74	; 0x4a
 80071e6:	d128      	bne.n	800723a <__tzcalc_limits+0xce>
 80071e8:	9900      	ldr	r1, [sp, #0]
 80071ea:	18ea      	adds	r2, r5, r3
 80071ec:	b901      	cbnz	r1, 80071f0 <__tzcalc_limits+0x84>
 80071ee:	b906      	cbnz	r6, 80071f2 <__tzcalc_limits+0x86>
 80071f0:	bb0f      	cbnz	r7, 8007236 <__tzcalc_limits+0xca>
 80071f2:	2b3b      	cmp	r3, #59	; 0x3b
 80071f4:	bfd4      	ite	le
 80071f6:	2300      	movle	r3, #0
 80071f8:	2301      	movgt	r3, #1
 80071fa:	4413      	add	r3, r2
 80071fc:	1e5a      	subs	r2, r3, #1
 80071fe:	69a3      	ldr	r3, [r4, #24]
 8007200:	492c      	ldr	r1, [pc, #176]	; (80072b4 <__tzcalc_limits+0x148>)
 8007202:	fb01 3202 	mla	r2, r1, r2, r3
 8007206:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007208:	4413      	add	r3, r2
 800720a:	461a      	mov	r2, r3
 800720c:	17db      	asrs	r3, r3, #31
 800720e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8007212:	3428      	adds	r4, #40	; 0x28
 8007214:	45a3      	cmp	fp, r4
 8007216:	d1e3      	bne.n	80071e0 <__tzcalc_limits+0x74>
 8007218:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 800721c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8007220:	4294      	cmp	r4, r2
 8007222:	eb75 0303 	sbcs.w	r3, r5, r3
 8007226:	bfb4      	ite	lt
 8007228:	2301      	movlt	r3, #1
 800722a:	2300      	movge	r3, #0
 800722c:	6003      	str	r3, [r0, #0]
 800722e:	2001      	movs	r0, #1
 8007230:	b003      	add	sp, #12
 8007232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007236:	2300      	movs	r3, #0
 8007238:	e7df      	b.n	80071fa <__tzcalc_limits+0x8e>
 800723a:	2a44      	cmp	r2, #68	; 0x44
 800723c:	d101      	bne.n	8007242 <__tzcalc_limits+0xd6>
 800723e:	18ea      	adds	r2, r5, r3
 8007240:	e7dd      	b.n	80071fe <__tzcalc_limits+0x92>
 8007242:	9a00      	ldr	r2, [sp, #0]
 8007244:	bb72      	cbnz	r2, 80072a4 <__tzcalc_limits+0x138>
 8007246:	2e00      	cmp	r6, #0
 8007248:	bf0c      	ite	eq
 800724a:	46e0      	moveq	r8, ip
 800724c:	f04f 0801 	movne.w	r8, #1
 8007250:	4919      	ldr	r1, [pc, #100]	; (80072b8 <__tzcalc_limits+0x14c>)
 8007252:	68e2      	ldr	r2, [r4, #12]
 8007254:	9201      	str	r2, [sp, #4]
 8007256:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800725a:	fb0a 1808 	mla	r8, sl, r8, r1
 800725e:	462a      	mov	r2, r5
 8007260:	f04f 0900 	mov.w	r9, #0
 8007264:	f1a8 0804 	sub.w	r8, r8, #4
 8007268:	9901      	ldr	r1, [sp, #4]
 800726a:	f109 0901 	add.w	r9, r9, #1
 800726e:	4549      	cmp	r1, r9
 8007270:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8007274:	dc18      	bgt.n	80072a8 <__tzcalc_limits+0x13c>
 8007276:	f102 0804 	add.w	r8, r2, #4
 800727a:	fb98 f9fe 	sdiv	r9, r8, lr
 800727e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8007282:	eba8 0909 	sub.w	r9, r8, r9
 8007286:	ebb3 0909 	subs.w	r9, r3, r9
 800728a:	6923      	ldr	r3, [r4, #16]
 800728c:	f103 33ff 	add.w	r3, r3, #4294967295
 8007290:	bf48      	it	mi
 8007292:	f109 0907 	addmi.w	r9, r9, #7
 8007296:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800729a:	444b      	add	r3, r9
 800729c:	4553      	cmp	r3, sl
 800729e:	da05      	bge.n	80072ac <__tzcalc_limits+0x140>
 80072a0:	441a      	add	r2, r3
 80072a2:	e7ac      	b.n	80071fe <__tzcalc_limits+0x92>
 80072a4:	46e0      	mov	r8, ip
 80072a6:	e7d3      	b.n	8007250 <__tzcalc_limits+0xe4>
 80072a8:	4452      	add	r2, sl
 80072aa:	e7dd      	b.n	8007268 <__tzcalc_limits+0xfc>
 80072ac:	3b07      	subs	r3, #7
 80072ae:	e7f5      	b.n	800729c <__tzcalc_limits+0x130>
 80072b0:	2000      	movs	r0, #0
 80072b2:	e7bd      	b.n	8007230 <__tzcalc_limits+0xc4>
 80072b4:	00015180 	.word	0x00015180
 80072b8:	0800aca4 	.word	0x0800aca4

080072bc <__tz_lock>:
 80072bc:	4801      	ldr	r0, [pc, #4]	; (80072c4 <__tz_lock+0x8>)
 80072be:	f001 b944 	b.w	800854a <__retarget_lock_acquire>
 80072c2:	bf00      	nop
 80072c4:	20000687 	.word	0x20000687

080072c8 <__tz_unlock>:
 80072c8:	4801      	ldr	r0, [pc, #4]	; (80072d0 <__tz_unlock+0x8>)
 80072ca:	f001 b940 	b.w	800854e <__retarget_lock_release>
 80072ce:	bf00      	nop
 80072d0:	20000687 	.word	0x20000687

080072d4 <_tzset_unlocked>:
 80072d4:	4b01      	ldr	r3, [pc, #4]	; (80072dc <_tzset_unlocked+0x8>)
 80072d6:	6818      	ldr	r0, [r3, #0]
 80072d8:	f000 b802 	b.w	80072e0 <_tzset_unlocked_r>
 80072dc:	20000014 	.word	0x20000014

080072e0 <_tzset_unlocked_r>:
 80072e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e4:	b08d      	sub	sp, #52	; 0x34
 80072e6:	4607      	mov	r7, r0
 80072e8:	f001 f876 	bl	80083d8 <__gettzinfo>
 80072ec:	49ae      	ldr	r1, [pc, #696]	; (80075a8 <_tzset_unlocked_r+0x2c8>)
 80072ee:	4eaf      	ldr	r6, [pc, #700]	; (80075ac <_tzset_unlocked_r+0x2cc>)
 80072f0:	4605      	mov	r5, r0
 80072f2:	4638      	mov	r0, r7
 80072f4:	f001 f868 	bl	80083c8 <_getenv_r>
 80072f8:	4604      	mov	r4, r0
 80072fa:	b970      	cbnz	r0, 800731a <_tzset_unlocked_r+0x3a>
 80072fc:	4bac      	ldr	r3, [pc, #688]	; (80075b0 <_tzset_unlocked_r+0x2d0>)
 80072fe:	4aad      	ldr	r2, [pc, #692]	; (80075b4 <_tzset_unlocked_r+0x2d4>)
 8007300:	6018      	str	r0, [r3, #0]
 8007302:	4bad      	ldr	r3, [pc, #692]	; (80075b8 <_tzset_unlocked_r+0x2d8>)
 8007304:	6018      	str	r0, [r3, #0]
 8007306:	4bad      	ldr	r3, [pc, #692]	; (80075bc <_tzset_unlocked_r+0x2dc>)
 8007308:	6830      	ldr	r0, [r6, #0]
 800730a:	e9c3 2200 	strd	r2, r2, [r3]
 800730e:	f7fe fdc7 	bl	8005ea0 <free>
 8007312:	6034      	str	r4, [r6, #0]
 8007314:	b00d      	add	sp, #52	; 0x34
 8007316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731a:	6831      	ldr	r1, [r6, #0]
 800731c:	2900      	cmp	r1, #0
 800731e:	d15f      	bne.n	80073e0 <_tzset_unlocked_r+0x100>
 8007320:	6830      	ldr	r0, [r6, #0]
 8007322:	f7fe fdbd 	bl	8005ea0 <free>
 8007326:	4620      	mov	r0, r4
 8007328:	f7f8 ff7c 	bl	8000224 <strlen>
 800732c:	1c41      	adds	r1, r0, #1
 800732e:	4638      	mov	r0, r7
 8007330:	f7ff f8bc 	bl	80064ac <_malloc_r>
 8007334:	6030      	str	r0, [r6, #0]
 8007336:	2800      	cmp	r0, #0
 8007338:	d157      	bne.n	80073ea <_tzset_unlocked_r+0x10a>
 800733a:	7823      	ldrb	r3, [r4, #0]
 800733c:	4aa0      	ldr	r2, [pc, #640]	; (80075c0 <_tzset_unlocked_r+0x2e0>)
 800733e:	49a1      	ldr	r1, [pc, #644]	; (80075c4 <_tzset_unlocked_r+0x2e4>)
 8007340:	2b3a      	cmp	r3, #58	; 0x3a
 8007342:	bf08      	it	eq
 8007344:	3401      	addeq	r4, #1
 8007346:	ae0a      	add	r6, sp, #40	; 0x28
 8007348:	4633      	mov	r3, r6
 800734a:	4620      	mov	r0, r4
 800734c:	f001 ff88 	bl	8009260 <siscanf>
 8007350:	2800      	cmp	r0, #0
 8007352:	dddf      	ble.n	8007314 <_tzset_unlocked_r+0x34>
 8007354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007356:	18e7      	adds	r7, r4, r3
 8007358:	5ce3      	ldrb	r3, [r4, r3]
 800735a:	2b2d      	cmp	r3, #45	; 0x2d
 800735c:	d149      	bne.n	80073f2 <_tzset_unlocked_r+0x112>
 800735e:	3701      	adds	r7, #1
 8007360:	f04f 34ff 	mov.w	r4, #4294967295
 8007364:	f10d 0a20 	add.w	sl, sp, #32
 8007368:	f10d 0b1e 	add.w	fp, sp, #30
 800736c:	f04f 0800 	mov.w	r8, #0
 8007370:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8007374:	4994      	ldr	r1, [pc, #592]	; (80075c8 <_tzset_unlocked_r+0x2e8>)
 8007376:	9603      	str	r6, [sp, #12]
 8007378:	f8cd b000 	str.w	fp, [sp]
 800737c:	4633      	mov	r3, r6
 800737e:	aa07      	add	r2, sp, #28
 8007380:	4638      	mov	r0, r7
 8007382:	f8ad 801e 	strh.w	r8, [sp, #30]
 8007386:	f8ad 8020 	strh.w	r8, [sp, #32]
 800738a:	f001 ff69 	bl	8009260 <siscanf>
 800738e:	4540      	cmp	r0, r8
 8007390:	ddc0      	ble.n	8007314 <_tzset_unlocked_r+0x34>
 8007392:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007396:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800739a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80075d4 <_tzset_unlocked_r+0x2f4>
 800739e:	213c      	movs	r1, #60	; 0x3c
 80073a0:	fb01 2203 	mla	r2, r1, r3, r2
 80073a4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80073a8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80073ac:	fb01 2303 	mla	r3, r1, r3, r2
 80073b0:	435c      	muls	r4, r3
 80073b2:	62ac      	str	r4, [r5, #40]	; 0x28
 80073b4:	4c81      	ldr	r4, [pc, #516]	; (80075bc <_tzset_unlocked_r+0x2dc>)
 80073b6:	4b82      	ldr	r3, [pc, #520]	; (80075c0 <_tzset_unlocked_r+0x2e0>)
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073bc:	4981      	ldr	r1, [pc, #516]	; (80075c4 <_tzset_unlocked_r+0x2e4>)
 80073be:	441f      	add	r7, r3
 80073c0:	464a      	mov	r2, r9
 80073c2:	4633      	mov	r3, r6
 80073c4:	4638      	mov	r0, r7
 80073c6:	f001 ff4b 	bl	8009260 <siscanf>
 80073ca:	4540      	cmp	r0, r8
 80073cc:	dc16      	bgt.n	80073fc <_tzset_unlocked_r+0x11c>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	6063      	str	r3, [r4, #4]
 80073d2:	4b77      	ldr	r3, [pc, #476]	; (80075b0 <_tzset_unlocked_r+0x2d0>)
 80073d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	4b77      	ldr	r3, [pc, #476]	; (80075b8 <_tzset_unlocked_r+0x2d8>)
 80073da:	f8c3 8000 	str.w	r8, [r3]
 80073de:	e799      	b.n	8007314 <_tzset_unlocked_r+0x34>
 80073e0:	f7f8 ff16 	bl	8000210 <strcmp>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	d19b      	bne.n	8007320 <_tzset_unlocked_r+0x40>
 80073e8:	e794      	b.n	8007314 <_tzset_unlocked_r+0x34>
 80073ea:	4621      	mov	r1, r4
 80073ec:	f7ff fd96 	bl	8006f1c <strcpy>
 80073f0:	e7a3      	b.n	800733a <_tzset_unlocked_r+0x5a>
 80073f2:	2b2b      	cmp	r3, #43	; 0x2b
 80073f4:	bf08      	it	eq
 80073f6:	3701      	addeq	r7, #1
 80073f8:	2401      	movs	r4, #1
 80073fa:	e7b3      	b.n	8007364 <_tzset_unlocked_r+0x84>
 80073fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073fe:	f8c4 9004 	str.w	r9, [r4, #4]
 8007402:	18fc      	adds	r4, r7, r3
 8007404:	5cfb      	ldrb	r3, [r7, r3]
 8007406:	2b2d      	cmp	r3, #45	; 0x2d
 8007408:	f040 808b 	bne.w	8007522 <_tzset_unlocked_r+0x242>
 800740c:	3401      	adds	r4, #1
 800740e:	f04f 37ff 	mov.w	r7, #4294967295
 8007412:	2300      	movs	r3, #0
 8007414:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007418:	f8ad 301e 	strh.w	r3, [sp, #30]
 800741c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007420:	930a      	str	r3, [sp, #40]	; 0x28
 8007422:	e9cd a602 	strd	sl, r6, [sp, #8]
 8007426:	e9cd b600 	strd	fp, r6, [sp]
 800742a:	4967      	ldr	r1, [pc, #412]	; (80075c8 <_tzset_unlocked_r+0x2e8>)
 800742c:	4633      	mov	r3, r6
 800742e:	aa07      	add	r2, sp, #28
 8007430:	4620      	mov	r0, r4
 8007432:	f001 ff15 	bl	8009260 <siscanf>
 8007436:	2800      	cmp	r0, #0
 8007438:	dc78      	bgt.n	800752c <_tzset_unlocked_r+0x24c>
 800743a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 800743c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8007440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007442:	652f      	str	r7, [r5, #80]	; 0x50
 8007444:	441c      	add	r4, r3
 8007446:	462f      	mov	r7, r5
 8007448:	f04f 0900 	mov.w	r9, #0
 800744c:	7823      	ldrb	r3, [r4, #0]
 800744e:	2b2c      	cmp	r3, #44	; 0x2c
 8007450:	bf08      	it	eq
 8007452:	3401      	addeq	r4, #1
 8007454:	f894 8000 	ldrb.w	r8, [r4]
 8007458:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800745c:	d178      	bne.n	8007550 <_tzset_unlocked_r+0x270>
 800745e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8007462:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8007466:	ab09      	add	r3, sp, #36	; 0x24
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	4958      	ldr	r1, [pc, #352]	; (80075cc <_tzset_unlocked_r+0x2ec>)
 800746c:	9603      	str	r6, [sp, #12]
 800746e:	4633      	mov	r3, r6
 8007470:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8007474:	4620      	mov	r0, r4
 8007476:	f001 fef3 	bl	8009260 <siscanf>
 800747a:	2803      	cmp	r0, #3
 800747c:	f47f af4a 	bne.w	8007314 <_tzset_unlocked_r+0x34>
 8007480:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8007484:	1e4b      	subs	r3, r1, #1
 8007486:	2b0b      	cmp	r3, #11
 8007488:	f63f af44 	bhi.w	8007314 <_tzset_unlocked_r+0x34>
 800748c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007490:	1e53      	subs	r3, r2, #1
 8007492:	2b04      	cmp	r3, #4
 8007494:	f63f af3e 	bhi.w	8007314 <_tzset_unlocked_r+0x34>
 8007498:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800749c:	2b06      	cmp	r3, #6
 800749e:	f63f af39 	bhi.w	8007314 <_tzset_unlocked_r+0x34>
 80074a2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80074a6:	f887 8008 	strb.w	r8, [r7, #8]
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ae:	eb04 0803 	add.w	r8, r4, r3
 80074b2:	2302      	movs	r3, #2
 80074b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80074b8:	2300      	movs	r3, #0
 80074ba:	f8ad 301e 	strh.w	r3, [sp, #30]
 80074be:	f8ad 3020 	strh.w	r3, [sp, #32]
 80074c2:	930a      	str	r3, [sp, #40]	; 0x28
 80074c4:	f898 3000 	ldrb.w	r3, [r8]
 80074c8:	2b2f      	cmp	r3, #47	; 0x2f
 80074ca:	d109      	bne.n	80074e0 <_tzset_unlocked_r+0x200>
 80074cc:	e9cd a602 	strd	sl, r6, [sp, #8]
 80074d0:	e9cd b600 	strd	fp, r6, [sp]
 80074d4:	493e      	ldr	r1, [pc, #248]	; (80075d0 <_tzset_unlocked_r+0x2f0>)
 80074d6:	4633      	mov	r3, r6
 80074d8:	aa07      	add	r2, sp, #28
 80074da:	4640      	mov	r0, r8
 80074dc:	f001 fec0 	bl	8009260 <siscanf>
 80074e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80074e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80074e8:	213c      	movs	r1, #60	; 0x3c
 80074ea:	fb01 2203 	mla	r2, r1, r3, r2
 80074ee:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80074f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80074f6:	fb01 2303 	mla	r3, r1, r3, r2
 80074fa:	61bb      	str	r3, [r7, #24]
 80074fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074fe:	3728      	adds	r7, #40	; 0x28
 8007500:	4444      	add	r4, r8
 8007502:	f1b9 0f00 	cmp.w	r9, #0
 8007506:	d020      	beq.n	800754a <_tzset_unlocked_r+0x26a>
 8007508:	6868      	ldr	r0, [r5, #4]
 800750a:	f7ff fe2f 	bl	800716c <__tzcalc_limits>
 800750e:	4b28      	ldr	r3, [pc, #160]	; (80075b0 <_tzset_unlocked_r+0x2d0>)
 8007510:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	4a27      	ldr	r2, [pc, #156]	; (80075b8 <_tzset_unlocked_r+0x2d8>)
 800751a:	bf18      	it	ne
 800751c:	2301      	movne	r3, #1
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	e6f8      	b.n	8007314 <_tzset_unlocked_r+0x34>
 8007522:	2b2b      	cmp	r3, #43	; 0x2b
 8007524:	bf08      	it	eq
 8007526:	3401      	addeq	r4, #1
 8007528:	2701      	movs	r7, #1
 800752a:	e772      	b.n	8007412 <_tzset_unlocked_r+0x132>
 800752c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007530:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007534:	213c      	movs	r1, #60	; 0x3c
 8007536:	fb01 2203 	mla	r2, r1, r3, r2
 800753a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800753e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007542:	fb01 2303 	mla	r3, r1, r3, r2
 8007546:	435f      	muls	r7, r3
 8007548:	e77a      	b.n	8007440 <_tzset_unlocked_r+0x160>
 800754a:	f04f 0901 	mov.w	r9, #1
 800754e:	e77d      	b.n	800744c <_tzset_unlocked_r+0x16c>
 8007550:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8007554:	bf06      	itte	eq
 8007556:	3401      	addeq	r4, #1
 8007558:	4643      	moveq	r3, r8
 800755a:	2344      	movne	r3, #68	; 0x44
 800755c:	220a      	movs	r2, #10
 800755e:	a90b      	add	r1, sp, #44	; 0x2c
 8007560:	4620      	mov	r0, r4
 8007562:	9305      	str	r3, [sp, #20]
 8007564:	f7ff fdf8 	bl	8007158 <strtoul>
 8007568:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800756c:	9b05      	ldr	r3, [sp, #20]
 800756e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8007572:	45a0      	cmp	r8, r4
 8007574:	d114      	bne.n	80075a0 <_tzset_unlocked_r+0x2c0>
 8007576:	234d      	movs	r3, #77	; 0x4d
 8007578:	f1b9 0f00 	cmp.w	r9, #0
 800757c:	d107      	bne.n	800758e <_tzset_unlocked_r+0x2ae>
 800757e:	722b      	strb	r3, [r5, #8]
 8007580:	2103      	movs	r1, #3
 8007582:	2302      	movs	r3, #2
 8007584:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8007588:	f8c5 9014 	str.w	r9, [r5, #20]
 800758c:	e791      	b.n	80074b2 <_tzset_unlocked_r+0x1d2>
 800758e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8007592:	220b      	movs	r2, #11
 8007594:	2301      	movs	r3, #1
 8007596:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800759a:	2300      	movs	r3, #0
 800759c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800759e:	e788      	b.n	80074b2 <_tzset_unlocked_r+0x1d2>
 80075a0:	b280      	uxth	r0, r0
 80075a2:	723b      	strb	r3, [r7, #8]
 80075a4:	6178      	str	r0, [r7, #20]
 80075a6:	e784      	b.n	80074b2 <_tzset_unlocked_r+0x1d2>
 80075a8:	0800ad36 	.word	0x0800ad36
 80075ac:	20000628 	.word	0x20000628
 80075b0:	20000630 	.word	0x20000630
 80075b4:	0800ad39 	.word	0x0800ad39
 80075b8:	2000062c 	.word	0x2000062c
 80075bc:	20000078 	.word	0x20000078
 80075c0:	2000061b 	.word	0x2000061b
 80075c4:	0800ad3d 	.word	0x0800ad3d
 80075c8:	0800ad60 	.word	0x0800ad60
 80075cc:	0800ad4c 	.word	0x0800ad4c
 80075d0:	0800ad5f 	.word	0x0800ad5f
 80075d4:	20000610 	.word	0x20000610

080075d8 <__assert_func>:
 80075d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075da:	4614      	mov	r4, r2
 80075dc:	461a      	mov	r2, r3
 80075de:	4b09      	ldr	r3, [pc, #36]	; (8007604 <__assert_func+0x2c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4605      	mov	r5, r0
 80075e4:	68d8      	ldr	r0, [r3, #12]
 80075e6:	b14c      	cbz	r4, 80075fc <__assert_func+0x24>
 80075e8:	4b07      	ldr	r3, [pc, #28]	; (8007608 <__assert_func+0x30>)
 80075ea:	9100      	str	r1, [sp, #0]
 80075ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075f0:	4906      	ldr	r1, [pc, #24]	; (800760c <__assert_func+0x34>)
 80075f2:	462b      	mov	r3, r5
 80075f4:	f000 fe9c 	bl	8008330 <fiprintf>
 80075f8:	f7fe fafd 	bl	8005bf6 <abort>
 80075fc:	4b04      	ldr	r3, [pc, #16]	; (8007610 <__assert_func+0x38>)
 80075fe:	461c      	mov	r4, r3
 8007600:	e7f3      	b.n	80075ea <__assert_func+0x12>
 8007602:	bf00      	nop
 8007604:	20000014 	.word	0x20000014
 8007608:	0800ad72 	.word	0x0800ad72
 800760c:	0800ad7f 	.word	0x0800ad7f
 8007610:	0800adad 	.word	0x0800adad

08007614 <div>:
 8007614:	2900      	cmp	r1, #0
 8007616:	b510      	push	{r4, lr}
 8007618:	fb91 f4f2 	sdiv	r4, r1, r2
 800761c:	fb02 1314 	mls	r3, r2, r4, r1
 8007620:	db06      	blt.n	8007630 <div+0x1c>
 8007622:	2b00      	cmp	r3, #0
 8007624:	da01      	bge.n	800762a <div+0x16>
 8007626:	3401      	adds	r4, #1
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	e9c0 4300 	strd	r4, r3, [r0]
 800762e:	bd10      	pop	{r4, pc}
 8007630:	2b00      	cmp	r3, #0
 8007632:	bfc4      	itt	gt
 8007634:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8007638:	189b      	addgt	r3, r3, r2
 800763a:	e7f6      	b.n	800762a <div+0x16>

0800763c <quorem>:
 800763c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	6903      	ldr	r3, [r0, #16]
 8007642:	690c      	ldr	r4, [r1, #16]
 8007644:	42a3      	cmp	r3, r4
 8007646:	4607      	mov	r7, r0
 8007648:	f2c0 8081 	blt.w	800774e <quorem+0x112>
 800764c:	3c01      	subs	r4, #1
 800764e:	f101 0814 	add.w	r8, r1, #20
 8007652:	f100 0514 	add.w	r5, r0, #20
 8007656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800765a:	9301      	str	r3, [sp, #4]
 800765c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007660:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007664:	3301      	adds	r3, #1
 8007666:	429a      	cmp	r2, r3
 8007668:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800766c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007670:	fbb2 f6f3 	udiv	r6, r2, r3
 8007674:	d331      	bcc.n	80076da <quorem+0x9e>
 8007676:	f04f 0e00 	mov.w	lr, #0
 800767a:	4640      	mov	r0, r8
 800767c:	46ac      	mov	ip, r5
 800767e:	46f2      	mov	sl, lr
 8007680:	f850 2b04 	ldr.w	r2, [r0], #4
 8007684:	b293      	uxth	r3, r2
 8007686:	fb06 e303 	mla	r3, r6, r3, lr
 800768a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800768e:	b29b      	uxth	r3, r3
 8007690:	ebaa 0303 	sub.w	r3, sl, r3
 8007694:	0c12      	lsrs	r2, r2, #16
 8007696:	f8dc a000 	ldr.w	sl, [ip]
 800769a:	fb06 e202 	mla	r2, r6, r2, lr
 800769e:	fa13 f38a 	uxtah	r3, r3, sl
 80076a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076a6:	fa1f fa82 	uxth.w	sl, r2
 80076aa:	f8dc 2000 	ldr.w	r2, [ip]
 80076ae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80076b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076bc:	4581      	cmp	r9, r0
 80076be:	f84c 3b04 	str.w	r3, [ip], #4
 80076c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076c6:	d2db      	bcs.n	8007680 <quorem+0x44>
 80076c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80076cc:	b92b      	cbnz	r3, 80076da <quorem+0x9e>
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	3b04      	subs	r3, #4
 80076d2:	429d      	cmp	r5, r3
 80076d4:	461a      	mov	r2, r3
 80076d6:	d32e      	bcc.n	8007736 <quorem+0xfa>
 80076d8:	613c      	str	r4, [r7, #16]
 80076da:	4638      	mov	r0, r7
 80076dc:	f001 f9d6 	bl	8008a8c <__mcmp>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	db24      	blt.n	800772e <quorem+0xf2>
 80076e4:	3601      	adds	r6, #1
 80076e6:	4628      	mov	r0, r5
 80076e8:	f04f 0c00 	mov.w	ip, #0
 80076ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80076f0:	f8d0 e000 	ldr.w	lr, [r0]
 80076f4:	b293      	uxth	r3, r2
 80076f6:	ebac 0303 	sub.w	r3, ip, r3
 80076fa:	0c12      	lsrs	r2, r2, #16
 80076fc:	fa13 f38e 	uxtah	r3, r3, lr
 8007700:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007704:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007708:	b29b      	uxth	r3, r3
 800770a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800770e:	45c1      	cmp	r9, r8
 8007710:	f840 3b04 	str.w	r3, [r0], #4
 8007714:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007718:	d2e8      	bcs.n	80076ec <quorem+0xb0>
 800771a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800771e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007722:	b922      	cbnz	r2, 800772e <quorem+0xf2>
 8007724:	3b04      	subs	r3, #4
 8007726:	429d      	cmp	r5, r3
 8007728:	461a      	mov	r2, r3
 800772a:	d30a      	bcc.n	8007742 <quorem+0x106>
 800772c:	613c      	str	r4, [r7, #16]
 800772e:	4630      	mov	r0, r6
 8007730:	b003      	add	sp, #12
 8007732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	3b04      	subs	r3, #4
 800773a:	2a00      	cmp	r2, #0
 800773c:	d1cc      	bne.n	80076d8 <quorem+0x9c>
 800773e:	3c01      	subs	r4, #1
 8007740:	e7c7      	b.n	80076d2 <quorem+0x96>
 8007742:	6812      	ldr	r2, [r2, #0]
 8007744:	3b04      	subs	r3, #4
 8007746:	2a00      	cmp	r2, #0
 8007748:	d1f0      	bne.n	800772c <quorem+0xf0>
 800774a:	3c01      	subs	r4, #1
 800774c:	e7eb      	b.n	8007726 <quorem+0xea>
 800774e:	2000      	movs	r0, #0
 8007750:	e7ee      	b.n	8007730 <quorem+0xf4>
 8007752:	0000      	movs	r0, r0
 8007754:	0000      	movs	r0, r0
	...

08007758 <_dtoa_r>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	ed2d 8b02 	vpush	{d8}
 8007760:	ec57 6b10 	vmov	r6, r7, d0
 8007764:	b095      	sub	sp, #84	; 0x54
 8007766:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007768:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800776c:	9105      	str	r1, [sp, #20]
 800776e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007772:	4604      	mov	r4, r0
 8007774:	9209      	str	r2, [sp, #36]	; 0x24
 8007776:	930f      	str	r3, [sp, #60]	; 0x3c
 8007778:	b975      	cbnz	r5, 8007798 <_dtoa_r+0x40>
 800777a:	2010      	movs	r0, #16
 800777c:	f7fe fb88 	bl	8005e90 <malloc>
 8007780:	4602      	mov	r2, r0
 8007782:	6260      	str	r0, [r4, #36]	; 0x24
 8007784:	b920      	cbnz	r0, 8007790 <_dtoa_r+0x38>
 8007786:	4bb2      	ldr	r3, [pc, #712]	; (8007a50 <_dtoa_r+0x2f8>)
 8007788:	21ea      	movs	r1, #234	; 0xea
 800778a:	48b2      	ldr	r0, [pc, #712]	; (8007a54 <_dtoa_r+0x2fc>)
 800778c:	f7ff ff24 	bl	80075d8 <__assert_func>
 8007790:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007794:	6005      	str	r5, [r0, #0]
 8007796:	60c5      	str	r5, [r0, #12]
 8007798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800779a:	6819      	ldr	r1, [r3, #0]
 800779c:	b151      	cbz	r1, 80077b4 <_dtoa_r+0x5c>
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	604a      	str	r2, [r1, #4]
 80077a2:	2301      	movs	r3, #1
 80077a4:	4093      	lsls	r3, r2
 80077a6:	608b      	str	r3, [r1, #8]
 80077a8:	4620      	mov	r0, r4
 80077aa:	f000 ff31 	bl	8008610 <_Bfree>
 80077ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	1e3b      	subs	r3, r7, #0
 80077b6:	bfb9      	ittee	lt
 80077b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80077bc:	9303      	strlt	r3, [sp, #12]
 80077be:	2300      	movge	r3, #0
 80077c0:	f8c8 3000 	strge.w	r3, [r8]
 80077c4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80077c8:	4ba3      	ldr	r3, [pc, #652]	; (8007a58 <_dtoa_r+0x300>)
 80077ca:	bfbc      	itt	lt
 80077cc:	2201      	movlt	r2, #1
 80077ce:	f8c8 2000 	strlt.w	r2, [r8]
 80077d2:	ea33 0309 	bics.w	r3, r3, r9
 80077d6:	d11b      	bne.n	8007810 <_dtoa_r+0xb8>
 80077d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077da:	f242 730f 	movw	r3, #9999	; 0x270f
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077e4:	4333      	orrs	r3, r6
 80077e6:	f000 857a 	beq.w	80082de <_dtoa_r+0xb86>
 80077ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077ec:	b963      	cbnz	r3, 8007808 <_dtoa_r+0xb0>
 80077ee:	4b9b      	ldr	r3, [pc, #620]	; (8007a5c <_dtoa_r+0x304>)
 80077f0:	e024      	b.n	800783c <_dtoa_r+0xe4>
 80077f2:	4b9b      	ldr	r3, [pc, #620]	; (8007a60 <_dtoa_r+0x308>)
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	3308      	adds	r3, #8
 80077f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	9800      	ldr	r0, [sp, #0]
 80077fe:	b015      	add	sp, #84	; 0x54
 8007800:	ecbd 8b02 	vpop	{d8}
 8007804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007808:	4b94      	ldr	r3, [pc, #592]	; (8007a5c <_dtoa_r+0x304>)
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	3303      	adds	r3, #3
 800780e:	e7f3      	b.n	80077f8 <_dtoa_r+0xa0>
 8007810:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007814:	2200      	movs	r2, #0
 8007816:	ec51 0b17 	vmov	r0, r1, d7
 800781a:	2300      	movs	r3, #0
 800781c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007820:	f7f9 f982 	bl	8000b28 <__aeabi_dcmpeq>
 8007824:	4680      	mov	r8, r0
 8007826:	b158      	cbz	r0, 8007840 <_dtoa_r+0xe8>
 8007828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800782a:	2301      	movs	r3, #1
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 8551 	beq.w	80082d8 <_dtoa_r+0xb80>
 8007836:	488b      	ldr	r0, [pc, #556]	; (8007a64 <_dtoa_r+0x30c>)
 8007838:	6018      	str	r0, [r3, #0]
 800783a:	1e43      	subs	r3, r0, #1
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	e7dd      	b.n	80077fc <_dtoa_r+0xa4>
 8007840:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007844:	aa12      	add	r2, sp, #72	; 0x48
 8007846:	a913      	add	r1, sp, #76	; 0x4c
 8007848:	4620      	mov	r0, r4
 800784a:	f001 f9c3 	bl	8008bd4 <__d2b>
 800784e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007852:	4683      	mov	fp, r0
 8007854:	2d00      	cmp	r5, #0
 8007856:	d07c      	beq.n	8007952 <_dtoa_r+0x1fa>
 8007858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800785a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800785e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007862:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007866:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800786a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800786e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007872:	4b7d      	ldr	r3, [pc, #500]	; (8007a68 <_dtoa_r+0x310>)
 8007874:	2200      	movs	r2, #0
 8007876:	4630      	mov	r0, r6
 8007878:	4639      	mov	r1, r7
 800787a:	f7f8 fd35 	bl	80002e8 <__aeabi_dsub>
 800787e:	a36e      	add	r3, pc, #440	; (adr r3, 8007a38 <_dtoa_r+0x2e0>)
 8007880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007884:	f7f8 fee8 	bl	8000658 <__aeabi_dmul>
 8007888:	a36d      	add	r3, pc, #436	; (adr r3, 8007a40 <_dtoa_r+0x2e8>)
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	f7f8 fd2d 	bl	80002ec <__adddf3>
 8007892:	4606      	mov	r6, r0
 8007894:	4628      	mov	r0, r5
 8007896:	460f      	mov	r7, r1
 8007898:	f7f8 fe74 	bl	8000584 <__aeabi_i2d>
 800789c:	a36a      	add	r3, pc, #424	; (adr r3, 8007a48 <_dtoa_r+0x2f0>)
 800789e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a2:	f7f8 fed9 	bl	8000658 <__aeabi_dmul>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4630      	mov	r0, r6
 80078ac:	4639      	mov	r1, r7
 80078ae:	f7f8 fd1d 	bl	80002ec <__adddf3>
 80078b2:	4606      	mov	r6, r0
 80078b4:	460f      	mov	r7, r1
 80078b6:	f7f9 f97f 	bl	8000bb8 <__aeabi_d2iz>
 80078ba:	2200      	movs	r2, #0
 80078bc:	4682      	mov	sl, r0
 80078be:	2300      	movs	r3, #0
 80078c0:	4630      	mov	r0, r6
 80078c2:	4639      	mov	r1, r7
 80078c4:	f7f9 f93a 	bl	8000b3c <__aeabi_dcmplt>
 80078c8:	b148      	cbz	r0, 80078de <_dtoa_r+0x186>
 80078ca:	4650      	mov	r0, sl
 80078cc:	f7f8 fe5a 	bl	8000584 <__aeabi_i2d>
 80078d0:	4632      	mov	r2, r6
 80078d2:	463b      	mov	r3, r7
 80078d4:	f7f9 f928 	bl	8000b28 <__aeabi_dcmpeq>
 80078d8:	b908      	cbnz	r0, 80078de <_dtoa_r+0x186>
 80078da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078de:	f1ba 0f16 	cmp.w	sl, #22
 80078e2:	d854      	bhi.n	800798e <_dtoa_r+0x236>
 80078e4:	4b61      	ldr	r3, [pc, #388]	; (8007a6c <_dtoa_r+0x314>)
 80078e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80078ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078f2:	f7f9 f923 	bl	8000b3c <__aeabi_dcmplt>
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d04b      	beq.n	8007992 <_dtoa_r+0x23a>
 80078fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078fe:	2300      	movs	r3, #0
 8007900:	930e      	str	r3, [sp, #56]	; 0x38
 8007902:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007904:	1b5d      	subs	r5, r3, r5
 8007906:	1e6b      	subs	r3, r5, #1
 8007908:	9304      	str	r3, [sp, #16]
 800790a:	bf43      	ittte	mi
 800790c:	2300      	movmi	r3, #0
 800790e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007912:	9304      	strmi	r3, [sp, #16]
 8007914:	f04f 0800 	movpl.w	r8, #0
 8007918:	f1ba 0f00 	cmp.w	sl, #0
 800791c:	db3b      	blt.n	8007996 <_dtoa_r+0x23e>
 800791e:	9b04      	ldr	r3, [sp, #16]
 8007920:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007924:	4453      	add	r3, sl
 8007926:	9304      	str	r3, [sp, #16]
 8007928:	2300      	movs	r3, #0
 800792a:	9306      	str	r3, [sp, #24]
 800792c:	9b05      	ldr	r3, [sp, #20]
 800792e:	2b09      	cmp	r3, #9
 8007930:	d869      	bhi.n	8007a06 <_dtoa_r+0x2ae>
 8007932:	2b05      	cmp	r3, #5
 8007934:	bfc4      	itt	gt
 8007936:	3b04      	subgt	r3, #4
 8007938:	9305      	strgt	r3, [sp, #20]
 800793a:	9b05      	ldr	r3, [sp, #20]
 800793c:	f1a3 0302 	sub.w	r3, r3, #2
 8007940:	bfcc      	ite	gt
 8007942:	2500      	movgt	r5, #0
 8007944:	2501      	movle	r5, #1
 8007946:	2b03      	cmp	r3, #3
 8007948:	d869      	bhi.n	8007a1e <_dtoa_r+0x2c6>
 800794a:	e8df f003 	tbb	[pc, r3]
 800794e:	4e2c      	.short	0x4e2c
 8007950:	5a4c      	.short	0x5a4c
 8007952:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007956:	441d      	add	r5, r3
 8007958:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800795c:	2b20      	cmp	r3, #32
 800795e:	bfc1      	itttt	gt
 8007960:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007964:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007968:	fa09 f303 	lslgt.w	r3, r9, r3
 800796c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007970:	bfda      	itte	le
 8007972:	f1c3 0320 	rsble	r3, r3, #32
 8007976:	fa06 f003 	lslle.w	r0, r6, r3
 800797a:	4318      	orrgt	r0, r3
 800797c:	f7f8 fdf2 	bl	8000564 <__aeabi_ui2d>
 8007980:	2301      	movs	r3, #1
 8007982:	4606      	mov	r6, r0
 8007984:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007988:	3d01      	subs	r5, #1
 800798a:	9310      	str	r3, [sp, #64]	; 0x40
 800798c:	e771      	b.n	8007872 <_dtoa_r+0x11a>
 800798e:	2301      	movs	r3, #1
 8007990:	e7b6      	b.n	8007900 <_dtoa_r+0x1a8>
 8007992:	900e      	str	r0, [sp, #56]	; 0x38
 8007994:	e7b5      	b.n	8007902 <_dtoa_r+0x1aa>
 8007996:	f1ca 0300 	rsb	r3, sl, #0
 800799a:	9306      	str	r3, [sp, #24]
 800799c:	2300      	movs	r3, #0
 800799e:	eba8 080a 	sub.w	r8, r8, sl
 80079a2:	930d      	str	r3, [sp, #52]	; 0x34
 80079a4:	e7c2      	b.n	800792c <_dtoa_r+0x1d4>
 80079a6:	2300      	movs	r3, #0
 80079a8:	9308      	str	r3, [sp, #32]
 80079aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	dc39      	bgt.n	8007a24 <_dtoa_r+0x2cc>
 80079b0:	f04f 0901 	mov.w	r9, #1
 80079b4:	f8cd 9004 	str.w	r9, [sp, #4]
 80079b8:	464b      	mov	r3, r9
 80079ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80079be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80079c0:	2200      	movs	r2, #0
 80079c2:	6042      	str	r2, [r0, #4]
 80079c4:	2204      	movs	r2, #4
 80079c6:	f102 0614 	add.w	r6, r2, #20
 80079ca:	429e      	cmp	r6, r3
 80079cc:	6841      	ldr	r1, [r0, #4]
 80079ce:	d92f      	bls.n	8007a30 <_dtoa_r+0x2d8>
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 fddd 	bl	8008590 <_Balloc>
 80079d6:	9000      	str	r0, [sp, #0]
 80079d8:	2800      	cmp	r0, #0
 80079da:	d14b      	bne.n	8007a74 <_dtoa_r+0x31c>
 80079dc:	4b24      	ldr	r3, [pc, #144]	; (8007a70 <_dtoa_r+0x318>)
 80079de:	4602      	mov	r2, r0
 80079e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079e4:	e6d1      	b.n	800778a <_dtoa_r+0x32>
 80079e6:	2301      	movs	r3, #1
 80079e8:	e7de      	b.n	80079a8 <_dtoa_r+0x250>
 80079ea:	2300      	movs	r3, #0
 80079ec:	9308      	str	r3, [sp, #32]
 80079ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079f0:	eb0a 0903 	add.w	r9, sl, r3
 80079f4:	f109 0301 	add.w	r3, r9, #1
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	bfb8      	it	lt
 80079fe:	2301      	movlt	r3, #1
 8007a00:	e7dd      	b.n	80079be <_dtoa_r+0x266>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e7f2      	b.n	80079ec <_dtoa_r+0x294>
 8007a06:	2501      	movs	r5, #1
 8007a08:	2300      	movs	r3, #0
 8007a0a:	9305      	str	r3, [sp, #20]
 8007a0c:	9508      	str	r5, [sp, #32]
 8007a0e:	f04f 39ff 	mov.w	r9, #4294967295
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a18:	2312      	movs	r3, #18
 8007a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a1c:	e7cf      	b.n	80079be <_dtoa_r+0x266>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	9308      	str	r3, [sp, #32]
 8007a22:	e7f4      	b.n	8007a0e <_dtoa_r+0x2b6>
 8007a24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007a28:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a2c:	464b      	mov	r3, r9
 8007a2e:	e7c6      	b.n	80079be <_dtoa_r+0x266>
 8007a30:	3101      	adds	r1, #1
 8007a32:	6041      	str	r1, [r0, #4]
 8007a34:	0052      	lsls	r2, r2, #1
 8007a36:	e7c6      	b.n	80079c6 <_dtoa_r+0x26e>
 8007a38:	636f4361 	.word	0x636f4361
 8007a3c:	3fd287a7 	.word	0x3fd287a7
 8007a40:	8b60c8b3 	.word	0x8b60c8b3
 8007a44:	3fc68a28 	.word	0x3fc68a28
 8007a48:	509f79fb 	.word	0x509f79fb
 8007a4c:	3fd34413 	.word	0x3fd34413
 8007a50:	0800abcc 	.word	0x0800abcc
 8007a54:	0800aebc 	.word	0x0800aebc
 8007a58:	7ff00000 	.word	0x7ff00000
 8007a5c:	0800aeb8 	.word	0x0800aeb8
 8007a60:	0800aeaf 	.word	0x0800aeaf
 8007a64:	0800b10d 	.word	0x0800b10d
 8007a68:	3ff80000 	.word	0x3ff80000
 8007a6c:	0800afc0 	.word	0x0800afc0
 8007a70:	0800af1b 	.word	0x0800af1b
 8007a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a76:	9a00      	ldr	r2, [sp, #0]
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	9b01      	ldr	r3, [sp, #4]
 8007a7c:	2b0e      	cmp	r3, #14
 8007a7e:	f200 80ad 	bhi.w	8007bdc <_dtoa_r+0x484>
 8007a82:	2d00      	cmp	r5, #0
 8007a84:	f000 80aa 	beq.w	8007bdc <_dtoa_r+0x484>
 8007a88:	f1ba 0f00 	cmp.w	sl, #0
 8007a8c:	dd36      	ble.n	8007afc <_dtoa_r+0x3a4>
 8007a8e:	4ac3      	ldr	r2, [pc, #780]	; (8007d9c <_dtoa_r+0x644>)
 8007a90:	f00a 030f 	and.w	r3, sl, #15
 8007a94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a98:	ed93 7b00 	vldr	d7, [r3]
 8007a9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007aa0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007aa4:	eeb0 8a47 	vmov.f32	s16, s14
 8007aa8:	eef0 8a67 	vmov.f32	s17, s15
 8007aac:	d016      	beq.n	8007adc <_dtoa_r+0x384>
 8007aae:	4bbc      	ldr	r3, [pc, #752]	; (8007da0 <_dtoa_r+0x648>)
 8007ab0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ab4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ab8:	f7f8 fef8 	bl	80008ac <__aeabi_ddiv>
 8007abc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac0:	f007 070f 	and.w	r7, r7, #15
 8007ac4:	2503      	movs	r5, #3
 8007ac6:	4eb6      	ldr	r6, [pc, #728]	; (8007da0 <_dtoa_r+0x648>)
 8007ac8:	b957      	cbnz	r7, 8007ae0 <_dtoa_r+0x388>
 8007aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ace:	ec53 2b18 	vmov	r2, r3, d8
 8007ad2:	f7f8 feeb 	bl	80008ac <__aeabi_ddiv>
 8007ad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ada:	e029      	b.n	8007b30 <_dtoa_r+0x3d8>
 8007adc:	2502      	movs	r5, #2
 8007ade:	e7f2      	b.n	8007ac6 <_dtoa_r+0x36e>
 8007ae0:	07f9      	lsls	r1, r7, #31
 8007ae2:	d508      	bpl.n	8007af6 <_dtoa_r+0x39e>
 8007ae4:	ec51 0b18 	vmov	r0, r1, d8
 8007ae8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007aec:	f7f8 fdb4 	bl	8000658 <__aeabi_dmul>
 8007af0:	ec41 0b18 	vmov	d8, r0, r1
 8007af4:	3501      	adds	r5, #1
 8007af6:	107f      	asrs	r7, r7, #1
 8007af8:	3608      	adds	r6, #8
 8007afa:	e7e5      	b.n	8007ac8 <_dtoa_r+0x370>
 8007afc:	f000 80a6 	beq.w	8007c4c <_dtoa_r+0x4f4>
 8007b00:	f1ca 0600 	rsb	r6, sl, #0
 8007b04:	4ba5      	ldr	r3, [pc, #660]	; (8007d9c <_dtoa_r+0x644>)
 8007b06:	4fa6      	ldr	r7, [pc, #664]	; (8007da0 <_dtoa_r+0x648>)
 8007b08:	f006 020f 	and.w	r2, r6, #15
 8007b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b18:	f7f8 fd9e 	bl	8000658 <__aeabi_dmul>
 8007b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b20:	1136      	asrs	r6, r6, #4
 8007b22:	2300      	movs	r3, #0
 8007b24:	2502      	movs	r5, #2
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	f040 8085 	bne.w	8007c36 <_dtoa_r+0x4de>
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1d2      	bne.n	8007ad6 <_dtoa_r+0x37e>
 8007b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 808c 	beq.w	8007c50 <_dtoa_r+0x4f8>
 8007b38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b3c:	4b99      	ldr	r3, [pc, #612]	; (8007da4 <_dtoa_r+0x64c>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	4630      	mov	r0, r6
 8007b42:	4639      	mov	r1, r7
 8007b44:	f7f8 fffa 	bl	8000b3c <__aeabi_dcmplt>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	f000 8081 	beq.w	8007c50 <_dtoa_r+0x4f8>
 8007b4e:	9b01      	ldr	r3, [sp, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d07d      	beq.n	8007c50 <_dtoa_r+0x4f8>
 8007b54:	f1b9 0f00 	cmp.w	r9, #0
 8007b58:	dd3c      	ble.n	8007bd4 <_dtoa_r+0x47c>
 8007b5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b5e:	9307      	str	r3, [sp, #28]
 8007b60:	2200      	movs	r2, #0
 8007b62:	4b91      	ldr	r3, [pc, #580]	; (8007da8 <_dtoa_r+0x650>)
 8007b64:	4630      	mov	r0, r6
 8007b66:	4639      	mov	r1, r7
 8007b68:	f7f8 fd76 	bl	8000658 <__aeabi_dmul>
 8007b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b70:	3501      	adds	r5, #1
 8007b72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007b76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f7f8 fd02 	bl	8000584 <__aeabi_i2d>
 8007b80:	4632      	mov	r2, r6
 8007b82:	463b      	mov	r3, r7
 8007b84:	f7f8 fd68 	bl	8000658 <__aeabi_dmul>
 8007b88:	4b88      	ldr	r3, [pc, #544]	; (8007dac <_dtoa_r+0x654>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f7f8 fbae 	bl	80002ec <__adddf3>
 8007b90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b98:	9303      	str	r3, [sp, #12]
 8007b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d15c      	bne.n	8007c5a <_dtoa_r+0x502>
 8007ba0:	4b83      	ldr	r3, [pc, #524]	; (8007db0 <_dtoa_r+0x658>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	f7f8 fb9e 	bl	80002e8 <__aeabi_dsub>
 8007bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bb0:	4606      	mov	r6, r0
 8007bb2:	460f      	mov	r7, r1
 8007bb4:	f7f8 ffe0 	bl	8000b78 <__aeabi_dcmpgt>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	f040 8296 	bne.w	80080ea <_dtoa_r+0x992>
 8007bbe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007bc2:	4630      	mov	r0, r6
 8007bc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bc8:	4639      	mov	r1, r7
 8007bca:	f7f8 ffb7 	bl	8000b3c <__aeabi_dcmplt>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f040 8288 	bne.w	80080e4 <_dtoa_r+0x98c>
 8007bd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007bd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f2c0 8158 	blt.w	8007e94 <_dtoa_r+0x73c>
 8007be4:	f1ba 0f0e 	cmp.w	sl, #14
 8007be8:	f300 8154 	bgt.w	8007e94 <_dtoa_r+0x73c>
 8007bec:	4b6b      	ldr	r3, [pc, #428]	; (8007d9c <_dtoa_r+0x644>)
 8007bee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bf2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f280 80e3 	bge.w	8007dc4 <_dtoa_r+0x66c>
 8007bfe:	9b01      	ldr	r3, [sp, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f300 80df 	bgt.w	8007dc4 <_dtoa_r+0x66c>
 8007c06:	f040 826d 	bne.w	80080e4 <_dtoa_r+0x98c>
 8007c0a:	4b69      	ldr	r3, [pc, #420]	; (8007db0 <_dtoa_r+0x658>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4640      	mov	r0, r8
 8007c10:	4649      	mov	r1, r9
 8007c12:	f7f8 fd21 	bl	8000658 <__aeabi_dmul>
 8007c16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c1a:	f7f8 ffa3 	bl	8000b64 <__aeabi_dcmpge>
 8007c1e:	9e01      	ldr	r6, [sp, #4]
 8007c20:	4637      	mov	r7, r6
 8007c22:	2800      	cmp	r0, #0
 8007c24:	f040 8243 	bne.w	80080ae <_dtoa_r+0x956>
 8007c28:	9d00      	ldr	r5, [sp, #0]
 8007c2a:	2331      	movs	r3, #49	; 0x31
 8007c2c:	f805 3b01 	strb.w	r3, [r5], #1
 8007c30:	f10a 0a01 	add.w	sl, sl, #1
 8007c34:	e23f      	b.n	80080b6 <_dtoa_r+0x95e>
 8007c36:	07f2      	lsls	r2, r6, #31
 8007c38:	d505      	bpl.n	8007c46 <_dtoa_r+0x4ee>
 8007c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c3e:	f7f8 fd0b 	bl	8000658 <__aeabi_dmul>
 8007c42:	3501      	adds	r5, #1
 8007c44:	2301      	movs	r3, #1
 8007c46:	1076      	asrs	r6, r6, #1
 8007c48:	3708      	adds	r7, #8
 8007c4a:	e76c      	b.n	8007b26 <_dtoa_r+0x3ce>
 8007c4c:	2502      	movs	r5, #2
 8007c4e:	e76f      	b.n	8007b30 <_dtoa_r+0x3d8>
 8007c50:	9b01      	ldr	r3, [sp, #4]
 8007c52:	f8cd a01c 	str.w	sl, [sp, #28]
 8007c56:	930c      	str	r3, [sp, #48]	; 0x30
 8007c58:	e78d      	b.n	8007b76 <_dtoa_r+0x41e>
 8007c5a:	9900      	ldr	r1, [sp, #0]
 8007c5c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007c5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c60:	4b4e      	ldr	r3, [pc, #312]	; (8007d9c <_dtoa_r+0x644>)
 8007c62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c66:	4401      	add	r1, r0
 8007c68:	9102      	str	r1, [sp, #8]
 8007c6a:	9908      	ldr	r1, [sp, #32]
 8007c6c:	eeb0 8a47 	vmov.f32	s16, s14
 8007c70:	eef0 8a67 	vmov.f32	s17, s15
 8007c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c7c:	2900      	cmp	r1, #0
 8007c7e:	d045      	beq.n	8007d0c <_dtoa_r+0x5b4>
 8007c80:	494c      	ldr	r1, [pc, #304]	; (8007db4 <_dtoa_r+0x65c>)
 8007c82:	2000      	movs	r0, #0
 8007c84:	f7f8 fe12 	bl	80008ac <__aeabi_ddiv>
 8007c88:	ec53 2b18 	vmov	r2, r3, d8
 8007c8c:	f7f8 fb2c 	bl	80002e8 <__aeabi_dsub>
 8007c90:	9d00      	ldr	r5, [sp, #0]
 8007c92:	ec41 0b18 	vmov	d8, r0, r1
 8007c96:	4639      	mov	r1, r7
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f7f8 ff8d 	bl	8000bb8 <__aeabi_d2iz>
 8007c9e:	900c      	str	r0, [sp, #48]	; 0x30
 8007ca0:	f7f8 fc70 	bl	8000584 <__aeabi_i2d>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	4630      	mov	r0, r6
 8007caa:	4639      	mov	r1, r7
 8007cac:	f7f8 fb1c 	bl	80002e8 <__aeabi_dsub>
 8007cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb2:	3330      	adds	r3, #48	; 0x30
 8007cb4:	f805 3b01 	strb.w	r3, [r5], #1
 8007cb8:	ec53 2b18 	vmov	r2, r3, d8
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	460f      	mov	r7, r1
 8007cc0:	f7f8 ff3c 	bl	8000b3c <__aeabi_dcmplt>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d165      	bne.n	8007d94 <_dtoa_r+0x63c>
 8007cc8:	4632      	mov	r2, r6
 8007cca:	463b      	mov	r3, r7
 8007ccc:	4935      	ldr	r1, [pc, #212]	; (8007da4 <_dtoa_r+0x64c>)
 8007cce:	2000      	movs	r0, #0
 8007cd0:	f7f8 fb0a 	bl	80002e8 <__aeabi_dsub>
 8007cd4:	ec53 2b18 	vmov	r2, r3, d8
 8007cd8:	f7f8 ff30 	bl	8000b3c <__aeabi_dcmplt>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	f040 80b9 	bne.w	8007e54 <_dtoa_r+0x6fc>
 8007ce2:	9b02      	ldr	r3, [sp, #8]
 8007ce4:	429d      	cmp	r5, r3
 8007ce6:	f43f af75 	beq.w	8007bd4 <_dtoa_r+0x47c>
 8007cea:	4b2f      	ldr	r3, [pc, #188]	; (8007da8 <_dtoa_r+0x650>)
 8007cec:	ec51 0b18 	vmov	r0, r1, d8
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f7f8 fcb1 	bl	8000658 <__aeabi_dmul>
 8007cf6:	4b2c      	ldr	r3, [pc, #176]	; (8007da8 <_dtoa_r+0x650>)
 8007cf8:	ec41 0b18 	vmov	d8, r0, r1
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 fca9 	bl	8000658 <__aeabi_dmul>
 8007d06:	4606      	mov	r6, r0
 8007d08:	460f      	mov	r7, r1
 8007d0a:	e7c4      	b.n	8007c96 <_dtoa_r+0x53e>
 8007d0c:	ec51 0b17 	vmov	r0, r1, d7
 8007d10:	f7f8 fca2 	bl	8000658 <__aeabi_dmul>
 8007d14:	9b02      	ldr	r3, [sp, #8]
 8007d16:	9d00      	ldr	r5, [sp, #0]
 8007d18:	930c      	str	r3, [sp, #48]	; 0x30
 8007d1a:	ec41 0b18 	vmov	d8, r0, r1
 8007d1e:	4639      	mov	r1, r7
 8007d20:	4630      	mov	r0, r6
 8007d22:	f7f8 ff49 	bl	8000bb8 <__aeabi_d2iz>
 8007d26:	9011      	str	r0, [sp, #68]	; 0x44
 8007d28:	f7f8 fc2c 	bl	8000584 <__aeabi_i2d>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4630      	mov	r0, r6
 8007d32:	4639      	mov	r1, r7
 8007d34:	f7f8 fad8 	bl	80002e8 <__aeabi_dsub>
 8007d38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d3a:	3330      	adds	r3, #48	; 0x30
 8007d3c:	f805 3b01 	strb.w	r3, [r5], #1
 8007d40:	9b02      	ldr	r3, [sp, #8]
 8007d42:	429d      	cmp	r5, r3
 8007d44:	4606      	mov	r6, r0
 8007d46:	460f      	mov	r7, r1
 8007d48:	f04f 0200 	mov.w	r2, #0
 8007d4c:	d134      	bne.n	8007db8 <_dtoa_r+0x660>
 8007d4e:	4b19      	ldr	r3, [pc, #100]	; (8007db4 <_dtoa_r+0x65c>)
 8007d50:	ec51 0b18 	vmov	r0, r1, d8
 8007d54:	f7f8 faca 	bl	80002ec <__adddf3>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	4639      	mov	r1, r7
 8007d60:	f7f8 ff0a 	bl	8000b78 <__aeabi_dcmpgt>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d175      	bne.n	8007e54 <_dtoa_r+0x6fc>
 8007d68:	ec53 2b18 	vmov	r2, r3, d8
 8007d6c:	4911      	ldr	r1, [pc, #68]	; (8007db4 <_dtoa_r+0x65c>)
 8007d6e:	2000      	movs	r0, #0
 8007d70:	f7f8 faba 	bl	80002e8 <__aeabi_dsub>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4630      	mov	r0, r6
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7f8 fede 	bl	8000b3c <__aeabi_dcmplt>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	f43f af27 	beq.w	8007bd4 <_dtoa_r+0x47c>
 8007d86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d88:	1e6b      	subs	r3, r5, #1
 8007d8a:	930c      	str	r3, [sp, #48]	; 0x30
 8007d8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d90:	2b30      	cmp	r3, #48	; 0x30
 8007d92:	d0f8      	beq.n	8007d86 <_dtoa_r+0x62e>
 8007d94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007d98:	e04a      	b.n	8007e30 <_dtoa_r+0x6d8>
 8007d9a:	bf00      	nop
 8007d9c:	0800afc0 	.word	0x0800afc0
 8007da0:	0800af98 	.word	0x0800af98
 8007da4:	3ff00000 	.word	0x3ff00000
 8007da8:	40240000 	.word	0x40240000
 8007dac:	401c0000 	.word	0x401c0000
 8007db0:	40140000 	.word	0x40140000
 8007db4:	3fe00000 	.word	0x3fe00000
 8007db8:	4baf      	ldr	r3, [pc, #700]	; (8008078 <_dtoa_r+0x920>)
 8007dba:	f7f8 fc4d 	bl	8000658 <__aeabi_dmul>
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	460f      	mov	r7, r1
 8007dc2:	e7ac      	b.n	8007d1e <_dtoa_r+0x5c6>
 8007dc4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007dc8:	9d00      	ldr	r5, [sp, #0]
 8007dca:	4642      	mov	r2, r8
 8007dcc:	464b      	mov	r3, r9
 8007dce:	4630      	mov	r0, r6
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	f7f8 fd6b 	bl	80008ac <__aeabi_ddiv>
 8007dd6:	f7f8 feef 	bl	8000bb8 <__aeabi_d2iz>
 8007dda:	9002      	str	r0, [sp, #8]
 8007ddc:	f7f8 fbd2 	bl	8000584 <__aeabi_i2d>
 8007de0:	4642      	mov	r2, r8
 8007de2:	464b      	mov	r3, r9
 8007de4:	f7f8 fc38 	bl	8000658 <__aeabi_dmul>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4630      	mov	r0, r6
 8007dee:	4639      	mov	r1, r7
 8007df0:	f7f8 fa7a 	bl	80002e8 <__aeabi_dsub>
 8007df4:	9e02      	ldr	r6, [sp, #8]
 8007df6:	9f01      	ldr	r7, [sp, #4]
 8007df8:	3630      	adds	r6, #48	; 0x30
 8007dfa:	f805 6b01 	strb.w	r6, [r5], #1
 8007dfe:	9e00      	ldr	r6, [sp, #0]
 8007e00:	1bae      	subs	r6, r5, r6
 8007e02:	42b7      	cmp	r7, r6
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	d137      	bne.n	8007e7a <_dtoa_r+0x722>
 8007e0a:	f7f8 fa6f 	bl	80002ec <__adddf3>
 8007e0e:	4642      	mov	r2, r8
 8007e10:	464b      	mov	r3, r9
 8007e12:	4606      	mov	r6, r0
 8007e14:	460f      	mov	r7, r1
 8007e16:	f7f8 feaf 	bl	8000b78 <__aeabi_dcmpgt>
 8007e1a:	b9c8      	cbnz	r0, 8007e50 <_dtoa_r+0x6f8>
 8007e1c:	4642      	mov	r2, r8
 8007e1e:	464b      	mov	r3, r9
 8007e20:	4630      	mov	r0, r6
 8007e22:	4639      	mov	r1, r7
 8007e24:	f7f8 fe80 	bl	8000b28 <__aeabi_dcmpeq>
 8007e28:	b110      	cbz	r0, 8007e30 <_dtoa_r+0x6d8>
 8007e2a:	9b02      	ldr	r3, [sp, #8]
 8007e2c:	07d9      	lsls	r1, r3, #31
 8007e2e:	d40f      	bmi.n	8007e50 <_dtoa_r+0x6f8>
 8007e30:	4620      	mov	r0, r4
 8007e32:	4659      	mov	r1, fp
 8007e34:	f000 fbec 	bl	8008610 <_Bfree>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	702b      	strb	r3, [r5, #0]
 8007e3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e3e:	f10a 0001 	add.w	r0, sl, #1
 8007e42:	6018      	str	r0, [r3, #0]
 8007e44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f43f acd8 	beq.w	80077fc <_dtoa_r+0xa4>
 8007e4c:	601d      	str	r5, [r3, #0]
 8007e4e:	e4d5      	b.n	80077fc <_dtoa_r+0xa4>
 8007e50:	f8cd a01c 	str.w	sl, [sp, #28]
 8007e54:	462b      	mov	r3, r5
 8007e56:	461d      	mov	r5, r3
 8007e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e5c:	2a39      	cmp	r2, #57	; 0x39
 8007e5e:	d108      	bne.n	8007e72 <_dtoa_r+0x71a>
 8007e60:	9a00      	ldr	r2, [sp, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d1f7      	bne.n	8007e56 <_dtoa_r+0x6fe>
 8007e66:	9a07      	ldr	r2, [sp, #28]
 8007e68:	9900      	ldr	r1, [sp, #0]
 8007e6a:	3201      	adds	r2, #1
 8007e6c:	9207      	str	r2, [sp, #28]
 8007e6e:	2230      	movs	r2, #48	; 0x30
 8007e70:	700a      	strb	r2, [r1, #0]
 8007e72:	781a      	ldrb	r2, [r3, #0]
 8007e74:	3201      	adds	r2, #1
 8007e76:	701a      	strb	r2, [r3, #0]
 8007e78:	e78c      	b.n	8007d94 <_dtoa_r+0x63c>
 8007e7a:	4b7f      	ldr	r3, [pc, #508]	; (8008078 <_dtoa_r+0x920>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f7f8 fbeb 	bl	8000658 <__aeabi_dmul>
 8007e82:	2200      	movs	r2, #0
 8007e84:	2300      	movs	r3, #0
 8007e86:	4606      	mov	r6, r0
 8007e88:	460f      	mov	r7, r1
 8007e8a:	f7f8 fe4d 	bl	8000b28 <__aeabi_dcmpeq>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d09b      	beq.n	8007dca <_dtoa_r+0x672>
 8007e92:	e7cd      	b.n	8007e30 <_dtoa_r+0x6d8>
 8007e94:	9a08      	ldr	r2, [sp, #32]
 8007e96:	2a00      	cmp	r2, #0
 8007e98:	f000 80c4 	beq.w	8008024 <_dtoa_r+0x8cc>
 8007e9c:	9a05      	ldr	r2, [sp, #20]
 8007e9e:	2a01      	cmp	r2, #1
 8007ea0:	f300 80a8 	bgt.w	8007ff4 <_dtoa_r+0x89c>
 8007ea4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ea6:	2a00      	cmp	r2, #0
 8007ea8:	f000 80a0 	beq.w	8007fec <_dtoa_r+0x894>
 8007eac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007eb0:	9e06      	ldr	r6, [sp, #24]
 8007eb2:	4645      	mov	r5, r8
 8007eb4:	9a04      	ldr	r2, [sp, #16]
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	441a      	add	r2, r3
 8007eba:	4620      	mov	r0, r4
 8007ebc:	4498      	add	r8, r3
 8007ebe:	9204      	str	r2, [sp, #16]
 8007ec0:	f000 fc62 	bl	8008788 <__i2b>
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	2d00      	cmp	r5, #0
 8007ec8:	dd0b      	ble.n	8007ee2 <_dtoa_r+0x78a>
 8007eca:	9b04      	ldr	r3, [sp, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	dd08      	ble.n	8007ee2 <_dtoa_r+0x78a>
 8007ed0:	42ab      	cmp	r3, r5
 8007ed2:	9a04      	ldr	r2, [sp, #16]
 8007ed4:	bfa8      	it	ge
 8007ed6:	462b      	movge	r3, r5
 8007ed8:	eba8 0803 	sub.w	r8, r8, r3
 8007edc:	1aed      	subs	r5, r5, r3
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	9304      	str	r3, [sp, #16]
 8007ee2:	9b06      	ldr	r3, [sp, #24]
 8007ee4:	b1fb      	cbz	r3, 8007f26 <_dtoa_r+0x7ce>
 8007ee6:	9b08      	ldr	r3, [sp, #32]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 809f 	beq.w	800802c <_dtoa_r+0x8d4>
 8007eee:	2e00      	cmp	r6, #0
 8007ef0:	dd11      	ble.n	8007f16 <_dtoa_r+0x7be>
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	4632      	mov	r2, r6
 8007ef6:	4620      	mov	r0, r4
 8007ef8:	f000 fd02 	bl	8008900 <__pow5mult>
 8007efc:	465a      	mov	r2, fp
 8007efe:	4601      	mov	r1, r0
 8007f00:	4607      	mov	r7, r0
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 fc56 	bl	80087b4 <__multiply>
 8007f08:	4659      	mov	r1, fp
 8007f0a:	9007      	str	r0, [sp, #28]
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f000 fb7f 	bl	8008610 <_Bfree>
 8007f12:	9b07      	ldr	r3, [sp, #28]
 8007f14:	469b      	mov	fp, r3
 8007f16:	9b06      	ldr	r3, [sp, #24]
 8007f18:	1b9a      	subs	r2, r3, r6
 8007f1a:	d004      	beq.n	8007f26 <_dtoa_r+0x7ce>
 8007f1c:	4659      	mov	r1, fp
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 fcee 	bl	8008900 <__pow5mult>
 8007f24:	4683      	mov	fp, r0
 8007f26:	2101      	movs	r1, #1
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fc2d 	bl	8008788 <__i2b>
 8007f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	4606      	mov	r6, r0
 8007f34:	dd7c      	ble.n	8008030 <_dtoa_r+0x8d8>
 8007f36:	461a      	mov	r2, r3
 8007f38:	4601      	mov	r1, r0
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f000 fce0 	bl	8008900 <__pow5mult>
 8007f40:	9b05      	ldr	r3, [sp, #20]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	4606      	mov	r6, r0
 8007f46:	dd76      	ble.n	8008036 <_dtoa_r+0x8de>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	9306      	str	r3, [sp, #24]
 8007f4c:	6933      	ldr	r3, [r6, #16]
 8007f4e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f52:	6918      	ldr	r0, [r3, #16]
 8007f54:	f000 fbc8 	bl	80086e8 <__hi0bits>
 8007f58:	f1c0 0020 	rsb	r0, r0, #32
 8007f5c:	9b04      	ldr	r3, [sp, #16]
 8007f5e:	4418      	add	r0, r3
 8007f60:	f010 001f 	ands.w	r0, r0, #31
 8007f64:	f000 8086 	beq.w	8008074 <_dtoa_r+0x91c>
 8007f68:	f1c0 0320 	rsb	r3, r0, #32
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	dd7f      	ble.n	8008070 <_dtoa_r+0x918>
 8007f70:	f1c0 001c 	rsb	r0, r0, #28
 8007f74:	9b04      	ldr	r3, [sp, #16]
 8007f76:	4403      	add	r3, r0
 8007f78:	4480      	add	r8, r0
 8007f7a:	4405      	add	r5, r0
 8007f7c:	9304      	str	r3, [sp, #16]
 8007f7e:	f1b8 0f00 	cmp.w	r8, #0
 8007f82:	dd05      	ble.n	8007f90 <_dtoa_r+0x838>
 8007f84:	4659      	mov	r1, fp
 8007f86:	4642      	mov	r2, r8
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f000 fd13 	bl	80089b4 <__lshift>
 8007f8e:	4683      	mov	fp, r0
 8007f90:	9b04      	ldr	r3, [sp, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dd05      	ble.n	8007fa2 <_dtoa_r+0x84a>
 8007f96:	4631      	mov	r1, r6
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 fd0a 	bl	80089b4 <__lshift>
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d069      	beq.n	800807c <_dtoa_r+0x924>
 8007fa8:	4631      	mov	r1, r6
 8007faa:	4658      	mov	r0, fp
 8007fac:	f000 fd6e 	bl	8008a8c <__mcmp>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	da63      	bge.n	800807c <_dtoa_r+0x924>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4659      	mov	r1, fp
 8007fb8:	220a      	movs	r2, #10
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f000 fb4a 	bl	8008654 <__multadd>
 8007fc0:	9b08      	ldr	r3, [sp, #32]
 8007fc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fc6:	4683      	mov	fp, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 818f 	beq.w	80082ec <_dtoa_r+0xb94>
 8007fce:	4639      	mov	r1, r7
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	220a      	movs	r2, #10
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f000 fb3d 	bl	8008654 <__multadd>
 8007fda:	f1b9 0f00 	cmp.w	r9, #0
 8007fde:	4607      	mov	r7, r0
 8007fe0:	f300 808e 	bgt.w	8008100 <_dtoa_r+0x9a8>
 8007fe4:	9b05      	ldr	r3, [sp, #20]
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	dc50      	bgt.n	800808c <_dtoa_r+0x934>
 8007fea:	e089      	b.n	8008100 <_dtoa_r+0x9a8>
 8007fec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007ff2:	e75d      	b.n	8007eb0 <_dtoa_r+0x758>
 8007ff4:	9b01      	ldr	r3, [sp, #4]
 8007ff6:	1e5e      	subs	r6, r3, #1
 8007ff8:	9b06      	ldr	r3, [sp, #24]
 8007ffa:	42b3      	cmp	r3, r6
 8007ffc:	bfbf      	itttt	lt
 8007ffe:	9b06      	ldrlt	r3, [sp, #24]
 8008000:	9606      	strlt	r6, [sp, #24]
 8008002:	1af2      	sublt	r2, r6, r3
 8008004:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008006:	bfb6      	itet	lt
 8008008:	189b      	addlt	r3, r3, r2
 800800a:	1b9e      	subge	r6, r3, r6
 800800c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800800e:	9b01      	ldr	r3, [sp, #4]
 8008010:	bfb8      	it	lt
 8008012:	2600      	movlt	r6, #0
 8008014:	2b00      	cmp	r3, #0
 8008016:	bfb5      	itete	lt
 8008018:	eba8 0503 	sublt.w	r5, r8, r3
 800801c:	9b01      	ldrge	r3, [sp, #4]
 800801e:	2300      	movlt	r3, #0
 8008020:	4645      	movge	r5, r8
 8008022:	e747      	b.n	8007eb4 <_dtoa_r+0x75c>
 8008024:	9e06      	ldr	r6, [sp, #24]
 8008026:	9f08      	ldr	r7, [sp, #32]
 8008028:	4645      	mov	r5, r8
 800802a:	e74c      	b.n	8007ec6 <_dtoa_r+0x76e>
 800802c:	9a06      	ldr	r2, [sp, #24]
 800802e:	e775      	b.n	8007f1c <_dtoa_r+0x7c4>
 8008030:	9b05      	ldr	r3, [sp, #20]
 8008032:	2b01      	cmp	r3, #1
 8008034:	dc18      	bgt.n	8008068 <_dtoa_r+0x910>
 8008036:	9b02      	ldr	r3, [sp, #8]
 8008038:	b9b3      	cbnz	r3, 8008068 <_dtoa_r+0x910>
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008040:	b9a3      	cbnz	r3, 800806c <_dtoa_r+0x914>
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008048:	0d1b      	lsrs	r3, r3, #20
 800804a:	051b      	lsls	r3, r3, #20
 800804c:	b12b      	cbz	r3, 800805a <_dtoa_r+0x902>
 800804e:	9b04      	ldr	r3, [sp, #16]
 8008050:	3301      	adds	r3, #1
 8008052:	9304      	str	r3, [sp, #16]
 8008054:	f108 0801 	add.w	r8, r8, #1
 8008058:	2301      	movs	r3, #1
 800805a:	9306      	str	r3, [sp, #24]
 800805c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800805e:	2b00      	cmp	r3, #0
 8008060:	f47f af74 	bne.w	8007f4c <_dtoa_r+0x7f4>
 8008064:	2001      	movs	r0, #1
 8008066:	e779      	b.n	8007f5c <_dtoa_r+0x804>
 8008068:	2300      	movs	r3, #0
 800806a:	e7f6      	b.n	800805a <_dtoa_r+0x902>
 800806c:	9b02      	ldr	r3, [sp, #8]
 800806e:	e7f4      	b.n	800805a <_dtoa_r+0x902>
 8008070:	d085      	beq.n	8007f7e <_dtoa_r+0x826>
 8008072:	4618      	mov	r0, r3
 8008074:	301c      	adds	r0, #28
 8008076:	e77d      	b.n	8007f74 <_dtoa_r+0x81c>
 8008078:	40240000 	.word	0x40240000
 800807c:	9b01      	ldr	r3, [sp, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	dc38      	bgt.n	80080f4 <_dtoa_r+0x99c>
 8008082:	9b05      	ldr	r3, [sp, #20]
 8008084:	2b02      	cmp	r3, #2
 8008086:	dd35      	ble.n	80080f4 <_dtoa_r+0x99c>
 8008088:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800808c:	f1b9 0f00 	cmp.w	r9, #0
 8008090:	d10d      	bne.n	80080ae <_dtoa_r+0x956>
 8008092:	4631      	mov	r1, r6
 8008094:	464b      	mov	r3, r9
 8008096:	2205      	movs	r2, #5
 8008098:	4620      	mov	r0, r4
 800809a:	f000 fadb 	bl	8008654 <__multadd>
 800809e:	4601      	mov	r1, r0
 80080a0:	4606      	mov	r6, r0
 80080a2:	4658      	mov	r0, fp
 80080a4:	f000 fcf2 	bl	8008a8c <__mcmp>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	f73f adbd 	bgt.w	8007c28 <_dtoa_r+0x4d0>
 80080ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b0:	9d00      	ldr	r5, [sp, #0]
 80080b2:	ea6f 0a03 	mvn.w	sl, r3
 80080b6:	f04f 0800 	mov.w	r8, #0
 80080ba:	4631      	mov	r1, r6
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 faa7 	bl	8008610 <_Bfree>
 80080c2:	2f00      	cmp	r7, #0
 80080c4:	f43f aeb4 	beq.w	8007e30 <_dtoa_r+0x6d8>
 80080c8:	f1b8 0f00 	cmp.w	r8, #0
 80080cc:	d005      	beq.n	80080da <_dtoa_r+0x982>
 80080ce:	45b8      	cmp	r8, r7
 80080d0:	d003      	beq.n	80080da <_dtoa_r+0x982>
 80080d2:	4641      	mov	r1, r8
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fa9b 	bl	8008610 <_Bfree>
 80080da:	4639      	mov	r1, r7
 80080dc:	4620      	mov	r0, r4
 80080de:	f000 fa97 	bl	8008610 <_Bfree>
 80080e2:	e6a5      	b.n	8007e30 <_dtoa_r+0x6d8>
 80080e4:	2600      	movs	r6, #0
 80080e6:	4637      	mov	r7, r6
 80080e8:	e7e1      	b.n	80080ae <_dtoa_r+0x956>
 80080ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80080ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80080f0:	4637      	mov	r7, r6
 80080f2:	e599      	b.n	8007c28 <_dtoa_r+0x4d0>
 80080f4:	9b08      	ldr	r3, [sp, #32]
 80080f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 80fd 	beq.w	80082fa <_dtoa_r+0xba2>
 8008100:	2d00      	cmp	r5, #0
 8008102:	dd05      	ble.n	8008110 <_dtoa_r+0x9b8>
 8008104:	4639      	mov	r1, r7
 8008106:	462a      	mov	r2, r5
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fc53 	bl	80089b4 <__lshift>
 800810e:	4607      	mov	r7, r0
 8008110:	9b06      	ldr	r3, [sp, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d05c      	beq.n	80081d0 <_dtoa_r+0xa78>
 8008116:	6879      	ldr	r1, [r7, #4]
 8008118:	4620      	mov	r0, r4
 800811a:	f000 fa39 	bl	8008590 <_Balloc>
 800811e:	4605      	mov	r5, r0
 8008120:	b928      	cbnz	r0, 800812e <_dtoa_r+0x9d6>
 8008122:	4b80      	ldr	r3, [pc, #512]	; (8008324 <_dtoa_r+0xbcc>)
 8008124:	4602      	mov	r2, r0
 8008126:	f240 21ea 	movw	r1, #746	; 0x2ea
 800812a:	f7ff bb2e 	b.w	800778a <_dtoa_r+0x32>
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	3202      	adds	r2, #2
 8008132:	0092      	lsls	r2, r2, #2
 8008134:	f107 010c 	add.w	r1, r7, #12
 8008138:	300c      	adds	r0, #12
 800813a:	f7fd feb9 	bl	8005eb0 <memcpy>
 800813e:	2201      	movs	r2, #1
 8008140:	4629      	mov	r1, r5
 8008142:	4620      	mov	r0, r4
 8008144:	f000 fc36 	bl	80089b4 <__lshift>
 8008148:	9b00      	ldr	r3, [sp, #0]
 800814a:	3301      	adds	r3, #1
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	9b00      	ldr	r3, [sp, #0]
 8008150:	444b      	add	r3, r9
 8008152:	9307      	str	r3, [sp, #28]
 8008154:	9b02      	ldr	r3, [sp, #8]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	46b8      	mov	r8, r7
 800815c:	9306      	str	r3, [sp, #24]
 800815e:	4607      	mov	r7, r0
 8008160:	9b01      	ldr	r3, [sp, #4]
 8008162:	4631      	mov	r1, r6
 8008164:	3b01      	subs	r3, #1
 8008166:	4658      	mov	r0, fp
 8008168:	9302      	str	r3, [sp, #8]
 800816a:	f7ff fa67 	bl	800763c <quorem>
 800816e:	4603      	mov	r3, r0
 8008170:	3330      	adds	r3, #48	; 0x30
 8008172:	9004      	str	r0, [sp, #16]
 8008174:	4641      	mov	r1, r8
 8008176:	4658      	mov	r0, fp
 8008178:	9308      	str	r3, [sp, #32]
 800817a:	f000 fc87 	bl	8008a8c <__mcmp>
 800817e:	463a      	mov	r2, r7
 8008180:	4681      	mov	r9, r0
 8008182:	4631      	mov	r1, r6
 8008184:	4620      	mov	r0, r4
 8008186:	f000 fc9d 	bl	8008ac4 <__mdiff>
 800818a:	68c2      	ldr	r2, [r0, #12]
 800818c:	9b08      	ldr	r3, [sp, #32]
 800818e:	4605      	mov	r5, r0
 8008190:	bb02      	cbnz	r2, 80081d4 <_dtoa_r+0xa7c>
 8008192:	4601      	mov	r1, r0
 8008194:	4658      	mov	r0, fp
 8008196:	f000 fc79 	bl	8008a8c <__mcmp>
 800819a:	9b08      	ldr	r3, [sp, #32]
 800819c:	4602      	mov	r2, r0
 800819e:	4629      	mov	r1, r5
 80081a0:	4620      	mov	r0, r4
 80081a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80081a6:	f000 fa33 	bl	8008610 <_Bfree>
 80081aa:	9b05      	ldr	r3, [sp, #20]
 80081ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081ae:	9d01      	ldr	r5, [sp, #4]
 80081b0:	ea43 0102 	orr.w	r1, r3, r2
 80081b4:	9b06      	ldr	r3, [sp, #24]
 80081b6:	430b      	orrs	r3, r1
 80081b8:	9b08      	ldr	r3, [sp, #32]
 80081ba:	d10d      	bne.n	80081d8 <_dtoa_r+0xa80>
 80081bc:	2b39      	cmp	r3, #57	; 0x39
 80081be:	d029      	beq.n	8008214 <_dtoa_r+0xabc>
 80081c0:	f1b9 0f00 	cmp.w	r9, #0
 80081c4:	dd01      	ble.n	80081ca <_dtoa_r+0xa72>
 80081c6:	9b04      	ldr	r3, [sp, #16]
 80081c8:	3331      	adds	r3, #49	; 0x31
 80081ca:	9a02      	ldr	r2, [sp, #8]
 80081cc:	7013      	strb	r3, [r2, #0]
 80081ce:	e774      	b.n	80080ba <_dtoa_r+0x962>
 80081d0:	4638      	mov	r0, r7
 80081d2:	e7b9      	b.n	8008148 <_dtoa_r+0x9f0>
 80081d4:	2201      	movs	r2, #1
 80081d6:	e7e2      	b.n	800819e <_dtoa_r+0xa46>
 80081d8:	f1b9 0f00 	cmp.w	r9, #0
 80081dc:	db06      	blt.n	80081ec <_dtoa_r+0xa94>
 80081de:	9905      	ldr	r1, [sp, #20]
 80081e0:	ea41 0909 	orr.w	r9, r1, r9
 80081e4:	9906      	ldr	r1, [sp, #24]
 80081e6:	ea59 0101 	orrs.w	r1, r9, r1
 80081ea:	d120      	bne.n	800822e <_dtoa_r+0xad6>
 80081ec:	2a00      	cmp	r2, #0
 80081ee:	ddec      	ble.n	80081ca <_dtoa_r+0xa72>
 80081f0:	4659      	mov	r1, fp
 80081f2:	2201      	movs	r2, #1
 80081f4:	4620      	mov	r0, r4
 80081f6:	9301      	str	r3, [sp, #4]
 80081f8:	f000 fbdc 	bl	80089b4 <__lshift>
 80081fc:	4631      	mov	r1, r6
 80081fe:	4683      	mov	fp, r0
 8008200:	f000 fc44 	bl	8008a8c <__mcmp>
 8008204:	2800      	cmp	r0, #0
 8008206:	9b01      	ldr	r3, [sp, #4]
 8008208:	dc02      	bgt.n	8008210 <_dtoa_r+0xab8>
 800820a:	d1de      	bne.n	80081ca <_dtoa_r+0xa72>
 800820c:	07da      	lsls	r2, r3, #31
 800820e:	d5dc      	bpl.n	80081ca <_dtoa_r+0xa72>
 8008210:	2b39      	cmp	r3, #57	; 0x39
 8008212:	d1d8      	bne.n	80081c6 <_dtoa_r+0xa6e>
 8008214:	9a02      	ldr	r2, [sp, #8]
 8008216:	2339      	movs	r3, #57	; 0x39
 8008218:	7013      	strb	r3, [r2, #0]
 800821a:	462b      	mov	r3, r5
 800821c:	461d      	mov	r5, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008224:	2a39      	cmp	r2, #57	; 0x39
 8008226:	d050      	beq.n	80082ca <_dtoa_r+0xb72>
 8008228:	3201      	adds	r2, #1
 800822a:	701a      	strb	r2, [r3, #0]
 800822c:	e745      	b.n	80080ba <_dtoa_r+0x962>
 800822e:	2a00      	cmp	r2, #0
 8008230:	dd03      	ble.n	800823a <_dtoa_r+0xae2>
 8008232:	2b39      	cmp	r3, #57	; 0x39
 8008234:	d0ee      	beq.n	8008214 <_dtoa_r+0xabc>
 8008236:	3301      	adds	r3, #1
 8008238:	e7c7      	b.n	80081ca <_dtoa_r+0xa72>
 800823a:	9a01      	ldr	r2, [sp, #4]
 800823c:	9907      	ldr	r1, [sp, #28]
 800823e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008242:	428a      	cmp	r2, r1
 8008244:	d02a      	beq.n	800829c <_dtoa_r+0xb44>
 8008246:	4659      	mov	r1, fp
 8008248:	2300      	movs	r3, #0
 800824a:	220a      	movs	r2, #10
 800824c:	4620      	mov	r0, r4
 800824e:	f000 fa01 	bl	8008654 <__multadd>
 8008252:	45b8      	cmp	r8, r7
 8008254:	4683      	mov	fp, r0
 8008256:	f04f 0300 	mov.w	r3, #0
 800825a:	f04f 020a 	mov.w	r2, #10
 800825e:	4641      	mov	r1, r8
 8008260:	4620      	mov	r0, r4
 8008262:	d107      	bne.n	8008274 <_dtoa_r+0xb1c>
 8008264:	f000 f9f6 	bl	8008654 <__multadd>
 8008268:	4680      	mov	r8, r0
 800826a:	4607      	mov	r7, r0
 800826c:	9b01      	ldr	r3, [sp, #4]
 800826e:	3301      	adds	r3, #1
 8008270:	9301      	str	r3, [sp, #4]
 8008272:	e775      	b.n	8008160 <_dtoa_r+0xa08>
 8008274:	f000 f9ee 	bl	8008654 <__multadd>
 8008278:	4639      	mov	r1, r7
 800827a:	4680      	mov	r8, r0
 800827c:	2300      	movs	r3, #0
 800827e:	220a      	movs	r2, #10
 8008280:	4620      	mov	r0, r4
 8008282:	f000 f9e7 	bl	8008654 <__multadd>
 8008286:	4607      	mov	r7, r0
 8008288:	e7f0      	b.n	800826c <_dtoa_r+0xb14>
 800828a:	f1b9 0f00 	cmp.w	r9, #0
 800828e:	9a00      	ldr	r2, [sp, #0]
 8008290:	bfcc      	ite	gt
 8008292:	464d      	movgt	r5, r9
 8008294:	2501      	movle	r5, #1
 8008296:	4415      	add	r5, r2
 8008298:	f04f 0800 	mov.w	r8, #0
 800829c:	4659      	mov	r1, fp
 800829e:	2201      	movs	r2, #1
 80082a0:	4620      	mov	r0, r4
 80082a2:	9301      	str	r3, [sp, #4]
 80082a4:	f000 fb86 	bl	80089b4 <__lshift>
 80082a8:	4631      	mov	r1, r6
 80082aa:	4683      	mov	fp, r0
 80082ac:	f000 fbee 	bl	8008a8c <__mcmp>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	dcb2      	bgt.n	800821a <_dtoa_r+0xac2>
 80082b4:	d102      	bne.n	80082bc <_dtoa_r+0xb64>
 80082b6:	9b01      	ldr	r3, [sp, #4]
 80082b8:	07db      	lsls	r3, r3, #31
 80082ba:	d4ae      	bmi.n	800821a <_dtoa_r+0xac2>
 80082bc:	462b      	mov	r3, r5
 80082be:	461d      	mov	r5, r3
 80082c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082c4:	2a30      	cmp	r2, #48	; 0x30
 80082c6:	d0fa      	beq.n	80082be <_dtoa_r+0xb66>
 80082c8:	e6f7      	b.n	80080ba <_dtoa_r+0x962>
 80082ca:	9a00      	ldr	r2, [sp, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d1a5      	bne.n	800821c <_dtoa_r+0xac4>
 80082d0:	f10a 0a01 	add.w	sl, sl, #1
 80082d4:	2331      	movs	r3, #49	; 0x31
 80082d6:	e779      	b.n	80081cc <_dtoa_r+0xa74>
 80082d8:	4b13      	ldr	r3, [pc, #76]	; (8008328 <_dtoa_r+0xbd0>)
 80082da:	f7ff baaf 	b.w	800783c <_dtoa_r+0xe4>
 80082de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f47f aa86 	bne.w	80077f2 <_dtoa_r+0x9a>
 80082e6:	4b11      	ldr	r3, [pc, #68]	; (800832c <_dtoa_r+0xbd4>)
 80082e8:	f7ff baa8 	b.w	800783c <_dtoa_r+0xe4>
 80082ec:	f1b9 0f00 	cmp.w	r9, #0
 80082f0:	dc03      	bgt.n	80082fa <_dtoa_r+0xba2>
 80082f2:	9b05      	ldr	r3, [sp, #20]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	f73f aec9 	bgt.w	800808c <_dtoa_r+0x934>
 80082fa:	9d00      	ldr	r5, [sp, #0]
 80082fc:	4631      	mov	r1, r6
 80082fe:	4658      	mov	r0, fp
 8008300:	f7ff f99c 	bl	800763c <quorem>
 8008304:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008308:	f805 3b01 	strb.w	r3, [r5], #1
 800830c:	9a00      	ldr	r2, [sp, #0]
 800830e:	1aaa      	subs	r2, r5, r2
 8008310:	4591      	cmp	r9, r2
 8008312:	ddba      	ble.n	800828a <_dtoa_r+0xb32>
 8008314:	4659      	mov	r1, fp
 8008316:	2300      	movs	r3, #0
 8008318:	220a      	movs	r2, #10
 800831a:	4620      	mov	r0, r4
 800831c:	f000 f99a 	bl	8008654 <__multadd>
 8008320:	4683      	mov	fp, r0
 8008322:	e7eb      	b.n	80082fc <_dtoa_r+0xba4>
 8008324:	0800af1b 	.word	0x0800af1b
 8008328:	0800b10c 	.word	0x0800b10c
 800832c:	0800aeaf 	.word	0x0800aeaf

08008330 <fiprintf>:
 8008330:	b40e      	push	{r1, r2, r3}
 8008332:	b503      	push	{r0, r1, lr}
 8008334:	4601      	mov	r1, r0
 8008336:	ab03      	add	r3, sp, #12
 8008338:	4805      	ldr	r0, [pc, #20]	; (8008350 <fiprintf+0x20>)
 800833a:	f853 2b04 	ldr.w	r2, [r3], #4
 800833e:	6800      	ldr	r0, [r0, #0]
 8008340:	9301      	str	r3, [sp, #4]
 8008342:	f000 fe5d 	bl	8009000 <_vfiprintf_r>
 8008346:	b002      	add	sp, #8
 8008348:	f85d eb04 	ldr.w	lr, [sp], #4
 800834c:	b003      	add	sp, #12
 800834e:	4770      	bx	lr
 8008350:	20000014 	.word	0x20000014

08008354 <_findenv_r>:
 8008354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008358:	4607      	mov	r7, r0
 800835a:	4689      	mov	r9, r1
 800835c:	4616      	mov	r6, r2
 800835e:	f001 f8e1 	bl	8009524 <__env_lock>
 8008362:	4b18      	ldr	r3, [pc, #96]	; (80083c4 <_findenv_r+0x70>)
 8008364:	681c      	ldr	r4, [r3, #0]
 8008366:	469a      	mov	sl, r3
 8008368:	b134      	cbz	r4, 8008378 <_findenv_r+0x24>
 800836a:	464b      	mov	r3, r9
 800836c:	4698      	mov	r8, r3
 800836e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008372:	b139      	cbz	r1, 8008384 <_findenv_r+0x30>
 8008374:	293d      	cmp	r1, #61	; 0x3d
 8008376:	d1f9      	bne.n	800836c <_findenv_r+0x18>
 8008378:	4638      	mov	r0, r7
 800837a:	f001 f8d9 	bl	8009530 <__env_unlock>
 800837e:	2000      	movs	r0, #0
 8008380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008384:	eba8 0809 	sub.w	r8, r8, r9
 8008388:	46a3      	mov	fp, r4
 800838a:	f854 0b04 	ldr.w	r0, [r4], #4
 800838e:	2800      	cmp	r0, #0
 8008390:	d0f2      	beq.n	8008378 <_findenv_r+0x24>
 8008392:	4642      	mov	r2, r8
 8008394:	4649      	mov	r1, r9
 8008396:	f7fe fdc9 	bl	8006f2c <strncmp>
 800839a:	2800      	cmp	r0, #0
 800839c:	d1f4      	bne.n	8008388 <_findenv_r+0x34>
 800839e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80083a2:	eb03 0508 	add.w	r5, r3, r8
 80083a6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80083aa:	2b3d      	cmp	r3, #61	; 0x3d
 80083ac:	d1ec      	bne.n	8008388 <_findenv_r+0x34>
 80083ae:	f8da 3000 	ldr.w	r3, [sl]
 80083b2:	ebab 0303 	sub.w	r3, fp, r3
 80083b6:	109b      	asrs	r3, r3, #2
 80083b8:	4638      	mov	r0, r7
 80083ba:	6033      	str	r3, [r6, #0]
 80083bc:	f001 f8b8 	bl	8009530 <__env_unlock>
 80083c0:	1c68      	adds	r0, r5, #1
 80083c2:	e7dd      	b.n	8008380 <_findenv_r+0x2c>
 80083c4:	20000000 	.word	0x20000000

080083c8 <_getenv_r>:
 80083c8:	b507      	push	{r0, r1, r2, lr}
 80083ca:	aa01      	add	r2, sp, #4
 80083cc:	f7ff ffc2 	bl	8008354 <_findenv_r>
 80083d0:	b003      	add	sp, #12
 80083d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080083d8 <__gettzinfo>:
 80083d8:	4800      	ldr	r0, [pc, #0]	; (80083dc <__gettzinfo+0x4>)
 80083da:	4770      	bx	lr
 80083dc:	20000080 	.word	0x20000080

080083e0 <gmtime_r>:
 80083e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083e4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80083e8:	460c      	mov	r4, r1
 80083ea:	4a51      	ldr	r2, [pc, #324]	; (8008530 <gmtime_r+0x150>)
 80083ec:	2300      	movs	r3, #0
 80083ee:	4630      	mov	r0, r6
 80083f0:	4639      	mov	r1, r7
 80083f2:	f7f8 fc09 	bl	8000c08 <__aeabi_ldivmod>
 80083f6:	4639      	mov	r1, r7
 80083f8:	4605      	mov	r5, r0
 80083fa:	4a4d      	ldr	r2, [pc, #308]	; (8008530 <gmtime_r+0x150>)
 80083fc:	4630      	mov	r0, r6
 80083fe:	2300      	movs	r3, #0
 8008400:	f7f8 fc02 	bl	8000c08 <__aeabi_ldivmod>
 8008404:	2a00      	cmp	r2, #0
 8008406:	bfbc      	itt	lt
 8008408:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800840c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8008410:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008414:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8008418:	fbb2 f3f1 	udiv	r3, r2, r1
 800841c:	fb01 2213 	mls	r2, r1, r3, r2
 8008420:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8008424:	bfac      	ite	ge
 8008426:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800842a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 800842e:	60a3      	str	r3, [r4, #8]
 8008430:	fbb2 f3f1 	udiv	r3, r2, r1
 8008434:	fb01 2213 	mls	r2, r1, r3, r2
 8008438:	6063      	str	r3, [r4, #4]
 800843a:	6022      	str	r2, [r4, #0]
 800843c:	1cc3      	adds	r3, r0, #3
 800843e:	2207      	movs	r2, #7
 8008440:	fb93 f2f2 	sdiv	r2, r3, r2
 8008444:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8008448:	1a9b      	subs	r3, r3, r2
 800844a:	bf48      	it	mi
 800844c:	3307      	addmi	r3, #7
 800844e:	2800      	cmp	r0, #0
 8008450:	61a3      	str	r3, [r4, #24]
 8008452:	bfb8      	it	lt
 8008454:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8008458:	4936      	ldr	r1, [pc, #216]	; (8008534 <gmtime_r+0x154>)
 800845a:	bfae      	itee	ge
 800845c:	fb90 f1f1 	sdivge	r1, r0, r1
 8008460:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8008464:	fb93 f1f1 	sdivlt	r1, r3, r1
 8008468:	4b33      	ldr	r3, [pc, #204]	; (8008538 <gmtime_r+0x158>)
 800846a:	fb03 0001 	mla	r0, r3, r1, r0
 800846e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8008472:	fbb0 f2f2 	udiv	r2, r0, r2
 8008476:	4402      	add	r2, r0
 8008478:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 800847c:	fbb0 f3fc 	udiv	r3, r0, ip
 8008480:	1ad2      	subs	r2, r2, r3
 8008482:	f240 176d 	movw	r7, #365	; 0x16d
 8008486:	4b2d      	ldr	r3, [pc, #180]	; (800853c <gmtime_r+0x15c>)
 8008488:	fbb0 f3f3 	udiv	r3, r0, r3
 800848c:	2664      	movs	r6, #100	; 0x64
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	fbb3 f5f7 	udiv	r5, r3, r7
 8008494:	fbb3 f3fc 	udiv	r3, r3, ip
 8008498:	fbb5 f2f6 	udiv	r2, r5, r6
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	4403      	add	r3, r0
 80084a0:	fb07 3315 	mls	r3, r7, r5, r3
 80084a4:	2099      	movs	r0, #153	; 0x99
 80084a6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80084aa:	f10c 0c02 	add.w	ip, ip, #2
 80084ae:	f103 0e01 	add.w	lr, r3, #1
 80084b2:	fbbc f7f0 	udiv	r7, ip, r0
 80084b6:	4378      	muls	r0, r7
 80084b8:	3002      	adds	r0, #2
 80084ba:	f04f 0805 	mov.w	r8, #5
 80084be:	fbb0 f0f8 	udiv	r0, r0, r8
 80084c2:	ebae 0000 	sub.w	r0, lr, r0
 80084c6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80084ca:	45f4      	cmp	ip, lr
 80084cc:	bf94      	ite	ls
 80084ce:	f04f 0c02 	movls.w	ip, #2
 80084d2:	f06f 0c09 	mvnhi.w	ip, #9
 80084d6:	4467      	add	r7, ip
 80084d8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80084dc:	fb0c 5101 	mla	r1, ip, r1, r5
 80084e0:	2f01      	cmp	r7, #1
 80084e2:	bf98      	it	ls
 80084e4:	3101      	addls	r1, #1
 80084e6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80084ea:	d30c      	bcc.n	8008506 <gmtime_r+0x126>
 80084ec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80084f0:	61e3      	str	r3, [r4, #28]
 80084f2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80084f6:	2300      	movs	r3, #0
 80084f8:	60e0      	str	r0, [r4, #12]
 80084fa:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80084fe:	6223      	str	r3, [r4, #32]
 8008500:	4620      	mov	r0, r4
 8008502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008506:	f015 0f03 	tst.w	r5, #3
 800850a:	d102      	bne.n	8008512 <gmtime_r+0x132>
 800850c:	fb06 5212 	mls	r2, r6, r2, r5
 8008510:	b95a      	cbnz	r2, 800852a <gmtime_r+0x14a>
 8008512:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8008516:	fbb5 f2f6 	udiv	r2, r5, r6
 800851a:	fb06 5212 	mls	r2, r6, r2, r5
 800851e:	fab2 f282 	clz	r2, r2
 8008522:	0952      	lsrs	r2, r2, #5
 8008524:	333b      	adds	r3, #59	; 0x3b
 8008526:	4413      	add	r3, r2
 8008528:	e7e2      	b.n	80084f0 <gmtime_r+0x110>
 800852a:	2201      	movs	r2, #1
 800852c:	e7fa      	b.n	8008524 <gmtime_r+0x144>
 800852e:	bf00      	nop
 8008530:	00015180 	.word	0x00015180
 8008534:	00023ab1 	.word	0x00023ab1
 8008538:	fffdc54f 	.word	0xfffdc54f
 800853c:	00023ab0 	.word	0x00023ab0

08008540 <_localeconv_r>:
 8008540:	4800      	ldr	r0, [pc, #0]	; (8008544 <_localeconv_r+0x4>)
 8008542:	4770      	bx	lr
 8008544:	200001c8 	.word	0x200001c8

08008548 <__retarget_lock_init_recursive>:
 8008548:	4770      	bx	lr

0800854a <__retarget_lock_acquire>:
 800854a:	4770      	bx	lr

0800854c <__retarget_lock_acquire_recursive>:
 800854c:	4770      	bx	lr

0800854e <__retarget_lock_release>:
 800854e:	4770      	bx	lr

08008550 <__retarget_lock_release_recursive>:
 8008550:	4770      	bx	lr

08008552 <__ascii_mbtowc>:
 8008552:	b082      	sub	sp, #8
 8008554:	b901      	cbnz	r1, 8008558 <__ascii_mbtowc+0x6>
 8008556:	a901      	add	r1, sp, #4
 8008558:	b142      	cbz	r2, 800856c <__ascii_mbtowc+0x1a>
 800855a:	b14b      	cbz	r3, 8008570 <__ascii_mbtowc+0x1e>
 800855c:	7813      	ldrb	r3, [r2, #0]
 800855e:	600b      	str	r3, [r1, #0]
 8008560:	7812      	ldrb	r2, [r2, #0]
 8008562:	1e10      	subs	r0, r2, #0
 8008564:	bf18      	it	ne
 8008566:	2001      	movne	r0, #1
 8008568:	b002      	add	sp, #8
 800856a:	4770      	bx	lr
 800856c:	4610      	mov	r0, r2
 800856e:	e7fb      	b.n	8008568 <__ascii_mbtowc+0x16>
 8008570:	f06f 0001 	mvn.w	r0, #1
 8008574:	e7f8      	b.n	8008568 <__ascii_mbtowc+0x16>
	...

08008578 <__malloc_lock>:
 8008578:	4801      	ldr	r0, [pc, #4]	; (8008580 <__malloc_lock+0x8>)
 800857a:	f7ff bfe7 	b.w	800854c <__retarget_lock_acquire_recursive>
 800857e:	bf00      	nop
 8008580:	20000684 	.word	0x20000684

08008584 <__malloc_unlock>:
 8008584:	4801      	ldr	r0, [pc, #4]	; (800858c <__malloc_unlock+0x8>)
 8008586:	f7ff bfe3 	b.w	8008550 <__retarget_lock_release_recursive>
 800858a:	bf00      	nop
 800858c:	20000684 	.word	0x20000684

08008590 <_Balloc>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008594:	4604      	mov	r4, r0
 8008596:	460d      	mov	r5, r1
 8008598:	b976      	cbnz	r6, 80085b8 <_Balloc+0x28>
 800859a:	2010      	movs	r0, #16
 800859c:	f7fd fc78 	bl	8005e90 <malloc>
 80085a0:	4602      	mov	r2, r0
 80085a2:	6260      	str	r0, [r4, #36]	; 0x24
 80085a4:	b920      	cbnz	r0, 80085b0 <_Balloc+0x20>
 80085a6:	4b18      	ldr	r3, [pc, #96]	; (8008608 <_Balloc+0x78>)
 80085a8:	4818      	ldr	r0, [pc, #96]	; (800860c <_Balloc+0x7c>)
 80085aa:	2166      	movs	r1, #102	; 0x66
 80085ac:	f7ff f814 	bl	80075d8 <__assert_func>
 80085b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085b4:	6006      	str	r6, [r0, #0]
 80085b6:	60c6      	str	r6, [r0, #12]
 80085b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085ba:	68f3      	ldr	r3, [r6, #12]
 80085bc:	b183      	cbz	r3, 80085e0 <_Balloc+0x50>
 80085be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085c6:	b9b8      	cbnz	r0, 80085f8 <_Balloc+0x68>
 80085c8:	2101      	movs	r1, #1
 80085ca:	fa01 f605 	lsl.w	r6, r1, r5
 80085ce:	1d72      	adds	r2, r6, #5
 80085d0:	0092      	lsls	r2, r2, #2
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 fb5a 	bl	8008c8c <_calloc_r>
 80085d8:	b160      	cbz	r0, 80085f4 <_Balloc+0x64>
 80085da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085de:	e00e      	b.n	80085fe <_Balloc+0x6e>
 80085e0:	2221      	movs	r2, #33	; 0x21
 80085e2:	2104      	movs	r1, #4
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 fb51 	bl	8008c8c <_calloc_r>
 80085ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085ec:	60f0      	str	r0, [r6, #12]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1e4      	bne.n	80085be <_Balloc+0x2e>
 80085f4:	2000      	movs	r0, #0
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	6802      	ldr	r2, [r0, #0]
 80085fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085fe:	2300      	movs	r3, #0
 8008600:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008604:	e7f7      	b.n	80085f6 <_Balloc+0x66>
 8008606:	bf00      	nop
 8008608:	0800abcc 	.word	0x0800abcc
 800860c:	0800af36 	.word	0x0800af36

08008610 <_Bfree>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008614:	4605      	mov	r5, r0
 8008616:	460c      	mov	r4, r1
 8008618:	b976      	cbnz	r6, 8008638 <_Bfree+0x28>
 800861a:	2010      	movs	r0, #16
 800861c:	f7fd fc38 	bl	8005e90 <malloc>
 8008620:	4602      	mov	r2, r0
 8008622:	6268      	str	r0, [r5, #36]	; 0x24
 8008624:	b920      	cbnz	r0, 8008630 <_Bfree+0x20>
 8008626:	4b09      	ldr	r3, [pc, #36]	; (800864c <_Bfree+0x3c>)
 8008628:	4809      	ldr	r0, [pc, #36]	; (8008650 <_Bfree+0x40>)
 800862a:	218a      	movs	r1, #138	; 0x8a
 800862c:	f7fe ffd4 	bl	80075d8 <__assert_func>
 8008630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008634:	6006      	str	r6, [r0, #0]
 8008636:	60c6      	str	r6, [r0, #12]
 8008638:	b13c      	cbz	r4, 800864a <_Bfree+0x3a>
 800863a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800863c:	6862      	ldr	r2, [r4, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008644:	6021      	str	r1, [r4, #0]
 8008646:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	0800abcc 	.word	0x0800abcc
 8008650:	0800af36 	.word	0x0800af36

08008654 <__multadd>:
 8008654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008658:	690e      	ldr	r6, [r1, #16]
 800865a:	4607      	mov	r7, r0
 800865c:	4698      	mov	r8, r3
 800865e:	460c      	mov	r4, r1
 8008660:	f101 0014 	add.w	r0, r1, #20
 8008664:	2300      	movs	r3, #0
 8008666:	6805      	ldr	r5, [r0, #0]
 8008668:	b2a9      	uxth	r1, r5
 800866a:	fb02 8101 	mla	r1, r2, r1, r8
 800866e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008672:	0c2d      	lsrs	r5, r5, #16
 8008674:	fb02 c505 	mla	r5, r2, r5, ip
 8008678:	b289      	uxth	r1, r1
 800867a:	3301      	adds	r3, #1
 800867c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008680:	429e      	cmp	r6, r3
 8008682:	f840 1b04 	str.w	r1, [r0], #4
 8008686:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800868a:	dcec      	bgt.n	8008666 <__multadd+0x12>
 800868c:	f1b8 0f00 	cmp.w	r8, #0
 8008690:	d022      	beq.n	80086d8 <__multadd+0x84>
 8008692:	68a3      	ldr	r3, [r4, #8]
 8008694:	42b3      	cmp	r3, r6
 8008696:	dc19      	bgt.n	80086cc <__multadd+0x78>
 8008698:	6861      	ldr	r1, [r4, #4]
 800869a:	4638      	mov	r0, r7
 800869c:	3101      	adds	r1, #1
 800869e:	f7ff ff77 	bl	8008590 <_Balloc>
 80086a2:	4605      	mov	r5, r0
 80086a4:	b928      	cbnz	r0, 80086b2 <__multadd+0x5e>
 80086a6:	4602      	mov	r2, r0
 80086a8:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <__multadd+0x8c>)
 80086aa:	480e      	ldr	r0, [pc, #56]	; (80086e4 <__multadd+0x90>)
 80086ac:	21b5      	movs	r1, #181	; 0xb5
 80086ae:	f7fe ff93 	bl	80075d8 <__assert_func>
 80086b2:	6922      	ldr	r2, [r4, #16]
 80086b4:	3202      	adds	r2, #2
 80086b6:	f104 010c 	add.w	r1, r4, #12
 80086ba:	0092      	lsls	r2, r2, #2
 80086bc:	300c      	adds	r0, #12
 80086be:	f7fd fbf7 	bl	8005eb0 <memcpy>
 80086c2:	4621      	mov	r1, r4
 80086c4:	4638      	mov	r0, r7
 80086c6:	f7ff ffa3 	bl	8008610 <_Bfree>
 80086ca:	462c      	mov	r4, r5
 80086cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80086d0:	3601      	adds	r6, #1
 80086d2:	f8c3 8014 	str.w	r8, [r3, #20]
 80086d6:	6126      	str	r6, [r4, #16]
 80086d8:	4620      	mov	r0, r4
 80086da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086de:	bf00      	nop
 80086e0:	0800af1b 	.word	0x0800af1b
 80086e4:	0800af36 	.word	0x0800af36

080086e8 <__hi0bits>:
 80086e8:	0c03      	lsrs	r3, r0, #16
 80086ea:	041b      	lsls	r3, r3, #16
 80086ec:	b9d3      	cbnz	r3, 8008724 <__hi0bits+0x3c>
 80086ee:	0400      	lsls	r0, r0, #16
 80086f0:	2310      	movs	r3, #16
 80086f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086f6:	bf04      	itt	eq
 80086f8:	0200      	lsleq	r0, r0, #8
 80086fa:	3308      	addeq	r3, #8
 80086fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008700:	bf04      	itt	eq
 8008702:	0100      	lsleq	r0, r0, #4
 8008704:	3304      	addeq	r3, #4
 8008706:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800870a:	bf04      	itt	eq
 800870c:	0080      	lsleq	r0, r0, #2
 800870e:	3302      	addeq	r3, #2
 8008710:	2800      	cmp	r0, #0
 8008712:	db05      	blt.n	8008720 <__hi0bits+0x38>
 8008714:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008718:	f103 0301 	add.w	r3, r3, #1
 800871c:	bf08      	it	eq
 800871e:	2320      	moveq	r3, #32
 8008720:	4618      	mov	r0, r3
 8008722:	4770      	bx	lr
 8008724:	2300      	movs	r3, #0
 8008726:	e7e4      	b.n	80086f2 <__hi0bits+0xa>

08008728 <__lo0bits>:
 8008728:	6803      	ldr	r3, [r0, #0]
 800872a:	f013 0207 	ands.w	r2, r3, #7
 800872e:	4601      	mov	r1, r0
 8008730:	d00b      	beq.n	800874a <__lo0bits+0x22>
 8008732:	07da      	lsls	r2, r3, #31
 8008734:	d424      	bmi.n	8008780 <__lo0bits+0x58>
 8008736:	0798      	lsls	r0, r3, #30
 8008738:	bf49      	itett	mi
 800873a:	085b      	lsrmi	r3, r3, #1
 800873c:	089b      	lsrpl	r3, r3, #2
 800873e:	2001      	movmi	r0, #1
 8008740:	600b      	strmi	r3, [r1, #0]
 8008742:	bf5c      	itt	pl
 8008744:	600b      	strpl	r3, [r1, #0]
 8008746:	2002      	movpl	r0, #2
 8008748:	4770      	bx	lr
 800874a:	b298      	uxth	r0, r3
 800874c:	b9b0      	cbnz	r0, 800877c <__lo0bits+0x54>
 800874e:	0c1b      	lsrs	r3, r3, #16
 8008750:	2010      	movs	r0, #16
 8008752:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008756:	bf04      	itt	eq
 8008758:	0a1b      	lsreq	r3, r3, #8
 800875a:	3008      	addeq	r0, #8
 800875c:	071a      	lsls	r2, r3, #28
 800875e:	bf04      	itt	eq
 8008760:	091b      	lsreq	r3, r3, #4
 8008762:	3004      	addeq	r0, #4
 8008764:	079a      	lsls	r2, r3, #30
 8008766:	bf04      	itt	eq
 8008768:	089b      	lsreq	r3, r3, #2
 800876a:	3002      	addeq	r0, #2
 800876c:	07da      	lsls	r2, r3, #31
 800876e:	d403      	bmi.n	8008778 <__lo0bits+0x50>
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	f100 0001 	add.w	r0, r0, #1
 8008776:	d005      	beq.n	8008784 <__lo0bits+0x5c>
 8008778:	600b      	str	r3, [r1, #0]
 800877a:	4770      	bx	lr
 800877c:	4610      	mov	r0, r2
 800877e:	e7e8      	b.n	8008752 <__lo0bits+0x2a>
 8008780:	2000      	movs	r0, #0
 8008782:	4770      	bx	lr
 8008784:	2020      	movs	r0, #32
 8008786:	4770      	bx	lr

08008788 <__i2b>:
 8008788:	b510      	push	{r4, lr}
 800878a:	460c      	mov	r4, r1
 800878c:	2101      	movs	r1, #1
 800878e:	f7ff feff 	bl	8008590 <_Balloc>
 8008792:	4602      	mov	r2, r0
 8008794:	b928      	cbnz	r0, 80087a2 <__i2b+0x1a>
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <__i2b+0x24>)
 8008798:	4805      	ldr	r0, [pc, #20]	; (80087b0 <__i2b+0x28>)
 800879a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800879e:	f7fe ff1b 	bl	80075d8 <__assert_func>
 80087a2:	2301      	movs	r3, #1
 80087a4:	6144      	str	r4, [r0, #20]
 80087a6:	6103      	str	r3, [r0, #16]
 80087a8:	bd10      	pop	{r4, pc}
 80087aa:	bf00      	nop
 80087ac:	0800af1b 	.word	0x0800af1b
 80087b0:	0800af36 	.word	0x0800af36

080087b4 <__multiply>:
 80087b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b8:	4614      	mov	r4, r2
 80087ba:	690a      	ldr	r2, [r1, #16]
 80087bc:	6923      	ldr	r3, [r4, #16]
 80087be:	429a      	cmp	r2, r3
 80087c0:	bfb8      	it	lt
 80087c2:	460b      	movlt	r3, r1
 80087c4:	460d      	mov	r5, r1
 80087c6:	bfbc      	itt	lt
 80087c8:	4625      	movlt	r5, r4
 80087ca:	461c      	movlt	r4, r3
 80087cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80087d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80087d4:	68ab      	ldr	r3, [r5, #8]
 80087d6:	6869      	ldr	r1, [r5, #4]
 80087d8:	eb0a 0709 	add.w	r7, sl, r9
 80087dc:	42bb      	cmp	r3, r7
 80087de:	b085      	sub	sp, #20
 80087e0:	bfb8      	it	lt
 80087e2:	3101      	addlt	r1, #1
 80087e4:	f7ff fed4 	bl	8008590 <_Balloc>
 80087e8:	b930      	cbnz	r0, 80087f8 <__multiply+0x44>
 80087ea:	4602      	mov	r2, r0
 80087ec:	4b42      	ldr	r3, [pc, #264]	; (80088f8 <__multiply+0x144>)
 80087ee:	4843      	ldr	r0, [pc, #268]	; (80088fc <__multiply+0x148>)
 80087f0:	f240 115d 	movw	r1, #349	; 0x15d
 80087f4:	f7fe fef0 	bl	80075d8 <__assert_func>
 80087f8:	f100 0614 	add.w	r6, r0, #20
 80087fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008800:	4633      	mov	r3, r6
 8008802:	2200      	movs	r2, #0
 8008804:	4543      	cmp	r3, r8
 8008806:	d31e      	bcc.n	8008846 <__multiply+0x92>
 8008808:	f105 0c14 	add.w	ip, r5, #20
 800880c:	f104 0314 	add.w	r3, r4, #20
 8008810:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008814:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008818:	9202      	str	r2, [sp, #8]
 800881a:	ebac 0205 	sub.w	r2, ip, r5
 800881e:	3a15      	subs	r2, #21
 8008820:	f022 0203 	bic.w	r2, r2, #3
 8008824:	3204      	adds	r2, #4
 8008826:	f105 0115 	add.w	r1, r5, #21
 800882a:	458c      	cmp	ip, r1
 800882c:	bf38      	it	cc
 800882e:	2204      	movcc	r2, #4
 8008830:	9201      	str	r2, [sp, #4]
 8008832:	9a02      	ldr	r2, [sp, #8]
 8008834:	9303      	str	r3, [sp, #12]
 8008836:	429a      	cmp	r2, r3
 8008838:	d808      	bhi.n	800884c <__multiply+0x98>
 800883a:	2f00      	cmp	r7, #0
 800883c:	dc55      	bgt.n	80088ea <__multiply+0x136>
 800883e:	6107      	str	r7, [r0, #16]
 8008840:	b005      	add	sp, #20
 8008842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008846:	f843 2b04 	str.w	r2, [r3], #4
 800884a:	e7db      	b.n	8008804 <__multiply+0x50>
 800884c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008850:	f1ba 0f00 	cmp.w	sl, #0
 8008854:	d020      	beq.n	8008898 <__multiply+0xe4>
 8008856:	f105 0e14 	add.w	lr, r5, #20
 800885a:	46b1      	mov	r9, r6
 800885c:	2200      	movs	r2, #0
 800885e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008862:	f8d9 b000 	ldr.w	fp, [r9]
 8008866:	b2a1      	uxth	r1, r4
 8008868:	fa1f fb8b 	uxth.w	fp, fp
 800886c:	fb0a b101 	mla	r1, sl, r1, fp
 8008870:	4411      	add	r1, r2
 8008872:	f8d9 2000 	ldr.w	r2, [r9]
 8008876:	0c24      	lsrs	r4, r4, #16
 8008878:	0c12      	lsrs	r2, r2, #16
 800887a:	fb0a 2404 	mla	r4, sl, r4, r2
 800887e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008882:	b289      	uxth	r1, r1
 8008884:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008888:	45f4      	cmp	ip, lr
 800888a:	f849 1b04 	str.w	r1, [r9], #4
 800888e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008892:	d8e4      	bhi.n	800885e <__multiply+0xaa>
 8008894:	9901      	ldr	r1, [sp, #4]
 8008896:	5072      	str	r2, [r6, r1]
 8008898:	9a03      	ldr	r2, [sp, #12]
 800889a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800889e:	3304      	adds	r3, #4
 80088a0:	f1b9 0f00 	cmp.w	r9, #0
 80088a4:	d01f      	beq.n	80088e6 <__multiply+0x132>
 80088a6:	6834      	ldr	r4, [r6, #0]
 80088a8:	f105 0114 	add.w	r1, r5, #20
 80088ac:	46b6      	mov	lr, r6
 80088ae:	f04f 0a00 	mov.w	sl, #0
 80088b2:	880a      	ldrh	r2, [r1, #0]
 80088b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80088b8:	fb09 b202 	mla	r2, r9, r2, fp
 80088bc:	4492      	add	sl, r2
 80088be:	b2a4      	uxth	r4, r4
 80088c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80088c4:	f84e 4b04 	str.w	r4, [lr], #4
 80088c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80088cc:	f8be 2000 	ldrh.w	r2, [lr]
 80088d0:	0c24      	lsrs	r4, r4, #16
 80088d2:	fb09 2404 	mla	r4, r9, r4, r2
 80088d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80088da:	458c      	cmp	ip, r1
 80088dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80088e0:	d8e7      	bhi.n	80088b2 <__multiply+0xfe>
 80088e2:	9a01      	ldr	r2, [sp, #4]
 80088e4:	50b4      	str	r4, [r6, r2]
 80088e6:	3604      	adds	r6, #4
 80088e8:	e7a3      	b.n	8008832 <__multiply+0x7e>
 80088ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1a5      	bne.n	800883e <__multiply+0x8a>
 80088f2:	3f01      	subs	r7, #1
 80088f4:	e7a1      	b.n	800883a <__multiply+0x86>
 80088f6:	bf00      	nop
 80088f8:	0800af1b 	.word	0x0800af1b
 80088fc:	0800af36 	.word	0x0800af36

08008900 <__pow5mult>:
 8008900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008904:	4615      	mov	r5, r2
 8008906:	f012 0203 	ands.w	r2, r2, #3
 800890a:	4606      	mov	r6, r0
 800890c:	460f      	mov	r7, r1
 800890e:	d007      	beq.n	8008920 <__pow5mult+0x20>
 8008910:	4c25      	ldr	r4, [pc, #148]	; (80089a8 <__pow5mult+0xa8>)
 8008912:	3a01      	subs	r2, #1
 8008914:	2300      	movs	r3, #0
 8008916:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800891a:	f7ff fe9b 	bl	8008654 <__multadd>
 800891e:	4607      	mov	r7, r0
 8008920:	10ad      	asrs	r5, r5, #2
 8008922:	d03d      	beq.n	80089a0 <__pow5mult+0xa0>
 8008924:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008926:	b97c      	cbnz	r4, 8008948 <__pow5mult+0x48>
 8008928:	2010      	movs	r0, #16
 800892a:	f7fd fab1 	bl	8005e90 <malloc>
 800892e:	4602      	mov	r2, r0
 8008930:	6270      	str	r0, [r6, #36]	; 0x24
 8008932:	b928      	cbnz	r0, 8008940 <__pow5mult+0x40>
 8008934:	4b1d      	ldr	r3, [pc, #116]	; (80089ac <__pow5mult+0xac>)
 8008936:	481e      	ldr	r0, [pc, #120]	; (80089b0 <__pow5mult+0xb0>)
 8008938:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800893c:	f7fe fe4c 	bl	80075d8 <__assert_func>
 8008940:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008944:	6004      	str	r4, [r0, #0]
 8008946:	60c4      	str	r4, [r0, #12]
 8008948:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800894c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008950:	b94c      	cbnz	r4, 8008966 <__pow5mult+0x66>
 8008952:	f240 2171 	movw	r1, #625	; 0x271
 8008956:	4630      	mov	r0, r6
 8008958:	f7ff ff16 	bl	8008788 <__i2b>
 800895c:	2300      	movs	r3, #0
 800895e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008962:	4604      	mov	r4, r0
 8008964:	6003      	str	r3, [r0, #0]
 8008966:	f04f 0900 	mov.w	r9, #0
 800896a:	07eb      	lsls	r3, r5, #31
 800896c:	d50a      	bpl.n	8008984 <__pow5mult+0x84>
 800896e:	4639      	mov	r1, r7
 8008970:	4622      	mov	r2, r4
 8008972:	4630      	mov	r0, r6
 8008974:	f7ff ff1e 	bl	80087b4 <__multiply>
 8008978:	4639      	mov	r1, r7
 800897a:	4680      	mov	r8, r0
 800897c:	4630      	mov	r0, r6
 800897e:	f7ff fe47 	bl	8008610 <_Bfree>
 8008982:	4647      	mov	r7, r8
 8008984:	106d      	asrs	r5, r5, #1
 8008986:	d00b      	beq.n	80089a0 <__pow5mult+0xa0>
 8008988:	6820      	ldr	r0, [r4, #0]
 800898a:	b938      	cbnz	r0, 800899c <__pow5mult+0x9c>
 800898c:	4622      	mov	r2, r4
 800898e:	4621      	mov	r1, r4
 8008990:	4630      	mov	r0, r6
 8008992:	f7ff ff0f 	bl	80087b4 <__multiply>
 8008996:	6020      	str	r0, [r4, #0]
 8008998:	f8c0 9000 	str.w	r9, [r0]
 800899c:	4604      	mov	r4, r0
 800899e:	e7e4      	b.n	800896a <__pow5mult+0x6a>
 80089a0:	4638      	mov	r0, r7
 80089a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089a6:	bf00      	nop
 80089a8:	0800b088 	.word	0x0800b088
 80089ac:	0800abcc 	.word	0x0800abcc
 80089b0:	0800af36 	.word	0x0800af36

080089b4 <__lshift>:
 80089b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b8:	460c      	mov	r4, r1
 80089ba:	6849      	ldr	r1, [r1, #4]
 80089bc:	6923      	ldr	r3, [r4, #16]
 80089be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089c2:	68a3      	ldr	r3, [r4, #8]
 80089c4:	4607      	mov	r7, r0
 80089c6:	4691      	mov	r9, r2
 80089c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089cc:	f108 0601 	add.w	r6, r8, #1
 80089d0:	42b3      	cmp	r3, r6
 80089d2:	db0b      	blt.n	80089ec <__lshift+0x38>
 80089d4:	4638      	mov	r0, r7
 80089d6:	f7ff fddb 	bl	8008590 <_Balloc>
 80089da:	4605      	mov	r5, r0
 80089dc:	b948      	cbnz	r0, 80089f2 <__lshift+0x3e>
 80089de:	4602      	mov	r2, r0
 80089e0:	4b28      	ldr	r3, [pc, #160]	; (8008a84 <__lshift+0xd0>)
 80089e2:	4829      	ldr	r0, [pc, #164]	; (8008a88 <__lshift+0xd4>)
 80089e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089e8:	f7fe fdf6 	bl	80075d8 <__assert_func>
 80089ec:	3101      	adds	r1, #1
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	e7ee      	b.n	80089d0 <__lshift+0x1c>
 80089f2:	2300      	movs	r3, #0
 80089f4:	f100 0114 	add.w	r1, r0, #20
 80089f8:	f100 0210 	add.w	r2, r0, #16
 80089fc:	4618      	mov	r0, r3
 80089fe:	4553      	cmp	r3, sl
 8008a00:	db33      	blt.n	8008a6a <__lshift+0xb6>
 8008a02:	6920      	ldr	r0, [r4, #16]
 8008a04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a08:	f104 0314 	add.w	r3, r4, #20
 8008a0c:	f019 091f 	ands.w	r9, r9, #31
 8008a10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a18:	d02b      	beq.n	8008a72 <__lshift+0xbe>
 8008a1a:	f1c9 0e20 	rsb	lr, r9, #32
 8008a1e:	468a      	mov	sl, r1
 8008a20:	2200      	movs	r2, #0
 8008a22:	6818      	ldr	r0, [r3, #0]
 8008a24:	fa00 f009 	lsl.w	r0, r0, r9
 8008a28:	4302      	orrs	r2, r0
 8008a2a:	f84a 2b04 	str.w	r2, [sl], #4
 8008a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a32:	459c      	cmp	ip, r3
 8008a34:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a38:	d8f3      	bhi.n	8008a22 <__lshift+0x6e>
 8008a3a:	ebac 0304 	sub.w	r3, ip, r4
 8008a3e:	3b15      	subs	r3, #21
 8008a40:	f023 0303 	bic.w	r3, r3, #3
 8008a44:	3304      	adds	r3, #4
 8008a46:	f104 0015 	add.w	r0, r4, #21
 8008a4a:	4584      	cmp	ip, r0
 8008a4c:	bf38      	it	cc
 8008a4e:	2304      	movcc	r3, #4
 8008a50:	50ca      	str	r2, [r1, r3]
 8008a52:	b10a      	cbz	r2, 8008a58 <__lshift+0xa4>
 8008a54:	f108 0602 	add.w	r6, r8, #2
 8008a58:	3e01      	subs	r6, #1
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	612e      	str	r6, [r5, #16]
 8008a5e:	4621      	mov	r1, r4
 8008a60:	f7ff fdd6 	bl	8008610 <_Bfree>
 8008a64:	4628      	mov	r0, r5
 8008a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a6e:	3301      	adds	r3, #1
 8008a70:	e7c5      	b.n	80089fe <__lshift+0x4a>
 8008a72:	3904      	subs	r1, #4
 8008a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a78:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a7c:	459c      	cmp	ip, r3
 8008a7e:	d8f9      	bhi.n	8008a74 <__lshift+0xc0>
 8008a80:	e7ea      	b.n	8008a58 <__lshift+0xa4>
 8008a82:	bf00      	nop
 8008a84:	0800af1b 	.word	0x0800af1b
 8008a88:	0800af36 	.word	0x0800af36

08008a8c <__mcmp>:
 8008a8c:	b530      	push	{r4, r5, lr}
 8008a8e:	6902      	ldr	r2, [r0, #16]
 8008a90:	690c      	ldr	r4, [r1, #16]
 8008a92:	1b12      	subs	r2, r2, r4
 8008a94:	d10e      	bne.n	8008ab4 <__mcmp+0x28>
 8008a96:	f100 0314 	add.w	r3, r0, #20
 8008a9a:	3114      	adds	r1, #20
 8008a9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008aa0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008aa4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008aa8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008aac:	42a5      	cmp	r5, r4
 8008aae:	d003      	beq.n	8008ab8 <__mcmp+0x2c>
 8008ab0:	d305      	bcc.n	8008abe <__mcmp+0x32>
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	bd30      	pop	{r4, r5, pc}
 8008ab8:	4283      	cmp	r3, r0
 8008aba:	d3f3      	bcc.n	8008aa4 <__mcmp+0x18>
 8008abc:	e7fa      	b.n	8008ab4 <__mcmp+0x28>
 8008abe:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac2:	e7f7      	b.n	8008ab4 <__mcmp+0x28>

08008ac4 <__mdiff>:
 8008ac4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac8:	460c      	mov	r4, r1
 8008aca:	4606      	mov	r6, r0
 8008acc:	4611      	mov	r1, r2
 8008ace:	4620      	mov	r0, r4
 8008ad0:	4617      	mov	r7, r2
 8008ad2:	f7ff ffdb 	bl	8008a8c <__mcmp>
 8008ad6:	1e05      	subs	r5, r0, #0
 8008ad8:	d110      	bne.n	8008afc <__mdiff+0x38>
 8008ada:	4629      	mov	r1, r5
 8008adc:	4630      	mov	r0, r6
 8008ade:	f7ff fd57 	bl	8008590 <_Balloc>
 8008ae2:	b930      	cbnz	r0, 8008af2 <__mdiff+0x2e>
 8008ae4:	4b39      	ldr	r3, [pc, #228]	; (8008bcc <__mdiff+0x108>)
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	f240 2132 	movw	r1, #562	; 0x232
 8008aec:	4838      	ldr	r0, [pc, #224]	; (8008bd0 <__mdiff+0x10c>)
 8008aee:	f7fe fd73 	bl	80075d8 <__assert_func>
 8008af2:	2301      	movs	r3, #1
 8008af4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008af8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008afc:	bfa4      	itt	ge
 8008afe:	463b      	movge	r3, r7
 8008b00:	4627      	movge	r7, r4
 8008b02:	4630      	mov	r0, r6
 8008b04:	6879      	ldr	r1, [r7, #4]
 8008b06:	bfa6      	itte	ge
 8008b08:	461c      	movge	r4, r3
 8008b0a:	2500      	movge	r5, #0
 8008b0c:	2501      	movlt	r5, #1
 8008b0e:	f7ff fd3f 	bl	8008590 <_Balloc>
 8008b12:	b920      	cbnz	r0, 8008b1e <__mdiff+0x5a>
 8008b14:	4b2d      	ldr	r3, [pc, #180]	; (8008bcc <__mdiff+0x108>)
 8008b16:	4602      	mov	r2, r0
 8008b18:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008b1c:	e7e6      	b.n	8008aec <__mdiff+0x28>
 8008b1e:	693e      	ldr	r6, [r7, #16]
 8008b20:	60c5      	str	r5, [r0, #12]
 8008b22:	6925      	ldr	r5, [r4, #16]
 8008b24:	f107 0114 	add.w	r1, r7, #20
 8008b28:	f104 0914 	add.w	r9, r4, #20
 8008b2c:	f100 0e14 	add.w	lr, r0, #20
 8008b30:	f107 0210 	add.w	r2, r7, #16
 8008b34:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008b38:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008b3c:	46f2      	mov	sl, lr
 8008b3e:	2700      	movs	r7, #0
 8008b40:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b48:	fa1f f883 	uxth.w	r8, r3
 8008b4c:	fa17 f78b 	uxtah	r7, r7, fp
 8008b50:	0c1b      	lsrs	r3, r3, #16
 8008b52:	eba7 0808 	sub.w	r8, r7, r8
 8008b56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b5e:	fa1f f888 	uxth.w	r8, r8
 8008b62:	141f      	asrs	r7, r3, #16
 8008b64:	454d      	cmp	r5, r9
 8008b66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b6a:	f84a 3b04 	str.w	r3, [sl], #4
 8008b6e:	d8e7      	bhi.n	8008b40 <__mdiff+0x7c>
 8008b70:	1b2b      	subs	r3, r5, r4
 8008b72:	3b15      	subs	r3, #21
 8008b74:	f023 0303 	bic.w	r3, r3, #3
 8008b78:	3304      	adds	r3, #4
 8008b7a:	3415      	adds	r4, #21
 8008b7c:	42a5      	cmp	r5, r4
 8008b7e:	bf38      	it	cc
 8008b80:	2304      	movcc	r3, #4
 8008b82:	4419      	add	r1, r3
 8008b84:	4473      	add	r3, lr
 8008b86:	469e      	mov	lr, r3
 8008b88:	460d      	mov	r5, r1
 8008b8a:	4565      	cmp	r5, ip
 8008b8c:	d30e      	bcc.n	8008bac <__mdiff+0xe8>
 8008b8e:	f10c 0203 	add.w	r2, ip, #3
 8008b92:	1a52      	subs	r2, r2, r1
 8008b94:	f022 0203 	bic.w	r2, r2, #3
 8008b98:	3903      	subs	r1, #3
 8008b9a:	458c      	cmp	ip, r1
 8008b9c:	bf38      	it	cc
 8008b9e:	2200      	movcc	r2, #0
 8008ba0:	441a      	add	r2, r3
 8008ba2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ba6:	b17b      	cbz	r3, 8008bc8 <__mdiff+0x104>
 8008ba8:	6106      	str	r6, [r0, #16]
 8008baa:	e7a5      	b.n	8008af8 <__mdiff+0x34>
 8008bac:	f855 8b04 	ldr.w	r8, [r5], #4
 8008bb0:	fa17 f488 	uxtah	r4, r7, r8
 8008bb4:	1422      	asrs	r2, r4, #16
 8008bb6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008bba:	b2a4      	uxth	r4, r4
 8008bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008bc0:	f84e 4b04 	str.w	r4, [lr], #4
 8008bc4:	1417      	asrs	r7, r2, #16
 8008bc6:	e7e0      	b.n	8008b8a <__mdiff+0xc6>
 8008bc8:	3e01      	subs	r6, #1
 8008bca:	e7ea      	b.n	8008ba2 <__mdiff+0xde>
 8008bcc:	0800af1b 	.word	0x0800af1b
 8008bd0:	0800af36 	.word	0x0800af36

08008bd4 <__d2b>:
 8008bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bd8:	4689      	mov	r9, r1
 8008bda:	2101      	movs	r1, #1
 8008bdc:	ec57 6b10 	vmov	r6, r7, d0
 8008be0:	4690      	mov	r8, r2
 8008be2:	f7ff fcd5 	bl	8008590 <_Balloc>
 8008be6:	4604      	mov	r4, r0
 8008be8:	b930      	cbnz	r0, 8008bf8 <__d2b+0x24>
 8008bea:	4602      	mov	r2, r0
 8008bec:	4b25      	ldr	r3, [pc, #148]	; (8008c84 <__d2b+0xb0>)
 8008bee:	4826      	ldr	r0, [pc, #152]	; (8008c88 <__d2b+0xb4>)
 8008bf0:	f240 310a 	movw	r1, #778	; 0x30a
 8008bf4:	f7fe fcf0 	bl	80075d8 <__assert_func>
 8008bf8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008bfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008c00:	bb35      	cbnz	r5, 8008c50 <__d2b+0x7c>
 8008c02:	2e00      	cmp	r6, #0
 8008c04:	9301      	str	r3, [sp, #4]
 8008c06:	d028      	beq.n	8008c5a <__d2b+0x86>
 8008c08:	4668      	mov	r0, sp
 8008c0a:	9600      	str	r6, [sp, #0]
 8008c0c:	f7ff fd8c 	bl	8008728 <__lo0bits>
 8008c10:	9900      	ldr	r1, [sp, #0]
 8008c12:	b300      	cbz	r0, 8008c56 <__d2b+0x82>
 8008c14:	9a01      	ldr	r2, [sp, #4]
 8008c16:	f1c0 0320 	rsb	r3, r0, #32
 8008c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1e:	430b      	orrs	r3, r1
 8008c20:	40c2      	lsrs	r2, r0
 8008c22:	6163      	str	r3, [r4, #20]
 8008c24:	9201      	str	r2, [sp, #4]
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	61a3      	str	r3, [r4, #24]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	bf14      	ite	ne
 8008c2e:	2202      	movne	r2, #2
 8008c30:	2201      	moveq	r2, #1
 8008c32:	6122      	str	r2, [r4, #16]
 8008c34:	b1d5      	cbz	r5, 8008c6c <__d2b+0x98>
 8008c36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008c3a:	4405      	add	r5, r0
 8008c3c:	f8c9 5000 	str.w	r5, [r9]
 8008c40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c44:	f8c8 0000 	str.w	r0, [r8]
 8008c48:	4620      	mov	r0, r4
 8008c4a:	b003      	add	sp, #12
 8008c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c54:	e7d5      	b.n	8008c02 <__d2b+0x2e>
 8008c56:	6161      	str	r1, [r4, #20]
 8008c58:	e7e5      	b.n	8008c26 <__d2b+0x52>
 8008c5a:	a801      	add	r0, sp, #4
 8008c5c:	f7ff fd64 	bl	8008728 <__lo0bits>
 8008c60:	9b01      	ldr	r3, [sp, #4]
 8008c62:	6163      	str	r3, [r4, #20]
 8008c64:	2201      	movs	r2, #1
 8008c66:	6122      	str	r2, [r4, #16]
 8008c68:	3020      	adds	r0, #32
 8008c6a:	e7e3      	b.n	8008c34 <__d2b+0x60>
 8008c6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c74:	f8c9 0000 	str.w	r0, [r9]
 8008c78:	6918      	ldr	r0, [r3, #16]
 8008c7a:	f7ff fd35 	bl	80086e8 <__hi0bits>
 8008c7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c82:	e7df      	b.n	8008c44 <__d2b+0x70>
 8008c84:	0800af1b 	.word	0x0800af1b
 8008c88:	0800af36 	.word	0x0800af36

08008c8c <_calloc_r>:
 8008c8c:	b513      	push	{r0, r1, r4, lr}
 8008c8e:	434a      	muls	r2, r1
 8008c90:	4611      	mov	r1, r2
 8008c92:	9201      	str	r2, [sp, #4]
 8008c94:	f7fd fc0a 	bl	80064ac <_malloc_r>
 8008c98:	4604      	mov	r4, r0
 8008c9a:	b118      	cbz	r0, 8008ca4 <_calloc_r+0x18>
 8008c9c:	9a01      	ldr	r2, [sp, #4]
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	f7fd f92e 	bl	8005f00 <memset>
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	b002      	add	sp, #8
 8008ca8:	bd10      	pop	{r4, pc}

08008caa <_realloc_r>:
 8008caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cac:	4607      	mov	r7, r0
 8008cae:	4614      	mov	r4, r2
 8008cb0:	460e      	mov	r6, r1
 8008cb2:	b921      	cbnz	r1, 8008cbe <_realloc_r+0x14>
 8008cb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008cb8:	4611      	mov	r1, r2
 8008cba:	f7fd bbf7 	b.w	80064ac <_malloc_r>
 8008cbe:	b922      	cbnz	r2, 8008cca <_realloc_r+0x20>
 8008cc0:	f7fd fba4 	bl	800640c <_free_r>
 8008cc4:	4625      	mov	r5, r4
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cca:	f000 fe65 	bl	8009998 <_malloc_usable_size_r>
 8008cce:	42a0      	cmp	r0, r4
 8008cd0:	d20f      	bcs.n	8008cf2 <_realloc_r+0x48>
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	f7fd fbe9 	bl	80064ac <_malloc_r>
 8008cda:	4605      	mov	r5, r0
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	d0f2      	beq.n	8008cc6 <_realloc_r+0x1c>
 8008ce0:	4631      	mov	r1, r6
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	f7fd f8e4 	bl	8005eb0 <memcpy>
 8008ce8:	4631      	mov	r1, r6
 8008cea:	4638      	mov	r0, r7
 8008cec:	f7fd fb8e 	bl	800640c <_free_r>
 8008cf0:	e7e9      	b.n	8008cc6 <_realloc_r+0x1c>
 8008cf2:	4635      	mov	r5, r6
 8008cf4:	e7e7      	b.n	8008cc6 <_realloc_r+0x1c>

08008cf6 <__ssputs_r>:
 8008cf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cfa:	688e      	ldr	r6, [r1, #8]
 8008cfc:	429e      	cmp	r6, r3
 8008cfe:	4682      	mov	sl, r0
 8008d00:	460c      	mov	r4, r1
 8008d02:	4690      	mov	r8, r2
 8008d04:	461f      	mov	r7, r3
 8008d06:	d838      	bhi.n	8008d7a <__ssputs_r+0x84>
 8008d08:	898a      	ldrh	r2, [r1, #12]
 8008d0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d0e:	d032      	beq.n	8008d76 <__ssputs_r+0x80>
 8008d10:	6825      	ldr	r5, [r4, #0]
 8008d12:	6909      	ldr	r1, [r1, #16]
 8008d14:	eba5 0901 	sub.w	r9, r5, r1
 8008d18:	6965      	ldr	r5, [r4, #20]
 8008d1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d22:	3301      	adds	r3, #1
 8008d24:	444b      	add	r3, r9
 8008d26:	106d      	asrs	r5, r5, #1
 8008d28:	429d      	cmp	r5, r3
 8008d2a:	bf38      	it	cc
 8008d2c:	461d      	movcc	r5, r3
 8008d2e:	0553      	lsls	r3, r2, #21
 8008d30:	d531      	bpl.n	8008d96 <__ssputs_r+0xa0>
 8008d32:	4629      	mov	r1, r5
 8008d34:	f7fd fbba 	bl	80064ac <_malloc_r>
 8008d38:	4606      	mov	r6, r0
 8008d3a:	b950      	cbnz	r0, 8008d52 <__ssputs_r+0x5c>
 8008d3c:	230c      	movs	r3, #12
 8008d3e:	f8ca 3000 	str.w	r3, [sl]
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d48:	81a3      	strh	r3, [r4, #12]
 8008d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d52:	6921      	ldr	r1, [r4, #16]
 8008d54:	464a      	mov	r2, r9
 8008d56:	f7fd f8ab 	bl	8005eb0 <memcpy>
 8008d5a:	89a3      	ldrh	r3, [r4, #12]
 8008d5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d64:	81a3      	strh	r3, [r4, #12]
 8008d66:	6126      	str	r6, [r4, #16]
 8008d68:	6165      	str	r5, [r4, #20]
 8008d6a:	444e      	add	r6, r9
 8008d6c:	eba5 0509 	sub.w	r5, r5, r9
 8008d70:	6026      	str	r6, [r4, #0]
 8008d72:	60a5      	str	r5, [r4, #8]
 8008d74:	463e      	mov	r6, r7
 8008d76:	42be      	cmp	r6, r7
 8008d78:	d900      	bls.n	8008d7c <__ssputs_r+0x86>
 8008d7a:	463e      	mov	r6, r7
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	6820      	ldr	r0, [r4, #0]
 8008d80:	4641      	mov	r1, r8
 8008d82:	f7fd f8a3 	bl	8005ecc <memmove>
 8008d86:	68a3      	ldr	r3, [r4, #8]
 8008d88:	6822      	ldr	r2, [r4, #0]
 8008d8a:	1b9b      	subs	r3, r3, r6
 8008d8c:	4432      	add	r2, r6
 8008d8e:	60a3      	str	r3, [r4, #8]
 8008d90:	6022      	str	r2, [r4, #0]
 8008d92:	2000      	movs	r0, #0
 8008d94:	e7db      	b.n	8008d4e <__ssputs_r+0x58>
 8008d96:	462a      	mov	r2, r5
 8008d98:	f7ff ff87 	bl	8008caa <_realloc_r>
 8008d9c:	4606      	mov	r6, r0
 8008d9e:	2800      	cmp	r0, #0
 8008da0:	d1e1      	bne.n	8008d66 <__ssputs_r+0x70>
 8008da2:	6921      	ldr	r1, [r4, #16]
 8008da4:	4650      	mov	r0, sl
 8008da6:	f7fd fb31 	bl	800640c <_free_r>
 8008daa:	e7c7      	b.n	8008d3c <__ssputs_r+0x46>

08008dac <_svfiprintf_r>:
 8008dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	4698      	mov	r8, r3
 8008db2:	898b      	ldrh	r3, [r1, #12]
 8008db4:	061b      	lsls	r3, r3, #24
 8008db6:	b09d      	sub	sp, #116	; 0x74
 8008db8:	4607      	mov	r7, r0
 8008dba:	460d      	mov	r5, r1
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	d50e      	bpl.n	8008dde <_svfiprintf_r+0x32>
 8008dc0:	690b      	ldr	r3, [r1, #16]
 8008dc2:	b963      	cbnz	r3, 8008dde <_svfiprintf_r+0x32>
 8008dc4:	2140      	movs	r1, #64	; 0x40
 8008dc6:	f7fd fb71 	bl	80064ac <_malloc_r>
 8008dca:	6028      	str	r0, [r5, #0]
 8008dcc:	6128      	str	r0, [r5, #16]
 8008dce:	b920      	cbnz	r0, 8008dda <_svfiprintf_r+0x2e>
 8008dd0:	230c      	movs	r3, #12
 8008dd2:	603b      	str	r3, [r7, #0]
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	e0d1      	b.n	8008f7e <_svfiprintf_r+0x1d2>
 8008dda:	2340      	movs	r3, #64	; 0x40
 8008ddc:	616b      	str	r3, [r5, #20]
 8008dde:	2300      	movs	r3, #0
 8008de0:	9309      	str	r3, [sp, #36]	; 0x24
 8008de2:	2320      	movs	r3, #32
 8008de4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008de8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dec:	2330      	movs	r3, #48	; 0x30
 8008dee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f98 <_svfiprintf_r+0x1ec>
 8008df2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008df6:	f04f 0901 	mov.w	r9, #1
 8008dfa:	4623      	mov	r3, r4
 8008dfc:	469a      	mov	sl, r3
 8008dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e02:	b10a      	cbz	r2, 8008e08 <_svfiprintf_r+0x5c>
 8008e04:	2a25      	cmp	r2, #37	; 0x25
 8008e06:	d1f9      	bne.n	8008dfc <_svfiprintf_r+0x50>
 8008e08:	ebba 0b04 	subs.w	fp, sl, r4
 8008e0c:	d00b      	beq.n	8008e26 <_svfiprintf_r+0x7a>
 8008e0e:	465b      	mov	r3, fp
 8008e10:	4622      	mov	r2, r4
 8008e12:	4629      	mov	r1, r5
 8008e14:	4638      	mov	r0, r7
 8008e16:	f7ff ff6e 	bl	8008cf6 <__ssputs_r>
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	f000 80aa 	beq.w	8008f74 <_svfiprintf_r+0x1c8>
 8008e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e22:	445a      	add	r2, fp
 8008e24:	9209      	str	r2, [sp, #36]	; 0x24
 8008e26:	f89a 3000 	ldrb.w	r3, [sl]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 80a2 	beq.w	8008f74 <_svfiprintf_r+0x1c8>
 8008e30:	2300      	movs	r3, #0
 8008e32:	f04f 32ff 	mov.w	r2, #4294967295
 8008e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e3a:	f10a 0a01 	add.w	sl, sl, #1
 8008e3e:	9304      	str	r3, [sp, #16]
 8008e40:	9307      	str	r3, [sp, #28]
 8008e42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e46:	931a      	str	r3, [sp, #104]	; 0x68
 8008e48:	4654      	mov	r4, sl
 8008e4a:	2205      	movs	r2, #5
 8008e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e50:	4851      	ldr	r0, [pc, #324]	; (8008f98 <_svfiprintf_r+0x1ec>)
 8008e52:	f7f7 f9f5 	bl	8000240 <memchr>
 8008e56:	9a04      	ldr	r2, [sp, #16]
 8008e58:	b9d8      	cbnz	r0, 8008e92 <_svfiprintf_r+0xe6>
 8008e5a:	06d0      	lsls	r0, r2, #27
 8008e5c:	bf44      	itt	mi
 8008e5e:	2320      	movmi	r3, #32
 8008e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e64:	0711      	lsls	r1, r2, #28
 8008e66:	bf44      	itt	mi
 8008e68:	232b      	movmi	r3, #43	; 0x2b
 8008e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e72:	2b2a      	cmp	r3, #42	; 0x2a
 8008e74:	d015      	beq.n	8008ea2 <_svfiprintf_r+0xf6>
 8008e76:	9a07      	ldr	r2, [sp, #28]
 8008e78:	4654      	mov	r4, sl
 8008e7a:	2000      	movs	r0, #0
 8008e7c:	f04f 0c0a 	mov.w	ip, #10
 8008e80:	4621      	mov	r1, r4
 8008e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e86:	3b30      	subs	r3, #48	; 0x30
 8008e88:	2b09      	cmp	r3, #9
 8008e8a:	d94e      	bls.n	8008f2a <_svfiprintf_r+0x17e>
 8008e8c:	b1b0      	cbz	r0, 8008ebc <_svfiprintf_r+0x110>
 8008e8e:	9207      	str	r2, [sp, #28]
 8008e90:	e014      	b.n	8008ebc <_svfiprintf_r+0x110>
 8008e92:	eba0 0308 	sub.w	r3, r0, r8
 8008e96:	fa09 f303 	lsl.w	r3, r9, r3
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	9304      	str	r3, [sp, #16]
 8008e9e:	46a2      	mov	sl, r4
 8008ea0:	e7d2      	b.n	8008e48 <_svfiprintf_r+0x9c>
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	1d19      	adds	r1, r3, #4
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	9103      	str	r1, [sp, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bfbb      	ittet	lt
 8008eae:	425b      	neglt	r3, r3
 8008eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8008eb4:	9307      	strge	r3, [sp, #28]
 8008eb6:	9307      	strlt	r3, [sp, #28]
 8008eb8:	bfb8      	it	lt
 8008eba:	9204      	strlt	r2, [sp, #16]
 8008ebc:	7823      	ldrb	r3, [r4, #0]
 8008ebe:	2b2e      	cmp	r3, #46	; 0x2e
 8008ec0:	d10c      	bne.n	8008edc <_svfiprintf_r+0x130>
 8008ec2:	7863      	ldrb	r3, [r4, #1]
 8008ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ec6:	d135      	bne.n	8008f34 <_svfiprintf_r+0x188>
 8008ec8:	9b03      	ldr	r3, [sp, #12]
 8008eca:	1d1a      	adds	r2, r3, #4
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	9203      	str	r2, [sp, #12]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	bfb8      	it	lt
 8008ed4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ed8:	3402      	adds	r4, #2
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008fa8 <_svfiprintf_r+0x1fc>
 8008ee0:	7821      	ldrb	r1, [r4, #0]
 8008ee2:	2203      	movs	r2, #3
 8008ee4:	4650      	mov	r0, sl
 8008ee6:	f7f7 f9ab 	bl	8000240 <memchr>
 8008eea:	b140      	cbz	r0, 8008efe <_svfiprintf_r+0x152>
 8008eec:	2340      	movs	r3, #64	; 0x40
 8008eee:	eba0 000a 	sub.w	r0, r0, sl
 8008ef2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	4303      	orrs	r3, r0
 8008efa:	3401      	adds	r4, #1
 8008efc:	9304      	str	r3, [sp, #16]
 8008efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f02:	4826      	ldr	r0, [pc, #152]	; (8008f9c <_svfiprintf_r+0x1f0>)
 8008f04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f08:	2206      	movs	r2, #6
 8008f0a:	f7f7 f999 	bl	8000240 <memchr>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d038      	beq.n	8008f84 <_svfiprintf_r+0x1d8>
 8008f12:	4b23      	ldr	r3, [pc, #140]	; (8008fa0 <_svfiprintf_r+0x1f4>)
 8008f14:	bb1b      	cbnz	r3, 8008f5e <_svfiprintf_r+0x1b2>
 8008f16:	9b03      	ldr	r3, [sp, #12]
 8008f18:	3307      	adds	r3, #7
 8008f1a:	f023 0307 	bic.w	r3, r3, #7
 8008f1e:	3308      	adds	r3, #8
 8008f20:	9303      	str	r3, [sp, #12]
 8008f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f24:	4433      	add	r3, r6
 8008f26:	9309      	str	r3, [sp, #36]	; 0x24
 8008f28:	e767      	b.n	8008dfa <_svfiprintf_r+0x4e>
 8008f2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f2e:	460c      	mov	r4, r1
 8008f30:	2001      	movs	r0, #1
 8008f32:	e7a5      	b.n	8008e80 <_svfiprintf_r+0xd4>
 8008f34:	2300      	movs	r3, #0
 8008f36:	3401      	adds	r4, #1
 8008f38:	9305      	str	r3, [sp, #20]
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	f04f 0c0a 	mov.w	ip, #10
 8008f40:	4620      	mov	r0, r4
 8008f42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f46:	3a30      	subs	r2, #48	; 0x30
 8008f48:	2a09      	cmp	r2, #9
 8008f4a:	d903      	bls.n	8008f54 <_svfiprintf_r+0x1a8>
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0c5      	beq.n	8008edc <_svfiprintf_r+0x130>
 8008f50:	9105      	str	r1, [sp, #20]
 8008f52:	e7c3      	b.n	8008edc <_svfiprintf_r+0x130>
 8008f54:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f58:	4604      	mov	r4, r0
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e7f0      	b.n	8008f40 <_svfiprintf_r+0x194>
 8008f5e:	ab03      	add	r3, sp, #12
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	462a      	mov	r2, r5
 8008f64:	4b0f      	ldr	r3, [pc, #60]	; (8008fa4 <_svfiprintf_r+0x1f8>)
 8008f66:	a904      	add	r1, sp, #16
 8008f68:	4638      	mov	r0, r7
 8008f6a:	f7fd fb99 	bl	80066a0 <_printf_float>
 8008f6e:	1c42      	adds	r2, r0, #1
 8008f70:	4606      	mov	r6, r0
 8008f72:	d1d6      	bne.n	8008f22 <_svfiprintf_r+0x176>
 8008f74:	89ab      	ldrh	r3, [r5, #12]
 8008f76:	065b      	lsls	r3, r3, #25
 8008f78:	f53f af2c 	bmi.w	8008dd4 <_svfiprintf_r+0x28>
 8008f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f7e:	b01d      	add	sp, #116	; 0x74
 8008f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f84:	ab03      	add	r3, sp, #12
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	462a      	mov	r2, r5
 8008f8a:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <_svfiprintf_r+0x1f8>)
 8008f8c:	a904      	add	r1, sp, #16
 8008f8e:	4638      	mov	r0, r7
 8008f90:	f7fd fe2a 	bl	8006be8 <_printf_i>
 8008f94:	e7eb      	b.n	8008f6e <_svfiprintf_r+0x1c2>
 8008f96:	bf00      	nop
 8008f98:	0800b094 	.word	0x0800b094
 8008f9c:	0800b09e 	.word	0x0800b09e
 8008fa0:	080066a1 	.word	0x080066a1
 8008fa4:	08008cf7 	.word	0x08008cf7
 8008fa8:	0800b09a 	.word	0x0800b09a

08008fac <__sfputc_r>:
 8008fac:	6893      	ldr	r3, [r2, #8]
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	b410      	push	{r4}
 8008fb4:	6093      	str	r3, [r2, #8]
 8008fb6:	da08      	bge.n	8008fca <__sfputc_r+0x1e>
 8008fb8:	6994      	ldr	r4, [r2, #24]
 8008fba:	42a3      	cmp	r3, r4
 8008fbc:	db01      	blt.n	8008fc2 <__sfputc_r+0x16>
 8008fbe:	290a      	cmp	r1, #10
 8008fc0:	d103      	bne.n	8008fca <__sfputc_r+0x1e>
 8008fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fc6:	f000 b9bd 	b.w	8009344 <__swbuf_r>
 8008fca:	6813      	ldr	r3, [r2, #0]
 8008fcc:	1c58      	adds	r0, r3, #1
 8008fce:	6010      	str	r0, [r2, #0]
 8008fd0:	7019      	strb	r1, [r3, #0]
 8008fd2:	4608      	mov	r0, r1
 8008fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <__sfputs_r>:
 8008fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fdc:	4606      	mov	r6, r0
 8008fde:	460f      	mov	r7, r1
 8008fe0:	4614      	mov	r4, r2
 8008fe2:	18d5      	adds	r5, r2, r3
 8008fe4:	42ac      	cmp	r4, r5
 8008fe6:	d101      	bne.n	8008fec <__sfputs_r+0x12>
 8008fe8:	2000      	movs	r0, #0
 8008fea:	e007      	b.n	8008ffc <__sfputs_r+0x22>
 8008fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff0:	463a      	mov	r2, r7
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7ff ffda 	bl	8008fac <__sfputc_r>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d1f3      	bne.n	8008fe4 <__sfputs_r+0xa>
 8008ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009000 <_vfiprintf_r>:
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	460d      	mov	r5, r1
 8009006:	b09d      	sub	sp, #116	; 0x74
 8009008:	4614      	mov	r4, r2
 800900a:	4698      	mov	r8, r3
 800900c:	4606      	mov	r6, r0
 800900e:	b118      	cbz	r0, 8009018 <_vfiprintf_r+0x18>
 8009010:	6983      	ldr	r3, [r0, #24]
 8009012:	b90b      	cbnz	r3, 8009018 <_vfiprintf_r+0x18>
 8009014:	f000 fbac 	bl	8009770 <__sinit>
 8009018:	4b89      	ldr	r3, [pc, #548]	; (8009240 <_vfiprintf_r+0x240>)
 800901a:	429d      	cmp	r5, r3
 800901c:	d11b      	bne.n	8009056 <_vfiprintf_r+0x56>
 800901e:	6875      	ldr	r5, [r6, #4]
 8009020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009022:	07d9      	lsls	r1, r3, #31
 8009024:	d405      	bmi.n	8009032 <_vfiprintf_r+0x32>
 8009026:	89ab      	ldrh	r3, [r5, #12]
 8009028:	059a      	lsls	r2, r3, #22
 800902a:	d402      	bmi.n	8009032 <_vfiprintf_r+0x32>
 800902c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800902e:	f7ff fa8d 	bl	800854c <__retarget_lock_acquire_recursive>
 8009032:	89ab      	ldrh	r3, [r5, #12]
 8009034:	071b      	lsls	r3, r3, #28
 8009036:	d501      	bpl.n	800903c <_vfiprintf_r+0x3c>
 8009038:	692b      	ldr	r3, [r5, #16]
 800903a:	b9eb      	cbnz	r3, 8009078 <_vfiprintf_r+0x78>
 800903c:	4629      	mov	r1, r5
 800903e:	4630      	mov	r0, r6
 8009040:	f000 f9f2 	bl	8009428 <__swsetup_r>
 8009044:	b1c0      	cbz	r0, 8009078 <_vfiprintf_r+0x78>
 8009046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009048:	07dc      	lsls	r4, r3, #31
 800904a:	d50e      	bpl.n	800906a <_vfiprintf_r+0x6a>
 800904c:	f04f 30ff 	mov.w	r0, #4294967295
 8009050:	b01d      	add	sp, #116	; 0x74
 8009052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009056:	4b7b      	ldr	r3, [pc, #492]	; (8009244 <_vfiprintf_r+0x244>)
 8009058:	429d      	cmp	r5, r3
 800905a:	d101      	bne.n	8009060 <_vfiprintf_r+0x60>
 800905c:	68b5      	ldr	r5, [r6, #8]
 800905e:	e7df      	b.n	8009020 <_vfiprintf_r+0x20>
 8009060:	4b79      	ldr	r3, [pc, #484]	; (8009248 <_vfiprintf_r+0x248>)
 8009062:	429d      	cmp	r5, r3
 8009064:	bf08      	it	eq
 8009066:	68f5      	ldreq	r5, [r6, #12]
 8009068:	e7da      	b.n	8009020 <_vfiprintf_r+0x20>
 800906a:	89ab      	ldrh	r3, [r5, #12]
 800906c:	0598      	lsls	r0, r3, #22
 800906e:	d4ed      	bmi.n	800904c <_vfiprintf_r+0x4c>
 8009070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009072:	f7ff fa6d 	bl	8008550 <__retarget_lock_release_recursive>
 8009076:	e7e9      	b.n	800904c <_vfiprintf_r+0x4c>
 8009078:	2300      	movs	r3, #0
 800907a:	9309      	str	r3, [sp, #36]	; 0x24
 800907c:	2320      	movs	r3, #32
 800907e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009082:	f8cd 800c 	str.w	r8, [sp, #12]
 8009086:	2330      	movs	r3, #48	; 0x30
 8009088:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800924c <_vfiprintf_r+0x24c>
 800908c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009090:	f04f 0901 	mov.w	r9, #1
 8009094:	4623      	mov	r3, r4
 8009096:	469a      	mov	sl, r3
 8009098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800909c:	b10a      	cbz	r2, 80090a2 <_vfiprintf_r+0xa2>
 800909e:	2a25      	cmp	r2, #37	; 0x25
 80090a0:	d1f9      	bne.n	8009096 <_vfiprintf_r+0x96>
 80090a2:	ebba 0b04 	subs.w	fp, sl, r4
 80090a6:	d00b      	beq.n	80090c0 <_vfiprintf_r+0xc0>
 80090a8:	465b      	mov	r3, fp
 80090aa:	4622      	mov	r2, r4
 80090ac:	4629      	mov	r1, r5
 80090ae:	4630      	mov	r0, r6
 80090b0:	f7ff ff93 	bl	8008fda <__sfputs_r>
 80090b4:	3001      	adds	r0, #1
 80090b6:	f000 80aa 	beq.w	800920e <_vfiprintf_r+0x20e>
 80090ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090bc:	445a      	add	r2, fp
 80090be:	9209      	str	r2, [sp, #36]	; 0x24
 80090c0:	f89a 3000 	ldrb.w	r3, [sl]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 80a2 	beq.w	800920e <_vfiprintf_r+0x20e>
 80090ca:	2300      	movs	r3, #0
 80090cc:	f04f 32ff 	mov.w	r2, #4294967295
 80090d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090d4:	f10a 0a01 	add.w	sl, sl, #1
 80090d8:	9304      	str	r3, [sp, #16]
 80090da:	9307      	str	r3, [sp, #28]
 80090dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090e0:	931a      	str	r3, [sp, #104]	; 0x68
 80090e2:	4654      	mov	r4, sl
 80090e4:	2205      	movs	r2, #5
 80090e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ea:	4858      	ldr	r0, [pc, #352]	; (800924c <_vfiprintf_r+0x24c>)
 80090ec:	f7f7 f8a8 	bl	8000240 <memchr>
 80090f0:	9a04      	ldr	r2, [sp, #16]
 80090f2:	b9d8      	cbnz	r0, 800912c <_vfiprintf_r+0x12c>
 80090f4:	06d1      	lsls	r1, r2, #27
 80090f6:	bf44      	itt	mi
 80090f8:	2320      	movmi	r3, #32
 80090fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090fe:	0713      	lsls	r3, r2, #28
 8009100:	bf44      	itt	mi
 8009102:	232b      	movmi	r3, #43	; 0x2b
 8009104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009108:	f89a 3000 	ldrb.w	r3, [sl]
 800910c:	2b2a      	cmp	r3, #42	; 0x2a
 800910e:	d015      	beq.n	800913c <_vfiprintf_r+0x13c>
 8009110:	9a07      	ldr	r2, [sp, #28]
 8009112:	4654      	mov	r4, sl
 8009114:	2000      	movs	r0, #0
 8009116:	f04f 0c0a 	mov.w	ip, #10
 800911a:	4621      	mov	r1, r4
 800911c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009120:	3b30      	subs	r3, #48	; 0x30
 8009122:	2b09      	cmp	r3, #9
 8009124:	d94e      	bls.n	80091c4 <_vfiprintf_r+0x1c4>
 8009126:	b1b0      	cbz	r0, 8009156 <_vfiprintf_r+0x156>
 8009128:	9207      	str	r2, [sp, #28]
 800912a:	e014      	b.n	8009156 <_vfiprintf_r+0x156>
 800912c:	eba0 0308 	sub.w	r3, r0, r8
 8009130:	fa09 f303 	lsl.w	r3, r9, r3
 8009134:	4313      	orrs	r3, r2
 8009136:	9304      	str	r3, [sp, #16]
 8009138:	46a2      	mov	sl, r4
 800913a:	e7d2      	b.n	80090e2 <_vfiprintf_r+0xe2>
 800913c:	9b03      	ldr	r3, [sp, #12]
 800913e:	1d19      	adds	r1, r3, #4
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	9103      	str	r1, [sp, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	bfbb      	ittet	lt
 8009148:	425b      	neglt	r3, r3
 800914a:	f042 0202 	orrlt.w	r2, r2, #2
 800914e:	9307      	strge	r3, [sp, #28]
 8009150:	9307      	strlt	r3, [sp, #28]
 8009152:	bfb8      	it	lt
 8009154:	9204      	strlt	r2, [sp, #16]
 8009156:	7823      	ldrb	r3, [r4, #0]
 8009158:	2b2e      	cmp	r3, #46	; 0x2e
 800915a:	d10c      	bne.n	8009176 <_vfiprintf_r+0x176>
 800915c:	7863      	ldrb	r3, [r4, #1]
 800915e:	2b2a      	cmp	r3, #42	; 0x2a
 8009160:	d135      	bne.n	80091ce <_vfiprintf_r+0x1ce>
 8009162:	9b03      	ldr	r3, [sp, #12]
 8009164:	1d1a      	adds	r2, r3, #4
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	9203      	str	r2, [sp, #12]
 800916a:	2b00      	cmp	r3, #0
 800916c:	bfb8      	it	lt
 800916e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009172:	3402      	adds	r4, #2
 8009174:	9305      	str	r3, [sp, #20]
 8009176:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800925c <_vfiprintf_r+0x25c>
 800917a:	7821      	ldrb	r1, [r4, #0]
 800917c:	2203      	movs	r2, #3
 800917e:	4650      	mov	r0, sl
 8009180:	f7f7 f85e 	bl	8000240 <memchr>
 8009184:	b140      	cbz	r0, 8009198 <_vfiprintf_r+0x198>
 8009186:	2340      	movs	r3, #64	; 0x40
 8009188:	eba0 000a 	sub.w	r0, r0, sl
 800918c:	fa03 f000 	lsl.w	r0, r3, r0
 8009190:	9b04      	ldr	r3, [sp, #16]
 8009192:	4303      	orrs	r3, r0
 8009194:	3401      	adds	r4, #1
 8009196:	9304      	str	r3, [sp, #16]
 8009198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800919c:	482c      	ldr	r0, [pc, #176]	; (8009250 <_vfiprintf_r+0x250>)
 800919e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091a2:	2206      	movs	r2, #6
 80091a4:	f7f7 f84c 	bl	8000240 <memchr>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d03f      	beq.n	800922c <_vfiprintf_r+0x22c>
 80091ac:	4b29      	ldr	r3, [pc, #164]	; (8009254 <_vfiprintf_r+0x254>)
 80091ae:	bb1b      	cbnz	r3, 80091f8 <_vfiprintf_r+0x1f8>
 80091b0:	9b03      	ldr	r3, [sp, #12]
 80091b2:	3307      	adds	r3, #7
 80091b4:	f023 0307 	bic.w	r3, r3, #7
 80091b8:	3308      	adds	r3, #8
 80091ba:	9303      	str	r3, [sp, #12]
 80091bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091be:	443b      	add	r3, r7
 80091c0:	9309      	str	r3, [sp, #36]	; 0x24
 80091c2:	e767      	b.n	8009094 <_vfiprintf_r+0x94>
 80091c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80091c8:	460c      	mov	r4, r1
 80091ca:	2001      	movs	r0, #1
 80091cc:	e7a5      	b.n	800911a <_vfiprintf_r+0x11a>
 80091ce:	2300      	movs	r3, #0
 80091d0:	3401      	adds	r4, #1
 80091d2:	9305      	str	r3, [sp, #20]
 80091d4:	4619      	mov	r1, r3
 80091d6:	f04f 0c0a 	mov.w	ip, #10
 80091da:	4620      	mov	r0, r4
 80091dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091e0:	3a30      	subs	r2, #48	; 0x30
 80091e2:	2a09      	cmp	r2, #9
 80091e4:	d903      	bls.n	80091ee <_vfiprintf_r+0x1ee>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0c5      	beq.n	8009176 <_vfiprintf_r+0x176>
 80091ea:	9105      	str	r1, [sp, #20]
 80091ec:	e7c3      	b.n	8009176 <_vfiprintf_r+0x176>
 80091ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80091f2:	4604      	mov	r4, r0
 80091f4:	2301      	movs	r3, #1
 80091f6:	e7f0      	b.n	80091da <_vfiprintf_r+0x1da>
 80091f8:	ab03      	add	r3, sp, #12
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	462a      	mov	r2, r5
 80091fe:	4b16      	ldr	r3, [pc, #88]	; (8009258 <_vfiprintf_r+0x258>)
 8009200:	a904      	add	r1, sp, #16
 8009202:	4630      	mov	r0, r6
 8009204:	f7fd fa4c 	bl	80066a0 <_printf_float>
 8009208:	4607      	mov	r7, r0
 800920a:	1c78      	adds	r0, r7, #1
 800920c:	d1d6      	bne.n	80091bc <_vfiprintf_r+0x1bc>
 800920e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009210:	07d9      	lsls	r1, r3, #31
 8009212:	d405      	bmi.n	8009220 <_vfiprintf_r+0x220>
 8009214:	89ab      	ldrh	r3, [r5, #12]
 8009216:	059a      	lsls	r2, r3, #22
 8009218:	d402      	bmi.n	8009220 <_vfiprintf_r+0x220>
 800921a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800921c:	f7ff f998 	bl	8008550 <__retarget_lock_release_recursive>
 8009220:	89ab      	ldrh	r3, [r5, #12]
 8009222:	065b      	lsls	r3, r3, #25
 8009224:	f53f af12 	bmi.w	800904c <_vfiprintf_r+0x4c>
 8009228:	9809      	ldr	r0, [sp, #36]	; 0x24
 800922a:	e711      	b.n	8009050 <_vfiprintf_r+0x50>
 800922c:	ab03      	add	r3, sp, #12
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	462a      	mov	r2, r5
 8009232:	4b09      	ldr	r3, [pc, #36]	; (8009258 <_vfiprintf_r+0x258>)
 8009234:	a904      	add	r1, sp, #16
 8009236:	4630      	mov	r0, r6
 8009238:	f7fd fcd6 	bl	8006be8 <_printf_i>
 800923c:	e7e4      	b.n	8009208 <_vfiprintf_r+0x208>
 800923e:	bf00      	nop
 8009240:	0800b0c8 	.word	0x0800b0c8
 8009244:	0800b0e8 	.word	0x0800b0e8
 8009248:	0800b0a8 	.word	0x0800b0a8
 800924c:	0800b094 	.word	0x0800b094
 8009250:	0800b09e 	.word	0x0800b09e
 8009254:	080066a1 	.word	0x080066a1
 8009258:	08008fdb 	.word	0x08008fdb
 800925c:	0800b09a 	.word	0x0800b09a

08009260 <siscanf>:
 8009260:	b40e      	push	{r1, r2, r3}
 8009262:	b510      	push	{r4, lr}
 8009264:	b09f      	sub	sp, #124	; 0x7c
 8009266:	ac21      	add	r4, sp, #132	; 0x84
 8009268:	f44f 7101 	mov.w	r1, #516	; 0x204
 800926c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009270:	9201      	str	r2, [sp, #4]
 8009272:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009276:	9004      	str	r0, [sp, #16]
 8009278:	9008      	str	r0, [sp, #32]
 800927a:	f7f6 ffd3 	bl	8000224 <strlen>
 800927e:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <siscanf+0x50>)
 8009280:	9005      	str	r0, [sp, #20]
 8009282:	9009      	str	r0, [sp, #36]	; 0x24
 8009284:	930d      	str	r3, [sp, #52]	; 0x34
 8009286:	480b      	ldr	r0, [pc, #44]	; (80092b4 <siscanf+0x54>)
 8009288:	9a01      	ldr	r2, [sp, #4]
 800928a:	6800      	ldr	r0, [r0, #0]
 800928c:	9403      	str	r4, [sp, #12]
 800928e:	2300      	movs	r3, #0
 8009290:	9311      	str	r3, [sp, #68]	; 0x44
 8009292:	9316      	str	r3, [sp, #88]	; 0x58
 8009294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009298:	f8ad 301e 	strh.w	r3, [sp, #30]
 800929c:	a904      	add	r1, sp, #16
 800929e:	4623      	mov	r3, r4
 80092a0:	f000 fbdc 	bl	8009a5c <__ssvfiscanf_r>
 80092a4:	b01f      	add	sp, #124	; 0x7c
 80092a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092aa:	b003      	add	sp, #12
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	080092db 	.word	0x080092db
 80092b4:	20000014 	.word	0x20000014

080092b8 <__sread>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	460c      	mov	r4, r1
 80092bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c0:	f000 fe90 	bl	8009fe4 <_read_r>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	bfab      	itete	ge
 80092c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092ca:	89a3      	ldrhlt	r3, [r4, #12]
 80092cc:	181b      	addge	r3, r3, r0
 80092ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092d2:	bfac      	ite	ge
 80092d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80092d6:	81a3      	strhlt	r3, [r4, #12]
 80092d8:	bd10      	pop	{r4, pc}

080092da <__seofread>:
 80092da:	2000      	movs	r0, #0
 80092dc:	4770      	bx	lr

080092de <__swrite>:
 80092de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e2:	461f      	mov	r7, r3
 80092e4:	898b      	ldrh	r3, [r1, #12]
 80092e6:	05db      	lsls	r3, r3, #23
 80092e8:	4605      	mov	r5, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	4616      	mov	r6, r2
 80092ee:	d505      	bpl.n	80092fc <__swrite+0x1e>
 80092f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f4:	2302      	movs	r3, #2
 80092f6:	2200      	movs	r2, #0
 80092f8:	f000 fad8 	bl	80098ac <_lseek_r>
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	4632      	mov	r2, r6
 800930a:	463b      	mov	r3, r7
 800930c:	4628      	mov	r0, r5
 800930e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009312:	f000 b877 	b.w	8009404 <_write_r>

08009316 <__sseek>:
 8009316:	b510      	push	{r4, lr}
 8009318:	460c      	mov	r4, r1
 800931a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931e:	f000 fac5 	bl	80098ac <_lseek_r>
 8009322:	1c43      	adds	r3, r0, #1
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	bf15      	itete	ne
 8009328:	6560      	strne	r0, [r4, #84]	; 0x54
 800932a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800932e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009332:	81a3      	strheq	r3, [r4, #12]
 8009334:	bf18      	it	ne
 8009336:	81a3      	strhne	r3, [r4, #12]
 8009338:	bd10      	pop	{r4, pc}

0800933a <__sclose>:
 800933a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933e:	f000 b8e1 	b.w	8009504 <_close_r>
	...

08009344 <__swbuf_r>:
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009346:	460e      	mov	r6, r1
 8009348:	4614      	mov	r4, r2
 800934a:	4605      	mov	r5, r0
 800934c:	b118      	cbz	r0, 8009356 <__swbuf_r+0x12>
 800934e:	6983      	ldr	r3, [r0, #24]
 8009350:	b90b      	cbnz	r3, 8009356 <__swbuf_r+0x12>
 8009352:	f000 fa0d 	bl	8009770 <__sinit>
 8009356:	4b21      	ldr	r3, [pc, #132]	; (80093dc <__swbuf_r+0x98>)
 8009358:	429c      	cmp	r4, r3
 800935a:	d12b      	bne.n	80093b4 <__swbuf_r+0x70>
 800935c:	686c      	ldr	r4, [r5, #4]
 800935e:	69a3      	ldr	r3, [r4, #24]
 8009360:	60a3      	str	r3, [r4, #8]
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	071a      	lsls	r2, r3, #28
 8009366:	d52f      	bpl.n	80093c8 <__swbuf_r+0x84>
 8009368:	6923      	ldr	r3, [r4, #16]
 800936a:	b36b      	cbz	r3, 80093c8 <__swbuf_r+0x84>
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	6820      	ldr	r0, [r4, #0]
 8009370:	1ac0      	subs	r0, r0, r3
 8009372:	6963      	ldr	r3, [r4, #20]
 8009374:	b2f6      	uxtb	r6, r6
 8009376:	4283      	cmp	r3, r0
 8009378:	4637      	mov	r7, r6
 800937a:	dc04      	bgt.n	8009386 <__swbuf_r+0x42>
 800937c:	4621      	mov	r1, r4
 800937e:	4628      	mov	r0, r5
 8009380:	f000 f962 	bl	8009648 <_fflush_r>
 8009384:	bb30      	cbnz	r0, 80093d4 <__swbuf_r+0x90>
 8009386:	68a3      	ldr	r3, [r4, #8]
 8009388:	3b01      	subs	r3, #1
 800938a:	60a3      	str	r3, [r4, #8]
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	6022      	str	r2, [r4, #0]
 8009392:	701e      	strb	r6, [r3, #0]
 8009394:	6963      	ldr	r3, [r4, #20]
 8009396:	3001      	adds	r0, #1
 8009398:	4283      	cmp	r3, r0
 800939a:	d004      	beq.n	80093a6 <__swbuf_r+0x62>
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	07db      	lsls	r3, r3, #31
 80093a0:	d506      	bpl.n	80093b0 <__swbuf_r+0x6c>
 80093a2:	2e0a      	cmp	r6, #10
 80093a4:	d104      	bne.n	80093b0 <__swbuf_r+0x6c>
 80093a6:	4621      	mov	r1, r4
 80093a8:	4628      	mov	r0, r5
 80093aa:	f000 f94d 	bl	8009648 <_fflush_r>
 80093ae:	b988      	cbnz	r0, 80093d4 <__swbuf_r+0x90>
 80093b0:	4638      	mov	r0, r7
 80093b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093b4:	4b0a      	ldr	r3, [pc, #40]	; (80093e0 <__swbuf_r+0x9c>)
 80093b6:	429c      	cmp	r4, r3
 80093b8:	d101      	bne.n	80093be <__swbuf_r+0x7a>
 80093ba:	68ac      	ldr	r4, [r5, #8]
 80093bc:	e7cf      	b.n	800935e <__swbuf_r+0x1a>
 80093be:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <__swbuf_r+0xa0>)
 80093c0:	429c      	cmp	r4, r3
 80093c2:	bf08      	it	eq
 80093c4:	68ec      	ldreq	r4, [r5, #12]
 80093c6:	e7ca      	b.n	800935e <__swbuf_r+0x1a>
 80093c8:	4621      	mov	r1, r4
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 f82c 	bl	8009428 <__swsetup_r>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d0cb      	beq.n	800936c <__swbuf_r+0x28>
 80093d4:	f04f 37ff 	mov.w	r7, #4294967295
 80093d8:	e7ea      	b.n	80093b0 <__swbuf_r+0x6c>
 80093da:	bf00      	nop
 80093dc:	0800b0c8 	.word	0x0800b0c8
 80093e0:	0800b0e8 	.word	0x0800b0e8
 80093e4:	0800b0a8 	.word	0x0800b0a8

080093e8 <__ascii_wctomb>:
 80093e8:	b149      	cbz	r1, 80093fe <__ascii_wctomb+0x16>
 80093ea:	2aff      	cmp	r2, #255	; 0xff
 80093ec:	bf85      	ittet	hi
 80093ee:	238a      	movhi	r3, #138	; 0x8a
 80093f0:	6003      	strhi	r3, [r0, #0]
 80093f2:	700a      	strbls	r2, [r1, #0]
 80093f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80093f8:	bf98      	it	ls
 80093fa:	2001      	movls	r0, #1
 80093fc:	4770      	bx	lr
 80093fe:	4608      	mov	r0, r1
 8009400:	4770      	bx	lr
	...

08009404 <_write_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4d07      	ldr	r5, [pc, #28]	; (8009424 <_write_r+0x20>)
 8009408:	4604      	mov	r4, r0
 800940a:	4608      	mov	r0, r1
 800940c:	4611      	mov	r1, r2
 800940e:	2200      	movs	r2, #0
 8009410:	602a      	str	r2, [r5, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	f7f8 f999 	bl	800174a <_write>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_write_r+0x1e>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_write_r+0x1e>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	2000068c 	.word	0x2000068c

08009428 <__swsetup_r>:
 8009428:	4b32      	ldr	r3, [pc, #200]	; (80094f4 <__swsetup_r+0xcc>)
 800942a:	b570      	push	{r4, r5, r6, lr}
 800942c:	681d      	ldr	r5, [r3, #0]
 800942e:	4606      	mov	r6, r0
 8009430:	460c      	mov	r4, r1
 8009432:	b125      	cbz	r5, 800943e <__swsetup_r+0x16>
 8009434:	69ab      	ldr	r3, [r5, #24]
 8009436:	b913      	cbnz	r3, 800943e <__swsetup_r+0x16>
 8009438:	4628      	mov	r0, r5
 800943a:	f000 f999 	bl	8009770 <__sinit>
 800943e:	4b2e      	ldr	r3, [pc, #184]	; (80094f8 <__swsetup_r+0xd0>)
 8009440:	429c      	cmp	r4, r3
 8009442:	d10f      	bne.n	8009464 <__swsetup_r+0x3c>
 8009444:	686c      	ldr	r4, [r5, #4]
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800944c:	0719      	lsls	r1, r3, #28
 800944e:	d42c      	bmi.n	80094aa <__swsetup_r+0x82>
 8009450:	06dd      	lsls	r5, r3, #27
 8009452:	d411      	bmi.n	8009478 <__swsetup_r+0x50>
 8009454:	2309      	movs	r3, #9
 8009456:	6033      	str	r3, [r6, #0]
 8009458:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800945c:	81a3      	strh	r3, [r4, #12]
 800945e:	f04f 30ff 	mov.w	r0, #4294967295
 8009462:	e03e      	b.n	80094e2 <__swsetup_r+0xba>
 8009464:	4b25      	ldr	r3, [pc, #148]	; (80094fc <__swsetup_r+0xd4>)
 8009466:	429c      	cmp	r4, r3
 8009468:	d101      	bne.n	800946e <__swsetup_r+0x46>
 800946a:	68ac      	ldr	r4, [r5, #8]
 800946c:	e7eb      	b.n	8009446 <__swsetup_r+0x1e>
 800946e:	4b24      	ldr	r3, [pc, #144]	; (8009500 <__swsetup_r+0xd8>)
 8009470:	429c      	cmp	r4, r3
 8009472:	bf08      	it	eq
 8009474:	68ec      	ldreq	r4, [r5, #12]
 8009476:	e7e6      	b.n	8009446 <__swsetup_r+0x1e>
 8009478:	0758      	lsls	r0, r3, #29
 800947a:	d512      	bpl.n	80094a2 <__swsetup_r+0x7a>
 800947c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800947e:	b141      	cbz	r1, 8009492 <__swsetup_r+0x6a>
 8009480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009484:	4299      	cmp	r1, r3
 8009486:	d002      	beq.n	800948e <__swsetup_r+0x66>
 8009488:	4630      	mov	r0, r6
 800948a:	f7fc ffbf 	bl	800640c <_free_r>
 800948e:	2300      	movs	r3, #0
 8009490:	6363      	str	r3, [r4, #52]	; 0x34
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009498:	81a3      	strh	r3, [r4, #12]
 800949a:	2300      	movs	r3, #0
 800949c:	6063      	str	r3, [r4, #4]
 800949e:	6923      	ldr	r3, [r4, #16]
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	f043 0308 	orr.w	r3, r3, #8
 80094a8:	81a3      	strh	r3, [r4, #12]
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	b94b      	cbnz	r3, 80094c2 <__swsetup_r+0x9a>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094b8:	d003      	beq.n	80094c2 <__swsetup_r+0x9a>
 80094ba:	4621      	mov	r1, r4
 80094bc:	4630      	mov	r0, r6
 80094be:	f000 fa2b 	bl	8009918 <__smakebuf_r>
 80094c2:	89a0      	ldrh	r0, [r4, #12]
 80094c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094c8:	f010 0301 	ands.w	r3, r0, #1
 80094cc:	d00a      	beq.n	80094e4 <__swsetup_r+0xbc>
 80094ce:	2300      	movs	r3, #0
 80094d0:	60a3      	str	r3, [r4, #8]
 80094d2:	6963      	ldr	r3, [r4, #20]
 80094d4:	425b      	negs	r3, r3
 80094d6:	61a3      	str	r3, [r4, #24]
 80094d8:	6923      	ldr	r3, [r4, #16]
 80094da:	b943      	cbnz	r3, 80094ee <__swsetup_r+0xc6>
 80094dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80094e0:	d1ba      	bne.n	8009458 <__swsetup_r+0x30>
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	0781      	lsls	r1, r0, #30
 80094e6:	bf58      	it	pl
 80094e8:	6963      	ldrpl	r3, [r4, #20]
 80094ea:	60a3      	str	r3, [r4, #8]
 80094ec:	e7f4      	b.n	80094d8 <__swsetup_r+0xb0>
 80094ee:	2000      	movs	r0, #0
 80094f0:	e7f7      	b.n	80094e2 <__swsetup_r+0xba>
 80094f2:	bf00      	nop
 80094f4:	20000014 	.word	0x20000014
 80094f8:	0800b0c8 	.word	0x0800b0c8
 80094fc:	0800b0e8 	.word	0x0800b0e8
 8009500:	0800b0a8 	.word	0x0800b0a8

08009504 <_close_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d06      	ldr	r5, [pc, #24]	; (8009520 <_close_r+0x1c>)
 8009508:	2300      	movs	r3, #0
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	602b      	str	r3, [r5, #0]
 8009510:	f7f8 f937 	bl	8001782 <_close>
 8009514:	1c43      	adds	r3, r0, #1
 8009516:	d102      	bne.n	800951e <_close_r+0x1a>
 8009518:	682b      	ldr	r3, [r5, #0]
 800951a:	b103      	cbz	r3, 800951e <_close_r+0x1a>
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	bd38      	pop	{r3, r4, r5, pc}
 8009520:	2000068c 	.word	0x2000068c

08009524 <__env_lock>:
 8009524:	4801      	ldr	r0, [pc, #4]	; (800952c <__env_lock+0x8>)
 8009526:	f7ff b811 	b.w	800854c <__retarget_lock_acquire_recursive>
 800952a:	bf00      	nop
 800952c:	20000682 	.word	0x20000682

08009530 <__env_unlock>:
 8009530:	4801      	ldr	r0, [pc, #4]	; (8009538 <__env_unlock+0x8>)
 8009532:	f7ff b80d 	b.w	8008550 <__retarget_lock_release_recursive>
 8009536:	bf00      	nop
 8009538:	20000682 	.word	0x20000682

0800953c <__sflush_r>:
 800953c:	898a      	ldrh	r2, [r1, #12]
 800953e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009542:	4605      	mov	r5, r0
 8009544:	0710      	lsls	r0, r2, #28
 8009546:	460c      	mov	r4, r1
 8009548:	d458      	bmi.n	80095fc <__sflush_r+0xc0>
 800954a:	684b      	ldr	r3, [r1, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	dc05      	bgt.n	800955c <__sflush_r+0x20>
 8009550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009552:	2b00      	cmp	r3, #0
 8009554:	dc02      	bgt.n	800955c <__sflush_r+0x20>
 8009556:	2000      	movs	r0, #0
 8009558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800955c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800955e:	2e00      	cmp	r6, #0
 8009560:	d0f9      	beq.n	8009556 <__sflush_r+0x1a>
 8009562:	2300      	movs	r3, #0
 8009564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009568:	682f      	ldr	r7, [r5, #0]
 800956a:	602b      	str	r3, [r5, #0]
 800956c:	d032      	beq.n	80095d4 <__sflush_r+0x98>
 800956e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	075a      	lsls	r2, r3, #29
 8009574:	d505      	bpl.n	8009582 <__sflush_r+0x46>
 8009576:	6863      	ldr	r3, [r4, #4]
 8009578:	1ac0      	subs	r0, r0, r3
 800957a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800957c:	b10b      	cbz	r3, 8009582 <__sflush_r+0x46>
 800957e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009580:	1ac0      	subs	r0, r0, r3
 8009582:	2300      	movs	r3, #0
 8009584:	4602      	mov	r2, r0
 8009586:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009588:	6a21      	ldr	r1, [r4, #32]
 800958a:	4628      	mov	r0, r5
 800958c:	47b0      	blx	r6
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	d106      	bne.n	80095a2 <__sflush_r+0x66>
 8009594:	6829      	ldr	r1, [r5, #0]
 8009596:	291d      	cmp	r1, #29
 8009598:	d82c      	bhi.n	80095f4 <__sflush_r+0xb8>
 800959a:	4a2a      	ldr	r2, [pc, #168]	; (8009644 <__sflush_r+0x108>)
 800959c:	40ca      	lsrs	r2, r1
 800959e:	07d6      	lsls	r6, r2, #31
 80095a0:	d528      	bpl.n	80095f4 <__sflush_r+0xb8>
 80095a2:	2200      	movs	r2, #0
 80095a4:	6062      	str	r2, [r4, #4]
 80095a6:	04d9      	lsls	r1, r3, #19
 80095a8:	6922      	ldr	r2, [r4, #16]
 80095aa:	6022      	str	r2, [r4, #0]
 80095ac:	d504      	bpl.n	80095b8 <__sflush_r+0x7c>
 80095ae:	1c42      	adds	r2, r0, #1
 80095b0:	d101      	bne.n	80095b6 <__sflush_r+0x7a>
 80095b2:	682b      	ldr	r3, [r5, #0]
 80095b4:	b903      	cbnz	r3, 80095b8 <__sflush_r+0x7c>
 80095b6:	6560      	str	r0, [r4, #84]	; 0x54
 80095b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095ba:	602f      	str	r7, [r5, #0]
 80095bc:	2900      	cmp	r1, #0
 80095be:	d0ca      	beq.n	8009556 <__sflush_r+0x1a>
 80095c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095c4:	4299      	cmp	r1, r3
 80095c6:	d002      	beq.n	80095ce <__sflush_r+0x92>
 80095c8:	4628      	mov	r0, r5
 80095ca:	f7fc ff1f 	bl	800640c <_free_r>
 80095ce:	2000      	movs	r0, #0
 80095d0:	6360      	str	r0, [r4, #52]	; 0x34
 80095d2:	e7c1      	b.n	8009558 <__sflush_r+0x1c>
 80095d4:	6a21      	ldr	r1, [r4, #32]
 80095d6:	2301      	movs	r3, #1
 80095d8:	4628      	mov	r0, r5
 80095da:	47b0      	blx	r6
 80095dc:	1c41      	adds	r1, r0, #1
 80095de:	d1c7      	bne.n	8009570 <__sflush_r+0x34>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d0c4      	beq.n	8009570 <__sflush_r+0x34>
 80095e6:	2b1d      	cmp	r3, #29
 80095e8:	d001      	beq.n	80095ee <__sflush_r+0xb2>
 80095ea:	2b16      	cmp	r3, #22
 80095ec:	d101      	bne.n	80095f2 <__sflush_r+0xb6>
 80095ee:	602f      	str	r7, [r5, #0]
 80095f0:	e7b1      	b.n	8009556 <__sflush_r+0x1a>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095f8:	81a3      	strh	r3, [r4, #12]
 80095fa:	e7ad      	b.n	8009558 <__sflush_r+0x1c>
 80095fc:	690f      	ldr	r7, [r1, #16]
 80095fe:	2f00      	cmp	r7, #0
 8009600:	d0a9      	beq.n	8009556 <__sflush_r+0x1a>
 8009602:	0793      	lsls	r3, r2, #30
 8009604:	680e      	ldr	r6, [r1, #0]
 8009606:	bf08      	it	eq
 8009608:	694b      	ldreq	r3, [r1, #20]
 800960a:	600f      	str	r7, [r1, #0]
 800960c:	bf18      	it	ne
 800960e:	2300      	movne	r3, #0
 8009610:	eba6 0807 	sub.w	r8, r6, r7
 8009614:	608b      	str	r3, [r1, #8]
 8009616:	f1b8 0f00 	cmp.w	r8, #0
 800961a:	dd9c      	ble.n	8009556 <__sflush_r+0x1a>
 800961c:	6a21      	ldr	r1, [r4, #32]
 800961e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009620:	4643      	mov	r3, r8
 8009622:	463a      	mov	r2, r7
 8009624:	4628      	mov	r0, r5
 8009626:	47b0      	blx	r6
 8009628:	2800      	cmp	r0, #0
 800962a:	dc06      	bgt.n	800963a <__sflush_r+0xfe>
 800962c:	89a3      	ldrh	r3, [r4, #12]
 800962e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009632:	81a3      	strh	r3, [r4, #12]
 8009634:	f04f 30ff 	mov.w	r0, #4294967295
 8009638:	e78e      	b.n	8009558 <__sflush_r+0x1c>
 800963a:	4407      	add	r7, r0
 800963c:	eba8 0800 	sub.w	r8, r8, r0
 8009640:	e7e9      	b.n	8009616 <__sflush_r+0xda>
 8009642:	bf00      	nop
 8009644:	20400001 	.word	0x20400001

08009648 <_fflush_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	690b      	ldr	r3, [r1, #16]
 800964c:	4605      	mov	r5, r0
 800964e:	460c      	mov	r4, r1
 8009650:	b913      	cbnz	r3, 8009658 <_fflush_r+0x10>
 8009652:	2500      	movs	r5, #0
 8009654:	4628      	mov	r0, r5
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	b118      	cbz	r0, 8009662 <_fflush_r+0x1a>
 800965a:	6983      	ldr	r3, [r0, #24]
 800965c:	b90b      	cbnz	r3, 8009662 <_fflush_r+0x1a>
 800965e:	f000 f887 	bl	8009770 <__sinit>
 8009662:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <_fflush_r+0x6c>)
 8009664:	429c      	cmp	r4, r3
 8009666:	d11b      	bne.n	80096a0 <_fflush_r+0x58>
 8009668:	686c      	ldr	r4, [r5, #4]
 800966a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0ef      	beq.n	8009652 <_fflush_r+0xa>
 8009672:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009674:	07d0      	lsls	r0, r2, #31
 8009676:	d404      	bmi.n	8009682 <_fflush_r+0x3a>
 8009678:	0599      	lsls	r1, r3, #22
 800967a:	d402      	bmi.n	8009682 <_fflush_r+0x3a>
 800967c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800967e:	f7fe ff65 	bl	800854c <__retarget_lock_acquire_recursive>
 8009682:	4628      	mov	r0, r5
 8009684:	4621      	mov	r1, r4
 8009686:	f7ff ff59 	bl	800953c <__sflush_r>
 800968a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800968c:	07da      	lsls	r2, r3, #31
 800968e:	4605      	mov	r5, r0
 8009690:	d4e0      	bmi.n	8009654 <_fflush_r+0xc>
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	059b      	lsls	r3, r3, #22
 8009696:	d4dd      	bmi.n	8009654 <_fflush_r+0xc>
 8009698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800969a:	f7fe ff59 	bl	8008550 <__retarget_lock_release_recursive>
 800969e:	e7d9      	b.n	8009654 <_fflush_r+0xc>
 80096a0:	4b05      	ldr	r3, [pc, #20]	; (80096b8 <_fflush_r+0x70>)
 80096a2:	429c      	cmp	r4, r3
 80096a4:	d101      	bne.n	80096aa <_fflush_r+0x62>
 80096a6:	68ac      	ldr	r4, [r5, #8]
 80096a8:	e7df      	b.n	800966a <_fflush_r+0x22>
 80096aa:	4b04      	ldr	r3, [pc, #16]	; (80096bc <_fflush_r+0x74>)
 80096ac:	429c      	cmp	r4, r3
 80096ae:	bf08      	it	eq
 80096b0:	68ec      	ldreq	r4, [r5, #12]
 80096b2:	e7da      	b.n	800966a <_fflush_r+0x22>
 80096b4:	0800b0c8 	.word	0x0800b0c8
 80096b8:	0800b0e8 	.word	0x0800b0e8
 80096bc:	0800b0a8 	.word	0x0800b0a8

080096c0 <std>:
 80096c0:	2300      	movs	r3, #0
 80096c2:	b510      	push	{r4, lr}
 80096c4:	4604      	mov	r4, r0
 80096c6:	e9c0 3300 	strd	r3, r3, [r0]
 80096ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096ce:	6083      	str	r3, [r0, #8]
 80096d0:	8181      	strh	r1, [r0, #12]
 80096d2:	6643      	str	r3, [r0, #100]	; 0x64
 80096d4:	81c2      	strh	r2, [r0, #14]
 80096d6:	6183      	str	r3, [r0, #24]
 80096d8:	4619      	mov	r1, r3
 80096da:	2208      	movs	r2, #8
 80096dc:	305c      	adds	r0, #92	; 0x5c
 80096de:	f7fc fc0f 	bl	8005f00 <memset>
 80096e2:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <std+0x38>)
 80096e4:	6263      	str	r3, [r4, #36]	; 0x24
 80096e6:	4b05      	ldr	r3, [pc, #20]	; (80096fc <std+0x3c>)
 80096e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80096ea:	4b05      	ldr	r3, [pc, #20]	; (8009700 <std+0x40>)
 80096ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096ee:	4b05      	ldr	r3, [pc, #20]	; (8009704 <std+0x44>)
 80096f0:	6224      	str	r4, [r4, #32]
 80096f2:	6323      	str	r3, [r4, #48]	; 0x30
 80096f4:	bd10      	pop	{r4, pc}
 80096f6:	bf00      	nop
 80096f8:	080092b9 	.word	0x080092b9
 80096fc:	080092df 	.word	0x080092df
 8009700:	08009317 	.word	0x08009317
 8009704:	0800933b 	.word	0x0800933b

08009708 <_cleanup_r>:
 8009708:	4901      	ldr	r1, [pc, #4]	; (8009710 <_cleanup_r+0x8>)
 800970a:	f000 b8af 	b.w	800986c <_fwalk_reent>
 800970e:	bf00      	nop
 8009710:	08009649 	.word	0x08009649

08009714 <__sfmoreglue>:
 8009714:	b570      	push	{r4, r5, r6, lr}
 8009716:	1e4a      	subs	r2, r1, #1
 8009718:	2568      	movs	r5, #104	; 0x68
 800971a:	4355      	muls	r5, r2
 800971c:	460e      	mov	r6, r1
 800971e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009722:	f7fc fec3 	bl	80064ac <_malloc_r>
 8009726:	4604      	mov	r4, r0
 8009728:	b140      	cbz	r0, 800973c <__sfmoreglue+0x28>
 800972a:	2100      	movs	r1, #0
 800972c:	e9c0 1600 	strd	r1, r6, [r0]
 8009730:	300c      	adds	r0, #12
 8009732:	60a0      	str	r0, [r4, #8]
 8009734:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009738:	f7fc fbe2 	bl	8005f00 <memset>
 800973c:	4620      	mov	r0, r4
 800973e:	bd70      	pop	{r4, r5, r6, pc}

08009740 <__sfp_lock_acquire>:
 8009740:	4801      	ldr	r0, [pc, #4]	; (8009748 <__sfp_lock_acquire+0x8>)
 8009742:	f7fe bf03 	b.w	800854c <__retarget_lock_acquire_recursive>
 8009746:	bf00      	nop
 8009748:	20000688 	.word	0x20000688

0800974c <__sfp_lock_release>:
 800974c:	4801      	ldr	r0, [pc, #4]	; (8009754 <__sfp_lock_release+0x8>)
 800974e:	f7fe beff 	b.w	8008550 <__retarget_lock_release_recursive>
 8009752:	bf00      	nop
 8009754:	20000688 	.word	0x20000688

08009758 <__sinit_lock_acquire>:
 8009758:	4801      	ldr	r0, [pc, #4]	; (8009760 <__sinit_lock_acquire+0x8>)
 800975a:	f7fe bef7 	b.w	800854c <__retarget_lock_acquire_recursive>
 800975e:	bf00      	nop
 8009760:	20000683 	.word	0x20000683

08009764 <__sinit_lock_release>:
 8009764:	4801      	ldr	r0, [pc, #4]	; (800976c <__sinit_lock_release+0x8>)
 8009766:	f7fe bef3 	b.w	8008550 <__retarget_lock_release_recursive>
 800976a:	bf00      	nop
 800976c:	20000683 	.word	0x20000683

08009770 <__sinit>:
 8009770:	b510      	push	{r4, lr}
 8009772:	4604      	mov	r4, r0
 8009774:	f7ff fff0 	bl	8009758 <__sinit_lock_acquire>
 8009778:	69a3      	ldr	r3, [r4, #24]
 800977a:	b11b      	cbz	r3, 8009784 <__sinit+0x14>
 800977c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009780:	f7ff bff0 	b.w	8009764 <__sinit_lock_release>
 8009784:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009788:	6523      	str	r3, [r4, #80]	; 0x50
 800978a:	4b13      	ldr	r3, [pc, #76]	; (80097d8 <__sinit+0x68>)
 800978c:	4a13      	ldr	r2, [pc, #76]	; (80097dc <__sinit+0x6c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	62a2      	str	r2, [r4, #40]	; 0x28
 8009792:	42a3      	cmp	r3, r4
 8009794:	bf04      	itt	eq
 8009796:	2301      	moveq	r3, #1
 8009798:	61a3      	streq	r3, [r4, #24]
 800979a:	4620      	mov	r0, r4
 800979c:	f000 f820 	bl	80097e0 <__sfp>
 80097a0:	6060      	str	r0, [r4, #4]
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 f81c 	bl	80097e0 <__sfp>
 80097a8:	60a0      	str	r0, [r4, #8]
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 f818 	bl	80097e0 <__sfp>
 80097b0:	2200      	movs	r2, #0
 80097b2:	60e0      	str	r0, [r4, #12]
 80097b4:	2104      	movs	r1, #4
 80097b6:	6860      	ldr	r0, [r4, #4]
 80097b8:	f7ff ff82 	bl	80096c0 <std>
 80097bc:	68a0      	ldr	r0, [r4, #8]
 80097be:	2201      	movs	r2, #1
 80097c0:	2109      	movs	r1, #9
 80097c2:	f7ff ff7d 	bl	80096c0 <std>
 80097c6:	68e0      	ldr	r0, [r4, #12]
 80097c8:	2202      	movs	r2, #2
 80097ca:	2112      	movs	r1, #18
 80097cc:	f7ff ff78 	bl	80096c0 <std>
 80097d0:	2301      	movs	r3, #1
 80097d2:	61a3      	str	r3, [r4, #24]
 80097d4:	e7d2      	b.n	800977c <__sinit+0xc>
 80097d6:	bf00      	nop
 80097d8:	0800abc8 	.word	0x0800abc8
 80097dc:	08009709 	.word	0x08009709

080097e0 <__sfp>:
 80097e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e2:	4607      	mov	r7, r0
 80097e4:	f7ff ffac 	bl	8009740 <__sfp_lock_acquire>
 80097e8:	4b1e      	ldr	r3, [pc, #120]	; (8009864 <__sfp+0x84>)
 80097ea:	681e      	ldr	r6, [r3, #0]
 80097ec:	69b3      	ldr	r3, [r6, #24]
 80097ee:	b913      	cbnz	r3, 80097f6 <__sfp+0x16>
 80097f0:	4630      	mov	r0, r6
 80097f2:	f7ff ffbd 	bl	8009770 <__sinit>
 80097f6:	3648      	adds	r6, #72	; 0x48
 80097f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097fc:	3b01      	subs	r3, #1
 80097fe:	d503      	bpl.n	8009808 <__sfp+0x28>
 8009800:	6833      	ldr	r3, [r6, #0]
 8009802:	b30b      	cbz	r3, 8009848 <__sfp+0x68>
 8009804:	6836      	ldr	r6, [r6, #0]
 8009806:	e7f7      	b.n	80097f8 <__sfp+0x18>
 8009808:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800980c:	b9d5      	cbnz	r5, 8009844 <__sfp+0x64>
 800980e:	4b16      	ldr	r3, [pc, #88]	; (8009868 <__sfp+0x88>)
 8009810:	60e3      	str	r3, [r4, #12]
 8009812:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009816:	6665      	str	r5, [r4, #100]	; 0x64
 8009818:	f7fe fe96 	bl	8008548 <__retarget_lock_init_recursive>
 800981c:	f7ff ff96 	bl	800974c <__sfp_lock_release>
 8009820:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009824:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009828:	6025      	str	r5, [r4, #0]
 800982a:	61a5      	str	r5, [r4, #24]
 800982c:	2208      	movs	r2, #8
 800982e:	4629      	mov	r1, r5
 8009830:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009834:	f7fc fb64 	bl	8005f00 <memset>
 8009838:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800983c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009840:	4620      	mov	r0, r4
 8009842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009844:	3468      	adds	r4, #104	; 0x68
 8009846:	e7d9      	b.n	80097fc <__sfp+0x1c>
 8009848:	2104      	movs	r1, #4
 800984a:	4638      	mov	r0, r7
 800984c:	f7ff ff62 	bl	8009714 <__sfmoreglue>
 8009850:	4604      	mov	r4, r0
 8009852:	6030      	str	r0, [r6, #0]
 8009854:	2800      	cmp	r0, #0
 8009856:	d1d5      	bne.n	8009804 <__sfp+0x24>
 8009858:	f7ff ff78 	bl	800974c <__sfp_lock_release>
 800985c:	230c      	movs	r3, #12
 800985e:	603b      	str	r3, [r7, #0]
 8009860:	e7ee      	b.n	8009840 <__sfp+0x60>
 8009862:	bf00      	nop
 8009864:	0800abc8 	.word	0x0800abc8
 8009868:	ffff0001 	.word	0xffff0001

0800986c <_fwalk_reent>:
 800986c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009870:	4606      	mov	r6, r0
 8009872:	4688      	mov	r8, r1
 8009874:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009878:	2700      	movs	r7, #0
 800987a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800987e:	f1b9 0901 	subs.w	r9, r9, #1
 8009882:	d505      	bpl.n	8009890 <_fwalk_reent+0x24>
 8009884:	6824      	ldr	r4, [r4, #0]
 8009886:	2c00      	cmp	r4, #0
 8009888:	d1f7      	bne.n	800987a <_fwalk_reent+0xe>
 800988a:	4638      	mov	r0, r7
 800988c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009890:	89ab      	ldrh	r3, [r5, #12]
 8009892:	2b01      	cmp	r3, #1
 8009894:	d907      	bls.n	80098a6 <_fwalk_reent+0x3a>
 8009896:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800989a:	3301      	adds	r3, #1
 800989c:	d003      	beq.n	80098a6 <_fwalk_reent+0x3a>
 800989e:	4629      	mov	r1, r5
 80098a0:	4630      	mov	r0, r6
 80098a2:	47c0      	blx	r8
 80098a4:	4307      	orrs	r7, r0
 80098a6:	3568      	adds	r5, #104	; 0x68
 80098a8:	e7e9      	b.n	800987e <_fwalk_reent+0x12>
	...

080098ac <_lseek_r>:
 80098ac:	b538      	push	{r3, r4, r5, lr}
 80098ae:	4d07      	ldr	r5, [pc, #28]	; (80098cc <_lseek_r+0x20>)
 80098b0:	4604      	mov	r4, r0
 80098b2:	4608      	mov	r0, r1
 80098b4:	4611      	mov	r1, r2
 80098b6:	2200      	movs	r2, #0
 80098b8:	602a      	str	r2, [r5, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	f7f7 ff88 	bl	80017d0 <_lseek>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	d102      	bne.n	80098ca <_lseek_r+0x1e>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	b103      	cbz	r3, 80098ca <_lseek_r+0x1e>
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	bd38      	pop	{r3, r4, r5, pc}
 80098cc:	2000068c 	.word	0x2000068c

080098d0 <__swhatbuf_r>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	460e      	mov	r6, r1
 80098d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d8:	2900      	cmp	r1, #0
 80098da:	b096      	sub	sp, #88	; 0x58
 80098dc:	4614      	mov	r4, r2
 80098de:	461d      	mov	r5, r3
 80098e0:	da07      	bge.n	80098f2 <__swhatbuf_r+0x22>
 80098e2:	2300      	movs	r3, #0
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	89b3      	ldrh	r3, [r6, #12]
 80098e8:	061a      	lsls	r2, r3, #24
 80098ea:	d410      	bmi.n	800990e <__swhatbuf_r+0x3e>
 80098ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098f0:	e00e      	b.n	8009910 <__swhatbuf_r+0x40>
 80098f2:	466a      	mov	r2, sp
 80098f4:	f000 fbfc 	bl	800a0f0 <_fstat_r>
 80098f8:	2800      	cmp	r0, #0
 80098fa:	dbf2      	blt.n	80098e2 <__swhatbuf_r+0x12>
 80098fc:	9a01      	ldr	r2, [sp, #4]
 80098fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009902:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009906:	425a      	negs	r2, r3
 8009908:	415a      	adcs	r2, r3
 800990a:	602a      	str	r2, [r5, #0]
 800990c:	e7ee      	b.n	80098ec <__swhatbuf_r+0x1c>
 800990e:	2340      	movs	r3, #64	; 0x40
 8009910:	2000      	movs	r0, #0
 8009912:	6023      	str	r3, [r4, #0]
 8009914:	b016      	add	sp, #88	; 0x58
 8009916:	bd70      	pop	{r4, r5, r6, pc}

08009918 <__smakebuf_r>:
 8009918:	898b      	ldrh	r3, [r1, #12]
 800991a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800991c:	079d      	lsls	r5, r3, #30
 800991e:	4606      	mov	r6, r0
 8009920:	460c      	mov	r4, r1
 8009922:	d507      	bpl.n	8009934 <__smakebuf_r+0x1c>
 8009924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	2301      	movs	r3, #1
 800992e:	6163      	str	r3, [r4, #20]
 8009930:	b002      	add	sp, #8
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	ab01      	add	r3, sp, #4
 8009936:	466a      	mov	r2, sp
 8009938:	f7ff ffca 	bl	80098d0 <__swhatbuf_r>
 800993c:	9900      	ldr	r1, [sp, #0]
 800993e:	4605      	mov	r5, r0
 8009940:	4630      	mov	r0, r6
 8009942:	f7fc fdb3 	bl	80064ac <_malloc_r>
 8009946:	b948      	cbnz	r0, 800995c <__smakebuf_r+0x44>
 8009948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994c:	059a      	lsls	r2, r3, #22
 800994e:	d4ef      	bmi.n	8009930 <__smakebuf_r+0x18>
 8009950:	f023 0303 	bic.w	r3, r3, #3
 8009954:	f043 0302 	orr.w	r3, r3, #2
 8009958:	81a3      	strh	r3, [r4, #12]
 800995a:	e7e3      	b.n	8009924 <__smakebuf_r+0xc>
 800995c:	4b0d      	ldr	r3, [pc, #52]	; (8009994 <__smakebuf_r+0x7c>)
 800995e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009960:	89a3      	ldrh	r3, [r4, #12]
 8009962:	6020      	str	r0, [r4, #0]
 8009964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009968:	81a3      	strh	r3, [r4, #12]
 800996a:	9b00      	ldr	r3, [sp, #0]
 800996c:	6163      	str	r3, [r4, #20]
 800996e:	9b01      	ldr	r3, [sp, #4]
 8009970:	6120      	str	r0, [r4, #16]
 8009972:	b15b      	cbz	r3, 800998c <__smakebuf_r+0x74>
 8009974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009978:	4630      	mov	r0, r6
 800997a:	f000 fbcb 	bl	800a114 <_isatty_r>
 800997e:	b128      	cbz	r0, 800998c <__smakebuf_r+0x74>
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	f023 0303 	bic.w	r3, r3, #3
 8009986:	f043 0301 	orr.w	r3, r3, #1
 800998a:	81a3      	strh	r3, [r4, #12]
 800998c:	89a0      	ldrh	r0, [r4, #12]
 800998e:	4305      	orrs	r5, r0
 8009990:	81a5      	strh	r5, [r4, #12]
 8009992:	e7cd      	b.n	8009930 <__smakebuf_r+0x18>
 8009994:	08009709 	.word	0x08009709

08009998 <_malloc_usable_size_r>:
 8009998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800999c:	1f18      	subs	r0, r3, #4
 800999e:	2b00      	cmp	r3, #0
 80099a0:	bfbc      	itt	lt
 80099a2:	580b      	ldrlt	r3, [r1, r0]
 80099a4:	18c0      	addlt	r0, r0, r3
 80099a6:	4770      	bx	lr

080099a8 <_sungetc_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	1c4b      	adds	r3, r1, #1
 80099ac:	4614      	mov	r4, r2
 80099ae:	d103      	bne.n	80099b8 <_sungetc_r+0x10>
 80099b0:	f04f 35ff 	mov.w	r5, #4294967295
 80099b4:	4628      	mov	r0, r5
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	8993      	ldrh	r3, [r2, #12]
 80099ba:	f023 0320 	bic.w	r3, r3, #32
 80099be:	8193      	strh	r3, [r2, #12]
 80099c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099c2:	6852      	ldr	r2, [r2, #4]
 80099c4:	b2cd      	uxtb	r5, r1
 80099c6:	b18b      	cbz	r3, 80099ec <_sungetc_r+0x44>
 80099c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80099ca:	4293      	cmp	r3, r2
 80099cc:	dd08      	ble.n	80099e0 <_sungetc_r+0x38>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	1e5a      	subs	r2, r3, #1
 80099d2:	6022      	str	r2, [r4, #0]
 80099d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80099d8:	6863      	ldr	r3, [r4, #4]
 80099da:	3301      	adds	r3, #1
 80099dc:	6063      	str	r3, [r4, #4]
 80099de:	e7e9      	b.n	80099b4 <_sungetc_r+0xc>
 80099e0:	4621      	mov	r1, r4
 80099e2:	f000 fb4b 	bl	800a07c <__submore>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d0f1      	beq.n	80099ce <_sungetc_r+0x26>
 80099ea:	e7e1      	b.n	80099b0 <_sungetc_r+0x8>
 80099ec:	6921      	ldr	r1, [r4, #16]
 80099ee:	6823      	ldr	r3, [r4, #0]
 80099f0:	b151      	cbz	r1, 8009a08 <_sungetc_r+0x60>
 80099f2:	4299      	cmp	r1, r3
 80099f4:	d208      	bcs.n	8009a08 <_sungetc_r+0x60>
 80099f6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80099fa:	42a9      	cmp	r1, r5
 80099fc:	d104      	bne.n	8009a08 <_sungetc_r+0x60>
 80099fe:	3b01      	subs	r3, #1
 8009a00:	3201      	adds	r2, #1
 8009a02:	6023      	str	r3, [r4, #0]
 8009a04:	6062      	str	r2, [r4, #4]
 8009a06:	e7d5      	b.n	80099b4 <_sungetc_r+0xc>
 8009a08:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a10:	6363      	str	r3, [r4, #52]	; 0x34
 8009a12:	2303      	movs	r3, #3
 8009a14:	63a3      	str	r3, [r4, #56]	; 0x38
 8009a16:	4623      	mov	r3, r4
 8009a18:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009a1c:	6023      	str	r3, [r4, #0]
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e7dc      	b.n	80099dc <_sungetc_r+0x34>

08009a22 <__ssrefill_r>:
 8009a22:	b510      	push	{r4, lr}
 8009a24:	460c      	mov	r4, r1
 8009a26:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009a28:	b169      	cbz	r1, 8009a46 <__ssrefill_r+0x24>
 8009a2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a2e:	4299      	cmp	r1, r3
 8009a30:	d001      	beq.n	8009a36 <__ssrefill_r+0x14>
 8009a32:	f7fc fceb 	bl	800640c <_free_r>
 8009a36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a38:	6063      	str	r3, [r4, #4]
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	6360      	str	r0, [r4, #52]	; 0x34
 8009a3e:	b113      	cbz	r3, 8009a46 <__ssrefill_r+0x24>
 8009a40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009a42:	6023      	str	r3, [r4, #0]
 8009a44:	bd10      	pop	{r4, pc}
 8009a46:	6923      	ldr	r3, [r4, #16]
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	6063      	str	r3, [r4, #4]
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	f043 0320 	orr.w	r3, r3, #32
 8009a54:	81a3      	strh	r3, [r4, #12]
 8009a56:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5a:	e7f3      	b.n	8009a44 <__ssrefill_r+0x22>

08009a5c <__ssvfiscanf_r>:
 8009a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	460c      	mov	r4, r1
 8009a62:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009a66:	2100      	movs	r1, #0
 8009a68:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009a6c:	49b2      	ldr	r1, [pc, #712]	; (8009d38 <__ssvfiscanf_r+0x2dc>)
 8009a6e:	91a0      	str	r1, [sp, #640]	; 0x280
 8009a70:	f10d 0804 	add.w	r8, sp, #4
 8009a74:	49b1      	ldr	r1, [pc, #708]	; (8009d3c <__ssvfiscanf_r+0x2e0>)
 8009a76:	4fb2      	ldr	r7, [pc, #712]	; (8009d40 <__ssvfiscanf_r+0x2e4>)
 8009a78:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8009d44 <__ssvfiscanf_r+0x2e8>
 8009a7c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009a80:	4606      	mov	r6, r0
 8009a82:	91a1      	str	r1, [sp, #644]	; 0x284
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	f892 a000 	ldrb.w	sl, [r2]
 8009a8a:	f1ba 0f00 	cmp.w	sl, #0
 8009a8e:	f000 8151 	beq.w	8009d34 <__ssvfiscanf_r+0x2d8>
 8009a92:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8009a96:	f013 0308 	ands.w	r3, r3, #8
 8009a9a:	f102 0501 	add.w	r5, r2, #1
 8009a9e:	d019      	beq.n	8009ad4 <__ssvfiscanf_r+0x78>
 8009aa0:	6863      	ldr	r3, [r4, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	dd0f      	ble.n	8009ac6 <__ssvfiscanf_r+0x6a>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	781a      	ldrb	r2, [r3, #0]
 8009aaa:	5cba      	ldrb	r2, [r7, r2]
 8009aac:	0712      	lsls	r2, r2, #28
 8009aae:	d401      	bmi.n	8009ab4 <__ssvfiscanf_r+0x58>
 8009ab0:	462a      	mov	r2, r5
 8009ab2:	e7e8      	b.n	8009a86 <__ssvfiscanf_r+0x2a>
 8009ab4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009ab6:	3201      	adds	r2, #1
 8009ab8:	9245      	str	r2, [sp, #276]	; 0x114
 8009aba:	6862      	ldr	r2, [r4, #4]
 8009abc:	3301      	adds	r3, #1
 8009abe:	3a01      	subs	r2, #1
 8009ac0:	6062      	str	r2, [r4, #4]
 8009ac2:	6023      	str	r3, [r4, #0]
 8009ac4:	e7ec      	b.n	8009aa0 <__ssvfiscanf_r+0x44>
 8009ac6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ac8:	4621      	mov	r1, r4
 8009aca:	4630      	mov	r0, r6
 8009acc:	4798      	blx	r3
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d0e9      	beq.n	8009aa6 <__ssvfiscanf_r+0x4a>
 8009ad2:	e7ed      	b.n	8009ab0 <__ssvfiscanf_r+0x54>
 8009ad4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8009ad8:	f040 8083 	bne.w	8009be2 <__ssvfiscanf_r+0x186>
 8009adc:	9341      	str	r3, [sp, #260]	; 0x104
 8009ade:	9343      	str	r3, [sp, #268]	; 0x10c
 8009ae0:	7853      	ldrb	r3, [r2, #1]
 8009ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8009ae4:	bf02      	ittt	eq
 8009ae6:	2310      	moveq	r3, #16
 8009ae8:	1c95      	addeq	r5, r2, #2
 8009aea:	9341      	streq	r3, [sp, #260]	; 0x104
 8009aec:	220a      	movs	r2, #10
 8009aee:	46ab      	mov	fp, r5
 8009af0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009af4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009af8:	2b09      	cmp	r3, #9
 8009afa:	d91d      	bls.n	8009b38 <__ssvfiscanf_r+0xdc>
 8009afc:	4891      	ldr	r0, [pc, #580]	; (8009d44 <__ssvfiscanf_r+0x2e8>)
 8009afe:	2203      	movs	r2, #3
 8009b00:	f7f6 fb9e 	bl	8000240 <memchr>
 8009b04:	b140      	cbz	r0, 8009b18 <__ssvfiscanf_r+0xbc>
 8009b06:	2301      	movs	r3, #1
 8009b08:	eba0 0009 	sub.w	r0, r0, r9
 8009b0c:	fa03 f000 	lsl.w	r0, r3, r0
 8009b10:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009b12:	4318      	orrs	r0, r3
 8009b14:	9041      	str	r0, [sp, #260]	; 0x104
 8009b16:	465d      	mov	r5, fp
 8009b18:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b1c:	2b78      	cmp	r3, #120	; 0x78
 8009b1e:	d806      	bhi.n	8009b2e <__ssvfiscanf_r+0xd2>
 8009b20:	2b57      	cmp	r3, #87	; 0x57
 8009b22:	d810      	bhi.n	8009b46 <__ssvfiscanf_r+0xea>
 8009b24:	2b25      	cmp	r3, #37	; 0x25
 8009b26:	d05c      	beq.n	8009be2 <__ssvfiscanf_r+0x186>
 8009b28:	d856      	bhi.n	8009bd8 <__ssvfiscanf_r+0x17c>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d074      	beq.n	8009c18 <__ssvfiscanf_r+0x1bc>
 8009b2e:	2303      	movs	r3, #3
 8009b30:	9347      	str	r3, [sp, #284]	; 0x11c
 8009b32:	230a      	movs	r3, #10
 8009b34:	9342      	str	r3, [sp, #264]	; 0x108
 8009b36:	e081      	b.n	8009c3c <__ssvfiscanf_r+0x1e0>
 8009b38:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009b3a:	fb02 1303 	mla	r3, r2, r3, r1
 8009b3e:	3b30      	subs	r3, #48	; 0x30
 8009b40:	9343      	str	r3, [sp, #268]	; 0x10c
 8009b42:	465d      	mov	r5, fp
 8009b44:	e7d3      	b.n	8009aee <__ssvfiscanf_r+0x92>
 8009b46:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009b4a:	2a20      	cmp	r2, #32
 8009b4c:	d8ef      	bhi.n	8009b2e <__ssvfiscanf_r+0xd2>
 8009b4e:	a101      	add	r1, pc, #4	; (adr r1, 8009b54 <__ssvfiscanf_r+0xf8>)
 8009b50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009b54:	08009c27 	.word	0x08009c27
 8009b58:	08009b2f 	.word	0x08009b2f
 8009b5c:	08009b2f 	.word	0x08009b2f
 8009b60:	08009c85 	.word	0x08009c85
 8009b64:	08009b2f 	.word	0x08009b2f
 8009b68:	08009b2f 	.word	0x08009b2f
 8009b6c:	08009b2f 	.word	0x08009b2f
 8009b70:	08009b2f 	.word	0x08009b2f
 8009b74:	08009b2f 	.word	0x08009b2f
 8009b78:	08009b2f 	.word	0x08009b2f
 8009b7c:	08009b2f 	.word	0x08009b2f
 8009b80:	08009c9b 	.word	0x08009c9b
 8009b84:	08009c71 	.word	0x08009c71
 8009b88:	08009bdf 	.word	0x08009bdf
 8009b8c:	08009bdf 	.word	0x08009bdf
 8009b90:	08009bdf 	.word	0x08009bdf
 8009b94:	08009b2f 	.word	0x08009b2f
 8009b98:	08009c75 	.word	0x08009c75
 8009b9c:	08009b2f 	.word	0x08009b2f
 8009ba0:	08009b2f 	.word	0x08009b2f
 8009ba4:	08009b2f 	.word	0x08009b2f
 8009ba8:	08009b2f 	.word	0x08009b2f
 8009bac:	08009cab 	.word	0x08009cab
 8009bb0:	08009c7d 	.word	0x08009c7d
 8009bb4:	08009c1f 	.word	0x08009c1f
 8009bb8:	08009b2f 	.word	0x08009b2f
 8009bbc:	08009b2f 	.word	0x08009b2f
 8009bc0:	08009ca7 	.word	0x08009ca7
 8009bc4:	08009b2f 	.word	0x08009b2f
 8009bc8:	08009c71 	.word	0x08009c71
 8009bcc:	08009b2f 	.word	0x08009b2f
 8009bd0:	08009b2f 	.word	0x08009b2f
 8009bd4:	08009c27 	.word	0x08009c27
 8009bd8:	3b45      	subs	r3, #69	; 0x45
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d8a7      	bhi.n	8009b2e <__ssvfiscanf_r+0xd2>
 8009bde:	2305      	movs	r3, #5
 8009be0:	e02b      	b.n	8009c3a <__ssvfiscanf_r+0x1de>
 8009be2:	6863      	ldr	r3, [r4, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	dd0d      	ble.n	8009c04 <__ssvfiscanf_r+0x1a8>
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	781a      	ldrb	r2, [r3, #0]
 8009bec:	4552      	cmp	r2, sl
 8009bee:	f040 80a1 	bne.w	8009d34 <__ssvfiscanf_r+0x2d8>
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	6862      	ldr	r2, [r4, #4]
 8009bf6:	6023      	str	r3, [r4, #0]
 8009bf8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009bfa:	3a01      	subs	r2, #1
 8009bfc:	3301      	adds	r3, #1
 8009bfe:	6062      	str	r2, [r4, #4]
 8009c00:	9345      	str	r3, [sp, #276]	; 0x114
 8009c02:	e755      	b.n	8009ab0 <__ssvfiscanf_r+0x54>
 8009c04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009c06:	4621      	mov	r1, r4
 8009c08:	4630      	mov	r0, r6
 8009c0a:	4798      	blx	r3
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d0eb      	beq.n	8009be8 <__ssvfiscanf_r+0x18c>
 8009c10:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009c12:	2800      	cmp	r0, #0
 8009c14:	f040 8084 	bne.w	8009d20 <__ssvfiscanf_r+0x2c4>
 8009c18:	f04f 30ff 	mov.w	r0, #4294967295
 8009c1c:	e086      	b.n	8009d2c <__ssvfiscanf_r+0x2d0>
 8009c1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009c20:	f042 0220 	orr.w	r2, r2, #32
 8009c24:	9241      	str	r2, [sp, #260]	; 0x104
 8009c26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c2c:	9241      	str	r2, [sp, #260]	; 0x104
 8009c2e:	2210      	movs	r2, #16
 8009c30:	2b6f      	cmp	r3, #111	; 0x6f
 8009c32:	9242      	str	r2, [sp, #264]	; 0x108
 8009c34:	bf34      	ite	cc
 8009c36:	2303      	movcc	r3, #3
 8009c38:	2304      	movcs	r3, #4
 8009c3a:	9347      	str	r3, [sp, #284]	; 0x11c
 8009c3c:	6863      	ldr	r3, [r4, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	dd41      	ble.n	8009cc6 <__ssvfiscanf_r+0x26a>
 8009c42:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009c44:	0659      	lsls	r1, r3, #25
 8009c46:	d404      	bmi.n	8009c52 <__ssvfiscanf_r+0x1f6>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	781a      	ldrb	r2, [r3, #0]
 8009c4c:	5cba      	ldrb	r2, [r7, r2]
 8009c4e:	0712      	lsls	r2, r2, #28
 8009c50:	d440      	bmi.n	8009cd4 <__ssvfiscanf_r+0x278>
 8009c52:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	dc4f      	bgt.n	8009cf8 <__ssvfiscanf_r+0x29c>
 8009c58:	466b      	mov	r3, sp
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	a941      	add	r1, sp, #260	; 0x104
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f000 f874 	bl	8009d4c <_scanf_chars>
 8009c64:	2801      	cmp	r0, #1
 8009c66:	d065      	beq.n	8009d34 <__ssvfiscanf_r+0x2d8>
 8009c68:	2802      	cmp	r0, #2
 8009c6a:	f47f af21 	bne.w	8009ab0 <__ssvfiscanf_r+0x54>
 8009c6e:	e7cf      	b.n	8009c10 <__ssvfiscanf_r+0x1b4>
 8009c70:	220a      	movs	r2, #10
 8009c72:	e7dd      	b.n	8009c30 <__ssvfiscanf_r+0x1d4>
 8009c74:	2300      	movs	r3, #0
 8009c76:	9342      	str	r3, [sp, #264]	; 0x108
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e7de      	b.n	8009c3a <__ssvfiscanf_r+0x1de>
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	9342      	str	r3, [sp, #264]	; 0x108
 8009c80:	2304      	movs	r3, #4
 8009c82:	e7da      	b.n	8009c3a <__ssvfiscanf_r+0x1de>
 8009c84:	4629      	mov	r1, r5
 8009c86:	4640      	mov	r0, r8
 8009c88:	f000 f9be 	bl	800a008 <__sccl>
 8009c8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c92:	9341      	str	r3, [sp, #260]	; 0x104
 8009c94:	4605      	mov	r5, r0
 8009c96:	2301      	movs	r3, #1
 8009c98:	e7cf      	b.n	8009c3a <__ssvfiscanf_r+0x1de>
 8009c9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ca0:	9341      	str	r3, [sp, #260]	; 0x104
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	e7c9      	b.n	8009c3a <__ssvfiscanf_r+0x1de>
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	e7c7      	b.n	8009c3a <__ssvfiscanf_r+0x1de>
 8009caa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009cac:	06c3      	lsls	r3, r0, #27
 8009cae:	f53f aeff 	bmi.w	8009ab0 <__ssvfiscanf_r+0x54>
 8009cb2:	9b00      	ldr	r3, [sp, #0]
 8009cb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009cb6:	1d19      	adds	r1, r3, #4
 8009cb8:	9100      	str	r1, [sp, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	07c0      	lsls	r0, r0, #31
 8009cbe:	bf4c      	ite	mi
 8009cc0:	801a      	strhmi	r2, [r3, #0]
 8009cc2:	601a      	strpl	r2, [r3, #0]
 8009cc4:	e6f4      	b.n	8009ab0 <__ssvfiscanf_r+0x54>
 8009cc6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4630      	mov	r0, r6
 8009ccc:	4798      	blx	r3
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d0b7      	beq.n	8009c42 <__ssvfiscanf_r+0x1e6>
 8009cd2:	e79d      	b.n	8009c10 <__ssvfiscanf_r+0x1b4>
 8009cd4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009cd6:	3201      	adds	r2, #1
 8009cd8:	9245      	str	r2, [sp, #276]	; 0x114
 8009cda:	6862      	ldr	r2, [r4, #4]
 8009cdc:	3a01      	subs	r2, #1
 8009cde:	2a00      	cmp	r2, #0
 8009ce0:	6062      	str	r2, [r4, #4]
 8009ce2:	dd02      	ble.n	8009cea <__ssvfiscanf_r+0x28e>
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	6023      	str	r3, [r4, #0]
 8009ce8:	e7ae      	b.n	8009c48 <__ssvfiscanf_r+0x1ec>
 8009cea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009cec:	4621      	mov	r1, r4
 8009cee:	4630      	mov	r0, r6
 8009cf0:	4798      	blx	r3
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d0a8      	beq.n	8009c48 <__ssvfiscanf_r+0x1ec>
 8009cf6:	e78b      	b.n	8009c10 <__ssvfiscanf_r+0x1b4>
 8009cf8:	2b04      	cmp	r3, #4
 8009cfa:	dc06      	bgt.n	8009d0a <__ssvfiscanf_r+0x2ae>
 8009cfc:	466b      	mov	r3, sp
 8009cfe:	4622      	mov	r2, r4
 8009d00:	a941      	add	r1, sp, #260	; 0x104
 8009d02:	4630      	mov	r0, r6
 8009d04:	f000 f87a 	bl	8009dfc <_scanf_i>
 8009d08:	e7ac      	b.n	8009c64 <__ssvfiscanf_r+0x208>
 8009d0a:	4b0f      	ldr	r3, [pc, #60]	; (8009d48 <__ssvfiscanf_r+0x2ec>)
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f43f aecf 	beq.w	8009ab0 <__ssvfiscanf_r+0x54>
 8009d12:	466b      	mov	r3, sp
 8009d14:	4622      	mov	r2, r4
 8009d16:	a941      	add	r1, sp, #260	; 0x104
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f3af 8000 	nop.w
 8009d1e:	e7a1      	b.n	8009c64 <__ssvfiscanf_r+0x208>
 8009d20:	89a3      	ldrh	r3, [r4, #12]
 8009d22:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009d26:	bf18      	it	ne
 8009d28:	f04f 30ff 	movne.w	r0, #4294967295
 8009d2c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d34:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009d36:	e7f9      	b.n	8009d2c <__ssvfiscanf_r+0x2d0>
 8009d38:	080099a9 	.word	0x080099a9
 8009d3c:	08009a23 	.word	0x08009a23
 8009d40:	0800adaf 	.word	0x0800adaf
 8009d44:	0800b09a 	.word	0x0800b09a
 8009d48:	00000000 	.word	0x00000000

08009d4c <_scanf_chars>:
 8009d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d50:	4615      	mov	r5, r2
 8009d52:	688a      	ldr	r2, [r1, #8]
 8009d54:	4680      	mov	r8, r0
 8009d56:	460c      	mov	r4, r1
 8009d58:	b932      	cbnz	r2, 8009d68 <_scanf_chars+0x1c>
 8009d5a:	698a      	ldr	r2, [r1, #24]
 8009d5c:	2a00      	cmp	r2, #0
 8009d5e:	bf0c      	ite	eq
 8009d60:	2201      	moveq	r2, #1
 8009d62:	f04f 32ff 	movne.w	r2, #4294967295
 8009d66:	608a      	str	r2, [r1, #8]
 8009d68:	6822      	ldr	r2, [r4, #0]
 8009d6a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009df8 <_scanf_chars+0xac>
 8009d6e:	06d1      	lsls	r1, r2, #27
 8009d70:	bf5f      	itttt	pl
 8009d72:	681a      	ldrpl	r2, [r3, #0]
 8009d74:	1d11      	addpl	r1, r2, #4
 8009d76:	6019      	strpl	r1, [r3, #0]
 8009d78:	6816      	ldrpl	r6, [r2, #0]
 8009d7a:	2700      	movs	r7, #0
 8009d7c:	69a0      	ldr	r0, [r4, #24]
 8009d7e:	b188      	cbz	r0, 8009da4 <_scanf_chars+0x58>
 8009d80:	2801      	cmp	r0, #1
 8009d82:	d107      	bne.n	8009d94 <_scanf_chars+0x48>
 8009d84:	682b      	ldr	r3, [r5, #0]
 8009d86:	781a      	ldrb	r2, [r3, #0]
 8009d88:	6963      	ldr	r3, [r4, #20]
 8009d8a:	5c9b      	ldrb	r3, [r3, r2]
 8009d8c:	b953      	cbnz	r3, 8009da4 <_scanf_chars+0x58>
 8009d8e:	bb27      	cbnz	r7, 8009dda <_scanf_chars+0x8e>
 8009d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d94:	2802      	cmp	r0, #2
 8009d96:	d120      	bne.n	8009dda <_scanf_chars+0x8e>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009da0:	071b      	lsls	r3, r3, #28
 8009da2:	d41a      	bmi.n	8009dda <_scanf_chars+0x8e>
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	06da      	lsls	r2, r3, #27
 8009da8:	bf5e      	ittt	pl
 8009daa:	682b      	ldrpl	r3, [r5, #0]
 8009dac:	781b      	ldrbpl	r3, [r3, #0]
 8009dae:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009db2:	682a      	ldr	r2, [r5, #0]
 8009db4:	686b      	ldr	r3, [r5, #4]
 8009db6:	3201      	adds	r2, #1
 8009db8:	602a      	str	r2, [r5, #0]
 8009dba:	68a2      	ldr	r2, [r4, #8]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	3a01      	subs	r2, #1
 8009dc0:	606b      	str	r3, [r5, #4]
 8009dc2:	3701      	adds	r7, #1
 8009dc4:	60a2      	str	r2, [r4, #8]
 8009dc6:	b142      	cbz	r2, 8009dda <_scanf_chars+0x8e>
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	dcd7      	bgt.n	8009d7c <_scanf_chars+0x30>
 8009dcc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4798      	blx	r3
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d0d0      	beq.n	8009d7c <_scanf_chars+0x30>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	f013 0310 	ands.w	r3, r3, #16
 8009de0:	d105      	bne.n	8009dee <_scanf_chars+0xa2>
 8009de2:	68e2      	ldr	r2, [r4, #12]
 8009de4:	3201      	adds	r2, #1
 8009de6:	60e2      	str	r2, [r4, #12]
 8009de8:	69a2      	ldr	r2, [r4, #24]
 8009dea:	b102      	cbz	r2, 8009dee <_scanf_chars+0xa2>
 8009dec:	7033      	strb	r3, [r6, #0]
 8009dee:	6923      	ldr	r3, [r4, #16]
 8009df0:	441f      	add	r7, r3
 8009df2:	6127      	str	r7, [r4, #16]
 8009df4:	2000      	movs	r0, #0
 8009df6:	e7cb      	b.n	8009d90 <_scanf_chars+0x44>
 8009df8:	0800adaf 	.word	0x0800adaf

08009dfc <_scanf_i>:
 8009dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e00:	4698      	mov	r8, r3
 8009e02:	4b74      	ldr	r3, [pc, #464]	; (8009fd4 <_scanf_i+0x1d8>)
 8009e04:	460c      	mov	r4, r1
 8009e06:	4682      	mov	sl, r0
 8009e08:	4616      	mov	r6, r2
 8009e0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e0e:	b087      	sub	sp, #28
 8009e10:	ab03      	add	r3, sp, #12
 8009e12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009e16:	4b70      	ldr	r3, [pc, #448]	; (8009fd8 <_scanf_i+0x1dc>)
 8009e18:	69a1      	ldr	r1, [r4, #24]
 8009e1a:	4a70      	ldr	r2, [pc, #448]	; (8009fdc <_scanf_i+0x1e0>)
 8009e1c:	2903      	cmp	r1, #3
 8009e1e:	bf18      	it	ne
 8009e20:	461a      	movne	r2, r3
 8009e22:	68a3      	ldr	r3, [r4, #8]
 8009e24:	9201      	str	r2, [sp, #4]
 8009e26:	1e5a      	subs	r2, r3, #1
 8009e28:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009e2c:	bf88      	it	hi
 8009e2e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009e32:	4627      	mov	r7, r4
 8009e34:	bf82      	ittt	hi
 8009e36:	eb03 0905 	addhi.w	r9, r3, r5
 8009e3a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009e3e:	60a3      	strhi	r3, [r4, #8]
 8009e40:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009e44:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009e48:	bf98      	it	ls
 8009e4a:	f04f 0900 	movls.w	r9, #0
 8009e4e:	6023      	str	r3, [r4, #0]
 8009e50:	463d      	mov	r5, r7
 8009e52:	f04f 0b00 	mov.w	fp, #0
 8009e56:	6831      	ldr	r1, [r6, #0]
 8009e58:	ab03      	add	r3, sp, #12
 8009e5a:	7809      	ldrb	r1, [r1, #0]
 8009e5c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009e60:	2202      	movs	r2, #2
 8009e62:	f7f6 f9ed 	bl	8000240 <memchr>
 8009e66:	b328      	cbz	r0, 8009eb4 <_scanf_i+0xb8>
 8009e68:	f1bb 0f01 	cmp.w	fp, #1
 8009e6c:	d159      	bne.n	8009f22 <_scanf_i+0x126>
 8009e6e:	6862      	ldr	r2, [r4, #4]
 8009e70:	b92a      	cbnz	r2, 8009e7e <_scanf_i+0x82>
 8009e72:	6822      	ldr	r2, [r4, #0]
 8009e74:	2308      	movs	r3, #8
 8009e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e7a:	6063      	str	r3, [r4, #4]
 8009e7c:	6022      	str	r2, [r4, #0]
 8009e7e:	6822      	ldr	r2, [r4, #0]
 8009e80:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009e84:	6022      	str	r2, [r4, #0]
 8009e86:	68a2      	ldr	r2, [r4, #8]
 8009e88:	1e51      	subs	r1, r2, #1
 8009e8a:	60a1      	str	r1, [r4, #8]
 8009e8c:	b192      	cbz	r2, 8009eb4 <_scanf_i+0xb8>
 8009e8e:	6832      	ldr	r2, [r6, #0]
 8009e90:	1c51      	adds	r1, r2, #1
 8009e92:	6031      	str	r1, [r6, #0]
 8009e94:	7812      	ldrb	r2, [r2, #0]
 8009e96:	f805 2b01 	strb.w	r2, [r5], #1
 8009e9a:	6872      	ldr	r2, [r6, #4]
 8009e9c:	3a01      	subs	r2, #1
 8009e9e:	2a00      	cmp	r2, #0
 8009ea0:	6072      	str	r2, [r6, #4]
 8009ea2:	dc07      	bgt.n	8009eb4 <_scanf_i+0xb8>
 8009ea4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8009ea8:	4631      	mov	r1, r6
 8009eaa:	4650      	mov	r0, sl
 8009eac:	4790      	blx	r2
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	f040 8085 	bne.w	8009fbe <_scanf_i+0x1c2>
 8009eb4:	f10b 0b01 	add.w	fp, fp, #1
 8009eb8:	f1bb 0f03 	cmp.w	fp, #3
 8009ebc:	d1cb      	bne.n	8009e56 <_scanf_i+0x5a>
 8009ebe:	6863      	ldr	r3, [r4, #4]
 8009ec0:	b90b      	cbnz	r3, 8009ec6 <_scanf_i+0xca>
 8009ec2:	230a      	movs	r3, #10
 8009ec4:	6063      	str	r3, [r4, #4]
 8009ec6:	6863      	ldr	r3, [r4, #4]
 8009ec8:	4945      	ldr	r1, [pc, #276]	; (8009fe0 <_scanf_i+0x1e4>)
 8009eca:	6960      	ldr	r0, [r4, #20]
 8009ecc:	1ac9      	subs	r1, r1, r3
 8009ece:	f000 f89b 	bl	800a008 <__sccl>
 8009ed2:	f04f 0b00 	mov.w	fp, #0
 8009ed6:	68a3      	ldr	r3, [r4, #8]
 8009ed8:	6822      	ldr	r2, [r4, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d03d      	beq.n	8009f5a <_scanf_i+0x15e>
 8009ede:	6831      	ldr	r1, [r6, #0]
 8009ee0:	6960      	ldr	r0, [r4, #20]
 8009ee2:	f891 c000 	ldrb.w	ip, [r1]
 8009ee6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d035      	beq.n	8009f5a <_scanf_i+0x15e>
 8009eee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009ef2:	d124      	bne.n	8009f3e <_scanf_i+0x142>
 8009ef4:	0510      	lsls	r0, r2, #20
 8009ef6:	d522      	bpl.n	8009f3e <_scanf_i+0x142>
 8009ef8:	f10b 0b01 	add.w	fp, fp, #1
 8009efc:	f1b9 0f00 	cmp.w	r9, #0
 8009f00:	d003      	beq.n	8009f0a <_scanf_i+0x10e>
 8009f02:	3301      	adds	r3, #1
 8009f04:	f109 39ff 	add.w	r9, r9, #4294967295
 8009f08:	60a3      	str	r3, [r4, #8]
 8009f0a:	6873      	ldr	r3, [r6, #4]
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	6073      	str	r3, [r6, #4]
 8009f12:	dd1b      	ble.n	8009f4c <_scanf_i+0x150>
 8009f14:	6833      	ldr	r3, [r6, #0]
 8009f16:	3301      	adds	r3, #1
 8009f18:	6033      	str	r3, [r6, #0]
 8009f1a:	68a3      	ldr	r3, [r4, #8]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	60a3      	str	r3, [r4, #8]
 8009f20:	e7d9      	b.n	8009ed6 <_scanf_i+0xda>
 8009f22:	f1bb 0f02 	cmp.w	fp, #2
 8009f26:	d1ae      	bne.n	8009e86 <_scanf_i+0x8a>
 8009f28:	6822      	ldr	r2, [r4, #0]
 8009f2a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009f2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009f32:	d1bf      	bne.n	8009eb4 <_scanf_i+0xb8>
 8009f34:	2310      	movs	r3, #16
 8009f36:	6063      	str	r3, [r4, #4]
 8009f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f3c:	e7a2      	b.n	8009e84 <_scanf_i+0x88>
 8009f3e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009f42:	6022      	str	r2, [r4, #0]
 8009f44:	780b      	ldrb	r3, [r1, #0]
 8009f46:	f805 3b01 	strb.w	r3, [r5], #1
 8009f4a:	e7de      	b.n	8009f0a <_scanf_i+0x10e>
 8009f4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009f50:	4631      	mov	r1, r6
 8009f52:	4650      	mov	r0, sl
 8009f54:	4798      	blx	r3
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d0df      	beq.n	8009f1a <_scanf_i+0x11e>
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	05d9      	lsls	r1, r3, #23
 8009f5e:	d50d      	bpl.n	8009f7c <_scanf_i+0x180>
 8009f60:	42bd      	cmp	r5, r7
 8009f62:	d909      	bls.n	8009f78 <_scanf_i+0x17c>
 8009f64:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f6c:	4632      	mov	r2, r6
 8009f6e:	4650      	mov	r0, sl
 8009f70:	4798      	blx	r3
 8009f72:	f105 39ff 	add.w	r9, r5, #4294967295
 8009f76:	464d      	mov	r5, r9
 8009f78:	42bd      	cmp	r5, r7
 8009f7a:	d028      	beq.n	8009fce <_scanf_i+0x1d2>
 8009f7c:	6822      	ldr	r2, [r4, #0]
 8009f7e:	f012 0210 	ands.w	r2, r2, #16
 8009f82:	d113      	bne.n	8009fac <_scanf_i+0x1b0>
 8009f84:	702a      	strb	r2, [r5, #0]
 8009f86:	6863      	ldr	r3, [r4, #4]
 8009f88:	9e01      	ldr	r6, [sp, #4]
 8009f8a:	4639      	mov	r1, r7
 8009f8c:	4650      	mov	r0, sl
 8009f8e:	47b0      	blx	r6
 8009f90:	f8d8 3000 	ldr.w	r3, [r8]
 8009f94:	6821      	ldr	r1, [r4, #0]
 8009f96:	1d1a      	adds	r2, r3, #4
 8009f98:	f8c8 2000 	str.w	r2, [r8]
 8009f9c:	f011 0f20 	tst.w	r1, #32
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	d00f      	beq.n	8009fc4 <_scanf_i+0x1c8>
 8009fa4:	6018      	str	r0, [r3, #0]
 8009fa6:	68e3      	ldr	r3, [r4, #12]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	60e3      	str	r3, [r4, #12]
 8009fac:	1bed      	subs	r5, r5, r7
 8009fae:	44ab      	add	fp, r5
 8009fb0:	6925      	ldr	r5, [r4, #16]
 8009fb2:	445d      	add	r5, fp
 8009fb4:	6125      	str	r5, [r4, #16]
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	b007      	add	sp, #28
 8009fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbe:	f04f 0b00 	mov.w	fp, #0
 8009fc2:	e7ca      	b.n	8009f5a <_scanf_i+0x15e>
 8009fc4:	07ca      	lsls	r2, r1, #31
 8009fc6:	bf4c      	ite	mi
 8009fc8:	8018      	strhmi	r0, [r3, #0]
 8009fca:	6018      	strpl	r0, [r3, #0]
 8009fcc:	e7eb      	b.n	8009fa6 <_scanf_i+0x1aa>
 8009fce:	2001      	movs	r0, #1
 8009fd0:	e7f2      	b.n	8009fb8 <_scanf_i+0x1bc>
 8009fd2:	bf00      	nop
 8009fd4:	0800ab48 	.word	0x0800ab48
 8009fd8:	08007155 	.word	0x08007155
 8009fdc:	08007059 	.word	0x08007059
 8009fe0:	0800b121 	.word	0x0800b121

08009fe4 <_read_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4d07      	ldr	r5, [pc, #28]	; (800a004 <_read_r+0x20>)
 8009fe8:	4604      	mov	r4, r0
 8009fea:	4608      	mov	r0, r1
 8009fec:	4611      	mov	r1, r2
 8009fee:	2200      	movs	r2, #0
 8009ff0:	602a      	str	r2, [r5, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f7f7 fb8c 	bl	8001710 <_read>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_read_r+0x1e>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_read_r+0x1e>
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	2000068c 	.word	0x2000068c

0800a008 <__sccl>:
 800a008:	b570      	push	{r4, r5, r6, lr}
 800a00a:	780b      	ldrb	r3, [r1, #0]
 800a00c:	4604      	mov	r4, r0
 800a00e:	2b5e      	cmp	r3, #94	; 0x5e
 800a010:	bf0b      	itete	eq
 800a012:	784b      	ldrbeq	r3, [r1, #1]
 800a014:	1c48      	addne	r0, r1, #1
 800a016:	1c88      	addeq	r0, r1, #2
 800a018:	2200      	movne	r2, #0
 800a01a:	bf08      	it	eq
 800a01c:	2201      	moveq	r2, #1
 800a01e:	1e61      	subs	r1, r4, #1
 800a020:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a024:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a028:	42a9      	cmp	r1, r5
 800a02a:	d1fb      	bne.n	800a024 <__sccl+0x1c>
 800a02c:	b90b      	cbnz	r3, 800a032 <__sccl+0x2a>
 800a02e:	3801      	subs	r0, #1
 800a030:	bd70      	pop	{r4, r5, r6, pc}
 800a032:	f082 0101 	eor.w	r1, r2, #1
 800a036:	54e1      	strb	r1, [r4, r3]
 800a038:	1c42      	adds	r2, r0, #1
 800a03a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800a03e:	2d2d      	cmp	r5, #45	; 0x2d
 800a040:	f102 36ff 	add.w	r6, r2, #4294967295
 800a044:	4610      	mov	r0, r2
 800a046:	d006      	beq.n	800a056 <__sccl+0x4e>
 800a048:	2d5d      	cmp	r5, #93	; 0x5d
 800a04a:	d0f1      	beq.n	800a030 <__sccl+0x28>
 800a04c:	b90d      	cbnz	r5, 800a052 <__sccl+0x4a>
 800a04e:	4630      	mov	r0, r6
 800a050:	e7ee      	b.n	800a030 <__sccl+0x28>
 800a052:	462b      	mov	r3, r5
 800a054:	e7ef      	b.n	800a036 <__sccl+0x2e>
 800a056:	7816      	ldrb	r6, [r2, #0]
 800a058:	2e5d      	cmp	r6, #93	; 0x5d
 800a05a:	d0fa      	beq.n	800a052 <__sccl+0x4a>
 800a05c:	42b3      	cmp	r3, r6
 800a05e:	dcf8      	bgt.n	800a052 <__sccl+0x4a>
 800a060:	4618      	mov	r0, r3
 800a062:	3001      	adds	r0, #1
 800a064:	4286      	cmp	r6, r0
 800a066:	5421      	strb	r1, [r4, r0]
 800a068:	dcfb      	bgt.n	800a062 <__sccl+0x5a>
 800a06a:	43d8      	mvns	r0, r3
 800a06c:	4430      	add	r0, r6
 800a06e:	1c5d      	adds	r5, r3, #1
 800a070:	42b3      	cmp	r3, r6
 800a072:	bfa8      	it	ge
 800a074:	2000      	movge	r0, #0
 800a076:	182b      	adds	r3, r5, r0
 800a078:	3202      	adds	r2, #2
 800a07a:	e7de      	b.n	800a03a <__sccl+0x32>

0800a07c <__submore>:
 800a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a080:	460c      	mov	r4, r1
 800a082:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a088:	4299      	cmp	r1, r3
 800a08a:	d11d      	bne.n	800a0c8 <__submore+0x4c>
 800a08c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a090:	f7fc fa0c 	bl	80064ac <_malloc_r>
 800a094:	b918      	cbnz	r0, 800a09e <__submore+0x22>
 800a096:	f04f 30ff 	mov.w	r0, #4294967295
 800a09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0a2:	63a3      	str	r3, [r4, #56]	; 0x38
 800a0a4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a0a8:	6360      	str	r0, [r4, #52]	; 0x34
 800a0aa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a0ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a0b2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a0b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a0ba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a0be:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a0c2:	6020      	str	r0, [r4, #0]
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	e7e8      	b.n	800a09a <__submore+0x1e>
 800a0c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a0ca:	0077      	lsls	r7, r6, #1
 800a0cc:	463a      	mov	r2, r7
 800a0ce:	f7fe fdec 	bl	8008caa <_realloc_r>
 800a0d2:	4605      	mov	r5, r0
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d0de      	beq.n	800a096 <__submore+0x1a>
 800a0d8:	eb00 0806 	add.w	r8, r0, r6
 800a0dc:	4601      	mov	r1, r0
 800a0de:	4632      	mov	r2, r6
 800a0e0:	4640      	mov	r0, r8
 800a0e2:	f7fb fee5 	bl	8005eb0 <memcpy>
 800a0e6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a0ea:	f8c4 8000 	str.w	r8, [r4]
 800a0ee:	e7e9      	b.n	800a0c4 <__submore+0x48>

0800a0f0 <_fstat_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d07      	ldr	r5, [pc, #28]	; (800a110 <_fstat_r+0x20>)
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	602b      	str	r3, [r5, #0]
 800a0fe:	f7f7 fb4c 	bl	800179a <_fstat>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	d102      	bne.n	800a10c <_fstat_r+0x1c>
 800a106:	682b      	ldr	r3, [r5, #0]
 800a108:	b103      	cbz	r3, 800a10c <_fstat_r+0x1c>
 800a10a:	6023      	str	r3, [r4, #0]
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
 800a10e:	bf00      	nop
 800a110:	2000068c 	.word	0x2000068c

0800a114 <_isatty_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4d06      	ldr	r5, [pc, #24]	; (800a130 <_isatty_r+0x1c>)
 800a118:	2300      	movs	r3, #0
 800a11a:	4604      	mov	r4, r0
 800a11c:	4608      	mov	r0, r1
 800a11e:	602b      	str	r3, [r5, #0]
 800a120:	f7f7 fb4b 	bl	80017ba <_isatty>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d102      	bne.n	800a12e <_isatty_r+0x1a>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	b103      	cbz	r3, 800a12e <_isatty_r+0x1a>
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	2000068c 	.word	0x2000068c

0800a134 <_init>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	bf00      	nop
 800a138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13a:	bc08      	pop	{r3}
 800a13c:	469e      	mov	lr, r3
 800a13e:	4770      	bx	lr

0800a140 <_fini>:
 800a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a142:	bf00      	nop
 800a144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a146:	bc08      	pop	{r3}
 800a148:	469e      	mov	lr, r3
 800a14a:	4770      	bx	lr
