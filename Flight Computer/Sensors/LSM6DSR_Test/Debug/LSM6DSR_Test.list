
LSM6DSR_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007894  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  08007a68  08007a68  00017a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ffc  08007ffc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ffc  08007ffc  00017ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008004  08008004  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008004  08008004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800800c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  200001dc  080081e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  080081e8  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee15  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002703  00000000  00000000  0003f021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  00041728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b8  00000000  00000000  00042ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a19  00000000  00000000  00044558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163fa  00000000  00000000  00067f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dac5d  00000000  00000000  0007e36b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158fc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007770  00000000  00000000  0015901c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007a4c 	.word	0x08007a4c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007a4c 	.word	0x08007a4c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <ism330dlc_read_reg>:
  *
  */
int32_t ism330dlc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	461a      	mov	r2, r3
 8000eec:	460b      	mov	r3, r1
 8000eee:	72fb      	strb	r3, [r7, #11]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	685c      	ldr	r4, [r3, #4]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6898      	ldr	r0, [r3, #8]
 8000efc:	893b      	ldrh	r3, [r7, #8]
 8000efe:	7af9      	ldrb	r1, [r7, #11]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	47a0      	blx	r4
 8000f04:	6178      	str	r0, [r7, #20]

  return ret;
 8000f06:	697b      	ldr	r3, [r7, #20]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd90      	pop	{r4, r7, pc}

08000f10 <ism330dlc_write_reg>:
  *
  */
int32_t ism330dlc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	72fb      	strb	r3, [r7, #11]
 8000f20:	4613      	mov	r3, r2
 8000f22:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681c      	ldr	r4, [r3, #0]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6898      	ldr	r0, [r3, #8]
 8000f2c:	893b      	ldrh	r3, [r7, #8]
 8000f2e:	7af9      	ldrb	r1, [r7, #11]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	47a0      	blx	r4
 8000f34:	6178      	str	r0, [r7, #20]

  return ret;
 8000f36:	697b      	ldr	r3, [r7, #20]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	371c      	adds	r7, #28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd90      	pop	{r4, r7, pc}

08000f40 <ism330dlc_from_fs2g_to_mg>:
  * @{
  *
  */

float_t ism330dlc_from_fs2g_to_mg(int16_t lsb)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8000f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f56:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f6c <ism330dlc_from_fs2g_to_mg+0x2c>
 8000f5a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	3d79db23 	.word	0x3d79db23

08000f70 <ism330dlc_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t ism330dlc_from_fs2000dps_to_mdps(int16_t lsb)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8000f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7e:	ee07 3a90 	vmov	s15, r3
 8000f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f86:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000f9c <ism330dlc_from_fs2000dps_to_mdps+0x2c>
 8000f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	428c0000 	.word	0x428c0000

08000fa0 <ism330dlc_from_lsb_to_celsius>:

float_t ism330dlc_from_lsb_to_celsius(int16_t lsb)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8000faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb6:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000fd4 <ism330dlc_from_lsb_to_celsius+0x34>
 8000fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fbe:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000fc2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	43800000 	.word	0x43800000

08000fd8 <ism330dlc_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_xl_t val)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8000fe4:	f107 0208 	add.w	r2, r7, #8
 8000fe8:	2301      	movs	r3, #1
 8000fea:	2110      	movs	r1, #16
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff77 	bl	8000ee0 <ism330dlc_read_reg>
 8000ff2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10f      	bne.n	800101a <ism330dlc_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	b2da      	uxtb	r2, r3
 8001002:	7a3b      	ldrb	r3, [r7, #8]
 8001004:	f362 0383 	bfi	r3, r2, #2, #2
 8001008:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 800100a:	f107 0208 	add.w	r2, r7, #8
 800100e:	2301      	movs	r3, #1
 8001010:	2110      	movs	r1, #16
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff7c 	bl	8000f10 <ism330dlc_write_reg>
 8001018:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <ism330dlc_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_xl_t val)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8001030:	f107 0208 	add.w	r2, r7, #8
 8001034:	2301      	movs	r3, #1
 8001036:	2110      	movs	r1, #16
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff51 	bl	8000ee0 <ism330dlc_read_reg>
 800103e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10f      	bne.n	8001066 <ism330dlc_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001046:	78fb      	ldrb	r3, [r7, #3]
 8001048:	f003 030f 	and.w	r3, r3, #15
 800104c:	b2da      	uxtb	r2, r3
 800104e:	7a3b      	ldrb	r3, [r7, #8]
 8001050:	f362 1307 	bfi	r3, r2, #4, #4
 8001054:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8001056:	f107 0208 	add.w	r2, r7, #8
 800105a:	2301      	movs	r3, #1
 800105c:	2110      	movs	r1, #16
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ff56 	bl	8000f10 <ism330dlc_write_reg>
 8001064:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <ism330dlc_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_full_scale_set(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_g_t val)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800107c:	f107 0208 	add.w	r2, r7, #8
 8001080:	2301      	movs	r3, #1
 8001082:	2111      	movs	r1, #17
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff2b 	bl	8000ee0 <ism330dlc_read_reg>
 800108a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10f      	bne.n	80010b2 <ism330dlc_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001092:	78fb      	ldrb	r3, [r7, #3]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	b2da      	uxtb	r2, r3
 800109a:	7a3b      	ldrb	r3, [r7, #8]
 800109c:	f362 0343 	bfi	r3, r2, #1, #3
 80010a0:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80010a2:	f107 0208 	add.w	r2, r7, #8
 80010a6:	2301      	movs	r3, #1
 80010a8:	2111      	movs	r1, #17
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff30 	bl	8000f10 <ism330dlc_write_reg>
 80010b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <ism330dlc_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_data_rate_set(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_g_t val)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80010c8:	f107 0208 	add.w	r2, r7, #8
 80010cc:	2301      	movs	r3, #1
 80010ce:	2111      	movs	r1, #17
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff05 	bl	8000ee0 <ism330dlc_read_reg>
 80010d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10f      	bne.n	80010fe <ism330dlc_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80010de:	78fb      	ldrb	r3, [r7, #3]
 80010e0:	f003 030f 	and.w	r3, r3, #15
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	7a3b      	ldrb	r3, [r7, #8]
 80010e8:	f362 1307 	bfi	r3, r2, #4, #4
 80010ec:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80010ee:	f107 0208 	add.w	r2, r7, #8
 80010f2:	2301      	movs	r3, #1
 80010f4:	2111      	movs	r1, #17
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff0a 	bl	8000f10 <ism330dlc_write_reg>
 80010fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <ism330dlc_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_block_data_update_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	2301      	movs	r3, #1
 800111a:	2112      	movs	r1, #18
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fedf 	bl	8000ee0 <ism330dlc_read_reg>
 8001122:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10f      	bne.n	800114a <ism330dlc_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	7a3b      	ldrb	r3, [r7, #8]
 8001134:	f362 1386 	bfi	r3, r2, #6, #1
 8001138:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800113a:	f107 0208 	add.w	r2, r7, #8
 800113e:	2301      	movs	r3, #1
 8001140:	2112      	movs	r1, #18
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff fee4 	bl	8000f10 <ism330dlc_write_reg>
 8001148:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <ism330dlc_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_status_reg_get(stmdev_ctx_t *ctx,
                                 ism330dlc_status_reg_t *val)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_STATUS_REG, (uint8_t *) val, 1);
 800115e:	2301      	movs	r3, #1
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	211e      	movs	r1, #30
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff febb 	bl	8000ee0 <ism330dlc_read_reg>
 800116a:	60f8      	str	r0, [r7, #12]

  return ret;
 800116c:	68fb      	ldr	r3, [r7, #12]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <ism330dlc_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUT_TEMP_L, buff, 2);
 8001180:	f107 0208 	add.w	r2, r7, #8
 8001184:	2302      	movs	r3, #2
 8001186:	2120      	movs	r1, #32
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fea9 	bl	8000ee0 <ism330dlc_read_reg>
 800118e:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001190:	7a7b      	ldrb	r3, [r7, #9]
 8001192:	b21a      	sxth	r2, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	7a3b      	ldrb	r3, [r7, #8]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	4413      	add	r3, r2
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	801a      	strh	r2, [r3, #0]

  return ret;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <ism330dlc_angular_rate_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_angular_rate_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_G, buff, 6);
 80011c6:	f107 020c 	add.w	r2, r7, #12
 80011ca:	2306      	movs	r3, #6
 80011cc:	2122      	movs	r1, #34	; 0x22
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fe86 	bl	8000ee0 <ism330dlc_read_reg>
 80011d4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80011d6:	7b7b      	ldrb	r3, [r7, #13]
 80011d8:	b21a      	sxth	r2, r3
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	7b3b      	ldrb	r3, [r7, #12]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	3302      	adds	r3, #2
 80011fe:	b212      	sxth	r2, r2
 8001200:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3302      	adds	r3, #2
 8001206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120a:	b29b      	uxth	r3, r3
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b29a      	uxth	r2, r3
 8001210:	7bbb      	ldrb	r3, [r7, #14]
 8001212:	b29b      	uxth	r3, r3
 8001214:	4413      	add	r3, r2
 8001216:	b29a      	uxth	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	3302      	adds	r3, #2
 800121c:	b212      	sxth	r2, r2
 800121e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001220:	7c7a      	ldrb	r2, [r7, #17]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	b212      	sxth	r2, r2
 8001228:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	3304      	adds	r3, #4
 800122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001232:	b29b      	uxth	r3, r3
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	b29a      	uxth	r2, r3
 8001238:	7c3b      	ldrb	r3, [r7, #16]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b29a      	uxth	r2, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	3304      	adds	r3, #4
 8001244:	b212      	sxth	r2, r2
 8001246:	801a      	strh	r2, [r3, #0]

  return ret;
 8001248:	697b      	ldr	r3, [r7, #20]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <ism330dlc_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_XL, buff, 6);
 800125c:	f107 020c 	add.w	r2, r7, #12
 8001260:	2306      	movs	r3, #6
 8001262:	2128      	movs	r1, #40	; 0x28
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fe3b 	bl	8000ee0 <ism330dlc_read_reg>
 800126a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800126c:	7b7b      	ldrb	r3, [r7, #13]
 800126e:	b21a      	sxth	r2, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127a:	b29b      	uxth	r3, r3
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b29a      	uxth	r2, r3
 8001280:	7b3b      	ldrb	r3, [r7, #12]
 8001282:	b29b      	uxth	r3, r3
 8001284:	4413      	add	r3, r2
 8001286:	b29b      	uxth	r3, r3
 8001288:	b21a      	sxth	r2, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	3302      	adds	r3, #2
 8001294:	b212      	sxth	r2, r2
 8001296:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	3302      	adds	r3, #2
 800129c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4413      	add	r3, r2
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3302      	adds	r3, #2
 80012b2:	b212      	sxth	r2, r2
 80012b4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80012b6:	7c7a      	ldrb	r2, [r7, #17]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3304      	adds	r3, #4
 80012bc:	b212      	sxth	r2, r2
 80012be:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	3304      	adds	r3, #4
 80012c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	7c3b      	ldrb	r3, [r7, #16]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	3304      	adds	r3, #4
 80012da:	b212      	sxth	r2, r2
 80012dc:	801a      	strh	r2, [r3, #0]

  return ret;
 80012de:	697b      	ldr	r3, [r7, #20]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <ism330dlc_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_WHO_AM_I, buff, 1);
 80012f2:	2301      	movs	r3, #1
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	210f      	movs	r1, #15
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff fdf1 	bl	8000ee0 <ism330dlc_read_reg>
 80012fe:	60f8      	str	r0, [r7, #12]

  return ret;
 8001300:	68fb      	ldr	r3, [r7, #12]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <ism330dlc_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b084      	sub	sp, #16
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	460b      	mov	r3, r1
 8001314:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001316:	f107 0208 	add.w	r2, r7, #8
 800131a:	2301      	movs	r3, #1
 800131c:	2112      	movs	r1, #18
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fdde 	bl	8000ee0 <ism330dlc_read_reg>
 8001324:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10f      	bne.n	800134c <ism330dlc_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 800132c:	78fb      	ldrb	r3, [r7, #3]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	7a3b      	ldrb	r3, [r7, #8]
 8001336:	f362 0300 	bfi	r3, r2, #0, #1
 800133a:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800133c:	f107 0208 	add.w	r2, r7, #8
 8001340:	2301      	movs	r3, #1
 8001342:	2112      	movs	r1, #18
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fde3 	bl	8000f10 <ism330dlc_write_reg>
 800134a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800134c:	68fb      	ldr	r3, [r7, #12]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <ism330dlc_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001360:	f107 0208 	add.w	r2, r7, #8
 8001364:	2301      	movs	r3, #1
 8001366:	2112      	movs	r1, #18
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fdb9 	bl	8000ee0 <ism330dlc_read_reg>
 800136e:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001370:	7a3b      	ldrb	r3, [r7, #8]
 8001372:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001376:	b2db      	uxtb	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	701a      	strb	r2, [r3, #0]

  return ret;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <ism330dlc_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                       ism330dlc_bw0_xl_t val)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8001394:	f107 0208 	add.w	r2, r7, #8
 8001398:	2301      	movs	r3, #1
 800139a:	2110      	movs	r1, #16
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff fd9f 	bl	8000ee0 <ism330dlc_read_reg>
 80013a2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10f      	bne.n	80013ca <ism330dlc_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	7a3b      	ldrb	r3, [r7, #8]
 80013b4:	f362 0300 	bfi	r3, r2, #0, #1
 80013b8:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 80013ba:	f107 0208 	add.w	r2, r7, #8
 80013be:	2301      	movs	r3, #1
 80013c0:	2110      	movs	r1, #16
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fda4 	bl	8000f10 <ism330dlc_write_reg>
 80013c8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80013ca:	68fb      	ldr	r3, [r7, #12]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <ism330dlc_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                       ism330dlc_input_composite_t val)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL8_XL,
 80013e0:	f107 0208 	add.w	r2, r7, #8
 80013e4:	2301      	movs	r3, #1
 80013e6:	2117      	movs	r1, #23
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fd79 	bl	8000ee0 <ism330dlc_read_reg>
 80013ee:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d120      	bne.n	8001438 <ism330dlc_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	7a3b      	ldrb	r3, [r7, #8]
 8001402:	f362 03c3 	bfi	r3, r2, #3, #1
 8001406:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	b2da      	uxtb	r2, r3
 8001410:	7a3b      	ldrb	r3, [r7, #8]
 8001412:	f362 1346 	bfi	r3, r2, #5, #2
 8001416:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001418:	7a3b      	ldrb	r3, [r7, #8]
 800141a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800141e:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001420:	7a3b      	ldrb	r3, [r7, #8]
 8001422:	f36f 0382 	bfc	r3, #2, #1
 8001426:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL8_XL,
 8001428:	f107 0208 	add.w	r2, r7, #8
 800142c:	2301      	movs	r3, #1
 800142e:	2117      	movs	r1, #23
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fd6d 	bl	8000f10 <ism330dlc_write_reg>
 8001436:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8001438:	68fb      	ldr	r3, [r7, #12]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <ism330dlc_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_band_pass_set(stmdev_ctx_t *ctx,
                                   ism330dlc_lpf1_sel_g_t val)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl4_c_t ctrl4_c;
  ism330dlc_ctrl6_c_t ctrl6_c;
  ism330dlc_ctrl7_g_t ctrl7_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800144e:	f107 0208 	add.w	r2, r7, #8
 8001452:	2301      	movs	r3, #1
 8001454:	2116      	movs	r1, #22
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fd42 	bl	8000ee0 <ism330dlc_read_reg>
 800145c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d157      	bne.n	8001514 <ism330dlc_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	b2da      	uxtb	r2, r3
 800146e:	7a3b      	ldrb	r3, [r7, #8]
 8001470:	f362 1305 	bfi	r3, r2, #4, #2
 8001474:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	09db      	lsrs	r3, r3, #7
 800147a:	b2db      	uxtb	r3, r3
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	7a3b      	ldrb	r3, [r7, #8]
 8001484:	f362 1386 	bfi	r3, r2, #6, #1
 8001488:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800148a:	f107 0208 	add.w	r2, r7, #8
 800148e:	2301      	movs	r3, #1
 8001490:	2116      	movs	r1, #22
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fd3c 	bl	8000f10 <ism330dlc_write_reg>
 8001498:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d139      	bne.n	8001514 <ism330dlc_gy_band_pass_set+0xd2>
    {
      ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80014a0:	f107 020c 	add.w	r2, r7, #12
 80014a4:	2301      	movs	r3, #1
 80014a6:	2115      	movs	r1, #21
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fd19 	bl	8000ee0 <ism330dlc_read_reg>
 80014ae:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d12e      	bne.n	8001514 <ism330dlc_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	7b3b      	ldrb	r3, [r7, #12]
 80014c0:	f362 0301 	bfi	r3, r2, #0, #2
 80014c4:	733b      	strb	r3, [r7, #12]
        ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL6_C,
 80014c6:	f107 020c 	add.w	r2, r7, #12
 80014ca:	2301      	movs	r3, #1
 80014cc:	2115      	movs	r1, #21
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff fd1e 	bl	8000f10 <ism330dlc_write_reg>
 80014d4:	6178      	str	r0, [r7, #20]
                                  (uint8_t *)&ctrl6_c, 1);

        if (ret == 0)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d11b      	bne.n	8001514 <ism330dlc_gy_band_pass_set+0xd2>
        {
          ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL4_C,
 80014dc:	f107 0210 	add.w	r2, r7, #16
 80014e0:	2301      	movs	r3, #1
 80014e2:	2113      	movs	r1, #19
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fcfb 	bl	8000ee0 <ism330dlc_read_reg>
 80014ea:	6178      	str	r0, [r7, #20]
                                   (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d110      	bne.n	8001514 <ism330dlc_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	08db      	lsrs	r3, r3, #3
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	7c3b      	ldrb	r3, [r7, #16]
 80014fe:	f362 0341 	bfi	r3, r2, #1, #1
 8001502:	743b      	strb	r3, [r7, #16]
            ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL4_C,
 8001504:	f107 0210 	add.w	r2, r7, #16
 8001508:	2301      	movs	r3, #1
 800150a:	2113      	movs	r1, #19
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff fcff 	bl	8000f10 <ism330dlc_write_reg>
 8001512:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001514:	697b      	ldr	r3, [r7, #20]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001524:	f000 fdb4 	bl	8002090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001528:	f000 f830 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152c:	f000 f8f4 	bl	8001718 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001530:	f000 f8c8 	bl	80016c4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001534:	f000 f898 	bl	8001668 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart3,"\n\rMain Loop Starts\n\r", 24, HAL_MAX_DELAY);
 8001538:	f04f 33ff 	mov.w	r3, #4294967295
 800153c:	2218      	movs	r2, #24
 800153e:	490e      	ldr	r1, [pc, #56]	; (8001578 <main+0x58>)
 8001540:	480e      	ldr	r0, [pc, #56]	; (800157c <main+0x5c>)
 8001542:	f003 f8f2 	bl	800472a <HAL_UART_Transmit>
	  setup(&dev_ctx);
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <main+0x60>)
 8001548:	f000 f928 	bl	800179c <setup>
	  lsm6dsr_read_data_polling(&dev_ctx);
 800154c:	480c      	ldr	r0, [pc, #48]	; (8001580 <main+0x60>)
 800154e:	f000 f9c3 	bl	80018d8 <lsm6dsr_read_data_polling>
	  HAL_UART_Transmit(&huart3,"Main Loop Terminated\n\r", 24, HAL_MAX_DELAY);
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	2218      	movs	r2, #24
 8001558:	490a      	ldr	r1, [pc, #40]	; (8001584 <main+0x64>)
 800155a:	4808      	ldr	r0, [pc, #32]	; (800157c <main+0x5c>)
 800155c:	f003 f8e5 	bl	800472a <HAL_UART_Transmit>
	  break;
 8001560:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  HAL_UART_Transmit(&huart3,"Program Terminated\n\r", 22, HAL_MAX_DELAY);
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
 8001566:	2216      	movs	r2, #22
 8001568:	4907      	ldr	r1, [pc, #28]	; (8001588 <main+0x68>)
 800156a:	4804      	ldr	r0, [pc, #16]	; (800157c <main+0x5c>)
 800156c:	f003 f8dd 	bl	800472a <HAL_UART_Transmit>
 8001570:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	08007a68 	.word	0x08007a68
 800157c:	20000628 	.word	0x20000628
 8001580:	2000061c 	.word	0x2000061c
 8001584:	08007a80 	.word	0x08007a80
 8001588:	08007a98 	.word	0x08007a98

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b094      	sub	sp, #80	; 0x50
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	2234      	movs	r2, #52	; 0x34
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f003 fbb8 	bl	8004d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <SystemClock_Config+0xd4>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a29      	ldr	r2, [pc, #164]	; (8001660 <SystemClock_Config+0xd4>)
 80015ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015be:	6413      	str	r3, [r2, #64]	; 0x40
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <SystemClock_Config+0xd4>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <SystemClock_Config+0xd8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015d8:	4a22      	ldr	r2, [pc, #136]	; (8001664 <SystemClock_Config+0xd8>)
 80015da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <SystemClock_Config+0xd8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f0:	2301      	movs	r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015f4:	2310      	movs	r3, #16
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f8:	2302      	movs	r3, #2
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015fc:	2300      	movs	r3, #0
 80015fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001600:	2308      	movs	r3, #8
 8001602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001604:	2332      	movs	r3, #50	; 0x32
 8001606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001608:	2304      	movs	r3, #4
 800160a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800160c:	2307      	movs	r3, #7
 800160e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001610:	2302      	movs	r3, #2
 8001612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4618      	mov	r0, r3
 800161a:	f002 faed 	bl	8003bf8 <HAL_RCC_OscConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001624:	f000 fae4 	bl	8001bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001628:	230f      	movs	r3, #15
 800162a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800162c:	2302      	movs	r3, #2
 800162e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001638:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800163a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f001 ffd8 	bl	80035fc <HAL_RCC_ClockConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001652:	f000 facd 	bl	8001bf0 <Error_Handler>
  }
}
 8001656:	bf00      	nop
 8001658:	3750      	adds	r7, #80	; 0x50
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000

08001668 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_I2C1_Init+0x50>)
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <MX_I2C1_Init+0x54>)
 8001670:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x58>)
 8001676:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_I2C1_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_I2C1_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_I2C1_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_I2C1_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_I2C1_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_I2C1_Init+0x50>)
 80016a6:	f000 ffe9 	bl	800267c <HAL_I2C_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b0:	f000 fa9e 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	2000066c 	.word	0x2000066c
 80016bc:	40005400 	.word	0x40005400
 80016c0:	000186a0 	.word	0x000186a0

080016c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016ca:	4a12      	ldr	r2, [pc, #72]	; (8001714 <MX_USART3_UART_Init+0x50>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80016ce:	4b10      	ldr	r3, [pc, #64]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016d0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80016d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_USART3_UART_Init+0x4c>)
 80016fc:	f002 ffc8 	bl	8004690 <HAL_UART_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001706:	f000 fa73 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000628 	.word	0x20000628
 8001714:	40004800 	.word	0x40004800

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <MX_GPIO_Init+0x7c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a17      	ldr	r2, [pc, #92]	; (8001794 <MX_GPIO_Init+0x7c>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_GPIO_Init+0x7c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_GPIO_Init+0x7c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a10      	ldr	r2, [pc, #64]	; (8001794 <MX_GPIO_Init+0x7c>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_GPIO_Init+0x7c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INT1_GPIO_Port, INT1_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2102      	movs	r1, #2
 800176a:	480b      	ldr	r0, [pc, #44]	; (8001798 <MX_GPIO_Init+0x80>)
 800176c:	f000 ff6c 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT1_Pin */
  GPIO_InitStruct.Pin = INT1_Pin;
 8001770:	2302      	movs	r3, #2
 8001772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT1_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	4619      	mov	r1, r3
 8001786:	4804      	ldr	r0, [pc, #16]	; (8001798 <MX_GPIO_Init+0x80>)
 8001788:	f000 fdca 	bl	8002320 <HAL_GPIO_Init>

}
 800178c:	bf00      	nop
 800178e:	3720      	adds	r7, #32
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800
 8001798:	40020400 	.word	0x40020400

0800179c <setup>:

/* USER CODE BEGIN 4 */

void setup(stmdev_ctx_t *dev_ctx)
	{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart3,"LISM330DLC Setup Starts\n\r", 27, HAL_MAX_DELAY);
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	221b      	movs	r2, #27
 80017aa:	493e      	ldr	r1, [pc, #248]	; (80018a4 <setup+0x108>)
 80017ac:	483e      	ldr	r0, [pc, #248]	; (80018a8 <setup+0x10c>)
 80017ae:	f002 ffbc 	bl	800472a <HAL_UART_Transmit>
	  /* Initialize mems driver interface */
	  dev_ctx->write_reg = write;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a3d      	ldr	r2, [pc, #244]	; (80018ac <setup+0x110>)
 80017b6:	601a      	str	r2, [r3, #0]
	  dev_ctx->read_reg = read;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a3d      	ldr	r2, [pc, #244]	; (80018b0 <setup+0x114>)
 80017bc:	605a      	str	r2, [r3, #4]
	  dev_ctx->handle = &SENSOR_BUS;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a3c      	ldr	r2, [pc, #240]	; (80018b4 <setup+0x118>)
 80017c2:	609a      	str	r2, [r3, #8]
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 80017c4:	200a      	movs	r0, #10
 80017c6:	f000 fca5 	bl	8002114 <HAL_Delay>
	  /* Check device ID */
	  ism330dlc_device_id_get(dev_ctx, &whoamI);
 80017ca:	493b      	ldr	r1, [pc, #236]	; (80018b8 <setup+0x11c>)
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fd8b 	bl	80012e8 <ism330dlc_device_id_get>

	  	  HAL_UART_Transmit(&huart3,"Checking Sensor Identity...", 27, HAL_MAX_DELAY);
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	221b      	movs	r2, #27
 80017d8:	4938      	ldr	r1, [pc, #224]	; (80018bc <setup+0x120>)
 80017da:	4833      	ldr	r0, [pc, #204]	; (80018a8 <setup+0x10c>)
 80017dc:	f002 ffa5 	bl	800472a <HAL_UART_Transmit>
	  if (whoamI != ISM330DLC_ID){
 80017e0:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <setup+0x11c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b6a      	cmp	r3, #106	; 0x6a
 80017e6:	d01e      	beq.n	8001826 <setup+0x8a>
		  HAL_UART_Transmit(&huart3,"NOT OK\n\r", 10, HAL_MAX_DELAY);
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	220a      	movs	r2, #10
 80017ee:	4934      	ldr	r1, [pc, #208]	; (80018c0 <setup+0x124>)
 80017f0:	482d      	ldr	r0, [pc, #180]	; (80018a8 <setup+0x10c>)
 80017f2:	f002 ff9a 	bl	800472a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3,"This Device is: " , 16, HAL_MAX_DELAY);
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	2210      	movs	r2, #16
 80017fc:	4931      	ldr	r1, [pc, #196]	; (80018c4 <setup+0x128>)
 80017fe:	482a      	ldr	r0, [pc, #168]	; (80018a8 <setup+0x10c>)
 8001800:	f002 ff93 	bl	800472a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3,whoamI, 2, HAL_MAX_DELAY);
 8001804:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <setup+0x11c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	2202      	movs	r2, #2
 8001810:	4825      	ldr	r0, [pc, #148]	; (80018a8 <setup+0x10c>)
 8001812:	f002 ff8a 	bl	800472a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3,"\n\rProgram Terminated\n\r", 26, HAL_MAX_DELAY);
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	221a      	movs	r2, #26
 800181c:	492a      	ldr	r1, [pc, #168]	; (80018c8 <setup+0x12c>)
 800181e:	4822      	ldr	r0, [pc, #136]	; (80018a8 <setup+0x10c>)
 8001820:	f002 ff83 	bl	800472a <HAL_UART_Transmit>
		  while(1);
 8001824:	e7fe      	b.n	8001824 <setup+0x88>
	  }
	  	  HAL_UART_Transmit(&huart3,"OK\n\r", 6, HAL_MAX_DELAY);
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	2206      	movs	r2, #6
 800182c:	4927      	ldr	r1, [pc, #156]	; (80018cc <setup+0x130>)
 800182e:	481e      	ldr	r0, [pc, #120]	; (80018a8 <setup+0x10c>)
 8001830:	f002 ff7b 	bl	800472a <HAL_UART_Transmit>

	  /* Restore default configuration */
	  ism330dlc_reset_set(dev_ctx, PROPERTY_ENABLE);
 8001834:	2101      	movs	r1, #1
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fd67 	bl	800130a <ism330dlc_reset_set>

	  do {
		ism330dlc_reset_get(dev_ctx, &rst);
 800183c:	4924      	ldr	r1, [pc, #144]	; (80018d0 <setup+0x134>)
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff fd89 	bl	8001356 <ism330dlc_reset_get>
	  } while (rst);
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <setup+0x134>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f7      	bne.n	800183c <setup+0xa0>


	  /* Enable Block Data Update */
	    ism330dlc_block_data_update_set(dev_ctx, PROPERTY_ENABLE);
 800184c:	2101      	movs	r1, #1
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fc5a 	bl	8001108 <ism330dlc_block_data_update_set>
	    /* Set Output Data Rate */
	    ism330dlc_xl_data_rate_set(dev_ctx, ISM330DLC_XL_ODR_12Hz5);
 8001854:	2101      	movs	r1, #1
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fbe4 	bl	8001024 <ism330dlc_xl_data_rate_set>
	    ism330dlc_gy_data_rate_set(dev_ctx, ISM330DLC_GY_ODR_12Hz5);
 800185c:	2101      	movs	r1, #1
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff fc2c 	bl	80010bc <ism330dlc_gy_data_rate_set>
	    /* Set full scale */
	    ism330dlc_xl_full_scale_set(dev_ctx, ISM330DLC_2g);
 8001864:	2100      	movs	r1, #0
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff fbb6 	bl	8000fd8 <ism330dlc_xl_full_scale_set>
	    ism330dlc_gy_full_scale_set(dev_ctx, ISM330DLC_2000dps);
 800186c:	2106      	movs	r1, #6
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fbfe 	bl	8001070 <ism330dlc_gy_full_scale_set>
	    /* Configure filtering chain(No aux interface) */
	    /* Accelerometer - analog filter */
	    ism330dlc_xl_filter_analog_set(dev_ctx, ISM330DLC_XL_ANA_BW_400Hz);
 8001874:	2101      	movs	r1, #1
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff fd86 	bl	8001388 <ism330dlc_xl_filter_analog_set>
	    /* Accelerometer - LPF1 path ( LPF2 not used )*/
	    //ism330dlc_xl_lp1_bandwidth_set(dev_ctx, ISM330DLC_XL_LP1_ODR_DIV_4);
	    /* Accelerometer - LPF1 + LPF2 path */
	    ism330dlc_xl_lp2_bandwidth_set(dev_ctx,
 800187c:	2111      	movs	r1, #17
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fda8 	bl	80013d4 <ism330dlc_xl_lp2_bandwidth_set>
	                                   ISM330DLC_XL_LOW_NOISE_LP_ODR_DIV_100);
	    /* Accelerometer - High Pass / Slope path */
	    //ism330dlc_xl_reference_mode_set(&dev_ctx, PROPERTY_DISABLE);
	    //ism330dlc_xl_hp_bandwidth_set(&dev_ctx, ISM330DLC_XL_HP_ODR_DIV_100);
	    /* Gyroscope - filtering chain */
	    ism330dlc_gy_band_pass_set(dev_ctx, ISM330DLC_HP_260mHz_LP1_STRONG);
 8001884:	21a8      	movs	r1, #168	; 0xa8
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff fddb 	bl	8001442 <ism330dlc_gy_band_pass_set>
	    HAL_UART_Transmit(&huart3,"LISM330DLC Setup Ends\n\r", 25, HAL_MAX_DELAY);
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
 8001890:	2219      	movs	r2, #25
 8001892:	4910      	ldr	r1, [pc, #64]	; (80018d4 <setup+0x138>)
 8001894:	4804      	ldr	r0, [pc, #16]	; (80018a8 <setup+0x10c>)
 8001896:	f002 ff48 	bl	800472a <HAL_UART_Transmit>
	}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	08007ab0 	.word	0x08007ab0
 80018a8:	20000628 	.word	0x20000628
 80018ac:	08001b31 	.word	0x08001b31
 80018b0:	08001b6b 	.word	0x08001b6b
 80018b4:	2000066c 	.word	0x2000066c
 80018b8:	20000224 	.word	0x20000224
 80018bc:	08007acc 	.word	0x08007acc
 80018c0:	08007ae8 	.word	0x08007ae8
 80018c4:	08007af4 	.word	0x08007af4
 80018c8:	08007b08 	.word	0x08007b08
 80018cc:	08007b20 	.word	0x08007b20
 80018d0:	20000225 	.word	0x20000225
 80018d4:	08007b28 	.word	0x08007b28

080018d8 <lsm6dsr_read_data_polling>:

void lsm6dsr_read_data_polling(stmdev_ctx_t *dev_ctx)
{
 80018d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018dc:	b088      	sub	sp, #32
 80018de:	af04      	add	r7, sp, #16
 80018e0:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,"lism330dlc_read_data_polling called\n\r", 39, HAL_MAX_DELAY);
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	2227      	movs	r2, #39	; 0x27
 80018e8:	4981      	ldr	r1, [pc, #516]	; (8001af0 <lsm6dsr_read_data_polling+0x218>)
 80018ea:	4882      	ldr	r0, [pc, #520]	; (8001af4 <lsm6dsr_read_data_polling+0x21c>)
 80018ec:	f002 ff1d 	bl	800472a <HAL_UART_Transmit>
	  /* Read samples in polling mode */
	  	  HAL_UART_Transmit(&huart3,"Data reading loop starts in\n\r", 31, HAL_MAX_DELAY);
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
 80018f4:	221f      	movs	r2, #31
 80018f6:	4980      	ldr	r1, [pc, #512]	; (8001af8 <lsm6dsr_read_data_polling+0x220>)
 80018f8:	487e      	ldr	r0, [pc, #504]	; (8001af4 <lsm6dsr_read_data_polling+0x21c>)
 80018fa:	f002 ff16 	bl	800472a <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 80018fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001902:	f000 fc07 	bl	8002114 <HAL_Delay>
	  	  HAL_UART_Transmit(&huart3,"3", 3, HAL_MAX_DELAY);
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	2203      	movs	r2, #3
 800190c:	497b      	ldr	r1, [pc, #492]	; (8001afc <lsm6dsr_read_data_polling+0x224>)
 800190e:	4879      	ldr	r0, [pc, #484]	; (8001af4 <lsm6dsr_read_data_polling+0x21c>)
 8001910:	f002 ff0b 	bl	800472a <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 8001914:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001918:	f000 fbfc 	bl	8002114 <HAL_Delay>
	  	  HAL_UART_Transmit(&huart3,"\r2", 3, HAL_MAX_DELAY);
 800191c:	f04f 33ff 	mov.w	r3, #4294967295
 8001920:	2203      	movs	r2, #3
 8001922:	4977      	ldr	r1, [pc, #476]	; (8001b00 <lsm6dsr_read_data_polling+0x228>)
 8001924:	4873      	ldr	r0, [pc, #460]	; (8001af4 <lsm6dsr_read_data_polling+0x21c>)
 8001926:	f002 ff00 	bl	800472a <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 800192a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800192e:	f000 fbf1 	bl	8002114 <HAL_Delay>
	  	  HAL_UART_Transmit(&huart3,"\r1\n\r", 3, HAL_MAX_DELAY);
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	2203      	movs	r2, #3
 8001938:	4972      	ldr	r1, [pc, #456]	; (8001b04 <lsm6dsr_read_data_polling+0x22c>)
 800193a:	486e      	ldr	r0, [pc, #440]	; (8001af4 <lsm6dsr_read_data_polling+0x21c>)
 800193c:	f002 fef5 	bl	800472a <HAL_UART_Transmit>
	  	  HAL_Delay(1000);
 8001940:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001944:	f000 fbe6 	bl	8002114 <HAL_Delay>

	  while (1) {
		  /* Read output only if new value is available */
		  ism330dlc_reg_t reg;
		  ism330dlc_status_reg_get(dev_ctx, &reg.status_reg);
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	4619      	mov	r1, r3
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fc00 	bl	8001154 <ism330dlc_status_reg_get>

		      if (reg.status_reg.xlda) {
 8001954:	7b3b      	ldrb	r3, [r7, #12]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d048      	beq.n	80019f2 <lsm6dsr_read_data_polling+0x11a>
		        /* Read magnetic field data */
		        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001960:	2206      	movs	r2, #6
 8001962:	2100      	movs	r1, #0
 8001964:	4868      	ldr	r0, [pc, #416]	; (8001b08 <lsm6dsr_read_data_polling+0x230>)
 8001966:	f003 f9d3 	bl	8004d10 <memset>
		        ism330dlc_acceleration_raw_get(dev_ctx, data_raw_acceleration);
 800196a:	4967      	ldr	r1, [pc, #412]	; (8001b08 <lsm6dsr_read_data_polling+0x230>)
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff fc70 	bl	8001252 <ism330dlc_acceleration_raw_get>
		        acceleration_mg[0] = ism330dlc_from_fs2g_to_mg(
 8001972:	4b65      	ldr	r3, [pc, #404]	; (8001b08 <lsm6dsr_read_data_polling+0x230>)
 8001974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fae1 	bl	8000f40 <ism330dlc_from_fs2g_to_mg>
 800197e:	eef0 7a40 	vmov.f32	s15, s0
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <lsm6dsr_read_data_polling+0x234>)
 8001984:	edc3 7a00 	vstr	s15, [r3]
		                               data_raw_acceleration[0]);
		        acceleration_mg[1] = ism330dlc_from_fs2g_to_mg(
 8001988:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <lsm6dsr_read_data_polling+0x230>)
 800198a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fad6 	bl	8000f40 <ism330dlc_from_fs2g_to_mg>
 8001994:	eef0 7a40 	vmov.f32	s15, s0
 8001998:	4b5c      	ldr	r3, [pc, #368]	; (8001b0c <lsm6dsr_read_data_polling+0x234>)
 800199a:	edc3 7a01 	vstr	s15, [r3, #4]
		                               data_raw_acceleration[1]);
		        acceleration_mg[2] = ism330dlc_from_fs2g_to_mg(
 800199e:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <lsm6dsr_read_data_polling+0x230>)
 80019a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff facb 	bl	8000f40 <ism330dlc_from_fs2g_to_mg>
 80019aa:	eef0 7a40 	vmov.f32	s15, s0
 80019ae:	4b57      	ldr	r3, [pc, #348]	; (8001b0c <lsm6dsr_read_data_polling+0x234>)
 80019b0:	edc3 7a02 	vstr	s15, [r3, #8]
		                               data_raw_acceleration[2]);
		        sprintf((char *)tx_buffer,
		                "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",
		                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80019b4:	4b55      	ldr	r3, [pc, #340]	; (8001b0c <lsm6dsr_read_data_polling+0x234>)
 80019b6:	681b      	ldr	r3, [r3, #0]
		        sprintf((char *)tx_buffer,
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fde5 	bl	8000588 <__aeabi_f2d>
 80019be:	4680      	mov	r8, r0
 80019c0:	4689      	mov	r9, r1
		                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80019c2:	4b52      	ldr	r3, [pc, #328]	; (8001b0c <lsm6dsr_read_data_polling+0x234>)
 80019c4:	685b      	ldr	r3, [r3, #4]
		        sprintf((char *)tx_buffer,
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdde 	bl	8000588 <__aeabi_f2d>
 80019cc:	4604      	mov	r4, r0
 80019ce:	460d      	mov	r5, r1
		                acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80019d0:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <lsm6dsr_read_data_polling+0x234>)
 80019d2:	689b      	ldr	r3, [r3, #8]
		        sprintf((char *)tx_buffer,
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fdd7 	bl	8000588 <__aeabi_f2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019e2:	e9cd 4500 	strd	r4, r5, [sp]
 80019e6:	4642      	mov	r2, r8
 80019e8:	464b      	mov	r3, r9
 80019ea:	4949      	ldr	r1, [pc, #292]	; (8001b10 <lsm6dsr_read_data_polling+0x238>)
 80019ec:	4849      	ldr	r0, [pc, #292]	; (8001b14 <lsm6dsr_read_data_polling+0x23c>)
 80019ee:	f003 fe01 	bl	80055f4 <siprintf>
		        //tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
		      }

		      if (reg.status_reg.gda) {
 80019f2:	7b3b      	ldrb	r3, [r7, #12]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d051      	beq.n	8001aa2 <lsm6dsr_read_data_polling+0x1ca>
		        /* Read magnetic field data */
		        memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 80019fe:	2206      	movs	r2, #6
 8001a00:	2100      	movs	r1, #0
 8001a02:	4845      	ldr	r0, [pc, #276]	; (8001b18 <lsm6dsr_read_data_polling+0x240>)
 8001a04:	f003 f984 	bl	8004d10 <memset>
		        ism330dlc_angular_rate_raw_get(dev_ctx, data_raw_angular_rate);
 8001a08:	4943      	ldr	r1, [pc, #268]	; (8001b18 <lsm6dsr_read_data_polling+0x240>)
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fbd6 	bl	80011bc <ism330dlc_angular_rate_raw_get>
		        angular_rate_mdps[0] = ism330dlc_from_fs2000dps_to_mdps(
 8001a10:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <lsm6dsr_read_data_polling+0x240>)
 8001a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff faaa 	bl	8000f70 <ism330dlc_from_fs2000dps_to_mdps>
 8001a1c:	eef0 7a40 	vmov.f32	s15, s0
 8001a20:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <lsm6dsr_read_data_polling+0x244>)
 8001a22:	edc3 7a00 	vstr	s15, [r3]
		                                 data_raw_angular_rate[0]);
		        angular_rate_mdps[1] = ism330dlc_from_fs2000dps_to_mdps(
 8001a26:	4b3c      	ldr	r3, [pc, #240]	; (8001b18 <lsm6dsr_read_data_polling+0x240>)
 8001a28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fa9f 	bl	8000f70 <ism330dlc_from_fs2000dps_to_mdps>
 8001a32:	eef0 7a40 	vmov.f32	s15, s0
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <lsm6dsr_read_data_polling+0x244>)
 8001a38:	edc3 7a01 	vstr	s15, [r3, #4]
		                                 data_raw_angular_rate[1]);
		        angular_rate_mdps[2] = ism330dlc_from_fs2000dps_to_mdps(
 8001a3c:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <lsm6dsr_read_data_polling+0x240>)
 8001a3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fa94 	bl	8000f70 <ism330dlc_from_fs2000dps_to_mdps>
 8001a48:	eef0 7a40 	vmov.f32	s15, s0
 8001a4c:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <lsm6dsr_read_data_polling+0x244>)
 8001a4e:	edc3 7a02 	vstr	s15, [r3, #8]
		                                 data_raw_angular_rate[2]);
		        sprintf((char *)tx_buffer,
		                "Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",
		                angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001a52:	4b32      	ldr	r3, [pc, #200]	; (8001b1c <lsm6dsr_read_data_polling+0x244>)
 8001a54:	681b      	ldr	r3, [r3, #0]
		        sprintf((char *)tx_buffer,
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd96 	bl	8000588 <__aeabi_f2d>
 8001a5c:	4680      	mov	r8, r0
 8001a5e:	4689      	mov	r9, r1
		                angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001a60:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <lsm6dsr_read_data_polling+0x244>)
 8001a62:	685b      	ldr	r3, [r3, #4]
		        sprintf((char *)tx_buffer,
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd8f 	bl	8000588 <__aeabi_f2d>
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	460d      	mov	r5, r1
		                angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <lsm6dsr_read_data_polling+0x244>)
 8001a70:	689b      	ldr	r3, [r3, #8]
		        sprintf((char *)tx_buffer,
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd88 	bl	8000588 <__aeabi_f2d>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a80:	e9cd 4500 	strd	r4, r5, [sp]
 8001a84:	4642      	mov	r2, r8
 8001a86:	464b      	mov	r3, r9
 8001a88:	4925      	ldr	r1, [pc, #148]	; (8001b20 <lsm6dsr_read_data_polling+0x248>)
 8001a8a:	4822      	ldr	r0, [pc, #136]	; (8001b14 <lsm6dsr_read_data_polling+0x23c>)
 8001a8c:	f003 fdb2 	bl	80055f4 <siprintf>
		        tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
 8001a90:	4820      	ldr	r0, [pc, #128]	; (8001b14 <lsm6dsr_read_data_polling+0x23c>)
 8001a92:	f7fe fbbd 	bl	8000210 <strlen>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	481d      	ldr	r0, [pc, #116]	; (8001b14 <lsm6dsr_read_data_polling+0x23c>)
 8001a9e:	f000 f881 	bl	8001ba4 <tx_com>
		      }

		      if (reg.status_reg.tda) {
 8001aa2:	7b3b      	ldrb	r3, [r7, #12]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d01c      	beq.n	8001ae8 <lsm6dsr_read_data_polling+0x210>
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <lsm6dsr_read_data_polling+0x24c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	801a      	strh	r2, [r3, #0]
		        /* Read temperature data */
		        memset( &data_raw_temperature, 0x00, sizeof(int16_t));
		        ism330dlc_temperature_raw_get(dev_ctx, &data_raw_temperature);
 8001ab4:	491b      	ldr	r1, [pc, #108]	; (8001b24 <lsm6dsr_read_data_polling+0x24c>)
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff fb5d 	bl	8001176 <ism330dlc_temperature_raw_get>
		        temperature_degC = ism330dlc_from_lsb_to_celsius(
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <lsm6dsr_read_data_polling+0x24c>)
 8001abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fa6c 	bl	8000fa0 <ism330dlc_from_lsb_to_celsius>
 8001ac8:	eef0 7a40 	vmov.f32	s15, s0
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <lsm6dsr_read_data_polling+0x250>)
 8001ace:	edc3 7a00 	vstr	s15, [r3]
		                             data_raw_temperature );
		        sprintf((char *)tx_buffer, "Temperature [degC]:%6.2f\r\n",
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <lsm6dsr_read_data_polling+0x250>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd56 	bl	8000588 <__aeabi_f2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4912      	ldr	r1, [pc, #72]	; (8001b2c <lsm6dsr_read_data_polling+0x254>)
 8001ae2:	480c      	ldr	r0, [pc, #48]	; (8001b14 <lsm6dsr_read_data_polling+0x23c>)
 8001ae4:	f003 fd86 	bl	80055f4 <siprintf>
		                temperature_degC );
		        //tx_com( tx_buffer, strlen( (char const *)tx_buffer ) );
		      }

	    HAL_Delay(100);
 8001ae8:	2064      	movs	r0, #100	; 0x64
 8001aea:	f000 fb13 	bl	8002114 <HAL_Delay>
	  while (1) {
 8001aee:	e72b      	b.n	8001948 <lsm6dsr_read_data_polling+0x70>
 8001af0:	08007b40 	.word	0x08007b40
 8001af4:	20000628 	.word	0x20000628
 8001af8:	08007b68 	.word	0x08007b68
 8001afc:	08007b88 	.word	0x08007b88
 8001b00:	08007b8c 	.word	0x08007b8c
 8001b04:	08007b90 	.word	0x08007b90
 8001b08:	200001f8 	.word	0x200001f8
 8001b0c:	20000208 	.word	0x20000208
 8001b10:	08007b98 	.word	0x08007b98
 8001b14:	20000228 	.word	0x20000228
 8001b18:	20000200 	.word	0x20000200
 8001b1c:	20000214 	.word	0x20000214
 8001b20:	08007bc0 	.word	0x08007bc0
 8001b24:	20000206 	.word	0x20000206
 8001b28:	20000220 	.word	0x20000220
 8001b2c:	08007be8 	.word	0x08007be8

08001b30 <write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af04      	add	r7, sp, #16
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	607a      	str	r2, [r7, #4]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	72fb      	strb	r3, [r7, #11]
 8001b40:	4613      	mov	r3, r2
 8001b42:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, ISM330DLC_I2C_ADD_L, reg,
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4c:	9302      	str	r3, [sp, #8]
 8001b4e:	893b      	ldrh	r3, [r7, #8]
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2301      	movs	r3, #1
 8001b58:	21d5      	movs	r1, #213	; 0xd5
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 fed2 	bl	8002904 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b088      	sub	sp, #32
 8001b6e:	af04      	add	r7, sp, #16
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	461a      	mov	r2, r3
 8001b76:	460b      	mov	r3, r1
 8001b78:	72fb      	strb	r3, [r7, #11]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, ISM330DLC_I2C_ADD_L, reg,
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	893b      	ldrh	r3, [r7, #8]
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2301      	movs	r3, #1
 8001b92:	21d5      	movs	r1, #213	; 0xd5
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 ffaf 	bl	8002af8 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart3, tx_buffer, len, 1000);
 8001bb0:	887a      	ldrh	r2, [r7, #2]
 8001bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4803      	ldr	r0, [pc, #12]	; (8001bc8 <tx_com+0x24>)
 8001bba:	f002 fdb6 	bl	800472a <HAL_UART_Transmit>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000628 	.word	0x20000628

08001bcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d101      	bne.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bde:	f000 fa79 	bl	80020d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40010000 	.word	0x40010000

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <Error_Handler+0x8>
	...

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <HAL_I2C_MspInit+0x84>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d12c      	bne.n	8001cc8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_I2C_MspInit+0x88>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_I2C_MspInit+0x88>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_I2C_MspInit+0x88>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c90:	2312      	movs	r3, #18
 8001c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480c      	ldr	r0, [pc, #48]	; (8001cd8 <HAL_I2C_MspInit+0x8c>)
 8001ca8:	f000 fb3a 	bl	8002320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_I2C_MspInit+0x88>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	4a07      	ldr	r2, [pc, #28]	; (8001cd4 <HAL_I2C_MspInit+0x88>)
 8001cb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cba:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_I2C_MspInit+0x88>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40005400 	.word	0x40005400
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020400 	.word	0x40020400

08001cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	; 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	; (8001d60 <HAL_UART_MspInit+0x84>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d12c      	bne.n	8001d58 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a17      	ldr	r2, [pc, #92]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d24:	f043 0308 	orr.w	r3, r3, #8
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_UART_MspInit+0x88>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_UART_MspInit+0x8c>)
 8001d54:	f000 fae4 	bl	8002320 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3728      	adds	r7, #40	; 0x28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40004800 	.word	0x40004800
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020c00 	.word	0x40020c00

08001d6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	; 0x30
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	2019      	movs	r0, #25
 8001d82:	f000 faa3 	bl	80022cc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d86:	2019      	movs	r0, #25
 8001d88:	f000 fabc 	bl	8002304 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <HAL_InitTick+0xa4>)
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	4a1e      	ldr	r2, [pc, #120]	; (8001e10 <HAL_InitTick+0xa4>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9c:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <HAL_InitTick+0xa4>)
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001da8:	f107 0210 	add.w	r2, r7, #16
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fd3c 	bl	8003830 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001db8:	f001 fd26 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc4:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <HAL_InitTick+0xa8>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0c9b      	lsrs	r3, r3, #18
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <HAL_InitTick+0xac>)
 8001dd2:	4a12      	ldr	r2, [pc, #72]	; (8001e1c <HAL_InitTick+0xb0>)
 8001dd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_InitTick+0xac>)
 8001dd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ddc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001dde:	4a0e      	ldr	r2, [pc, #56]	; (8001e18 <HAL_InitTick+0xac>)
 8001de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_InitTick+0xac>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_InitTick+0xac>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001df0:	4809      	ldr	r0, [pc, #36]	; (8001e18 <HAL_InitTick+0xac>)
 8001df2:	f002 f99f 	bl	8004134 <HAL_TIM_Base_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d104      	bne.n	8001e06 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001dfc:	4806      	ldr	r0, [pc, #24]	; (8001e18 <HAL_InitTick+0xac>)
 8001dfe:	f002 f9f3 	bl	80041e8 <HAL_TIM_Base_Start_IT>
 8001e02:	4603      	mov	r3, r0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3730      	adds	r7, #48	; 0x30
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	431bde83 	.word	0x431bde83
 8001e18:	200006c0 	.word	0x200006c0
 8001e1c:	40010000 	.word	0x40010000

08001e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <NMI_Handler+0x4>

08001e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <MemManage_Handler+0x4>

08001e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
	...

08001e78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e7e:	f002 fa23 	bl	80042c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200006c0 	.word	0x200006c0

08001e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
	return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_kill>:

int _kill(int pid, int sig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ea6:	f002 ff09 	bl	8004cbc <__errno>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2216      	movs	r2, #22
 8001eae:	601a      	str	r2, [r3, #0]
	return -1;
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_exit>:

void _exit (int status)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ffe7 	bl	8001e9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ece:	e7fe      	b.n	8001ece <_exit+0x12>

08001ed0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e00a      	b.n	8001ef8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ee2:	f3af 8000 	nop.w
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	60ba      	str	r2, [r7, #8]
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbf0      	blt.n	8001ee2 <_read+0x12>
	}

return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e009      	b.n	8001f30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf1      	blt.n	8001f1c <_write+0x12>
	}
	return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_close>:

int _close(int file)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
	return -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_isatty>:

int _isatty(int file)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
	return 1;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <_sbrk+0x5c>)
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <_sbrk+0x60>)
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <_sbrk+0x64>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <_sbrk+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d207      	bcs.n	8001fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fdc:	f002 fe6e 	bl	8004cbc <__errno>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	e009      	b.n	8002000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <_sbrk+0x64>)
 8001ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20020000 	.word	0x20020000
 800200c:	00000400 	.word	0x00000400
 8002010:	20000610 	.word	0x20000610
 8002014:	20000720 	.word	0x20000720

08002018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <SystemInit+0x20>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <SystemInit+0x20>)
 8002024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800203c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002074 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002042:	490e      	ldr	r1, [pc, #56]	; (800207c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002044:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002058:	4c0b      	ldr	r4, [pc, #44]	; (8002088 <LoopFillZerobss+0x26>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002066:	f7ff ffd7 	bl	8002018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800206a:	f002 fe2d 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206e:	f7ff fa57 	bl	8001520 <main>
  bx  lr    
 8002072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800207c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002080:	0800800c 	.word	0x0800800c
  ldr r2, =_sbss
 8002084:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002088:	2000071c 	.word	0x2000071c

0800208c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800208c:	e7fe      	b.n	800208c <ADC_IRQHandler>
	...

08002090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_Init+0x40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <HAL_Init+0x40>)
 800209a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a0:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0a      	ldr	r2, [pc, #40]	; (80020d0 <HAL_Init+0x40>)
 80020a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_Init+0x40>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b8:	2003      	movs	r0, #3
 80020ba:	f000 f8fc 	bl	80022b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020be:	200f      	movs	r0, #15
 80020c0:	f7ff fe54 	bl	8001d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c4:	f7ff fd9a 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023c00 	.word	0x40023c00

080020d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_IncTick+0x20>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_IncTick+0x24>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <HAL_IncTick+0x24>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000008 	.word	0x20000008
 80020f8:	20000708 	.word	0x20000708

080020fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_GetTick+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000708 	.word	0x20000708

08002114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff ffee 	bl	80020fc <HAL_GetTick>
 8002120:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d005      	beq.n	800213a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_Delay+0x44>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4413      	add	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800213a:	bf00      	nop
 800213c:	f7ff ffde 	bl	80020fc <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	429a      	cmp	r2, r3
 800214a:	d8f7      	bhi.n	800213c <HAL_Delay+0x28>
  {
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000008 	.word	0x20000008

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60d3      	str	r3, [r2, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	db0b      	blt.n	80021ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <__NVIC_EnableIRQ+0x38>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2001      	movs	r0, #1
 80021e2:	fa00 f202 	lsl.w	r2, r0, r2
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100

080021fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	2b00      	cmp	r3, #0
 800220e:	db0a      	blt.n	8002226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	490c      	ldr	r1, [pc, #48]	; (8002248 <__NVIC_SetPriority+0x4c>)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	440b      	add	r3, r1
 8002220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002224:	e00a      	b.n	800223c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4908      	ldr	r1, [pc, #32]	; (800224c <__NVIC_SetPriority+0x50>)
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	3b04      	subs	r3, #4
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	440b      	add	r3, r1
 800223a:	761a      	strb	r2, [r3, #24]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f1c3 0307 	rsb	r3, r3, #7
 800226a:	2b04      	cmp	r3, #4
 800226c:	bf28      	it	cs
 800226e:	2304      	movcs	r3, #4
 8002270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3304      	adds	r3, #4
 8002276:	2b06      	cmp	r3, #6
 8002278:	d902      	bls.n	8002280 <NVIC_EncodePriority+0x30>
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3b03      	subs	r3, #3
 800227e:	e000      	b.n	8002282 <NVIC_EncodePriority+0x32>
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	401a      	ands	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43d9      	mvns	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	4313      	orrs	r3, r2
         );
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ff4c 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022de:	f7ff ff61 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 80022e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	6978      	ldr	r0, [r7, #20]
 80022ea:	f7ff ffb1 	bl	8002250 <NVIC_EncodePriority>
 80022ee:	4602      	mov	r2, r0
 80022f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff80 	bl	80021fc <__NVIC_SetPriority>
}
 80022fc:	bf00      	nop
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff54 	bl	80021c0 <__NVIC_EnableIRQ>
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	e165      	b.n	8002608 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800233c:	2201      	movs	r2, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	429a      	cmp	r2, r3
 8002356:	f040 8154 	bne.w	8002602 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b01      	cmp	r3, #1
 8002364:	d005      	beq.n	8002372 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800236e:	2b02      	cmp	r3, #2
 8002370:	d130      	bne.n	80023d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a8:	2201      	movs	r2, #1
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	091b      	lsrs	r3, r3, #4
 80023be:	f003 0201 	and.w	r2, r3, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d017      	beq.n	8002410 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d123      	bne.n	8002464 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	08da      	lsrs	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	08da      	lsrs	r2, r3, #3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3208      	adds	r2, #8
 800245e:	69b9      	ldr	r1, [r7, #24]
 8002460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	2203      	movs	r2, #3
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0203 	and.w	r2, r3, #3
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80ae 	beq.w	8002602 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	4b5d      	ldr	r3, [pc, #372]	; (8002620 <HAL_GPIO_Init+0x300>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4a5c      	ldr	r2, [pc, #368]	; (8002620 <HAL_GPIO_Init+0x300>)
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	4b5a      	ldr	r3, [pc, #360]	; (8002620 <HAL_GPIO_Init+0x300>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c2:	4a58      	ldr	r2, [pc, #352]	; (8002624 <HAL_GPIO_Init+0x304>)
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	220f      	movs	r2, #15
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4f      	ldr	r2, [pc, #316]	; (8002628 <HAL_GPIO_Init+0x308>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d025      	beq.n	800253a <HAL_GPIO_Init+0x21a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4e      	ldr	r2, [pc, #312]	; (800262c <HAL_GPIO_Init+0x30c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01f      	beq.n	8002536 <HAL_GPIO_Init+0x216>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4d      	ldr	r2, [pc, #308]	; (8002630 <HAL_GPIO_Init+0x310>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d019      	beq.n	8002532 <HAL_GPIO_Init+0x212>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4c      	ldr	r2, [pc, #304]	; (8002634 <HAL_GPIO_Init+0x314>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d013      	beq.n	800252e <HAL_GPIO_Init+0x20e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4b      	ldr	r2, [pc, #300]	; (8002638 <HAL_GPIO_Init+0x318>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00d      	beq.n	800252a <HAL_GPIO_Init+0x20a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4a      	ldr	r2, [pc, #296]	; (800263c <HAL_GPIO_Init+0x31c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d007      	beq.n	8002526 <HAL_GPIO_Init+0x206>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a49      	ldr	r2, [pc, #292]	; (8002640 <HAL_GPIO_Init+0x320>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <HAL_GPIO_Init+0x202>
 800251e:	2306      	movs	r3, #6
 8002520:	e00c      	b.n	800253c <HAL_GPIO_Init+0x21c>
 8002522:	2307      	movs	r3, #7
 8002524:	e00a      	b.n	800253c <HAL_GPIO_Init+0x21c>
 8002526:	2305      	movs	r3, #5
 8002528:	e008      	b.n	800253c <HAL_GPIO_Init+0x21c>
 800252a:	2304      	movs	r3, #4
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x21c>
 800252e:	2303      	movs	r3, #3
 8002530:	e004      	b.n	800253c <HAL_GPIO_Init+0x21c>
 8002532:	2302      	movs	r3, #2
 8002534:	e002      	b.n	800253c <HAL_GPIO_Init+0x21c>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_GPIO_Init+0x21c>
 800253a:	2300      	movs	r3, #0
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	f002 0203 	and.w	r2, r2, #3
 8002542:	0092      	lsls	r2, r2, #2
 8002544:	4093      	lsls	r3, r2
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800254c:	4935      	ldr	r1, [pc, #212]	; (8002624 <HAL_GPIO_Init+0x304>)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	3302      	adds	r3, #2
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800255a:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <HAL_GPIO_Init+0x324>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800257e:	4a31      	ldr	r2, [pc, #196]	; (8002644 <HAL_GPIO_Init+0x324>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002584:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <HAL_GPIO_Init+0x324>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a8:	4a26      	ldr	r2, [pc, #152]	; (8002644 <HAL_GPIO_Init+0x324>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ae:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_GPIO_Init+0x324>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d2:	4a1c      	ldr	r2, [pc, #112]	; (8002644 <HAL_GPIO_Init+0x324>)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d8:	4b1a      	ldr	r3, [pc, #104]	; (8002644 <HAL_GPIO_Init+0x324>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025fc:	4a11      	ldr	r2, [pc, #68]	; (8002644 <HAL_GPIO_Init+0x324>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3301      	adds	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b0f      	cmp	r3, #15
 800260c:	f67f ae96 	bls.w	800233c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	3724      	adds	r7, #36	; 0x24
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40023800 	.word	0x40023800
 8002624:	40013800 	.word	0x40013800
 8002628:	40020000 	.word	0x40020000
 800262c:	40020400 	.word	0x40020400
 8002630:	40020800 	.word	0x40020800
 8002634:	40020c00 	.word	0x40020c00
 8002638:	40021000 	.word	0x40021000
 800263c:	40021400 	.word	0x40021400
 8002640:	40021800 	.word	0x40021800
 8002644:	40013c00 	.word	0x40013c00

08002648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
 8002654:	4613      	mov	r3, r2
 8002656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002664:	e003      	b.n	800266e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	041a      	lsls	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	619a      	str	r2, [r3, #24]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e12b      	b.n	80028e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fad2 	bl	8001c4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2224      	movs	r2, #36	; 0x24
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0201 	bic.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026e0:	f001 f87e 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 80026e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4a81      	ldr	r2, [pc, #516]	; (80028f0 <HAL_I2C_Init+0x274>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d807      	bhi.n	8002700 <HAL_I2C_Init+0x84>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a80      	ldr	r2, [pc, #512]	; (80028f4 <HAL_I2C_Init+0x278>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	bf94      	ite	ls
 80026f8:	2301      	movls	r3, #1
 80026fa:	2300      	movhi	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	e006      	b.n	800270e <HAL_I2C_Init+0x92>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4a7d      	ldr	r2, [pc, #500]	; (80028f8 <HAL_I2C_Init+0x27c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	bf94      	ite	ls
 8002708:	2301      	movls	r3, #1
 800270a:	2300      	movhi	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e0e7      	b.n	80028e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4a78      	ldr	r2, [pc, #480]	; (80028fc <HAL_I2C_Init+0x280>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0c9b      	lsrs	r3, r3, #18
 8002720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4a6a      	ldr	r2, [pc, #424]	; (80028f0 <HAL_I2C_Init+0x274>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d802      	bhi.n	8002750 <HAL_I2C_Init+0xd4>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3301      	adds	r3, #1
 800274e:	e009      	b.n	8002764 <HAL_I2C_Init+0xe8>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	4a69      	ldr	r2, [pc, #420]	; (8002900 <HAL_I2C_Init+0x284>)
 800275c:	fba2 2303 	umull	r2, r3, r2, r3
 8002760:	099b      	lsrs	r3, r3, #6
 8002762:	3301      	adds	r3, #1
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	430b      	orrs	r3, r1
 800276a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002776:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	495c      	ldr	r1, [pc, #368]	; (80028f0 <HAL_I2C_Init+0x274>)
 8002780:	428b      	cmp	r3, r1
 8002782:	d819      	bhi.n	80027b8 <HAL_I2C_Init+0x13c>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e59      	subs	r1, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002792:	1c59      	adds	r1, r3, #1
 8002794:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002798:	400b      	ands	r3, r1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_I2C_Init+0x138>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1e59      	subs	r1, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b2:	e051      	b.n	8002858 <HAL_I2C_Init+0x1dc>
 80027b4:	2304      	movs	r3, #4
 80027b6:	e04f      	b.n	8002858 <HAL_I2C_Init+0x1dc>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d111      	bne.n	80027e4 <HAL_I2C_Init+0x168>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1e58      	subs	r0, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6859      	ldr	r1, [r3, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	440b      	add	r3, r1
 80027ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	e012      	b.n	800280a <HAL_I2C_Init+0x18e>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1e58      	subs	r0, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6859      	ldr	r1, [r3, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	0099      	lsls	r1, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fa:	3301      	adds	r3, #1
 80027fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_I2C_Init+0x196>
 800280e:	2301      	movs	r3, #1
 8002810:	e022      	b.n	8002858 <HAL_I2C_Init+0x1dc>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10e      	bne.n	8002838 <HAL_I2C_Init+0x1bc>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1e58      	subs	r0, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	440b      	add	r3, r1
 8002828:	fbb0 f3f3 	udiv	r3, r0, r3
 800282c:	3301      	adds	r3, #1
 800282e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002836:	e00f      	b.n	8002858 <HAL_I2C_Init+0x1dc>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1e58      	subs	r0, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	0099      	lsls	r1, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	fbb0 f3f3 	udiv	r3, r0, r3
 800284e:	3301      	adds	r3, #1
 8002850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002854:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	6809      	ldr	r1, [r1, #0]
 800285c:	4313      	orrs	r3, r2
 800285e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69da      	ldr	r2, [r3, #28]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002886:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6911      	ldr	r1, [r2, #16]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68d2      	ldr	r2, [r2, #12]
 8002892:	4311      	orrs	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	430b      	orrs	r3, r1
 800289a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	000186a0 	.word	0x000186a0
 80028f4:	001e847f 	.word	0x001e847f
 80028f8:	003d08ff 	.word	0x003d08ff
 80028fc:	431bde83 	.word	0x431bde83
 8002900:	10624dd3 	.word	0x10624dd3

08002904 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	4608      	mov	r0, r1
 800290e:	4611      	mov	r1, r2
 8002910:	461a      	mov	r2, r3
 8002912:	4603      	mov	r3, r0
 8002914:	817b      	strh	r3, [r7, #10]
 8002916:	460b      	mov	r3, r1
 8002918:	813b      	strh	r3, [r7, #8]
 800291a:	4613      	mov	r3, r2
 800291c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800291e:	f7ff fbed 	bl	80020fc <HAL_GetTick>
 8002922:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b20      	cmp	r3, #32
 800292e:	f040 80d9 	bne.w	8002ae4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2319      	movs	r3, #25
 8002938:	2201      	movs	r2, #1
 800293a:	496d      	ldr	r1, [pc, #436]	; (8002af0 <HAL_I2C_Mem_Write+0x1ec>)
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fc7f 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
 800294a:	e0cc      	b.n	8002ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_I2C_Mem_Write+0x56>
 8002956:	2302      	movs	r3, #2
 8002958:	e0c5      	b.n	8002ae6 <HAL_I2C_Mem_Write+0x1e2>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d007      	beq.n	8002980 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800298e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2221      	movs	r2, #33	; 0x21
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2240      	movs	r2, #64	; 0x40
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a3a      	ldr	r2, [r7, #32]
 80029aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a4d      	ldr	r2, [pc, #308]	; (8002af4 <HAL_I2C_Mem_Write+0x1f0>)
 80029c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029c2:	88f8      	ldrh	r0, [r7, #6]
 80029c4:	893a      	ldrh	r2, [r7, #8]
 80029c6:	8979      	ldrh	r1, [r7, #10]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	4603      	mov	r3, r0
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f000 fab6 	bl	8002f44 <I2C_RequestMemoryWrite>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d052      	beq.n	8002a84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e081      	b.n	8002ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fd00 	bl	80033ec <I2C_WaitOnTXEFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d107      	bne.n	8002a0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e06b      	b.n	8002ae6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	781a      	ldrb	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d11b      	bne.n	8002a84 <HAL_I2C_Mem_Write+0x180>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d017      	beq.n	8002a84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1aa      	bne.n	80029e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fcec 	bl	800346e <I2C_WaitOnBTFFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d107      	bne.n	8002ab4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e016      	b.n	8002ae6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e000      	b.n	8002ae6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
  }
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	00100002 	.word	0x00100002
 8002af4:	ffff0000 	.word	0xffff0000

08002af8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	; 0x30
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b12:	f7ff faf3 	bl	80020fc <HAL_GetTick>
 8002b16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	f040 8208 	bne.w	8002f36 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2319      	movs	r3, #25
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	497b      	ldr	r1, [pc, #492]	; (8002d1c <HAL_I2C_Mem_Read+0x224>)
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fb85 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	e1fb      	b.n	8002f38 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_I2C_Mem_Read+0x56>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e1f4      	b.n	8002f38 <HAL_I2C_Mem_Read+0x440>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d007      	beq.n	8002b74 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2222      	movs	r2, #34	; 0x22
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2240      	movs	r2, #64	; 0x40
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a5b      	ldr	r2, [pc, #364]	; (8002d20 <HAL_I2C_Mem_Read+0x228>)
 8002bb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bb6:	88f8      	ldrh	r0, [r7, #6]
 8002bb8:	893a      	ldrh	r2, [r7, #8]
 8002bba:	8979      	ldrh	r1, [r7, #10]
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 fa52 	bl	8003070 <I2C_RequestMemoryRead>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e1b0      	b.n	8002f38 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d113      	bne.n	8002c06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	623b      	str	r3, [r7, #32]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	623b      	str	r3, [r7, #32]
 8002bf2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e184      	b.n	8002f10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d11b      	bne.n	8002c46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e164      	b.n	8002f10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d11b      	bne.n	8002c86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	61bb      	str	r3, [r7, #24]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	e144      	b.n	8002f10 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c9c:	e138      	b.n	8002f10 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	f200 80f1 	bhi.w	8002e8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d123      	bne.n	8002cf8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fc1b 	bl	80034f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e139      	b.n	8002f38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cf6:	e10b      	b.n	8002f10 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d14e      	bne.n	8002d9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	2200      	movs	r2, #0
 8002d08:	4906      	ldr	r1, [pc, #24]	; (8002d24 <HAL_I2C_Mem_Read+0x22c>)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fa98 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e10e      	b.n	8002f38 <HAL_I2C_Mem_Read+0x440>
 8002d1a:	bf00      	nop
 8002d1c:	00100002 	.word	0x00100002
 8002d20:	ffff0000 	.word	0xffff0000
 8002d24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691a      	ldr	r2, [r3, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d9c:	e0b8      	b.n	8002f10 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	2200      	movs	r2, #0
 8002da6:	4966      	ldr	r1, [pc, #408]	; (8002f40 <HAL_I2C_Mem_Read+0x448>)
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fa49 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0bf      	b.n	8002f38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	2200      	movs	r2, #0
 8002e02:	494f      	ldr	r1, [pc, #316]	; (8002f40 <HAL_I2C_Mem_Read+0x448>)
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 fa1b 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e091      	b.n	8002f38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e88:	e042      	b.n	8002f10 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 fb2e 	bl	80034f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e04c      	b.n	8002f38 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d118      	bne.n	8002f10 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f47f aec2 	bne.w	8002c9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e000      	b.n	8002f38 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002f36:	2302      	movs	r3, #2
  }
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3728      	adds	r7, #40	; 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	00010004 	.word	0x00010004

08002f44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	4608      	mov	r0, r1
 8002f4e:	4611      	mov	r1, r2
 8002f50:	461a      	mov	r2, r3
 8002f52:	4603      	mov	r3, r0
 8002f54:	817b      	strh	r3, [r7, #10]
 8002f56:	460b      	mov	r3, r1
 8002f58:	813b      	strh	r3, [r7, #8]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f960 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00d      	beq.n	8002fa2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f94:	d103      	bne.n	8002f9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e05f      	b.n	8003062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fa2:	897b      	ldrh	r3, [r7, #10]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	6a3a      	ldr	r2, [r7, #32]
 8002fb6:	492d      	ldr	r1, [pc, #180]	; (800306c <I2C_RequestMemoryWrite+0x128>)
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f998 	bl	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e04c      	b.n	8003062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe0:	6a39      	ldr	r1, [r7, #32]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 fa02 	bl	80033ec <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00d      	beq.n	800300a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d107      	bne.n	8003006 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003004:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e02b      	b.n	8003062 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003010:	893b      	ldrh	r3, [r7, #8]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	611a      	str	r2, [r3, #16]
 800301a:	e021      	b.n	8003060 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800301c:	893b      	ldrh	r3, [r7, #8]
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	b29b      	uxth	r3, r3
 8003022:	b2da      	uxtb	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800302a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302c:	6a39      	ldr	r1, [r7, #32]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f9dc 	bl	80033ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00d      	beq.n	8003056 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b04      	cmp	r3, #4
 8003040:	d107      	bne.n	8003052 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003050:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e005      	b.n	8003062 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003056:	893b      	ldrh	r3, [r7, #8]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	00010002 	.word	0x00010002

08003070 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	4608      	mov	r0, r1
 800307a:	4611      	mov	r1, r2
 800307c:	461a      	mov	r2, r3
 800307e:	4603      	mov	r3, r0
 8003080:	817b      	strh	r3, [r7, #10]
 8003082:	460b      	mov	r3, r1
 8003084:	813b      	strh	r3, [r7, #8]
 8003086:	4613      	mov	r3, r2
 8003088:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003098:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f8c2 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d0:	d103      	bne.n	80030da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e0aa      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030de:	897b      	ldrh	r3, [r7, #10]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	6a3a      	ldr	r2, [r7, #32]
 80030f2:	4952      	ldr	r1, [pc, #328]	; (800323c <I2C_RequestMemoryRead+0x1cc>)
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f8fa 	bl	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e097      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	6a39      	ldr	r1, [r7, #32]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f964 	bl	80033ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00d      	beq.n	8003146 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b04      	cmp	r3, #4
 8003130:	d107      	bne.n	8003142 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003140:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e076      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d105      	bne.n	8003158 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800314c:	893b      	ldrh	r3, [r7, #8]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	611a      	str	r2, [r3, #16]
 8003156:	e021      	b.n	800319c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003158:	893b      	ldrh	r3, [r7, #8]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	b29b      	uxth	r3, r3
 800315e:	b2da      	uxtb	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	6a39      	ldr	r1, [r7, #32]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f93e 	bl	80033ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00d      	beq.n	8003192 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2b04      	cmp	r3, #4
 800317c:	d107      	bne.n	800318e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e050      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003192:	893b      	ldrh	r3, [r7, #8]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800319c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319e:	6a39      	ldr	r1, [r7, #32]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 f923 	bl	80033ec <I2C_WaitOnTXEFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00d      	beq.n	80031c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d107      	bne.n	80031c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e035      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	2200      	movs	r2, #0
 80031e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f82b 	bl	8003240 <I2C_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fe:	d103      	bne.n	8003208 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e013      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800320c:	897b      	ldrh	r3, [r7, #10]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	b2da      	uxtb	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	6a3a      	ldr	r2, [r7, #32]
 8003220:	4906      	ldr	r1, [pc, #24]	; (800323c <I2C_RequestMemoryRead+0x1cc>)
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f863 	bl	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	00010002 	.word	0x00010002

08003240 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003250:	e025      	b.n	800329e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d021      	beq.n	800329e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325a:	f7fe ff4f 	bl	80020fc <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <I2C_WaitOnFlagUntilTimeout+0x30>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d116      	bne.n	800329e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f043 0220 	orr.w	r2, r3, #32
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e023      	b.n	80032e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d10d      	bne.n	80032c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	43da      	mvns	r2, r3
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	4013      	ands	r3, r2
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bf0c      	ite	eq
 80032ba:	2301      	moveq	r3, #1
 80032bc:	2300      	movne	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	e00c      	b.n	80032de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	43da      	mvns	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4013      	ands	r3, r2
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf0c      	ite	eq
 80032d6:	2301      	moveq	r3, #1
 80032d8:	2300      	movne	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d0b6      	beq.n	8003252 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032fc:	e051      	b.n	80033a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330c:	d123      	bne.n	8003356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003326:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f043 0204 	orr.w	r2, r3, #4
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e046      	b.n	80033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d021      	beq.n	80033a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335e:	f7fe fecd 	bl	80020fc <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	429a      	cmp	r2, r3
 800336c:	d302      	bcc.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d116      	bne.n	80033a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e020      	b.n	80033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	0c1b      	lsrs	r3, r3, #16
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10c      	bne.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	e00b      	b.n	80033de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	43da      	mvns	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	4013      	ands	r3, r2
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d18d      	bne.n	80032fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f8:	e02d      	b.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f8ce 	bl	800359c <I2C_IsAcknowledgeFailed>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e02d      	b.n	8003466 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d021      	beq.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003412:	f7fe fe73 	bl	80020fc <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	429a      	cmp	r2, r3
 8003420:	d302      	bcc.n	8003428 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d116      	bne.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f043 0220 	orr.w	r2, r3, #32
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e007      	b.n	8003466 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003460:	2b80      	cmp	r3, #128	; 0x80
 8003462:	d1ca      	bne.n	80033fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800347a:	e02d      	b.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 f88d 	bl	800359c <I2C_IsAcknowledgeFailed>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e02d      	b.n	80034e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d021      	beq.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003494:	f7fe fe32 	bl	80020fc <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d302      	bcc.n	80034aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d116      	bne.n	80034d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f043 0220 	orr.w	r2, r3, #32
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e007      	b.n	80034e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d1ca      	bne.n	800347c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034fc:	e042      	b.n	8003584 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b10      	cmp	r3, #16
 800350a:	d119      	bne.n	8003540 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0210 	mvn.w	r2, #16
 8003514:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e029      	b.n	8003594 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003540:	f7fe fddc 	bl	80020fc <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	d302      	bcc.n	8003556 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d116      	bne.n	8003584 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2220      	movs	r2, #32
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f043 0220 	orr.w	r2, r3, #32
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d1b5      	bne.n	80034fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b2:	d11b      	bne.n	80035ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f043 0204 	orr.w	r2, r3, #4
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0cc      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003610:	4b68      	ldr	r3, [pc, #416]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d90c      	bls.n	8003638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b65      	ldr	r3, [pc, #404]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b63      	ldr	r3, [pc, #396]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0b8      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003650:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a58      	ldr	r2, [pc, #352]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800365a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003668:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4a52      	ldr	r2, [pc, #328]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003674:	4b50      	ldr	r3, [pc, #320]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	494d      	ldr	r1, [pc, #308]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d044      	beq.n	800371c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d119      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e07f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d003      	beq.n	80036ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ba:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e06f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ca:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e067      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036da:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4934      	ldr	r1, [pc, #208]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ec:	f7fe fd06 	bl	80020fc <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	e00a      	b.n	800370a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f4:	f7fe fd02 	bl	80020fc <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e04f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 020c 	and.w	r2, r3, #12
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	429a      	cmp	r2, r3
 800371a:	d1eb      	bne.n	80036f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800371c:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d20c      	bcs.n	8003744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e032      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4916      	ldr	r1, [pc, #88]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	490e      	ldr	r1, [pc, #56]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003782:	f000 f887 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 8003786:	4602      	mov	r2, r0
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	490a      	ldr	r1, [pc, #40]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	5ccb      	ldrb	r3, [r1, r3]
 8003796:	fa22 f303 	lsr.w	r3, r2, r3
 800379a:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_RCC_ClockConfig+0x1c8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fae2 	bl	8001d6c <HAL_InitTick>

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023c00 	.word	0x40023c00
 80037b8:	40023800 	.word	0x40023800
 80037bc:	08007c04 	.word	0x08007c04
 80037c0:	20000000 	.word	0x20000000
 80037c4:	20000004 	.word	0x20000004

080037c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_RCC_GetHCLKFreq+0x14>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000000 	.word	0x20000000

080037e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037e4:	f7ff fff0 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	0a9b      	lsrs	r3, r3, #10
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4903      	ldr	r1, [pc, #12]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40023800 	.word	0x40023800
 8003804:	08007c14 	.word	0x08007c14

08003808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800380c:	f7ff ffdc 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b05      	ldr	r3, [pc, #20]	; (8003828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	0b5b      	lsrs	r3, r3, #13
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4903      	ldr	r1, [pc, #12]	; (800382c <HAL_RCC_GetPCLK2Freq+0x24>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003824:	4618      	mov	r0, r3
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40023800 	.word	0x40023800
 800382c:	08007c14 	.word	0x08007c14

08003830 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	220f      	movs	r2, #15
 800383e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003840:	4b12      	ldr	r3, [pc, #72]	; (800388c <HAL_RCC_GetClockConfig+0x5c>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800384c:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_RCC_GetClockConfig+0x5c>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_RCC_GetClockConfig+0x5c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003864:	4b09      	ldr	r3, [pc, #36]	; (800388c <HAL_RCC_GetClockConfig+0x5c>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	08db      	lsrs	r3, r3, #3
 800386a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <HAL_RCC_GetClockConfig+0x60>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 020f 	and.w	r2, r3, #15
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	601a      	str	r2, [r3, #0]
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	40023c00 	.word	0x40023c00

08003894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003898:	b088      	sub	sp, #32
 800389a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038b0:	4bce      	ldr	r3, [pc, #824]	; (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 030c 	and.w	r3, r3, #12
 80038b8:	2b0c      	cmp	r3, #12
 80038ba:	f200 818d 	bhi.w	8003bd8 <HAL_RCC_GetSysClockFreq+0x344>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <HAL_RCC_GetSysClockFreq+0x30>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	08003bd9 	.word	0x08003bd9
 80038cc:	08003bd9 	.word	0x08003bd9
 80038d0:	08003bd9 	.word	0x08003bd9
 80038d4:	080038ff 	.word	0x080038ff
 80038d8:	08003bd9 	.word	0x08003bd9
 80038dc:	08003bd9 	.word	0x08003bd9
 80038e0:	08003bd9 	.word	0x08003bd9
 80038e4:	08003905 	.word	0x08003905
 80038e8:	08003bd9 	.word	0x08003bd9
 80038ec:	08003bd9 	.word	0x08003bd9
 80038f0:	08003bd9 	.word	0x08003bd9
 80038f4:	08003a79 	.word	0x08003a79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038f8:	4bbd      	ldr	r3, [pc, #756]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80038fa:	61bb      	str	r3, [r7, #24]
       break;
 80038fc:	e16f      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038fe:	4bbd      	ldr	r3, [pc, #756]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x360>)
 8003900:	61bb      	str	r3, [r7, #24]
      break;
 8003902:	e16c      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003904:	4bb9      	ldr	r3, [pc, #740]	; (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800390c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800390e:	4bb7      	ldr	r3, [pc, #732]	; (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d053      	beq.n	80039c2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391a:	4bb4      	ldr	r3, [pc, #720]	; (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	099b      	lsrs	r3, r3, #6
 8003920:	461a      	mov	r2, r3
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	f240 10ff 	movw	r0, #511	; 0x1ff
 800392a:	f04f 0100 	mov.w	r1, #0
 800392e:	ea02 0400 	and.w	r4, r2, r0
 8003932:	603c      	str	r4, [r7, #0]
 8003934:	400b      	ands	r3, r1
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	e9d7 4500 	ldrd	r4, r5, [r7]
 800393c:	4620      	mov	r0, r4
 800393e:	4629      	mov	r1, r5
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	014b      	lsls	r3, r1, #5
 800394a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800394e:	0142      	lsls	r2, r0, #5
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	4623      	mov	r3, r4
 8003956:	1ac0      	subs	r0, r0, r3
 8003958:	462b      	mov	r3, r5
 800395a:	eb61 0103 	sbc.w	r1, r1, r3
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	018b      	lsls	r3, r1, #6
 8003968:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800396c:	0182      	lsls	r2, r0, #6
 800396e:	1a12      	subs	r2, r2, r0
 8003970:	eb63 0301 	sbc.w	r3, r3, r1
 8003974:	f04f 0000 	mov.w	r0, #0
 8003978:	f04f 0100 	mov.w	r1, #0
 800397c:	00d9      	lsls	r1, r3, #3
 800397e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003982:	00d0      	lsls	r0, r2, #3
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	4621      	mov	r1, r4
 800398a:	1852      	adds	r2, r2, r1
 800398c:	4629      	mov	r1, r5
 800398e:	eb43 0101 	adc.w	r1, r3, r1
 8003992:	460b      	mov	r3, r1
 8003994:	f04f 0000 	mov.w	r0, #0
 8003998:	f04f 0100 	mov.w	r1, #0
 800399c:	0259      	lsls	r1, r3, #9
 800399e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039a2:	0250      	lsls	r0, r2, #9
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4610      	mov	r0, r2
 80039aa:	4619      	mov	r1, r3
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	461a      	mov	r2, r3
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	f7fd f918 	bl	8000be8 <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4613      	mov	r3, r2
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	e04c      	b.n	8003a5c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c2:	4b8a      	ldr	r3, [pc, #552]	; (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	461a      	mov	r2, r3
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	ea02 0a00 	and.w	sl, r2, r0
 80039da:	ea03 0b01 	and.w	fp, r3, r1
 80039de:	4650      	mov	r0, sl
 80039e0:	4659      	mov	r1, fp
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	014b      	lsls	r3, r1, #5
 80039ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039f0:	0142      	lsls	r2, r0, #5
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	ebb0 000a 	subs.w	r0, r0, sl
 80039fa:	eb61 010b 	sbc.w	r1, r1, fp
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	018b      	lsls	r3, r1, #6
 8003a08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a0c:	0182      	lsls	r2, r0, #6
 8003a0e:	1a12      	subs	r2, r2, r0
 8003a10:	eb63 0301 	sbc.w	r3, r3, r1
 8003a14:	f04f 0000 	mov.w	r0, #0
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	00d9      	lsls	r1, r3, #3
 8003a1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a22:	00d0      	lsls	r0, r2, #3
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	eb12 020a 	adds.w	r2, r2, sl
 8003a2c:	eb43 030b 	adc.w	r3, r3, fp
 8003a30:	f04f 0000 	mov.w	r0, #0
 8003a34:	f04f 0100 	mov.w	r1, #0
 8003a38:	0299      	lsls	r1, r3, #10
 8003a3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a3e:	0290      	lsls	r0, r2, #10
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4610      	mov	r0, r2
 8003a46:	4619      	mov	r1, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	f7fd f8ca 	bl	8000be8 <__aeabi_uldivmod>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4613      	mov	r3, r2
 8003a5a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a5c:	4b63      	ldr	r3, [pc, #396]	; (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	3301      	adds	r3, #1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	61bb      	str	r3, [r7, #24]
      break;
 8003a76:	e0b2      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a78:	4b5c      	ldr	r3, [pc, #368]	; (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a80:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a82:	4b5a      	ldr	r3, [pc, #360]	; (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d04d      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8e:	4b57      	ldr	r3, [pc, #348]	; (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	099b      	lsrs	r3, r3, #6
 8003a94:	461a      	mov	r2, r3
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a9e:	f04f 0100 	mov.w	r1, #0
 8003aa2:	ea02 0800 	and.w	r8, r2, r0
 8003aa6:	ea03 0901 	and.w	r9, r3, r1
 8003aaa:	4640      	mov	r0, r8
 8003aac:	4649      	mov	r1, r9
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	014b      	lsls	r3, r1, #5
 8003ab8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003abc:	0142      	lsls	r2, r0, #5
 8003abe:	4610      	mov	r0, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	ebb0 0008 	subs.w	r0, r0, r8
 8003ac6:	eb61 0109 	sbc.w	r1, r1, r9
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	018b      	lsls	r3, r1, #6
 8003ad4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ad8:	0182      	lsls	r2, r0, #6
 8003ada:	1a12      	subs	r2, r2, r0
 8003adc:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae0:	f04f 0000 	mov.w	r0, #0
 8003ae4:	f04f 0100 	mov.w	r1, #0
 8003ae8:	00d9      	lsls	r1, r3, #3
 8003aea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aee:	00d0      	lsls	r0, r2, #3
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	eb12 0208 	adds.w	r2, r2, r8
 8003af8:	eb43 0309 	adc.w	r3, r3, r9
 8003afc:	f04f 0000 	mov.w	r0, #0
 8003b00:	f04f 0100 	mov.w	r1, #0
 8003b04:	0259      	lsls	r1, r3, #9
 8003b06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b0a:	0250      	lsls	r0, r2, #9
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4610      	mov	r0, r2
 8003b12:	4619      	mov	r1, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	461a      	mov	r2, r3
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	f7fd f864 	bl	8000be8 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4613      	mov	r3, r2
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	e04a      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2a:	4b30      	ldr	r3, [pc, #192]	; (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	099b      	lsrs	r3, r3, #6
 8003b30:	461a      	mov	r2, r3
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b3a:	f04f 0100 	mov.w	r1, #0
 8003b3e:	ea02 0400 	and.w	r4, r2, r0
 8003b42:	ea03 0501 	and.w	r5, r3, r1
 8003b46:	4620      	mov	r0, r4
 8003b48:	4629      	mov	r1, r5
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	014b      	lsls	r3, r1, #5
 8003b54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b58:	0142      	lsls	r2, r0, #5
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	1b00      	subs	r0, r0, r4
 8003b60:	eb61 0105 	sbc.w	r1, r1, r5
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	018b      	lsls	r3, r1, #6
 8003b6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b72:	0182      	lsls	r2, r0, #6
 8003b74:	1a12      	subs	r2, r2, r0
 8003b76:	eb63 0301 	sbc.w	r3, r3, r1
 8003b7a:	f04f 0000 	mov.w	r0, #0
 8003b7e:	f04f 0100 	mov.w	r1, #0
 8003b82:	00d9      	lsls	r1, r3, #3
 8003b84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b88:	00d0      	lsls	r0, r2, #3
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	1912      	adds	r2, r2, r4
 8003b90:	eb45 0303 	adc.w	r3, r5, r3
 8003b94:	f04f 0000 	mov.w	r0, #0
 8003b98:	f04f 0100 	mov.w	r1, #0
 8003b9c:	0299      	lsls	r1, r3, #10
 8003b9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003ba2:	0290      	lsls	r0, r2, #10
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4619      	mov	r1, r3
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	f7fd f818 	bl	8000be8 <__aeabi_uldivmod>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	0f1b      	lsrs	r3, r3, #28
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003bcc:	69fa      	ldr	r2, [r7, #28]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd4:	61bb      	str	r3, [r7, #24]
      break;
 8003bd6:	e002      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003bda:	61bb      	str	r3, [r7, #24]
      break;
 8003bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bde:	69bb      	ldr	r3, [r7, #24]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3720      	adds	r7, #32
 8003be4:	46bd      	mov	sp, r7
 8003be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bea:	bf00      	nop
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	00f42400 	.word	0x00f42400
 8003bf4:	007a1200 	.word	0x007a1200

08003bf8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e28d      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8083 	beq.w	8003d1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c18:	4b94      	ldr	r3, [pc, #592]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d019      	beq.n	8003c58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c24:	4b91      	ldr	r3, [pc, #580]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d106      	bne.n	8003c3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c30:	4b8e      	ldr	r3, [pc, #568]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c3c:	d00c      	beq.n	8003c58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c3e:	4b8b      	ldr	r3, [pc, #556]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d112      	bne.n	8003c70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c4a:	4b88      	ldr	r3, [pc, #544]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c56:	d10b      	bne.n	8003c70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	4b84      	ldr	r3, [pc, #528]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d05b      	beq.n	8003d1c <HAL_RCC_OscConfig+0x124>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d157      	bne.n	8003d1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e25a      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c78:	d106      	bne.n	8003c88 <HAL_RCC_OscConfig+0x90>
 8003c7a:	4b7c      	ldr	r3, [pc, #496]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a7b      	ldr	r2, [pc, #492]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e01d      	b.n	8003cc4 <HAL_RCC_OscConfig+0xcc>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0xb4>
 8003c92:	4b76      	ldr	r3, [pc, #472]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a75      	ldr	r2, [pc, #468]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b73      	ldr	r3, [pc, #460]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a72      	ldr	r2, [pc, #456]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e00b      	b.n	8003cc4 <HAL_RCC_OscConfig+0xcc>
 8003cac:	4b6f      	ldr	r3, [pc, #444]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a6e      	ldr	r2, [pc, #440]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b6c      	ldr	r3, [pc, #432]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a6b      	ldr	r2, [pc, #428]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fe fa16 	bl	80020fc <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cd4:	f7fe fa12 	bl	80020fc <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b64      	cmp	r3, #100	; 0x64
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e21f      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce6:	4b61      	ldr	r3, [pc, #388]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xdc>
 8003cf2:	e014      	b.n	8003d1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fa02 	bl	80020fc <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cfc:	f7fe f9fe 	bl	80020fc <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e20b      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0e:	4b57      	ldr	r3, [pc, #348]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x104>
 8003d1a:	e000      	b.n	8003d1e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d06f      	beq.n	8003e0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d2a:	4b50      	ldr	r3, [pc, #320]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d017      	beq.n	8003d66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d36:	4b4d      	ldr	r3, [pc, #308]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d105      	bne.n	8003d4e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d42:	4b4a      	ldr	r3, [pc, #296]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d4e:	4b47      	ldr	r3, [pc, #284]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d11c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5a:	4b44      	ldr	r3, [pc, #272]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d116      	bne.n	8003d94 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d66:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_RCC_OscConfig+0x186>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d001      	beq.n	8003d7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e1d3      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7e:	4b3b      	ldr	r3, [pc, #236]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	4937      	ldr	r1, [pc, #220]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d92:	e03a      	b.n	8003e0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d9c:	4b34      	ldr	r3, [pc, #208]	; (8003e70 <HAL_RCC_OscConfig+0x278>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fe f9ab 	bl	80020fc <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003daa:	f7fe f9a7 	bl	80020fc <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e1b4      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dbc:	4b2b      	ldr	r3, [pc, #172]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc8:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4925      	ldr	r1, [pc, #148]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	600b      	str	r3, [r1, #0]
 8003ddc:	e015      	b.n	8003e0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_RCC_OscConfig+0x278>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe f98a 	bl	80020fc <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dec:	f7fe f986 	bl	80020fc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e193      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dfe:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d036      	beq.n	8003e84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d016      	beq.n	8003e4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e24:	f7fe f96a 	bl	80020fc <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e2c:	f7fe f966 	bl	80020fc <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e173      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_OscConfig+0x274>)
 8003e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x234>
 8003e4a:	e01b      	b.n	8003e84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e4c:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <HAL_RCC_OscConfig+0x27c>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fe f953 	bl	80020fc <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e58:	e00e      	b.n	8003e78 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5a:	f7fe f94f 	bl	80020fc <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d907      	bls.n	8003e78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e15c      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	42470000 	.word	0x42470000
 8003e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	4b8a      	ldr	r3, [pc, #552]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1ea      	bne.n	8003e5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 8097 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e96:	4b83      	ldr	r3, [pc, #524]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
 8003ea6:	4b7f      	ldr	r3, [pc, #508]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	4a7e      	ldr	r2, [pc, #504]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb2:	4b7c      	ldr	r3, [pc, #496]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	4b79      	ldr	r3, [pc, #484]	; (80040a8 <HAL_RCC_OscConfig+0x4b0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d118      	bne.n	8003f00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ece:	4b76      	ldr	r3, [pc, #472]	; (80040a8 <HAL_RCC_OscConfig+0x4b0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a75      	ldr	r2, [pc, #468]	; (80040a8 <HAL_RCC_OscConfig+0x4b0>)
 8003ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eda:	f7fe f90f 	bl	80020fc <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee2:	f7fe f90b 	bl	80020fc <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e118      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef4:	4b6c      	ldr	r3, [pc, #432]	; (80040a8 <HAL_RCC_OscConfig+0x4b0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0f0      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d106      	bne.n	8003f16 <HAL_RCC_OscConfig+0x31e>
 8003f08:	4b66      	ldr	r3, [pc, #408]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	4a65      	ldr	r2, [pc, #404]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6713      	str	r3, [r2, #112]	; 0x70
 8003f14:	e01c      	b.n	8003f50 <HAL_RCC_OscConfig+0x358>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	d10c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x340>
 8003f1e:	4b61      	ldr	r3, [pc, #388]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	4a60      	ldr	r2, [pc, #384]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003f24:	f043 0304 	orr.w	r3, r3, #4
 8003f28:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2a:	4b5e      	ldr	r3, [pc, #376]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	4a5d      	ldr	r2, [pc, #372]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6713      	str	r3, [r2, #112]	; 0x70
 8003f36:	e00b      	b.n	8003f50 <HAL_RCC_OscConfig+0x358>
 8003f38:	4b5a      	ldr	r3, [pc, #360]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f3c:	4a59      	ldr	r2, [pc, #356]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	6713      	str	r3, [r2, #112]	; 0x70
 8003f44:	4b57      	ldr	r3, [pc, #348]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	4a56      	ldr	r2, [pc, #344]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003f4a:	f023 0304 	bic.w	r3, r3, #4
 8003f4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d015      	beq.n	8003f84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fe f8d0 	bl	80020fc <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f60:	f7fe f8cc 	bl	80020fc <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e0d7      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f76:	4b4b      	ldr	r3, [pc, #300]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ee      	beq.n	8003f60 <HAL_RCC_OscConfig+0x368>
 8003f82:	e014      	b.n	8003fae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fe f8ba 	bl	80020fc <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7fe f8b6 	bl	80020fc <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e0c1      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa2:	4b40      	ldr	r3, [pc, #256]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1ee      	bne.n	8003f8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fae:	7dfb      	ldrb	r3, [r7, #23]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d105      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb4:	4b3b      	ldr	r3, [pc, #236]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	4a3a      	ldr	r2, [pc, #232]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80ad 	beq.w	8004124 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fca:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d060      	beq.n	8004098 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d145      	bne.n	800406a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fde:	4b33      	ldr	r3, [pc, #204]	; (80040ac <HAL_RCC_OscConfig+0x4b4>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fe f88a 	bl	80020fc <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fe f886 	bl	80020fc <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e093      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffe:	4b29      	ldr	r3, [pc, #164]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69da      	ldr	r2, [r3, #28]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	019b      	lsls	r3, r3, #6
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	085b      	lsrs	r3, r3, #1
 8004022:	3b01      	subs	r3, #1
 8004024:	041b      	lsls	r3, r3, #16
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	071b      	lsls	r3, r3, #28
 8004036:	491b      	ldr	r1, [pc, #108]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 8004038:	4313      	orrs	r3, r2
 800403a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <HAL_RCC_OscConfig+0x4b4>)
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004042:	f7fe f85b 	bl	80020fc <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004048:	e008      	b.n	800405c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404a:	f7fe f857 	bl	80020fc <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d901      	bls.n	800405c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e064      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f0      	beq.n	800404a <HAL_RCC_OscConfig+0x452>
 8004068:	e05c      	b.n	8004124 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406a:	4b10      	ldr	r3, [pc, #64]	; (80040ac <HAL_RCC_OscConfig+0x4b4>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fe f844 	bl	80020fc <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004078:	f7fe f840 	bl	80020fc <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e04d      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCC_OscConfig+0x4ac>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x480>
 8004096:	e045      	b.n	8004124 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d107      	bne.n	80040b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e040      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40007000 	.word	0x40007000
 80040ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040b0:	4b1f      	ldr	r3, [pc, #124]	; (8004130 <HAL_RCC_OscConfig+0x538>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d030      	beq.n	8004120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d129      	bne.n	8004120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d122      	bne.n	8004120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040e0:	4013      	ands	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d119      	bne.n	8004120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	085b      	lsrs	r3, r3, #1
 80040f8:	3b01      	subs	r3, #1
 80040fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d10f      	bne.n	8004120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800410c:	429a      	cmp	r2, r3
 800410e:	d107      	bne.n	8004120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800

08004134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e041      	b.n	80041ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f839 	bl	80041d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3304      	adds	r3, #4
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f000 f9d8 	bl	8004528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d001      	beq.n	8004200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e04e      	b.n	800429e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a23      	ldr	r2, [pc, #140]	; (80042ac <HAL_TIM_Base_Start_IT+0xc4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d022      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422a:	d01d      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1f      	ldr	r2, [pc, #124]	; (80042b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1c      	ldr	r2, [pc, #112]	; (80042b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a19      	ldr	r2, [pc, #100]	; (80042c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x80>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d111      	bne.n	800428c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b06      	cmp	r3, #6
 8004278:	d010      	beq.n	800429c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428a:	e007      	b.n	800429c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40010000 	.word	0x40010000
 80042b0:	40000400 	.word	0x40000400
 80042b4:	40000800 	.word	0x40000800
 80042b8:	40000c00 	.word	0x40000c00
 80042bc:	40010400 	.word	0x40010400
 80042c0:	40014000 	.word	0x40014000
 80042c4:	40001800 	.word	0x40001800

080042c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d122      	bne.n	8004324 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d11b      	bne.n	8004324 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0202 	mvn.w	r2, #2
 80042f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f8ee 	bl	80044ec <HAL_TIM_IC_CaptureCallback>
 8004310:	e005      	b.n	800431e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f8e0 	bl	80044d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f8f1 	bl	8004500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b04      	cmp	r3, #4
 8004330:	d122      	bne.n	8004378 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b04      	cmp	r3, #4
 800433e:	d11b      	bne.n	8004378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0204 	mvn.w	r2, #4
 8004348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f8c4 	bl	80044ec <HAL_TIM_IC_CaptureCallback>
 8004364:	e005      	b.n	8004372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f8b6 	bl	80044d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f8c7 	bl	8004500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0308 	and.w	r3, r3, #8
 8004382:	2b08      	cmp	r3, #8
 8004384:	d122      	bne.n	80043cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b08      	cmp	r3, #8
 8004392:	d11b      	bne.n	80043cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0208 	mvn.w	r2, #8
 800439c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2204      	movs	r2, #4
 80043a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 f89a 	bl	80044ec <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f88c 	bl	80044d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 f89d 	bl	8004500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	2b10      	cmp	r3, #16
 80043d8:	d122      	bne.n	8004420 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d11b      	bne.n	8004420 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0210 	mvn.w	r2, #16
 80043f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2208      	movs	r2, #8
 80043f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f870 	bl	80044ec <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f862 	bl	80044d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f873 	bl	8004500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b01      	cmp	r3, #1
 800442c:	d10e      	bne.n	800444c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d107      	bne.n	800444c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0201 	mvn.w	r2, #1
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fd fbc0 	bl	8001bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d10e      	bne.n	8004478 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004464:	2b80      	cmp	r3, #128	; 0x80
 8004466:	d107      	bne.n	8004478 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f902 	bl	800467c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b40      	cmp	r3, #64	; 0x40
 8004484:	d10e      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d107      	bne.n	80044a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800449c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f838 	bl	8004514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d10e      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0320 	and.w	r3, r3, #32
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d107      	bne.n	80044d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0220 	mvn.w	r2, #32
 80044c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f8cc 	bl	8004668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a40      	ldr	r2, [pc, #256]	; (800463c <TIM_Base_SetConfig+0x114>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d013      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004546:	d00f      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3d      	ldr	r2, [pc, #244]	; (8004640 <TIM_Base_SetConfig+0x118>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00b      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a3c      	ldr	r2, [pc, #240]	; (8004644 <TIM_Base_SetConfig+0x11c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d007      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a3b      	ldr	r2, [pc, #236]	; (8004648 <TIM_Base_SetConfig+0x120>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d003      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a3a      	ldr	r2, [pc, #232]	; (800464c <TIM_Base_SetConfig+0x124>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d108      	bne.n	800457a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2f      	ldr	r2, [pc, #188]	; (800463c <TIM_Base_SetConfig+0x114>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d02b      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004588:	d027      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <TIM_Base_SetConfig+0x118>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d023      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2b      	ldr	r2, [pc, #172]	; (8004644 <TIM_Base_SetConfig+0x11c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01f      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <TIM_Base_SetConfig+0x120>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01b      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a29      	ldr	r2, [pc, #164]	; (800464c <TIM_Base_SetConfig+0x124>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d017      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a28      	ldr	r2, [pc, #160]	; (8004650 <TIM_Base_SetConfig+0x128>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a27      	ldr	r2, [pc, #156]	; (8004654 <TIM_Base_SetConfig+0x12c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00f      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a26      	ldr	r2, [pc, #152]	; (8004658 <TIM_Base_SetConfig+0x130>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00b      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a25      	ldr	r2, [pc, #148]	; (800465c <TIM_Base_SetConfig+0x134>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a24      	ldr	r2, [pc, #144]	; (8004660 <TIM_Base_SetConfig+0x138>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a23      	ldr	r2, [pc, #140]	; (8004664 <TIM_Base_SetConfig+0x13c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d108      	bne.n	80045ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a0a      	ldr	r2, [pc, #40]	; (800463c <TIM_Base_SetConfig+0x114>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_Base_SetConfig+0xf8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0c      	ldr	r2, [pc, #48]	; (800464c <TIM_Base_SetConfig+0x124>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d103      	bne.n	8004628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	615a      	str	r2, [r3, #20]
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40010400 	.word	0x40010400
 8004650:	40014000 	.word	0x40014000
 8004654:	40014400 	.word	0x40014400
 8004658:	40014800 	.word	0x40014800
 800465c:	40001800 	.word	0x40001800
 8004660:	40001c00 	.word	0x40001c00
 8004664:	40002000 	.word	0x40002000

08004668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e03f      	b.n	8004722 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fd fb10 	bl	8001cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2224      	movs	r2, #36	; 0x24
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f929 	bl	800492c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695a      	ldr	r2, [r3, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b08a      	sub	sp, #40	; 0x28
 800472e:	af02      	add	r7, sp, #8
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	603b      	str	r3, [r7, #0]
 8004736:	4613      	mov	r3, r2
 8004738:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b20      	cmp	r3, #32
 8004748:	d17c      	bne.n	8004844 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_UART_Transmit+0x2c>
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e075      	b.n	8004846 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_UART_Transmit+0x3e>
 8004764:	2302      	movs	r3, #2
 8004766:	e06e      	b.n	8004846 <HAL_UART_Transmit+0x11c>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2221      	movs	r2, #33	; 0x21
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800477e:	f7fd fcbd 	bl	80020fc <HAL_GetTick>
 8004782:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	88fa      	ldrh	r2, [r7, #6]
 8004788:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004798:	d108      	bne.n	80047ac <HAL_UART_Transmit+0x82>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d104      	bne.n	80047ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	e003      	b.n	80047b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047bc:	e02a      	b.n	8004814 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2200      	movs	r2, #0
 80047c6:	2180      	movs	r1, #128	; 0x80
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f840 	bl	800484e <UART_WaitOnFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e036      	b.n	8004846 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10b      	bne.n	80047f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	3302      	adds	r3, #2
 80047f2:	61bb      	str	r3, [r7, #24]
 80047f4:	e007      	b.n	8004806 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	781a      	ldrb	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	3301      	adds	r3, #1
 8004804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004818:	b29b      	uxth	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1cf      	bne.n	80047be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2200      	movs	r2, #0
 8004826:	2140      	movs	r1, #64	; 0x40
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 f810 	bl	800484e <UART_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e006      	b.n	8004846 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004844:	2302      	movs	r3, #2
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b090      	sub	sp, #64	; 0x40
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	603b      	str	r3, [r7, #0]
 800485a:	4613      	mov	r3, r2
 800485c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800485e:	e050      	b.n	8004902 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004866:	d04c      	beq.n	8004902 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <UART_WaitOnFlagUntilTimeout+0x30>
 800486e:	f7fd fc45 	bl	80020fc <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800487a:	429a      	cmp	r2, r3
 800487c:	d241      	bcs.n	8004902 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	330c      	adds	r3, #12
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	330c      	adds	r3, #12
 800489c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800489e:	637a      	str	r2, [r7, #52]	; 0x34
 80048a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048a6:	e841 2300 	strex	r3, r2, [r1]
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1e5      	bne.n	800487e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3314      	adds	r3, #20
 80048b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	613b      	str	r3, [r7, #16]
   return(result);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3314      	adds	r3, #20
 80048d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048d2:	623a      	str	r2, [r7, #32]
 80048d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	69f9      	ldr	r1, [r7, #28]
 80048d8:	6a3a      	ldr	r2, [r7, #32]
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	61bb      	str	r3, [r7, #24]
   return(result);
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e5      	bne.n	80048b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e00f      	b.n	8004922 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4013      	ands	r3, r2
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	429a      	cmp	r2, r3
 8004910:	bf0c      	ite	eq
 8004912:	2301      	moveq	r3, #1
 8004914:	2300      	movne	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	461a      	mov	r2, r3
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	429a      	cmp	r2, r3
 800491e:	d09f      	beq.n	8004860 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3740      	adds	r7, #64	; 0x40
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800492c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004930:	b09f      	sub	sp, #124	; 0x7c
 8004932:	af00      	add	r7, sp, #0
 8004934:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004942:	68d9      	ldr	r1, [r3, #12]
 8004944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	ea40 0301 	orr.w	r3, r0, r1
 800494c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800494e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	431a      	orrs	r2, r3
 8004958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	431a      	orrs	r2, r3
 800495e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	4313      	orrs	r3, r2
 8004964:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004970:	f021 010c 	bic.w	r1, r1, #12
 8004974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800497a:	430b      	orrs	r3, r1
 800497c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498a:	6999      	ldr	r1, [r3, #24]
 800498c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	ea40 0301 	orr.w	r3, r0, r1
 8004994:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4bc5      	ldr	r3, [pc, #788]	; (8004cb0 <UART_SetConfig+0x384>)
 800499c:	429a      	cmp	r2, r3
 800499e:	d004      	beq.n	80049aa <UART_SetConfig+0x7e>
 80049a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4bc3      	ldr	r3, [pc, #780]	; (8004cb4 <UART_SetConfig+0x388>)
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d103      	bne.n	80049b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049aa:	f7fe ff2d 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 80049ae:	6778      	str	r0, [r7, #116]	; 0x74
 80049b0:	e002      	b.n	80049b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049b2:	f7fe ff15 	bl	80037e0 <HAL_RCC_GetPCLK1Freq>
 80049b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c0:	f040 80b6 	bne.w	8004b30 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c6:	461c      	mov	r4, r3
 80049c8:	f04f 0500 	mov.w	r5, #0
 80049cc:	4622      	mov	r2, r4
 80049ce:	462b      	mov	r3, r5
 80049d0:	1891      	adds	r1, r2, r2
 80049d2:	6439      	str	r1, [r7, #64]	; 0x40
 80049d4:	415b      	adcs	r3, r3
 80049d6:	647b      	str	r3, [r7, #68]	; 0x44
 80049d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049dc:	1912      	adds	r2, r2, r4
 80049de:	eb45 0303 	adc.w	r3, r5, r3
 80049e2:	f04f 0000 	mov.w	r0, #0
 80049e6:	f04f 0100 	mov.w	r1, #0
 80049ea:	00d9      	lsls	r1, r3, #3
 80049ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049f0:	00d0      	lsls	r0, r2, #3
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	1911      	adds	r1, r2, r4
 80049f8:	6639      	str	r1, [r7, #96]	; 0x60
 80049fa:	416b      	adcs	r3, r5
 80049fc:	667b      	str	r3, [r7, #100]	; 0x64
 80049fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	1891      	adds	r1, r2, r2
 8004a0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a0c:	415b      	adcs	r3, r3
 8004a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a14:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a18:	f7fc f8e6 	bl	8000be8 <__aeabi_uldivmod>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4ba5      	ldr	r3, [pc, #660]	; (8004cb8 <UART_SetConfig+0x38c>)
 8004a22:	fba3 2302 	umull	r2, r3, r3, r2
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	011e      	lsls	r6, r3, #4
 8004a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a2c:	461c      	mov	r4, r3
 8004a2e:	f04f 0500 	mov.w	r5, #0
 8004a32:	4622      	mov	r2, r4
 8004a34:	462b      	mov	r3, r5
 8004a36:	1891      	adds	r1, r2, r2
 8004a38:	6339      	str	r1, [r7, #48]	; 0x30
 8004a3a:	415b      	adcs	r3, r3
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a42:	1912      	adds	r2, r2, r4
 8004a44:	eb45 0303 	adc.w	r3, r5, r3
 8004a48:	f04f 0000 	mov.w	r0, #0
 8004a4c:	f04f 0100 	mov.w	r1, #0
 8004a50:	00d9      	lsls	r1, r3, #3
 8004a52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a56:	00d0      	lsls	r0, r2, #3
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	1911      	adds	r1, r2, r4
 8004a5e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a60:	416b      	adcs	r3, r5
 8004a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	1891      	adds	r1, r2, r2
 8004a70:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a72:	415b      	adcs	r3, r3
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a7a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a7e:	f7fc f8b3 	bl	8000be8 <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4b8c      	ldr	r3, [pc, #560]	; (8004cb8 <UART_SetConfig+0x38c>)
 8004a88:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	2164      	movs	r1, #100	; 0x64
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	3332      	adds	r3, #50	; 0x32
 8004a9a:	4a87      	ldr	r2, [pc, #540]	; (8004cb8 <UART_SetConfig+0x38c>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004aa8:	441e      	add	r6, r3
 8004aaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aac:	4618      	mov	r0, r3
 8004aae:	f04f 0100 	mov.w	r1, #0
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	1894      	adds	r4, r2, r2
 8004ab8:	623c      	str	r4, [r7, #32]
 8004aba:	415b      	adcs	r3, r3
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
 8004abe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ac2:	1812      	adds	r2, r2, r0
 8004ac4:	eb41 0303 	adc.w	r3, r1, r3
 8004ac8:	f04f 0400 	mov.w	r4, #0
 8004acc:	f04f 0500 	mov.w	r5, #0
 8004ad0:	00dd      	lsls	r5, r3, #3
 8004ad2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004ad6:	00d4      	lsls	r4, r2, #3
 8004ad8:	4622      	mov	r2, r4
 8004ada:	462b      	mov	r3, r5
 8004adc:	1814      	adds	r4, r2, r0
 8004ade:	653c      	str	r4, [r7, #80]	; 0x50
 8004ae0:	414b      	adcs	r3, r1
 8004ae2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	1891      	adds	r1, r2, r2
 8004af0:	61b9      	str	r1, [r7, #24]
 8004af2:	415b      	adcs	r3, r3
 8004af4:	61fb      	str	r3, [r7, #28]
 8004af6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004afa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004afe:	f7fc f873 	bl	8000be8 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4b6c      	ldr	r3, [pc, #432]	; (8004cb8 <UART_SetConfig+0x38c>)
 8004b08:	fba3 1302 	umull	r1, r3, r3, r2
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	2164      	movs	r1, #100	; 0x64
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	3332      	adds	r3, #50	; 0x32
 8004b1a:	4a67      	ldr	r2, [pc, #412]	; (8004cb8 <UART_SetConfig+0x38c>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	f003 0207 	and.w	r2, r3, #7
 8004b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4432      	add	r2, r6
 8004b2c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b2e:	e0b9      	b.n	8004ca4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b32:	461c      	mov	r4, r3
 8004b34:	f04f 0500 	mov.w	r5, #0
 8004b38:	4622      	mov	r2, r4
 8004b3a:	462b      	mov	r3, r5
 8004b3c:	1891      	adds	r1, r2, r2
 8004b3e:	6139      	str	r1, [r7, #16]
 8004b40:	415b      	adcs	r3, r3
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b48:	1912      	adds	r2, r2, r4
 8004b4a:	eb45 0303 	adc.w	r3, r5, r3
 8004b4e:	f04f 0000 	mov.w	r0, #0
 8004b52:	f04f 0100 	mov.w	r1, #0
 8004b56:	00d9      	lsls	r1, r3, #3
 8004b58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b5c:	00d0      	lsls	r0, r2, #3
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	eb12 0804 	adds.w	r8, r2, r4
 8004b66:	eb43 0905 	adc.w	r9, r3, r5
 8004b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f04f 0100 	mov.w	r1, #0
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	008b      	lsls	r3, r1, #2
 8004b7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b82:	0082      	lsls	r2, r0, #2
 8004b84:	4640      	mov	r0, r8
 8004b86:	4649      	mov	r1, r9
 8004b88:	f7fc f82e 	bl	8000be8 <__aeabi_uldivmod>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4b49      	ldr	r3, [pc, #292]	; (8004cb8 <UART_SetConfig+0x38c>)
 8004b92:	fba3 2302 	umull	r2, r3, r3, r2
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	011e      	lsls	r6, r3, #4
 8004b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f04f 0100 	mov.w	r1, #0
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	1894      	adds	r4, r2, r2
 8004ba8:	60bc      	str	r4, [r7, #8]
 8004baa:	415b      	adcs	r3, r3
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bb2:	1812      	adds	r2, r2, r0
 8004bb4:	eb41 0303 	adc.w	r3, r1, r3
 8004bb8:	f04f 0400 	mov.w	r4, #0
 8004bbc:	f04f 0500 	mov.w	r5, #0
 8004bc0:	00dd      	lsls	r5, r3, #3
 8004bc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bc6:	00d4      	lsls	r4, r2, #3
 8004bc8:	4622      	mov	r2, r4
 8004bca:	462b      	mov	r3, r5
 8004bcc:	1814      	adds	r4, r2, r0
 8004bce:	64bc      	str	r4, [r7, #72]	; 0x48
 8004bd0:	414b      	adcs	r3, r1
 8004bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f04f 0100 	mov.w	r1, #0
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	008b      	lsls	r3, r1, #2
 8004be8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bec:	0082      	lsls	r2, r0, #2
 8004bee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004bf2:	f7fb fff9 	bl	8000be8 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4b2f      	ldr	r3, [pc, #188]	; (8004cb8 <UART_SetConfig+0x38c>)
 8004bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2164      	movs	r1, #100	; 0x64
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	011b      	lsls	r3, r3, #4
 8004c0c:	3332      	adds	r3, #50	; 0x32
 8004c0e:	4a2a      	ldr	r2, [pc, #168]	; (8004cb8 <UART_SetConfig+0x38c>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c1a:	441e      	add	r6, r3
 8004c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f04f 0100 	mov.w	r1, #0
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	1894      	adds	r4, r2, r2
 8004c2a:	603c      	str	r4, [r7, #0]
 8004c2c:	415b      	adcs	r3, r3
 8004c2e:	607b      	str	r3, [r7, #4]
 8004c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c34:	1812      	adds	r2, r2, r0
 8004c36:	eb41 0303 	adc.w	r3, r1, r3
 8004c3a:	f04f 0400 	mov.w	r4, #0
 8004c3e:	f04f 0500 	mov.w	r5, #0
 8004c42:	00dd      	lsls	r5, r3, #3
 8004c44:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c48:	00d4      	lsls	r4, r2, #3
 8004c4a:	4622      	mov	r2, r4
 8004c4c:	462b      	mov	r3, r5
 8004c4e:	eb12 0a00 	adds.w	sl, r2, r0
 8004c52:	eb43 0b01 	adc.w	fp, r3, r1
 8004c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f04f 0100 	mov.w	r1, #0
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	008b      	lsls	r3, r1, #2
 8004c6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c6e:	0082      	lsls	r2, r0, #2
 8004c70:	4650      	mov	r0, sl
 8004c72:	4659      	mov	r1, fp
 8004c74:	f7fb ffb8 	bl	8000be8 <__aeabi_uldivmod>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <UART_SetConfig+0x38c>)
 8004c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	2164      	movs	r1, #100	; 0x64
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	3332      	adds	r3, #50	; 0x32
 8004c90:	4a09      	ldr	r2, [pc, #36]	; (8004cb8 <UART_SetConfig+0x38c>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	f003 020f 	and.w	r2, r3, #15
 8004c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4432      	add	r2, r6
 8004ca2:	609a      	str	r2, [r3, #8]
}
 8004ca4:	bf00      	nop
 8004ca6:	377c      	adds	r7, #124	; 0x7c
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cae:	bf00      	nop
 8004cb0:	40011000 	.word	0x40011000
 8004cb4:	40011400 	.word	0x40011400
 8004cb8:	51eb851f 	.word	0x51eb851f

08004cbc <__errno>:
 8004cbc:	4b01      	ldr	r3, [pc, #4]	; (8004cc4 <__errno+0x8>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	2000000c 	.word	0x2000000c

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4d0d      	ldr	r5, [pc, #52]	; (8004d00 <__libc_init_array+0x38>)
 8004ccc:	4c0d      	ldr	r4, [pc, #52]	; (8004d04 <__libc_init_array+0x3c>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	4d0b      	ldr	r5, [pc, #44]	; (8004d08 <__libc_init_array+0x40>)
 8004cda:	4c0c      	ldr	r4, [pc, #48]	; (8004d0c <__libc_init_array+0x44>)
 8004cdc:	f002 feb6 	bl	8007a4c <_init>
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	08008004 	.word	0x08008004
 8004d04:	08008004 	.word	0x08008004
 8004d08:	08008004 	.word	0x08008004
 8004d0c:	08008008 	.word	0x08008008

08004d10 <memset>:
 8004d10:	4402      	add	r2, r0
 8004d12:	4603      	mov	r3, r0
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d100      	bne.n	8004d1a <memset+0xa>
 8004d18:	4770      	bx	lr
 8004d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d1e:	e7f9      	b.n	8004d14 <memset+0x4>

08004d20 <__cvt>:
 8004d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d24:	ec55 4b10 	vmov	r4, r5, d0
 8004d28:	2d00      	cmp	r5, #0
 8004d2a:	460e      	mov	r6, r1
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	462b      	mov	r3, r5
 8004d30:	bfbb      	ittet	lt
 8004d32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d36:	461d      	movlt	r5, r3
 8004d38:	2300      	movge	r3, #0
 8004d3a:	232d      	movlt	r3, #45	; 0x2d
 8004d3c:	700b      	strb	r3, [r1, #0]
 8004d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d44:	4691      	mov	r9, r2
 8004d46:	f023 0820 	bic.w	r8, r3, #32
 8004d4a:	bfbc      	itt	lt
 8004d4c:	4622      	movlt	r2, r4
 8004d4e:	4614      	movlt	r4, r2
 8004d50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d54:	d005      	beq.n	8004d62 <__cvt+0x42>
 8004d56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d5a:	d100      	bne.n	8004d5e <__cvt+0x3e>
 8004d5c:	3601      	adds	r6, #1
 8004d5e:	2102      	movs	r1, #2
 8004d60:	e000      	b.n	8004d64 <__cvt+0x44>
 8004d62:	2103      	movs	r1, #3
 8004d64:	ab03      	add	r3, sp, #12
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	ab02      	add	r3, sp, #8
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	ec45 4b10 	vmov	d0, r4, r5
 8004d70:	4653      	mov	r3, sl
 8004d72:	4632      	mov	r2, r6
 8004d74:	f000 fcec 	bl	8005750 <_dtoa_r>
 8004d78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d7c:	4607      	mov	r7, r0
 8004d7e:	d102      	bne.n	8004d86 <__cvt+0x66>
 8004d80:	f019 0f01 	tst.w	r9, #1
 8004d84:	d022      	beq.n	8004dcc <__cvt+0xac>
 8004d86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d8a:	eb07 0906 	add.w	r9, r7, r6
 8004d8e:	d110      	bne.n	8004db2 <__cvt+0x92>
 8004d90:	783b      	ldrb	r3, [r7, #0]
 8004d92:	2b30      	cmp	r3, #48	; 0x30
 8004d94:	d10a      	bne.n	8004dac <__cvt+0x8c>
 8004d96:	2200      	movs	r2, #0
 8004d98:	2300      	movs	r3, #0
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	f7fb feb3 	bl	8000b08 <__aeabi_dcmpeq>
 8004da2:	b918      	cbnz	r0, 8004dac <__cvt+0x8c>
 8004da4:	f1c6 0601 	rsb	r6, r6, #1
 8004da8:	f8ca 6000 	str.w	r6, [sl]
 8004dac:	f8da 3000 	ldr.w	r3, [sl]
 8004db0:	4499      	add	r9, r3
 8004db2:	2200      	movs	r2, #0
 8004db4:	2300      	movs	r3, #0
 8004db6:	4620      	mov	r0, r4
 8004db8:	4629      	mov	r1, r5
 8004dba:	f7fb fea5 	bl	8000b08 <__aeabi_dcmpeq>
 8004dbe:	b108      	cbz	r0, 8004dc4 <__cvt+0xa4>
 8004dc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004dc4:	2230      	movs	r2, #48	; 0x30
 8004dc6:	9b03      	ldr	r3, [sp, #12]
 8004dc8:	454b      	cmp	r3, r9
 8004dca:	d307      	bcc.n	8004ddc <__cvt+0xbc>
 8004dcc:	9b03      	ldr	r3, [sp, #12]
 8004dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dd0:	1bdb      	subs	r3, r3, r7
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	b004      	add	sp, #16
 8004dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ddc:	1c59      	adds	r1, r3, #1
 8004dde:	9103      	str	r1, [sp, #12]
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	e7f0      	b.n	8004dc6 <__cvt+0xa6>

08004de4 <__exponent>:
 8004de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004de6:	4603      	mov	r3, r0
 8004de8:	2900      	cmp	r1, #0
 8004dea:	bfb8      	it	lt
 8004dec:	4249      	neglt	r1, r1
 8004dee:	f803 2b02 	strb.w	r2, [r3], #2
 8004df2:	bfb4      	ite	lt
 8004df4:	222d      	movlt	r2, #45	; 0x2d
 8004df6:	222b      	movge	r2, #43	; 0x2b
 8004df8:	2909      	cmp	r1, #9
 8004dfa:	7042      	strb	r2, [r0, #1]
 8004dfc:	dd2a      	ble.n	8004e54 <__exponent+0x70>
 8004dfe:	f10d 0407 	add.w	r4, sp, #7
 8004e02:	46a4      	mov	ip, r4
 8004e04:	270a      	movs	r7, #10
 8004e06:	46a6      	mov	lr, r4
 8004e08:	460a      	mov	r2, r1
 8004e0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e0e:	fb07 1516 	mls	r5, r7, r6, r1
 8004e12:	3530      	adds	r5, #48	; 0x30
 8004e14:	2a63      	cmp	r2, #99	; 0x63
 8004e16:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e1e:	4631      	mov	r1, r6
 8004e20:	dcf1      	bgt.n	8004e06 <__exponent+0x22>
 8004e22:	3130      	adds	r1, #48	; 0x30
 8004e24:	f1ae 0502 	sub.w	r5, lr, #2
 8004e28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e2c:	1c44      	adds	r4, r0, #1
 8004e2e:	4629      	mov	r1, r5
 8004e30:	4561      	cmp	r1, ip
 8004e32:	d30a      	bcc.n	8004e4a <__exponent+0x66>
 8004e34:	f10d 0209 	add.w	r2, sp, #9
 8004e38:	eba2 020e 	sub.w	r2, r2, lr
 8004e3c:	4565      	cmp	r5, ip
 8004e3e:	bf88      	it	hi
 8004e40:	2200      	movhi	r2, #0
 8004e42:	4413      	add	r3, r2
 8004e44:	1a18      	subs	r0, r3, r0
 8004e46:	b003      	add	sp, #12
 8004e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e52:	e7ed      	b.n	8004e30 <__exponent+0x4c>
 8004e54:	2330      	movs	r3, #48	; 0x30
 8004e56:	3130      	adds	r1, #48	; 0x30
 8004e58:	7083      	strb	r3, [r0, #2]
 8004e5a:	70c1      	strb	r1, [r0, #3]
 8004e5c:	1d03      	adds	r3, r0, #4
 8004e5e:	e7f1      	b.n	8004e44 <__exponent+0x60>

08004e60 <_printf_float>:
 8004e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	ed2d 8b02 	vpush	{d8}
 8004e68:	b08d      	sub	sp, #52	; 0x34
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e70:	4616      	mov	r6, r2
 8004e72:	461f      	mov	r7, r3
 8004e74:	4605      	mov	r5, r0
 8004e76:	f001 fa57 	bl	8006328 <_localeconv_r>
 8004e7a:	f8d0 a000 	ldr.w	sl, [r0]
 8004e7e:	4650      	mov	r0, sl
 8004e80:	f7fb f9c6 	bl	8000210 <strlen>
 8004e84:	2300      	movs	r3, #0
 8004e86:	930a      	str	r3, [sp, #40]	; 0x28
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	9305      	str	r3, [sp, #20]
 8004e8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004e90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e94:	3307      	adds	r3, #7
 8004e96:	f023 0307 	bic.w	r3, r3, #7
 8004e9a:	f103 0208 	add.w	r2, r3, #8
 8004e9e:	f8c8 2000 	str.w	r2, [r8]
 8004ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004eaa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004eae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004eb2:	9307      	str	r3, [sp, #28]
 8004eb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004eb8:	ee08 0a10 	vmov	s16, r0
 8004ebc:	4b9f      	ldr	r3, [pc, #636]	; (800513c <_printf_float+0x2dc>)
 8004ebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec6:	f7fb fe51 	bl	8000b6c <__aeabi_dcmpun>
 8004eca:	bb88      	cbnz	r0, 8004f30 <_printf_float+0xd0>
 8004ecc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ed0:	4b9a      	ldr	r3, [pc, #616]	; (800513c <_printf_float+0x2dc>)
 8004ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed6:	f7fb fe2b 	bl	8000b30 <__aeabi_dcmple>
 8004eda:	bb48      	cbnz	r0, 8004f30 <_printf_float+0xd0>
 8004edc:	2200      	movs	r2, #0
 8004ede:	2300      	movs	r3, #0
 8004ee0:	4640      	mov	r0, r8
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	f7fb fe1a 	bl	8000b1c <__aeabi_dcmplt>
 8004ee8:	b110      	cbz	r0, 8004ef0 <_printf_float+0x90>
 8004eea:	232d      	movs	r3, #45	; 0x2d
 8004eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef0:	4b93      	ldr	r3, [pc, #588]	; (8005140 <_printf_float+0x2e0>)
 8004ef2:	4894      	ldr	r0, [pc, #592]	; (8005144 <_printf_float+0x2e4>)
 8004ef4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ef8:	bf94      	ite	ls
 8004efa:	4698      	movls	r8, r3
 8004efc:	4680      	movhi	r8, r0
 8004efe:	2303      	movs	r3, #3
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	9b05      	ldr	r3, [sp, #20]
 8004f04:	f023 0204 	bic.w	r2, r3, #4
 8004f08:	6022      	str	r2, [r4, #0]
 8004f0a:	f04f 0900 	mov.w	r9, #0
 8004f0e:	9700      	str	r7, [sp, #0]
 8004f10:	4633      	mov	r3, r6
 8004f12:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f14:	4621      	mov	r1, r4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 f9d8 	bl	80052cc <_printf_common>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	f040 8090 	bne.w	8005042 <_printf_float+0x1e2>
 8004f22:	f04f 30ff 	mov.w	r0, #4294967295
 8004f26:	b00d      	add	sp, #52	; 0x34
 8004f28:	ecbd 8b02 	vpop	{d8}
 8004f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f30:	4642      	mov	r2, r8
 8004f32:	464b      	mov	r3, r9
 8004f34:	4640      	mov	r0, r8
 8004f36:	4649      	mov	r1, r9
 8004f38:	f7fb fe18 	bl	8000b6c <__aeabi_dcmpun>
 8004f3c:	b140      	cbz	r0, 8004f50 <_printf_float+0xf0>
 8004f3e:	464b      	mov	r3, r9
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bfbc      	itt	lt
 8004f44:	232d      	movlt	r3, #45	; 0x2d
 8004f46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f4a:	487f      	ldr	r0, [pc, #508]	; (8005148 <_printf_float+0x2e8>)
 8004f4c:	4b7f      	ldr	r3, [pc, #508]	; (800514c <_printf_float+0x2ec>)
 8004f4e:	e7d1      	b.n	8004ef4 <_printf_float+0x94>
 8004f50:	6863      	ldr	r3, [r4, #4]
 8004f52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f56:	9206      	str	r2, [sp, #24]
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	d13f      	bne.n	8004fdc <_printf_float+0x17c>
 8004f5c:	2306      	movs	r3, #6
 8004f5e:	6063      	str	r3, [r4, #4]
 8004f60:	9b05      	ldr	r3, [sp, #20]
 8004f62:	6861      	ldr	r1, [r4, #4]
 8004f64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f68:	2300      	movs	r3, #0
 8004f6a:	9303      	str	r3, [sp, #12]
 8004f6c:	ab0a      	add	r3, sp, #40	; 0x28
 8004f6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f72:	ab09      	add	r3, sp, #36	; 0x24
 8004f74:	ec49 8b10 	vmov	d0, r8, r9
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	6022      	str	r2, [r4, #0]
 8004f7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f80:	4628      	mov	r0, r5
 8004f82:	f7ff fecd 	bl	8004d20 <__cvt>
 8004f86:	9b06      	ldr	r3, [sp, #24]
 8004f88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f8a:	2b47      	cmp	r3, #71	; 0x47
 8004f8c:	4680      	mov	r8, r0
 8004f8e:	d108      	bne.n	8004fa2 <_printf_float+0x142>
 8004f90:	1cc8      	adds	r0, r1, #3
 8004f92:	db02      	blt.n	8004f9a <_printf_float+0x13a>
 8004f94:	6863      	ldr	r3, [r4, #4]
 8004f96:	4299      	cmp	r1, r3
 8004f98:	dd41      	ble.n	800501e <_printf_float+0x1be>
 8004f9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8004f9e:	fa5f fb8b 	uxtb.w	fp, fp
 8004fa2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fa6:	d820      	bhi.n	8004fea <_printf_float+0x18a>
 8004fa8:	3901      	subs	r1, #1
 8004faa:	465a      	mov	r2, fp
 8004fac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fb0:	9109      	str	r1, [sp, #36]	; 0x24
 8004fb2:	f7ff ff17 	bl	8004de4 <__exponent>
 8004fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fb8:	1813      	adds	r3, r2, r0
 8004fba:	2a01      	cmp	r2, #1
 8004fbc:	4681      	mov	r9, r0
 8004fbe:	6123      	str	r3, [r4, #16]
 8004fc0:	dc02      	bgt.n	8004fc8 <_printf_float+0x168>
 8004fc2:	6822      	ldr	r2, [r4, #0]
 8004fc4:	07d2      	lsls	r2, r2, #31
 8004fc6:	d501      	bpl.n	8004fcc <_printf_float+0x16c>
 8004fc8:	3301      	adds	r3, #1
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d09c      	beq.n	8004f0e <_printf_float+0xae>
 8004fd4:	232d      	movs	r3, #45	; 0x2d
 8004fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fda:	e798      	b.n	8004f0e <_printf_float+0xae>
 8004fdc:	9a06      	ldr	r2, [sp, #24]
 8004fde:	2a47      	cmp	r2, #71	; 0x47
 8004fe0:	d1be      	bne.n	8004f60 <_printf_float+0x100>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1bc      	bne.n	8004f60 <_printf_float+0x100>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e7b9      	b.n	8004f5e <_printf_float+0xfe>
 8004fea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004fee:	d118      	bne.n	8005022 <_printf_float+0x1c2>
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	6863      	ldr	r3, [r4, #4]
 8004ff4:	dd0b      	ble.n	800500e <_printf_float+0x1ae>
 8004ff6:	6121      	str	r1, [r4, #16]
 8004ff8:	b913      	cbnz	r3, 8005000 <_printf_float+0x1a0>
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	07d0      	lsls	r0, r2, #31
 8004ffe:	d502      	bpl.n	8005006 <_printf_float+0x1a6>
 8005000:	3301      	adds	r3, #1
 8005002:	440b      	add	r3, r1
 8005004:	6123      	str	r3, [r4, #16]
 8005006:	65a1      	str	r1, [r4, #88]	; 0x58
 8005008:	f04f 0900 	mov.w	r9, #0
 800500c:	e7de      	b.n	8004fcc <_printf_float+0x16c>
 800500e:	b913      	cbnz	r3, 8005016 <_printf_float+0x1b6>
 8005010:	6822      	ldr	r2, [r4, #0]
 8005012:	07d2      	lsls	r2, r2, #31
 8005014:	d501      	bpl.n	800501a <_printf_float+0x1ba>
 8005016:	3302      	adds	r3, #2
 8005018:	e7f4      	b.n	8005004 <_printf_float+0x1a4>
 800501a:	2301      	movs	r3, #1
 800501c:	e7f2      	b.n	8005004 <_printf_float+0x1a4>
 800501e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005024:	4299      	cmp	r1, r3
 8005026:	db05      	blt.n	8005034 <_printf_float+0x1d4>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	6121      	str	r1, [r4, #16]
 800502c:	07d8      	lsls	r0, r3, #31
 800502e:	d5ea      	bpl.n	8005006 <_printf_float+0x1a6>
 8005030:	1c4b      	adds	r3, r1, #1
 8005032:	e7e7      	b.n	8005004 <_printf_float+0x1a4>
 8005034:	2900      	cmp	r1, #0
 8005036:	bfd4      	ite	le
 8005038:	f1c1 0202 	rsble	r2, r1, #2
 800503c:	2201      	movgt	r2, #1
 800503e:	4413      	add	r3, r2
 8005040:	e7e0      	b.n	8005004 <_printf_float+0x1a4>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	055a      	lsls	r2, r3, #21
 8005046:	d407      	bmi.n	8005058 <_printf_float+0x1f8>
 8005048:	6923      	ldr	r3, [r4, #16]
 800504a:	4642      	mov	r2, r8
 800504c:	4631      	mov	r1, r6
 800504e:	4628      	mov	r0, r5
 8005050:	47b8      	blx	r7
 8005052:	3001      	adds	r0, #1
 8005054:	d12c      	bne.n	80050b0 <_printf_float+0x250>
 8005056:	e764      	b.n	8004f22 <_printf_float+0xc2>
 8005058:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800505c:	f240 80e0 	bls.w	8005220 <_printf_float+0x3c0>
 8005060:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005064:	2200      	movs	r2, #0
 8005066:	2300      	movs	r3, #0
 8005068:	f7fb fd4e 	bl	8000b08 <__aeabi_dcmpeq>
 800506c:	2800      	cmp	r0, #0
 800506e:	d034      	beq.n	80050da <_printf_float+0x27a>
 8005070:	4a37      	ldr	r2, [pc, #220]	; (8005150 <_printf_float+0x2f0>)
 8005072:	2301      	movs	r3, #1
 8005074:	4631      	mov	r1, r6
 8005076:	4628      	mov	r0, r5
 8005078:	47b8      	blx	r7
 800507a:	3001      	adds	r0, #1
 800507c:	f43f af51 	beq.w	8004f22 <_printf_float+0xc2>
 8005080:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005084:	429a      	cmp	r2, r3
 8005086:	db02      	blt.n	800508e <_printf_float+0x22e>
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	07d8      	lsls	r0, r3, #31
 800508c:	d510      	bpl.n	80050b0 <_printf_float+0x250>
 800508e:	ee18 3a10 	vmov	r3, s16
 8005092:	4652      	mov	r2, sl
 8005094:	4631      	mov	r1, r6
 8005096:	4628      	mov	r0, r5
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	f43f af41 	beq.w	8004f22 <_printf_float+0xc2>
 80050a0:	f04f 0800 	mov.w	r8, #0
 80050a4:	f104 091a 	add.w	r9, r4, #26
 80050a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050aa:	3b01      	subs	r3, #1
 80050ac:	4543      	cmp	r3, r8
 80050ae:	dc09      	bgt.n	80050c4 <_printf_float+0x264>
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	079b      	lsls	r3, r3, #30
 80050b4:	f100 8105 	bmi.w	80052c2 <_printf_float+0x462>
 80050b8:	68e0      	ldr	r0, [r4, #12]
 80050ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050bc:	4298      	cmp	r0, r3
 80050be:	bfb8      	it	lt
 80050c0:	4618      	movlt	r0, r3
 80050c2:	e730      	b.n	8004f26 <_printf_float+0xc6>
 80050c4:	2301      	movs	r3, #1
 80050c6:	464a      	mov	r2, r9
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	f43f af27 	beq.w	8004f22 <_printf_float+0xc2>
 80050d4:	f108 0801 	add.w	r8, r8, #1
 80050d8:	e7e6      	b.n	80050a8 <_printf_float+0x248>
 80050da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	dc39      	bgt.n	8005154 <_printf_float+0x2f4>
 80050e0:	4a1b      	ldr	r2, [pc, #108]	; (8005150 <_printf_float+0x2f0>)
 80050e2:	2301      	movs	r3, #1
 80050e4:	4631      	mov	r1, r6
 80050e6:	4628      	mov	r0, r5
 80050e8:	47b8      	blx	r7
 80050ea:	3001      	adds	r0, #1
 80050ec:	f43f af19 	beq.w	8004f22 <_printf_float+0xc2>
 80050f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050f4:	4313      	orrs	r3, r2
 80050f6:	d102      	bne.n	80050fe <_printf_float+0x29e>
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	07d9      	lsls	r1, r3, #31
 80050fc:	d5d8      	bpl.n	80050b0 <_printf_float+0x250>
 80050fe:	ee18 3a10 	vmov	r3, s16
 8005102:	4652      	mov	r2, sl
 8005104:	4631      	mov	r1, r6
 8005106:	4628      	mov	r0, r5
 8005108:	47b8      	blx	r7
 800510a:	3001      	adds	r0, #1
 800510c:	f43f af09 	beq.w	8004f22 <_printf_float+0xc2>
 8005110:	f04f 0900 	mov.w	r9, #0
 8005114:	f104 0a1a 	add.w	sl, r4, #26
 8005118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800511a:	425b      	negs	r3, r3
 800511c:	454b      	cmp	r3, r9
 800511e:	dc01      	bgt.n	8005124 <_printf_float+0x2c4>
 8005120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005122:	e792      	b.n	800504a <_printf_float+0x1ea>
 8005124:	2301      	movs	r3, #1
 8005126:	4652      	mov	r2, sl
 8005128:	4631      	mov	r1, r6
 800512a:	4628      	mov	r0, r5
 800512c:	47b8      	blx	r7
 800512e:	3001      	adds	r0, #1
 8005130:	f43f aef7 	beq.w	8004f22 <_printf_float+0xc2>
 8005134:	f109 0901 	add.w	r9, r9, #1
 8005138:	e7ee      	b.n	8005118 <_printf_float+0x2b8>
 800513a:	bf00      	nop
 800513c:	7fefffff 	.word	0x7fefffff
 8005140:	08007c20 	.word	0x08007c20
 8005144:	08007c24 	.word	0x08007c24
 8005148:	08007c2c 	.word	0x08007c2c
 800514c:	08007c28 	.word	0x08007c28
 8005150:	08007c30 	.word	0x08007c30
 8005154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005156:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005158:	429a      	cmp	r2, r3
 800515a:	bfa8      	it	ge
 800515c:	461a      	movge	r2, r3
 800515e:	2a00      	cmp	r2, #0
 8005160:	4691      	mov	r9, r2
 8005162:	dc37      	bgt.n	80051d4 <_printf_float+0x374>
 8005164:	f04f 0b00 	mov.w	fp, #0
 8005168:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800516c:	f104 021a 	add.w	r2, r4, #26
 8005170:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005172:	9305      	str	r3, [sp, #20]
 8005174:	eba3 0309 	sub.w	r3, r3, r9
 8005178:	455b      	cmp	r3, fp
 800517a:	dc33      	bgt.n	80051e4 <_printf_float+0x384>
 800517c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005180:	429a      	cmp	r2, r3
 8005182:	db3b      	blt.n	80051fc <_printf_float+0x39c>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	07da      	lsls	r2, r3, #31
 8005188:	d438      	bmi.n	80051fc <_printf_float+0x39c>
 800518a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800518c:	9b05      	ldr	r3, [sp, #20]
 800518e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	eba2 0901 	sub.w	r9, r2, r1
 8005196:	4599      	cmp	r9, r3
 8005198:	bfa8      	it	ge
 800519a:	4699      	movge	r9, r3
 800519c:	f1b9 0f00 	cmp.w	r9, #0
 80051a0:	dc35      	bgt.n	800520e <_printf_float+0x3ae>
 80051a2:	f04f 0800 	mov.w	r8, #0
 80051a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051aa:	f104 0a1a 	add.w	sl, r4, #26
 80051ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	eba3 0309 	sub.w	r3, r3, r9
 80051b8:	4543      	cmp	r3, r8
 80051ba:	f77f af79 	ble.w	80050b0 <_printf_float+0x250>
 80051be:	2301      	movs	r3, #1
 80051c0:	4652      	mov	r2, sl
 80051c2:	4631      	mov	r1, r6
 80051c4:	4628      	mov	r0, r5
 80051c6:	47b8      	blx	r7
 80051c8:	3001      	adds	r0, #1
 80051ca:	f43f aeaa 	beq.w	8004f22 <_printf_float+0xc2>
 80051ce:	f108 0801 	add.w	r8, r8, #1
 80051d2:	e7ec      	b.n	80051ae <_printf_float+0x34e>
 80051d4:	4613      	mov	r3, r2
 80051d6:	4631      	mov	r1, r6
 80051d8:	4642      	mov	r2, r8
 80051da:	4628      	mov	r0, r5
 80051dc:	47b8      	blx	r7
 80051de:	3001      	adds	r0, #1
 80051e0:	d1c0      	bne.n	8005164 <_printf_float+0x304>
 80051e2:	e69e      	b.n	8004f22 <_printf_float+0xc2>
 80051e4:	2301      	movs	r3, #1
 80051e6:	4631      	mov	r1, r6
 80051e8:	4628      	mov	r0, r5
 80051ea:	9205      	str	r2, [sp, #20]
 80051ec:	47b8      	blx	r7
 80051ee:	3001      	adds	r0, #1
 80051f0:	f43f ae97 	beq.w	8004f22 <_printf_float+0xc2>
 80051f4:	9a05      	ldr	r2, [sp, #20]
 80051f6:	f10b 0b01 	add.w	fp, fp, #1
 80051fa:	e7b9      	b.n	8005170 <_printf_float+0x310>
 80051fc:	ee18 3a10 	vmov	r3, s16
 8005200:	4652      	mov	r2, sl
 8005202:	4631      	mov	r1, r6
 8005204:	4628      	mov	r0, r5
 8005206:	47b8      	blx	r7
 8005208:	3001      	adds	r0, #1
 800520a:	d1be      	bne.n	800518a <_printf_float+0x32a>
 800520c:	e689      	b.n	8004f22 <_printf_float+0xc2>
 800520e:	9a05      	ldr	r2, [sp, #20]
 8005210:	464b      	mov	r3, r9
 8005212:	4442      	add	r2, r8
 8005214:	4631      	mov	r1, r6
 8005216:	4628      	mov	r0, r5
 8005218:	47b8      	blx	r7
 800521a:	3001      	adds	r0, #1
 800521c:	d1c1      	bne.n	80051a2 <_printf_float+0x342>
 800521e:	e680      	b.n	8004f22 <_printf_float+0xc2>
 8005220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005222:	2a01      	cmp	r2, #1
 8005224:	dc01      	bgt.n	800522a <_printf_float+0x3ca>
 8005226:	07db      	lsls	r3, r3, #31
 8005228:	d538      	bpl.n	800529c <_printf_float+0x43c>
 800522a:	2301      	movs	r3, #1
 800522c:	4642      	mov	r2, r8
 800522e:	4631      	mov	r1, r6
 8005230:	4628      	mov	r0, r5
 8005232:	47b8      	blx	r7
 8005234:	3001      	adds	r0, #1
 8005236:	f43f ae74 	beq.w	8004f22 <_printf_float+0xc2>
 800523a:	ee18 3a10 	vmov	r3, s16
 800523e:	4652      	mov	r2, sl
 8005240:	4631      	mov	r1, r6
 8005242:	4628      	mov	r0, r5
 8005244:	47b8      	blx	r7
 8005246:	3001      	adds	r0, #1
 8005248:	f43f ae6b 	beq.w	8004f22 <_printf_float+0xc2>
 800524c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005250:	2200      	movs	r2, #0
 8005252:	2300      	movs	r3, #0
 8005254:	f7fb fc58 	bl	8000b08 <__aeabi_dcmpeq>
 8005258:	b9d8      	cbnz	r0, 8005292 <_printf_float+0x432>
 800525a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800525c:	f108 0201 	add.w	r2, r8, #1
 8005260:	3b01      	subs	r3, #1
 8005262:	4631      	mov	r1, r6
 8005264:	4628      	mov	r0, r5
 8005266:	47b8      	blx	r7
 8005268:	3001      	adds	r0, #1
 800526a:	d10e      	bne.n	800528a <_printf_float+0x42a>
 800526c:	e659      	b.n	8004f22 <_printf_float+0xc2>
 800526e:	2301      	movs	r3, #1
 8005270:	4652      	mov	r2, sl
 8005272:	4631      	mov	r1, r6
 8005274:	4628      	mov	r0, r5
 8005276:	47b8      	blx	r7
 8005278:	3001      	adds	r0, #1
 800527a:	f43f ae52 	beq.w	8004f22 <_printf_float+0xc2>
 800527e:	f108 0801 	add.w	r8, r8, #1
 8005282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005284:	3b01      	subs	r3, #1
 8005286:	4543      	cmp	r3, r8
 8005288:	dcf1      	bgt.n	800526e <_printf_float+0x40e>
 800528a:	464b      	mov	r3, r9
 800528c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005290:	e6dc      	b.n	800504c <_printf_float+0x1ec>
 8005292:	f04f 0800 	mov.w	r8, #0
 8005296:	f104 0a1a 	add.w	sl, r4, #26
 800529a:	e7f2      	b.n	8005282 <_printf_float+0x422>
 800529c:	2301      	movs	r3, #1
 800529e:	4642      	mov	r2, r8
 80052a0:	e7df      	b.n	8005262 <_printf_float+0x402>
 80052a2:	2301      	movs	r3, #1
 80052a4:	464a      	mov	r2, r9
 80052a6:	4631      	mov	r1, r6
 80052a8:	4628      	mov	r0, r5
 80052aa:	47b8      	blx	r7
 80052ac:	3001      	adds	r0, #1
 80052ae:	f43f ae38 	beq.w	8004f22 <_printf_float+0xc2>
 80052b2:	f108 0801 	add.w	r8, r8, #1
 80052b6:	68e3      	ldr	r3, [r4, #12]
 80052b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052ba:	1a5b      	subs	r3, r3, r1
 80052bc:	4543      	cmp	r3, r8
 80052be:	dcf0      	bgt.n	80052a2 <_printf_float+0x442>
 80052c0:	e6fa      	b.n	80050b8 <_printf_float+0x258>
 80052c2:	f04f 0800 	mov.w	r8, #0
 80052c6:	f104 0919 	add.w	r9, r4, #25
 80052ca:	e7f4      	b.n	80052b6 <_printf_float+0x456>

080052cc <_printf_common>:
 80052cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	4616      	mov	r6, r2
 80052d2:	4699      	mov	r9, r3
 80052d4:	688a      	ldr	r2, [r1, #8]
 80052d6:	690b      	ldr	r3, [r1, #16]
 80052d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052dc:	4293      	cmp	r3, r2
 80052de:	bfb8      	it	lt
 80052e0:	4613      	movlt	r3, r2
 80052e2:	6033      	str	r3, [r6, #0]
 80052e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052e8:	4607      	mov	r7, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	b10a      	cbz	r2, 80052f2 <_printf_common+0x26>
 80052ee:	3301      	adds	r3, #1
 80052f0:	6033      	str	r3, [r6, #0]
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	0699      	lsls	r1, r3, #26
 80052f6:	bf42      	ittt	mi
 80052f8:	6833      	ldrmi	r3, [r6, #0]
 80052fa:	3302      	addmi	r3, #2
 80052fc:	6033      	strmi	r3, [r6, #0]
 80052fe:	6825      	ldr	r5, [r4, #0]
 8005300:	f015 0506 	ands.w	r5, r5, #6
 8005304:	d106      	bne.n	8005314 <_printf_common+0x48>
 8005306:	f104 0a19 	add.w	sl, r4, #25
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	6832      	ldr	r2, [r6, #0]
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	42ab      	cmp	r3, r5
 8005312:	dc26      	bgt.n	8005362 <_printf_common+0x96>
 8005314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005318:	1e13      	subs	r3, r2, #0
 800531a:	6822      	ldr	r2, [r4, #0]
 800531c:	bf18      	it	ne
 800531e:	2301      	movne	r3, #1
 8005320:	0692      	lsls	r2, r2, #26
 8005322:	d42b      	bmi.n	800537c <_printf_common+0xb0>
 8005324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005328:	4649      	mov	r1, r9
 800532a:	4638      	mov	r0, r7
 800532c:	47c0      	blx	r8
 800532e:	3001      	adds	r0, #1
 8005330:	d01e      	beq.n	8005370 <_printf_common+0xa4>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	68e5      	ldr	r5, [r4, #12]
 8005336:	6832      	ldr	r2, [r6, #0]
 8005338:	f003 0306 	and.w	r3, r3, #6
 800533c:	2b04      	cmp	r3, #4
 800533e:	bf08      	it	eq
 8005340:	1aad      	subeq	r5, r5, r2
 8005342:	68a3      	ldr	r3, [r4, #8]
 8005344:	6922      	ldr	r2, [r4, #16]
 8005346:	bf0c      	ite	eq
 8005348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800534c:	2500      	movne	r5, #0
 800534e:	4293      	cmp	r3, r2
 8005350:	bfc4      	itt	gt
 8005352:	1a9b      	subgt	r3, r3, r2
 8005354:	18ed      	addgt	r5, r5, r3
 8005356:	2600      	movs	r6, #0
 8005358:	341a      	adds	r4, #26
 800535a:	42b5      	cmp	r5, r6
 800535c:	d11a      	bne.n	8005394 <_printf_common+0xc8>
 800535e:	2000      	movs	r0, #0
 8005360:	e008      	b.n	8005374 <_printf_common+0xa8>
 8005362:	2301      	movs	r3, #1
 8005364:	4652      	mov	r2, sl
 8005366:	4649      	mov	r1, r9
 8005368:	4638      	mov	r0, r7
 800536a:	47c0      	blx	r8
 800536c:	3001      	adds	r0, #1
 800536e:	d103      	bne.n	8005378 <_printf_common+0xac>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005378:	3501      	adds	r5, #1
 800537a:	e7c6      	b.n	800530a <_printf_common+0x3e>
 800537c:	18e1      	adds	r1, r4, r3
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	2030      	movs	r0, #48	; 0x30
 8005382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005386:	4422      	add	r2, r4
 8005388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800538c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005390:	3302      	adds	r3, #2
 8005392:	e7c7      	b.n	8005324 <_printf_common+0x58>
 8005394:	2301      	movs	r3, #1
 8005396:	4622      	mov	r2, r4
 8005398:	4649      	mov	r1, r9
 800539a:	4638      	mov	r0, r7
 800539c:	47c0      	blx	r8
 800539e:	3001      	adds	r0, #1
 80053a0:	d0e6      	beq.n	8005370 <_printf_common+0xa4>
 80053a2:	3601      	adds	r6, #1
 80053a4:	e7d9      	b.n	800535a <_printf_common+0x8e>
	...

080053a8 <_printf_i>:
 80053a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	460c      	mov	r4, r1
 80053ae:	4691      	mov	r9, r2
 80053b0:	7e27      	ldrb	r7, [r4, #24]
 80053b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80053b4:	2f78      	cmp	r7, #120	; 0x78
 80053b6:	4680      	mov	r8, r0
 80053b8:	469a      	mov	sl, r3
 80053ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053be:	d807      	bhi.n	80053d0 <_printf_i+0x28>
 80053c0:	2f62      	cmp	r7, #98	; 0x62
 80053c2:	d80a      	bhi.n	80053da <_printf_i+0x32>
 80053c4:	2f00      	cmp	r7, #0
 80053c6:	f000 80d8 	beq.w	800557a <_printf_i+0x1d2>
 80053ca:	2f58      	cmp	r7, #88	; 0x58
 80053cc:	f000 80a3 	beq.w	8005516 <_printf_i+0x16e>
 80053d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053d8:	e03a      	b.n	8005450 <_printf_i+0xa8>
 80053da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053de:	2b15      	cmp	r3, #21
 80053e0:	d8f6      	bhi.n	80053d0 <_printf_i+0x28>
 80053e2:	a001      	add	r0, pc, #4	; (adr r0, 80053e8 <_printf_i+0x40>)
 80053e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053e8:	08005441 	.word	0x08005441
 80053ec:	08005455 	.word	0x08005455
 80053f0:	080053d1 	.word	0x080053d1
 80053f4:	080053d1 	.word	0x080053d1
 80053f8:	080053d1 	.word	0x080053d1
 80053fc:	080053d1 	.word	0x080053d1
 8005400:	08005455 	.word	0x08005455
 8005404:	080053d1 	.word	0x080053d1
 8005408:	080053d1 	.word	0x080053d1
 800540c:	080053d1 	.word	0x080053d1
 8005410:	080053d1 	.word	0x080053d1
 8005414:	08005561 	.word	0x08005561
 8005418:	08005485 	.word	0x08005485
 800541c:	08005543 	.word	0x08005543
 8005420:	080053d1 	.word	0x080053d1
 8005424:	080053d1 	.word	0x080053d1
 8005428:	08005583 	.word	0x08005583
 800542c:	080053d1 	.word	0x080053d1
 8005430:	08005485 	.word	0x08005485
 8005434:	080053d1 	.word	0x080053d1
 8005438:	080053d1 	.word	0x080053d1
 800543c:	0800554b 	.word	0x0800554b
 8005440:	680b      	ldr	r3, [r1, #0]
 8005442:	1d1a      	adds	r2, r3, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	600a      	str	r2, [r1, #0]
 8005448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800544c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005450:	2301      	movs	r3, #1
 8005452:	e0a3      	b.n	800559c <_printf_i+0x1f4>
 8005454:	6825      	ldr	r5, [r4, #0]
 8005456:	6808      	ldr	r0, [r1, #0]
 8005458:	062e      	lsls	r6, r5, #24
 800545a:	f100 0304 	add.w	r3, r0, #4
 800545e:	d50a      	bpl.n	8005476 <_printf_i+0xce>
 8005460:	6805      	ldr	r5, [r0, #0]
 8005462:	600b      	str	r3, [r1, #0]
 8005464:	2d00      	cmp	r5, #0
 8005466:	da03      	bge.n	8005470 <_printf_i+0xc8>
 8005468:	232d      	movs	r3, #45	; 0x2d
 800546a:	426d      	negs	r5, r5
 800546c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005470:	485e      	ldr	r0, [pc, #376]	; (80055ec <_printf_i+0x244>)
 8005472:	230a      	movs	r3, #10
 8005474:	e019      	b.n	80054aa <_printf_i+0x102>
 8005476:	f015 0f40 	tst.w	r5, #64	; 0x40
 800547a:	6805      	ldr	r5, [r0, #0]
 800547c:	600b      	str	r3, [r1, #0]
 800547e:	bf18      	it	ne
 8005480:	b22d      	sxthne	r5, r5
 8005482:	e7ef      	b.n	8005464 <_printf_i+0xbc>
 8005484:	680b      	ldr	r3, [r1, #0]
 8005486:	6825      	ldr	r5, [r4, #0]
 8005488:	1d18      	adds	r0, r3, #4
 800548a:	6008      	str	r0, [r1, #0]
 800548c:	0628      	lsls	r0, r5, #24
 800548e:	d501      	bpl.n	8005494 <_printf_i+0xec>
 8005490:	681d      	ldr	r5, [r3, #0]
 8005492:	e002      	b.n	800549a <_printf_i+0xf2>
 8005494:	0669      	lsls	r1, r5, #25
 8005496:	d5fb      	bpl.n	8005490 <_printf_i+0xe8>
 8005498:	881d      	ldrh	r5, [r3, #0]
 800549a:	4854      	ldr	r0, [pc, #336]	; (80055ec <_printf_i+0x244>)
 800549c:	2f6f      	cmp	r7, #111	; 0x6f
 800549e:	bf0c      	ite	eq
 80054a0:	2308      	moveq	r3, #8
 80054a2:	230a      	movne	r3, #10
 80054a4:	2100      	movs	r1, #0
 80054a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054aa:	6866      	ldr	r6, [r4, #4]
 80054ac:	60a6      	str	r6, [r4, #8]
 80054ae:	2e00      	cmp	r6, #0
 80054b0:	bfa2      	ittt	ge
 80054b2:	6821      	ldrge	r1, [r4, #0]
 80054b4:	f021 0104 	bicge.w	r1, r1, #4
 80054b8:	6021      	strge	r1, [r4, #0]
 80054ba:	b90d      	cbnz	r5, 80054c0 <_printf_i+0x118>
 80054bc:	2e00      	cmp	r6, #0
 80054be:	d04d      	beq.n	800555c <_printf_i+0x1b4>
 80054c0:	4616      	mov	r6, r2
 80054c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80054c6:	fb03 5711 	mls	r7, r3, r1, r5
 80054ca:	5dc7      	ldrb	r7, [r0, r7]
 80054cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054d0:	462f      	mov	r7, r5
 80054d2:	42bb      	cmp	r3, r7
 80054d4:	460d      	mov	r5, r1
 80054d6:	d9f4      	bls.n	80054c2 <_printf_i+0x11a>
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d10b      	bne.n	80054f4 <_printf_i+0x14c>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	07df      	lsls	r7, r3, #31
 80054e0:	d508      	bpl.n	80054f4 <_printf_i+0x14c>
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	6861      	ldr	r1, [r4, #4]
 80054e6:	4299      	cmp	r1, r3
 80054e8:	bfde      	ittt	le
 80054ea:	2330      	movle	r3, #48	; 0x30
 80054ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054f4:	1b92      	subs	r2, r2, r6
 80054f6:	6122      	str	r2, [r4, #16]
 80054f8:	f8cd a000 	str.w	sl, [sp]
 80054fc:	464b      	mov	r3, r9
 80054fe:	aa03      	add	r2, sp, #12
 8005500:	4621      	mov	r1, r4
 8005502:	4640      	mov	r0, r8
 8005504:	f7ff fee2 	bl	80052cc <_printf_common>
 8005508:	3001      	adds	r0, #1
 800550a:	d14c      	bne.n	80055a6 <_printf_i+0x1fe>
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	b004      	add	sp, #16
 8005512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005516:	4835      	ldr	r0, [pc, #212]	; (80055ec <_printf_i+0x244>)
 8005518:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800551c:	6823      	ldr	r3, [r4, #0]
 800551e:	680e      	ldr	r6, [r1, #0]
 8005520:	061f      	lsls	r7, r3, #24
 8005522:	f856 5b04 	ldr.w	r5, [r6], #4
 8005526:	600e      	str	r6, [r1, #0]
 8005528:	d514      	bpl.n	8005554 <_printf_i+0x1ac>
 800552a:	07d9      	lsls	r1, r3, #31
 800552c:	bf44      	itt	mi
 800552e:	f043 0320 	orrmi.w	r3, r3, #32
 8005532:	6023      	strmi	r3, [r4, #0]
 8005534:	b91d      	cbnz	r5, 800553e <_printf_i+0x196>
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	f023 0320 	bic.w	r3, r3, #32
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	2310      	movs	r3, #16
 8005540:	e7b0      	b.n	80054a4 <_printf_i+0xfc>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	f043 0320 	orr.w	r3, r3, #32
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	2378      	movs	r3, #120	; 0x78
 800554c:	4828      	ldr	r0, [pc, #160]	; (80055f0 <_printf_i+0x248>)
 800554e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005552:	e7e3      	b.n	800551c <_printf_i+0x174>
 8005554:	065e      	lsls	r6, r3, #25
 8005556:	bf48      	it	mi
 8005558:	b2ad      	uxthmi	r5, r5
 800555a:	e7e6      	b.n	800552a <_printf_i+0x182>
 800555c:	4616      	mov	r6, r2
 800555e:	e7bb      	b.n	80054d8 <_printf_i+0x130>
 8005560:	680b      	ldr	r3, [r1, #0]
 8005562:	6826      	ldr	r6, [r4, #0]
 8005564:	6960      	ldr	r0, [r4, #20]
 8005566:	1d1d      	adds	r5, r3, #4
 8005568:	600d      	str	r5, [r1, #0]
 800556a:	0635      	lsls	r5, r6, #24
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	d501      	bpl.n	8005574 <_printf_i+0x1cc>
 8005570:	6018      	str	r0, [r3, #0]
 8005572:	e002      	b.n	800557a <_printf_i+0x1d2>
 8005574:	0671      	lsls	r1, r6, #25
 8005576:	d5fb      	bpl.n	8005570 <_printf_i+0x1c8>
 8005578:	8018      	strh	r0, [r3, #0]
 800557a:	2300      	movs	r3, #0
 800557c:	6123      	str	r3, [r4, #16]
 800557e:	4616      	mov	r6, r2
 8005580:	e7ba      	b.n	80054f8 <_printf_i+0x150>
 8005582:	680b      	ldr	r3, [r1, #0]
 8005584:	1d1a      	adds	r2, r3, #4
 8005586:	600a      	str	r2, [r1, #0]
 8005588:	681e      	ldr	r6, [r3, #0]
 800558a:	6862      	ldr	r2, [r4, #4]
 800558c:	2100      	movs	r1, #0
 800558e:	4630      	mov	r0, r6
 8005590:	f7fa fe46 	bl	8000220 <memchr>
 8005594:	b108      	cbz	r0, 800559a <_printf_i+0x1f2>
 8005596:	1b80      	subs	r0, r0, r6
 8005598:	6060      	str	r0, [r4, #4]
 800559a:	6863      	ldr	r3, [r4, #4]
 800559c:	6123      	str	r3, [r4, #16]
 800559e:	2300      	movs	r3, #0
 80055a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a4:	e7a8      	b.n	80054f8 <_printf_i+0x150>
 80055a6:	6923      	ldr	r3, [r4, #16]
 80055a8:	4632      	mov	r2, r6
 80055aa:	4649      	mov	r1, r9
 80055ac:	4640      	mov	r0, r8
 80055ae:	47d0      	blx	sl
 80055b0:	3001      	adds	r0, #1
 80055b2:	d0ab      	beq.n	800550c <_printf_i+0x164>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	079b      	lsls	r3, r3, #30
 80055b8:	d413      	bmi.n	80055e2 <_printf_i+0x23a>
 80055ba:	68e0      	ldr	r0, [r4, #12]
 80055bc:	9b03      	ldr	r3, [sp, #12]
 80055be:	4298      	cmp	r0, r3
 80055c0:	bfb8      	it	lt
 80055c2:	4618      	movlt	r0, r3
 80055c4:	e7a4      	b.n	8005510 <_printf_i+0x168>
 80055c6:	2301      	movs	r3, #1
 80055c8:	4632      	mov	r2, r6
 80055ca:	4649      	mov	r1, r9
 80055cc:	4640      	mov	r0, r8
 80055ce:	47d0      	blx	sl
 80055d0:	3001      	adds	r0, #1
 80055d2:	d09b      	beq.n	800550c <_printf_i+0x164>
 80055d4:	3501      	adds	r5, #1
 80055d6:	68e3      	ldr	r3, [r4, #12]
 80055d8:	9903      	ldr	r1, [sp, #12]
 80055da:	1a5b      	subs	r3, r3, r1
 80055dc:	42ab      	cmp	r3, r5
 80055de:	dcf2      	bgt.n	80055c6 <_printf_i+0x21e>
 80055e0:	e7eb      	b.n	80055ba <_printf_i+0x212>
 80055e2:	2500      	movs	r5, #0
 80055e4:	f104 0619 	add.w	r6, r4, #25
 80055e8:	e7f5      	b.n	80055d6 <_printf_i+0x22e>
 80055ea:	bf00      	nop
 80055ec:	08007c32 	.word	0x08007c32
 80055f0:	08007c43 	.word	0x08007c43

080055f4 <siprintf>:
 80055f4:	b40e      	push	{r1, r2, r3}
 80055f6:	b500      	push	{lr}
 80055f8:	b09c      	sub	sp, #112	; 0x70
 80055fa:	ab1d      	add	r3, sp, #116	; 0x74
 80055fc:	9002      	str	r0, [sp, #8]
 80055fe:	9006      	str	r0, [sp, #24]
 8005600:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005604:	4809      	ldr	r0, [pc, #36]	; (800562c <siprintf+0x38>)
 8005606:	9107      	str	r1, [sp, #28]
 8005608:	9104      	str	r1, [sp, #16]
 800560a:	4909      	ldr	r1, [pc, #36]	; (8005630 <siprintf+0x3c>)
 800560c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005610:	9105      	str	r1, [sp, #20]
 8005612:	6800      	ldr	r0, [r0, #0]
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	a902      	add	r1, sp, #8
 8005618:	f001 fb34 	bl	8006c84 <_svfiprintf_r>
 800561c:	9b02      	ldr	r3, [sp, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	b01c      	add	sp, #112	; 0x70
 8005624:	f85d eb04 	ldr.w	lr, [sp], #4
 8005628:	b003      	add	sp, #12
 800562a:	4770      	bx	lr
 800562c:	2000000c 	.word	0x2000000c
 8005630:	ffff0208 	.word	0xffff0208

08005634 <quorem>:
 8005634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	6903      	ldr	r3, [r0, #16]
 800563a:	690c      	ldr	r4, [r1, #16]
 800563c:	42a3      	cmp	r3, r4
 800563e:	4607      	mov	r7, r0
 8005640:	f2c0 8081 	blt.w	8005746 <quorem+0x112>
 8005644:	3c01      	subs	r4, #1
 8005646:	f101 0814 	add.w	r8, r1, #20
 800564a:	f100 0514 	add.w	r5, r0, #20
 800564e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005652:	9301      	str	r3, [sp, #4]
 8005654:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800565c:	3301      	adds	r3, #1
 800565e:	429a      	cmp	r2, r3
 8005660:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005664:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005668:	fbb2 f6f3 	udiv	r6, r2, r3
 800566c:	d331      	bcc.n	80056d2 <quorem+0x9e>
 800566e:	f04f 0e00 	mov.w	lr, #0
 8005672:	4640      	mov	r0, r8
 8005674:	46ac      	mov	ip, r5
 8005676:	46f2      	mov	sl, lr
 8005678:	f850 2b04 	ldr.w	r2, [r0], #4
 800567c:	b293      	uxth	r3, r2
 800567e:	fb06 e303 	mla	r3, r6, r3, lr
 8005682:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005686:	b29b      	uxth	r3, r3
 8005688:	ebaa 0303 	sub.w	r3, sl, r3
 800568c:	0c12      	lsrs	r2, r2, #16
 800568e:	f8dc a000 	ldr.w	sl, [ip]
 8005692:	fb06 e202 	mla	r2, r6, r2, lr
 8005696:	fa13 f38a 	uxtah	r3, r3, sl
 800569a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800569e:	fa1f fa82 	uxth.w	sl, r2
 80056a2:	f8dc 2000 	ldr.w	r2, [ip]
 80056a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80056aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056b4:	4581      	cmp	r9, r0
 80056b6:	f84c 3b04 	str.w	r3, [ip], #4
 80056ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80056be:	d2db      	bcs.n	8005678 <quorem+0x44>
 80056c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80056c4:	b92b      	cbnz	r3, 80056d2 <quorem+0x9e>
 80056c6:	9b01      	ldr	r3, [sp, #4]
 80056c8:	3b04      	subs	r3, #4
 80056ca:	429d      	cmp	r5, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	d32e      	bcc.n	800572e <quorem+0xfa>
 80056d0:	613c      	str	r4, [r7, #16]
 80056d2:	4638      	mov	r0, r7
 80056d4:	f001 f8c0 	bl	8006858 <__mcmp>
 80056d8:	2800      	cmp	r0, #0
 80056da:	db24      	blt.n	8005726 <quorem+0xf2>
 80056dc:	3601      	adds	r6, #1
 80056de:	4628      	mov	r0, r5
 80056e0:	f04f 0c00 	mov.w	ip, #0
 80056e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80056e8:	f8d0 e000 	ldr.w	lr, [r0]
 80056ec:	b293      	uxth	r3, r2
 80056ee:	ebac 0303 	sub.w	r3, ip, r3
 80056f2:	0c12      	lsrs	r2, r2, #16
 80056f4:	fa13 f38e 	uxtah	r3, r3, lr
 80056f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005700:	b29b      	uxth	r3, r3
 8005702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005706:	45c1      	cmp	r9, r8
 8005708:	f840 3b04 	str.w	r3, [r0], #4
 800570c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005710:	d2e8      	bcs.n	80056e4 <quorem+0xb0>
 8005712:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800571a:	b922      	cbnz	r2, 8005726 <quorem+0xf2>
 800571c:	3b04      	subs	r3, #4
 800571e:	429d      	cmp	r5, r3
 8005720:	461a      	mov	r2, r3
 8005722:	d30a      	bcc.n	800573a <quorem+0x106>
 8005724:	613c      	str	r4, [r7, #16]
 8005726:	4630      	mov	r0, r6
 8005728:	b003      	add	sp, #12
 800572a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	3b04      	subs	r3, #4
 8005732:	2a00      	cmp	r2, #0
 8005734:	d1cc      	bne.n	80056d0 <quorem+0x9c>
 8005736:	3c01      	subs	r4, #1
 8005738:	e7c7      	b.n	80056ca <quorem+0x96>
 800573a:	6812      	ldr	r2, [r2, #0]
 800573c:	3b04      	subs	r3, #4
 800573e:	2a00      	cmp	r2, #0
 8005740:	d1f0      	bne.n	8005724 <quorem+0xf0>
 8005742:	3c01      	subs	r4, #1
 8005744:	e7eb      	b.n	800571e <quorem+0xea>
 8005746:	2000      	movs	r0, #0
 8005748:	e7ee      	b.n	8005728 <quorem+0xf4>
 800574a:	0000      	movs	r0, r0
 800574c:	0000      	movs	r0, r0
	...

08005750 <_dtoa_r>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	ed2d 8b02 	vpush	{d8}
 8005758:	ec57 6b10 	vmov	r6, r7, d0
 800575c:	b095      	sub	sp, #84	; 0x54
 800575e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005760:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005764:	9105      	str	r1, [sp, #20]
 8005766:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800576a:	4604      	mov	r4, r0
 800576c:	9209      	str	r2, [sp, #36]	; 0x24
 800576e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005770:	b975      	cbnz	r5, 8005790 <_dtoa_r+0x40>
 8005772:	2010      	movs	r0, #16
 8005774:	f000 fddc 	bl	8006330 <malloc>
 8005778:	4602      	mov	r2, r0
 800577a:	6260      	str	r0, [r4, #36]	; 0x24
 800577c:	b920      	cbnz	r0, 8005788 <_dtoa_r+0x38>
 800577e:	4bb2      	ldr	r3, [pc, #712]	; (8005a48 <_dtoa_r+0x2f8>)
 8005780:	21ea      	movs	r1, #234	; 0xea
 8005782:	48b2      	ldr	r0, [pc, #712]	; (8005a4c <_dtoa_r+0x2fc>)
 8005784:	f001 fb8e 	bl	8006ea4 <__assert_func>
 8005788:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800578c:	6005      	str	r5, [r0, #0]
 800578e:	60c5      	str	r5, [r0, #12]
 8005790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	b151      	cbz	r1, 80057ac <_dtoa_r+0x5c>
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	604a      	str	r2, [r1, #4]
 800579a:	2301      	movs	r3, #1
 800579c:	4093      	lsls	r3, r2
 800579e:	608b      	str	r3, [r1, #8]
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 fe1b 	bl	80063dc <_Bfree>
 80057a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	1e3b      	subs	r3, r7, #0
 80057ae:	bfb9      	ittee	lt
 80057b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057b4:	9303      	strlt	r3, [sp, #12]
 80057b6:	2300      	movge	r3, #0
 80057b8:	f8c8 3000 	strge.w	r3, [r8]
 80057bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80057c0:	4ba3      	ldr	r3, [pc, #652]	; (8005a50 <_dtoa_r+0x300>)
 80057c2:	bfbc      	itt	lt
 80057c4:	2201      	movlt	r2, #1
 80057c6:	f8c8 2000 	strlt.w	r2, [r8]
 80057ca:	ea33 0309 	bics.w	r3, r3, r9
 80057ce:	d11b      	bne.n	8005808 <_dtoa_r+0xb8>
 80057d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057dc:	4333      	orrs	r3, r6
 80057de:	f000 857a 	beq.w	80062d6 <_dtoa_r+0xb86>
 80057e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057e4:	b963      	cbnz	r3, 8005800 <_dtoa_r+0xb0>
 80057e6:	4b9b      	ldr	r3, [pc, #620]	; (8005a54 <_dtoa_r+0x304>)
 80057e8:	e024      	b.n	8005834 <_dtoa_r+0xe4>
 80057ea:	4b9b      	ldr	r3, [pc, #620]	; (8005a58 <_dtoa_r+0x308>)
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	3308      	adds	r3, #8
 80057f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	9800      	ldr	r0, [sp, #0]
 80057f6:	b015      	add	sp, #84	; 0x54
 80057f8:	ecbd 8b02 	vpop	{d8}
 80057fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005800:	4b94      	ldr	r3, [pc, #592]	; (8005a54 <_dtoa_r+0x304>)
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	3303      	adds	r3, #3
 8005806:	e7f3      	b.n	80057f0 <_dtoa_r+0xa0>
 8005808:	ed9d 7b02 	vldr	d7, [sp, #8]
 800580c:	2200      	movs	r2, #0
 800580e:	ec51 0b17 	vmov	r0, r1, d7
 8005812:	2300      	movs	r3, #0
 8005814:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005818:	f7fb f976 	bl	8000b08 <__aeabi_dcmpeq>
 800581c:	4680      	mov	r8, r0
 800581e:	b158      	cbz	r0, 8005838 <_dtoa_r+0xe8>
 8005820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005822:	2301      	movs	r3, #1
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8551 	beq.w	80062d0 <_dtoa_r+0xb80>
 800582e:	488b      	ldr	r0, [pc, #556]	; (8005a5c <_dtoa_r+0x30c>)
 8005830:	6018      	str	r0, [r3, #0]
 8005832:	1e43      	subs	r3, r0, #1
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	e7dd      	b.n	80057f4 <_dtoa_r+0xa4>
 8005838:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800583c:	aa12      	add	r2, sp, #72	; 0x48
 800583e:	a913      	add	r1, sp, #76	; 0x4c
 8005840:	4620      	mov	r0, r4
 8005842:	f001 f8ad 	bl	80069a0 <__d2b>
 8005846:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800584a:	4683      	mov	fp, r0
 800584c:	2d00      	cmp	r5, #0
 800584e:	d07c      	beq.n	800594a <_dtoa_r+0x1fa>
 8005850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005852:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800585a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800585e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005862:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800586a:	4b7d      	ldr	r3, [pc, #500]	; (8005a60 <_dtoa_r+0x310>)
 800586c:	2200      	movs	r2, #0
 800586e:	4630      	mov	r0, r6
 8005870:	4639      	mov	r1, r7
 8005872:	f7fa fd29 	bl	80002c8 <__aeabi_dsub>
 8005876:	a36e      	add	r3, pc, #440	; (adr r3, 8005a30 <_dtoa_r+0x2e0>)
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f7fa fedc 	bl	8000638 <__aeabi_dmul>
 8005880:	a36d      	add	r3, pc, #436	; (adr r3, 8005a38 <_dtoa_r+0x2e8>)
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f7fa fd21 	bl	80002cc <__adddf3>
 800588a:	4606      	mov	r6, r0
 800588c:	4628      	mov	r0, r5
 800588e:	460f      	mov	r7, r1
 8005890:	f7fa fe68 	bl	8000564 <__aeabi_i2d>
 8005894:	a36a      	add	r3, pc, #424	; (adr r3, 8005a40 <_dtoa_r+0x2f0>)
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	f7fa fecd 	bl	8000638 <__aeabi_dmul>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4630      	mov	r0, r6
 80058a4:	4639      	mov	r1, r7
 80058a6:	f7fa fd11 	bl	80002cc <__adddf3>
 80058aa:	4606      	mov	r6, r0
 80058ac:	460f      	mov	r7, r1
 80058ae:	f7fb f973 	bl	8000b98 <__aeabi_d2iz>
 80058b2:	2200      	movs	r2, #0
 80058b4:	4682      	mov	sl, r0
 80058b6:	2300      	movs	r3, #0
 80058b8:	4630      	mov	r0, r6
 80058ba:	4639      	mov	r1, r7
 80058bc:	f7fb f92e 	bl	8000b1c <__aeabi_dcmplt>
 80058c0:	b148      	cbz	r0, 80058d6 <_dtoa_r+0x186>
 80058c2:	4650      	mov	r0, sl
 80058c4:	f7fa fe4e 	bl	8000564 <__aeabi_i2d>
 80058c8:	4632      	mov	r2, r6
 80058ca:	463b      	mov	r3, r7
 80058cc:	f7fb f91c 	bl	8000b08 <__aeabi_dcmpeq>
 80058d0:	b908      	cbnz	r0, 80058d6 <_dtoa_r+0x186>
 80058d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058d6:	f1ba 0f16 	cmp.w	sl, #22
 80058da:	d854      	bhi.n	8005986 <_dtoa_r+0x236>
 80058dc:	4b61      	ldr	r3, [pc, #388]	; (8005a64 <_dtoa_r+0x314>)
 80058de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058ea:	f7fb f917 	bl	8000b1c <__aeabi_dcmplt>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d04b      	beq.n	800598a <_dtoa_r+0x23a>
 80058f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058f6:	2300      	movs	r3, #0
 80058f8:	930e      	str	r3, [sp, #56]	; 0x38
 80058fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058fc:	1b5d      	subs	r5, r3, r5
 80058fe:	1e6b      	subs	r3, r5, #1
 8005900:	9304      	str	r3, [sp, #16]
 8005902:	bf43      	ittte	mi
 8005904:	2300      	movmi	r3, #0
 8005906:	f1c5 0801 	rsbmi	r8, r5, #1
 800590a:	9304      	strmi	r3, [sp, #16]
 800590c:	f04f 0800 	movpl.w	r8, #0
 8005910:	f1ba 0f00 	cmp.w	sl, #0
 8005914:	db3b      	blt.n	800598e <_dtoa_r+0x23e>
 8005916:	9b04      	ldr	r3, [sp, #16]
 8005918:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800591c:	4453      	add	r3, sl
 800591e:	9304      	str	r3, [sp, #16]
 8005920:	2300      	movs	r3, #0
 8005922:	9306      	str	r3, [sp, #24]
 8005924:	9b05      	ldr	r3, [sp, #20]
 8005926:	2b09      	cmp	r3, #9
 8005928:	d869      	bhi.n	80059fe <_dtoa_r+0x2ae>
 800592a:	2b05      	cmp	r3, #5
 800592c:	bfc4      	itt	gt
 800592e:	3b04      	subgt	r3, #4
 8005930:	9305      	strgt	r3, [sp, #20]
 8005932:	9b05      	ldr	r3, [sp, #20]
 8005934:	f1a3 0302 	sub.w	r3, r3, #2
 8005938:	bfcc      	ite	gt
 800593a:	2500      	movgt	r5, #0
 800593c:	2501      	movle	r5, #1
 800593e:	2b03      	cmp	r3, #3
 8005940:	d869      	bhi.n	8005a16 <_dtoa_r+0x2c6>
 8005942:	e8df f003 	tbb	[pc, r3]
 8005946:	4e2c      	.short	0x4e2c
 8005948:	5a4c      	.short	0x5a4c
 800594a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800594e:	441d      	add	r5, r3
 8005950:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005954:	2b20      	cmp	r3, #32
 8005956:	bfc1      	itttt	gt
 8005958:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800595c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005960:	fa09 f303 	lslgt.w	r3, r9, r3
 8005964:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005968:	bfda      	itte	le
 800596a:	f1c3 0320 	rsble	r3, r3, #32
 800596e:	fa06 f003 	lslle.w	r0, r6, r3
 8005972:	4318      	orrgt	r0, r3
 8005974:	f7fa fde6 	bl	8000544 <__aeabi_ui2d>
 8005978:	2301      	movs	r3, #1
 800597a:	4606      	mov	r6, r0
 800597c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005980:	3d01      	subs	r5, #1
 8005982:	9310      	str	r3, [sp, #64]	; 0x40
 8005984:	e771      	b.n	800586a <_dtoa_r+0x11a>
 8005986:	2301      	movs	r3, #1
 8005988:	e7b6      	b.n	80058f8 <_dtoa_r+0x1a8>
 800598a:	900e      	str	r0, [sp, #56]	; 0x38
 800598c:	e7b5      	b.n	80058fa <_dtoa_r+0x1aa>
 800598e:	f1ca 0300 	rsb	r3, sl, #0
 8005992:	9306      	str	r3, [sp, #24]
 8005994:	2300      	movs	r3, #0
 8005996:	eba8 080a 	sub.w	r8, r8, sl
 800599a:	930d      	str	r3, [sp, #52]	; 0x34
 800599c:	e7c2      	b.n	8005924 <_dtoa_r+0x1d4>
 800599e:	2300      	movs	r3, #0
 80059a0:	9308      	str	r3, [sp, #32]
 80059a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	dc39      	bgt.n	8005a1c <_dtoa_r+0x2cc>
 80059a8:	f04f 0901 	mov.w	r9, #1
 80059ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80059b0:	464b      	mov	r3, r9
 80059b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80059b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80059b8:	2200      	movs	r2, #0
 80059ba:	6042      	str	r2, [r0, #4]
 80059bc:	2204      	movs	r2, #4
 80059be:	f102 0614 	add.w	r6, r2, #20
 80059c2:	429e      	cmp	r6, r3
 80059c4:	6841      	ldr	r1, [r0, #4]
 80059c6:	d92f      	bls.n	8005a28 <_dtoa_r+0x2d8>
 80059c8:	4620      	mov	r0, r4
 80059ca:	f000 fcc7 	bl	800635c <_Balloc>
 80059ce:	9000      	str	r0, [sp, #0]
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d14b      	bne.n	8005a6c <_dtoa_r+0x31c>
 80059d4:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <_dtoa_r+0x318>)
 80059d6:	4602      	mov	r2, r0
 80059d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80059dc:	e6d1      	b.n	8005782 <_dtoa_r+0x32>
 80059de:	2301      	movs	r3, #1
 80059e0:	e7de      	b.n	80059a0 <_dtoa_r+0x250>
 80059e2:	2300      	movs	r3, #0
 80059e4:	9308      	str	r3, [sp, #32]
 80059e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059e8:	eb0a 0903 	add.w	r9, sl, r3
 80059ec:	f109 0301 	add.w	r3, r9, #1
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	bfb8      	it	lt
 80059f6:	2301      	movlt	r3, #1
 80059f8:	e7dd      	b.n	80059b6 <_dtoa_r+0x266>
 80059fa:	2301      	movs	r3, #1
 80059fc:	e7f2      	b.n	80059e4 <_dtoa_r+0x294>
 80059fe:	2501      	movs	r5, #1
 8005a00:	2300      	movs	r3, #0
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	9508      	str	r5, [sp, #32]
 8005a06:	f04f 39ff 	mov.w	r9, #4294967295
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a10:	2312      	movs	r3, #18
 8005a12:	9209      	str	r2, [sp, #36]	; 0x24
 8005a14:	e7cf      	b.n	80059b6 <_dtoa_r+0x266>
 8005a16:	2301      	movs	r3, #1
 8005a18:	9308      	str	r3, [sp, #32]
 8005a1a:	e7f4      	b.n	8005a06 <_dtoa_r+0x2b6>
 8005a1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005a20:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a24:	464b      	mov	r3, r9
 8005a26:	e7c6      	b.n	80059b6 <_dtoa_r+0x266>
 8005a28:	3101      	adds	r1, #1
 8005a2a:	6041      	str	r1, [r0, #4]
 8005a2c:	0052      	lsls	r2, r2, #1
 8005a2e:	e7c6      	b.n	80059be <_dtoa_r+0x26e>
 8005a30:	636f4361 	.word	0x636f4361
 8005a34:	3fd287a7 	.word	0x3fd287a7
 8005a38:	8b60c8b3 	.word	0x8b60c8b3
 8005a3c:	3fc68a28 	.word	0x3fc68a28
 8005a40:	509f79fb 	.word	0x509f79fb
 8005a44:	3fd34413 	.word	0x3fd34413
 8005a48:	08007c61 	.word	0x08007c61
 8005a4c:	08007c78 	.word	0x08007c78
 8005a50:	7ff00000 	.word	0x7ff00000
 8005a54:	08007c5d 	.word	0x08007c5d
 8005a58:	08007c54 	.word	0x08007c54
 8005a5c:	08007c31 	.word	0x08007c31
 8005a60:	3ff80000 	.word	0x3ff80000
 8005a64:	08007d70 	.word	0x08007d70
 8005a68:	08007cd7 	.word	0x08007cd7
 8005a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a6e:	9a00      	ldr	r2, [sp, #0]
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	9b01      	ldr	r3, [sp, #4]
 8005a74:	2b0e      	cmp	r3, #14
 8005a76:	f200 80ad 	bhi.w	8005bd4 <_dtoa_r+0x484>
 8005a7a:	2d00      	cmp	r5, #0
 8005a7c:	f000 80aa 	beq.w	8005bd4 <_dtoa_r+0x484>
 8005a80:	f1ba 0f00 	cmp.w	sl, #0
 8005a84:	dd36      	ble.n	8005af4 <_dtoa_r+0x3a4>
 8005a86:	4ac3      	ldr	r2, [pc, #780]	; (8005d94 <_dtoa_r+0x644>)
 8005a88:	f00a 030f 	and.w	r3, sl, #15
 8005a8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a90:	ed93 7b00 	vldr	d7, [r3]
 8005a94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005a98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005a9c:	eeb0 8a47 	vmov.f32	s16, s14
 8005aa0:	eef0 8a67 	vmov.f32	s17, s15
 8005aa4:	d016      	beq.n	8005ad4 <_dtoa_r+0x384>
 8005aa6:	4bbc      	ldr	r3, [pc, #752]	; (8005d98 <_dtoa_r+0x648>)
 8005aa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005aac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ab0:	f7fa feec 	bl	800088c <__aeabi_ddiv>
 8005ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ab8:	f007 070f 	and.w	r7, r7, #15
 8005abc:	2503      	movs	r5, #3
 8005abe:	4eb6      	ldr	r6, [pc, #728]	; (8005d98 <_dtoa_r+0x648>)
 8005ac0:	b957      	cbnz	r7, 8005ad8 <_dtoa_r+0x388>
 8005ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ac6:	ec53 2b18 	vmov	r2, r3, d8
 8005aca:	f7fa fedf 	bl	800088c <__aeabi_ddiv>
 8005ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad2:	e029      	b.n	8005b28 <_dtoa_r+0x3d8>
 8005ad4:	2502      	movs	r5, #2
 8005ad6:	e7f2      	b.n	8005abe <_dtoa_r+0x36e>
 8005ad8:	07f9      	lsls	r1, r7, #31
 8005ada:	d508      	bpl.n	8005aee <_dtoa_r+0x39e>
 8005adc:	ec51 0b18 	vmov	r0, r1, d8
 8005ae0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ae4:	f7fa fda8 	bl	8000638 <__aeabi_dmul>
 8005ae8:	ec41 0b18 	vmov	d8, r0, r1
 8005aec:	3501      	adds	r5, #1
 8005aee:	107f      	asrs	r7, r7, #1
 8005af0:	3608      	adds	r6, #8
 8005af2:	e7e5      	b.n	8005ac0 <_dtoa_r+0x370>
 8005af4:	f000 80a6 	beq.w	8005c44 <_dtoa_r+0x4f4>
 8005af8:	f1ca 0600 	rsb	r6, sl, #0
 8005afc:	4ba5      	ldr	r3, [pc, #660]	; (8005d94 <_dtoa_r+0x644>)
 8005afe:	4fa6      	ldr	r7, [pc, #664]	; (8005d98 <_dtoa_r+0x648>)
 8005b00:	f006 020f 	and.w	r2, r6, #15
 8005b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b10:	f7fa fd92 	bl	8000638 <__aeabi_dmul>
 8005b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b18:	1136      	asrs	r6, r6, #4
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2502      	movs	r5, #2
 8005b1e:	2e00      	cmp	r6, #0
 8005b20:	f040 8085 	bne.w	8005c2e <_dtoa_r+0x4de>
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1d2      	bne.n	8005ace <_dtoa_r+0x37e>
 8005b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 808c 	beq.w	8005c48 <_dtoa_r+0x4f8>
 8005b30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b34:	4b99      	ldr	r3, [pc, #612]	; (8005d9c <_dtoa_r+0x64c>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	4630      	mov	r0, r6
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	f7fa ffee 	bl	8000b1c <__aeabi_dcmplt>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	f000 8081 	beq.w	8005c48 <_dtoa_r+0x4f8>
 8005b46:	9b01      	ldr	r3, [sp, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d07d      	beq.n	8005c48 <_dtoa_r+0x4f8>
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	dd3c      	ble.n	8005bcc <_dtoa_r+0x47c>
 8005b52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b56:	9307      	str	r3, [sp, #28]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4b91      	ldr	r3, [pc, #580]	; (8005da0 <_dtoa_r+0x650>)
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	4639      	mov	r1, r7
 8005b60:	f7fa fd6a 	bl	8000638 <__aeabi_dmul>
 8005b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b68:	3501      	adds	r5, #1
 8005b6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005b6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b72:	4628      	mov	r0, r5
 8005b74:	f7fa fcf6 	bl	8000564 <__aeabi_i2d>
 8005b78:	4632      	mov	r2, r6
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	f7fa fd5c 	bl	8000638 <__aeabi_dmul>
 8005b80:	4b88      	ldr	r3, [pc, #544]	; (8005da4 <_dtoa_r+0x654>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	f7fa fba2 	bl	80002cc <__adddf3>
 8005b88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b90:	9303      	str	r3, [sp, #12]
 8005b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d15c      	bne.n	8005c52 <_dtoa_r+0x502>
 8005b98:	4b83      	ldr	r3, [pc, #524]	; (8005da8 <_dtoa_r+0x658>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	f7fa fb92 	bl	80002c8 <__aeabi_dsub>
 8005ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ba8:	4606      	mov	r6, r0
 8005baa:	460f      	mov	r7, r1
 8005bac:	f7fa ffd4 	bl	8000b58 <__aeabi_dcmpgt>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	f040 8296 	bne.w	80060e2 <_dtoa_r+0x992>
 8005bb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa ffab 	bl	8000b1c <__aeabi_dcmplt>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	f040 8288 	bne.w	80060dc <_dtoa_r+0x98c>
 8005bcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f2c0 8158 	blt.w	8005e8c <_dtoa_r+0x73c>
 8005bdc:	f1ba 0f0e 	cmp.w	sl, #14
 8005be0:	f300 8154 	bgt.w	8005e8c <_dtoa_r+0x73c>
 8005be4:	4b6b      	ldr	r3, [pc, #428]	; (8005d94 <_dtoa_r+0x644>)
 8005be6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005bea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f280 80e3 	bge.w	8005dbc <_dtoa_r+0x66c>
 8005bf6:	9b01      	ldr	r3, [sp, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f300 80df 	bgt.w	8005dbc <_dtoa_r+0x66c>
 8005bfe:	f040 826d 	bne.w	80060dc <_dtoa_r+0x98c>
 8005c02:	4b69      	ldr	r3, [pc, #420]	; (8005da8 <_dtoa_r+0x658>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	4640      	mov	r0, r8
 8005c08:	4649      	mov	r1, r9
 8005c0a:	f7fa fd15 	bl	8000638 <__aeabi_dmul>
 8005c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c12:	f7fa ff97 	bl	8000b44 <__aeabi_dcmpge>
 8005c16:	9e01      	ldr	r6, [sp, #4]
 8005c18:	4637      	mov	r7, r6
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	f040 8243 	bne.w	80060a6 <_dtoa_r+0x956>
 8005c20:	9d00      	ldr	r5, [sp, #0]
 8005c22:	2331      	movs	r3, #49	; 0x31
 8005c24:	f805 3b01 	strb.w	r3, [r5], #1
 8005c28:	f10a 0a01 	add.w	sl, sl, #1
 8005c2c:	e23f      	b.n	80060ae <_dtoa_r+0x95e>
 8005c2e:	07f2      	lsls	r2, r6, #31
 8005c30:	d505      	bpl.n	8005c3e <_dtoa_r+0x4ee>
 8005c32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c36:	f7fa fcff 	bl	8000638 <__aeabi_dmul>
 8005c3a:	3501      	adds	r5, #1
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	1076      	asrs	r6, r6, #1
 8005c40:	3708      	adds	r7, #8
 8005c42:	e76c      	b.n	8005b1e <_dtoa_r+0x3ce>
 8005c44:	2502      	movs	r5, #2
 8005c46:	e76f      	b.n	8005b28 <_dtoa_r+0x3d8>
 8005c48:	9b01      	ldr	r3, [sp, #4]
 8005c4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8005c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8005c50:	e78d      	b.n	8005b6e <_dtoa_r+0x41e>
 8005c52:	9900      	ldr	r1, [sp, #0]
 8005c54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c58:	4b4e      	ldr	r3, [pc, #312]	; (8005d94 <_dtoa_r+0x644>)
 8005c5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c5e:	4401      	add	r1, r0
 8005c60:	9102      	str	r1, [sp, #8]
 8005c62:	9908      	ldr	r1, [sp, #32]
 8005c64:	eeb0 8a47 	vmov.f32	s16, s14
 8005c68:	eef0 8a67 	vmov.f32	s17, s15
 8005c6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d045      	beq.n	8005d04 <_dtoa_r+0x5b4>
 8005c78:	494c      	ldr	r1, [pc, #304]	; (8005dac <_dtoa_r+0x65c>)
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	f7fa fe06 	bl	800088c <__aeabi_ddiv>
 8005c80:	ec53 2b18 	vmov	r2, r3, d8
 8005c84:	f7fa fb20 	bl	80002c8 <__aeabi_dsub>
 8005c88:	9d00      	ldr	r5, [sp, #0]
 8005c8a:	ec41 0b18 	vmov	d8, r0, r1
 8005c8e:	4639      	mov	r1, r7
 8005c90:	4630      	mov	r0, r6
 8005c92:	f7fa ff81 	bl	8000b98 <__aeabi_d2iz>
 8005c96:	900c      	str	r0, [sp, #48]	; 0x30
 8005c98:	f7fa fc64 	bl	8000564 <__aeabi_i2d>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f7fa fb10 	bl	80002c8 <__aeabi_dsub>
 8005ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005caa:	3330      	adds	r3, #48	; 0x30
 8005cac:	f805 3b01 	strb.w	r3, [r5], #1
 8005cb0:	ec53 2b18 	vmov	r2, r3, d8
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	460f      	mov	r7, r1
 8005cb8:	f7fa ff30 	bl	8000b1c <__aeabi_dcmplt>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d165      	bne.n	8005d8c <_dtoa_r+0x63c>
 8005cc0:	4632      	mov	r2, r6
 8005cc2:	463b      	mov	r3, r7
 8005cc4:	4935      	ldr	r1, [pc, #212]	; (8005d9c <_dtoa_r+0x64c>)
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f7fa fafe 	bl	80002c8 <__aeabi_dsub>
 8005ccc:	ec53 2b18 	vmov	r2, r3, d8
 8005cd0:	f7fa ff24 	bl	8000b1c <__aeabi_dcmplt>
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	f040 80b9 	bne.w	8005e4c <_dtoa_r+0x6fc>
 8005cda:	9b02      	ldr	r3, [sp, #8]
 8005cdc:	429d      	cmp	r5, r3
 8005cde:	f43f af75 	beq.w	8005bcc <_dtoa_r+0x47c>
 8005ce2:	4b2f      	ldr	r3, [pc, #188]	; (8005da0 <_dtoa_r+0x650>)
 8005ce4:	ec51 0b18 	vmov	r0, r1, d8
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f7fa fca5 	bl	8000638 <__aeabi_dmul>
 8005cee:	4b2c      	ldr	r3, [pc, #176]	; (8005da0 <_dtoa_r+0x650>)
 8005cf0:	ec41 0b18 	vmov	d8, r0, r1
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	4630      	mov	r0, r6
 8005cf8:	4639      	mov	r1, r7
 8005cfa:	f7fa fc9d 	bl	8000638 <__aeabi_dmul>
 8005cfe:	4606      	mov	r6, r0
 8005d00:	460f      	mov	r7, r1
 8005d02:	e7c4      	b.n	8005c8e <_dtoa_r+0x53e>
 8005d04:	ec51 0b17 	vmov	r0, r1, d7
 8005d08:	f7fa fc96 	bl	8000638 <__aeabi_dmul>
 8005d0c:	9b02      	ldr	r3, [sp, #8]
 8005d0e:	9d00      	ldr	r5, [sp, #0]
 8005d10:	930c      	str	r3, [sp, #48]	; 0x30
 8005d12:	ec41 0b18 	vmov	d8, r0, r1
 8005d16:	4639      	mov	r1, r7
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f7fa ff3d 	bl	8000b98 <__aeabi_d2iz>
 8005d1e:	9011      	str	r0, [sp, #68]	; 0x44
 8005d20:	f7fa fc20 	bl	8000564 <__aeabi_i2d>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4630      	mov	r0, r6
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	f7fa facc 	bl	80002c8 <__aeabi_dsub>
 8005d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d32:	3330      	adds	r3, #48	; 0x30
 8005d34:	f805 3b01 	strb.w	r3, [r5], #1
 8005d38:	9b02      	ldr	r3, [sp, #8]
 8005d3a:	429d      	cmp	r5, r3
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	460f      	mov	r7, r1
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	d134      	bne.n	8005db0 <_dtoa_r+0x660>
 8005d46:	4b19      	ldr	r3, [pc, #100]	; (8005dac <_dtoa_r+0x65c>)
 8005d48:	ec51 0b18 	vmov	r0, r1, d8
 8005d4c:	f7fa fabe 	bl	80002cc <__adddf3>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4630      	mov	r0, r6
 8005d56:	4639      	mov	r1, r7
 8005d58:	f7fa fefe 	bl	8000b58 <__aeabi_dcmpgt>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d175      	bne.n	8005e4c <_dtoa_r+0x6fc>
 8005d60:	ec53 2b18 	vmov	r2, r3, d8
 8005d64:	4911      	ldr	r1, [pc, #68]	; (8005dac <_dtoa_r+0x65c>)
 8005d66:	2000      	movs	r0, #0
 8005d68:	f7fa faae 	bl	80002c8 <__aeabi_dsub>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4630      	mov	r0, r6
 8005d72:	4639      	mov	r1, r7
 8005d74:	f7fa fed2 	bl	8000b1c <__aeabi_dcmplt>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f43f af27 	beq.w	8005bcc <_dtoa_r+0x47c>
 8005d7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d80:	1e6b      	subs	r3, r5, #1
 8005d82:	930c      	str	r3, [sp, #48]	; 0x30
 8005d84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d88:	2b30      	cmp	r3, #48	; 0x30
 8005d8a:	d0f8      	beq.n	8005d7e <_dtoa_r+0x62e>
 8005d8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005d90:	e04a      	b.n	8005e28 <_dtoa_r+0x6d8>
 8005d92:	bf00      	nop
 8005d94:	08007d70 	.word	0x08007d70
 8005d98:	08007d48 	.word	0x08007d48
 8005d9c:	3ff00000 	.word	0x3ff00000
 8005da0:	40240000 	.word	0x40240000
 8005da4:	401c0000 	.word	0x401c0000
 8005da8:	40140000 	.word	0x40140000
 8005dac:	3fe00000 	.word	0x3fe00000
 8005db0:	4baf      	ldr	r3, [pc, #700]	; (8006070 <_dtoa_r+0x920>)
 8005db2:	f7fa fc41 	bl	8000638 <__aeabi_dmul>
 8005db6:	4606      	mov	r6, r0
 8005db8:	460f      	mov	r7, r1
 8005dba:	e7ac      	b.n	8005d16 <_dtoa_r+0x5c6>
 8005dbc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005dc0:	9d00      	ldr	r5, [sp, #0]
 8005dc2:	4642      	mov	r2, r8
 8005dc4:	464b      	mov	r3, r9
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	4639      	mov	r1, r7
 8005dca:	f7fa fd5f 	bl	800088c <__aeabi_ddiv>
 8005dce:	f7fa fee3 	bl	8000b98 <__aeabi_d2iz>
 8005dd2:	9002      	str	r0, [sp, #8]
 8005dd4:	f7fa fbc6 	bl	8000564 <__aeabi_i2d>
 8005dd8:	4642      	mov	r2, r8
 8005dda:	464b      	mov	r3, r9
 8005ddc:	f7fa fc2c 	bl	8000638 <__aeabi_dmul>
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	4630      	mov	r0, r6
 8005de6:	4639      	mov	r1, r7
 8005de8:	f7fa fa6e 	bl	80002c8 <__aeabi_dsub>
 8005dec:	9e02      	ldr	r6, [sp, #8]
 8005dee:	9f01      	ldr	r7, [sp, #4]
 8005df0:	3630      	adds	r6, #48	; 0x30
 8005df2:	f805 6b01 	strb.w	r6, [r5], #1
 8005df6:	9e00      	ldr	r6, [sp, #0]
 8005df8:	1bae      	subs	r6, r5, r6
 8005dfa:	42b7      	cmp	r7, r6
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	d137      	bne.n	8005e72 <_dtoa_r+0x722>
 8005e02:	f7fa fa63 	bl	80002cc <__adddf3>
 8005e06:	4642      	mov	r2, r8
 8005e08:	464b      	mov	r3, r9
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	460f      	mov	r7, r1
 8005e0e:	f7fa fea3 	bl	8000b58 <__aeabi_dcmpgt>
 8005e12:	b9c8      	cbnz	r0, 8005e48 <_dtoa_r+0x6f8>
 8005e14:	4642      	mov	r2, r8
 8005e16:	464b      	mov	r3, r9
 8005e18:	4630      	mov	r0, r6
 8005e1a:	4639      	mov	r1, r7
 8005e1c:	f7fa fe74 	bl	8000b08 <__aeabi_dcmpeq>
 8005e20:	b110      	cbz	r0, 8005e28 <_dtoa_r+0x6d8>
 8005e22:	9b02      	ldr	r3, [sp, #8]
 8005e24:	07d9      	lsls	r1, r3, #31
 8005e26:	d40f      	bmi.n	8005e48 <_dtoa_r+0x6f8>
 8005e28:	4620      	mov	r0, r4
 8005e2a:	4659      	mov	r1, fp
 8005e2c:	f000 fad6 	bl	80063dc <_Bfree>
 8005e30:	2300      	movs	r3, #0
 8005e32:	702b      	strb	r3, [r5, #0]
 8005e34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e36:	f10a 0001 	add.w	r0, sl, #1
 8005e3a:	6018      	str	r0, [r3, #0]
 8005e3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f43f acd8 	beq.w	80057f4 <_dtoa_r+0xa4>
 8005e44:	601d      	str	r5, [r3, #0]
 8005e46:	e4d5      	b.n	80057f4 <_dtoa_r+0xa4>
 8005e48:	f8cd a01c 	str.w	sl, [sp, #28]
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	461d      	mov	r5, r3
 8005e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e54:	2a39      	cmp	r2, #57	; 0x39
 8005e56:	d108      	bne.n	8005e6a <_dtoa_r+0x71a>
 8005e58:	9a00      	ldr	r2, [sp, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d1f7      	bne.n	8005e4e <_dtoa_r+0x6fe>
 8005e5e:	9a07      	ldr	r2, [sp, #28]
 8005e60:	9900      	ldr	r1, [sp, #0]
 8005e62:	3201      	adds	r2, #1
 8005e64:	9207      	str	r2, [sp, #28]
 8005e66:	2230      	movs	r2, #48	; 0x30
 8005e68:	700a      	strb	r2, [r1, #0]
 8005e6a:	781a      	ldrb	r2, [r3, #0]
 8005e6c:	3201      	adds	r2, #1
 8005e6e:	701a      	strb	r2, [r3, #0]
 8005e70:	e78c      	b.n	8005d8c <_dtoa_r+0x63c>
 8005e72:	4b7f      	ldr	r3, [pc, #508]	; (8006070 <_dtoa_r+0x920>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	f7fa fbdf 	bl	8000638 <__aeabi_dmul>
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4606      	mov	r6, r0
 8005e80:	460f      	mov	r7, r1
 8005e82:	f7fa fe41 	bl	8000b08 <__aeabi_dcmpeq>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d09b      	beq.n	8005dc2 <_dtoa_r+0x672>
 8005e8a:	e7cd      	b.n	8005e28 <_dtoa_r+0x6d8>
 8005e8c:	9a08      	ldr	r2, [sp, #32]
 8005e8e:	2a00      	cmp	r2, #0
 8005e90:	f000 80c4 	beq.w	800601c <_dtoa_r+0x8cc>
 8005e94:	9a05      	ldr	r2, [sp, #20]
 8005e96:	2a01      	cmp	r2, #1
 8005e98:	f300 80a8 	bgt.w	8005fec <_dtoa_r+0x89c>
 8005e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e9e:	2a00      	cmp	r2, #0
 8005ea0:	f000 80a0 	beq.w	8005fe4 <_dtoa_r+0x894>
 8005ea4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ea8:	9e06      	ldr	r6, [sp, #24]
 8005eaa:	4645      	mov	r5, r8
 8005eac:	9a04      	ldr	r2, [sp, #16]
 8005eae:	2101      	movs	r1, #1
 8005eb0:	441a      	add	r2, r3
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	4498      	add	r8, r3
 8005eb6:	9204      	str	r2, [sp, #16]
 8005eb8:	f000 fb4c 	bl	8006554 <__i2b>
 8005ebc:	4607      	mov	r7, r0
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	dd0b      	ble.n	8005eda <_dtoa_r+0x78a>
 8005ec2:	9b04      	ldr	r3, [sp, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dd08      	ble.n	8005eda <_dtoa_r+0x78a>
 8005ec8:	42ab      	cmp	r3, r5
 8005eca:	9a04      	ldr	r2, [sp, #16]
 8005ecc:	bfa8      	it	ge
 8005ece:	462b      	movge	r3, r5
 8005ed0:	eba8 0803 	sub.w	r8, r8, r3
 8005ed4:	1aed      	subs	r5, r5, r3
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	9304      	str	r3, [sp, #16]
 8005eda:	9b06      	ldr	r3, [sp, #24]
 8005edc:	b1fb      	cbz	r3, 8005f1e <_dtoa_r+0x7ce>
 8005ede:	9b08      	ldr	r3, [sp, #32]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 809f 	beq.w	8006024 <_dtoa_r+0x8d4>
 8005ee6:	2e00      	cmp	r6, #0
 8005ee8:	dd11      	ble.n	8005f0e <_dtoa_r+0x7be>
 8005eea:	4639      	mov	r1, r7
 8005eec:	4632      	mov	r2, r6
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f000 fbec 	bl	80066cc <__pow5mult>
 8005ef4:	465a      	mov	r2, fp
 8005ef6:	4601      	mov	r1, r0
 8005ef8:	4607      	mov	r7, r0
 8005efa:	4620      	mov	r0, r4
 8005efc:	f000 fb40 	bl	8006580 <__multiply>
 8005f00:	4659      	mov	r1, fp
 8005f02:	9007      	str	r0, [sp, #28]
 8005f04:	4620      	mov	r0, r4
 8005f06:	f000 fa69 	bl	80063dc <_Bfree>
 8005f0a:	9b07      	ldr	r3, [sp, #28]
 8005f0c:	469b      	mov	fp, r3
 8005f0e:	9b06      	ldr	r3, [sp, #24]
 8005f10:	1b9a      	subs	r2, r3, r6
 8005f12:	d004      	beq.n	8005f1e <_dtoa_r+0x7ce>
 8005f14:	4659      	mov	r1, fp
 8005f16:	4620      	mov	r0, r4
 8005f18:	f000 fbd8 	bl	80066cc <__pow5mult>
 8005f1c:	4683      	mov	fp, r0
 8005f1e:	2101      	movs	r1, #1
 8005f20:	4620      	mov	r0, r4
 8005f22:	f000 fb17 	bl	8006554 <__i2b>
 8005f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	dd7c      	ble.n	8006028 <_dtoa_r+0x8d8>
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4601      	mov	r1, r0
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 fbca 	bl	80066cc <__pow5mult>
 8005f38:	9b05      	ldr	r3, [sp, #20]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	dd76      	ble.n	800602e <_dtoa_r+0x8de>
 8005f40:	2300      	movs	r3, #0
 8005f42:	9306      	str	r3, [sp, #24]
 8005f44:	6933      	ldr	r3, [r6, #16]
 8005f46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f4a:	6918      	ldr	r0, [r3, #16]
 8005f4c:	f000 fab2 	bl	80064b4 <__hi0bits>
 8005f50:	f1c0 0020 	rsb	r0, r0, #32
 8005f54:	9b04      	ldr	r3, [sp, #16]
 8005f56:	4418      	add	r0, r3
 8005f58:	f010 001f 	ands.w	r0, r0, #31
 8005f5c:	f000 8086 	beq.w	800606c <_dtoa_r+0x91c>
 8005f60:	f1c0 0320 	rsb	r3, r0, #32
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	dd7f      	ble.n	8006068 <_dtoa_r+0x918>
 8005f68:	f1c0 001c 	rsb	r0, r0, #28
 8005f6c:	9b04      	ldr	r3, [sp, #16]
 8005f6e:	4403      	add	r3, r0
 8005f70:	4480      	add	r8, r0
 8005f72:	4405      	add	r5, r0
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	f1b8 0f00 	cmp.w	r8, #0
 8005f7a:	dd05      	ble.n	8005f88 <_dtoa_r+0x838>
 8005f7c:	4659      	mov	r1, fp
 8005f7e:	4642      	mov	r2, r8
 8005f80:	4620      	mov	r0, r4
 8005f82:	f000 fbfd 	bl	8006780 <__lshift>
 8005f86:	4683      	mov	fp, r0
 8005f88:	9b04      	ldr	r3, [sp, #16]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	dd05      	ble.n	8005f9a <_dtoa_r+0x84a>
 8005f8e:	4631      	mov	r1, r6
 8005f90:	461a      	mov	r2, r3
 8005f92:	4620      	mov	r0, r4
 8005f94:	f000 fbf4 	bl	8006780 <__lshift>
 8005f98:	4606      	mov	r6, r0
 8005f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d069      	beq.n	8006074 <_dtoa_r+0x924>
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4658      	mov	r0, fp
 8005fa4:	f000 fc58 	bl	8006858 <__mcmp>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	da63      	bge.n	8006074 <_dtoa_r+0x924>
 8005fac:	2300      	movs	r3, #0
 8005fae:	4659      	mov	r1, fp
 8005fb0:	220a      	movs	r2, #10
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 fa34 	bl	8006420 <__multadd>
 8005fb8:	9b08      	ldr	r3, [sp, #32]
 8005fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fbe:	4683      	mov	fp, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 818f 	beq.w	80062e4 <_dtoa_r+0xb94>
 8005fc6:	4639      	mov	r1, r7
 8005fc8:	2300      	movs	r3, #0
 8005fca:	220a      	movs	r2, #10
 8005fcc:	4620      	mov	r0, r4
 8005fce:	f000 fa27 	bl	8006420 <__multadd>
 8005fd2:	f1b9 0f00 	cmp.w	r9, #0
 8005fd6:	4607      	mov	r7, r0
 8005fd8:	f300 808e 	bgt.w	80060f8 <_dtoa_r+0x9a8>
 8005fdc:	9b05      	ldr	r3, [sp, #20]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	dc50      	bgt.n	8006084 <_dtoa_r+0x934>
 8005fe2:	e089      	b.n	80060f8 <_dtoa_r+0x9a8>
 8005fe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fea:	e75d      	b.n	8005ea8 <_dtoa_r+0x758>
 8005fec:	9b01      	ldr	r3, [sp, #4]
 8005fee:	1e5e      	subs	r6, r3, #1
 8005ff0:	9b06      	ldr	r3, [sp, #24]
 8005ff2:	42b3      	cmp	r3, r6
 8005ff4:	bfbf      	itttt	lt
 8005ff6:	9b06      	ldrlt	r3, [sp, #24]
 8005ff8:	9606      	strlt	r6, [sp, #24]
 8005ffa:	1af2      	sublt	r2, r6, r3
 8005ffc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005ffe:	bfb6      	itet	lt
 8006000:	189b      	addlt	r3, r3, r2
 8006002:	1b9e      	subge	r6, r3, r6
 8006004:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006006:	9b01      	ldr	r3, [sp, #4]
 8006008:	bfb8      	it	lt
 800600a:	2600      	movlt	r6, #0
 800600c:	2b00      	cmp	r3, #0
 800600e:	bfb5      	itete	lt
 8006010:	eba8 0503 	sublt.w	r5, r8, r3
 8006014:	9b01      	ldrge	r3, [sp, #4]
 8006016:	2300      	movlt	r3, #0
 8006018:	4645      	movge	r5, r8
 800601a:	e747      	b.n	8005eac <_dtoa_r+0x75c>
 800601c:	9e06      	ldr	r6, [sp, #24]
 800601e:	9f08      	ldr	r7, [sp, #32]
 8006020:	4645      	mov	r5, r8
 8006022:	e74c      	b.n	8005ebe <_dtoa_r+0x76e>
 8006024:	9a06      	ldr	r2, [sp, #24]
 8006026:	e775      	b.n	8005f14 <_dtoa_r+0x7c4>
 8006028:	9b05      	ldr	r3, [sp, #20]
 800602a:	2b01      	cmp	r3, #1
 800602c:	dc18      	bgt.n	8006060 <_dtoa_r+0x910>
 800602e:	9b02      	ldr	r3, [sp, #8]
 8006030:	b9b3      	cbnz	r3, 8006060 <_dtoa_r+0x910>
 8006032:	9b03      	ldr	r3, [sp, #12]
 8006034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006038:	b9a3      	cbnz	r3, 8006064 <_dtoa_r+0x914>
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006040:	0d1b      	lsrs	r3, r3, #20
 8006042:	051b      	lsls	r3, r3, #20
 8006044:	b12b      	cbz	r3, 8006052 <_dtoa_r+0x902>
 8006046:	9b04      	ldr	r3, [sp, #16]
 8006048:	3301      	adds	r3, #1
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	f108 0801 	add.w	r8, r8, #1
 8006050:	2301      	movs	r3, #1
 8006052:	9306      	str	r3, [sp, #24]
 8006054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006056:	2b00      	cmp	r3, #0
 8006058:	f47f af74 	bne.w	8005f44 <_dtoa_r+0x7f4>
 800605c:	2001      	movs	r0, #1
 800605e:	e779      	b.n	8005f54 <_dtoa_r+0x804>
 8006060:	2300      	movs	r3, #0
 8006062:	e7f6      	b.n	8006052 <_dtoa_r+0x902>
 8006064:	9b02      	ldr	r3, [sp, #8]
 8006066:	e7f4      	b.n	8006052 <_dtoa_r+0x902>
 8006068:	d085      	beq.n	8005f76 <_dtoa_r+0x826>
 800606a:	4618      	mov	r0, r3
 800606c:	301c      	adds	r0, #28
 800606e:	e77d      	b.n	8005f6c <_dtoa_r+0x81c>
 8006070:	40240000 	.word	0x40240000
 8006074:	9b01      	ldr	r3, [sp, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	dc38      	bgt.n	80060ec <_dtoa_r+0x99c>
 800607a:	9b05      	ldr	r3, [sp, #20]
 800607c:	2b02      	cmp	r3, #2
 800607e:	dd35      	ble.n	80060ec <_dtoa_r+0x99c>
 8006080:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006084:	f1b9 0f00 	cmp.w	r9, #0
 8006088:	d10d      	bne.n	80060a6 <_dtoa_r+0x956>
 800608a:	4631      	mov	r1, r6
 800608c:	464b      	mov	r3, r9
 800608e:	2205      	movs	r2, #5
 8006090:	4620      	mov	r0, r4
 8006092:	f000 f9c5 	bl	8006420 <__multadd>
 8006096:	4601      	mov	r1, r0
 8006098:	4606      	mov	r6, r0
 800609a:	4658      	mov	r0, fp
 800609c:	f000 fbdc 	bl	8006858 <__mcmp>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	f73f adbd 	bgt.w	8005c20 <_dtoa_r+0x4d0>
 80060a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a8:	9d00      	ldr	r5, [sp, #0]
 80060aa:	ea6f 0a03 	mvn.w	sl, r3
 80060ae:	f04f 0800 	mov.w	r8, #0
 80060b2:	4631      	mov	r1, r6
 80060b4:	4620      	mov	r0, r4
 80060b6:	f000 f991 	bl	80063dc <_Bfree>
 80060ba:	2f00      	cmp	r7, #0
 80060bc:	f43f aeb4 	beq.w	8005e28 <_dtoa_r+0x6d8>
 80060c0:	f1b8 0f00 	cmp.w	r8, #0
 80060c4:	d005      	beq.n	80060d2 <_dtoa_r+0x982>
 80060c6:	45b8      	cmp	r8, r7
 80060c8:	d003      	beq.n	80060d2 <_dtoa_r+0x982>
 80060ca:	4641      	mov	r1, r8
 80060cc:	4620      	mov	r0, r4
 80060ce:	f000 f985 	bl	80063dc <_Bfree>
 80060d2:	4639      	mov	r1, r7
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 f981 	bl	80063dc <_Bfree>
 80060da:	e6a5      	b.n	8005e28 <_dtoa_r+0x6d8>
 80060dc:	2600      	movs	r6, #0
 80060de:	4637      	mov	r7, r6
 80060e0:	e7e1      	b.n	80060a6 <_dtoa_r+0x956>
 80060e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80060e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80060e8:	4637      	mov	r7, r6
 80060ea:	e599      	b.n	8005c20 <_dtoa_r+0x4d0>
 80060ec:	9b08      	ldr	r3, [sp, #32]
 80060ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 80fd 	beq.w	80062f2 <_dtoa_r+0xba2>
 80060f8:	2d00      	cmp	r5, #0
 80060fa:	dd05      	ble.n	8006108 <_dtoa_r+0x9b8>
 80060fc:	4639      	mov	r1, r7
 80060fe:	462a      	mov	r2, r5
 8006100:	4620      	mov	r0, r4
 8006102:	f000 fb3d 	bl	8006780 <__lshift>
 8006106:	4607      	mov	r7, r0
 8006108:	9b06      	ldr	r3, [sp, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d05c      	beq.n	80061c8 <_dtoa_r+0xa78>
 800610e:	6879      	ldr	r1, [r7, #4]
 8006110:	4620      	mov	r0, r4
 8006112:	f000 f923 	bl	800635c <_Balloc>
 8006116:	4605      	mov	r5, r0
 8006118:	b928      	cbnz	r0, 8006126 <_dtoa_r+0x9d6>
 800611a:	4b80      	ldr	r3, [pc, #512]	; (800631c <_dtoa_r+0xbcc>)
 800611c:	4602      	mov	r2, r0
 800611e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006122:	f7ff bb2e 	b.w	8005782 <_dtoa_r+0x32>
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	3202      	adds	r2, #2
 800612a:	0092      	lsls	r2, r2, #2
 800612c:	f107 010c 	add.w	r1, r7, #12
 8006130:	300c      	adds	r0, #12
 8006132:	f000 f905 	bl	8006340 <memcpy>
 8006136:	2201      	movs	r2, #1
 8006138:	4629      	mov	r1, r5
 800613a:	4620      	mov	r0, r4
 800613c:	f000 fb20 	bl	8006780 <__lshift>
 8006140:	9b00      	ldr	r3, [sp, #0]
 8006142:	3301      	adds	r3, #1
 8006144:	9301      	str	r3, [sp, #4]
 8006146:	9b00      	ldr	r3, [sp, #0]
 8006148:	444b      	add	r3, r9
 800614a:	9307      	str	r3, [sp, #28]
 800614c:	9b02      	ldr	r3, [sp, #8]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	46b8      	mov	r8, r7
 8006154:	9306      	str	r3, [sp, #24]
 8006156:	4607      	mov	r7, r0
 8006158:	9b01      	ldr	r3, [sp, #4]
 800615a:	4631      	mov	r1, r6
 800615c:	3b01      	subs	r3, #1
 800615e:	4658      	mov	r0, fp
 8006160:	9302      	str	r3, [sp, #8]
 8006162:	f7ff fa67 	bl	8005634 <quorem>
 8006166:	4603      	mov	r3, r0
 8006168:	3330      	adds	r3, #48	; 0x30
 800616a:	9004      	str	r0, [sp, #16]
 800616c:	4641      	mov	r1, r8
 800616e:	4658      	mov	r0, fp
 8006170:	9308      	str	r3, [sp, #32]
 8006172:	f000 fb71 	bl	8006858 <__mcmp>
 8006176:	463a      	mov	r2, r7
 8006178:	4681      	mov	r9, r0
 800617a:	4631      	mov	r1, r6
 800617c:	4620      	mov	r0, r4
 800617e:	f000 fb87 	bl	8006890 <__mdiff>
 8006182:	68c2      	ldr	r2, [r0, #12]
 8006184:	9b08      	ldr	r3, [sp, #32]
 8006186:	4605      	mov	r5, r0
 8006188:	bb02      	cbnz	r2, 80061cc <_dtoa_r+0xa7c>
 800618a:	4601      	mov	r1, r0
 800618c:	4658      	mov	r0, fp
 800618e:	f000 fb63 	bl	8006858 <__mcmp>
 8006192:	9b08      	ldr	r3, [sp, #32]
 8006194:	4602      	mov	r2, r0
 8006196:	4629      	mov	r1, r5
 8006198:	4620      	mov	r0, r4
 800619a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800619e:	f000 f91d 	bl	80063dc <_Bfree>
 80061a2:	9b05      	ldr	r3, [sp, #20]
 80061a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061a6:	9d01      	ldr	r5, [sp, #4]
 80061a8:	ea43 0102 	orr.w	r1, r3, r2
 80061ac:	9b06      	ldr	r3, [sp, #24]
 80061ae:	430b      	orrs	r3, r1
 80061b0:	9b08      	ldr	r3, [sp, #32]
 80061b2:	d10d      	bne.n	80061d0 <_dtoa_r+0xa80>
 80061b4:	2b39      	cmp	r3, #57	; 0x39
 80061b6:	d029      	beq.n	800620c <_dtoa_r+0xabc>
 80061b8:	f1b9 0f00 	cmp.w	r9, #0
 80061bc:	dd01      	ble.n	80061c2 <_dtoa_r+0xa72>
 80061be:	9b04      	ldr	r3, [sp, #16]
 80061c0:	3331      	adds	r3, #49	; 0x31
 80061c2:	9a02      	ldr	r2, [sp, #8]
 80061c4:	7013      	strb	r3, [r2, #0]
 80061c6:	e774      	b.n	80060b2 <_dtoa_r+0x962>
 80061c8:	4638      	mov	r0, r7
 80061ca:	e7b9      	b.n	8006140 <_dtoa_r+0x9f0>
 80061cc:	2201      	movs	r2, #1
 80061ce:	e7e2      	b.n	8006196 <_dtoa_r+0xa46>
 80061d0:	f1b9 0f00 	cmp.w	r9, #0
 80061d4:	db06      	blt.n	80061e4 <_dtoa_r+0xa94>
 80061d6:	9905      	ldr	r1, [sp, #20]
 80061d8:	ea41 0909 	orr.w	r9, r1, r9
 80061dc:	9906      	ldr	r1, [sp, #24]
 80061de:	ea59 0101 	orrs.w	r1, r9, r1
 80061e2:	d120      	bne.n	8006226 <_dtoa_r+0xad6>
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	ddec      	ble.n	80061c2 <_dtoa_r+0xa72>
 80061e8:	4659      	mov	r1, fp
 80061ea:	2201      	movs	r2, #1
 80061ec:	4620      	mov	r0, r4
 80061ee:	9301      	str	r3, [sp, #4]
 80061f0:	f000 fac6 	bl	8006780 <__lshift>
 80061f4:	4631      	mov	r1, r6
 80061f6:	4683      	mov	fp, r0
 80061f8:	f000 fb2e 	bl	8006858 <__mcmp>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	9b01      	ldr	r3, [sp, #4]
 8006200:	dc02      	bgt.n	8006208 <_dtoa_r+0xab8>
 8006202:	d1de      	bne.n	80061c2 <_dtoa_r+0xa72>
 8006204:	07da      	lsls	r2, r3, #31
 8006206:	d5dc      	bpl.n	80061c2 <_dtoa_r+0xa72>
 8006208:	2b39      	cmp	r3, #57	; 0x39
 800620a:	d1d8      	bne.n	80061be <_dtoa_r+0xa6e>
 800620c:	9a02      	ldr	r2, [sp, #8]
 800620e:	2339      	movs	r3, #57	; 0x39
 8006210:	7013      	strb	r3, [r2, #0]
 8006212:	462b      	mov	r3, r5
 8006214:	461d      	mov	r5, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800621c:	2a39      	cmp	r2, #57	; 0x39
 800621e:	d050      	beq.n	80062c2 <_dtoa_r+0xb72>
 8006220:	3201      	adds	r2, #1
 8006222:	701a      	strb	r2, [r3, #0]
 8006224:	e745      	b.n	80060b2 <_dtoa_r+0x962>
 8006226:	2a00      	cmp	r2, #0
 8006228:	dd03      	ble.n	8006232 <_dtoa_r+0xae2>
 800622a:	2b39      	cmp	r3, #57	; 0x39
 800622c:	d0ee      	beq.n	800620c <_dtoa_r+0xabc>
 800622e:	3301      	adds	r3, #1
 8006230:	e7c7      	b.n	80061c2 <_dtoa_r+0xa72>
 8006232:	9a01      	ldr	r2, [sp, #4]
 8006234:	9907      	ldr	r1, [sp, #28]
 8006236:	f802 3c01 	strb.w	r3, [r2, #-1]
 800623a:	428a      	cmp	r2, r1
 800623c:	d02a      	beq.n	8006294 <_dtoa_r+0xb44>
 800623e:	4659      	mov	r1, fp
 8006240:	2300      	movs	r3, #0
 8006242:	220a      	movs	r2, #10
 8006244:	4620      	mov	r0, r4
 8006246:	f000 f8eb 	bl	8006420 <__multadd>
 800624a:	45b8      	cmp	r8, r7
 800624c:	4683      	mov	fp, r0
 800624e:	f04f 0300 	mov.w	r3, #0
 8006252:	f04f 020a 	mov.w	r2, #10
 8006256:	4641      	mov	r1, r8
 8006258:	4620      	mov	r0, r4
 800625a:	d107      	bne.n	800626c <_dtoa_r+0xb1c>
 800625c:	f000 f8e0 	bl	8006420 <__multadd>
 8006260:	4680      	mov	r8, r0
 8006262:	4607      	mov	r7, r0
 8006264:	9b01      	ldr	r3, [sp, #4]
 8006266:	3301      	adds	r3, #1
 8006268:	9301      	str	r3, [sp, #4]
 800626a:	e775      	b.n	8006158 <_dtoa_r+0xa08>
 800626c:	f000 f8d8 	bl	8006420 <__multadd>
 8006270:	4639      	mov	r1, r7
 8006272:	4680      	mov	r8, r0
 8006274:	2300      	movs	r3, #0
 8006276:	220a      	movs	r2, #10
 8006278:	4620      	mov	r0, r4
 800627a:	f000 f8d1 	bl	8006420 <__multadd>
 800627e:	4607      	mov	r7, r0
 8006280:	e7f0      	b.n	8006264 <_dtoa_r+0xb14>
 8006282:	f1b9 0f00 	cmp.w	r9, #0
 8006286:	9a00      	ldr	r2, [sp, #0]
 8006288:	bfcc      	ite	gt
 800628a:	464d      	movgt	r5, r9
 800628c:	2501      	movle	r5, #1
 800628e:	4415      	add	r5, r2
 8006290:	f04f 0800 	mov.w	r8, #0
 8006294:	4659      	mov	r1, fp
 8006296:	2201      	movs	r2, #1
 8006298:	4620      	mov	r0, r4
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	f000 fa70 	bl	8006780 <__lshift>
 80062a0:	4631      	mov	r1, r6
 80062a2:	4683      	mov	fp, r0
 80062a4:	f000 fad8 	bl	8006858 <__mcmp>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	dcb2      	bgt.n	8006212 <_dtoa_r+0xac2>
 80062ac:	d102      	bne.n	80062b4 <_dtoa_r+0xb64>
 80062ae:	9b01      	ldr	r3, [sp, #4]
 80062b0:	07db      	lsls	r3, r3, #31
 80062b2:	d4ae      	bmi.n	8006212 <_dtoa_r+0xac2>
 80062b4:	462b      	mov	r3, r5
 80062b6:	461d      	mov	r5, r3
 80062b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062bc:	2a30      	cmp	r2, #48	; 0x30
 80062be:	d0fa      	beq.n	80062b6 <_dtoa_r+0xb66>
 80062c0:	e6f7      	b.n	80060b2 <_dtoa_r+0x962>
 80062c2:	9a00      	ldr	r2, [sp, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d1a5      	bne.n	8006214 <_dtoa_r+0xac4>
 80062c8:	f10a 0a01 	add.w	sl, sl, #1
 80062cc:	2331      	movs	r3, #49	; 0x31
 80062ce:	e779      	b.n	80061c4 <_dtoa_r+0xa74>
 80062d0:	4b13      	ldr	r3, [pc, #76]	; (8006320 <_dtoa_r+0xbd0>)
 80062d2:	f7ff baaf 	b.w	8005834 <_dtoa_r+0xe4>
 80062d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f47f aa86 	bne.w	80057ea <_dtoa_r+0x9a>
 80062de:	4b11      	ldr	r3, [pc, #68]	; (8006324 <_dtoa_r+0xbd4>)
 80062e0:	f7ff baa8 	b.w	8005834 <_dtoa_r+0xe4>
 80062e4:	f1b9 0f00 	cmp.w	r9, #0
 80062e8:	dc03      	bgt.n	80062f2 <_dtoa_r+0xba2>
 80062ea:	9b05      	ldr	r3, [sp, #20]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	f73f aec9 	bgt.w	8006084 <_dtoa_r+0x934>
 80062f2:	9d00      	ldr	r5, [sp, #0]
 80062f4:	4631      	mov	r1, r6
 80062f6:	4658      	mov	r0, fp
 80062f8:	f7ff f99c 	bl	8005634 <quorem>
 80062fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006300:	f805 3b01 	strb.w	r3, [r5], #1
 8006304:	9a00      	ldr	r2, [sp, #0]
 8006306:	1aaa      	subs	r2, r5, r2
 8006308:	4591      	cmp	r9, r2
 800630a:	ddba      	ble.n	8006282 <_dtoa_r+0xb32>
 800630c:	4659      	mov	r1, fp
 800630e:	2300      	movs	r3, #0
 8006310:	220a      	movs	r2, #10
 8006312:	4620      	mov	r0, r4
 8006314:	f000 f884 	bl	8006420 <__multadd>
 8006318:	4683      	mov	fp, r0
 800631a:	e7eb      	b.n	80062f4 <_dtoa_r+0xba4>
 800631c:	08007cd7 	.word	0x08007cd7
 8006320:	08007c30 	.word	0x08007c30
 8006324:	08007c54 	.word	0x08007c54

08006328 <_localeconv_r>:
 8006328:	4800      	ldr	r0, [pc, #0]	; (800632c <_localeconv_r+0x4>)
 800632a:	4770      	bx	lr
 800632c:	20000160 	.word	0x20000160

08006330 <malloc>:
 8006330:	4b02      	ldr	r3, [pc, #8]	; (800633c <malloc+0xc>)
 8006332:	4601      	mov	r1, r0
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	f000 bbef 	b.w	8006b18 <_malloc_r>
 800633a:	bf00      	nop
 800633c:	2000000c 	.word	0x2000000c

08006340 <memcpy>:
 8006340:	440a      	add	r2, r1
 8006342:	4291      	cmp	r1, r2
 8006344:	f100 33ff 	add.w	r3, r0, #4294967295
 8006348:	d100      	bne.n	800634c <memcpy+0xc>
 800634a:	4770      	bx	lr
 800634c:	b510      	push	{r4, lr}
 800634e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006356:	4291      	cmp	r1, r2
 8006358:	d1f9      	bne.n	800634e <memcpy+0xe>
 800635a:	bd10      	pop	{r4, pc}

0800635c <_Balloc>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006360:	4604      	mov	r4, r0
 8006362:	460d      	mov	r5, r1
 8006364:	b976      	cbnz	r6, 8006384 <_Balloc+0x28>
 8006366:	2010      	movs	r0, #16
 8006368:	f7ff ffe2 	bl	8006330 <malloc>
 800636c:	4602      	mov	r2, r0
 800636e:	6260      	str	r0, [r4, #36]	; 0x24
 8006370:	b920      	cbnz	r0, 800637c <_Balloc+0x20>
 8006372:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <_Balloc+0x78>)
 8006374:	4818      	ldr	r0, [pc, #96]	; (80063d8 <_Balloc+0x7c>)
 8006376:	2166      	movs	r1, #102	; 0x66
 8006378:	f000 fd94 	bl	8006ea4 <__assert_func>
 800637c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006380:	6006      	str	r6, [r0, #0]
 8006382:	60c6      	str	r6, [r0, #12]
 8006384:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006386:	68f3      	ldr	r3, [r6, #12]
 8006388:	b183      	cbz	r3, 80063ac <_Balloc+0x50>
 800638a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006392:	b9b8      	cbnz	r0, 80063c4 <_Balloc+0x68>
 8006394:	2101      	movs	r1, #1
 8006396:	fa01 f605 	lsl.w	r6, r1, r5
 800639a:	1d72      	adds	r2, r6, #5
 800639c:	0092      	lsls	r2, r2, #2
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 fb5a 	bl	8006a58 <_calloc_r>
 80063a4:	b160      	cbz	r0, 80063c0 <_Balloc+0x64>
 80063a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063aa:	e00e      	b.n	80063ca <_Balloc+0x6e>
 80063ac:	2221      	movs	r2, #33	; 0x21
 80063ae:	2104      	movs	r1, #4
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fb51 	bl	8006a58 <_calloc_r>
 80063b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063b8:	60f0      	str	r0, [r6, #12]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1e4      	bne.n	800638a <_Balloc+0x2e>
 80063c0:	2000      	movs	r0, #0
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	6802      	ldr	r2, [r0, #0]
 80063c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063ca:	2300      	movs	r3, #0
 80063cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063d0:	e7f7      	b.n	80063c2 <_Balloc+0x66>
 80063d2:	bf00      	nop
 80063d4:	08007c61 	.word	0x08007c61
 80063d8:	08007ce8 	.word	0x08007ce8

080063dc <_Bfree>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063e0:	4605      	mov	r5, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	b976      	cbnz	r6, 8006404 <_Bfree+0x28>
 80063e6:	2010      	movs	r0, #16
 80063e8:	f7ff ffa2 	bl	8006330 <malloc>
 80063ec:	4602      	mov	r2, r0
 80063ee:	6268      	str	r0, [r5, #36]	; 0x24
 80063f0:	b920      	cbnz	r0, 80063fc <_Bfree+0x20>
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <_Bfree+0x3c>)
 80063f4:	4809      	ldr	r0, [pc, #36]	; (800641c <_Bfree+0x40>)
 80063f6:	218a      	movs	r1, #138	; 0x8a
 80063f8:	f000 fd54 	bl	8006ea4 <__assert_func>
 80063fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006400:	6006      	str	r6, [r0, #0]
 8006402:	60c6      	str	r6, [r0, #12]
 8006404:	b13c      	cbz	r4, 8006416 <_Bfree+0x3a>
 8006406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006408:	6862      	ldr	r2, [r4, #4]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006410:	6021      	str	r1, [r4, #0]
 8006412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	08007c61 	.word	0x08007c61
 800641c:	08007ce8 	.word	0x08007ce8

08006420 <__multadd>:
 8006420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006424:	690e      	ldr	r6, [r1, #16]
 8006426:	4607      	mov	r7, r0
 8006428:	4698      	mov	r8, r3
 800642a:	460c      	mov	r4, r1
 800642c:	f101 0014 	add.w	r0, r1, #20
 8006430:	2300      	movs	r3, #0
 8006432:	6805      	ldr	r5, [r0, #0]
 8006434:	b2a9      	uxth	r1, r5
 8006436:	fb02 8101 	mla	r1, r2, r1, r8
 800643a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800643e:	0c2d      	lsrs	r5, r5, #16
 8006440:	fb02 c505 	mla	r5, r2, r5, ip
 8006444:	b289      	uxth	r1, r1
 8006446:	3301      	adds	r3, #1
 8006448:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800644c:	429e      	cmp	r6, r3
 800644e:	f840 1b04 	str.w	r1, [r0], #4
 8006452:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006456:	dcec      	bgt.n	8006432 <__multadd+0x12>
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	d022      	beq.n	80064a4 <__multadd+0x84>
 800645e:	68a3      	ldr	r3, [r4, #8]
 8006460:	42b3      	cmp	r3, r6
 8006462:	dc19      	bgt.n	8006498 <__multadd+0x78>
 8006464:	6861      	ldr	r1, [r4, #4]
 8006466:	4638      	mov	r0, r7
 8006468:	3101      	adds	r1, #1
 800646a:	f7ff ff77 	bl	800635c <_Balloc>
 800646e:	4605      	mov	r5, r0
 8006470:	b928      	cbnz	r0, 800647e <__multadd+0x5e>
 8006472:	4602      	mov	r2, r0
 8006474:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <__multadd+0x8c>)
 8006476:	480e      	ldr	r0, [pc, #56]	; (80064b0 <__multadd+0x90>)
 8006478:	21b5      	movs	r1, #181	; 0xb5
 800647a:	f000 fd13 	bl	8006ea4 <__assert_func>
 800647e:	6922      	ldr	r2, [r4, #16]
 8006480:	3202      	adds	r2, #2
 8006482:	f104 010c 	add.w	r1, r4, #12
 8006486:	0092      	lsls	r2, r2, #2
 8006488:	300c      	adds	r0, #12
 800648a:	f7ff ff59 	bl	8006340 <memcpy>
 800648e:	4621      	mov	r1, r4
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff ffa3 	bl	80063dc <_Bfree>
 8006496:	462c      	mov	r4, r5
 8006498:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800649c:	3601      	adds	r6, #1
 800649e:	f8c3 8014 	str.w	r8, [r3, #20]
 80064a2:	6126      	str	r6, [r4, #16]
 80064a4:	4620      	mov	r0, r4
 80064a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064aa:	bf00      	nop
 80064ac:	08007cd7 	.word	0x08007cd7
 80064b0:	08007ce8 	.word	0x08007ce8

080064b4 <__hi0bits>:
 80064b4:	0c03      	lsrs	r3, r0, #16
 80064b6:	041b      	lsls	r3, r3, #16
 80064b8:	b9d3      	cbnz	r3, 80064f0 <__hi0bits+0x3c>
 80064ba:	0400      	lsls	r0, r0, #16
 80064bc:	2310      	movs	r3, #16
 80064be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80064c2:	bf04      	itt	eq
 80064c4:	0200      	lsleq	r0, r0, #8
 80064c6:	3308      	addeq	r3, #8
 80064c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80064cc:	bf04      	itt	eq
 80064ce:	0100      	lsleq	r0, r0, #4
 80064d0:	3304      	addeq	r3, #4
 80064d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80064d6:	bf04      	itt	eq
 80064d8:	0080      	lsleq	r0, r0, #2
 80064da:	3302      	addeq	r3, #2
 80064dc:	2800      	cmp	r0, #0
 80064de:	db05      	blt.n	80064ec <__hi0bits+0x38>
 80064e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80064e4:	f103 0301 	add.w	r3, r3, #1
 80064e8:	bf08      	it	eq
 80064ea:	2320      	moveq	r3, #32
 80064ec:	4618      	mov	r0, r3
 80064ee:	4770      	bx	lr
 80064f0:	2300      	movs	r3, #0
 80064f2:	e7e4      	b.n	80064be <__hi0bits+0xa>

080064f4 <__lo0bits>:
 80064f4:	6803      	ldr	r3, [r0, #0]
 80064f6:	f013 0207 	ands.w	r2, r3, #7
 80064fa:	4601      	mov	r1, r0
 80064fc:	d00b      	beq.n	8006516 <__lo0bits+0x22>
 80064fe:	07da      	lsls	r2, r3, #31
 8006500:	d424      	bmi.n	800654c <__lo0bits+0x58>
 8006502:	0798      	lsls	r0, r3, #30
 8006504:	bf49      	itett	mi
 8006506:	085b      	lsrmi	r3, r3, #1
 8006508:	089b      	lsrpl	r3, r3, #2
 800650a:	2001      	movmi	r0, #1
 800650c:	600b      	strmi	r3, [r1, #0]
 800650e:	bf5c      	itt	pl
 8006510:	600b      	strpl	r3, [r1, #0]
 8006512:	2002      	movpl	r0, #2
 8006514:	4770      	bx	lr
 8006516:	b298      	uxth	r0, r3
 8006518:	b9b0      	cbnz	r0, 8006548 <__lo0bits+0x54>
 800651a:	0c1b      	lsrs	r3, r3, #16
 800651c:	2010      	movs	r0, #16
 800651e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006522:	bf04      	itt	eq
 8006524:	0a1b      	lsreq	r3, r3, #8
 8006526:	3008      	addeq	r0, #8
 8006528:	071a      	lsls	r2, r3, #28
 800652a:	bf04      	itt	eq
 800652c:	091b      	lsreq	r3, r3, #4
 800652e:	3004      	addeq	r0, #4
 8006530:	079a      	lsls	r2, r3, #30
 8006532:	bf04      	itt	eq
 8006534:	089b      	lsreq	r3, r3, #2
 8006536:	3002      	addeq	r0, #2
 8006538:	07da      	lsls	r2, r3, #31
 800653a:	d403      	bmi.n	8006544 <__lo0bits+0x50>
 800653c:	085b      	lsrs	r3, r3, #1
 800653e:	f100 0001 	add.w	r0, r0, #1
 8006542:	d005      	beq.n	8006550 <__lo0bits+0x5c>
 8006544:	600b      	str	r3, [r1, #0]
 8006546:	4770      	bx	lr
 8006548:	4610      	mov	r0, r2
 800654a:	e7e8      	b.n	800651e <__lo0bits+0x2a>
 800654c:	2000      	movs	r0, #0
 800654e:	4770      	bx	lr
 8006550:	2020      	movs	r0, #32
 8006552:	4770      	bx	lr

08006554 <__i2b>:
 8006554:	b510      	push	{r4, lr}
 8006556:	460c      	mov	r4, r1
 8006558:	2101      	movs	r1, #1
 800655a:	f7ff feff 	bl	800635c <_Balloc>
 800655e:	4602      	mov	r2, r0
 8006560:	b928      	cbnz	r0, 800656e <__i2b+0x1a>
 8006562:	4b05      	ldr	r3, [pc, #20]	; (8006578 <__i2b+0x24>)
 8006564:	4805      	ldr	r0, [pc, #20]	; (800657c <__i2b+0x28>)
 8006566:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800656a:	f000 fc9b 	bl	8006ea4 <__assert_func>
 800656e:	2301      	movs	r3, #1
 8006570:	6144      	str	r4, [r0, #20]
 8006572:	6103      	str	r3, [r0, #16]
 8006574:	bd10      	pop	{r4, pc}
 8006576:	bf00      	nop
 8006578:	08007cd7 	.word	0x08007cd7
 800657c:	08007ce8 	.word	0x08007ce8

08006580 <__multiply>:
 8006580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	4614      	mov	r4, r2
 8006586:	690a      	ldr	r2, [r1, #16]
 8006588:	6923      	ldr	r3, [r4, #16]
 800658a:	429a      	cmp	r2, r3
 800658c:	bfb8      	it	lt
 800658e:	460b      	movlt	r3, r1
 8006590:	460d      	mov	r5, r1
 8006592:	bfbc      	itt	lt
 8006594:	4625      	movlt	r5, r4
 8006596:	461c      	movlt	r4, r3
 8006598:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800659c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80065a0:	68ab      	ldr	r3, [r5, #8]
 80065a2:	6869      	ldr	r1, [r5, #4]
 80065a4:	eb0a 0709 	add.w	r7, sl, r9
 80065a8:	42bb      	cmp	r3, r7
 80065aa:	b085      	sub	sp, #20
 80065ac:	bfb8      	it	lt
 80065ae:	3101      	addlt	r1, #1
 80065b0:	f7ff fed4 	bl	800635c <_Balloc>
 80065b4:	b930      	cbnz	r0, 80065c4 <__multiply+0x44>
 80065b6:	4602      	mov	r2, r0
 80065b8:	4b42      	ldr	r3, [pc, #264]	; (80066c4 <__multiply+0x144>)
 80065ba:	4843      	ldr	r0, [pc, #268]	; (80066c8 <__multiply+0x148>)
 80065bc:	f240 115d 	movw	r1, #349	; 0x15d
 80065c0:	f000 fc70 	bl	8006ea4 <__assert_func>
 80065c4:	f100 0614 	add.w	r6, r0, #20
 80065c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80065cc:	4633      	mov	r3, r6
 80065ce:	2200      	movs	r2, #0
 80065d0:	4543      	cmp	r3, r8
 80065d2:	d31e      	bcc.n	8006612 <__multiply+0x92>
 80065d4:	f105 0c14 	add.w	ip, r5, #20
 80065d8:	f104 0314 	add.w	r3, r4, #20
 80065dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80065e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80065e4:	9202      	str	r2, [sp, #8]
 80065e6:	ebac 0205 	sub.w	r2, ip, r5
 80065ea:	3a15      	subs	r2, #21
 80065ec:	f022 0203 	bic.w	r2, r2, #3
 80065f0:	3204      	adds	r2, #4
 80065f2:	f105 0115 	add.w	r1, r5, #21
 80065f6:	458c      	cmp	ip, r1
 80065f8:	bf38      	it	cc
 80065fa:	2204      	movcc	r2, #4
 80065fc:	9201      	str	r2, [sp, #4]
 80065fe:	9a02      	ldr	r2, [sp, #8]
 8006600:	9303      	str	r3, [sp, #12]
 8006602:	429a      	cmp	r2, r3
 8006604:	d808      	bhi.n	8006618 <__multiply+0x98>
 8006606:	2f00      	cmp	r7, #0
 8006608:	dc55      	bgt.n	80066b6 <__multiply+0x136>
 800660a:	6107      	str	r7, [r0, #16]
 800660c:	b005      	add	sp, #20
 800660e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006612:	f843 2b04 	str.w	r2, [r3], #4
 8006616:	e7db      	b.n	80065d0 <__multiply+0x50>
 8006618:	f8b3 a000 	ldrh.w	sl, [r3]
 800661c:	f1ba 0f00 	cmp.w	sl, #0
 8006620:	d020      	beq.n	8006664 <__multiply+0xe4>
 8006622:	f105 0e14 	add.w	lr, r5, #20
 8006626:	46b1      	mov	r9, r6
 8006628:	2200      	movs	r2, #0
 800662a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800662e:	f8d9 b000 	ldr.w	fp, [r9]
 8006632:	b2a1      	uxth	r1, r4
 8006634:	fa1f fb8b 	uxth.w	fp, fp
 8006638:	fb0a b101 	mla	r1, sl, r1, fp
 800663c:	4411      	add	r1, r2
 800663e:	f8d9 2000 	ldr.w	r2, [r9]
 8006642:	0c24      	lsrs	r4, r4, #16
 8006644:	0c12      	lsrs	r2, r2, #16
 8006646:	fb0a 2404 	mla	r4, sl, r4, r2
 800664a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800664e:	b289      	uxth	r1, r1
 8006650:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006654:	45f4      	cmp	ip, lr
 8006656:	f849 1b04 	str.w	r1, [r9], #4
 800665a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800665e:	d8e4      	bhi.n	800662a <__multiply+0xaa>
 8006660:	9901      	ldr	r1, [sp, #4]
 8006662:	5072      	str	r2, [r6, r1]
 8006664:	9a03      	ldr	r2, [sp, #12]
 8006666:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800666a:	3304      	adds	r3, #4
 800666c:	f1b9 0f00 	cmp.w	r9, #0
 8006670:	d01f      	beq.n	80066b2 <__multiply+0x132>
 8006672:	6834      	ldr	r4, [r6, #0]
 8006674:	f105 0114 	add.w	r1, r5, #20
 8006678:	46b6      	mov	lr, r6
 800667a:	f04f 0a00 	mov.w	sl, #0
 800667e:	880a      	ldrh	r2, [r1, #0]
 8006680:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006684:	fb09 b202 	mla	r2, r9, r2, fp
 8006688:	4492      	add	sl, r2
 800668a:	b2a4      	uxth	r4, r4
 800668c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006690:	f84e 4b04 	str.w	r4, [lr], #4
 8006694:	f851 4b04 	ldr.w	r4, [r1], #4
 8006698:	f8be 2000 	ldrh.w	r2, [lr]
 800669c:	0c24      	lsrs	r4, r4, #16
 800669e:	fb09 2404 	mla	r4, r9, r4, r2
 80066a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80066a6:	458c      	cmp	ip, r1
 80066a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80066ac:	d8e7      	bhi.n	800667e <__multiply+0xfe>
 80066ae:	9a01      	ldr	r2, [sp, #4]
 80066b0:	50b4      	str	r4, [r6, r2]
 80066b2:	3604      	adds	r6, #4
 80066b4:	e7a3      	b.n	80065fe <__multiply+0x7e>
 80066b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1a5      	bne.n	800660a <__multiply+0x8a>
 80066be:	3f01      	subs	r7, #1
 80066c0:	e7a1      	b.n	8006606 <__multiply+0x86>
 80066c2:	bf00      	nop
 80066c4:	08007cd7 	.word	0x08007cd7
 80066c8:	08007ce8 	.word	0x08007ce8

080066cc <__pow5mult>:
 80066cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d0:	4615      	mov	r5, r2
 80066d2:	f012 0203 	ands.w	r2, r2, #3
 80066d6:	4606      	mov	r6, r0
 80066d8:	460f      	mov	r7, r1
 80066da:	d007      	beq.n	80066ec <__pow5mult+0x20>
 80066dc:	4c25      	ldr	r4, [pc, #148]	; (8006774 <__pow5mult+0xa8>)
 80066de:	3a01      	subs	r2, #1
 80066e0:	2300      	movs	r3, #0
 80066e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066e6:	f7ff fe9b 	bl	8006420 <__multadd>
 80066ea:	4607      	mov	r7, r0
 80066ec:	10ad      	asrs	r5, r5, #2
 80066ee:	d03d      	beq.n	800676c <__pow5mult+0xa0>
 80066f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066f2:	b97c      	cbnz	r4, 8006714 <__pow5mult+0x48>
 80066f4:	2010      	movs	r0, #16
 80066f6:	f7ff fe1b 	bl	8006330 <malloc>
 80066fa:	4602      	mov	r2, r0
 80066fc:	6270      	str	r0, [r6, #36]	; 0x24
 80066fe:	b928      	cbnz	r0, 800670c <__pow5mult+0x40>
 8006700:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <__pow5mult+0xac>)
 8006702:	481e      	ldr	r0, [pc, #120]	; (800677c <__pow5mult+0xb0>)
 8006704:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006708:	f000 fbcc 	bl	8006ea4 <__assert_func>
 800670c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006710:	6004      	str	r4, [r0, #0]
 8006712:	60c4      	str	r4, [r0, #12]
 8006714:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006718:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800671c:	b94c      	cbnz	r4, 8006732 <__pow5mult+0x66>
 800671e:	f240 2171 	movw	r1, #625	; 0x271
 8006722:	4630      	mov	r0, r6
 8006724:	f7ff ff16 	bl	8006554 <__i2b>
 8006728:	2300      	movs	r3, #0
 800672a:	f8c8 0008 	str.w	r0, [r8, #8]
 800672e:	4604      	mov	r4, r0
 8006730:	6003      	str	r3, [r0, #0]
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	07eb      	lsls	r3, r5, #31
 8006738:	d50a      	bpl.n	8006750 <__pow5mult+0x84>
 800673a:	4639      	mov	r1, r7
 800673c:	4622      	mov	r2, r4
 800673e:	4630      	mov	r0, r6
 8006740:	f7ff ff1e 	bl	8006580 <__multiply>
 8006744:	4639      	mov	r1, r7
 8006746:	4680      	mov	r8, r0
 8006748:	4630      	mov	r0, r6
 800674a:	f7ff fe47 	bl	80063dc <_Bfree>
 800674e:	4647      	mov	r7, r8
 8006750:	106d      	asrs	r5, r5, #1
 8006752:	d00b      	beq.n	800676c <__pow5mult+0xa0>
 8006754:	6820      	ldr	r0, [r4, #0]
 8006756:	b938      	cbnz	r0, 8006768 <__pow5mult+0x9c>
 8006758:	4622      	mov	r2, r4
 800675a:	4621      	mov	r1, r4
 800675c:	4630      	mov	r0, r6
 800675e:	f7ff ff0f 	bl	8006580 <__multiply>
 8006762:	6020      	str	r0, [r4, #0]
 8006764:	f8c0 9000 	str.w	r9, [r0]
 8006768:	4604      	mov	r4, r0
 800676a:	e7e4      	b.n	8006736 <__pow5mult+0x6a>
 800676c:	4638      	mov	r0, r7
 800676e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006772:	bf00      	nop
 8006774:	08007e38 	.word	0x08007e38
 8006778:	08007c61 	.word	0x08007c61
 800677c:	08007ce8 	.word	0x08007ce8

08006780 <__lshift>:
 8006780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	460c      	mov	r4, r1
 8006786:	6849      	ldr	r1, [r1, #4]
 8006788:	6923      	ldr	r3, [r4, #16]
 800678a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800678e:	68a3      	ldr	r3, [r4, #8]
 8006790:	4607      	mov	r7, r0
 8006792:	4691      	mov	r9, r2
 8006794:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006798:	f108 0601 	add.w	r6, r8, #1
 800679c:	42b3      	cmp	r3, r6
 800679e:	db0b      	blt.n	80067b8 <__lshift+0x38>
 80067a0:	4638      	mov	r0, r7
 80067a2:	f7ff fddb 	bl	800635c <_Balloc>
 80067a6:	4605      	mov	r5, r0
 80067a8:	b948      	cbnz	r0, 80067be <__lshift+0x3e>
 80067aa:	4602      	mov	r2, r0
 80067ac:	4b28      	ldr	r3, [pc, #160]	; (8006850 <__lshift+0xd0>)
 80067ae:	4829      	ldr	r0, [pc, #164]	; (8006854 <__lshift+0xd4>)
 80067b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067b4:	f000 fb76 	bl	8006ea4 <__assert_func>
 80067b8:	3101      	adds	r1, #1
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	e7ee      	b.n	800679c <__lshift+0x1c>
 80067be:	2300      	movs	r3, #0
 80067c0:	f100 0114 	add.w	r1, r0, #20
 80067c4:	f100 0210 	add.w	r2, r0, #16
 80067c8:	4618      	mov	r0, r3
 80067ca:	4553      	cmp	r3, sl
 80067cc:	db33      	blt.n	8006836 <__lshift+0xb6>
 80067ce:	6920      	ldr	r0, [r4, #16]
 80067d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067d4:	f104 0314 	add.w	r3, r4, #20
 80067d8:	f019 091f 	ands.w	r9, r9, #31
 80067dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067e4:	d02b      	beq.n	800683e <__lshift+0xbe>
 80067e6:	f1c9 0e20 	rsb	lr, r9, #32
 80067ea:	468a      	mov	sl, r1
 80067ec:	2200      	movs	r2, #0
 80067ee:	6818      	ldr	r0, [r3, #0]
 80067f0:	fa00 f009 	lsl.w	r0, r0, r9
 80067f4:	4302      	orrs	r2, r0
 80067f6:	f84a 2b04 	str.w	r2, [sl], #4
 80067fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80067fe:	459c      	cmp	ip, r3
 8006800:	fa22 f20e 	lsr.w	r2, r2, lr
 8006804:	d8f3      	bhi.n	80067ee <__lshift+0x6e>
 8006806:	ebac 0304 	sub.w	r3, ip, r4
 800680a:	3b15      	subs	r3, #21
 800680c:	f023 0303 	bic.w	r3, r3, #3
 8006810:	3304      	adds	r3, #4
 8006812:	f104 0015 	add.w	r0, r4, #21
 8006816:	4584      	cmp	ip, r0
 8006818:	bf38      	it	cc
 800681a:	2304      	movcc	r3, #4
 800681c:	50ca      	str	r2, [r1, r3]
 800681e:	b10a      	cbz	r2, 8006824 <__lshift+0xa4>
 8006820:	f108 0602 	add.w	r6, r8, #2
 8006824:	3e01      	subs	r6, #1
 8006826:	4638      	mov	r0, r7
 8006828:	612e      	str	r6, [r5, #16]
 800682a:	4621      	mov	r1, r4
 800682c:	f7ff fdd6 	bl	80063dc <_Bfree>
 8006830:	4628      	mov	r0, r5
 8006832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006836:	f842 0f04 	str.w	r0, [r2, #4]!
 800683a:	3301      	adds	r3, #1
 800683c:	e7c5      	b.n	80067ca <__lshift+0x4a>
 800683e:	3904      	subs	r1, #4
 8006840:	f853 2b04 	ldr.w	r2, [r3], #4
 8006844:	f841 2f04 	str.w	r2, [r1, #4]!
 8006848:	459c      	cmp	ip, r3
 800684a:	d8f9      	bhi.n	8006840 <__lshift+0xc0>
 800684c:	e7ea      	b.n	8006824 <__lshift+0xa4>
 800684e:	bf00      	nop
 8006850:	08007cd7 	.word	0x08007cd7
 8006854:	08007ce8 	.word	0x08007ce8

08006858 <__mcmp>:
 8006858:	b530      	push	{r4, r5, lr}
 800685a:	6902      	ldr	r2, [r0, #16]
 800685c:	690c      	ldr	r4, [r1, #16]
 800685e:	1b12      	subs	r2, r2, r4
 8006860:	d10e      	bne.n	8006880 <__mcmp+0x28>
 8006862:	f100 0314 	add.w	r3, r0, #20
 8006866:	3114      	adds	r1, #20
 8006868:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800686c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006870:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006874:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006878:	42a5      	cmp	r5, r4
 800687a:	d003      	beq.n	8006884 <__mcmp+0x2c>
 800687c:	d305      	bcc.n	800688a <__mcmp+0x32>
 800687e:	2201      	movs	r2, #1
 8006880:	4610      	mov	r0, r2
 8006882:	bd30      	pop	{r4, r5, pc}
 8006884:	4283      	cmp	r3, r0
 8006886:	d3f3      	bcc.n	8006870 <__mcmp+0x18>
 8006888:	e7fa      	b.n	8006880 <__mcmp+0x28>
 800688a:	f04f 32ff 	mov.w	r2, #4294967295
 800688e:	e7f7      	b.n	8006880 <__mcmp+0x28>

08006890 <__mdiff>:
 8006890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	460c      	mov	r4, r1
 8006896:	4606      	mov	r6, r0
 8006898:	4611      	mov	r1, r2
 800689a:	4620      	mov	r0, r4
 800689c:	4617      	mov	r7, r2
 800689e:	f7ff ffdb 	bl	8006858 <__mcmp>
 80068a2:	1e05      	subs	r5, r0, #0
 80068a4:	d110      	bne.n	80068c8 <__mdiff+0x38>
 80068a6:	4629      	mov	r1, r5
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7ff fd57 	bl	800635c <_Balloc>
 80068ae:	b930      	cbnz	r0, 80068be <__mdiff+0x2e>
 80068b0:	4b39      	ldr	r3, [pc, #228]	; (8006998 <__mdiff+0x108>)
 80068b2:	4602      	mov	r2, r0
 80068b4:	f240 2132 	movw	r1, #562	; 0x232
 80068b8:	4838      	ldr	r0, [pc, #224]	; (800699c <__mdiff+0x10c>)
 80068ba:	f000 faf3 	bl	8006ea4 <__assert_func>
 80068be:	2301      	movs	r3, #1
 80068c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c8:	bfa4      	itt	ge
 80068ca:	463b      	movge	r3, r7
 80068cc:	4627      	movge	r7, r4
 80068ce:	4630      	mov	r0, r6
 80068d0:	6879      	ldr	r1, [r7, #4]
 80068d2:	bfa6      	itte	ge
 80068d4:	461c      	movge	r4, r3
 80068d6:	2500      	movge	r5, #0
 80068d8:	2501      	movlt	r5, #1
 80068da:	f7ff fd3f 	bl	800635c <_Balloc>
 80068de:	b920      	cbnz	r0, 80068ea <__mdiff+0x5a>
 80068e0:	4b2d      	ldr	r3, [pc, #180]	; (8006998 <__mdiff+0x108>)
 80068e2:	4602      	mov	r2, r0
 80068e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068e8:	e7e6      	b.n	80068b8 <__mdiff+0x28>
 80068ea:	693e      	ldr	r6, [r7, #16]
 80068ec:	60c5      	str	r5, [r0, #12]
 80068ee:	6925      	ldr	r5, [r4, #16]
 80068f0:	f107 0114 	add.w	r1, r7, #20
 80068f4:	f104 0914 	add.w	r9, r4, #20
 80068f8:	f100 0e14 	add.w	lr, r0, #20
 80068fc:	f107 0210 	add.w	r2, r7, #16
 8006900:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006904:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006908:	46f2      	mov	sl, lr
 800690a:	2700      	movs	r7, #0
 800690c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006910:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006914:	fa1f f883 	uxth.w	r8, r3
 8006918:	fa17 f78b 	uxtah	r7, r7, fp
 800691c:	0c1b      	lsrs	r3, r3, #16
 800691e:	eba7 0808 	sub.w	r8, r7, r8
 8006922:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006926:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800692a:	fa1f f888 	uxth.w	r8, r8
 800692e:	141f      	asrs	r7, r3, #16
 8006930:	454d      	cmp	r5, r9
 8006932:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006936:	f84a 3b04 	str.w	r3, [sl], #4
 800693a:	d8e7      	bhi.n	800690c <__mdiff+0x7c>
 800693c:	1b2b      	subs	r3, r5, r4
 800693e:	3b15      	subs	r3, #21
 8006940:	f023 0303 	bic.w	r3, r3, #3
 8006944:	3304      	adds	r3, #4
 8006946:	3415      	adds	r4, #21
 8006948:	42a5      	cmp	r5, r4
 800694a:	bf38      	it	cc
 800694c:	2304      	movcc	r3, #4
 800694e:	4419      	add	r1, r3
 8006950:	4473      	add	r3, lr
 8006952:	469e      	mov	lr, r3
 8006954:	460d      	mov	r5, r1
 8006956:	4565      	cmp	r5, ip
 8006958:	d30e      	bcc.n	8006978 <__mdiff+0xe8>
 800695a:	f10c 0203 	add.w	r2, ip, #3
 800695e:	1a52      	subs	r2, r2, r1
 8006960:	f022 0203 	bic.w	r2, r2, #3
 8006964:	3903      	subs	r1, #3
 8006966:	458c      	cmp	ip, r1
 8006968:	bf38      	it	cc
 800696a:	2200      	movcc	r2, #0
 800696c:	441a      	add	r2, r3
 800696e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006972:	b17b      	cbz	r3, 8006994 <__mdiff+0x104>
 8006974:	6106      	str	r6, [r0, #16]
 8006976:	e7a5      	b.n	80068c4 <__mdiff+0x34>
 8006978:	f855 8b04 	ldr.w	r8, [r5], #4
 800697c:	fa17 f488 	uxtah	r4, r7, r8
 8006980:	1422      	asrs	r2, r4, #16
 8006982:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006986:	b2a4      	uxth	r4, r4
 8006988:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800698c:	f84e 4b04 	str.w	r4, [lr], #4
 8006990:	1417      	asrs	r7, r2, #16
 8006992:	e7e0      	b.n	8006956 <__mdiff+0xc6>
 8006994:	3e01      	subs	r6, #1
 8006996:	e7ea      	b.n	800696e <__mdiff+0xde>
 8006998:	08007cd7 	.word	0x08007cd7
 800699c:	08007ce8 	.word	0x08007ce8

080069a0 <__d2b>:
 80069a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069a4:	4689      	mov	r9, r1
 80069a6:	2101      	movs	r1, #1
 80069a8:	ec57 6b10 	vmov	r6, r7, d0
 80069ac:	4690      	mov	r8, r2
 80069ae:	f7ff fcd5 	bl	800635c <_Balloc>
 80069b2:	4604      	mov	r4, r0
 80069b4:	b930      	cbnz	r0, 80069c4 <__d2b+0x24>
 80069b6:	4602      	mov	r2, r0
 80069b8:	4b25      	ldr	r3, [pc, #148]	; (8006a50 <__d2b+0xb0>)
 80069ba:	4826      	ldr	r0, [pc, #152]	; (8006a54 <__d2b+0xb4>)
 80069bc:	f240 310a 	movw	r1, #778	; 0x30a
 80069c0:	f000 fa70 	bl	8006ea4 <__assert_func>
 80069c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80069c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069cc:	bb35      	cbnz	r5, 8006a1c <__d2b+0x7c>
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	9301      	str	r3, [sp, #4]
 80069d2:	d028      	beq.n	8006a26 <__d2b+0x86>
 80069d4:	4668      	mov	r0, sp
 80069d6:	9600      	str	r6, [sp, #0]
 80069d8:	f7ff fd8c 	bl	80064f4 <__lo0bits>
 80069dc:	9900      	ldr	r1, [sp, #0]
 80069de:	b300      	cbz	r0, 8006a22 <__d2b+0x82>
 80069e0:	9a01      	ldr	r2, [sp, #4]
 80069e2:	f1c0 0320 	rsb	r3, r0, #32
 80069e6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ea:	430b      	orrs	r3, r1
 80069ec:	40c2      	lsrs	r2, r0
 80069ee:	6163      	str	r3, [r4, #20]
 80069f0:	9201      	str	r2, [sp, #4]
 80069f2:	9b01      	ldr	r3, [sp, #4]
 80069f4:	61a3      	str	r3, [r4, #24]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bf14      	ite	ne
 80069fa:	2202      	movne	r2, #2
 80069fc:	2201      	moveq	r2, #1
 80069fe:	6122      	str	r2, [r4, #16]
 8006a00:	b1d5      	cbz	r5, 8006a38 <__d2b+0x98>
 8006a02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a06:	4405      	add	r5, r0
 8006a08:	f8c9 5000 	str.w	r5, [r9]
 8006a0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a10:	f8c8 0000 	str.w	r0, [r8]
 8006a14:	4620      	mov	r0, r4
 8006a16:	b003      	add	sp, #12
 8006a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a20:	e7d5      	b.n	80069ce <__d2b+0x2e>
 8006a22:	6161      	str	r1, [r4, #20]
 8006a24:	e7e5      	b.n	80069f2 <__d2b+0x52>
 8006a26:	a801      	add	r0, sp, #4
 8006a28:	f7ff fd64 	bl	80064f4 <__lo0bits>
 8006a2c:	9b01      	ldr	r3, [sp, #4]
 8006a2e:	6163      	str	r3, [r4, #20]
 8006a30:	2201      	movs	r2, #1
 8006a32:	6122      	str	r2, [r4, #16]
 8006a34:	3020      	adds	r0, #32
 8006a36:	e7e3      	b.n	8006a00 <__d2b+0x60>
 8006a38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a40:	f8c9 0000 	str.w	r0, [r9]
 8006a44:	6918      	ldr	r0, [r3, #16]
 8006a46:	f7ff fd35 	bl	80064b4 <__hi0bits>
 8006a4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a4e:	e7df      	b.n	8006a10 <__d2b+0x70>
 8006a50:	08007cd7 	.word	0x08007cd7
 8006a54:	08007ce8 	.word	0x08007ce8

08006a58 <_calloc_r>:
 8006a58:	b513      	push	{r0, r1, r4, lr}
 8006a5a:	434a      	muls	r2, r1
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	9201      	str	r2, [sp, #4]
 8006a60:	f000 f85a 	bl	8006b18 <_malloc_r>
 8006a64:	4604      	mov	r4, r0
 8006a66:	b118      	cbz	r0, 8006a70 <_calloc_r+0x18>
 8006a68:	9a01      	ldr	r2, [sp, #4]
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	f7fe f950 	bl	8004d10 <memset>
 8006a70:	4620      	mov	r0, r4
 8006a72:	b002      	add	sp, #8
 8006a74:	bd10      	pop	{r4, pc}
	...

08006a78 <_free_r>:
 8006a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a7a:	2900      	cmp	r1, #0
 8006a7c:	d048      	beq.n	8006b10 <_free_r+0x98>
 8006a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a82:	9001      	str	r0, [sp, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f1a1 0404 	sub.w	r4, r1, #4
 8006a8a:	bfb8      	it	lt
 8006a8c:	18e4      	addlt	r4, r4, r3
 8006a8e:	f000 fa65 	bl	8006f5c <__malloc_lock>
 8006a92:	4a20      	ldr	r2, [pc, #128]	; (8006b14 <_free_r+0x9c>)
 8006a94:	9801      	ldr	r0, [sp, #4]
 8006a96:	6813      	ldr	r3, [r2, #0]
 8006a98:	4615      	mov	r5, r2
 8006a9a:	b933      	cbnz	r3, 8006aaa <_free_r+0x32>
 8006a9c:	6063      	str	r3, [r4, #4]
 8006a9e:	6014      	str	r4, [r2, #0]
 8006aa0:	b003      	add	sp, #12
 8006aa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006aa6:	f000 ba5f 	b.w	8006f68 <__malloc_unlock>
 8006aaa:	42a3      	cmp	r3, r4
 8006aac:	d90b      	bls.n	8006ac6 <_free_r+0x4e>
 8006aae:	6821      	ldr	r1, [r4, #0]
 8006ab0:	1862      	adds	r2, r4, r1
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	bf04      	itt	eq
 8006ab6:	681a      	ldreq	r2, [r3, #0]
 8006ab8:	685b      	ldreq	r3, [r3, #4]
 8006aba:	6063      	str	r3, [r4, #4]
 8006abc:	bf04      	itt	eq
 8006abe:	1852      	addeq	r2, r2, r1
 8006ac0:	6022      	streq	r2, [r4, #0]
 8006ac2:	602c      	str	r4, [r5, #0]
 8006ac4:	e7ec      	b.n	8006aa0 <_free_r+0x28>
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	b10b      	cbz	r3, 8006ad0 <_free_r+0x58>
 8006acc:	42a3      	cmp	r3, r4
 8006ace:	d9fa      	bls.n	8006ac6 <_free_r+0x4e>
 8006ad0:	6811      	ldr	r1, [r2, #0]
 8006ad2:	1855      	adds	r5, r2, r1
 8006ad4:	42a5      	cmp	r5, r4
 8006ad6:	d10b      	bne.n	8006af0 <_free_r+0x78>
 8006ad8:	6824      	ldr	r4, [r4, #0]
 8006ada:	4421      	add	r1, r4
 8006adc:	1854      	adds	r4, r2, r1
 8006ade:	42a3      	cmp	r3, r4
 8006ae0:	6011      	str	r1, [r2, #0]
 8006ae2:	d1dd      	bne.n	8006aa0 <_free_r+0x28>
 8006ae4:	681c      	ldr	r4, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	6053      	str	r3, [r2, #4]
 8006aea:	4421      	add	r1, r4
 8006aec:	6011      	str	r1, [r2, #0]
 8006aee:	e7d7      	b.n	8006aa0 <_free_r+0x28>
 8006af0:	d902      	bls.n	8006af8 <_free_r+0x80>
 8006af2:	230c      	movs	r3, #12
 8006af4:	6003      	str	r3, [r0, #0]
 8006af6:	e7d3      	b.n	8006aa0 <_free_r+0x28>
 8006af8:	6825      	ldr	r5, [r4, #0]
 8006afa:	1961      	adds	r1, r4, r5
 8006afc:	428b      	cmp	r3, r1
 8006afe:	bf04      	itt	eq
 8006b00:	6819      	ldreq	r1, [r3, #0]
 8006b02:	685b      	ldreq	r3, [r3, #4]
 8006b04:	6063      	str	r3, [r4, #4]
 8006b06:	bf04      	itt	eq
 8006b08:	1949      	addeq	r1, r1, r5
 8006b0a:	6021      	streq	r1, [r4, #0]
 8006b0c:	6054      	str	r4, [r2, #4]
 8006b0e:	e7c7      	b.n	8006aa0 <_free_r+0x28>
 8006b10:	b003      	add	sp, #12
 8006b12:	bd30      	pop	{r4, r5, pc}
 8006b14:	20000614 	.word	0x20000614

08006b18 <_malloc_r>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	1ccd      	adds	r5, r1, #3
 8006b1c:	f025 0503 	bic.w	r5, r5, #3
 8006b20:	3508      	adds	r5, #8
 8006b22:	2d0c      	cmp	r5, #12
 8006b24:	bf38      	it	cc
 8006b26:	250c      	movcc	r5, #12
 8006b28:	2d00      	cmp	r5, #0
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	db01      	blt.n	8006b32 <_malloc_r+0x1a>
 8006b2e:	42a9      	cmp	r1, r5
 8006b30:	d903      	bls.n	8006b3a <_malloc_r+0x22>
 8006b32:	230c      	movs	r3, #12
 8006b34:	6033      	str	r3, [r6, #0]
 8006b36:	2000      	movs	r0, #0
 8006b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b3a:	f000 fa0f 	bl	8006f5c <__malloc_lock>
 8006b3e:	4921      	ldr	r1, [pc, #132]	; (8006bc4 <_malloc_r+0xac>)
 8006b40:	680a      	ldr	r2, [r1, #0]
 8006b42:	4614      	mov	r4, r2
 8006b44:	b99c      	cbnz	r4, 8006b6e <_malloc_r+0x56>
 8006b46:	4f20      	ldr	r7, [pc, #128]	; (8006bc8 <_malloc_r+0xb0>)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	b923      	cbnz	r3, 8006b56 <_malloc_r+0x3e>
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f000 f998 	bl	8006e84 <_sbrk_r>
 8006b54:	6038      	str	r0, [r7, #0]
 8006b56:	4629      	mov	r1, r5
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f000 f993 	bl	8006e84 <_sbrk_r>
 8006b5e:	1c43      	adds	r3, r0, #1
 8006b60:	d123      	bne.n	8006baa <_malloc_r+0x92>
 8006b62:	230c      	movs	r3, #12
 8006b64:	6033      	str	r3, [r6, #0]
 8006b66:	4630      	mov	r0, r6
 8006b68:	f000 f9fe 	bl	8006f68 <__malloc_unlock>
 8006b6c:	e7e3      	b.n	8006b36 <_malloc_r+0x1e>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	1b5b      	subs	r3, r3, r5
 8006b72:	d417      	bmi.n	8006ba4 <_malloc_r+0x8c>
 8006b74:	2b0b      	cmp	r3, #11
 8006b76:	d903      	bls.n	8006b80 <_malloc_r+0x68>
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	441c      	add	r4, r3
 8006b7c:	6025      	str	r5, [r4, #0]
 8006b7e:	e004      	b.n	8006b8a <_malloc_r+0x72>
 8006b80:	6863      	ldr	r3, [r4, #4]
 8006b82:	42a2      	cmp	r2, r4
 8006b84:	bf0c      	ite	eq
 8006b86:	600b      	streq	r3, [r1, #0]
 8006b88:	6053      	strne	r3, [r2, #4]
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f000 f9ec 	bl	8006f68 <__malloc_unlock>
 8006b90:	f104 000b 	add.w	r0, r4, #11
 8006b94:	1d23      	adds	r3, r4, #4
 8006b96:	f020 0007 	bic.w	r0, r0, #7
 8006b9a:	1ac2      	subs	r2, r0, r3
 8006b9c:	d0cc      	beq.n	8006b38 <_malloc_r+0x20>
 8006b9e:	1a1b      	subs	r3, r3, r0
 8006ba0:	50a3      	str	r3, [r4, r2]
 8006ba2:	e7c9      	b.n	8006b38 <_malloc_r+0x20>
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	6864      	ldr	r4, [r4, #4]
 8006ba8:	e7cc      	b.n	8006b44 <_malloc_r+0x2c>
 8006baa:	1cc4      	adds	r4, r0, #3
 8006bac:	f024 0403 	bic.w	r4, r4, #3
 8006bb0:	42a0      	cmp	r0, r4
 8006bb2:	d0e3      	beq.n	8006b7c <_malloc_r+0x64>
 8006bb4:	1a21      	subs	r1, r4, r0
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f000 f964 	bl	8006e84 <_sbrk_r>
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d1dd      	bne.n	8006b7c <_malloc_r+0x64>
 8006bc0:	e7cf      	b.n	8006b62 <_malloc_r+0x4a>
 8006bc2:	bf00      	nop
 8006bc4:	20000614 	.word	0x20000614
 8006bc8:	20000618 	.word	0x20000618

08006bcc <__ssputs_r>:
 8006bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd0:	688e      	ldr	r6, [r1, #8]
 8006bd2:	429e      	cmp	r6, r3
 8006bd4:	4682      	mov	sl, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	4690      	mov	r8, r2
 8006bda:	461f      	mov	r7, r3
 8006bdc:	d838      	bhi.n	8006c50 <__ssputs_r+0x84>
 8006bde:	898a      	ldrh	r2, [r1, #12]
 8006be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006be4:	d032      	beq.n	8006c4c <__ssputs_r+0x80>
 8006be6:	6825      	ldr	r5, [r4, #0]
 8006be8:	6909      	ldr	r1, [r1, #16]
 8006bea:	eba5 0901 	sub.w	r9, r5, r1
 8006bee:	6965      	ldr	r5, [r4, #20]
 8006bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	444b      	add	r3, r9
 8006bfc:	106d      	asrs	r5, r5, #1
 8006bfe:	429d      	cmp	r5, r3
 8006c00:	bf38      	it	cc
 8006c02:	461d      	movcc	r5, r3
 8006c04:	0553      	lsls	r3, r2, #21
 8006c06:	d531      	bpl.n	8006c6c <__ssputs_r+0xa0>
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7ff ff85 	bl	8006b18 <_malloc_r>
 8006c0e:	4606      	mov	r6, r0
 8006c10:	b950      	cbnz	r0, 8006c28 <__ssputs_r+0x5c>
 8006c12:	230c      	movs	r3, #12
 8006c14:	f8ca 3000 	str.w	r3, [sl]
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c1e:	81a3      	strh	r3, [r4, #12]
 8006c20:	f04f 30ff 	mov.w	r0, #4294967295
 8006c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c28:	6921      	ldr	r1, [r4, #16]
 8006c2a:	464a      	mov	r2, r9
 8006c2c:	f7ff fb88 	bl	8006340 <memcpy>
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c3a:	81a3      	strh	r3, [r4, #12]
 8006c3c:	6126      	str	r6, [r4, #16]
 8006c3e:	6165      	str	r5, [r4, #20]
 8006c40:	444e      	add	r6, r9
 8006c42:	eba5 0509 	sub.w	r5, r5, r9
 8006c46:	6026      	str	r6, [r4, #0]
 8006c48:	60a5      	str	r5, [r4, #8]
 8006c4a:	463e      	mov	r6, r7
 8006c4c:	42be      	cmp	r6, r7
 8006c4e:	d900      	bls.n	8006c52 <__ssputs_r+0x86>
 8006c50:	463e      	mov	r6, r7
 8006c52:	4632      	mov	r2, r6
 8006c54:	6820      	ldr	r0, [r4, #0]
 8006c56:	4641      	mov	r1, r8
 8006c58:	f000 f966 	bl	8006f28 <memmove>
 8006c5c:	68a3      	ldr	r3, [r4, #8]
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	1b9b      	subs	r3, r3, r6
 8006c62:	4432      	add	r2, r6
 8006c64:	60a3      	str	r3, [r4, #8]
 8006c66:	6022      	str	r2, [r4, #0]
 8006c68:	2000      	movs	r0, #0
 8006c6a:	e7db      	b.n	8006c24 <__ssputs_r+0x58>
 8006c6c:	462a      	mov	r2, r5
 8006c6e:	f000 f981 	bl	8006f74 <_realloc_r>
 8006c72:	4606      	mov	r6, r0
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d1e1      	bne.n	8006c3c <__ssputs_r+0x70>
 8006c78:	6921      	ldr	r1, [r4, #16]
 8006c7a:	4650      	mov	r0, sl
 8006c7c:	f7ff fefc 	bl	8006a78 <_free_r>
 8006c80:	e7c7      	b.n	8006c12 <__ssputs_r+0x46>
	...

08006c84 <_svfiprintf_r>:
 8006c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c88:	4698      	mov	r8, r3
 8006c8a:	898b      	ldrh	r3, [r1, #12]
 8006c8c:	061b      	lsls	r3, r3, #24
 8006c8e:	b09d      	sub	sp, #116	; 0x74
 8006c90:	4607      	mov	r7, r0
 8006c92:	460d      	mov	r5, r1
 8006c94:	4614      	mov	r4, r2
 8006c96:	d50e      	bpl.n	8006cb6 <_svfiprintf_r+0x32>
 8006c98:	690b      	ldr	r3, [r1, #16]
 8006c9a:	b963      	cbnz	r3, 8006cb6 <_svfiprintf_r+0x32>
 8006c9c:	2140      	movs	r1, #64	; 0x40
 8006c9e:	f7ff ff3b 	bl	8006b18 <_malloc_r>
 8006ca2:	6028      	str	r0, [r5, #0]
 8006ca4:	6128      	str	r0, [r5, #16]
 8006ca6:	b920      	cbnz	r0, 8006cb2 <_svfiprintf_r+0x2e>
 8006ca8:	230c      	movs	r3, #12
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb0:	e0d1      	b.n	8006e56 <_svfiprintf_r+0x1d2>
 8006cb2:	2340      	movs	r3, #64	; 0x40
 8006cb4:	616b      	str	r3, [r5, #20]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cba:	2320      	movs	r3, #32
 8006cbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cc4:	2330      	movs	r3, #48	; 0x30
 8006cc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e70 <_svfiprintf_r+0x1ec>
 8006cca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cce:	f04f 0901 	mov.w	r9, #1
 8006cd2:	4623      	mov	r3, r4
 8006cd4:	469a      	mov	sl, r3
 8006cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cda:	b10a      	cbz	r2, 8006ce0 <_svfiprintf_r+0x5c>
 8006cdc:	2a25      	cmp	r2, #37	; 0x25
 8006cde:	d1f9      	bne.n	8006cd4 <_svfiprintf_r+0x50>
 8006ce0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ce4:	d00b      	beq.n	8006cfe <_svfiprintf_r+0x7a>
 8006ce6:	465b      	mov	r3, fp
 8006ce8:	4622      	mov	r2, r4
 8006cea:	4629      	mov	r1, r5
 8006cec:	4638      	mov	r0, r7
 8006cee:	f7ff ff6d 	bl	8006bcc <__ssputs_r>
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	f000 80aa 	beq.w	8006e4c <_svfiprintf_r+0x1c8>
 8006cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cfa:	445a      	add	r2, fp
 8006cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 80a2 	beq.w	8006e4c <_svfiprintf_r+0x1c8>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d12:	f10a 0a01 	add.w	sl, sl, #1
 8006d16:	9304      	str	r3, [sp, #16]
 8006d18:	9307      	str	r3, [sp, #28]
 8006d1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d1e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d20:	4654      	mov	r4, sl
 8006d22:	2205      	movs	r2, #5
 8006d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d28:	4851      	ldr	r0, [pc, #324]	; (8006e70 <_svfiprintf_r+0x1ec>)
 8006d2a:	f7f9 fa79 	bl	8000220 <memchr>
 8006d2e:	9a04      	ldr	r2, [sp, #16]
 8006d30:	b9d8      	cbnz	r0, 8006d6a <_svfiprintf_r+0xe6>
 8006d32:	06d0      	lsls	r0, r2, #27
 8006d34:	bf44      	itt	mi
 8006d36:	2320      	movmi	r3, #32
 8006d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d3c:	0711      	lsls	r1, r2, #28
 8006d3e:	bf44      	itt	mi
 8006d40:	232b      	movmi	r3, #43	; 0x2b
 8006d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d46:	f89a 3000 	ldrb.w	r3, [sl]
 8006d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d4c:	d015      	beq.n	8006d7a <_svfiprintf_r+0xf6>
 8006d4e:	9a07      	ldr	r2, [sp, #28]
 8006d50:	4654      	mov	r4, sl
 8006d52:	2000      	movs	r0, #0
 8006d54:	f04f 0c0a 	mov.w	ip, #10
 8006d58:	4621      	mov	r1, r4
 8006d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d5e:	3b30      	subs	r3, #48	; 0x30
 8006d60:	2b09      	cmp	r3, #9
 8006d62:	d94e      	bls.n	8006e02 <_svfiprintf_r+0x17e>
 8006d64:	b1b0      	cbz	r0, 8006d94 <_svfiprintf_r+0x110>
 8006d66:	9207      	str	r2, [sp, #28]
 8006d68:	e014      	b.n	8006d94 <_svfiprintf_r+0x110>
 8006d6a:	eba0 0308 	sub.w	r3, r0, r8
 8006d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d72:	4313      	orrs	r3, r2
 8006d74:	9304      	str	r3, [sp, #16]
 8006d76:	46a2      	mov	sl, r4
 8006d78:	e7d2      	b.n	8006d20 <_svfiprintf_r+0x9c>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	1d19      	adds	r1, r3, #4
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	9103      	str	r1, [sp, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	bfbb      	ittet	lt
 8006d86:	425b      	neglt	r3, r3
 8006d88:	f042 0202 	orrlt.w	r2, r2, #2
 8006d8c:	9307      	strge	r3, [sp, #28]
 8006d8e:	9307      	strlt	r3, [sp, #28]
 8006d90:	bfb8      	it	lt
 8006d92:	9204      	strlt	r2, [sp, #16]
 8006d94:	7823      	ldrb	r3, [r4, #0]
 8006d96:	2b2e      	cmp	r3, #46	; 0x2e
 8006d98:	d10c      	bne.n	8006db4 <_svfiprintf_r+0x130>
 8006d9a:	7863      	ldrb	r3, [r4, #1]
 8006d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d9e:	d135      	bne.n	8006e0c <_svfiprintf_r+0x188>
 8006da0:	9b03      	ldr	r3, [sp, #12]
 8006da2:	1d1a      	adds	r2, r3, #4
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	9203      	str	r2, [sp, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bfb8      	it	lt
 8006dac:	f04f 33ff 	movlt.w	r3, #4294967295
 8006db0:	3402      	adds	r4, #2
 8006db2:	9305      	str	r3, [sp, #20]
 8006db4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e80 <_svfiprintf_r+0x1fc>
 8006db8:	7821      	ldrb	r1, [r4, #0]
 8006dba:	2203      	movs	r2, #3
 8006dbc:	4650      	mov	r0, sl
 8006dbe:	f7f9 fa2f 	bl	8000220 <memchr>
 8006dc2:	b140      	cbz	r0, 8006dd6 <_svfiprintf_r+0x152>
 8006dc4:	2340      	movs	r3, #64	; 0x40
 8006dc6:	eba0 000a 	sub.w	r0, r0, sl
 8006dca:	fa03 f000 	lsl.w	r0, r3, r0
 8006dce:	9b04      	ldr	r3, [sp, #16]
 8006dd0:	4303      	orrs	r3, r0
 8006dd2:	3401      	adds	r4, #1
 8006dd4:	9304      	str	r3, [sp, #16]
 8006dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dda:	4826      	ldr	r0, [pc, #152]	; (8006e74 <_svfiprintf_r+0x1f0>)
 8006ddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006de0:	2206      	movs	r2, #6
 8006de2:	f7f9 fa1d 	bl	8000220 <memchr>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d038      	beq.n	8006e5c <_svfiprintf_r+0x1d8>
 8006dea:	4b23      	ldr	r3, [pc, #140]	; (8006e78 <_svfiprintf_r+0x1f4>)
 8006dec:	bb1b      	cbnz	r3, 8006e36 <_svfiprintf_r+0x1b2>
 8006dee:	9b03      	ldr	r3, [sp, #12]
 8006df0:	3307      	adds	r3, #7
 8006df2:	f023 0307 	bic.w	r3, r3, #7
 8006df6:	3308      	adds	r3, #8
 8006df8:	9303      	str	r3, [sp, #12]
 8006dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfc:	4433      	add	r3, r6
 8006dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006e00:	e767      	b.n	8006cd2 <_svfiprintf_r+0x4e>
 8006e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e06:	460c      	mov	r4, r1
 8006e08:	2001      	movs	r0, #1
 8006e0a:	e7a5      	b.n	8006d58 <_svfiprintf_r+0xd4>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	3401      	adds	r4, #1
 8006e10:	9305      	str	r3, [sp, #20]
 8006e12:	4619      	mov	r1, r3
 8006e14:	f04f 0c0a 	mov.w	ip, #10
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e1e:	3a30      	subs	r2, #48	; 0x30
 8006e20:	2a09      	cmp	r2, #9
 8006e22:	d903      	bls.n	8006e2c <_svfiprintf_r+0x1a8>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0c5      	beq.n	8006db4 <_svfiprintf_r+0x130>
 8006e28:	9105      	str	r1, [sp, #20]
 8006e2a:	e7c3      	b.n	8006db4 <_svfiprintf_r+0x130>
 8006e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e30:	4604      	mov	r4, r0
 8006e32:	2301      	movs	r3, #1
 8006e34:	e7f0      	b.n	8006e18 <_svfiprintf_r+0x194>
 8006e36:	ab03      	add	r3, sp, #12
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	462a      	mov	r2, r5
 8006e3c:	4b0f      	ldr	r3, [pc, #60]	; (8006e7c <_svfiprintf_r+0x1f8>)
 8006e3e:	a904      	add	r1, sp, #16
 8006e40:	4638      	mov	r0, r7
 8006e42:	f7fe f80d 	bl	8004e60 <_printf_float>
 8006e46:	1c42      	adds	r2, r0, #1
 8006e48:	4606      	mov	r6, r0
 8006e4a:	d1d6      	bne.n	8006dfa <_svfiprintf_r+0x176>
 8006e4c:	89ab      	ldrh	r3, [r5, #12]
 8006e4e:	065b      	lsls	r3, r3, #25
 8006e50:	f53f af2c 	bmi.w	8006cac <_svfiprintf_r+0x28>
 8006e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e56:	b01d      	add	sp, #116	; 0x74
 8006e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5c:	ab03      	add	r3, sp, #12
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	462a      	mov	r2, r5
 8006e62:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <_svfiprintf_r+0x1f8>)
 8006e64:	a904      	add	r1, sp, #16
 8006e66:	4638      	mov	r0, r7
 8006e68:	f7fe fa9e 	bl	80053a8 <_printf_i>
 8006e6c:	e7eb      	b.n	8006e46 <_svfiprintf_r+0x1c2>
 8006e6e:	bf00      	nop
 8006e70:	08007e44 	.word	0x08007e44
 8006e74:	08007e4e 	.word	0x08007e4e
 8006e78:	08004e61 	.word	0x08004e61
 8006e7c:	08006bcd 	.word	0x08006bcd
 8006e80:	08007e4a 	.word	0x08007e4a

08006e84 <_sbrk_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4d06      	ldr	r5, [pc, #24]	; (8006ea0 <_sbrk_r+0x1c>)
 8006e88:	2300      	movs	r3, #0
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	4608      	mov	r0, r1
 8006e8e:	602b      	str	r3, [r5, #0]
 8006e90:	f7fb f88c 	bl	8001fac <_sbrk>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d102      	bne.n	8006e9e <_sbrk_r+0x1a>
 8006e98:	682b      	ldr	r3, [r5, #0]
 8006e9a:	b103      	cbz	r3, 8006e9e <_sbrk_r+0x1a>
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ea0:	2000070c 	.word	0x2000070c

08006ea4 <__assert_func>:
 8006ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ea6:	4614      	mov	r4, r2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <__assert_func+0x2c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4605      	mov	r5, r0
 8006eb0:	68d8      	ldr	r0, [r3, #12]
 8006eb2:	b14c      	cbz	r4, 8006ec8 <__assert_func+0x24>
 8006eb4:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <__assert_func+0x30>)
 8006eb6:	9100      	str	r1, [sp, #0]
 8006eb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ebc:	4906      	ldr	r1, [pc, #24]	; (8006ed8 <__assert_func+0x34>)
 8006ebe:	462b      	mov	r3, r5
 8006ec0:	f000 f80e 	bl	8006ee0 <fiprintf>
 8006ec4:	f000 faa4 	bl	8007410 <abort>
 8006ec8:	4b04      	ldr	r3, [pc, #16]	; (8006edc <__assert_func+0x38>)
 8006eca:	461c      	mov	r4, r3
 8006ecc:	e7f3      	b.n	8006eb6 <__assert_func+0x12>
 8006ece:	bf00      	nop
 8006ed0:	2000000c 	.word	0x2000000c
 8006ed4:	08007e55 	.word	0x08007e55
 8006ed8:	08007e62 	.word	0x08007e62
 8006edc:	08007e90 	.word	0x08007e90

08006ee0 <fiprintf>:
 8006ee0:	b40e      	push	{r1, r2, r3}
 8006ee2:	b503      	push	{r0, r1, lr}
 8006ee4:	4601      	mov	r1, r0
 8006ee6:	ab03      	add	r3, sp, #12
 8006ee8:	4805      	ldr	r0, [pc, #20]	; (8006f00 <fiprintf+0x20>)
 8006eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eee:	6800      	ldr	r0, [r0, #0]
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	f000 f88f 	bl	8007014 <_vfiprintf_r>
 8006ef6:	b002      	add	sp, #8
 8006ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006efc:	b003      	add	sp, #12
 8006efe:	4770      	bx	lr
 8006f00:	2000000c 	.word	0x2000000c

08006f04 <__ascii_mbtowc>:
 8006f04:	b082      	sub	sp, #8
 8006f06:	b901      	cbnz	r1, 8006f0a <__ascii_mbtowc+0x6>
 8006f08:	a901      	add	r1, sp, #4
 8006f0a:	b142      	cbz	r2, 8006f1e <__ascii_mbtowc+0x1a>
 8006f0c:	b14b      	cbz	r3, 8006f22 <__ascii_mbtowc+0x1e>
 8006f0e:	7813      	ldrb	r3, [r2, #0]
 8006f10:	600b      	str	r3, [r1, #0]
 8006f12:	7812      	ldrb	r2, [r2, #0]
 8006f14:	1e10      	subs	r0, r2, #0
 8006f16:	bf18      	it	ne
 8006f18:	2001      	movne	r0, #1
 8006f1a:	b002      	add	sp, #8
 8006f1c:	4770      	bx	lr
 8006f1e:	4610      	mov	r0, r2
 8006f20:	e7fb      	b.n	8006f1a <__ascii_mbtowc+0x16>
 8006f22:	f06f 0001 	mvn.w	r0, #1
 8006f26:	e7f8      	b.n	8006f1a <__ascii_mbtowc+0x16>

08006f28 <memmove>:
 8006f28:	4288      	cmp	r0, r1
 8006f2a:	b510      	push	{r4, lr}
 8006f2c:	eb01 0402 	add.w	r4, r1, r2
 8006f30:	d902      	bls.n	8006f38 <memmove+0x10>
 8006f32:	4284      	cmp	r4, r0
 8006f34:	4623      	mov	r3, r4
 8006f36:	d807      	bhi.n	8006f48 <memmove+0x20>
 8006f38:	1e43      	subs	r3, r0, #1
 8006f3a:	42a1      	cmp	r1, r4
 8006f3c:	d008      	beq.n	8006f50 <memmove+0x28>
 8006f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f46:	e7f8      	b.n	8006f3a <memmove+0x12>
 8006f48:	4402      	add	r2, r0
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	428a      	cmp	r2, r1
 8006f4e:	d100      	bne.n	8006f52 <memmove+0x2a>
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f5a:	e7f7      	b.n	8006f4c <memmove+0x24>

08006f5c <__malloc_lock>:
 8006f5c:	4801      	ldr	r0, [pc, #4]	; (8006f64 <__malloc_lock+0x8>)
 8006f5e:	f000 bc17 	b.w	8007790 <__retarget_lock_acquire_recursive>
 8006f62:	bf00      	nop
 8006f64:	20000714 	.word	0x20000714

08006f68 <__malloc_unlock>:
 8006f68:	4801      	ldr	r0, [pc, #4]	; (8006f70 <__malloc_unlock+0x8>)
 8006f6a:	f000 bc12 	b.w	8007792 <__retarget_lock_release_recursive>
 8006f6e:	bf00      	nop
 8006f70:	20000714 	.word	0x20000714

08006f74 <_realloc_r>:
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f76:	4607      	mov	r7, r0
 8006f78:	4614      	mov	r4, r2
 8006f7a:	460e      	mov	r6, r1
 8006f7c:	b921      	cbnz	r1, 8006f88 <_realloc_r+0x14>
 8006f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f82:	4611      	mov	r1, r2
 8006f84:	f7ff bdc8 	b.w	8006b18 <_malloc_r>
 8006f88:	b922      	cbnz	r2, 8006f94 <_realloc_r+0x20>
 8006f8a:	f7ff fd75 	bl	8006a78 <_free_r>
 8006f8e:	4625      	mov	r5, r4
 8006f90:	4628      	mov	r0, r5
 8006f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f94:	f000 fc62 	bl	800785c <_malloc_usable_size_r>
 8006f98:	42a0      	cmp	r0, r4
 8006f9a:	d20f      	bcs.n	8006fbc <_realloc_r+0x48>
 8006f9c:	4621      	mov	r1, r4
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	f7ff fdba 	bl	8006b18 <_malloc_r>
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d0f2      	beq.n	8006f90 <_realloc_r+0x1c>
 8006faa:	4631      	mov	r1, r6
 8006fac:	4622      	mov	r2, r4
 8006fae:	f7ff f9c7 	bl	8006340 <memcpy>
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	f7ff fd5f 	bl	8006a78 <_free_r>
 8006fba:	e7e9      	b.n	8006f90 <_realloc_r+0x1c>
 8006fbc:	4635      	mov	r5, r6
 8006fbe:	e7e7      	b.n	8006f90 <_realloc_r+0x1c>

08006fc0 <__sfputc_r>:
 8006fc0:	6893      	ldr	r3, [r2, #8]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	b410      	push	{r4}
 8006fc8:	6093      	str	r3, [r2, #8]
 8006fca:	da08      	bge.n	8006fde <__sfputc_r+0x1e>
 8006fcc:	6994      	ldr	r4, [r2, #24]
 8006fce:	42a3      	cmp	r3, r4
 8006fd0:	db01      	blt.n	8006fd6 <__sfputc_r+0x16>
 8006fd2:	290a      	cmp	r1, #10
 8006fd4:	d103      	bne.n	8006fde <__sfputc_r+0x1e>
 8006fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fda:	f000 b94b 	b.w	8007274 <__swbuf_r>
 8006fde:	6813      	ldr	r3, [r2, #0]
 8006fe0:	1c58      	adds	r0, r3, #1
 8006fe2:	6010      	str	r0, [r2, #0]
 8006fe4:	7019      	strb	r1, [r3, #0]
 8006fe6:	4608      	mov	r0, r1
 8006fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <__sfputs_r>:
 8006fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff0:	4606      	mov	r6, r0
 8006ff2:	460f      	mov	r7, r1
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	18d5      	adds	r5, r2, r3
 8006ff8:	42ac      	cmp	r4, r5
 8006ffa:	d101      	bne.n	8007000 <__sfputs_r+0x12>
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e007      	b.n	8007010 <__sfputs_r+0x22>
 8007000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007004:	463a      	mov	r2, r7
 8007006:	4630      	mov	r0, r6
 8007008:	f7ff ffda 	bl	8006fc0 <__sfputc_r>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d1f3      	bne.n	8006ff8 <__sfputs_r+0xa>
 8007010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007014 <_vfiprintf_r>:
 8007014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007018:	460d      	mov	r5, r1
 800701a:	b09d      	sub	sp, #116	; 0x74
 800701c:	4614      	mov	r4, r2
 800701e:	4698      	mov	r8, r3
 8007020:	4606      	mov	r6, r0
 8007022:	b118      	cbz	r0, 800702c <_vfiprintf_r+0x18>
 8007024:	6983      	ldr	r3, [r0, #24]
 8007026:	b90b      	cbnz	r3, 800702c <_vfiprintf_r+0x18>
 8007028:	f000 fb14 	bl	8007654 <__sinit>
 800702c:	4b89      	ldr	r3, [pc, #548]	; (8007254 <_vfiprintf_r+0x240>)
 800702e:	429d      	cmp	r5, r3
 8007030:	d11b      	bne.n	800706a <_vfiprintf_r+0x56>
 8007032:	6875      	ldr	r5, [r6, #4]
 8007034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007036:	07d9      	lsls	r1, r3, #31
 8007038:	d405      	bmi.n	8007046 <_vfiprintf_r+0x32>
 800703a:	89ab      	ldrh	r3, [r5, #12]
 800703c:	059a      	lsls	r2, r3, #22
 800703e:	d402      	bmi.n	8007046 <_vfiprintf_r+0x32>
 8007040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007042:	f000 fba5 	bl	8007790 <__retarget_lock_acquire_recursive>
 8007046:	89ab      	ldrh	r3, [r5, #12]
 8007048:	071b      	lsls	r3, r3, #28
 800704a:	d501      	bpl.n	8007050 <_vfiprintf_r+0x3c>
 800704c:	692b      	ldr	r3, [r5, #16]
 800704e:	b9eb      	cbnz	r3, 800708c <_vfiprintf_r+0x78>
 8007050:	4629      	mov	r1, r5
 8007052:	4630      	mov	r0, r6
 8007054:	f000 f96e 	bl	8007334 <__swsetup_r>
 8007058:	b1c0      	cbz	r0, 800708c <_vfiprintf_r+0x78>
 800705a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800705c:	07dc      	lsls	r4, r3, #31
 800705e:	d50e      	bpl.n	800707e <_vfiprintf_r+0x6a>
 8007060:	f04f 30ff 	mov.w	r0, #4294967295
 8007064:	b01d      	add	sp, #116	; 0x74
 8007066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706a:	4b7b      	ldr	r3, [pc, #492]	; (8007258 <_vfiprintf_r+0x244>)
 800706c:	429d      	cmp	r5, r3
 800706e:	d101      	bne.n	8007074 <_vfiprintf_r+0x60>
 8007070:	68b5      	ldr	r5, [r6, #8]
 8007072:	e7df      	b.n	8007034 <_vfiprintf_r+0x20>
 8007074:	4b79      	ldr	r3, [pc, #484]	; (800725c <_vfiprintf_r+0x248>)
 8007076:	429d      	cmp	r5, r3
 8007078:	bf08      	it	eq
 800707a:	68f5      	ldreq	r5, [r6, #12]
 800707c:	e7da      	b.n	8007034 <_vfiprintf_r+0x20>
 800707e:	89ab      	ldrh	r3, [r5, #12]
 8007080:	0598      	lsls	r0, r3, #22
 8007082:	d4ed      	bmi.n	8007060 <_vfiprintf_r+0x4c>
 8007084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007086:	f000 fb84 	bl	8007792 <__retarget_lock_release_recursive>
 800708a:	e7e9      	b.n	8007060 <_vfiprintf_r+0x4c>
 800708c:	2300      	movs	r3, #0
 800708e:	9309      	str	r3, [sp, #36]	; 0x24
 8007090:	2320      	movs	r3, #32
 8007092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007096:	f8cd 800c 	str.w	r8, [sp, #12]
 800709a:	2330      	movs	r3, #48	; 0x30
 800709c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007260 <_vfiprintf_r+0x24c>
 80070a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070a4:	f04f 0901 	mov.w	r9, #1
 80070a8:	4623      	mov	r3, r4
 80070aa:	469a      	mov	sl, r3
 80070ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070b0:	b10a      	cbz	r2, 80070b6 <_vfiprintf_r+0xa2>
 80070b2:	2a25      	cmp	r2, #37	; 0x25
 80070b4:	d1f9      	bne.n	80070aa <_vfiprintf_r+0x96>
 80070b6:	ebba 0b04 	subs.w	fp, sl, r4
 80070ba:	d00b      	beq.n	80070d4 <_vfiprintf_r+0xc0>
 80070bc:	465b      	mov	r3, fp
 80070be:	4622      	mov	r2, r4
 80070c0:	4629      	mov	r1, r5
 80070c2:	4630      	mov	r0, r6
 80070c4:	f7ff ff93 	bl	8006fee <__sfputs_r>
 80070c8:	3001      	adds	r0, #1
 80070ca:	f000 80aa 	beq.w	8007222 <_vfiprintf_r+0x20e>
 80070ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d0:	445a      	add	r2, fp
 80070d2:	9209      	str	r2, [sp, #36]	; 0x24
 80070d4:	f89a 3000 	ldrb.w	r3, [sl]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 80a2 	beq.w	8007222 <_vfiprintf_r+0x20e>
 80070de:	2300      	movs	r3, #0
 80070e0:	f04f 32ff 	mov.w	r2, #4294967295
 80070e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070e8:	f10a 0a01 	add.w	sl, sl, #1
 80070ec:	9304      	str	r3, [sp, #16]
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070f4:	931a      	str	r3, [sp, #104]	; 0x68
 80070f6:	4654      	mov	r4, sl
 80070f8:	2205      	movs	r2, #5
 80070fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070fe:	4858      	ldr	r0, [pc, #352]	; (8007260 <_vfiprintf_r+0x24c>)
 8007100:	f7f9 f88e 	bl	8000220 <memchr>
 8007104:	9a04      	ldr	r2, [sp, #16]
 8007106:	b9d8      	cbnz	r0, 8007140 <_vfiprintf_r+0x12c>
 8007108:	06d1      	lsls	r1, r2, #27
 800710a:	bf44      	itt	mi
 800710c:	2320      	movmi	r3, #32
 800710e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007112:	0713      	lsls	r3, r2, #28
 8007114:	bf44      	itt	mi
 8007116:	232b      	movmi	r3, #43	; 0x2b
 8007118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800711c:	f89a 3000 	ldrb.w	r3, [sl]
 8007120:	2b2a      	cmp	r3, #42	; 0x2a
 8007122:	d015      	beq.n	8007150 <_vfiprintf_r+0x13c>
 8007124:	9a07      	ldr	r2, [sp, #28]
 8007126:	4654      	mov	r4, sl
 8007128:	2000      	movs	r0, #0
 800712a:	f04f 0c0a 	mov.w	ip, #10
 800712e:	4621      	mov	r1, r4
 8007130:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007134:	3b30      	subs	r3, #48	; 0x30
 8007136:	2b09      	cmp	r3, #9
 8007138:	d94e      	bls.n	80071d8 <_vfiprintf_r+0x1c4>
 800713a:	b1b0      	cbz	r0, 800716a <_vfiprintf_r+0x156>
 800713c:	9207      	str	r2, [sp, #28]
 800713e:	e014      	b.n	800716a <_vfiprintf_r+0x156>
 8007140:	eba0 0308 	sub.w	r3, r0, r8
 8007144:	fa09 f303 	lsl.w	r3, r9, r3
 8007148:	4313      	orrs	r3, r2
 800714a:	9304      	str	r3, [sp, #16]
 800714c:	46a2      	mov	sl, r4
 800714e:	e7d2      	b.n	80070f6 <_vfiprintf_r+0xe2>
 8007150:	9b03      	ldr	r3, [sp, #12]
 8007152:	1d19      	adds	r1, r3, #4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	9103      	str	r1, [sp, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	bfbb      	ittet	lt
 800715c:	425b      	neglt	r3, r3
 800715e:	f042 0202 	orrlt.w	r2, r2, #2
 8007162:	9307      	strge	r3, [sp, #28]
 8007164:	9307      	strlt	r3, [sp, #28]
 8007166:	bfb8      	it	lt
 8007168:	9204      	strlt	r2, [sp, #16]
 800716a:	7823      	ldrb	r3, [r4, #0]
 800716c:	2b2e      	cmp	r3, #46	; 0x2e
 800716e:	d10c      	bne.n	800718a <_vfiprintf_r+0x176>
 8007170:	7863      	ldrb	r3, [r4, #1]
 8007172:	2b2a      	cmp	r3, #42	; 0x2a
 8007174:	d135      	bne.n	80071e2 <_vfiprintf_r+0x1ce>
 8007176:	9b03      	ldr	r3, [sp, #12]
 8007178:	1d1a      	adds	r2, r3, #4
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	9203      	str	r2, [sp, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	bfb8      	it	lt
 8007182:	f04f 33ff 	movlt.w	r3, #4294967295
 8007186:	3402      	adds	r4, #2
 8007188:	9305      	str	r3, [sp, #20]
 800718a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007270 <_vfiprintf_r+0x25c>
 800718e:	7821      	ldrb	r1, [r4, #0]
 8007190:	2203      	movs	r2, #3
 8007192:	4650      	mov	r0, sl
 8007194:	f7f9 f844 	bl	8000220 <memchr>
 8007198:	b140      	cbz	r0, 80071ac <_vfiprintf_r+0x198>
 800719a:	2340      	movs	r3, #64	; 0x40
 800719c:	eba0 000a 	sub.w	r0, r0, sl
 80071a0:	fa03 f000 	lsl.w	r0, r3, r0
 80071a4:	9b04      	ldr	r3, [sp, #16]
 80071a6:	4303      	orrs	r3, r0
 80071a8:	3401      	adds	r4, #1
 80071aa:	9304      	str	r3, [sp, #16]
 80071ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b0:	482c      	ldr	r0, [pc, #176]	; (8007264 <_vfiprintf_r+0x250>)
 80071b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071b6:	2206      	movs	r2, #6
 80071b8:	f7f9 f832 	bl	8000220 <memchr>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d03f      	beq.n	8007240 <_vfiprintf_r+0x22c>
 80071c0:	4b29      	ldr	r3, [pc, #164]	; (8007268 <_vfiprintf_r+0x254>)
 80071c2:	bb1b      	cbnz	r3, 800720c <_vfiprintf_r+0x1f8>
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	3307      	adds	r3, #7
 80071c8:	f023 0307 	bic.w	r3, r3, #7
 80071cc:	3308      	adds	r3, #8
 80071ce:	9303      	str	r3, [sp, #12]
 80071d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d2:	443b      	add	r3, r7
 80071d4:	9309      	str	r3, [sp, #36]	; 0x24
 80071d6:	e767      	b.n	80070a8 <_vfiprintf_r+0x94>
 80071d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80071dc:	460c      	mov	r4, r1
 80071de:	2001      	movs	r0, #1
 80071e0:	e7a5      	b.n	800712e <_vfiprintf_r+0x11a>
 80071e2:	2300      	movs	r3, #0
 80071e4:	3401      	adds	r4, #1
 80071e6:	9305      	str	r3, [sp, #20]
 80071e8:	4619      	mov	r1, r3
 80071ea:	f04f 0c0a 	mov.w	ip, #10
 80071ee:	4620      	mov	r0, r4
 80071f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071f4:	3a30      	subs	r2, #48	; 0x30
 80071f6:	2a09      	cmp	r2, #9
 80071f8:	d903      	bls.n	8007202 <_vfiprintf_r+0x1ee>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0c5      	beq.n	800718a <_vfiprintf_r+0x176>
 80071fe:	9105      	str	r1, [sp, #20]
 8007200:	e7c3      	b.n	800718a <_vfiprintf_r+0x176>
 8007202:	fb0c 2101 	mla	r1, ip, r1, r2
 8007206:	4604      	mov	r4, r0
 8007208:	2301      	movs	r3, #1
 800720a:	e7f0      	b.n	80071ee <_vfiprintf_r+0x1da>
 800720c:	ab03      	add	r3, sp, #12
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	462a      	mov	r2, r5
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <_vfiprintf_r+0x258>)
 8007214:	a904      	add	r1, sp, #16
 8007216:	4630      	mov	r0, r6
 8007218:	f7fd fe22 	bl	8004e60 <_printf_float>
 800721c:	4607      	mov	r7, r0
 800721e:	1c78      	adds	r0, r7, #1
 8007220:	d1d6      	bne.n	80071d0 <_vfiprintf_r+0x1bc>
 8007222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007224:	07d9      	lsls	r1, r3, #31
 8007226:	d405      	bmi.n	8007234 <_vfiprintf_r+0x220>
 8007228:	89ab      	ldrh	r3, [r5, #12]
 800722a:	059a      	lsls	r2, r3, #22
 800722c:	d402      	bmi.n	8007234 <_vfiprintf_r+0x220>
 800722e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007230:	f000 faaf 	bl	8007792 <__retarget_lock_release_recursive>
 8007234:	89ab      	ldrh	r3, [r5, #12]
 8007236:	065b      	lsls	r3, r3, #25
 8007238:	f53f af12 	bmi.w	8007060 <_vfiprintf_r+0x4c>
 800723c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800723e:	e711      	b.n	8007064 <_vfiprintf_r+0x50>
 8007240:	ab03      	add	r3, sp, #12
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	462a      	mov	r2, r5
 8007246:	4b09      	ldr	r3, [pc, #36]	; (800726c <_vfiprintf_r+0x258>)
 8007248:	a904      	add	r1, sp, #16
 800724a:	4630      	mov	r0, r6
 800724c:	f7fe f8ac 	bl	80053a8 <_printf_i>
 8007250:	e7e4      	b.n	800721c <_vfiprintf_r+0x208>
 8007252:	bf00      	nop
 8007254:	08007fbc 	.word	0x08007fbc
 8007258:	08007fdc 	.word	0x08007fdc
 800725c:	08007f9c 	.word	0x08007f9c
 8007260:	08007e44 	.word	0x08007e44
 8007264:	08007e4e 	.word	0x08007e4e
 8007268:	08004e61 	.word	0x08004e61
 800726c:	08006fef 	.word	0x08006fef
 8007270:	08007e4a 	.word	0x08007e4a

08007274 <__swbuf_r>:
 8007274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007276:	460e      	mov	r6, r1
 8007278:	4614      	mov	r4, r2
 800727a:	4605      	mov	r5, r0
 800727c:	b118      	cbz	r0, 8007286 <__swbuf_r+0x12>
 800727e:	6983      	ldr	r3, [r0, #24]
 8007280:	b90b      	cbnz	r3, 8007286 <__swbuf_r+0x12>
 8007282:	f000 f9e7 	bl	8007654 <__sinit>
 8007286:	4b21      	ldr	r3, [pc, #132]	; (800730c <__swbuf_r+0x98>)
 8007288:	429c      	cmp	r4, r3
 800728a:	d12b      	bne.n	80072e4 <__swbuf_r+0x70>
 800728c:	686c      	ldr	r4, [r5, #4]
 800728e:	69a3      	ldr	r3, [r4, #24]
 8007290:	60a3      	str	r3, [r4, #8]
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	071a      	lsls	r2, r3, #28
 8007296:	d52f      	bpl.n	80072f8 <__swbuf_r+0x84>
 8007298:	6923      	ldr	r3, [r4, #16]
 800729a:	b36b      	cbz	r3, 80072f8 <__swbuf_r+0x84>
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	6820      	ldr	r0, [r4, #0]
 80072a0:	1ac0      	subs	r0, r0, r3
 80072a2:	6963      	ldr	r3, [r4, #20]
 80072a4:	b2f6      	uxtb	r6, r6
 80072a6:	4283      	cmp	r3, r0
 80072a8:	4637      	mov	r7, r6
 80072aa:	dc04      	bgt.n	80072b6 <__swbuf_r+0x42>
 80072ac:	4621      	mov	r1, r4
 80072ae:	4628      	mov	r0, r5
 80072b0:	f000 f93c 	bl	800752c <_fflush_r>
 80072b4:	bb30      	cbnz	r0, 8007304 <__swbuf_r+0x90>
 80072b6:	68a3      	ldr	r3, [r4, #8]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	60a3      	str	r3, [r4, #8]
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	6022      	str	r2, [r4, #0]
 80072c2:	701e      	strb	r6, [r3, #0]
 80072c4:	6963      	ldr	r3, [r4, #20]
 80072c6:	3001      	adds	r0, #1
 80072c8:	4283      	cmp	r3, r0
 80072ca:	d004      	beq.n	80072d6 <__swbuf_r+0x62>
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	07db      	lsls	r3, r3, #31
 80072d0:	d506      	bpl.n	80072e0 <__swbuf_r+0x6c>
 80072d2:	2e0a      	cmp	r6, #10
 80072d4:	d104      	bne.n	80072e0 <__swbuf_r+0x6c>
 80072d6:	4621      	mov	r1, r4
 80072d8:	4628      	mov	r0, r5
 80072da:	f000 f927 	bl	800752c <_fflush_r>
 80072de:	b988      	cbnz	r0, 8007304 <__swbuf_r+0x90>
 80072e0:	4638      	mov	r0, r7
 80072e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e4:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <__swbuf_r+0x9c>)
 80072e6:	429c      	cmp	r4, r3
 80072e8:	d101      	bne.n	80072ee <__swbuf_r+0x7a>
 80072ea:	68ac      	ldr	r4, [r5, #8]
 80072ec:	e7cf      	b.n	800728e <__swbuf_r+0x1a>
 80072ee:	4b09      	ldr	r3, [pc, #36]	; (8007314 <__swbuf_r+0xa0>)
 80072f0:	429c      	cmp	r4, r3
 80072f2:	bf08      	it	eq
 80072f4:	68ec      	ldreq	r4, [r5, #12]
 80072f6:	e7ca      	b.n	800728e <__swbuf_r+0x1a>
 80072f8:	4621      	mov	r1, r4
 80072fa:	4628      	mov	r0, r5
 80072fc:	f000 f81a 	bl	8007334 <__swsetup_r>
 8007300:	2800      	cmp	r0, #0
 8007302:	d0cb      	beq.n	800729c <__swbuf_r+0x28>
 8007304:	f04f 37ff 	mov.w	r7, #4294967295
 8007308:	e7ea      	b.n	80072e0 <__swbuf_r+0x6c>
 800730a:	bf00      	nop
 800730c:	08007fbc 	.word	0x08007fbc
 8007310:	08007fdc 	.word	0x08007fdc
 8007314:	08007f9c 	.word	0x08007f9c

08007318 <__ascii_wctomb>:
 8007318:	b149      	cbz	r1, 800732e <__ascii_wctomb+0x16>
 800731a:	2aff      	cmp	r2, #255	; 0xff
 800731c:	bf85      	ittet	hi
 800731e:	238a      	movhi	r3, #138	; 0x8a
 8007320:	6003      	strhi	r3, [r0, #0]
 8007322:	700a      	strbls	r2, [r1, #0]
 8007324:	f04f 30ff 	movhi.w	r0, #4294967295
 8007328:	bf98      	it	ls
 800732a:	2001      	movls	r0, #1
 800732c:	4770      	bx	lr
 800732e:	4608      	mov	r0, r1
 8007330:	4770      	bx	lr
	...

08007334 <__swsetup_r>:
 8007334:	4b32      	ldr	r3, [pc, #200]	; (8007400 <__swsetup_r+0xcc>)
 8007336:	b570      	push	{r4, r5, r6, lr}
 8007338:	681d      	ldr	r5, [r3, #0]
 800733a:	4606      	mov	r6, r0
 800733c:	460c      	mov	r4, r1
 800733e:	b125      	cbz	r5, 800734a <__swsetup_r+0x16>
 8007340:	69ab      	ldr	r3, [r5, #24]
 8007342:	b913      	cbnz	r3, 800734a <__swsetup_r+0x16>
 8007344:	4628      	mov	r0, r5
 8007346:	f000 f985 	bl	8007654 <__sinit>
 800734a:	4b2e      	ldr	r3, [pc, #184]	; (8007404 <__swsetup_r+0xd0>)
 800734c:	429c      	cmp	r4, r3
 800734e:	d10f      	bne.n	8007370 <__swsetup_r+0x3c>
 8007350:	686c      	ldr	r4, [r5, #4]
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007358:	0719      	lsls	r1, r3, #28
 800735a:	d42c      	bmi.n	80073b6 <__swsetup_r+0x82>
 800735c:	06dd      	lsls	r5, r3, #27
 800735e:	d411      	bmi.n	8007384 <__swsetup_r+0x50>
 8007360:	2309      	movs	r3, #9
 8007362:	6033      	str	r3, [r6, #0]
 8007364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007368:	81a3      	strh	r3, [r4, #12]
 800736a:	f04f 30ff 	mov.w	r0, #4294967295
 800736e:	e03e      	b.n	80073ee <__swsetup_r+0xba>
 8007370:	4b25      	ldr	r3, [pc, #148]	; (8007408 <__swsetup_r+0xd4>)
 8007372:	429c      	cmp	r4, r3
 8007374:	d101      	bne.n	800737a <__swsetup_r+0x46>
 8007376:	68ac      	ldr	r4, [r5, #8]
 8007378:	e7eb      	b.n	8007352 <__swsetup_r+0x1e>
 800737a:	4b24      	ldr	r3, [pc, #144]	; (800740c <__swsetup_r+0xd8>)
 800737c:	429c      	cmp	r4, r3
 800737e:	bf08      	it	eq
 8007380:	68ec      	ldreq	r4, [r5, #12]
 8007382:	e7e6      	b.n	8007352 <__swsetup_r+0x1e>
 8007384:	0758      	lsls	r0, r3, #29
 8007386:	d512      	bpl.n	80073ae <__swsetup_r+0x7a>
 8007388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800738a:	b141      	cbz	r1, 800739e <__swsetup_r+0x6a>
 800738c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007390:	4299      	cmp	r1, r3
 8007392:	d002      	beq.n	800739a <__swsetup_r+0x66>
 8007394:	4630      	mov	r0, r6
 8007396:	f7ff fb6f 	bl	8006a78 <_free_r>
 800739a:	2300      	movs	r3, #0
 800739c:	6363      	str	r3, [r4, #52]	; 0x34
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	2300      	movs	r3, #0
 80073a8:	6063      	str	r3, [r4, #4]
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	89a3      	ldrh	r3, [r4, #12]
 80073b0:	f043 0308 	orr.w	r3, r3, #8
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	6923      	ldr	r3, [r4, #16]
 80073b8:	b94b      	cbnz	r3, 80073ce <__swsetup_r+0x9a>
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c4:	d003      	beq.n	80073ce <__swsetup_r+0x9a>
 80073c6:	4621      	mov	r1, r4
 80073c8:	4630      	mov	r0, r6
 80073ca:	f000 fa07 	bl	80077dc <__smakebuf_r>
 80073ce:	89a0      	ldrh	r0, [r4, #12]
 80073d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073d4:	f010 0301 	ands.w	r3, r0, #1
 80073d8:	d00a      	beq.n	80073f0 <__swsetup_r+0xbc>
 80073da:	2300      	movs	r3, #0
 80073dc:	60a3      	str	r3, [r4, #8]
 80073de:	6963      	ldr	r3, [r4, #20]
 80073e0:	425b      	negs	r3, r3
 80073e2:	61a3      	str	r3, [r4, #24]
 80073e4:	6923      	ldr	r3, [r4, #16]
 80073e6:	b943      	cbnz	r3, 80073fa <__swsetup_r+0xc6>
 80073e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073ec:	d1ba      	bne.n	8007364 <__swsetup_r+0x30>
 80073ee:	bd70      	pop	{r4, r5, r6, pc}
 80073f0:	0781      	lsls	r1, r0, #30
 80073f2:	bf58      	it	pl
 80073f4:	6963      	ldrpl	r3, [r4, #20]
 80073f6:	60a3      	str	r3, [r4, #8]
 80073f8:	e7f4      	b.n	80073e4 <__swsetup_r+0xb0>
 80073fa:	2000      	movs	r0, #0
 80073fc:	e7f7      	b.n	80073ee <__swsetup_r+0xba>
 80073fe:	bf00      	nop
 8007400:	2000000c 	.word	0x2000000c
 8007404:	08007fbc 	.word	0x08007fbc
 8007408:	08007fdc 	.word	0x08007fdc
 800740c:	08007f9c 	.word	0x08007f9c

08007410 <abort>:
 8007410:	b508      	push	{r3, lr}
 8007412:	2006      	movs	r0, #6
 8007414:	f000 fa52 	bl	80078bc <raise>
 8007418:	2001      	movs	r0, #1
 800741a:	f7fa fd4f 	bl	8001ebc <_exit>
	...

08007420 <__sflush_r>:
 8007420:	898a      	ldrh	r2, [r1, #12]
 8007422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007426:	4605      	mov	r5, r0
 8007428:	0710      	lsls	r0, r2, #28
 800742a:	460c      	mov	r4, r1
 800742c:	d458      	bmi.n	80074e0 <__sflush_r+0xc0>
 800742e:	684b      	ldr	r3, [r1, #4]
 8007430:	2b00      	cmp	r3, #0
 8007432:	dc05      	bgt.n	8007440 <__sflush_r+0x20>
 8007434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	dc02      	bgt.n	8007440 <__sflush_r+0x20>
 800743a:	2000      	movs	r0, #0
 800743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007442:	2e00      	cmp	r6, #0
 8007444:	d0f9      	beq.n	800743a <__sflush_r+0x1a>
 8007446:	2300      	movs	r3, #0
 8007448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800744c:	682f      	ldr	r7, [r5, #0]
 800744e:	602b      	str	r3, [r5, #0]
 8007450:	d032      	beq.n	80074b8 <__sflush_r+0x98>
 8007452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007454:	89a3      	ldrh	r3, [r4, #12]
 8007456:	075a      	lsls	r2, r3, #29
 8007458:	d505      	bpl.n	8007466 <__sflush_r+0x46>
 800745a:	6863      	ldr	r3, [r4, #4]
 800745c:	1ac0      	subs	r0, r0, r3
 800745e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007460:	b10b      	cbz	r3, 8007466 <__sflush_r+0x46>
 8007462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007464:	1ac0      	subs	r0, r0, r3
 8007466:	2300      	movs	r3, #0
 8007468:	4602      	mov	r2, r0
 800746a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800746c:	6a21      	ldr	r1, [r4, #32]
 800746e:	4628      	mov	r0, r5
 8007470:	47b0      	blx	r6
 8007472:	1c43      	adds	r3, r0, #1
 8007474:	89a3      	ldrh	r3, [r4, #12]
 8007476:	d106      	bne.n	8007486 <__sflush_r+0x66>
 8007478:	6829      	ldr	r1, [r5, #0]
 800747a:	291d      	cmp	r1, #29
 800747c:	d82c      	bhi.n	80074d8 <__sflush_r+0xb8>
 800747e:	4a2a      	ldr	r2, [pc, #168]	; (8007528 <__sflush_r+0x108>)
 8007480:	40ca      	lsrs	r2, r1
 8007482:	07d6      	lsls	r6, r2, #31
 8007484:	d528      	bpl.n	80074d8 <__sflush_r+0xb8>
 8007486:	2200      	movs	r2, #0
 8007488:	6062      	str	r2, [r4, #4]
 800748a:	04d9      	lsls	r1, r3, #19
 800748c:	6922      	ldr	r2, [r4, #16]
 800748e:	6022      	str	r2, [r4, #0]
 8007490:	d504      	bpl.n	800749c <__sflush_r+0x7c>
 8007492:	1c42      	adds	r2, r0, #1
 8007494:	d101      	bne.n	800749a <__sflush_r+0x7a>
 8007496:	682b      	ldr	r3, [r5, #0]
 8007498:	b903      	cbnz	r3, 800749c <__sflush_r+0x7c>
 800749a:	6560      	str	r0, [r4, #84]	; 0x54
 800749c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800749e:	602f      	str	r7, [r5, #0]
 80074a0:	2900      	cmp	r1, #0
 80074a2:	d0ca      	beq.n	800743a <__sflush_r+0x1a>
 80074a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a8:	4299      	cmp	r1, r3
 80074aa:	d002      	beq.n	80074b2 <__sflush_r+0x92>
 80074ac:	4628      	mov	r0, r5
 80074ae:	f7ff fae3 	bl	8006a78 <_free_r>
 80074b2:	2000      	movs	r0, #0
 80074b4:	6360      	str	r0, [r4, #52]	; 0x34
 80074b6:	e7c1      	b.n	800743c <__sflush_r+0x1c>
 80074b8:	6a21      	ldr	r1, [r4, #32]
 80074ba:	2301      	movs	r3, #1
 80074bc:	4628      	mov	r0, r5
 80074be:	47b0      	blx	r6
 80074c0:	1c41      	adds	r1, r0, #1
 80074c2:	d1c7      	bne.n	8007454 <__sflush_r+0x34>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d0c4      	beq.n	8007454 <__sflush_r+0x34>
 80074ca:	2b1d      	cmp	r3, #29
 80074cc:	d001      	beq.n	80074d2 <__sflush_r+0xb2>
 80074ce:	2b16      	cmp	r3, #22
 80074d0:	d101      	bne.n	80074d6 <__sflush_r+0xb6>
 80074d2:	602f      	str	r7, [r5, #0]
 80074d4:	e7b1      	b.n	800743a <__sflush_r+0x1a>
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074dc:	81a3      	strh	r3, [r4, #12]
 80074de:	e7ad      	b.n	800743c <__sflush_r+0x1c>
 80074e0:	690f      	ldr	r7, [r1, #16]
 80074e2:	2f00      	cmp	r7, #0
 80074e4:	d0a9      	beq.n	800743a <__sflush_r+0x1a>
 80074e6:	0793      	lsls	r3, r2, #30
 80074e8:	680e      	ldr	r6, [r1, #0]
 80074ea:	bf08      	it	eq
 80074ec:	694b      	ldreq	r3, [r1, #20]
 80074ee:	600f      	str	r7, [r1, #0]
 80074f0:	bf18      	it	ne
 80074f2:	2300      	movne	r3, #0
 80074f4:	eba6 0807 	sub.w	r8, r6, r7
 80074f8:	608b      	str	r3, [r1, #8]
 80074fa:	f1b8 0f00 	cmp.w	r8, #0
 80074fe:	dd9c      	ble.n	800743a <__sflush_r+0x1a>
 8007500:	6a21      	ldr	r1, [r4, #32]
 8007502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007504:	4643      	mov	r3, r8
 8007506:	463a      	mov	r2, r7
 8007508:	4628      	mov	r0, r5
 800750a:	47b0      	blx	r6
 800750c:	2800      	cmp	r0, #0
 800750e:	dc06      	bgt.n	800751e <__sflush_r+0xfe>
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007516:	81a3      	strh	r3, [r4, #12]
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	e78e      	b.n	800743c <__sflush_r+0x1c>
 800751e:	4407      	add	r7, r0
 8007520:	eba8 0800 	sub.w	r8, r8, r0
 8007524:	e7e9      	b.n	80074fa <__sflush_r+0xda>
 8007526:	bf00      	nop
 8007528:	20400001 	.word	0x20400001

0800752c <_fflush_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	690b      	ldr	r3, [r1, #16]
 8007530:	4605      	mov	r5, r0
 8007532:	460c      	mov	r4, r1
 8007534:	b913      	cbnz	r3, 800753c <_fflush_r+0x10>
 8007536:	2500      	movs	r5, #0
 8007538:	4628      	mov	r0, r5
 800753a:	bd38      	pop	{r3, r4, r5, pc}
 800753c:	b118      	cbz	r0, 8007546 <_fflush_r+0x1a>
 800753e:	6983      	ldr	r3, [r0, #24]
 8007540:	b90b      	cbnz	r3, 8007546 <_fflush_r+0x1a>
 8007542:	f000 f887 	bl	8007654 <__sinit>
 8007546:	4b14      	ldr	r3, [pc, #80]	; (8007598 <_fflush_r+0x6c>)
 8007548:	429c      	cmp	r4, r3
 800754a:	d11b      	bne.n	8007584 <_fflush_r+0x58>
 800754c:	686c      	ldr	r4, [r5, #4]
 800754e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d0ef      	beq.n	8007536 <_fflush_r+0xa>
 8007556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007558:	07d0      	lsls	r0, r2, #31
 800755a:	d404      	bmi.n	8007566 <_fflush_r+0x3a>
 800755c:	0599      	lsls	r1, r3, #22
 800755e:	d402      	bmi.n	8007566 <_fflush_r+0x3a>
 8007560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007562:	f000 f915 	bl	8007790 <__retarget_lock_acquire_recursive>
 8007566:	4628      	mov	r0, r5
 8007568:	4621      	mov	r1, r4
 800756a:	f7ff ff59 	bl	8007420 <__sflush_r>
 800756e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007570:	07da      	lsls	r2, r3, #31
 8007572:	4605      	mov	r5, r0
 8007574:	d4e0      	bmi.n	8007538 <_fflush_r+0xc>
 8007576:	89a3      	ldrh	r3, [r4, #12]
 8007578:	059b      	lsls	r3, r3, #22
 800757a:	d4dd      	bmi.n	8007538 <_fflush_r+0xc>
 800757c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800757e:	f000 f908 	bl	8007792 <__retarget_lock_release_recursive>
 8007582:	e7d9      	b.n	8007538 <_fflush_r+0xc>
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <_fflush_r+0x70>)
 8007586:	429c      	cmp	r4, r3
 8007588:	d101      	bne.n	800758e <_fflush_r+0x62>
 800758a:	68ac      	ldr	r4, [r5, #8]
 800758c:	e7df      	b.n	800754e <_fflush_r+0x22>
 800758e:	4b04      	ldr	r3, [pc, #16]	; (80075a0 <_fflush_r+0x74>)
 8007590:	429c      	cmp	r4, r3
 8007592:	bf08      	it	eq
 8007594:	68ec      	ldreq	r4, [r5, #12]
 8007596:	e7da      	b.n	800754e <_fflush_r+0x22>
 8007598:	08007fbc 	.word	0x08007fbc
 800759c:	08007fdc 	.word	0x08007fdc
 80075a0:	08007f9c 	.word	0x08007f9c

080075a4 <std>:
 80075a4:	2300      	movs	r3, #0
 80075a6:	b510      	push	{r4, lr}
 80075a8:	4604      	mov	r4, r0
 80075aa:	e9c0 3300 	strd	r3, r3, [r0]
 80075ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075b2:	6083      	str	r3, [r0, #8]
 80075b4:	8181      	strh	r1, [r0, #12]
 80075b6:	6643      	str	r3, [r0, #100]	; 0x64
 80075b8:	81c2      	strh	r2, [r0, #14]
 80075ba:	6183      	str	r3, [r0, #24]
 80075bc:	4619      	mov	r1, r3
 80075be:	2208      	movs	r2, #8
 80075c0:	305c      	adds	r0, #92	; 0x5c
 80075c2:	f7fd fba5 	bl	8004d10 <memset>
 80075c6:	4b05      	ldr	r3, [pc, #20]	; (80075dc <std+0x38>)
 80075c8:	6263      	str	r3, [r4, #36]	; 0x24
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <std+0x3c>)
 80075cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80075ce:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <std+0x40>)
 80075d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075d2:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <std+0x44>)
 80075d4:	6224      	str	r4, [r4, #32]
 80075d6:	6323      	str	r3, [r4, #48]	; 0x30
 80075d8:	bd10      	pop	{r4, pc}
 80075da:	bf00      	nop
 80075dc:	080078f5 	.word	0x080078f5
 80075e0:	08007917 	.word	0x08007917
 80075e4:	0800794f 	.word	0x0800794f
 80075e8:	08007973 	.word	0x08007973

080075ec <_cleanup_r>:
 80075ec:	4901      	ldr	r1, [pc, #4]	; (80075f4 <_cleanup_r+0x8>)
 80075ee:	f000 b8af 	b.w	8007750 <_fwalk_reent>
 80075f2:	bf00      	nop
 80075f4:	0800752d 	.word	0x0800752d

080075f8 <__sfmoreglue>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	1e4a      	subs	r2, r1, #1
 80075fc:	2568      	movs	r5, #104	; 0x68
 80075fe:	4355      	muls	r5, r2
 8007600:	460e      	mov	r6, r1
 8007602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007606:	f7ff fa87 	bl	8006b18 <_malloc_r>
 800760a:	4604      	mov	r4, r0
 800760c:	b140      	cbz	r0, 8007620 <__sfmoreglue+0x28>
 800760e:	2100      	movs	r1, #0
 8007610:	e9c0 1600 	strd	r1, r6, [r0]
 8007614:	300c      	adds	r0, #12
 8007616:	60a0      	str	r0, [r4, #8]
 8007618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800761c:	f7fd fb78 	bl	8004d10 <memset>
 8007620:	4620      	mov	r0, r4
 8007622:	bd70      	pop	{r4, r5, r6, pc}

08007624 <__sfp_lock_acquire>:
 8007624:	4801      	ldr	r0, [pc, #4]	; (800762c <__sfp_lock_acquire+0x8>)
 8007626:	f000 b8b3 	b.w	8007790 <__retarget_lock_acquire_recursive>
 800762a:	bf00      	nop
 800762c:	20000718 	.word	0x20000718

08007630 <__sfp_lock_release>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__sfp_lock_release+0x8>)
 8007632:	f000 b8ae 	b.w	8007792 <__retarget_lock_release_recursive>
 8007636:	bf00      	nop
 8007638:	20000718 	.word	0x20000718

0800763c <__sinit_lock_acquire>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__sinit_lock_acquire+0x8>)
 800763e:	f000 b8a7 	b.w	8007790 <__retarget_lock_acquire_recursive>
 8007642:	bf00      	nop
 8007644:	20000713 	.word	0x20000713

08007648 <__sinit_lock_release>:
 8007648:	4801      	ldr	r0, [pc, #4]	; (8007650 <__sinit_lock_release+0x8>)
 800764a:	f000 b8a2 	b.w	8007792 <__retarget_lock_release_recursive>
 800764e:	bf00      	nop
 8007650:	20000713 	.word	0x20000713

08007654 <__sinit>:
 8007654:	b510      	push	{r4, lr}
 8007656:	4604      	mov	r4, r0
 8007658:	f7ff fff0 	bl	800763c <__sinit_lock_acquire>
 800765c:	69a3      	ldr	r3, [r4, #24]
 800765e:	b11b      	cbz	r3, 8007668 <__sinit+0x14>
 8007660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007664:	f7ff bff0 	b.w	8007648 <__sinit_lock_release>
 8007668:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800766c:	6523      	str	r3, [r4, #80]	; 0x50
 800766e:	4b13      	ldr	r3, [pc, #76]	; (80076bc <__sinit+0x68>)
 8007670:	4a13      	ldr	r2, [pc, #76]	; (80076c0 <__sinit+0x6c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	62a2      	str	r2, [r4, #40]	; 0x28
 8007676:	42a3      	cmp	r3, r4
 8007678:	bf04      	itt	eq
 800767a:	2301      	moveq	r3, #1
 800767c:	61a3      	streq	r3, [r4, #24]
 800767e:	4620      	mov	r0, r4
 8007680:	f000 f820 	bl	80076c4 <__sfp>
 8007684:	6060      	str	r0, [r4, #4]
 8007686:	4620      	mov	r0, r4
 8007688:	f000 f81c 	bl	80076c4 <__sfp>
 800768c:	60a0      	str	r0, [r4, #8]
 800768e:	4620      	mov	r0, r4
 8007690:	f000 f818 	bl	80076c4 <__sfp>
 8007694:	2200      	movs	r2, #0
 8007696:	60e0      	str	r0, [r4, #12]
 8007698:	2104      	movs	r1, #4
 800769a:	6860      	ldr	r0, [r4, #4]
 800769c:	f7ff ff82 	bl	80075a4 <std>
 80076a0:	68a0      	ldr	r0, [r4, #8]
 80076a2:	2201      	movs	r2, #1
 80076a4:	2109      	movs	r1, #9
 80076a6:	f7ff ff7d 	bl	80075a4 <std>
 80076aa:	68e0      	ldr	r0, [r4, #12]
 80076ac:	2202      	movs	r2, #2
 80076ae:	2112      	movs	r1, #18
 80076b0:	f7ff ff78 	bl	80075a4 <std>
 80076b4:	2301      	movs	r3, #1
 80076b6:	61a3      	str	r3, [r4, #24]
 80076b8:	e7d2      	b.n	8007660 <__sinit+0xc>
 80076ba:	bf00      	nop
 80076bc:	08007c1c 	.word	0x08007c1c
 80076c0:	080075ed 	.word	0x080075ed

080076c4 <__sfp>:
 80076c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c6:	4607      	mov	r7, r0
 80076c8:	f7ff ffac 	bl	8007624 <__sfp_lock_acquire>
 80076cc:	4b1e      	ldr	r3, [pc, #120]	; (8007748 <__sfp+0x84>)
 80076ce:	681e      	ldr	r6, [r3, #0]
 80076d0:	69b3      	ldr	r3, [r6, #24]
 80076d2:	b913      	cbnz	r3, 80076da <__sfp+0x16>
 80076d4:	4630      	mov	r0, r6
 80076d6:	f7ff ffbd 	bl	8007654 <__sinit>
 80076da:	3648      	adds	r6, #72	; 0x48
 80076dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	d503      	bpl.n	80076ec <__sfp+0x28>
 80076e4:	6833      	ldr	r3, [r6, #0]
 80076e6:	b30b      	cbz	r3, 800772c <__sfp+0x68>
 80076e8:	6836      	ldr	r6, [r6, #0]
 80076ea:	e7f7      	b.n	80076dc <__sfp+0x18>
 80076ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076f0:	b9d5      	cbnz	r5, 8007728 <__sfp+0x64>
 80076f2:	4b16      	ldr	r3, [pc, #88]	; (800774c <__sfp+0x88>)
 80076f4:	60e3      	str	r3, [r4, #12]
 80076f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076fa:	6665      	str	r5, [r4, #100]	; 0x64
 80076fc:	f000 f847 	bl	800778e <__retarget_lock_init_recursive>
 8007700:	f7ff ff96 	bl	8007630 <__sfp_lock_release>
 8007704:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007708:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800770c:	6025      	str	r5, [r4, #0]
 800770e:	61a5      	str	r5, [r4, #24]
 8007710:	2208      	movs	r2, #8
 8007712:	4629      	mov	r1, r5
 8007714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007718:	f7fd fafa 	bl	8004d10 <memset>
 800771c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007724:	4620      	mov	r0, r4
 8007726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007728:	3468      	adds	r4, #104	; 0x68
 800772a:	e7d9      	b.n	80076e0 <__sfp+0x1c>
 800772c:	2104      	movs	r1, #4
 800772e:	4638      	mov	r0, r7
 8007730:	f7ff ff62 	bl	80075f8 <__sfmoreglue>
 8007734:	4604      	mov	r4, r0
 8007736:	6030      	str	r0, [r6, #0]
 8007738:	2800      	cmp	r0, #0
 800773a:	d1d5      	bne.n	80076e8 <__sfp+0x24>
 800773c:	f7ff ff78 	bl	8007630 <__sfp_lock_release>
 8007740:	230c      	movs	r3, #12
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	e7ee      	b.n	8007724 <__sfp+0x60>
 8007746:	bf00      	nop
 8007748:	08007c1c 	.word	0x08007c1c
 800774c:	ffff0001 	.word	0xffff0001

08007750 <_fwalk_reent>:
 8007750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007754:	4606      	mov	r6, r0
 8007756:	4688      	mov	r8, r1
 8007758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800775c:	2700      	movs	r7, #0
 800775e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007762:	f1b9 0901 	subs.w	r9, r9, #1
 8007766:	d505      	bpl.n	8007774 <_fwalk_reent+0x24>
 8007768:	6824      	ldr	r4, [r4, #0]
 800776a:	2c00      	cmp	r4, #0
 800776c:	d1f7      	bne.n	800775e <_fwalk_reent+0xe>
 800776e:	4638      	mov	r0, r7
 8007770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007774:	89ab      	ldrh	r3, [r5, #12]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d907      	bls.n	800778a <_fwalk_reent+0x3a>
 800777a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800777e:	3301      	adds	r3, #1
 8007780:	d003      	beq.n	800778a <_fwalk_reent+0x3a>
 8007782:	4629      	mov	r1, r5
 8007784:	4630      	mov	r0, r6
 8007786:	47c0      	blx	r8
 8007788:	4307      	orrs	r7, r0
 800778a:	3568      	adds	r5, #104	; 0x68
 800778c:	e7e9      	b.n	8007762 <_fwalk_reent+0x12>

0800778e <__retarget_lock_init_recursive>:
 800778e:	4770      	bx	lr

08007790 <__retarget_lock_acquire_recursive>:
 8007790:	4770      	bx	lr

08007792 <__retarget_lock_release_recursive>:
 8007792:	4770      	bx	lr

08007794 <__swhatbuf_r>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	460e      	mov	r6, r1
 8007798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800779c:	2900      	cmp	r1, #0
 800779e:	b096      	sub	sp, #88	; 0x58
 80077a0:	4614      	mov	r4, r2
 80077a2:	461d      	mov	r5, r3
 80077a4:	da07      	bge.n	80077b6 <__swhatbuf_r+0x22>
 80077a6:	2300      	movs	r3, #0
 80077a8:	602b      	str	r3, [r5, #0]
 80077aa:	89b3      	ldrh	r3, [r6, #12]
 80077ac:	061a      	lsls	r2, r3, #24
 80077ae:	d410      	bmi.n	80077d2 <__swhatbuf_r+0x3e>
 80077b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077b4:	e00e      	b.n	80077d4 <__swhatbuf_r+0x40>
 80077b6:	466a      	mov	r2, sp
 80077b8:	f000 f902 	bl	80079c0 <_fstat_r>
 80077bc:	2800      	cmp	r0, #0
 80077be:	dbf2      	blt.n	80077a6 <__swhatbuf_r+0x12>
 80077c0:	9a01      	ldr	r2, [sp, #4]
 80077c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ca:	425a      	negs	r2, r3
 80077cc:	415a      	adcs	r2, r3
 80077ce:	602a      	str	r2, [r5, #0]
 80077d0:	e7ee      	b.n	80077b0 <__swhatbuf_r+0x1c>
 80077d2:	2340      	movs	r3, #64	; 0x40
 80077d4:	2000      	movs	r0, #0
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	b016      	add	sp, #88	; 0x58
 80077da:	bd70      	pop	{r4, r5, r6, pc}

080077dc <__smakebuf_r>:
 80077dc:	898b      	ldrh	r3, [r1, #12]
 80077de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077e0:	079d      	lsls	r5, r3, #30
 80077e2:	4606      	mov	r6, r0
 80077e4:	460c      	mov	r4, r1
 80077e6:	d507      	bpl.n	80077f8 <__smakebuf_r+0x1c>
 80077e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077ec:	6023      	str	r3, [r4, #0]
 80077ee:	6123      	str	r3, [r4, #16]
 80077f0:	2301      	movs	r3, #1
 80077f2:	6163      	str	r3, [r4, #20]
 80077f4:	b002      	add	sp, #8
 80077f6:	bd70      	pop	{r4, r5, r6, pc}
 80077f8:	ab01      	add	r3, sp, #4
 80077fa:	466a      	mov	r2, sp
 80077fc:	f7ff ffca 	bl	8007794 <__swhatbuf_r>
 8007800:	9900      	ldr	r1, [sp, #0]
 8007802:	4605      	mov	r5, r0
 8007804:	4630      	mov	r0, r6
 8007806:	f7ff f987 	bl	8006b18 <_malloc_r>
 800780a:	b948      	cbnz	r0, 8007820 <__smakebuf_r+0x44>
 800780c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007810:	059a      	lsls	r2, r3, #22
 8007812:	d4ef      	bmi.n	80077f4 <__smakebuf_r+0x18>
 8007814:	f023 0303 	bic.w	r3, r3, #3
 8007818:	f043 0302 	orr.w	r3, r3, #2
 800781c:	81a3      	strh	r3, [r4, #12]
 800781e:	e7e3      	b.n	80077e8 <__smakebuf_r+0xc>
 8007820:	4b0d      	ldr	r3, [pc, #52]	; (8007858 <__smakebuf_r+0x7c>)
 8007822:	62b3      	str	r3, [r6, #40]	; 0x28
 8007824:	89a3      	ldrh	r3, [r4, #12]
 8007826:	6020      	str	r0, [r4, #0]
 8007828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800782c:	81a3      	strh	r3, [r4, #12]
 800782e:	9b00      	ldr	r3, [sp, #0]
 8007830:	6163      	str	r3, [r4, #20]
 8007832:	9b01      	ldr	r3, [sp, #4]
 8007834:	6120      	str	r0, [r4, #16]
 8007836:	b15b      	cbz	r3, 8007850 <__smakebuf_r+0x74>
 8007838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800783c:	4630      	mov	r0, r6
 800783e:	f000 f8d1 	bl	80079e4 <_isatty_r>
 8007842:	b128      	cbz	r0, 8007850 <__smakebuf_r+0x74>
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	f023 0303 	bic.w	r3, r3, #3
 800784a:	f043 0301 	orr.w	r3, r3, #1
 800784e:	81a3      	strh	r3, [r4, #12]
 8007850:	89a0      	ldrh	r0, [r4, #12]
 8007852:	4305      	orrs	r5, r0
 8007854:	81a5      	strh	r5, [r4, #12]
 8007856:	e7cd      	b.n	80077f4 <__smakebuf_r+0x18>
 8007858:	080075ed 	.word	0x080075ed

0800785c <_malloc_usable_size_r>:
 800785c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007860:	1f18      	subs	r0, r3, #4
 8007862:	2b00      	cmp	r3, #0
 8007864:	bfbc      	itt	lt
 8007866:	580b      	ldrlt	r3, [r1, r0]
 8007868:	18c0      	addlt	r0, r0, r3
 800786a:	4770      	bx	lr

0800786c <_raise_r>:
 800786c:	291f      	cmp	r1, #31
 800786e:	b538      	push	{r3, r4, r5, lr}
 8007870:	4604      	mov	r4, r0
 8007872:	460d      	mov	r5, r1
 8007874:	d904      	bls.n	8007880 <_raise_r+0x14>
 8007876:	2316      	movs	r3, #22
 8007878:	6003      	str	r3, [r0, #0]
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007882:	b112      	cbz	r2, 800788a <_raise_r+0x1e>
 8007884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007888:	b94b      	cbnz	r3, 800789e <_raise_r+0x32>
 800788a:	4620      	mov	r0, r4
 800788c:	f000 f830 	bl	80078f0 <_getpid_r>
 8007890:	462a      	mov	r2, r5
 8007892:	4601      	mov	r1, r0
 8007894:	4620      	mov	r0, r4
 8007896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800789a:	f000 b817 	b.w	80078cc <_kill_r>
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d00a      	beq.n	80078b8 <_raise_r+0x4c>
 80078a2:	1c59      	adds	r1, r3, #1
 80078a4:	d103      	bne.n	80078ae <_raise_r+0x42>
 80078a6:	2316      	movs	r3, #22
 80078a8:	6003      	str	r3, [r0, #0]
 80078aa:	2001      	movs	r0, #1
 80078ac:	e7e7      	b.n	800787e <_raise_r+0x12>
 80078ae:	2400      	movs	r4, #0
 80078b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078b4:	4628      	mov	r0, r5
 80078b6:	4798      	blx	r3
 80078b8:	2000      	movs	r0, #0
 80078ba:	e7e0      	b.n	800787e <_raise_r+0x12>

080078bc <raise>:
 80078bc:	4b02      	ldr	r3, [pc, #8]	; (80078c8 <raise+0xc>)
 80078be:	4601      	mov	r1, r0
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	f7ff bfd3 	b.w	800786c <_raise_r>
 80078c6:	bf00      	nop
 80078c8:	2000000c 	.word	0x2000000c

080078cc <_kill_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4d07      	ldr	r5, [pc, #28]	; (80078ec <_kill_r+0x20>)
 80078d0:	2300      	movs	r3, #0
 80078d2:	4604      	mov	r4, r0
 80078d4:	4608      	mov	r0, r1
 80078d6:	4611      	mov	r1, r2
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	f7fa fadf 	bl	8001e9c <_kill>
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	d102      	bne.n	80078e8 <_kill_r+0x1c>
 80078e2:	682b      	ldr	r3, [r5, #0]
 80078e4:	b103      	cbz	r3, 80078e8 <_kill_r+0x1c>
 80078e6:	6023      	str	r3, [r4, #0]
 80078e8:	bd38      	pop	{r3, r4, r5, pc}
 80078ea:	bf00      	nop
 80078ec:	2000070c 	.word	0x2000070c

080078f0 <_getpid_r>:
 80078f0:	f7fa bacc 	b.w	8001e8c <_getpid>

080078f4 <__sread>:
 80078f4:	b510      	push	{r4, lr}
 80078f6:	460c      	mov	r4, r1
 80078f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fc:	f000 f894 	bl	8007a28 <_read_r>
 8007900:	2800      	cmp	r0, #0
 8007902:	bfab      	itete	ge
 8007904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007906:	89a3      	ldrhlt	r3, [r4, #12]
 8007908:	181b      	addge	r3, r3, r0
 800790a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800790e:	bfac      	ite	ge
 8007910:	6563      	strge	r3, [r4, #84]	; 0x54
 8007912:	81a3      	strhlt	r3, [r4, #12]
 8007914:	bd10      	pop	{r4, pc}

08007916 <__swrite>:
 8007916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791a:	461f      	mov	r7, r3
 800791c:	898b      	ldrh	r3, [r1, #12]
 800791e:	05db      	lsls	r3, r3, #23
 8007920:	4605      	mov	r5, r0
 8007922:	460c      	mov	r4, r1
 8007924:	4616      	mov	r6, r2
 8007926:	d505      	bpl.n	8007934 <__swrite+0x1e>
 8007928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792c:	2302      	movs	r3, #2
 800792e:	2200      	movs	r2, #0
 8007930:	f000 f868 	bl	8007a04 <_lseek_r>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800793a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800793e:	81a3      	strh	r3, [r4, #12]
 8007940:	4632      	mov	r2, r6
 8007942:	463b      	mov	r3, r7
 8007944:	4628      	mov	r0, r5
 8007946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800794a:	f000 b817 	b.w	800797c <_write_r>

0800794e <__sseek>:
 800794e:	b510      	push	{r4, lr}
 8007950:	460c      	mov	r4, r1
 8007952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007956:	f000 f855 	bl	8007a04 <_lseek_r>
 800795a:	1c43      	adds	r3, r0, #1
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	bf15      	itete	ne
 8007960:	6560      	strne	r0, [r4, #84]	; 0x54
 8007962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800796a:	81a3      	strheq	r3, [r4, #12]
 800796c:	bf18      	it	ne
 800796e:	81a3      	strhne	r3, [r4, #12]
 8007970:	bd10      	pop	{r4, pc}

08007972 <__sclose>:
 8007972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007976:	f000 b813 	b.w	80079a0 <_close_r>
	...

0800797c <_write_r>:
 800797c:	b538      	push	{r3, r4, r5, lr}
 800797e:	4d07      	ldr	r5, [pc, #28]	; (800799c <_write_r+0x20>)
 8007980:	4604      	mov	r4, r0
 8007982:	4608      	mov	r0, r1
 8007984:	4611      	mov	r1, r2
 8007986:	2200      	movs	r2, #0
 8007988:	602a      	str	r2, [r5, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	f7fa fabd 	bl	8001f0a <_write>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_write_r+0x1e>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b103      	cbz	r3, 800799a <_write_r+0x1e>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	2000070c 	.word	0x2000070c

080079a0 <_close_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d06      	ldr	r5, [pc, #24]	; (80079bc <_close_r+0x1c>)
 80079a4:	2300      	movs	r3, #0
 80079a6:	4604      	mov	r4, r0
 80079a8:	4608      	mov	r0, r1
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	f7fa fac9 	bl	8001f42 <_close>
 80079b0:	1c43      	adds	r3, r0, #1
 80079b2:	d102      	bne.n	80079ba <_close_r+0x1a>
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	b103      	cbz	r3, 80079ba <_close_r+0x1a>
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	bd38      	pop	{r3, r4, r5, pc}
 80079bc:	2000070c 	.word	0x2000070c

080079c0 <_fstat_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d07      	ldr	r5, [pc, #28]	; (80079e0 <_fstat_r+0x20>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	4611      	mov	r1, r2
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	f7fa fac4 	bl	8001f5a <_fstat>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	d102      	bne.n	80079dc <_fstat_r+0x1c>
 80079d6:	682b      	ldr	r3, [r5, #0]
 80079d8:	b103      	cbz	r3, 80079dc <_fstat_r+0x1c>
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	bd38      	pop	{r3, r4, r5, pc}
 80079de:	bf00      	nop
 80079e0:	2000070c 	.word	0x2000070c

080079e4 <_isatty_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4d06      	ldr	r5, [pc, #24]	; (8007a00 <_isatty_r+0x1c>)
 80079e8:	2300      	movs	r3, #0
 80079ea:	4604      	mov	r4, r0
 80079ec:	4608      	mov	r0, r1
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	f7fa fac3 	bl	8001f7a <_isatty>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_isatty_r+0x1a>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_isatty_r+0x1a>
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	2000070c 	.word	0x2000070c

08007a04 <_lseek_r>:
 8007a04:	b538      	push	{r3, r4, r5, lr}
 8007a06:	4d07      	ldr	r5, [pc, #28]	; (8007a24 <_lseek_r+0x20>)
 8007a08:	4604      	mov	r4, r0
 8007a0a:	4608      	mov	r0, r1
 8007a0c:	4611      	mov	r1, r2
 8007a0e:	2200      	movs	r2, #0
 8007a10:	602a      	str	r2, [r5, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	f7fa fabc 	bl	8001f90 <_lseek>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_lseek_r+0x1e>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_lseek_r+0x1e>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	2000070c 	.word	0x2000070c

08007a28 <_read_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d07      	ldr	r5, [pc, #28]	; (8007a48 <_read_r+0x20>)
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	4608      	mov	r0, r1
 8007a30:	4611      	mov	r1, r2
 8007a32:	2200      	movs	r2, #0
 8007a34:	602a      	str	r2, [r5, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	f7fa fa4a 	bl	8001ed0 <_read>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d102      	bne.n	8007a46 <_read_r+0x1e>
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	b103      	cbz	r3, 8007a46 <_read_r+0x1e>
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
 8007a48:	2000070c 	.word	0x2000070c

08007a4c <_init>:
 8007a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4e:	bf00      	nop
 8007a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a52:	bc08      	pop	{r3}
 8007a54:	469e      	mov	lr, r3
 8007a56:	4770      	bx	lr

08007a58 <_fini>:
 8007a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5a:	bf00      	nop
 8007a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5e:	bc08      	pop	{r3}
 8007a60:	469e      	mov	lr, r3
 8007a62:	4770      	bx	lr
