
RTC_BCKP_Registers_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08007db8  08007db8  00017db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb8  08007fb8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc0  08007fc0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc0  08007fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004e38  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000a04  20004eac  20004eac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025b6a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000418c  00000000  00000000  00045c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d10  00000000  00000000  00049da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001bb0  00000000  00000000  0004bab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000474b  00000000  00000000  0004d660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000212aa  00000000  00000000  00051dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb929  00000000  00000000  00073055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016e97e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f44  00000000  00000000  0016e9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007da0 	.word	0x08007da0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007da0 	.word	0x08007da0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f001 fa0a 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f8b4 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 fc2a 	bl	8000d4c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004f8:	f000 f912 	bl	8000720 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004fc:	f000 f962 	bl	80007c4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000500:	f000 f9a0 	bl	8000844 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000504:	f000 f9de 	bl	80008c4 <MX_I2C3_Init>
  MX_SPI2_Init();
 8000508:	f000 faa8 	bl	8000a5c <MX_SPI2_Init>
  MX_SPI4_Init();
 800050c:	f000 fadc 	bl	8000ac8 <MX_SPI4_Init>
  MX_SPI5_Init();
 8000510:	f000 fb10 	bl	8000b34 <MX_SPI5_Init>
  MX_TIM2_Init();
 8000514:	f000 fb44 	bl	8000ba0 <MX_TIM2_Init>
  MX_UART8_Init();
 8000518:	f000 fb9a 	bl	8000c50 <MX_UART8_Init>
  MX_USART3_UART_Init();
 800051c:	f000 fbc2 	bl	8000ca4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000520:	f000 fbea 	bl	8000cf8 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000524:	f000 fa0e 	bl	8000944 <MX_RTC_Init>
  //MX_IWDG_Init();
  /* USER CODE BEGIN 2 */

  // Check if Data stored in BackUp register1: No Need to write it and then turn LED1
  // Read the Back Up Register 1 Data
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0xBEBE)
 8000528:	2101      	movs	r1, #1
 800052a:	4832      	ldr	r0, [pc, #200]	; (80005f4 <main+0x10c>)
 800052c:	f003 fbbe 	bl	8003cac <HAL_RTCEx_BKUPRead>
 8000530:	4603      	mov	r3, r0
 8000532:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8000536:	4293      	cmp	r3, r2
 8000538:	d00f      	beq.n	800055a <main+0x72>
    {
       // Write Back Up Register 1 Data
       HAL_PWR_EnableBkUpAccess();
 800053a:	f002 f923 	bl	8002784 <HAL_PWR_EnableBkUpAccess>
       // Writes a data in a RTC Backup data Register 1
       HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0xBEBE);
 800053e:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8000542:	2101      	movs	r1, #1
 8000544:	482b      	ldr	r0, [pc, #172]	; (80005f4 <main+0x10c>)
 8000546:	f003 fb97 	bl	8003c78 <HAL_RTCEx_BKUPWrite>
       HAL_PWR_DisableBkUpAccess();
 800054a:	f002 f92f 	bl	80027ac <HAL_PWR_DisableBkUpAccess>

       //Turn LED2
 	   HAL_GPIO_WritePin(OUT_LED2_GPIO_Port, OUT_LED2_Pin, SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2104      	movs	r1, #4
 8000552:	4829      	ldr	r0, [pc, #164]	; (80005f8 <main+0x110>)
 8000554:	f001 ff18 	bl	8002388 <HAL_GPIO_WritePin>
 8000558:	e004      	b.n	8000564 <main+0x7c>

    }
    else
    {
       // data register already written so turn LED3
  	   HAL_GPIO_WritePin(OUT_LED3_GPIO_Port, OUT_LED3_Pin, SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2108      	movs	r1, #8
 800055e:	4826      	ldr	r0, [pc, #152]	; (80005f8 <main+0x110>)
 8000560:	f001 ff12 	bl	8002388 <HAL_GPIO_WritePin>
    }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000564:	f004 fc92 	bl	8004e8c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of MEMORY */
  MEMORYHandle = osMutexNew(&MEMORY_attributes);
 8000568:	4824      	ldr	r0, [pc, #144]	; (80005fc <main+0x114>)
 800056a:	f004 fd86 	bl	800507a <osMutexNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a23      	ldr	r2, [pc, #140]	; (8000600 <main+0x118>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of TELEMETRY */
  TELEMETRYHandle = osMutexNew(&TELEMETRY_attributes);
 8000574:	4823      	ldr	r0, [pc, #140]	; (8000604 <main+0x11c>)
 8000576:	f004 fd80 	bl	800507a <osMutexNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a22      	ldr	r2, [pc, #136]	; (8000608 <main+0x120>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of SENSOR_POLLING */
  SENSOR_POLLINGHandle = osMutexNew(&SENSOR_POLLING_attributes);
 8000580:	4822      	ldr	r0, [pc, #136]	; (800060c <main+0x124>)
 8000582:	f004 fd7a 	bl	800507a <osMutexNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a21      	ldr	r2, [pc, #132]	; (8000610 <main+0x128>)
 800058a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 800058c:	4a21      	ldr	r2, [pc, #132]	; (8000614 <main+0x12c>)
 800058e:	2100      	movs	r1, #0
 8000590:	4821      	ldr	r0, [pc, #132]	; (8000618 <main+0x130>)
 8000592:	f004 fcc5 	bl	8004f20 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a20      	ldr	r2, [pc, #128]	; (800061c <main+0x134>)
 800059a:	6013      	str	r3, [r2, #0]

  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 800059c:	4a20      	ldr	r2, [pc, #128]	; (8000620 <main+0x138>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4820      	ldr	r0, [pc, #128]	; (8000624 <main+0x13c>)
 80005a2:	f004 fcbd 	bl	8004f20 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <main+0x140>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 80005ac:	4a1f      	ldr	r2, [pc, #124]	; (800062c <main+0x144>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	481f      	ldr	r0, [pc, #124]	; (8000630 <main+0x148>)
 80005b2:	f004 fcb5 	bl	8004f20 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a1e      	ldr	r2, [pc, #120]	; (8000634 <main+0x14c>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 80005bc:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <main+0x150>)
 80005be:	2100      	movs	r1, #0
 80005c0:	481e      	ldr	r0, [pc, #120]	; (800063c <main+0x154>)
 80005c2:	f004 fcad 	bl	8004f20 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a1d      	ldr	r2, [pc, #116]	; (8000640 <main+0x158>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 80005cc:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <main+0x15c>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	481d      	ldr	r0, [pc, #116]	; (8000648 <main+0x160>)
 80005d2:	f004 fca5 	bl	8004f20 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a1c      	ldr	r2, [pc, #112]	; (800064c <main+0x164>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of Printing */
  PrintingHandle = osThreadNew(StartPrinting, NULL, &Printing_attributes);
 80005dc:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <main+0x168>)
 80005de:	2100      	movs	r1, #0
 80005e0:	481c      	ldr	r0, [pc, #112]	; (8000654 <main+0x16c>)
 80005e2:	f004 fc9d 	bl	8004f20 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <main+0x170>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f004 fc72 	bl	8004ed4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <main+0x108>
 80005f2:	bf00      	nop
 80005f4:	20004d08 	.word	0x20004d08
 80005f8:	40020800 	.word	0x40020800
 80005fc:	08007f10 	.word	0x08007f10
 8000600:	20004cac 	.word	0x20004cac
 8000604:	08007f20 	.word	0x08007f20
 8000608:	20004e10 	.word	0x20004e10
 800060c:	08007f30 	.word	0x08007f30
 8000610:	20004d28 	.word	0x20004d28
 8000614:	08007e38 	.word	0x08007e38
 8000618:	08001071 	.word	0x08001071
 800061c:	20004c60 	.word	0x20004c60
 8000620:	08007e5c 	.word	0x08007e5c
 8000624:	08001081 	.word	0x08001081
 8000628:	20004d30 	.word	0x20004d30
 800062c:	08007e80 	.word	0x08007e80
 8000630:	08001091 	.word	0x08001091
 8000634:	20004d34 	.word	0x20004d34
 8000638:	08007ea4 	.word	0x08007ea4
 800063c:	080010a1 	.word	0x080010a1
 8000640:	20004e08 	.word	0x20004e08
 8000644:	08007ec8 	.word	0x08007ec8
 8000648:	080010b1 	.word	0x080010b1
 800064c:	20004e0c 	.word	0x20004e0c
 8000650:	08007eec 	.word	0x08007eec
 8000654:	080010c1 	.word	0x080010c1
 8000658:	20004d2c 	.word	0x20004d2c

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f007 faca 	bl	8007c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <SystemClock_Config+0xbc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a23      	ldr	r2, [pc, #140]	; (8000718 <SystemClock_Config+0xbc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <SystemClock_Config+0xbc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <SystemClock_Config+0xc0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a8:	4a1c      	ldr	r2, [pc, #112]	; (800071c <SystemClock_Config+0xc0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <SystemClock_Config+0xc0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006bc:	2309      	movs	r3, #9
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006c6:	2301      	movs	r3, #1
 80006c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 f87e 	bl	80027d4 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006de:	f000 fd09 	bl	80010f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006e6:	2301      	movs	r3, #1
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 fae0 	bl	8002cc4 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800070a:	f000 fcf3 	bl	80010f4 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <MX_ADC1_Init+0x9c>)
 8000736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_ADC1_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800073e:	4b1e      	ldr	r3, [pc, #120]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_ADC1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075e:	4b16      	ldr	r3, [pc, #88]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000760:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <MX_ADC1_Init+0xa0>)
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_ADC1_Init+0x98>)
 800076c:	2201      	movs	r2, #1
 800076e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_ADC1_Init+0x98>)
 800077a:	2201      	movs	r2, #1
 800077c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077e:	480e      	ldr	r0, [pc, #56]	; (80007b8 <MX_ADC1_Init+0x98>)
 8000780:	f001 f902 	bl	8001988 <HAL_ADC_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fcb3 	bl	80010f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800078e:	2306      	movs	r3, #6
 8000790:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000792:	2301      	movs	r3, #1
 8000794:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <MX_ADC1_Init+0x98>)
 80007a0:	f001 f936 	bl	8001a10 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80007aa:	f000 fca3 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20004c64 	.word	0x20004c64
 80007bc:	40012000 	.word	0x40012000
 80007c0:	0f000001 	.word	0x0f000001

080007c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_I2C1_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_I2C1_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_I2C1_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	; (8000840 <MX_I2C1_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_I2C1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_I2C1_Init+0x74>)
 80007e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C1_Init+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <MX_I2C1_Init+0x74>)
 8000802:	f001 fdff 	bl	8002404 <HAL_I2C_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800080c:	f000 fc72 	bl	80010f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <MX_I2C1_Init+0x74>)
 8000814:	f001 ff3a 	bl	800268c <HAL_I2CEx_ConfigAnalogFilter>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800081e:	f000 fc69 	bl	80010f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_I2C1_Init+0x74>)
 8000826:	f001 ff6d 	bl	8002704 <HAL_I2CEx_ConfigDigitalFilter>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000830:	f000 fc60 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20004bac 	.word	0x20004bac
 800083c:	40005400 	.word	0x40005400
 8000840:	000186a0 	.word	0x000186a0

08000844 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <MX_I2C2_Init+0x74>)
 800084a:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <MX_I2C2_Init+0x78>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800084e:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <MX_I2C2_Init+0x7c>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <MX_I2C2_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <MX_I2C2_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_I2C2_Init+0x74>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000882:	f001 fdbf 	bl	8002404 <HAL_I2C_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800088c:	f000 fc32 	bl	80010f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	4809      	ldr	r0, [pc, #36]	; (80008b8 <MX_I2C2_Init+0x74>)
 8000894:	f001 fefa 	bl	800268c <HAL_I2CEx_ConfigAnalogFilter>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800089e:	f000 fc29 	bl	80010f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_I2C2_Init+0x74>)
 80008a6:	f001 ff2d 	bl	8002704 <HAL_I2CEx_ConfigDigitalFilter>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80008b0:	f000 fc20 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20004c0c 	.word	0x20004c0c
 80008bc:	40005800 	.word	0x40005800
 80008c0:	000186a0 	.word	0x000186a0

080008c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_I2C3_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	; (800093c <MX_I2C3_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_I2C3_Init+0x74>)
 80008d0:	4a1b      	ldr	r2, [pc, #108]	; (8000940 <MX_I2C3_Init+0x7c>)
 80008d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_I2C3_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_I2C3_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_I2C3_Init+0x74>)
 80008e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008e6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_I2C3_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_I2C3_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f4:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_I2C3_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_I2C3_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_I2C3_Init+0x74>)
 8000902:	f001 fd7f 	bl	8002404 <HAL_I2C_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800090c:	f000 fbf2 	bl	80010f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <MX_I2C3_Init+0x74>)
 8000914:	f001 feba 	bl	800268c <HAL_I2CEx_ConfigAnalogFilter>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800091e:	f000 fbe9 	bl	80010f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000922:	2100      	movs	r1, #0
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_I2C3_Init+0x74>)
 8000926:	f001 feed 	bl	8002704 <HAL_I2CEx_ConfigDigitalFilter>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000930:	f000 fbe0 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20004a64 	.word	0x20004a64
 800093c:	40005c00 	.word	0x40005c00
 8000940:	000186a0 	.word	0x000186a0

08000944 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b090      	sub	sp, #64	; 0x40
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800094a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800095e:	463b      	mov	r3, r7
 8000960:	2228      	movs	r2, #40	; 0x28
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f007 f94d 	bl	8007c04 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800096a:	4b3a      	ldr	r3, [pc, #232]	; (8000a54 <MX_RTC_Init+0x110>)
 800096c:	4a3a      	ldr	r2, [pc, #232]	; (8000a58 <MX_RTC_Init+0x114>)
 800096e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <MX_RTC_Init+0x110>)
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000976:	4b37      	ldr	r3, [pc, #220]	; (8000a54 <MX_RTC_Init+0x110>)
 8000978:	227f      	movs	r2, #127	; 0x7f
 800097a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800097c:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <MX_RTC_Init+0x110>)
 800097e:	22ff      	movs	r2, #255	; 0xff
 8000980:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000982:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <MX_RTC_Init+0x110>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000988:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <MX_RTC_Init+0x110>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <MX_RTC_Init+0x110>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000994:	482f      	ldr	r0, [pc, #188]	; (8000a54 <MX_RTC_Init+0x110>)
 8000996:	f002 fd7f 	bl	8003498 <HAL_RTC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80009a0:	f000 fba8 	bl	80010f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c2:	2201      	movs	r2, #1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4823      	ldr	r0, [pc, #140]	; (8000a54 <MX_RTC_Init+0x110>)
 80009c8:	f002 fdf7 	bl	80035ba <HAL_RTC_SetTime>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80009d2:	f000 fb8f 	bl	80010f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009d6:	2301      	movs	r3, #1
 80009d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80009dc:	2301      	movs	r3, #1
 80009de:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f2:	2201      	movs	r2, #1
 80009f4:	4619      	mov	r1, r3
 80009f6:	4817      	ldr	r0, [pc, #92]	; (8000a54 <MX_RTC_Init+0x110>)
 80009f8:	f002 fe9c 	bl	8003734 <HAL_RTC_SetDate>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000a02:	f000 fb77 	bl	80010f4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_RTC_Init+0x110>)
 8000a3e:	f002 ff21 	bl	8003884 <HAL_RTC_SetAlarm_IT>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000a48:	f000 fb54 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	3740      	adds	r7, #64	; 0x40
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20004d08 	.word	0x20004d08
 8000a58:	40002800 	.word	0x40002800

08000a5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a60:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a62:	4a18      	ldr	r2, [pc, #96]	; (8000ac4 <MX_SPI2_Init+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a80:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000aa8:	220a      	movs	r2, #10
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_SPI2_Init+0x64>)
 8000aae:	f003 f91f 	bl	8003cf0 <HAL_SPI_Init>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ab8:	f000 fb1c 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20004ab8 	.word	0x20004ab8
 8000ac4:	40003800 	.word	0x40003800

08000ac8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <MX_SPI4_Init+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000b14:	220a      	movs	r2, #10
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_SPI4_Init+0x64>)
 8000b1a:	f003 f8e9 	bl	8003cf0 <HAL_SPI_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8000b24:	f000 fae6 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20004cb0 	.word	0x20004cb0
 8000b30:	40013400 	.word	0x40013400

08000b34 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b3a:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <MX_SPI5_Init+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b44:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b64:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b78:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b80:	220a      	movs	r2, #10
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_SPI5_Init+0x64>)
 8000b86:	f003 f8b3 	bl	8003cf0 <HAL_SPI_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000b90:	f000 fab0 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20004b10 	.word	0x20004b10
 8000b9c:	40015000 	.word	0x40015000

08000ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <MX_TIM2_Init+0xac>)
 8000bc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_TIM2_Init+0xac>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_TIM2_Init+0xac>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_TIM2_Init+0xac>)
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_TIM2_Init+0xac>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_TIM2_Init+0xac>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bea:	4818      	ldr	r0, [pc, #96]	; (8000c4c <MX_TIM2_Init+0xac>)
 8000bec:	f003 f9d2 	bl	8003f94 <HAL_TIM_PWM_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000bf6:	f000 fa7d 	bl	80010f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c02:	f107 0320 	add.w	r3, r7, #32
 8000c06:	4619      	mov	r1, r3
 8000c08:	4810      	ldr	r0, [pc, #64]	; (8000c4c <MX_TIM2_Init+0xac>)
 8000c0a:	f003 fe55 	bl	80048b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c14:	f000 fa6e 	bl	80010f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c18:	2360      	movs	r3, #96	; 0x60
 8000c1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2208      	movs	r2, #8
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4807      	ldr	r0, [pc, #28]	; (8000c4c <MX_TIM2_Init+0xac>)
 8000c30:	f003 fb08 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000c3a:	f000 fa5b 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c3e:	4803      	ldr	r0, [pc, #12]	; (8000c4c <MX_TIM2_Init+0xac>)
 8000c40:	f000 fcac 	bl	800159c <HAL_TIM_MspPostInit>

}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	; 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20004dc0 	.word	0x20004dc0

08000c50 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_UART8_Init+0x4c>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <MX_UART8_Init+0x50>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <MX_UART8_Init+0x4c>)
 8000c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c60:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_UART8_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_UART8_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_UART8_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_UART8_Init+0x4c>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_UART8_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_UART8_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_UART8_Init+0x4c>)
 8000c88:	f003 fea6 	bl	80049d8 <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8000c92:	f000 fa2f 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20004d38 	.word	0x20004d38
 8000ca0:	40007c00 	.word	0x40007c00

08000ca4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_USART3_UART_Init+0x4c>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <MX_USART3_UART_Init+0x50>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <MX_USART3_UART_Init+0x4c>)
 8000cb0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000cb4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_USART3_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_USART3_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_USART3_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_USART3_UART_Init+0x4c>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_USART3_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_USART3_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_USART3_UART_Init+0x4c>)
 8000cdc:	f003 fe7c 	bl	80049d8 <HAL_UART_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ce6:	f000 fa05 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20004b68 	.word	0x20004b68
 8000cf4:	40004800 	.word	0x40004800

08000cf8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_USART6_UART_Init+0x4c>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <MX_USART6_UART_Init+0x50>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_USART6_UART_Init+0x4c>)
 8000d04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d08:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_USART6_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USART6_UART_Init+0x4c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_USART6_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USART6_UART_Init+0x4c>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_USART6_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USART6_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_USART6_UART_Init+0x4c>)
 8000d30:	f003 fe52 	bl	80049d8 <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d3a:	f000 f9db 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20004d7c 	.word	0x20004d7c
 8000d48:	40011400 	.word	0x40011400

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	; 0x38
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
 8000d66:	4bb5      	ldr	r3, [pc, #724]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4ab4      	ldr	r2, [pc, #720]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000d6c:	f043 0310 	orr.w	r3, r3, #16
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4bb2      	ldr	r3, [pc, #712]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	623b      	str	r3, [r7, #32]
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	4bae      	ldr	r3, [pc, #696]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4aad      	ldr	r2, [pc, #692]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4bab      	ldr	r3, [pc, #684]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
 8000d9e:	4ba7      	ldr	r3, [pc, #668]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4aa6      	ldr	r2, [pc, #664]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000da4:	f043 0320 	orr.w	r3, r3, #32
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4ba4      	ldr	r3, [pc, #656]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0320 	and.w	r3, r3, #32
 8000db2:	61bb      	str	r3, [r7, #24]
 8000db4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	4ba0      	ldr	r3, [pc, #640]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a9f      	ldr	r2, [pc, #636]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b9d      	ldr	r3, [pc, #628]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	4b99      	ldr	r3, [pc, #612]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a98      	ldr	r2, [pc, #608]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b96      	ldr	r3, [pc, #600]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b92      	ldr	r3, [pc, #584]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a91      	ldr	r2, [pc, #580]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b8f      	ldr	r3, [pc, #572]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	4b8b      	ldr	r3, [pc, #556]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	4a8a      	ldr	r2, [pc, #552]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e18:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1a:	4b88      	ldr	r3, [pc, #544]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b84      	ldr	r3, [pc, #528]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a83      	ldr	r2, [pc, #524]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b81      	ldr	r3, [pc, #516]	; (800103c <MX_GPIO_Init+0x2f0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f248 4184 	movw	r1, #33924	; 0x8484
 8000e48:	487d      	ldr	r0, [pc, #500]	; (8001040 <MX_GPIO_Init+0x2f4>)
 8000e4a:	f001 fa9d 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin, GPIO_PIN_RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8000e54:	487b      	ldr	r0, [pc, #492]	; (8001044 <MX_GPIO_Init+0x2f8>)
 8000e56:	f001 fa97 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000e60:	4879      	ldr	r0, [pc, #484]	; (8001048 <MX_GPIO_Init+0x2fc>)
 8000e62:	f001 fa91 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_LEDF_GPIO_Port, OUT_LEDF_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2108      	movs	r1, #8
 8000e6a:	4878      	ldr	r0, [pc, #480]	; (800104c <MX_GPIO_Init+0x300>)
 8000e6c:	f001 fa8c 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8000e70:	2200      	movs	r2, #0
 8000e72:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8000e76:	4876      	ldr	r0, [pc, #472]	; (8001050 <MX_GPIO_Init+0x304>)
 8000e78:	f001 fa86 	bl	8002388 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SX_CS_GPIO_Port, SPI2_SX_CS_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e82:	4874      	ldr	r0, [pc, #464]	; (8001054 <MX_GPIO_Init+0x308>)
 8000e84:	f001 fa80 	bl	8002388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8000e8e:	4872      	ldr	r0, [pc, #456]	; (8001058 <MX_GPIO_Init+0x30c>)
 8000e90:	f001 fa7a 	bl	8002388 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_12V_Buck_Pin OUT_Prop_ActuatedVent_Gate_Pin SPI4_CS_Thermocouple_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = EN_12V_Buck_Pin|OUT_Prop_ActuatedVent_Gate_Pin|SPI4_CS_Thermocouple_Pin|Iridium_RST_Pin;
 8000e94:	f248 4384 	movw	r3, #33924	; 0x8484
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4864      	ldr	r0, [pc, #400]	; (8001040 <MX_GPIO_Init+0x2f4>)
 8000eae:	f001 f8bf 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SD_CS_Pin OUT_PyroValve_Gate_2_Pin OUT_PyroValve_Gate_1_Pin */
  GPIO_InitStruct.Pin = SPI5_SD_CS_Pin|OUT_PyroValve_Gate_2_Pin|OUT_PyroValve_Gate_1_Pin;
 8000eb2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	485e      	ldr	r0, [pc, #376]	; (8001044 <MX_GPIO_Init+0x2f8>)
 8000ecc:	f001 f8b0 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ed4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4858      	ldr	r0, [pc, #352]	; (8001048 <MX_GPIO_Init+0x2fc>)
 8000ee6:	f001 f8a3 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_LED1_Pin OUT_LED2_Pin OUT_LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = OUT_LED1_Pin|OUT_LED2_Pin|OUT_LED3_Pin|SX_AMPLIFIER_Pin;
 8000eea:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4851      	ldr	r0, [pc, #324]	; (8001048 <MX_GPIO_Init+0x2fc>)
 8000f04:	f001 f894 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_LEDF_Pin */
  GPIO_InitStruct.Pin = OUT_LEDF_Pin;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(OUT_LEDF_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	484b      	ldr	r0, [pc, #300]	; (800104c <MX_GPIO_Init+0x300>)
 8000f20:	f001 f886 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8000f24:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f36:	4619      	mov	r1, r3
 8000f38:	4843      	ldr	r0, [pc, #268]	; (8001048 <MX_GPIO_Init+0x2fc>)
 8000f3a:	f001 f879 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4840      	ldr	r0, [pc, #256]	; (8001054 <MX_GPIO_Init+0x308>)
 8000f52:	f001 f86d 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_PyroValve_Cont_2_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_2_Pin;
 8000f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_PyroValve_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4836      	ldr	r0, [pc, #216]	; (8001044 <MX_GPIO_Init+0x2f8>)
 8000f6c:	f001 f860 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_PyroValve_Cont_1_Pin IN_EJ_Main_Cont_Pin IN_EJ_Drogue_Cont_Pin */
  GPIO_InitStruct.Pin = IN_PyroValve_Cont_1_Pin|IN_EJ_Main_Cont_Pin|IN_EJ_Drogue_Cont_Pin;
 8000f70:	f242 4301 	movw	r3, #9217	; 0x2401
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	4832      	ldr	r0, [pc, #200]	; (8001050 <MX_GPIO_Init+0x304>)
 8000f86:	f001 f853 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_PyroValve_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin OUT_VR_PWR_Pin OUT_EJ_Main_Gate_Pin OUT_EJ_Drogue_Gate_Pin
                           OUT_EJ_Arming_Pin */
  GPIO_InitStruct.Pin = OUT_PyroValve_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8000f8a:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|OUT_VR_PWR_Pin|OUT_EJ_Main_Gate_Pin|OUT_EJ_Drogue_Gate_Pin
                          |OUT_EJ_Arming_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	482b      	ldr	r0, [pc, #172]	; (8001050 <MX_GPIO_Init+0x304>)
 8000fa4:	f001 f844 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAYLOAD_I2C_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = PAYLOAD_I2C_EN_Pin|IN_XTend_Continuity_Pin;
 8000fa8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4820      	ldr	r0, [pc, #128]	; (8001040 <MX_GPIO_Init+0x2f4>)
 8000fbe:	f001 f837 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SX_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_SX_CS_Pin;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI2_SX_CS_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481e      	ldr	r0, [pc, #120]	; (8001054 <MX_GPIO_Init+0x308>)
 8000fdc:	f001 f828 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin OUT_FLASH_IO3_Pin OUT_FLASH_WP_Pin OUT_FLASH_CS_Pin
                           OUT_VR_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8000fe0:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|OUT_FLASH_IO3_Pin|OUT_FLASH_WP_Pin|OUT_FLASH_CS_Pin
                          |OUT_VR_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4817      	ldr	r0, [pc, #92]	; (8001058 <MX_GPIO_Init+0x30c>)
 8000ffa:	f001 f819 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8000ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 800100c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001010:	4619      	mov	r1, r3
 8001012:	4811      	ldr	r0, [pc, #68]	; (8001058 <MX_GPIO_Init+0x30c>)
 8001014:	f001 f80c 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_LSM6DSR_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_LSM6DSR_INT1_Pin;
 8001018:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	4808      	ldr	r0, [pc, #32]	; (8001050 <MX_GPIO_Init+0x304>)
 8001030:	f000 fffe 	bl	8002030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2105      	movs	r1, #5
 8001038:	2006      	movs	r0, #6
 800103a:	e00f      	b.n	800105c <MX_GPIO_Init+0x310>
 800103c:	40023800 	.word	0x40023800
 8001040:	40021000 	.word	0x40021000
 8001044:	40021400 	.word	0x40021400
 8001048:	40020800 	.word	0x40020800
 800104c:	40020000 	.word	0x40020000
 8001050:	40021800 	.word	0x40021800
 8001054:	40020400 	.word	0x40020400
 8001058:	40020c00 	.word	0x40020c00
 800105c:	f000 ffbe 	bl	8001fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001060:	2006      	movs	r0, #6
 8001062:	f000 ffd7 	bl	8002014 <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3738      	adds	r7, #56	; 0x38
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop

08001070 <StartMemory0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001078:	2001      	movs	r0, #1
 800107a:	f003 ffe3 	bl	8005044 <osDelay>
 800107e:	e7fb      	b.n	8001078 <StartMemory0+0x8>

08001080 <StartEjection1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection1 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001088:	2001      	movs	r0, #1
 800108a:	f003 ffdb 	bl	8005044 <osDelay>
 800108e:	e7fb      	b.n	8001088 <StartEjection1+0x8>

08001090 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001098:	2001      	movs	r0, #1
 800109a:	f003 ffd3 	bl	8005044 <osDelay>
 800109e:	e7fb      	b.n	8001098 <StartTelemetry2+0x8>

080010a0 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010a8:	2001      	movs	r0, #1
 80010aa:	f003 ffcb 	bl	8005044 <osDelay>
 80010ae:	e7fb      	b.n	80010a8 <StartSensors3+0x8>

080010b0 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f003 ffc3 	bl	8005044 <osDelay>
 80010be:	e7fb      	b.n	80010b8 <StartPropulsion4+0x8>

080010c0 <StartPrinting>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinting */
void StartPrinting(void *argument)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrinting */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f003 ffbb 	bl	8005044 <osDelay>
 80010ce:	e7fb      	b.n	80010c8 <StartPrinting+0x8>

080010d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010e2:	f000 fc31 	bl	8001948 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40001000 	.word	0x40001000

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f8:	b672      	cpsid	i
}
 80010fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fc:	e7fe      	b.n	80010fc <Error_Handler+0x8>
	...

08001100 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_MspInit+0x54>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_MspInit+0x54>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_MspInit+0x54>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_MspInit+0x54>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_MspInit+0x54>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_MspInit+0x54>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	210f      	movs	r1, #15
 8001142:	f06f 0001 	mvn.w	r0, #1
 8001146:	f000 ff49 	bl	8001fdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800

08001158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_ADC_MspInit+0x7c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d127      	bne.n	80011ca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_ADC_MspInit+0x80>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80011b2:	2340      	movs	r3, #64	; 0x40
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b6:	2303      	movs	r3, #3
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <HAL_ADC_MspInit+0x84>)
 80011c6:	f000 ff33 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40012000 	.word	0x40012000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000

080011e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08e      	sub	sp, #56	; 0x38
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a5c      	ldr	r2, [pc, #368]	; (8001370 <HAL_I2C_MspInit+0x190>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d12d      	bne.n	800125e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
 8001206:	4b5b      	ldr	r3, [pc, #364]	; (8001374 <HAL_I2C_MspInit+0x194>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a5a      	ldr	r2, [pc, #360]	; (8001374 <HAL_I2C_MspInit+0x194>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b58      	ldr	r3, [pc, #352]	; (8001374 <HAL_I2C_MspInit+0x194>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	623b      	str	r3, [r7, #32]
 800121c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800121e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001224:	2312      	movs	r3, #18
 8001226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001228:	2301      	movs	r3, #1
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001230:	2304      	movs	r3, #4
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001238:	4619      	mov	r1, r3
 800123a:	484f      	ldr	r0, [pc, #316]	; (8001378 <HAL_I2C_MspInit+0x198>)
 800123c:	f000 fef8 	bl	8002030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	4b4b      	ldr	r3, [pc, #300]	; (8001374 <HAL_I2C_MspInit+0x194>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	4a4a      	ldr	r2, [pc, #296]	; (8001374 <HAL_I2C_MspInit+0x194>)
 800124a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800124e:	6413      	str	r3, [r2, #64]	; 0x40
 8001250:	4b48      	ldr	r3, [pc, #288]	; (8001374 <HAL_I2C_MspInit+0x194>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001258:	61fb      	str	r3, [r7, #28]
 800125a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800125c:	e083      	b.n	8001366 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a46      	ldr	r2, [pc, #280]	; (800137c <HAL_I2C_MspInit+0x19c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d12d      	bne.n	80012c4 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	4b41      	ldr	r3, [pc, #260]	; (8001374 <HAL_I2C_MspInit+0x194>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	4a40      	ldr	r2, [pc, #256]	; (8001374 <HAL_I2C_MspInit+0x194>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	6313      	str	r3, [r2, #48]	; 0x30
 8001278:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <HAL_I2C_MspInit+0x194>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001284:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128a:	2312      	movs	r3, #18
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128e:	2301      	movs	r3, #1
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001292:	2303      	movs	r3, #3
 8001294:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001296:	2304      	movs	r3, #4
 8001298:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129e:	4619      	mov	r1, r3
 80012a0:	4835      	ldr	r0, [pc, #212]	; (8001378 <HAL_I2C_MspInit+0x198>)
 80012a2:	f000 fec5 	bl	8002030 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	4b32      	ldr	r3, [pc, #200]	; (8001374 <HAL_I2C_MspInit+0x194>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a31      	ldr	r2, [pc, #196]	; (8001374 <HAL_I2C_MspInit+0x194>)
 80012b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <HAL_I2C_MspInit+0x194>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
}
 80012c2:	e050      	b.n	8001366 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a2d      	ldr	r2, [pc, #180]	; (8001380 <HAL_I2C_MspInit+0x1a0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d14b      	bne.n	8001366 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <HAL_I2C_MspInit+0x194>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a27      	ldr	r2, [pc, #156]	; (8001374 <HAL_I2C_MspInit+0x194>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <HAL_I2C_MspInit+0x194>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <HAL_I2C_MspInit+0x194>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a20      	ldr	r2, [pc, #128]	; (8001374 <HAL_I2C_MspInit+0x194>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_I2C_MspInit+0x194>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130c:	2312      	movs	r3, #18
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001310:	2301      	movs	r3, #1
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001318:	2304      	movs	r3, #4
 800131a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001320:	4619      	mov	r1, r3
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <HAL_I2C_MspInit+0x1a4>)
 8001324:	f000 fe84 	bl	8002030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132e:	2312      	movs	r3, #18
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001332:	2301      	movs	r3, #1
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800133a:	2304      	movs	r3, #4
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	4619      	mov	r1, r3
 8001344:	4810      	ldr	r0, [pc, #64]	; (8001388 <HAL_I2C_MspInit+0x1a8>)
 8001346:	f000 fe73 	bl	8002030 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_I2C_MspInit+0x194>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_I2C_MspInit+0x194>)
 8001354:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_I2C_MspInit+0x194>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
}
 8001366:	bf00      	nop
 8001368:	3738      	adds	r7, #56	; 0x38
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40005400 	.word	0x40005400
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400
 800137c:	40005800 	.word	0x40005800
 8001380:	40005c00 	.word	0x40005c00
 8001384:	40020800 	.word	0x40020800
 8001388:	40020000 	.word	0x40020000

0800138c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	; 0x38
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	2230      	movs	r2, #48	; 0x30
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f006 fc31 	bl	8007c04 <memset>
  if(hrtc->Instance==RTC)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a10      	ldr	r2, [pc, #64]	; (80013e8 <HAL_RTC_MspInit+0x5c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d119      	bne.n	80013e0 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013ac:	2320      	movs	r3, #32
 80013ae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 feae 	bl	800311c <HAL_RCCEx_PeriphCLKConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80013c6:	f7ff fe95 	bl	80010f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_RTC_MspInit+0x60>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2105      	movs	r1, #5
 80013d4:	2029      	movs	r0, #41	; 0x29
 80013d6:	f000 fe01 	bl	8001fdc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013da:	2029      	movs	r0, #41	; 0x29
 80013dc:	f000 fe1a 	bl	8002014 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	3738      	adds	r7, #56	; 0x38
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40002800 	.word	0x40002800
 80013ec:	42470e3c 	.word	0x42470e3c

080013f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08e      	sub	sp, #56	; 0x38
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a4c      	ldr	r2, [pc, #304]	; (8001540 <HAL_SPI_MspInit+0x150>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12d      	bne.n	800146e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
 8001416:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <HAL_SPI_MspInit+0x154>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a4a      	ldr	r2, [pc, #296]	; (8001544 <HAL_SPI_MspInit+0x154>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b48      	ldr	r3, [pc, #288]	; (8001544 <HAL_SPI_MspInit+0x154>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	623b      	str	r3, [r7, #32]
 800142c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_SPI_MspInit+0x154>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a43      	ldr	r2, [pc, #268]	; (8001544 <HAL_SPI_MspInit+0x154>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_SPI_MspInit+0x154>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800144a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800145c:	2305      	movs	r3, #5
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	4838      	ldr	r0, [pc, #224]	; (8001548 <HAL_SPI_MspInit+0x158>)
 8001468:	f000 fde2 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800146c:	e064      	b.n	8001538 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a36      	ldr	r2, [pc, #216]	; (800154c <HAL_SPI_MspInit+0x15c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d12d      	bne.n	80014d4 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_SPI_MspInit+0x154>)
 800147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001480:	4a30      	ldr	r2, [pc, #192]	; (8001544 <HAL_SPI_MspInit+0x154>)
 8001482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001486:	6453      	str	r3, [r2, #68]	; 0x44
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <HAL_SPI_MspInit+0x154>)
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_SPI_MspInit+0x154>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_SPI_MspInit+0x154>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_SPI_MspInit+0x154>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80014b0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014c2:	2305      	movs	r3, #5
 80014c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	4619      	mov	r1, r3
 80014cc:	4820      	ldr	r0, [pc, #128]	; (8001550 <HAL_SPI_MspInit+0x160>)
 80014ce:	f000 fdaf 	bl	8002030 <HAL_GPIO_Init>
}
 80014d2:	e031      	b.n	8001538 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a1e      	ldr	r2, [pc, #120]	; (8001554 <HAL_SPI_MspInit+0x164>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12c      	bne.n	8001538 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_SPI_MspInit+0x154>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_SPI_MspInit+0x154>)
 80014e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_SPI_MspInit+0x154>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_SPI_MspInit+0x154>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_SPI_MspInit+0x154>)
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_SPI_MspInit+0x154>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001516:	f44f 7360 	mov.w	r3, #896	; 0x380
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001528:	2305      	movs	r3, #5
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	4809      	ldr	r0, [pc, #36]	; (8001558 <HAL_SPI_MspInit+0x168>)
 8001534:	f000 fd7c 	bl	8002030 <HAL_GPIO_Init>
}
 8001538:	bf00      	nop
 800153a:	3738      	adds	r7, #56	; 0x38
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40003800 	.word	0x40003800
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400
 800154c:	40013400 	.word	0x40013400
 8001550:	40021000 	.word	0x40021000
 8001554:	40015000 	.word	0x40015000
 8001558:	40021400 	.word	0x40021400

0800155c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800156c:	d10d      	bne.n	800158a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_TIM_PWM_MspInit+0x3c>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_TIM_PWM_MspInit+0x3c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_TIM_PWM_MspInit+0x3c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800

0800159c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015bc:	d11d      	bne.n	80015fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_TIM_MspPostInit+0x68>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <HAL_TIM_MspPostInit+0x68>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_TIM_MspPostInit+0x68>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80015da:	2304      	movs	r3, #4
 80015dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	4619      	mov	r1, r3
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <HAL_TIM_MspPostInit+0x6c>)
 80015f6:	f000 fd1b 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40020000 	.word	0x40020000

0800160c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08e      	sub	sp, #56	; 0x38
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a4b      	ldr	r2, [pc, #300]	; (8001758 <HAL_UART_MspInit+0x14c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d12c      	bne.n	8001688 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
 8001632:	4b4a      	ldr	r3, [pc, #296]	; (800175c <HAL_UART_MspInit+0x150>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a49      	ldr	r2, [pc, #292]	; (800175c <HAL_UART_MspInit+0x150>)
 8001638:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_UART_MspInit+0x150>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001646:	623b      	str	r3, [r7, #32]
 8001648:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	4b43      	ldr	r3, [pc, #268]	; (800175c <HAL_UART_MspInit+0x150>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a42      	ldr	r2, [pc, #264]	; (800175c <HAL_UART_MspInit+0x150>)
 8001654:	f043 0310 	orr.w	r3, r3, #16
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b40      	ldr	r3, [pc, #256]	; (800175c <HAL_UART_MspInit+0x150>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8001666:	2303      	movs	r3, #3
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001676:	2308      	movs	r3, #8
 8001678:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	4837      	ldr	r0, [pc, #220]	; (8001760 <HAL_UART_MspInit+0x154>)
 8001682:	f000 fcd5 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001686:	e063      	b.n	8001750 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a35      	ldr	r2, [pc, #212]	; (8001764 <HAL_UART_MspInit+0x158>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12d      	bne.n	80016ee <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_UART_MspInit+0x150>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a30      	ldr	r2, [pc, #192]	; (800175c <HAL_UART_MspInit+0x150>)
 800169c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <HAL_UART_MspInit+0x150>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	4b2a      	ldr	r3, [pc, #168]	; (800175c <HAL_UART_MspInit+0x150>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a29      	ldr	r2, [pc, #164]	; (800175c <HAL_UART_MspInit+0x150>)
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b27      	ldr	r3, [pc, #156]	; (800175c <HAL_UART_MspInit+0x150>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 80016ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016dc:	2307      	movs	r3, #7
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e4:	4619      	mov	r1, r3
 80016e6:	4820      	ldr	r0, [pc, #128]	; (8001768 <HAL_UART_MspInit+0x15c>)
 80016e8:	f000 fca2 	bl	8002030 <HAL_GPIO_Init>
}
 80016ec:	e030      	b.n	8001750 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a1e      	ldr	r2, [pc, #120]	; (800176c <HAL_UART_MspInit+0x160>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d12b      	bne.n	8001750 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_UART_MspInit+0x150>)
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <HAL_UART_MspInit+0x150>)
 8001702:	f043 0320 	orr.w	r3, r3, #32
 8001706:	6453      	str	r3, [r2, #68]	; 0x44
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_UART_MspInit+0x150>)
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_UART_MspInit+0x150>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_UART_MspInit+0x150>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6313      	str	r3, [r2, #48]	; 0x30
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_UART_MspInit+0x150>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8001730:	23c0      	movs	r3, #192	; 0xc0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001740:	2308      	movs	r3, #8
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001748:	4619      	mov	r1, r3
 800174a:	4809      	ldr	r0, [pc, #36]	; (8001770 <HAL_UART_MspInit+0x164>)
 800174c:	f000 fc70 	bl	8002030 <HAL_GPIO_Init>
}
 8001750:	bf00      	nop
 8001752:	3738      	adds	r7, #56	; 0x38
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40007c00 	.word	0x40007c00
 800175c:	40023800 	.word	0x40023800
 8001760:	40021000 	.word	0x40021000
 8001764:	40004800 	.word	0x40004800
 8001768:	40020c00 	.word	0x40020c00
 800176c:	40011400 	.word	0x40011400
 8001770:	40020800 	.word	0x40020800

08001774 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	; 0x30
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	2036      	movs	r0, #54	; 0x36
 800178a:	f000 fc27 	bl	8001fdc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800178e:	2036      	movs	r0, #54	; 0x36
 8001790:	f000 fc40 	bl	8002014 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HAL_InitTick+0xa4>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <HAL_InitTick+0xa4>)
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	6413      	str	r3, [r2, #64]	; 0x40
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_InitTick+0xa4>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017b0:	f107 0210 	add.w	r2, r7, #16
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f001 fc7c 	bl	80030b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017c0:	f001 fc52 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 80017c4:	4603      	mov	r3, r0
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	4a13      	ldr	r2, [pc, #76]	; (800181c <HAL_InitTick+0xa8>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	0c9b      	lsrs	r3, r3, #18
 80017d4:	3b01      	subs	r3, #1
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_InitTick+0xac>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <HAL_InitTick+0xb0>)
 80017dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_InitTick+0xac>)
 80017e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017e6:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_InitTick+0xac>)
 80017e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <HAL_InitTick+0xac>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_InitTick+0xac>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <HAL_InitTick+0xac>)
 80017fa:	f002 fb02 	bl	8003e02 <HAL_TIM_Base_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d104      	bne.n	800180e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001804:	4806      	ldr	r0, [pc, #24]	; (8001820 <HAL_InitTick+0xac>)
 8001806:	f002 fb55 	bl	8003eb4 <HAL_TIM_Base_Start_IT>
 800180a:	4603      	mov	r3, r0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3730      	adds	r7, #48	; 0x30
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40023800 	.word	0x40023800
 800181c:	431bde83 	.word	0x431bde83
 8001820:	20004e14 	.word	0x20004e14
 8001824:	40001000 	.word	0x40001000

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800182c:	e7fe      	b.n	800182c <NMI_Handler+0x4>

0800182e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <HardFault_Handler+0x4>

08001834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <MemManage_Handler+0x4>

0800183a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <UsageFault_Handler+0x4>

08001846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001858:	2001      	movs	r0, #1
 800185a:	f000 fdaf 	bl	80023bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <RTC_Alarm_IRQHandler+0x10>)
 800186a:	f002 f943 	bl	8003af4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20004d08 	.word	0x20004d08

08001878 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <TIM6_DAC_IRQHandler+0x10>)
 800187e:	f002 fbd8 	bl	8004032 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20004e14 	.word	0x20004e14

0800188c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018b6:	490e      	ldr	r1, [pc, #56]	; (80018f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018cc:	4c0b      	ldr	r4, [pc, #44]	; (80018fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018da:	f7ff ffd7 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018de:	f006 f95d 	bl	8007b9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f7fe fe01 	bl	80004e8 <main>
  bx  lr    
 80018e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80018f4:	08007fc8 	.word	0x08007fc8
  ldr r2, =_sbss
 80018f8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80018fc:	20004eac 	.word	0x20004eac

08001900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC_IRQHandler>
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <HAL_Init+0x40>)
 800190e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <HAL_Init+0x40>)
 800191a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <HAL_Init+0x40>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 fb4a 	bl	8001fc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	2000      	movs	r0, #0
 8001934:	f7ff ff1e 	bl	8001774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fbe2 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008
 800196c:	20004e5c 	.word	0x20004e5c

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20004e5c 	.word	0x20004e5c

08001988 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e033      	b.n	8001a06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fbd6 	bl	8001158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d118      	bne.n	80019f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ce:	f023 0302 	bic.w	r3, r3, #2
 80019d2:	f043 0202 	orr.w	r2, r3, #2
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f94a 	bl	8001c74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f023 0303 	bic.w	r3, r3, #3
 80019ee:	f043 0201 	orr.w	r2, r3, #1
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
 80019f6:	e001      	b.n	80019fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x1c>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e113      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x244>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b09      	cmp	r3, #9
 8001a3a:	d925      	bls.n	8001a88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68d9      	ldr	r1, [r3, #12]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b1e      	subs	r3, #30
 8001a52:	2207      	movs	r2, #7
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43da      	mvns	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	400a      	ands	r2, r1
 8001a60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68d9      	ldr	r1, [r3, #12]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	4603      	mov	r3, r0
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4403      	add	r3, r0
 8001a7a:	3b1e      	subs	r3, #30
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	e022      	b.n	8001ace <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6919      	ldr	r1, [r3, #16]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6919      	ldr	r1, [r3, #16]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	4618      	mov	r0, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4403      	add	r3, r0
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d824      	bhi.n	8001b20 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b05      	subs	r3, #5
 8001ae8:	221f      	movs	r2, #31
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	400a      	ands	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b05      	subs	r3, #5
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b1e:	e04c      	b.n	8001bba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	d824      	bhi.n	8001b72 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	3b23      	subs	r3, #35	; 0x23
 8001b3a:	221f      	movs	r2, #31
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43da      	mvns	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	400a      	ands	r2, r1
 8001b48:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	3b23      	subs	r3, #35	; 0x23
 8001b64:	fa00 f203 	lsl.w	r2, r0, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b70:	e023      	b.n	8001bba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	3b41      	subs	r3, #65	; 0x41
 8001b84:	221f      	movs	r2, #31
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	400a      	ands	r2, r1
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	3b41      	subs	r3, #65	; 0x41
 8001bae:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bba:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_ADC_ConfigChannel+0x250>)
 8001bbc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a28      	ldr	r2, [pc, #160]	; (8001c64 <HAL_ADC_ConfigChannel+0x254>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d10f      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1d8>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b12      	cmp	r3, #18
 8001bce:	d10b      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a1d      	ldr	r2, [pc, #116]	; (8001c64 <HAL_ADC_ConfigChannel+0x254>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12b      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x23a>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <HAL_ADC_ConfigChannel+0x258>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d003      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x1f4>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b11      	cmp	r3, #17
 8001c02:	d122      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <HAL_ADC_ConfigChannel+0x258>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d111      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_ADC_ConfigChannel+0x25c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a11      	ldr	r2, [pc, #68]	; (8001c70 <HAL_ADC_ConfigChannel+0x260>)
 8001c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c30:	0c9a      	lsrs	r2, r3, #18
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c3c:	e002      	b.n	8001c44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40012300 	.word	0x40012300
 8001c64:	40012000 	.word	0x40012000
 8001c68:	10000012 	.word	0x10000012
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	431bde83 	.word	0x431bde83

08001c74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c7c:	4b79      	ldr	r3, [pc, #484]	; (8001e64 <ADC_Init+0x1f0>)
 8001c7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	431a      	orrs	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	021a      	lsls	r2, r3, #8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ccc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6859      	ldr	r1, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6899      	ldr	r1, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68da      	ldr	r2, [r3, #12]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <ADC_Init+0x1f4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d022      	beq.n	8001d52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6899      	ldr	r1, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6899      	ldr	r1, [r3, #8]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	e00f      	b.n	8001d72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0202 	bic.w	r2, r2, #2
 8001d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6899      	ldr	r1, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7e1b      	ldrb	r3, [r3, #24]
 8001d8c:	005a      	lsls	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01b      	beq.n	8001dd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6859      	ldr	r1, [r3, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	035a      	lsls	r2, r3, #13
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	e007      	b.n	8001de8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	051a      	lsls	r2, r3, #20
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6899      	ldr	r1, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e2a:	025a      	lsls	r2, r3, #9
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6899      	ldr	r1, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	029a      	lsls	r2, r3, #10
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	609a      	str	r2, [r3, #8]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	40012300 	.word	0x40012300
 8001e68:	0f000001 	.word	0x0f000001

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	; (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	; (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	; 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ff4c 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fee:	f7ff ff61 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8001ff2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	6978      	ldr	r0, [r7, #20]
 8001ffa:	f7ff ffb1 	bl	8001f60 <NVIC_EncodePriority>
 8001ffe:	4602      	mov	r2, r0
 8002000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff80 	bl	8001f0c <__NVIC_SetPriority>
}
 800200c:	bf00      	nop
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff54 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	e177      	b.n	800233c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800204c:	2201      	movs	r2, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	429a      	cmp	r2, r3
 8002066:	f040 8166 	bne.w	8002336 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d005      	beq.n	8002082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207e:	2b02      	cmp	r3, #2
 8002080:	d130      	bne.n	80020e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b8:	2201      	movs	r2, #1
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4013      	ands	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	091b      	lsrs	r3, r3, #4
 80020ce:	f003 0201 	and.w	r2, r3, #1
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d017      	beq.n	8002120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	2203      	movs	r2, #3
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d123      	bne.n	8002174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	08da      	lsrs	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3208      	adds	r2, #8
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	220f      	movs	r2, #15
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	08da      	lsrs	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	69b9      	ldr	r1, [r7, #24]
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0203 	and.w	r2, r3, #3
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 80c0 	beq.w	8002336 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	4b66      	ldr	r3, [pc, #408]	; (8002354 <HAL_GPIO_Init+0x324>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	4a65      	ldr	r2, [pc, #404]	; (8002354 <HAL_GPIO_Init+0x324>)
 80021c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c4:	6453      	str	r3, [r2, #68]	; 0x44
 80021c6:	4b63      	ldr	r3, [pc, #396]	; (8002354 <HAL_GPIO_Init+0x324>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d2:	4a61      	ldr	r2, [pc, #388]	; (8002358 <HAL_GPIO_Init+0x328>)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a58      	ldr	r2, [pc, #352]	; (800235c <HAL_GPIO_Init+0x32c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d037      	beq.n	800226e <HAL_GPIO_Init+0x23e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a57      	ldr	r2, [pc, #348]	; (8002360 <HAL_GPIO_Init+0x330>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d031      	beq.n	800226a <HAL_GPIO_Init+0x23a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a56      	ldr	r2, [pc, #344]	; (8002364 <HAL_GPIO_Init+0x334>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02b      	beq.n	8002266 <HAL_GPIO_Init+0x236>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a55      	ldr	r2, [pc, #340]	; (8002368 <HAL_GPIO_Init+0x338>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d025      	beq.n	8002262 <HAL_GPIO_Init+0x232>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a54      	ldr	r2, [pc, #336]	; (800236c <HAL_GPIO_Init+0x33c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01f      	beq.n	800225e <HAL_GPIO_Init+0x22e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a53      	ldr	r2, [pc, #332]	; (8002370 <HAL_GPIO_Init+0x340>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d019      	beq.n	800225a <HAL_GPIO_Init+0x22a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a52      	ldr	r2, [pc, #328]	; (8002374 <HAL_GPIO_Init+0x344>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x226>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a51      	ldr	r2, [pc, #324]	; (8002378 <HAL_GPIO_Init+0x348>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x222>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a50      	ldr	r2, [pc, #320]	; (800237c <HAL_GPIO_Init+0x34c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x21e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4f      	ldr	r2, [pc, #316]	; (8002380 <HAL_GPIO_Init+0x350>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x21a>
 8002246:	2309      	movs	r3, #9
 8002248:	e012      	b.n	8002270 <HAL_GPIO_Init+0x240>
 800224a:	230a      	movs	r3, #10
 800224c:	e010      	b.n	8002270 <HAL_GPIO_Init+0x240>
 800224e:	2308      	movs	r3, #8
 8002250:	e00e      	b.n	8002270 <HAL_GPIO_Init+0x240>
 8002252:	2307      	movs	r3, #7
 8002254:	e00c      	b.n	8002270 <HAL_GPIO_Init+0x240>
 8002256:	2306      	movs	r3, #6
 8002258:	e00a      	b.n	8002270 <HAL_GPIO_Init+0x240>
 800225a:	2305      	movs	r3, #5
 800225c:	e008      	b.n	8002270 <HAL_GPIO_Init+0x240>
 800225e:	2304      	movs	r3, #4
 8002260:	e006      	b.n	8002270 <HAL_GPIO_Init+0x240>
 8002262:	2303      	movs	r3, #3
 8002264:	e004      	b.n	8002270 <HAL_GPIO_Init+0x240>
 8002266:	2302      	movs	r3, #2
 8002268:	e002      	b.n	8002270 <HAL_GPIO_Init+0x240>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_GPIO_Init+0x240>
 800226e:	2300      	movs	r3, #0
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	f002 0203 	and.w	r2, r2, #3
 8002276:	0092      	lsls	r2, r2, #2
 8002278:	4093      	lsls	r3, r2
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002280:	4935      	ldr	r1, [pc, #212]	; (8002358 <HAL_GPIO_Init+0x328>)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	3302      	adds	r3, #2
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_GPIO_Init+0x354>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022b2:	4a34      	ldr	r2, [pc, #208]	; (8002384 <HAL_GPIO_Init+0x354>)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <HAL_GPIO_Init+0x354>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022dc:	4a29      	ldr	r2, [pc, #164]	; (8002384 <HAL_GPIO_Init+0x354>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e2:	4b28      	ldr	r3, [pc, #160]	; (8002384 <HAL_GPIO_Init+0x354>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002306:	4a1f      	ldr	r2, [pc, #124]	; (8002384 <HAL_GPIO_Init+0x354>)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800230c:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_GPIO_Init+0x354>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002330:	4a14      	ldr	r2, [pc, #80]	; (8002384 <HAL_GPIO_Init+0x354>)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3301      	adds	r3, #1
 800233a:	61fb      	str	r3, [r7, #28]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	2b0f      	cmp	r3, #15
 8002340:	f67f ae84 	bls.w	800204c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3724      	adds	r7, #36	; 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800
 8002358:	40013800 	.word	0x40013800
 800235c:	40020000 	.word	0x40020000
 8002360:	40020400 	.word	0x40020400
 8002364:	40020800 	.word	0x40020800
 8002368:	40020c00 	.word	0x40020c00
 800236c:	40021000 	.word	0x40021000
 8002370:	40021400 	.word	0x40021400
 8002374:	40021800 	.word	0x40021800
 8002378:	40021c00 	.word	0x40021c00
 800237c:	40022000 	.word	0x40022000
 8002380:	40022400 	.word	0x40022400
 8002384:	40013c00 	.word	0x40013c00

08002388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	460b      	mov	r3, r1
 8002392:	807b      	strh	r3, [r7, #2]
 8002394:	4613      	mov	r3, r2
 8002396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002398:	787b      	ldrb	r3, [r7, #1]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023a4:	e003      	b.n	80023ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023a6:	887b      	ldrh	r3, [r7, #2]
 80023a8:	041a      	lsls	r2, r3, #16
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	619a      	str	r2, [r3, #24]
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	88fb      	ldrh	r3, [r7, #6]
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d006      	beq.n	80023e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f806 	bl	80023ec <HAL_GPIO_EXTI_Callback>
  }
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40013c00 	.word	0x40013c00

080023ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e12b      	b.n	800266e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe fed8 	bl	80011e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2224      	movs	r2, #36	; 0x24
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002468:	f000 fdfe 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 800246c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a81      	ldr	r2, [pc, #516]	; (8002678 <HAL_I2C_Init+0x274>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d807      	bhi.n	8002488 <HAL_I2C_Init+0x84>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a80      	ldr	r2, [pc, #512]	; (800267c <HAL_I2C_Init+0x278>)
 800247c:	4293      	cmp	r3, r2
 800247e:	bf94      	ite	ls
 8002480:	2301      	movls	r3, #1
 8002482:	2300      	movhi	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e006      	b.n	8002496 <HAL_I2C_Init+0x92>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a7d      	ldr	r2, [pc, #500]	; (8002680 <HAL_I2C_Init+0x27c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0e7      	b.n	800266e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a78      	ldr	r2, [pc, #480]	; (8002684 <HAL_I2C_Init+0x280>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	0c9b      	lsrs	r3, r3, #18
 80024a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a6a      	ldr	r2, [pc, #424]	; (8002678 <HAL_I2C_Init+0x274>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d802      	bhi.n	80024d8 <HAL_I2C_Init+0xd4>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3301      	adds	r3, #1
 80024d6:	e009      	b.n	80024ec <HAL_I2C_Init+0xe8>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	4a69      	ldr	r2, [pc, #420]	; (8002688 <HAL_I2C_Init+0x284>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	3301      	adds	r3, #1
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	495c      	ldr	r1, [pc, #368]	; (8002678 <HAL_I2C_Init+0x274>)
 8002508:	428b      	cmp	r3, r1
 800250a:	d819      	bhi.n	8002540 <HAL_I2C_Init+0x13c>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e59      	subs	r1, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fbb1 f3f3 	udiv	r3, r1, r3
 800251a:	1c59      	adds	r1, r3, #1
 800251c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002520:	400b      	ands	r3, r1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_I2C_Init+0x138>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1e59      	subs	r1, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fbb1 f3f3 	udiv	r3, r1, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253a:	e051      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 800253c:	2304      	movs	r3, #4
 800253e:	e04f      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d111      	bne.n	800256c <HAL_I2C_Init+0x168>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1e58      	subs	r0, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	440b      	add	r3, r1
 8002556:	fbb0 f3f3 	udiv	r3, r0, r3
 800255a:	3301      	adds	r3, #1
 800255c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e012      	b.n	8002592 <HAL_I2C_Init+0x18e>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1e58      	subs	r0, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	0099      	lsls	r1, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Init+0x196>
 8002596:	2301      	movs	r3, #1
 8002598:	e022      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10e      	bne.n	80025c0 <HAL_I2C_Init+0x1bc>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1e58      	subs	r0, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	440b      	add	r3, r1
 80025b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025be:	e00f      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1e58      	subs	r0, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	0099      	lsls	r1, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	6809      	ldr	r1, [r1, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800260e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6911      	ldr	r1, [r2, #16]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68d2      	ldr	r2, [r2, #12]
 800261a:	4311      	orrs	r1, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	430b      	orrs	r3, r1
 8002622:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	000186a0 	.word	0x000186a0
 800267c:	001e847f 	.word	0x001e847f
 8002680:	003d08ff 	.word	0x003d08ff
 8002684:	431bde83 	.word	0x431bde83
 8002688:	10624dd3 	.word	0x10624dd3

0800268c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d129      	bne.n	80026f6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2224      	movs	r2, #36	; 0x24
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0210 	bic.w	r2, r2, #16
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b20      	cmp	r3, #32
 800271c:	d12a      	bne.n	8002774 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2224      	movs	r2, #36	; 0x24
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0201 	bic.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800273e:	89fb      	ldrh	r3, [r7, #14]
 8002740:	f023 030f 	bic.w	r3, r3, #15
 8002744:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b29a      	uxth	r2, r3
 800274a:	89fb      	ldrh	r3, [r7, #14]
 800274c:	4313      	orrs	r3, r2
 800274e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	89fa      	ldrh	r2, [r7, #14]
 8002756:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	e000      	b.n	8002776 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002774:	2302      	movs	r3, #2
  }
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_PWR_EnableBkUpAccess+0x20>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_PWR_EnableBkUpAccess+0x24>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002796:	687b      	ldr	r3, [r7, #4]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	420e0020 	.word	0x420e0020
 80027a8:	40007000 	.word	0x40007000

080027ac <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_PWR_DisableBkUpAccess+0x20>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_PWR_DisableBkUpAccess+0x24>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80027be:	687b      	ldr	r3, [r7, #4]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	420e0020 	.word	0x420e0020
 80027d0:	40007000 	.word	0x40007000

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e264      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d075      	beq.n	80028de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027f2:	4ba3      	ldr	r3, [pc, #652]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d00c      	beq.n	8002818 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fe:	4ba0      	ldr	r3, [pc, #640]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002806:	2b08      	cmp	r3, #8
 8002808:	d112      	bne.n	8002830 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280a:	4b9d      	ldr	r3, [pc, #628]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002816:	d10b      	bne.n	8002830 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002818:	4b99      	ldr	r3, [pc, #612]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d05b      	beq.n	80028dc <HAL_RCC_OscConfig+0x108>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d157      	bne.n	80028dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e23f      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002838:	d106      	bne.n	8002848 <HAL_RCC_OscConfig+0x74>
 800283a:	4b91      	ldr	r3, [pc, #580]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a90      	ldr	r2, [pc, #576]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <HAL_RCC_OscConfig+0xb0>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0x98>
 8002852:	4b8b      	ldr	r3, [pc, #556]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a8a      	ldr	r2, [pc, #552]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b88      	ldr	r3, [pc, #544]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a87      	ldr	r2, [pc, #540]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0xb0>
 800286c:	4b84      	ldr	r3, [pc, #528]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a83      	ldr	r2, [pc, #524]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b81      	ldr	r3, [pc, #516]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a80      	ldr	r2, [pc, #512]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7ff f870 	bl	8001970 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002894:	f7ff f86c 	bl	8001970 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e204      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0xc0>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7ff f85c 	bl	8001970 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028bc:	f7ff f858 	bl	8001970 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1f0      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0xe8>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d063      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ea:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f6:	4b62      	ldr	r3, [pc, #392]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d11c      	bne.n	800293c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002902:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d116      	bne.n	800293c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4b5c      	ldr	r3, [pc, #368]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_RCC_OscConfig+0x152>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1c4      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4b56      	ldr	r3, [pc, #344]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4952      	ldr	r1, [pc, #328]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	e03a      	b.n	80029b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002944:	4b4f      	ldr	r3, [pc, #316]	; (8002a84 <HAL_RCC_OscConfig+0x2b0>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7ff f811 	bl	8001970 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002952:	f7ff f80d 	bl	8001970 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1a5      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	4b46      	ldr	r3, [pc, #280]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4940      	ldr	r1, [pc, #256]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_OscConfig+0x2b0>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fff0 	bl	8001970 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe ffec 	bl	8001970 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e184      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a6:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d030      	beq.n	8002a20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d016      	beq.n	80029f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4b30      	ldr	r3, [pc, #192]	; (8002a88 <HAL_RCC_OscConfig+0x2b4>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7fe ffd0 	bl	8001970 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe ffcc 	bl	8001970 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e164      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x200>
 80029f2:	e015      	b.n	8002a20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f4:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_RCC_OscConfig+0x2b4>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fa:	f7fe ffb9 	bl	8001970 <HAL_GetTick>
 80029fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a02:	f7fe ffb5 	bl	8001970 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e14d      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a14:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f0      	bne.n	8002a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80a0 	beq.w	8002b6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10f      	bne.n	8002a5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_OscConfig+0x2b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d121      	bne.n	8002aae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_RCC_OscConfig+0x2b8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <HAL_RCC_OscConfig+0x2b8>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a76:	f7fe ff7b 	bl	8001970 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7c:	e011      	b.n	8002aa2 <HAL_RCC_OscConfig+0x2ce>
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	42470000 	.word	0x42470000
 8002a88:	42470e80 	.word	0x42470e80
 8002a8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7fe ff6e 	bl	8001970 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e106      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b85      	ldr	r3, [pc, #532]	; (8002cb8 <HAL_RCC_OscConfig+0x4e4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x2f0>
 8002ab6:	4b81      	ldr	r3, [pc, #516]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	4a80      	ldr	r2, [pc, #512]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac2:	e01c      	b.n	8002afe <HAL_RCC_OscConfig+0x32a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x312>
 8002acc:	4b7b      	ldr	r3, [pc, #492]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a7a      	ldr	r2, [pc, #488]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	4b78      	ldr	r3, [pc, #480]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002adc:	4a77      	ldr	r2, [pc, #476]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae4:	e00b      	b.n	8002afe <HAL_RCC_OscConfig+0x32a>
 8002ae6:	4b75      	ldr	r3, [pc, #468]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	4a74      	ldr	r2, [pc, #464]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	6713      	str	r3, [r2, #112]	; 0x70
 8002af2:	4b72      	ldr	r3, [pc, #456]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a71      	ldr	r2, [pc, #452]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d015      	beq.n	8002b32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe ff33 	bl	8001970 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe ff2f 	bl	8001970 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e0c5      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b24:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0ee      	beq.n	8002b0e <HAL_RCC_OscConfig+0x33a>
 8002b30:	e014      	b.n	8002b5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b32:	f7fe ff1d 	bl	8001970 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fe ff19 	bl	8001970 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e0af      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b50:	4b5a      	ldr	r3, [pc, #360]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1ee      	bne.n	8002b3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d105      	bne.n	8002b6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b62:	4b56      	ldr	r3, [pc, #344]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a55      	ldr	r2, [pc, #340]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 809b 	beq.w	8002cae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b78:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d05c      	beq.n	8002c3e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d141      	bne.n	8002c10 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8c:	4b4c      	ldr	r3, [pc, #304]	; (8002cc0 <HAL_RCC_OscConfig+0x4ec>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fe feed 	bl	8001970 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7fe fee9 	bl	8001970 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e081      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	019b      	lsls	r3, r3, #6
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	041b      	lsls	r3, r3, #16
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	061b      	lsls	r3, r3, #24
 8002bdc:	4937      	ldr	r1, [pc, #220]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be2:	4b37      	ldr	r3, [pc, #220]	; (8002cc0 <HAL_RCC_OscConfig+0x4ec>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe fec2 	bl	8001970 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe febe 	bl	8001970 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e056      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c02:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x41c>
 8002c0e:	e04e      	b.n	8002cae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c10:	4b2b      	ldr	r3, [pc, #172]	; (8002cc0 <HAL_RCC_OscConfig+0x4ec>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7fe feab 	bl	8001970 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7fe fea7 	bl	8001970 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e03f      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c30:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0x44a>
 8002c3c:	e037      	b.n	8002cae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e032      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c4a:	4b1c      	ldr	r3, [pc, #112]	; (8002cbc <HAL_RCC_OscConfig+0x4e8>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d028      	beq.n	8002caa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d121      	bne.n	8002caa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d11a      	bne.n	8002caa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c80:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d111      	bne.n	8002caa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	085b      	lsrs	r3, r3, #1
 8002c92:	3b01      	subs	r3, #1
 8002c94:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d107      	bne.n	8002caa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40007000 	.word	0x40007000
 8002cbc:	40023800 	.word	0x40023800
 8002cc0:	42470060 	.word	0x42470060

08002cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0cc      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cd8:	4b68      	ldr	r3, [pc, #416]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d90c      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce6:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cee:	4b63      	ldr	r3, [pc, #396]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d001      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0b8      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d020      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d18:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	4a58      	ldr	r2, [pc, #352]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4a52      	ldr	r2, [pc, #328]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d3c:	4b50      	ldr	r3, [pc, #320]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	494d      	ldr	r1, [pc, #308]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d044      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d107      	bne.n	8002d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d119      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e07f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d82:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e067      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4934      	ldr	r1, [pc, #208]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db4:	f7fe fddc 	bl	8001970 <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dbc:	f7fe fdd8 	bl	8001970 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e04f      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd2:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 020c 	and.w	r2, r3, #12
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d1eb      	bne.n	8002dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de4:	4b25      	ldr	r3, [pc, #148]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d20c      	bcs.n	8002e0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e032      	b.n	8002e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e18:	4b19      	ldr	r3, [pc, #100]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4916      	ldr	r1, [pc, #88]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d009      	beq.n	8002e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	490e      	ldr	r1, [pc, #56]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e4a:	f000 f821 	bl	8002e90 <HAL_RCC_GetSysClockFreq>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	490a      	ldr	r1, [pc, #40]	; (8002e84 <HAL_RCC_ClockConfig+0x1c0>)
 8002e5c:	5ccb      	ldrb	r3, [r1, r3]
 8002e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e62:	4a09      	ldr	r2, [pc, #36]	; (8002e88 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x1c8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe fc82 	bl	8001774 <HAL_InitTick>

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023c00 	.word	0x40023c00
 8002e80:	40023800 	.word	0x40023800
 8002e84:	08007f40 	.word	0x08007f40
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	20000004 	.word	0x20000004

08002e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e94:	b084      	sub	sp, #16
 8002e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ea8:	4b67      	ldr	r3, [pc, #412]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030c 	and.w	r3, r3, #12
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	f200 80bd 	bhi.w	8003034 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d002      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d003      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x3a>
 8002ec2:	e0b7      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b61      	ldr	r3, [pc, #388]	; (800304c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ec6:	60bb      	str	r3, [r7, #8]
       break;
 8002ec8:	e0b7      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eca:	4b60      	ldr	r3, [pc, #384]	; (800304c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ecc:	60bb      	str	r3, [r7, #8]
      break;
 8002ece:	e0b4      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed0:	4b5d      	ldr	r3, [pc, #372]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eda:	4b5b      	ldr	r3, [pc, #364]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d04d      	beq.n	8002f82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee6:	4b58      	ldr	r3, [pc, #352]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	099b      	lsrs	r3, r3, #6
 8002eec:	461a      	mov	r2, r3
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ef6:	f04f 0100 	mov.w	r1, #0
 8002efa:	ea02 0800 	and.w	r8, r2, r0
 8002efe:	ea03 0901 	and.w	r9, r3, r1
 8002f02:	4640      	mov	r0, r8
 8002f04:	4649      	mov	r1, r9
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	014b      	lsls	r3, r1, #5
 8002f10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f14:	0142      	lsls	r2, r0, #5
 8002f16:	4610      	mov	r0, r2
 8002f18:	4619      	mov	r1, r3
 8002f1a:	ebb0 0008 	subs.w	r0, r0, r8
 8002f1e:	eb61 0109 	sbc.w	r1, r1, r9
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	018b      	lsls	r3, r1, #6
 8002f2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f30:	0182      	lsls	r2, r0, #6
 8002f32:	1a12      	subs	r2, r2, r0
 8002f34:	eb63 0301 	sbc.w	r3, r3, r1
 8002f38:	f04f 0000 	mov.w	r0, #0
 8002f3c:	f04f 0100 	mov.w	r1, #0
 8002f40:	00d9      	lsls	r1, r3, #3
 8002f42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f46:	00d0      	lsls	r0, r2, #3
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	eb12 0208 	adds.w	r2, r2, r8
 8002f50:	eb43 0309 	adc.w	r3, r3, r9
 8002f54:	f04f 0000 	mov.w	r0, #0
 8002f58:	f04f 0100 	mov.w	r1, #0
 8002f5c:	0299      	lsls	r1, r3, #10
 8002f5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002f62:	0290      	lsls	r0, r2, #10
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	f7fd f93c 	bl	80001f0 <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e04a      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f82:	4b31      	ldr	r3, [pc, #196]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f92:	f04f 0100 	mov.w	r1, #0
 8002f96:	ea02 0400 	and.w	r4, r2, r0
 8002f9a:	ea03 0501 	and.w	r5, r3, r1
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	014b      	lsls	r3, r1, #5
 8002fac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fb0:	0142      	lsls	r2, r0, #5
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	1b00      	subs	r0, r0, r4
 8002fb8:	eb61 0105 	sbc.w	r1, r1, r5
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	018b      	lsls	r3, r1, #6
 8002fc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002fca:	0182      	lsls	r2, r0, #6
 8002fcc:	1a12      	subs	r2, r2, r0
 8002fce:	eb63 0301 	sbc.w	r3, r3, r1
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	00d9      	lsls	r1, r3, #3
 8002fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fe0:	00d0      	lsls	r0, r2, #3
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	1912      	adds	r2, r2, r4
 8002fe8:	eb45 0303 	adc.w	r3, r5, r3
 8002fec:	f04f 0000 	mov.w	r0, #0
 8002ff0:	f04f 0100 	mov.w	r1, #0
 8002ff4:	0299      	lsls	r1, r3, #10
 8002ff6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002ffa:	0290      	lsls	r0, r2, #10
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	461a      	mov	r2, r3
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	f7fd f8f0 	bl	80001f0 <__aeabi_uldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4613      	mov	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	3301      	adds	r3, #1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003030:	60bb      	str	r3, [r7, #8]
      break;
 8003032:	e002      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003036:	60bb      	str	r3, [r7, #8]
      break;
 8003038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800303a:	68bb      	ldr	r3, [r7, #8]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800
 800304c:	00f42400 	.word	0x00f42400

08003050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <HAL_RCC_GetHCLKFreq+0x14>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000000 	.word	0x20000000

08003068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800306c:	f7ff fff0 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0a9b      	lsrs	r3, r3, #10
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4903      	ldr	r1, [pc, #12]	; (800308c <HAL_RCC_GetPCLK1Freq+0x24>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40023800 	.word	0x40023800
 800308c:	08007f50 	.word	0x08007f50

08003090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003094:	f7ff ffdc 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	0b5b      	lsrs	r3, r3, #13
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	4903      	ldr	r1, [pc, #12]	; (80030b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40023800 	.word	0x40023800
 80030b4:	08007f50 	.word	0x08007f50

080030b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	220f      	movs	r2, #15
 80030c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0203 	and.w	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80030ec:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	08db      	lsrs	r3, r3, #3
 80030f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_RCC_GetClockConfig+0x60>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 020f 	and.w	r2, r3, #15
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	601a      	str	r2, [r3, #0]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	40023c00 	.word	0x40023c00

0800311c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800314c:	2b00      	cmp	r3, #0
 800314e:	d075      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003150:	4bad      	ldr	r3, [pc, #692]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003156:	f7fe fc0b 	bl	8001970 <HAL_GetTick>
 800315a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800315e:	f7fe fc07 	bl	8001970 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e18b      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003170:	4ba6      	ldr	r3, [pc, #664]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1f0      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d009      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	019a      	lsls	r2, r3, #6
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	071b      	lsls	r3, r3, #28
 8003194:	499d      	ldr	r1, [pc, #628]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01f      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031a8:	4b98      	ldr	r3, [pc, #608]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ae:	0f1b      	lsrs	r3, r3, #28
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	019a      	lsls	r2, r3, #6
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	061b      	lsls	r3, r3, #24
 80031c2:	431a      	orrs	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	071b      	lsls	r3, r3, #28
 80031c8:	4990      	ldr	r1, [pc, #576]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031d0:	4b8e      	ldr	r3, [pc, #568]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d6:	f023 021f 	bic.w	r2, r3, #31
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	3b01      	subs	r3, #1
 80031e0:	498a      	ldr	r1, [pc, #552]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	019a      	lsls	r2, r3, #6
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	061b      	lsls	r3, r3, #24
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	071b      	lsls	r3, r3, #28
 8003208:	4980      	ldr	r1, [pc, #512]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003210:	4b7d      	ldr	r3, [pc, #500]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003216:	f7fe fbab 	bl	8001970 <HAL_GetTick>
 800321a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800321e:	f7fe fba7 	bl	8001970 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e12b      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003230:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d105      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003250:	2b00      	cmp	r3, #0
 8003252:	d079      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003254:	4b6e      	ldr	r3, [pc, #440]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800325a:	f7fe fb89 	bl	8001970 <HAL_GetTick>
 800325e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003260:	e008      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003262:	f7fe fb85 	bl	8001970 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e109      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003274:	4b65      	ldr	r3, [pc, #404]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800327c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003280:	d0ef      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d020      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800328e:	4b5f      	ldr	r3, [pc, #380]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	0f1b      	lsrs	r3, r3, #28
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	019a      	lsls	r2, r3, #6
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	061b      	lsls	r3, r3, #24
 80032a8:	431a      	orrs	r2, r3
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	071b      	lsls	r3, r3, #28
 80032ae:	4957      	ldr	r1, [pc, #348]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032b6:	4b55      	ldr	r3, [pc, #340]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032bc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	4950      	ldr	r1, [pc, #320]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01e      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032dc:	4b4b      	ldr	r3, [pc, #300]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	0e1b      	lsrs	r3, r3, #24
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	019a      	lsls	r2, r3, #6
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	061b      	lsls	r3, r3, #24
 80032f4:	431a      	orrs	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	071b      	lsls	r3, r3, #28
 80032fc:	4943      	ldr	r1, [pc, #268]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003304:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800330a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	493e      	ldr	r1, [pc, #248]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800331a:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800331c:	2201      	movs	r2, #1
 800331e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003320:	f7fe fb26 	bl	8001970 <HAL_GetTick>
 8003324:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003326:	e008      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003328:	f7fe fb22 	bl	8001970 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e0a6      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800333a:	4b34      	ldr	r3, [pc, #208]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003346:	d1ef      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 808d 	beq.w	8003470 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	4b2c      	ldr	r3, [pc, #176]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a2b      	ldr	r2, [pc, #172]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b29      	ldr	r3, [pc, #164]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003372:	4b28      	ldr	r3, [pc, #160]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a27      	ldr	r2, [pc, #156]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800337c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800337e:	f7fe faf7 	bl	8001970 <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003386:	f7fe faf3 	bl	8001970 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e077      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003398:	4b1e      	ldr	r3, [pc, #120]	; (8003414 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d039      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d032      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033d8:	4a0c      	ldr	r2, [pc, #48]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033de:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d11e      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80033ea:	f7fe fac1 	bl	8001970 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	e014      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f2:	f7fe fabd 	bl	8001970 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003400:	4293      	cmp	r3, r2
 8003402:	d90b      	bls.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e03f      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003408:	42470068 	.word	0x42470068
 800340c:	40023800 	.word	0x40023800
 8003410:	42470070 	.word	0x42470070
 8003414:	40007000 	.word	0x40007000
 8003418:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341c:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0e4      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003434:	d10d      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003436:	4b16      	ldr	r3, [pc, #88]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344a:	4911      	ldr	r1, [pc, #68]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]
 8003450:	e005      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003452:	4b0f      	ldr	r3, [pc, #60]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003458:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800345c:	6093      	str	r3, [r2, #8]
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003460:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346a:	4909      	ldr	r1, [pc, #36]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800346c:	4313      	orrs	r3, r2
 800346e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003482:	4b04      	ldr	r3, [pc, #16]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003484:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40023800 	.word	0x40023800
 8003494:	424711e0 	.word	0x424711e0

08003498 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e083      	b.n	80035b2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7f5b      	ldrb	r3, [r3, #29]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd ff66 	bl	800138c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	22ca      	movs	r2, #202	; 0xca
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2253      	movs	r2, #83	; 0x53
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fb84 	bl	8003be4 <RTC_EnterInitMode>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	22ff      	movs	r2, #255	; 0xff
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2204      	movs	r2, #4
 80034ee:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e05e      	b.n	80035b2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003506:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	431a      	orrs	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68d2      	ldr	r2, [r2, #12]
 800352e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6919      	ldr	r1, [r3, #16]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	041a      	lsls	r2, r3, #16
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003552:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10e      	bne.n	8003580 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fb16 	bl	8003b94 <HAL_RTC_WaitForSynchro>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	22ff      	movs	r2, #255	; 0xff
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2204      	movs	r2, #4
 800357a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e018      	b.n	80035b2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800358e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	22ff      	movs	r2, #255	; 0xff
 80035a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80035b0:	2300      	movs	r3, #0
  }
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035ba:	b590      	push	{r4, r7, lr}
 80035bc:	b087      	sub	sp, #28
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	7f1b      	ldrb	r3, [r3, #28]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_RTC_SetTime+0x1c>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e0aa      	b.n	800372c <HAL_RTC_SetTime+0x172>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2202      	movs	r2, #2
 80035e0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d126      	bne.n	8003636 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2200      	movs	r2, #0
 80035fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fb1b 	bl	8003c3c <RTC_ByteToBcd2>
 8003606:	4603      	mov	r3, r0
 8003608:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fb14 	bl	8003c3c <RTC_ByteToBcd2>
 8003614:	4603      	mov	r3, r0
 8003616:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003618:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	789b      	ldrb	r3, [r3, #2]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fb0c 	bl	8003c3c <RTC_ByteToBcd2>
 8003624:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003626:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	78db      	ldrb	r3, [r3, #3]
 800362e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	e018      	b.n	8003668 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	2b00      	cmp	r3, #0
 8003642:	d102      	bne.n	800364a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2200      	movs	r2, #0
 8003648:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	785b      	ldrb	r3, [r3, #1]
 8003654:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003656:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800365c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	78db      	ldrb	r3, [r3, #3]
 8003662:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	22ca      	movs	r2, #202	; 0xca
 800366e:	625a      	str	r2, [r3, #36]	; 0x24
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2253      	movs	r2, #83	; 0x53
 8003676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fab3 	bl	8003be4 <RTC_EnterInitMode>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	22ff      	movs	r2, #255	; 0xff
 800368a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2204      	movs	r2, #4
 8003690:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e047      	b.n	800372c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80036a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80036aa:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036ba:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6899      	ldr	r1, [r3, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d111      	bne.n	8003716 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fa4e 	bl	8003b94 <HAL_RTC_WaitForSynchro>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	22ff      	movs	r2, #255	; 0xff
 8003704:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2204      	movs	r2, #4
 800370a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e00a      	b.n	800372c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800372a:	2300      	movs	r3, #0
  }
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	bd90      	pop	{r4, r7, pc}

08003734 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	7f1b      	ldrb	r3, [r3, #28]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_RTC_SetDate+0x1c>
 800374c:	2302      	movs	r3, #2
 800374e:	e094      	b.n	800387a <HAL_RTC_SetDate+0x146>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2202      	movs	r2, #2
 800375a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10e      	bne.n	8003780 <HAL_RTC_SetDate+0x4c>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	785b      	ldrb	r3, [r3, #1]
 8003766:	f003 0310 	and.w	r3, r3, #16
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	785b      	ldrb	r3, [r3, #1]
 8003772:	f023 0310 	bic.w	r3, r3, #16
 8003776:	b2db      	uxtb	r3, r3
 8003778:	330a      	adds	r3, #10
 800377a:	b2da      	uxtb	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d11c      	bne.n	80037c0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	78db      	ldrb	r3, [r3, #3]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 fa56 	bl	8003c3c <RTC_ByteToBcd2>
 8003790:	4603      	mov	r3, r0
 8003792:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	785b      	ldrb	r3, [r3, #1]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fa4f 	bl	8003c3c <RTC_ByteToBcd2>
 800379e:	4603      	mov	r3, r0
 80037a0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80037a2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	789b      	ldrb	r3, [r3, #2]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fa47 	bl	8003c3c <RTC_ByteToBcd2>
 80037ae:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80037b0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e00e      	b.n	80037de <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	78db      	ldrb	r3, [r3, #3]
 80037c4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	785b      	ldrb	r3, [r3, #1]
 80037ca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037cc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80037d2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80037da:	4313      	orrs	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	22ca      	movs	r2, #202	; 0xca
 80037e4:	625a      	str	r2, [r3, #36]	; 0x24
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2253      	movs	r2, #83	; 0x53
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f9f8 	bl	8003be4 <RTC_EnterInitMode>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	22ff      	movs	r2, #255	; 0xff
 8003800:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2204      	movs	r2, #4
 8003806:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e033      	b.n	800387a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800381c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003820:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003830:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d111      	bne.n	8003864 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f9a7 	bl	8003b94 <HAL_RTC_WaitForSynchro>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	22ff      	movs	r2, #255	; 0xff
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2204      	movs	r2, #4
 8003858:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e00a      	b.n	800387a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	22ff      	movs	r2, #255	; 0xff
 800386a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003878:	2300      	movs	r3, #0
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	bd90      	pop	{r4, r7, pc}
	...

08003884 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003890:	2300      	movs	r3, #0
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8003898:	4b93      	ldr	r3, [pc, #588]	; (8003ae8 <HAL_RTC_SetAlarm_IT+0x264>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a93      	ldr	r2, [pc, #588]	; (8003aec <HAL_RTC_SetAlarm_IT+0x268>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	0adb      	lsrs	r3, r3, #11
 80038a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038a8:	fb02 f303 	mul.w	r3, r2, r3
 80038ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	7f1b      	ldrb	r3, [r3, #28]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_RTC_SetAlarm_IT+0x36>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e111      	b.n	8003ade <HAL_RTC_SetAlarm_IT+0x25a>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2202      	movs	r2, #2
 80038c4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d137      	bne.n	800393c <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d102      	bne.n	80038e0 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2200      	movs	r2, #0
 80038de:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 f9a9 	bl	8003c3c <RTC_ByteToBcd2>
 80038ea:	4603      	mov	r3, r0
 80038ec:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	785b      	ldrb	r3, [r3, #1]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f9a2 	bl	8003c3c <RTC_ByteToBcd2>
 80038f8:	4603      	mov	r3, r0
 80038fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80038fc:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	789b      	ldrb	r3, [r3, #2]
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f99a 	bl	8003c3c <RTC_ByteToBcd2>
 8003908:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800390a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	78db      	ldrb	r3, [r3, #3]
 8003912:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003914:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f98c 	bl	8003c3c <RTC_ByteToBcd2>
 8003924:	4603      	mov	r3, r0
 8003926:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003928:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003930:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003936:	4313      	orrs	r3, r2
 8003938:	61fb      	str	r3, [r7, #28]
 800393a:	e023      	b.n	8003984 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	785b      	ldrb	r3, [r3, #1]
 800395a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800395c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003962:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	78db      	ldrb	r3, [r3, #3]
 8003968:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800396a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003972:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003974:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800397a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003980:	4313      	orrs	r3, r2
 8003982:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	22ca      	movs	r2, #202	; 0xca
 8003996:	625a      	str	r2, [r3, #36]	; 0x24
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2253      	movs	r2, #83	; 0x53
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a8:	d141      	bne.n	8003a2e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039b8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80039ca:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	1e5a      	subs	r2, r3, #1
 80039d0:	617a      	str	r2, [r7, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10b      	bne.n	80039ee <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	22ff      	movs	r2, #255	; 0xff
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2203      	movs	r2, #3
 80039e2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e077      	b.n	8003ade <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0e7      	beq.n	80039cc <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a1a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a2a:	609a      	str	r2, [r3, #8]
 8003a2c:	e040      	b.n	8003ab0 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a3c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003a4e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	1e5a      	subs	r2, r3, #1
 8003a54:	617a      	str	r2, [r7, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	22ff      	movs	r2, #255	; 0xff
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2203      	movs	r2, #3
 8003a66:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e035      	b.n	8003ade <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0e7      	beq.n	8003a50 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aae:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0e      	ldr	r2, [pc, #56]	; (8003af0 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aba:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4a0b      	ldr	r2, [pc, #44]	; (8003af0 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac6:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	22ff      	movs	r2, #255	; 0xff
 8003ace:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	; 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd90      	pop	{r4, r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000000 	.word	0x20000000
 8003aec:	10624dd3 	.word	0x10624dd3
 8003af0:	40013c00 	.word	0x40013c00

08003af4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d012      	beq.n	8003b30 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00b      	beq.n	8003b30 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f831 	bl	8003b80 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003b2e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d012      	beq.n	8003b64 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f8c5 	bl	8003cdc <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003b62:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RTC_AlarmIRQHandler+0x88>)
 8003b66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b6a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	775a      	strb	r2, [r3, #29]
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40013c00 	.word	0x40013c00

08003b80 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fd fede 	bl	8001970 <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003bb6:	e009      	b.n	8003bcc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003bb8:	f7fd feda 	bl	8001970 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bc6:	d901      	bls.n	8003bcc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e007      	b.n	8003bdc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0ee      	beq.n	8003bb8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d119      	bne.n	8003c32 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f04f 32ff 	mov.w	r2, #4294967295
 8003c06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c08:	f7fd feb2 	bl	8001970 <HAL_GetTick>
 8003c0c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c0e:	e009      	b.n	8003c24 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003c10:	f7fd feae 	bl	8001970 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c1e:	d901      	bls.n	8003c24 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e007      	b.n	8003c34 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0ee      	beq.n	8003c10 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003c4a:	e005      	b.n	8003c58 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	3b0a      	subs	r3, #10
 8003c56:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	2b09      	cmp	r3, #9
 8003c5c:	d8f6      	bhi.n	8003c4c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	b2db      	uxtb	r3, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3350      	adds	r3, #80	; 0x50
 8003c8e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4413      	add	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	601a      	str	r2, [r3, #0]
}
 8003ca0:	bf00      	nop
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3350      	adds	r3, #80	; 0x50
 8003cc0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e07b      	b.n	8003dfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d108      	bne.n	8003d1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d12:	d009      	beq.n	8003d28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
 8003d1a:	e005      	b.n	8003d28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fb54 	bl	80013f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dac:	ea42 0103 	orr.w	r1, r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	f003 0104 	and.w	r1, r3, #4
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f003 0210 	and.w	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e041      	b.n	8003e98 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f839 	bl	8003ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2202      	movs	r2, #2
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f000 fae9 	bl	8004418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d001      	beq.n	8003ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e04e      	b.n	8003f6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d022      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef6:	d01d      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_TIM_Base_Start_IT+0xc8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d018      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d013      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00e      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d009      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a19      	ldr	r2, [pc, #100]	; (8003f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d004      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0x80>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d111      	bne.n	8003f58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b06      	cmp	r3, #6
 8003f44:	d010      	beq.n	8003f68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0201 	orr.w	r2, r2, #1
 8003f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f56:	e007      	b.n	8003f68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40000400 	.word	0x40000400
 8003f80:	40000800 	.word	0x40000800
 8003f84:	40000c00 	.word	0x40000c00
 8003f88:	40010400 	.word	0x40010400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40001800 	.word	0x40001800

08003f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e041      	b.n	800402a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd face 	bl	800155c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f000 fa20 	bl	8004418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	d122      	bne.n	800408e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b02      	cmp	r3, #2
 8004054:	d11b      	bne.n	800408e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f06f 0202 	mvn.w	r2, #2
 800405e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f9b1 	bl	80043dc <HAL_TIM_IC_CaptureCallback>
 800407a:	e005      	b.n	8004088 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f9a3 	bl	80043c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9b4 	bl	80043f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b04      	cmp	r3, #4
 800409a:	d122      	bne.n	80040e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d11b      	bne.n	80040e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f06f 0204 	mvn.w	r2, #4
 80040b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2202      	movs	r2, #2
 80040b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 f987 	bl	80043dc <HAL_TIM_IC_CaptureCallback>
 80040ce:	e005      	b.n	80040dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f979 	bl	80043c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f98a 	bl	80043f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d122      	bne.n	8004136 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d11b      	bne.n	8004136 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f06f 0208 	mvn.w	r2, #8
 8004106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2204      	movs	r2, #4
 800410c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f95d 	bl	80043dc <HAL_TIM_IC_CaptureCallback>
 8004122:	e005      	b.n	8004130 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f94f 	bl	80043c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f960 	bl	80043f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b10      	cmp	r3, #16
 8004142:	d122      	bne.n	800418a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0310 	and.w	r3, r3, #16
 800414e:	2b10      	cmp	r3, #16
 8004150:	d11b      	bne.n	800418a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f06f 0210 	mvn.w	r2, #16
 800415a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2208      	movs	r2, #8
 8004160:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f933 	bl	80043dc <HAL_TIM_IC_CaptureCallback>
 8004176:	e005      	b.n	8004184 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f925 	bl	80043c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f936 	bl	80043f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d10e      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d107      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f06f 0201 	mvn.w	r2, #1
 80041ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fc ff8d 	bl	80010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c0:	2b80      	cmp	r3, #128	; 0x80
 80041c2:	d10e      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b80      	cmp	r3, #128	; 0x80
 80041d0:	d107      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fbf1 	bl	80049c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d10e      	bne.n	800420e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d107      	bne.n	800420e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f8fb 	bl	8004404 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b20      	cmp	r3, #32
 800421a:	d10e      	bne.n	800423a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b20      	cmp	r3, #32
 8004228:	d107      	bne.n	800423a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f06f 0220 	mvn.w	r2, #32
 8004232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fbbb 	bl	80049b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800425e:	2302      	movs	r3, #2
 8004260:	e0ae      	b.n	80043c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b0c      	cmp	r3, #12
 800426e:	f200 809f 	bhi.w	80043b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004272:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	080042ad 	.word	0x080042ad
 800427c:	080043b1 	.word	0x080043b1
 8004280:	080043b1 	.word	0x080043b1
 8004284:	080043b1 	.word	0x080043b1
 8004288:	080042ed 	.word	0x080042ed
 800428c:	080043b1 	.word	0x080043b1
 8004290:	080043b1 	.word	0x080043b1
 8004294:	080043b1 	.word	0x080043b1
 8004298:	0800432f 	.word	0x0800432f
 800429c:	080043b1 	.word	0x080043b1
 80042a0:	080043b1 	.word	0x080043b1
 80042a4:	080043b1 	.word	0x080043b1
 80042a8:	0800436f 	.word	0x0800436f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f950 	bl	8004558 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0208 	orr.w	r2, r2, #8
 80042c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0204 	bic.w	r2, r2, #4
 80042d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6999      	ldr	r1, [r3, #24]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	619a      	str	r2, [r3, #24]
      break;
 80042ea:	e064      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f9a0 	bl	8004638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6999      	ldr	r1, [r3, #24]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	021a      	lsls	r2, r3, #8
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	619a      	str	r2, [r3, #24]
      break;
 800432c:	e043      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f9f5 	bl	8004724 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0208 	orr.w	r2, r2, #8
 8004348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0204 	bic.w	r2, r2, #4
 8004358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69d9      	ldr	r1, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	61da      	str	r2, [r3, #28]
      break;
 800436c:	e023      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fa49 	bl	800480c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69da      	ldr	r2, [r3, #28]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69d9      	ldr	r1, [r3, #28]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	021a      	lsls	r2, r3, #8
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	61da      	str	r2, [r3, #28]
      break;
 80043ae:	e002      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]
      break;
 80043b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043be:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a40      	ldr	r2, [pc, #256]	; (800452c <TIM_Base_SetConfig+0x114>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d013      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004436:	d00f      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a3d      	ldr	r2, [pc, #244]	; (8004530 <TIM_Base_SetConfig+0x118>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00b      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a3c      	ldr	r2, [pc, #240]	; (8004534 <TIM_Base_SetConfig+0x11c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d007      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a3b      	ldr	r2, [pc, #236]	; (8004538 <TIM_Base_SetConfig+0x120>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_Base_SetConfig+0x40>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a3a      	ldr	r2, [pc, #232]	; (800453c <TIM_Base_SetConfig+0x124>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d108      	bne.n	800446a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800445e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a2f      	ldr	r2, [pc, #188]	; (800452c <TIM_Base_SetConfig+0x114>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d02b      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004478:	d027      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a2c      	ldr	r2, [pc, #176]	; (8004530 <TIM_Base_SetConfig+0x118>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d023      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a2b      	ldr	r2, [pc, #172]	; (8004534 <TIM_Base_SetConfig+0x11c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01f      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <TIM_Base_SetConfig+0x120>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d01b      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a29      	ldr	r2, [pc, #164]	; (800453c <TIM_Base_SetConfig+0x124>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d017      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a28      	ldr	r2, [pc, #160]	; (8004540 <TIM_Base_SetConfig+0x128>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a27      	ldr	r2, [pc, #156]	; (8004544 <TIM_Base_SetConfig+0x12c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00f      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a26      	ldr	r2, [pc, #152]	; (8004548 <TIM_Base_SetConfig+0x130>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00b      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a25      	ldr	r2, [pc, #148]	; (800454c <TIM_Base_SetConfig+0x134>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d007      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a24      	ldr	r2, [pc, #144]	; (8004550 <TIM_Base_SetConfig+0x138>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d003      	beq.n	80044ca <TIM_Base_SetConfig+0xb2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a23      	ldr	r2, [pc, #140]	; (8004554 <TIM_Base_SetConfig+0x13c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d108      	bne.n	80044dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a0a      	ldr	r2, [pc, #40]	; (800452c <TIM_Base_SetConfig+0x114>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_Base_SetConfig+0xf8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a0c      	ldr	r2, [pc, #48]	; (800453c <TIM_Base_SetConfig+0x124>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d103      	bne.n	8004518 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	615a      	str	r2, [r3, #20]
}
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40010000 	.word	0x40010000
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40000c00 	.word	0x40000c00
 800453c:	40010400 	.word	0x40010400
 8004540:	40014000 	.word	0x40014000
 8004544:	40014400 	.word	0x40014400
 8004548:	40014800 	.word	0x40014800
 800454c:	40001800 	.word	0x40001800
 8004550:	40001c00 	.word	0x40001c00
 8004554:	40002000 	.word	0x40002000

08004558 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	f023 0201 	bic.w	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 0302 	bic.w	r3, r3, #2
 80045a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a20      	ldr	r2, [pc, #128]	; (8004630 <TIM_OC1_SetConfig+0xd8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_OC1_SetConfig+0x64>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <TIM_OC1_SetConfig+0xdc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d10c      	bne.n	80045d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0308 	bic.w	r3, r3, #8
 80045c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 0304 	bic.w	r3, r3, #4
 80045d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a15      	ldr	r2, [pc, #84]	; (8004630 <TIM_OC1_SetConfig+0xd8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d003      	beq.n	80045e6 <TIM_OC1_SetConfig+0x8e>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a14      	ldr	r2, [pc, #80]	; (8004634 <TIM_OC1_SetConfig+0xdc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d111      	bne.n	800460a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	621a      	str	r2, [r3, #32]
}
 8004624:	bf00      	nop
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	40010000 	.word	0x40010000
 8004634:	40010400 	.word	0x40010400

08004638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f023 0210 	bic.w	r2, r3, #16
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f023 0320 	bic.w	r3, r3, #32
 8004682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a22      	ldr	r2, [pc, #136]	; (800471c <TIM_OC2_SetConfig+0xe4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_OC2_SetConfig+0x68>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a21      	ldr	r2, [pc, #132]	; (8004720 <TIM_OC2_SetConfig+0xe8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d10d      	bne.n	80046bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a17      	ldr	r2, [pc, #92]	; (800471c <TIM_OC2_SetConfig+0xe4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d003      	beq.n	80046cc <TIM_OC2_SetConfig+0x94>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a16      	ldr	r2, [pc, #88]	; (8004720 <TIM_OC2_SetConfig+0xe8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d113      	bne.n	80046f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	621a      	str	r2, [r3, #32]
}
 800470e:	bf00      	nop
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40010000 	.word	0x40010000
 8004720:	40010400 	.word	0x40010400

08004724 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800476c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a21      	ldr	r2, [pc, #132]	; (8004804 <TIM_OC3_SetConfig+0xe0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d003      	beq.n	800478a <TIM_OC3_SetConfig+0x66>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a20      	ldr	r2, [pc, #128]	; (8004808 <TIM_OC3_SetConfig+0xe4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d10d      	bne.n	80047a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004790:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a16      	ldr	r2, [pc, #88]	; (8004804 <TIM_OC3_SetConfig+0xe0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d003      	beq.n	80047b6 <TIM_OC3_SetConfig+0x92>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a15      	ldr	r2, [pc, #84]	; (8004808 <TIM_OC3_SetConfig+0xe4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d113      	bne.n	80047de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	4313      	orrs	r3, r2
 80047dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	621a      	str	r2, [r3, #32]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40010000 	.word	0x40010000
 8004808:	40010400 	.word	0x40010400

0800480c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800480c:	b480      	push	{r7}
 800480e:	b087      	sub	sp, #28
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	021b      	lsls	r3, r3, #8
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004856:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	031b      	lsls	r3, r3, #12
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a12      	ldr	r2, [pc, #72]	; (80048b0 <TIM_OC4_SetConfig+0xa4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_OC4_SetConfig+0x68>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a11      	ldr	r2, [pc, #68]	; (80048b4 <TIM_OC4_SetConfig+0xa8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d109      	bne.n	8004888 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800487a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	019b      	lsls	r3, r3, #6
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	621a      	str	r2, [r3, #32]
}
 80048a2:	bf00      	nop
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40010400 	.word	0x40010400

080048b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e05a      	b.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a21      	ldr	r2, [pc, #132]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d022      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491c:	d01d      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1d      	ldr	r2, [pc, #116]	; (8004998 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d018      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1b      	ldr	r2, [pc, #108]	; (800499c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1a      	ldr	r2, [pc, #104]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00e      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d009      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a17      	ldr	r2, [pc, #92]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d004      	beq.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a15      	ldr	r2, [pc, #84]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d10c      	bne.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	4313      	orrs	r3, r2
 800496a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40010400 	.word	0x40010400
 80049a8:	40014000 	.word	0x40014000
 80049ac:	40001800 	.word	0x40001800

080049b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e03f      	b.n	8004a6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fc fe04 	bl	800160c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2224      	movs	r2, #36	; 0x24
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f829 	bl	8004a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a78:	b09f      	sub	sp, #124	; 0x7c
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8a:	68d9      	ldr	r1, [r3, #12]
 8004a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	ea40 0301 	orr.w	r3, r0, r1
 8004a94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ab8:	f021 010c 	bic.w	r1, r1, #12
 8004abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ac2:	430b      	orrs	r3, r1
 8004ac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad2:	6999      	ldr	r1, [r3, #24]
 8004ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	ea40 0301 	orr.w	r3, r0, r1
 8004adc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4bc5      	ldr	r3, [pc, #788]	; (8004df8 <UART_SetConfig+0x384>)
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d004      	beq.n	8004af2 <UART_SetConfig+0x7e>
 8004ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	4bc3      	ldr	r3, [pc, #780]	; (8004dfc <UART_SetConfig+0x388>)
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d103      	bne.n	8004afa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004af2:	f7fe facd 	bl	8003090 <HAL_RCC_GetPCLK2Freq>
 8004af6:	6778      	str	r0, [r7, #116]	; 0x74
 8004af8:	e002      	b.n	8004b00 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004afa:	f7fe fab5 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8004afe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b08:	f040 80b6 	bne.w	8004c78 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b0e:	461c      	mov	r4, r3
 8004b10:	f04f 0500 	mov.w	r5, #0
 8004b14:	4622      	mov	r2, r4
 8004b16:	462b      	mov	r3, r5
 8004b18:	1891      	adds	r1, r2, r2
 8004b1a:	6439      	str	r1, [r7, #64]	; 0x40
 8004b1c:	415b      	adcs	r3, r3
 8004b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b24:	1912      	adds	r2, r2, r4
 8004b26:	eb45 0303 	adc.w	r3, r5, r3
 8004b2a:	f04f 0000 	mov.w	r0, #0
 8004b2e:	f04f 0100 	mov.w	r1, #0
 8004b32:	00d9      	lsls	r1, r3, #3
 8004b34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b38:	00d0      	lsls	r0, r2, #3
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	1911      	adds	r1, r2, r4
 8004b40:	6639      	str	r1, [r7, #96]	; 0x60
 8004b42:	416b      	adcs	r3, r5
 8004b44:	667b      	str	r3, [r7, #100]	; 0x64
 8004b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	1891      	adds	r1, r2, r2
 8004b52:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b54:	415b      	adcs	r3, r3
 8004b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004b60:	f7fb fb46 	bl	80001f0 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4ba5      	ldr	r3, [pc, #660]	; (8004e00 <UART_SetConfig+0x38c>)
 8004b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	011e      	lsls	r6, r3, #4
 8004b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b74:	461c      	mov	r4, r3
 8004b76:	f04f 0500 	mov.w	r5, #0
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	462b      	mov	r3, r5
 8004b7e:	1891      	adds	r1, r2, r2
 8004b80:	6339      	str	r1, [r7, #48]	; 0x30
 8004b82:	415b      	adcs	r3, r3
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
 8004b86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004b8a:	1912      	adds	r2, r2, r4
 8004b8c:	eb45 0303 	adc.w	r3, r5, r3
 8004b90:	f04f 0000 	mov.w	r0, #0
 8004b94:	f04f 0100 	mov.w	r1, #0
 8004b98:	00d9      	lsls	r1, r3, #3
 8004b9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b9e:	00d0      	lsls	r0, r2, #3
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	1911      	adds	r1, r2, r4
 8004ba6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ba8:	416b      	adcs	r3, r5
 8004baa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	1891      	adds	r1, r2, r2
 8004bb8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004bba:	415b      	adcs	r3, r3
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bc2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004bc6:	f7fb fb13 	bl	80001f0 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4b8c      	ldr	r3, [pc, #560]	; (8004e00 <UART_SetConfig+0x38c>)
 8004bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bd4:	095b      	lsrs	r3, r3, #5
 8004bd6:	2164      	movs	r1, #100	; 0x64
 8004bd8:	fb01 f303 	mul.w	r3, r1, r3
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	3332      	adds	r3, #50	; 0x32
 8004be2:	4a87      	ldr	r2, [pc, #540]	; (8004e00 <UART_SetConfig+0x38c>)
 8004be4:	fba2 2303 	umull	r2, r3, r2, r3
 8004be8:	095b      	lsrs	r3, r3, #5
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bf0:	441e      	add	r6, r3
 8004bf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f04f 0100 	mov.w	r1, #0
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	1894      	adds	r4, r2, r2
 8004c00:	623c      	str	r4, [r7, #32]
 8004c02:	415b      	adcs	r3, r3
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
 8004c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c0a:	1812      	adds	r2, r2, r0
 8004c0c:	eb41 0303 	adc.w	r3, r1, r3
 8004c10:	f04f 0400 	mov.w	r4, #0
 8004c14:	f04f 0500 	mov.w	r5, #0
 8004c18:	00dd      	lsls	r5, r3, #3
 8004c1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c1e:	00d4      	lsls	r4, r2, #3
 8004c20:	4622      	mov	r2, r4
 8004c22:	462b      	mov	r3, r5
 8004c24:	1814      	adds	r4, r2, r0
 8004c26:	653c      	str	r4, [r7, #80]	; 0x50
 8004c28:	414b      	adcs	r3, r1
 8004c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	461a      	mov	r2, r3
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	1891      	adds	r1, r2, r2
 8004c38:	61b9      	str	r1, [r7, #24]
 8004c3a:	415b      	adcs	r3, r3
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c46:	f7fb fad3 	bl	80001f0 <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4b6c      	ldr	r3, [pc, #432]	; (8004e00 <UART_SetConfig+0x38c>)
 8004c50:	fba3 1302 	umull	r1, r3, r3, r2
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	2164      	movs	r1, #100	; 0x64
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	3332      	adds	r3, #50	; 0x32
 8004c62:	4a67      	ldr	r2, [pc, #412]	; (8004e00 <UART_SetConfig+0x38c>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	f003 0207 	and.w	r2, r3, #7
 8004c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4432      	add	r2, r6
 8004c74:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c76:	e0b9      	b.n	8004dec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c7a:	461c      	mov	r4, r3
 8004c7c:	f04f 0500 	mov.w	r5, #0
 8004c80:	4622      	mov	r2, r4
 8004c82:	462b      	mov	r3, r5
 8004c84:	1891      	adds	r1, r2, r2
 8004c86:	6139      	str	r1, [r7, #16]
 8004c88:	415b      	adcs	r3, r3
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c90:	1912      	adds	r2, r2, r4
 8004c92:	eb45 0303 	adc.w	r3, r5, r3
 8004c96:	f04f 0000 	mov.w	r0, #0
 8004c9a:	f04f 0100 	mov.w	r1, #0
 8004c9e:	00d9      	lsls	r1, r3, #3
 8004ca0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ca4:	00d0      	lsls	r0, r2, #3
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	eb12 0804 	adds.w	r8, r2, r4
 8004cae:	eb43 0905 	adc.w	r9, r3, r5
 8004cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f04f 0100 	mov.w	r1, #0
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	008b      	lsls	r3, r1, #2
 8004cc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cca:	0082      	lsls	r2, r0, #2
 8004ccc:	4640      	mov	r0, r8
 8004cce:	4649      	mov	r1, r9
 8004cd0:	f7fb fa8e 	bl	80001f0 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4b49      	ldr	r3, [pc, #292]	; (8004e00 <UART_SetConfig+0x38c>)
 8004cda:	fba3 2302 	umull	r2, r3, r3, r2
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	011e      	lsls	r6, r3, #4
 8004ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f04f 0100 	mov.w	r1, #0
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	1894      	adds	r4, r2, r2
 8004cf0:	60bc      	str	r4, [r7, #8]
 8004cf2:	415b      	adcs	r3, r3
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cfa:	1812      	adds	r2, r2, r0
 8004cfc:	eb41 0303 	adc.w	r3, r1, r3
 8004d00:	f04f 0400 	mov.w	r4, #0
 8004d04:	f04f 0500 	mov.w	r5, #0
 8004d08:	00dd      	lsls	r5, r3, #3
 8004d0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d0e:	00d4      	lsls	r4, r2, #3
 8004d10:	4622      	mov	r2, r4
 8004d12:	462b      	mov	r3, r5
 8004d14:	1814      	adds	r4, r2, r0
 8004d16:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d18:	414b      	adcs	r3, r1
 8004d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f04f 0100 	mov.w	r1, #0
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	008b      	lsls	r3, r1, #2
 8004d30:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d34:	0082      	lsls	r2, r0, #2
 8004d36:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d3a:	f7fb fa59 	bl	80001f0 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4b2f      	ldr	r3, [pc, #188]	; (8004e00 <UART_SetConfig+0x38c>)
 8004d44:	fba3 1302 	umull	r1, r3, r3, r2
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	2164      	movs	r1, #100	; 0x64
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	3332      	adds	r3, #50	; 0x32
 8004d56:	4a2a      	ldr	r2, [pc, #168]	; (8004e00 <UART_SetConfig+0x38c>)
 8004d58:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d62:	441e      	add	r6, r3
 8004d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d66:	4618      	mov	r0, r3
 8004d68:	f04f 0100 	mov.w	r1, #0
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	1894      	adds	r4, r2, r2
 8004d72:	603c      	str	r4, [r7, #0]
 8004d74:	415b      	adcs	r3, r3
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d7c:	1812      	adds	r2, r2, r0
 8004d7e:	eb41 0303 	adc.w	r3, r1, r3
 8004d82:	f04f 0400 	mov.w	r4, #0
 8004d86:	f04f 0500 	mov.w	r5, #0
 8004d8a:	00dd      	lsls	r5, r3, #3
 8004d8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d90:	00d4      	lsls	r4, r2, #3
 8004d92:	4622      	mov	r2, r4
 8004d94:	462b      	mov	r3, r5
 8004d96:	eb12 0a00 	adds.w	sl, r2, r0
 8004d9a:	eb43 0b01 	adc.w	fp, r3, r1
 8004d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f04f 0100 	mov.w	r1, #0
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	008b      	lsls	r3, r1, #2
 8004db2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004db6:	0082      	lsls	r2, r0, #2
 8004db8:	4650      	mov	r0, sl
 8004dba:	4659      	mov	r1, fp
 8004dbc:	f7fb fa18 	bl	80001f0 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <UART_SetConfig+0x38c>)
 8004dc6:	fba3 1302 	umull	r1, r3, r3, r2
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2164      	movs	r1, #100	; 0x64
 8004dce:	fb01 f303 	mul.w	r3, r1, r3
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	3332      	adds	r3, #50	; 0x32
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <UART_SetConfig+0x38c>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	f003 020f 	and.w	r2, r3, #15
 8004de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4432      	add	r2, r6
 8004dea:	609a      	str	r2, [r3, #8]
}
 8004dec:	bf00      	nop
 8004dee:	377c      	adds	r7, #124	; 0x7c
 8004df0:	46bd      	mov	sp, r7
 8004df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df6:	bf00      	nop
 8004df8:	40011000 	.word	0x40011000
 8004dfc:	40011400 	.word	0x40011400
 8004e00:	51eb851f 	.word	0x51eb851f

08004e04 <__NVIC_SetPriority>:
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	6039      	str	r1, [r7, #0]
 8004e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	db0a      	blt.n	8004e2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	490c      	ldr	r1, [pc, #48]	; (8004e50 <__NVIC_SetPriority+0x4c>)
 8004e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e22:	0112      	lsls	r2, r2, #4
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	440b      	add	r3, r1
 8004e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e2c:	e00a      	b.n	8004e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	4908      	ldr	r1, [pc, #32]	; (8004e54 <__NVIC_SetPriority+0x50>)
 8004e34:	79fb      	ldrb	r3, [r7, #7]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	3b04      	subs	r3, #4
 8004e3c:	0112      	lsls	r2, r2, #4
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	440b      	add	r3, r1
 8004e42:	761a      	strb	r2, [r3, #24]
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	e000e100 	.word	0xe000e100
 8004e54:	e000ed00 	.word	0xe000ed00

08004e58 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <SysTick_Handler+0x1c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e60:	f001 fe34 	bl	8006acc <xTaskGetSchedulerState>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d001      	beq.n	8004e6e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004e6a:	f002 fc1d 	bl	80076a8 <xPortSysTickHandler>
  }
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	e000e010 	.word	0xe000e010

08004e78 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	f06f 0004 	mvn.w	r0, #4
 8004e82:	f7ff ffbf 	bl	8004e04 <__NVIC_SetPriority>
#endif
}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e92:	f3ef 8305 	mrs	r3, IPSR
 8004e96:	603b      	str	r3, [r7, #0]
  return(result);
 8004e98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e9e:	f06f 0305 	mvn.w	r3, #5
 8004ea2:	607b      	str	r3, [r7, #4]
 8004ea4:	e00c      	b.n	8004ec0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <osKernelInitialize+0x44>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d105      	bne.n	8004eba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004eae:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <osKernelInitialize+0x44>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	e002      	b.n	8004ec0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004eba:	f04f 33ff 	mov.w	r3, #4294967295
 8004ebe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ec0:	687b      	ldr	r3, [r7, #4]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	20000090 	.word	0x20000090

08004ed4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eda:	f3ef 8305 	mrs	r3, IPSR
 8004ede:	603b      	str	r3, [r7, #0]
  return(result);
 8004ee0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <osKernelStart+0x1a>
    stat = osErrorISR;
 8004ee6:	f06f 0305 	mvn.w	r3, #5
 8004eea:	607b      	str	r3, [r7, #4]
 8004eec:	e010      	b.n	8004f10 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004eee:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <osKernelStart+0x48>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d109      	bne.n	8004f0a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ef6:	f7ff ffbf 	bl	8004e78 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004efa:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <osKernelStart+0x48>)
 8004efc:	2202      	movs	r2, #2
 8004efe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f00:	f001 f988 	bl	8006214 <vTaskStartScheduler>
      stat = osOK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	e002      	b.n	8004f10 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f10:	687b      	ldr	r3, [r7, #4]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000090 	.word	0x20000090

08004f20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08e      	sub	sp, #56	; 0x38
 8004f24:	af04      	add	r7, sp, #16
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f30:	f3ef 8305 	mrs	r3, IPSR
 8004f34:	617b      	str	r3, [r7, #20]
  return(result);
 8004f36:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d17e      	bne.n	800503a <osThreadNew+0x11a>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d07b      	beq.n	800503a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f46:	2318      	movs	r3, #24
 8004f48:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f52:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d045      	beq.n	8004fe6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <osThreadNew+0x48>
        name = attr->name;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d008      	beq.n	8004f8e <osThreadNew+0x6e>
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	2b38      	cmp	r3, #56	; 0x38
 8004f80:	d805      	bhi.n	8004f8e <osThreadNew+0x6e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <osThreadNew+0x72>
        return (NULL);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e054      	b.n	800503c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	089b      	lsrs	r3, r3, #2
 8004fa0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00e      	beq.n	8004fc8 <osThreadNew+0xa8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2bbb      	cmp	r3, #187	; 0xbb
 8004fb0:	d90a      	bls.n	8004fc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d006      	beq.n	8004fc8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <osThreadNew+0xa8>
        mem = 1;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	e010      	b.n	8004fea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10c      	bne.n	8004fea <osThreadNew+0xca>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d108      	bne.n	8004fea <osThreadNew+0xca>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <osThreadNew+0xca>
          mem = 0;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e001      	b.n	8004fea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d110      	bne.n	8005012 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ff8:	9202      	str	r2, [sp, #8]
 8004ffa:	9301      	str	r3, [sp, #4]
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6a3a      	ldr	r2, [r7, #32]
 8005004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 ff18 	bl	8005e3c <xTaskCreateStatic>
 800500c:	4603      	mov	r3, r0
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	e013      	b.n	800503a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d110      	bne.n	800503a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	b29a      	uxth	r2, r3
 800501c:	f107 0310 	add.w	r3, r7, #16
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 ff63 	bl	8005ef6 <xTaskCreate>
 8005030:	4603      	mov	r3, r0
 8005032:	2b01      	cmp	r3, #1
 8005034:	d001      	beq.n	800503a <osThreadNew+0x11a>
            hTask = NULL;
 8005036:	2300      	movs	r3, #0
 8005038:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800503a:	693b      	ldr	r3, [r7, #16]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3728      	adds	r7, #40	; 0x28
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800504c:	f3ef 8305 	mrs	r3, IPSR
 8005050:	60bb      	str	r3, [r7, #8]
  return(result);
 8005052:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <osDelay+0x1c>
    stat = osErrorISR;
 8005058:	f06f 0305 	mvn.w	r3, #5
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	e007      	b.n	8005070 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <osDelay+0x2c>
      vTaskDelay(ticks);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f001 f89e 	bl	80061ac <vTaskDelay>
    }
  }

  return (stat);
 8005070:	68fb      	ldr	r3, [r7, #12]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800507a:	b580      	push	{r7, lr}
 800507c:	b088      	sub	sp, #32
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005086:	f3ef 8305 	mrs	r3, IPSR
 800508a:	60bb      	str	r3, [r7, #8]
  return(result);
 800508c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800508e:	2b00      	cmp	r3, #0
 8005090:	d174      	bne.n	800517c <osMutexNew+0x102>
    if (attr != NULL) {
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d003      	beq.n	80050a0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	e001      	b.n	80050a4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <osMutexNew+0x3a>
      rmtx = 1U;
 80050ae:	2301      	movs	r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	e001      	b.n	80050b8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d15c      	bne.n	800517c <osMutexNew+0x102>
      mem = -1;
 80050c2:	f04f 33ff 	mov.w	r3, #4294967295
 80050c6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d015      	beq.n	80050fa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d006      	beq.n	80050e4 <osMutexNew+0x6a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	2b4f      	cmp	r3, #79	; 0x4f
 80050dc:	d902      	bls.n	80050e4 <osMutexNew+0x6a>
          mem = 1;
 80050de:	2301      	movs	r3, #1
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	e00c      	b.n	80050fe <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d108      	bne.n	80050fe <osMutexNew+0x84>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <osMutexNew+0x84>
            mem = 0;
 80050f4:	2300      	movs	r3, #0
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	e001      	b.n	80050fe <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d112      	bne.n	800512a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	4619      	mov	r1, r3
 8005110:	2004      	movs	r0, #4
 8005112:	f000 fa90 	bl	8005636 <xQueueCreateMutexStatic>
 8005116:	61f8      	str	r0, [r7, #28]
 8005118:	e016      	b.n	8005148 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	4619      	mov	r1, r3
 8005120:	2001      	movs	r0, #1
 8005122:	f000 fa88 	bl	8005636 <xQueueCreateMutexStatic>
 8005126:	61f8      	str	r0, [r7, #28]
 8005128:	e00e      	b.n	8005148 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10b      	bne.n	8005148 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d004      	beq.n	8005140 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005136:	2004      	movs	r0, #4
 8005138:	f000 fa65 	bl	8005606 <xQueueCreateMutex>
 800513c:	61f8      	str	r0, [r7, #28]
 800513e:	e003      	b.n	8005148 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005140:	2001      	movs	r0, #1
 8005142:	f000 fa60 	bl	8005606 <xQueueCreateMutex>
 8005146:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00c      	beq.n	8005168 <osMutexNew+0xee>
        if (attr != NULL) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <osMutexNew+0xe2>
          name = attr->name;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	e001      	b.n	8005160 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005160:	68f9      	ldr	r1, [r7, #12]
 8005162:	69f8      	ldr	r0, [r7, #28]
 8005164:	f000 fe0c 	bl	8005d80 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <osMutexNew+0x102>
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f043 0301 	orr.w	r3, r3, #1
 800517a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800517c:	69fb      	ldr	r3, [r7, #28]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a07      	ldr	r2, [pc, #28]	; (80051b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005198:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4a06      	ldr	r2, [pc, #24]	; (80051b8 <vApplicationGetIdleTaskMemory+0x30>)
 800519e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2280      	movs	r2, #128	; 0x80
 80051a4:	601a      	str	r2, [r3, #0]
}
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000094 	.word	0x20000094
 80051b8:	20000150 	.word	0x20000150

080051bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4a07      	ldr	r2, [pc, #28]	; (80051e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80051cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	4a06      	ldr	r2, [pc, #24]	; (80051ec <vApplicationGetTimerTaskMemory+0x30>)
 80051d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051da:	601a      	str	r2, [r3, #0]
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	20000350 	.word	0x20000350
 80051ec:	2000040c 	.word	0x2000040c

080051f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f103 0208 	add.w	r2, r3, #8
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f04f 32ff 	mov.w	r2, #4294967295
 8005208:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f103 0208 	add.w	r2, r3, #8
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f103 0208 	add.w	r2, r3, #8
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	601a      	str	r2, [r3, #0]
}
 8005286:	bf00      	nop
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005292:	b480      	push	{r7}
 8005294:	b085      	sub	sp, #20
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a8:	d103      	bne.n	80052b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	e00c      	b.n	80052cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3308      	adds	r3, #8
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e002      	b.n	80052c0 <vListInsert+0x2e>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d2f6      	bcs.n	80052ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6892      	ldr	r2, [r2, #8]
 800531a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6852      	ldr	r2, [r2, #4]
 8005324:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	d103      	bne.n	8005338 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	1e5a      	subs	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800537e:	bf00      	nop
 8005380:	e7fe      	b.n	8005380 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005382:	f002 f8ff 	bl	8007584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538e:	68f9      	ldr	r1, [r7, #12]
 8005390:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005392:	fb01 f303 	mul.w	r3, r1, r3
 8005396:	441a      	add	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b2:	3b01      	subs	r3, #1
 80053b4:	68f9      	ldr	r1, [r7, #12]
 80053b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	441a      	add	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	22ff      	movs	r2, #255	; 0xff
 80053c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	22ff      	movs	r2, #255	; 0xff
 80053ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d114      	bne.n	8005402 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01a      	beq.n	8005416 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3310      	adds	r3, #16
 80053e4:	4618      	mov	r0, r3
 80053e6:	f001 f9af 	bl	8006748 <xTaskRemoveFromEventList>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d012      	beq.n	8005416 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053f0:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <xQueueGenericReset+0xcc>)
 80053f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	e009      	b.n	8005416 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3310      	adds	r3, #16
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff fef2 	bl	80051f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3324      	adds	r3, #36	; 0x24
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff feed 	bl	80051f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005416:	f002 f8e5 	bl	80075e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800541a:	2301      	movs	r3, #1
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08e      	sub	sp, #56	; 0x38
 800542c:	af02      	add	r7, sp, #8
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10a      	bne.n	8005452 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800544e:	bf00      	nop
 8005450:	e7fe      	b.n	8005450 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545c:	f383 8811 	msr	BASEPRI, r3
 8005460:	f3bf 8f6f 	isb	sy
 8005464:	f3bf 8f4f 	dsb	sy
 8005468:	627b      	str	r3, [r7, #36]	; 0x24
}
 800546a:	bf00      	nop
 800546c:	e7fe      	b.n	800546c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <xQueueGenericCreateStatic+0x52>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <xQueueGenericCreateStatic+0x56>
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <xQueueGenericCreateStatic+0x58>
 800547e:	2300      	movs	r3, #0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	623b      	str	r3, [r7, #32]
}
 8005496:	bf00      	nop
 8005498:	e7fe      	b.n	8005498 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d102      	bne.n	80054a6 <xQueueGenericCreateStatic+0x7e>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <xQueueGenericCreateStatic+0x82>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <xQueueGenericCreateStatic+0x84>
 80054aa:	2300      	movs	r3, #0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	61fb      	str	r3, [r7, #28]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80054c6:	2350      	movs	r3, #80	; 0x50
 80054c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b50      	cmp	r3, #80	; 0x50
 80054ce:	d00a      	beq.n	80054e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	61bb      	str	r3, [r7, #24]
}
 80054e2:	bf00      	nop
 80054e4:	e7fe      	b.n	80054e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80054e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00d      	beq.n	800550e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80054fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80054fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	4613      	mov	r3, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f83f 	bl	800558c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005510:	4618      	mov	r0, r3
 8005512:	3730      	adds	r7, #48	; 0x30
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005518:	b580      	push	{r7, lr}
 800551a:	b08a      	sub	sp, #40	; 0x28
 800551c:	af02      	add	r7, sp, #8
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4613      	mov	r3, r2
 8005524:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10a      	bne.n	8005542 <xQueueGenericCreate+0x2a>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	613b      	str	r3, [r7, #16]
}
 800553e:	bf00      	nop
 8005540:	e7fe      	b.n	8005540 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	fb02 f303 	mul.w	r3, r2, r3
 800554a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	3350      	adds	r3, #80	; 0x50
 8005550:	4618      	mov	r0, r3
 8005552:	f002 f939 	bl	80077c8 <pvPortMalloc>
 8005556:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d011      	beq.n	8005582 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	3350      	adds	r3, #80	; 0x50
 8005566:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005570:	79fa      	ldrb	r2, [r7, #7]
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	4613      	mov	r3, r2
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f805 	bl	800558c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005582:	69bb      	ldr	r3, [r7, #24]
	}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d103      	bne.n	80055a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	e002      	b.n	80055ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80055ba:	2101      	movs	r1, #1
 80055bc:	69b8      	ldr	r0, [r7, #24]
 80055be:	f7ff fecb 	bl	8005358 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	78fa      	ldrb	r2, [r7, #3]
 80055c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b082      	sub	sp, #8
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00e      	beq.n	80055fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80055f2:	2300      	movs	r3, #0
 80055f4:	2200      	movs	r2, #0
 80055f6:	2100      	movs	r1, #0
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f837 	bl	800566c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80055fe:	bf00      	nop
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005606:	b580      	push	{r7, lr}
 8005608:	b086      	sub	sp, #24
 800560a:	af00      	add	r7, sp, #0
 800560c:	4603      	mov	r3, r0
 800560e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005610:	2301      	movs	r3, #1
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	2300      	movs	r3, #0
 8005616:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005618:	79fb      	ldrb	r3, [r7, #7]
 800561a:	461a      	mov	r2, r3
 800561c:	6939      	ldr	r1, [r7, #16]
 800561e:	6978      	ldr	r0, [r7, #20]
 8005620:	f7ff ff7a 	bl	8005518 <xQueueGenericCreate>
 8005624:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff ffd3 	bl	80055d2 <prvInitialiseMutex>

		return xNewQueue;
 800562c:	68fb      	ldr	r3, [r7, #12]
	}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005636:	b580      	push	{r7, lr}
 8005638:	b088      	sub	sp, #32
 800563a:	af02      	add	r7, sp, #8
 800563c:	4603      	mov	r3, r0
 800563e:	6039      	str	r1, [r7, #0]
 8005640:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005642:	2301      	movs	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2200      	movs	r2, #0
 8005652:	6939      	ldr	r1, [r7, #16]
 8005654:	6978      	ldr	r0, [r7, #20]
 8005656:	f7ff fee7 	bl	8005428 <xQueueGenericCreateStatic>
 800565a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f7ff ffb8 	bl	80055d2 <prvInitialiseMutex>

		return xNewQueue;
 8005662:	68fb      	ldr	r3, [r7, #12]
	}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08e      	sub	sp, #56	; 0x38
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800567a:	2300      	movs	r3, #0
 800567c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <xQueueGenericSend+0x32>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d103      	bne.n	80056ac <xQueueGenericSend+0x40>
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <xQueueGenericSend+0x44>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <xQueueGenericSend+0x46>
 80056b0:	2300      	movs	r3, #0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <xQueueGenericSend+0x60>
	__asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056c8:	bf00      	nop
 80056ca:	e7fe      	b.n	80056ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d103      	bne.n	80056da <xQueueGenericSend+0x6e>
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <xQueueGenericSend+0x72>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <xQueueGenericSend+0x74>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <xQueueGenericSend+0x8e>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	623b      	str	r3, [r7, #32]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056fa:	f001 f9e7 	bl	8006acc <xTaskGetSchedulerState>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d102      	bne.n	800570a <xQueueGenericSend+0x9e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <xQueueGenericSend+0xa2>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <xQueueGenericSend+0xa4>
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10a      	bne.n	800572a <xQueueGenericSend+0xbe>
	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	61fb      	str	r3, [r7, #28]
}
 8005726:	bf00      	nop
 8005728:	e7fe      	b.n	8005728 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800572a:	f001 ff2b 	bl	8007584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <xQueueGenericSend+0xd4>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b02      	cmp	r3, #2
 800573e:	d129      	bne.n	8005794 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005746:	f000 fa0b 	bl	8005b60 <prvCopyDataToQueue>
 800574a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d010      	beq.n	8005776 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	3324      	adds	r3, #36	; 0x24
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fff5 	bl	8006748 <xTaskRemoveFromEventList>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d013      	beq.n	800578c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005764:	4b3f      	ldr	r3, [pc, #252]	; (8005864 <xQueueGenericSend+0x1f8>)
 8005766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	e00a      	b.n	800578c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005778:	2b00      	cmp	r3, #0
 800577a:	d007      	beq.n	800578c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800577c:	4b39      	ldr	r3, [pc, #228]	; (8005864 <xQueueGenericSend+0x1f8>)
 800577e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800578c:	f001 ff2a 	bl	80075e4 <vPortExitCritical>
				return pdPASS;
 8005790:	2301      	movs	r3, #1
 8005792:	e063      	b.n	800585c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d103      	bne.n	80057a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800579a:	f001 ff23 	bl	80075e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800579e:	2300      	movs	r3, #0
 80057a0:	e05c      	b.n	800585c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057a8:	f107 0314 	add.w	r3, r7, #20
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 f82f 	bl	8006810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057b2:	2301      	movs	r3, #1
 80057b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057b6:	f001 ff15 	bl	80075e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057ba:	f000 fd9b 	bl	80062f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057be:	f001 fee1 	bl	8007584 <vPortEnterCritical>
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057c8:	b25b      	sxtb	r3, r3
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d103      	bne.n	80057d8 <xQueueGenericSend+0x16c>
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057de:	b25b      	sxtb	r3, r3
 80057e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e4:	d103      	bne.n	80057ee <xQueueGenericSend+0x182>
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ee:	f001 fef9 	bl	80075e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057f2:	1d3a      	adds	r2, r7, #4
 80057f4:	f107 0314 	add.w	r3, r7, #20
 80057f8:	4611      	mov	r1, r2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f001 f81e 	bl	800683c <xTaskCheckForTimeOut>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d124      	bne.n	8005850 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005808:	f000 faa2 	bl	8005d50 <prvIsQueueFull>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d018      	beq.n	8005844 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	3310      	adds	r3, #16
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	4611      	mov	r1, r2
 800581a:	4618      	mov	r0, r3
 800581c:	f000 ff44 	bl	80066a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005822:	f000 fa2d 	bl	8005c80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005826:	f000 fd73 	bl	8006310 <xTaskResumeAll>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	f47f af7c 	bne.w	800572a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005832:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <xQueueGenericSend+0x1f8>)
 8005834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	e772      	b.n	800572a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005846:	f000 fa1b 	bl	8005c80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800584a:	f000 fd61 	bl	8006310 <xTaskResumeAll>
 800584e:	e76c      	b.n	800572a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005852:	f000 fa15 	bl	8005c80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005856:	f000 fd5b 	bl	8006310 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800585a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800585c:	4618      	mov	r0, r3
 800585e:	3738      	adds	r7, #56	; 0x38
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	e000ed04 	.word	0xe000ed04

08005868 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b090      	sub	sp, #64	; 0x40
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800587a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <xQueueGenericSendFromISR+0x3c>
 800589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <xQueueGenericSendFromISR+0x40>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <xQueueGenericSendFromISR+0x42>
 80058a8:	2300      	movs	r3, #0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10a      	bne.n	80058c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058c0:	bf00      	nop
 80058c2:	e7fe      	b.n	80058c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d103      	bne.n	80058d2 <xQueueGenericSendFromISR+0x6a>
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <xQueueGenericSendFromISR+0x6e>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <xQueueGenericSendFromISR+0x70>
 80058d6:	2300      	movs	r3, #0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10a      	bne.n	80058f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	623b      	str	r3, [r7, #32]
}
 80058ee:	bf00      	nop
 80058f0:	e7fe      	b.n	80058f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058f2:	f001 ff29 	bl	8007748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058f6:	f3ef 8211 	mrs	r2, BASEPRI
 80058fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	61fa      	str	r2, [r7, #28]
 800590c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800590e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <xQueueGenericSendFromISR+0xbc>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d12f      	bne.n	8005984 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800592a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800593a:	f000 f911 	bl	8005b60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800593e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d112      	bne.n	800596e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d016      	beq.n	800597e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005952:	3324      	adds	r3, #36	; 0x24
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fef7 	bl	8006748 <xTaskRemoveFromEventList>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00e      	beq.n	800597e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00b      	beq.n	800597e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	e007      	b.n	800597e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800596e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005972:	3301      	adds	r3, #1
 8005974:	b2db      	uxtb	r3, r3
 8005976:	b25a      	sxtb	r2, r3
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800597e:	2301      	movs	r3, #1
 8005980:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005982:	e001      	b.n	8005988 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005984:	2300      	movs	r3, #0
 8005986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005992:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005996:	4618      	mov	r0, r3
 8005998:	3740      	adds	r7, #64	; 0x40
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b08c      	sub	sp, #48	; 0x30
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10a      	bne.n	80059d0 <xQueueReceive+0x30>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	623b      	str	r3, [r7, #32]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d103      	bne.n	80059de <xQueueReceive+0x3e>
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d101      	bne.n	80059e2 <xQueueReceive+0x42>
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <xQueueReceive+0x44>
 80059e2:	2300      	movs	r3, #0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10a      	bne.n	80059fe <xQueueReceive+0x5e>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	61fb      	str	r3, [r7, #28]
}
 80059fa:	bf00      	nop
 80059fc:	e7fe      	b.n	80059fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059fe:	f001 f865 	bl	8006acc <xTaskGetSchedulerState>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <xQueueReceive+0x6e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <xQueueReceive+0x72>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <xQueueReceive+0x74>
 8005a12:	2300      	movs	r3, #0
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xQueueReceive+0x8e>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	61bb      	str	r3, [r7, #24]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a2e:	f001 fda9 	bl	8007584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d01f      	beq.n	8005a7e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a42:	f000 f8f7 	bl	8005c34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a48:	1e5a      	subs	r2, r3, #1
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00f      	beq.n	8005a76 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	3310      	adds	r3, #16
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fe74 	bl	8006748 <xTaskRemoveFromEventList>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d007      	beq.n	8005a76 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a66:	4b3d      	ldr	r3, [pc, #244]	; (8005b5c <xQueueReceive+0x1bc>)
 8005a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a76:	f001 fdb5 	bl	80075e4 <vPortExitCritical>
				return pdPASS;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e069      	b.n	8005b52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d103      	bne.n	8005a8c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a84:	f001 fdae 	bl	80075e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e062      	b.n	8005b52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a92:	f107 0310 	add.w	r3, r7, #16
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 feba 	bl	8006810 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aa0:	f001 fda0 	bl	80075e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aa4:	f000 fc26 	bl	80062f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aa8:	f001 fd6c 	bl	8007584 <vPortEnterCritical>
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ab2:	b25b      	sxtb	r3, r3
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab8:	d103      	bne.n	8005ac2 <xQueueReceive+0x122>
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac8:	b25b      	sxtb	r3, r3
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d103      	bne.n	8005ad8 <xQueueReceive+0x138>
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad8:	f001 fd84 	bl	80075e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005adc:	1d3a      	adds	r2, r7, #4
 8005ade:	f107 0310 	add.w	r3, r7, #16
 8005ae2:	4611      	mov	r1, r2
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fea9 	bl	800683c <xTaskCheckForTimeOut>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d123      	bne.n	8005b38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005af0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af2:	f000 f917 	bl	8005d24 <prvIsQueueEmpty>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d017      	beq.n	8005b2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	3324      	adds	r3, #36	; 0x24
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	4611      	mov	r1, r2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f000 fdcf 	bl	80066a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b0c:	f000 f8b8 	bl	8005c80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b10:	f000 fbfe 	bl	8006310 <xTaskResumeAll>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d189      	bne.n	8005a2e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b1a:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <xQueueReceive+0x1bc>)
 8005b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b20:	601a      	str	r2, [r3, #0]
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	e780      	b.n	8005a2e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b2e:	f000 f8a7 	bl	8005c80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b32:	f000 fbed 	bl	8006310 <xTaskResumeAll>
 8005b36:	e77a      	b.n	8005a2e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b3a:	f000 f8a1 	bl	8005c80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b3e:	f000 fbe7 	bl	8006310 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b44:	f000 f8ee 	bl	8005d24 <prvIsQueueEmpty>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f43f af6f 	beq.w	8005a2e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3730      	adds	r7, #48	; 0x30
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	e000ed04 	.word	0xe000ed04

08005b60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10d      	bne.n	8005b9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d14d      	bne.n	8005c22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 ffbc 	bl	8006b08 <xTaskPriorityDisinherit>
 8005b90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	609a      	str	r2, [r3, #8]
 8005b98:	e043      	b.n	8005c22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d119      	bne.n	8005bd4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6858      	ldr	r0, [r3, #4]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba8:	461a      	mov	r2, r3
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	f002 f81c 	bl	8007be8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	441a      	add	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d32b      	bcc.n	8005c22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	e026      	b.n	8005c22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	68d8      	ldr	r0, [r3, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	461a      	mov	r2, r3
 8005bde:	68b9      	ldr	r1, [r7, #8]
 8005be0:	f002 f802 	bl	8007be8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	425b      	negs	r3, r3
 8005bee:	441a      	add	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d207      	bcs.n	8005c10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	425b      	negs	r3, r3
 8005c0a:	441a      	add	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d105      	bne.n	8005c22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c2a:	697b      	ldr	r3, [r7, #20]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d018      	beq.n	8005c78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	441a      	add	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d303      	bcc.n	8005c68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68d9      	ldr	r1, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	461a      	mov	r2, r3
 8005c72:	6838      	ldr	r0, [r7, #0]
 8005c74:	f001 ffb8 	bl	8007be8 <memcpy>
	}
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c88:	f001 fc7c 	bl	8007584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c94:	e011      	b.n	8005cba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d012      	beq.n	8005cc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3324      	adds	r3, #36	; 0x24
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fd50 	bl	8006748 <xTaskRemoveFromEventList>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cae:	f000 fe27 	bl	8006900 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	dce9      	bgt.n	8005c96 <prvUnlockQueue+0x16>
 8005cc2:	e000      	b.n	8005cc6 <prvUnlockQueue+0x46>
					break;
 8005cc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	22ff      	movs	r2, #255	; 0xff
 8005cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005cce:	f001 fc89 	bl	80075e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005cd2:	f001 fc57 	bl	8007584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005cdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cde:	e011      	b.n	8005d04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d012      	beq.n	8005d0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3310      	adds	r3, #16
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fd2b 	bl	8006748 <xTaskRemoveFromEventList>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cf8:	f000 fe02 	bl	8006900 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cfc:	7bbb      	ldrb	r3, [r7, #14]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	dce9      	bgt.n	8005ce0 <prvUnlockQueue+0x60>
 8005d0c:	e000      	b.n	8005d10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	22ff      	movs	r2, #255	; 0xff
 8005d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d18:	f001 fc64 	bl	80075e4 <vPortExitCritical>
}
 8005d1c:	bf00      	nop
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d2c:	f001 fc2a 	bl	8007584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]
 8005d3c:	e001      	b.n	8005d42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d42:	f001 fc4f 	bl	80075e4 <vPortExitCritical>

	return xReturn;
 8005d46:	68fb      	ldr	r3, [r7, #12]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d58:	f001 fc14 	bl	8007584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d102      	bne.n	8005d6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e001      	b.n	8005d72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d72:	f001 fc37 	bl	80075e4 <vPortExitCritical>

	return xReturn;
 8005d76:	68fb      	ldr	r3, [r7, #12]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	e014      	b.n	8005dba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d90:	4a0f      	ldr	r2, [pc, #60]	; (8005dd0 <vQueueAddToRegistry+0x50>)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10b      	bne.n	8005db4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d9c:	490c      	ldr	r1, [pc, #48]	; (8005dd0 <vQueueAddToRegistry+0x50>)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005da6:	4a0a      	ldr	r2, [pc, #40]	; (8005dd0 <vQueueAddToRegistry+0x50>)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4413      	add	r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005db2:	e006      	b.n	8005dc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b07      	cmp	r3, #7
 8005dbe:	d9e7      	bls.n	8005d90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	20004e60 	.word	0x20004e60

08005dd4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005de4:	f001 fbce 	bl	8007584 <vPortEnterCritical>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dee:	b25b      	sxtb	r3, r3
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df4:	d103      	bne.n	8005dfe <vQueueWaitForMessageRestricted+0x2a>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e04:	b25b      	sxtb	r3, r3
 8005e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0a:	d103      	bne.n	8005e14 <vQueueWaitForMessageRestricted+0x40>
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e14:	f001 fbe6 	bl	80075e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d106      	bne.n	8005e2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	3324      	adds	r3, #36	; 0x24
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fc61 	bl	80066f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e2e:	6978      	ldr	r0, [r7, #20]
 8005e30:	f7ff ff26 	bl	8005c80 <prvUnlockQueue>
	}
 8005e34:	bf00      	nop
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08e      	sub	sp, #56	; 0x38
 8005e40:	af04      	add	r7, sp, #16
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10a      	bne.n	8005e66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	623b      	str	r3, [r7, #32]
}
 8005e62:	bf00      	nop
 8005e64:	e7fe      	b.n	8005e64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	61fb      	str	r3, [r7, #28]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e82:	23bc      	movs	r3, #188	; 0xbc
 8005e84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2bbc      	cmp	r3, #188	; 0xbc
 8005e8a:	d00a      	beq.n	8005ea2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	f383 8811 	msr	BASEPRI, r3
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	61bb      	str	r3, [r7, #24]
}
 8005e9e:	bf00      	nop
 8005ea0:	e7fe      	b.n	8005ea0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ea2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01e      	beq.n	8005ee8 <xTaskCreateStatic+0xac>
 8005eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d01b      	beq.n	8005ee8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	9303      	str	r3, [sp, #12]
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	9302      	str	r3, [sp, #8]
 8005eca:	f107 0314 	add.w	r3, r7, #20
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f850 	bl	8005f80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ee2:	f000 f8f3 	bl	80060cc <prvAddNewTaskToReadyList>
 8005ee6:	e001      	b.n	8005eec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005eec:	697b      	ldr	r3, [r7, #20]
	}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3728      	adds	r7, #40	; 0x28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b08c      	sub	sp, #48	; 0x30
 8005efa:	af04      	add	r7, sp, #16
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	4613      	mov	r3, r2
 8005f04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f06:	88fb      	ldrh	r3, [r7, #6]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 fc5c 	bl	80077c8 <pvPortMalloc>
 8005f10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00e      	beq.n	8005f36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f18:	20bc      	movs	r0, #188	; 0xbc
 8005f1a:	f001 fc55 	bl	80077c8 <pvPortMalloc>
 8005f1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8005f2c:	e005      	b.n	8005f3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f2e:	6978      	ldr	r0, [r7, #20]
 8005f30:	f001 fd16 	bl	8007960 <vPortFree>
 8005f34:	e001      	b.n	8005f3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d017      	beq.n	8005f70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f48:	88fa      	ldrh	r2, [r7, #6]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9303      	str	r3, [sp, #12]
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	9302      	str	r3, [sp, #8]
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f80e 	bl	8005f80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f64:	69f8      	ldr	r0, [r7, #28]
 8005f66:	f000 f8b1 	bl	80060cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	61bb      	str	r3, [r7, #24]
 8005f6e:	e002      	b.n	8005f76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f70:	f04f 33ff 	mov.w	r3, #4294967295
 8005f74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f76:	69bb      	ldr	r3, [r7, #24]
	}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	461a      	mov	r2, r3
 8005f98:	21a5      	movs	r1, #165	; 0xa5
 8005f9a:	f001 fe33 	bl	8007c04 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f023 0307 	bic.w	r3, r3, #7
 8005fb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	617b      	str	r3, [r7, #20]
}
 8005fd4:	bf00      	nop
 8005fd6:	e7fe      	b.n	8005fd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d01f      	beq.n	800601e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	e012      	b.n	800600a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	7819      	ldrb	r1, [r3, #0]
 8005fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3334      	adds	r3, #52	; 0x34
 8005ff4:	460a      	mov	r2, r1
 8005ff6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d006      	beq.n	8006012 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	3301      	adds	r3, #1
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	2b0f      	cmp	r3, #15
 800600e:	d9e9      	bls.n	8005fe4 <prvInitialiseNewTask+0x64>
 8006010:	e000      	b.n	8006014 <prvInitialiseNewTask+0x94>
			{
				break;
 8006012:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800601c:	e003      	b.n	8006026 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	2b37      	cmp	r3, #55	; 0x37
 800602a:	d901      	bls.n	8006030 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800602c:	2337      	movs	r3, #55	; 0x37
 800602e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006034:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800603a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	2200      	movs	r2, #0
 8006040:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	3304      	adds	r3, #4
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff f8f2 	bl	8005230 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	3318      	adds	r3, #24
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff f8ed 	bl	8005230 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800605a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	2200      	movs	r2, #0
 8006070:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	2200      	movs	r2, #0
 8006078:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	3354      	adds	r3, #84	; 0x54
 8006080:	2260      	movs	r2, #96	; 0x60
 8006082:	2100      	movs	r1, #0
 8006084:	4618      	mov	r0, r3
 8006086:	f001 fdbd 	bl	8007c04 <memset>
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	4a0c      	ldr	r2, [pc, #48]	; (80060c0 <prvInitialiseNewTask+0x140>)
 800608e:	659a      	str	r2, [r3, #88]	; 0x58
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	4a0c      	ldr	r2, [pc, #48]	; (80060c4 <prvInitialiseNewTask+0x144>)
 8006094:	65da      	str	r2, [r3, #92]	; 0x5c
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	4a0b      	ldr	r2, [pc, #44]	; (80060c8 <prvInitialiseNewTask+0x148>)
 800609a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	69b8      	ldr	r0, [r7, #24]
 80060a2:	f001 f941 	bl	8007328 <pxPortInitialiseStack>
 80060a6:	4602      	mov	r2, r0
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b8:	bf00      	nop
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	08007f78 	.word	0x08007f78
 80060c4:	08007f98 	.word	0x08007f98
 80060c8:	08007f58 	.word	0x08007f58

080060cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060d4:	f001 fa56 	bl	8007584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060d8:	4b2d      	ldr	r3, [pc, #180]	; (8006190 <prvAddNewTaskToReadyList+0xc4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	4a2c      	ldr	r2, [pc, #176]	; (8006190 <prvAddNewTaskToReadyList+0xc4>)
 80060e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060e2:	4b2c      	ldr	r3, [pc, #176]	; (8006194 <prvAddNewTaskToReadyList+0xc8>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060ea:	4a2a      	ldr	r2, [pc, #168]	; (8006194 <prvAddNewTaskToReadyList+0xc8>)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060f0:	4b27      	ldr	r3, [pc, #156]	; (8006190 <prvAddNewTaskToReadyList+0xc4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d110      	bne.n	800611a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060f8:	f000 fc26 	bl	8006948 <prvInitialiseTaskLists>
 80060fc:	e00d      	b.n	800611a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060fe:	4b26      	ldr	r3, [pc, #152]	; (8006198 <prvAddNewTaskToReadyList+0xcc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d109      	bne.n	800611a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006106:	4b23      	ldr	r3, [pc, #140]	; (8006194 <prvAddNewTaskToReadyList+0xc8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006110:	429a      	cmp	r2, r3
 8006112:	d802      	bhi.n	800611a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006114:	4a1f      	ldr	r2, [pc, #124]	; (8006194 <prvAddNewTaskToReadyList+0xc8>)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800611a:	4b20      	ldr	r3, [pc, #128]	; (800619c <prvAddNewTaskToReadyList+0xd0>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	4a1e      	ldr	r2, [pc, #120]	; (800619c <prvAddNewTaskToReadyList+0xd0>)
 8006122:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006124:	4b1d      	ldr	r3, [pc, #116]	; (800619c <prvAddNewTaskToReadyList+0xd0>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006130:	4b1b      	ldr	r3, [pc, #108]	; (80061a0 <prvAddNewTaskToReadyList+0xd4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d903      	bls.n	8006140 <prvAddNewTaskToReadyList+0x74>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	4a18      	ldr	r2, [pc, #96]	; (80061a0 <prvAddNewTaskToReadyList+0xd4>)
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <prvAddNewTaskToReadyList+0xd8>)
 800614e:	441a      	add	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7ff f877 	bl	800524a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800615c:	f001 fa42 	bl	80075e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006160:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <prvAddNewTaskToReadyList+0xcc>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00e      	beq.n	8006186 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006168:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <prvAddNewTaskToReadyList+0xc8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	429a      	cmp	r2, r3
 8006174:	d207      	bcs.n	8006186 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <prvAddNewTaskToReadyList+0xdc>)
 8006178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006186:	bf00      	nop
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000ce0 	.word	0x20000ce0
 8006194:	2000080c 	.word	0x2000080c
 8006198:	20000cec 	.word	0x20000cec
 800619c:	20000cfc 	.word	0x20000cfc
 80061a0:	20000ce8 	.word	0x20000ce8
 80061a4:	20000810 	.word	0x20000810
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d017      	beq.n	80061ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061be:	4b13      	ldr	r3, [pc, #76]	; (800620c <vTaskDelay+0x60>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <vTaskDelay+0x30>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60bb      	str	r3, [r7, #8]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061dc:	f000 f88a 	bl	80062f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061e0:	2100      	movs	r1, #0
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fcfe 	bl	8006be4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061e8:	f000 f892 	bl	8006310 <xTaskResumeAll>
 80061ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d107      	bne.n	8006204 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061f4:	4b06      	ldr	r3, [pc, #24]	; (8006210 <vTaskDelay+0x64>)
 80061f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000d08 	.word	0x20000d08
 8006210:	e000ed04 	.word	0xe000ed04

08006214 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08a      	sub	sp, #40	; 0x28
 8006218:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800621e:	2300      	movs	r3, #0
 8006220:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006222:	463a      	mov	r2, r7
 8006224:	1d39      	adds	r1, r7, #4
 8006226:	f107 0308 	add.w	r3, r7, #8
 800622a:	4618      	mov	r0, r3
 800622c:	f7fe ffac 	bl	8005188 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	9202      	str	r2, [sp, #8]
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	2300      	movs	r3, #0
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	2300      	movs	r3, #0
 8006240:	460a      	mov	r2, r1
 8006242:	4924      	ldr	r1, [pc, #144]	; (80062d4 <vTaskStartScheduler+0xc0>)
 8006244:	4824      	ldr	r0, [pc, #144]	; (80062d8 <vTaskStartScheduler+0xc4>)
 8006246:	f7ff fdf9 	bl	8005e3c <xTaskCreateStatic>
 800624a:	4603      	mov	r3, r0
 800624c:	4a23      	ldr	r2, [pc, #140]	; (80062dc <vTaskStartScheduler+0xc8>)
 800624e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006250:	4b22      	ldr	r3, [pc, #136]	; (80062dc <vTaskStartScheduler+0xc8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e001      	b.n	8006262 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800625e:	2300      	movs	r3, #0
 8006260:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d102      	bne.n	800626e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006268:	f000 fd10 	bl	8006c8c <xTimerCreateTimerTask>
 800626c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d11b      	bne.n	80062ac <vTaskStartScheduler+0x98>
	__asm volatile
 8006274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006278:	f383 8811 	msr	BASEPRI, r3
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	613b      	str	r3, [r7, #16]
}
 8006286:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006288:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <vTaskStartScheduler+0xcc>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	3354      	adds	r3, #84	; 0x54
 800628e:	4a15      	ldr	r2, [pc, #84]	; (80062e4 <vTaskStartScheduler+0xd0>)
 8006290:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006292:	4b15      	ldr	r3, [pc, #84]	; (80062e8 <vTaskStartScheduler+0xd4>)
 8006294:	f04f 32ff 	mov.w	r2, #4294967295
 8006298:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800629a:	4b14      	ldr	r3, [pc, #80]	; (80062ec <vTaskStartScheduler+0xd8>)
 800629c:	2201      	movs	r2, #1
 800629e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062a0:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <vTaskStartScheduler+0xdc>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062a6:	f001 f8cb 	bl	8007440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062aa:	e00e      	b.n	80062ca <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062b2:	d10a      	bne.n	80062ca <vTaskStartScheduler+0xb6>
	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	60fb      	str	r3, [r7, #12]
}
 80062c6:	bf00      	nop
 80062c8:	e7fe      	b.n	80062c8 <vTaskStartScheduler+0xb4>
}
 80062ca:	bf00      	nop
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	08007e20 	.word	0x08007e20
 80062d8:	08006919 	.word	0x08006919
 80062dc:	20000d04 	.word	0x20000d04
 80062e0:	2000080c 	.word	0x2000080c
 80062e4:	20000010 	.word	0x20000010
 80062e8:	20000d00 	.word	0x20000d00
 80062ec:	20000cec 	.word	0x20000cec
 80062f0:	20000ce4 	.word	0x20000ce4

080062f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062f8:	4b04      	ldr	r3, [pc, #16]	; (800630c <vTaskSuspendAll+0x18>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	4a03      	ldr	r2, [pc, #12]	; (800630c <vTaskSuspendAll+0x18>)
 8006300:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006302:	bf00      	nop
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	20000d08 	.word	0x20000d08

08006310 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800631a:	2300      	movs	r3, #0
 800631c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800631e:	4b42      	ldr	r3, [pc, #264]	; (8006428 <xTaskResumeAll+0x118>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <xTaskResumeAll+0x2c>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	603b      	str	r3, [r7, #0]
}
 8006338:	bf00      	nop
 800633a:	e7fe      	b.n	800633a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800633c:	f001 f922 	bl	8007584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006340:	4b39      	ldr	r3, [pc, #228]	; (8006428 <xTaskResumeAll+0x118>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3b01      	subs	r3, #1
 8006346:	4a38      	ldr	r2, [pc, #224]	; (8006428 <xTaskResumeAll+0x118>)
 8006348:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800634a:	4b37      	ldr	r3, [pc, #220]	; (8006428 <xTaskResumeAll+0x118>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d162      	bne.n	8006418 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006352:	4b36      	ldr	r3, [pc, #216]	; (800642c <xTaskResumeAll+0x11c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d05e      	beq.n	8006418 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800635a:	e02f      	b.n	80063bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635c:	4b34      	ldr	r3, [pc, #208]	; (8006430 <xTaskResumeAll+0x120>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3318      	adds	r3, #24
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe ffcb 	bl	8005304 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3304      	adds	r3, #4
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe ffc6 	bl	8005304 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800637c:	4b2d      	ldr	r3, [pc, #180]	; (8006434 <xTaskResumeAll+0x124>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	429a      	cmp	r2, r3
 8006382:	d903      	bls.n	800638c <xTaskResumeAll+0x7c>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	4a2a      	ldr	r2, [pc, #168]	; (8006434 <xTaskResumeAll+0x124>)
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4a27      	ldr	r2, [pc, #156]	; (8006438 <xTaskResumeAll+0x128>)
 800639a:	441a      	add	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3304      	adds	r3, #4
 80063a0:	4619      	mov	r1, r3
 80063a2:	4610      	mov	r0, r2
 80063a4:	f7fe ff51 	bl	800524a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ac:	4b23      	ldr	r3, [pc, #140]	; (800643c <xTaskResumeAll+0x12c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d302      	bcc.n	80063bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80063b6:	4b22      	ldr	r3, [pc, #136]	; (8006440 <xTaskResumeAll+0x130>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063bc:	4b1c      	ldr	r3, [pc, #112]	; (8006430 <xTaskResumeAll+0x120>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d1cb      	bne.n	800635c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063ca:	f000 fb5f 	bl	8006a8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063ce:	4b1d      	ldr	r3, [pc, #116]	; (8006444 <xTaskResumeAll+0x134>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d010      	beq.n	80063fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063da:	f000 f847 	bl	800646c <xTaskIncrementTick>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80063e4:	4b16      	ldr	r3, [pc, #88]	; (8006440 <xTaskResumeAll+0x130>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1f1      	bne.n	80063da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80063f6:	4b13      	ldr	r3, [pc, #76]	; (8006444 <xTaskResumeAll+0x134>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063fc:	4b10      	ldr	r3, [pc, #64]	; (8006440 <xTaskResumeAll+0x130>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d009      	beq.n	8006418 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006404:	2301      	movs	r3, #1
 8006406:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006408:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <xTaskResumeAll+0x138>)
 800640a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006418:	f001 f8e4 	bl	80075e4 <vPortExitCritical>

	return xAlreadyYielded;
 800641c:	68bb      	ldr	r3, [r7, #8]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000d08 	.word	0x20000d08
 800642c:	20000ce0 	.word	0x20000ce0
 8006430:	20000ca0 	.word	0x20000ca0
 8006434:	20000ce8 	.word	0x20000ce8
 8006438:	20000810 	.word	0x20000810
 800643c:	2000080c 	.word	0x2000080c
 8006440:	20000cf4 	.word	0x20000cf4
 8006444:	20000cf0 	.word	0x20000cf0
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006452:	4b05      	ldr	r3, [pc, #20]	; (8006468 <xTaskGetTickCount+0x1c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006458:	687b      	ldr	r3, [r7, #4]
}
 800645a:	4618      	mov	r0, r3
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20000ce4 	.word	0x20000ce4

0800646c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b086      	sub	sp, #24
 8006470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006472:	2300      	movs	r3, #0
 8006474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006476:	4b4f      	ldr	r3, [pc, #316]	; (80065b4 <xTaskIncrementTick+0x148>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f040 808f 	bne.w	800659e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006480:	4b4d      	ldr	r3, [pc, #308]	; (80065b8 <xTaskIncrementTick+0x14c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3301      	adds	r3, #1
 8006486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006488:	4a4b      	ldr	r2, [pc, #300]	; (80065b8 <xTaskIncrementTick+0x14c>)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d120      	bne.n	80064d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006494:	4b49      	ldr	r3, [pc, #292]	; (80065bc <xTaskIncrementTick+0x150>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	603b      	str	r3, [r7, #0]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <xTaskIncrementTick+0x46>
 80064b4:	4b41      	ldr	r3, [pc, #260]	; (80065bc <xTaskIncrementTick+0x150>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	4b41      	ldr	r3, [pc, #260]	; (80065c0 <xTaskIncrementTick+0x154>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a3f      	ldr	r2, [pc, #252]	; (80065bc <xTaskIncrementTick+0x150>)
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	4a3f      	ldr	r2, [pc, #252]	; (80065c0 <xTaskIncrementTick+0x154>)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	4b3e      	ldr	r3, [pc, #248]	; (80065c4 <xTaskIncrementTick+0x158>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	4a3d      	ldr	r2, [pc, #244]	; (80065c4 <xTaskIncrementTick+0x158>)
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	f000 fadb 	bl	8006a8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064d6:	4b3c      	ldr	r3, [pc, #240]	; (80065c8 <xTaskIncrementTick+0x15c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d349      	bcc.n	8006574 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064e0:	4b36      	ldr	r3, [pc, #216]	; (80065bc <xTaskIncrementTick+0x150>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d104      	bne.n	80064f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ea:	4b37      	ldr	r3, [pc, #220]	; (80065c8 <xTaskIncrementTick+0x15c>)
 80064ec:	f04f 32ff 	mov.w	r2, #4294967295
 80064f0:	601a      	str	r2, [r3, #0]
					break;
 80064f2:	e03f      	b.n	8006574 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f4:	4b31      	ldr	r3, [pc, #196]	; (80065bc <xTaskIncrementTick+0x150>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d203      	bcs.n	8006514 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800650c:	4a2e      	ldr	r2, [pc, #184]	; (80065c8 <xTaskIncrementTick+0x15c>)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006512:	e02f      	b.n	8006574 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	3304      	adds	r3, #4
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe fef3 	bl	8005304 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	3318      	adds	r3, #24
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe feea 	bl	8005304 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	4b25      	ldr	r3, [pc, #148]	; (80065cc <xTaskIncrementTick+0x160>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d903      	bls.n	8006544 <xTaskIncrementTick+0xd8>
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	4a22      	ldr	r2, [pc, #136]	; (80065cc <xTaskIncrementTick+0x160>)
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4a1f      	ldr	r2, [pc, #124]	; (80065d0 <xTaskIncrementTick+0x164>)
 8006552:	441a      	add	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	3304      	adds	r3, #4
 8006558:	4619      	mov	r1, r3
 800655a:	4610      	mov	r0, r2
 800655c:	f7fe fe75 	bl	800524a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006564:	4b1b      	ldr	r3, [pc, #108]	; (80065d4 <xTaskIncrementTick+0x168>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	429a      	cmp	r2, r3
 800656c:	d3b8      	bcc.n	80064e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800656e:	2301      	movs	r3, #1
 8006570:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006572:	e7b5      	b.n	80064e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006574:	4b17      	ldr	r3, [pc, #92]	; (80065d4 <xTaskIncrementTick+0x168>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657a:	4915      	ldr	r1, [pc, #84]	; (80065d0 <xTaskIncrementTick+0x164>)
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	440b      	add	r3, r1
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d901      	bls.n	8006590 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800658c:	2301      	movs	r3, #1
 800658e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006590:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <xTaskIncrementTick+0x16c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d007      	beq.n	80065a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006598:	2301      	movs	r3, #1
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	e004      	b.n	80065a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800659e:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <xTaskIncrementTick+0x170>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3301      	adds	r3, #1
 80065a4:	4a0d      	ldr	r2, [pc, #52]	; (80065dc <xTaskIncrementTick+0x170>)
 80065a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065a8:	697b      	ldr	r3, [r7, #20]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000d08 	.word	0x20000d08
 80065b8:	20000ce4 	.word	0x20000ce4
 80065bc:	20000c98 	.word	0x20000c98
 80065c0:	20000c9c 	.word	0x20000c9c
 80065c4:	20000cf8 	.word	0x20000cf8
 80065c8:	20000d00 	.word	0x20000d00
 80065cc:	20000ce8 	.word	0x20000ce8
 80065d0:	20000810 	.word	0x20000810
 80065d4:	2000080c 	.word	0x2000080c
 80065d8:	20000cf4 	.word	0x20000cf4
 80065dc:	20000cf0 	.word	0x20000cf0

080065e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065e6:	4b2a      	ldr	r3, [pc, #168]	; (8006690 <vTaskSwitchContext+0xb0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065ee:	4b29      	ldr	r3, [pc, #164]	; (8006694 <vTaskSwitchContext+0xb4>)
 80065f0:	2201      	movs	r2, #1
 80065f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065f4:	e046      	b.n	8006684 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80065f6:	4b27      	ldr	r3, [pc, #156]	; (8006694 <vTaskSwitchContext+0xb4>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065fc:	4b26      	ldr	r3, [pc, #152]	; (8006698 <vTaskSwitchContext+0xb8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60fb      	str	r3, [r7, #12]
 8006602:	e010      	b.n	8006626 <vTaskSwitchContext+0x46>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10a      	bne.n	8006620 <vTaskSwitchContext+0x40>
	__asm volatile
 800660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660e:	f383 8811 	msr	BASEPRI, r3
 8006612:	f3bf 8f6f 	isb	sy
 8006616:	f3bf 8f4f 	dsb	sy
 800661a:	607b      	str	r3, [r7, #4]
}
 800661c:	bf00      	nop
 800661e:	e7fe      	b.n	800661e <vTaskSwitchContext+0x3e>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	3b01      	subs	r3, #1
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	491d      	ldr	r1, [pc, #116]	; (800669c <vTaskSwitchContext+0xbc>)
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	440b      	add	r3, r1
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0e4      	beq.n	8006604 <vTaskSwitchContext+0x24>
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4613      	mov	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4a15      	ldr	r2, [pc, #84]	; (800669c <vTaskSwitchContext+0xbc>)
 8006646:	4413      	add	r3, r2
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	605a      	str	r2, [r3, #4]
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	3308      	adds	r3, #8
 800665c:	429a      	cmp	r2, r3
 800665e:	d104      	bne.n	800666a <vTaskSwitchContext+0x8a>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a0b      	ldr	r2, [pc, #44]	; (80066a0 <vTaskSwitchContext+0xc0>)
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	4a08      	ldr	r2, [pc, #32]	; (8006698 <vTaskSwitchContext+0xb8>)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800667a:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <vTaskSwitchContext+0xc0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3354      	adds	r3, #84	; 0x54
 8006680:	4a08      	ldr	r2, [pc, #32]	; (80066a4 <vTaskSwitchContext+0xc4>)
 8006682:	6013      	str	r3, [r2, #0]
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	20000d08 	.word	0x20000d08
 8006694:	20000cf4 	.word	0x20000cf4
 8006698:	20000ce8 	.word	0x20000ce8
 800669c:	20000810 	.word	0x20000810
 80066a0:	2000080c 	.word	0x2000080c
 80066a4:	20000010 	.word	0x20000010

080066a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10a      	bne.n	80066ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	60fb      	str	r3, [r7, #12]
}
 80066ca:	bf00      	nop
 80066cc:	e7fe      	b.n	80066cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066ce:	4b07      	ldr	r3, [pc, #28]	; (80066ec <vTaskPlaceOnEventList+0x44>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3318      	adds	r3, #24
 80066d4:	4619      	mov	r1, r3
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fe fddb 	bl	8005292 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066dc:	2101      	movs	r1, #1
 80066de:	6838      	ldr	r0, [r7, #0]
 80066e0:	f000 fa80 	bl	8006be4 <prvAddCurrentTaskToDelayedList>
}
 80066e4:	bf00      	nop
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	2000080c 	.word	0x2000080c

080066f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10a      	bne.n	8006718 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006706:	f383 8811 	msr	BASEPRI, r3
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	f3bf 8f4f 	dsb	sy
 8006712:	617b      	str	r3, [r7, #20]
}
 8006714:	bf00      	nop
 8006716:	e7fe      	b.n	8006716 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <vTaskPlaceOnEventListRestricted+0x54>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3318      	adds	r3, #24
 800671e:	4619      	mov	r1, r3
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7fe fd92 	bl	800524a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800672c:	f04f 33ff 	mov.w	r3, #4294967295
 8006730:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	68b8      	ldr	r0, [r7, #8]
 8006736:	f000 fa55 	bl	8006be4 <prvAddCurrentTaskToDelayedList>
	}
 800673a:	bf00      	nop
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	2000080c 	.word	0x2000080c

08006748 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	60fb      	str	r3, [r7, #12]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	3318      	adds	r3, #24
 8006778:	4618      	mov	r0, r3
 800677a:	f7fe fdc3 	bl	8005304 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800677e:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <xTaskRemoveFromEventList+0xb0>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d11d      	bne.n	80067c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	3304      	adds	r3, #4
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe fdba 	bl	8005304 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006794:	4b19      	ldr	r3, [pc, #100]	; (80067fc <xTaskRemoveFromEventList+0xb4>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d903      	bls.n	80067a4 <xTaskRemoveFromEventList+0x5c>
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	4a16      	ldr	r2, [pc, #88]	; (80067fc <xTaskRemoveFromEventList+0xb4>)
 80067a2:	6013      	str	r3, [r2, #0]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4a13      	ldr	r2, [pc, #76]	; (8006800 <xTaskRemoveFromEventList+0xb8>)
 80067b2:	441a      	add	r2, r3
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4619      	mov	r1, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	f7fe fd45 	bl	800524a <vListInsertEnd>
 80067c0:	e005      	b.n	80067ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	3318      	adds	r3, #24
 80067c6:	4619      	mov	r1, r3
 80067c8:	480e      	ldr	r0, [pc, #56]	; (8006804 <xTaskRemoveFromEventList+0xbc>)
 80067ca:	f7fe fd3e 	bl	800524a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d2:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <xTaskRemoveFromEventList+0xc0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	429a      	cmp	r2, r3
 80067da:	d905      	bls.n	80067e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067e0:	4b0a      	ldr	r3, [pc, #40]	; (800680c <xTaskRemoveFromEventList+0xc4>)
 80067e2:	2201      	movs	r2, #1
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	e001      	b.n	80067ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80067ec:	697b      	ldr	r3, [r7, #20]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	20000d08 	.word	0x20000d08
 80067fc:	20000ce8 	.word	0x20000ce8
 8006800:	20000810 	.word	0x20000810
 8006804:	20000ca0 	.word	0x20000ca0
 8006808:	2000080c 	.word	0x2000080c
 800680c:	20000cf4 	.word	0x20000cf4

08006810 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006818:	4b06      	ldr	r3, [pc, #24]	; (8006834 <vTaskInternalSetTimeOutState+0x24>)
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <vTaskInternalSetTimeOutState+0x28>)
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	605a      	str	r2, [r3, #4]
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	20000cf8 	.word	0x20000cf8
 8006838:	20000ce4 	.word	0x20000ce4

0800683c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10a      	bne.n	8006862 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	613b      	str	r3, [r7, #16]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10a      	bne.n	800687e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	60fb      	str	r3, [r7, #12]
}
 800687a:	bf00      	nop
 800687c:	e7fe      	b.n	800687c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800687e:	f000 fe81 	bl	8007584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006882:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <xTaskCheckForTimeOut+0xbc>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d102      	bne.n	80068a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800689c:	2300      	movs	r3, #0
 800689e:	61fb      	str	r3, [r7, #28]
 80068a0:	e023      	b.n	80068ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b15      	ldr	r3, [pc, #84]	; (80068fc <xTaskCheckForTimeOut+0xc0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d007      	beq.n	80068be <xTaskCheckForTimeOut+0x82>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d302      	bcc.n	80068be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80068b8:	2301      	movs	r3, #1
 80068ba:	61fb      	str	r3, [r7, #28]
 80068bc:	e015      	b.n	80068ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d20b      	bcs.n	80068e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	1ad2      	subs	r2, r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff ff9b 	bl	8006810 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068da:	2300      	movs	r3, #0
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	e004      	b.n	80068ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068e6:	2301      	movs	r3, #1
 80068e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068ea:	f000 fe7b 	bl	80075e4 <vPortExitCritical>

	return xReturn;
 80068ee:	69fb      	ldr	r3, [r7, #28]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3720      	adds	r7, #32
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20000ce4 	.word	0x20000ce4
 80068fc:	20000cf8 	.word	0x20000cf8

08006900 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006904:	4b03      	ldr	r3, [pc, #12]	; (8006914 <vTaskMissedYield+0x14>)
 8006906:	2201      	movs	r2, #1
 8006908:	601a      	str	r2, [r3, #0]
}
 800690a:	bf00      	nop
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	20000cf4 	.word	0x20000cf4

08006918 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006920:	f000 f852 	bl	80069c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006924:	4b06      	ldr	r3, [pc, #24]	; (8006940 <prvIdleTask+0x28>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d9f9      	bls.n	8006920 <prvIdleTask+0x8>
			{
				taskYIELD();
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <prvIdleTask+0x2c>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800693c:	e7f0      	b.n	8006920 <prvIdleTask+0x8>
 800693e:	bf00      	nop
 8006940:	20000810 	.word	0x20000810
 8006944:	e000ed04 	.word	0xe000ed04

08006948 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800694e:	2300      	movs	r3, #0
 8006950:	607b      	str	r3, [r7, #4]
 8006952:	e00c      	b.n	800696e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4a12      	ldr	r2, [pc, #72]	; (80069a8 <prvInitialiseTaskLists+0x60>)
 8006960:	4413      	add	r3, r2
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe fc44 	bl	80051f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3301      	adds	r3, #1
 800696c:	607b      	str	r3, [r7, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b37      	cmp	r3, #55	; 0x37
 8006972:	d9ef      	bls.n	8006954 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006974:	480d      	ldr	r0, [pc, #52]	; (80069ac <prvInitialiseTaskLists+0x64>)
 8006976:	f7fe fc3b 	bl	80051f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800697a:	480d      	ldr	r0, [pc, #52]	; (80069b0 <prvInitialiseTaskLists+0x68>)
 800697c:	f7fe fc38 	bl	80051f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006980:	480c      	ldr	r0, [pc, #48]	; (80069b4 <prvInitialiseTaskLists+0x6c>)
 8006982:	f7fe fc35 	bl	80051f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006986:	480c      	ldr	r0, [pc, #48]	; (80069b8 <prvInitialiseTaskLists+0x70>)
 8006988:	f7fe fc32 	bl	80051f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800698c:	480b      	ldr	r0, [pc, #44]	; (80069bc <prvInitialiseTaskLists+0x74>)
 800698e:	f7fe fc2f 	bl	80051f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006992:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <prvInitialiseTaskLists+0x78>)
 8006994:	4a05      	ldr	r2, [pc, #20]	; (80069ac <prvInitialiseTaskLists+0x64>)
 8006996:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006998:	4b0a      	ldr	r3, [pc, #40]	; (80069c4 <prvInitialiseTaskLists+0x7c>)
 800699a:	4a05      	ldr	r2, [pc, #20]	; (80069b0 <prvInitialiseTaskLists+0x68>)
 800699c:	601a      	str	r2, [r3, #0]
}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000810 	.word	0x20000810
 80069ac:	20000c70 	.word	0x20000c70
 80069b0:	20000c84 	.word	0x20000c84
 80069b4:	20000ca0 	.word	0x20000ca0
 80069b8:	20000cb4 	.word	0x20000cb4
 80069bc:	20000ccc 	.word	0x20000ccc
 80069c0:	20000c98 	.word	0x20000c98
 80069c4:	20000c9c 	.word	0x20000c9c

080069c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069ce:	e019      	b.n	8006a04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069d0:	f000 fdd8 	bl	8007584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d4:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <prvCheckTasksWaitingTermination+0x50>)
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	3304      	adds	r3, #4
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe fc8f 	bl	8005304 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069e6:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <prvCheckTasksWaitingTermination+0x54>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	4a0b      	ldr	r2, [pc, #44]	; (8006a1c <prvCheckTasksWaitingTermination+0x54>)
 80069ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069f0:	4b0b      	ldr	r3, [pc, #44]	; (8006a20 <prvCheckTasksWaitingTermination+0x58>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	4a0a      	ldr	r2, [pc, #40]	; (8006a20 <prvCheckTasksWaitingTermination+0x58>)
 80069f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069fa:	f000 fdf3 	bl	80075e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f810 	bl	8006a24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a04:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <prvCheckTasksWaitingTermination+0x58>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1e1      	bne.n	80069d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	20000cb4 	.word	0x20000cb4
 8006a1c:	20000ce0 	.word	0x20000ce0
 8006a20:	20000cc8 	.word	0x20000cc8

08006a24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	3354      	adds	r3, #84	; 0x54
 8006a30:	4618      	mov	r0, r3
 8006a32:	f001 f8fd 	bl	8007c30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d108      	bne.n	8006a52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 ff8b 	bl	8007960 <vPortFree>
				vPortFree( pxTCB );
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 ff88 	bl	8007960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a50:	e018      	b.n	8006a84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d103      	bne.n	8006a64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 ff7f 	bl	8007960 <vPortFree>
	}
 8006a62:	e00f      	b.n	8006a84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d00a      	beq.n	8006a84 <prvDeleteTCB+0x60>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	60fb      	str	r3, [r7, #12]
}
 8006a80:	bf00      	nop
 8006a82:	e7fe      	b.n	8006a82 <prvDeleteTCB+0x5e>
	}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a92:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <prvResetNextTaskUnblockTime+0x38>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d104      	bne.n	8006aa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <prvResetNextTaskUnblockTime+0x3c>)
 8006a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006aa4:	e008      	b.n	8006ab8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006aa6:	4b07      	ldr	r3, [pc, #28]	; (8006ac4 <prvResetNextTaskUnblockTime+0x38>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	4a04      	ldr	r2, [pc, #16]	; (8006ac8 <prvResetNextTaskUnblockTime+0x3c>)
 8006ab6:	6013      	str	r3, [r2, #0]
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	20000c98 	.word	0x20000c98
 8006ac8:	20000d00 	.word	0x20000d00

08006acc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ad2:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <xTaskGetSchedulerState+0x34>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d102      	bne.n	8006ae0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ada:	2301      	movs	r3, #1
 8006adc:	607b      	str	r3, [r7, #4]
 8006ade:	e008      	b.n	8006af2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ae0:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <xTaskGetSchedulerState+0x38>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ae8:	2302      	movs	r3, #2
 8006aea:	607b      	str	r3, [r7, #4]
 8006aec:	e001      	b.n	8006af2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006aee:	2300      	movs	r3, #0
 8006af0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006af2:	687b      	ldr	r3, [r7, #4]
	}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20000cec 	.word	0x20000cec
 8006b04:	20000d08 	.word	0x20000d08

08006b08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d056      	beq.n	8006bcc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b1e:	4b2e      	ldr	r3, [pc, #184]	; (8006bd8 <xTaskPriorityDisinherit+0xd0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d00a      	beq.n	8006b3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	60fb      	str	r3, [r7, #12]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	60bb      	str	r3, [r7, #8]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b60:	1e5a      	subs	r2, r3, #1
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d02c      	beq.n	8006bcc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d128      	bne.n	8006bcc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe fbc0 	bl	8005304 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4b0f      	ldr	r3, [pc, #60]	; (8006bdc <xTaskPriorityDisinherit+0xd4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d903      	bls.n	8006bac <xTaskPriorityDisinherit+0xa4>
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba8:	4a0c      	ldr	r2, [pc, #48]	; (8006bdc <xTaskPriorityDisinherit+0xd4>)
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4a09      	ldr	r2, [pc, #36]	; (8006be0 <xTaskPriorityDisinherit+0xd8>)
 8006bba:	441a      	add	r2, r3
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	f7fe fb41 	bl	800524a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bcc:	697b      	ldr	r3, [r7, #20]
	}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	2000080c 	.word	0x2000080c
 8006bdc:	20000ce8 	.word	0x20000ce8
 8006be0:	20000810 	.word	0x20000810

08006be4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bee:	4b21      	ldr	r3, [pc, #132]	; (8006c74 <prvAddCurrentTaskToDelayedList+0x90>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bf4:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fe fb82 	bl	8005304 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c06:	d10a      	bne.n	8006c1e <prvAddCurrentTaskToDelayedList+0x3a>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c0e:	4b1a      	ldr	r3, [pc, #104]	; (8006c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	3304      	adds	r3, #4
 8006c14:	4619      	mov	r1, r3
 8006c16:	4819      	ldr	r0, [pc, #100]	; (8006c7c <prvAddCurrentTaskToDelayedList+0x98>)
 8006c18:	f7fe fb17 	bl	800524a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c1c:	e026      	b.n	8006c6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c26:	4b14      	ldr	r3, [pc, #80]	; (8006c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d209      	bcs.n	8006c4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c36:	4b12      	ldr	r3, [pc, #72]	; (8006c80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f7fe fb25 	bl	8005292 <vListInsert>
}
 8006c48:	e010      	b.n	8006c6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c4a:	4b0e      	ldr	r3, [pc, #56]	; (8006c84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4619      	mov	r1, r3
 8006c56:	4610      	mov	r0, r2
 8006c58:	f7fe fb1b 	bl	8005292 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	; (8006c88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d202      	bcs.n	8006c6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c66:	4a08      	ldr	r2, [pc, #32]	; (8006c88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	6013      	str	r3, [r2, #0]
}
 8006c6c:	bf00      	nop
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20000ce4 	.word	0x20000ce4
 8006c78:	2000080c 	.word	0x2000080c
 8006c7c:	20000ccc 	.word	0x20000ccc
 8006c80:	20000c9c 	.word	0x20000c9c
 8006c84:	20000c98 	.word	0x20000c98
 8006c88:	20000d00 	.word	0x20000d00

08006c8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08a      	sub	sp, #40	; 0x28
 8006c90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c96:	f000 fb07 	bl	80072a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c9a:	4b1c      	ldr	r3, [pc, #112]	; (8006d0c <xTimerCreateTimerTask+0x80>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d021      	beq.n	8006ce6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006caa:	1d3a      	adds	r2, r7, #4
 8006cac:	f107 0108 	add.w	r1, r7, #8
 8006cb0:	f107 030c 	add.w	r3, r7, #12
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fe fa81 	bl	80051bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	9202      	str	r2, [sp, #8]
 8006cc2:	9301      	str	r3, [sp, #4]
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	460a      	mov	r2, r1
 8006ccc:	4910      	ldr	r1, [pc, #64]	; (8006d10 <xTimerCreateTimerTask+0x84>)
 8006cce:	4811      	ldr	r0, [pc, #68]	; (8006d14 <xTimerCreateTimerTask+0x88>)
 8006cd0:	f7ff f8b4 	bl	8005e3c <xTaskCreateStatic>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	4a10      	ldr	r2, [pc, #64]	; (8006d18 <xTimerCreateTimerTask+0x8c>)
 8006cd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006cda:	4b0f      	ldr	r3, [pc, #60]	; (8006d18 <xTimerCreateTimerTask+0x8c>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	613b      	str	r3, [r7, #16]
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d02:	697b      	ldr	r3, [r7, #20]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3718      	adds	r7, #24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20000d3c 	.word	0x20000d3c
 8006d10:	08007e28 	.word	0x08007e28
 8006d14:	08006e51 	.word	0x08006e51
 8006d18:	20000d40 	.word	0x20000d40

08006d1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08a      	sub	sp, #40	; 0x28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	623b      	str	r3, [r7, #32]
}
 8006d46:	bf00      	nop
 8006d48:	e7fe      	b.n	8006d48 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d4a:	4b1a      	ldr	r3, [pc, #104]	; (8006db4 <xTimerGenericCommand+0x98>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d02a      	beq.n	8006da8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b05      	cmp	r3, #5
 8006d62:	dc18      	bgt.n	8006d96 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d64:	f7ff feb2 	bl	8006acc <xTaskGetSchedulerState>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d109      	bne.n	8006d82 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d6e:	4b11      	ldr	r3, [pc, #68]	; (8006db4 <xTimerGenericCommand+0x98>)
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	f107 0110 	add.w	r1, r7, #16
 8006d76:	2300      	movs	r3, #0
 8006d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7a:	f7fe fc77 	bl	800566c <xQueueGenericSend>
 8006d7e:	6278      	str	r0, [r7, #36]	; 0x24
 8006d80:	e012      	b.n	8006da8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d82:	4b0c      	ldr	r3, [pc, #48]	; (8006db4 <xTimerGenericCommand+0x98>)
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	f107 0110 	add.w	r1, r7, #16
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f7fe fc6d 	bl	800566c <xQueueGenericSend>
 8006d92:	6278      	str	r0, [r7, #36]	; 0x24
 8006d94:	e008      	b.n	8006da8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d96:	4b07      	ldr	r3, [pc, #28]	; (8006db4 <xTimerGenericCommand+0x98>)
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	f107 0110 	add.w	r1, r7, #16
 8006d9e:	2300      	movs	r3, #0
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	f7fe fd61 	bl	8005868 <xQueueGenericSendFromISR>
 8006da6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3728      	adds	r7, #40	; 0x28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000d3c 	.word	0x20000d3c

08006db8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af02      	add	r7, sp, #8
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc2:	4b22      	ldr	r3, [pc, #136]	; (8006e4c <prvProcessExpiredTimer+0x94>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fe fa97 	bl	8005304 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d022      	beq.n	8006e2a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	699a      	ldr	r2, [r3, #24]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	18d1      	adds	r1, r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	6978      	ldr	r0, [r7, #20]
 8006df2:	f000 f8d1 	bl	8006f98 <prvInsertTimerInActiveList>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01f      	beq.n	8006e3c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	2300      	movs	r3, #0
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	2100      	movs	r1, #0
 8006e06:	6978      	ldr	r0, [r7, #20]
 8006e08:	f7ff ff88 	bl	8006d1c <xTimerGenericCommand>
 8006e0c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d113      	bne.n	8006e3c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	60fb      	str	r3, [r7, #12]
}
 8006e26:	bf00      	nop
 8006e28:	e7fe      	b.n	8006e28 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e30:	f023 0301 	bic.w	r3, r3, #1
 8006e34:	b2da      	uxtb	r2, r3
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	6978      	ldr	r0, [r7, #20]
 8006e42:	4798      	blx	r3
}
 8006e44:	bf00      	nop
 8006e46:	3718      	adds	r7, #24
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20000d34 	.word	0x20000d34

08006e50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e58:	f107 0308 	add.w	r3, r7, #8
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 f857 	bl	8006f10 <prvGetNextExpireTime>
 8006e62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4619      	mov	r1, r3
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f803 	bl	8006e74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e6e:	f000 f8d5 	bl	800701c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e72:	e7f1      	b.n	8006e58 <prvTimerTask+0x8>

08006e74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e7e:	f7ff fa39 	bl	80062f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e82:	f107 0308 	add.w	r3, r7, #8
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 f866 	bl	8006f58 <prvSampleTimeNow>
 8006e8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d130      	bne.n	8006ef6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <prvProcessTimerOrBlockTask+0x3c>
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d806      	bhi.n	8006eb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ea2:	f7ff fa35 	bl	8006310 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006ea6:	68f9      	ldr	r1, [r7, #12]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff ff85 	bl	8006db8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006eae:	e024      	b.n	8006efa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d008      	beq.n	8006ec8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006eb6:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <prvProcessTimerOrBlockTask+0x90>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <prvProcessTimerOrBlockTask+0x50>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e000      	b.n	8006ec6 <prvProcessTimerOrBlockTask+0x52>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ec8:	4b0f      	ldr	r3, [pc, #60]	; (8006f08 <prvProcessTimerOrBlockTask+0x94>)
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	f7fe ff7d 	bl	8005dd4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006eda:	f7ff fa19 	bl	8006310 <xTaskResumeAll>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ee4:	4b09      	ldr	r3, [pc, #36]	; (8006f0c <prvProcessTimerOrBlockTask+0x98>)
 8006ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	f3bf 8f6f 	isb	sy
}
 8006ef4:	e001      	b.n	8006efa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ef6:	f7ff fa0b 	bl	8006310 <xTaskResumeAll>
}
 8006efa:	bf00      	nop
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000d38 	.word	0x20000d38
 8006f08:	20000d3c 	.word	0x20000d3c
 8006f0c:	e000ed04 	.word	0xe000ed04

08006f10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f18:	4b0e      	ldr	r3, [pc, #56]	; (8006f54 <prvGetNextExpireTime+0x44>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <prvGetNextExpireTime+0x16>
 8006f22:	2201      	movs	r2, #1
 8006f24:	e000      	b.n	8006f28 <prvGetNextExpireTime+0x18>
 8006f26:	2200      	movs	r2, #0
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d105      	bne.n	8006f40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f34:	4b07      	ldr	r3, [pc, #28]	; (8006f54 <prvGetNextExpireTime+0x44>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	e001      	b.n	8006f44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f44:	68fb      	ldr	r3, [r7, #12]
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	20000d34 	.word	0x20000d34

08006f58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f60:	f7ff fa74 	bl	800644c <xTaskGetTickCount>
 8006f64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f66:	4b0b      	ldr	r3, [pc, #44]	; (8006f94 <prvSampleTimeNow+0x3c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d205      	bcs.n	8006f7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f70:	f000 f936 	bl	80071e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
 8006f7a:	e002      	b.n	8006f82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f82:	4a04      	ldr	r2, [pc, #16]	; (8006f94 <prvSampleTimeNow+0x3c>)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f88:	68fb      	ldr	r3, [r7, #12]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000d44 	.word	0x20000d44

08006f98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d812      	bhi.n	8006fe4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	1ad2      	subs	r2, r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d302      	bcc.n	8006fd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	617b      	str	r3, [r7, #20]
 8006fd0:	e01b      	b.n	800700a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006fd2:	4b10      	ldr	r3, [pc, #64]	; (8007014 <prvInsertTimerInActiveList+0x7c>)
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4610      	mov	r0, r2
 8006fde:	f7fe f958 	bl	8005292 <vListInsert>
 8006fe2:	e012      	b.n	800700a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d206      	bcs.n	8006ffa <prvInsertTimerInActiveList+0x62>
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d302      	bcc.n	8006ffa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	e007      	b.n	800700a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ffa:	4b07      	ldr	r3, [pc, #28]	; (8007018 <prvInsertTimerInActiveList+0x80>)
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3304      	adds	r3, #4
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f7fe f944 	bl	8005292 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800700a:	697b      	ldr	r3, [r7, #20]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20000d38 	.word	0x20000d38
 8007018:	20000d34 	.word	0x20000d34

0800701c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08e      	sub	sp, #56	; 0x38
 8007020:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007022:	e0ca      	b.n	80071ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	da18      	bge.n	800705c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800702a:	1d3b      	adds	r3, r7, #4
 800702c:	3304      	adds	r3, #4
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10a      	bne.n	800704c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	61fb      	str	r3, [r7, #28]
}
 8007048:	bf00      	nop
 800704a:	e7fe      	b.n	800704a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007052:	6850      	ldr	r0, [r2, #4]
 8007054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007056:	6892      	ldr	r2, [r2, #8]
 8007058:	4611      	mov	r1, r2
 800705a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f2c0 80aa 	blt.w	80071b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d004      	beq.n	800707a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	3304      	adds	r3, #4
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe f945 	bl	8005304 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800707a:	463b      	mov	r3, r7
 800707c:	4618      	mov	r0, r3
 800707e:	f7ff ff6b 	bl	8006f58 <prvSampleTimeNow>
 8007082:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b09      	cmp	r3, #9
 8007088:	f200 8097 	bhi.w	80071ba <prvProcessReceivedCommands+0x19e>
 800708c:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <prvProcessReceivedCommands+0x78>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070bd 	.word	0x080070bd
 8007098:	080070bd 	.word	0x080070bd
 800709c:	080070bd 	.word	0x080070bd
 80070a0:	08007131 	.word	0x08007131
 80070a4:	08007145 	.word	0x08007145
 80070a8:	0800718f 	.word	0x0800718f
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	080070bd 	.word	0x080070bd
 80070b4:	08007131 	.word	0x08007131
 80070b8:	08007145 	.word	0x08007145
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	18d1      	adds	r1, r2, r3
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070dc:	f7ff ff5c 	bl	8006f98 <prvInsertTimerInActiveList>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d069      	beq.n	80071ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d05e      	beq.n	80071ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	441a      	add	r2, r3
 8007104:	2300      	movs	r3, #0
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	2300      	movs	r3, #0
 800710a:	2100      	movs	r1, #0
 800710c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710e:	f7ff fe05 	bl	8006d1c <xTimerGenericCommand>
 8007112:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d14f      	bne.n	80071ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	61bb      	str	r3, [r7, #24]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007136:	f023 0301 	bic.w	r3, r3, #1
 800713a:	b2da      	uxtb	r2, r3
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007142:	e03a      	b.n	80071ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800714a:	f043 0301 	orr.w	r3, r3, #1
 800714e:	b2da      	uxtb	r2, r3
 8007150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007152:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10a      	bne.n	800717a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	617b      	str	r3, [r7, #20]
}
 8007176:	bf00      	nop
 8007178:	e7fe      	b.n	8007178 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	699a      	ldr	r2, [r3, #24]
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	18d1      	adds	r1, r2, r3
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007188:	f7ff ff06 	bl	8006f98 <prvInsertTimerInActiveList>
					break;
 800718c:	e015      	b.n	80071ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007194:	f003 0302 	and.w	r3, r3, #2
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800719c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800719e:	f000 fbdf 	bl	8007960 <vPortFree>
 80071a2:	e00a      	b.n	80071ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071aa:	f023 0301 	bic.w	r3, r3, #1
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071b6:	e000      	b.n	80071ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80071b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071ba:	4b08      	ldr	r3, [pc, #32]	; (80071dc <prvProcessReceivedCommands+0x1c0>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	1d39      	adds	r1, r7, #4
 80071c0:	2200      	movs	r2, #0
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fe fbec 	bl	80059a0 <xQueueReceive>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f47f af2a 	bne.w	8007024 <prvProcessReceivedCommands+0x8>
	}
}
 80071d0:	bf00      	nop
 80071d2:	bf00      	nop
 80071d4:	3730      	adds	r7, #48	; 0x30
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20000d3c 	.word	0x20000d3c

080071e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071e6:	e048      	b.n	800727a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071e8:	4b2d      	ldr	r3, [pc, #180]	; (80072a0 <prvSwitchTimerLists+0xc0>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071f2:	4b2b      	ldr	r3, [pc, #172]	; (80072a0 <prvSwitchTimerLists+0xc0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3304      	adds	r3, #4
 8007200:	4618      	mov	r0, r3
 8007202:	f7fe f87f 	bl	8005304 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d02e      	beq.n	800727a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4413      	add	r3, r2
 8007224:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	429a      	cmp	r2, r3
 800722c:	d90e      	bls.n	800724c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	68ba      	ldr	r2, [r7, #8]
 8007232:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800723a:	4b19      	ldr	r3, [pc, #100]	; (80072a0 <prvSwitchTimerLists+0xc0>)
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	3304      	adds	r3, #4
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7fe f824 	bl	8005292 <vListInsert>
 800724a:	e016      	b.n	800727a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800724c:	2300      	movs	r3, #0
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	2300      	movs	r3, #0
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	2100      	movs	r1, #0
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f7ff fd60 	bl	8006d1c <xTimerGenericCommand>
 800725c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	603b      	str	r3, [r7, #0]
}
 8007276:	bf00      	nop
 8007278:	e7fe      	b.n	8007278 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800727a:	4b09      	ldr	r3, [pc, #36]	; (80072a0 <prvSwitchTimerLists+0xc0>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1b1      	bne.n	80071e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <prvSwitchTimerLists+0xc0>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800728a:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <prvSwitchTimerLists+0xc4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a04      	ldr	r2, [pc, #16]	; (80072a0 <prvSwitchTimerLists+0xc0>)
 8007290:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007292:	4a04      	ldr	r2, [pc, #16]	; (80072a4 <prvSwitchTimerLists+0xc4>)
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	6013      	str	r3, [r2, #0]
}
 8007298:	bf00      	nop
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	20000d34 	.word	0x20000d34
 80072a4:	20000d38 	.word	0x20000d38

080072a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072ae:	f000 f969 	bl	8007584 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072b2:	4b15      	ldr	r3, [pc, #84]	; (8007308 <prvCheckForValidListAndQueue+0x60>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d120      	bne.n	80072fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072ba:	4814      	ldr	r0, [pc, #80]	; (800730c <prvCheckForValidListAndQueue+0x64>)
 80072bc:	f7fd ff98 	bl	80051f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80072c0:	4813      	ldr	r0, [pc, #76]	; (8007310 <prvCheckForValidListAndQueue+0x68>)
 80072c2:	f7fd ff95 	bl	80051f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80072c6:	4b13      	ldr	r3, [pc, #76]	; (8007314 <prvCheckForValidListAndQueue+0x6c>)
 80072c8:	4a10      	ldr	r2, [pc, #64]	; (800730c <prvCheckForValidListAndQueue+0x64>)
 80072ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072cc:	4b12      	ldr	r3, [pc, #72]	; (8007318 <prvCheckForValidListAndQueue+0x70>)
 80072ce:	4a10      	ldr	r2, [pc, #64]	; (8007310 <prvCheckForValidListAndQueue+0x68>)
 80072d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072d2:	2300      	movs	r3, #0
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	4b11      	ldr	r3, [pc, #68]	; (800731c <prvCheckForValidListAndQueue+0x74>)
 80072d8:	4a11      	ldr	r2, [pc, #68]	; (8007320 <prvCheckForValidListAndQueue+0x78>)
 80072da:	2110      	movs	r1, #16
 80072dc:	200a      	movs	r0, #10
 80072de:	f7fe f8a3 	bl	8005428 <xQueueGenericCreateStatic>
 80072e2:	4603      	mov	r3, r0
 80072e4:	4a08      	ldr	r2, [pc, #32]	; (8007308 <prvCheckForValidListAndQueue+0x60>)
 80072e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072e8:	4b07      	ldr	r3, [pc, #28]	; (8007308 <prvCheckForValidListAndQueue+0x60>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072f0:	4b05      	ldr	r3, [pc, #20]	; (8007308 <prvCheckForValidListAndQueue+0x60>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	490b      	ldr	r1, [pc, #44]	; (8007324 <prvCheckForValidListAndQueue+0x7c>)
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fe fd42 	bl	8005d80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072fc:	f000 f972 	bl	80075e4 <vPortExitCritical>
}
 8007300:	bf00      	nop
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000d3c 	.word	0x20000d3c
 800730c:	20000d0c 	.word	0x20000d0c
 8007310:	20000d20 	.word	0x20000d20
 8007314:	20000d34 	.word	0x20000d34
 8007318:	20000d38 	.word	0x20000d38
 800731c:	20000de8 	.word	0x20000de8
 8007320:	20000d48 	.word	0x20000d48
 8007324:	08007e30 	.word	0x08007e30

08007328 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	3b04      	subs	r3, #4
 8007338:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	3b04      	subs	r3, #4
 8007346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f023 0201 	bic.w	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	3b04      	subs	r3, #4
 8007356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007358:	4a0c      	ldr	r2, [pc, #48]	; (800738c <pxPortInitialiseStack+0x64>)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3b14      	subs	r3, #20
 8007362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3b04      	subs	r3, #4
 800736e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f06f 0202 	mvn.w	r2, #2
 8007376:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3b20      	subs	r3, #32
 800737c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800737e:	68fb      	ldr	r3, [r7, #12]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	08007391 	.word	0x08007391

08007390 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800739a:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <prvTaskExitError+0x54>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a2:	d00a      	beq.n	80073ba <prvTaskExitError+0x2a>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	60fb      	str	r3, [r7, #12]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <prvTaskExitError+0x28>
	__asm volatile
 80073ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073be:	f383 8811 	msr	BASEPRI, r3
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	f3bf 8f4f 	dsb	sy
 80073ca:	60bb      	str	r3, [r7, #8]
}
 80073cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073ce:	bf00      	nop
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d0fc      	beq.n	80073d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073d6:	bf00      	nop
 80073d8:	bf00      	nop
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	2000000c 	.word	0x2000000c
	...

080073f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073f0:	4b07      	ldr	r3, [pc, #28]	; (8007410 <pxCurrentTCBConst2>)
 80073f2:	6819      	ldr	r1, [r3, #0]
 80073f4:	6808      	ldr	r0, [r1, #0]
 80073f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073fa:	f380 8809 	msr	PSP, r0
 80073fe:	f3bf 8f6f 	isb	sy
 8007402:	f04f 0000 	mov.w	r0, #0
 8007406:	f380 8811 	msr	BASEPRI, r0
 800740a:	4770      	bx	lr
 800740c:	f3af 8000 	nop.w

08007410 <pxCurrentTCBConst2>:
 8007410:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop

08007418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007418:	4808      	ldr	r0, [pc, #32]	; (800743c <prvPortStartFirstTask+0x24>)
 800741a:	6800      	ldr	r0, [r0, #0]
 800741c:	6800      	ldr	r0, [r0, #0]
 800741e:	f380 8808 	msr	MSP, r0
 8007422:	f04f 0000 	mov.w	r0, #0
 8007426:	f380 8814 	msr	CONTROL, r0
 800742a:	b662      	cpsie	i
 800742c:	b661      	cpsie	f
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	df00      	svc	0
 8007438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800743a:	bf00      	nop
 800743c:	e000ed08 	.word	0xe000ed08

08007440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007446:	4b46      	ldr	r3, [pc, #280]	; (8007560 <xPortStartScheduler+0x120>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a46      	ldr	r2, [pc, #280]	; (8007564 <xPortStartScheduler+0x124>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d10a      	bne.n	8007466 <xPortStartScheduler+0x26>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	613b      	str	r3, [r7, #16]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007466:	4b3e      	ldr	r3, [pc, #248]	; (8007560 <xPortStartScheduler+0x120>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a3f      	ldr	r2, [pc, #252]	; (8007568 <xPortStartScheduler+0x128>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d10a      	bne.n	8007486 <xPortStartScheduler+0x46>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	60fb      	str	r3, [r7, #12]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007486:	4b39      	ldr	r3, [pc, #228]	; (800756c <xPortStartScheduler+0x12c>)
 8007488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	b2db      	uxtb	r3, r3
 8007490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	22ff      	movs	r2, #255	; 0xff
 8007496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	4b31      	ldr	r3, [pc, #196]	; (8007570 <xPortStartScheduler+0x130>)
 80074ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074ae:	4b31      	ldr	r3, [pc, #196]	; (8007574 <xPortStartScheduler+0x134>)
 80074b0:	2207      	movs	r2, #7
 80074b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074b4:	e009      	b.n	80074ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074b6:	4b2f      	ldr	r3, [pc, #188]	; (8007574 <xPortStartScheduler+0x134>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	4a2d      	ldr	r2, [pc, #180]	; (8007574 <xPortStartScheduler+0x134>)
 80074be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074ca:	78fb      	ldrb	r3, [r7, #3]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d2:	2b80      	cmp	r3, #128	; 0x80
 80074d4:	d0ef      	beq.n	80074b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074d6:	4b27      	ldr	r3, [pc, #156]	; (8007574 <xPortStartScheduler+0x134>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f1c3 0307 	rsb	r3, r3, #7
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d00a      	beq.n	80074f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	60bb      	str	r3, [r7, #8]
}
 80074f4:	bf00      	nop
 80074f6:	e7fe      	b.n	80074f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074f8:	4b1e      	ldr	r3, [pc, #120]	; (8007574 <xPortStartScheduler+0x134>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	4a1d      	ldr	r2, [pc, #116]	; (8007574 <xPortStartScheduler+0x134>)
 8007500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007502:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <xPortStartScheduler+0x134>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800750a:	4a1a      	ldr	r2, [pc, #104]	; (8007574 <xPortStartScheduler+0x134>)
 800750c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	b2da      	uxtb	r2, r3
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007516:	4b18      	ldr	r3, [pc, #96]	; (8007578 <xPortStartScheduler+0x138>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a17      	ldr	r2, [pc, #92]	; (8007578 <xPortStartScheduler+0x138>)
 800751c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <xPortStartScheduler+0x138>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a14      	ldr	r2, [pc, #80]	; (8007578 <xPortStartScheduler+0x138>)
 8007528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800752c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800752e:	f000 f8dd 	bl	80076ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007532:	4b12      	ldr	r3, [pc, #72]	; (800757c <xPortStartScheduler+0x13c>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007538:	f000 f8fc 	bl	8007734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800753c:	4b10      	ldr	r3, [pc, #64]	; (8007580 <xPortStartScheduler+0x140>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a0f      	ldr	r2, [pc, #60]	; (8007580 <xPortStartScheduler+0x140>)
 8007542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007548:	f7ff ff66 	bl	8007418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800754c:	f7ff f848 	bl	80065e0 <vTaskSwitchContext>
	prvTaskExitError();
 8007550:	f7ff ff1e 	bl	8007390 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	e000ed00 	.word	0xe000ed00
 8007564:	410fc271 	.word	0x410fc271
 8007568:	410fc270 	.word	0x410fc270
 800756c:	e000e400 	.word	0xe000e400
 8007570:	20000e38 	.word	0x20000e38
 8007574:	20000e3c 	.word	0x20000e3c
 8007578:	e000ed20 	.word	0xe000ed20
 800757c:	2000000c 	.word	0x2000000c
 8007580:	e000ef34 	.word	0xe000ef34

08007584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
	__asm volatile
 800758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	607b      	str	r3, [r7, #4]
}
 800759c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800759e:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <vPortEnterCritical+0x58>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3301      	adds	r3, #1
 80075a4:	4a0d      	ldr	r2, [pc, #52]	; (80075dc <vPortEnterCritical+0x58>)
 80075a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075a8:	4b0c      	ldr	r3, [pc, #48]	; (80075dc <vPortEnterCritical+0x58>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d10f      	bne.n	80075d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075b0:	4b0b      	ldr	r3, [pc, #44]	; (80075e0 <vPortEnterCritical+0x5c>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00a      	beq.n	80075d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	603b      	str	r3, [r7, #0]
}
 80075cc:	bf00      	nop
 80075ce:	e7fe      	b.n	80075ce <vPortEnterCritical+0x4a>
	}
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	2000000c 	.word	0x2000000c
 80075e0:	e000ed04 	.word	0xe000ed04

080075e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075ea:	4b12      	ldr	r3, [pc, #72]	; (8007634 <vPortExitCritical+0x50>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10a      	bne.n	8007608 <vPortExitCritical+0x24>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	607b      	str	r3, [r7, #4]
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007608:	4b0a      	ldr	r3, [pc, #40]	; (8007634 <vPortExitCritical+0x50>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3b01      	subs	r3, #1
 800760e:	4a09      	ldr	r2, [pc, #36]	; (8007634 <vPortExitCritical+0x50>)
 8007610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007612:	4b08      	ldr	r3, [pc, #32]	; (8007634 <vPortExitCritical+0x50>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d105      	bne.n	8007626 <vPortExitCritical+0x42>
 800761a:	2300      	movs	r3, #0
 800761c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	f383 8811 	msr	BASEPRI, r3
}
 8007624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	2000000c 	.word	0x2000000c
	...

08007640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007640:	f3ef 8009 	mrs	r0, PSP
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	4b15      	ldr	r3, [pc, #84]	; (80076a0 <pxCurrentTCBConst>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	f01e 0f10 	tst.w	lr, #16
 8007650:	bf08      	it	eq
 8007652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765a:	6010      	str	r0, [r2, #0]
 800765c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007664:	f380 8811 	msr	BASEPRI, r0
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f7fe ffb6 	bl	80065e0 <vTaskSwitchContext>
 8007674:	f04f 0000 	mov.w	r0, #0
 8007678:	f380 8811 	msr	BASEPRI, r0
 800767c:	bc09      	pop	{r0, r3}
 800767e:	6819      	ldr	r1, [r3, #0]
 8007680:	6808      	ldr	r0, [r1, #0]
 8007682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007686:	f01e 0f10 	tst.w	lr, #16
 800768a:	bf08      	it	eq
 800768c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007690:	f380 8809 	msr	PSP, r0
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	f3af 8000 	nop.w

080076a0 <pxCurrentTCBConst>:
 80076a0:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop

080076a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
	__asm volatile
 80076ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b2:	f383 8811 	msr	BASEPRI, r3
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	f3bf 8f4f 	dsb	sy
 80076be:	607b      	str	r3, [r7, #4]
}
 80076c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076c2:	f7fe fed3 	bl	800646c <xTaskIncrementTick>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <xPortSysTickHandler+0x40>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	2300      	movs	r3, #0
 80076d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	f383 8811 	msr	BASEPRI, r3
}
 80076de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076e0:	bf00      	nop
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	e000ed04 	.word	0xe000ed04

080076ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076f0:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <vPortSetupTimerInterrupt+0x34>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076f6:	4b0b      	ldr	r3, [pc, #44]	; (8007724 <vPortSetupTimerInterrupt+0x38>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076fc:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <vPortSetupTimerInterrupt+0x3c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a0a      	ldr	r2, [pc, #40]	; (800772c <vPortSetupTimerInterrupt+0x40>)
 8007702:	fba2 2303 	umull	r2, r3, r2, r3
 8007706:	099b      	lsrs	r3, r3, #6
 8007708:	4a09      	ldr	r2, [pc, #36]	; (8007730 <vPortSetupTimerInterrupt+0x44>)
 800770a:	3b01      	subs	r3, #1
 800770c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800770e:	4b04      	ldr	r3, [pc, #16]	; (8007720 <vPortSetupTimerInterrupt+0x34>)
 8007710:	2207      	movs	r2, #7
 8007712:	601a      	str	r2, [r3, #0]
}
 8007714:	bf00      	nop
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	e000e010 	.word	0xe000e010
 8007724:	e000e018 	.word	0xe000e018
 8007728:	20000000 	.word	0x20000000
 800772c:	10624dd3 	.word	0x10624dd3
 8007730:	e000e014 	.word	0xe000e014

08007734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007744 <vPortEnableVFP+0x10>
 8007738:	6801      	ldr	r1, [r0, #0]
 800773a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800773e:	6001      	str	r1, [r0, #0]
 8007740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007742:	bf00      	nop
 8007744:	e000ed88 	.word	0xe000ed88

08007748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800774e:	f3ef 8305 	mrs	r3, IPSR
 8007752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2b0f      	cmp	r3, #15
 8007758:	d914      	bls.n	8007784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800775a:	4a17      	ldr	r2, [pc, #92]	; (80077b8 <vPortValidateInterruptPriority+0x70>)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4413      	add	r3, r2
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007764:	4b15      	ldr	r3, [pc, #84]	; (80077bc <vPortValidateInterruptPriority+0x74>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	7afa      	ldrb	r2, [r7, #11]
 800776a:	429a      	cmp	r2, r3
 800776c:	d20a      	bcs.n	8007784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	607b      	str	r3, [r7, #4]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007784:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <vPortValidateInterruptPriority+0x78>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800778c:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <vPortValidateInterruptPriority+0x7c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	429a      	cmp	r2, r3
 8007792:	d90a      	bls.n	80077aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	603b      	str	r3, [r7, #0]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <vPortValidateInterruptPriority+0x60>
	}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	e000e3f0 	.word	0xe000e3f0
 80077bc:	20000e38 	.word	0x20000e38
 80077c0:	e000ed0c 	.word	0xe000ed0c
 80077c4:	20000e3c 	.word	0x20000e3c

080077c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	; 0x28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077d4:	f7fe fd8e 	bl	80062f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077d8:	4b5b      	ldr	r3, [pc, #364]	; (8007948 <pvPortMalloc+0x180>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077e0:	f000 f920 	bl	8007a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077e4:	4b59      	ldr	r3, [pc, #356]	; (800794c <pvPortMalloc+0x184>)
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f040 8093 	bne.w	8007918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01d      	beq.n	8007834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80077f8:	2208      	movs	r2, #8
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4413      	add	r3, r2
 80077fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f003 0307 	and.w	r3, r3, #7
 8007806:	2b00      	cmp	r3, #0
 8007808:	d014      	beq.n	8007834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f023 0307 	bic.w	r3, r3, #7
 8007810:	3308      	adds	r3, #8
 8007812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <pvPortMalloc+0x6c>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	617b      	str	r3, [r7, #20]
}
 8007830:	bf00      	nop
 8007832:	e7fe      	b.n	8007832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d06e      	beq.n	8007918 <pvPortMalloc+0x150>
 800783a:	4b45      	ldr	r3, [pc, #276]	; (8007950 <pvPortMalloc+0x188>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	429a      	cmp	r2, r3
 8007842:	d869      	bhi.n	8007918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007844:	4b43      	ldr	r3, [pc, #268]	; (8007954 <pvPortMalloc+0x18c>)
 8007846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007848:	4b42      	ldr	r3, [pc, #264]	; (8007954 <pvPortMalloc+0x18c>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800784e:	e004      	b.n	800785a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d903      	bls.n	800786c <pvPortMalloc+0xa4>
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1f1      	bne.n	8007850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800786c:	4b36      	ldr	r3, [pc, #216]	; (8007948 <pvPortMalloc+0x180>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007872:	429a      	cmp	r2, r3
 8007874:	d050      	beq.n	8007918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2208      	movs	r2, #8
 800787c:	4413      	add	r3, r2
 800787e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	2308      	movs	r3, #8
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	429a      	cmp	r2, r3
 8007896:	d91f      	bls.n	80078d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4413      	add	r3, r2
 800789e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f003 0307 	and.w	r3, r3, #7
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <pvPortMalloc+0xf8>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	613b      	str	r3, [r7, #16]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	1ad2      	subs	r2, r2, r3
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078d2:	69b8      	ldr	r0, [r7, #24]
 80078d4:	f000 f908 	bl	8007ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078d8:	4b1d      	ldr	r3, [pc, #116]	; (8007950 <pvPortMalloc+0x188>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	4a1b      	ldr	r2, [pc, #108]	; (8007950 <pvPortMalloc+0x188>)
 80078e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078e6:	4b1a      	ldr	r3, [pc, #104]	; (8007950 <pvPortMalloc+0x188>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b1b      	ldr	r3, [pc, #108]	; (8007958 <pvPortMalloc+0x190>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d203      	bcs.n	80078fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078f2:	4b17      	ldr	r3, [pc, #92]	; (8007950 <pvPortMalloc+0x188>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a18      	ldr	r2, [pc, #96]	; (8007958 <pvPortMalloc+0x190>)
 80078f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	4b13      	ldr	r3, [pc, #76]	; (800794c <pvPortMalloc+0x184>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	431a      	orrs	r2, r3
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	2200      	movs	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800790e:	4b13      	ldr	r3, [pc, #76]	; (800795c <pvPortMalloc+0x194>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3301      	adds	r3, #1
 8007914:	4a11      	ldr	r2, [pc, #68]	; (800795c <pvPortMalloc+0x194>)
 8007916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007918:	f7fe fcfa 	bl	8006310 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <pvPortMalloc+0x174>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	60fb      	str	r3, [r7, #12]
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <pvPortMalloc+0x172>
	return pvReturn;
 800793c:	69fb      	ldr	r3, [r7, #28]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3728      	adds	r7, #40	; 0x28
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20004a48 	.word	0x20004a48
 800794c:	20004a5c 	.word	0x20004a5c
 8007950:	20004a4c 	.word	0x20004a4c
 8007954:	20004a40 	.word	0x20004a40
 8007958:	20004a50 	.word	0x20004a50
 800795c:	20004a54 	.word	0x20004a54

08007960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d04d      	beq.n	8007a0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007972:	2308      	movs	r3, #8
 8007974:	425b      	negs	r3, r3
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	4413      	add	r3, r2
 800797a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <vPortFree+0xb8>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4013      	ands	r3, r2
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <vPortFree+0x44>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	60fb      	str	r3, [r7, #12]
}
 80079a0:	bf00      	nop
 80079a2:	e7fe      	b.n	80079a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <vPortFree+0x62>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	60bb      	str	r3, [r7, #8]
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	685a      	ldr	r2, [r3, #4]
 80079c6:	4b14      	ldr	r3, [pc, #80]	; (8007a18 <vPortFree+0xb8>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4013      	ands	r3, r2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01e      	beq.n	8007a0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d11a      	bne.n	8007a0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	4b0e      	ldr	r3, [pc, #56]	; (8007a18 <vPortFree+0xb8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	43db      	mvns	r3, r3
 80079e2:	401a      	ands	r2, r3
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079e8:	f7fe fc84 	bl	80062f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <vPortFree+0xbc>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4413      	add	r3, r2
 80079f6:	4a09      	ldr	r2, [pc, #36]	; (8007a1c <vPortFree+0xbc>)
 80079f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079fa:	6938      	ldr	r0, [r7, #16]
 80079fc:	f000 f874 	bl	8007ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a00:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <vPortFree+0xc0>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	4a06      	ldr	r2, [pc, #24]	; (8007a20 <vPortFree+0xc0>)
 8007a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a0a:	f7fe fc81 	bl	8006310 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a0e:	bf00      	nop
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20004a5c 	.word	0x20004a5c
 8007a1c:	20004a4c 	.word	0x20004a4c
 8007a20:	20004a58 	.word	0x20004a58

08007a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a30:	4b27      	ldr	r3, [pc, #156]	; (8007ad0 <prvHeapInit+0xac>)
 8007a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00c      	beq.n	8007a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	3307      	adds	r3, #7
 8007a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 0307 	bic.w	r3, r3, #7
 8007a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	4a1f      	ldr	r2, [pc, #124]	; (8007ad0 <prvHeapInit+0xac>)
 8007a54:	4413      	add	r3, r2
 8007a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a5c:	4a1d      	ldr	r2, [pc, #116]	; (8007ad4 <prvHeapInit+0xb0>)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a62:	4b1c      	ldr	r3, [pc, #112]	; (8007ad4 <prvHeapInit+0xb0>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a70:	2208      	movs	r2, #8
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0307 	bic.w	r3, r3, #7
 8007a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <prvHeapInit+0xb4>)
 8007a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a86:	4b14      	ldr	r3, [pc, #80]	; (8007ad8 <prvHeapInit+0xb4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a8e:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <prvHeapInit+0xb4>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <prvHeapInit+0xb4>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	4a0a      	ldr	r2, [pc, #40]	; (8007adc <prvHeapInit+0xb8>)
 8007ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4a09      	ldr	r2, [pc, #36]	; (8007ae0 <prvHeapInit+0xbc>)
 8007aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007abc:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <prvHeapInit+0xc0>)
 8007abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ac2:	601a      	str	r2, [r3, #0]
}
 8007ac4:	bf00      	nop
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr
 8007ad0:	20000e40 	.word	0x20000e40
 8007ad4:	20004a40 	.word	0x20004a40
 8007ad8:	20004a48 	.word	0x20004a48
 8007adc:	20004a50 	.word	0x20004a50
 8007ae0:	20004a4c 	.word	0x20004a4c
 8007ae4:	20004a5c 	.word	0x20004a5c

08007ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007af0:	4b28      	ldr	r3, [pc, #160]	; (8007b94 <prvInsertBlockIntoFreeList+0xac>)
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	e002      	b.n	8007afc <prvInsertBlockIntoFreeList+0x14>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d8f7      	bhi.n	8007af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	4413      	add	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d108      	bne.n	8007b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	441a      	add	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	441a      	add	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d118      	bne.n	8007b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4b15      	ldr	r3, [pc, #84]	; (8007b98 <prvInsertBlockIntoFreeList+0xb0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d00d      	beq.n	8007b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	441a      	add	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e008      	b.n	8007b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b66:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <prvInsertBlockIntoFreeList+0xb0>)
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	e003      	b.n	8007b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d002      	beq.n	8007b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b86:	bf00      	nop
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	20004a40 	.word	0x20004a40
 8007b98:	20004a48 	.word	0x20004a48

08007b9c <__libc_init_array>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	4d0d      	ldr	r5, [pc, #52]	; (8007bd4 <__libc_init_array+0x38>)
 8007ba0:	4c0d      	ldr	r4, [pc, #52]	; (8007bd8 <__libc_init_array+0x3c>)
 8007ba2:	1b64      	subs	r4, r4, r5
 8007ba4:	10a4      	asrs	r4, r4, #2
 8007ba6:	2600      	movs	r6, #0
 8007ba8:	42a6      	cmp	r6, r4
 8007baa:	d109      	bne.n	8007bc0 <__libc_init_array+0x24>
 8007bac:	4d0b      	ldr	r5, [pc, #44]	; (8007bdc <__libc_init_array+0x40>)
 8007bae:	4c0c      	ldr	r4, [pc, #48]	; (8007be0 <__libc_init_array+0x44>)
 8007bb0:	f000 f8f6 	bl	8007da0 <_init>
 8007bb4:	1b64      	subs	r4, r4, r5
 8007bb6:	10a4      	asrs	r4, r4, #2
 8007bb8:	2600      	movs	r6, #0
 8007bba:	42a6      	cmp	r6, r4
 8007bbc:	d105      	bne.n	8007bca <__libc_init_array+0x2e>
 8007bbe:	bd70      	pop	{r4, r5, r6, pc}
 8007bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc4:	4798      	blx	r3
 8007bc6:	3601      	adds	r6, #1
 8007bc8:	e7ee      	b.n	8007ba8 <__libc_init_array+0xc>
 8007bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bce:	4798      	blx	r3
 8007bd0:	3601      	adds	r6, #1
 8007bd2:	e7f2      	b.n	8007bba <__libc_init_array+0x1e>
 8007bd4:	08007fc0 	.word	0x08007fc0
 8007bd8:	08007fc0 	.word	0x08007fc0
 8007bdc:	08007fc0 	.word	0x08007fc0
 8007be0:	08007fc4 	.word	0x08007fc4

08007be4 <__retarget_lock_acquire_recursive>:
 8007be4:	4770      	bx	lr

08007be6 <__retarget_lock_release_recursive>:
 8007be6:	4770      	bx	lr

08007be8 <memcpy>:
 8007be8:	440a      	add	r2, r1
 8007bea:	4291      	cmp	r1, r2
 8007bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8007bf0:	d100      	bne.n	8007bf4 <memcpy+0xc>
 8007bf2:	4770      	bx	lr
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bfe:	4291      	cmp	r1, r2
 8007c00:	d1f9      	bne.n	8007bf6 <memcpy+0xe>
 8007c02:	bd10      	pop	{r4, pc}

08007c04 <memset>:
 8007c04:	4402      	add	r2, r0
 8007c06:	4603      	mov	r3, r0
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d100      	bne.n	8007c0e <memset+0xa>
 8007c0c:	4770      	bx	lr
 8007c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c12:	e7f9      	b.n	8007c08 <memset+0x4>

08007c14 <cleanup_glue>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	460c      	mov	r4, r1
 8007c18:	6809      	ldr	r1, [r1, #0]
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	b109      	cbz	r1, 8007c22 <cleanup_glue+0xe>
 8007c1e:	f7ff fff9 	bl	8007c14 <cleanup_glue>
 8007c22:	4621      	mov	r1, r4
 8007c24:	4628      	mov	r0, r5
 8007c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c2a:	f000 b869 	b.w	8007d00 <_free_r>
	...

08007c30 <_reclaim_reent>:
 8007c30:	4b2c      	ldr	r3, [pc, #176]	; (8007ce4 <_reclaim_reent+0xb4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4283      	cmp	r3, r0
 8007c36:	b570      	push	{r4, r5, r6, lr}
 8007c38:	4604      	mov	r4, r0
 8007c3a:	d051      	beq.n	8007ce0 <_reclaim_reent+0xb0>
 8007c3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007c3e:	b143      	cbz	r3, 8007c52 <_reclaim_reent+0x22>
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d14a      	bne.n	8007cdc <_reclaim_reent+0xac>
 8007c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c48:	6819      	ldr	r1, [r3, #0]
 8007c4a:	b111      	cbz	r1, 8007c52 <_reclaim_reent+0x22>
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 f857 	bl	8007d00 <_free_r>
 8007c52:	6961      	ldr	r1, [r4, #20]
 8007c54:	b111      	cbz	r1, 8007c5c <_reclaim_reent+0x2c>
 8007c56:	4620      	mov	r0, r4
 8007c58:	f000 f852 	bl	8007d00 <_free_r>
 8007c5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007c5e:	b111      	cbz	r1, 8007c66 <_reclaim_reent+0x36>
 8007c60:	4620      	mov	r0, r4
 8007c62:	f000 f84d 	bl	8007d00 <_free_r>
 8007c66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007c68:	b111      	cbz	r1, 8007c70 <_reclaim_reent+0x40>
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 f848 	bl	8007d00 <_free_r>
 8007c70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007c72:	b111      	cbz	r1, 8007c7a <_reclaim_reent+0x4a>
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 f843 	bl	8007d00 <_free_r>
 8007c7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007c7c:	b111      	cbz	r1, 8007c84 <_reclaim_reent+0x54>
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 f83e 	bl	8007d00 <_free_r>
 8007c84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007c86:	b111      	cbz	r1, 8007c8e <_reclaim_reent+0x5e>
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 f839 	bl	8007d00 <_free_r>
 8007c8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007c90:	b111      	cbz	r1, 8007c98 <_reclaim_reent+0x68>
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 f834 	bl	8007d00 <_free_r>
 8007c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c9a:	b111      	cbz	r1, 8007ca2 <_reclaim_reent+0x72>
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f000 f82f 	bl	8007d00 <_free_r>
 8007ca2:	69a3      	ldr	r3, [r4, #24]
 8007ca4:	b1e3      	cbz	r3, 8007ce0 <_reclaim_reent+0xb0>
 8007ca6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007ca8:	4620      	mov	r0, r4
 8007caa:	4798      	blx	r3
 8007cac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007cae:	b1b9      	cbz	r1, 8007ce0 <_reclaim_reent+0xb0>
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cb6:	f7ff bfad 	b.w	8007c14 <cleanup_glue>
 8007cba:	5949      	ldr	r1, [r1, r5]
 8007cbc:	b941      	cbnz	r1, 8007cd0 <_reclaim_reent+0xa0>
 8007cbe:	3504      	adds	r5, #4
 8007cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cc2:	2d80      	cmp	r5, #128	; 0x80
 8007cc4:	68d9      	ldr	r1, [r3, #12]
 8007cc6:	d1f8      	bne.n	8007cba <_reclaim_reent+0x8a>
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 f819 	bl	8007d00 <_free_r>
 8007cce:	e7ba      	b.n	8007c46 <_reclaim_reent+0x16>
 8007cd0:	680e      	ldr	r6, [r1, #0]
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f000 f814 	bl	8007d00 <_free_r>
 8007cd8:	4631      	mov	r1, r6
 8007cda:	e7ef      	b.n	8007cbc <_reclaim_reent+0x8c>
 8007cdc:	2500      	movs	r5, #0
 8007cde:	e7ef      	b.n	8007cc0 <_reclaim_reent+0x90>
 8007ce0:	bd70      	pop	{r4, r5, r6, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000010 	.word	0x20000010

08007ce8 <__malloc_lock>:
 8007ce8:	4801      	ldr	r0, [pc, #4]	; (8007cf0 <__malloc_lock+0x8>)
 8007cea:	f7ff bf7b 	b.w	8007be4 <__retarget_lock_acquire_recursive>
 8007cee:	bf00      	nop
 8007cf0:	20004ea4 	.word	0x20004ea4

08007cf4 <__malloc_unlock>:
 8007cf4:	4801      	ldr	r0, [pc, #4]	; (8007cfc <__malloc_unlock+0x8>)
 8007cf6:	f7ff bf76 	b.w	8007be6 <__retarget_lock_release_recursive>
 8007cfa:	bf00      	nop
 8007cfc:	20004ea4 	.word	0x20004ea4

08007d00 <_free_r>:
 8007d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d02:	2900      	cmp	r1, #0
 8007d04:	d048      	beq.n	8007d98 <_free_r+0x98>
 8007d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d0a:	9001      	str	r0, [sp, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007d12:	bfb8      	it	lt
 8007d14:	18e4      	addlt	r4, r4, r3
 8007d16:	f7ff ffe7 	bl	8007ce8 <__malloc_lock>
 8007d1a:	4a20      	ldr	r2, [pc, #128]	; (8007d9c <_free_r+0x9c>)
 8007d1c:	9801      	ldr	r0, [sp, #4]
 8007d1e:	6813      	ldr	r3, [r2, #0]
 8007d20:	4615      	mov	r5, r2
 8007d22:	b933      	cbnz	r3, 8007d32 <_free_r+0x32>
 8007d24:	6063      	str	r3, [r4, #4]
 8007d26:	6014      	str	r4, [r2, #0]
 8007d28:	b003      	add	sp, #12
 8007d2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d2e:	f7ff bfe1 	b.w	8007cf4 <__malloc_unlock>
 8007d32:	42a3      	cmp	r3, r4
 8007d34:	d90b      	bls.n	8007d4e <_free_r+0x4e>
 8007d36:	6821      	ldr	r1, [r4, #0]
 8007d38:	1862      	adds	r2, r4, r1
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	bf04      	itt	eq
 8007d3e:	681a      	ldreq	r2, [r3, #0]
 8007d40:	685b      	ldreq	r3, [r3, #4]
 8007d42:	6063      	str	r3, [r4, #4]
 8007d44:	bf04      	itt	eq
 8007d46:	1852      	addeq	r2, r2, r1
 8007d48:	6022      	streq	r2, [r4, #0]
 8007d4a:	602c      	str	r4, [r5, #0]
 8007d4c:	e7ec      	b.n	8007d28 <_free_r+0x28>
 8007d4e:	461a      	mov	r2, r3
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	b10b      	cbz	r3, 8007d58 <_free_r+0x58>
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	d9fa      	bls.n	8007d4e <_free_r+0x4e>
 8007d58:	6811      	ldr	r1, [r2, #0]
 8007d5a:	1855      	adds	r5, r2, r1
 8007d5c:	42a5      	cmp	r5, r4
 8007d5e:	d10b      	bne.n	8007d78 <_free_r+0x78>
 8007d60:	6824      	ldr	r4, [r4, #0]
 8007d62:	4421      	add	r1, r4
 8007d64:	1854      	adds	r4, r2, r1
 8007d66:	42a3      	cmp	r3, r4
 8007d68:	6011      	str	r1, [r2, #0]
 8007d6a:	d1dd      	bne.n	8007d28 <_free_r+0x28>
 8007d6c:	681c      	ldr	r4, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	6053      	str	r3, [r2, #4]
 8007d72:	4421      	add	r1, r4
 8007d74:	6011      	str	r1, [r2, #0]
 8007d76:	e7d7      	b.n	8007d28 <_free_r+0x28>
 8007d78:	d902      	bls.n	8007d80 <_free_r+0x80>
 8007d7a:	230c      	movs	r3, #12
 8007d7c:	6003      	str	r3, [r0, #0]
 8007d7e:	e7d3      	b.n	8007d28 <_free_r+0x28>
 8007d80:	6825      	ldr	r5, [r4, #0]
 8007d82:	1961      	adds	r1, r4, r5
 8007d84:	428b      	cmp	r3, r1
 8007d86:	bf04      	itt	eq
 8007d88:	6819      	ldreq	r1, [r3, #0]
 8007d8a:	685b      	ldreq	r3, [r3, #4]
 8007d8c:	6063      	str	r3, [r4, #4]
 8007d8e:	bf04      	itt	eq
 8007d90:	1949      	addeq	r1, r1, r5
 8007d92:	6021      	streq	r1, [r4, #0]
 8007d94:	6054      	str	r4, [r2, #4]
 8007d96:	e7c7      	b.n	8007d28 <_free_r+0x28>
 8007d98:	b003      	add	sp, #12
 8007d9a:	bd30      	pop	{r4, r5, pc}
 8007d9c:	20004a60 	.word	0x20004a60

08007da0 <_init>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	bf00      	nop
 8007da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da6:	bc08      	pop	{r3}
 8007da8:	469e      	mov	lr, r3
 8007daa:	4770      	bx	lr

08007dac <_fini>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr
